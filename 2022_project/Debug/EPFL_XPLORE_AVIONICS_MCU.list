
EPFL_XPLORE_AVIONICS_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f30c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c4  0800f5b0  0800f5b0  0001f5b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fc74  0800fc74  0001fc74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fc7c  0800fc7c  0001fc7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fc80  0800fc80  0001fc80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001ec  24000000  0800fc84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000009f0  240001ec  0800fe70  000201ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000bdc  0800fe70  00020bdc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   00038bec  00000000  00000000  0002021a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005047  00000000  00000000  00058e06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002268  00000000  00000000  0005de50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000020d0  00000000  00000000  000600b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ef78  00000000  00000000  00062188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00028c73  00000000  00000000  000a1100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0019131a  00000000  00000000  000c9d73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0025b08d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a7bc  00000000  00000000  0025b0e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001ec 	.word	0x240001ec
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f594 	.word	0x0800f594

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f0 	.word	0x240001f0
 80002dc:	0800f594 	.word	0x0800f594

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800068c:	b0a9      	sub	sp, #164	; 0xa4
 800068e:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000690:	f003 f872 	bl	8003778 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000694:	f000 f8c2 	bl	800081c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000698:	f000 f946 	bl	8000928 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069c:	f001 f9c6 	bl	8001a2c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80006a0:	f000 faf2 	bl	8000c88 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80006a4:	f000 fb54 	bl	8000d50 <MX_FDCAN2_Init>
  MX_I2C1_Init();
 80006a8:	f000 fbb6 	bl	8000e18 <MX_I2C1_Init>
  MX_I2C2_Init();
 80006ac:	f000 fbf4 	bl	8000e98 <MX_I2C2_Init>
  MX_I2C4_Init();
 80006b0:	f000 fc32 	bl	8000f18 <MX_I2C4_Init>
  MX_USART1_Init();
 80006b4:	f000 fd56 	bl	8001164 <MX_USART1_Init>
  MX_USART2_Init();
 80006b8:	f000 fda0 	bl	80011fc <MX_USART2_Init>
  MX_USART3_Init();
 80006bc:	f000 fdea 	bl	8001294 <MX_USART3_Init>
  MX_ADC1_Init();
 80006c0:	f000 f960 	bl	8000984 <MX_ADC1_Init>
  MX_ADC2_Init();
 80006c4:	f000 f9d8 	bl	8000a78 <MX_ADC2_Init>
  MX_ADC3_Init();
 80006c8:	f000 fa3c 	bl	8000b44 <MX_ADC3_Init>
  MX_QUADSPI_Init();
 80006cc:	f000 fe7a 	bl	80013c4 <MX_QUADSPI_Init>
  MX_SPI1_Init();
 80006d0:	f000 fea4 	bl	800141c <MX_SPI1_Init>
  MX_SPI2_Init();
 80006d4:	f000 fef8 	bl	80014c8 <MX_SPI2_Init>
  MX_SPI4_Init();
 80006d8:	f000 ff4c 	bl	8001574 <MX_SPI4_Init>
  MX_USART6_Init();
 80006dc:	f000 fe26 	bl	800132c <MX_USART6_Init>
  MX_DAC1_Init();
 80006e0:	f000 fa96 	bl	8000c10 <MX_DAC1_Init>
  MX_LPUART1_UART_Init();
 80006e4:	f000 fc58 	bl	8000f98 <MX_LPUART1_UART_Init>
  MX_UART4_Init();
 80006e8:	f000 fca4 	bl	8001034 <MX_UART4_Init>
  MX_UART8_Init();
 80006ec:	f000 fcee 	bl	80010cc <MX_UART8_Init>
  MX_TIM1_Init();
 80006f0:	f000 ff96 	bl	8001620 <MX_TIM1_Init>
  MX_TIM5_Init();
 80006f4:	f001 f89c 	bl	8001830 <MX_TIM5_Init>
  MX_TIM15_Init();
 80006f8:	f001 f8f4 	bl	80018e4 <MX_TIM15_Init>
  MX_TIM4_Init();
 80006fc:	f001 f820 	bl	8001740 <MX_TIM4_Init>
//      val = hx711_value(&loadcell);
//      sprintf(MSG, "Val: = %d\r\n", val);
//      HAL_UART_Transmit(&huart4, MSG, strlen((char*) MSG), 100);
//
//    }
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000700:	2200      	movs	r2, #0
 8000702:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000706:	4840      	ldr	r0, [pc, #256]	; (8000808 <main+0x180>)
 8000708:	f005 f8d0 	bl	80058ac <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800070c:	200a      	movs	r0, #10
 800070e:	f003 f8c5 	bl	800389c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000712:	2201      	movs	r2, #1
 8000714:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000718:	483b      	ldr	r0, [pc, #236]	; (8000808 <main+0x180>)
 800071a:	f005 f8c7 	bl	80058ac <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800071e:	200a      	movs	r0, #10
 8000720:	f003 f8bc 	bl	800389c <HAL_Delay>

    bno055_assignI2C(&hi2c1);
 8000724:	4839      	ldr	r0, [pc, #228]	; (800080c <main+0x184>)
 8000726:	f002 fefd 	bl	8003524 <bno055_assignI2C>
    bno055_setup();
 800072a:	f002 fd48 	bl	80031be <bno055_setup>
    bno055_setOperationModeNDOF();
 800072e:	f002 fd33 	bl	8003198 <bno055_setOperationModeNDOF>

    while (1)
    {
      /* USER CODE END WHILE */
      bno055_vector_t v = bno055_getVectorEuler();
 8000732:	f002 fe91 	bl	8003458 <bno055_getVectorEuler>
 8000736:	eeb0 4b40 	vmov.f64	d4, d0
 800073a:	eeb0 5b41 	vmov.f64	d5, d1
 800073e:	eeb0 6b42 	vmov.f64	d6, d2
 8000742:	eeb0 7b43 	vmov.f64	d7, d3
 8000746:	ed87 4b00 	vstr	d4, [r7]
 800074a:	ed87 5b02 	vstr	d5, [r7, #8]
 800074e:	ed87 6b04 	vstr	d6, [r7, #16]
 8000752:	ed87 7b06 	vstr	d7, [r7, #24]
      sprintf(MSG, "Heading: %.2f Roll: %.2f Pitch: %.2f\r\n", v.x, v.y, v.z);
 8000756:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800075a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800075e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000762:	f107 0624 	add.w	r6, r7, #36	; 0x24
 8000766:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800076a:	e9cd 2300 	strd	r2, r3, [sp]
 800076e:	4622      	mov	r2, r4
 8000770:	462b      	mov	r3, r5
 8000772:	4927      	ldr	r1, [pc, #156]	; (8000810 <main+0x188>)
 8000774:	4630      	mov	r0, r6
 8000776:	f00c fd5b 	bl	800d230 <siprintf>
      HAL_UART_Transmit(&huart4, MSG, strlen((char*) MSG), 100);
 800077a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff fdae 	bl	80002e0 <strlen>
 8000784:	4603      	mov	r3, r0
 8000786:	b29a      	uxth	r2, r3
 8000788:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800078c:	2364      	movs	r3, #100	; 0x64
 800078e:	4821      	ldr	r0, [pc, #132]	; (8000814 <main+0x18c>)
 8000790:	f00a f8f4 	bl	800a97c <HAL_UART_Transmit>
      v = bno055_getVectorQuaternion();
 8000794:	f002 fe93 	bl	80034be <bno055_getVectorQuaternion>
 8000798:	eeb0 4b40 	vmov.f64	d4, d0
 800079c:	eeb0 5b41 	vmov.f64	d5, d1
 80007a0:	eeb0 6b42 	vmov.f64	d6, d2
 80007a4:	eeb0 7b43 	vmov.f64	d7, d3
 80007a8:	ed87 4b00 	vstr	d4, [r7]
 80007ac:	ed87 5b02 	vstr	d5, [r7, #8]
 80007b0:	ed87 6b04 	vstr	d6, [r7, #16]
 80007b4:	ed87 7b06 	vstr	d7, [r7, #24]
      sprintf(MSG, "W: %.2f X: %.2f Y: %.2f Z: %.2f\r\n", v.w, v.x, v.y, v.z);
 80007b8:	e9d7 8900 	ldrd	r8, r9, [r7]
 80007bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80007c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80007c4:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80007c8:	f107 0624 	add.w	r6, r7, #36	; 0x24
 80007cc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80007d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80007d4:	e9cd 2300 	strd	r2, r3, [sp]
 80007d8:	4642      	mov	r2, r8
 80007da:	464b      	mov	r3, r9
 80007dc:	490e      	ldr	r1, [pc, #56]	; (8000818 <main+0x190>)
 80007de:	4630      	mov	r0, r6
 80007e0:	f00c fd26 	bl	800d230 <siprintf>
      HAL_UART_Transmit(&huart4, MSG, strlen((char*) MSG), 100);
 80007e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff fd79 	bl	80002e0 <strlen>
 80007ee:	4603      	mov	r3, r0
 80007f0:	b29a      	uxth	r2, r3
 80007f2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80007f6:	2364      	movs	r3, #100	; 0x64
 80007f8:	4806      	ldr	r0, [pc, #24]	; (8000814 <main+0x18c>)
 80007fa:	f00a f8bf 	bl	800a97c <HAL_UART_Transmit>
      HAL_Delay(100);
 80007fe:	2064      	movs	r0, #100	; 0x64
 8000800:	f003 f84c 	bl	800389c <HAL_Delay>
    {
 8000804:	e795      	b.n	8000732 <main+0xaa>
 8000806:	bf00      	nop
 8000808:	58020800 	.word	0x58020800
 800080c:	24000414 	.word	0x24000414
 8000810:	0800f5b0 	.word	0x0800f5b0
 8000814:	24000960 	.word	0x24000960
 8000818:	0800f5d8 	.word	0x0800f5d8

0800081c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b09c      	sub	sp, #112	; 0x70
 8000820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000826:	224c      	movs	r2, #76	; 0x4c
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f00c f826 	bl	800c87c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2220      	movs	r2, #32
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f00c f820 	bl	800c87c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800083c:	2002      	movs	r0, #2
 800083e:	f005 fd5b 	bl	80062f8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000842:	2300      	movs	r3, #0
 8000844:	603b      	str	r3, [r7, #0]
 8000846:	4b35      	ldr	r3, [pc, #212]	; (800091c <SystemClock_Config+0x100>)
 8000848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800084a:	4a34      	ldr	r2, [pc, #208]	; (800091c <SystemClock_Config+0x100>)
 800084c:	f023 0301 	bic.w	r3, r3, #1
 8000850:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000852:	4b32      	ldr	r3, [pc, #200]	; (800091c <SystemClock_Config+0x100>)
 8000854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	4b30      	ldr	r3, [pc, #192]	; (8000920 <SystemClock_Config+0x104>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000864:	4a2e      	ldr	r2, [pc, #184]	; (8000920 <SystemClock_Config+0x104>)
 8000866:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800086a:	6193      	str	r3, [r2, #24]
 800086c:	4b2c      	ldr	r3, [pc, #176]	; (8000920 <SystemClock_Config+0x104>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000874:	603b      	str	r3, [r7, #0]
 8000876:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000878:	bf00      	nop
 800087a:	4b29      	ldr	r3, [pc, #164]	; (8000920 <SystemClock_Config+0x104>)
 800087c:	699b      	ldr	r3, [r3, #24]
 800087e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000886:	d1f8      	bne.n	800087a <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000888:	4b26      	ldr	r3, [pc, #152]	; (8000924 <SystemClock_Config+0x108>)
 800088a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800088c:	4a25      	ldr	r2, [pc, #148]	; (8000924 <SystemClock_Config+0x108>)
 800088e:	f023 0303 	bic.w	r3, r3, #3
 8000892:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000894:	2302      	movs	r3, #2
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000898:	2301      	movs	r3, #1
 800089a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800089c:	2340      	movs	r3, #64	; 0x40
 800089e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a0:	2302      	movs	r3, #2
 80008a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008a4:	2300      	movs	r3, #0
 80008a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008a8:	2304      	movs	r3, #4
 80008aa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 80008ac:	2309      	movs	r3, #9
 80008ae:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008b0:	2302      	movs	r3, #2
 80008b2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80008b4:	2303      	movs	r3, #3
 80008b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008b8:	2302      	movs	r3, #2
 80008ba:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008bc:	230c      	movs	r3, #12
 80008be:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80008c0:	2302      	movs	r3, #2
 80008c2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 80008c4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80008c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ce:	4618      	mov	r0, r3
 80008d0:	f005 fe06 	bl	80064e0 <HAL_RCC_OscConfig>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008da:	f001 f9b5 	bl	8001c48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008de:	233f      	movs	r3, #63	; 0x3f
 80008e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008e2:	2300      	movs	r3, #0
 80008e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008ee:	2340      	movs	r3, #64	; 0x40
 80008f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008f2:	2340      	movs	r3, #64	; 0x40
 80008f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008fa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008fc:	2340      	movs	r3, #64	; 0x40
 80008fe:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	2101      	movs	r1, #1
 8000904:	4618      	mov	r0, r3
 8000906:	f006 f9fb 	bl	8006d00 <HAL_RCC_ClockConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000910:	f001 f99a 	bl	8001c48 <Error_Handler>
  }
}
 8000914:	bf00      	nop
 8000916:	3770      	adds	r7, #112	; 0x70
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	58000400 	.word	0x58000400
 8000920:	58024800 	.word	0x58024800
 8000924:	58024400 	.word	0x58024400

08000928 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b0b0      	sub	sp, #192	; 0xc0
 800092c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	22bc      	movs	r2, #188	; 0xbc
 8000932:	2100      	movs	r1, #0
 8000934:	4618      	mov	r0, r3
 8000936:	f00b ffa1 	bl	800c87c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800093a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800093e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000940:	2304      	movs	r3, #4
 8000942:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8000944:	2309      	movs	r3, #9
 8000946:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000948:	2304      	movs	r3, #4
 800094a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800094c:	2302      	movs	r3, #2
 800094e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000950:	2302      	movs	r3, #2
 8000952:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000954:	23c0      	movs	r3, #192	; 0xc0
 8000956:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000958:	2320      	movs	r3, #32
 800095a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 800095c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000962:	2300      	movs	r3, #0
 8000964:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	4618      	mov	r0, r3
 800096c:	f006 fd54 	bl	8007418 <HAL_RCCEx_PeriphCLKConfig>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8000976:	f001 f967 	bl	8001c48 <Error_Handler>
  }
}
 800097a:	bf00      	nop
 800097c:	37c0      	adds	r7, #192	; 0xc0
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
	...

08000984 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000996:	463b      	mov	r3, r7
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
 80009a4:	615a      	str	r2, [r3, #20]
 80009a6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80009a8:	4b2f      	ldr	r3, [pc, #188]	; (8000a68 <MX_ADC1_Init+0xe4>)
 80009aa:	4a30      	ldr	r2, [pc, #192]	; (8000a6c <MX_ADC1_Init+0xe8>)
 80009ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009ae:	4b2e      	ldr	r3, [pc, #184]	; (8000a68 <MX_ADC1_Init+0xe4>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80009b4:	4b2c      	ldr	r3, [pc, #176]	; (8000a68 <MX_ADC1_Init+0xe4>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009ba:	4b2b      	ldr	r3, [pc, #172]	; (8000a68 <MX_ADC1_Init+0xe4>)
 80009bc:	2200      	movs	r2, #0
 80009be:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009c0:	4b29      	ldr	r3, [pc, #164]	; (8000a68 <MX_ADC1_Init+0xe4>)
 80009c2:	2204      	movs	r2, #4
 80009c4:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009c6:	4b28      	ldr	r3, [pc, #160]	; (8000a68 <MX_ADC1_Init+0xe4>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009cc:	4b26      	ldr	r3, [pc, #152]	; (8000a68 <MX_ADC1_Init+0xe4>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80009d2:	4b25      	ldr	r3, [pc, #148]	; (8000a68 <MX_ADC1_Init+0xe4>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009d8:	4b23      	ldr	r3, [pc, #140]	; (8000a68 <MX_ADC1_Init+0xe4>)
 80009da:	2200      	movs	r2, #0
 80009dc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009de:	4b22      	ldr	r3, [pc, #136]	; (8000a68 <MX_ADC1_Init+0xe4>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009e4:	4b20      	ldr	r3, [pc, #128]	; (8000a68 <MX_ADC1_Init+0xe4>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80009ea:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <MX_ADC1_Init+0xe4>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009f0:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <MX_ADC1_Init+0xe4>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009f6:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <MX_ADC1_Init+0xe4>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80009fc:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_ADC1_Init+0xe4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a04:	4818      	ldr	r0, [pc, #96]	; (8000a68 <MX_ADC1_Init+0xe4>)
 8000a06:	f003 f905 	bl	8003c14 <HAL_ADC_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a10:	f001 f91a 	bl	8001c48 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4812      	ldr	r0, [pc, #72]	; (8000a68 <MX_ADC1_Init+0xe4>)
 8000a20:	f003 ff18 	bl	8004854 <HAL_ADCEx_MultiModeConfigChannel>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000a2a:	f001 f90d 	bl	8001c48 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <MX_ADC1_Init+0xec>)
 8000a30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a32:	2306      	movs	r3, #6
 8000a34:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <MX_ADC1_Init+0xf0>)
 8000a3c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a3e:	2304      	movs	r3, #4
 8000a40:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a46:	2300      	movs	r3, #0
 8000a48:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a4a:	463b      	mov	r3, r7
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4806      	ldr	r0, [pc, #24]	; (8000a68 <MX_ADC1_Init+0xe4>)
 8000a50:	f003 fa80 	bl	8003f54 <HAL_ADC_ConfigChannel>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000a5a:	f001 f8f5 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	3728      	adds	r7, #40	; 0x28
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	240005d4 	.word	0x240005d4
 8000a6c:	40022000 	.word	0x40022000
 8000a70:	10c00010 	.word	0x10c00010
 8000a74:	47ff0000 	.word	0x47ff0000

08000a78 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b088      	sub	sp, #32
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
 8000a8c:	615a      	str	r2, [r3, #20]
 8000a8e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a90:	4b28      	ldr	r3, [pc, #160]	; (8000b34 <MX_ADC2_Init+0xbc>)
 8000a92:	4a29      	ldr	r2, [pc, #164]	; (8000b38 <MX_ADC2_Init+0xc0>)
 8000a94:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a96:	4b27      	ldr	r3, [pc, #156]	; (8000b34 <MX_ADC2_Init+0xbc>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000a9c:	4b25      	ldr	r3, [pc, #148]	; (8000b34 <MX_ADC2_Init+0xbc>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000aa2:	4b24      	ldr	r3, [pc, #144]	; (8000b34 <MX_ADC2_Init+0xbc>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aa8:	4b22      	ldr	r3, [pc, #136]	; (8000b34 <MX_ADC2_Init+0xbc>)
 8000aaa:	2204      	movs	r2, #4
 8000aac:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000aae:	4b21      	ldr	r3, [pc, #132]	; (8000b34 <MX_ADC2_Init+0xbc>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000ab4:	4b1f      	ldr	r3, [pc, #124]	; (8000b34 <MX_ADC2_Init+0xbc>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000aba:	4b1e      	ldr	r3, [pc, #120]	; (8000b34 <MX_ADC2_Init+0xbc>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ac0:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <MX_ADC2_Init+0xbc>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ac6:	4b1b      	ldr	r3, [pc, #108]	; (8000b34 <MX_ADC2_Init+0xbc>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000acc:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <MX_ADC2_Init+0xbc>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ad2:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <MX_ADC2_Init+0xbc>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ad8:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <MX_ADC2_Init+0xbc>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <MX_ADC2_Init+0xbc>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000ae4:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <MX_ADC2_Init+0xbc>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000aec:	4811      	ldr	r0, [pc, #68]	; (8000b34 <MX_ADC2_Init+0xbc>)
 8000aee:	f003 f891 	bl	8003c14 <HAL_ADC_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000af8:	f001 f8a6 	bl	8001c48 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000afc:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <MX_ADC2_Init+0xc4>)
 8000afe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b00:	2306      	movs	r3, #6
 8000b02:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000b08:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <MX_ADC2_Init+0xc8>)
 8000b0a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b14:	2300      	movs	r3, #0
 8000b16:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_ADC2_Init+0xbc>)
 8000b1e:	f003 fa19 	bl	8003f54 <HAL_ADC_ConfigChannel>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8000b28:	f001 f88e 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	3720      	adds	r7, #32
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	240003b0 	.word	0x240003b0
 8000b38:	40022100 	.word	0x40022100
 8000b3c:	10c00010 	.word	0x10c00010
 8000b40:	47ff0000 	.word	0x47ff0000

08000b44 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b088      	sub	sp, #32
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
 8000b58:	615a      	str	r2, [r3, #20]
 8000b5a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000b5c:	4b28      	ldr	r3, [pc, #160]	; (8000c00 <MX_ADC3_Init+0xbc>)
 8000b5e:	4a29      	ldr	r2, [pc, #164]	; (8000c04 <MX_ADC3_Init+0xc0>)
 8000b60:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b62:	4b27      	ldr	r3, [pc, #156]	; (8000c00 <MX_ADC3_Init+0xbc>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000b68:	4b25      	ldr	r3, [pc, #148]	; (8000c00 <MX_ADC3_Init+0xbc>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b6e:	4b24      	ldr	r3, [pc, #144]	; (8000c00 <MX_ADC3_Init+0xbc>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b74:	4b22      	ldr	r3, [pc, #136]	; (8000c00 <MX_ADC3_Init+0xbc>)
 8000b76:	2204      	movs	r2, #4
 8000b78:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000b7a:	4b21      	ldr	r3, [pc, #132]	; (8000c00 <MX_ADC3_Init+0xbc>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000b80:	4b1f      	ldr	r3, [pc, #124]	; (8000c00 <MX_ADC3_Init+0xbc>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000b86:	4b1e      	ldr	r3, [pc, #120]	; (8000c00 <MX_ADC3_Init+0xbc>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000b8c:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <MX_ADC3_Init+0xbc>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b92:	4b1b      	ldr	r3, [pc, #108]	; (8000c00 <MX_ADC3_Init+0xbc>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b98:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <MX_ADC3_Init+0xbc>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b9e:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <MX_ADC3_Init+0xbc>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ba4:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <MX_ADC3_Init+0xbc>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000baa:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <MX_ADC3_Init+0xbc>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000bb0:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <MX_ADC3_Init+0xbc>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000bb8:	4811      	ldr	r0, [pc, #68]	; (8000c00 <MX_ADC3_Init+0xbc>)
 8000bba:	f003 f82b 	bl	8003c14 <HAL_ADC_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8000bc4:	f001 f840 	bl	8001c48 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <MX_ADC3_Init+0xc4>)
 8000bca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bcc:	2306      	movs	r3, #6
 8000bce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000bd4:	4b0d      	ldr	r3, [pc, #52]	; (8000c0c <MX_ADC3_Init+0xc8>)
 8000bd6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bd8:	2304      	movs	r3, #4
 8000bda:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	4619      	mov	r1, r3
 8000be8:	4805      	ldr	r0, [pc, #20]	; (8000c00 <MX_ADC3_Init+0xbc>)
 8000bea:	f003 f9b3 	bl	8003f54 <HAL_ADC_ConfigChannel>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8000bf4:	f001 f828 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	3720      	adds	r7, #32
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	24000638 	.word	0x24000638
 8000c04:	58026000 	.word	0x58026000
 8000c08:	2a000400 	.word	0x2a000400
 8000c0c:	47ff0000 	.word	0x47ff0000

08000c10 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	; 0x28
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	2224      	movs	r2, #36	; 0x24
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f00b fe2d 	bl	800c87c <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000c22:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <MX_DAC1_Init+0x70>)
 8000c24:	4a17      	ldr	r2, [pc, #92]	; (8000c84 <MX_DAC1_Init+0x74>)
 8000c26:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000c28:	4815      	ldr	r0, [pc, #84]	; (8000c80 <MX_DAC1_Init+0x70>)
 8000c2a:	f003 ffd4 	bl	8004bd6 <HAL_DAC_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000c34:	f001 f808 	bl	8001c48 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c40:	2300      	movs	r3, #0
 8000c42:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000c44:	2301      	movs	r3, #1
 8000c46:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	2200      	movs	r2, #0
 8000c50:	4619      	mov	r1, r3
 8000c52:	480b      	ldr	r0, [pc, #44]	; (8000c80 <MX_DAC1_Init+0x70>)
 8000c54:	f003 ffe2 	bl	8004c1c <HAL_DAC_ConfigChannel>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000c5e:	f000 fff3 	bl	8001c48 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	2210      	movs	r2, #16
 8000c66:	4619      	mov	r1, r3
 8000c68:	4805      	ldr	r0, [pc, #20]	; (8000c80 <MX_DAC1_Init+0x70>)
 8000c6a:	f003 ffd7 	bl	8004c1c <HAL_DAC_ConfigChannel>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8000c74:	f000 ffe8 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000c78:	bf00      	nop
 8000c7a:	3728      	adds	r7, #40	; 0x28
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	2400039c 	.word	0x2400039c
 8000c84:	40007400 	.word	0x40007400

08000c88 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000c8c:	4b2e      	ldr	r3, [pc, #184]	; (8000d48 <MX_FDCAN1_Init+0xc0>)
 8000c8e:	4a2f      	ldr	r2, [pc, #188]	; (8000d4c <MX_FDCAN1_Init+0xc4>)
 8000c90:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000c92:	4b2d      	ldr	r3, [pc, #180]	; (8000d48 <MX_FDCAN1_Init+0xc0>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000c98:	4b2b      	ldr	r3, [pc, #172]	; (8000d48 <MX_FDCAN1_Init+0xc0>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000c9e:	4b2a      	ldr	r3, [pc, #168]	; (8000d48 <MX_FDCAN1_Init+0xc0>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000ca4:	4b28      	ldr	r3, [pc, #160]	; (8000d48 <MX_FDCAN1_Init+0xc0>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000caa:	4b27      	ldr	r3, [pc, #156]	; (8000d48 <MX_FDCAN1_Init+0xc0>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000cb0:	4b25      	ldr	r3, [pc, #148]	; (8000d48 <MX_FDCAN1_Init+0xc0>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000cb6:	4b24      	ldr	r3, [pc, #144]	; (8000d48 <MX_FDCAN1_Init+0xc0>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000cbc:	4b22      	ldr	r3, [pc, #136]	; (8000d48 <MX_FDCAN1_Init+0xc0>)
 8000cbe:	2202      	movs	r2, #2
 8000cc0:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000cc2:	4b21      	ldr	r3, [pc, #132]	; (8000d48 <MX_FDCAN1_Init+0xc0>)
 8000cc4:	2202      	movs	r2, #2
 8000cc6:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000cc8:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <MX_FDCAN1_Init+0xc0>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000cce:	4b1e      	ldr	r3, [pc, #120]	; (8000d48 <MX_FDCAN1_Init+0xc0>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000cd4:	4b1c      	ldr	r3, [pc, #112]	; (8000d48 <MX_FDCAN1_Init+0xc0>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000cda:	4b1b      	ldr	r3, [pc, #108]	; (8000d48 <MX_FDCAN1_Init+0xc0>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000ce0:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <MX_FDCAN1_Init+0xc0>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000ce6:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <MX_FDCAN1_Init+0xc0>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000cec:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <MX_FDCAN1_Init+0xc0>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000cf2:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <MX_FDCAN1_Init+0xc0>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000cf8:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <MX_FDCAN1_Init+0xc0>)
 8000cfa:	2204      	movs	r2, #4
 8000cfc:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000cfe:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <MX_FDCAN1_Init+0xc0>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000d04:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <MX_FDCAN1_Init+0xc0>)
 8000d06:	2204      	movs	r2, #4
 8000d08:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <MX_FDCAN1_Init+0xc0>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000d10:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <MX_FDCAN1_Init+0xc0>)
 8000d12:	2204      	movs	r2, #4
 8000d14:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <MX_FDCAN1_Init+0xc0>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000d1c:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <MX_FDCAN1_Init+0xc0>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000d22:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <MX_FDCAN1_Init+0xc0>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000d28:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <MX_FDCAN1_Init+0xc0>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <MX_FDCAN1_Init+0xc0>)
 8000d30:	2204      	movs	r2, #4
 8000d32:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000d34:	4804      	ldr	r0, [pc, #16]	; (8000d48 <MX_FDCAN1_Init+0xc0>)
 8000d36:	f004 f8a1 	bl	8004e7c <HAL_FDCAN_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000d40:	f000 ff82 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	24000784 	.word	0x24000784
 8000d4c:	4000a000 	.word	0x4000a000

08000d50 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000d54:	4b2e      	ldr	r3, [pc, #184]	; (8000e10 <MX_FDCAN2_Init+0xc0>)
 8000d56:	4a2f      	ldr	r2, [pc, #188]	; (8000e14 <MX_FDCAN2_Init+0xc4>)
 8000d58:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000d5a:	4b2d      	ldr	r3, [pc, #180]	; (8000e10 <MX_FDCAN2_Init+0xc0>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000d60:	4b2b      	ldr	r3, [pc, #172]	; (8000e10 <MX_FDCAN2_Init+0xc0>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000d66:	4b2a      	ldr	r3, [pc, #168]	; (8000e10 <MX_FDCAN2_Init+0xc0>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000d6c:	4b28      	ldr	r3, [pc, #160]	; (8000e10 <MX_FDCAN2_Init+0xc0>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000d72:	4b27      	ldr	r3, [pc, #156]	; (8000e10 <MX_FDCAN2_Init+0xc0>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000d78:	4b25      	ldr	r3, [pc, #148]	; (8000e10 <MX_FDCAN2_Init+0xc0>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000d7e:	4b24      	ldr	r3, [pc, #144]	; (8000e10 <MX_FDCAN2_Init+0xc0>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000d84:	4b22      	ldr	r3, [pc, #136]	; (8000e10 <MX_FDCAN2_Init+0xc0>)
 8000d86:	2202      	movs	r2, #2
 8000d88:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000d8a:	4b21      	ldr	r3, [pc, #132]	; (8000e10 <MX_FDCAN2_Init+0xc0>)
 8000d8c:	2202      	movs	r2, #2
 8000d8e:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000d90:	4b1f      	ldr	r3, [pc, #124]	; (8000e10 <MX_FDCAN2_Init+0xc0>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000d96:	4b1e      	ldr	r3, [pc, #120]	; (8000e10 <MX_FDCAN2_Init+0xc0>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000d9c:	4b1c      	ldr	r3, [pc, #112]	; (8000e10 <MX_FDCAN2_Init+0xc0>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000da2:	4b1b      	ldr	r3, [pc, #108]	; (8000e10 <MX_FDCAN2_Init+0xc0>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000da8:	4b19      	ldr	r3, [pc, #100]	; (8000e10 <MX_FDCAN2_Init+0xc0>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000dae:	4b18      	ldr	r3, [pc, #96]	; (8000e10 <MX_FDCAN2_Init+0xc0>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000db4:	4b16      	ldr	r3, [pc, #88]	; (8000e10 <MX_FDCAN2_Init+0xc0>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000dba:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <MX_FDCAN2_Init+0xc0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000dc0:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <MX_FDCAN2_Init+0xc0>)
 8000dc2:	2204      	movs	r2, #4
 8000dc4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000dc6:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <MX_FDCAN2_Init+0xc0>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000dcc:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <MX_FDCAN2_Init+0xc0>)
 8000dce:	2204      	movs	r2, #4
 8000dd0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <MX_FDCAN2_Init+0xc0>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000dd8:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <MX_FDCAN2_Init+0xc0>)
 8000dda:	2204      	movs	r2, #4
 8000ddc:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000dde:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <MX_FDCAN2_Init+0xc0>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000de4:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <MX_FDCAN2_Init+0xc0>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <MX_FDCAN2_Init+0xc0>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000df0:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <MX_FDCAN2_Init+0xc0>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <MX_FDCAN2_Init+0xc0>)
 8000df8:	2204      	movs	r2, #4
 8000dfa:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000dfc:	4804      	ldr	r0, [pc, #16]	; (8000e10 <MX_FDCAN2_Init+0xc0>)
 8000dfe:	f004 f83d 	bl	8004e7c <HAL_FDCAN_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000e08:	f000 ff1e 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	24000ad8 	.word	0x24000ad8
 8000e14:	4000a400 	.word	0x4000a400

08000e18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e1c:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e1e:	4a1c      	ldr	r2, [pc, #112]	; (8000e90 <MX_I2C1_Init+0x78>)
 8000e20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000e22:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e24:	4a1b      	ldr	r2, [pc, #108]	; (8000e94 <MX_I2C1_Init+0x7c>)
 8000e26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e28:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e2e:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e34:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e3a:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e52:	480e      	ldr	r0, [pc, #56]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e54:	f004 fd44 	bl	80058e0 <HAL_I2C_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e5e:	f000 fef3 	bl	8001c48 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e62:	2100      	movs	r1, #0
 8000e64:	4809      	ldr	r0, [pc, #36]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e66:	f005 f9af 	bl	80061c8 <HAL_I2CEx_ConfigAnalogFilter>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e70:	f000 feea 	bl	8001c48 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e74:	2100      	movs	r1, #0
 8000e76:	4805      	ldr	r0, [pc, #20]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e78:	f005 f9f1 	bl	800625e <HAL_I2CEx_ConfigDigitalFilter>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e82:	f000 fee1 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	24000414 	.word	0x24000414
 8000e90:	40005400 	.word	0x40005400
 8000e94:	00707cbb 	.word	0x00707cbb

08000e98 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e9c:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <MX_I2C2_Init+0x74>)
 8000e9e:	4a1c      	ldr	r2, [pc, #112]	; (8000f10 <MX_I2C2_Init+0x78>)
 8000ea0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <MX_I2C2_Init+0x74>)
 8000ea4:	4a1b      	ldr	r2, [pc, #108]	; (8000f14 <MX_I2C2_Init+0x7c>)
 8000ea6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ea8:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <MX_I2C2_Init+0x74>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eae:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <MX_I2C2_Init+0x74>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eb4:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <MX_I2C2_Init+0x74>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000eba:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <MX_I2C2_Init+0x74>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <MX_I2C2_Init+0x74>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ec6:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <MX_I2C2_Init+0x74>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <MX_I2C2_Init+0x74>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ed2:	480e      	ldr	r0, [pc, #56]	; (8000f0c <MX_I2C2_Init+0x74>)
 8000ed4:	f004 fd04 	bl	80058e0 <HAL_I2C_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ede:	f000 feb3 	bl	8001c48 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4809      	ldr	r0, [pc, #36]	; (8000f0c <MX_I2C2_Init+0x74>)
 8000ee6:	f005 f96f 	bl	80061c8 <HAL_I2CEx_ConfigAnalogFilter>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ef0:	f000 feaa 	bl	8001c48 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4805      	ldr	r0, [pc, #20]	; (8000f0c <MX_I2C2_Init+0x74>)
 8000ef8:	f005 f9b1 	bl	800625e <HAL_I2CEx_ConfigDigitalFilter>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000f02:	f000 fea1 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	240004ac 	.word	0x240004ac
 8000f10:	40005800 	.word	0x40005800
 8000f14:	00707cbb 	.word	0x00707cbb

08000f18 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	; (8000f8c <MX_I2C4_Init+0x74>)
 8000f1e:	4a1c      	ldr	r2, [pc, #112]	; (8000f90 <MX_I2C4_Init+0x78>)
 8000f20:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 8000f22:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <MX_I2C4_Init+0x74>)
 8000f24:	4a1b      	ldr	r2, [pc, #108]	; (8000f94 <MX_I2C4_Init+0x7c>)
 8000f26:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000f28:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <MX_I2C4_Init+0x74>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f2e:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <MX_I2C4_Init+0x74>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f34:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <MX_I2C4_Init+0x74>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000f3a:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <MX_I2C4_Init+0x74>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <MX_I2C4_Init+0x74>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f46:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <MX_I2C4_Init+0x74>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <MX_I2C4_Init+0x74>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000f52:	480e      	ldr	r0, [pc, #56]	; (8000f8c <MX_I2C4_Init+0x74>)
 8000f54:	f004 fcc4 	bl	80058e0 <HAL_I2C_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000f5e:	f000 fe73 	bl	8001c48 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f62:	2100      	movs	r1, #0
 8000f64:	4809      	ldr	r0, [pc, #36]	; (8000f8c <MX_I2C4_Init+0x74>)
 8000f66:	f005 f92f 	bl	80061c8 <HAL_I2CEx_ConfigAnalogFilter>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000f70:	f000 fe6a 	bl	8001c48 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000f74:	2100      	movs	r1, #0
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_I2C4_Init+0x74>)
 8000f78:	f005 f971 	bl	800625e <HAL_I2CEx_ConfigDigitalFilter>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000f82:	f000 fe61 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	2400027c 	.word	0x2400027c
 8000f90:	58001c00 	.word	0x58001c00
 8000f94:	00707cbb 	.word	0x00707cbb

08000f98 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000f9c:	4b22      	ldr	r3, [pc, #136]	; (8001028 <MX_LPUART1_UART_Init+0x90>)
 8000f9e:	4a23      	ldr	r2, [pc, #140]	; (800102c <MX_LPUART1_UART_Init+0x94>)
 8000fa0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000fa2:	4b21      	ldr	r3, [pc, #132]	; (8001028 <MX_LPUART1_UART_Init+0x90>)
 8000fa4:	4a22      	ldr	r2, [pc, #136]	; (8001030 <MX_LPUART1_UART_Init+0x98>)
 8000fa6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa8:	4b1f      	ldr	r3, [pc, #124]	; (8001028 <MX_LPUART1_UART_Init+0x90>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000fae:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <MX_LPUART1_UART_Init+0x90>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000fb4:	4b1c      	ldr	r3, [pc, #112]	; (8001028 <MX_LPUART1_UART_Init+0x90>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000fba:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <MX_LPUART1_UART_Init+0x90>)
 8000fbc:	220c      	movs	r2, #12
 8000fbe:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fc0:	4b19      	ldr	r3, [pc, #100]	; (8001028 <MX_LPUART1_UART_Init+0x90>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fc6:	4b18      	ldr	r3, [pc, #96]	; (8001028 <MX_LPUART1_UART_Init+0x90>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fcc:	4b16      	ldr	r3, [pc, #88]	; (8001028 <MX_LPUART1_UART_Init+0x90>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <MX_LPUART1_UART_Init+0x90>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000fd8:	4b13      	ldr	r3, [pc, #76]	; (8001028 <MX_LPUART1_UART_Init+0x90>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000fde:	4812      	ldr	r0, [pc, #72]	; (8001028 <MX_LPUART1_UART_Init+0x90>)
 8000fe0:	f009 fc7c 	bl	800a8dc <HAL_UART_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8000fea:	f000 fe2d 	bl	8001c48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fee:	2100      	movs	r1, #0
 8000ff0:	480d      	ldr	r0, [pc, #52]	; (8001028 <MX_LPUART1_UART_Init+0x90>)
 8000ff2:	f00a fc5f 	bl	800b8b4 <HAL_UARTEx_SetTxFifoThreshold>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8000ffc:	f000 fe24 	bl	8001c48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001000:	2100      	movs	r1, #0
 8001002:	4809      	ldr	r0, [pc, #36]	; (8001028 <MX_LPUART1_UART_Init+0x90>)
 8001004:	f00a fc94 	bl	800b930 <HAL_UARTEx_SetRxFifoThreshold>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 800100e:	f000 fe1b 	bl	8001c48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001012:	4805      	ldr	r0, [pc, #20]	; (8001028 <MX_LPUART1_UART_Init+0x90>)
 8001014:	f00a fc15 	bl	800b842 <HAL_UARTEx_DisableFifoMode>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 800101e:	f000 fe13 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	24000544 	.word	0x24000544
 800102c:	58000c00 	.word	0x58000c00
 8001030:	00033324 	.word	0x00033324

08001034 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001038:	4b22      	ldr	r3, [pc, #136]	; (80010c4 <MX_UART4_Init+0x90>)
 800103a:	4a23      	ldr	r2, [pc, #140]	; (80010c8 <MX_UART4_Init+0x94>)
 800103c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800103e:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <MX_UART4_Init+0x90>)
 8001040:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001044:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001046:	4b1f      	ldr	r3, [pc, #124]	; (80010c4 <MX_UART4_Init+0x90>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800104c:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <MX_UART4_Init+0x90>)
 800104e:	2200      	movs	r2, #0
 8001050:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001052:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <MX_UART4_Init+0x90>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001058:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <MX_UART4_Init+0x90>)
 800105a:	220c      	movs	r2, #12
 800105c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105e:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <MX_UART4_Init+0x90>)
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001064:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <MX_UART4_Init+0x90>)
 8001066:	2200      	movs	r2, #0
 8001068:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800106a:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <MX_UART4_Init+0x90>)
 800106c:	2200      	movs	r2, #0
 800106e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001070:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <MX_UART4_Init+0x90>)
 8001072:	2200      	movs	r2, #0
 8001074:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001076:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <MX_UART4_Init+0x90>)
 8001078:	2200      	movs	r2, #0
 800107a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800107c:	4811      	ldr	r0, [pc, #68]	; (80010c4 <MX_UART4_Init+0x90>)
 800107e:	f009 fc2d 	bl	800a8dc <HAL_UART_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001088:	f000 fdde 	bl	8001c48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800108c:	2100      	movs	r1, #0
 800108e:	480d      	ldr	r0, [pc, #52]	; (80010c4 <MX_UART4_Init+0x90>)
 8001090:	f00a fc10 	bl	800b8b4 <HAL_UARTEx_SetTxFifoThreshold>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800109a:	f000 fdd5 	bl	8001c48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800109e:	2100      	movs	r1, #0
 80010a0:	4808      	ldr	r0, [pc, #32]	; (80010c4 <MX_UART4_Init+0x90>)
 80010a2:	f00a fc45 	bl	800b930 <HAL_UARTEx_SetRxFifoThreshold>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80010ac:	f000 fdcc 	bl	8001c48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80010b0:	4804      	ldr	r0, [pc, #16]	; (80010c4 <MX_UART4_Init+0x90>)
 80010b2:	f00a fbc6 	bl	800b842 <HAL_UARTEx_DisableFifoMode>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80010bc:	f000 fdc4 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	24000960 	.word	0x24000960
 80010c8:	40004c00 	.word	0x40004c00

080010cc <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80010d0:	4b22      	ldr	r3, [pc, #136]	; (800115c <MX_UART8_Init+0x90>)
 80010d2:	4a23      	ldr	r2, [pc, #140]	; (8001160 <MX_UART8_Init+0x94>)
 80010d4:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80010d6:	4b21      	ldr	r3, [pc, #132]	; (800115c <MX_UART8_Init+0x90>)
 80010d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010dc:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80010de:	4b1f      	ldr	r3, [pc, #124]	; (800115c <MX_UART8_Init+0x90>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80010e4:	4b1d      	ldr	r3, [pc, #116]	; (800115c <MX_UART8_Init+0x90>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80010ea:	4b1c      	ldr	r3, [pc, #112]	; (800115c <MX_UART8_Init+0x90>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80010f0:	4b1a      	ldr	r3, [pc, #104]	; (800115c <MX_UART8_Init+0x90>)
 80010f2:	220c      	movs	r2, #12
 80010f4:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010f6:	4b19      	ldr	r3, [pc, #100]	; (800115c <MX_UART8_Init+0x90>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80010fc:	4b17      	ldr	r3, [pc, #92]	; (800115c <MX_UART8_Init+0x90>)
 80010fe:	2200      	movs	r2, #0
 8001100:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001102:	4b16      	ldr	r3, [pc, #88]	; (800115c <MX_UART8_Init+0x90>)
 8001104:	2200      	movs	r2, #0
 8001106:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001108:	4b14      	ldr	r3, [pc, #80]	; (800115c <MX_UART8_Init+0x90>)
 800110a:	2200      	movs	r2, #0
 800110c:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800110e:	4b13      	ldr	r3, [pc, #76]	; (800115c <MX_UART8_Init+0x90>)
 8001110:	2200      	movs	r2, #0
 8001112:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001114:	4811      	ldr	r0, [pc, #68]	; (800115c <MX_UART8_Init+0x90>)
 8001116:	f009 fbe1 	bl	800a8dc <HAL_UART_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8001120:	f000 fd92 	bl	8001c48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001124:	2100      	movs	r1, #0
 8001126:	480d      	ldr	r0, [pc, #52]	; (800115c <MX_UART8_Init+0x90>)
 8001128:	f00a fbc4 	bl	800b8b4 <HAL_UARTEx_SetTxFifoThreshold>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8001132:	f000 fd89 	bl	8001c48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001136:	2100      	movs	r1, #0
 8001138:	4808      	ldr	r0, [pc, #32]	; (800115c <MX_UART8_Init+0x90>)
 800113a:	f00a fbf9 	bl	800b930 <HAL_UARTEx_SetRxFifoThreshold>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8001144:	f000 fd80 	bl	8001c48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001148:	4804      	ldr	r0, [pc, #16]	; (800115c <MX_UART8_Init+0x90>)
 800114a:	f00a fb7a 	bl	800b842 <HAL_UARTEx_DisableFifoMode>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8001154:	f000 fd78 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	24000870 	.word	0x24000870
 8001160:	40007c00 	.word	0x40007c00

08001164 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8001168:	4b22      	ldr	r3, [pc, #136]	; (80011f4 <MX_USART1_Init+0x90>)
 800116a:	4a23      	ldr	r2, [pc, #140]	; (80011f8 <MX_USART1_Init+0x94>)
 800116c:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 800116e:	4b21      	ldr	r3, [pc, #132]	; (80011f4 <MX_USART1_Init+0x90>)
 8001170:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001174:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8001176:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <MX_USART1_Init+0x90>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 800117c:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <MX_USART1_Init+0x90>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8001182:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <MX_USART1_Init+0x90>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8001188:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <MX_USART1_Init+0x90>)
 800118a:	220c      	movs	r2, #12
 800118c:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 800118e:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <MX_USART1_Init+0x90>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8001194:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <MX_USART1_Init+0x90>)
 8001196:	2200      	movs	r2, #0
 8001198:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800119a:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <MX_USART1_Init+0x90>)
 800119c:	2200      	movs	r2, #0
 800119e:	621a      	str	r2, [r3, #32]
  husart1.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 80011a0:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <MX_USART1_Init+0x90>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	625a      	str	r2, [r3, #36]	; 0x24
  husart1.SlaveMode = USART_SLAVEMODE_DISABLE;
 80011a6:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <MX_USART1_Init+0x90>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart1) != HAL_OK)
 80011ac:	4811      	ldr	r0, [pc, #68]	; (80011f4 <MX_USART1_Init+0x90>)
 80011ae:	f00a fc4b 	bl	800ba48 <HAL_USART_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_USART1_Init+0x58>
  {
    Error_Handler();
 80011b8:	f000 fd46 	bl	8001c48 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart1, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011bc:	2100      	movs	r1, #0
 80011be:	480d      	ldr	r0, [pc, #52]	; (80011f4 <MX_USART1_Init+0x90>)
 80011c0:	f00b fa5e 	bl	800c680 <HAL_USARTEx_SetTxFifoThreshold>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_USART1_Init+0x6a>
  {
    Error_Handler();
 80011ca:	f000 fd3d 	bl	8001c48 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart1, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011ce:	2100      	movs	r1, #0
 80011d0:	4808      	ldr	r0, [pc, #32]	; (80011f4 <MX_USART1_Init+0x90>)
 80011d2:	f00b fa93 	bl	800c6fc <HAL_USARTEx_SetRxFifoThreshold>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_USART1_Init+0x7c>
  {
    Error_Handler();
 80011dc:	f000 fd34 	bl	8001c48 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart1) != HAL_OK)
 80011e0:	4804      	ldr	r0, [pc, #16]	; (80011f4 <MX_USART1_Init+0x90>)
 80011e2:	f00b fa14 	bl	800c60e <HAL_USARTEx_DisableFifoMode>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_USART1_Init+0x8c>
  {
    Error_Handler();
 80011ec:	f000 fd2c 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	24000a78 	.word	0x24000a78
 80011f8:	40011000 	.word	0x40011000

080011fc <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8001200:	4b22      	ldr	r3, [pc, #136]	; (800128c <MX_USART2_Init+0x90>)
 8001202:	4a23      	ldr	r2, [pc, #140]	; (8001290 <MX_USART2_Init+0x94>)
 8001204:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 8001206:	4b21      	ldr	r3, [pc, #132]	; (800128c <MX_USART2_Init+0x90>)
 8001208:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800120c:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 800120e:	4b1f      	ldr	r3, [pc, #124]	; (800128c <MX_USART2_Init+0x90>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8001214:	4b1d      	ldr	r3, [pc, #116]	; (800128c <MX_USART2_Init+0x90>)
 8001216:	2200      	movs	r2, #0
 8001218:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 800121a:	4b1c      	ldr	r3, [pc, #112]	; (800128c <MX_USART2_Init+0x90>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8001220:	4b1a      	ldr	r3, [pc, #104]	; (800128c <MX_USART2_Init+0x90>)
 8001222:	220c      	movs	r2, #12
 8001224:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8001226:	4b19      	ldr	r3, [pc, #100]	; (800128c <MX_USART2_Init+0x90>)
 8001228:	2200      	movs	r2, #0
 800122a:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 800122c:	4b17      	ldr	r3, [pc, #92]	; (800128c <MX_USART2_Init+0x90>)
 800122e:	2200      	movs	r2, #0
 8001230:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001232:	4b16      	ldr	r3, [pc, #88]	; (800128c <MX_USART2_Init+0x90>)
 8001234:	2200      	movs	r2, #0
 8001236:	621a      	str	r2, [r3, #32]
  husart2.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8001238:	4b14      	ldr	r3, [pc, #80]	; (800128c <MX_USART2_Init+0x90>)
 800123a:	2200      	movs	r2, #0
 800123c:	625a      	str	r2, [r3, #36]	; 0x24
  husart2.SlaveMode = USART_SLAVEMODE_DISABLE;
 800123e:	4b13      	ldr	r3, [pc, #76]	; (800128c <MX_USART2_Init+0x90>)
 8001240:	2200      	movs	r2, #0
 8001242:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8001244:	4811      	ldr	r0, [pc, #68]	; (800128c <MX_USART2_Init+0x90>)
 8001246:	f00a fbff 	bl	800ba48 <HAL_USART_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_USART2_Init+0x58>
  {
    Error_Handler();
 8001250:	f000 fcfa 	bl	8001c48 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart2, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001254:	2100      	movs	r1, #0
 8001256:	480d      	ldr	r0, [pc, #52]	; (800128c <MX_USART2_Init+0x90>)
 8001258:	f00b fa12 	bl	800c680 <HAL_USARTEx_SetTxFifoThreshold>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_USART2_Init+0x6a>
  {
    Error_Handler();
 8001262:	f000 fcf1 	bl	8001c48 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart2, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001266:	2100      	movs	r1, #0
 8001268:	4808      	ldr	r0, [pc, #32]	; (800128c <MX_USART2_Init+0x90>)
 800126a:	f00b fa47 	bl	800c6fc <HAL_USARTEx_SetRxFifoThreshold>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_USART2_Init+0x7c>
  {
    Error_Handler();
 8001274:	f000 fce8 	bl	8001c48 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart2) != HAL_OK)
 8001278:	4804      	ldr	r0, [pc, #16]	; (800128c <MX_USART2_Init+0x90>)
 800127a:	f00b f9c8 	bl	800c60e <HAL_USARTEx_DisableFifoMode>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_USART2_Init+0x8c>
  {
    Error_Handler();
 8001284:	f000 fce0 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}
 800128c:	24000900 	.word	0x24000900
 8001290:	40004400 	.word	0x40004400

08001294 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8001298:	4b22      	ldr	r3, [pc, #136]	; (8001324 <MX_USART3_Init+0x90>)
 800129a:	4a23      	ldr	r2, [pc, #140]	; (8001328 <MX_USART3_Init+0x94>)
 800129c:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 115200;
 800129e:	4b21      	ldr	r3, [pc, #132]	; (8001324 <MX_USART3_Init+0x90>)
 80012a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012a4:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 80012a6:	4b1f      	ldr	r3, [pc, #124]	; (8001324 <MX_USART3_Init+0x90>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 80012ac:	4b1d      	ldr	r3, [pc, #116]	; (8001324 <MX_USART3_Init+0x90>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 80012b2:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <MX_USART3_Init+0x90>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 80012b8:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <MX_USART3_Init+0x90>)
 80012ba:	220c      	movs	r2, #12
 80012bc:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 80012be:	4b19      	ldr	r3, [pc, #100]	; (8001324 <MX_USART3_Init+0x90>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 80012c4:	4b17      	ldr	r3, [pc, #92]	; (8001324 <MX_USART3_Init+0x90>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80012ca:	4b16      	ldr	r3, [pc, #88]	; (8001324 <MX_USART3_Init+0x90>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 80012d0:	4b14      	ldr	r3, [pc, #80]	; (8001324 <MX_USART3_Init+0x90>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 80012d6:	4b13      	ldr	r3, [pc, #76]	; (8001324 <MX_USART3_Init+0x90>)
 80012d8:	2200      	movs	r2, #0
 80012da:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 80012dc:	4811      	ldr	r0, [pc, #68]	; (8001324 <MX_USART3_Init+0x90>)
 80012de:	f00a fbb3 	bl	800ba48 <HAL_USART_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_USART3_Init+0x58>
  {
    Error_Handler();
 80012e8:	f000 fcae 	bl	8001c48 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart3, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ec:	2100      	movs	r1, #0
 80012ee:	480d      	ldr	r0, [pc, #52]	; (8001324 <MX_USART3_Init+0x90>)
 80012f0:	f00b f9c6 	bl	800c680 <HAL_USARTEx_SetTxFifoThreshold>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 80012fa:	f000 fca5 	bl	8001c48 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart3, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012fe:	2100      	movs	r1, #0
 8001300:	4808      	ldr	r0, [pc, #32]	; (8001324 <MX_USART3_Init+0x90>)
 8001302:	f00b f9fb 	bl	800c6fc <HAL_USARTEx_SetRxFifoThreshold>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_USART3_Init+0x7c>
  {
    Error_Handler();
 800130c:	f000 fc9c 	bl	8001c48 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart3) != HAL_OK)
 8001310:	4804      	ldr	r0, [pc, #16]	; (8001324 <MX_USART3_Init+0x90>)
 8001312:	f00b f97c 	bl	800c60e <HAL_USARTEx_DisableFifoMode>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_USART3_Init+0x8c>
  {
    Error_Handler();
 800131c:	f000 fc94 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	2400069c 	.word	0x2400069c
 8001328:	40004800 	.word	0x40004800

0800132c <MX_USART6_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  husart6.Instance = USART6;
 8001330:	4b22      	ldr	r3, [pc, #136]	; (80013bc <MX_USART6_Init+0x90>)
 8001332:	4a23      	ldr	r2, [pc, #140]	; (80013c0 <MX_USART6_Init+0x94>)
 8001334:	601a      	str	r2, [r3, #0]
  husart6.Init.BaudRate = 115200;
 8001336:	4b21      	ldr	r3, [pc, #132]	; (80013bc <MX_USART6_Init+0x90>)
 8001338:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800133c:	605a      	str	r2, [r3, #4]
  husart6.Init.WordLength = USART_WORDLENGTH_8B;
 800133e:	4b1f      	ldr	r3, [pc, #124]	; (80013bc <MX_USART6_Init+0x90>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  husart6.Init.StopBits = USART_STOPBITS_1;
 8001344:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <MX_USART6_Init+0x90>)
 8001346:	2200      	movs	r2, #0
 8001348:	60da      	str	r2, [r3, #12]
  husart6.Init.Parity = USART_PARITY_NONE;
 800134a:	4b1c      	ldr	r3, [pc, #112]	; (80013bc <MX_USART6_Init+0x90>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  husart6.Init.Mode = USART_MODE_TX_RX;
 8001350:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <MX_USART6_Init+0x90>)
 8001352:	220c      	movs	r2, #12
 8001354:	615a      	str	r2, [r3, #20]
  husart6.Init.CLKPolarity = USART_POLARITY_LOW;
 8001356:	4b19      	ldr	r3, [pc, #100]	; (80013bc <MX_USART6_Init+0x90>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  husart6.Init.CLKPhase = USART_PHASE_1EDGE;
 800135c:	4b17      	ldr	r3, [pc, #92]	; (80013bc <MX_USART6_Init+0x90>)
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
  husart6.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001362:	4b16      	ldr	r3, [pc, #88]	; (80013bc <MX_USART6_Init+0x90>)
 8001364:	2200      	movs	r2, #0
 8001366:	621a      	str	r2, [r3, #32]
  husart6.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8001368:	4b14      	ldr	r3, [pc, #80]	; (80013bc <MX_USART6_Init+0x90>)
 800136a:	2200      	movs	r2, #0
 800136c:	625a      	str	r2, [r3, #36]	; 0x24
  husart6.SlaveMode = USART_SLAVEMODE_DISABLE;
 800136e:	4b13      	ldr	r3, [pc, #76]	; (80013bc <MX_USART6_Init+0x90>)
 8001370:	2200      	movs	r2, #0
 8001372:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart6) != HAL_OK)
 8001374:	4811      	ldr	r0, [pc, #68]	; (80013bc <MX_USART6_Init+0x90>)
 8001376:	f00a fb67 	bl	800ba48 <HAL_USART_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_USART6_Init+0x58>
  {
    Error_Handler();
 8001380:	f000 fc62 	bl	8001c48 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart6, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001384:	2100      	movs	r1, #0
 8001386:	480d      	ldr	r0, [pc, #52]	; (80013bc <MX_USART6_Init+0x90>)
 8001388:	f00b f97a 	bl	800c680 <HAL_USARTEx_SetTxFifoThreshold>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_USART6_Init+0x6a>
  {
    Error_Handler();
 8001392:	f000 fc59 	bl	8001c48 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart6, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001396:	2100      	movs	r1, #0
 8001398:	4808      	ldr	r0, [pc, #32]	; (80013bc <MX_USART6_Init+0x90>)
 800139a:	f00b f9af 	bl	800c6fc <HAL_USARTEx_SetRxFifoThreshold>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_USART6_Init+0x7c>
  {
    Error_Handler();
 80013a4:	f000 fc50 	bl	8001c48 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart6) != HAL_OK)
 80013a8:	4804      	ldr	r0, [pc, #16]	; (80013bc <MX_USART6_Init+0x90>)
 80013aa:	f00b f930 	bl	800c60e <HAL_USARTEx_DisableFifoMode>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_USART6_Init+0x8c>
  {
    Error_Handler();
 80013b4:	f000 fc48 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	2400021c 	.word	0x2400021c
 80013c0:	40011400 	.word	0x40011400

080013c4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <MX_QUADSPI_Init+0x50>)
 80013ca:	4a13      	ldr	r2, [pc, #76]	; (8001418 <MX_QUADSPI_Init+0x54>)
 80013cc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MX_QUADSPI_Init+0x50>)
 80013d0:	22ff      	movs	r2, #255	; 0xff
 80013d2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <MX_QUADSPI_Init+0x50>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <MX_QUADSPI_Init+0x50>)
 80013dc:	2200      	movs	r2, #0
 80013de:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <MX_QUADSPI_Init+0x50>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <MX_QUADSPI_Init+0x50>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80013ec:	4b09      	ldr	r3, [pc, #36]	; (8001414 <MX_QUADSPI_Init+0x50>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_2;
 80013f2:	4b08      	ldr	r3, [pc, #32]	; (8001414 <MX_QUADSPI_Init+0x50>)
 80013f4:	2280      	movs	r2, #128	; 0x80
 80013f6:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <MX_QUADSPI_Init+0x50>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <MX_QUADSPI_Init+0x50>)
 8001400:	f004 ffb4 	bl	800636c <HAL_QSPI_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800140a:	f000 fc1d 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	24000b78 	.word	0x24000b78
 8001418:	52005000 	.word	0x52005000

0800141c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001420:	4b27      	ldr	r3, [pc, #156]	; (80014c0 <MX_SPI1_Init+0xa4>)
 8001422:	4a28      	ldr	r2, [pc, #160]	; (80014c4 <MX_SPI1_Init+0xa8>)
 8001424:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001426:	4b26      	ldr	r3, [pc, #152]	; (80014c0 <MX_SPI1_Init+0xa4>)
 8001428:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800142c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800142e:	4b24      	ldr	r3, [pc, #144]	; (80014c0 <MX_SPI1_Init+0xa4>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001434:	4b22      	ldr	r3, [pc, #136]	; (80014c0 <MX_SPI1_Init+0xa4>)
 8001436:	2203      	movs	r2, #3
 8001438:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800143a:	4b21      	ldr	r3, [pc, #132]	; (80014c0 <MX_SPI1_Init+0xa4>)
 800143c:	2200      	movs	r2, #0
 800143e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001440:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <MX_SPI1_Init+0xa4>)
 8001442:	2200      	movs	r2, #0
 8001444:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001446:	4b1e      	ldr	r3, [pc, #120]	; (80014c0 <MX_SPI1_Init+0xa4>)
 8001448:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800144c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800144e:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <MX_SPI1_Init+0xa4>)
 8001450:	2200      	movs	r2, #0
 8001452:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001454:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <MX_SPI1_Init+0xa4>)
 8001456:	2200      	movs	r2, #0
 8001458:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800145a:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <MX_SPI1_Init+0xa4>)
 800145c:	2200      	movs	r2, #0
 800145e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001460:	4b17      	ldr	r3, [pc, #92]	; (80014c0 <MX_SPI1_Init+0xa4>)
 8001462:	2200      	movs	r2, #0
 8001464:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001466:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <MX_SPI1_Init+0xa4>)
 8001468:	2200      	movs	r2, #0
 800146a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800146c:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <MX_SPI1_Init+0xa4>)
 800146e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001472:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <MX_SPI1_Init+0xa4>)
 8001476:	2200      	movs	r2, #0
 8001478:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800147a:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <MX_SPI1_Init+0xa4>)
 800147c:	2200      	movs	r2, #0
 800147e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001480:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <MX_SPI1_Init+0xa4>)
 8001482:	2200      	movs	r2, #0
 8001484:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <MX_SPI1_Init+0xa4>)
 8001488:	2200      	movs	r2, #0
 800148a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <MX_SPI1_Init+0xa4>)
 800148e:	2200      	movs	r2, #0
 8001490:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <MX_SPI1_Init+0xa4>)
 8001494:	2200      	movs	r2, #0
 8001496:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001498:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <MX_SPI1_Init+0xa4>)
 800149a:	2200      	movs	r2, #0
 800149c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800149e:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <MX_SPI1_Init+0xa4>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <MX_SPI1_Init+0xa4>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014aa:	4805      	ldr	r0, [pc, #20]	; (80014c0 <MX_SPI1_Init+0xa4>)
 80014ac:	f008 f93a 	bl	8009724 <HAL_SPI_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 80014b6:	f000 fbc7 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	240009f0 	.word	0x240009f0
 80014c4:	40013000 	.word	0x40013000

080014c8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80014cc:	4b27      	ldr	r3, [pc, #156]	; (800156c <MX_SPI2_Init+0xa4>)
 80014ce:	4a28      	ldr	r2, [pc, #160]	; (8001570 <MX_SPI2_Init+0xa8>)
 80014d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014d2:	4b26      	ldr	r3, [pc, #152]	; (800156c <MX_SPI2_Init+0xa4>)
 80014d4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80014d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014da:	4b24      	ldr	r3, [pc, #144]	; (800156c <MX_SPI2_Init+0xa4>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80014e0:	4b22      	ldr	r3, [pc, #136]	; (800156c <MX_SPI2_Init+0xa4>)
 80014e2:	2203      	movs	r2, #3
 80014e4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014e6:	4b21      	ldr	r3, [pc, #132]	; (800156c <MX_SPI2_Init+0xa4>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014ec:	4b1f      	ldr	r3, [pc, #124]	; (800156c <MX_SPI2_Init+0xa4>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014f2:	4b1e      	ldr	r3, [pc, #120]	; (800156c <MX_SPI2_Init+0xa4>)
 80014f4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80014f8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014fa:	4b1c      	ldr	r3, [pc, #112]	; (800156c <MX_SPI2_Init+0xa4>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001500:	4b1a      	ldr	r3, [pc, #104]	; (800156c <MX_SPI2_Init+0xa4>)
 8001502:	2200      	movs	r2, #0
 8001504:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001506:	4b19      	ldr	r3, [pc, #100]	; (800156c <MX_SPI2_Init+0xa4>)
 8001508:	2200      	movs	r2, #0
 800150a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800150c:	4b17      	ldr	r3, [pc, #92]	; (800156c <MX_SPI2_Init+0xa4>)
 800150e:	2200      	movs	r2, #0
 8001510:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001512:	4b16      	ldr	r3, [pc, #88]	; (800156c <MX_SPI2_Init+0xa4>)
 8001514:	2200      	movs	r2, #0
 8001516:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001518:	4b14      	ldr	r3, [pc, #80]	; (800156c <MX_SPI2_Init+0xa4>)
 800151a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800151e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <MX_SPI2_Init+0xa4>)
 8001522:	2200      	movs	r2, #0
 8001524:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001526:	4b11      	ldr	r3, [pc, #68]	; (800156c <MX_SPI2_Init+0xa4>)
 8001528:	2200      	movs	r2, #0
 800152a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <MX_SPI2_Init+0xa4>)
 800152e:	2200      	movs	r2, #0
 8001530:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <MX_SPI2_Init+0xa4>)
 8001534:	2200      	movs	r2, #0
 8001536:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <MX_SPI2_Init+0xa4>)
 800153a:	2200      	movs	r2, #0
 800153c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800153e:	4b0b      	ldr	r3, [pc, #44]	; (800156c <MX_SPI2_Init+0xa4>)
 8001540:	2200      	movs	r2, #0
 8001542:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001544:	4b09      	ldr	r3, [pc, #36]	; (800156c <MX_SPI2_Init+0xa4>)
 8001546:	2200      	movs	r2, #0
 8001548:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800154a:	4b08      	ldr	r3, [pc, #32]	; (800156c <MX_SPI2_Init+0xa4>)
 800154c:	2200      	movs	r2, #0
 800154e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <MX_SPI2_Init+0xa4>)
 8001552:	2200      	movs	r2, #0
 8001554:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001556:	4805      	ldr	r0, [pc, #20]	; (800156c <MX_SPI2_Init+0xa4>)
 8001558:	f008 f8e4 	bl	8009724 <HAL_SPI_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8001562:	f000 fb71 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	240002c8 	.word	0x240002c8
 8001570:	40003800 	.word	0x40003800

08001574 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001578:	4b27      	ldr	r3, [pc, #156]	; (8001618 <MX_SPI4_Init+0xa4>)
 800157a:	4a28      	ldr	r2, [pc, #160]	; (800161c <MX_SPI4_Init+0xa8>)
 800157c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800157e:	4b26      	ldr	r3, [pc, #152]	; (8001618 <MX_SPI4_Init+0xa4>)
 8001580:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001584:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001586:	4b24      	ldr	r3, [pc, #144]	; (8001618 <MX_SPI4_Init+0xa4>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 800158c:	4b22      	ldr	r3, [pc, #136]	; (8001618 <MX_SPI4_Init+0xa4>)
 800158e:	2203      	movs	r2, #3
 8001590:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001592:	4b21      	ldr	r3, [pc, #132]	; (8001618 <MX_SPI4_Init+0xa4>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001598:	4b1f      	ldr	r3, [pc, #124]	; (8001618 <MX_SPI4_Init+0xa4>)
 800159a:	2200      	movs	r2, #0
 800159c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800159e:	4b1e      	ldr	r3, [pc, #120]	; (8001618 <MX_SPI4_Init+0xa4>)
 80015a0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80015a4:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015a6:	4b1c      	ldr	r3, [pc, #112]	; (8001618 <MX_SPI4_Init+0xa4>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ac:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <MX_SPI4_Init+0xa4>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80015b2:	4b19      	ldr	r3, [pc, #100]	; (8001618 <MX_SPI4_Init+0xa4>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015b8:	4b17      	ldr	r3, [pc, #92]	; (8001618 <MX_SPI4_Init+0xa4>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80015be:	4b16      	ldr	r3, [pc, #88]	; (8001618 <MX_SPI4_Init+0xa4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015c4:	4b14      	ldr	r3, [pc, #80]	; (8001618 <MX_SPI4_Init+0xa4>)
 80015c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015ca:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80015cc:	4b12      	ldr	r3, [pc, #72]	; (8001618 <MX_SPI4_Init+0xa4>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80015d2:	4b11      	ldr	r3, [pc, #68]	; (8001618 <MX_SPI4_Init+0xa4>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015d8:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <MX_SPI4_Init+0xa4>)
 80015da:	2200      	movs	r2, #0
 80015dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <MX_SPI4_Init+0xa4>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <MX_SPI4_Init+0xa4>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <MX_SPI4_Init+0xa4>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <MX_SPI4_Init+0xa4>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80015f6:	4b08      	ldr	r3, [pc, #32]	; (8001618 <MX_SPI4_Init+0xa4>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <MX_SPI4_Init+0xa4>)
 80015fe:	2200      	movs	r2, #0
 8001600:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001602:	4805      	ldr	r0, [pc, #20]	; (8001618 <MX_SPI4_Init+0xa4>)
 8001604:	f008 f88e 	bl	8009724 <HAL_SPI_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 800160e:	f000 fb1b 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	240006fc 	.word	0x240006fc
 800161c:	40013400 	.word	0x40013400

08001620 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b096      	sub	sp, #88	; 0x58
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001626:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001632:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]
 8001640:	611a      	str	r2, [r3, #16]
 8001642:	615a      	str	r2, [r3, #20]
 8001644:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	222c      	movs	r2, #44	; 0x2c
 800164a:	2100      	movs	r1, #0
 800164c:	4618      	mov	r0, r3
 800164e:	f00b f915 	bl	800c87c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001652:	4b39      	ldr	r3, [pc, #228]	; (8001738 <MX_TIM1_Init+0x118>)
 8001654:	4a39      	ldr	r2, [pc, #228]	; (800173c <MX_TIM1_Init+0x11c>)
 8001656:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64000-1;
 8001658:	4b37      	ldr	r3, [pc, #220]	; (8001738 <MX_TIM1_Init+0x118>)
 800165a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800165e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001660:	4b35      	ldr	r3, [pc, #212]	; (8001738 <MX_TIM1_Init+0x118>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20-1;
 8001666:	4b34      	ldr	r3, [pc, #208]	; (8001738 <MX_TIM1_Init+0x118>)
 8001668:	2213      	movs	r2, #19
 800166a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800166c:	4b32      	ldr	r3, [pc, #200]	; (8001738 <MX_TIM1_Init+0x118>)
 800166e:	2200      	movs	r2, #0
 8001670:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001672:	4b31      	ldr	r3, [pc, #196]	; (8001738 <MX_TIM1_Init+0x118>)
 8001674:	2200      	movs	r2, #0
 8001676:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001678:	4b2f      	ldr	r3, [pc, #188]	; (8001738 <MX_TIM1_Init+0x118>)
 800167a:	2200      	movs	r2, #0
 800167c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800167e:	482e      	ldr	r0, [pc, #184]	; (8001738 <MX_TIM1_Init+0x118>)
 8001680:	f008 f9c4 	bl	8009a0c <HAL_TIM_PWM_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800168a:	f000 fadd 	bl	8001c48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001692:	2300      	movs	r3, #0
 8001694:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001696:	2300      	movs	r3, #0
 8001698:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800169a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800169e:	4619      	mov	r1, r3
 80016a0:	4825      	ldr	r0, [pc, #148]	; (8001738 <MX_TIM1_Init+0x118>)
 80016a2:	f009 f815 	bl	800a6d0 <HAL_TIMEx_MasterConfigSynchronization>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80016ac:	f000 facc 	bl	8001c48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016b0:	2360      	movs	r3, #96	; 0x60
 80016b2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 15;
 80016b4:	230f      	movs	r3, #15
 80016b6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016b8:	2300      	movs	r3, #0
 80016ba:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016bc:	2300      	movs	r3, #0
 80016be:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016c0:	2300      	movs	r3, #0
 80016c2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016c4:	2300      	movs	r3, #0
 80016c6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016c8:	2300      	movs	r3, #0
 80016ca:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016d0:	2204      	movs	r2, #4
 80016d2:	4619      	mov	r1, r3
 80016d4:	4818      	ldr	r0, [pc, #96]	; (8001738 <MX_TIM1_Init+0x118>)
 80016d6:	f008 f9f1 	bl	8009abc <HAL_TIM_PWM_ConfigChannel>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80016e0:	f000 fab2 	bl	8001c48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016e4:	2300      	movs	r3, #0
 80016e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001702:	2300      	movs	r3, #0
 8001704:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001706:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001710:	2300      	movs	r3, #0
 8001712:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	4619      	mov	r1, r3
 8001718:	4807      	ldr	r0, [pc, #28]	; (8001738 <MX_TIM1_Init+0x118>)
 800171a:	f009 f861 	bl	800a7e0 <HAL_TIMEx_ConfigBreakDeadTime>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001724:	f000 fa90 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001728:	4803      	ldr	r0, [pc, #12]	; (8001738 <MX_TIM1_Init+0x118>)
 800172a:	f001 faad 	bl	8002c88 <HAL_TIM_MspPostInit>

}
 800172e:	bf00      	nop
 8001730:	3758      	adds	r7, #88	; 0x58
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	24000824 	.word	0x24000824
 800173c:	40010000 	.word	0x40010000

08001740 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08e      	sub	sp, #56	; 0x38
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001746:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001754:	f107 031c 	add.w	r3, r7, #28
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001760:	463b      	mov	r3, r7
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	60da      	str	r2, [r3, #12]
 800176c:	611a      	str	r2, [r3, #16]
 800176e:	615a      	str	r2, [r3, #20]
 8001770:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001772:	4b2d      	ldr	r3, [pc, #180]	; (8001828 <MX_TIM4_Init+0xe8>)
 8001774:	4a2d      	ldr	r2, [pc, #180]	; (800182c <MX_TIM4_Init+0xec>)
 8001776:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001778:	4b2b      	ldr	r3, [pc, #172]	; (8001828 <MX_TIM4_Init+0xe8>)
 800177a:	2200      	movs	r2, #0
 800177c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177e:	4b2a      	ldr	r3, [pc, #168]	; (8001828 <MX_TIM4_Init+0xe8>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001784:	4b28      	ldr	r3, [pc, #160]	; (8001828 <MX_TIM4_Init+0xe8>)
 8001786:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800178a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800178c:	4b26      	ldr	r3, [pc, #152]	; (8001828 <MX_TIM4_Init+0xe8>)
 800178e:	2200      	movs	r2, #0
 8001790:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001792:	4b25      	ldr	r3, [pc, #148]	; (8001828 <MX_TIM4_Init+0xe8>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001798:	4823      	ldr	r0, [pc, #140]	; (8001828 <MX_TIM4_Init+0xe8>)
 800179a:	f008 f8e0 	bl	800995e <HAL_TIM_Base_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80017a4:	f000 fa50 	bl	8001c48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80017ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017b2:	4619      	mov	r1, r3
 80017b4:	481c      	ldr	r0, [pc, #112]	; (8001828 <MX_TIM4_Init+0xe8>)
 80017b6:	f008 fa91 	bl	8009cdc <HAL_TIM_ConfigClockSource>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80017c0:	f000 fa42 	bl	8001c48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80017c4:	4818      	ldr	r0, [pc, #96]	; (8001828 <MX_TIM4_Init+0xe8>)
 80017c6:	f008 f921 	bl	8009a0c <HAL_TIM_PWM_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80017d0:	f000 fa3a 	bl	8001c48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d8:	2300      	movs	r3, #0
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017dc:	f107 031c 	add.w	r3, r7, #28
 80017e0:	4619      	mov	r1, r3
 80017e2:	4811      	ldr	r0, [pc, #68]	; (8001828 <MX_TIM4_Init+0xe8>)
 80017e4:	f008 ff74 	bl	800a6d0 <HAL_TIMEx_MasterConfigSynchronization>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80017ee:	f000 fa2b 	bl	8001c48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017f2:	2360      	movs	r3, #96	; 0x60
 80017f4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017fa:	2300      	movs	r3, #0
 80017fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001802:	463b      	mov	r3, r7
 8001804:	220c      	movs	r2, #12
 8001806:	4619      	mov	r1, r3
 8001808:	4807      	ldr	r0, [pc, #28]	; (8001828 <MX_TIM4_Init+0xe8>)
 800180a:	f008 f957 	bl	8009abc <HAL_TIM_PWM_ConfigChannel>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001814:	f000 fa18 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001818:	4803      	ldr	r0, [pc, #12]	; (8001828 <MX_TIM4_Init+0xe8>)
 800181a:	f001 fa35 	bl	8002c88 <HAL_TIM_MspPostInit>

}
 800181e:	bf00      	nop
 8001820:	3738      	adds	r7, #56	; 0x38
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	24000350 	.word	0x24000350
 800182c:	40000800 	.word	0x40000800

08001830 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	; 0x28
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001836:	f107 031c 	add.w	r3, r7, #28
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001842:	463b      	mov	r3, r7
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	611a      	str	r2, [r3, #16]
 8001850:	615a      	str	r2, [r3, #20]
 8001852:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001854:	4b21      	ldr	r3, [pc, #132]	; (80018dc <MX_TIM5_Init+0xac>)
 8001856:	4a22      	ldr	r2, [pc, #136]	; (80018e0 <MX_TIM5_Init+0xb0>)
 8001858:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 6400-1;
 800185a:	4b20      	ldr	r3, [pc, #128]	; (80018dc <MX_TIM5_Init+0xac>)
 800185c:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8001860:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001862:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <MX_TIM5_Init+0xac>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 200-1;
 8001868:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <MX_TIM5_Init+0xac>)
 800186a:	22c7      	movs	r2, #199	; 0xc7
 800186c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800186e:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <MX_TIM5_Init+0xac>)
 8001870:	2200      	movs	r2, #0
 8001872:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001874:	4b19      	ldr	r3, [pc, #100]	; (80018dc <MX_TIM5_Init+0xac>)
 8001876:	2200      	movs	r2, #0
 8001878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800187a:	4818      	ldr	r0, [pc, #96]	; (80018dc <MX_TIM5_Init+0xac>)
 800187c:	f008 f8c6 	bl	8009a0c <HAL_TIM_PWM_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8001886:	f000 f9df 	bl	8001c48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800188e:	2300      	movs	r3, #0
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001892:	f107 031c 	add.w	r3, r7, #28
 8001896:	4619      	mov	r1, r3
 8001898:	4810      	ldr	r0, [pc, #64]	; (80018dc <MX_TIM5_Init+0xac>)
 800189a:	f008 ff19 	bl	800a6d0 <HAL_TIMEx_MasterConfigSynchronization>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 80018a4:	f000 f9d0 	bl	8001c48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018a8:	2360      	movs	r3, #96	; 0x60
 80018aa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 100-1;
 80018ac:	2363      	movs	r3, #99	; 0x63
 80018ae:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018b0:	2300      	movs	r3, #0
 80018b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018b4:	2300      	movs	r3, #0
 80018b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018b8:	463b      	mov	r3, r7
 80018ba:	2204      	movs	r2, #4
 80018bc:	4619      	mov	r1, r3
 80018be:	4807      	ldr	r0, [pc, #28]	; (80018dc <MX_TIM5_Init+0xac>)
 80018c0:	f008 f8fc 	bl	8009abc <HAL_TIM_PWM_ConfigChannel>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 80018ca:	f000 f9bd 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80018ce:	4803      	ldr	r0, [pc, #12]	; (80018dc <MX_TIM5_Init+0xac>)
 80018d0:	f001 f9da 	bl	8002c88 <HAL_TIM_MspPostInit>

}
 80018d4:	bf00      	nop
 80018d6:	3728      	adds	r7, #40	; 0x28
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	240004f8 	.word	0x240004f8
 80018e0:	40000c00 	.word	0x40000c00

080018e4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b09a      	sub	sp, #104	; 0x68
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001904:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
 8001914:	615a      	str	r2, [r3, #20]
 8001916:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001918:	1d3b      	adds	r3, r7, #4
 800191a:	222c      	movs	r2, #44	; 0x2c
 800191c:	2100      	movs	r1, #0
 800191e:	4618      	mov	r0, r3
 8001920:	f00a ffac 	bl	800c87c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001924:	4b3f      	ldr	r3, [pc, #252]	; (8001a24 <MX_TIM15_Init+0x140>)
 8001926:	4a40      	ldr	r2, [pc, #256]	; (8001a28 <MX_TIM15_Init+0x144>)
 8001928:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 6400;
 800192a:	4b3e      	ldr	r3, [pc, #248]	; (8001a24 <MX_TIM15_Init+0x140>)
 800192c:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001930:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001932:	4b3c      	ldr	r3, [pc, #240]	; (8001a24 <MX_TIM15_Init+0x140>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 200-1;
 8001938:	4b3a      	ldr	r3, [pc, #232]	; (8001a24 <MX_TIM15_Init+0x140>)
 800193a:	22c7      	movs	r2, #199	; 0xc7
 800193c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800193e:	4b39      	ldr	r3, [pc, #228]	; (8001a24 <MX_TIM15_Init+0x140>)
 8001940:	2200      	movs	r2, #0
 8001942:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001944:	4b37      	ldr	r3, [pc, #220]	; (8001a24 <MX_TIM15_Init+0x140>)
 8001946:	2200      	movs	r2, #0
 8001948:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800194a:	4b36      	ldr	r3, [pc, #216]	; (8001a24 <MX_TIM15_Init+0x140>)
 800194c:	2200      	movs	r2, #0
 800194e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001950:	4834      	ldr	r0, [pc, #208]	; (8001a24 <MX_TIM15_Init+0x140>)
 8001952:	f008 f804 	bl	800995e <HAL_TIM_Base_Init>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 800195c:	f000 f974 	bl	8001c48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001964:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001966:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800196a:	4619      	mov	r1, r3
 800196c:	482d      	ldr	r0, [pc, #180]	; (8001a24 <MX_TIM15_Init+0x140>)
 800196e:	f008 f9b5 	bl	8009cdc <HAL_TIM_ConfigClockSource>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8001978:	f000 f966 	bl	8001c48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800197c:	4829      	ldr	r0, [pc, #164]	; (8001a24 <MX_TIM15_Init+0x140>)
 800197e:	f008 f845 	bl	8009a0c <HAL_TIM_PWM_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8001988:	f000 f95e 	bl	8001c48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800198c:	2300      	movs	r3, #0
 800198e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001990:	2300      	movs	r3, #0
 8001992:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001994:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001998:	4619      	mov	r1, r3
 800199a:	4822      	ldr	r0, [pc, #136]	; (8001a24 <MX_TIM15_Init+0x140>)
 800199c:	f008 fe98 	bl	800a6d0 <HAL_TIMEx_MasterConfigSynchronization>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 80019a6:	f000 f94f 	bl	8001c48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019aa:	2360      	movs	r3, #96	; 0x60
 80019ac:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 100-1;
 80019ae:	2363      	movs	r3, #99	; 0x63
 80019b0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019b2:	2300      	movs	r3, #0
 80019b4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019b6:	2300      	movs	r3, #0
 80019b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019be:	2300      	movs	r3, #0
 80019c0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019c2:	2300      	movs	r3, #0
 80019c4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019ca:	2204      	movs	r2, #4
 80019cc:	4619      	mov	r1, r3
 80019ce:	4815      	ldr	r0, [pc, #84]	; (8001a24 <MX_TIM15_Init+0x140>)
 80019d0:	f008 f874 	bl	8009abc <HAL_TIM_PWM_ConfigChannel>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 80019da:	f000 f935 	bl	8001c48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019f6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019fc:	2300      	movs	r3, #0
 80019fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001a00:	1d3b      	adds	r3, r7, #4
 8001a02:	4619      	mov	r1, r3
 8001a04:	4807      	ldr	r0, [pc, #28]	; (8001a24 <MX_TIM15_Init+0x140>)
 8001a06:	f008 feeb 	bl	800a7e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM15_Init+0x130>
  {
    Error_Handler();
 8001a10:	f000 f91a 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001a14:	4803      	ldr	r0, [pc, #12]	; (8001a24 <MX_TIM15_Init+0x140>)
 8001a16:	f001 f937 	bl	8002c88 <HAL_TIM_MspPostInit>

}
 8001a1a:	bf00      	nop
 8001a1c:	3768      	adds	r7, #104	; 0x68
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	24000460 	.word	0x24000460
 8001a28:	40014000 	.word	0x40014000

08001a2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08c      	sub	sp, #48	; 0x30
 8001a30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a32:	f107 031c 	add.w	r3, r7, #28
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	60da      	str	r2, [r3, #12]
 8001a40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a42:	4b7b      	ldr	r3, [pc, #492]	; (8001c30 <MX_GPIO_Init+0x204>)
 8001a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a48:	4a79      	ldr	r2, [pc, #484]	; (8001c30 <MX_GPIO_Init+0x204>)
 8001a4a:	f043 0310 	orr.w	r3, r3, #16
 8001a4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a52:	4b77      	ldr	r3, [pc, #476]	; (8001c30 <MX_GPIO_Init+0x204>)
 8001a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a58:	f003 0310 	and.w	r3, r3, #16
 8001a5c:	61bb      	str	r3, [r7, #24]
 8001a5e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a60:	4b73      	ldr	r3, [pc, #460]	; (8001c30 <MX_GPIO_Init+0x204>)
 8001a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a66:	4a72      	ldr	r2, [pc, #456]	; (8001c30 <MX_GPIO_Init+0x204>)
 8001a68:	f043 0304 	orr.w	r3, r3, #4
 8001a6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a70:	4b6f      	ldr	r3, [pc, #444]	; (8001c30 <MX_GPIO_Init+0x204>)
 8001a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a76:	f003 0304 	and.w	r3, r3, #4
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a7e:	4b6c      	ldr	r3, [pc, #432]	; (8001c30 <MX_GPIO_Init+0x204>)
 8001a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a84:	4a6a      	ldr	r2, [pc, #424]	; (8001c30 <MX_GPIO_Init+0x204>)
 8001a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a8e:	4b68      	ldr	r3, [pc, #416]	; (8001c30 <MX_GPIO_Init+0x204>)
 8001a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9c:	4b64      	ldr	r3, [pc, #400]	; (8001c30 <MX_GPIO_Init+0x204>)
 8001a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa2:	4a63      	ldr	r2, [pc, #396]	; (8001c30 <MX_GPIO_Init+0x204>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aac:	4b60      	ldr	r3, [pc, #384]	; (8001c30 <MX_GPIO_Init+0x204>)
 8001aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aba:	4b5d      	ldr	r3, [pc, #372]	; (8001c30 <MX_GPIO_Init+0x204>)
 8001abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac0:	4a5b      	ldr	r2, [pc, #364]	; (8001c30 <MX_GPIO_Init+0x204>)
 8001ac2:	f043 0302 	orr.w	r3, r3, #2
 8001ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aca:	4b59      	ldr	r3, [pc, #356]	; (8001c30 <MX_GPIO_Init+0x204>)
 8001acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ad8:	4b55      	ldr	r3, [pc, #340]	; (8001c30 <MX_GPIO_Init+0x204>)
 8001ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ade:	4a54      	ldr	r2, [pc, #336]	; (8001c30 <MX_GPIO_Init+0x204>)
 8001ae0:	f043 0308 	orr.w	r3, r3, #8
 8001ae4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ae8:	4b51      	ldr	r3, [pc, #324]	; (8001c30 <MX_GPIO_Init+0x204>)
 8001aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aee:	f003 0308 	and.w	r3, r3, #8
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI4_CS2_Pin|SPI4_CS1_Pin|SPI1_CS_Pin|SPI2_CS0_Pin
 8001af6:	2200      	movs	r2, #0
 8001af8:	f24f 0118 	movw	r1, #61464	; 0xf018
 8001afc:	484d      	ldr	r0, [pc, #308]	; (8001c34 <MX_GPIO_Init+0x208>)
 8001afe:	f003 fed5 	bl	80058ac <HAL_GPIO_WritePin>
                          |SPI2_CS1_Pin|SPI2_CS2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_AUX_4_Pin|GPIO_AUX_3_Pin|GPIO_AUX_2_Pin|GPIO_AUX_1_Pin
 8001b02:	2200      	movs	r2, #0
 8001b04:	f647 0110 	movw	r1, #30736	; 0x7810
 8001b08:	484b      	ldr	r0, [pc, #300]	; (8001c38 <MX_GPIO_Init+0x20c>)
 8001b0a:	f003 fecf 	bl	80058ac <HAL_GPIO_WritePin>
                          |SPI3_CS0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS1_GPIO_Port, SPI3_CS1_Pin, GPIO_PIN_RESET);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b14:	4849      	ldr	r0, [pc, #292]	; (8001c3c <MX_GPIO_Init+0x210>)
 8001b16:	f003 fec9 	bl	80058ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI4_CS2_Pin SPI4_CS1_Pin SPI1_CS_Pin SPI2_CS0_Pin
                           SPI2_CS1_Pin SPI2_CS2_Pin */
  GPIO_InitStruct.Pin = SPI4_CS2_Pin|SPI4_CS1_Pin|SPI1_CS_Pin|SPI2_CS0_Pin
 8001b1a:	f24f 0318 	movw	r3, #61464	; 0xf018
 8001b1e:	61fb      	str	r3, [r7, #28]
                          |SPI2_CS1_Pin|SPI2_CS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b20:	2301      	movs	r3, #1
 8001b22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b2c:	f107 031c 	add.w	r3, r7, #28
 8001b30:	4619      	mov	r1, r3
 8001b32:	4840      	ldr	r0, [pc, #256]	; (8001c34 <MX_GPIO_Init+0x208>)
 8001b34:	f003 fd0a 	bl	800554c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b44:	2300      	movs	r3, #0
 8001b46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4c:	f107 031c 	add.w	r3, r7, #28
 8001b50:	4619      	mov	r1, r3
 8001b52:	483a      	ldr	r0, [pc, #232]	; (8001c3c <MX_GPIO_Init+0x210>)
 8001b54:	f003 fcfa 	bl	800554c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_AUX_4_Pin GPIO_AUX_3_Pin GPIO_AUX_2_Pin GPIO_AUX_1_Pin
                           SPI3_CS0_Pin */
  GPIO_InitStruct.Pin = GPIO_AUX_4_Pin|GPIO_AUX_3_Pin|GPIO_AUX_2_Pin|GPIO_AUX_1_Pin
 8001b58:	f647 0310 	movw	r3, #30736	; 0x7810
 8001b5c:	61fb      	str	r3, [r7, #28]
                          |SPI3_CS0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b66:	2300      	movs	r3, #0
 8001b68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b6a:	f107 031c 	add.w	r3, r7, #28
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4831      	ldr	r0, [pc, #196]	; (8001c38 <MX_GPIO_Init+0x20c>)
 8001b72:	f003 fceb 	bl	800554c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b84:	f107 031c 	add.w	r3, r7, #28
 8001b88:	4619      	mov	r1, r3
 8001b8a:	482d      	ldr	r0, [pc, #180]	; (8001c40 <MX_GPIO_Init+0x214>)
 8001b8c:	f003 fcde 	bl	800554c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS1_Pin */
  GPIO_InitStruct.Pin = SPI3_CS1_Pin;
 8001b90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b96:	2301      	movs	r3, #1
 8001b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS1_GPIO_Port, &GPIO_InitStruct);
 8001ba2:	f107 031c 	add.w	r3, r7, #28
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4824      	ldr	r0, [pc, #144]	; (8001c3c <MX_GPIO_Init+0x210>)
 8001baa:	f003 fccf 	bl	800554c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001bae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001bc0:	2308      	movs	r3, #8
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bc4:	f107 031c 	add.w	r3, r7, #28
 8001bc8:	4619      	mov	r1, r3
 8001bca:	481d      	ldr	r0, [pc, #116]	; (8001c40 <MX_GPIO_Init+0x214>)
 8001bcc:	f003 fcbe 	bl	800554c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bd0:	2304      	movs	r3, #4
 8001bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bdc:	f107 031c 	add.w	r3, r7, #28
 8001be0:	4619      	mov	r1, r3
 8001be2:	4815      	ldr	r0, [pc, #84]	; (8001c38 <MX_GPIO_Init+0x20c>)
 8001be4:	f003 fcb2 	bl	800554c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001be8:	2310      	movs	r3, #16
 8001bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bec:	2302      	movs	r3, #2
 8001bee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001bf8:	2306      	movs	r3, #6
 8001bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bfc:	f107 031c 	add.w	r3, r7, #28
 8001c00:	4619      	mov	r1, r3
 8001c02:	4810      	ldr	r0, [pc, #64]	; (8001c44 <MX_GPIO_Init+0x218>)
 8001c04:	f003 fca2 	bl	800554c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c08:	2320      	movs	r3, #32
 8001c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c14:	2300      	movs	r3, #0
 8001c16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001c18:	2307      	movs	r3, #7
 8001c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1c:	f107 031c 	add.w	r3, r7, #28
 8001c20:	4619      	mov	r1, r3
 8001c22:	4808      	ldr	r0, [pc, #32]	; (8001c44 <MX_GPIO_Init+0x218>)
 8001c24:	f003 fc92 	bl	800554c <HAL_GPIO_Init>

}
 8001c28:	bf00      	nop
 8001c2a:	3730      	adds	r7, #48	; 0x30
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	58024400 	.word	0x58024400
 8001c34:	58021000 	.word	0x58021000
 8001c38:	58020c00 	.word	0x58020c00
 8001c3c:	58020000 	.word	0x58020000
 8001c40:	58020800 	.word	0x58020800
 8001c44:	58020400 	.word	0x58020400

08001c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c4c:	b672      	cpsid	i
}
 8001c4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c50:	e7fe      	b.n	8001c50 <Error_Handler+0x8>
	...

08001c54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5a:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <HAL_MspInit+0x30>)
 8001c5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c60:	4a08      	ldr	r2, [pc, #32]	; (8001c84 <HAL_MspInit+0x30>)
 8001c62:	f043 0302 	orr.w	r3, r3, #2
 8001c66:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <HAL_MspInit+0x30>)
 8001c6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	607b      	str	r3, [r7, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	58024400 	.word	0x58024400

08001c88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b090      	sub	sp, #64	; 0x40
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a79      	ldr	r2, [pc, #484]	; (8001e8c <HAL_ADC_MspInit+0x204>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d14e      	bne.n	8001d48 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001caa:	4b79      	ldr	r3, [pc, #484]	; (8001e90 <HAL_ADC_MspInit+0x208>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	4a77      	ldr	r2, [pc, #476]	; (8001e90 <HAL_ADC_MspInit+0x208>)
 8001cb2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001cb4:	4b76      	ldr	r3, [pc, #472]	; (8001e90 <HAL_ADC_MspInit+0x208>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d10e      	bne.n	8001cda <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001cbc:	4b75      	ldr	r3, [pc, #468]	; (8001e94 <HAL_ADC_MspInit+0x20c>)
 8001cbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001cc2:	4a74      	ldr	r2, [pc, #464]	; (8001e94 <HAL_ADC_MspInit+0x20c>)
 8001cc4:	f043 0320 	orr.w	r3, r3, #32
 8001cc8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ccc:	4b71      	ldr	r3, [pc, #452]	; (8001e94 <HAL_ADC_MspInit+0x20c>)
 8001cce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001cd2:	f003 0320 	and.w	r3, r3, #32
 8001cd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cda:	4b6e      	ldr	r3, [pc, #440]	; (8001e94 <HAL_ADC_MspInit+0x20c>)
 8001cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce0:	4a6c      	ldr	r2, [pc, #432]	; (8001e94 <HAL_ADC_MspInit+0x20c>)
 8001ce2:	f043 0304 	orr.w	r3, r3, #4
 8001ce6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cea:	4b6a      	ldr	r3, [pc, #424]	; (8001e94 <HAL_ADC_MspInit+0x20c>)
 8001cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf8:	4b66      	ldr	r3, [pc, #408]	; (8001e94 <HAL_ADC_MspInit+0x20c>)
 8001cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cfe:	4a65      	ldr	r2, [pc, #404]	; (8001e94 <HAL_ADC_MspInit+0x20c>)
 8001d00:	f043 0302 	orr.w	r3, r3, #2
 8001d04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d08:	4b62      	ldr	r3, [pc, #392]	; (8001e94 <HAL_ADC_MspInit+0x20c>)
 8001d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	623b      	str	r3, [r7, #32]
 8001d14:	6a3b      	ldr	r3, [r7, #32]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INN4
    PB0     ------> ADC1_INN5
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001d16:	2333      	movs	r3, #51	; 0x33
 8001d18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d26:	4619      	mov	r1, r3
 8001d28:	485b      	ldr	r0, [pc, #364]	; (8001e98 <HAL_ADC_MspInit+0x210>)
 8001d2a:	f003 fc0f 	bl	800554c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d32:	2303      	movs	r3, #3
 8001d34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4856      	ldr	r0, [pc, #344]	; (8001e9c <HAL_ADC_MspInit+0x214>)
 8001d42:	f003 fc03 	bl	800554c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001d46:	e09d      	b.n	8001e84 <HAL_ADC_MspInit+0x1fc>
  else if(hadc->Instance==ADC2)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a54      	ldr	r2, [pc, #336]	; (8001ea0 <HAL_ADC_MspInit+0x218>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d169      	bne.n	8001e26 <HAL_ADC_MspInit+0x19e>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001d52:	4b4f      	ldr	r3, [pc, #316]	; (8001e90 <HAL_ADC_MspInit+0x208>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	3301      	adds	r3, #1
 8001d58:	4a4d      	ldr	r2, [pc, #308]	; (8001e90 <HAL_ADC_MspInit+0x208>)
 8001d5a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001d5c:	4b4c      	ldr	r3, [pc, #304]	; (8001e90 <HAL_ADC_MspInit+0x208>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d10e      	bne.n	8001d82 <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001d64:	4b4b      	ldr	r3, [pc, #300]	; (8001e94 <HAL_ADC_MspInit+0x20c>)
 8001d66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d6a:	4a4a      	ldr	r2, [pc, #296]	; (8001e94 <HAL_ADC_MspInit+0x20c>)
 8001d6c:	f043 0320 	orr.w	r3, r3, #32
 8001d70:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d74:	4b47      	ldr	r3, [pc, #284]	; (8001e94 <HAL_ADC_MspInit+0x20c>)
 8001d76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d7a:	f003 0320 	and.w	r3, r3, #32
 8001d7e:	61fb      	str	r3, [r7, #28]
 8001d80:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d82:	4b44      	ldr	r3, [pc, #272]	; (8001e94 <HAL_ADC_MspInit+0x20c>)
 8001d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d88:	4a42      	ldr	r2, [pc, #264]	; (8001e94 <HAL_ADC_MspInit+0x20c>)
 8001d8a:	f043 0304 	orr.w	r3, r3, #4
 8001d8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d92:	4b40      	ldr	r3, [pc, #256]	; (8001e94 <HAL_ADC_MspInit+0x20c>)
 8001d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	61bb      	str	r3, [r7, #24]
 8001d9e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da0:	4b3c      	ldr	r3, [pc, #240]	; (8001e94 <HAL_ADC_MspInit+0x20c>)
 8001da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da6:	4a3b      	ldr	r2, [pc, #236]	; (8001e94 <HAL_ADC_MspInit+0x20c>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001db0:	4b38      	ldr	r3, [pc, #224]	; (8001e94 <HAL_ADC_MspInit+0x20c>)
 8001db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	617b      	str	r3, [r7, #20]
 8001dbc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dbe:	4b35      	ldr	r3, [pc, #212]	; (8001e94 <HAL_ADC_MspInit+0x20c>)
 8001dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc4:	4a33      	ldr	r2, [pc, #204]	; (8001e94 <HAL_ADC_MspInit+0x20c>)
 8001dc6:	f043 0302 	orr.w	r3, r3, #2
 8001dca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dce:	4b31      	ldr	r3, [pc, #196]	; (8001e94 <HAL_ADC_MspInit+0x20c>)
 8001dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001ddc:	2333      	movs	r3, #51	; 0x33
 8001dde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001de0:	2303      	movs	r3, #3
 8001de2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001de8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dec:	4619      	mov	r1, r3
 8001dee:	482a      	ldr	r0, [pc, #168]	; (8001e98 <HAL_ADC_MspInit+0x210>)
 8001df0:	f003 fbac 	bl	800554c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001df4:	2304      	movs	r3, #4
 8001df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e04:	4619      	mov	r1, r3
 8001e06:	4827      	ldr	r0, [pc, #156]	; (8001ea4 <HAL_ADC_MspInit+0x21c>)
 8001e08:	f003 fba0 	bl	800554c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e10:	2303      	movs	r3, #3
 8001e12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	481f      	ldr	r0, [pc, #124]	; (8001e9c <HAL_ADC_MspInit+0x214>)
 8001e20:	f003 fb94 	bl	800554c <HAL_GPIO_Init>
}
 8001e24:	e02e      	b.n	8001e84 <HAL_ADC_MspInit+0x1fc>
  else if(hadc->Instance==ADC3)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a1f      	ldr	r2, [pc, #124]	; (8001ea8 <HAL_ADC_MspInit+0x220>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d129      	bne.n	8001e84 <HAL_ADC_MspInit+0x1fc>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001e30:	4b18      	ldr	r3, [pc, #96]	; (8001e94 <HAL_ADC_MspInit+0x20c>)
 8001e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e36:	4a17      	ldr	r2, [pc, #92]	; (8001e94 <HAL_ADC_MspInit+0x20c>)
 8001e38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e40:	4b14      	ldr	r3, [pc, #80]	; (8001e94 <HAL_ADC_MspInit+0x20c>)
 8001e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e4e:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <HAL_ADC_MspInit+0x20c>)
 8001e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e54:	4a0f      	ldr	r2, [pc, #60]	; (8001e94 <HAL_ADC_MspInit+0x20c>)
 8001e56:	f043 0304 	orr.w	r3, r3, #4
 8001e5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e5e:	4b0d      	ldr	r3, [pc, #52]	; (8001e94 <HAL_ADC_MspInit+0x20c>)
 8001e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e70:	2303      	movs	r3, #3
 8001e72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4806      	ldr	r0, [pc, #24]	; (8001e98 <HAL_ADC_MspInit+0x210>)
 8001e80:	f003 fb64 	bl	800554c <HAL_GPIO_Init>
}
 8001e84:	bf00      	nop
 8001e86:	3740      	adds	r7, #64	; 0x40
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40022000 	.word	0x40022000
 8001e90:	24000208 	.word	0x24000208
 8001e94:	58024400 	.word	0x58024400
 8001e98:	58020800 	.word	0x58020800
 8001e9c:	58020400 	.word	0x58020400
 8001ea0:	40022100 	.word	0x40022100
 8001ea4:	58020000 	.word	0x58020000
 8001ea8:	58026000 	.word	0x58026000

08001eac <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08a      	sub	sp, #40	; 0x28
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb4:	f107 0314 	add.w	r3, r7, #20
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
 8001ec2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a18      	ldr	r2, [pc, #96]	; (8001f2c <HAL_DAC_MspInit+0x80>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d129      	bne.n	8001f22 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001ece:	4b18      	ldr	r3, [pc, #96]	; (8001f30 <HAL_DAC_MspInit+0x84>)
 8001ed0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ed4:	4a16      	ldr	r2, [pc, #88]	; (8001f30 <HAL_DAC_MspInit+0x84>)
 8001ed6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001eda:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ede:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <HAL_DAC_MspInit+0x84>)
 8001ee0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ee4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eec:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <HAL_DAC_MspInit+0x84>)
 8001eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef2:	4a0f      	ldr	r2, [pc, #60]	; (8001f30 <HAL_DAC_MspInit+0x84>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001efc:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <HAL_DAC_MspInit+0x84>)
 8001efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001f0a:	2330      	movs	r3, #48	; 0x30
 8001f0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f16:	f107 0314 	add.w	r3, r7, #20
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4805      	ldr	r0, [pc, #20]	; (8001f34 <HAL_DAC_MspInit+0x88>)
 8001f1e:	f003 fb15 	bl	800554c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001f22:	bf00      	nop
 8001f24:	3728      	adds	r7, #40	; 0x28
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40007400 	.word	0x40007400
 8001f30:	58024400 	.word	0x58024400
 8001f34:	58020000 	.word	0x58020000

08001f38 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b0ba      	sub	sp, #232	; 0xe8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f50:	f107 0318 	add.w	r3, r7, #24
 8001f54:	22bc      	movs	r2, #188	; 0xbc
 8001f56:	2100      	movs	r1, #0
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f00a fc8f 	bl	800c87c <memset>
  if(hfdcan->Instance==FDCAN1)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a54      	ldr	r2, [pc, #336]	; (80020b4 <HAL_FDCAN_MspInit+0x17c>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d14e      	bne.n	8002006 <HAL_FDCAN_MspInit+0xce>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001f68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f6c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001f6e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001f72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f76:	f107 0318 	add.w	r3, r7, #24
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f005 fa4c 	bl	8007418 <HAL_RCCEx_PeriphCLKConfig>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 8001f86:	f7ff fe5f 	bl	8001c48 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001f8a:	4b4b      	ldr	r3, [pc, #300]	; (80020b8 <HAL_FDCAN_MspInit+0x180>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	4a49      	ldr	r2, [pc, #292]	; (80020b8 <HAL_FDCAN_MspInit+0x180>)
 8001f92:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001f94:	4b48      	ldr	r3, [pc, #288]	; (80020b8 <HAL_FDCAN_MspInit+0x180>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d10e      	bne.n	8001fba <HAL_FDCAN_MspInit+0x82>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001f9c:	4b47      	ldr	r3, [pc, #284]	; (80020bc <HAL_FDCAN_MspInit+0x184>)
 8001f9e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001fa2:	4a46      	ldr	r2, [pc, #280]	; (80020bc <HAL_FDCAN_MspInit+0x184>)
 8001fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001fac:	4b43      	ldr	r3, [pc, #268]	; (80020bc <HAL_FDCAN_MspInit+0x184>)
 8001fae:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb6:	617b      	str	r3, [r7, #20]
 8001fb8:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fba:	4b40      	ldr	r3, [pc, #256]	; (80020bc <HAL_FDCAN_MspInit+0x184>)
 8001fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fc0:	4a3e      	ldr	r2, [pc, #248]	; (80020bc <HAL_FDCAN_MspInit+0x184>)
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fca:	4b3c      	ldr	r3, [pc, #240]	; (80020bc <HAL_FDCAN_MspInit+0x184>)
 8001fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001fd8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001fdc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fec:	2300      	movs	r3, #0
 8001fee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001ff2:	2309      	movs	r3, #9
 8001ff4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4830      	ldr	r0, [pc, #192]	; (80020c0 <HAL_FDCAN_MspInit+0x188>)
 8002000:	f003 faa4 	bl	800554c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8002004:	e052      	b.n	80020ac <HAL_FDCAN_MspInit+0x174>
  else if(hfdcan->Instance==FDCAN2)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a2e      	ldr	r2, [pc, #184]	; (80020c4 <HAL_FDCAN_MspInit+0x18c>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d14d      	bne.n	80020ac <HAL_FDCAN_MspInit+0x174>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002010:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002014:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002016:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800201a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800201e:	f107 0318 	add.w	r3, r7, #24
 8002022:	4618      	mov	r0, r3
 8002024:	f005 f9f8 	bl	8007418 <HAL_RCCEx_PeriphCLKConfig>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <HAL_FDCAN_MspInit+0xfa>
      Error_Handler();
 800202e:	f7ff fe0b 	bl	8001c48 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002032:	4b21      	ldr	r3, [pc, #132]	; (80020b8 <HAL_FDCAN_MspInit+0x180>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	3301      	adds	r3, #1
 8002038:	4a1f      	ldr	r2, [pc, #124]	; (80020b8 <HAL_FDCAN_MspInit+0x180>)
 800203a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800203c:	4b1e      	ldr	r3, [pc, #120]	; (80020b8 <HAL_FDCAN_MspInit+0x180>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d10e      	bne.n	8002062 <HAL_FDCAN_MspInit+0x12a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002044:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <HAL_FDCAN_MspInit+0x184>)
 8002046:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800204a:	4a1c      	ldr	r2, [pc, #112]	; (80020bc <HAL_FDCAN_MspInit+0x184>)
 800204c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002050:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002054:	4b19      	ldr	r3, [pc, #100]	; (80020bc <HAL_FDCAN_MspInit+0x184>)
 8002056:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800205a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002062:	4b16      	ldr	r3, [pc, #88]	; (80020bc <HAL_FDCAN_MspInit+0x184>)
 8002064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002068:	4a14      	ldr	r2, [pc, #80]	; (80020bc <HAL_FDCAN_MspInit+0x184>)
 800206a:	f043 0302 	orr.w	r3, r3, #2
 800206e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002072:	4b12      	ldr	r3, [pc, #72]	; (80020bc <HAL_FDCAN_MspInit+0x184>)
 8002074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002080:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002084:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002088:	2302      	movs	r3, #2
 800208a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002094:	2300      	movs	r3, #0
 8002096:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800209a:	2309      	movs	r3, #9
 800209c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80020a4:	4619      	mov	r1, r3
 80020a6:	4808      	ldr	r0, [pc, #32]	; (80020c8 <HAL_FDCAN_MspInit+0x190>)
 80020a8:	f003 fa50 	bl	800554c <HAL_GPIO_Init>
}
 80020ac:	bf00      	nop
 80020ae:	37e8      	adds	r7, #232	; 0xe8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	4000a000 	.word	0x4000a000
 80020b8:	2400020c 	.word	0x2400020c
 80020bc:	58024400 	.word	0x58024400
 80020c0:	58020000 	.word	0x58020000
 80020c4:	4000a400 	.word	0x4000a400
 80020c8:	58020400 	.word	0x58020400

080020cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b0bc      	sub	sp, #240	; 0xf0
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	60da      	str	r2, [r3, #12]
 80020e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020e4:	f107 0320 	add.w	r3, r7, #32
 80020e8:	22bc      	movs	r2, #188	; 0xbc
 80020ea:	2100      	movs	r1, #0
 80020ec:	4618      	mov	r0, r3
 80020ee:	f00a fbc5 	bl	800c87c <memset>
  if(hi2c->Instance==I2C1)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a6d      	ldr	r2, [pc, #436]	; (80022ac <HAL_I2C_MspInit+0x1e0>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d142      	bne.n	8002182 <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80020fc:	2308      	movs	r3, #8
 80020fe:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002100:	2300      	movs	r3, #0
 8002102:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002106:	f107 0320 	add.w	r3, r7, #32
 800210a:	4618      	mov	r0, r3
 800210c:	f005 f984 	bl	8007418 <HAL_RCCEx_PeriphCLKConfig>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002116:	f7ff fd97 	bl	8001c48 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800211a:	4b65      	ldr	r3, [pc, #404]	; (80022b0 <HAL_I2C_MspInit+0x1e4>)
 800211c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002120:	4a63      	ldr	r2, [pc, #396]	; (80022b0 <HAL_I2C_MspInit+0x1e4>)
 8002122:	f043 0302 	orr.w	r3, r3, #2
 8002126:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800212a:	4b61      	ldr	r3, [pc, #388]	; (80022b0 <HAL_I2C_MspInit+0x1e4>)
 800212c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	61fb      	str	r3, [r7, #28]
 8002136:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002138:	23c0      	movs	r3, #192	; 0xc0
 800213a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800213e:	2312      	movs	r3, #18
 8002140:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	2300      	movs	r3, #0
 8002146:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214a:	2300      	movs	r3, #0
 800214c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002150:	2304      	movs	r3, #4
 8002152:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002156:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800215a:	4619      	mov	r1, r3
 800215c:	4855      	ldr	r0, [pc, #340]	; (80022b4 <HAL_I2C_MspInit+0x1e8>)
 800215e:	f003 f9f5 	bl	800554c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002162:	4b53      	ldr	r3, [pc, #332]	; (80022b0 <HAL_I2C_MspInit+0x1e4>)
 8002164:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002168:	4a51      	ldr	r2, [pc, #324]	; (80022b0 <HAL_I2C_MspInit+0x1e4>)
 800216a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800216e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002172:	4b4f      	ldr	r3, [pc, #316]	; (80022b0 <HAL_I2C_MspInit+0x1e4>)
 8002174:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800217c:	61bb      	str	r3, [r7, #24]
 800217e:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8002180:	e090      	b.n	80022a4 <HAL_I2C_MspInit+0x1d8>
  else if(hi2c->Instance==I2C2)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a4c      	ldr	r2, [pc, #304]	; (80022b8 <HAL_I2C_MspInit+0x1ec>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d143      	bne.n	8002214 <HAL_I2C_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800218c:	2308      	movs	r3, #8
 800218e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002190:	2300      	movs	r3, #0
 8002192:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002196:	f107 0320 	add.w	r3, r7, #32
 800219a:	4618      	mov	r0, r3
 800219c:	f005 f93c 	bl	8007418 <HAL_RCCEx_PeriphCLKConfig>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_I2C_MspInit+0xde>
      Error_Handler();
 80021a6:	f7ff fd4f 	bl	8001c48 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021aa:	4b41      	ldr	r3, [pc, #260]	; (80022b0 <HAL_I2C_MspInit+0x1e4>)
 80021ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b0:	4a3f      	ldr	r2, [pc, #252]	; (80022b0 <HAL_I2C_MspInit+0x1e4>)
 80021b2:	f043 0302 	orr.w	r3, r3, #2
 80021b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021ba:	4b3d      	ldr	r3, [pc, #244]	; (80022b0 <HAL_I2C_MspInit+0x1e4>)
 80021bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	617b      	str	r3, [r7, #20]
 80021c6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80021c8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80021cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021d0:	2312      	movs	r3, #18
 80021d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021dc:	2300      	movs	r3, #0
 80021de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80021e2:	2304      	movs	r3, #4
 80021e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021ec:	4619      	mov	r1, r3
 80021ee:	4831      	ldr	r0, [pc, #196]	; (80022b4 <HAL_I2C_MspInit+0x1e8>)
 80021f0:	f003 f9ac 	bl	800554c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80021f4:	4b2e      	ldr	r3, [pc, #184]	; (80022b0 <HAL_I2C_MspInit+0x1e4>)
 80021f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021fa:	4a2d      	ldr	r2, [pc, #180]	; (80022b0 <HAL_I2C_MspInit+0x1e4>)
 80021fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002200:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002204:	4b2a      	ldr	r3, [pc, #168]	; (80022b0 <HAL_I2C_MspInit+0x1e4>)
 8002206:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800220a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800220e:	613b      	str	r3, [r7, #16]
 8002210:	693b      	ldr	r3, [r7, #16]
}
 8002212:	e047      	b.n	80022a4 <HAL_I2C_MspInit+0x1d8>
  else if(hi2c->Instance==I2C4)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a28      	ldr	r2, [pc, #160]	; (80022bc <HAL_I2C_MspInit+0x1f0>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d142      	bne.n	80022a4 <HAL_I2C_MspInit+0x1d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800221e:	2310      	movs	r3, #16
 8002220:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8002222:	2300      	movs	r3, #0
 8002224:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002228:	f107 0320 	add.w	r3, r7, #32
 800222c:	4618      	mov	r0, r3
 800222e:	f005 f8f3 	bl	8007418 <HAL_RCCEx_PeriphCLKConfig>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <HAL_I2C_MspInit+0x170>
      Error_Handler();
 8002238:	f7ff fd06 	bl	8001c48 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800223c:	4b1c      	ldr	r3, [pc, #112]	; (80022b0 <HAL_I2C_MspInit+0x1e4>)
 800223e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002242:	4a1b      	ldr	r2, [pc, #108]	; (80022b0 <HAL_I2C_MspInit+0x1e4>)
 8002244:	f043 0302 	orr.w	r3, r3, #2
 8002248:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800224c:	4b18      	ldr	r3, [pc, #96]	; (80022b0 <HAL_I2C_MspInit+0x1e4>)
 800224e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800225a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800225e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002262:	2312      	movs	r3, #18
 8002264:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226e:	2300      	movs	r3, #0
 8002270:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 8002274:	2306      	movs	r3, #6
 8002276:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800227a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800227e:	4619      	mov	r1, r3
 8002280:	480c      	ldr	r0, [pc, #48]	; (80022b4 <HAL_I2C_MspInit+0x1e8>)
 8002282:	f003 f963 	bl	800554c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002286:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <HAL_I2C_MspInit+0x1e4>)
 8002288:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800228c:	4a08      	ldr	r2, [pc, #32]	; (80022b0 <HAL_I2C_MspInit+0x1e4>)
 800228e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002292:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002296:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_I2C_MspInit+0x1e4>)
 8002298:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800229c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a0:	60bb      	str	r3, [r7, #8]
 80022a2:	68bb      	ldr	r3, [r7, #8]
}
 80022a4:	bf00      	nop
 80022a6:	37f0      	adds	r7, #240	; 0xf0
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40005400 	.word	0x40005400
 80022b0:	58024400 	.word	0x58024400
 80022b4:	58020400 	.word	0x58020400
 80022b8:	40005800 	.word	0x40005800
 80022bc:	58001c00 	.word	0x58001c00

080022c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b0bc      	sub	sp, #240	; 0xf0
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022d8:	f107 0320 	add.w	r3, r7, #32
 80022dc:	22bc      	movs	r2, #188	; 0xbc
 80022de:	2100      	movs	r1, #0
 80022e0:	4618      	mov	r0, r3
 80022e2:	f00a facb 	bl	800c87c <memset>
  if(huart->Instance==LPUART1)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a6d      	ldr	r2, [pc, #436]	; (80024a0 <HAL_UART_MspInit+0x1e0>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d143      	bne.n	8002378 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80022f0:	2304      	movs	r3, #4
 80022f2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 80022f4:	2300      	movs	r3, #0
 80022f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022fa:	f107 0320 	add.w	r3, r7, #32
 80022fe:	4618      	mov	r0, r3
 8002300:	f005 f88a 	bl	8007418 <HAL_RCCEx_PeriphCLKConfig>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800230a:	f7ff fc9d 	bl	8001c48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800230e:	4b65      	ldr	r3, [pc, #404]	; (80024a4 <HAL_UART_MspInit+0x1e4>)
 8002310:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002314:	4a63      	ldr	r2, [pc, #396]	; (80024a4 <HAL_UART_MspInit+0x1e4>)
 8002316:	f043 0308 	orr.w	r3, r3, #8
 800231a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800231e:	4b61      	ldr	r3, [pc, #388]	; (80024a4 <HAL_UART_MspInit+0x1e4>)
 8002320:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002324:	f003 0308 	and.w	r3, r3, #8
 8002328:	61fb      	str	r3, [r7, #28]
 800232a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800232c:	4b5d      	ldr	r3, [pc, #372]	; (80024a4 <HAL_UART_MspInit+0x1e4>)
 800232e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002332:	4a5c      	ldr	r2, [pc, #368]	; (80024a4 <HAL_UART_MspInit+0x1e4>)
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800233c:	4b59      	ldr	r3, [pc, #356]	; (80024a4 <HAL_UART_MspInit+0x1e4>)
 800233e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	61bb      	str	r3, [r7, #24]
 8002348:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800234a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800234e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002352:	2302      	movs	r3, #2
 8002354:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235e:	2300      	movs	r3, #0
 8002360:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 8002364:	2303      	movs	r3, #3
 8002366:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800236e:	4619      	mov	r1, r3
 8002370:	484d      	ldr	r0, [pc, #308]	; (80024a8 <HAL_UART_MspInit+0x1e8>)
 8002372:	f003 f8eb 	bl	800554c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 8002376:	e08e      	b.n	8002496 <HAL_UART_MspInit+0x1d6>
  else if(huart->Instance==UART4)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a4b      	ldr	r2, [pc, #300]	; (80024ac <HAL_UART_MspInit+0x1ec>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d142      	bne.n	8002408 <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002382:	2302      	movs	r3, #2
 8002384:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002386:	2300      	movs	r3, #0
 8002388:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800238c:	f107 0320 	add.w	r3, r7, #32
 8002390:	4618      	mov	r0, r3
 8002392:	f005 f841 	bl	8007418 <HAL_RCCEx_PeriphCLKConfig>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 800239c:	f7ff fc54 	bl	8001c48 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 80023a0:	4b40      	ldr	r3, [pc, #256]	; (80024a4 <HAL_UART_MspInit+0x1e4>)
 80023a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023a6:	4a3f      	ldr	r2, [pc, #252]	; (80024a4 <HAL_UART_MspInit+0x1e4>)
 80023a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80023ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023b0:	4b3c      	ldr	r3, [pc, #240]	; (80024a4 <HAL_UART_MspInit+0x1e4>)
 80023b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023ba:	617b      	str	r3, [r7, #20]
 80023bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023be:	4b39      	ldr	r3, [pc, #228]	; (80024a4 <HAL_UART_MspInit+0x1e4>)
 80023c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023c4:	4a37      	ldr	r2, [pc, #220]	; (80024a4 <HAL_UART_MspInit+0x1e4>)
 80023c6:	f043 0308 	orr.w	r3, r3, #8
 80023ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023ce:	4b35      	ldr	r3, [pc, #212]	; (80024a4 <HAL_UART_MspInit+0x1e4>)
 80023d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	613b      	str	r3, [r7, #16]
 80023da:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80023dc:	2303      	movs	r3, #3
 80023de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e2:	2302      	movs	r3, #2
 80023e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ee:	2300      	movs	r3, #0
 80023f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80023f4:	2308      	movs	r3, #8
 80023f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023fa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80023fe:	4619      	mov	r1, r3
 8002400:	482b      	ldr	r0, [pc, #172]	; (80024b0 <HAL_UART_MspInit+0x1f0>)
 8002402:	f003 f8a3 	bl	800554c <HAL_GPIO_Init>
}
 8002406:	e046      	b.n	8002496 <HAL_UART_MspInit+0x1d6>
  else if(huart->Instance==UART8)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a29      	ldr	r2, [pc, #164]	; (80024b4 <HAL_UART_MspInit+0x1f4>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d141      	bne.n	8002496 <HAL_UART_MspInit+0x1d6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8002412:	2302      	movs	r3, #2
 8002414:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002416:	2300      	movs	r3, #0
 8002418:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800241c:	f107 0320 	add.w	r3, r7, #32
 8002420:	4618      	mov	r0, r3
 8002422:	f004 fff9 	bl	8007418 <HAL_RCCEx_PeriphCLKConfig>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <HAL_UART_MspInit+0x170>
      Error_Handler();
 800242c:	f7ff fc0c 	bl	8001c48 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002430:	4b1c      	ldr	r3, [pc, #112]	; (80024a4 <HAL_UART_MspInit+0x1e4>)
 8002432:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002436:	4a1b      	ldr	r2, [pc, #108]	; (80024a4 <HAL_UART_MspInit+0x1e4>)
 8002438:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800243c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002440:	4b18      	ldr	r3, [pc, #96]	; (80024a4 <HAL_UART_MspInit+0x1e4>)
 8002442:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002446:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800244e:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <HAL_UART_MspInit+0x1e4>)
 8002450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002454:	4a13      	ldr	r2, [pc, #76]	; (80024a4 <HAL_UART_MspInit+0x1e4>)
 8002456:	f043 0310 	orr.w	r3, r3, #16
 800245a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800245e:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <HAL_UART_MspInit+0x1e4>)
 8002460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002464:	f003 0310 	and.w	r3, r3, #16
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800246c:	2303      	movs	r3, #3
 800246e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002472:	2302      	movs	r3, #2
 8002474:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	2300      	movs	r3, #0
 800247a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247e:	2300      	movs	r3, #0
 8002480:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002484:	2308      	movs	r3, #8
 8002486:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800248a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800248e:	4619      	mov	r1, r3
 8002490:	4809      	ldr	r0, [pc, #36]	; (80024b8 <HAL_UART_MspInit+0x1f8>)
 8002492:	f003 f85b 	bl	800554c <HAL_GPIO_Init>
}
 8002496:	bf00      	nop
 8002498:	37f0      	adds	r7, #240	; 0xf0
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	58000c00 	.word	0x58000c00
 80024a4:	58024400 	.word	0x58024400
 80024a8:	58020000 	.word	0x58020000
 80024ac:	40004c00 	.word	0x40004c00
 80024b0:	58020c00 	.word	0x58020c00
 80024b4:	40007c00 	.word	0x40007c00
 80024b8:	58021000 	.word	0x58021000

080024bc <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b0c0      	sub	sp, #256	; 0x100
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	60da      	str	r2, [r3, #12]
 80024d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024d8:	22bc      	movs	r2, #188	; 0xbc
 80024da:	2100      	movs	r1, #0
 80024dc:	4618      	mov	r0, r3
 80024de:	f00a f9cd 	bl	800c87c <memset>
  if(husart->Instance==USART1)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4aa5      	ldr	r2, [pc, #660]	; (800277c <HAL_USART_MspInit+0x2c0>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d168      	bne.n	80025be <HAL_USART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80024ec:	2301      	movs	r3, #1
 80024ee:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80024f0:	2300      	movs	r3, #0
 80024f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024fa:	4618      	mov	r0, r3
 80024fc:	f004 ff8c 	bl	8007418 <HAL_RCCEx_PeriphCLKConfig>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_USART_MspInit+0x4e>
    {
      Error_Handler();
 8002506:	f7ff fb9f 	bl	8001c48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800250a:	4b9d      	ldr	r3, [pc, #628]	; (8002780 <HAL_USART_MspInit+0x2c4>)
 800250c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002510:	4a9b      	ldr	r2, [pc, #620]	; (8002780 <HAL_USART_MspInit+0x2c4>)
 8002512:	f043 0310 	orr.w	r3, r3, #16
 8002516:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800251a:	4b99      	ldr	r3, [pc, #612]	; (8002780 <HAL_USART_MspInit+0x2c4>)
 800251c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002520:	f003 0310 	and.w	r3, r3, #16
 8002524:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002526:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002528:	4b95      	ldr	r3, [pc, #596]	; (8002780 <HAL_USART_MspInit+0x2c4>)
 800252a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800252e:	4a94      	ldr	r2, [pc, #592]	; (8002780 <HAL_USART_MspInit+0x2c4>)
 8002530:	f043 0302 	orr.w	r3, r3, #2
 8002534:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002538:	4b91      	ldr	r3, [pc, #580]	; (8002780 <HAL_USART_MspInit+0x2c4>)
 800253a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	62bb      	str	r3, [r7, #40]	; 0x28
 8002544:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002546:	4b8e      	ldr	r3, [pc, #568]	; (8002780 <HAL_USART_MspInit+0x2c4>)
 8002548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800254c:	4a8c      	ldr	r2, [pc, #560]	; (8002780 <HAL_USART_MspInit+0x2c4>)
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002556:	4b8a      	ldr	r3, [pc, #552]	; (8002780 <HAL_USART_MspInit+0x2c4>)
 8002558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	627b      	str	r3, [r7, #36]	; 0x24
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    PA8     ------> USART1_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002564:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002568:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256c:	2302      	movs	r3, #2
 800256e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002572:	2300      	movs	r3, #0
 8002574:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002578:	2300      	movs	r3, #0
 800257a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800257e:	2304      	movs	r3, #4
 8002580:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002584:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002588:	4619      	mov	r1, r3
 800258a:	487e      	ldr	r0, [pc, #504]	; (8002784 <HAL_USART_MspInit+0x2c8>)
 800258c:	f002 ffde 	bl	800554c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002590:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002594:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002598:	2302      	movs	r3, #2
 800259a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259e:	2300      	movs	r3, #0
 80025a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a4:	2300      	movs	r3, #0
 80025a6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025aa:	2307      	movs	r3, #7
 80025ac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80025b4:	4619      	mov	r1, r3
 80025b6:	4874      	ldr	r0, [pc, #464]	; (8002788 <HAL_USART_MspInit+0x2cc>)
 80025b8:	f002 ffc8 	bl	800554c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80025bc:	e0d8      	b.n	8002770 <HAL_USART_MspInit+0x2b4>
  else if(husart->Instance==USART2)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a72      	ldr	r2, [pc, #456]	; (800278c <HAL_USART_MspInit+0x2d0>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d142      	bne.n	800264e <HAL_USART_MspInit+0x192>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80025c8:	2302      	movs	r3, #2
 80025ca:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80025cc:	2300      	movs	r3, #0
 80025ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025d6:	4618      	mov	r0, r3
 80025d8:	f004 ff1e 	bl	8007418 <HAL_RCCEx_PeriphCLKConfig>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_USART_MspInit+0x12a>
      Error_Handler();
 80025e2:	f7ff fb31 	bl	8001c48 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80025e6:	4b66      	ldr	r3, [pc, #408]	; (8002780 <HAL_USART_MspInit+0x2c4>)
 80025e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025ec:	4a64      	ldr	r2, [pc, #400]	; (8002780 <HAL_USART_MspInit+0x2c4>)
 80025ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80025f6:	4b62      	ldr	r3, [pc, #392]	; (8002780 <HAL_USART_MspInit+0x2c4>)
 80025f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002600:	623b      	str	r3, [r7, #32]
 8002602:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002604:	4b5e      	ldr	r3, [pc, #376]	; (8002780 <HAL_USART_MspInit+0x2c4>)
 8002606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800260a:	4a5d      	ldr	r2, [pc, #372]	; (8002780 <HAL_USART_MspInit+0x2c4>)
 800260c:	f043 0308 	orr.w	r3, r3, #8
 8002610:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002614:	4b5a      	ldr	r3, [pc, #360]	; (8002780 <HAL_USART_MspInit+0x2c4>)
 8002616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800261a:	f003 0308 	and.w	r3, r3, #8
 800261e:	61fb      	str	r3, [r7, #28]
 8002620:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002622:	23e0      	movs	r3, #224	; 0xe0
 8002624:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002628:	2302      	movs	r3, #2
 800262a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262e:	2300      	movs	r3, #0
 8002630:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002634:	2300      	movs	r3, #0
 8002636:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800263a:	2307      	movs	r3, #7
 800263c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002640:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002644:	4619      	mov	r1, r3
 8002646:	4852      	ldr	r0, [pc, #328]	; (8002790 <HAL_USART_MspInit+0x2d4>)
 8002648:	f002 ff80 	bl	800554c <HAL_GPIO_Init>
}
 800264c:	e090      	b.n	8002770 <HAL_USART_MspInit+0x2b4>
  else if(husart->Instance==USART3)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a50      	ldr	r2, [pc, #320]	; (8002794 <HAL_USART_MspInit+0x2d8>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d143      	bne.n	80026e0 <HAL_USART_MspInit+0x224>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002658:	2302      	movs	r3, #2
 800265a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800265c:	2300      	movs	r3, #0
 800265e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002662:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002666:	4618      	mov	r0, r3
 8002668:	f004 fed6 	bl	8007418 <HAL_RCCEx_PeriphCLKConfig>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <HAL_USART_MspInit+0x1ba>
      Error_Handler();
 8002672:	f7ff fae9 	bl	8001c48 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002676:	4b42      	ldr	r3, [pc, #264]	; (8002780 <HAL_USART_MspInit+0x2c4>)
 8002678:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800267c:	4a40      	ldr	r2, [pc, #256]	; (8002780 <HAL_USART_MspInit+0x2c4>)
 800267e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002682:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002686:	4b3e      	ldr	r3, [pc, #248]	; (8002780 <HAL_USART_MspInit+0x2c4>)
 8002688:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800268c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002690:	61bb      	str	r3, [r7, #24]
 8002692:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002694:	4b3a      	ldr	r3, [pc, #232]	; (8002780 <HAL_USART_MspInit+0x2c4>)
 8002696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800269a:	4a39      	ldr	r2, [pc, #228]	; (8002780 <HAL_USART_MspInit+0x2c4>)
 800269c:	f043 0308 	orr.w	r3, r3, #8
 80026a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026a4:	4b36      	ldr	r3, [pc, #216]	; (8002780 <HAL_USART_MspInit+0x2c4>)
 80026a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	617b      	str	r3, [r7, #20]
 80026b0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80026b2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80026b6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ba:	2302      	movs	r3, #2
 80026bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c6:	2300      	movs	r3, #0
 80026c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80026cc:	2307      	movs	r3, #7
 80026ce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026d2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80026d6:	4619      	mov	r1, r3
 80026d8:	482d      	ldr	r0, [pc, #180]	; (8002790 <HAL_USART_MspInit+0x2d4>)
 80026da:	f002 ff37 	bl	800554c <HAL_GPIO_Init>
}
 80026de:	e047      	b.n	8002770 <HAL_USART_MspInit+0x2b4>
  else if(husart->Instance==USART6)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a2c      	ldr	r2, [pc, #176]	; (8002798 <HAL_USART_MspInit+0x2dc>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d142      	bne.n	8002770 <HAL_USART_MspInit+0x2b4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80026ea:	2301      	movs	r3, #1
 80026ec:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80026ee:	2300      	movs	r3, #0
 80026f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026f8:	4618      	mov	r0, r3
 80026fa:	f004 fe8d 	bl	8007418 <HAL_RCCEx_PeriphCLKConfig>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <HAL_USART_MspInit+0x24c>
      Error_Handler();
 8002704:	f7ff faa0 	bl	8001c48 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002708:	4b1d      	ldr	r3, [pc, #116]	; (8002780 <HAL_USART_MspInit+0x2c4>)
 800270a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800270e:	4a1c      	ldr	r2, [pc, #112]	; (8002780 <HAL_USART_MspInit+0x2c4>)
 8002710:	f043 0320 	orr.w	r3, r3, #32
 8002714:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002718:	4b19      	ldr	r3, [pc, #100]	; (8002780 <HAL_USART_MspInit+0x2c4>)
 800271a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800271e:	f003 0320 	and.w	r3, r3, #32
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002726:	4b16      	ldr	r3, [pc, #88]	; (8002780 <HAL_USART_MspInit+0x2c4>)
 8002728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800272c:	4a14      	ldr	r2, [pc, #80]	; (8002780 <HAL_USART_MspInit+0x2c4>)
 800272e:	f043 0304 	orr.w	r3, r3, #4
 8002732:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002736:	4b12      	ldr	r3, [pc, #72]	; (8002780 <HAL_USART_MspInit+0x2c4>)
 8002738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8002744:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002748:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274c:	2302      	movs	r3, #2
 800274e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002752:	2300      	movs	r3, #0
 8002754:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002758:	2300      	movs	r3, #0
 800275a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800275e:	2307      	movs	r3, #7
 8002760:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002764:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002768:	4619      	mov	r1, r3
 800276a:	480c      	ldr	r0, [pc, #48]	; (800279c <HAL_USART_MspInit+0x2e0>)
 800276c:	f002 feee 	bl	800554c <HAL_GPIO_Init>
}
 8002770:	bf00      	nop
 8002772:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40011000 	.word	0x40011000
 8002780:	58024400 	.word	0x58024400
 8002784:	58020400 	.word	0x58020400
 8002788:	58020000 	.word	0x58020000
 800278c:	40004400 	.word	0x40004400
 8002790:	58020c00 	.word	0x58020c00
 8002794:	40004800 	.word	0x40004800
 8002798:	40011400 	.word	0x40011400
 800279c:	58020800 	.word	0x58020800

080027a0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b0ba      	sub	sp, #232	; 0xe8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	60da      	str	r2, [r3, #12]
 80027b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027b8:	f107 0318 	add.w	r3, r7, #24
 80027bc:	22bc      	movs	r2, #188	; 0xbc
 80027be:	2100      	movs	r1, #0
 80027c0:	4618      	mov	r0, r3
 80027c2:	f00a f85b 	bl	800c87c <memset>
  if(hqspi->Instance==QUADSPI)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a4a      	ldr	r2, [pc, #296]	; (80028f4 <HAL_QSPI_MspInit+0x154>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	f040 808c 	bne.w	80028ea <HAL_QSPI_MspInit+0x14a>
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80027d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 80027d8:	2300      	movs	r3, #0
 80027da:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027dc:	f107 0318 	add.w	r3, r7, #24
 80027e0:	4618      	mov	r0, r3
 80027e2:	f004 fe19 	bl	8007418 <HAL_RCCEx_PeriphCLKConfig>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 80027ec:	f7ff fa2c 	bl	8001c48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80027f0:	4b41      	ldr	r3, [pc, #260]	; (80028f8 <HAL_QSPI_MspInit+0x158>)
 80027f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80027f6:	4a40      	ldr	r2, [pc, #256]	; (80028f8 <HAL_QSPI_MspInit+0x158>)
 80027f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027fc:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002800:	4b3d      	ldr	r3, [pc, #244]	; (80028f8 <HAL_QSPI_MspInit+0x158>)
 8002802:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800280a:	617b      	str	r3, [r7, #20]
 800280c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800280e:	4b3a      	ldr	r3, [pc, #232]	; (80028f8 <HAL_QSPI_MspInit+0x158>)
 8002810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002814:	4a38      	ldr	r2, [pc, #224]	; (80028f8 <HAL_QSPI_MspInit+0x158>)
 8002816:	f043 0302 	orr.w	r3, r3, #2
 800281a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800281e:	4b36      	ldr	r3, [pc, #216]	; (80028f8 <HAL_QSPI_MspInit+0x158>)
 8002820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	613b      	str	r3, [r7, #16]
 800282a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800282c:	4b32      	ldr	r3, [pc, #200]	; (80028f8 <HAL_QSPI_MspInit+0x158>)
 800282e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002832:	4a31      	ldr	r2, [pc, #196]	; (80028f8 <HAL_QSPI_MspInit+0x158>)
 8002834:	f043 0310 	orr.w	r3, r3, #16
 8002838:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800283c:	4b2e      	ldr	r3, [pc, #184]	; (80028f8 <HAL_QSPI_MspInit+0x158>)
 800283e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002842:	f003 0310 	and.w	r3, r3, #16
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800284a:	4b2b      	ldr	r3, [pc, #172]	; (80028f8 <HAL_QSPI_MspInit+0x158>)
 800284c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002850:	4a29      	ldr	r2, [pc, #164]	; (80028f8 <HAL_QSPI_MspInit+0x158>)
 8002852:	f043 0304 	orr.w	r3, r3, #4
 8002856:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800285a:	4b27      	ldr	r3, [pc, #156]	; (80028f8 <HAL_QSPI_MspInit+0x158>)
 800285c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	60bb      	str	r3, [r7, #8]
 8002866:	68bb      	ldr	r3, [r7, #8]
    PE8     ------> QUADSPI_BK2_IO1
    PE9     ------> QUADSPI_BK2_IO2
    PE10     ------> QUADSPI_BK2_IO3
    PC11     ------> QUADSPI_BK2_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002868:	2304      	movs	r3, #4
 800286a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286e:	2302      	movs	r3, #2
 8002870:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800287a:	2300      	movs	r3, #0
 800287c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002880:	2309      	movs	r3, #9
 8002882:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002886:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800288a:	4619      	mov	r1, r3
 800288c:	481b      	ldr	r0, [pc, #108]	; (80028fc <HAL_QSPI_MspInit+0x15c>)
 800288e:	f002 fe5d 	bl	800554c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002892:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8002896:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289a:	2302      	movs	r3, #2
 800289c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a6:	2300      	movs	r3, #0
 80028a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80028ac:	230a      	movs	r3, #10
 80028ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028b2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80028b6:	4619      	mov	r1, r3
 80028b8:	4811      	ldr	r0, [pc, #68]	; (8002900 <HAL_QSPI_MspInit+0x160>)
 80028ba:	f002 fe47 	bl	800554c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80028be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c6:	2302      	movs	r3, #2
 80028c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028cc:	2300      	movs	r3, #0
 80028ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d2:	2300      	movs	r3, #0
 80028d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80028d8:	2309      	movs	r3, #9
 80028da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028de:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80028e2:	4619      	mov	r1, r3
 80028e4:	4807      	ldr	r0, [pc, #28]	; (8002904 <HAL_QSPI_MspInit+0x164>)
 80028e6:	f002 fe31 	bl	800554c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80028ea:	bf00      	nop
 80028ec:	37e8      	adds	r7, #232	; 0xe8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	52005000 	.word	0x52005000
 80028f8:	58024400 	.word	0x58024400
 80028fc:	58020400 	.word	0x58020400
 8002900:	58021000 	.word	0x58021000
 8002904:	58020800 	.word	0x58020800

08002908 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b0be      	sub	sp, #248	; 0xf8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002910:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	605a      	str	r2, [r3, #4]
 800291a:	609a      	str	r2, [r3, #8]
 800291c:	60da      	str	r2, [r3, #12]
 800291e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002920:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002924:	22bc      	movs	r2, #188	; 0xbc
 8002926:	2100      	movs	r1, #0
 8002928:	4618      	mov	r0, r3
 800292a:	f009 ffa7 	bl	800c87c <memset>
  if(hspi->Instance==SPI1)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a92      	ldr	r2, [pc, #584]	; (8002b7c <HAL_SPI_MspInit+0x274>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d167      	bne.n	8002a08 <HAL_SPI_MspInit+0x100>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800293c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800293e:	2300      	movs	r3, #0
 8002940:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002944:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002948:	4618      	mov	r0, r3
 800294a:	f004 fd65 	bl	8007418 <HAL_RCCEx_PeriphCLKConfig>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8002954:	f7ff f978 	bl	8001c48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002958:	4b89      	ldr	r3, [pc, #548]	; (8002b80 <HAL_SPI_MspInit+0x278>)
 800295a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800295e:	4a88      	ldr	r2, [pc, #544]	; (8002b80 <HAL_SPI_MspInit+0x278>)
 8002960:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002964:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002968:	4b85      	ldr	r3, [pc, #532]	; (8002b80 <HAL_SPI_MspInit+0x278>)
 800296a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800296e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002972:	627b      	str	r3, [r7, #36]	; 0x24
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002976:	4b82      	ldr	r3, [pc, #520]	; (8002b80 <HAL_SPI_MspInit+0x278>)
 8002978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800297c:	4a80      	ldr	r2, [pc, #512]	; (8002b80 <HAL_SPI_MspInit+0x278>)
 800297e:	f043 0301 	orr.w	r3, r3, #1
 8002982:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002986:	4b7e      	ldr	r3, [pc, #504]	; (8002b80 <HAL_SPI_MspInit+0x278>)
 8002988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	623b      	str	r3, [r7, #32]
 8002992:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002994:	4b7a      	ldr	r3, [pc, #488]	; (8002b80 <HAL_SPI_MspInit+0x278>)
 8002996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800299a:	4a79      	ldr	r2, [pc, #484]	; (8002b80 <HAL_SPI_MspInit+0x278>)
 800299c:	f043 0302 	orr.w	r3, r3, #2
 80029a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029a4:	4b76      	ldr	r3, [pc, #472]	; (8002b80 <HAL_SPI_MspInit+0x278>)
 80029a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	61fb      	str	r3, [r7, #28]
 80029b0:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029b2:	23c0      	movs	r3, #192	; 0xc0
 80029b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b8:	2302      	movs	r3, #2
 80029ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029be:	2300      	movs	r3, #0
 80029c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c4:	2300      	movs	r3, #0
 80029c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029ca:	2305      	movs	r3, #5
 80029cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80029d4:	4619      	mov	r1, r3
 80029d6:	486b      	ldr	r0, [pc, #428]	; (8002b84 <HAL_SPI_MspInit+0x27c>)
 80029d8:	f002 fdb8 	bl	800554c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029dc:	2308      	movs	r3, #8
 80029de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e2:	2302      	movs	r3, #2
 80029e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ee:	2300      	movs	r3, #0
 80029f0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029f4:	2305      	movs	r3, #5
 80029f6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029fa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80029fe:	4619      	mov	r1, r3
 8002a00:	4861      	ldr	r0, [pc, #388]	; (8002b88 <HAL_SPI_MspInit+0x280>)
 8002a02:	f002 fda3 	bl	800554c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002a06:	e0b4      	b.n	8002b72 <HAL_SPI_MspInit+0x26a>
  else if(hspi->Instance==SPI2)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a5f      	ldr	r2, [pc, #380]	; (8002b8c <HAL_SPI_MspInit+0x284>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d167      	bne.n	8002ae2 <HAL_SPI_MspInit+0x1da>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002a12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a16:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a22:	4618      	mov	r0, r3
 8002a24:	f004 fcf8 	bl	8007418 <HAL_RCCEx_PeriphCLKConfig>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_SPI_MspInit+0x12a>
      Error_Handler();
 8002a2e:	f7ff f90b 	bl	8001c48 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a32:	4b53      	ldr	r3, [pc, #332]	; (8002b80 <HAL_SPI_MspInit+0x278>)
 8002a34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a38:	4a51      	ldr	r2, [pc, #324]	; (8002b80 <HAL_SPI_MspInit+0x278>)
 8002a3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a3e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a42:	4b4f      	ldr	r3, [pc, #316]	; (8002b80 <HAL_SPI_MspInit+0x278>)
 8002a44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a4c:	61bb      	str	r3, [r7, #24]
 8002a4e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a50:	4b4b      	ldr	r3, [pc, #300]	; (8002b80 <HAL_SPI_MspInit+0x278>)
 8002a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a56:	4a4a      	ldr	r2, [pc, #296]	; (8002b80 <HAL_SPI_MspInit+0x278>)
 8002a58:	f043 0304 	orr.w	r3, r3, #4
 8002a5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a60:	4b47      	ldr	r3, [pc, #284]	; (8002b80 <HAL_SPI_MspInit+0x278>)
 8002a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a6e:	4b44      	ldr	r3, [pc, #272]	; (8002b80 <HAL_SPI_MspInit+0x278>)
 8002a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a74:	4a42      	ldr	r2, [pc, #264]	; (8002b80 <HAL_SPI_MspInit+0x278>)
 8002a76:	f043 0308 	orr.w	r3, r3, #8
 8002a7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a7e:	4b40      	ldr	r3, [pc, #256]	; (8002b80 <HAL_SPI_MspInit+0x278>)
 8002a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	613b      	str	r3, [r7, #16]
 8002a8a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002a8c:	230c      	movs	r3, #12
 8002a8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a92:	2302      	movs	r3, #2
 8002a94:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002aa4:	2305      	movs	r3, #5
 8002aa6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aaa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4837      	ldr	r0, [pc, #220]	; (8002b90 <HAL_SPI_MspInit+0x288>)
 8002ab2:	f002 fd4b 	bl	800554c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ab6:	2308      	movs	r3, #8
 8002ab8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abc:	2302      	movs	r3, #2
 8002abe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ace:	2305      	movs	r3, #5
 8002ad0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ad4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002ad8:	4619      	mov	r1, r3
 8002ada:	482e      	ldr	r0, [pc, #184]	; (8002b94 <HAL_SPI_MspInit+0x28c>)
 8002adc:	f002 fd36 	bl	800554c <HAL_GPIO_Init>
}
 8002ae0:	e047      	b.n	8002b72 <HAL_SPI_MspInit+0x26a>
  else if(hspi->Instance==SPI4)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a2c      	ldr	r2, [pc, #176]	; (8002b98 <HAL_SPI_MspInit+0x290>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d142      	bne.n	8002b72 <HAL_SPI_MspInit+0x26a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8002aec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002af0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8002af2:	2300      	movs	r3, #0
 8002af4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002af8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002afc:	4618      	mov	r0, r3
 8002afe:	f004 fc8b 	bl	8007418 <HAL_RCCEx_PeriphCLKConfig>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <HAL_SPI_MspInit+0x204>
      Error_Handler();
 8002b08:	f7ff f89e 	bl	8001c48 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002b0c:	4b1c      	ldr	r3, [pc, #112]	; (8002b80 <HAL_SPI_MspInit+0x278>)
 8002b0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b12:	4a1b      	ldr	r2, [pc, #108]	; (8002b80 <HAL_SPI_MspInit+0x278>)
 8002b14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b18:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002b1c:	4b18      	ldr	r3, [pc, #96]	; (8002b80 <HAL_SPI_MspInit+0x278>)
 8002b1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b2a:	4b15      	ldr	r3, [pc, #84]	; (8002b80 <HAL_SPI_MspInit+0x278>)
 8002b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b30:	4a13      	ldr	r2, [pc, #76]	; (8002b80 <HAL_SPI_MspInit+0x278>)
 8002b32:	f043 0310 	orr.w	r3, r3, #16
 8002b36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b3a:	4b11      	ldr	r3, [pc, #68]	; (8002b80 <HAL_SPI_MspInit+0x278>)
 8002b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	60bb      	str	r3, [r7, #8]
 8002b46:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002b48:	2364      	movs	r3, #100	; 0x64
 8002b4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b54:	2300      	movs	r3, #0
 8002b56:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002b60:	2305      	movs	r3, #5
 8002b62:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b66:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	480b      	ldr	r0, [pc, #44]	; (8002b9c <HAL_SPI_MspInit+0x294>)
 8002b6e:	f002 fced 	bl	800554c <HAL_GPIO_Init>
}
 8002b72:	bf00      	nop
 8002b74:	37f8      	adds	r7, #248	; 0xf8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40013000 	.word	0x40013000
 8002b80:	58024400 	.word	0x58024400
 8002b84:	58020000 	.word	0x58020000
 8002b88:	58020400 	.word	0x58020400
 8002b8c:	40003800 	.word	0x40003800
 8002b90:	58020800 	.word	0x58020800
 8002b94:	58020c00 	.word	0x58020c00
 8002b98:	40013400 	.word	0x40013400
 8002b9c:	58021000 	.word	0x58021000

08002ba0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a16      	ldr	r2, [pc, #88]	; (8002c08 <HAL_TIM_PWM_MspInit+0x68>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d10f      	bne.n	8002bd2 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bb2:	4b16      	ldr	r3, [pc, #88]	; (8002c0c <HAL_TIM_PWM_MspInit+0x6c>)
 8002bb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bb8:	4a14      	ldr	r2, [pc, #80]	; (8002c0c <HAL_TIM_PWM_MspInit+0x6c>)
 8002bba:	f043 0301 	orr.w	r3, r3, #1
 8002bbe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002bc2:	4b12      	ldr	r3, [pc, #72]	; (8002c0c <HAL_TIM_PWM_MspInit+0x6c>)
 8002bc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002bd0:	e013      	b.n	8002bfa <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM5)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a0e      	ldr	r2, [pc, #56]	; (8002c10 <HAL_TIM_PWM_MspInit+0x70>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d10e      	bne.n	8002bfa <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <HAL_TIM_PWM_MspInit+0x6c>)
 8002bde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002be2:	4a0a      	ldr	r2, [pc, #40]	; (8002c0c <HAL_TIM_PWM_MspInit+0x6c>)
 8002be4:	f043 0308 	orr.w	r3, r3, #8
 8002be8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002bec:	4b07      	ldr	r3, [pc, #28]	; (8002c0c <HAL_TIM_PWM_MspInit+0x6c>)
 8002bee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	60bb      	str	r3, [r7, #8]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
}
 8002bfa:	bf00      	nop
 8002bfc:	3714      	adds	r7, #20
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	40010000 	.word	0x40010000
 8002c0c:	58024400 	.word	0x58024400
 8002c10:	40000c00 	.word	0x40000c00

08002c14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a16      	ldr	r2, [pc, #88]	; (8002c7c <HAL_TIM_Base_MspInit+0x68>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d10f      	bne.n	8002c46 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c26:	4b16      	ldr	r3, [pc, #88]	; (8002c80 <HAL_TIM_Base_MspInit+0x6c>)
 8002c28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c2c:	4a14      	ldr	r2, [pc, #80]	; (8002c80 <HAL_TIM_Base_MspInit+0x6c>)
 8002c2e:	f043 0304 	orr.w	r3, r3, #4
 8002c32:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c36:	4b12      	ldr	r3, [pc, #72]	; (8002c80 <HAL_TIM_Base_MspInit+0x6c>)
 8002c38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002c44:	e013      	b.n	8002c6e <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM15)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a0e      	ldr	r2, [pc, #56]	; (8002c84 <HAL_TIM_Base_MspInit+0x70>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d10e      	bne.n	8002c6e <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002c50:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <HAL_TIM_Base_MspInit+0x6c>)
 8002c52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c56:	4a0a      	ldr	r2, [pc, #40]	; (8002c80 <HAL_TIM_Base_MspInit+0x6c>)
 8002c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c5c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002c60:	4b07      	ldr	r3, [pc, #28]	; (8002c80 <HAL_TIM_Base_MspInit+0x6c>)
 8002c62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c6a:	60bb      	str	r3, [r7, #8]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
}
 8002c6e:	bf00      	nop
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	40000800 	.word	0x40000800
 8002c80:	58024400 	.word	0x58024400
 8002c84:	40014000 	.word	0x40014000

08002c88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b08c      	sub	sp, #48	; 0x30
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c90:	f107 031c 	add.w	r3, r7, #28
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	605a      	str	r2, [r3, #4]
 8002c9a:	609a      	str	r2, [r3, #8]
 8002c9c:	60da      	str	r2, [r3, #12]
 8002c9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a4b      	ldr	r2, [pc, #300]	; (8002dd4 <HAL_TIM_MspPostInit+0x14c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d120      	bne.n	8002cec <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002caa:	4b4b      	ldr	r3, [pc, #300]	; (8002dd8 <HAL_TIM_MspPostInit+0x150>)
 8002cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cb0:	4a49      	ldr	r2, [pc, #292]	; (8002dd8 <HAL_TIM_MspPostInit+0x150>)
 8002cb2:	f043 0310 	orr.w	r3, r3, #16
 8002cb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cba:	4b47      	ldr	r3, [pc, #284]	; (8002dd8 <HAL_TIM_MspPostInit+0x150>)
 8002cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cc0:	f003 0310 	and.w	r3, r3, #16
 8002cc4:	61bb      	str	r3, [r7, #24]
 8002cc6:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002cc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cce:	2302      	movs	r3, #2
 8002cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cde:	f107 031c 	add.w	r3, r7, #28
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	483d      	ldr	r0, [pc, #244]	; (8002ddc <HAL_TIM_MspPostInit+0x154>)
 8002ce6:	f002 fc31 	bl	800554c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002cea:	e06e      	b.n	8002dca <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM4)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a3b      	ldr	r2, [pc, #236]	; (8002de0 <HAL_TIM_MspPostInit+0x158>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d120      	bne.n	8002d38 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cf6:	4b38      	ldr	r3, [pc, #224]	; (8002dd8 <HAL_TIM_MspPostInit+0x150>)
 8002cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cfc:	4a36      	ldr	r2, [pc, #216]	; (8002dd8 <HAL_TIM_MspPostInit+0x150>)
 8002cfe:	f043 0308 	orr.w	r3, r3, #8
 8002d02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d06:	4b34      	ldr	r3, [pc, #208]	; (8002dd8 <HAL_TIM_MspPostInit+0x150>)
 8002d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d0c:	f003 0308 	and.w	r3, r3, #8
 8002d10:	617b      	str	r3, [r7, #20]
 8002d12:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002d14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d22:	2300      	movs	r3, #0
 8002d24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d26:	2302      	movs	r3, #2
 8002d28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d2a:	f107 031c 	add.w	r3, r7, #28
 8002d2e:	4619      	mov	r1, r3
 8002d30:	482c      	ldr	r0, [pc, #176]	; (8002de4 <HAL_TIM_MspPostInit+0x15c>)
 8002d32:	f002 fc0b 	bl	800554c <HAL_GPIO_Init>
}
 8002d36:	e048      	b.n	8002dca <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM5)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a2a      	ldr	r2, [pc, #168]	; (8002de8 <HAL_TIM_MspPostInit+0x160>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d11f      	bne.n	8002d82 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d42:	4b25      	ldr	r3, [pc, #148]	; (8002dd8 <HAL_TIM_MspPostInit+0x150>)
 8002d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d48:	4a23      	ldr	r2, [pc, #140]	; (8002dd8 <HAL_TIM_MspPostInit+0x150>)
 8002d4a:	f043 0301 	orr.w	r3, r3, #1
 8002d4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d52:	4b21      	ldr	r3, [pc, #132]	; (8002dd8 <HAL_TIM_MspPostInit+0x150>)
 8002d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	613b      	str	r3, [r7, #16]
 8002d5e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002d60:	2302      	movs	r3, #2
 8002d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d64:	2302      	movs	r3, #2
 8002d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002d70:	2302      	movs	r3, #2
 8002d72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d74:	f107 031c 	add.w	r3, r7, #28
 8002d78:	4619      	mov	r1, r3
 8002d7a:	481c      	ldr	r0, [pc, #112]	; (8002dec <HAL_TIM_MspPostInit+0x164>)
 8002d7c:	f002 fbe6 	bl	800554c <HAL_GPIO_Init>
}
 8002d80:	e023      	b.n	8002dca <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM15)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a1a      	ldr	r2, [pc, #104]	; (8002df0 <HAL_TIM_MspPostInit+0x168>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d11e      	bne.n	8002dca <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d8c:	4b12      	ldr	r3, [pc, #72]	; (8002dd8 <HAL_TIM_MspPostInit+0x150>)
 8002d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d92:	4a11      	ldr	r2, [pc, #68]	; (8002dd8 <HAL_TIM_MspPostInit+0x150>)
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d9c:	4b0e      	ldr	r3, [pc, #56]	; (8002dd8 <HAL_TIM_MspPostInit+0x150>)
 8002d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002daa:	2308      	movs	r3, #8
 8002dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dae:	2302      	movs	r3, #2
 8002db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db2:	2300      	movs	r3, #0
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db6:	2300      	movs	r3, #0
 8002db8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002dba:	2304      	movs	r3, #4
 8002dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dbe:	f107 031c 	add.w	r3, r7, #28
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4809      	ldr	r0, [pc, #36]	; (8002dec <HAL_TIM_MspPostInit+0x164>)
 8002dc6:	f002 fbc1 	bl	800554c <HAL_GPIO_Init>
}
 8002dca:	bf00      	nop
 8002dcc:	3730      	adds	r7, #48	; 0x30
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40010000 	.word	0x40010000
 8002dd8:	58024400 	.word	0x58024400
 8002ddc:	58021000 	.word	0x58021000
 8002de0:	40000800 	.word	0x40000800
 8002de4:	58020c00 	.word	0x58020c00
 8002de8:	40000c00 	.word	0x40000c00
 8002dec:	58020000 	.word	0x58020000
 8002df0:	40014000 	.word	0x40014000

08002df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002df8:	e7fe      	b.n	8002df8 <NMI_Handler+0x4>

08002dfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dfe:	e7fe      	b.n	8002dfe <HardFault_Handler+0x4>

08002e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e04:	e7fe      	b.n	8002e04 <MemManage_Handler+0x4>

08002e06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e06:	b480      	push	{r7}
 8002e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e0a:	e7fe      	b.n	8002e0a <BusFault_Handler+0x4>

08002e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e10:	e7fe      	b.n	8002e10 <UsageFault_Handler+0x4>

08002e12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e12:	b480      	push	{r7}
 8002e14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e16:	bf00      	nop
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e24:	bf00      	nop
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e32:	bf00      	nop
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e40:	f000 fd0c 	bl	800385c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e44:	bf00      	nop
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
	return 1;
 8002e4c:	2301      	movs	r3, #1
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <_kill>:

int _kill(int pid, int sig)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e62:	f009 fcd3 	bl	800c80c <__errno>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2216      	movs	r2, #22
 8002e6a:	601a      	str	r2, [r3, #0]
	return -1;
 8002e6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <_exit>:

void _exit (int status)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e80:	f04f 31ff 	mov.w	r1, #4294967295
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f7ff ffe7 	bl	8002e58 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002e8a:	e7fe      	b.n	8002e8a <_exit+0x12>

08002e8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e98:	2300      	movs	r3, #0
 8002e9a:	617b      	str	r3, [r7, #20]
 8002e9c:	e00a      	b.n	8002eb4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e9e:	f3af 8000 	nop.w
 8002ea2:	4601      	mov	r1, r0
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	1c5a      	adds	r2, r3, #1
 8002ea8:	60ba      	str	r2, [r7, #8]
 8002eaa:	b2ca      	uxtb	r2, r1
 8002eac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	dbf0      	blt.n	8002e9e <_read+0x12>
	}

return len;
 8002ebc:	687b      	ldr	r3, [r7, #4]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b086      	sub	sp, #24
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	60f8      	str	r0, [r7, #12]
 8002ece:	60b9      	str	r1, [r7, #8]
 8002ed0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]
 8002ed6:	e009      	b.n	8002eec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	1c5a      	adds	r2, r3, #1
 8002edc:	60ba      	str	r2, [r7, #8]
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	617b      	str	r3, [r7, #20]
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	dbf1      	blt.n	8002ed8 <_write+0x12>
	}
	return len;
 8002ef4:	687b      	ldr	r3, [r7, #4]
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3718      	adds	r7, #24
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <_close>:

int _close(int file)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
	return -1;
 8002f06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
 8002f1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f26:	605a      	str	r2, [r3, #4]
	return 0;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <_isatty>:

int _isatty(int file)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
	return 1;
 8002f3e:	2301      	movs	r3, #1
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
	return 0;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3714      	adds	r7, #20
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
	...

08002f68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f70:	4a14      	ldr	r2, [pc, #80]	; (8002fc4 <_sbrk+0x5c>)
 8002f72:	4b15      	ldr	r3, [pc, #84]	; (8002fc8 <_sbrk+0x60>)
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f7c:	4b13      	ldr	r3, [pc, #76]	; (8002fcc <_sbrk+0x64>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d102      	bne.n	8002f8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f84:	4b11      	ldr	r3, [pc, #68]	; (8002fcc <_sbrk+0x64>)
 8002f86:	4a12      	ldr	r2, [pc, #72]	; (8002fd0 <_sbrk+0x68>)
 8002f88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f8a:	4b10      	ldr	r3, [pc, #64]	; (8002fcc <_sbrk+0x64>)
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4413      	add	r3, r2
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d207      	bcs.n	8002fa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f98:	f009 fc38 	bl	800c80c <__errno>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	220c      	movs	r2, #12
 8002fa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa6:	e009      	b.n	8002fbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fa8:	4b08      	ldr	r3, [pc, #32]	; (8002fcc <_sbrk+0x64>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fae:	4b07      	ldr	r3, [pc, #28]	; (8002fcc <_sbrk+0x64>)
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	4a05      	ldr	r2, [pc, #20]	; (8002fcc <_sbrk+0x64>)
 8002fb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fba:	68fb      	ldr	r3, [r7, #12]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3718      	adds	r7, #24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	24080000 	.word	0x24080000
 8002fc8:	00000400 	.word	0x00000400
 8002fcc:	24000210 	.word	0x24000210
 8002fd0:	24000be0 	.word	0x24000be0

08002fd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002fd8:	4b39      	ldr	r3, [pc, #228]	; (80030c0 <SystemInit+0xec>)
 8002fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fde:	4a38      	ldr	r2, [pc, #224]	; (80030c0 <SystemInit+0xec>)
 8002fe0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fe4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002fe8:	4b36      	ldr	r3, [pc, #216]	; (80030c4 <SystemInit+0xf0>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 030f 	and.w	r3, r3, #15
 8002ff0:	2b06      	cmp	r3, #6
 8002ff2:	d807      	bhi.n	8003004 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002ff4:	4b33      	ldr	r3, [pc, #204]	; (80030c4 <SystemInit+0xf0>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f023 030f 	bic.w	r3, r3, #15
 8002ffc:	4a31      	ldr	r2, [pc, #196]	; (80030c4 <SystemInit+0xf0>)
 8002ffe:	f043 0307 	orr.w	r3, r3, #7
 8003002:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003004:	4b30      	ldr	r3, [pc, #192]	; (80030c8 <SystemInit+0xf4>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a2f      	ldr	r2, [pc, #188]	; (80030c8 <SystemInit+0xf4>)
 800300a:	f043 0301 	orr.w	r3, r3, #1
 800300e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003010:	4b2d      	ldr	r3, [pc, #180]	; (80030c8 <SystemInit+0xf4>)
 8003012:	2200      	movs	r2, #0
 8003014:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003016:	4b2c      	ldr	r3, [pc, #176]	; (80030c8 <SystemInit+0xf4>)
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	492b      	ldr	r1, [pc, #172]	; (80030c8 <SystemInit+0xf4>)
 800301c:	4b2b      	ldr	r3, [pc, #172]	; (80030cc <SystemInit+0xf8>)
 800301e:	4013      	ands	r3, r2
 8003020:	600b      	str	r3, [r1, #0]
  
//  SCB->VTOR = FLASH_BASE; /* sets the initial address of interrupt vector */

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003022:	4b28      	ldr	r3, [pc, #160]	; (80030c4 <SystemInit+0xf0>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b00      	cmp	r3, #0
 800302c:	d007      	beq.n	800303e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800302e:	4b25      	ldr	r3, [pc, #148]	; (80030c4 <SystemInit+0xf0>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f023 030f 	bic.w	r3, r3, #15
 8003036:	4a23      	ldr	r2, [pc, #140]	; (80030c4 <SystemInit+0xf0>)
 8003038:	f043 0307 	orr.w	r3, r3, #7
 800303c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800303e:	4b22      	ldr	r3, [pc, #136]	; (80030c8 <SystemInit+0xf4>)
 8003040:	2200      	movs	r2, #0
 8003042:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003044:	4b20      	ldr	r3, [pc, #128]	; (80030c8 <SystemInit+0xf4>)
 8003046:	2200      	movs	r2, #0
 8003048:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800304a:	4b1f      	ldr	r3, [pc, #124]	; (80030c8 <SystemInit+0xf4>)
 800304c:	2200      	movs	r2, #0
 800304e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003050:	4b1d      	ldr	r3, [pc, #116]	; (80030c8 <SystemInit+0xf4>)
 8003052:	4a1f      	ldr	r2, [pc, #124]	; (80030d0 <SystemInit+0xfc>)
 8003054:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003056:	4b1c      	ldr	r3, [pc, #112]	; (80030c8 <SystemInit+0xf4>)
 8003058:	4a1e      	ldr	r2, [pc, #120]	; (80030d4 <SystemInit+0x100>)
 800305a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800305c:	4b1a      	ldr	r3, [pc, #104]	; (80030c8 <SystemInit+0xf4>)
 800305e:	4a1e      	ldr	r2, [pc, #120]	; (80030d8 <SystemInit+0x104>)
 8003060:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003062:	4b19      	ldr	r3, [pc, #100]	; (80030c8 <SystemInit+0xf4>)
 8003064:	2200      	movs	r2, #0
 8003066:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003068:	4b17      	ldr	r3, [pc, #92]	; (80030c8 <SystemInit+0xf4>)
 800306a:	4a1b      	ldr	r2, [pc, #108]	; (80030d8 <SystemInit+0x104>)
 800306c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800306e:	4b16      	ldr	r3, [pc, #88]	; (80030c8 <SystemInit+0xf4>)
 8003070:	2200      	movs	r2, #0
 8003072:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003074:	4b14      	ldr	r3, [pc, #80]	; (80030c8 <SystemInit+0xf4>)
 8003076:	4a18      	ldr	r2, [pc, #96]	; (80030d8 <SystemInit+0x104>)
 8003078:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800307a:	4b13      	ldr	r3, [pc, #76]	; (80030c8 <SystemInit+0xf4>)
 800307c:	2200      	movs	r2, #0
 800307e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003080:	4b11      	ldr	r3, [pc, #68]	; (80030c8 <SystemInit+0xf4>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a10      	ldr	r2, [pc, #64]	; (80030c8 <SystemInit+0xf4>)
 8003086:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800308a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800308c:	4b0e      	ldr	r3, [pc, #56]	; (80030c8 <SystemInit+0xf4>)
 800308e:	2200      	movs	r2, #0
 8003090:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003092:	4b12      	ldr	r3, [pc, #72]	; (80030dc <SystemInit+0x108>)
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	4b12      	ldr	r3, [pc, #72]	; (80030e0 <SystemInit+0x10c>)
 8003098:	4013      	ands	r3, r2
 800309a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800309e:	d202      	bcs.n	80030a6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80030a0:	4b10      	ldr	r3, [pc, #64]	; (80030e4 <SystemInit+0x110>)
 80030a2:	2201      	movs	r2, #1
 80030a4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80030a6:	4b10      	ldr	r3, [pc, #64]	; (80030e8 <SystemInit+0x114>)
 80030a8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80030ac:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80030ae:	4b04      	ldr	r3, [pc, #16]	; (80030c0 <SystemInit+0xec>)
 80030b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030b4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80030b6:	bf00      	nop
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	e000ed00 	.word	0xe000ed00
 80030c4:	52002000 	.word	0x52002000
 80030c8:	58024400 	.word	0x58024400
 80030cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80030d0:	02020200 	.word	0x02020200
 80030d4:	01ff0000 	.word	0x01ff0000
 80030d8:	01010280 	.word	0x01010280
 80030dc:	5c001000 	.word	0x5c001000
 80030e0:	ffff0000 	.word	0xffff0000
 80030e4:	51008108 	.word	0x51008108
 80030e8:	52004000 	.word	0x52004000

080030ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80030ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003124 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80030f0:	f7ff ff70 	bl	8002fd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030f4:	480c      	ldr	r0, [pc, #48]	; (8003128 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80030f6:	490d      	ldr	r1, [pc, #52]	; (800312c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80030f8:	4a0d      	ldr	r2, [pc, #52]	; (8003130 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80030fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030fc:	e002      	b.n	8003104 <LoopCopyDataInit>

080030fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003102:	3304      	adds	r3, #4

08003104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003108:	d3f9      	bcc.n	80030fe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800310a:	4a0a      	ldr	r2, [pc, #40]	; (8003134 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800310c:	4c0a      	ldr	r4, [pc, #40]	; (8003138 <LoopFillZerobss+0x22>)
  movs r3, #0
 800310e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003110:	e001      	b.n	8003116 <LoopFillZerobss>

08003112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003114:	3204      	adds	r2, #4

08003116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003118:	d3fb      	bcc.n	8003112 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800311a:	f009 fb7d 	bl	800c818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800311e:	f7fd fab3 	bl	8000688 <main>
  bx  lr
 8003122:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003124:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003128:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800312c:	240001ec 	.word	0x240001ec
  ldr r2, =_sidata
 8003130:	0800fc84 	.word	0x0800fc84
  ldr r2, =_sbss
 8003134:	240001ec 	.word	0x240001ec
  ldr r4, =_ebss
 8003138:	24000bdc 	.word	0x24000bdc

0800313c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800313c:	e7fe      	b.n	800313c <ADC3_IRQHandler>

0800313e <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 800313e:	b580      	push	{r7, lr}
 8003140:	b082      	sub	sp, #8
 8003142:	af00      	add	r7, sp, #0
 8003144:	4603      	mov	r3, r0
 8003146:	71fb      	strb	r3, [r7, #7]
 8003148:	79fb      	ldrb	r3, [r7, #7]
 800314a:	4619      	mov	r1, r3
 800314c:	2007      	movs	r0, #7
 800314e:	f000 fa05 	bl	800355c <bno055_writeData>
 8003152:	bf00      	nop
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 800315a:	b580      	push	{r7, lr}
 800315c:	b082      	sub	sp, #8
 800315e:	af00      	add	r7, sp, #0
 8003160:	4603      	mov	r3, r0
 8003162:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8003164:	79fb      	ldrb	r3, [r7, #7]
 8003166:	4619      	mov	r1, r3
 8003168:	203d      	movs	r0, #61	; 0x3d
 800316a:	f000 f9f7 	bl	800355c <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d103      	bne.n	800317c <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8003174:	2013      	movs	r0, #19
 8003176:	f000 f9e5 	bl	8003544 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 800317a:	e002      	b.n	8003182 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 800317c:	2007      	movs	r0, #7
 800317e:	f000 f9e1 	bl	8003544 <bno055_delay>
}
 8003182:	bf00      	nop
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 800318a:	b580      	push	{r7, lr}
 800318c:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 800318e:	2000      	movs	r0, #0
 8003190:	f7ff ffe3 	bl	800315a <bno055_setOperationMode>
}
 8003194:	bf00      	nop
 8003196:	bd80      	pop	{r7, pc}

08003198 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 800319c:	200c      	movs	r0, #12
 800319e:	f7ff ffdc 	bl	800315a <bno055_setOperationMode>
}
 80031a2:	bf00      	nop
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 80031a6:	b580      	push	{r7, lr}
 80031a8:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 80031aa:	2120      	movs	r1, #32
 80031ac:	203f      	movs	r0, #63	; 0x3f
 80031ae:	f000 f9d5 	bl	800355c <bno055_writeData>
  bno055_delay(700);
 80031b2:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80031b6:	f000 f9c5 	bl	8003544 <bno055_delay>
}
 80031ba:	bf00      	nop
 80031bc:	bd80      	pop	{r7, pc}

080031be <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 80031be:	b580      	push	{r7, lr}
 80031c0:	b082      	sub	sp, #8
 80031c2:	af00      	add	r7, sp, #0
  bno055_reset();
 80031c4:	f7ff ffef 	bl	80031a6 <bno055_reset>

  uint8_t id = 0;
 80031c8:	2300      	movs	r3, #0
 80031ca:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 80031cc:	1dfb      	adds	r3, r7, #7
 80031ce:	2201      	movs	r2, #1
 80031d0:	4619      	mov	r1, r3
 80031d2:	2000      	movs	r0, #0
 80031d4:	f000 faae 	bl	8003734 <bno055_readData>
  if (id != BNO055_ID) {
	  //Pas réussi :/
	  /* IMPLEMENT ME */
  }
  bno055_setPage(0);
 80031d8:	2000      	movs	r0, #0
 80031da:	f7ff ffb0 	bl	800313e <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 80031de:	2100      	movs	r1, #0
 80031e0:	203f      	movs	r0, #63	; 0x3f
 80031e2:	f000 f9bb 	bl	800355c <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 80031e6:	f7ff ffd0 	bl	800318a <bno055_setOperationModeConfig>
  bno055_delay(10);
 80031ea:	200a      	movs	r0, #10
 80031ec:	f000 f9aa 	bl	8003544 <bno055_delay>
}
 80031f0:	bf00      	nop
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 80031f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80031fc:	b09e      	sub	sp, #120	; 0x78
 80031fe:	af00      	add	r7, sp, #0
 8003200:	4603      	mov	r3, r0
 8003202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 8003206:	2000      	movs	r0, #0
 8003208:	f7ff ff99 	bl	800313e <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 800320c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003210:	2b20      	cmp	r3, #32
 8003212:	d108      	bne.n	8003226 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8003214:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003218:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800321c:	2208      	movs	r2, #8
 800321e:	4618      	mov	r0, r3
 8003220:	f000 fa88 	bl	8003734 <bno055_readData>
 8003224:	e007      	b.n	8003236 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8003226:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800322a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800322e:	2206      	movs	r2, #6
 8003230:	4618      	mov	r0, r3
 8003232:	f000 fa7f 	bl	8003734 <bno055_readData>

  double scale = 1;
 8003236:	f04f 0200 	mov.w	r2, #0
 800323a:	4b81      	ldr	r3, [pc, #516]	; (8003440 <bno055_getVector+0x248>)
 800323c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8003240:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003244:	2b0e      	cmp	r3, #14
 8003246:	d108      	bne.n	800325a <bno055_getVector+0x62>
    scale = magScale;
 8003248:	4b7e      	ldr	r3, [pc, #504]	; (8003444 <bno055_getVector+0x24c>)
 800324a:	881b      	ldrh	r3, [r3, #0]
 800324c:	ee07 3a90 	vmov	s15, r3
 8003250:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003254:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
 8003258:	e03a      	b.n	80032d0 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 800325a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800325e:	2b08      	cmp	r3, #8
 8003260:	d007      	beq.n	8003272 <bno055_getVector+0x7a>
 8003262:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003266:	2b28      	cmp	r3, #40	; 0x28
 8003268:	d003      	beq.n	8003272 <bno055_getVector+0x7a>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 800326a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800326e:	2b2e      	cmp	r3, #46	; 0x2e
 8003270:	d108      	bne.n	8003284 <bno055_getVector+0x8c>
    scale = accelScale;
 8003272:	4b75      	ldr	r3, [pc, #468]	; (8003448 <bno055_getVector+0x250>)
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	ee07 3a90 	vmov	s15, r3
 800327a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800327e:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
 8003282:	e025      	b.n	80032d0 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8003284:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003288:	2b14      	cmp	r3, #20
 800328a:	d108      	bne.n	800329e <bno055_getVector+0xa6>
    scale = angularRateScale;
 800328c:	4b6f      	ldr	r3, [pc, #444]	; (800344c <bno055_getVector+0x254>)
 800328e:	881b      	ldrh	r3, [r3, #0]
 8003290:	ee07 3a90 	vmov	s15, r3
 8003294:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003298:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
 800329c:	e018      	b.n	80032d0 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_EULER) {
 800329e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032a2:	2b1a      	cmp	r3, #26
 80032a4:	d108      	bne.n	80032b8 <bno055_getVector+0xc0>
    scale = eulerScale;
 80032a6:	4b6a      	ldr	r3, [pc, #424]	; (8003450 <bno055_getVector+0x258>)
 80032a8:	881b      	ldrh	r3, [r3, #0]
 80032aa:	ee07 3a90 	vmov	s15, r3
 80032ae:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80032b2:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
 80032b6:	e00b      	b.n	80032d0 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 80032b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032bc:	2b20      	cmp	r3, #32
 80032be:	d107      	bne.n	80032d0 <bno055_getVector+0xd8>
    scale = quaScale;
 80032c0:	4b64      	ldr	r3, [pc, #400]	; (8003454 <bno055_getVector+0x25c>)
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	ee07 3a90 	vmov	s15, r3
 80032c8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80032cc:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 80032d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032d4:	2220      	movs	r2, #32
 80032d6:	2100      	movs	r1, #0
 80032d8:	4618      	mov	r0, r3
 80032da:	f009 facf 	bl	800c87c <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 80032de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032e2:	2b20      	cmp	r3, #32
 80032e4:	d14c      	bne.n	8003380 <bno055_getVector+0x188>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80032e6:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80032ea:	021b      	lsls	r3, r3, #8
 80032ec:	b21a      	sxth	r2, r3
 80032ee:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80032f2:	b21b      	sxth	r3, r3
 80032f4:	4313      	orrs	r3, r2
 80032f6:	b21b      	sxth	r3, r3
 80032f8:	ee07 3a90 	vmov	s15, r3
 80032fc:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8003300:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 8003304:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003308:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800330c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003310:	021b      	lsls	r3, r3, #8
 8003312:	b21a      	sxth	r2, r3
 8003314:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003318:	b21b      	sxth	r3, r3
 800331a:	4313      	orrs	r3, r2
 800331c:	b21b      	sxth	r3, r3
 800331e:	ee07 3a90 	vmov	s15, r3
 8003322:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8003326:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 800332a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800332e:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8003332:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003336:	021b      	lsls	r3, r3, #8
 8003338:	b21a      	sxth	r2, r3
 800333a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800333e:	b21b      	sxth	r3, r3
 8003340:	4313      	orrs	r3, r2
 8003342:	b21b      	sxth	r3, r3
 8003344:	ee07 3a90 	vmov	s15, r3
 8003348:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800334c:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 8003350:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003354:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8003358:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800335c:	021b      	lsls	r3, r3, #8
 800335e:	b21a      	sxth	r2, r3
 8003360:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003364:	b21b      	sxth	r3, r3
 8003366:	4313      	orrs	r3, r2
 8003368:	b21b      	sxth	r3, r3
 800336a:	ee07 3a90 	vmov	s15, r3
 800336e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8003372:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 8003376:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800337a:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
 800337e:	e038      	b.n	80033f2 <bno055_getVector+0x1fa>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8003380:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003384:	021b      	lsls	r3, r3, #8
 8003386:	b21a      	sxth	r2, r3
 8003388:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800338c:	b21b      	sxth	r3, r3
 800338e:	4313      	orrs	r3, r2
 8003390:	b21b      	sxth	r3, r3
 8003392:	ee07 3a90 	vmov	s15, r3
 8003396:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800339a:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 800339e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80033a2:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80033a6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80033aa:	021b      	lsls	r3, r3, #8
 80033ac:	b21a      	sxth	r2, r3
 80033ae:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80033b2:	b21b      	sxth	r3, r3
 80033b4:	4313      	orrs	r3, r2
 80033b6:	b21b      	sxth	r3, r3
 80033b8:	ee07 3a90 	vmov	s15, r3
 80033bc:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80033c0:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 80033c4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80033c8:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80033cc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80033d0:	021b      	lsls	r3, r3, #8
 80033d2:	b21a      	sxth	r2, r3
 80033d4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80033d8:	b21b      	sxth	r3, r3
 80033da:	4313      	orrs	r3, r2
 80033dc:	b21b      	sxth	r3, r3
 80033de:	ee07 3a90 	vmov	s15, r3
 80033e2:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80033e6:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 80033ea:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80033ee:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
  }

  return xyz;
 80033f2:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80033f6:	f107 0528 	add.w	r5, r7, #40	; 0x28
 80033fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033fe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003402:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003406:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800340a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800340e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003412:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003416:	ec49 8b14 	vmov	d4, r8, r9
 800341a:	ec45 4b15 	vmov	d5, r4, r5
 800341e:	ec41 0b16 	vmov	d6, r0, r1
 8003422:	ec43 2b17 	vmov	d7, r2, r3
}
 8003426:	eeb0 0b44 	vmov.f64	d0, d4
 800342a:	eeb0 1b45 	vmov.f64	d1, d5
 800342e:	eeb0 2b46 	vmov.f64	d2, d6
 8003432:	eeb0 3b47 	vmov.f64	d3, d7
 8003436:	3778      	adds	r7, #120	; 0x78
 8003438:	46bd      	mov	sp, r7
 800343a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800343e:	bf00      	nop
 8003440:	3ff00000 	.word	0x3ff00000
 8003444:	2400000e 	.word	0x2400000e
 8003448:	24000008 	.word	0x24000008
 800344c:	2400000a 	.word	0x2400000a
 8003450:	2400000c 	.word	0x2400000c
 8003454:	24000010 	.word	0x24000010

08003458 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 8003458:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800345c:	b090      	sub	sp, #64	; 0x40
 800345e:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 8003460:	201a      	movs	r0, #26
 8003462:	f7ff fec9 	bl	80031f8 <bno055_getVector>
 8003466:	eeb0 4b40 	vmov.f64	d4, d0
 800346a:	eeb0 5b41 	vmov.f64	d5, d1
 800346e:	eeb0 6b42 	vmov.f64	d6, d2
 8003472:	eeb0 7b43 	vmov.f64	d7, d3
 8003476:	ed87 4b08 	vstr	d4, [r7, #32]
 800347a:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 800347e:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8003482:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8003486:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800348a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800348e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003492:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003496:	ec49 8b14 	vmov	d4, r8, r9
 800349a:	ec45 4b15 	vmov	d5, r4, r5
 800349e:	ec41 0b16 	vmov	d6, r0, r1
 80034a2:	ec43 2b17 	vmov	d7, r2, r3
}
 80034a6:	eeb0 0b44 	vmov.f64	d0, d4
 80034aa:	eeb0 1b45 	vmov.f64	d1, d5
 80034ae:	eeb0 2b46 	vmov.f64	d2, d6
 80034b2:	eeb0 3b47 	vmov.f64	d3, d7
 80034b6:	3740      	adds	r7, #64	; 0x40
 80034b8:	46bd      	mov	sp, r7
 80034ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080034be <bno055_getVectorQuaternion>:
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
}
bno055_vector_t bno055_getVectorGravity() {
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
}
bno055_vector_t bno055_getVectorQuaternion() {
 80034be:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80034c2:	b090      	sub	sp, #64	; 0x40
 80034c4:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
 80034c6:	2020      	movs	r0, #32
 80034c8:	f7ff fe96 	bl	80031f8 <bno055_getVector>
 80034cc:	eeb0 4b40 	vmov.f64	d4, d0
 80034d0:	eeb0 5b41 	vmov.f64	d5, d1
 80034d4:	eeb0 6b42 	vmov.f64	d6, d2
 80034d8:	eeb0 7b43 	vmov.f64	d7, d3
 80034dc:	ed87 4b08 	vstr	d4, [r7, #32]
 80034e0:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 80034e4:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 80034e8:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 80034ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034f0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80034f4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80034f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80034fc:	ec49 8b14 	vmov	d4, r8, r9
 8003500:	ec45 4b15 	vmov	d5, r4, r5
 8003504:	ec41 0b16 	vmov	d6, r0, r1
 8003508:	ec43 2b17 	vmov	d7, r2, r3
}
 800350c:	eeb0 0b44 	vmov.f64	d0, d4
 8003510:	eeb0 1b45 	vmov.f64	d1, d5
 8003514:	eeb0 2b46 	vmov.f64	d2, d6
 8003518:	eeb0 3b47 	vmov.f64	d3, d7
 800351c:	3740      	adds	r7, #64	; 0x40
 800351e:	46bd      	mov	sp, r7
 8003520:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08003524 <bno055_assignI2C>:

#include "../../../BNO055/Core/Inc/bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 800352c:	4a04      	ldr	r2, [pc, #16]	; (8003540 <bno055_assignI2C+0x1c>)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6013      	str	r3, [r2, #0]
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	24000bc4 	.word	0x24000bc4

08003544 <bno055_delay>:

void bno055_delay(int time) {
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4618      	mov	r0, r3
 8003550:	f000 f9a4 	bl	800389c <HAL_Delay>
#endif
}
 8003554:	bf00      	nop
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 800355c:	b580      	push	{r7, lr}
 800355e:	b088      	sub	sp, #32
 8003560:	af02      	add	r7, sp, #8
 8003562:	4603      	mov	r3, r0
 8003564:	460a      	mov	r2, r1
 8003566:	71fb      	strb	r3, [r7, #7]
 8003568:	4613      	mov	r3, r2
 800356a:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 800356c:	79fb      	ldrb	r3, [r7, #7]
 800356e:	733b      	strb	r3, [r7, #12]
 8003570:	79bb      	ldrb	r3, [r7, #6]
 8003572:	737b      	strb	r3, [r7, #13]
  uint8_t status;

  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8003574:	4b5a      	ldr	r3, [pc, #360]	; (80036e0 <bno055_writeData+0x184>)
 8003576:	6818      	ldr	r0, [r3, #0]
 8003578:	f107 020c 	add.w	r2, r7, #12
 800357c:	230a      	movs	r3, #10
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	2302      	movs	r3, #2
 8003582:	2152      	movs	r1, #82	; 0x52
 8003584:	f002 fa3c 	bl	8005a00 <HAL_I2C_Master_Transmit>
 8003588:	4603      	mov	r3, r0
 800358a:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);


  if (status == HAL_OK) {
 800358c:	7dfb      	ldrb	r3, [r7, #23]
 800358e:	2b00      	cmp	r3, #0
 8003590:	f000 80a0 	beq.w	80036d4 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8003594:	7dfb      	ldrb	r3, [r7, #23]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d103      	bne.n	80035a2 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 800359a:	4852      	ldr	r0, [pc, #328]	; (80036e4 <bno055_writeData+0x188>)
 800359c:	f009 fe40 	bl	800d220 <puts>
 80035a0:	e012      	b.n	80035c8 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 80035a2:	7dfb      	ldrb	r3, [r7, #23]
 80035a4:	2b03      	cmp	r3, #3
 80035a6:	d103      	bne.n	80035b0 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 80035a8:	484f      	ldr	r0, [pc, #316]	; (80036e8 <bno055_writeData+0x18c>)
 80035aa:	f009 fe39 	bl	800d220 <puts>
 80035ae:	e00b      	b.n	80035c8 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 80035b0:	7dfb      	ldrb	r3, [r7, #23]
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d103      	bne.n	80035be <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 80035b6:	484d      	ldr	r0, [pc, #308]	; (80036ec <bno055_writeData+0x190>)
 80035b8:	f009 fe32 	bl	800d220 <puts>
 80035bc:	e004      	b.n	80035c8 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 80035be:	7dfb      	ldrb	r3, [r7, #23]
 80035c0:	4619      	mov	r1, r3
 80035c2:	484b      	ldr	r0, [pc, #300]	; (80036f0 <bno055_writeData+0x194>)
 80035c4:	f009 fda6 	bl	800d114 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 80035c8:	4b45      	ldr	r3, [pc, #276]	; (80036e0 <bno055_writeData+0x184>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f002 fc0f 	bl	8005df0 <HAL_I2C_GetError>
 80035d2:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d07e      	beq.n	80036d8 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d103      	bne.n	80035e8 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 80035e0:	4844      	ldr	r0, [pc, #272]	; (80036f4 <bno055_writeData+0x198>)
 80035e2:	f009 fe1d 	bl	800d220 <puts>
 80035e6:	e021      	b.n	800362c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d103      	bne.n	80035f6 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 80035ee:	4842      	ldr	r0, [pc, #264]	; (80036f8 <bno055_writeData+0x19c>)
 80035f0:	f009 fe16 	bl	800d220 <puts>
 80035f4:	e01a      	b.n	800362c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	2b04      	cmp	r3, #4
 80035fa:	d103      	bne.n	8003604 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 80035fc:	483f      	ldr	r0, [pc, #252]	; (80036fc <bno055_writeData+0x1a0>)
 80035fe:	f009 fe0f 	bl	800d220 <puts>
 8003602:	e013      	b.n	800362c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	2b08      	cmp	r3, #8
 8003608:	d103      	bne.n	8003612 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 800360a:	483d      	ldr	r0, [pc, #244]	; (8003700 <bno055_writeData+0x1a4>)
 800360c:	f009 fe08 	bl	800d220 <puts>
 8003610:	e00c      	b.n	800362c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	2b10      	cmp	r3, #16
 8003616:	d103      	bne.n	8003620 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8003618:	483a      	ldr	r0, [pc, #232]	; (8003704 <bno055_writeData+0x1a8>)
 800361a:	f009 fe01 	bl	800d220 <puts>
 800361e:	e005      	b.n	800362c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	2b20      	cmp	r3, #32
 8003624:	d102      	bne.n	800362c <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8003626:	4838      	ldr	r0, [pc, #224]	; (8003708 <bno055_writeData+0x1ac>)
 8003628:	f009 fdfa 	bl	800d220 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 800362c:	4b2c      	ldr	r3, [pc, #176]	; (80036e0 <bno055_writeData+0x184>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f002 fbcf 	bl	8005dd4 <HAL_I2C_GetState>
 8003636:	4603      	mov	r3, r0
 8003638:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 800363a:	7bfb      	ldrb	r3, [r7, #15]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d103      	bne.n	8003648 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8003640:	4832      	ldr	r0, [pc, #200]	; (800370c <bno055_writeData+0x1b0>)
 8003642:	f009 fded 	bl	800d220 <puts>
 8003646:	e048      	b.n	80036da <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8003648:	7bfb      	ldrb	r3, [r7, #15]
 800364a:	2b20      	cmp	r3, #32
 800364c:	d103      	bne.n	8003656 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 800364e:	482f      	ldr	r0, [pc, #188]	; (800370c <bno055_writeData+0x1b0>)
 8003650:	f009 fde6 	bl	800d220 <puts>
 8003654:	e041      	b.n	80036da <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8003656:	7bfb      	ldrb	r3, [r7, #15]
 8003658:	2b24      	cmp	r3, #36	; 0x24
 800365a:	d103      	bne.n	8003664 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 800365c:	482c      	ldr	r0, [pc, #176]	; (8003710 <bno055_writeData+0x1b4>)
 800365e:	f009 fddf 	bl	800d220 <puts>
 8003662:	e03a      	b.n	80036da <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8003664:	7bfb      	ldrb	r3, [r7, #15]
 8003666:	2b21      	cmp	r3, #33	; 0x21
 8003668:	d103      	bne.n	8003672 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 800366a:	482a      	ldr	r0, [pc, #168]	; (8003714 <bno055_writeData+0x1b8>)
 800366c:	f009 fdd8 	bl	800d220 <puts>
 8003670:	e033      	b.n	80036da <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8003672:	7bfb      	ldrb	r3, [r7, #15]
 8003674:	2b22      	cmp	r3, #34	; 0x22
 8003676:	d103      	bne.n	8003680 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8003678:	4827      	ldr	r0, [pc, #156]	; (8003718 <bno055_writeData+0x1bc>)
 800367a:	f009 fdd1 	bl	800d220 <puts>
 800367e:	e02c      	b.n	80036da <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8003680:	7bfb      	ldrb	r3, [r7, #15]
 8003682:	2b28      	cmp	r3, #40	; 0x28
 8003684:	d103      	bne.n	800368e <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8003686:	4825      	ldr	r0, [pc, #148]	; (800371c <bno055_writeData+0x1c0>)
 8003688:	f009 fdca 	bl	800d220 <puts>
 800368c:	e025      	b.n	80036da <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 800368e:	7bfb      	ldrb	r3, [r7, #15]
 8003690:	2b29      	cmp	r3, #41	; 0x29
 8003692:	d103      	bne.n	800369c <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8003694:	4822      	ldr	r0, [pc, #136]	; (8003720 <bno055_writeData+0x1c4>)
 8003696:	f009 fdc3 	bl	800d220 <puts>
 800369a:	e01e      	b.n	80036da <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 800369c:	7bfb      	ldrb	r3, [r7, #15]
 800369e:	2b2a      	cmp	r3, #42	; 0x2a
 80036a0:	d103      	bne.n	80036aa <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 80036a2:	4820      	ldr	r0, [pc, #128]	; (8003724 <bno055_writeData+0x1c8>)
 80036a4:	f009 fdbc 	bl	800d220 <puts>
 80036a8:	e017      	b.n	80036da <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 80036aa:	7bfb      	ldrb	r3, [r7, #15]
 80036ac:	2b60      	cmp	r3, #96	; 0x60
 80036ae:	d103      	bne.n	80036b8 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 80036b0:	481d      	ldr	r0, [pc, #116]	; (8003728 <bno055_writeData+0x1cc>)
 80036b2:	f009 fdb5 	bl	800d220 <puts>
 80036b6:	e010      	b.n	80036da <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
 80036ba:	2ba0      	cmp	r3, #160	; 0xa0
 80036bc:	d103      	bne.n	80036c6 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 80036be:	481b      	ldr	r0, [pc, #108]	; (800372c <bno055_writeData+0x1d0>)
 80036c0:	f009 fdae 	bl	800d220 <puts>
 80036c4:	e009      	b.n	80036da <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 80036c6:	7bfb      	ldrb	r3, [r7, #15]
 80036c8:	2be0      	cmp	r3, #224	; 0xe0
 80036ca:	d106      	bne.n	80036da <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 80036cc:	4818      	ldr	r0, [pc, #96]	; (8003730 <bno055_writeData+0x1d4>)
 80036ce:	f009 fda7 	bl	800d220 <puts>
 80036d2:	e002      	b.n	80036da <bno055_writeData+0x17e>
    return;
 80036d4:	bf00      	nop
 80036d6:	e000      	b.n	80036da <bno055_writeData+0x17e>
    return;
 80036d8:	bf00      	nop
  }
}
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	24000bc4 	.word	0x24000bc4
 80036e4:	0800f5fc 	.word	0x0800f5fc
 80036e8:	0800f620 	.word	0x0800f620
 80036ec:	0800f648 	.word	0x0800f648
 80036f0:	0800f66c 	.word	0x0800f66c
 80036f4:	0800f684 	.word	0x0800f684
 80036f8:	0800f698 	.word	0x0800f698
 80036fc:	0800f6ac 	.word	0x0800f6ac
 8003700:	0800f6c0 	.word	0x0800f6c0
 8003704:	0800f6d4 	.word	0x0800f6d4
 8003708:	0800f6e8 	.word	0x0800f6e8
 800370c:	0800f700 	.word	0x0800f700
 8003710:	0800f718 	.word	0x0800f718
 8003714:	0800f72c 	.word	0x0800f72c
 8003718:	0800f744 	.word	0x0800f744
 800371c:	0800f75c 	.word	0x0800f75c
 8003720:	0800f774 	.word	0x0800f774
 8003724:	0800f794 	.word	0x0800f794
 8003728:	0800f7b4 	.word	0x0800f7b4
 800372c:	0800f7cc 	.word	0x0800f7cc
 8003730:	0800f7e4 	.word	0x0800f7e4

08003734 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af02      	add	r7, sp, #8
 800373a:	4603      	mov	r3, r0
 800373c:	6039      	str	r1, [r7, #0]
 800373e:	71fb      	strb	r3, [r7, #7]
 8003740:	4613      	mov	r3, r2
 8003742:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8003744:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <bno055_readData+0x40>)
 8003746:	6818      	ldr	r0, [r3, #0]
 8003748:	1dfa      	adds	r2, r7, #7
 800374a:	2364      	movs	r3, #100	; 0x64
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	2301      	movs	r3, #1
 8003750:	2152      	movs	r1, #82	; 0x52
 8003752:	f002 f955 	bl	8005a00 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8003756:	4b07      	ldr	r3, [pc, #28]	; (8003774 <bno055_readData+0x40>)
 8003758:	6818      	ldr	r0, [r3, #0]
 800375a:	79bb      	ldrb	r3, [r7, #6]
 800375c:	b29b      	uxth	r3, r3
 800375e:	2264      	movs	r2, #100	; 0x64
 8003760:	9200      	str	r2, [sp, #0]
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	2152      	movs	r1, #82	; 0x52
 8003766:	f002 fa3f 	bl	8005be8 <HAL_I2C_Master_Receive>
                         100);
}
 800376a:	bf00      	nop
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	24000bc4 	.word	0x24000bc4

08003778 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800377e:	2003      	movs	r0, #3
 8003780:	f001 f9f8 	bl	8004b74 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003784:	f003 fc72 	bl	800706c <HAL_RCC_GetSysClockFreq>
 8003788:	4602      	mov	r2, r0
 800378a:	4b15      	ldr	r3, [pc, #84]	; (80037e0 <HAL_Init+0x68>)
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	0a1b      	lsrs	r3, r3, #8
 8003790:	f003 030f 	and.w	r3, r3, #15
 8003794:	4913      	ldr	r1, [pc, #76]	; (80037e4 <HAL_Init+0x6c>)
 8003796:	5ccb      	ldrb	r3, [r1, r3]
 8003798:	f003 031f 	and.w	r3, r3, #31
 800379c:	fa22 f303 	lsr.w	r3, r2, r3
 80037a0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037a2:	4b0f      	ldr	r3, [pc, #60]	; (80037e0 <HAL_Init+0x68>)
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	4a0e      	ldr	r2, [pc, #56]	; (80037e4 <HAL_Init+0x6c>)
 80037ac:	5cd3      	ldrb	r3, [r2, r3]
 80037ae:	f003 031f 	and.w	r3, r3, #31
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	fa22 f303 	lsr.w	r3, r2, r3
 80037b8:	4a0b      	ldr	r2, [pc, #44]	; (80037e8 <HAL_Init+0x70>)
 80037ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80037bc:	4a0b      	ldr	r2, [pc, #44]	; (80037ec <HAL_Init+0x74>)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037c2:	2000      	movs	r0, #0
 80037c4:	f000 f814 	bl	80037f0 <HAL_InitTick>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e002      	b.n	80037d8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80037d2:	f7fe fa3f 	bl	8001c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3708      	adds	r7, #8
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	58024400 	.word	0x58024400
 80037e4:	0800f848 	.word	0x0800f848
 80037e8:	24000004 	.word	0x24000004
 80037ec:	24000000 	.word	0x24000000

080037f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80037f8:	4b15      	ldr	r3, [pc, #84]	; (8003850 <HAL_InitTick+0x60>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d101      	bne.n	8003804 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e021      	b.n	8003848 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003804:	4b13      	ldr	r3, [pc, #76]	; (8003854 <HAL_InitTick+0x64>)
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	4b11      	ldr	r3, [pc, #68]	; (8003850 <HAL_InitTick+0x60>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	4619      	mov	r1, r3
 800380e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003812:	fbb3 f3f1 	udiv	r3, r3, r1
 8003816:	fbb2 f3f3 	udiv	r3, r2, r3
 800381a:	4618      	mov	r0, r3
 800381c:	f001 f9cf 	bl	8004bbe <HAL_SYSTICK_Config>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e00e      	b.n	8003848 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b0f      	cmp	r3, #15
 800382e:	d80a      	bhi.n	8003846 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003830:	2200      	movs	r2, #0
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	f04f 30ff 	mov.w	r0, #4294967295
 8003838:	f001 f9a7 	bl	8004b8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800383c:	4a06      	ldr	r2, [pc, #24]	; (8003858 <HAL_InitTick+0x68>)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003842:	2300      	movs	r3, #0
 8003844:	e000      	b.n	8003848 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
}
 8003848:	4618      	mov	r0, r3
 800384a:	3708      	adds	r7, #8
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	24000018 	.word	0x24000018
 8003854:	24000000 	.word	0x24000000
 8003858:	24000014 	.word	0x24000014

0800385c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003860:	4b06      	ldr	r3, [pc, #24]	; (800387c <HAL_IncTick+0x20>)
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	461a      	mov	r2, r3
 8003866:	4b06      	ldr	r3, [pc, #24]	; (8003880 <HAL_IncTick+0x24>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4413      	add	r3, r2
 800386c:	4a04      	ldr	r2, [pc, #16]	; (8003880 <HAL_IncTick+0x24>)
 800386e:	6013      	str	r3, [r2, #0]
}
 8003870:	bf00      	nop
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	24000018 	.word	0x24000018
 8003880:	24000bc8 	.word	0x24000bc8

08003884 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  return uwTick;
 8003888:	4b03      	ldr	r3, [pc, #12]	; (8003898 <HAL_GetTick+0x14>)
 800388a:	681b      	ldr	r3, [r3, #0]
}
 800388c:	4618      	mov	r0, r3
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	24000bc8 	.word	0x24000bc8

0800389c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038a4:	f7ff ffee 	bl	8003884 <HAL_GetTick>
 80038a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b4:	d005      	beq.n	80038c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038b6:	4b0a      	ldr	r3, [pc, #40]	; (80038e0 <HAL_Delay+0x44>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	461a      	mov	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4413      	add	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038c2:	bf00      	nop
 80038c4:	f7ff ffde 	bl	8003884 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d8f7      	bhi.n	80038c4 <HAL_Delay+0x28>
  {
  }
}
 80038d4:	bf00      	nop
 80038d6:	bf00      	nop
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	24000018 	.word	0x24000018

080038e4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80038e8:	4b03      	ldr	r3, [pc, #12]	; (80038f8 <HAL_GetREVID+0x14>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	0c1b      	lsrs	r3, r3, #16
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	5c001000 	.word	0x5c001000

080038fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	609a      	str	r2, [r3, #8]
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
 800392a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	431a      	orrs	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	609a      	str	r2, [r3, #8]
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003958:	4618      	mov	r0, r3
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
 8003970:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	3360      	adds	r3, #96	; 0x60
 8003976:	461a      	mov	r2, r3
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4413      	add	r3, r2
 800397e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	430b      	orrs	r3, r1
 8003992:	431a      	orrs	r2, r3
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003998:	bf00      	nop
 800399a:	371c      	adds	r7, #28
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	f003 031f 	and.w	r3, r3, #31
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	fa01 f303 	lsl.w	r3, r1, r3
 80039c4:	431a      	orrs	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	611a      	str	r2, [r3, #16]
}
 80039ca:	bf00      	nop
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr

080039d6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b087      	sub	sp, #28
 80039da:	af00      	add	r7, sp, #0
 80039dc:	60f8      	str	r0, [r7, #12]
 80039de:	60b9      	str	r1, [r7, #8]
 80039e0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	3360      	adds	r3, #96	; 0x60
 80039e6:	461a      	mov	r2, r3
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	431a      	orrs	r2, r3
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	601a      	str	r2, [r3, #0]
  }
}
 8003a00:	bf00      	nop
 8003a02:	371c      	adds	r7, #28
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b087      	sub	sp, #28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	3330      	adds	r3, #48	; 0x30
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	0a1b      	lsrs	r3, r3, #8
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	f003 030c 	and.w	r3, r3, #12
 8003a28:	4413      	add	r3, r2
 8003a2a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	f003 031f 	and.w	r3, r3, #31
 8003a36:	211f      	movs	r1, #31
 8003a38:	fa01 f303 	lsl.w	r3, r1, r3
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	401a      	ands	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	0e9b      	lsrs	r3, r3, #26
 8003a44:	f003 011f 	and.w	r1, r3, #31
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	f003 031f 	and.w	r3, r3, #31
 8003a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a52:	431a      	orrs	r2, r3
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003a58:	bf00      	nop
 8003a5a:	371c      	adds	r7, #28
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b087      	sub	sp, #28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	3314      	adds	r3, #20
 8003a74:	461a      	mov	r2, r3
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	0e5b      	lsrs	r3, r3, #25
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	4413      	add	r3, r2
 8003a82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	0d1b      	lsrs	r3, r3, #20
 8003a8c:	f003 031f 	and.w	r3, r3, #31
 8003a90:	2107      	movs	r1, #7
 8003a92:	fa01 f303 	lsl.w	r3, r1, r3
 8003a96:	43db      	mvns	r3, r3
 8003a98:	401a      	ands	r2, r3
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	0d1b      	lsrs	r3, r3, #20
 8003a9e:	f003 031f 	and.w	r3, r3, #31
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003aae:	bf00      	nop
 8003ab0:	371c      	adds	r7, #28
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
	...

08003abc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	401a      	ands	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f003 0318 	and.w	r3, r3, #24
 8003ade:	4908      	ldr	r1, [pc, #32]	; (8003b00 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003ae0:	40d9      	lsrs	r1, r3
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	400b      	ands	r3, r1
 8003ae6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003aea:	431a      	orrs	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8003af2:	bf00      	nop
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	000fffff 	.word	0x000fffff

08003b04 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	4b04      	ldr	r3, [pc, #16]	; (8003b24 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003b12:	4013      	ands	r3, r2
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6093      	str	r3, [r2, #8]
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr
 8003b24:	5fffffc0 	.word	0x5fffffc0

08003b28 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b3c:	d101      	bne.n	8003b42 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	4b05      	ldr	r3, [pc, #20]	; (8003b74 <LL_ADC_EnableInternalRegulator+0x24>)
 8003b5e:	4013      	ands	r3, r2
 8003b60:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr
 8003b74:	6fffffc0 	.word	0x6fffffc0

08003b78 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b8c:	d101      	bne.n	8003b92 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e000      	b.n	8003b94 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d101      	bne.n	8003bb8 <LL_ADC_IsEnabled+0x18>
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e000      	b.n	8003bba <LL_ADC_IsEnabled+0x1a>
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr

08003bc6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 0304 	and.w	r3, r3, #4
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d101      	bne.n	8003bde <LL_ADC_REG_IsConversionOngoing+0x18>
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e000      	b.n	8003be0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 0308 	and.w	r3, r3, #8
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d101      	bne.n	8003c04 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003c00:	2301      	movs	r3, #1
 8003c02:	e000      	b.n	8003c06 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
	...

08003c14 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c14:	b590      	push	{r4, r7, lr}
 8003c16:	b089      	sub	sp, #36	; 0x24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003c20:	2300      	movs	r3, #0
 8003c22:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e18e      	b.n	8003f4c <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d109      	bne.n	8003c50 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f7fe f823 	bl	8001c88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff ff67 	bl	8003b28 <LL_ADC_IsDeepPowerDownEnabled>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d004      	beq.n	8003c6a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7ff ff4d 	bl	8003b04 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7ff ff82 	bl	8003b78 <LL_ADC_IsInternalRegulatorEnabled>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d114      	bne.n	8003ca4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7ff ff66 	bl	8003b50 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c84:	4b9a      	ldr	r3, [pc, #616]	; (8003ef0 <HAL_ADC_Init+0x2dc>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	099b      	lsrs	r3, r3, #6
 8003c8a:	4a9a      	ldr	r2, [pc, #616]	; (8003ef4 <HAL_ADC_Init+0x2e0>)
 8003c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c90:	099b      	lsrs	r3, r3, #6
 8003c92:	3301      	adds	r3, #1
 8003c94:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003c96:	e002      	b.n	8003c9e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1f9      	bne.n	8003c98 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7ff ff65 	bl	8003b78 <LL_ADC_IsInternalRegulatorEnabled>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10d      	bne.n	8003cd0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb8:	f043 0210 	orr.w	r2, r3, #16
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc4:	f043 0201 	orr.w	r2, r3, #1
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7ff ff76 	bl	8003bc6 <LL_ADC_REG_IsConversionOngoing>
 8003cda:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce0:	f003 0310 	and.w	r3, r3, #16
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f040 8128 	bne.w	8003f3a <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f040 8124 	bne.w	8003f3a <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003cfa:	f043 0202 	orr.w	r2, r3, #2
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7ff ff4a 	bl	8003ba0 <LL_ADC_IsEnabled>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d136      	bne.n	8003d80 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a78      	ldr	r2, [pc, #480]	; (8003ef8 <HAL_ADC_Init+0x2e4>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d004      	beq.n	8003d26 <HAL_ADC_Init+0x112>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a76      	ldr	r2, [pc, #472]	; (8003efc <HAL_ADC_Init+0x2e8>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d10e      	bne.n	8003d44 <HAL_ADC_Init+0x130>
 8003d26:	4874      	ldr	r0, [pc, #464]	; (8003ef8 <HAL_ADC_Init+0x2e4>)
 8003d28:	f7ff ff3a 	bl	8003ba0 <LL_ADC_IsEnabled>
 8003d2c:	4604      	mov	r4, r0
 8003d2e:	4873      	ldr	r0, [pc, #460]	; (8003efc <HAL_ADC_Init+0x2e8>)
 8003d30:	f7ff ff36 	bl	8003ba0 <LL_ADC_IsEnabled>
 8003d34:	4603      	mov	r3, r0
 8003d36:	4323      	orrs	r3, r4
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	bf0c      	ite	eq
 8003d3c:	2301      	moveq	r3, #1
 8003d3e:	2300      	movne	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	e008      	b.n	8003d56 <HAL_ADC_Init+0x142>
 8003d44:	486e      	ldr	r0, [pc, #440]	; (8003f00 <HAL_ADC_Init+0x2ec>)
 8003d46:	f7ff ff2b 	bl	8003ba0 <LL_ADC_IsEnabled>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	bf0c      	ite	eq
 8003d50:	2301      	moveq	r3, #1
 8003d52:	2300      	movne	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d012      	beq.n	8003d80 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a66      	ldr	r2, [pc, #408]	; (8003ef8 <HAL_ADC_Init+0x2e4>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d004      	beq.n	8003d6e <HAL_ADC_Init+0x15a>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a64      	ldr	r2, [pc, #400]	; (8003efc <HAL_ADC_Init+0x2e8>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d101      	bne.n	8003d72 <HAL_ADC_Init+0x15e>
 8003d6e:	4a65      	ldr	r2, [pc, #404]	; (8003f04 <HAL_ADC_Init+0x2f0>)
 8003d70:	e000      	b.n	8003d74 <HAL_ADC_Init+0x160>
 8003d72:	4a65      	ldr	r2, [pc, #404]	; (8003f08 <HAL_ADC_Init+0x2f4>)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	4619      	mov	r1, r3
 8003d7a:	4610      	mov	r0, r2
 8003d7c:	f7ff fdbe 	bl	80038fc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003d80:	f7ff fdb0 	bl	80038e4 <HAL_GetREVID>
 8003d84:	4603      	mov	r3, r0
 8003d86:	f241 0203 	movw	r2, #4099	; 0x1003
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d914      	bls.n	8003db8 <HAL_ADC_Init+0x1a4>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	2b10      	cmp	r3, #16
 8003d94:	d110      	bne.n	8003db8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	7d5b      	ldrb	r3, [r3, #21]
 8003d9a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003da0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003da6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	7f1b      	ldrb	r3, [r3, #28]
 8003dac:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003dae:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003db0:	f043 030c 	orr.w	r3, r3, #12
 8003db4:	61bb      	str	r3, [r7, #24]
 8003db6:	e00d      	b.n	8003dd4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	7d5b      	ldrb	r3, [r3, #21]
 8003dbc:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003dc2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003dc8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	7f1b      	ldrb	r3, [r3, #28]
 8003dce:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	7f1b      	ldrb	r3, [r3, #28]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d106      	bne.n	8003dea <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	3b01      	subs	r3, #1
 8003de2:	045b      	lsls	r3, r3, #17
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d009      	beq.n	8003e06 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfe:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68da      	ldr	r2, [r3, #12]
 8003e0c:	4b3f      	ldr	r3, [pc, #252]	; (8003f0c <HAL_ADC_Init+0x2f8>)
 8003e0e:	4013      	ands	r3, r2
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6812      	ldr	r2, [r2, #0]
 8003e14:	69b9      	ldr	r1, [r7, #24]
 8003e16:	430b      	orrs	r3, r1
 8003e18:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7ff fed1 	bl	8003bc6 <LL_ADC_REG_IsConversionOngoing>
 8003e24:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff fede 	bl	8003bec <LL_ADC_INJ_IsConversionOngoing>
 8003e30:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d14a      	bne.n	8003ece <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d147      	bne.n	8003ece <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	7d1b      	ldrb	r3, [r3, #20]
 8003e42:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	4b2f      	ldr	r3, [pc, #188]	; (8003f10 <HAL_ADC_Init+0x2fc>)
 8003e54:	4013      	ands	r3, r2
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6812      	ldr	r2, [r2, #0]
 8003e5a:	69b9      	ldr	r1, [r7, #24]
 8003e5c:	430b      	orrs	r3, r1
 8003e5e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d11b      	bne.n	8003ea2 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	691a      	ldr	r2, [r3, #16]
 8003e76:	4b27      	ldr	r3, [pc, #156]	; (8003f14 <HAL_ADC_Init+0x300>)
 8003e78:	4013      	ands	r3, r2
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e7e:	3a01      	subs	r2, #1
 8003e80:	0411      	lsls	r1, r2, #16
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e86:	4311      	orrs	r1, r2
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003e8c:	4311      	orrs	r1, r2
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003e92:	430a      	orrs	r2, r1
 8003e94:	431a      	orrs	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f042 0201 	orr.w	r2, r2, #1
 8003e9e:	611a      	str	r2, [r3, #16]
 8003ea0:	e007      	b.n	8003eb2 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	691a      	ldr	r2, [r3, #16]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0201 	bic.w	r2, r2, #1
 8003eb0:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 fb93 	bl	80045f4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d120      	bne.n	8003f18 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003edc:	f023 010f 	bic.w	r1, r3, #15
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	1e5a      	subs	r2, r3, #1
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	631a      	str	r2, [r3, #48]	; 0x30
 8003eee:	e01b      	b.n	8003f28 <HAL_ADC_Init+0x314>
 8003ef0:	24000000 	.word	0x24000000
 8003ef4:	053e2d63 	.word	0x053e2d63
 8003ef8:	40022000 	.word	0x40022000
 8003efc:	40022100 	.word	0x40022100
 8003f00:	58026000 	.word	0x58026000
 8003f04:	40022300 	.word	0x40022300
 8003f08:	58026300 	.word	0x58026300
 8003f0c:	fff0c003 	.word	0xfff0c003
 8003f10:	ffffbffc 	.word	0xffffbffc
 8003f14:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 020f 	bic.w	r2, r2, #15
 8003f26:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2c:	f023 0303 	bic.w	r3, r3, #3
 8003f30:	f043 0201 	orr.w	r2, r3, #1
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	655a      	str	r2, [r3, #84]	; 0x54
 8003f38:	e007      	b.n	8003f4a <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3e:	f043 0210 	orr.w	r2, r3, #16
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003f4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3724      	adds	r7, #36	; 0x24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd90      	pop	{r4, r7, pc}

08003f54 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003f54:	b590      	push	{r4, r7, lr}
 8003f56:	b0a1      	sub	sp, #132	; 0x84
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003f64:	2300      	movs	r3, #0
 8003f66:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	4a9d      	ldr	r2, [pc, #628]	; (80041e4 <HAL_ADC_ConfigChannel+0x290>)
 8003f6e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d101      	bne.n	8003f7e <HAL_ADC_ConfigChannel+0x2a>
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	e321      	b.n	80045c2 <HAL_ADC_ConfigChannel+0x66e>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7ff fe1b 	bl	8003bc6 <LL_ADC_REG_IsConversionOngoing>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f040 8306 	bne.w	80045a4 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d108      	bne.n	8003fb6 <HAL_ADC_ConfigChannel+0x62>
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	0e9b      	lsrs	r3, r3, #26
 8003faa:	f003 031f 	and.w	r3, r3, #31
 8003fae:	2201      	movs	r2, #1
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	e016      	b.n	8003fe4 <HAL_ADC_ConfigChannel+0x90>
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fbe:	fa93 f3a3 	rbit	r3, r3
 8003fc2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003fc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fc6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003fc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003fce:	2320      	movs	r3, #32
 8003fd0:	e003      	b.n	8003fda <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003fd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fd4:	fab3 f383 	clz	r3, r3
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	f003 031f 	and.w	r3, r3, #31
 8003fde:	2201      	movs	r2, #1
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6812      	ldr	r2, [r2, #0]
 8003fe8:	69d1      	ldr	r1, [r2, #28]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6812      	ldr	r2, [r2, #0]
 8003fee:	430b      	orrs	r3, r1
 8003ff0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6818      	ldr	r0, [r3, #0]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	6859      	ldr	r1, [r3, #4]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	f7ff fd04 	bl	8003a0c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4618      	mov	r0, r3
 800400a:	f7ff fddc 	bl	8003bc6 <LL_ADC_REG_IsConversionOngoing>
 800400e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4618      	mov	r0, r3
 8004016:	f7ff fde9 	bl	8003bec <LL_ADC_INJ_IsConversionOngoing>
 800401a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800401c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800401e:	2b00      	cmp	r3, #0
 8004020:	f040 80b3 	bne.w	800418a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004024:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004026:	2b00      	cmp	r3, #0
 8004028:	f040 80af 	bne.w	800418a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6818      	ldr	r0, [r3, #0]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	6819      	ldr	r1, [r3, #0]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	461a      	mov	r2, r3
 800403a:	f7ff fd13 	bl	8003a64 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800403e:	4b6a      	ldr	r3, [pc, #424]	; (80041e8 <HAL_ADC_ConfigChannel+0x294>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004046:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800404a:	d10b      	bne.n	8004064 <HAL_ADC_ConfigChannel+0x110>
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	695a      	ldr	r2, [r3, #20]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	089b      	lsrs	r3, r3, #2
 8004058:	f003 0307 	and.w	r3, r3, #7
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	fa02 f303 	lsl.w	r3, r2, r3
 8004062:	e01d      	b.n	80040a0 <HAL_ADC_ConfigChannel+0x14c>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f003 0310 	and.w	r3, r3, #16
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10b      	bne.n	800408a <HAL_ADC_ConfigChannel+0x136>
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	695a      	ldr	r2, [r3, #20]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	089b      	lsrs	r3, r3, #2
 800407e:	f003 0307 	and.w	r3, r3, #7
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	fa02 f303 	lsl.w	r3, r2, r3
 8004088:	e00a      	b.n	80040a0 <HAL_ADC_ConfigChannel+0x14c>
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	695a      	ldr	r2, [r3, #20]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	089b      	lsrs	r3, r3, #2
 8004096:	f003 0304 	and.w	r3, r3, #4
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d027      	beq.n	80040fa <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6818      	ldr	r0, [r3, #0]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	6919      	ldr	r1, [r3, #16]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040b8:	f7ff fc54 	bl	8003964 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6818      	ldr	r0, [r3, #0]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	6919      	ldr	r1, [r3, #16]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	7e5b      	ldrb	r3, [r3, #25]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d102      	bne.n	80040d2 <HAL_ADC_ConfigChannel+0x17e>
 80040cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80040d0:	e000      	b.n	80040d4 <HAL_ADC_ConfigChannel+0x180>
 80040d2:	2300      	movs	r3, #0
 80040d4:	461a      	mov	r2, r3
 80040d6:	f7ff fc7e 	bl	80039d6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6818      	ldr	r0, [r3, #0]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	6919      	ldr	r1, [r3, #16]
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	7e1b      	ldrb	r3, [r3, #24]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d102      	bne.n	80040f0 <HAL_ADC_ConfigChannel+0x19c>
 80040ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040ee:	e000      	b.n	80040f2 <HAL_ADC_ConfigChannel+0x19e>
 80040f0:	2300      	movs	r3, #0
 80040f2:	461a      	mov	r2, r3
 80040f4:	f7ff fc56 	bl	80039a4 <LL_ADC_SetDataRightShift>
 80040f8:	e047      	b.n	800418a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004100:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	069b      	lsls	r3, r3, #26
 800410a:	429a      	cmp	r2, r3
 800410c:	d107      	bne.n	800411e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800411c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004124:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	069b      	lsls	r3, r3, #26
 800412e:	429a      	cmp	r2, r3
 8004130:	d107      	bne.n	8004142 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004140:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004148:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	069b      	lsls	r3, r3, #26
 8004152:	429a      	cmp	r2, r3
 8004154:	d107      	bne.n	8004166 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004164:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800416c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	069b      	lsls	r3, r3, #26
 8004176:	429a      	cmp	r2, r3
 8004178:	d107      	bne.n	800418a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004188:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f7ff fd06 	bl	8003ba0 <LL_ADC_IsEnabled>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	f040 820d 	bne.w	80045b6 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6818      	ldr	r0, [r3, #0]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	6819      	ldr	r1, [r3, #0]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	461a      	mov	r2, r3
 80041aa:	f7ff fc87 	bl	8003abc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	4a0c      	ldr	r2, [pc, #48]	; (80041e4 <HAL_ADC_ConfigChannel+0x290>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	f040 8133 	bne.w	8004420 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d110      	bne.n	80041ec <HAL_ADC_ConfigChannel+0x298>
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	0e9b      	lsrs	r3, r3, #26
 80041d0:	3301      	adds	r3, #1
 80041d2:	f003 031f 	and.w	r3, r3, #31
 80041d6:	2b09      	cmp	r3, #9
 80041d8:	bf94      	ite	ls
 80041da:	2301      	movls	r3, #1
 80041dc:	2300      	movhi	r3, #0
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	e01e      	b.n	8004220 <HAL_ADC_ConfigChannel+0x2cc>
 80041e2:	bf00      	nop
 80041e4:	47ff0000 	.word	0x47ff0000
 80041e8:	5c001000 	.word	0x5c001000
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041f4:	fa93 f3a3 	rbit	r3, r3
 80041f8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80041fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80041fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8004204:	2320      	movs	r3, #32
 8004206:	e003      	b.n	8004210 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8004208:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800420a:	fab3 f383 	clz	r3, r3
 800420e:	b2db      	uxtb	r3, r3
 8004210:	3301      	adds	r3, #1
 8004212:	f003 031f 	and.w	r3, r3, #31
 8004216:	2b09      	cmp	r3, #9
 8004218:	bf94      	ite	ls
 800421a:	2301      	movls	r3, #1
 800421c:	2300      	movhi	r3, #0
 800421e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004220:	2b00      	cmp	r3, #0
 8004222:	d079      	beq.n	8004318 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800422c:	2b00      	cmp	r3, #0
 800422e:	d107      	bne.n	8004240 <HAL_ADC_ConfigChannel+0x2ec>
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	0e9b      	lsrs	r3, r3, #26
 8004236:	3301      	adds	r3, #1
 8004238:	069b      	lsls	r3, r3, #26
 800423a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800423e:	e015      	b.n	800426c <HAL_ADC_ConfigChannel+0x318>
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004248:	fa93 f3a3 	rbit	r3, r3
 800424c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800424e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004250:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004254:	2b00      	cmp	r3, #0
 8004256:	d101      	bne.n	800425c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8004258:	2320      	movs	r3, #32
 800425a:	e003      	b.n	8004264 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800425c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800425e:	fab3 f383 	clz	r3, r3
 8004262:	b2db      	uxtb	r3, r3
 8004264:	3301      	adds	r3, #1
 8004266:	069b      	lsls	r3, r3, #26
 8004268:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004274:	2b00      	cmp	r3, #0
 8004276:	d109      	bne.n	800428c <HAL_ADC_ConfigChannel+0x338>
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	0e9b      	lsrs	r3, r3, #26
 800427e:	3301      	adds	r3, #1
 8004280:	f003 031f 	and.w	r3, r3, #31
 8004284:	2101      	movs	r1, #1
 8004286:	fa01 f303 	lsl.w	r3, r1, r3
 800428a:	e017      	b.n	80042bc <HAL_ADC_ConfigChannel+0x368>
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004294:	fa93 f3a3 	rbit	r3, r3
 8004298:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800429a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800429c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800429e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d101      	bne.n	80042a8 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80042a4:	2320      	movs	r3, #32
 80042a6:	e003      	b.n	80042b0 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80042a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042aa:	fab3 f383 	clz	r3, r3
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	3301      	adds	r3, #1
 80042b2:	f003 031f 	and.w	r3, r3, #31
 80042b6:	2101      	movs	r1, #1
 80042b8:	fa01 f303 	lsl.w	r3, r1, r3
 80042bc:	ea42 0103 	orr.w	r1, r2, r3
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10a      	bne.n	80042e2 <HAL_ADC_ConfigChannel+0x38e>
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	0e9b      	lsrs	r3, r3, #26
 80042d2:	3301      	adds	r3, #1
 80042d4:	f003 021f 	and.w	r2, r3, #31
 80042d8:	4613      	mov	r3, r2
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	4413      	add	r3, r2
 80042de:	051b      	lsls	r3, r3, #20
 80042e0:	e018      	b.n	8004314 <HAL_ADC_ConfigChannel+0x3c0>
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ea:	fa93 f3a3 	rbit	r3, r3
 80042ee:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80042f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80042f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80042fa:	2320      	movs	r3, #32
 80042fc:	e003      	b.n	8004306 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80042fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004300:	fab3 f383 	clz	r3, r3
 8004304:	b2db      	uxtb	r3, r3
 8004306:	3301      	adds	r3, #1
 8004308:	f003 021f 	and.w	r2, r3, #31
 800430c:	4613      	mov	r3, r2
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	4413      	add	r3, r2
 8004312:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004314:	430b      	orrs	r3, r1
 8004316:	e07e      	b.n	8004416 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004320:	2b00      	cmp	r3, #0
 8004322:	d107      	bne.n	8004334 <HAL_ADC_ConfigChannel+0x3e0>
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	0e9b      	lsrs	r3, r3, #26
 800432a:	3301      	adds	r3, #1
 800432c:	069b      	lsls	r3, r3, #26
 800432e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004332:	e015      	b.n	8004360 <HAL_ADC_ConfigChannel+0x40c>
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433c:	fa93 f3a3 	rbit	r3, r3
 8004340:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800434c:	2320      	movs	r3, #32
 800434e:	e003      	b.n	8004358 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004352:	fab3 f383 	clz	r3, r3
 8004356:	b2db      	uxtb	r3, r3
 8004358:	3301      	adds	r3, #1
 800435a:	069b      	lsls	r3, r3, #26
 800435c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004368:	2b00      	cmp	r3, #0
 800436a:	d109      	bne.n	8004380 <HAL_ADC_ConfigChannel+0x42c>
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	0e9b      	lsrs	r3, r3, #26
 8004372:	3301      	adds	r3, #1
 8004374:	f003 031f 	and.w	r3, r3, #31
 8004378:	2101      	movs	r1, #1
 800437a:	fa01 f303 	lsl.w	r3, r1, r3
 800437e:	e017      	b.n	80043b0 <HAL_ADC_ConfigChannel+0x45c>
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	fa93 f3a3 	rbit	r3, r3
 800438c:	61bb      	str	r3, [r7, #24]
  return result;
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004392:	6a3b      	ldr	r3, [r7, #32]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8004398:	2320      	movs	r3, #32
 800439a:	e003      	b.n	80043a4 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	fab3 f383 	clz	r3, r3
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	3301      	adds	r3, #1
 80043a6:	f003 031f 	and.w	r3, r3, #31
 80043aa:	2101      	movs	r1, #1
 80043ac:	fa01 f303 	lsl.w	r3, r1, r3
 80043b0:	ea42 0103 	orr.w	r1, r2, r3
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10d      	bne.n	80043dc <HAL_ADC_ConfigChannel+0x488>
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	0e9b      	lsrs	r3, r3, #26
 80043c6:	3301      	adds	r3, #1
 80043c8:	f003 021f 	and.w	r2, r3, #31
 80043cc:	4613      	mov	r3, r2
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	4413      	add	r3, r2
 80043d2:	3b1e      	subs	r3, #30
 80043d4:	051b      	lsls	r3, r3, #20
 80043d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80043da:	e01b      	b.n	8004414 <HAL_ADC_ConfigChannel+0x4c0>
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	fa93 f3a3 	rbit	r3, r3
 80043e8:	60fb      	str	r3, [r7, #12]
  return result;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80043f4:	2320      	movs	r3, #32
 80043f6:	e003      	b.n	8004400 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	fab3 f383 	clz	r3, r3
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	3301      	adds	r3, #1
 8004402:	f003 021f 	and.w	r2, r3, #31
 8004406:	4613      	mov	r3, r2
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	4413      	add	r3, r2
 800440c:	3b1e      	subs	r3, #30
 800440e:	051b      	lsls	r3, r3, #20
 8004410:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004414:	430b      	orrs	r3, r1
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	6892      	ldr	r2, [r2, #8]
 800441a:	4619      	mov	r1, r3
 800441c:	f7ff fb22 	bl	8003a64 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	f280 80c6 	bge.w	80045b6 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a67      	ldr	r2, [pc, #412]	; (80045cc <HAL_ADC_ConfigChannel+0x678>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d004      	beq.n	800443e <HAL_ADC_ConfigChannel+0x4ea>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a65      	ldr	r2, [pc, #404]	; (80045d0 <HAL_ADC_ConfigChannel+0x67c>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d101      	bne.n	8004442 <HAL_ADC_ConfigChannel+0x4ee>
 800443e:	4b65      	ldr	r3, [pc, #404]	; (80045d4 <HAL_ADC_ConfigChannel+0x680>)
 8004440:	e000      	b.n	8004444 <HAL_ADC_ConfigChannel+0x4f0>
 8004442:	4b65      	ldr	r3, [pc, #404]	; (80045d8 <HAL_ADC_ConfigChannel+0x684>)
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff fa7f 	bl	8003948 <LL_ADC_GetCommonPathInternalCh>
 800444a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a5e      	ldr	r2, [pc, #376]	; (80045cc <HAL_ADC_ConfigChannel+0x678>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d004      	beq.n	8004460 <HAL_ADC_ConfigChannel+0x50c>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a5d      	ldr	r2, [pc, #372]	; (80045d0 <HAL_ADC_ConfigChannel+0x67c>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d10e      	bne.n	800447e <HAL_ADC_ConfigChannel+0x52a>
 8004460:	485a      	ldr	r0, [pc, #360]	; (80045cc <HAL_ADC_ConfigChannel+0x678>)
 8004462:	f7ff fb9d 	bl	8003ba0 <LL_ADC_IsEnabled>
 8004466:	4604      	mov	r4, r0
 8004468:	4859      	ldr	r0, [pc, #356]	; (80045d0 <HAL_ADC_ConfigChannel+0x67c>)
 800446a:	f7ff fb99 	bl	8003ba0 <LL_ADC_IsEnabled>
 800446e:	4603      	mov	r3, r0
 8004470:	4323      	orrs	r3, r4
 8004472:	2b00      	cmp	r3, #0
 8004474:	bf0c      	ite	eq
 8004476:	2301      	moveq	r3, #1
 8004478:	2300      	movne	r3, #0
 800447a:	b2db      	uxtb	r3, r3
 800447c:	e008      	b.n	8004490 <HAL_ADC_ConfigChannel+0x53c>
 800447e:	4857      	ldr	r0, [pc, #348]	; (80045dc <HAL_ADC_ConfigChannel+0x688>)
 8004480:	f7ff fb8e 	bl	8003ba0 <LL_ADC_IsEnabled>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	bf0c      	ite	eq
 800448a:	2301      	moveq	r3, #1
 800448c:	2300      	movne	r3, #0
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b00      	cmp	r3, #0
 8004492:	d07d      	beq.n	8004590 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a51      	ldr	r2, [pc, #324]	; (80045e0 <HAL_ADC_ConfigChannel+0x68c>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d130      	bne.n	8004500 <HAL_ADC_ConfigChannel+0x5ac>
 800449e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d12b      	bne.n	8004500 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a4b      	ldr	r2, [pc, #300]	; (80045dc <HAL_ADC_ConfigChannel+0x688>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	f040 8081 	bne.w	80045b6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a44      	ldr	r2, [pc, #272]	; (80045cc <HAL_ADC_ConfigChannel+0x678>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d004      	beq.n	80044c8 <HAL_ADC_ConfigChannel+0x574>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a43      	ldr	r2, [pc, #268]	; (80045d0 <HAL_ADC_ConfigChannel+0x67c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d101      	bne.n	80044cc <HAL_ADC_ConfigChannel+0x578>
 80044c8:	4a42      	ldr	r2, [pc, #264]	; (80045d4 <HAL_ADC_ConfigChannel+0x680>)
 80044ca:	e000      	b.n	80044ce <HAL_ADC_ConfigChannel+0x57a>
 80044cc:	4a42      	ldr	r2, [pc, #264]	; (80045d8 <HAL_ADC_ConfigChannel+0x684>)
 80044ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80044d4:	4619      	mov	r1, r3
 80044d6:	4610      	mov	r0, r2
 80044d8:	f7ff fa23 	bl	8003922 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044dc:	4b41      	ldr	r3, [pc, #260]	; (80045e4 <HAL_ADC_ConfigChannel+0x690>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	099b      	lsrs	r3, r3, #6
 80044e2:	4a41      	ldr	r2, [pc, #260]	; (80045e8 <HAL_ADC_ConfigChannel+0x694>)
 80044e4:	fba2 2303 	umull	r2, r3, r2, r3
 80044e8:	099b      	lsrs	r3, r3, #6
 80044ea:	3301      	adds	r3, #1
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80044f0:	e002      	b.n	80044f8 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	3b01      	subs	r3, #1
 80044f6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1f9      	bne.n	80044f2 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044fe:	e05a      	b.n	80045b6 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a39      	ldr	r2, [pc, #228]	; (80045ec <HAL_ADC_ConfigChannel+0x698>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d11e      	bne.n	8004548 <HAL_ADC_ConfigChannel+0x5f4>
 800450a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800450c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d119      	bne.n	8004548 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a30      	ldr	r2, [pc, #192]	; (80045dc <HAL_ADC_ConfigChannel+0x688>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d14b      	bne.n	80045b6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a2a      	ldr	r2, [pc, #168]	; (80045cc <HAL_ADC_ConfigChannel+0x678>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d004      	beq.n	8004532 <HAL_ADC_ConfigChannel+0x5de>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a28      	ldr	r2, [pc, #160]	; (80045d0 <HAL_ADC_ConfigChannel+0x67c>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d101      	bne.n	8004536 <HAL_ADC_ConfigChannel+0x5e2>
 8004532:	4a28      	ldr	r2, [pc, #160]	; (80045d4 <HAL_ADC_ConfigChannel+0x680>)
 8004534:	e000      	b.n	8004538 <HAL_ADC_ConfigChannel+0x5e4>
 8004536:	4a28      	ldr	r2, [pc, #160]	; (80045d8 <HAL_ADC_ConfigChannel+0x684>)
 8004538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800453a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800453e:	4619      	mov	r1, r3
 8004540:	4610      	mov	r0, r2
 8004542:	f7ff f9ee 	bl	8003922 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004546:	e036      	b.n	80045b6 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a28      	ldr	r2, [pc, #160]	; (80045f0 <HAL_ADC_ConfigChannel+0x69c>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d131      	bne.n	80045b6 <HAL_ADC_ConfigChannel+0x662>
 8004552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004554:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d12c      	bne.n	80045b6 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a1e      	ldr	r2, [pc, #120]	; (80045dc <HAL_ADC_ConfigChannel+0x688>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d127      	bne.n	80045b6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a18      	ldr	r2, [pc, #96]	; (80045cc <HAL_ADC_ConfigChannel+0x678>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d004      	beq.n	800457a <HAL_ADC_ConfigChannel+0x626>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a16      	ldr	r2, [pc, #88]	; (80045d0 <HAL_ADC_ConfigChannel+0x67c>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d101      	bne.n	800457e <HAL_ADC_ConfigChannel+0x62a>
 800457a:	4a16      	ldr	r2, [pc, #88]	; (80045d4 <HAL_ADC_ConfigChannel+0x680>)
 800457c:	e000      	b.n	8004580 <HAL_ADC_ConfigChannel+0x62c>
 800457e:	4a16      	ldr	r2, [pc, #88]	; (80045d8 <HAL_ADC_ConfigChannel+0x684>)
 8004580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004582:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004586:	4619      	mov	r1, r3
 8004588:	4610      	mov	r0, r2
 800458a:	f7ff f9ca 	bl	8003922 <LL_ADC_SetCommonPathInternalCh>
 800458e:	e012      	b.n	80045b6 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004594:	f043 0220 	orr.w	r2, r3, #32
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80045a2:	e008      	b.n	80045b6 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a8:	f043 0220 	orr.w	r2, r3, #32
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80045be:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3784      	adds	r7, #132	; 0x84
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd90      	pop	{r4, r7, pc}
 80045ca:	bf00      	nop
 80045cc:	40022000 	.word	0x40022000
 80045d0:	40022100 	.word	0x40022100
 80045d4:	40022300 	.word	0x40022300
 80045d8:	58026300 	.word	0x58026300
 80045dc:	58026000 	.word	0x58026000
 80045e0:	cb840000 	.word	0xcb840000
 80045e4:	24000000 	.word	0x24000000
 80045e8:	053e2d63 	.word	0x053e2d63
 80045ec:	c7520000 	.word	0xc7520000
 80045f0:	cfb80000 	.word	0xcfb80000

080045f4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a79      	ldr	r2, [pc, #484]	; (80047e8 <ADC_ConfigureBoostMode+0x1f4>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d004      	beq.n	8004610 <ADC_ConfigureBoostMode+0x1c>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a78      	ldr	r2, [pc, #480]	; (80047ec <ADC_ConfigureBoostMode+0x1f8>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d109      	bne.n	8004624 <ADC_ConfigureBoostMode+0x30>
 8004610:	4b77      	ldr	r3, [pc, #476]	; (80047f0 <ADC_ConfigureBoostMode+0x1fc>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004618:	2b00      	cmp	r3, #0
 800461a:	bf14      	ite	ne
 800461c:	2301      	movne	r3, #1
 800461e:	2300      	moveq	r3, #0
 8004620:	b2db      	uxtb	r3, r3
 8004622:	e008      	b.n	8004636 <ADC_ConfigureBoostMode+0x42>
 8004624:	4b73      	ldr	r3, [pc, #460]	; (80047f4 <ADC_ConfigureBoostMode+0x200>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800462c:	2b00      	cmp	r3, #0
 800462e:	bf14      	ite	ne
 8004630:	2301      	movne	r3, #1
 8004632:	2300      	moveq	r3, #0
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d01c      	beq.n	8004674 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800463a:	f002 fe91 	bl	8007360 <HAL_RCC_GetHCLKFreq>
 800463e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004648:	d010      	beq.n	800466c <ADC_ConfigureBoostMode+0x78>
 800464a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800464e:	d871      	bhi.n	8004734 <ADC_ConfigureBoostMode+0x140>
 8004650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004654:	d002      	beq.n	800465c <ADC_ConfigureBoostMode+0x68>
 8004656:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800465a:	d16b      	bne.n	8004734 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	0c1b      	lsrs	r3, r3, #16
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	fbb2 f3f3 	udiv	r3, r2, r3
 8004668:	60fb      	str	r3, [r7, #12]
        break;
 800466a:	e066      	b.n	800473a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	089b      	lsrs	r3, r3, #2
 8004670:	60fb      	str	r3, [r7, #12]
        break;
 8004672:	e062      	b.n	800473a <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004674:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004678:	f003 fe0e 	bl	8008298 <HAL_RCCEx_GetPeriphCLKFreq>
 800467c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004686:	d051      	beq.n	800472c <ADC_ConfigureBoostMode+0x138>
 8004688:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800468c:	d854      	bhi.n	8004738 <ADC_ConfigureBoostMode+0x144>
 800468e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004692:	d047      	beq.n	8004724 <ADC_ConfigureBoostMode+0x130>
 8004694:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004698:	d84e      	bhi.n	8004738 <ADC_ConfigureBoostMode+0x144>
 800469a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800469e:	d03d      	beq.n	800471c <ADC_ConfigureBoostMode+0x128>
 80046a0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80046a4:	d848      	bhi.n	8004738 <ADC_ConfigureBoostMode+0x144>
 80046a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046aa:	d033      	beq.n	8004714 <ADC_ConfigureBoostMode+0x120>
 80046ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046b0:	d842      	bhi.n	8004738 <ADC_ConfigureBoostMode+0x144>
 80046b2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80046b6:	d029      	beq.n	800470c <ADC_ConfigureBoostMode+0x118>
 80046b8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80046bc:	d83c      	bhi.n	8004738 <ADC_ConfigureBoostMode+0x144>
 80046be:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80046c2:	d01a      	beq.n	80046fa <ADC_ConfigureBoostMode+0x106>
 80046c4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80046c8:	d836      	bhi.n	8004738 <ADC_ConfigureBoostMode+0x144>
 80046ca:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80046ce:	d014      	beq.n	80046fa <ADC_ConfigureBoostMode+0x106>
 80046d0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80046d4:	d830      	bhi.n	8004738 <ADC_ConfigureBoostMode+0x144>
 80046d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046da:	d00e      	beq.n	80046fa <ADC_ConfigureBoostMode+0x106>
 80046dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046e0:	d82a      	bhi.n	8004738 <ADC_ConfigureBoostMode+0x144>
 80046e2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80046e6:	d008      	beq.n	80046fa <ADC_ConfigureBoostMode+0x106>
 80046e8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80046ec:	d824      	bhi.n	8004738 <ADC_ConfigureBoostMode+0x144>
 80046ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046f2:	d002      	beq.n	80046fa <ADC_ConfigureBoostMode+0x106>
 80046f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80046f8:	d11e      	bne.n	8004738 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	0c9b      	lsrs	r3, r3, #18
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	fbb2 f3f3 	udiv	r3, r2, r3
 8004708:	60fb      	str	r3, [r7, #12]
        break;
 800470a:	e016      	b.n	800473a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	091b      	lsrs	r3, r3, #4
 8004710:	60fb      	str	r3, [r7, #12]
        break;
 8004712:	e012      	b.n	800473a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	095b      	lsrs	r3, r3, #5
 8004718:	60fb      	str	r3, [r7, #12]
        break;
 800471a:	e00e      	b.n	800473a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	099b      	lsrs	r3, r3, #6
 8004720:	60fb      	str	r3, [r7, #12]
        break;
 8004722:	e00a      	b.n	800473a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	09db      	lsrs	r3, r3, #7
 8004728:	60fb      	str	r3, [r7, #12]
        break;
 800472a:	e006      	b.n	800473a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	0a1b      	lsrs	r3, r3, #8
 8004730:	60fb      	str	r3, [r7, #12]
        break;
 8004732:	e002      	b.n	800473a <ADC_ConfigureBoostMode+0x146>
        break;
 8004734:	bf00      	nop
 8004736:	e000      	b.n	800473a <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8004738:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800473a:	f7ff f8d3 	bl	80038e4 <HAL_GetREVID>
 800473e:	4603      	mov	r3, r0
 8004740:	f241 0203 	movw	r2, #4099	; 0x1003
 8004744:	4293      	cmp	r3, r2
 8004746:	d815      	bhi.n	8004774 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	4a2b      	ldr	r2, [pc, #172]	; (80047f8 <ADC_ConfigureBoostMode+0x204>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d908      	bls.n	8004762 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689a      	ldr	r2, [r3, #8]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800475e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004760:	e03e      	b.n	80047e0 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004770:	609a      	str	r2, [r3, #8]
}
 8004772:	e035      	b.n	80047e0 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	085b      	lsrs	r3, r3, #1
 8004778:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	4a1f      	ldr	r2, [pc, #124]	; (80047fc <ADC_ConfigureBoostMode+0x208>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d808      	bhi.n	8004794 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004790:	609a      	str	r2, [r3, #8]
}
 8004792:	e025      	b.n	80047e0 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4a1a      	ldr	r2, [pc, #104]	; (8004800 <ADC_ConfigureBoostMode+0x20c>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d80a      	bhi.n	80047b2 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047ae:	609a      	str	r2, [r3, #8]
}
 80047b0:	e016      	b.n	80047e0 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	4a13      	ldr	r2, [pc, #76]	; (8004804 <ADC_ConfigureBoostMode+0x210>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d80a      	bhi.n	80047d0 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047cc:	609a      	str	r2, [r3, #8]
}
 80047ce:	e007      	b.n	80047e0 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689a      	ldr	r2, [r3, #8]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80047de:	609a      	str	r2, [r3, #8]
}
 80047e0:	bf00      	nop
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	40022000 	.word	0x40022000
 80047ec:	40022100 	.word	0x40022100
 80047f0:	40022300 	.word	0x40022300
 80047f4:	58026300 	.word	0x58026300
 80047f8:	01312d00 	.word	0x01312d00
 80047fc:	005f5e10 	.word	0x005f5e10
 8004800:	00bebc20 	.word	0x00bebc20
 8004804:	017d7840 	.word	0x017d7840

08004808 <LL_ADC_IsEnabled>:
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	2b01      	cmp	r3, #1
 800481a:	d101      	bne.n	8004820 <LL_ADC_IsEnabled+0x18>
 800481c:	2301      	movs	r3, #1
 800481e:	e000      	b.n	8004822 <LL_ADC_IsEnabled+0x1a>
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr

0800482e <LL_ADC_REG_IsConversionOngoing>:
{
 800482e:	b480      	push	{r7}
 8004830:	b083      	sub	sp, #12
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f003 0304 	and.w	r3, r3, #4
 800483e:	2b04      	cmp	r3, #4
 8004840:	d101      	bne.n	8004846 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004842:	2301      	movs	r3, #1
 8004844:	e000      	b.n	8004848 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004854:	b590      	push	{r4, r7, lr}
 8004856:	b09f      	sub	sp, #124	; 0x7c
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800485e:	2300      	movs	r3, #0
 8004860:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800486a:	2b01      	cmp	r3, #1
 800486c:	d101      	bne.n	8004872 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800486e:	2302      	movs	r3, #2
 8004870:	e0be      	b.n	80049f0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800487a:	2300      	movs	r3, #0
 800487c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800487e:	2300      	movs	r3, #0
 8004880:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a5c      	ldr	r2, [pc, #368]	; (80049f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d102      	bne.n	8004892 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800488c:	4b5b      	ldr	r3, [pc, #364]	; (80049fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800488e:	60bb      	str	r3, [r7, #8]
 8004890:	e001      	b.n	8004896 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004892:	2300      	movs	r3, #0
 8004894:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d10b      	bne.n	80048b4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a0:	f043 0220 	orr.w	r2, r3, #32
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e09d      	b.n	80049f0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7ff ffb9 	bl	800482e <LL_ADC_REG_IsConversionOngoing>
 80048bc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7ff ffb3 	bl	800482e <LL_ADC_REG_IsConversionOngoing>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d17f      	bne.n	80049ce <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80048ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d17c      	bne.n	80049ce <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a47      	ldr	r2, [pc, #284]	; (80049f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d004      	beq.n	80048e8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a46      	ldr	r2, [pc, #280]	; (80049fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d101      	bne.n	80048ec <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80048e8:	4b45      	ldr	r3, [pc, #276]	; (8004a00 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80048ea:	e000      	b.n	80048ee <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80048ec:	4b45      	ldr	r3, [pc, #276]	; (8004a04 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80048ee:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d039      	beq.n	800496c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80048f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	431a      	orrs	r2, r3
 8004906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004908:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a3a      	ldr	r2, [pc, #232]	; (80049f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d004      	beq.n	800491e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a38      	ldr	r2, [pc, #224]	; (80049fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d10e      	bne.n	800493c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800491e:	4836      	ldr	r0, [pc, #216]	; (80049f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004920:	f7ff ff72 	bl	8004808 <LL_ADC_IsEnabled>
 8004924:	4604      	mov	r4, r0
 8004926:	4835      	ldr	r0, [pc, #212]	; (80049fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004928:	f7ff ff6e 	bl	8004808 <LL_ADC_IsEnabled>
 800492c:	4603      	mov	r3, r0
 800492e:	4323      	orrs	r3, r4
 8004930:	2b00      	cmp	r3, #0
 8004932:	bf0c      	ite	eq
 8004934:	2301      	moveq	r3, #1
 8004936:	2300      	movne	r3, #0
 8004938:	b2db      	uxtb	r3, r3
 800493a:	e008      	b.n	800494e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800493c:	4832      	ldr	r0, [pc, #200]	; (8004a08 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800493e:	f7ff ff63 	bl	8004808 <LL_ADC_IsEnabled>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	bf0c      	ite	eq
 8004948:	2301      	moveq	r3, #1
 800494a:	2300      	movne	r3, #0
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d047      	beq.n	80049e2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004954:	689a      	ldr	r2, [r3, #8]
 8004956:	4b2d      	ldr	r3, [pc, #180]	; (8004a0c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004958:	4013      	ands	r3, r2
 800495a:	683a      	ldr	r2, [r7, #0]
 800495c:	6811      	ldr	r1, [r2, #0]
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	6892      	ldr	r2, [r2, #8]
 8004962:	430a      	orrs	r2, r1
 8004964:	431a      	orrs	r2, r3
 8004966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004968:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800496a:	e03a      	b.n	80049e2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800496c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004976:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a1e      	ldr	r2, [pc, #120]	; (80049f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d004      	beq.n	800498c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a1d      	ldr	r2, [pc, #116]	; (80049fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d10e      	bne.n	80049aa <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800498c:	481a      	ldr	r0, [pc, #104]	; (80049f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800498e:	f7ff ff3b 	bl	8004808 <LL_ADC_IsEnabled>
 8004992:	4604      	mov	r4, r0
 8004994:	4819      	ldr	r0, [pc, #100]	; (80049fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004996:	f7ff ff37 	bl	8004808 <LL_ADC_IsEnabled>
 800499a:	4603      	mov	r3, r0
 800499c:	4323      	orrs	r3, r4
 800499e:	2b00      	cmp	r3, #0
 80049a0:	bf0c      	ite	eq
 80049a2:	2301      	moveq	r3, #1
 80049a4:	2300      	movne	r3, #0
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	e008      	b.n	80049bc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80049aa:	4817      	ldr	r0, [pc, #92]	; (8004a08 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80049ac:	f7ff ff2c 	bl	8004808 <LL_ADC_IsEnabled>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	bf0c      	ite	eq
 80049b6:	2301      	moveq	r3, #1
 80049b8:	2300      	movne	r3, #0
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d010      	beq.n	80049e2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80049c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049c2:	689a      	ldr	r2, [r3, #8]
 80049c4:	4b11      	ldr	r3, [pc, #68]	; (8004a0c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80049c6:	4013      	ands	r3, r2
 80049c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80049ca:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049cc:	e009      	b.n	80049e2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d2:	f043 0220 	orr.w	r2, r3, #32
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80049e0:	e000      	b.n	80049e4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049e2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80049ec:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	377c      	adds	r7, #124	; 0x7c
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd90      	pop	{r4, r7, pc}
 80049f8:	40022000 	.word	0x40022000
 80049fc:	40022100 	.word	0x40022100
 8004a00:	40022300 	.word	0x40022300
 8004a04:	58026300 	.word	0x58026300
 8004a08:	58026000 	.word	0x58026000
 8004a0c:	fffff0e0 	.word	0xfffff0e0

08004a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f003 0307 	and.w	r3, r3, #7
 8004a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a20:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <__NVIC_SetPriorityGrouping+0x40>)
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004a38:	4b06      	ldr	r3, [pc, #24]	; (8004a54 <__NVIC_SetPriorityGrouping+0x44>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a3e:	4a04      	ldr	r2, [pc, #16]	; (8004a50 <__NVIC_SetPriorityGrouping+0x40>)
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	60d3      	str	r3, [r2, #12]
}
 8004a44:	bf00      	nop
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	e000ed00 	.word	0xe000ed00
 8004a54:	05fa0000 	.word	0x05fa0000

08004a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a5c:	4b04      	ldr	r3, [pc, #16]	; (8004a70 <__NVIC_GetPriorityGrouping+0x18>)
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	0a1b      	lsrs	r3, r3, #8
 8004a62:	f003 0307 	and.w	r3, r3, #7
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	e000ed00 	.word	0xe000ed00

08004a74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	6039      	str	r1, [r7, #0]
 8004a7e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004a80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	db0a      	blt.n	8004a9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	b2da      	uxtb	r2, r3
 8004a8c:	490c      	ldr	r1, [pc, #48]	; (8004ac0 <__NVIC_SetPriority+0x4c>)
 8004a8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a92:	0112      	lsls	r2, r2, #4
 8004a94:	b2d2      	uxtb	r2, r2
 8004a96:	440b      	add	r3, r1
 8004a98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a9c:	e00a      	b.n	8004ab4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	b2da      	uxtb	r2, r3
 8004aa2:	4908      	ldr	r1, [pc, #32]	; (8004ac4 <__NVIC_SetPriority+0x50>)
 8004aa4:	88fb      	ldrh	r3, [r7, #6]
 8004aa6:	f003 030f 	and.w	r3, r3, #15
 8004aaa:	3b04      	subs	r3, #4
 8004aac:	0112      	lsls	r2, r2, #4
 8004aae:	b2d2      	uxtb	r2, r2
 8004ab0:	440b      	add	r3, r1
 8004ab2:	761a      	strb	r2, [r3, #24]
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr
 8004ac0:	e000e100 	.word	0xe000e100
 8004ac4:	e000ed00 	.word	0xe000ed00

08004ac8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b089      	sub	sp, #36	; 0x24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f003 0307 	and.w	r3, r3, #7
 8004ada:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	f1c3 0307 	rsb	r3, r3, #7
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	bf28      	it	cs
 8004ae6:	2304      	movcs	r3, #4
 8004ae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	3304      	adds	r3, #4
 8004aee:	2b06      	cmp	r3, #6
 8004af0:	d902      	bls.n	8004af8 <NVIC_EncodePriority+0x30>
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	3b03      	subs	r3, #3
 8004af6:	e000      	b.n	8004afa <NVIC_EncodePriority+0x32>
 8004af8:	2300      	movs	r3, #0
 8004afa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004afc:	f04f 32ff 	mov.w	r2, #4294967295
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	fa02 f303 	lsl.w	r3, r2, r3
 8004b06:	43da      	mvns	r2, r3
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	401a      	ands	r2, r3
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b10:	f04f 31ff 	mov.w	r1, #4294967295
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	fa01 f303 	lsl.w	r3, r1, r3
 8004b1a:	43d9      	mvns	r1, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b20:	4313      	orrs	r3, r2
         );
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3724      	adds	r7, #36	; 0x24
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
	...

08004b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b40:	d301      	bcc.n	8004b46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b42:	2301      	movs	r3, #1
 8004b44:	e00f      	b.n	8004b66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b46:	4a0a      	ldr	r2, [pc, #40]	; (8004b70 <SysTick_Config+0x40>)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b4e:	210f      	movs	r1, #15
 8004b50:	f04f 30ff 	mov.w	r0, #4294967295
 8004b54:	f7ff ff8e 	bl	8004a74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b58:	4b05      	ldr	r3, [pc, #20]	; (8004b70 <SysTick_Config+0x40>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b5e:	4b04      	ldr	r3, [pc, #16]	; (8004b70 <SysTick_Config+0x40>)
 8004b60:	2207      	movs	r2, #7
 8004b62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3708      	adds	r7, #8
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	e000e010 	.word	0xe000e010

08004b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f7ff ff47 	bl	8004a10 <__NVIC_SetPriorityGrouping>
}
 8004b82:	bf00      	nop
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b086      	sub	sp, #24
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	4603      	mov	r3, r0
 8004b92:	60b9      	str	r1, [r7, #8]
 8004b94:	607a      	str	r2, [r7, #4]
 8004b96:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b98:	f7ff ff5e 	bl	8004a58 <__NVIC_GetPriorityGrouping>
 8004b9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	68b9      	ldr	r1, [r7, #8]
 8004ba2:	6978      	ldr	r0, [r7, #20]
 8004ba4:	f7ff ff90 	bl	8004ac8 <NVIC_EncodePriority>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004bae:	4611      	mov	r1, r2
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7ff ff5f 	bl	8004a74 <__NVIC_SetPriority>
}
 8004bb6:	bf00      	nop
 8004bb8:	3718      	adds	r7, #24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b082      	sub	sp, #8
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f7ff ffb2 	bl	8004b30 <SysTick_Config>
 8004bcc:	4603      	mov	r3, r0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3708      	adds	r7, #8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b082      	sub	sp, #8
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d101      	bne.n	8004be8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e014      	b.n	8004c12 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	791b      	ldrb	r3, [r3, #4]
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d105      	bne.n	8004bfe <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f7fd f957 	bl	8001eac <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2202      	movs	r2, #2
 8004c02:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3708      	adds	r7, #8
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
	...

08004c1c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b088      	sub	sp, #32
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	795b      	ldrb	r3, [r3, #5]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d101      	bne.n	8004c34 <HAL_DAC_ConfigChannel+0x18>
 8004c30:	2302      	movs	r3, #2
 8004c32:	e11d      	b.n	8004e70 <HAL_DAC_ConfigChannel+0x254>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2201      	movs	r2, #1
 8004c38:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b04      	cmp	r3, #4
 8004c46:	d174      	bne.n	8004d32 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004c48:	f7fe fe1c 	bl	8003884 <HAL_GetTick>
 8004c4c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d134      	bne.n	8004cbe <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004c54:	e011      	b.n	8004c7a <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004c56:	f7fe fe15 	bl	8003884 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d90a      	bls.n	8004c7a <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	f043 0208 	orr.w	r2, r3, #8
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2203      	movs	r2, #3
 8004c74:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e0fa      	b.n	8004e70 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c80:	4b7d      	ldr	r3, [pc, #500]	; (8004e78 <HAL_DAC_ConfigChannel+0x25c>)
 8004c82:	4013      	ands	r3, r2
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1e6      	bne.n	8004c56 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8004c88:	2001      	movs	r0, #1
 8004c8a:	f7fe fe07 	bl	800389c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	6992      	ldr	r2, [r2, #24]
 8004c96:	641a      	str	r2, [r3, #64]	; 0x40
 8004c98:	e01e      	b.n	8004cd8 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004c9a:	f7fe fdf3 	bl	8003884 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d90a      	bls.n	8004cbe <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	f043 0208 	orr.w	r2, r3, #8
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2203      	movs	r2, #3
 8004cb8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e0d8      	b.n	8004e70 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	dbe8      	blt.n	8004c9a <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8004cc8:	2001      	movs	r0, #1
 8004cca:	f7fe fde7 	bl	800389c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	6992      	ldr	r2, [r2, #24]
 8004cd6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f003 0310 	and.w	r3, r3, #16
 8004ce4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cec:	43db      	mvns	r3, r3
 8004cee:	ea02 0103 	and.w	r1, r2, r3
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	69da      	ldr	r2, [r3, #28]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f003 0310 	and.w	r3, r3, #16
 8004cfc:	409a      	lsls	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f003 0310 	and.w	r3, r3, #16
 8004d12:	21ff      	movs	r1, #255	; 0xff
 8004d14:	fa01 f303 	lsl.w	r3, r1, r3
 8004d18:	43db      	mvns	r3, r3
 8004d1a:	ea02 0103 	and.w	r1, r2, r3
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	6a1a      	ldr	r2, [r3, #32]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f003 0310 	and.w	r3, r3, #16
 8004d28:	409a      	lsls	r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d11d      	bne.n	8004d76 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d40:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f003 0310 	and.w	r3, r3, #16
 8004d48:	221f      	movs	r2, #31
 8004d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4e:	43db      	mvns	r3, r3
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	4013      	ands	r3, r2
 8004d54:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f003 0310 	and.w	r3, r3, #16
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	fa02 f303 	lsl.w	r3, r2, r3
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f003 0310 	and.w	r3, r3, #16
 8004d84:	2207      	movs	r2, #7
 8004d86:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8a:	43db      	mvns	r3, r3
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	4013      	ands	r3, r2
 8004d90:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d102      	bne.n	8004da0 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	61fb      	str	r3, [r7, #28]
 8004d9e:	e00f      	b.n	8004dc0 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d102      	bne.n	8004dae <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004da8:	2301      	movs	r3, #1
 8004daa:	61fb      	str	r3, [r7, #28]
 8004dac:	e008      	b.n	8004dc0 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d102      	bne.n	8004dbc <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004db6:	2301      	movs	r3, #1
 8004db8:	61fb      	str	r3, [r7, #28]
 8004dba:	e001      	b.n	8004dc0 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	69fa      	ldr	r2, [r7, #28]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f003 0310 	and.w	r3, r3, #16
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	6819      	ldr	r1, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f003 0310 	and.w	r3, r3, #16
 8004df6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfe:	43da      	mvns	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	400a      	ands	r2, r1
 8004e06:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f003 0310 	and.w	r3, r3, #16
 8004e16:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1e:	43db      	mvns	r3, r3
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	4013      	ands	r3, r2
 8004e24:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f003 0310 	and.w	r3, r3, #16
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6819      	ldr	r1, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f003 0310 	and.w	r3, r3, #16
 8004e52:	22c0      	movs	r2, #192	; 0xc0
 8004e54:	fa02 f303 	lsl.w	r3, r2, r3
 8004e58:	43da      	mvns	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	400a      	ands	r2, r1
 8004e60:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2201      	movs	r2, #1
 8004e66:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3720      	adds	r7, #32
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	20008000 	.word	0x20008000

08004e7c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b098      	sub	sp, #96	; 0x60
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004e84:	4a84      	ldr	r2, [pc, #528]	; (8005098 <HAL_FDCAN_Init+0x21c>)
 8004e86:	f107 030c 	add.w	r3, r7, #12
 8004e8a:	4611      	mov	r1, r2
 8004e8c:	224c      	movs	r2, #76	; 0x4c
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f007 fce6 	bl	800c860 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e1ca      	b.n	8005234 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a7e      	ldr	r2, [pc, #504]	; (800509c <HAL_FDCAN_Init+0x220>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d106      	bne.n	8004eb6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d106      	bne.n	8004ed0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7fd f834 	bl	8001f38 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	699a      	ldr	r2, [r3, #24]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f022 0210 	bic.w	r2, r2, #16
 8004ede:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ee0:	f7fe fcd0 	bl	8003884 <HAL_GetTick>
 8004ee4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004ee6:	e014      	b.n	8004f12 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004ee8:	f7fe fccc 	bl	8003884 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b0a      	cmp	r3, #10
 8004ef4:	d90d      	bls.n	8004f12 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004efc:	f043 0201 	orr.w	r2, r3, #1
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2203      	movs	r2, #3
 8004f0a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e190      	b.n	8005234 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	f003 0308 	and.w	r3, r3, #8
 8004f1c:	2b08      	cmp	r3, #8
 8004f1e:	d0e3      	beq.n	8004ee8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	699a      	ldr	r2, [r3, #24]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 0201 	orr.w	r2, r2, #1
 8004f2e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f30:	f7fe fca8 	bl	8003884 <HAL_GetTick>
 8004f34:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004f36:	e014      	b.n	8004f62 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004f38:	f7fe fca4 	bl	8003884 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b0a      	cmp	r3, #10
 8004f44:	d90d      	bls.n	8004f62 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f4c:	f043 0201 	orr.w	r2, r3, #1
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2203      	movs	r2, #3
 8004f5a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e168      	b.n	8005234 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	f003 0301 	and.w	r3, r3, #1
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d0e3      	beq.n	8004f38 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	699a      	ldr	r2, [r3, #24]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f042 0202 	orr.w	r2, r2, #2
 8004f7e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	7c1b      	ldrb	r3, [r3, #16]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d108      	bne.n	8004f9a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	699a      	ldr	r2, [r3, #24]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f96:	619a      	str	r2, [r3, #24]
 8004f98:	e007      	b.n	8004faa <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	699a      	ldr	r2, [r3, #24]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fa8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	7c5b      	ldrb	r3, [r3, #17]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d108      	bne.n	8004fc4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	699a      	ldr	r2, [r3, #24]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fc0:	619a      	str	r2, [r3, #24]
 8004fc2:	e007      	b.n	8004fd4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	699a      	ldr	r2, [r3, #24]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004fd2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	7c9b      	ldrb	r3, [r3, #18]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d108      	bne.n	8004fee <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	699a      	ldr	r2, [r3, #24]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004fea:	619a      	str	r2, [r3, #24]
 8004fec:	e007      	b.n	8004ffe <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	699a      	ldr	r2, [r3, #24]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ffc:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689a      	ldr	r2, [r3, #8]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	430a      	orrs	r2, r1
 8005012:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	699a      	ldr	r2, [r3, #24]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8005022:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	691a      	ldr	r2, [r3, #16]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 0210 	bic.w	r2, r2, #16
 8005032:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d108      	bne.n	800504e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	699a      	ldr	r2, [r3, #24]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0204 	orr.w	r2, r2, #4
 800504a:	619a      	str	r2, [r3, #24]
 800504c:	e030      	b.n	80050b0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d02c      	beq.n	80050b0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	2b02      	cmp	r3, #2
 800505c:	d020      	beq.n	80050a0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	699a      	ldr	r2, [r3, #24]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800506c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	691a      	ldr	r2, [r3, #16]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f042 0210 	orr.w	r2, r2, #16
 800507c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	2b03      	cmp	r3, #3
 8005084:	d114      	bne.n	80050b0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	699a      	ldr	r2, [r3, #24]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f042 0220 	orr.w	r2, r2, #32
 8005094:	619a      	str	r2, [r3, #24]
 8005096:	e00b      	b.n	80050b0 <HAL_FDCAN_Init+0x234>
 8005098:	0800f7fc 	.word	0x0800f7fc
 800509c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	699a      	ldr	r2, [r3, #24]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f042 0220 	orr.w	r2, r2, #32
 80050ae:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	3b01      	subs	r3, #1
 80050b6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	69db      	ldr	r3, [r3, #28]
 80050bc:	3b01      	subs	r3, #1
 80050be:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80050c0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80050c8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	3b01      	subs	r3, #1
 80050d2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80050d8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80050da:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050e4:	d115      	bne.n	8005112 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ea:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f0:	3b01      	subs	r3, #1
 80050f2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80050f4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fa:	3b01      	subs	r3, #1
 80050fc:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80050fe:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005106:	3b01      	subs	r3, #1
 8005108:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800510e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005110:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00a      	beq.n	8005130 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005138:	4413      	add	r3, r2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d012      	beq.n	8005164 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005146:	f023 0107 	bic.w	r1, r3, #7
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005154:	4413      	add	r3, r2
 8005156:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	430a      	orrs	r2, r1
 8005160:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005168:	2b00      	cmp	r3, #0
 800516a:	d012      	beq.n	8005192 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005174:	f023 0107 	bic.w	r1, r3, #7
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005182:	4413      	add	r3, r2
 8005184:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	430a      	orrs	r2, r1
 800518e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005196:	2b00      	cmp	r3, #0
 8005198:	d013      	beq.n	80051c2 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80051a2:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80051b0:	4413      	add	r3, r2
 80051b2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80051b6:	011a      	lsls	r2, r3, #4
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d013      	beq.n	80051f2 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80051d2:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80051e0:	4413      	add	r3, r2
 80051e2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80051e6:	021a      	lsls	r2, r3, #8
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a11      	ldr	r2, [pc, #68]	; (800523c <HAL_FDCAN_Init+0x3c0>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d107      	bne.n	800520c <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	689a      	ldr	r2, [r3, #8]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f022 0203 	bic.w	r2, r2, #3
 800520a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 f80b 	bl	8005240 <FDCAN_CalcultateRamBlockAddresses>
 800522a:	4603      	mov	r3, r0
 800522c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8005230:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8005234:	4618      	mov	r0, r3
 8005236:	3760      	adds	r7, #96	; 0x60
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	4000a000 	.word	0x4000a000

08005240 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800524c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005256:	4ba7      	ldr	r3, [pc, #668]	; (80054f4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005258:	4013      	ands	r3, r2
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	0091      	lsls	r1, r2, #2
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	6812      	ldr	r2, [r2, #0]
 8005262:	430b      	orrs	r3, r1
 8005264:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005270:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005278:	041a      	lsls	r2, r3, #16
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	4413      	add	r3, r2
 800528c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005296:	4b97      	ldr	r3, [pc, #604]	; (80054f4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005298:	4013      	ands	r3, r2
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	0091      	lsls	r1, r2, #2
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	6812      	ldr	r2, [r2, #0]
 80052a2:	430b      	orrs	r3, r1
 80052a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b0:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b8:	041a      	lsls	r2, r3, #16
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	430a      	orrs	r2, r1
 80052c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c8:	005b      	lsls	r3, r3, #1
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	4413      	add	r3, r2
 80052ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80052d8:	4b86      	ldr	r3, [pc, #536]	; (80054f4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80052da:	4013      	ands	r3, r2
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	0091      	lsls	r1, r2, #2
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	6812      	ldr	r2, [r2, #0]
 80052e4:	430b      	orrs	r3, r1
 80052e6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80052f2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fa:	041a      	lsls	r2, r3, #16
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800530e:	fb02 f303 	mul.w	r3, r2, r3
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	4413      	add	r3, r2
 8005316:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005320:	4b74      	ldr	r3, [pc, #464]	; (80054f4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005322:	4013      	ands	r3, r2
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	0091      	lsls	r1, r2, #2
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6812      	ldr	r2, [r2, #0]
 800532c:	430b      	orrs	r3, r1
 800532e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800533a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005342:	041a      	lsls	r2, r3, #16
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	430a      	orrs	r2, r1
 800534a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005356:	fb02 f303 	mul.w	r3, r2, r3
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	4413      	add	r3, r2
 800535e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005368:	4b62      	ldr	r3, [pc, #392]	; (80054f4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800536a:	4013      	ands	r3, r2
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	0091      	lsls	r1, r2, #2
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	6812      	ldr	r2, [r2, #0]
 8005374:	430b      	orrs	r3, r1
 8005376:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005382:	fb02 f303 	mul.w	r3, r2, r3
 8005386:	68ba      	ldr	r2, [r7, #8]
 8005388:	4413      	add	r3, r2
 800538a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005394:	4b57      	ldr	r3, [pc, #348]	; (80054f4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005396:	4013      	ands	r3, r2
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	0091      	lsls	r1, r2, #2
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	6812      	ldr	r2, [r2, #0]
 80053a0:	430b      	orrs	r3, r1
 80053a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80053ae:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b6:	041a      	lsls	r2, r3, #16
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c6:	005b      	lsls	r3, r3, #1
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	4413      	add	r3, r2
 80053cc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80053d6:	4b47      	ldr	r3, [pc, #284]	; (80054f4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80053d8:	4013      	ands	r3, r2
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	0091      	lsls	r1, r2, #2
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	6812      	ldr	r2, [r2, #0]
 80053e2:	430b      	orrs	r3, r1
 80053e4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80053f0:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053f8:	041a      	lsls	r2, r3, #16
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	430a      	orrs	r2, r1
 8005400:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800540c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005414:	061a      	lsls	r2, r3, #24
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	430a      	orrs	r2, r1
 800541c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005424:	4b34      	ldr	r3, [pc, #208]	; (80054f8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005426:	4413      	add	r3, r2
 8005428:	009a      	lsls	r2, r3, #2
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	441a      	add	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	441a      	add	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005456:	6879      	ldr	r1, [r7, #4]
 8005458:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800545a:	fb01 f303 	mul.w	r3, r1, r3
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	441a      	add	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800546e:	6879      	ldr	r1, [r7, #4]
 8005470:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8005472:	fb01 f303 	mul.w	r3, r1, r3
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	441a      	add	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005486:	6879      	ldr	r1, [r7, #4]
 8005488:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800548a:	fb01 f303 	mul.w	r3, r1, r3
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	441a      	add	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a2:	00db      	lsls	r3, r3, #3
 80054a4:	441a      	add	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b6:	6879      	ldr	r1, [r7, #4]
 80054b8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80054ba:	fb01 f303 	mul.w	r3, r1, r3
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	441a      	add	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054d2:	6879      	ldr	r1, [r7, #4]
 80054d4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80054d6:	fb01 f303 	mul.w	r3, r1, r3
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	441a      	add	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ea:	4a04      	ldr	r2, [pc, #16]	; (80054fc <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d915      	bls.n	800551c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80054f0:	e006      	b.n	8005500 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80054f2:	bf00      	nop
 80054f4:	ffff0003 	.word	0xffff0003
 80054f8:	10002b00 	.word	0x10002b00
 80054fc:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005506:	f043 0220 	orr.w	r2, r3, #32
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2203      	movs	r2, #3
 8005514:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e010      	b.n	800553e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005520:	60fb      	str	r3, [r7, #12]
 8005522:	e005      	b.n	8005530 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	3304      	adds	r3, #4
 800552e:	60fb      	str	r3, [r7, #12]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	429a      	cmp	r2, r3
 800553a:	d3f3      	bcc.n	8005524 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop

0800554c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800554c:	b480      	push	{r7}
 800554e:	b089      	sub	sp, #36	; 0x24
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005556:	2300      	movs	r3, #0
 8005558:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800555a:	4b89      	ldr	r3, [pc, #548]	; (8005780 <HAL_GPIO_Init+0x234>)
 800555c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800555e:	e194      	b.n	800588a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	2101      	movs	r1, #1
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	fa01 f303 	lsl.w	r3, r1, r3
 800556c:	4013      	ands	r3, r2
 800556e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	2b00      	cmp	r3, #0
 8005574:	f000 8186 	beq.w	8005884 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d00b      	beq.n	8005598 <HAL_GPIO_Init+0x4c>
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	2b02      	cmp	r3, #2
 8005586:	d007      	beq.n	8005598 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800558c:	2b11      	cmp	r3, #17
 800558e:	d003      	beq.n	8005598 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	2b12      	cmp	r3, #18
 8005596:	d130      	bne.n	80055fa <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	005b      	lsls	r3, r3, #1
 80055a2:	2203      	movs	r2, #3
 80055a4:	fa02 f303 	lsl.w	r3, r2, r3
 80055a8:	43db      	mvns	r3, r3
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	4013      	ands	r3, r2
 80055ae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	68da      	ldr	r2, [r3, #12]
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	005b      	lsls	r3, r3, #1
 80055b8:	fa02 f303 	lsl.w	r3, r2, r3
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	4313      	orrs	r3, r2
 80055c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80055ce:	2201      	movs	r2, #1
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	fa02 f303 	lsl.w	r3, r2, r3
 80055d6:	43db      	mvns	r3, r3
 80055d8:	69ba      	ldr	r2, [r7, #24]
 80055da:	4013      	ands	r3, r2
 80055dc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	091b      	lsrs	r3, r3, #4
 80055e4:	f003 0201 	and.w	r2, r3, #1
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	fa02 f303 	lsl.w	r3, r2, r3
 80055ee:	69ba      	ldr	r2, [r7, #24]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	69ba      	ldr	r2, [r7, #24]
 80055f8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	005b      	lsls	r3, r3, #1
 8005604:	2203      	movs	r2, #3
 8005606:	fa02 f303 	lsl.w	r3, r2, r3
 800560a:	43db      	mvns	r3, r3
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	4013      	ands	r3, r2
 8005610:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	689a      	ldr	r2, [r3, #8]
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	005b      	lsls	r3, r3, #1
 800561a:	fa02 f303 	lsl.w	r3, r2, r3
 800561e:	69ba      	ldr	r2, [r7, #24]
 8005620:	4313      	orrs	r3, r2
 8005622:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	69ba      	ldr	r2, [r7, #24]
 8005628:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	2b02      	cmp	r3, #2
 8005630:	d003      	beq.n	800563a <HAL_GPIO_Init+0xee>
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	2b12      	cmp	r3, #18
 8005638:	d123      	bne.n	8005682 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	08da      	lsrs	r2, r3, #3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	3208      	adds	r2, #8
 8005642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005646:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	f003 0307 	and.w	r3, r3, #7
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	220f      	movs	r2, #15
 8005652:	fa02 f303 	lsl.w	r3, r2, r3
 8005656:	43db      	mvns	r3, r3
 8005658:	69ba      	ldr	r2, [r7, #24]
 800565a:	4013      	ands	r3, r2
 800565c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	691a      	ldr	r2, [r3, #16]
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	f003 0307 	and.w	r3, r3, #7
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	fa02 f303 	lsl.w	r3, r2, r3
 800566e:	69ba      	ldr	r2, [r7, #24]
 8005670:	4313      	orrs	r3, r2
 8005672:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	08da      	lsrs	r2, r3, #3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	3208      	adds	r2, #8
 800567c:	69b9      	ldr	r1, [r7, #24]
 800567e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	005b      	lsls	r3, r3, #1
 800568c:	2203      	movs	r2, #3
 800568e:	fa02 f303 	lsl.w	r3, r2, r3
 8005692:	43db      	mvns	r3, r3
 8005694:	69ba      	ldr	r2, [r7, #24]
 8005696:	4013      	ands	r3, r2
 8005698:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f003 0203 	and.w	r2, r3, #3
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	005b      	lsls	r3, r3, #1
 80056a6:	fa02 f303 	lsl.w	r3, r2, r3
 80056aa:	69ba      	ldr	r2, [r7, #24]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	69ba      	ldr	r2, [r7, #24]
 80056b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f000 80e0 	beq.w	8005884 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056c4:	4b2f      	ldr	r3, [pc, #188]	; (8005784 <HAL_GPIO_Init+0x238>)
 80056c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056ca:	4a2e      	ldr	r2, [pc, #184]	; (8005784 <HAL_GPIO_Init+0x238>)
 80056cc:	f043 0302 	orr.w	r3, r3, #2
 80056d0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80056d4:	4b2b      	ldr	r3, [pc, #172]	; (8005784 <HAL_GPIO_Init+0x238>)
 80056d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	60fb      	str	r3, [r7, #12]
 80056e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80056e2:	4a29      	ldr	r2, [pc, #164]	; (8005788 <HAL_GPIO_Init+0x23c>)
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	089b      	lsrs	r3, r3, #2
 80056e8:	3302      	adds	r3, #2
 80056ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	f003 0303 	and.w	r3, r3, #3
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	220f      	movs	r2, #15
 80056fa:	fa02 f303 	lsl.w	r3, r2, r3
 80056fe:	43db      	mvns	r3, r3
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	4013      	ands	r3, r2
 8005704:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a20      	ldr	r2, [pc, #128]	; (800578c <HAL_GPIO_Init+0x240>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d052      	beq.n	80057b4 <HAL_GPIO_Init+0x268>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a1f      	ldr	r2, [pc, #124]	; (8005790 <HAL_GPIO_Init+0x244>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d031      	beq.n	800577a <HAL_GPIO_Init+0x22e>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a1e      	ldr	r2, [pc, #120]	; (8005794 <HAL_GPIO_Init+0x248>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d02b      	beq.n	8005776 <HAL_GPIO_Init+0x22a>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a1d      	ldr	r2, [pc, #116]	; (8005798 <HAL_GPIO_Init+0x24c>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d025      	beq.n	8005772 <HAL_GPIO_Init+0x226>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a1c      	ldr	r2, [pc, #112]	; (800579c <HAL_GPIO_Init+0x250>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d01f      	beq.n	800576e <HAL_GPIO_Init+0x222>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a1b      	ldr	r2, [pc, #108]	; (80057a0 <HAL_GPIO_Init+0x254>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d019      	beq.n	800576a <HAL_GPIO_Init+0x21e>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a1a      	ldr	r2, [pc, #104]	; (80057a4 <HAL_GPIO_Init+0x258>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d013      	beq.n	8005766 <HAL_GPIO_Init+0x21a>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a19      	ldr	r2, [pc, #100]	; (80057a8 <HAL_GPIO_Init+0x25c>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d00d      	beq.n	8005762 <HAL_GPIO_Init+0x216>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a18      	ldr	r2, [pc, #96]	; (80057ac <HAL_GPIO_Init+0x260>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d007      	beq.n	800575e <HAL_GPIO_Init+0x212>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a17      	ldr	r2, [pc, #92]	; (80057b0 <HAL_GPIO_Init+0x264>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d101      	bne.n	800575a <HAL_GPIO_Init+0x20e>
 8005756:	2309      	movs	r3, #9
 8005758:	e02d      	b.n	80057b6 <HAL_GPIO_Init+0x26a>
 800575a:	230a      	movs	r3, #10
 800575c:	e02b      	b.n	80057b6 <HAL_GPIO_Init+0x26a>
 800575e:	2308      	movs	r3, #8
 8005760:	e029      	b.n	80057b6 <HAL_GPIO_Init+0x26a>
 8005762:	2307      	movs	r3, #7
 8005764:	e027      	b.n	80057b6 <HAL_GPIO_Init+0x26a>
 8005766:	2306      	movs	r3, #6
 8005768:	e025      	b.n	80057b6 <HAL_GPIO_Init+0x26a>
 800576a:	2305      	movs	r3, #5
 800576c:	e023      	b.n	80057b6 <HAL_GPIO_Init+0x26a>
 800576e:	2304      	movs	r3, #4
 8005770:	e021      	b.n	80057b6 <HAL_GPIO_Init+0x26a>
 8005772:	2303      	movs	r3, #3
 8005774:	e01f      	b.n	80057b6 <HAL_GPIO_Init+0x26a>
 8005776:	2302      	movs	r3, #2
 8005778:	e01d      	b.n	80057b6 <HAL_GPIO_Init+0x26a>
 800577a:	2301      	movs	r3, #1
 800577c:	e01b      	b.n	80057b6 <HAL_GPIO_Init+0x26a>
 800577e:	bf00      	nop
 8005780:	58000080 	.word	0x58000080
 8005784:	58024400 	.word	0x58024400
 8005788:	58000400 	.word	0x58000400
 800578c:	58020000 	.word	0x58020000
 8005790:	58020400 	.word	0x58020400
 8005794:	58020800 	.word	0x58020800
 8005798:	58020c00 	.word	0x58020c00
 800579c:	58021000 	.word	0x58021000
 80057a0:	58021400 	.word	0x58021400
 80057a4:	58021800 	.word	0x58021800
 80057a8:	58021c00 	.word	0x58021c00
 80057ac:	58022000 	.word	0x58022000
 80057b0:	58022400 	.word	0x58022400
 80057b4:	2300      	movs	r3, #0
 80057b6:	69fa      	ldr	r2, [r7, #28]
 80057b8:	f002 0203 	and.w	r2, r2, #3
 80057bc:	0092      	lsls	r2, r2, #2
 80057be:	4093      	lsls	r3, r2
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80057c6:	4938      	ldr	r1, [pc, #224]	; (80058a8 <HAL_GPIO_Init+0x35c>)
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	089b      	lsrs	r3, r3, #2
 80057cc:	3302      	adds	r3, #2
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	43db      	mvns	r3, r3
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	4013      	ands	r3, r2
 80057e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d003      	beq.n	80057f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80057f0:	69ba      	ldr	r2, [r7, #24]
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	69ba      	ldr	r2, [r7, #24]
 80057fc:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	43db      	mvns	r3, r3
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	4013      	ands	r3, r2
 800580c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d003      	beq.n	8005822 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800581a:	69ba      	ldr	r2, [r7, #24]
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	4313      	orrs	r3, r2
 8005820:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	43db      	mvns	r3, r3
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	4013      	ands	r3, r2
 8005838:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005846:	69ba      	ldr	r2, [r7, #24]
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	4313      	orrs	r3, r2
 800584c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800584e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	43db      	mvns	r3, r3
 8005862:	69ba      	ldr	r2, [r7, #24]
 8005864:	4013      	ands	r3, r2
 8005866:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d003      	beq.n	800587c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	4313      	orrs	r3, r2
 800587a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800587c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	3301      	adds	r3, #1
 8005888:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	fa22 f303 	lsr.w	r3, r2, r3
 8005894:	2b00      	cmp	r3, #0
 8005896:	f47f ae63 	bne.w	8005560 <HAL_GPIO_Init+0x14>
  }
}
 800589a:	bf00      	nop
 800589c:	bf00      	nop
 800589e:	3724      	adds	r7, #36	; 0x24
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr
 80058a8:	58000400 	.word	0x58000400

080058ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	460b      	mov	r3, r1
 80058b6:	807b      	strh	r3, [r7, #2]
 80058b8:	4613      	mov	r3, r2
 80058ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80058bc:	787b      	ldrb	r3, [r7, #1]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d003      	beq.n	80058ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058c2:	887a      	ldrh	r2, [r7, #2]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80058c8:	e003      	b.n	80058d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80058ca:	887b      	ldrh	r3, [r7, #2]
 80058cc:	041a      	lsls	r2, r3, #16
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	619a      	str	r2, [r3, #24]
}
 80058d2:	bf00      	nop
 80058d4:	370c      	adds	r7, #12
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
	...

080058e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d101      	bne.n	80058f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e07f      	b.n	80059f2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d106      	bne.n	800590c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7fc fbe0 	bl	80020cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2224      	movs	r2, #36	; 0x24
 8005910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 0201 	bic.w	r2, r2, #1
 8005922:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005930:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	689a      	ldr	r2, [r3, #8]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005940:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d107      	bne.n	800595a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	689a      	ldr	r2, [r3, #8]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005956:	609a      	str	r2, [r3, #8]
 8005958:	e006      	b.n	8005968 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	689a      	ldr	r2, [r3, #8]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005966:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	2b02      	cmp	r3, #2
 800596e:	d104      	bne.n	800597a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005978:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	6859      	ldr	r1, [r3, #4]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	4b1d      	ldr	r3, [pc, #116]	; (80059fc <HAL_I2C_Init+0x11c>)
 8005986:	430b      	orrs	r3, r1
 8005988:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68da      	ldr	r2, [r3, #12]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005998:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	691a      	ldr	r2, [r3, #16]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	ea42 0103 	orr.w	r1, r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	021a      	lsls	r2, r3, #8
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	69d9      	ldr	r1, [r3, #28]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a1a      	ldr	r2, [r3, #32]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	430a      	orrs	r2, r1
 80059c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f042 0201 	orr.w	r2, r2, #1
 80059d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2220      	movs	r2, #32
 80059de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	02008000 	.word	0x02008000

08005a00 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b088      	sub	sp, #32
 8005a04:	af02      	add	r7, sp, #8
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	607a      	str	r2, [r7, #4]
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	817b      	strh	r3, [r7, #10]
 8005a10:	4613      	mov	r3, r2
 8005a12:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b20      	cmp	r3, #32
 8005a1e:	f040 80da 	bne.w	8005bd6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d101      	bne.n	8005a30 <HAL_I2C_Master_Transmit+0x30>
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	e0d3      	b.n	8005bd8 <HAL_I2C_Master_Transmit+0x1d8>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a38:	f7fd ff24 	bl	8003884 <HAL_GetTick>
 8005a3c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	9300      	str	r3, [sp, #0]
 8005a42:	2319      	movs	r3, #25
 8005a44:	2201      	movs	r2, #1
 8005a46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f000 fa00 	bl	8005e50 <I2C_WaitOnFlagUntilTimeout>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d001      	beq.n	8005a5a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e0be      	b.n	8005bd8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2221      	movs	r2, #33	; 0x21
 8005a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2210      	movs	r2, #16
 8005a66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	893a      	ldrh	r2, [r7, #8]
 8005a7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	2bff      	cmp	r3, #255	; 0xff
 8005a8a:	d90e      	bls.n	8005aaa <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	22ff      	movs	r2, #255	; 0xff
 8005a90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a96:	b2da      	uxtb	r2, r3
 8005a98:	8979      	ldrh	r1, [r7, #10]
 8005a9a:	4b51      	ldr	r3, [pc, #324]	; (8005be0 <HAL_I2C_Master_Transmit+0x1e0>)
 8005a9c:	9300      	str	r3, [sp, #0]
 8005a9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f000 fb62 	bl	800616c <I2C_TransferConfig>
 8005aa8:	e06c      	b.n	8005b84 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ab8:	b2da      	uxtb	r2, r3
 8005aba:	8979      	ldrh	r1, [r7, #10]
 8005abc:	4b48      	ldr	r3, [pc, #288]	; (8005be0 <HAL_I2C_Master_Transmit+0x1e0>)
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f000 fb51 	bl	800616c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8005aca:	e05b      	b.n	8005b84 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	6a39      	ldr	r1, [r7, #32]
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f000 f9fd 	bl	8005ed0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d001      	beq.n	8005ae0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e07b      	b.n	8005bd8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae4:	781a      	ldrb	r2, [r3, #0]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af0:	1c5a      	adds	r2, r3, #1
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	3b01      	subs	r3, #1
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d034      	beq.n	8005b84 <HAL_I2C_Master_Transmit+0x184>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d130      	bne.n	8005b84 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	2180      	movs	r1, #128	; 0x80
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 f98f 	bl	8005e50 <I2C_WaitOnFlagUntilTimeout>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e04d      	b.n	8005bd8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	2bff      	cmp	r3, #255	; 0xff
 8005b44:	d90e      	bls.n	8005b64 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	22ff      	movs	r2, #255	; 0xff
 8005b4a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b50:	b2da      	uxtb	r2, r3
 8005b52:	8979      	ldrh	r1, [r7, #10]
 8005b54:	2300      	movs	r3, #0
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f000 fb05 	bl	800616c <I2C_TransferConfig>
 8005b62:	e00f      	b.n	8005b84 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b72:	b2da      	uxtb	r2, r3
 8005b74:	8979      	ldrh	r1, [r7, #10]
 8005b76:	2300      	movs	r3, #0
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f000 faf4 	bl	800616c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d19e      	bne.n	8005acc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	6a39      	ldr	r1, [r7, #32]
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f000 f9dc 	bl	8005f50 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d001      	beq.n	8005ba2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e01a      	b.n	8005bd8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6859      	ldr	r1, [r3, #4]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	4b0b      	ldr	r3, [pc, #44]	; (8005be4 <HAL_I2C_Master_Transmit+0x1e4>)
 8005bb6:	400b      	ands	r3, r1
 8005bb8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	e000      	b.n	8005bd8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005bd6:	2302      	movs	r3, #2
  }
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3718      	adds	r7, #24
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	80002000 	.word	0x80002000
 8005be4:	fe00e800 	.word	0xfe00e800

08005be8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b088      	sub	sp, #32
 8005bec:	af02      	add	r7, sp, #8
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	607a      	str	r2, [r7, #4]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	817b      	strh	r3, [r7, #10]
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	2b20      	cmp	r3, #32
 8005c06:	f040 80db 	bne.w	8005dc0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d101      	bne.n	8005c18 <HAL_I2C_Master_Receive+0x30>
 8005c14:	2302      	movs	r3, #2
 8005c16:	e0d4      	b.n	8005dc2 <HAL_I2C_Master_Receive+0x1da>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005c20:	f7fd fe30 	bl	8003884 <HAL_GetTick>
 8005c24:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	9300      	str	r3, [sp, #0]
 8005c2a:	2319      	movs	r3, #25
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f000 f90c 	bl	8005e50 <I2C_WaitOnFlagUntilTimeout>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e0bf      	b.n	8005dc2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2222      	movs	r2, #34	; 0x22
 8005c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2210      	movs	r2, #16
 8005c4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	893a      	ldrh	r2, [r7, #8]
 8005c62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	2bff      	cmp	r3, #255	; 0xff
 8005c72:	d90e      	bls.n	8005c92 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	22ff      	movs	r2, #255	; 0xff
 8005c78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c7e:	b2da      	uxtb	r2, r3
 8005c80:	8979      	ldrh	r1, [r7, #10]
 8005c82:	4b52      	ldr	r3, [pc, #328]	; (8005dcc <HAL_I2C_Master_Receive+0x1e4>)
 8005c84:	9300      	str	r3, [sp, #0]
 8005c86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f000 fa6e 	bl	800616c <I2C_TransferConfig>
 8005c90:	e06d      	b.n	8005d6e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ca0:	b2da      	uxtb	r2, r3
 8005ca2:	8979      	ldrh	r1, [r7, #10]
 8005ca4:	4b49      	ldr	r3, [pc, #292]	; (8005dcc <HAL_I2C_Master_Receive+0x1e4>)
 8005ca6:	9300      	str	r3, [sp, #0]
 8005ca8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f000 fa5d 	bl	800616c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8005cb2:	e05c      	b.n	8005d6e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	6a39      	ldr	r1, [r7, #32]
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f000 f985 	bl	8005fc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d001      	beq.n	8005cc8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e07c      	b.n	8005dc2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd2:	b2d2      	uxtb	r2, r2
 8005cd4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cda:	1c5a      	adds	r2, r3, #1
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d034      	beq.n	8005d6e <HAL_I2C_Master_Receive+0x186>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d130      	bne.n	8005d6e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	9300      	str	r3, [sp, #0]
 8005d10:	6a3b      	ldr	r3, [r7, #32]
 8005d12:	2200      	movs	r2, #0
 8005d14:	2180      	movs	r1, #128	; 0x80
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	f000 f89a 	bl	8005e50 <I2C_WaitOnFlagUntilTimeout>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d001      	beq.n	8005d26 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e04d      	b.n	8005dc2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	2bff      	cmp	r3, #255	; 0xff
 8005d2e:	d90e      	bls.n	8005d4e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	22ff      	movs	r2, #255	; 0xff
 8005d34:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	8979      	ldrh	r1, [r7, #10]
 8005d3e:	2300      	movs	r3, #0
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 fa10 	bl	800616c <I2C_TransferConfig>
 8005d4c:	e00f      	b.n	8005d6e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d5c:	b2da      	uxtb	r2, r3
 8005d5e:	8979      	ldrh	r1, [r7, #10]
 8005d60:	2300      	movs	r3, #0
 8005d62:	9300      	str	r3, [sp, #0]
 8005d64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f000 f9ff 	bl	800616c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d19d      	bne.n	8005cb4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	6a39      	ldr	r1, [r7, #32]
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f000 f8e7 	bl	8005f50 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d001      	beq.n	8005d8c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e01a      	b.n	8005dc2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2220      	movs	r2, #32
 8005d92:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6859      	ldr	r1, [r3, #4]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	4b0c      	ldr	r3, [pc, #48]	; (8005dd0 <HAL_I2C_Master_Receive+0x1e8>)
 8005da0:	400b      	ands	r3, r1
 8005da2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2220      	movs	r2, #32
 8005da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	e000      	b.n	8005dc2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005dc0:	2302      	movs	r3, #2
  }
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3718      	adds	r7, #24
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	80002400 	.word	0x80002400
 8005dd0:	fe00e800 	.word	0xfe00e800

08005dd4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005de2:	b2db      	uxtb	r3, r3
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	f003 0302 	and.w	r3, r3, #2
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d103      	bne.n	8005e26 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2200      	movs	r2, #0
 8005e24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d007      	beq.n	8005e44 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	699a      	ldr	r2, [r3, #24]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f042 0201 	orr.w	r2, r2, #1
 8005e42:	619a      	str	r2, [r3, #24]
  }
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	603b      	str	r3, [r7, #0]
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e60:	e022      	b.n	8005ea8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e68:	d01e      	beq.n	8005ea8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e6a:	f7fd fd0b 	bl	8003884 <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	683a      	ldr	r2, [r7, #0]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d302      	bcc.n	8005e80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d113      	bne.n	8005ea8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e84:	f043 0220 	orr.w	r2, r3, #32
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2220      	movs	r2, #32
 8005e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e00f      	b.n	8005ec8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	699a      	ldr	r2, [r3, #24]
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	bf0c      	ite	eq
 8005eb8:	2301      	moveq	r3, #1
 8005eba:	2300      	movne	r3, #0
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	79fb      	ldrb	r3, [r7, #7]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d0cd      	beq.n	8005e62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3710      	adds	r7, #16
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005edc:	e02c      	b.n	8005f38 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	68b9      	ldr	r1, [r7, #8]
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f000 f8dc 	bl	80060a0 <I2C_IsAcknowledgeFailed>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e02a      	b.n	8005f48 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef8:	d01e      	beq.n	8005f38 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005efa:	f7fd fcc3 	bl	8003884 <HAL_GetTick>
 8005efe:	4602      	mov	r2, r0
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d302      	bcc.n	8005f10 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d113      	bne.n	8005f38 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f14:	f043 0220 	orr.w	r2, r3, #32
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2220      	movs	r2, #32
 8005f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e007      	b.n	8005f48 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d1cb      	bne.n	8005ede <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f5c:	e028      	b.n	8005fb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	68b9      	ldr	r1, [r7, #8]
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f000 f89c 	bl	80060a0 <I2C_IsAcknowledgeFailed>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d001      	beq.n	8005f72 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e026      	b.n	8005fc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f72:	f7fd fc87 	bl	8003884 <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	68ba      	ldr	r2, [r7, #8]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d302      	bcc.n	8005f88 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d113      	bne.n	8005fb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f8c:	f043 0220 	orr.w	r2, r3, #32
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2220      	movs	r2, #32
 8005f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e007      	b.n	8005fc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	f003 0320 	and.w	r3, r3, #32
 8005fba:	2b20      	cmp	r3, #32
 8005fbc:	d1cf      	bne.n	8005f5e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005fd4:	e055      	b.n	8006082 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	68b9      	ldr	r1, [r7, #8]
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f000 f860 	bl	80060a0 <I2C_IsAcknowledgeFailed>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d001      	beq.n	8005fea <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e053      	b.n	8006092 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	f003 0320 	and.w	r3, r3, #32
 8005ff4:	2b20      	cmp	r3, #32
 8005ff6:	d129      	bne.n	800604c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	f003 0304 	and.w	r3, r3, #4
 8006002:	2b04      	cmp	r3, #4
 8006004:	d105      	bne.n	8006012 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800600a:	2b00      	cmp	r3, #0
 800600c:	d001      	beq.n	8006012 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800600e:	2300      	movs	r3, #0
 8006010:	e03f      	b.n	8006092 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2220      	movs	r2, #32
 8006018:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	6859      	ldr	r1, [r3, #4]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	4b1d      	ldr	r3, [pc, #116]	; (800609c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8006026:	400b      	ands	r3, r1
 8006028:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2220      	movs	r2, #32
 8006034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e022      	b.n	8006092 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800604c:	f7fd fc1a 	bl	8003884 <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	68ba      	ldr	r2, [r7, #8]
 8006058:	429a      	cmp	r2, r3
 800605a:	d302      	bcc.n	8006062 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d10f      	bne.n	8006082 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006066:	f043 0220 	orr.w	r2, r3, #32
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2220      	movs	r2, #32
 8006072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e007      	b.n	8006092 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	f003 0304 	and.w	r3, r3, #4
 800608c:	2b04      	cmp	r3, #4
 800608e:	d1a2      	bne.n	8005fd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	fe00e800 	.word	0xfe00e800

080060a0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	f003 0310 	and.w	r3, r3, #16
 80060b6:	2b10      	cmp	r3, #16
 80060b8:	d151      	bne.n	800615e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060ba:	e022      	b.n	8006102 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c2:	d01e      	beq.n	8006102 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060c4:	f7fd fbde 	bl	8003884 <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	68ba      	ldr	r2, [r7, #8]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d302      	bcc.n	80060da <I2C_IsAcknowledgeFailed+0x3a>
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d113      	bne.n	8006102 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060de:	f043 0220 	orr.w	r2, r3, #32
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2220      	movs	r2, #32
 80060ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e02e      	b.n	8006160 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	f003 0320 	and.w	r3, r3, #32
 800610c:	2b20      	cmp	r3, #32
 800610e:	d1d5      	bne.n	80060bc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2210      	movs	r2, #16
 8006116:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2220      	movs	r2, #32
 800611e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f7ff fe71 	bl	8005e08 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	6859      	ldr	r1, [r3, #4]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	4b0d      	ldr	r3, [pc, #52]	; (8006168 <I2C_IsAcknowledgeFailed+0xc8>)
 8006132:	400b      	ands	r3, r1
 8006134:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800613a:	f043 0204 	orr.w	r2, r3, #4
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2220      	movs	r2, #32
 8006146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e000      	b.n	8006160 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3710      	adds	r7, #16
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	fe00e800 	.word	0xfe00e800

0800616c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800616c:	b480      	push	{r7}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	607b      	str	r3, [r7, #4]
 8006176:	460b      	mov	r3, r1
 8006178:	817b      	strh	r3, [r7, #10]
 800617a:	4613      	mov	r3, r2
 800617c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	685a      	ldr	r2, [r3, #4]
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	0d5b      	lsrs	r3, r3, #21
 8006188:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800618c:	4b0d      	ldr	r3, [pc, #52]	; (80061c4 <I2C_TransferConfig+0x58>)
 800618e:	430b      	orrs	r3, r1
 8006190:	43db      	mvns	r3, r3
 8006192:	ea02 0103 	and.w	r1, r2, r3
 8006196:	897b      	ldrh	r3, [r7, #10]
 8006198:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800619c:	7a7b      	ldrb	r3, [r7, #9]
 800619e:	041b      	lsls	r3, r3, #16
 80061a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80061a4:	431a      	orrs	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	431a      	orrs	r2, r3
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	431a      	orrs	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	430a      	orrs	r2, r1
 80061b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80061b6:	bf00      	nop
 80061b8:	3714      	adds	r7, #20
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	03ff63ff 	.word	0x03ff63ff

080061c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b20      	cmp	r3, #32
 80061dc:	d138      	bne.n	8006250 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d101      	bne.n	80061ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80061e8:	2302      	movs	r3, #2
 80061ea:	e032      	b.n	8006252 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2224      	movs	r2, #36	; 0x24
 80061f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f022 0201 	bic.w	r2, r2, #1
 800620a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800621a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6819      	ldr	r1, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	683a      	ldr	r2, [r7, #0]
 8006228:	430a      	orrs	r2, r1
 800622a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f042 0201 	orr.w	r2, r2, #1
 800623a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2220      	movs	r2, #32
 8006240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800624c:	2300      	movs	r3, #0
 800624e:	e000      	b.n	8006252 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006250:	2302      	movs	r3, #2
  }
}
 8006252:	4618      	mov	r0, r3
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800625e:	b480      	push	{r7}
 8006260:	b085      	sub	sp, #20
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
 8006266:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b20      	cmp	r3, #32
 8006272:	d139      	bne.n	80062e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800627a:	2b01      	cmp	r3, #1
 800627c:	d101      	bne.n	8006282 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800627e:	2302      	movs	r3, #2
 8006280:	e033      	b.n	80062ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2224      	movs	r2, #36	; 0x24
 800628e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f022 0201 	bic.w	r2, r2, #1
 80062a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80062b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	021b      	lsls	r3, r3, #8
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f042 0201 	orr.w	r2, r2, #1
 80062d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2220      	movs	r2, #32
 80062d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80062e4:	2300      	movs	r3, #0
 80062e6:	e000      	b.n	80062ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80062e8:	2302      	movs	r3, #2
  }
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3714      	adds	r7, #20
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
	...

080062f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006300:	4b19      	ldr	r3, [pc, #100]	; (8006368 <HAL_PWREx_ConfigSupply+0x70>)
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	f003 0304 	and.w	r3, r3, #4
 8006308:	2b04      	cmp	r3, #4
 800630a:	d00a      	beq.n	8006322 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800630c:	4b16      	ldr	r3, [pc, #88]	; (8006368 <HAL_PWREx_ConfigSupply+0x70>)
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	f003 0307 	and.w	r3, r3, #7
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	429a      	cmp	r2, r3
 8006318:	d001      	beq.n	800631e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e01f      	b.n	800635e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800631e:	2300      	movs	r3, #0
 8006320:	e01d      	b.n	800635e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006322:	4b11      	ldr	r3, [pc, #68]	; (8006368 <HAL_PWREx_ConfigSupply+0x70>)
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	f023 0207 	bic.w	r2, r3, #7
 800632a:	490f      	ldr	r1, [pc, #60]	; (8006368 <HAL_PWREx_ConfigSupply+0x70>)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4313      	orrs	r3, r2
 8006330:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006332:	f7fd faa7 	bl	8003884 <HAL_GetTick>
 8006336:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006338:	e009      	b.n	800634e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800633a:	f7fd faa3 	bl	8003884 <HAL_GetTick>
 800633e:	4602      	mov	r2, r0
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006348:	d901      	bls.n	800634e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e007      	b.n	800635e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800634e:	4b06      	ldr	r3, [pc, #24]	; (8006368 <HAL_PWREx_ConfigSupply+0x70>)
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800635a:	d1ee      	bne.n	800633a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	58024800 	.word	0x58024800

0800636c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b086      	sub	sp, #24
 8006370:	af02      	add	r7, sp, #8
 8006372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006374:	f7fd fa86 	bl	8003884 <HAL_GetTick>
 8006378:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e05f      	b.n	8006444 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800638a:	b2db      	uxtb	r3, r3
 800638c:	2b00      	cmp	r3, #0
 800638e:	d107      	bne.n	80063a0 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f7fc fa05 	bl	80027a0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006396:	f241 3188 	movw	r1, #5000	; 0x1388
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 f85a 	bl	8006454 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	3b01      	subs	r3, #1
 80063b0:	021a      	lsls	r2, r3, #8
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	430a      	orrs	r2, r1
 80063b8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063be:	9300      	str	r3, [sp, #0]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	2120      	movs	r1, #32
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f852 	bl	8006470 <QSPI_WaitFlagStateUntilTimeout>
 80063cc:	4603      	mov	r3, r0
 80063ce:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80063d0:	7afb      	ldrb	r3, [r7, #11]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d135      	bne.n	8006442 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	4b1b      	ldr	r3, [pc, #108]	; (800644c <HAL_QSPI_Init+0xe0>)
 80063de:	4013      	ands	r3, r2
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	6852      	ldr	r2, [r2, #4]
 80063e4:	0611      	lsls	r1, r2, #24
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	68d2      	ldr	r2, [r2, #12]
 80063ea:	4311      	orrs	r1, r2
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	69d2      	ldr	r2, [r2, #28]
 80063f0:	4311      	orrs	r1, r2
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	6a12      	ldr	r2, [r2, #32]
 80063f6:	4311      	orrs	r1, r2
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	6812      	ldr	r2, [r2, #0]
 80063fc:	430b      	orrs	r3, r1
 80063fe:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	685a      	ldr	r2, [r3, #4]
 8006406:	4b12      	ldr	r3, [pc, #72]	; (8006450 <HAL_QSPI_Init+0xe4>)
 8006408:	4013      	ands	r3, r2
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	6912      	ldr	r2, [r2, #16]
 800640e:	0411      	lsls	r1, r2, #16
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	6952      	ldr	r2, [r2, #20]
 8006414:	4311      	orrs	r1, r2
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	6992      	ldr	r2, [r2, #24]
 800641a:	4311      	orrs	r1, r2
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	6812      	ldr	r2, [r2, #0]
 8006420:	430b      	orrs	r3, r1
 8006422:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f042 0201 	orr.w	r2, r2, #1
 8006432:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2201      	movs	r2, #1
 800643e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8006442:	7afb      	ldrb	r3, [r7, #11]
}
 8006444:	4618      	mov	r0, r3
 8006446:	3710      	adds	r7, #16
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}
 800644c:	00ffff2f 	.word	0x00ffff2f
 8006450:	ffe0f8fe 	.word	0xffe0f8fe

08006454 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	683a      	ldr	r2, [r7, #0]
 8006462:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	603b      	str	r3, [r7, #0]
 800647c:	4613      	mov	r3, r2
 800647e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006480:	e01a      	b.n	80064b8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006488:	d016      	beq.n	80064b8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800648a:	f7fd f9fb 	bl	8003884 <HAL_GetTick>
 800648e:	4602      	mov	r2, r0
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	69ba      	ldr	r2, [r7, #24]
 8006496:	429a      	cmp	r2, r3
 8006498:	d302      	bcc.n	80064a0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d10b      	bne.n	80064b8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2204      	movs	r2, #4
 80064a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ac:	f043 0201 	orr.w	r2, r3, #1
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e00e      	b.n	80064d6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	689a      	ldr	r2, [r3, #8]
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	4013      	ands	r3, r2
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	bf14      	ite	ne
 80064c6:	2301      	movne	r3, #1
 80064c8:	2300      	moveq	r3, #0
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	461a      	mov	r2, r3
 80064ce:	79fb      	ldrb	r3, [r7, #7]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d1d6      	bne.n	8006482 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
	...

080064e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b08c      	sub	sp, #48	; 0x30
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d101      	bne.n	80064f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e3ff      	b.n	8006cf2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f000 8087 	beq.w	800660e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006500:	4b99      	ldr	r3, [pc, #612]	; (8006768 <HAL_RCC_OscConfig+0x288>)
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006508:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800650a:	4b97      	ldr	r3, [pc, #604]	; (8006768 <HAL_RCC_OscConfig+0x288>)
 800650c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006512:	2b10      	cmp	r3, #16
 8006514:	d007      	beq.n	8006526 <HAL_RCC_OscConfig+0x46>
 8006516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006518:	2b18      	cmp	r3, #24
 800651a:	d110      	bne.n	800653e <HAL_RCC_OscConfig+0x5e>
 800651c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651e:	f003 0303 	and.w	r3, r3, #3
 8006522:	2b02      	cmp	r3, #2
 8006524:	d10b      	bne.n	800653e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006526:	4b90      	ldr	r3, [pc, #576]	; (8006768 <HAL_RCC_OscConfig+0x288>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800652e:	2b00      	cmp	r3, #0
 8006530:	d06c      	beq.n	800660c <HAL_RCC_OscConfig+0x12c>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d168      	bne.n	800660c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e3d9      	b.n	8006cf2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006546:	d106      	bne.n	8006556 <HAL_RCC_OscConfig+0x76>
 8006548:	4b87      	ldr	r3, [pc, #540]	; (8006768 <HAL_RCC_OscConfig+0x288>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a86      	ldr	r2, [pc, #536]	; (8006768 <HAL_RCC_OscConfig+0x288>)
 800654e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006552:	6013      	str	r3, [r2, #0]
 8006554:	e02e      	b.n	80065b4 <HAL_RCC_OscConfig+0xd4>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10c      	bne.n	8006578 <HAL_RCC_OscConfig+0x98>
 800655e:	4b82      	ldr	r3, [pc, #520]	; (8006768 <HAL_RCC_OscConfig+0x288>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a81      	ldr	r2, [pc, #516]	; (8006768 <HAL_RCC_OscConfig+0x288>)
 8006564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006568:	6013      	str	r3, [r2, #0]
 800656a:	4b7f      	ldr	r3, [pc, #508]	; (8006768 <HAL_RCC_OscConfig+0x288>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a7e      	ldr	r2, [pc, #504]	; (8006768 <HAL_RCC_OscConfig+0x288>)
 8006570:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006574:	6013      	str	r3, [r2, #0]
 8006576:	e01d      	b.n	80065b4 <HAL_RCC_OscConfig+0xd4>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006580:	d10c      	bne.n	800659c <HAL_RCC_OscConfig+0xbc>
 8006582:	4b79      	ldr	r3, [pc, #484]	; (8006768 <HAL_RCC_OscConfig+0x288>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a78      	ldr	r2, [pc, #480]	; (8006768 <HAL_RCC_OscConfig+0x288>)
 8006588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800658c:	6013      	str	r3, [r2, #0]
 800658e:	4b76      	ldr	r3, [pc, #472]	; (8006768 <HAL_RCC_OscConfig+0x288>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a75      	ldr	r2, [pc, #468]	; (8006768 <HAL_RCC_OscConfig+0x288>)
 8006594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006598:	6013      	str	r3, [r2, #0]
 800659a:	e00b      	b.n	80065b4 <HAL_RCC_OscConfig+0xd4>
 800659c:	4b72      	ldr	r3, [pc, #456]	; (8006768 <HAL_RCC_OscConfig+0x288>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a71      	ldr	r2, [pc, #452]	; (8006768 <HAL_RCC_OscConfig+0x288>)
 80065a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065a6:	6013      	str	r3, [r2, #0]
 80065a8:	4b6f      	ldr	r3, [pc, #444]	; (8006768 <HAL_RCC_OscConfig+0x288>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a6e      	ldr	r2, [pc, #440]	; (8006768 <HAL_RCC_OscConfig+0x288>)
 80065ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d013      	beq.n	80065e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065bc:	f7fd f962 	bl	8003884 <HAL_GetTick>
 80065c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80065c2:	e008      	b.n	80065d6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065c4:	f7fd f95e 	bl	8003884 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	2b64      	cmp	r3, #100	; 0x64
 80065d0:	d901      	bls.n	80065d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e38d      	b.n	8006cf2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80065d6:	4b64      	ldr	r3, [pc, #400]	; (8006768 <HAL_RCC_OscConfig+0x288>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d0f0      	beq.n	80065c4 <HAL_RCC_OscConfig+0xe4>
 80065e2:	e014      	b.n	800660e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065e4:	f7fd f94e 	bl	8003884 <HAL_GetTick>
 80065e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80065ea:	e008      	b.n	80065fe <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065ec:	f7fd f94a 	bl	8003884 <HAL_GetTick>
 80065f0:	4602      	mov	r2, r0
 80065f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	2b64      	cmp	r3, #100	; 0x64
 80065f8:	d901      	bls.n	80065fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e379      	b.n	8006cf2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80065fe:	4b5a      	ldr	r3, [pc, #360]	; (8006768 <HAL_RCC_OscConfig+0x288>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1f0      	bne.n	80065ec <HAL_RCC_OscConfig+0x10c>
 800660a:	e000      	b.n	800660e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800660c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0302 	and.w	r3, r3, #2
 8006616:	2b00      	cmp	r3, #0
 8006618:	f000 80ae 	beq.w	8006778 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800661c:	4b52      	ldr	r3, [pc, #328]	; (8006768 <HAL_RCC_OscConfig+0x288>)
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006624:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006626:	4b50      	ldr	r3, [pc, #320]	; (8006768 <HAL_RCC_OscConfig+0x288>)
 8006628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800662c:	6a3b      	ldr	r3, [r7, #32]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d007      	beq.n	8006642 <HAL_RCC_OscConfig+0x162>
 8006632:	6a3b      	ldr	r3, [r7, #32]
 8006634:	2b18      	cmp	r3, #24
 8006636:	d13a      	bne.n	80066ae <HAL_RCC_OscConfig+0x1ce>
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	f003 0303 	and.w	r3, r3, #3
 800663e:	2b00      	cmp	r3, #0
 8006640:	d135      	bne.n	80066ae <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006642:	4b49      	ldr	r3, [pc, #292]	; (8006768 <HAL_RCC_OscConfig+0x288>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0304 	and.w	r3, r3, #4
 800664a:	2b00      	cmp	r3, #0
 800664c:	d005      	beq.n	800665a <HAL_RCC_OscConfig+0x17a>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d101      	bne.n	800665a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e34b      	b.n	8006cf2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800665a:	f7fd f943 	bl	80038e4 <HAL_GetREVID>
 800665e:	4603      	mov	r3, r0
 8006660:	f241 0203 	movw	r2, #4099	; 0x1003
 8006664:	4293      	cmp	r3, r2
 8006666:	d817      	bhi.n	8006698 <HAL_RCC_OscConfig+0x1b8>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	2b40      	cmp	r3, #64	; 0x40
 800666e:	d108      	bne.n	8006682 <HAL_RCC_OscConfig+0x1a2>
 8006670:	4b3d      	ldr	r3, [pc, #244]	; (8006768 <HAL_RCC_OscConfig+0x288>)
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006678:	4a3b      	ldr	r2, [pc, #236]	; (8006768 <HAL_RCC_OscConfig+0x288>)
 800667a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800667e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006680:	e07a      	b.n	8006778 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006682:	4b39      	ldr	r3, [pc, #228]	; (8006768 <HAL_RCC_OscConfig+0x288>)
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	031b      	lsls	r3, r3, #12
 8006690:	4935      	ldr	r1, [pc, #212]	; (8006768 <HAL_RCC_OscConfig+0x288>)
 8006692:	4313      	orrs	r3, r2
 8006694:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006696:	e06f      	b.n	8006778 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006698:	4b33      	ldr	r3, [pc, #204]	; (8006768 <HAL_RCC_OscConfig+0x288>)
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	061b      	lsls	r3, r3, #24
 80066a6:	4930      	ldr	r1, [pc, #192]	; (8006768 <HAL_RCC_OscConfig+0x288>)
 80066a8:	4313      	orrs	r3, r2
 80066aa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066ac:	e064      	b.n	8006778 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d045      	beq.n	8006742 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80066b6:	4b2c      	ldr	r3, [pc, #176]	; (8006768 <HAL_RCC_OscConfig+0x288>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f023 0219 	bic.w	r2, r3, #25
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	4929      	ldr	r1, [pc, #164]	; (8006768 <HAL_RCC_OscConfig+0x288>)
 80066c4:	4313      	orrs	r3, r2
 80066c6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066c8:	f7fd f8dc 	bl	8003884 <HAL_GetTick>
 80066cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066ce:	e008      	b.n	80066e2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066d0:	f7fd f8d8 	bl	8003884 <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d901      	bls.n	80066e2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e307      	b.n	8006cf2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066e2:	4b21      	ldr	r3, [pc, #132]	; (8006768 <HAL_RCC_OscConfig+0x288>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0304 	and.w	r3, r3, #4
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d0f0      	beq.n	80066d0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066ee:	f7fd f8f9 	bl	80038e4 <HAL_GetREVID>
 80066f2:	4603      	mov	r3, r0
 80066f4:	f241 0203 	movw	r2, #4099	; 0x1003
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d817      	bhi.n	800672c <HAL_RCC_OscConfig+0x24c>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	2b40      	cmp	r3, #64	; 0x40
 8006702:	d108      	bne.n	8006716 <HAL_RCC_OscConfig+0x236>
 8006704:	4b18      	ldr	r3, [pc, #96]	; (8006768 <HAL_RCC_OscConfig+0x288>)
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800670c:	4a16      	ldr	r2, [pc, #88]	; (8006768 <HAL_RCC_OscConfig+0x288>)
 800670e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006712:	6053      	str	r3, [r2, #4]
 8006714:	e030      	b.n	8006778 <HAL_RCC_OscConfig+0x298>
 8006716:	4b14      	ldr	r3, [pc, #80]	; (8006768 <HAL_RCC_OscConfig+0x288>)
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	031b      	lsls	r3, r3, #12
 8006724:	4910      	ldr	r1, [pc, #64]	; (8006768 <HAL_RCC_OscConfig+0x288>)
 8006726:	4313      	orrs	r3, r2
 8006728:	604b      	str	r3, [r1, #4]
 800672a:	e025      	b.n	8006778 <HAL_RCC_OscConfig+0x298>
 800672c:	4b0e      	ldr	r3, [pc, #56]	; (8006768 <HAL_RCC_OscConfig+0x288>)
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	061b      	lsls	r3, r3, #24
 800673a:	490b      	ldr	r1, [pc, #44]	; (8006768 <HAL_RCC_OscConfig+0x288>)
 800673c:	4313      	orrs	r3, r2
 800673e:	604b      	str	r3, [r1, #4]
 8006740:	e01a      	b.n	8006778 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006742:	4b09      	ldr	r3, [pc, #36]	; (8006768 <HAL_RCC_OscConfig+0x288>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a08      	ldr	r2, [pc, #32]	; (8006768 <HAL_RCC_OscConfig+0x288>)
 8006748:	f023 0301 	bic.w	r3, r3, #1
 800674c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800674e:	f7fd f899 	bl	8003884 <HAL_GetTick>
 8006752:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006754:	e00a      	b.n	800676c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006756:	f7fd f895 	bl	8003884 <HAL_GetTick>
 800675a:	4602      	mov	r2, r0
 800675c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	2b02      	cmp	r3, #2
 8006762:	d903      	bls.n	800676c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e2c4      	b.n	8006cf2 <HAL_RCC_OscConfig+0x812>
 8006768:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800676c:	4ba4      	ldr	r3, [pc, #656]	; (8006a00 <HAL_RCC_OscConfig+0x520>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0304 	and.w	r3, r3, #4
 8006774:	2b00      	cmp	r3, #0
 8006776:	d1ee      	bne.n	8006756 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0310 	and.w	r3, r3, #16
 8006780:	2b00      	cmp	r3, #0
 8006782:	f000 80a9 	beq.w	80068d8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006786:	4b9e      	ldr	r3, [pc, #632]	; (8006a00 <HAL_RCC_OscConfig+0x520>)
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800678e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006790:	4b9b      	ldr	r3, [pc, #620]	; (8006a00 <HAL_RCC_OscConfig+0x520>)
 8006792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006794:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	2b08      	cmp	r3, #8
 800679a:	d007      	beq.n	80067ac <HAL_RCC_OscConfig+0x2cc>
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	2b18      	cmp	r3, #24
 80067a0:	d13a      	bne.n	8006818 <HAL_RCC_OscConfig+0x338>
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	f003 0303 	and.w	r3, r3, #3
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d135      	bne.n	8006818 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80067ac:	4b94      	ldr	r3, [pc, #592]	; (8006a00 <HAL_RCC_OscConfig+0x520>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d005      	beq.n	80067c4 <HAL_RCC_OscConfig+0x2e4>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	69db      	ldr	r3, [r3, #28]
 80067bc:	2b80      	cmp	r3, #128	; 0x80
 80067be:	d001      	beq.n	80067c4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e296      	b.n	8006cf2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80067c4:	f7fd f88e 	bl	80038e4 <HAL_GetREVID>
 80067c8:	4603      	mov	r3, r0
 80067ca:	f241 0203 	movw	r2, #4099	; 0x1003
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d817      	bhi.n	8006802 <HAL_RCC_OscConfig+0x322>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	2b20      	cmp	r3, #32
 80067d8:	d108      	bne.n	80067ec <HAL_RCC_OscConfig+0x30c>
 80067da:	4b89      	ldr	r3, [pc, #548]	; (8006a00 <HAL_RCC_OscConfig+0x520>)
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80067e2:	4a87      	ldr	r2, [pc, #540]	; (8006a00 <HAL_RCC_OscConfig+0x520>)
 80067e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067e8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80067ea:	e075      	b.n	80068d8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80067ec:	4b84      	ldr	r3, [pc, #528]	; (8006a00 <HAL_RCC_OscConfig+0x520>)
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6a1b      	ldr	r3, [r3, #32]
 80067f8:	069b      	lsls	r3, r3, #26
 80067fa:	4981      	ldr	r1, [pc, #516]	; (8006a00 <HAL_RCC_OscConfig+0x520>)
 80067fc:	4313      	orrs	r3, r2
 80067fe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006800:	e06a      	b.n	80068d8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006802:	4b7f      	ldr	r3, [pc, #508]	; (8006a00 <HAL_RCC_OscConfig+0x520>)
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a1b      	ldr	r3, [r3, #32]
 800680e:	061b      	lsls	r3, r3, #24
 8006810:	497b      	ldr	r1, [pc, #492]	; (8006a00 <HAL_RCC_OscConfig+0x520>)
 8006812:	4313      	orrs	r3, r2
 8006814:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006816:	e05f      	b.n	80068d8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	69db      	ldr	r3, [r3, #28]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d042      	beq.n	80068a6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006820:	4b77      	ldr	r3, [pc, #476]	; (8006a00 <HAL_RCC_OscConfig+0x520>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a76      	ldr	r2, [pc, #472]	; (8006a00 <HAL_RCC_OscConfig+0x520>)
 8006826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800682a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800682c:	f7fd f82a 	bl	8003884 <HAL_GetTick>
 8006830:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006832:	e008      	b.n	8006846 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006834:	f7fd f826 	bl	8003884 <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	2b02      	cmp	r3, #2
 8006840:	d901      	bls.n	8006846 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e255      	b.n	8006cf2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006846:	4b6e      	ldr	r3, [pc, #440]	; (8006a00 <HAL_RCC_OscConfig+0x520>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800684e:	2b00      	cmp	r3, #0
 8006850:	d0f0      	beq.n	8006834 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006852:	f7fd f847 	bl	80038e4 <HAL_GetREVID>
 8006856:	4603      	mov	r3, r0
 8006858:	f241 0203 	movw	r2, #4099	; 0x1003
 800685c:	4293      	cmp	r3, r2
 800685e:	d817      	bhi.n	8006890 <HAL_RCC_OscConfig+0x3b0>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a1b      	ldr	r3, [r3, #32]
 8006864:	2b20      	cmp	r3, #32
 8006866:	d108      	bne.n	800687a <HAL_RCC_OscConfig+0x39a>
 8006868:	4b65      	ldr	r3, [pc, #404]	; (8006a00 <HAL_RCC_OscConfig+0x520>)
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006870:	4a63      	ldr	r2, [pc, #396]	; (8006a00 <HAL_RCC_OscConfig+0x520>)
 8006872:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006876:	6053      	str	r3, [r2, #4]
 8006878:	e02e      	b.n	80068d8 <HAL_RCC_OscConfig+0x3f8>
 800687a:	4b61      	ldr	r3, [pc, #388]	; (8006a00 <HAL_RCC_OscConfig+0x520>)
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a1b      	ldr	r3, [r3, #32]
 8006886:	069b      	lsls	r3, r3, #26
 8006888:	495d      	ldr	r1, [pc, #372]	; (8006a00 <HAL_RCC_OscConfig+0x520>)
 800688a:	4313      	orrs	r3, r2
 800688c:	604b      	str	r3, [r1, #4]
 800688e:	e023      	b.n	80068d8 <HAL_RCC_OscConfig+0x3f8>
 8006890:	4b5b      	ldr	r3, [pc, #364]	; (8006a00 <HAL_RCC_OscConfig+0x520>)
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a1b      	ldr	r3, [r3, #32]
 800689c:	061b      	lsls	r3, r3, #24
 800689e:	4958      	ldr	r1, [pc, #352]	; (8006a00 <HAL_RCC_OscConfig+0x520>)
 80068a0:	4313      	orrs	r3, r2
 80068a2:	60cb      	str	r3, [r1, #12]
 80068a4:	e018      	b.n	80068d8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80068a6:	4b56      	ldr	r3, [pc, #344]	; (8006a00 <HAL_RCC_OscConfig+0x520>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a55      	ldr	r2, [pc, #340]	; (8006a00 <HAL_RCC_OscConfig+0x520>)
 80068ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068b2:	f7fc ffe7 	bl	8003884 <HAL_GetTick>
 80068b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80068b8:	e008      	b.n	80068cc <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80068ba:	f7fc ffe3 	bl	8003884 <HAL_GetTick>
 80068be:	4602      	mov	r2, r0
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d901      	bls.n	80068cc <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e212      	b.n	8006cf2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80068cc:	4b4c      	ldr	r3, [pc, #304]	; (8006a00 <HAL_RCC_OscConfig+0x520>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1f0      	bne.n	80068ba <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0308 	and.w	r3, r3, #8
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d036      	beq.n	8006952 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d019      	beq.n	8006920 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068ec:	4b44      	ldr	r3, [pc, #272]	; (8006a00 <HAL_RCC_OscConfig+0x520>)
 80068ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068f0:	4a43      	ldr	r2, [pc, #268]	; (8006a00 <HAL_RCC_OscConfig+0x520>)
 80068f2:	f043 0301 	orr.w	r3, r3, #1
 80068f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068f8:	f7fc ffc4 	bl	8003884 <HAL_GetTick>
 80068fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80068fe:	e008      	b.n	8006912 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006900:	f7fc ffc0 	bl	8003884 <HAL_GetTick>
 8006904:	4602      	mov	r2, r0
 8006906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	2b02      	cmp	r3, #2
 800690c:	d901      	bls.n	8006912 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e1ef      	b.n	8006cf2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006912:	4b3b      	ldr	r3, [pc, #236]	; (8006a00 <HAL_RCC_OscConfig+0x520>)
 8006914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006916:	f003 0302 	and.w	r3, r3, #2
 800691a:	2b00      	cmp	r3, #0
 800691c:	d0f0      	beq.n	8006900 <HAL_RCC_OscConfig+0x420>
 800691e:	e018      	b.n	8006952 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006920:	4b37      	ldr	r3, [pc, #220]	; (8006a00 <HAL_RCC_OscConfig+0x520>)
 8006922:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006924:	4a36      	ldr	r2, [pc, #216]	; (8006a00 <HAL_RCC_OscConfig+0x520>)
 8006926:	f023 0301 	bic.w	r3, r3, #1
 800692a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800692c:	f7fc ffaa 	bl	8003884 <HAL_GetTick>
 8006930:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006932:	e008      	b.n	8006946 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006934:	f7fc ffa6 	bl	8003884 <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	2b02      	cmp	r3, #2
 8006940:	d901      	bls.n	8006946 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e1d5      	b.n	8006cf2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006946:	4b2e      	ldr	r3, [pc, #184]	; (8006a00 <HAL_RCC_OscConfig+0x520>)
 8006948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800694a:	f003 0302 	and.w	r3, r3, #2
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1f0      	bne.n	8006934 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0320 	and.w	r3, r3, #32
 800695a:	2b00      	cmp	r3, #0
 800695c:	d036      	beq.n	80069cc <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d019      	beq.n	800699a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006966:	4b26      	ldr	r3, [pc, #152]	; (8006a00 <HAL_RCC_OscConfig+0x520>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a25      	ldr	r2, [pc, #148]	; (8006a00 <HAL_RCC_OscConfig+0x520>)
 800696c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006970:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006972:	f7fc ff87 	bl	8003884 <HAL_GetTick>
 8006976:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006978:	e008      	b.n	800698c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800697a:	f7fc ff83 	bl	8003884 <HAL_GetTick>
 800697e:	4602      	mov	r2, r0
 8006980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	2b02      	cmp	r3, #2
 8006986:	d901      	bls.n	800698c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006988:	2303      	movs	r3, #3
 800698a:	e1b2      	b.n	8006cf2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800698c:	4b1c      	ldr	r3, [pc, #112]	; (8006a00 <HAL_RCC_OscConfig+0x520>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d0f0      	beq.n	800697a <HAL_RCC_OscConfig+0x49a>
 8006998:	e018      	b.n	80069cc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800699a:	4b19      	ldr	r3, [pc, #100]	; (8006a00 <HAL_RCC_OscConfig+0x520>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a18      	ldr	r2, [pc, #96]	; (8006a00 <HAL_RCC_OscConfig+0x520>)
 80069a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80069a6:	f7fc ff6d 	bl	8003884 <HAL_GetTick>
 80069aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80069ac:	e008      	b.n	80069c0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80069ae:	f7fc ff69 	bl	8003884 <HAL_GetTick>
 80069b2:	4602      	mov	r2, r0
 80069b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d901      	bls.n	80069c0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80069bc:	2303      	movs	r3, #3
 80069be:	e198      	b.n	8006cf2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80069c0:	4b0f      	ldr	r3, [pc, #60]	; (8006a00 <HAL_RCC_OscConfig+0x520>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d1f0      	bne.n	80069ae <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0304 	and.w	r3, r3, #4
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f000 8085 	beq.w	8006ae4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80069da:	4b0a      	ldr	r3, [pc, #40]	; (8006a04 <HAL_RCC_OscConfig+0x524>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a09      	ldr	r2, [pc, #36]	; (8006a04 <HAL_RCC_OscConfig+0x524>)
 80069e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80069e6:	f7fc ff4d 	bl	8003884 <HAL_GetTick>
 80069ea:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069ec:	e00c      	b.n	8006a08 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80069ee:	f7fc ff49 	bl	8003884 <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	2b64      	cmp	r3, #100	; 0x64
 80069fa:	d905      	bls.n	8006a08 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e178      	b.n	8006cf2 <HAL_RCC_OscConfig+0x812>
 8006a00:	58024400 	.word	0x58024400
 8006a04:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a08:	4b96      	ldr	r3, [pc, #600]	; (8006c64 <HAL_RCC_OscConfig+0x784>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d0ec      	beq.n	80069ee <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d106      	bne.n	8006a2a <HAL_RCC_OscConfig+0x54a>
 8006a1c:	4b92      	ldr	r3, [pc, #584]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a20:	4a91      	ldr	r2, [pc, #580]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006a22:	f043 0301 	orr.w	r3, r3, #1
 8006a26:	6713      	str	r3, [r2, #112]	; 0x70
 8006a28:	e02d      	b.n	8006a86 <HAL_RCC_OscConfig+0x5a6>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d10c      	bne.n	8006a4c <HAL_RCC_OscConfig+0x56c>
 8006a32:	4b8d      	ldr	r3, [pc, #564]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a36:	4a8c      	ldr	r2, [pc, #560]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006a38:	f023 0301 	bic.w	r3, r3, #1
 8006a3c:	6713      	str	r3, [r2, #112]	; 0x70
 8006a3e:	4b8a      	ldr	r3, [pc, #552]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a42:	4a89      	ldr	r2, [pc, #548]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006a44:	f023 0304 	bic.w	r3, r3, #4
 8006a48:	6713      	str	r3, [r2, #112]	; 0x70
 8006a4a:	e01c      	b.n	8006a86 <HAL_RCC_OscConfig+0x5a6>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	2b05      	cmp	r3, #5
 8006a52:	d10c      	bne.n	8006a6e <HAL_RCC_OscConfig+0x58e>
 8006a54:	4b84      	ldr	r3, [pc, #528]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a58:	4a83      	ldr	r2, [pc, #524]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006a5a:	f043 0304 	orr.w	r3, r3, #4
 8006a5e:	6713      	str	r3, [r2, #112]	; 0x70
 8006a60:	4b81      	ldr	r3, [pc, #516]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a64:	4a80      	ldr	r2, [pc, #512]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006a66:	f043 0301 	orr.w	r3, r3, #1
 8006a6a:	6713      	str	r3, [r2, #112]	; 0x70
 8006a6c:	e00b      	b.n	8006a86 <HAL_RCC_OscConfig+0x5a6>
 8006a6e:	4b7e      	ldr	r3, [pc, #504]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a72:	4a7d      	ldr	r2, [pc, #500]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006a74:	f023 0301 	bic.w	r3, r3, #1
 8006a78:	6713      	str	r3, [r2, #112]	; 0x70
 8006a7a:	4b7b      	ldr	r3, [pc, #492]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a7e:	4a7a      	ldr	r2, [pc, #488]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006a80:	f023 0304 	bic.w	r3, r3, #4
 8006a84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d015      	beq.n	8006aba <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a8e:	f7fc fef9 	bl	8003884 <HAL_GetTick>
 8006a92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a94:	e00a      	b.n	8006aac <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a96:	f7fc fef5 	bl	8003884 <HAL_GetTick>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d901      	bls.n	8006aac <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	e122      	b.n	8006cf2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006aac:	4b6e      	ldr	r3, [pc, #440]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ab0:	f003 0302 	and.w	r3, r3, #2
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d0ee      	beq.n	8006a96 <HAL_RCC_OscConfig+0x5b6>
 8006ab8:	e014      	b.n	8006ae4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aba:	f7fc fee3 	bl	8003884 <HAL_GetTick>
 8006abe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006ac0:	e00a      	b.n	8006ad8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ac2:	f7fc fedf 	bl	8003884 <HAL_GetTick>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d901      	bls.n	8006ad8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	e10c      	b.n	8006cf2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006ad8:	4b63      	ldr	r3, [pc, #396]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006adc:	f003 0302 	and.w	r3, r3, #2
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1ee      	bne.n	8006ac2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f000 8101 	beq.w	8006cf0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006aee:	4b5e      	ldr	r3, [pc, #376]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006af6:	2b18      	cmp	r3, #24
 8006af8:	f000 80bc 	beq.w	8006c74 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	f040 8095 	bne.w	8006c30 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b06:	4b58      	ldr	r3, [pc, #352]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a57      	ldr	r2, [pc, #348]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006b0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b12:	f7fc feb7 	bl	8003884 <HAL_GetTick>
 8006b16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b18:	e008      	b.n	8006b2c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b1a:	f7fc feb3 	bl	8003884 <HAL_GetTick>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d901      	bls.n	8006b2c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	e0e2      	b.n	8006cf2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b2c:	4b4e      	ldr	r3, [pc, #312]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1f0      	bne.n	8006b1a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b38:	4b4b      	ldr	r3, [pc, #300]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006b3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b3c:	4b4b      	ldr	r3, [pc, #300]	; (8006c6c <HAL_RCC_OscConfig+0x78c>)
 8006b3e:	4013      	ands	r3, r2
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006b48:	0112      	lsls	r2, r2, #4
 8006b4a:	430a      	orrs	r2, r1
 8006b4c:	4946      	ldr	r1, [pc, #280]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	628b      	str	r3, [r1, #40]	; 0x28
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b56:	3b01      	subs	r3, #1
 8006b58:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b60:	3b01      	subs	r3, #1
 8006b62:	025b      	lsls	r3, r3, #9
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	431a      	orrs	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6c:	3b01      	subs	r3, #1
 8006b6e:	041b      	lsls	r3, r3, #16
 8006b70:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006b74:	431a      	orrs	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	061b      	lsls	r3, r3, #24
 8006b7e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006b82:	4939      	ldr	r1, [pc, #228]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006b84:	4313      	orrs	r3, r2
 8006b86:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006b88:	4b37      	ldr	r3, [pc, #220]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b8c:	4a36      	ldr	r2, [pc, #216]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006b8e:	f023 0301 	bic.w	r3, r3, #1
 8006b92:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006b94:	4b34      	ldr	r3, [pc, #208]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006b96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b98:	4b35      	ldr	r3, [pc, #212]	; (8006c70 <HAL_RCC_OscConfig+0x790>)
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006ba0:	00d2      	lsls	r2, r2, #3
 8006ba2:	4931      	ldr	r1, [pc, #196]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006ba8:	4b2f      	ldr	r3, [pc, #188]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bac:	f023 020c 	bic.w	r2, r3, #12
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb4:	492c      	ldr	r1, [pc, #176]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006bba:	4b2b      	ldr	r3, [pc, #172]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbe:	f023 0202 	bic.w	r2, r3, #2
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bc6:	4928      	ldr	r1, [pc, #160]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006bcc:	4b26      	ldr	r3, [pc, #152]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd0:	4a25      	ldr	r2, [pc, #148]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bd8:	4b23      	ldr	r3, [pc, #140]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bdc:	4a22      	ldr	r2, [pc, #136]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006bde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006be2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006be4:	4b20      	ldr	r3, [pc, #128]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be8:	4a1f      	ldr	r2, [pc, #124]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006bea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006bf0:	4b1d      	ldr	r3, [pc, #116]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf4:	4a1c      	ldr	r2, [pc, #112]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006bf6:	f043 0301 	orr.w	r3, r3, #1
 8006bfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bfc:	4b1a      	ldr	r3, [pc, #104]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a19      	ldr	r2, [pc, #100]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006c02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c08:	f7fc fe3c 	bl	8003884 <HAL_GetTick>
 8006c0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c0e:	e008      	b.n	8006c22 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c10:	f7fc fe38 	bl	8003884 <HAL_GetTick>
 8006c14:	4602      	mov	r2, r0
 8006c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d901      	bls.n	8006c22 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e067      	b.n	8006cf2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c22:	4b11      	ldr	r3, [pc, #68]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d0f0      	beq.n	8006c10 <HAL_RCC_OscConfig+0x730>
 8006c2e:	e05f      	b.n	8006cf0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c30:	4b0d      	ldr	r3, [pc, #52]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a0c      	ldr	r2, [pc, #48]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006c36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c3c:	f7fc fe22 	bl	8003884 <HAL_GetTick>
 8006c40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c42:	e008      	b.n	8006c56 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c44:	f7fc fe1e 	bl	8003884 <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d901      	bls.n	8006c56 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e04d      	b.n	8006cf2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c56:	4b04      	ldr	r3, [pc, #16]	; (8006c68 <HAL_RCC_OscConfig+0x788>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1f0      	bne.n	8006c44 <HAL_RCC_OscConfig+0x764>
 8006c62:	e045      	b.n	8006cf0 <HAL_RCC_OscConfig+0x810>
 8006c64:	58024800 	.word	0x58024800
 8006c68:	58024400 	.word	0x58024400
 8006c6c:	fffffc0c 	.word	0xfffffc0c
 8006c70:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006c74:	4b21      	ldr	r3, [pc, #132]	; (8006cfc <HAL_RCC_OscConfig+0x81c>)
 8006c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c78:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006c7a:	4b20      	ldr	r3, [pc, #128]	; (8006cfc <HAL_RCC_OscConfig+0x81c>)
 8006c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c7e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d031      	beq.n	8006cec <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	f003 0203 	and.w	r2, r3, #3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d12a      	bne.n	8006cec <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	091b      	lsrs	r3, r3, #4
 8006c9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d122      	bne.n	8006cec <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d11a      	bne.n	8006cec <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	0a5b      	lsrs	r3, r3, #9
 8006cba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cc2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d111      	bne.n	8006cec <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	0c1b      	lsrs	r3, r3, #16
 8006ccc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d108      	bne.n	8006cec <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	0e1b      	lsrs	r3, r3, #24
 8006cde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ce6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d001      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e000      	b.n	8006cf2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3730      	adds	r7, #48	; 0x30
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	58024400 	.word	0x58024400

08006d00 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b086      	sub	sp, #24
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d101      	bne.n	8006d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	e19c      	b.n	800704e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d14:	4b8a      	ldr	r3, [pc, #552]	; (8006f40 <HAL_RCC_ClockConfig+0x240>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 030f 	and.w	r3, r3, #15
 8006d1c:	683a      	ldr	r2, [r7, #0]
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d910      	bls.n	8006d44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d22:	4b87      	ldr	r3, [pc, #540]	; (8006f40 <HAL_RCC_ClockConfig+0x240>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f023 020f 	bic.w	r2, r3, #15
 8006d2a:	4985      	ldr	r1, [pc, #532]	; (8006f40 <HAL_RCC_ClockConfig+0x240>)
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d32:	4b83      	ldr	r3, [pc, #524]	; (8006f40 <HAL_RCC_ClockConfig+0x240>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 030f 	and.w	r3, r3, #15
 8006d3a:	683a      	ldr	r2, [r7, #0]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d001      	beq.n	8006d44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e184      	b.n	800704e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 0304 	and.w	r3, r3, #4
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d010      	beq.n	8006d72 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	691a      	ldr	r2, [r3, #16]
 8006d54:	4b7b      	ldr	r3, [pc, #492]	; (8006f44 <HAL_RCC_ClockConfig+0x244>)
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d908      	bls.n	8006d72 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006d60:	4b78      	ldr	r3, [pc, #480]	; (8006f44 <HAL_RCC_ClockConfig+0x244>)
 8006d62:	699b      	ldr	r3, [r3, #24]
 8006d64:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	4975      	ldr	r1, [pc, #468]	; (8006f44 <HAL_RCC_ClockConfig+0x244>)
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 0308 	and.w	r3, r3, #8
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d010      	beq.n	8006da0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	695a      	ldr	r2, [r3, #20]
 8006d82:	4b70      	ldr	r3, [pc, #448]	; (8006f44 <HAL_RCC_ClockConfig+0x244>)
 8006d84:	69db      	ldr	r3, [r3, #28]
 8006d86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d908      	bls.n	8006da0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006d8e:	4b6d      	ldr	r3, [pc, #436]	; (8006f44 <HAL_RCC_ClockConfig+0x244>)
 8006d90:	69db      	ldr	r3, [r3, #28]
 8006d92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	496a      	ldr	r1, [pc, #424]	; (8006f44 <HAL_RCC_ClockConfig+0x244>)
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0310 	and.w	r3, r3, #16
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d010      	beq.n	8006dce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	699a      	ldr	r2, [r3, #24]
 8006db0:	4b64      	ldr	r3, [pc, #400]	; (8006f44 <HAL_RCC_ClockConfig+0x244>)
 8006db2:	69db      	ldr	r3, [r3, #28]
 8006db4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d908      	bls.n	8006dce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006dbc:	4b61      	ldr	r3, [pc, #388]	; (8006f44 <HAL_RCC_ClockConfig+0x244>)
 8006dbe:	69db      	ldr	r3, [r3, #28]
 8006dc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	699b      	ldr	r3, [r3, #24]
 8006dc8:	495e      	ldr	r1, [pc, #376]	; (8006f44 <HAL_RCC_ClockConfig+0x244>)
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 0320 	and.w	r3, r3, #32
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d010      	beq.n	8006dfc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	69da      	ldr	r2, [r3, #28]
 8006dde:	4b59      	ldr	r3, [pc, #356]	; (8006f44 <HAL_RCC_ClockConfig+0x244>)
 8006de0:	6a1b      	ldr	r3, [r3, #32]
 8006de2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d908      	bls.n	8006dfc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006dea:	4b56      	ldr	r3, [pc, #344]	; (8006f44 <HAL_RCC_ClockConfig+0x244>)
 8006dec:	6a1b      	ldr	r3, [r3, #32]
 8006dee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	69db      	ldr	r3, [r3, #28]
 8006df6:	4953      	ldr	r1, [pc, #332]	; (8006f44 <HAL_RCC_ClockConfig+0x244>)
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 0302 	and.w	r3, r3, #2
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d010      	beq.n	8006e2a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	68da      	ldr	r2, [r3, #12]
 8006e0c:	4b4d      	ldr	r3, [pc, #308]	; (8006f44 <HAL_RCC_ClockConfig+0x244>)
 8006e0e:	699b      	ldr	r3, [r3, #24]
 8006e10:	f003 030f 	and.w	r3, r3, #15
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d908      	bls.n	8006e2a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e18:	4b4a      	ldr	r3, [pc, #296]	; (8006f44 <HAL_RCC_ClockConfig+0x244>)
 8006e1a:	699b      	ldr	r3, [r3, #24]
 8006e1c:	f023 020f 	bic.w	r2, r3, #15
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	4947      	ldr	r1, [pc, #284]	; (8006f44 <HAL_RCC_ClockConfig+0x244>)
 8006e26:	4313      	orrs	r3, r2
 8006e28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 0301 	and.w	r3, r3, #1
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d055      	beq.n	8006ee2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006e36:	4b43      	ldr	r3, [pc, #268]	; (8006f44 <HAL_RCC_ClockConfig+0x244>)
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	4940      	ldr	r1, [pc, #256]	; (8006f44 <HAL_RCC_ClockConfig+0x244>)
 8006e44:	4313      	orrs	r3, r2
 8006e46:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	d107      	bne.n	8006e60 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e50:	4b3c      	ldr	r3, [pc, #240]	; (8006f44 <HAL_RCC_ClockConfig+0x244>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d121      	bne.n	8006ea0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e0f6      	b.n	800704e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	2b03      	cmp	r3, #3
 8006e66:	d107      	bne.n	8006e78 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e68:	4b36      	ldr	r3, [pc, #216]	; (8006f44 <HAL_RCC_ClockConfig+0x244>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d115      	bne.n	8006ea0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e0ea      	b.n	800704e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d107      	bne.n	8006e90 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e80:	4b30      	ldr	r3, [pc, #192]	; (8006f44 <HAL_RCC_ClockConfig+0x244>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d109      	bne.n	8006ea0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e0de      	b.n	800704e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e90:	4b2c      	ldr	r3, [pc, #176]	; (8006f44 <HAL_RCC_ClockConfig+0x244>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0304 	and.w	r3, r3, #4
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d101      	bne.n	8006ea0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e0d6      	b.n	800704e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ea0:	4b28      	ldr	r3, [pc, #160]	; (8006f44 <HAL_RCC_ClockConfig+0x244>)
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	f023 0207 	bic.w	r2, r3, #7
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	4925      	ldr	r1, [pc, #148]	; (8006f44 <HAL_RCC_ClockConfig+0x244>)
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eb2:	f7fc fce7 	bl	8003884 <HAL_GetTick>
 8006eb6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eb8:	e00a      	b.n	8006ed0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006eba:	f7fc fce3 	bl	8003884 <HAL_GetTick>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d901      	bls.n	8006ed0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e0be      	b.n	800704e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ed0:	4b1c      	ldr	r3, [pc, #112]	; (8006f44 <HAL_RCC_ClockConfig+0x244>)
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	00db      	lsls	r3, r3, #3
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d1eb      	bne.n	8006eba <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 0302 	and.w	r3, r3, #2
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d010      	beq.n	8006f10 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	68da      	ldr	r2, [r3, #12]
 8006ef2:	4b14      	ldr	r3, [pc, #80]	; (8006f44 <HAL_RCC_ClockConfig+0x244>)
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	f003 030f 	and.w	r3, r3, #15
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d208      	bcs.n	8006f10 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006efe:	4b11      	ldr	r3, [pc, #68]	; (8006f44 <HAL_RCC_ClockConfig+0x244>)
 8006f00:	699b      	ldr	r3, [r3, #24]
 8006f02:	f023 020f 	bic.w	r2, r3, #15
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	490e      	ldr	r1, [pc, #56]	; (8006f44 <HAL_RCC_ClockConfig+0x244>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f10:	4b0b      	ldr	r3, [pc, #44]	; (8006f40 <HAL_RCC_ClockConfig+0x240>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 030f 	and.w	r3, r3, #15
 8006f18:	683a      	ldr	r2, [r7, #0]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d214      	bcs.n	8006f48 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f1e:	4b08      	ldr	r3, [pc, #32]	; (8006f40 <HAL_RCC_ClockConfig+0x240>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f023 020f 	bic.w	r2, r3, #15
 8006f26:	4906      	ldr	r1, [pc, #24]	; (8006f40 <HAL_RCC_ClockConfig+0x240>)
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f2e:	4b04      	ldr	r3, [pc, #16]	; (8006f40 <HAL_RCC_ClockConfig+0x240>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 030f 	and.w	r3, r3, #15
 8006f36:	683a      	ldr	r2, [r7, #0]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d005      	beq.n	8006f48 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e086      	b.n	800704e <HAL_RCC_ClockConfig+0x34e>
 8006f40:	52002000 	.word	0x52002000
 8006f44:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0304 	and.w	r3, r3, #4
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d010      	beq.n	8006f76 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	691a      	ldr	r2, [r3, #16]
 8006f58:	4b3f      	ldr	r3, [pc, #252]	; (8007058 <HAL_RCC_ClockConfig+0x358>)
 8006f5a:	699b      	ldr	r3, [r3, #24]
 8006f5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d208      	bcs.n	8006f76 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006f64:	4b3c      	ldr	r3, [pc, #240]	; (8007058 <HAL_RCC_ClockConfig+0x358>)
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	4939      	ldr	r1, [pc, #228]	; (8007058 <HAL_RCC_ClockConfig+0x358>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 0308 	and.w	r3, r3, #8
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d010      	beq.n	8006fa4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	695a      	ldr	r2, [r3, #20]
 8006f86:	4b34      	ldr	r3, [pc, #208]	; (8007058 <HAL_RCC_ClockConfig+0x358>)
 8006f88:	69db      	ldr	r3, [r3, #28]
 8006f8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d208      	bcs.n	8006fa4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006f92:	4b31      	ldr	r3, [pc, #196]	; (8007058 <HAL_RCC_ClockConfig+0x358>)
 8006f94:	69db      	ldr	r3, [r3, #28]
 8006f96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	695b      	ldr	r3, [r3, #20]
 8006f9e:	492e      	ldr	r1, [pc, #184]	; (8007058 <HAL_RCC_ClockConfig+0x358>)
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0310 	and.w	r3, r3, #16
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d010      	beq.n	8006fd2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	699a      	ldr	r2, [r3, #24]
 8006fb4:	4b28      	ldr	r3, [pc, #160]	; (8007058 <HAL_RCC_ClockConfig+0x358>)
 8006fb6:	69db      	ldr	r3, [r3, #28]
 8006fb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d208      	bcs.n	8006fd2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006fc0:	4b25      	ldr	r3, [pc, #148]	; (8007058 <HAL_RCC_ClockConfig+0x358>)
 8006fc2:	69db      	ldr	r3, [r3, #28]
 8006fc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	4922      	ldr	r1, [pc, #136]	; (8007058 <HAL_RCC_ClockConfig+0x358>)
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f003 0320 	and.w	r3, r3, #32
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d010      	beq.n	8007000 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	69da      	ldr	r2, [r3, #28]
 8006fe2:	4b1d      	ldr	r3, [pc, #116]	; (8007058 <HAL_RCC_ClockConfig+0x358>)
 8006fe4:	6a1b      	ldr	r3, [r3, #32]
 8006fe6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d208      	bcs.n	8007000 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006fee:	4b1a      	ldr	r3, [pc, #104]	; (8007058 <HAL_RCC_ClockConfig+0x358>)
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	69db      	ldr	r3, [r3, #28]
 8006ffa:	4917      	ldr	r1, [pc, #92]	; (8007058 <HAL_RCC_ClockConfig+0x358>)
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007000:	f000 f834 	bl	800706c <HAL_RCC_GetSysClockFreq>
 8007004:	4602      	mov	r2, r0
 8007006:	4b14      	ldr	r3, [pc, #80]	; (8007058 <HAL_RCC_ClockConfig+0x358>)
 8007008:	699b      	ldr	r3, [r3, #24]
 800700a:	0a1b      	lsrs	r3, r3, #8
 800700c:	f003 030f 	and.w	r3, r3, #15
 8007010:	4912      	ldr	r1, [pc, #72]	; (800705c <HAL_RCC_ClockConfig+0x35c>)
 8007012:	5ccb      	ldrb	r3, [r1, r3]
 8007014:	f003 031f 	and.w	r3, r3, #31
 8007018:	fa22 f303 	lsr.w	r3, r2, r3
 800701c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800701e:	4b0e      	ldr	r3, [pc, #56]	; (8007058 <HAL_RCC_ClockConfig+0x358>)
 8007020:	699b      	ldr	r3, [r3, #24]
 8007022:	f003 030f 	and.w	r3, r3, #15
 8007026:	4a0d      	ldr	r2, [pc, #52]	; (800705c <HAL_RCC_ClockConfig+0x35c>)
 8007028:	5cd3      	ldrb	r3, [r2, r3]
 800702a:	f003 031f 	and.w	r3, r3, #31
 800702e:	693a      	ldr	r2, [r7, #16]
 8007030:	fa22 f303 	lsr.w	r3, r2, r3
 8007034:	4a0a      	ldr	r2, [pc, #40]	; (8007060 <HAL_RCC_ClockConfig+0x360>)
 8007036:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007038:	4a0a      	ldr	r2, [pc, #40]	; (8007064 <HAL_RCC_ClockConfig+0x364>)
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800703e:	4b0a      	ldr	r3, [pc, #40]	; (8007068 <HAL_RCC_ClockConfig+0x368>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4618      	mov	r0, r3
 8007044:	f7fc fbd4 	bl	80037f0 <HAL_InitTick>
 8007048:	4603      	mov	r3, r0
 800704a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800704c:	7bfb      	ldrb	r3, [r7, #15]
}
 800704e:	4618      	mov	r0, r3
 8007050:	3718      	adds	r7, #24
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	58024400 	.word	0x58024400
 800705c:	0800f848 	.word	0x0800f848
 8007060:	24000004 	.word	0x24000004
 8007064:	24000000 	.word	0x24000000
 8007068:	24000014 	.word	0x24000014

0800706c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800706c:	b480      	push	{r7}
 800706e:	b089      	sub	sp, #36	; 0x24
 8007070:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007072:	4bb3      	ldr	r3, [pc, #716]	; (8007340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800707a:	2b18      	cmp	r3, #24
 800707c:	f200 8155 	bhi.w	800732a <HAL_RCC_GetSysClockFreq+0x2be>
 8007080:	a201      	add	r2, pc, #4	; (adr r2, 8007088 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007086:	bf00      	nop
 8007088:	080070ed 	.word	0x080070ed
 800708c:	0800732b 	.word	0x0800732b
 8007090:	0800732b 	.word	0x0800732b
 8007094:	0800732b 	.word	0x0800732b
 8007098:	0800732b 	.word	0x0800732b
 800709c:	0800732b 	.word	0x0800732b
 80070a0:	0800732b 	.word	0x0800732b
 80070a4:	0800732b 	.word	0x0800732b
 80070a8:	08007113 	.word	0x08007113
 80070ac:	0800732b 	.word	0x0800732b
 80070b0:	0800732b 	.word	0x0800732b
 80070b4:	0800732b 	.word	0x0800732b
 80070b8:	0800732b 	.word	0x0800732b
 80070bc:	0800732b 	.word	0x0800732b
 80070c0:	0800732b 	.word	0x0800732b
 80070c4:	0800732b 	.word	0x0800732b
 80070c8:	08007119 	.word	0x08007119
 80070cc:	0800732b 	.word	0x0800732b
 80070d0:	0800732b 	.word	0x0800732b
 80070d4:	0800732b 	.word	0x0800732b
 80070d8:	0800732b 	.word	0x0800732b
 80070dc:	0800732b 	.word	0x0800732b
 80070e0:	0800732b 	.word	0x0800732b
 80070e4:	0800732b 	.word	0x0800732b
 80070e8:	0800711f 	.word	0x0800711f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070ec:	4b94      	ldr	r3, [pc, #592]	; (8007340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 0320 	and.w	r3, r3, #32
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d009      	beq.n	800710c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80070f8:	4b91      	ldr	r3, [pc, #580]	; (8007340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	08db      	lsrs	r3, r3, #3
 80070fe:	f003 0303 	and.w	r3, r3, #3
 8007102:	4a90      	ldr	r2, [pc, #576]	; (8007344 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007104:	fa22 f303 	lsr.w	r3, r2, r3
 8007108:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800710a:	e111      	b.n	8007330 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800710c:	4b8d      	ldr	r3, [pc, #564]	; (8007344 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800710e:	61bb      	str	r3, [r7, #24]
    break;
 8007110:	e10e      	b.n	8007330 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007112:	4b8d      	ldr	r3, [pc, #564]	; (8007348 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007114:	61bb      	str	r3, [r7, #24]
    break;
 8007116:	e10b      	b.n	8007330 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007118:	4b8c      	ldr	r3, [pc, #560]	; (800734c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800711a:	61bb      	str	r3, [r7, #24]
    break;
 800711c:	e108      	b.n	8007330 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800711e:	4b88      	ldr	r3, [pc, #544]	; (8007340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007122:	f003 0303 	and.w	r3, r3, #3
 8007126:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007128:	4b85      	ldr	r3, [pc, #532]	; (8007340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800712a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800712c:	091b      	lsrs	r3, r3, #4
 800712e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007132:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007134:	4b82      	ldr	r3, [pc, #520]	; (8007340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007138:	f003 0301 	and.w	r3, r3, #1
 800713c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800713e:	4b80      	ldr	r3, [pc, #512]	; (8007340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007142:	08db      	lsrs	r3, r3, #3
 8007144:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	fb02 f303 	mul.w	r3, r2, r3
 800714e:	ee07 3a90 	vmov	s15, r3
 8007152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007156:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	2b00      	cmp	r3, #0
 800715e:	f000 80e1 	beq.w	8007324 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	2b02      	cmp	r3, #2
 8007166:	f000 8083 	beq.w	8007270 <HAL_RCC_GetSysClockFreq+0x204>
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	2b02      	cmp	r3, #2
 800716e:	f200 80a1 	bhi.w	80072b4 <HAL_RCC_GetSysClockFreq+0x248>
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d003      	beq.n	8007180 <HAL_RCC_GetSysClockFreq+0x114>
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	2b01      	cmp	r3, #1
 800717c:	d056      	beq.n	800722c <HAL_RCC_GetSysClockFreq+0x1c0>
 800717e:	e099      	b.n	80072b4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007180:	4b6f      	ldr	r3, [pc, #444]	; (8007340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 0320 	and.w	r3, r3, #32
 8007188:	2b00      	cmp	r3, #0
 800718a:	d02d      	beq.n	80071e8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800718c:	4b6c      	ldr	r3, [pc, #432]	; (8007340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	08db      	lsrs	r3, r3, #3
 8007192:	f003 0303 	and.w	r3, r3, #3
 8007196:	4a6b      	ldr	r2, [pc, #428]	; (8007344 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007198:	fa22 f303 	lsr.w	r3, r2, r3
 800719c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	ee07 3a90 	vmov	s15, r3
 80071a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	ee07 3a90 	vmov	s15, r3
 80071ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071b6:	4b62      	ldr	r3, [pc, #392]	; (8007340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071be:	ee07 3a90 	vmov	s15, r3
 80071c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80071ca:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007350 <HAL_RCC_GetSysClockFreq+0x2e4>
 80071ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80071e6:	e087      	b.n	80072f8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	ee07 3a90 	vmov	s15, r3
 80071ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071f2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007354 <HAL_RCC_GetSysClockFreq+0x2e8>
 80071f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071fa:	4b51      	ldr	r3, [pc, #324]	; (8007340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007202:	ee07 3a90 	vmov	s15, r3
 8007206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800720a:	ed97 6a02 	vldr	s12, [r7, #8]
 800720e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007350 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800721a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800721e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007226:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800722a:	e065      	b.n	80072f8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	ee07 3a90 	vmov	s15, r3
 8007232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007236:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007358 <HAL_RCC_GetSysClockFreq+0x2ec>
 800723a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800723e:	4b40      	ldr	r3, [pc, #256]	; (8007340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007246:	ee07 3a90 	vmov	s15, r3
 800724a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800724e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007252:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007350 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800725a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800725e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800726a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800726e:	e043      	b.n	80072f8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	ee07 3a90 	vmov	s15, r3
 8007276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800727a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800735c <HAL_RCC_GetSysClockFreq+0x2f0>
 800727e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007282:	4b2f      	ldr	r3, [pc, #188]	; (8007340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800728a:	ee07 3a90 	vmov	s15, r3
 800728e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007292:	ed97 6a02 	vldr	s12, [r7, #8]
 8007296:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007350 <HAL_RCC_GetSysClockFreq+0x2e4>
 800729a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800729e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072b2:	e021      	b.n	80072f8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	ee07 3a90 	vmov	s15, r3
 80072ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072be:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007358 <HAL_RCC_GetSysClockFreq+0x2ec>
 80072c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072c6:	4b1e      	ldr	r3, [pc, #120]	; (8007340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ce:	ee07 3a90 	vmov	s15, r3
 80072d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80072da:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007350 <HAL_RCC_GetSysClockFreq+0x2e4>
 80072de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072f6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80072f8:	4b11      	ldr	r3, [pc, #68]	; (8007340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072fc:	0a5b      	lsrs	r3, r3, #9
 80072fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007302:	3301      	adds	r3, #1
 8007304:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	ee07 3a90 	vmov	s15, r3
 800730c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007310:	edd7 6a07 	vldr	s13, [r7, #28]
 8007314:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007318:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800731c:	ee17 3a90 	vmov	r3, s15
 8007320:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007322:	e005      	b.n	8007330 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007324:	2300      	movs	r3, #0
 8007326:	61bb      	str	r3, [r7, #24]
    break;
 8007328:	e002      	b.n	8007330 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800732a:	4b07      	ldr	r3, [pc, #28]	; (8007348 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800732c:	61bb      	str	r3, [r7, #24]
    break;
 800732e:	bf00      	nop
  }

  return sysclockfreq;
 8007330:	69bb      	ldr	r3, [r7, #24]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3724      	adds	r7, #36	; 0x24
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop
 8007340:	58024400 	.word	0x58024400
 8007344:	03d09000 	.word	0x03d09000
 8007348:	003d0900 	.word	0x003d0900
 800734c:	02dc6c00 	.word	0x02dc6c00
 8007350:	46000000 	.word	0x46000000
 8007354:	4c742400 	.word	0x4c742400
 8007358:	4a742400 	.word	0x4a742400
 800735c:	4c371b00 	.word	0x4c371b00

08007360 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007366:	f7ff fe81 	bl	800706c <HAL_RCC_GetSysClockFreq>
 800736a:	4602      	mov	r2, r0
 800736c:	4b10      	ldr	r3, [pc, #64]	; (80073b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800736e:	699b      	ldr	r3, [r3, #24]
 8007370:	0a1b      	lsrs	r3, r3, #8
 8007372:	f003 030f 	and.w	r3, r3, #15
 8007376:	490f      	ldr	r1, [pc, #60]	; (80073b4 <HAL_RCC_GetHCLKFreq+0x54>)
 8007378:	5ccb      	ldrb	r3, [r1, r3]
 800737a:	f003 031f 	and.w	r3, r3, #31
 800737e:	fa22 f303 	lsr.w	r3, r2, r3
 8007382:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007384:	4b0a      	ldr	r3, [pc, #40]	; (80073b0 <HAL_RCC_GetHCLKFreq+0x50>)
 8007386:	699b      	ldr	r3, [r3, #24]
 8007388:	f003 030f 	and.w	r3, r3, #15
 800738c:	4a09      	ldr	r2, [pc, #36]	; (80073b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800738e:	5cd3      	ldrb	r3, [r2, r3]
 8007390:	f003 031f 	and.w	r3, r3, #31
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	fa22 f303 	lsr.w	r3, r2, r3
 800739a:	4a07      	ldr	r2, [pc, #28]	; (80073b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800739c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800739e:	4a07      	ldr	r2, [pc, #28]	; (80073bc <HAL_RCC_GetHCLKFreq+0x5c>)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80073a4:	4b04      	ldr	r3, [pc, #16]	; (80073b8 <HAL_RCC_GetHCLKFreq+0x58>)
 80073a6:	681b      	ldr	r3, [r3, #0]
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3708      	adds	r7, #8
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	58024400 	.word	0x58024400
 80073b4:	0800f848 	.word	0x0800f848
 80073b8:	24000004 	.word	0x24000004
 80073bc:	24000000 	.word	0x24000000

080073c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80073c4:	f7ff ffcc 	bl	8007360 <HAL_RCC_GetHCLKFreq>
 80073c8:	4602      	mov	r2, r0
 80073ca:	4b06      	ldr	r3, [pc, #24]	; (80073e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80073cc:	69db      	ldr	r3, [r3, #28]
 80073ce:	091b      	lsrs	r3, r3, #4
 80073d0:	f003 0307 	and.w	r3, r3, #7
 80073d4:	4904      	ldr	r1, [pc, #16]	; (80073e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80073d6:	5ccb      	ldrb	r3, [r1, r3]
 80073d8:	f003 031f 	and.w	r3, r3, #31
 80073dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	58024400 	.word	0x58024400
 80073e8:	0800f848 	.word	0x0800f848

080073ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80073f0:	f7ff ffb6 	bl	8007360 <HAL_RCC_GetHCLKFreq>
 80073f4:	4602      	mov	r2, r0
 80073f6:	4b06      	ldr	r3, [pc, #24]	; (8007410 <HAL_RCC_GetPCLK2Freq+0x24>)
 80073f8:	69db      	ldr	r3, [r3, #28]
 80073fa:	0a1b      	lsrs	r3, r3, #8
 80073fc:	f003 0307 	and.w	r3, r3, #7
 8007400:	4904      	ldr	r1, [pc, #16]	; (8007414 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007402:	5ccb      	ldrb	r3, [r1, r3]
 8007404:	f003 031f 	and.w	r3, r3, #31
 8007408:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800740c:	4618      	mov	r0, r3
 800740e:	bd80      	pop	{r7, pc}
 8007410:	58024400 	.word	0x58024400
 8007414:	0800f848 	.word	0x0800f848

08007418 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007420:	2300      	movs	r3, #0
 8007422:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007424:	2300      	movs	r3, #0
 8007426:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007430:	2b00      	cmp	r3, #0
 8007432:	d03f      	beq.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007438:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800743c:	d02a      	beq.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800743e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007442:	d824      	bhi.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007444:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007448:	d018      	beq.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800744a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800744e:	d81e      	bhi.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007450:	2b00      	cmp	r3, #0
 8007452:	d003      	beq.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007454:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007458:	d007      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800745a:	e018      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800745c:	4bab      	ldr	r3, [pc, #684]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800745e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007460:	4aaa      	ldr	r2, [pc, #680]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007466:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007468:	e015      	b.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	3304      	adds	r3, #4
 800746e:	2102      	movs	r1, #2
 8007470:	4618      	mov	r0, r3
 8007472:	f001 fff3 	bl	800945c <RCCEx_PLL2_Config>
 8007476:	4603      	mov	r3, r0
 8007478:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800747a:	e00c      	b.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	3324      	adds	r3, #36	; 0x24
 8007480:	2102      	movs	r1, #2
 8007482:	4618      	mov	r0, r3
 8007484:	f002 f89c 	bl	80095c0 <RCCEx_PLL3_Config>
 8007488:	4603      	mov	r3, r0
 800748a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800748c:	e003      	b.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	75fb      	strb	r3, [r7, #23]
      break;
 8007492:	e000      	b.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007494:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007496:	7dfb      	ldrb	r3, [r7, #23]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d109      	bne.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800749c:	4b9b      	ldr	r3, [pc, #620]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800749e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074a8:	4998      	ldr	r1, [pc, #608]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074aa:	4313      	orrs	r3, r2
 80074ac:	650b      	str	r3, [r1, #80]	; 0x50
 80074ae:	e001      	b.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074b0:	7dfb      	ldrb	r3, [r7, #23]
 80074b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d03d      	beq.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c4:	2b04      	cmp	r3, #4
 80074c6:	d826      	bhi.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80074c8:	a201      	add	r2, pc, #4	; (adr r2, 80074d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80074ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ce:	bf00      	nop
 80074d0:	080074e5 	.word	0x080074e5
 80074d4:	080074f3 	.word	0x080074f3
 80074d8:	08007505 	.word	0x08007505
 80074dc:	0800751d 	.word	0x0800751d
 80074e0:	0800751d 	.word	0x0800751d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074e4:	4b89      	ldr	r3, [pc, #548]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e8:	4a88      	ldr	r2, [pc, #544]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80074f0:	e015      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	3304      	adds	r3, #4
 80074f6:	2100      	movs	r1, #0
 80074f8:	4618      	mov	r0, r3
 80074fa:	f001 ffaf 	bl	800945c <RCCEx_PLL2_Config>
 80074fe:	4603      	mov	r3, r0
 8007500:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007502:	e00c      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	3324      	adds	r3, #36	; 0x24
 8007508:	2100      	movs	r1, #0
 800750a:	4618      	mov	r0, r3
 800750c:	f002 f858 	bl	80095c0 <RCCEx_PLL3_Config>
 8007510:	4603      	mov	r3, r0
 8007512:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007514:	e003      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	75fb      	strb	r3, [r7, #23]
      break;
 800751a:	e000      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800751c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800751e:	7dfb      	ldrb	r3, [r7, #23]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d109      	bne.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007524:	4b79      	ldr	r3, [pc, #484]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007528:	f023 0207 	bic.w	r2, r3, #7
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007530:	4976      	ldr	r1, [pc, #472]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007532:	4313      	orrs	r3, r2
 8007534:	650b      	str	r3, [r1, #80]	; 0x50
 8007536:	e001      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007538:	7dfb      	ldrb	r3, [r7, #23]
 800753a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007544:	2b00      	cmp	r3, #0
 8007546:	d042      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800754c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007550:	d02b      	beq.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007556:	d825      	bhi.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007558:	2bc0      	cmp	r3, #192	; 0xc0
 800755a:	d028      	beq.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x196>
 800755c:	2bc0      	cmp	r3, #192	; 0xc0
 800755e:	d821      	bhi.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007560:	2b80      	cmp	r3, #128	; 0x80
 8007562:	d016      	beq.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007564:	2b80      	cmp	r3, #128	; 0x80
 8007566:	d81d      	bhi.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007568:	2b00      	cmp	r3, #0
 800756a:	d002      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800756c:	2b40      	cmp	r3, #64	; 0x40
 800756e:	d007      	beq.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007570:	e018      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007572:	4b66      	ldr	r3, [pc, #408]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007576:	4a65      	ldr	r2, [pc, #404]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800757c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800757e:	e017      	b.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	3304      	adds	r3, #4
 8007584:	2100      	movs	r1, #0
 8007586:	4618      	mov	r0, r3
 8007588:	f001 ff68 	bl	800945c <RCCEx_PLL2_Config>
 800758c:	4603      	mov	r3, r0
 800758e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007590:	e00e      	b.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	3324      	adds	r3, #36	; 0x24
 8007596:	2100      	movs	r1, #0
 8007598:	4618      	mov	r0, r3
 800759a:	f002 f811 	bl	80095c0 <RCCEx_PLL3_Config>
 800759e:	4603      	mov	r3, r0
 80075a0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80075a2:	e005      	b.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	75fb      	strb	r3, [r7, #23]
      break;
 80075a8:	e002      	b.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80075aa:	bf00      	nop
 80075ac:	e000      	b.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80075ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075b0:	7dfb      	ldrb	r3, [r7, #23]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d109      	bne.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80075b6:	4b55      	ldr	r3, [pc, #340]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80075b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ba:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075c2:	4952      	ldr	r1, [pc, #328]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80075c4:	4313      	orrs	r3, r2
 80075c6:	650b      	str	r3, [r1, #80]	; 0x50
 80075c8:	e001      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ca:	7dfb      	ldrb	r3, [r7, #23]
 80075cc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d049      	beq.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80075e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80075e4:	d030      	beq.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80075e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80075ea:	d82a      	bhi.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80075ec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80075f0:	d02c      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80075f2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80075f6:	d824      	bhi.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80075f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075fc:	d018      	beq.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80075fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007602:	d81e      	bhi.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007604:	2b00      	cmp	r3, #0
 8007606:	d003      	beq.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007608:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800760c:	d007      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800760e:	e018      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007610:	4b3e      	ldr	r3, [pc, #248]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007614:	4a3d      	ldr	r2, [pc, #244]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007616:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800761a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800761c:	e017      	b.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	3304      	adds	r3, #4
 8007622:	2100      	movs	r1, #0
 8007624:	4618      	mov	r0, r3
 8007626:	f001 ff19 	bl	800945c <RCCEx_PLL2_Config>
 800762a:	4603      	mov	r3, r0
 800762c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800762e:	e00e      	b.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	3324      	adds	r3, #36	; 0x24
 8007634:	2100      	movs	r1, #0
 8007636:	4618      	mov	r0, r3
 8007638:	f001 ffc2 	bl	80095c0 <RCCEx_PLL3_Config>
 800763c:	4603      	mov	r3, r0
 800763e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007640:	e005      	b.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	75fb      	strb	r3, [r7, #23]
      break;
 8007646:	e002      	b.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007648:	bf00      	nop
 800764a:	e000      	b.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800764c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800764e:	7dfb      	ldrb	r3, [r7, #23]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d10a      	bne.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007654:	4b2d      	ldr	r3, [pc, #180]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007658:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007662:	492a      	ldr	r1, [pc, #168]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007664:	4313      	orrs	r3, r2
 8007666:	658b      	str	r3, [r1, #88]	; 0x58
 8007668:	e001      	b.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800766a:	7dfb      	ldrb	r3, [r7, #23]
 800766c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007676:	2b00      	cmp	r3, #0
 8007678:	d04c      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007680:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007684:	d030      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007686:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800768a:	d82a      	bhi.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800768c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007690:	d02c      	beq.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007692:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007696:	d824      	bhi.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007698:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800769c:	d018      	beq.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800769e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076a2:	d81e      	bhi.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d003      	beq.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80076a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80076ac:	d007      	beq.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80076ae:	e018      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076b0:	4b16      	ldr	r3, [pc, #88]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80076b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b4:	4a15      	ldr	r2, [pc, #84]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80076b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80076bc:	e017      	b.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	3304      	adds	r3, #4
 80076c2:	2100      	movs	r1, #0
 80076c4:	4618      	mov	r0, r3
 80076c6:	f001 fec9 	bl	800945c <RCCEx_PLL2_Config>
 80076ca:	4603      	mov	r3, r0
 80076cc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80076ce:	e00e      	b.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	3324      	adds	r3, #36	; 0x24
 80076d4:	2100      	movs	r1, #0
 80076d6:	4618      	mov	r0, r3
 80076d8:	f001 ff72 	bl	80095c0 <RCCEx_PLL3_Config>
 80076dc:	4603      	mov	r3, r0
 80076de:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80076e0:	e005      	b.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	75fb      	strb	r3, [r7, #23]
      break;
 80076e6:	e002      	b.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80076e8:	bf00      	nop
 80076ea:	e000      	b.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80076ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076ee:	7dfb      	ldrb	r3, [r7, #23]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d10d      	bne.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80076f4:	4b05      	ldr	r3, [pc, #20]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80076f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076f8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007702:	4902      	ldr	r1, [pc, #8]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007704:	4313      	orrs	r3, r2
 8007706:	658b      	str	r3, [r1, #88]	; 0x58
 8007708:	e004      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800770a:	bf00      	nop
 800770c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007710:	7dfb      	ldrb	r3, [r7, #23]
 8007712:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d032      	beq.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007724:	2b30      	cmp	r3, #48	; 0x30
 8007726:	d01c      	beq.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007728:	2b30      	cmp	r3, #48	; 0x30
 800772a:	d817      	bhi.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x344>
 800772c:	2b20      	cmp	r3, #32
 800772e:	d00c      	beq.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007730:	2b20      	cmp	r3, #32
 8007732:	d813      	bhi.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007734:	2b00      	cmp	r3, #0
 8007736:	d016      	beq.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007738:	2b10      	cmp	r3, #16
 800773a:	d10f      	bne.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800773c:	4baf      	ldr	r3, [pc, #700]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800773e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007740:	4aae      	ldr	r2, [pc, #696]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007746:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007748:	e00e      	b.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	3304      	adds	r3, #4
 800774e:	2102      	movs	r1, #2
 8007750:	4618      	mov	r0, r3
 8007752:	f001 fe83 	bl	800945c <RCCEx_PLL2_Config>
 8007756:	4603      	mov	r3, r0
 8007758:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800775a:	e005      	b.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	75fb      	strb	r3, [r7, #23]
      break;
 8007760:	e002      	b.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007762:	bf00      	nop
 8007764:	e000      	b.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007766:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007768:	7dfb      	ldrb	r3, [r7, #23]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d109      	bne.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800776e:	4ba3      	ldr	r3, [pc, #652]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007772:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800777a:	49a0      	ldr	r1, [pc, #640]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800777c:	4313      	orrs	r3, r2
 800777e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007780:	e001      	b.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007782:	7dfb      	ldrb	r3, [r7, #23]
 8007784:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800778e:	2b00      	cmp	r3, #0
 8007790:	d047      	beq.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007796:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800779a:	d030      	beq.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800779c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077a0:	d82a      	bhi.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80077a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80077a6:	d02c      	beq.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80077a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80077ac:	d824      	bhi.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80077ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077b2:	d018      	beq.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80077b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077b8:	d81e      	bhi.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d003      	beq.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80077be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077c2:	d007      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80077c4:	e018      	b.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077c6:	4b8d      	ldr	r3, [pc, #564]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80077c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ca:	4a8c      	ldr	r2, [pc, #560]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80077cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80077d2:	e017      	b.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	3304      	adds	r3, #4
 80077d8:	2100      	movs	r1, #0
 80077da:	4618      	mov	r0, r3
 80077dc:	f001 fe3e 	bl	800945c <RCCEx_PLL2_Config>
 80077e0:	4603      	mov	r3, r0
 80077e2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80077e4:	e00e      	b.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	3324      	adds	r3, #36	; 0x24
 80077ea:	2100      	movs	r1, #0
 80077ec:	4618      	mov	r0, r3
 80077ee:	f001 fee7 	bl	80095c0 <RCCEx_PLL3_Config>
 80077f2:	4603      	mov	r3, r0
 80077f4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80077f6:	e005      	b.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	75fb      	strb	r3, [r7, #23]
      break;
 80077fc:	e002      	b.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80077fe:	bf00      	nop
 8007800:	e000      	b.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007802:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007804:	7dfb      	ldrb	r3, [r7, #23]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d109      	bne.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800780a:	4b7c      	ldr	r3, [pc, #496]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800780c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800780e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007816:	4979      	ldr	r1, [pc, #484]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007818:	4313      	orrs	r3, r2
 800781a:	650b      	str	r3, [r1, #80]	; 0x50
 800781c:	e001      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800781e:	7dfb      	ldrb	r3, [r7, #23]
 8007820:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800782a:	2b00      	cmp	r3, #0
 800782c:	d049      	beq.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007832:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007836:	d02e      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007838:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800783c:	d828      	bhi.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800783e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007842:	d02a      	beq.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007844:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007848:	d822      	bhi.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800784a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800784e:	d026      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8007850:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007854:	d81c      	bhi.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007856:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800785a:	d010      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x466>
 800785c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007860:	d816      	bhi.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007862:	2b00      	cmp	r3, #0
 8007864:	d01d      	beq.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8007866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800786a:	d111      	bne.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	3304      	adds	r3, #4
 8007870:	2101      	movs	r1, #1
 8007872:	4618      	mov	r0, r3
 8007874:	f001 fdf2 	bl	800945c <RCCEx_PLL2_Config>
 8007878:	4603      	mov	r3, r0
 800787a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800787c:	e012      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	3324      	adds	r3, #36	; 0x24
 8007882:	2101      	movs	r1, #1
 8007884:	4618      	mov	r0, r3
 8007886:	f001 fe9b 	bl	80095c0 <RCCEx_PLL3_Config>
 800788a:	4603      	mov	r3, r0
 800788c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800788e:	e009      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	75fb      	strb	r3, [r7, #23]
      break;
 8007894:	e006      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007896:	bf00      	nop
 8007898:	e004      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800789a:	bf00      	nop
 800789c:	e002      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800789e:	bf00      	nop
 80078a0:	e000      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80078a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078a4:	7dfb      	ldrb	r3, [r7, #23]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d109      	bne.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80078aa:	4b54      	ldr	r3, [pc, #336]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80078ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078ae:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078b6:	4951      	ldr	r1, [pc, #324]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80078b8:	4313      	orrs	r3, r2
 80078ba:	650b      	str	r3, [r1, #80]	; 0x50
 80078bc:	e001      	b.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078be:	7dfb      	ldrb	r3, [r7, #23]
 80078c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d04b      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80078d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078d8:	d02e      	beq.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80078da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078de:	d828      	bhi.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80078e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078e4:	d02a      	beq.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x524>
 80078e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ea:	d822      	bhi.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80078ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80078f0:	d026      	beq.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80078f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80078f6:	d81c      	bhi.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80078f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078fc:	d010      	beq.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80078fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007902:	d816      	bhi.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007904:	2b00      	cmp	r3, #0
 8007906:	d01d      	beq.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007908:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800790c:	d111      	bne.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	3304      	adds	r3, #4
 8007912:	2101      	movs	r1, #1
 8007914:	4618      	mov	r0, r3
 8007916:	f001 fda1 	bl	800945c <RCCEx_PLL2_Config>
 800791a:	4603      	mov	r3, r0
 800791c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800791e:	e012      	b.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	3324      	adds	r3, #36	; 0x24
 8007924:	2101      	movs	r1, #1
 8007926:	4618      	mov	r0, r3
 8007928:	f001 fe4a 	bl	80095c0 <RCCEx_PLL3_Config>
 800792c:	4603      	mov	r3, r0
 800792e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007930:	e009      	b.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	75fb      	strb	r3, [r7, #23]
      break;
 8007936:	e006      	b.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007938:	bf00      	nop
 800793a:	e004      	b.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800793c:	bf00      	nop
 800793e:	e002      	b.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007940:	bf00      	nop
 8007942:	e000      	b.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007944:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007946:	7dfb      	ldrb	r3, [r7, #23]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d10a      	bne.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800794c:	4b2b      	ldr	r3, [pc, #172]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800794e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007950:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800795a:	4928      	ldr	r1, [pc, #160]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800795c:	4313      	orrs	r3, r2
 800795e:	658b      	str	r3, [r1, #88]	; 0x58
 8007960:	e001      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007962:	7dfb      	ldrb	r3, [r7, #23]
 8007964:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800796e:	2b00      	cmp	r3, #0
 8007970:	d02f      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007976:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800797a:	d00e      	beq.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800797c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007980:	d814      	bhi.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007982:	2b00      	cmp	r3, #0
 8007984:	d015      	beq.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007986:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800798a:	d10f      	bne.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800798c:	4b1b      	ldr	r3, [pc, #108]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800798e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007990:	4a1a      	ldr	r2, [pc, #104]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007992:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007996:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007998:	e00c      	b.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	3304      	adds	r3, #4
 800799e:	2101      	movs	r1, #1
 80079a0:	4618      	mov	r0, r3
 80079a2:	f001 fd5b 	bl	800945c <RCCEx_PLL2_Config>
 80079a6:	4603      	mov	r3, r0
 80079a8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80079aa:	e003      	b.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	75fb      	strb	r3, [r7, #23]
      break;
 80079b0:	e000      	b.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80079b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079b4:	7dfb      	ldrb	r3, [r7, #23]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d109      	bne.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80079ba:	4b10      	ldr	r3, [pc, #64]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80079bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079c6:	490d      	ldr	r1, [pc, #52]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80079c8:	4313      	orrs	r3, r2
 80079ca:	650b      	str	r3, [r1, #80]	; 0x50
 80079cc:	e001      	b.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ce:	7dfb      	ldrb	r3, [r7, #23]
 80079d0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d033      	beq.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079e2:	2b03      	cmp	r3, #3
 80079e4:	d81c      	bhi.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80079e6:	a201      	add	r2, pc, #4	; (adr r2, 80079ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80079e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ec:	08007a27 	.word	0x08007a27
 80079f0:	08007a01 	.word	0x08007a01
 80079f4:	08007a0f 	.word	0x08007a0f
 80079f8:	08007a27 	.word	0x08007a27
 80079fc:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a00:	4bb8      	ldr	r3, [pc, #736]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a04:	4ab7      	ldr	r2, [pc, #732]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007a0c:	e00c      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	3304      	adds	r3, #4
 8007a12:	2102      	movs	r1, #2
 8007a14:	4618      	mov	r0, r3
 8007a16:	f001 fd21 	bl	800945c <RCCEx_PLL2_Config>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007a1e:	e003      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	75fb      	strb	r3, [r7, #23]
      break;
 8007a24:	e000      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007a26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a28:	7dfb      	ldrb	r3, [r7, #23]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d109      	bne.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007a2e:	4bad      	ldr	r3, [pc, #692]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a32:	f023 0203 	bic.w	r2, r3, #3
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a3a:	49aa      	ldr	r1, [pc, #680]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007a40:	e001      	b.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a42:	7dfb      	ldrb	r3, [r7, #23]
 8007a44:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	f000 8086 	beq.w	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a54:	4ba4      	ldr	r3, [pc, #656]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4aa3      	ldr	r2, [pc, #652]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a60:	f7fb ff10 	bl	8003884 <HAL_GetTick>
 8007a64:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a66:	e009      	b.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a68:	f7fb ff0c 	bl	8003884 <HAL_GetTick>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	2b64      	cmp	r3, #100	; 0x64
 8007a74:	d902      	bls.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007a76:	2303      	movs	r3, #3
 8007a78:	75fb      	strb	r3, [r7, #23]
        break;
 8007a7a:	e005      	b.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a7c:	4b9a      	ldr	r3, [pc, #616]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d0ef      	beq.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007a88:	7dfb      	ldrb	r3, [r7, #23]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d166      	bne.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007a8e:	4b95      	ldr	r3, [pc, #596]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a98:	4053      	eors	r3, r2
 8007a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d013      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007aa2:	4b90      	ldr	r3, [pc, #576]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007aaa:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007aac:	4b8d      	ldr	r3, [pc, #564]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ab0:	4a8c      	ldr	r2, [pc, #560]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ab6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007ab8:	4b8a      	ldr	r3, [pc, #552]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007abc:	4a89      	ldr	r2, [pc, #548]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ac2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007ac4:	4a87      	ldr	r2, [pc, #540]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ad0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ad4:	d115      	bne.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ad6:	f7fb fed5 	bl	8003884 <HAL_GetTick>
 8007ada:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007adc:	e00b      	b.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ade:	f7fb fed1 	bl	8003884 <HAL_GetTick>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	1ad3      	subs	r3, r2, r3
 8007ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d902      	bls.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007af0:	2303      	movs	r3, #3
 8007af2:	75fb      	strb	r3, [r7, #23]
            break;
 8007af4:	e005      	b.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007af6:	4b7b      	ldr	r3, [pc, #492]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007afa:	f003 0302 	and.w	r3, r3, #2
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d0ed      	beq.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007b02:	7dfb      	ldrb	r3, [r7, #23]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d126      	bne.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b16:	d10d      	bne.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007b18:	4b72      	ldr	r3, [pc, #456]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b26:	0919      	lsrs	r1, r3, #4
 8007b28:	4b70      	ldr	r3, [pc, #448]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8007b2a:	400b      	ands	r3, r1
 8007b2c:	496d      	ldr	r1, [pc, #436]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	610b      	str	r3, [r1, #16]
 8007b32:	e005      	b.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007b34:	4b6b      	ldr	r3, [pc, #428]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	4a6a      	ldr	r2, [pc, #424]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007b3a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007b3e:	6113      	str	r3, [r2, #16]
 8007b40:	4b68      	ldr	r3, [pc, #416]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007b42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b4e:	4965      	ldr	r1, [pc, #404]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007b50:	4313      	orrs	r3, r2
 8007b52:	670b      	str	r3, [r1, #112]	; 0x70
 8007b54:	e004      	b.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b56:	7dfb      	ldrb	r3, [r7, #23]
 8007b58:	75bb      	strb	r3, [r7, #22]
 8007b5a:	e001      	b.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b5c:	7dfb      	ldrb	r3, [r7, #23]
 8007b5e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 0301 	and.w	r3, r3, #1
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d07e      	beq.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b70:	2b28      	cmp	r3, #40	; 0x28
 8007b72:	d867      	bhi.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007b74:	a201      	add	r2, pc, #4	; (adr r2, 8007b7c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7a:	bf00      	nop
 8007b7c:	08007c4b 	.word	0x08007c4b
 8007b80:	08007c45 	.word	0x08007c45
 8007b84:	08007c45 	.word	0x08007c45
 8007b88:	08007c45 	.word	0x08007c45
 8007b8c:	08007c45 	.word	0x08007c45
 8007b90:	08007c45 	.word	0x08007c45
 8007b94:	08007c45 	.word	0x08007c45
 8007b98:	08007c45 	.word	0x08007c45
 8007b9c:	08007c21 	.word	0x08007c21
 8007ba0:	08007c45 	.word	0x08007c45
 8007ba4:	08007c45 	.word	0x08007c45
 8007ba8:	08007c45 	.word	0x08007c45
 8007bac:	08007c45 	.word	0x08007c45
 8007bb0:	08007c45 	.word	0x08007c45
 8007bb4:	08007c45 	.word	0x08007c45
 8007bb8:	08007c45 	.word	0x08007c45
 8007bbc:	08007c33 	.word	0x08007c33
 8007bc0:	08007c45 	.word	0x08007c45
 8007bc4:	08007c45 	.word	0x08007c45
 8007bc8:	08007c45 	.word	0x08007c45
 8007bcc:	08007c45 	.word	0x08007c45
 8007bd0:	08007c45 	.word	0x08007c45
 8007bd4:	08007c45 	.word	0x08007c45
 8007bd8:	08007c45 	.word	0x08007c45
 8007bdc:	08007c4b 	.word	0x08007c4b
 8007be0:	08007c45 	.word	0x08007c45
 8007be4:	08007c45 	.word	0x08007c45
 8007be8:	08007c45 	.word	0x08007c45
 8007bec:	08007c45 	.word	0x08007c45
 8007bf0:	08007c45 	.word	0x08007c45
 8007bf4:	08007c45 	.word	0x08007c45
 8007bf8:	08007c45 	.word	0x08007c45
 8007bfc:	08007c4b 	.word	0x08007c4b
 8007c00:	08007c45 	.word	0x08007c45
 8007c04:	08007c45 	.word	0x08007c45
 8007c08:	08007c45 	.word	0x08007c45
 8007c0c:	08007c45 	.word	0x08007c45
 8007c10:	08007c45 	.word	0x08007c45
 8007c14:	08007c45 	.word	0x08007c45
 8007c18:	08007c45 	.word	0x08007c45
 8007c1c:	08007c4b 	.word	0x08007c4b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	3304      	adds	r3, #4
 8007c24:	2101      	movs	r1, #1
 8007c26:	4618      	mov	r0, r3
 8007c28:	f001 fc18 	bl	800945c <RCCEx_PLL2_Config>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007c30:	e00c      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	3324      	adds	r3, #36	; 0x24
 8007c36:	2101      	movs	r1, #1
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f001 fcc1 	bl	80095c0 <RCCEx_PLL3_Config>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007c42:	e003      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	75fb      	strb	r3, [r7, #23]
      break;
 8007c48:	e000      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8007c4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c4c:	7dfb      	ldrb	r3, [r7, #23]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d109      	bne.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007c52:	4b24      	ldr	r3, [pc, #144]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c56:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c5e:	4921      	ldr	r1, [pc, #132]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007c60:	4313      	orrs	r3, r2
 8007c62:	654b      	str	r3, [r1, #84]	; 0x54
 8007c64:	e001      	b.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c66:	7dfb      	ldrb	r3, [r7, #23]
 8007c68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 0302 	and.w	r3, r3, #2
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d03e      	beq.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c7a:	2b05      	cmp	r3, #5
 8007c7c:	d820      	bhi.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8007c7e:	a201      	add	r2, pc, #4	; (adr r2, 8007c84 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8007c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c84:	08007cc7 	.word	0x08007cc7
 8007c88:	08007c9d 	.word	0x08007c9d
 8007c8c:	08007caf 	.word	0x08007caf
 8007c90:	08007cc7 	.word	0x08007cc7
 8007c94:	08007cc7 	.word	0x08007cc7
 8007c98:	08007cc7 	.word	0x08007cc7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	3304      	adds	r3, #4
 8007ca0:	2101      	movs	r1, #1
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f001 fbda 	bl	800945c <RCCEx_PLL2_Config>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007cac:	e00c      	b.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	3324      	adds	r3, #36	; 0x24
 8007cb2:	2101      	movs	r1, #1
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f001 fc83 	bl	80095c0 <RCCEx_PLL3_Config>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007cbe:	e003      	b.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	75fb      	strb	r3, [r7, #23]
      break;
 8007cc4:	e000      	b.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8007cc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cc8:	7dfb      	ldrb	r3, [r7, #23]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d110      	bne.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007cce:	4b05      	ldr	r3, [pc, #20]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cd2:	f023 0207 	bic.w	r2, r3, #7
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cda:	4902      	ldr	r1, [pc, #8]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	654b      	str	r3, [r1, #84]	; 0x54
 8007ce0:	e008      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8007ce2:	bf00      	nop
 8007ce4:	58024400 	.word	0x58024400
 8007ce8:	58024800 	.word	0x58024800
 8007cec:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cf0:	7dfb      	ldrb	r3, [r7, #23]
 8007cf2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f003 0304 	and.w	r3, r3, #4
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d039      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d06:	2b05      	cmp	r3, #5
 8007d08:	d820      	bhi.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x934>
 8007d0a:	a201      	add	r2, pc, #4	; (adr r2, 8007d10 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8007d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d10:	08007d53 	.word	0x08007d53
 8007d14:	08007d29 	.word	0x08007d29
 8007d18:	08007d3b 	.word	0x08007d3b
 8007d1c:	08007d53 	.word	0x08007d53
 8007d20:	08007d53 	.word	0x08007d53
 8007d24:	08007d53 	.word	0x08007d53
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	3304      	adds	r3, #4
 8007d2c:	2101      	movs	r1, #1
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f001 fb94 	bl	800945c <RCCEx_PLL2_Config>
 8007d34:	4603      	mov	r3, r0
 8007d36:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007d38:	e00c      	b.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	3324      	adds	r3, #36	; 0x24
 8007d3e:	2101      	movs	r1, #1
 8007d40:	4618      	mov	r0, r3
 8007d42:	f001 fc3d 	bl	80095c0 <RCCEx_PLL3_Config>
 8007d46:	4603      	mov	r3, r0
 8007d48:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007d4a:	e003      	b.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	75fb      	strb	r3, [r7, #23]
      break;
 8007d50:	e000      	b.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8007d52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d54:	7dfb      	ldrb	r3, [r7, #23]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d10a      	bne.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d5a:	4bb7      	ldr	r3, [pc, #732]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d5e:	f023 0207 	bic.w	r2, r3, #7
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d68:	49b3      	ldr	r1, [pc, #716]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	658b      	str	r3, [r1, #88]	; 0x58
 8007d6e:	e001      	b.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d70:	7dfb      	ldrb	r3, [r7, #23]
 8007d72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f003 0320 	and.w	r3, r3, #32
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d04b      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d8a:	d02e      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8007d8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d90:	d828      	bhi.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d96:	d02a      	beq.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d9c:	d822      	bhi.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007d9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007da2:	d026      	beq.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007da4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007da8:	d81c      	bhi.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007daa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dae:	d010      	beq.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8007db0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007db4:	d816      	bhi.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d01d      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007dba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007dbe:	d111      	bne.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	3304      	adds	r3, #4
 8007dc4:	2100      	movs	r1, #0
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f001 fb48 	bl	800945c <RCCEx_PLL2_Config>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007dd0:	e012      	b.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	3324      	adds	r3, #36	; 0x24
 8007dd6:	2102      	movs	r1, #2
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f001 fbf1 	bl	80095c0 <RCCEx_PLL3_Config>
 8007dde:	4603      	mov	r3, r0
 8007de0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007de2:	e009      	b.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007de4:	2301      	movs	r3, #1
 8007de6:	75fb      	strb	r3, [r7, #23]
      break;
 8007de8:	e006      	b.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007dea:	bf00      	nop
 8007dec:	e004      	b.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007dee:	bf00      	nop
 8007df0:	e002      	b.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007df2:	bf00      	nop
 8007df4:	e000      	b.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007df6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007df8:	7dfb      	ldrb	r3, [r7, #23]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d10a      	bne.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007dfe:	4b8e      	ldr	r3, [pc, #568]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e02:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e0c:	498a      	ldr	r1, [pc, #552]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	654b      	str	r3, [r1, #84]	; 0x54
 8007e12:	e001      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e14:	7dfb      	ldrb	r3, [r7, #23]
 8007e16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d04b      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007e2a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007e2e:	d02e      	beq.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8007e30:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007e34:	d828      	bhi.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007e36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e3a:	d02a      	beq.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e40:	d822      	bhi.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007e42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e46:	d026      	beq.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007e48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e4c:	d81c      	bhi.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007e4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e52:	d010      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8007e54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e58:	d816      	bhi.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d01d      	beq.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007e5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e62:	d111      	bne.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	3304      	adds	r3, #4
 8007e68:	2100      	movs	r1, #0
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f001 faf6 	bl	800945c <RCCEx_PLL2_Config>
 8007e70:	4603      	mov	r3, r0
 8007e72:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007e74:	e012      	b.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	3324      	adds	r3, #36	; 0x24
 8007e7a:	2102      	movs	r1, #2
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f001 fb9f 	bl	80095c0 <RCCEx_PLL3_Config>
 8007e82:	4603      	mov	r3, r0
 8007e84:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007e86:	e009      	b.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8007e8c:	e006      	b.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007e8e:	bf00      	nop
 8007e90:	e004      	b.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007e92:	bf00      	nop
 8007e94:	e002      	b.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007e96:	bf00      	nop
 8007e98:	e000      	b.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007e9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e9c:	7dfb      	ldrb	r3, [r7, #23]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d10a      	bne.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007ea2:	4b65      	ldr	r3, [pc, #404]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ea6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007eb0:	4961      	ldr	r1, [pc, #388]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	658b      	str	r3, [r1, #88]	; 0x58
 8007eb6:	e001      	b.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eb8:	7dfb      	ldrb	r3, [r7, #23]
 8007eba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d04b      	beq.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ece:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007ed2:	d02e      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007ed4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007ed8:	d828      	bhi.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007eda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ede:	d02a      	beq.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8007ee0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ee4:	d822      	bhi.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007ee6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007eea:	d026      	beq.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007eec:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007ef0:	d81c      	bhi.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007ef2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ef6:	d010      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007ef8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007efc:	d816      	bhi.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d01d      	beq.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f06:	d111      	bne.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	3304      	adds	r3, #4
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f001 faa4 	bl	800945c <RCCEx_PLL2_Config>
 8007f14:	4603      	mov	r3, r0
 8007f16:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007f18:	e012      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	3324      	adds	r3, #36	; 0x24
 8007f1e:	2102      	movs	r1, #2
 8007f20:	4618      	mov	r0, r3
 8007f22:	f001 fb4d 	bl	80095c0 <RCCEx_PLL3_Config>
 8007f26:	4603      	mov	r3, r0
 8007f28:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007f2a:	e009      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	75fb      	strb	r3, [r7, #23]
      break;
 8007f30:	e006      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007f32:	bf00      	nop
 8007f34:	e004      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007f36:	bf00      	nop
 8007f38:	e002      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007f3a:	bf00      	nop
 8007f3c:	e000      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007f3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f40:	7dfb      	ldrb	r3, [r7, #23]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d10a      	bne.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007f46:	4b3c      	ldr	r3, [pc, #240]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f54:	4938      	ldr	r1, [pc, #224]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007f56:	4313      	orrs	r3, r2
 8007f58:	658b      	str	r3, [r1, #88]	; 0x58
 8007f5a:	e001      	b.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f5c:	7dfb      	ldrb	r3, [r7, #23]
 8007f5e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f003 0308 	and.w	r3, r3, #8
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d01a      	beq.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f76:	d10a      	bne.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	3324      	adds	r3, #36	; 0x24
 8007f7c:	2102      	movs	r1, #2
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f001 fb1e 	bl	80095c0 <RCCEx_PLL3_Config>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d001      	beq.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007f8e:	4b2a      	ldr	r3, [pc, #168]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f92:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f9c:	4926      	ldr	r1, [pc, #152]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f003 0310 	and.w	r3, r3, #16
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d01a      	beq.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007fb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fb8:	d10a      	bne.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	3324      	adds	r3, #36	; 0x24
 8007fbe:	2102      	movs	r1, #2
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f001 fafd 	bl	80095c0 <RCCEx_PLL3_Config>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d001      	beq.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007fd0:	4b19      	ldr	r3, [pc, #100]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007fde:	4916      	ldr	r1, [pc, #88]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d036      	beq.n	800805e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007ff6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ffa:	d01f      	beq.n	800803c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007ffc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008000:	d817      	bhi.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8008002:	2b00      	cmp	r3, #0
 8008004:	d003      	beq.n	800800e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8008006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800800a:	d009      	beq.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800800c:	e011      	b.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	3304      	adds	r3, #4
 8008012:	2100      	movs	r1, #0
 8008014:	4618      	mov	r0, r3
 8008016:	f001 fa21 	bl	800945c <RCCEx_PLL2_Config>
 800801a:	4603      	mov	r3, r0
 800801c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800801e:	e00e      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	3324      	adds	r3, #36	; 0x24
 8008024:	2102      	movs	r1, #2
 8008026:	4618      	mov	r0, r3
 8008028:	f001 faca 	bl	80095c0 <RCCEx_PLL3_Config>
 800802c:	4603      	mov	r3, r0
 800802e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008030:	e005      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	75fb      	strb	r3, [r7, #23]
      break;
 8008036:	e002      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8008038:	58024400 	.word	0x58024400
      break;
 800803c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800803e:	7dfb      	ldrb	r3, [r7, #23]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d10a      	bne.n	800805a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008044:	4b93      	ldr	r3, [pc, #588]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008048:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008052:	4990      	ldr	r1, [pc, #576]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008054:	4313      	orrs	r3, r2
 8008056:	658b      	str	r3, [r1, #88]	; 0x58
 8008058:	e001      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800805a:	7dfb      	ldrb	r3, [r7, #23]
 800805c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008066:	2b00      	cmp	r3, #0
 8008068:	d033      	beq.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008070:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008074:	d01c      	beq.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8008076:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800807a:	d816      	bhi.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800807c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008080:	d003      	beq.n	800808a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8008082:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008086:	d007      	beq.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8008088:	e00f      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800808a:	4b82      	ldr	r3, [pc, #520]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800808c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800808e:	4a81      	ldr	r2, [pc, #516]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008094:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008096:	e00c      	b.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	3324      	adds	r3, #36	; 0x24
 800809c:	2101      	movs	r1, #1
 800809e:	4618      	mov	r0, r3
 80080a0:	f001 fa8e 	bl	80095c0 <RCCEx_PLL3_Config>
 80080a4:	4603      	mov	r3, r0
 80080a6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80080a8:	e003      	b.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	75fb      	strb	r3, [r7, #23]
      break;
 80080ae:	e000      	b.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80080b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080b2:	7dfb      	ldrb	r3, [r7, #23]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d10a      	bne.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80080b8:	4b76      	ldr	r3, [pc, #472]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80080ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080c6:	4973      	ldr	r1, [pc, #460]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80080c8:	4313      	orrs	r3, r2
 80080ca:	654b      	str	r3, [r1, #84]	; 0x54
 80080cc:	e001      	b.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ce:	7dfb      	ldrb	r3, [r7, #23]
 80080d0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d029      	beq.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d003      	beq.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80080e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080ea:	d007      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80080ec:	e00f      	b.n	800810e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080ee:	4b69      	ldr	r3, [pc, #420]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80080f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f2:	4a68      	ldr	r2, [pc, #416]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80080f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80080fa:	e00b      	b.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	3304      	adds	r3, #4
 8008100:	2102      	movs	r1, #2
 8008102:	4618      	mov	r0, r3
 8008104:	f001 f9aa 	bl	800945c <RCCEx_PLL2_Config>
 8008108:	4603      	mov	r3, r0
 800810a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800810c:	e002      	b.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	75fb      	strb	r3, [r7, #23]
      break;
 8008112:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008114:	7dfb      	ldrb	r3, [r7, #23]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d109      	bne.n	800812e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800811a:	4b5e      	ldr	r3, [pc, #376]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800811c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800811e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008126:	495b      	ldr	r1, [pc, #364]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008128:	4313      	orrs	r3, r2
 800812a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800812c:	e001      	b.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800812e:	7dfb      	ldrb	r3, [r7, #23]
 8008130:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00a      	beq.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	3324      	adds	r3, #36	; 0x24
 8008142:	2102      	movs	r1, #2
 8008144:	4618      	mov	r0, r3
 8008146:	f001 fa3b 	bl	80095c0 <RCCEx_PLL3_Config>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d001      	beq.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800815c:	2b00      	cmp	r3, #0
 800815e:	d030      	beq.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008164:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008168:	d017      	beq.n	800819a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800816a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800816e:	d811      	bhi.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008174:	d013      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008176:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800817a:	d80b      	bhi.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800817c:	2b00      	cmp	r3, #0
 800817e:	d010      	beq.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008180:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008184:	d106      	bne.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008186:	4b43      	ldr	r3, [pc, #268]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800818a:	4a42      	ldr	r2, [pc, #264]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800818c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008190:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008192:	e007      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	75fb      	strb	r3, [r7, #23]
      break;
 8008198:	e004      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800819a:	bf00      	nop
 800819c:	e002      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800819e:	bf00      	nop
 80081a0:	e000      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80081a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081a4:	7dfb      	ldrb	r3, [r7, #23]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d109      	bne.n	80081be <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80081aa:	4b3a      	ldr	r3, [pc, #232]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80081ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081b6:	4937      	ldr	r1, [pc, #220]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80081b8:	4313      	orrs	r3, r2
 80081ba:	654b      	str	r3, [r1, #84]	; 0x54
 80081bc:	e001      	b.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081be:	7dfb      	ldrb	r3, [r7, #23]
 80081c0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d008      	beq.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80081ce:	4b31      	ldr	r3, [pc, #196]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80081d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081da:	492e      	ldr	r1, [pc, #184]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80081dc:	4313      	orrs	r3, r2
 80081de:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d009      	beq.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80081ec:	4b29      	ldr	r3, [pc, #164]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80081ee:	691b      	ldr	r3, [r3, #16]
 80081f0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80081fa:	4926      	ldr	r1, [pc, #152]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80081fc:	4313      	orrs	r3, r2
 80081fe:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008208:	2b00      	cmp	r3, #0
 800820a:	d008      	beq.n	800821e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800820c:	4b21      	ldr	r3, [pc, #132]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800820e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008210:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008218:	491e      	ldr	r1, [pc, #120]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800821a:	4313      	orrs	r3, r2
 800821c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008226:	2b00      	cmp	r3, #0
 8008228:	d00d      	beq.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800822a:	4b1a      	ldr	r3, [pc, #104]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	4a19      	ldr	r2, [pc, #100]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008230:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008234:	6113      	str	r3, [r2, #16]
 8008236:	4b17      	ldr	r3, [pc, #92]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008238:	691a      	ldr	r2, [r3, #16]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008240:	4914      	ldr	r1, [pc, #80]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008242:	4313      	orrs	r3, r2
 8008244:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	2b00      	cmp	r3, #0
 800824c:	da08      	bge.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800824e:	4b11      	ldr	r3, [pc, #68]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008252:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800825a:	490e      	ldr	r1, [pc, #56]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800825c:	4313      	orrs	r3, r2
 800825e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008268:	2b00      	cmp	r3, #0
 800826a:	d009      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800826c:	4b09      	ldr	r3, [pc, #36]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800826e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008270:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800827a:	4906      	ldr	r1, [pc, #24]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800827c:	4313      	orrs	r3, r2
 800827e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008280:	7dbb      	ldrb	r3, [r7, #22]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d101      	bne.n	800828a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8008286:	2300      	movs	r3, #0
 8008288:	e000      	b.n	800828c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800828a:	2301      	movs	r3, #1
}
 800828c:	4618      	mov	r0, r3
 800828e:	3718      	adds	r7, #24
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	58024400 	.word	0x58024400

08008298 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b090      	sub	sp, #64	; 0x40
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082a6:	f040 8095 	bne.w	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80082aa:	4bae      	ldr	r3, [pc, #696]	; (8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80082ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082ae:	f003 0307 	and.w	r3, r3, #7
 80082b2:	633b      	str	r3, [r7, #48]	; 0x30
 80082b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b6:	2b04      	cmp	r3, #4
 80082b8:	f200 8088 	bhi.w	80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80082bc:	a201      	add	r2, pc, #4	; (adr r2, 80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80082be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c2:	bf00      	nop
 80082c4:	080082d9 	.word	0x080082d9
 80082c8:	08008301 	.word	0x08008301
 80082cc:	08008329 	.word	0x08008329
 80082d0:	080083c5 	.word	0x080083c5
 80082d4:	08008351 	.word	0x08008351

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80082d8:	4ba2      	ldr	r3, [pc, #648]	; (8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082e4:	d108      	bne.n	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082ea:	4618      	mov	r0, r3
 80082ec:	f000 ff64 	bl	80091b8 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80082f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80082f4:	f000 bc95 	b.w	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80082f8:	2300      	movs	r3, #0
 80082fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082fc:	f000 bc91 	b.w	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008300:	4b98      	ldr	r3, [pc, #608]	; (8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008308:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800830c:	d108      	bne.n	8008320 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800830e:	f107 0318 	add.w	r3, r7, #24
 8008312:	4618      	mov	r0, r3
 8008314:	f000 fca8 	bl	8008c68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800831c:	f000 bc81 	b.w	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008320:	2300      	movs	r3, #0
 8008322:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008324:	f000 bc7d 	b.w	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008328:	4b8e      	ldr	r3, [pc, #568]	; (8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008334:	d108      	bne.n	8008348 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008336:	f107 030c 	add.w	r3, r7, #12
 800833a:	4618      	mov	r0, r3
 800833c:	f000 fde8 	bl	8008f10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008344:	f000 bc6d 	b.w	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008348:	2300      	movs	r3, #0
 800834a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800834c:	f000 bc69 	b.w	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008350:	4b84      	ldr	r3, [pc, #528]	; (8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008354:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008358:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800835a:	4b82      	ldr	r3, [pc, #520]	; (8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f003 0304 	and.w	r3, r3, #4
 8008362:	2b04      	cmp	r3, #4
 8008364:	d10c      	bne.n	8008380 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8008366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008368:	2b00      	cmp	r3, #0
 800836a:	d109      	bne.n	8008380 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800836c:	4b7d      	ldr	r3, [pc, #500]	; (8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	08db      	lsrs	r3, r3, #3
 8008372:	f003 0303 	and.w	r3, r3, #3
 8008376:	4a7c      	ldr	r2, [pc, #496]	; (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008378:	fa22 f303 	lsr.w	r3, r2, r3
 800837c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800837e:	e01f      	b.n	80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008380:	4b78      	ldr	r3, [pc, #480]	; (8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800838c:	d106      	bne.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800838e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008390:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008394:	d102      	bne.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008396:	4b75      	ldr	r3, [pc, #468]	; (800856c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008398:	63fb      	str	r3, [r7, #60]	; 0x3c
 800839a:	e011      	b.n	80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800839c:	4b71      	ldr	r3, [pc, #452]	; (8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083a8:	d106      	bne.n	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80083aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083b0:	d102      	bne.n	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80083b2:	4b6f      	ldr	r3, [pc, #444]	; (8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80083b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083b6:	e003      	b.n	80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80083b8:	2300      	movs	r3, #0
 80083ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80083bc:	f000 bc31 	b.w	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80083c0:	f000 bc2f 	b.w	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80083c4:	4b6b      	ldr	r3, [pc, #428]	; (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80083c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083c8:	f000 bc2b 	b.w	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80083cc:	2300      	movs	r3, #0
 80083ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083d0:	f000 bc27 	b.w	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083da:	f040 8095 	bne.w	8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80083de:	4b61      	ldr	r3, [pc, #388]	; (8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80083e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083e2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80083e6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80083e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083ee:	d04d      	beq.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80083f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083f6:	f200 8084 	bhi.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80083fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fc:	2bc0      	cmp	r3, #192	; 0xc0
 80083fe:	d07d      	beq.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008402:	2bc0      	cmp	r3, #192	; 0xc0
 8008404:	d87d      	bhi.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008408:	2b80      	cmp	r3, #128	; 0x80
 800840a:	d02d      	beq.n	8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800840c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840e:	2b80      	cmp	r3, #128	; 0x80
 8008410:	d877      	bhi.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008414:	2b00      	cmp	r3, #0
 8008416:	d003      	beq.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8008418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841a:	2b40      	cmp	r3, #64	; 0x40
 800841c:	d012      	beq.n	8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800841e:	e070      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008420:	4b50      	ldr	r3, [pc, #320]	; (8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008428:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800842c:	d107      	bne.n	800843e <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800842e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008432:	4618      	mov	r0, r3
 8008434:	f000 fec0 	bl	80091b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800843c:	e3f1      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800843e:	2300      	movs	r3, #0
 8008440:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008442:	e3ee      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008444:	4b47      	ldr	r3, [pc, #284]	; (8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800844c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008450:	d107      	bne.n	8008462 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008452:	f107 0318 	add.w	r3, r7, #24
 8008456:	4618      	mov	r0, r3
 8008458:	f000 fc06 	bl	8008c68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800845c:	69bb      	ldr	r3, [r7, #24]
 800845e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008460:	e3df      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008462:	2300      	movs	r3, #0
 8008464:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008466:	e3dc      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008468:	4b3e      	ldr	r3, [pc, #248]	; (8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008474:	d107      	bne.n	8008486 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008476:	f107 030c 	add.w	r3, r7, #12
 800847a:	4618      	mov	r0, r3
 800847c:	f000 fd48 	bl	8008f10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008484:	e3cd      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008486:	2300      	movs	r3, #0
 8008488:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800848a:	e3ca      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800848c:	4b35      	ldr	r3, [pc, #212]	; (8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800848e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008490:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008494:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008496:	4b33      	ldr	r3, [pc, #204]	; (8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 0304 	and.w	r3, r3, #4
 800849e:	2b04      	cmp	r3, #4
 80084a0:	d10c      	bne.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80084a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d109      	bne.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80084a8:	4b2e      	ldr	r3, [pc, #184]	; (8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	08db      	lsrs	r3, r3, #3
 80084ae:	f003 0303 	and.w	r3, r3, #3
 80084b2:	4a2d      	ldr	r2, [pc, #180]	; (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80084b4:	fa22 f303 	lsr.w	r3, r2, r3
 80084b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084ba:	e01e      	b.n	80084fa <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80084bc:	4b29      	ldr	r3, [pc, #164]	; (8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084c8:	d106      	bne.n	80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80084ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084d0:	d102      	bne.n	80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80084d2:	4b26      	ldr	r3, [pc, #152]	; (800856c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80084d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084d6:	e010      	b.n	80084fa <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80084d8:	4b22      	ldr	r3, [pc, #136]	; (8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084e4:	d106      	bne.n	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80084e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084ec:	d102      	bne.n	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80084ee:	4b20      	ldr	r3, [pc, #128]	; (8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80084f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084f2:	e002      	b.n	80084fa <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80084f4:	2300      	movs	r3, #0
 80084f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80084f8:	e393      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80084fa:	e392      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80084fc:	4b1d      	ldr	r3, [pc, #116]	; (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80084fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008500:	e38f      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008502:	2300      	movs	r3, #0
 8008504:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008506:	e38c      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800850e:	f040 80a7 	bne.w	8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008512:	4b14      	ldr	r3, [pc, #80]	; (8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008516:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800851a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800851c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008522:	d05f      	beq.n	80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008526:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800852a:	f200 8096 	bhi.w	800865a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800852e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008530:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008534:	f000 808e 	beq.w	8008654 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8008538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800853e:	f200 808c 	bhi.w	800865a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008544:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008548:	d03a      	beq.n	80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800854a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008550:	f200 8083 	bhi.w	800865a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00e      	beq.n	8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800855a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008560:	d01c      	beq.n	800859c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8008562:	e07a      	b.n	800865a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008564:	58024400 	.word	0x58024400
 8008568:	03d09000 	.word	0x03d09000
 800856c:	003d0900 	.word	0x003d0900
 8008570:	02dc6c00 	.word	0x02dc6c00
 8008574:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008578:	4baa      	ldr	r3, [pc, #680]	; (8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008580:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008584:	d107      	bne.n	8008596 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800858a:	4618      	mov	r0, r3
 800858c:	f000 fe14 	bl	80091b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008592:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008594:	e345      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008596:	2300      	movs	r3, #0
 8008598:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800859a:	e342      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800859c:	4ba1      	ldr	r3, [pc, #644]	; (8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085a8:	d107      	bne.n	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085aa:	f107 0318 	add.w	r3, r7, #24
 80085ae:	4618      	mov	r0, r3
 80085b0:	f000 fb5a 	bl	8008c68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80085b4:	69bb      	ldr	r3, [r7, #24]
 80085b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80085b8:	e333      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80085ba:	2300      	movs	r3, #0
 80085bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085be:	e330      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80085c0:	4b98      	ldr	r3, [pc, #608]	; (8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085cc:	d107      	bne.n	80085de <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085ce:	f107 030c 	add.w	r3, r7, #12
 80085d2:	4618      	mov	r0, r3
 80085d4:	f000 fc9c 	bl	8008f10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80085dc:	e321      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80085de:	2300      	movs	r3, #0
 80085e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085e2:	e31e      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80085e4:	4b8f      	ldr	r3, [pc, #572]	; (8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80085e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80085ec:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80085ee:	4b8d      	ldr	r3, [pc, #564]	; (8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f003 0304 	and.w	r3, r3, #4
 80085f6:	2b04      	cmp	r3, #4
 80085f8:	d10c      	bne.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80085fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d109      	bne.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008600:	4b88      	ldr	r3, [pc, #544]	; (8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	08db      	lsrs	r3, r3, #3
 8008606:	f003 0303 	and.w	r3, r3, #3
 800860a:	4a87      	ldr	r2, [pc, #540]	; (8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800860c:	fa22 f303 	lsr.w	r3, r2, r3
 8008610:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008612:	e01e      	b.n	8008652 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008614:	4b83      	ldr	r3, [pc, #524]	; (8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800861c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008620:	d106      	bne.n	8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8008622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008624:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008628:	d102      	bne.n	8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800862a:	4b80      	ldr	r3, [pc, #512]	; (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800862c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800862e:	e010      	b.n	8008652 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008630:	4b7c      	ldr	r3, [pc, #496]	; (8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008638:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800863c:	d106      	bne.n	800864c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800863e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008640:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008644:	d102      	bne.n	800864c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008646:	4b7a      	ldr	r3, [pc, #488]	; (8008830 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008648:	63fb      	str	r3, [r7, #60]	; 0x3c
 800864a:	e002      	b.n	8008652 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800864c:	2300      	movs	r3, #0
 800864e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008650:	e2e7      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008652:	e2e6      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008654:	4b77      	ldr	r3, [pc, #476]	; (8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008656:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008658:	e2e3      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800865a:	2300      	movs	r3, #0
 800865c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800865e:	e2e0      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008666:	f040 809c 	bne.w	80087a2 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800866a:	4b6e      	ldr	r3, [pc, #440]	; (8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800866c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800866e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008672:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008676:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800867a:	d054      	beq.n	8008726 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800867c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008682:	f200 808b 	bhi.w	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008688:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800868c:	f000 8083 	beq.w	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8008690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008692:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008696:	f200 8081 	bhi.w	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800869a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086a0:	d02f      	beq.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80086a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086a8:	d878      	bhi.n	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80086aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d004      	beq.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80086b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80086b6:	d012      	beq.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80086b8:	e070      	b.n	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80086ba:	4b5a      	ldr	r3, [pc, #360]	; (8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086c6:	d107      	bne.n	80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086cc:	4618      	mov	r0, r3
 80086ce:	f000 fd73 	bl	80091b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80086d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80086d6:	e2a4      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80086d8:	2300      	movs	r3, #0
 80086da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086dc:	e2a1      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086de:	4b51      	ldr	r3, [pc, #324]	; (8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80086ea:	d107      	bne.n	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086ec:	f107 0318 	add.w	r3, r7, #24
 80086f0:	4618      	mov	r0, r3
 80086f2:	f000 fab9 	bl	8008c68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80086f6:	69bb      	ldr	r3, [r7, #24]
 80086f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80086fa:	e292      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80086fc:	2300      	movs	r3, #0
 80086fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008700:	e28f      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008702:	4b48      	ldr	r3, [pc, #288]	; (8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800870a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800870e:	d107      	bne.n	8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008710:	f107 030c 	add.w	r3, r7, #12
 8008714:	4618      	mov	r0, r3
 8008716:	f000 fbfb 	bl	8008f10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800871e:	e280      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008720:	2300      	movs	r3, #0
 8008722:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008724:	e27d      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008726:	4b3f      	ldr	r3, [pc, #252]	; (8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800872a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800872e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008730:	4b3c      	ldr	r3, [pc, #240]	; (8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f003 0304 	and.w	r3, r3, #4
 8008738:	2b04      	cmp	r3, #4
 800873a:	d10c      	bne.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800873c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800873e:	2b00      	cmp	r3, #0
 8008740:	d109      	bne.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008742:	4b38      	ldr	r3, [pc, #224]	; (8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	08db      	lsrs	r3, r3, #3
 8008748:	f003 0303 	and.w	r3, r3, #3
 800874c:	4a36      	ldr	r2, [pc, #216]	; (8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800874e:	fa22 f303 	lsr.w	r3, r2, r3
 8008752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008754:	e01e      	b.n	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008756:	4b33      	ldr	r3, [pc, #204]	; (8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800875e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008762:	d106      	bne.n	8008772 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8008764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008766:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800876a:	d102      	bne.n	8008772 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800876c:	4b2f      	ldr	r3, [pc, #188]	; (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800876e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008770:	e010      	b.n	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008772:	4b2c      	ldr	r3, [pc, #176]	; (8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800877a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800877e:	d106      	bne.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8008780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008782:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008786:	d102      	bne.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008788:	4b29      	ldr	r3, [pc, #164]	; (8008830 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800878a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800878c:	e002      	b.n	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800878e:	2300      	movs	r3, #0
 8008790:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008792:	e246      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008794:	e245      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008796:	4b27      	ldr	r3, [pc, #156]	; (8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008798:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800879a:	e242      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800879c:	2300      	movs	r3, #0
 800879e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087a0:	e23f      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087a8:	f040 80a8 	bne.w	80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80087ac:	4b1d      	ldr	r3, [pc, #116]	; (8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80087ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087b0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80087b4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80087b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087bc:	d060      	beq.n	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 80087be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087c4:	f200 8097 	bhi.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80087c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80087ce:	f000 808f 	beq.w	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80087d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80087d8:	f200 808d 	bhi.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80087dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087e2:	d03b      	beq.n	800885c <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 80087e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087ea:	f200 8084 	bhi.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80087ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d004      	beq.n	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 80087f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087fa:	d01d      	beq.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 80087fc:	e07b      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80087fe:	4b09      	ldr	r3, [pc, #36]	; (8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008806:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800880a:	d107      	bne.n	800881c <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800880c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008810:	4618      	mov	r0, r3
 8008812:	f000 fcd1 	bl	80091b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008818:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800881a:	e202      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800881c:	2300      	movs	r3, #0
 800881e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008820:	e1ff      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008822:	bf00      	nop
 8008824:	58024400 	.word	0x58024400
 8008828:	03d09000 	.word	0x03d09000
 800882c:	003d0900 	.word	0x003d0900
 8008830:	02dc6c00 	.word	0x02dc6c00
 8008834:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008838:	4ba3      	ldr	r3, [pc, #652]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008840:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008844:	d107      	bne.n	8008856 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008846:	f107 0318 	add.w	r3, r7, #24
 800884a:	4618      	mov	r0, r3
 800884c:	f000 fa0c 	bl	8008c68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008850:	69bb      	ldr	r3, [r7, #24]
 8008852:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008854:	e1e5      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008856:	2300      	movs	r3, #0
 8008858:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800885a:	e1e2      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800885c:	4b9a      	ldr	r3, [pc, #616]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008864:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008868:	d107      	bne.n	800887a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800886a:	f107 030c 	add.w	r3, r7, #12
 800886e:	4618      	mov	r0, r3
 8008870:	f000 fb4e 	bl	8008f10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008878:	e1d3      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800887a:	2300      	movs	r3, #0
 800887c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800887e:	e1d0      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008880:	4b91      	ldr	r3, [pc, #580]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008884:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008888:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800888a:	4b8f      	ldr	r3, [pc, #572]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f003 0304 	and.w	r3, r3, #4
 8008892:	2b04      	cmp	r3, #4
 8008894:	d10c      	bne.n	80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8008896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008898:	2b00      	cmp	r3, #0
 800889a:	d109      	bne.n	80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800889c:	4b8a      	ldr	r3, [pc, #552]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	08db      	lsrs	r3, r3, #3
 80088a2:	f003 0303 	and.w	r3, r3, #3
 80088a6:	4a89      	ldr	r2, [pc, #548]	; (8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80088a8:	fa22 f303 	lsr.w	r3, r2, r3
 80088ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088ae:	e01e      	b.n	80088ee <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80088b0:	4b85      	ldr	r3, [pc, #532]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088bc:	d106      	bne.n	80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 80088be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088c4:	d102      	bne.n	80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80088c6:	4b82      	ldr	r3, [pc, #520]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80088c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088ca:	e010      	b.n	80088ee <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80088cc:	4b7e      	ldr	r3, [pc, #504]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088d8:	d106      	bne.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80088da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088e0:	d102      	bne.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80088e2:	4b7c      	ldr	r3, [pc, #496]	; (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80088e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088e6:	e002      	b.n	80088ee <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80088e8:	2300      	movs	r3, #0
 80088ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80088ec:	e199      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80088ee:	e198      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80088f0:	4b79      	ldr	r3, [pc, #484]	; (8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80088f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088f4:	e195      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80088f6:	2300      	movs	r3, #0
 80088f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088fa:	e192      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008902:	d173      	bne.n	80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008904:	4b70      	ldr	r3, [pc, #448]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008908:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800890c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800890e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008910:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008914:	d02f      	beq.n	8008976 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8008916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008918:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800891c:	d863      	bhi.n	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800891e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008920:	2b00      	cmp	r3, #0
 8008922:	d004      	beq.n	800892e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8008924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800892a:	d012      	beq.n	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 800892c:	e05b      	b.n	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800892e:	4b66      	ldr	r3, [pc, #408]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008936:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800893a:	d107      	bne.n	800894c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800893c:	f107 0318 	add.w	r3, r7, #24
 8008940:	4618      	mov	r0, r3
 8008942:	f000 f991 	bl	8008c68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800894a:	e16a      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800894c:	2300      	movs	r3, #0
 800894e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008950:	e167      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008952:	4b5d      	ldr	r3, [pc, #372]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800895a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800895e:	d107      	bne.n	8008970 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008960:	f107 030c 	add.w	r3, r7, #12
 8008964:	4618      	mov	r0, r3
 8008966:	f000 fad3 	bl	8008f10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800896e:	e158      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008970:	2300      	movs	r3, #0
 8008972:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008974:	e155      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008976:	4b54      	ldr	r3, [pc, #336]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800897a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800897e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008980:	4b51      	ldr	r3, [pc, #324]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f003 0304 	and.w	r3, r3, #4
 8008988:	2b04      	cmp	r3, #4
 800898a:	d10c      	bne.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 800898c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800898e:	2b00      	cmp	r3, #0
 8008990:	d109      	bne.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008992:	4b4d      	ldr	r3, [pc, #308]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	08db      	lsrs	r3, r3, #3
 8008998:	f003 0303 	and.w	r3, r3, #3
 800899c:	4a4b      	ldr	r2, [pc, #300]	; (8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800899e:	fa22 f303 	lsr.w	r3, r2, r3
 80089a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089a4:	e01e      	b.n	80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80089a6:	4b48      	ldr	r3, [pc, #288]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089b2:	d106      	bne.n	80089c2 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 80089b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089ba:	d102      	bne.n	80089c2 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80089bc:	4b44      	ldr	r3, [pc, #272]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80089be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089c0:	e010      	b.n	80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80089c2:	4b41      	ldr	r3, [pc, #260]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089ce:	d106      	bne.n	80089de <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80089d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089d6:	d102      	bne.n	80089de <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80089d8:	4b3e      	ldr	r3, [pc, #248]	; (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80089da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089dc:	e002      	b.n	80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80089de:	2300      	movs	r3, #0
 80089e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80089e2:	e11e      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80089e4:	e11d      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80089e6:	2300      	movs	r3, #0
 80089e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089ea:	e11a      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089f2:	d133      	bne.n	8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80089f4:	4b34      	ldr	r3, [pc, #208]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80089f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089fc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80089fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d004      	beq.n	8008a0e <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8008a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a0a:	d012      	beq.n	8008a32 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8008a0c:	e023      	b.n	8008a56 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a0e:	4b2e      	ldr	r3, [pc, #184]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a1a:	d107      	bne.n	8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a20:	4618      	mov	r0, r3
 8008a22:	f000 fbc9 	bl	80091b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a28:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008a2a:	e0fa      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a30:	e0f7      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a32:	4b25      	ldr	r3, [pc, #148]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a3e:	d107      	bne.n	8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a40:	f107 0318 	add.w	r3, r7, #24
 8008a44:	4618      	mov	r0, r3
 8008a46:	f000 f90f 	bl	8008c68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008a4a:	6a3b      	ldr	r3, [r7, #32]
 8008a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008a4e:	e0e8      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a50:	2300      	movs	r3, #0
 8008a52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a54:	e0e5      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008a56:	2300      	movs	r3, #0
 8008a58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a5a:	e0e2      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a62:	f040 808f 	bne.w	8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008a66:	4b18      	ldr	r3, [pc, #96]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a6a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008a6e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a76:	d075      	beq.n	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8008a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a7e:	d87e      	bhi.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a86:	d060      	beq.n	8008b4a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8008a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a8e:	d876      	bhi.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008a96:	d045      	beq.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8008a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008a9e:	d86e      	bhi.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008aa6:	d02b      	beq.n	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8008aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008aae:	d866      	bhi.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d004      	beq.n	8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8008ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008abc:	d00e      	beq.n	8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008abe:	e05e      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008ac0:	f000 f8bc 	bl	8008c3c <HAL_RCCEx_GetD3PCLK1Freq>
 8008ac4:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008ac6:	e0ac      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008ac8:	58024400 	.word	0x58024400
 8008acc:	03d09000 	.word	0x03d09000
 8008ad0:	003d0900 	.word	0x003d0900
 8008ad4:	02dc6c00 	.word	0x02dc6c00
 8008ad8:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008adc:	4b53      	ldr	r3, [pc, #332]	; (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ae4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ae8:	d107      	bne.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008aea:	f107 0318 	add.w	r3, r7, #24
 8008aee:	4618      	mov	r0, r3
 8008af0:	f000 f8ba 	bl	8008c68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008af8:	e093      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008afa:	2300      	movs	r3, #0
 8008afc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008afe:	e090      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b00:	4b4a      	ldr	r3, [pc, #296]	; (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b0c:	d107      	bne.n	8008b1e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b0e:	f107 030c 	add.w	r3, r7, #12
 8008b12:	4618      	mov	r0, r3
 8008b14:	f000 f9fc 	bl	8008f10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008b1c:	e081      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b22:	e07e      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008b24:	4b41      	ldr	r3, [pc, #260]	; (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f003 0304 	and.w	r3, r3, #4
 8008b2c:	2b04      	cmp	r3, #4
 8008b2e:	d109      	bne.n	8008b44 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b30:	4b3e      	ldr	r3, [pc, #248]	; (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	08db      	lsrs	r3, r3, #3
 8008b36:	f003 0303 	and.w	r3, r3, #3
 8008b3a:	4a3d      	ldr	r2, [pc, #244]	; (8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b40:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008b42:	e06e      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b44:	2300      	movs	r3, #0
 8008b46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b48:	e06b      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008b4a:	4b38      	ldr	r3, [pc, #224]	; (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b56:	d102      	bne.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8008b58:	4b36      	ldr	r3, [pc, #216]	; (8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008b5c:	e061      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b62:	e05e      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008b64:	4b31      	ldr	r3, [pc, #196]	; (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b70:	d102      	bne.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8008b72:	4b31      	ldr	r3, [pc, #196]	; (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008b74:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008b76:	e054      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b7c:	e051      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b82:	e04e      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b8a:	d148      	bne.n	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8008b8c:	4b27      	ldr	r3, [pc, #156]	; (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008b94:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b9c:	d02a      	beq.n	8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8008b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ba4:	d838      	bhi.n	8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8008ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d004      	beq.n	8008bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008bb2:	d00d      	beq.n	8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8008bb4:	e030      	b.n	8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008bb6:	4b1d      	ldr	r3, [pc, #116]	; (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008bc2:	d102      	bne.n	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8008bc4:	4b1c      	ldr	r3, [pc, #112]	; (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008bc8:	e02b      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bce:	e028      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008bd0:	4b16      	ldr	r3, [pc, #88]	; (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008bdc:	d107      	bne.n	8008bee <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008be2:	4618      	mov	r0, r3
 8008be4:	f000 fae8 	bl	80091b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008bec:	e019      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bf2:	e016      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008bf4:	4b0d      	ldr	r3, [pc, #52]	; (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c00:	d107      	bne.n	8008c12 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c02:	f107 0318 	add.w	r3, r7, #24
 8008c06:	4618      	mov	r0, r3
 8008c08:	f000 f82e 	bl	8008c68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c0c:	69fb      	ldr	r3, [r7, #28]
 8008c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008c10:	e007      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c12:	2300      	movs	r3, #0
 8008c14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c16:	e004      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c1c:	e001      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3740      	adds	r7, #64	; 0x40
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	58024400 	.word	0x58024400
 8008c30:	03d09000 	.word	0x03d09000
 8008c34:	003d0900 	.word	0x003d0900
 8008c38:	02dc6c00 	.word	0x02dc6c00

08008c3c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008c40:	f7fe fb8e 	bl	8007360 <HAL_RCC_GetHCLKFreq>
 8008c44:	4602      	mov	r2, r0
 8008c46:	4b06      	ldr	r3, [pc, #24]	; (8008c60 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008c48:	6a1b      	ldr	r3, [r3, #32]
 8008c4a:	091b      	lsrs	r3, r3, #4
 8008c4c:	f003 0307 	and.w	r3, r3, #7
 8008c50:	4904      	ldr	r1, [pc, #16]	; (8008c64 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008c52:	5ccb      	ldrb	r3, [r1, r3]
 8008c54:	f003 031f 	and.w	r3, r3, #31
 8008c58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	58024400 	.word	0x58024400
 8008c64:	0800f848 	.word	0x0800f848

08008c68 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b089      	sub	sp, #36	; 0x24
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c70:	4ba1      	ldr	r3, [pc, #644]	; (8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c74:	f003 0303 	and.w	r3, r3, #3
 8008c78:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008c7a:	4b9f      	ldr	r3, [pc, #636]	; (8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c7e:	0b1b      	lsrs	r3, r3, #12
 8008c80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c84:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008c86:	4b9c      	ldr	r3, [pc, #624]	; (8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8a:	091b      	lsrs	r3, r3, #4
 8008c8c:	f003 0301 	and.w	r3, r3, #1
 8008c90:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008c92:	4b99      	ldr	r3, [pc, #612]	; (8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c96:	08db      	lsrs	r3, r3, #3
 8008c98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c9c:	693a      	ldr	r2, [r7, #16]
 8008c9e:	fb02 f303 	mul.w	r3, r2, r3
 8008ca2:	ee07 3a90 	vmov	s15, r3
 8008ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008caa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	f000 8111 	beq.w	8008ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	2b02      	cmp	r3, #2
 8008cba:	f000 8083 	beq.w	8008dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008cbe:	69bb      	ldr	r3, [r7, #24]
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	f200 80a1 	bhi.w	8008e08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008cc6:	69bb      	ldr	r3, [r7, #24]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d003      	beq.n	8008cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d056      	beq.n	8008d80 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008cd2:	e099      	b.n	8008e08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cd4:	4b88      	ldr	r3, [pc, #544]	; (8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f003 0320 	and.w	r3, r3, #32
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d02d      	beq.n	8008d3c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008ce0:	4b85      	ldr	r3, [pc, #532]	; (8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	08db      	lsrs	r3, r3, #3
 8008ce6:	f003 0303 	and.w	r3, r3, #3
 8008cea:	4a84      	ldr	r2, [pc, #528]	; (8008efc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008cec:	fa22 f303 	lsr.w	r3, r2, r3
 8008cf0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	ee07 3a90 	vmov	s15, r3
 8008cf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	ee07 3a90 	vmov	s15, r3
 8008d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d0a:	4b7b      	ldr	r3, [pc, #492]	; (8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d12:	ee07 3a90 	vmov	s15, r3
 8008d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d1e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008f00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d36:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008d3a:	e087      	b.n	8008e4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	ee07 3a90 	vmov	s15, r3
 8008d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d46:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008f04 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d4e:	4b6a      	ldr	r3, [pc, #424]	; (8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d56:	ee07 3a90 	vmov	s15, r3
 8008d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d62:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008f00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d7e:	e065      	b.n	8008e4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	ee07 3a90 	vmov	s15, r3
 8008d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d8a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008f08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d92:	4b59      	ldr	r3, [pc, #356]	; (8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d9a:	ee07 3a90 	vmov	s15, r3
 8008d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008da2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008da6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008f00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008db2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008dc2:	e043      	b.n	8008e4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	ee07 3a90 	vmov	s15, r3
 8008dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008f0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dd6:	4b48      	ldr	r3, [pc, #288]	; (8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dde:	ee07 3a90 	vmov	s15, r3
 8008de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008de6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008f00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008df6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e06:	e021      	b.n	8008e4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	ee07 3a90 	vmov	s15, r3
 8008e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e12:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008f08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e1a:	4b37      	ldr	r3, [pc, #220]	; (8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e22:	ee07 3a90 	vmov	s15, r3
 8008e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e2e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008f00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e4a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008e4c:	4b2a      	ldr	r3, [pc, #168]	; (8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e50:	0a5b      	lsrs	r3, r3, #9
 8008e52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e56:	ee07 3a90 	vmov	s15, r3
 8008e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e66:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e72:	ee17 2a90 	vmov	r2, s15
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008e7a:	4b1f      	ldr	r3, [pc, #124]	; (8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e7e:	0c1b      	lsrs	r3, r3, #16
 8008e80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e84:	ee07 3a90 	vmov	s15, r3
 8008e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e94:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ea0:	ee17 2a90 	vmov	r2, s15
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008ea8:	4b13      	ldr	r3, [pc, #76]	; (8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eac:	0e1b      	lsrs	r3, r3, #24
 8008eae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008eb2:	ee07 3a90 	vmov	s15, r3
 8008eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ebe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ec2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ec6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008eca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ece:	ee17 2a90 	vmov	r2, s15
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008ed6:	e008      	b.n	8008eea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	609a      	str	r2, [r3, #8]
}
 8008eea:	bf00      	nop
 8008eec:	3724      	adds	r7, #36	; 0x24
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop
 8008ef8:	58024400 	.word	0x58024400
 8008efc:	03d09000 	.word	0x03d09000
 8008f00:	46000000 	.word	0x46000000
 8008f04:	4c742400 	.word	0x4c742400
 8008f08:	4a742400 	.word	0x4a742400
 8008f0c:	4c371b00 	.word	0x4c371b00

08008f10 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b089      	sub	sp, #36	; 0x24
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f18:	4ba1      	ldr	r3, [pc, #644]	; (80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f1c:	f003 0303 	and.w	r3, r3, #3
 8008f20:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008f22:	4b9f      	ldr	r3, [pc, #636]	; (80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f26:	0d1b      	lsrs	r3, r3, #20
 8008f28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f2c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008f2e:	4b9c      	ldr	r3, [pc, #624]	; (80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f32:	0a1b      	lsrs	r3, r3, #8
 8008f34:	f003 0301 	and.w	r3, r3, #1
 8008f38:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008f3a:	4b99      	ldr	r3, [pc, #612]	; (80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f3e:	08db      	lsrs	r3, r3, #3
 8008f40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f44:	693a      	ldr	r2, [r7, #16]
 8008f46:	fb02 f303 	mul.w	r3, r2, r3
 8008f4a:	ee07 3a90 	vmov	s15, r3
 8008f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f52:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	f000 8111 	beq.w	8009180 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	2b02      	cmp	r3, #2
 8008f62:	f000 8083 	beq.w	800906c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008f66:	69bb      	ldr	r3, [r7, #24]
 8008f68:	2b02      	cmp	r3, #2
 8008f6a:	f200 80a1 	bhi.w	80090b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008f6e:	69bb      	ldr	r3, [r7, #24]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d003      	beq.n	8008f7c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008f74:	69bb      	ldr	r3, [r7, #24]
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d056      	beq.n	8009028 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008f7a:	e099      	b.n	80090b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f7c:	4b88      	ldr	r3, [pc, #544]	; (80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 0320 	and.w	r3, r3, #32
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d02d      	beq.n	8008fe4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f88:	4b85      	ldr	r3, [pc, #532]	; (80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	08db      	lsrs	r3, r3, #3
 8008f8e:	f003 0303 	and.w	r3, r3, #3
 8008f92:	4a84      	ldr	r2, [pc, #528]	; (80091a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008f94:	fa22 f303 	lsr.w	r3, r2, r3
 8008f98:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	ee07 3a90 	vmov	s15, r3
 8008fa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	ee07 3a90 	vmov	s15, r3
 8008faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fb2:	4b7b      	ldr	r3, [pc, #492]	; (80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fba:	ee07 3a90 	vmov	s15, r3
 8008fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fc6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80091a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fde:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008fe2:	e087      	b.n	80090f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	ee07 3a90 	vmov	s15, r3
 8008fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80091ac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ff6:	4b6a      	ldr	r3, [pc, #424]	; (80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ffe:	ee07 3a90 	vmov	s15, r3
 8009002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009006:	ed97 6a03 	vldr	s12, [r7, #12]
 800900a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80091a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800900e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009016:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800901a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800901e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009022:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009026:	e065      	b.n	80090f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	ee07 3a90 	vmov	s15, r3
 800902e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009032:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80091b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800903a:	4b59      	ldr	r3, [pc, #356]	; (80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800903c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800903e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009042:	ee07 3a90 	vmov	s15, r3
 8009046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800904a:	ed97 6a03 	vldr	s12, [r7, #12]
 800904e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80091a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800905a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800905e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009066:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800906a:	e043      	b.n	80090f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	ee07 3a90 	vmov	s15, r3
 8009072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009076:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80091b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800907a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800907e:	4b48      	ldr	r3, [pc, #288]	; (80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009086:	ee07 3a90 	vmov	s15, r3
 800908a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800908e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009092:	eddf 5a45 	vldr	s11, [pc, #276]	; 80091a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800909a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800909e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80090ae:	e021      	b.n	80090f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	ee07 3a90 	vmov	s15, r3
 80090b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80091b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80090be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090c2:	4b37      	ldr	r3, [pc, #220]	; (80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ca:	ee07 3a90 	vmov	s15, r3
 80090ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80090d6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80091a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80090f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80090f4:	4b2a      	ldr	r3, [pc, #168]	; (80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f8:	0a5b      	lsrs	r3, r3, #9
 80090fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090fe:	ee07 3a90 	vmov	s15, r3
 8009102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009106:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800910a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800910e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009112:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009116:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800911a:	ee17 2a90 	vmov	r2, s15
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009122:	4b1f      	ldr	r3, [pc, #124]	; (80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009126:	0c1b      	lsrs	r3, r3, #16
 8009128:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800912c:	ee07 3a90 	vmov	s15, r3
 8009130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009134:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009138:	ee37 7a87 	vadd.f32	s14, s15, s14
 800913c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009140:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009144:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009148:	ee17 2a90 	vmov	r2, s15
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009150:	4b13      	ldr	r3, [pc, #76]	; (80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009154:	0e1b      	lsrs	r3, r3, #24
 8009156:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800915a:	ee07 3a90 	vmov	s15, r3
 800915e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009162:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009166:	ee37 7a87 	vadd.f32	s14, s15, s14
 800916a:	edd7 6a07 	vldr	s13, [r7, #28]
 800916e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009172:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009176:	ee17 2a90 	vmov	r2, s15
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800917e:	e008      	b.n	8009192 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2200      	movs	r2, #0
 8009184:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2200      	movs	r2, #0
 8009190:	609a      	str	r2, [r3, #8]
}
 8009192:	bf00      	nop
 8009194:	3724      	adds	r7, #36	; 0x24
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr
 800919e:	bf00      	nop
 80091a0:	58024400 	.word	0x58024400
 80091a4:	03d09000 	.word	0x03d09000
 80091a8:	46000000 	.word	0x46000000
 80091ac:	4c742400 	.word	0x4c742400
 80091b0:	4a742400 	.word	0x4a742400
 80091b4:	4c371b00 	.word	0x4c371b00

080091b8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b089      	sub	sp, #36	; 0x24
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80091c0:	4ba0      	ldr	r3, [pc, #640]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c4:	f003 0303 	and.w	r3, r3, #3
 80091c8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80091ca:	4b9e      	ldr	r3, [pc, #632]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ce:	091b      	lsrs	r3, r3, #4
 80091d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80091d4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80091d6:	4b9b      	ldr	r3, [pc, #620]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091da:	f003 0301 	and.w	r3, r3, #1
 80091de:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80091e0:	4b98      	ldr	r3, [pc, #608]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091e4:	08db      	lsrs	r3, r3, #3
 80091e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80091ea:	693a      	ldr	r2, [r7, #16]
 80091ec:	fb02 f303 	mul.w	r3, r2, r3
 80091f0:	ee07 3a90 	vmov	s15, r3
 80091f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091f8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	f000 8111 	beq.w	8009426 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	2b02      	cmp	r3, #2
 8009208:	f000 8083 	beq.w	8009312 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	2b02      	cmp	r3, #2
 8009210:	f200 80a1 	bhi.w	8009356 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009214:	69bb      	ldr	r3, [r7, #24]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d003      	beq.n	8009222 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	2b01      	cmp	r3, #1
 800921e:	d056      	beq.n	80092ce <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009220:	e099      	b.n	8009356 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009222:	4b88      	ldr	r3, [pc, #544]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f003 0320 	and.w	r3, r3, #32
 800922a:	2b00      	cmp	r3, #0
 800922c:	d02d      	beq.n	800928a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800922e:	4b85      	ldr	r3, [pc, #532]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	08db      	lsrs	r3, r3, #3
 8009234:	f003 0303 	and.w	r3, r3, #3
 8009238:	4a83      	ldr	r2, [pc, #524]	; (8009448 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800923a:	fa22 f303 	lsr.w	r3, r2, r3
 800923e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	ee07 3a90 	vmov	s15, r3
 8009246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	ee07 3a90 	vmov	s15, r3
 8009250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009254:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009258:	4b7a      	ldr	r3, [pc, #488]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800925a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800925c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009260:	ee07 3a90 	vmov	s15, r3
 8009264:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009268:	ed97 6a03 	vldr	s12, [r7, #12]
 800926c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800944c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009270:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009274:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009278:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800927c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009280:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009284:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009288:	e087      	b.n	800939a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	ee07 3a90 	vmov	s15, r3
 8009290:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009294:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009450 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009298:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800929c:	4b69      	ldr	r3, [pc, #420]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800929e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092a4:	ee07 3a90 	vmov	s15, r3
 80092a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80092b0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800944c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80092b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80092cc:	e065      	b.n	800939a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	ee07 3a90 	vmov	s15, r3
 80092d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092d8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009454 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80092dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092e0:	4b58      	ldr	r3, [pc, #352]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092e8:	ee07 3a90 	vmov	s15, r3
 80092ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80092f4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800944c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80092f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009300:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009304:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009308:	ee67 7a27 	vmul.f32	s15, s14, s15
 800930c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009310:	e043      	b.n	800939a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	ee07 3a90 	vmov	s15, r3
 8009318:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800931c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009458 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009320:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009324:	4b47      	ldr	r3, [pc, #284]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800932c:	ee07 3a90 	vmov	s15, r3
 8009330:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009334:	ed97 6a03 	vldr	s12, [r7, #12]
 8009338:	eddf 5a44 	vldr	s11, [pc, #272]	; 800944c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800933c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009340:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009344:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009348:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800934c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009350:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009354:	e021      	b.n	800939a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	ee07 3a90 	vmov	s15, r3
 800935c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009360:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009450 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009364:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009368:	4b36      	ldr	r3, [pc, #216]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800936a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800936c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009370:	ee07 3a90 	vmov	s15, r3
 8009374:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009378:	ed97 6a03 	vldr	s12, [r7, #12]
 800937c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800944c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009380:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009384:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009388:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800938c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009390:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009394:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009398:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800939a:	4b2a      	ldr	r3, [pc, #168]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800939c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800939e:	0a5b      	lsrs	r3, r3, #9
 80093a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093a4:	ee07 3a90 	vmov	s15, r3
 80093a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80093b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093c0:	ee17 2a90 	vmov	r2, s15
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80093c8:	4b1e      	ldr	r3, [pc, #120]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093cc:	0c1b      	lsrs	r3, r3, #16
 80093ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093d2:	ee07 3a90 	vmov	s15, r3
 80093d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80093e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093ee:	ee17 2a90 	vmov	r2, s15
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80093f6:	4b13      	ldr	r3, [pc, #76]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093fa:	0e1b      	lsrs	r3, r3, #24
 80093fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009400:	ee07 3a90 	vmov	s15, r3
 8009404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009408:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800940c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009410:	edd7 6a07 	vldr	s13, [r7, #28]
 8009414:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009418:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800941c:	ee17 2a90 	vmov	r2, s15
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009424:	e008      	b.n	8009438 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	609a      	str	r2, [r3, #8]
}
 8009438:	bf00      	nop
 800943a:	3724      	adds	r7, #36	; 0x24
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr
 8009444:	58024400 	.word	0x58024400
 8009448:	03d09000 	.word	0x03d09000
 800944c:	46000000 	.word	0x46000000
 8009450:	4c742400 	.word	0x4c742400
 8009454:	4a742400 	.word	0x4a742400
 8009458:	4c371b00 	.word	0x4c371b00

0800945c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009466:	2300      	movs	r3, #0
 8009468:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800946a:	4b53      	ldr	r3, [pc, #332]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 800946c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800946e:	f003 0303 	and.w	r3, r3, #3
 8009472:	2b03      	cmp	r3, #3
 8009474:	d101      	bne.n	800947a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009476:	2301      	movs	r3, #1
 8009478:	e099      	b.n	80095ae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800947a:	4b4f      	ldr	r3, [pc, #316]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4a4e      	ldr	r2, [pc, #312]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 8009480:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009484:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009486:	f7fa f9fd 	bl	8003884 <HAL_GetTick>
 800948a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800948c:	e008      	b.n	80094a0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800948e:	f7fa f9f9 	bl	8003884 <HAL_GetTick>
 8009492:	4602      	mov	r2, r0
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	1ad3      	subs	r3, r2, r3
 8009498:	2b02      	cmp	r3, #2
 800949a:	d901      	bls.n	80094a0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800949c:	2303      	movs	r3, #3
 800949e:	e086      	b.n	80095ae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80094a0:	4b45      	ldr	r3, [pc, #276]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d1f0      	bne.n	800948e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80094ac:	4b42      	ldr	r3, [pc, #264]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 80094ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094b0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	031b      	lsls	r3, r3, #12
 80094ba:	493f      	ldr	r1, [pc, #252]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 80094bc:	4313      	orrs	r3, r2
 80094be:	628b      	str	r3, [r1, #40]	; 0x28
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	3b01      	subs	r3, #1
 80094c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	689b      	ldr	r3, [r3, #8]
 80094ce:	3b01      	subs	r3, #1
 80094d0:	025b      	lsls	r3, r3, #9
 80094d2:	b29b      	uxth	r3, r3
 80094d4:	431a      	orrs	r2, r3
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	3b01      	subs	r3, #1
 80094dc:	041b      	lsls	r3, r3, #16
 80094de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80094e2:	431a      	orrs	r2, r3
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	691b      	ldr	r3, [r3, #16]
 80094e8:	3b01      	subs	r3, #1
 80094ea:	061b      	lsls	r3, r3, #24
 80094ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80094f0:	4931      	ldr	r1, [pc, #196]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 80094f2:	4313      	orrs	r3, r2
 80094f4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80094f6:	4b30      	ldr	r3, [pc, #192]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 80094f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	695b      	ldr	r3, [r3, #20]
 8009502:	492d      	ldr	r1, [pc, #180]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 8009504:	4313      	orrs	r3, r2
 8009506:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009508:	4b2b      	ldr	r3, [pc, #172]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 800950a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950c:	f023 0220 	bic.w	r2, r3, #32
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	699b      	ldr	r3, [r3, #24]
 8009514:	4928      	ldr	r1, [pc, #160]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 8009516:	4313      	orrs	r3, r2
 8009518:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800951a:	4b27      	ldr	r3, [pc, #156]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 800951c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800951e:	4a26      	ldr	r2, [pc, #152]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 8009520:	f023 0310 	bic.w	r3, r3, #16
 8009524:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009526:	4b24      	ldr	r3, [pc, #144]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 8009528:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800952a:	4b24      	ldr	r3, [pc, #144]	; (80095bc <RCCEx_PLL2_Config+0x160>)
 800952c:	4013      	ands	r3, r2
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	69d2      	ldr	r2, [r2, #28]
 8009532:	00d2      	lsls	r2, r2, #3
 8009534:	4920      	ldr	r1, [pc, #128]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 8009536:	4313      	orrs	r3, r2
 8009538:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800953a:	4b1f      	ldr	r3, [pc, #124]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 800953c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800953e:	4a1e      	ldr	r2, [pc, #120]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 8009540:	f043 0310 	orr.w	r3, r3, #16
 8009544:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d106      	bne.n	800955a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800954c:	4b1a      	ldr	r3, [pc, #104]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 800954e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009550:	4a19      	ldr	r2, [pc, #100]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 8009552:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009556:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009558:	e00f      	b.n	800957a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	2b01      	cmp	r3, #1
 800955e:	d106      	bne.n	800956e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009560:	4b15      	ldr	r3, [pc, #84]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 8009562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009564:	4a14      	ldr	r2, [pc, #80]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 8009566:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800956a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800956c:	e005      	b.n	800957a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800956e:	4b12      	ldr	r3, [pc, #72]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 8009570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009572:	4a11      	ldr	r2, [pc, #68]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 8009574:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009578:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800957a:	4b0f      	ldr	r3, [pc, #60]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a0e      	ldr	r2, [pc, #56]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 8009580:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009584:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009586:	f7fa f97d 	bl	8003884 <HAL_GetTick>
 800958a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800958c:	e008      	b.n	80095a0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800958e:	f7fa f979 	bl	8003884 <HAL_GetTick>
 8009592:	4602      	mov	r2, r0
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	1ad3      	subs	r3, r2, r3
 8009598:	2b02      	cmp	r3, #2
 800959a:	d901      	bls.n	80095a0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800959c:	2303      	movs	r3, #3
 800959e:	e006      	b.n	80095ae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80095a0:	4b05      	ldr	r3, [pc, #20]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d0f0      	beq.n	800958e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80095ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3710      	adds	r7, #16
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	58024400 	.word	0x58024400
 80095bc:	ffff0007 	.word	0xffff0007

080095c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80095ca:	2300      	movs	r3, #0
 80095cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80095ce:	4b53      	ldr	r3, [pc, #332]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 80095d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d2:	f003 0303 	and.w	r3, r3, #3
 80095d6:	2b03      	cmp	r3, #3
 80095d8:	d101      	bne.n	80095de <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80095da:	2301      	movs	r3, #1
 80095dc:	e099      	b.n	8009712 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80095de:	4b4f      	ldr	r3, [pc, #316]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a4e      	ldr	r2, [pc, #312]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 80095e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80095e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095ea:	f7fa f94b 	bl	8003884 <HAL_GetTick>
 80095ee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80095f0:	e008      	b.n	8009604 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80095f2:	f7fa f947 	bl	8003884 <HAL_GetTick>
 80095f6:	4602      	mov	r2, r0
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	1ad3      	subs	r3, r2, r3
 80095fc:	2b02      	cmp	r3, #2
 80095fe:	d901      	bls.n	8009604 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009600:	2303      	movs	r3, #3
 8009602:	e086      	b.n	8009712 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009604:	4b45      	ldr	r3, [pc, #276]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800960c:	2b00      	cmp	r3, #0
 800960e:	d1f0      	bne.n	80095f2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009610:	4b42      	ldr	r3, [pc, #264]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 8009612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009614:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	051b      	lsls	r3, r3, #20
 800961e:	493f      	ldr	r1, [pc, #252]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 8009620:	4313      	orrs	r3, r2
 8009622:	628b      	str	r3, [r1, #40]	; 0x28
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	3b01      	subs	r3, #1
 800962a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	3b01      	subs	r3, #1
 8009634:	025b      	lsls	r3, r3, #9
 8009636:	b29b      	uxth	r3, r3
 8009638:	431a      	orrs	r2, r3
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	68db      	ldr	r3, [r3, #12]
 800963e:	3b01      	subs	r3, #1
 8009640:	041b      	lsls	r3, r3, #16
 8009642:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009646:	431a      	orrs	r2, r3
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	691b      	ldr	r3, [r3, #16]
 800964c:	3b01      	subs	r3, #1
 800964e:	061b      	lsls	r3, r3, #24
 8009650:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009654:	4931      	ldr	r1, [pc, #196]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 8009656:	4313      	orrs	r3, r2
 8009658:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800965a:	4b30      	ldr	r3, [pc, #192]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 800965c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800965e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	695b      	ldr	r3, [r3, #20]
 8009666:	492d      	ldr	r1, [pc, #180]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 8009668:	4313      	orrs	r3, r2
 800966a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800966c:	4b2b      	ldr	r3, [pc, #172]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 800966e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009670:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	699b      	ldr	r3, [r3, #24]
 8009678:	4928      	ldr	r1, [pc, #160]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 800967a:	4313      	orrs	r3, r2
 800967c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800967e:	4b27      	ldr	r3, [pc, #156]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 8009680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009682:	4a26      	ldr	r2, [pc, #152]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 8009684:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009688:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800968a:	4b24      	ldr	r3, [pc, #144]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 800968c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800968e:	4b24      	ldr	r3, [pc, #144]	; (8009720 <RCCEx_PLL3_Config+0x160>)
 8009690:	4013      	ands	r3, r2
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	69d2      	ldr	r2, [r2, #28]
 8009696:	00d2      	lsls	r2, r2, #3
 8009698:	4920      	ldr	r1, [pc, #128]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 800969a:	4313      	orrs	r3, r2
 800969c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800969e:	4b1f      	ldr	r3, [pc, #124]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 80096a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a2:	4a1e      	ldr	r2, [pc, #120]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 80096a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d106      	bne.n	80096be <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80096b0:	4b1a      	ldr	r3, [pc, #104]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 80096b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b4:	4a19      	ldr	r2, [pc, #100]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 80096b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80096ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80096bc:	e00f      	b.n	80096de <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d106      	bne.n	80096d2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80096c4:	4b15      	ldr	r3, [pc, #84]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 80096c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c8:	4a14      	ldr	r2, [pc, #80]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 80096ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80096ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80096d0:	e005      	b.n	80096de <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80096d2:	4b12      	ldr	r3, [pc, #72]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 80096d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d6:	4a11      	ldr	r2, [pc, #68]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 80096d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80096dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80096de:	4b0f      	ldr	r3, [pc, #60]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a0e      	ldr	r2, [pc, #56]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 80096e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096ea:	f7fa f8cb 	bl	8003884 <HAL_GetTick>
 80096ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80096f0:	e008      	b.n	8009704 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80096f2:	f7fa f8c7 	bl	8003884 <HAL_GetTick>
 80096f6:	4602      	mov	r2, r0
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	1ad3      	subs	r3, r2, r3
 80096fc:	2b02      	cmp	r3, #2
 80096fe:	d901      	bls.n	8009704 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009700:	2303      	movs	r3, #3
 8009702:	e006      	b.n	8009712 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009704:	4b05      	ldr	r3, [pc, #20]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800970c:	2b00      	cmp	r3, #0
 800970e:	d0f0      	beq.n	80096f2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009710:	7bfb      	ldrb	r3, [r7, #15]
}
 8009712:	4618      	mov	r0, r3
 8009714:	3710      	adds	r7, #16
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
 800971a:	bf00      	nop
 800971c:	58024400 	.word	0x58024400
 8009720:	ffff0007 	.word	0xffff0007

08009724 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b084      	sub	sp, #16
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800972c:	2300      	movs	r3, #0
 800972e:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d101      	bne.n	800973a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8009736:	2301      	movs	r3, #1
 8009738:	e0eb      	b.n	8009912 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2200      	movs	r2, #0
 800973e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a75      	ldr	r2, [pc, #468]	; (800991c <HAL_SPI_Init+0x1f8>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d00f      	beq.n	800976a <HAL_SPI_Init+0x46>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	4a74      	ldr	r2, [pc, #464]	; (8009920 <HAL_SPI_Init+0x1fc>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d00a      	beq.n	800976a <HAL_SPI_Init+0x46>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4a72      	ldr	r2, [pc, #456]	; (8009924 <HAL_SPI_Init+0x200>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d005      	beq.n	800976a <HAL_SPI_Init+0x46>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	68db      	ldr	r3, [r3, #12]
 8009762:	2b0f      	cmp	r3, #15
 8009764:	d901      	bls.n	800976a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8009766:	2301      	movs	r3, #1
 8009768:	e0d3      	b.n	8009912 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 f8dc 	bl	8009928 <SPI_GetPacketSize>
 8009770:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a69      	ldr	r2, [pc, #420]	; (800991c <HAL_SPI_Init+0x1f8>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d00c      	beq.n	8009796 <HAL_SPI_Init+0x72>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a67      	ldr	r2, [pc, #412]	; (8009920 <HAL_SPI_Init+0x1fc>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d007      	beq.n	8009796 <HAL_SPI_Init+0x72>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a66      	ldr	r2, [pc, #408]	; (8009924 <HAL_SPI_Init+0x200>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d002      	beq.n	8009796 <HAL_SPI_Init+0x72>
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	2b08      	cmp	r3, #8
 8009794:	d811      	bhi.n	80097ba <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800979a:	4a60      	ldr	r2, [pc, #384]	; (800991c <HAL_SPI_Init+0x1f8>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d009      	beq.n	80097b4 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a5e      	ldr	r2, [pc, #376]	; (8009920 <HAL_SPI_Init+0x1fc>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d004      	beq.n	80097b4 <HAL_SPI_Init+0x90>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a5d      	ldr	r2, [pc, #372]	; (8009924 <HAL_SPI_Init+0x200>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d104      	bne.n	80097be <HAL_SPI_Init+0x9a>
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	2b10      	cmp	r3, #16
 80097b8:	d901      	bls.n	80097be <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	e0a9      	b.n	8009912 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d106      	bne.n	80097d8 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2200      	movs	r2, #0
 80097ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f7f9 f898 	bl	8002908 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2202      	movs	r2, #2
 80097dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	681a      	ldr	r2, [r3, #0]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f022 0201 	bic.w	r2, r2, #1
 80097ee:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	699b      	ldr	r3, [r3, #24]
 80097f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80097f8:	d119      	bne.n	800982e <HAL_SPI_Init+0x10a>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009802:	d103      	bne.n	800980c <HAL_SPI_Init+0xe8>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009808:	2b00      	cmp	r3, #0
 800980a:	d008      	beq.n	800981e <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009810:	2b00      	cmp	r3, #0
 8009812:	d10c      	bne.n	800982e <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009818:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800981c:	d107      	bne.n	800982e <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	681a      	ldr	r2, [r3, #0]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800982c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	69da      	ldr	r2, [r3, #28]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009836:	431a      	orrs	r2, r3
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	431a      	orrs	r2, r3
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009840:	ea42 0103 	orr.w	r1, r2, r3
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	68da      	ldr	r2, [r3, #12]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	430a      	orrs	r2, r1
 800984e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009858:	431a      	orrs	r2, r3
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800985e:	431a      	orrs	r2, r3
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	699b      	ldr	r3, [r3, #24]
 8009864:	431a      	orrs	r2, r3
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	691b      	ldr	r3, [r3, #16]
 800986a:	431a      	orrs	r2, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	695b      	ldr	r3, [r3, #20]
 8009870:	431a      	orrs	r2, r3
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6a1b      	ldr	r3, [r3, #32]
 8009876:	431a      	orrs	r2, r3
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	431a      	orrs	r2, r3
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009882:	431a      	orrs	r2, r3
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	689b      	ldr	r3, [r3, #8]
 8009888:	431a      	orrs	r2, r3
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800988e:	ea42 0103 	orr.w	r1, r2, r3
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	430a      	orrs	r2, r1
 800989c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d113      	bne.n	80098ce <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	689b      	ldr	r3, [r3, #8]
 80098ac:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098b8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80098cc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f022 0201 	bic.w	r2, r2, #1
 80098dc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d00a      	beq.n	8009900 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	68db      	ldr	r3, [r3, #12]
 80098f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	430a      	orrs	r2, r1
 80098fe:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2200      	movs	r2, #0
 8009904:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2201      	movs	r2, #1
 800990c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009910:	2300      	movs	r3, #0
}
 8009912:	4618      	mov	r0, r3
 8009914:	3710      	adds	r7, #16
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	40013000 	.word	0x40013000
 8009920:	40003800 	.word	0x40003800
 8009924:	40003c00 	.word	0x40003c00

08009928 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009934:	095b      	lsrs	r3, r3, #5
 8009936:	3301      	adds	r3, #1
 8009938:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	68db      	ldr	r3, [r3, #12]
 800993e:	3301      	adds	r3, #1
 8009940:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	3307      	adds	r3, #7
 8009946:	08db      	lsrs	r3, r3, #3
 8009948:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	68fa      	ldr	r2, [r7, #12]
 800994e:	fb02 f303 	mul.w	r3, r2, r3
}
 8009952:	4618      	mov	r0, r3
 8009954:	3714      	adds	r7, #20
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr

0800995e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800995e:	b580      	push	{r7, lr}
 8009960:	b082      	sub	sp, #8
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d101      	bne.n	8009970 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800996c:	2301      	movs	r3, #1
 800996e:	e049      	b.n	8009a04 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009976:	b2db      	uxtb	r3, r3
 8009978:	2b00      	cmp	r3, #0
 800997a:	d106      	bne.n	800998a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2200      	movs	r2, #0
 8009980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f7f9 f945 	bl	8002c14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2202      	movs	r2, #2
 800998e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681a      	ldr	r2, [r3, #0]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	3304      	adds	r3, #4
 800999a:	4619      	mov	r1, r3
 800999c:	4610      	mov	r0, r2
 800999e:	f000 fa91 	bl	8009ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2201      	movs	r2, #1
 80099a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2201      	movs	r2, #1
 80099ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2201      	movs	r2, #1
 80099b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2201      	movs	r2, #1
 80099be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2201      	movs	r2, #1
 80099c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2201      	movs	r2, #1
 80099ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2201      	movs	r2, #1
 80099d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2201      	movs	r2, #1
 80099de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2201      	movs	r2, #1
 80099e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2201      	movs	r2, #1
 80099ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2201      	movs	r2, #1
 80099f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2201      	movs	r2, #1
 80099fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009a02:	2300      	movs	r3, #0
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3708      	adds	r7, #8
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b082      	sub	sp, #8
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d101      	bne.n	8009a1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	e049      	b.n	8009ab2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a24:	b2db      	uxtb	r3, r3
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d106      	bne.n	8009a38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f7f9 f8b4 	bl	8002ba0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2202      	movs	r2, #2
 8009a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681a      	ldr	r2, [r3, #0]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	3304      	adds	r3, #4
 8009a48:	4619      	mov	r1, r3
 8009a4a:	4610      	mov	r0, r2
 8009a4c:	f000 fa3a 	bl	8009ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2201      	movs	r2, #1
 8009a54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2201      	movs	r2, #1
 8009a64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2201      	movs	r2, #1
 8009a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2201      	movs	r2, #1
 8009a84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2201      	movs	r2, #1
 8009a94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ab0:	2300      	movs	r3, #0
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3708      	adds	r7, #8
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
	...

08009abc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	60b9      	str	r1, [r7, #8]
 8009ac6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d101      	bne.n	8009ad6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009ad2:	2302      	movs	r3, #2
 8009ad4:	e0fd      	b.n	8009cd2 <HAL_TIM_PWM_ConfigChannel+0x216>
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2201      	movs	r2, #1
 8009ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2b14      	cmp	r3, #20
 8009ae2:	f200 80f0 	bhi.w	8009cc6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8009ae6:	a201      	add	r2, pc, #4	; (adr r2, 8009aec <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aec:	08009b41 	.word	0x08009b41
 8009af0:	08009cc7 	.word	0x08009cc7
 8009af4:	08009cc7 	.word	0x08009cc7
 8009af8:	08009cc7 	.word	0x08009cc7
 8009afc:	08009b81 	.word	0x08009b81
 8009b00:	08009cc7 	.word	0x08009cc7
 8009b04:	08009cc7 	.word	0x08009cc7
 8009b08:	08009cc7 	.word	0x08009cc7
 8009b0c:	08009bc3 	.word	0x08009bc3
 8009b10:	08009cc7 	.word	0x08009cc7
 8009b14:	08009cc7 	.word	0x08009cc7
 8009b18:	08009cc7 	.word	0x08009cc7
 8009b1c:	08009c03 	.word	0x08009c03
 8009b20:	08009cc7 	.word	0x08009cc7
 8009b24:	08009cc7 	.word	0x08009cc7
 8009b28:	08009cc7 	.word	0x08009cc7
 8009b2c:	08009c45 	.word	0x08009c45
 8009b30:	08009cc7 	.word	0x08009cc7
 8009b34:	08009cc7 	.word	0x08009cc7
 8009b38:	08009cc7 	.word	0x08009cc7
 8009b3c:	08009c85 	.word	0x08009c85
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	68b9      	ldr	r1, [r7, #8]
 8009b46:	4618      	mov	r0, r3
 8009b48:	f000 fa56 	bl	8009ff8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	699a      	ldr	r2, [r3, #24]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f042 0208 	orr.w	r2, r2, #8
 8009b5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	699a      	ldr	r2, [r3, #24]
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f022 0204 	bic.w	r2, r2, #4
 8009b6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	6999      	ldr	r1, [r3, #24]
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	691a      	ldr	r2, [r3, #16]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	430a      	orrs	r2, r1
 8009b7c:	619a      	str	r2, [r3, #24]
      break;
 8009b7e:	e0a3      	b.n	8009cc8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	68b9      	ldr	r1, [r7, #8]
 8009b86:	4618      	mov	r0, r3
 8009b88:	f000 fac6 	bl	800a118 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	699a      	ldr	r2, [r3, #24]
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	699a      	ldr	r2, [r3, #24]
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009baa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	6999      	ldr	r1, [r3, #24]
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	691b      	ldr	r3, [r3, #16]
 8009bb6:	021a      	lsls	r2, r3, #8
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	430a      	orrs	r2, r1
 8009bbe:	619a      	str	r2, [r3, #24]
      break;
 8009bc0:	e082      	b.n	8009cc8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	68b9      	ldr	r1, [r7, #8]
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f000 fb2f 	bl	800a22c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	69da      	ldr	r2, [r3, #28]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f042 0208 	orr.w	r2, r2, #8
 8009bdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	69da      	ldr	r2, [r3, #28]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f022 0204 	bic.w	r2, r2, #4
 8009bec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	69d9      	ldr	r1, [r3, #28]
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	691a      	ldr	r2, [r3, #16]
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	430a      	orrs	r2, r1
 8009bfe:	61da      	str	r2, [r3, #28]
      break;
 8009c00:	e062      	b.n	8009cc8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	68b9      	ldr	r1, [r7, #8]
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f000 fb95 	bl	800a338 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	69da      	ldr	r2, [r3, #28]
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	69da      	ldr	r2, [r3, #28]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	69d9      	ldr	r1, [r3, #28]
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	691b      	ldr	r3, [r3, #16]
 8009c38:	021a      	lsls	r2, r3, #8
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	430a      	orrs	r2, r1
 8009c40:	61da      	str	r2, [r3, #28]
      break;
 8009c42:	e041      	b.n	8009cc8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	68b9      	ldr	r1, [r7, #8]
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f000 fbdc 	bl	800a408 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f042 0208 	orr.w	r2, r2, #8
 8009c5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f022 0204 	bic.w	r2, r2, #4
 8009c6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	691a      	ldr	r2, [r3, #16]
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	430a      	orrs	r2, r1
 8009c80:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009c82:	e021      	b.n	8009cc8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	68b9      	ldr	r1, [r7, #8]
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f000 fc1e 	bl	800a4cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	691b      	ldr	r3, [r3, #16]
 8009cba:	021a      	lsls	r2, r3, #8
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	430a      	orrs	r2, r1
 8009cc2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009cc4:	e000      	b.n	8009cc8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8009cc6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009cd0:	2300      	movs	r3, #0
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3710      	adds	r7, #16
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop

08009cdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b084      	sub	sp, #16
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d101      	bne.n	8009cf4 <HAL_TIM_ConfigClockSource+0x18>
 8009cf0:	2302      	movs	r3, #2
 8009cf2:	e0db      	b.n	8009eac <HAL_TIM_ConfigClockSource+0x1d0>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2202      	movs	r2, #2
 8009d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	689b      	ldr	r3, [r3, #8]
 8009d0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009d0c:	68fa      	ldr	r2, [r7, #12]
 8009d0e:	4b69      	ldr	r3, [pc, #420]	; (8009eb4 <HAL_TIM_ConfigClockSource+0x1d8>)
 8009d10:	4013      	ands	r3, r2
 8009d12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d1a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	68fa      	ldr	r2, [r7, #12]
 8009d22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4a63      	ldr	r2, [pc, #396]	; (8009eb8 <HAL_TIM_ConfigClockSource+0x1dc>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	f000 80a9 	beq.w	8009e82 <HAL_TIM_ConfigClockSource+0x1a6>
 8009d30:	4a61      	ldr	r2, [pc, #388]	; (8009eb8 <HAL_TIM_ConfigClockSource+0x1dc>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	f200 80ae 	bhi.w	8009e94 <HAL_TIM_ConfigClockSource+0x1b8>
 8009d38:	4a60      	ldr	r2, [pc, #384]	; (8009ebc <HAL_TIM_ConfigClockSource+0x1e0>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	f000 80a1 	beq.w	8009e82 <HAL_TIM_ConfigClockSource+0x1a6>
 8009d40:	4a5e      	ldr	r2, [pc, #376]	; (8009ebc <HAL_TIM_ConfigClockSource+0x1e0>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	f200 80a6 	bhi.w	8009e94 <HAL_TIM_ConfigClockSource+0x1b8>
 8009d48:	4a5d      	ldr	r2, [pc, #372]	; (8009ec0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	f000 8099 	beq.w	8009e82 <HAL_TIM_ConfigClockSource+0x1a6>
 8009d50:	4a5b      	ldr	r2, [pc, #364]	; (8009ec0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	f200 809e 	bhi.w	8009e94 <HAL_TIM_ConfigClockSource+0x1b8>
 8009d58:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009d5c:	f000 8091 	beq.w	8009e82 <HAL_TIM_ConfigClockSource+0x1a6>
 8009d60:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009d64:	f200 8096 	bhi.w	8009e94 <HAL_TIM_ConfigClockSource+0x1b8>
 8009d68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d6c:	f000 8089 	beq.w	8009e82 <HAL_TIM_ConfigClockSource+0x1a6>
 8009d70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d74:	f200 808e 	bhi.w	8009e94 <HAL_TIM_ConfigClockSource+0x1b8>
 8009d78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d7c:	d03e      	beq.n	8009dfc <HAL_TIM_ConfigClockSource+0x120>
 8009d7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d82:	f200 8087 	bhi.w	8009e94 <HAL_TIM_ConfigClockSource+0x1b8>
 8009d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d8a:	f000 8085 	beq.w	8009e98 <HAL_TIM_ConfigClockSource+0x1bc>
 8009d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d92:	d87f      	bhi.n	8009e94 <HAL_TIM_ConfigClockSource+0x1b8>
 8009d94:	2b70      	cmp	r3, #112	; 0x70
 8009d96:	d01a      	beq.n	8009dce <HAL_TIM_ConfigClockSource+0xf2>
 8009d98:	2b70      	cmp	r3, #112	; 0x70
 8009d9a:	d87b      	bhi.n	8009e94 <HAL_TIM_ConfigClockSource+0x1b8>
 8009d9c:	2b60      	cmp	r3, #96	; 0x60
 8009d9e:	d050      	beq.n	8009e42 <HAL_TIM_ConfigClockSource+0x166>
 8009da0:	2b60      	cmp	r3, #96	; 0x60
 8009da2:	d877      	bhi.n	8009e94 <HAL_TIM_ConfigClockSource+0x1b8>
 8009da4:	2b50      	cmp	r3, #80	; 0x50
 8009da6:	d03c      	beq.n	8009e22 <HAL_TIM_ConfigClockSource+0x146>
 8009da8:	2b50      	cmp	r3, #80	; 0x50
 8009daa:	d873      	bhi.n	8009e94 <HAL_TIM_ConfigClockSource+0x1b8>
 8009dac:	2b40      	cmp	r3, #64	; 0x40
 8009dae:	d058      	beq.n	8009e62 <HAL_TIM_ConfigClockSource+0x186>
 8009db0:	2b40      	cmp	r3, #64	; 0x40
 8009db2:	d86f      	bhi.n	8009e94 <HAL_TIM_ConfigClockSource+0x1b8>
 8009db4:	2b30      	cmp	r3, #48	; 0x30
 8009db6:	d064      	beq.n	8009e82 <HAL_TIM_ConfigClockSource+0x1a6>
 8009db8:	2b30      	cmp	r3, #48	; 0x30
 8009dba:	d86b      	bhi.n	8009e94 <HAL_TIM_ConfigClockSource+0x1b8>
 8009dbc:	2b20      	cmp	r3, #32
 8009dbe:	d060      	beq.n	8009e82 <HAL_TIM_ConfigClockSource+0x1a6>
 8009dc0:	2b20      	cmp	r3, #32
 8009dc2:	d867      	bhi.n	8009e94 <HAL_TIM_ConfigClockSource+0x1b8>
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d05c      	beq.n	8009e82 <HAL_TIM_ConfigClockSource+0x1a6>
 8009dc8:	2b10      	cmp	r3, #16
 8009dca:	d05a      	beq.n	8009e82 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009dcc:	e062      	b.n	8009e94 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6818      	ldr	r0, [r3, #0]
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	6899      	ldr	r1, [r3, #8]
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	685a      	ldr	r2, [r3, #4]
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	68db      	ldr	r3, [r3, #12]
 8009dde:	f000 fc57 	bl	800a690 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009df0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	68fa      	ldr	r2, [r7, #12]
 8009df8:	609a      	str	r2, [r3, #8]
      break;
 8009dfa:	e04e      	b.n	8009e9a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6818      	ldr	r0, [r3, #0]
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	6899      	ldr	r1, [r3, #8]
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	685a      	ldr	r2, [r3, #4]
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	68db      	ldr	r3, [r3, #12]
 8009e0c:	f000 fc40 	bl	800a690 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	689a      	ldr	r2, [r3, #8]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009e1e:	609a      	str	r2, [r3, #8]
      break;
 8009e20:	e03b      	b.n	8009e9a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6818      	ldr	r0, [r3, #0]
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	6859      	ldr	r1, [r3, #4]
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	68db      	ldr	r3, [r3, #12]
 8009e2e:	461a      	mov	r2, r3
 8009e30:	f000 fbb0 	bl	800a594 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	2150      	movs	r1, #80	; 0x50
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f000 fc0a 	bl	800a654 <TIM_ITRx_SetConfig>
      break;
 8009e40:	e02b      	b.n	8009e9a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6818      	ldr	r0, [r3, #0]
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	6859      	ldr	r1, [r3, #4]
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	68db      	ldr	r3, [r3, #12]
 8009e4e:	461a      	mov	r2, r3
 8009e50:	f000 fbcf 	bl	800a5f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2160      	movs	r1, #96	; 0x60
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f000 fbfa 	bl	800a654 <TIM_ITRx_SetConfig>
      break;
 8009e60:	e01b      	b.n	8009e9a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6818      	ldr	r0, [r3, #0]
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	6859      	ldr	r1, [r3, #4]
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	461a      	mov	r2, r3
 8009e70:	f000 fb90 	bl	800a594 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	2140      	movs	r1, #64	; 0x40
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f000 fbea 	bl	800a654 <TIM_ITRx_SetConfig>
      break;
 8009e80:	e00b      	b.n	8009e9a <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	4610      	mov	r0, r2
 8009e8e:	f000 fbe1 	bl	800a654 <TIM_ITRx_SetConfig>
        break;
 8009e92:	e002      	b.n	8009e9a <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8009e94:	bf00      	nop
 8009e96:	e000      	b.n	8009e9a <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8009e98:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009eaa:	2300      	movs	r3, #0
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3710      	adds	r7, #16
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}
 8009eb4:	ffceff88 	.word	0xffceff88
 8009eb8:	00100040 	.word	0x00100040
 8009ebc:	00100030 	.word	0x00100030
 8009ec0:	00100020 	.word	0x00100020

08009ec4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b085      	sub	sp, #20
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	4a40      	ldr	r2, [pc, #256]	; (8009fd8 <TIM_Base_SetConfig+0x114>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d013      	beq.n	8009f04 <TIM_Base_SetConfig+0x40>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ee2:	d00f      	beq.n	8009f04 <TIM_Base_SetConfig+0x40>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	4a3d      	ldr	r2, [pc, #244]	; (8009fdc <TIM_Base_SetConfig+0x118>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d00b      	beq.n	8009f04 <TIM_Base_SetConfig+0x40>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	4a3c      	ldr	r2, [pc, #240]	; (8009fe0 <TIM_Base_SetConfig+0x11c>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d007      	beq.n	8009f04 <TIM_Base_SetConfig+0x40>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	4a3b      	ldr	r2, [pc, #236]	; (8009fe4 <TIM_Base_SetConfig+0x120>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d003      	beq.n	8009f04 <TIM_Base_SetConfig+0x40>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	4a3a      	ldr	r2, [pc, #232]	; (8009fe8 <TIM_Base_SetConfig+0x124>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d108      	bne.n	8009f16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	4313      	orrs	r3, r2
 8009f14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	4a2f      	ldr	r2, [pc, #188]	; (8009fd8 <TIM_Base_SetConfig+0x114>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d01f      	beq.n	8009f5e <TIM_Base_SetConfig+0x9a>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f24:	d01b      	beq.n	8009f5e <TIM_Base_SetConfig+0x9a>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	4a2c      	ldr	r2, [pc, #176]	; (8009fdc <TIM_Base_SetConfig+0x118>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d017      	beq.n	8009f5e <TIM_Base_SetConfig+0x9a>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	4a2b      	ldr	r2, [pc, #172]	; (8009fe0 <TIM_Base_SetConfig+0x11c>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d013      	beq.n	8009f5e <TIM_Base_SetConfig+0x9a>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	4a2a      	ldr	r2, [pc, #168]	; (8009fe4 <TIM_Base_SetConfig+0x120>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d00f      	beq.n	8009f5e <TIM_Base_SetConfig+0x9a>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	4a29      	ldr	r2, [pc, #164]	; (8009fe8 <TIM_Base_SetConfig+0x124>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d00b      	beq.n	8009f5e <TIM_Base_SetConfig+0x9a>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	4a28      	ldr	r2, [pc, #160]	; (8009fec <TIM_Base_SetConfig+0x128>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d007      	beq.n	8009f5e <TIM_Base_SetConfig+0x9a>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	4a27      	ldr	r2, [pc, #156]	; (8009ff0 <TIM_Base_SetConfig+0x12c>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d003      	beq.n	8009f5e <TIM_Base_SetConfig+0x9a>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	4a26      	ldr	r2, [pc, #152]	; (8009ff4 <TIM_Base_SetConfig+0x130>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d108      	bne.n	8009f70 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	68db      	ldr	r3, [r3, #12]
 8009f6a:	68fa      	ldr	r2, [r7, #12]
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	695b      	ldr	r3, [r3, #20]
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	68fa      	ldr	r2, [r7, #12]
 8009f82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	689a      	ldr	r2, [r3, #8]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	681a      	ldr	r2, [r3, #0]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	4a10      	ldr	r2, [pc, #64]	; (8009fd8 <TIM_Base_SetConfig+0x114>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d00f      	beq.n	8009fbc <TIM_Base_SetConfig+0xf8>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	4a12      	ldr	r2, [pc, #72]	; (8009fe8 <TIM_Base_SetConfig+0x124>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d00b      	beq.n	8009fbc <TIM_Base_SetConfig+0xf8>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	4a11      	ldr	r2, [pc, #68]	; (8009fec <TIM_Base_SetConfig+0x128>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d007      	beq.n	8009fbc <TIM_Base_SetConfig+0xf8>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	4a10      	ldr	r2, [pc, #64]	; (8009ff0 <TIM_Base_SetConfig+0x12c>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d003      	beq.n	8009fbc <TIM_Base_SetConfig+0xf8>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	4a0f      	ldr	r2, [pc, #60]	; (8009ff4 <TIM_Base_SetConfig+0x130>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d103      	bne.n	8009fc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	691a      	ldr	r2, [r3, #16]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	615a      	str	r2, [r3, #20]
}
 8009fca:	bf00      	nop
 8009fcc:	3714      	adds	r7, #20
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd4:	4770      	bx	lr
 8009fd6:	bf00      	nop
 8009fd8:	40010000 	.word	0x40010000
 8009fdc:	40000400 	.word	0x40000400
 8009fe0:	40000800 	.word	0x40000800
 8009fe4:	40000c00 	.word	0x40000c00
 8009fe8:	40010400 	.word	0x40010400
 8009fec:	40014000 	.word	0x40014000
 8009ff0:	40014400 	.word	0x40014400
 8009ff4:	40014800 	.word	0x40014800

08009ff8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b087      	sub	sp, #28
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6a1b      	ldr	r3, [r3, #32]
 800a006:	f023 0201 	bic.w	r2, r3, #1
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6a1b      	ldr	r3, [r3, #32]
 800a012:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	699b      	ldr	r3, [r3, #24]
 800a01e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a020:	68fa      	ldr	r2, [r7, #12]
 800a022:	4b37      	ldr	r3, [pc, #220]	; (800a100 <TIM_OC1_SetConfig+0x108>)
 800a024:	4013      	ands	r3, r2
 800a026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f023 0303 	bic.w	r3, r3, #3
 800a02e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	68fa      	ldr	r2, [r7, #12]
 800a036:	4313      	orrs	r3, r2
 800a038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	f023 0302 	bic.w	r3, r3, #2
 800a040:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	689b      	ldr	r3, [r3, #8]
 800a046:	697a      	ldr	r2, [r7, #20]
 800a048:	4313      	orrs	r3, r2
 800a04a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	4a2d      	ldr	r2, [pc, #180]	; (800a104 <TIM_OC1_SetConfig+0x10c>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d00f      	beq.n	800a074 <TIM_OC1_SetConfig+0x7c>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	4a2c      	ldr	r2, [pc, #176]	; (800a108 <TIM_OC1_SetConfig+0x110>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d00b      	beq.n	800a074 <TIM_OC1_SetConfig+0x7c>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	4a2b      	ldr	r2, [pc, #172]	; (800a10c <TIM_OC1_SetConfig+0x114>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d007      	beq.n	800a074 <TIM_OC1_SetConfig+0x7c>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	4a2a      	ldr	r2, [pc, #168]	; (800a110 <TIM_OC1_SetConfig+0x118>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d003      	beq.n	800a074 <TIM_OC1_SetConfig+0x7c>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	4a29      	ldr	r2, [pc, #164]	; (800a114 <TIM_OC1_SetConfig+0x11c>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d10c      	bne.n	800a08e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	f023 0308 	bic.w	r3, r3, #8
 800a07a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	68db      	ldr	r3, [r3, #12]
 800a080:	697a      	ldr	r2, [r7, #20]
 800a082:	4313      	orrs	r3, r2
 800a084:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	f023 0304 	bic.w	r3, r3, #4
 800a08c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	4a1c      	ldr	r2, [pc, #112]	; (800a104 <TIM_OC1_SetConfig+0x10c>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d00f      	beq.n	800a0b6 <TIM_OC1_SetConfig+0xbe>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	4a1b      	ldr	r2, [pc, #108]	; (800a108 <TIM_OC1_SetConfig+0x110>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d00b      	beq.n	800a0b6 <TIM_OC1_SetConfig+0xbe>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	4a1a      	ldr	r2, [pc, #104]	; (800a10c <TIM_OC1_SetConfig+0x114>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d007      	beq.n	800a0b6 <TIM_OC1_SetConfig+0xbe>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	4a19      	ldr	r2, [pc, #100]	; (800a110 <TIM_OC1_SetConfig+0x118>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d003      	beq.n	800a0b6 <TIM_OC1_SetConfig+0xbe>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	4a18      	ldr	r2, [pc, #96]	; (800a114 <TIM_OC1_SetConfig+0x11c>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d111      	bne.n	800a0da <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a0c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	695b      	ldr	r3, [r3, #20]
 800a0ca:	693a      	ldr	r2, [r7, #16]
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	699b      	ldr	r3, [r3, #24]
 800a0d4:	693a      	ldr	r2, [r7, #16]
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	693a      	ldr	r2, [r7, #16]
 800a0de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	68fa      	ldr	r2, [r7, #12]
 800a0e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	685a      	ldr	r2, [r3, #4]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	697a      	ldr	r2, [r7, #20]
 800a0f2:	621a      	str	r2, [r3, #32]
}
 800a0f4:	bf00      	nop
 800a0f6:	371c      	adds	r7, #28
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr
 800a100:	fffeff8f 	.word	0xfffeff8f
 800a104:	40010000 	.word	0x40010000
 800a108:	40010400 	.word	0x40010400
 800a10c:	40014000 	.word	0x40014000
 800a110:	40014400 	.word	0x40014400
 800a114:	40014800 	.word	0x40014800

0800a118 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a118:	b480      	push	{r7}
 800a11a:	b087      	sub	sp, #28
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6a1b      	ldr	r3, [r3, #32]
 800a126:	f023 0210 	bic.w	r2, r3, #16
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6a1b      	ldr	r3, [r3, #32]
 800a132:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	699b      	ldr	r3, [r3, #24]
 800a13e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a140:	68fa      	ldr	r2, [r7, #12]
 800a142:	4b34      	ldr	r3, [pc, #208]	; (800a214 <TIM_OC2_SetConfig+0xfc>)
 800a144:	4013      	ands	r3, r2
 800a146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a14e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	021b      	lsls	r3, r3, #8
 800a156:	68fa      	ldr	r2, [r7, #12]
 800a158:	4313      	orrs	r3, r2
 800a15a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	f023 0320 	bic.w	r3, r3, #32
 800a162:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	689b      	ldr	r3, [r3, #8]
 800a168:	011b      	lsls	r3, r3, #4
 800a16a:	697a      	ldr	r2, [r7, #20]
 800a16c:	4313      	orrs	r3, r2
 800a16e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	4a29      	ldr	r2, [pc, #164]	; (800a218 <TIM_OC2_SetConfig+0x100>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d003      	beq.n	800a180 <TIM_OC2_SetConfig+0x68>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	4a28      	ldr	r2, [pc, #160]	; (800a21c <TIM_OC2_SetConfig+0x104>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d10d      	bne.n	800a19c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a186:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	011b      	lsls	r3, r3, #4
 800a18e:	697a      	ldr	r2, [r7, #20]
 800a190:	4313      	orrs	r3, r2
 800a192:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a19a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	4a1e      	ldr	r2, [pc, #120]	; (800a218 <TIM_OC2_SetConfig+0x100>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d00f      	beq.n	800a1c4 <TIM_OC2_SetConfig+0xac>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	4a1d      	ldr	r2, [pc, #116]	; (800a21c <TIM_OC2_SetConfig+0x104>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d00b      	beq.n	800a1c4 <TIM_OC2_SetConfig+0xac>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	4a1c      	ldr	r2, [pc, #112]	; (800a220 <TIM_OC2_SetConfig+0x108>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d007      	beq.n	800a1c4 <TIM_OC2_SetConfig+0xac>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	4a1b      	ldr	r2, [pc, #108]	; (800a224 <TIM_OC2_SetConfig+0x10c>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d003      	beq.n	800a1c4 <TIM_OC2_SetConfig+0xac>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	4a1a      	ldr	r2, [pc, #104]	; (800a228 <TIM_OC2_SetConfig+0x110>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d113      	bne.n	800a1ec <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a1ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a1d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	695b      	ldr	r3, [r3, #20]
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	693a      	ldr	r2, [r7, #16]
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	699b      	ldr	r3, [r3, #24]
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	693a      	ldr	r2, [r7, #16]
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	693a      	ldr	r2, [r7, #16]
 800a1f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	68fa      	ldr	r2, [r7, #12]
 800a1f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	685a      	ldr	r2, [r3, #4]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	697a      	ldr	r2, [r7, #20]
 800a204:	621a      	str	r2, [r3, #32]
}
 800a206:	bf00      	nop
 800a208:	371c      	adds	r7, #28
 800a20a:	46bd      	mov	sp, r7
 800a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a210:	4770      	bx	lr
 800a212:	bf00      	nop
 800a214:	feff8fff 	.word	0xfeff8fff
 800a218:	40010000 	.word	0x40010000
 800a21c:	40010400 	.word	0x40010400
 800a220:	40014000 	.word	0x40014000
 800a224:	40014400 	.word	0x40014400
 800a228:	40014800 	.word	0x40014800

0800a22c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b087      	sub	sp, #28
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6a1b      	ldr	r3, [r3, #32]
 800a23a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6a1b      	ldr	r3, [r3, #32]
 800a246:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	69db      	ldr	r3, [r3, #28]
 800a252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a25a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f023 0303 	bic.w	r3, r3, #3
 800a262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	68fa      	ldr	r2, [r7, #12]
 800a26a:	4313      	orrs	r3, r2
 800a26c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a274:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	689b      	ldr	r3, [r3, #8]
 800a27a:	021b      	lsls	r3, r3, #8
 800a27c:	697a      	ldr	r2, [r7, #20]
 800a27e:	4313      	orrs	r3, r2
 800a280:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	4a27      	ldr	r2, [pc, #156]	; (800a324 <TIM_OC3_SetConfig+0xf8>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d003      	beq.n	800a292 <TIM_OC3_SetConfig+0x66>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	4a26      	ldr	r2, [pc, #152]	; (800a328 <TIM_OC3_SetConfig+0xfc>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d10d      	bne.n	800a2ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a298:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	68db      	ldr	r3, [r3, #12]
 800a29e:	021b      	lsls	r3, r3, #8
 800a2a0:	697a      	ldr	r2, [r7, #20]
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a2ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	4a1c      	ldr	r2, [pc, #112]	; (800a324 <TIM_OC3_SetConfig+0xf8>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d00f      	beq.n	800a2d6 <TIM_OC3_SetConfig+0xaa>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	4a1b      	ldr	r2, [pc, #108]	; (800a328 <TIM_OC3_SetConfig+0xfc>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d00b      	beq.n	800a2d6 <TIM_OC3_SetConfig+0xaa>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	4a1a      	ldr	r2, [pc, #104]	; (800a32c <TIM_OC3_SetConfig+0x100>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d007      	beq.n	800a2d6 <TIM_OC3_SetConfig+0xaa>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	4a19      	ldr	r2, [pc, #100]	; (800a330 <TIM_OC3_SetConfig+0x104>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d003      	beq.n	800a2d6 <TIM_OC3_SetConfig+0xaa>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	4a18      	ldr	r2, [pc, #96]	; (800a334 <TIM_OC3_SetConfig+0x108>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d113      	bne.n	800a2fe <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a2e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	695b      	ldr	r3, [r3, #20]
 800a2ea:	011b      	lsls	r3, r3, #4
 800a2ec:	693a      	ldr	r2, [r7, #16]
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	699b      	ldr	r3, [r3, #24]
 800a2f6:	011b      	lsls	r3, r3, #4
 800a2f8:	693a      	ldr	r2, [r7, #16]
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	693a      	ldr	r2, [r7, #16]
 800a302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	68fa      	ldr	r2, [r7, #12]
 800a308:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	685a      	ldr	r2, [r3, #4]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	697a      	ldr	r2, [r7, #20]
 800a316:	621a      	str	r2, [r3, #32]
}
 800a318:	bf00      	nop
 800a31a:	371c      	adds	r7, #28
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr
 800a324:	40010000 	.word	0x40010000
 800a328:	40010400 	.word	0x40010400
 800a32c:	40014000 	.word	0x40014000
 800a330:	40014400 	.word	0x40014400
 800a334:	40014800 	.word	0x40014800

0800a338 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a338:	b480      	push	{r7}
 800a33a:	b087      	sub	sp, #28
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6a1b      	ldr	r3, [r3, #32]
 800a346:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6a1b      	ldr	r3, [r3, #32]
 800a352:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	69db      	ldr	r3, [r3, #28]
 800a35e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a36e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	021b      	lsls	r3, r3, #8
 800a376:	68fa      	ldr	r2, [r7, #12]
 800a378:	4313      	orrs	r3, r2
 800a37a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a382:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	031b      	lsls	r3, r3, #12
 800a38a:	693a      	ldr	r2, [r7, #16]
 800a38c:	4313      	orrs	r3, r2
 800a38e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	4a18      	ldr	r2, [pc, #96]	; (800a3f4 <TIM_OC4_SetConfig+0xbc>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d00f      	beq.n	800a3b8 <TIM_OC4_SetConfig+0x80>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	4a17      	ldr	r2, [pc, #92]	; (800a3f8 <TIM_OC4_SetConfig+0xc0>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d00b      	beq.n	800a3b8 <TIM_OC4_SetConfig+0x80>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	4a16      	ldr	r2, [pc, #88]	; (800a3fc <TIM_OC4_SetConfig+0xc4>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d007      	beq.n	800a3b8 <TIM_OC4_SetConfig+0x80>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	4a15      	ldr	r2, [pc, #84]	; (800a400 <TIM_OC4_SetConfig+0xc8>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d003      	beq.n	800a3b8 <TIM_OC4_SetConfig+0x80>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	4a14      	ldr	r2, [pc, #80]	; (800a404 <TIM_OC4_SetConfig+0xcc>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d109      	bne.n	800a3cc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a3be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	695b      	ldr	r3, [r3, #20]
 800a3c4:	019b      	lsls	r3, r3, #6
 800a3c6:	697a      	ldr	r2, [r7, #20]
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	697a      	ldr	r2, [r7, #20]
 800a3d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	68fa      	ldr	r2, [r7, #12]
 800a3d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	685a      	ldr	r2, [r3, #4]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	693a      	ldr	r2, [r7, #16]
 800a3e4:	621a      	str	r2, [r3, #32]
}
 800a3e6:	bf00      	nop
 800a3e8:	371c      	adds	r7, #28
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr
 800a3f2:	bf00      	nop
 800a3f4:	40010000 	.word	0x40010000
 800a3f8:	40010400 	.word	0x40010400
 800a3fc:	40014000 	.word	0x40014000
 800a400:	40014400 	.word	0x40014400
 800a404:	40014800 	.word	0x40014800

0800a408 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a408:	b480      	push	{r7}
 800a40a:	b087      	sub	sp, #28
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6a1b      	ldr	r3, [r3, #32]
 800a416:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6a1b      	ldr	r3, [r3, #32]
 800a422:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a42e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a436:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	68fa      	ldr	r2, [r7, #12]
 800a43e:	4313      	orrs	r3, r2
 800a440:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a448:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	041b      	lsls	r3, r3, #16
 800a450:	693a      	ldr	r2, [r7, #16]
 800a452:	4313      	orrs	r3, r2
 800a454:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	4a17      	ldr	r2, [pc, #92]	; (800a4b8 <TIM_OC5_SetConfig+0xb0>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d00f      	beq.n	800a47e <TIM_OC5_SetConfig+0x76>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	4a16      	ldr	r2, [pc, #88]	; (800a4bc <TIM_OC5_SetConfig+0xb4>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d00b      	beq.n	800a47e <TIM_OC5_SetConfig+0x76>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	4a15      	ldr	r2, [pc, #84]	; (800a4c0 <TIM_OC5_SetConfig+0xb8>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d007      	beq.n	800a47e <TIM_OC5_SetConfig+0x76>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	4a14      	ldr	r2, [pc, #80]	; (800a4c4 <TIM_OC5_SetConfig+0xbc>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d003      	beq.n	800a47e <TIM_OC5_SetConfig+0x76>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	4a13      	ldr	r2, [pc, #76]	; (800a4c8 <TIM_OC5_SetConfig+0xc0>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d109      	bne.n	800a492 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a484:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	695b      	ldr	r3, [r3, #20]
 800a48a:	021b      	lsls	r3, r3, #8
 800a48c:	697a      	ldr	r2, [r7, #20]
 800a48e:	4313      	orrs	r3, r2
 800a490:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	697a      	ldr	r2, [r7, #20]
 800a496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	68fa      	ldr	r2, [r7, #12]
 800a49c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	685a      	ldr	r2, [r3, #4]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	693a      	ldr	r2, [r7, #16]
 800a4aa:	621a      	str	r2, [r3, #32]
}
 800a4ac:	bf00      	nop
 800a4ae:	371c      	adds	r7, #28
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr
 800a4b8:	40010000 	.word	0x40010000
 800a4bc:	40010400 	.word	0x40010400
 800a4c0:	40014000 	.word	0x40014000
 800a4c4:	40014400 	.word	0x40014400
 800a4c8:	40014800 	.word	0x40014800

0800a4cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b087      	sub	sp, #28
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6a1b      	ldr	r3, [r3, #32]
 800a4da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6a1b      	ldr	r3, [r3, #32]
 800a4e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	021b      	lsls	r3, r3, #8
 800a502:	68fa      	ldr	r2, [r7, #12]
 800a504:	4313      	orrs	r3, r2
 800a506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a50e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	051b      	lsls	r3, r3, #20
 800a516:	693a      	ldr	r2, [r7, #16]
 800a518:	4313      	orrs	r3, r2
 800a51a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	4a18      	ldr	r2, [pc, #96]	; (800a580 <TIM_OC6_SetConfig+0xb4>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d00f      	beq.n	800a544 <TIM_OC6_SetConfig+0x78>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	4a17      	ldr	r2, [pc, #92]	; (800a584 <TIM_OC6_SetConfig+0xb8>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d00b      	beq.n	800a544 <TIM_OC6_SetConfig+0x78>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	4a16      	ldr	r2, [pc, #88]	; (800a588 <TIM_OC6_SetConfig+0xbc>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d007      	beq.n	800a544 <TIM_OC6_SetConfig+0x78>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	4a15      	ldr	r2, [pc, #84]	; (800a58c <TIM_OC6_SetConfig+0xc0>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d003      	beq.n	800a544 <TIM_OC6_SetConfig+0x78>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	4a14      	ldr	r2, [pc, #80]	; (800a590 <TIM_OC6_SetConfig+0xc4>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d109      	bne.n	800a558 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a54a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	695b      	ldr	r3, [r3, #20]
 800a550:	029b      	lsls	r3, r3, #10
 800a552:	697a      	ldr	r2, [r7, #20]
 800a554:	4313      	orrs	r3, r2
 800a556:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	697a      	ldr	r2, [r7, #20]
 800a55c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	68fa      	ldr	r2, [r7, #12]
 800a562:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	685a      	ldr	r2, [r3, #4]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	693a      	ldr	r2, [r7, #16]
 800a570:	621a      	str	r2, [r3, #32]
}
 800a572:	bf00      	nop
 800a574:	371c      	adds	r7, #28
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr
 800a57e:	bf00      	nop
 800a580:	40010000 	.word	0x40010000
 800a584:	40010400 	.word	0x40010400
 800a588:	40014000 	.word	0x40014000
 800a58c:	40014400 	.word	0x40014400
 800a590:	40014800 	.word	0x40014800

0800a594 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a594:	b480      	push	{r7}
 800a596:	b087      	sub	sp, #28
 800a598:	af00      	add	r7, sp, #0
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	6a1b      	ldr	r3, [r3, #32]
 800a5a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	6a1b      	ldr	r3, [r3, #32]
 800a5aa:	f023 0201 	bic.w	r2, r3, #1
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	699b      	ldr	r3, [r3, #24]
 800a5b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a5be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	011b      	lsls	r3, r3, #4
 800a5c4:	693a      	ldr	r2, [r7, #16]
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	f023 030a 	bic.w	r3, r3, #10
 800a5d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a5d2:	697a      	ldr	r2, [r7, #20]
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	693a      	ldr	r2, [r7, #16]
 800a5de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	697a      	ldr	r2, [r7, #20]
 800a5e4:	621a      	str	r2, [r3, #32]
}
 800a5e6:	bf00      	nop
 800a5e8:	371c      	adds	r7, #28
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr

0800a5f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5f2:	b480      	push	{r7}
 800a5f4:	b087      	sub	sp, #28
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	60f8      	str	r0, [r7, #12]
 800a5fa:	60b9      	str	r1, [r7, #8]
 800a5fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	6a1b      	ldr	r3, [r3, #32]
 800a602:	f023 0210 	bic.w	r2, r3, #16
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	699b      	ldr	r3, [r3, #24]
 800a60e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	6a1b      	ldr	r3, [r3, #32]
 800a614:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a61c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	031b      	lsls	r3, r3, #12
 800a622:	697a      	ldr	r2, [r7, #20]
 800a624:	4313      	orrs	r3, r2
 800a626:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a62e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	011b      	lsls	r3, r3, #4
 800a634:	693a      	ldr	r2, [r7, #16]
 800a636:	4313      	orrs	r3, r2
 800a638:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	697a      	ldr	r2, [r7, #20]
 800a63e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	693a      	ldr	r2, [r7, #16]
 800a644:	621a      	str	r2, [r3, #32]
}
 800a646:	bf00      	nop
 800a648:	371c      	adds	r7, #28
 800a64a:	46bd      	mov	sp, r7
 800a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a650:	4770      	bx	lr
	...

0800a654 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a654:	b480      	push	{r7}
 800a656:	b085      	sub	sp, #20
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	689b      	ldr	r3, [r3, #8]
 800a662:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	4b09      	ldr	r3, [pc, #36]	; (800a68c <TIM_ITRx_SetConfig+0x38>)
 800a668:	4013      	ands	r3, r2
 800a66a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a66c:	683a      	ldr	r2, [r7, #0]
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	4313      	orrs	r3, r2
 800a672:	f043 0307 	orr.w	r3, r3, #7
 800a676:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	68fa      	ldr	r2, [r7, #12]
 800a67c:	609a      	str	r2, [r3, #8]
}
 800a67e:	bf00      	nop
 800a680:	3714      	adds	r7, #20
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr
 800a68a:	bf00      	nop
 800a68c:	ffcfff8f 	.word	0xffcfff8f

0800a690 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a690:	b480      	push	{r7}
 800a692:	b087      	sub	sp, #28
 800a694:	af00      	add	r7, sp, #0
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	60b9      	str	r1, [r7, #8]
 800a69a:	607a      	str	r2, [r7, #4]
 800a69c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	689b      	ldr	r3, [r3, #8]
 800a6a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a6aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	021a      	lsls	r2, r3, #8
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	431a      	orrs	r2, r3
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	697a      	ldr	r2, [r7, #20]
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	697a      	ldr	r2, [r7, #20]
 800a6c2:	609a      	str	r2, [r3, #8]
}
 800a6c4:	bf00      	nop
 800a6c6:	371c      	adds	r7, #28
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr

0800a6d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b085      	sub	sp, #20
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6e0:	2b01      	cmp	r3, #1
 800a6e2:	d101      	bne.n	800a6e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a6e4:	2302      	movs	r3, #2
 800a6e6:	e068      	b.n	800a7ba <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2202      	movs	r2, #2
 800a6f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	689b      	ldr	r3, [r3, #8]
 800a706:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4a2e      	ldr	r2, [pc, #184]	; (800a7c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d004      	beq.n	800a71c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4a2d      	ldr	r2, [pc, #180]	; (800a7cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a718:	4293      	cmp	r3, r2
 800a71a:	d108      	bne.n	800a72e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a722:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	68fa      	ldr	r2, [r7, #12]
 800a72a:	4313      	orrs	r3, r2
 800a72c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a734:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	68fa      	ldr	r2, [r7, #12]
 800a73c:	4313      	orrs	r3, r2
 800a73e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	68fa      	ldr	r2, [r7, #12]
 800a746:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a1e      	ldr	r2, [pc, #120]	; (800a7c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d01d      	beq.n	800a78e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a75a:	d018      	beq.n	800a78e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4a1b      	ldr	r2, [pc, #108]	; (800a7d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d013      	beq.n	800a78e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4a1a      	ldr	r2, [pc, #104]	; (800a7d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d00e      	beq.n	800a78e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4a18      	ldr	r2, [pc, #96]	; (800a7d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d009      	beq.n	800a78e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4a13      	ldr	r2, [pc, #76]	; (800a7cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d004      	beq.n	800a78e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4a14      	ldr	r2, [pc, #80]	; (800a7dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d10c      	bne.n	800a7a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a794:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	689b      	ldr	r3, [r3, #8]
 800a79a:	68ba      	ldr	r2, [r7, #8]
 800a79c:	4313      	orrs	r3, r2
 800a79e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	68ba      	ldr	r2, [r7, #8]
 800a7a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a7b8:	2300      	movs	r3, #0
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3714      	adds	r7, #20
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr
 800a7c6:	bf00      	nop
 800a7c8:	40010000 	.word	0x40010000
 800a7cc:	40010400 	.word	0x40010400
 800a7d0:	40000400 	.word	0x40000400
 800a7d4:	40000800 	.word	0x40000800
 800a7d8:	40000c00 	.word	0x40000c00
 800a7dc:	40001800 	.word	0x40001800

0800a7e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b085      	sub	sp, #20
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d101      	bne.n	800a7fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a7f8:	2302      	movs	r3, #2
 800a7fa:	e065      	b.n	800a8c8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2201      	movs	r2, #1
 800a800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	68db      	ldr	r3, [r3, #12]
 800a80e:	4313      	orrs	r3, r2
 800a810:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	689b      	ldr	r3, [r3, #8]
 800a81c:	4313      	orrs	r3, r2
 800a81e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	4313      	orrs	r3, r2
 800a82c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	4313      	orrs	r3, r2
 800a83a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	691b      	ldr	r3, [r3, #16]
 800a846:	4313      	orrs	r3, r2
 800a848:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	695b      	ldr	r3, [r3, #20]
 800a854:	4313      	orrs	r3, r2
 800a856:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a862:	4313      	orrs	r3, r2
 800a864:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	699b      	ldr	r3, [r3, #24]
 800a870:	041b      	lsls	r3, r3, #16
 800a872:	4313      	orrs	r3, r2
 800a874:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4a16      	ldr	r2, [pc, #88]	; (800a8d4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d004      	beq.n	800a88a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4a14      	ldr	r2, [pc, #80]	; (800a8d8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d115      	bne.n	800a8b6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a894:	051b      	lsls	r3, r3, #20
 800a896:	4313      	orrs	r3, r2
 800a898:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	69db      	ldr	r3, [r3, #28]
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	6a1b      	ldr	r3, [r3, #32]
 800a8b2:	4313      	orrs	r3, r2
 800a8b4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	68fa      	ldr	r2, [r7, #12]
 800a8bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a8c6:	2300      	movs	r3, #0
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3714      	adds	r7, #20
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr
 800a8d4:	40010000 	.word	0x40010000
 800a8d8:	40010400 	.word	0x40010400

0800a8dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b082      	sub	sp, #8
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d101      	bne.n	800a8ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	e042      	b.n	800a974 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d106      	bne.n	800a906 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f7f7 fcdd 	bl	80022c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2224      	movs	r2, #36	; 0x24
 800a90a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	681a      	ldr	r2, [r3, #0]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f022 0201 	bic.w	r2, r2, #1
 800a91c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 f8c2 	bl	800aaa8 <UART_SetConfig>
 800a924:	4603      	mov	r3, r0
 800a926:	2b01      	cmp	r3, #1
 800a928:	d101      	bne.n	800a92e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a92a:	2301      	movs	r3, #1
 800a92c:	e022      	b.n	800a974 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a932:	2b00      	cmp	r3, #0
 800a934:	d002      	beq.n	800a93c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 fe16 	bl	800b568 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	685a      	ldr	r2, [r3, #4]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a94a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	689a      	ldr	r2, [r3, #8]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a95a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	681a      	ldr	r2, [r3, #0]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f042 0201 	orr.w	r2, r2, #1
 800a96a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f000 fe9d 	bl	800b6ac <UART_CheckIdleState>
 800a972:	4603      	mov	r3, r0
}
 800a974:	4618      	mov	r0, r3
 800a976:	3708      	adds	r7, #8
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b08a      	sub	sp, #40	; 0x28
 800a980:	af02      	add	r7, sp, #8
 800a982:	60f8      	str	r0, [r7, #12]
 800a984:	60b9      	str	r1, [r7, #8]
 800a986:	603b      	str	r3, [r7, #0]
 800a988:	4613      	mov	r3, r2
 800a98a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a992:	2b20      	cmp	r3, #32
 800a994:	f040 8083 	bne.w	800aa9e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d002      	beq.n	800a9a4 <HAL_UART_Transmit+0x28>
 800a99e:	88fb      	ldrh	r3, [r7, #6]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d101      	bne.n	800a9a8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	e07b      	b.n	800aaa0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a9ae:	2b01      	cmp	r3, #1
 800a9b0:	d101      	bne.n	800a9b6 <HAL_UART_Transmit+0x3a>
 800a9b2:	2302      	movs	r3, #2
 800a9b4:	e074      	b.n	800aaa0 <HAL_UART_Transmit+0x124>
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	2201      	movs	r2, #1
 800a9ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	2221      	movs	r2, #33	; 0x21
 800a9ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a9ce:	f7f8 ff59 	bl	8003884 <HAL_GetTick>
 800a9d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	88fa      	ldrh	r2, [r7, #6]
 800a9d8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	88fa      	ldrh	r2, [r7, #6]
 800a9e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	689b      	ldr	r3, [r3, #8]
 800a9e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9ec:	d108      	bne.n	800aa00 <HAL_UART_Transmit+0x84>
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	691b      	ldr	r3, [r3, #16]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d104      	bne.n	800aa00 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	61bb      	str	r3, [r7, #24]
 800a9fe:	e003      	b.n	800aa08 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aa04:	2300      	movs	r3, #0
 800aa06:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800aa10:	e02c      	b.n	800aa6c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	9300      	str	r3, [sp, #0]
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	2180      	movs	r1, #128	; 0x80
 800aa1c:	68f8      	ldr	r0, [r7, #12]
 800aa1e:	f000 fe90 	bl	800b742 <UART_WaitOnFlagUntilTimeout>
 800aa22:	4603      	mov	r3, r0
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d001      	beq.n	800aa2c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800aa28:	2303      	movs	r3, #3
 800aa2a:	e039      	b.n	800aaa0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800aa2c:	69fb      	ldr	r3, [r7, #28]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d10b      	bne.n	800aa4a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aa32:	69bb      	ldr	r3, [r7, #24]
 800aa34:	881b      	ldrh	r3, [r3, #0]
 800aa36:	461a      	mov	r2, r3
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aa40:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800aa42:	69bb      	ldr	r3, [r7, #24]
 800aa44:	3302      	adds	r3, #2
 800aa46:	61bb      	str	r3, [r7, #24]
 800aa48:	e007      	b.n	800aa5a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800aa4a:	69fb      	ldr	r3, [r7, #28]
 800aa4c:	781a      	ldrb	r2, [r3, #0]
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800aa54:	69fb      	ldr	r3, [r7, #28]
 800aa56:	3301      	adds	r3, #1
 800aa58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800aa60:	b29b      	uxth	r3, r3
 800aa62:	3b01      	subs	r3, #1
 800aa64:	b29a      	uxth	r2, r3
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800aa72:	b29b      	uxth	r3, r3
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d1cc      	bne.n	800aa12 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	9300      	str	r3, [sp, #0]
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	2140      	movs	r1, #64	; 0x40
 800aa82:	68f8      	ldr	r0, [r7, #12]
 800aa84:	f000 fe5d 	bl	800b742 <UART_WaitOnFlagUntilTimeout>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d001      	beq.n	800aa92 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800aa8e:	2303      	movs	r3, #3
 800aa90:	e006      	b.n	800aaa0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2220      	movs	r2, #32
 800aa96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	e000      	b.n	800aaa0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800aa9e:	2302      	movs	r3, #2
  }
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3720      	adds	r7, #32
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}

0800aaa8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aaa8:	b5b0      	push	{r4, r5, r7, lr}
 800aaaa:	b08e      	sub	sp, #56	; 0x38
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aab0:	2300      	movs	r3, #0
 800aab2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	689a      	ldr	r2, [r3, #8]
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	691b      	ldr	r3, [r3, #16]
 800aabe:	431a      	orrs	r2, r3
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	695b      	ldr	r3, [r3, #20]
 800aac4:	431a      	orrs	r2, r3
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	69db      	ldr	r3, [r3, #28]
 800aaca:	4313      	orrs	r3, r2
 800aacc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	681a      	ldr	r2, [r3, #0]
 800aad4:	4bbf      	ldr	r3, [pc, #764]	; (800add4 <UART_SetConfig+0x32c>)
 800aad6:	4013      	ands	r3, r2
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	6812      	ldr	r2, [r2, #0]
 800aadc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aade:	430b      	orrs	r3, r1
 800aae0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	68da      	ldr	r2, [r3, #12]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	430a      	orrs	r2, r1
 800aaf6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	699b      	ldr	r3, [r3, #24]
 800aafc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	4ab5      	ldr	r2, [pc, #724]	; (800add8 <UART_SetConfig+0x330>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d004      	beq.n	800ab12 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6a1b      	ldr	r3, [r3, #32]
 800ab0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab0e:	4313      	orrs	r3, r2
 800ab10:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	689a      	ldr	r2, [r3, #8]
 800ab18:	4bb0      	ldr	r3, [pc, #704]	; (800addc <UART_SetConfig+0x334>)
 800ab1a:	4013      	ands	r3, r2
 800ab1c:	687a      	ldr	r2, [r7, #4]
 800ab1e:	6812      	ldr	r2, [r2, #0]
 800ab20:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ab22:	430b      	orrs	r3, r1
 800ab24:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab2c:	f023 010f 	bic.w	r1, r3, #15
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	430a      	orrs	r2, r1
 800ab3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	4aa7      	ldr	r2, [pc, #668]	; (800ade0 <UART_SetConfig+0x338>)
 800ab42:	4293      	cmp	r3, r2
 800ab44:	d176      	bne.n	800ac34 <UART_SetConfig+0x18c>
 800ab46:	4ba7      	ldr	r3, [pc, #668]	; (800ade4 <UART_SetConfig+0x33c>)
 800ab48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab4e:	2b28      	cmp	r3, #40	; 0x28
 800ab50:	d86c      	bhi.n	800ac2c <UART_SetConfig+0x184>
 800ab52:	a201      	add	r2, pc, #4	; (adr r2, 800ab58 <UART_SetConfig+0xb0>)
 800ab54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab58:	0800abfd 	.word	0x0800abfd
 800ab5c:	0800ac2d 	.word	0x0800ac2d
 800ab60:	0800ac2d 	.word	0x0800ac2d
 800ab64:	0800ac2d 	.word	0x0800ac2d
 800ab68:	0800ac2d 	.word	0x0800ac2d
 800ab6c:	0800ac2d 	.word	0x0800ac2d
 800ab70:	0800ac2d 	.word	0x0800ac2d
 800ab74:	0800ac2d 	.word	0x0800ac2d
 800ab78:	0800ac05 	.word	0x0800ac05
 800ab7c:	0800ac2d 	.word	0x0800ac2d
 800ab80:	0800ac2d 	.word	0x0800ac2d
 800ab84:	0800ac2d 	.word	0x0800ac2d
 800ab88:	0800ac2d 	.word	0x0800ac2d
 800ab8c:	0800ac2d 	.word	0x0800ac2d
 800ab90:	0800ac2d 	.word	0x0800ac2d
 800ab94:	0800ac2d 	.word	0x0800ac2d
 800ab98:	0800ac0d 	.word	0x0800ac0d
 800ab9c:	0800ac2d 	.word	0x0800ac2d
 800aba0:	0800ac2d 	.word	0x0800ac2d
 800aba4:	0800ac2d 	.word	0x0800ac2d
 800aba8:	0800ac2d 	.word	0x0800ac2d
 800abac:	0800ac2d 	.word	0x0800ac2d
 800abb0:	0800ac2d 	.word	0x0800ac2d
 800abb4:	0800ac2d 	.word	0x0800ac2d
 800abb8:	0800ac15 	.word	0x0800ac15
 800abbc:	0800ac2d 	.word	0x0800ac2d
 800abc0:	0800ac2d 	.word	0x0800ac2d
 800abc4:	0800ac2d 	.word	0x0800ac2d
 800abc8:	0800ac2d 	.word	0x0800ac2d
 800abcc:	0800ac2d 	.word	0x0800ac2d
 800abd0:	0800ac2d 	.word	0x0800ac2d
 800abd4:	0800ac2d 	.word	0x0800ac2d
 800abd8:	0800ac1d 	.word	0x0800ac1d
 800abdc:	0800ac2d 	.word	0x0800ac2d
 800abe0:	0800ac2d 	.word	0x0800ac2d
 800abe4:	0800ac2d 	.word	0x0800ac2d
 800abe8:	0800ac2d 	.word	0x0800ac2d
 800abec:	0800ac2d 	.word	0x0800ac2d
 800abf0:	0800ac2d 	.word	0x0800ac2d
 800abf4:	0800ac2d 	.word	0x0800ac2d
 800abf8:	0800ac25 	.word	0x0800ac25
 800abfc:	2301      	movs	r3, #1
 800abfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac02:	e222      	b.n	800b04a <UART_SetConfig+0x5a2>
 800ac04:	2304      	movs	r3, #4
 800ac06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac0a:	e21e      	b.n	800b04a <UART_SetConfig+0x5a2>
 800ac0c:	2308      	movs	r3, #8
 800ac0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac12:	e21a      	b.n	800b04a <UART_SetConfig+0x5a2>
 800ac14:	2310      	movs	r3, #16
 800ac16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac1a:	e216      	b.n	800b04a <UART_SetConfig+0x5a2>
 800ac1c:	2320      	movs	r3, #32
 800ac1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac22:	e212      	b.n	800b04a <UART_SetConfig+0x5a2>
 800ac24:	2340      	movs	r3, #64	; 0x40
 800ac26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac2a:	e20e      	b.n	800b04a <UART_SetConfig+0x5a2>
 800ac2c:	2380      	movs	r3, #128	; 0x80
 800ac2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac32:	e20a      	b.n	800b04a <UART_SetConfig+0x5a2>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	4a6b      	ldr	r2, [pc, #428]	; (800ade8 <UART_SetConfig+0x340>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d130      	bne.n	800aca0 <UART_SetConfig+0x1f8>
 800ac3e:	4b69      	ldr	r3, [pc, #420]	; (800ade4 <UART_SetConfig+0x33c>)
 800ac40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac42:	f003 0307 	and.w	r3, r3, #7
 800ac46:	2b05      	cmp	r3, #5
 800ac48:	d826      	bhi.n	800ac98 <UART_SetConfig+0x1f0>
 800ac4a:	a201      	add	r2, pc, #4	; (adr r2, 800ac50 <UART_SetConfig+0x1a8>)
 800ac4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac50:	0800ac69 	.word	0x0800ac69
 800ac54:	0800ac71 	.word	0x0800ac71
 800ac58:	0800ac79 	.word	0x0800ac79
 800ac5c:	0800ac81 	.word	0x0800ac81
 800ac60:	0800ac89 	.word	0x0800ac89
 800ac64:	0800ac91 	.word	0x0800ac91
 800ac68:	2300      	movs	r3, #0
 800ac6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac6e:	e1ec      	b.n	800b04a <UART_SetConfig+0x5a2>
 800ac70:	2304      	movs	r3, #4
 800ac72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac76:	e1e8      	b.n	800b04a <UART_SetConfig+0x5a2>
 800ac78:	2308      	movs	r3, #8
 800ac7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac7e:	e1e4      	b.n	800b04a <UART_SetConfig+0x5a2>
 800ac80:	2310      	movs	r3, #16
 800ac82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac86:	e1e0      	b.n	800b04a <UART_SetConfig+0x5a2>
 800ac88:	2320      	movs	r3, #32
 800ac8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac8e:	e1dc      	b.n	800b04a <UART_SetConfig+0x5a2>
 800ac90:	2340      	movs	r3, #64	; 0x40
 800ac92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac96:	e1d8      	b.n	800b04a <UART_SetConfig+0x5a2>
 800ac98:	2380      	movs	r3, #128	; 0x80
 800ac9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac9e:	e1d4      	b.n	800b04a <UART_SetConfig+0x5a2>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4a51      	ldr	r2, [pc, #324]	; (800adec <UART_SetConfig+0x344>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d130      	bne.n	800ad0c <UART_SetConfig+0x264>
 800acaa:	4b4e      	ldr	r3, [pc, #312]	; (800ade4 <UART_SetConfig+0x33c>)
 800acac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acae:	f003 0307 	and.w	r3, r3, #7
 800acb2:	2b05      	cmp	r3, #5
 800acb4:	d826      	bhi.n	800ad04 <UART_SetConfig+0x25c>
 800acb6:	a201      	add	r2, pc, #4	; (adr r2, 800acbc <UART_SetConfig+0x214>)
 800acb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acbc:	0800acd5 	.word	0x0800acd5
 800acc0:	0800acdd 	.word	0x0800acdd
 800acc4:	0800ace5 	.word	0x0800ace5
 800acc8:	0800aced 	.word	0x0800aced
 800accc:	0800acf5 	.word	0x0800acf5
 800acd0:	0800acfd 	.word	0x0800acfd
 800acd4:	2300      	movs	r3, #0
 800acd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acda:	e1b6      	b.n	800b04a <UART_SetConfig+0x5a2>
 800acdc:	2304      	movs	r3, #4
 800acde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ace2:	e1b2      	b.n	800b04a <UART_SetConfig+0x5a2>
 800ace4:	2308      	movs	r3, #8
 800ace6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acea:	e1ae      	b.n	800b04a <UART_SetConfig+0x5a2>
 800acec:	2310      	movs	r3, #16
 800acee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acf2:	e1aa      	b.n	800b04a <UART_SetConfig+0x5a2>
 800acf4:	2320      	movs	r3, #32
 800acf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acfa:	e1a6      	b.n	800b04a <UART_SetConfig+0x5a2>
 800acfc:	2340      	movs	r3, #64	; 0x40
 800acfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad02:	e1a2      	b.n	800b04a <UART_SetConfig+0x5a2>
 800ad04:	2380      	movs	r3, #128	; 0x80
 800ad06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad0a:	e19e      	b.n	800b04a <UART_SetConfig+0x5a2>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a37      	ldr	r2, [pc, #220]	; (800adf0 <UART_SetConfig+0x348>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d130      	bne.n	800ad78 <UART_SetConfig+0x2d0>
 800ad16:	4b33      	ldr	r3, [pc, #204]	; (800ade4 <UART_SetConfig+0x33c>)
 800ad18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad1a:	f003 0307 	and.w	r3, r3, #7
 800ad1e:	2b05      	cmp	r3, #5
 800ad20:	d826      	bhi.n	800ad70 <UART_SetConfig+0x2c8>
 800ad22:	a201      	add	r2, pc, #4	; (adr r2, 800ad28 <UART_SetConfig+0x280>)
 800ad24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad28:	0800ad41 	.word	0x0800ad41
 800ad2c:	0800ad49 	.word	0x0800ad49
 800ad30:	0800ad51 	.word	0x0800ad51
 800ad34:	0800ad59 	.word	0x0800ad59
 800ad38:	0800ad61 	.word	0x0800ad61
 800ad3c:	0800ad69 	.word	0x0800ad69
 800ad40:	2300      	movs	r3, #0
 800ad42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad46:	e180      	b.n	800b04a <UART_SetConfig+0x5a2>
 800ad48:	2304      	movs	r3, #4
 800ad4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad4e:	e17c      	b.n	800b04a <UART_SetConfig+0x5a2>
 800ad50:	2308      	movs	r3, #8
 800ad52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad56:	e178      	b.n	800b04a <UART_SetConfig+0x5a2>
 800ad58:	2310      	movs	r3, #16
 800ad5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad5e:	e174      	b.n	800b04a <UART_SetConfig+0x5a2>
 800ad60:	2320      	movs	r3, #32
 800ad62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad66:	e170      	b.n	800b04a <UART_SetConfig+0x5a2>
 800ad68:	2340      	movs	r3, #64	; 0x40
 800ad6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad6e:	e16c      	b.n	800b04a <UART_SetConfig+0x5a2>
 800ad70:	2380      	movs	r3, #128	; 0x80
 800ad72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad76:	e168      	b.n	800b04a <UART_SetConfig+0x5a2>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4a1d      	ldr	r2, [pc, #116]	; (800adf4 <UART_SetConfig+0x34c>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d142      	bne.n	800ae08 <UART_SetConfig+0x360>
 800ad82:	4b18      	ldr	r3, [pc, #96]	; (800ade4 <UART_SetConfig+0x33c>)
 800ad84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad86:	f003 0307 	and.w	r3, r3, #7
 800ad8a:	2b05      	cmp	r3, #5
 800ad8c:	d838      	bhi.n	800ae00 <UART_SetConfig+0x358>
 800ad8e:	a201      	add	r2, pc, #4	; (adr r2, 800ad94 <UART_SetConfig+0x2ec>)
 800ad90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad94:	0800adad 	.word	0x0800adad
 800ad98:	0800adb5 	.word	0x0800adb5
 800ad9c:	0800adbd 	.word	0x0800adbd
 800ada0:	0800adc5 	.word	0x0800adc5
 800ada4:	0800adcd 	.word	0x0800adcd
 800ada8:	0800adf9 	.word	0x0800adf9
 800adac:	2300      	movs	r3, #0
 800adae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adb2:	e14a      	b.n	800b04a <UART_SetConfig+0x5a2>
 800adb4:	2304      	movs	r3, #4
 800adb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adba:	e146      	b.n	800b04a <UART_SetConfig+0x5a2>
 800adbc:	2308      	movs	r3, #8
 800adbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adc2:	e142      	b.n	800b04a <UART_SetConfig+0x5a2>
 800adc4:	2310      	movs	r3, #16
 800adc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adca:	e13e      	b.n	800b04a <UART_SetConfig+0x5a2>
 800adcc:	2320      	movs	r3, #32
 800adce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800add2:	e13a      	b.n	800b04a <UART_SetConfig+0x5a2>
 800add4:	cfff69f3 	.word	0xcfff69f3
 800add8:	58000c00 	.word	0x58000c00
 800addc:	11fff4ff 	.word	0x11fff4ff
 800ade0:	40011000 	.word	0x40011000
 800ade4:	58024400 	.word	0x58024400
 800ade8:	40004400 	.word	0x40004400
 800adec:	40004800 	.word	0x40004800
 800adf0:	40004c00 	.word	0x40004c00
 800adf4:	40005000 	.word	0x40005000
 800adf8:	2340      	movs	r3, #64	; 0x40
 800adfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adfe:	e124      	b.n	800b04a <UART_SetConfig+0x5a2>
 800ae00:	2380      	movs	r3, #128	; 0x80
 800ae02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae06:	e120      	b.n	800b04a <UART_SetConfig+0x5a2>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4acc      	ldr	r2, [pc, #816]	; (800b140 <UART_SetConfig+0x698>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d176      	bne.n	800af00 <UART_SetConfig+0x458>
 800ae12:	4bcc      	ldr	r3, [pc, #816]	; (800b144 <UART_SetConfig+0x69c>)
 800ae14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ae1a:	2b28      	cmp	r3, #40	; 0x28
 800ae1c:	d86c      	bhi.n	800aef8 <UART_SetConfig+0x450>
 800ae1e:	a201      	add	r2, pc, #4	; (adr r2, 800ae24 <UART_SetConfig+0x37c>)
 800ae20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae24:	0800aec9 	.word	0x0800aec9
 800ae28:	0800aef9 	.word	0x0800aef9
 800ae2c:	0800aef9 	.word	0x0800aef9
 800ae30:	0800aef9 	.word	0x0800aef9
 800ae34:	0800aef9 	.word	0x0800aef9
 800ae38:	0800aef9 	.word	0x0800aef9
 800ae3c:	0800aef9 	.word	0x0800aef9
 800ae40:	0800aef9 	.word	0x0800aef9
 800ae44:	0800aed1 	.word	0x0800aed1
 800ae48:	0800aef9 	.word	0x0800aef9
 800ae4c:	0800aef9 	.word	0x0800aef9
 800ae50:	0800aef9 	.word	0x0800aef9
 800ae54:	0800aef9 	.word	0x0800aef9
 800ae58:	0800aef9 	.word	0x0800aef9
 800ae5c:	0800aef9 	.word	0x0800aef9
 800ae60:	0800aef9 	.word	0x0800aef9
 800ae64:	0800aed9 	.word	0x0800aed9
 800ae68:	0800aef9 	.word	0x0800aef9
 800ae6c:	0800aef9 	.word	0x0800aef9
 800ae70:	0800aef9 	.word	0x0800aef9
 800ae74:	0800aef9 	.word	0x0800aef9
 800ae78:	0800aef9 	.word	0x0800aef9
 800ae7c:	0800aef9 	.word	0x0800aef9
 800ae80:	0800aef9 	.word	0x0800aef9
 800ae84:	0800aee1 	.word	0x0800aee1
 800ae88:	0800aef9 	.word	0x0800aef9
 800ae8c:	0800aef9 	.word	0x0800aef9
 800ae90:	0800aef9 	.word	0x0800aef9
 800ae94:	0800aef9 	.word	0x0800aef9
 800ae98:	0800aef9 	.word	0x0800aef9
 800ae9c:	0800aef9 	.word	0x0800aef9
 800aea0:	0800aef9 	.word	0x0800aef9
 800aea4:	0800aee9 	.word	0x0800aee9
 800aea8:	0800aef9 	.word	0x0800aef9
 800aeac:	0800aef9 	.word	0x0800aef9
 800aeb0:	0800aef9 	.word	0x0800aef9
 800aeb4:	0800aef9 	.word	0x0800aef9
 800aeb8:	0800aef9 	.word	0x0800aef9
 800aebc:	0800aef9 	.word	0x0800aef9
 800aec0:	0800aef9 	.word	0x0800aef9
 800aec4:	0800aef1 	.word	0x0800aef1
 800aec8:	2301      	movs	r3, #1
 800aeca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aece:	e0bc      	b.n	800b04a <UART_SetConfig+0x5a2>
 800aed0:	2304      	movs	r3, #4
 800aed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aed6:	e0b8      	b.n	800b04a <UART_SetConfig+0x5a2>
 800aed8:	2308      	movs	r3, #8
 800aeda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aede:	e0b4      	b.n	800b04a <UART_SetConfig+0x5a2>
 800aee0:	2310      	movs	r3, #16
 800aee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aee6:	e0b0      	b.n	800b04a <UART_SetConfig+0x5a2>
 800aee8:	2320      	movs	r3, #32
 800aeea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aeee:	e0ac      	b.n	800b04a <UART_SetConfig+0x5a2>
 800aef0:	2340      	movs	r3, #64	; 0x40
 800aef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aef6:	e0a8      	b.n	800b04a <UART_SetConfig+0x5a2>
 800aef8:	2380      	movs	r3, #128	; 0x80
 800aefa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aefe:	e0a4      	b.n	800b04a <UART_SetConfig+0x5a2>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	4a90      	ldr	r2, [pc, #576]	; (800b148 <UART_SetConfig+0x6a0>)
 800af06:	4293      	cmp	r3, r2
 800af08:	d130      	bne.n	800af6c <UART_SetConfig+0x4c4>
 800af0a:	4b8e      	ldr	r3, [pc, #568]	; (800b144 <UART_SetConfig+0x69c>)
 800af0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af0e:	f003 0307 	and.w	r3, r3, #7
 800af12:	2b05      	cmp	r3, #5
 800af14:	d826      	bhi.n	800af64 <UART_SetConfig+0x4bc>
 800af16:	a201      	add	r2, pc, #4	; (adr r2, 800af1c <UART_SetConfig+0x474>)
 800af18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af1c:	0800af35 	.word	0x0800af35
 800af20:	0800af3d 	.word	0x0800af3d
 800af24:	0800af45 	.word	0x0800af45
 800af28:	0800af4d 	.word	0x0800af4d
 800af2c:	0800af55 	.word	0x0800af55
 800af30:	0800af5d 	.word	0x0800af5d
 800af34:	2300      	movs	r3, #0
 800af36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af3a:	e086      	b.n	800b04a <UART_SetConfig+0x5a2>
 800af3c:	2304      	movs	r3, #4
 800af3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af42:	e082      	b.n	800b04a <UART_SetConfig+0x5a2>
 800af44:	2308      	movs	r3, #8
 800af46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af4a:	e07e      	b.n	800b04a <UART_SetConfig+0x5a2>
 800af4c:	2310      	movs	r3, #16
 800af4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af52:	e07a      	b.n	800b04a <UART_SetConfig+0x5a2>
 800af54:	2320      	movs	r3, #32
 800af56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af5a:	e076      	b.n	800b04a <UART_SetConfig+0x5a2>
 800af5c:	2340      	movs	r3, #64	; 0x40
 800af5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af62:	e072      	b.n	800b04a <UART_SetConfig+0x5a2>
 800af64:	2380      	movs	r3, #128	; 0x80
 800af66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af6a:	e06e      	b.n	800b04a <UART_SetConfig+0x5a2>
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	4a76      	ldr	r2, [pc, #472]	; (800b14c <UART_SetConfig+0x6a4>)
 800af72:	4293      	cmp	r3, r2
 800af74:	d130      	bne.n	800afd8 <UART_SetConfig+0x530>
 800af76:	4b73      	ldr	r3, [pc, #460]	; (800b144 <UART_SetConfig+0x69c>)
 800af78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af7a:	f003 0307 	and.w	r3, r3, #7
 800af7e:	2b05      	cmp	r3, #5
 800af80:	d826      	bhi.n	800afd0 <UART_SetConfig+0x528>
 800af82:	a201      	add	r2, pc, #4	; (adr r2, 800af88 <UART_SetConfig+0x4e0>)
 800af84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af88:	0800afa1 	.word	0x0800afa1
 800af8c:	0800afa9 	.word	0x0800afa9
 800af90:	0800afb1 	.word	0x0800afb1
 800af94:	0800afb9 	.word	0x0800afb9
 800af98:	0800afc1 	.word	0x0800afc1
 800af9c:	0800afc9 	.word	0x0800afc9
 800afa0:	2300      	movs	r3, #0
 800afa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afa6:	e050      	b.n	800b04a <UART_SetConfig+0x5a2>
 800afa8:	2304      	movs	r3, #4
 800afaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afae:	e04c      	b.n	800b04a <UART_SetConfig+0x5a2>
 800afb0:	2308      	movs	r3, #8
 800afb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afb6:	e048      	b.n	800b04a <UART_SetConfig+0x5a2>
 800afb8:	2310      	movs	r3, #16
 800afba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afbe:	e044      	b.n	800b04a <UART_SetConfig+0x5a2>
 800afc0:	2320      	movs	r3, #32
 800afc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afc6:	e040      	b.n	800b04a <UART_SetConfig+0x5a2>
 800afc8:	2340      	movs	r3, #64	; 0x40
 800afca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afce:	e03c      	b.n	800b04a <UART_SetConfig+0x5a2>
 800afd0:	2380      	movs	r3, #128	; 0x80
 800afd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afd6:	e038      	b.n	800b04a <UART_SetConfig+0x5a2>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4a5c      	ldr	r2, [pc, #368]	; (800b150 <UART_SetConfig+0x6a8>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d130      	bne.n	800b044 <UART_SetConfig+0x59c>
 800afe2:	4b58      	ldr	r3, [pc, #352]	; (800b144 <UART_SetConfig+0x69c>)
 800afe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afe6:	f003 0307 	and.w	r3, r3, #7
 800afea:	2b05      	cmp	r3, #5
 800afec:	d826      	bhi.n	800b03c <UART_SetConfig+0x594>
 800afee:	a201      	add	r2, pc, #4	; (adr r2, 800aff4 <UART_SetConfig+0x54c>)
 800aff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aff4:	0800b00d 	.word	0x0800b00d
 800aff8:	0800b015 	.word	0x0800b015
 800affc:	0800b01d 	.word	0x0800b01d
 800b000:	0800b025 	.word	0x0800b025
 800b004:	0800b02d 	.word	0x0800b02d
 800b008:	0800b035 	.word	0x0800b035
 800b00c:	2302      	movs	r3, #2
 800b00e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b012:	e01a      	b.n	800b04a <UART_SetConfig+0x5a2>
 800b014:	2304      	movs	r3, #4
 800b016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b01a:	e016      	b.n	800b04a <UART_SetConfig+0x5a2>
 800b01c:	2308      	movs	r3, #8
 800b01e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b022:	e012      	b.n	800b04a <UART_SetConfig+0x5a2>
 800b024:	2310      	movs	r3, #16
 800b026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b02a:	e00e      	b.n	800b04a <UART_SetConfig+0x5a2>
 800b02c:	2320      	movs	r3, #32
 800b02e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b032:	e00a      	b.n	800b04a <UART_SetConfig+0x5a2>
 800b034:	2340      	movs	r3, #64	; 0x40
 800b036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b03a:	e006      	b.n	800b04a <UART_SetConfig+0x5a2>
 800b03c:	2380      	movs	r3, #128	; 0x80
 800b03e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b042:	e002      	b.n	800b04a <UART_SetConfig+0x5a2>
 800b044:	2380      	movs	r3, #128	; 0x80
 800b046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	4a40      	ldr	r2, [pc, #256]	; (800b150 <UART_SetConfig+0x6a8>)
 800b050:	4293      	cmp	r3, r2
 800b052:	f040 80ef 	bne.w	800b234 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b056:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b05a:	2b20      	cmp	r3, #32
 800b05c:	dc46      	bgt.n	800b0ec <UART_SetConfig+0x644>
 800b05e:	2b02      	cmp	r3, #2
 800b060:	f2c0 8081 	blt.w	800b166 <UART_SetConfig+0x6be>
 800b064:	3b02      	subs	r3, #2
 800b066:	2b1e      	cmp	r3, #30
 800b068:	d87d      	bhi.n	800b166 <UART_SetConfig+0x6be>
 800b06a:	a201      	add	r2, pc, #4	; (adr r2, 800b070 <UART_SetConfig+0x5c8>)
 800b06c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b070:	0800b0f3 	.word	0x0800b0f3
 800b074:	0800b167 	.word	0x0800b167
 800b078:	0800b0fb 	.word	0x0800b0fb
 800b07c:	0800b167 	.word	0x0800b167
 800b080:	0800b167 	.word	0x0800b167
 800b084:	0800b167 	.word	0x0800b167
 800b088:	0800b10b 	.word	0x0800b10b
 800b08c:	0800b167 	.word	0x0800b167
 800b090:	0800b167 	.word	0x0800b167
 800b094:	0800b167 	.word	0x0800b167
 800b098:	0800b167 	.word	0x0800b167
 800b09c:	0800b167 	.word	0x0800b167
 800b0a0:	0800b167 	.word	0x0800b167
 800b0a4:	0800b167 	.word	0x0800b167
 800b0a8:	0800b11b 	.word	0x0800b11b
 800b0ac:	0800b167 	.word	0x0800b167
 800b0b0:	0800b167 	.word	0x0800b167
 800b0b4:	0800b167 	.word	0x0800b167
 800b0b8:	0800b167 	.word	0x0800b167
 800b0bc:	0800b167 	.word	0x0800b167
 800b0c0:	0800b167 	.word	0x0800b167
 800b0c4:	0800b167 	.word	0x0800b167
 800b0c8:	0800b167 	.word	0x0800b167
 800b0cc:	0800b167 	.word	0x0800b167
 800b0d0:	0800b167 	.word	0x0800b167
 800b0d4:	0800b167 	.word	0x0800b167
 800b0d8:	0800b167 	.word	0x0800b167
 800b0dc:	0800b167 	.word	0x0800b167
 800b0e0:	0800b167 	.word	0x0800b167
 800b0e4:	0800b167 	.word	0x0800b167
 800b0e8:	0800b159 	.word	0x0800b159
 800b0ec:	2b40      	cmp	r3, #64	; 0x40
 800b0ee:	d036      	beq.n	800b15e <UART_SetConfig+0x6b6>
 800b0f0:	e039      	b.n	800b166 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b0f2:	f7fd fda3 	bl	8008c3c <HAL_RCCEx_GetD3PCLK1Freq>
 800b0f6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b0f8:	e03b      	b.n	800b172 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0fa:	f107 0314 	add.w	r3, r7, #20
 800b0fe:	4618      	mov	r0, r3
 800b100:	f7fd fdb2 	bl	8008c68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b104:	69bb      	ldr	r3, [r7, #24]
 800b106:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b108:	e033      	b.n	800b172 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b10a:	f107 0308 	add.w	r3, r7, #8
 800b10e:	4618      	mov	r0, r3
 800b110:	f7fd fefe 	bl	8008f10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b118:	e02b      	b.n	800b172 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b11a:	4b0a      	ldr	r3, [pc, #40]	; (800b144 <UART_SetConfig+0x69c>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f003 0320 	and.w	r3, r3, #32
 800b122:	2b00      	cmp	r3, #0
 800b124:	d009      	beq.n	800b13a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b126:	4b07      	ldr	r3, [pc, #28]	; (800b144 <UART_SetConfig+0x69c>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	08db      	lsrs	r3, r3, #3
 800b12c:	f003 0303 	and.w	r3, r3, #3
 800b130:	4a08      	ldr	r2, [pc, #32]	; (800b154 <UART_SetConfig+0x6ac>)
 800b132:	fa22 f303 	lsr.w	r3, r2, r3
 800b136:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b138:	e01b      	b.n	800b172 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800b13a:	4b06      	ldr	r3, [pc, #24]	; (800b154 <UART_SetConfig+0x6ac>)
 800b13c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b13e:	e018      	b.n	800b172 <UART_SetConfig+0x6ca>
 800b140:	40011400 	.word	0x40011400
 800b144:	58024400 	.word	0x58024400
 800b148:	40007800 	.word	0x40007800
 800b14c:	40007c00 	.word	0x40007c00
 800b150:	58000c00 	.word	0x58000c00
 800b154:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b158:	4bc4      	ldr	r3, [pc, #784]	; (800b46c <UART_SetConfig+0x9c4>)
 800b15a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b15c:	e009      	b.n	800b172 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b15e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b162:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b164:	e005      	b.n	800b172 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800b166:	2300      	movs	r3, #0
 800b168:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b16a:	2301      	movs	r3, #1
 800b16c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b170:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b174:	2b00      	cmp	r3, #0
 800b176:	f000 81da 	beq.w	800b52e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b17e:	4abc      	ldr	r2, [pc, #752]	; (800b470 <UART_SetConfig+0x9c8>)
 800b180:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b184:	461a      	mov	r2, r3
 800b186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b188:	fbb3 f3f2 	udiv	r3, r3, r2
 800b18c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	685a      	ldr	r2, [r3, #4]
 800b192:	4613      	mov	r3, r2
 800b194:	005b      	lsls	r3, r3, #1
 800b196:	4413      	add	r3, r2
 800b198:	6a3a      	ldr	r2, [r7, #32]
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d305      	bcc.n	800b1aa <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b1a4:	6a3a      	ldr	r2, [r7, #32]
 800b1a6:	429a      	cmp	r2, r3
 800b1a8:	d903      	bls.n	800b1b2 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b1b0:	e1bd      	b.n	800b52e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f04f 0100 	mov.w	r1, #0
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1be:	4aac      	ldr	r2, [pc, #688]	; (800b470 <UART_SetConfig+0x9c8>)
 800b1c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1c4:	b29a      	uxth	r2, r3
 800b1c6:	f04f 0300 	mov.w	r3, #0
 800b1ca:	f7f5 f8e1 	bl	8000390 <__aeabi_uldivmod>
 800b1ce:	4602      	mov	r2, r0
 800b1d0:	460b      	mov	r3, r1
 800b1d2:	4610      	mov	r0, r2
 800b1d4:	4619      	mov	r1, r3
 800b1d6:	f04f 0200 	mov.w	r2, #0
 800b1da:	f04f 0300 	mov.w	r3, #0
 800b1de:	020b      	lsls	r3, r1, #8
 800b1e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b1e4:	0202      	lsls	r2, r0, #8
 800b1e6:	6879      	ldr	r1, [r7, #4]
 800b1e8:	6849      	ldr	r1, [r1, #4]
 800b1ea:	0849      	lsrs	r1, r1, #1
 800b1ec:	4608      	mov	r0, r1
 800b1ee:	f04f 0100 	mov.w	r1, #0
 800b1f2:	1814      	adds	r4, r2, r0
 800b1f4:	eb43 0501 	adc.w	r5, r3, r1
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	461a      	mov	r2, r3
 800b1fe:	f04f 0300 	mov.w	r3, #0
 800b202:	4620      	mov	r0, r4
 800b204:	4629      	mov	r1, r5
 800b206:	f7f5 f8c3 	bl	8000390 <__aeabi_uldivmod>
 800b20a:	4602      	mov	r2, r0
 800b20c:	460b      	mov	r3, r1
 800b20e:	4613      	mov	r3, r2
 800b210:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b214:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b218:	d308      	bcc.n	800b22c <UART_SetConfig+0x784>
 800b21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b21c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b220:	d204      	bcs.n	800b22c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b228:	60da      	str	r2, [r3, #12]
 800b22a:	e180      	b.n	800b52e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800b22c:	2301      	movs	r3, #1
 800b22e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b232:	e17c      	b.n	800b52e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	69db      	ldr	r3, [r3, #28]
 800b238:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b23c:	f040 80bf 	bne.w	800b3be <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800b240:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b244:	2b20      	cmp	r3, #32
 800b246:	dc49      	bgt.n	800b2dc <UART_SetConfig+0x834>
 800b248:	2b00      	cmp	r3, #0
 800b24a:	db7c      	blt.n	800b346 <UART_SetConfig+0x89e>
 800b24c:	2b20      	cmp	r3, #32
 800b24e:	d87a      	bhi.n	800b346 <UART_SetConfig+0x89e>
 800b250:	a201      	add	r2, pc, #4	; (adr r2, 800b258 <UART_SetConfig+0x7b0>)
 800b252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b256:	bf00      	nop
 800b258:	0800b2e3 	.word	0x0800b2e3
 800b25c:	0800b2eb 	.word	0x0800b2eb
 800b260:	0800b347 	.word	0x0800b347
 800b264:	0800b347 	.word	0x0800b347
 800b268:	0800b2f3 	.word	0x0800b2f3
 800b26c:	0800b347 	.word	0x0800b347
 800b270:	0800b347 	.word	0x0800b347
 800b274:	0800b347 	.word	0x0800b347
 800b278:	0800b303 	.word	0x0800b303
 800b27c:	0800b347 	.word	0x0800b347
 800b280:	0800b347 	.word	0x0800b347
 800b284:	0800b347 	.word	0x0800b347
 800b288:	0800b347 	.word	0x0800b347
 800b28c:	0800b347 	.word	0x0800b347
 800b290:	0800b347 	.word	0x0800b347
 800b294:	0800b347 	.word	0x0800b347
 800b298:	0800b313 	.word	0x0800b313
 800b29c:	0800b347 	.word	0x0800b347
 800b2a0:	0800b347 	.word	0x0800b347
 800b2a4:	0800b347 	.word	0x0800b347
 800b2a8:	0800b347 	.word	0x0800b347
 800b2ac:	0800b347 	.word	0x0800b347
 800b2b0:	0800b347 	.word	0x0800b347
 800b2b4:	0800b347 	.word	0x0800b347
 800b2b8:	0800b347 	.word	0x0800b347
 800b2bc:	0800b347 	.word	0x0800b347
 800b2c0:	0800b347 	.word	0x0800b347
 800b2c4:	0800b347 	.word	0x0800b347
 800b2c8:	0800b347 	.word	0x0800b347
 800b2cc:	0800b347 	.word	0x0800b347
 800b2d0:	0800b347 	.word	0x0800b347
 800b2d4:	0800b347 	.word	0x0800b347
 800b2d8:	0800b339 	.word	0x0800b339
 800b2dc:	2b40      	cmp	r3, #64	; 0x40
 800b2de:	d02e      	beq.n	800b33e <UART_SetConfig+0x896>
 800b2e0:	e031      	b.n	800b346 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b2e2:	f7fc f86d 	bl	80073c0 <HAL_RCC_GetPCLK1Freq>
 800b2e6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b2e8:	e033      	b.n	800b352 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b2ea:	f7fc f87f 	bl	80073ec <HAL_RCC_GetPCLK2Freq>
 800b2ee:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b2f0:	e02f      	b.n	800b352 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2f2:	f107 0314 	add.w	r3, r7, #20
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f7fd fcb6 	bl	8008c68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b2fc:	69bb      	ldr	r3, [r7, #24]
 800b2fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b300:	e027      	b.n	800b352 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b302:	f107 0308 	add.w	r3, r7, #8
 800b306:	4618      	mov	r0, r3
 800b308:	f7fd fe02 	bl	8008f10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b310:	e01f      	b.n	800b352 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b312:	4b58      	ldr	r3, [pc, #352]	; (800b474 <UART_SetConfig+0x9cc>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f003 0320 	and.w	r3, r3, #32
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d009      	beq.n	800b332 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b31e:	4b55      	ldr	r3, [pc, #340]	; (800b474 <UART_SetConfig+0x9cc>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	08db      	lsrs	r3, r3, #3
 800b324:	f003 0303 	and.w	r3, r3, #3
 800b328:	4a53      	ldr	r2, [pc, #332]	; (800b478 <UART_SetConfig+0x9d0>)
 800b32a:	fa22 f303 	lsr.w	r3, r2, r3
 800b32e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b330:	e00f      	b.n	800b352 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800b332:	4b51      	ldr	r3, [pc, #324]	; (800b478 <UART_SetConfig+0x9d0>)
 800b334:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b336:	e00c      	b.n	800b352 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b338:	4b4c      	ldr	r3, [pc, #304]	; (800b46c <UART_SetConfig+0x9c4>)
 800b33a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b33c:	e009      	b.n	800b352 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b33e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b342:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b344:	e005      	b.n	800b352 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800b346:	2300      	movs	r3, #0
 800b348:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b34a:	2301      	movs	r3, #1
 800b34c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b350:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b354:	2b00      	cmp	r3, #0
 800b356:	f000 80ea 	beq.w	800b52e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b35e:	4a44      	ldr	r2, [pc, #272]	; (800b470 <UART_SetConfig+0x9c8>)
 800b360:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b364:	461a      	mov	r2, r3
 800b366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b368:	fbb3 f3f2 	udiv	r3, r3, r2
 800b36c:	005a      	lsls	r2, r3, #1
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	085b      	lsrs	r3, r3, #1
 800b374:	441a      	add	r2, r3
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	685b      	ldr	r3, [r3, #4]
 800b37a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b37e:	b29b      	uxth	r3, r3
 800b380:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b384:	2b0f      	cmp	r3, #15
 800b386:	d916      	bls.n	800b3b6 <UART_SetConfig+0x90e>
 800b388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b38a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b38e:	d212      	bcs.n	800b3b6 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b392:	b29b      	uxth	r3, r3
 800b394:	f023 030f 	bic.w	r3, r3, #15
 800b398:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b39c:	085b      	lsrs	r3, r3, #1
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	f003 0307 	and.w	r3, r3, #7
 800b3a4:	b29a      	uxth	r2, r3
 800b3a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b3b2:	60da      	str	r2, [r3, #12]
 800b3b4:	e0bb      	b.n	800b52e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b3bc:	e0b7      	b.n	800b52e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b3be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b3c2:	2b20      	cmp	r3, #32
 800b3c4:	dc4a      	bgt.n	800b45c <UART_SetConfig+0x9b4>
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	f2c0 8086 	blt.w	800b4d8 <UART_SetConfig+0xa30>
 800b3cc:	2b20      	cmp	r3, #32
 800b3ce:	f200 8083 	bhi.w	800b4d8 <UART_SetConfig+0xa30>
 800b3d2:	a201      	add	r2, pc, #4	; (adr r2, 800b3d8 <UART_SetConfig+0x930>)
 800b3d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3d8:	0800b463 	.word	0x0800b463
 800b3dc:	0800b47d 	.word	0x0800b47d
 800b3e0:	0800b4d9 	.word	0x0800b4d9
 800b3e4:	0800b4d9 	.word	0x0800b4d9
 800b3e8:	0800b485 	.word	0x0800b485
 800b3ec:	0800b4d9 	.word	0x0800b4d9
 800b3f0:	0800b4d9 	.word	0x0800b4d9
 800b3f4:	0800b4d9 	.word	0x0800b4d9
 800b3f8:	0800b495 	.word	0x0800b495
 800b3fc:	0800b4d9 	.word	0x0800b4d9
 800b400:	0800b4d9 	.word	0x0800b4d9
 800b404:	0800b4d9 	.word	0x0800b4d9
 800b408:	0800b4d9 	.word	0x0800b4d9
 800b40c:	0800b4d9 	.word	0x0800b4d9
 800b410:	0800b4d9 	.word	0x0800b4d9
 800b414:	0800b4d9 	.word	0x0800b4d9
 800b418:	0800b4a5 	.word	0x0800b4a5
 800b41c:	0800b4d9 	.word	0x0800b4d9
 800b420:	0800b4d9 	.word	0x0800b4d9
 800b424:	0800b4d9 	.word	0x0800b4d9
 800b428:	0800b4d9 	.word	0x0800b4d9
 800b42c:	0800b4d9 	.word	0x0800b4d9
 800b430:	0800b4d9 	.word	0x0800b4d9
 800b434:	0800b4d9 	.word	0x0800b4d9
 800b438:	0800b4d9 	.word	0x0800b4d9
 800b43c:	0800b4d9 	.word	0x0800b4d9
 800b440:	0800b4d9 	.word	0x0800b4d9
 800b444:	0800b4d9 	.word	0x0800b4d9
 800b448:	0800b4d9 	.word	0x0800b4d9
 800b44c:	0800b4d9 	.word	0x0800b4d9
 800b450:	0800b4d9 	.word	0x0800b4d9
 800b454:	0800b4d9 	.word	0x0800b4d9
 800b458:	0800b4cb 	.word	0x0800b4cb
 800b45c:	2b40      	cmp	r3, #64	; 0x40
 800b45e:	d037      	beq.n	800b4d0 <UART_SetConfig+0xa28>
 800b460:	e03a      	b.n	800b4d8 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b462:	f7fb ffad 	bl	80073c0 <HAL_RCC_GetPCLK1Freq>
 800b466:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b468:	e03c      	b.n	800b4e4 <UART_SetConfig+0xa3c>
 800b46a:	bf00      	nop
 800b46c:	003d0900 	.word	0x003d0900
 800b470:	0800f858 	.word	0x0800f858
 800b474:	58024400 	.word	0x58024400
 800b478:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b47c:	f7fb ffb6 	bl	80073ec <HAL_RCC_GetPCLK2Freq>
 800b480:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b482:	e02f      	b.n	800b4e4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b484:	f107 0314 	add.w	r3, r7, #20
 800b488:	4618      	mov	r0, r3
 800b48a:	f7fd fbed 	bl	8008c68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b48e:	69bb      	ldr	r3, [r7, #24]
 800b490:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b492:	e027      	b.n	800b4e4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b494:	f107 0308 	add.w	r3, r7, #8
 800b498:	4618      	mov	r0, r3
 800b49a:	f7fd fd39 	bl	8008f10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b4a2:	e01f      	b.n	800b4e4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4a4:	4b2c      	ldr	r3, [pc, #176]	; (800b558 <UART_SetConfig+0xab0>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f003 0320 	and.w	r3, r3, #32
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d009      	beq.n	800b4c4 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b4b0:	4b29      	ldr	r3, [pc, #164]	; (800b558 <UART_SetConfig+0xab0>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	08db      	lsrs	r3, r3, #3
 800b4b6:	f003 0303 	and.w	r3, r3, #3
 800b4ba:	4a28      	ldr	r2, [pc, #160]	; (800b55c <UART_SetConfig+0xab4>)
 800b4bc:	fa22 f303 	lsr.w	r3, r2, r3
 800b4c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b4c2:	e00f      	b.n	800b4e4 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800b4c4:	4b25      	ldr	r3, [pc, #148]	; (800b55c <UART_SetConfig+0xab4>)
 800b4c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b4c8:	e00c      	b.n	800b4e4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b4ca:	4b25      	ldr	r3, [pc, #148]	; (800b560 <UART_SetConfig+0xab8>)
 800b4cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b4ce:	e009      	b.n	800b4e4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b4d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b4d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b4d6:	e005      	b.n	800b4e4 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b4dc:	2301      	movs	r3, #1
 800b4de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b4e2:	bf00      	nop
    }

    if (pclk != 0U)
 800b4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d021      	beq.n	800b52e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ee:	4a1d      	ldr	r2, [pc, #116]	; (800b564 <UART_SetConfig+0xabc>)
 800b4f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4f4:	461a      	mov	r2, r3
 800b4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f8:	fbb3 f2f2 	udiv	r2, r3, r2
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	685b      	ldr	r3, [r3, #4]
 800b500:	085b      	lsrs	r3, r3, #1
 800b502:	441a      	add	r2, r3
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	fbb2 f3f3 	udiv	r3, r2, r3
 800b50c:	b29b      	uxth	r3, r3
 800b50e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b512:	2b0f      	cmp	r3, #15
 800b514:	d908      	bls.n	800b528 <UART_SetConfig+0xa80>
 800b516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b51c:	d204      	bcs.n	800b528 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b524:	60da      	str	r2, [r3, #12]
 800b526:	e002      	b.n	800b52e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800b528:	2301      	movs	r3, #1
 800b52a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2201      	movs	r2, #1
 800b532:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2201      	movs	r2, #1
 800b53a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2200      	movs	r2, #0
 800b542:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2200      	movs	r2, #0
 800b548:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b54a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3738      	adds	r7, #56	; 0x38
 800b552:	46bd      	mov	sp, r7
 800b554:	bdb0      	pop	{r4, r5, r7, pc}
 800b556:	bf00      	nop
 800b558:	58024400 	.word	0x58024400
 800b55c:	03d09000 	.word	0x03d09000
 800b560:	003d0900 	.word	0x003d0900
 800b564:	0800f858 	.word	0x0800f858

0800b568 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b568:	b480      	push	{r7}
 800b56a:	b083      	sub	sp, #12
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b574:	f003 0301 	and.w	r3, r3, #1
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d00a      	beq.n	800b592 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	685b      	ldr	r3, [r3, #4]
 800b582:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	430a      	orrs	r2, r1
 800b590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b596:	f003 0302 	and.w	r3, r3, #2
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d00a      	beq.n	800b5b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	430a      	orrs	r2, r1
 800b5b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5b8:	f003 0304 	and.w	r3, r3, #4
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d00a      	beq.n	800b5d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	685b      	ldr	r3, [r3, #4]
 800b5c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	430a      	orrs	r2, r1
 800b5d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5da:	f003 0308 	and.w	r3, r3, #8
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d00a      	beq.n	800b5f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	685b      	ldr	r3, [r3, #4]
 800b5e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	430a      	orrs	r2, r1
 800b5f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5fc:	f003 0310 	and.w	r3, r3, #16
 800b600:	2b00      	cmp	r3, #0
 800b602:	d00a      	beq.n	800b61a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	689b      	ldr	r3, [r3, #8]
 800b60a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	430a      	orrs	r2, r1
 800b618:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b61e:	f003 0320 	and.w	r3, r3, #32
 800b622:	2b00      	cmp	r3, #0
 800b624:	d00a      	beq.n	800b63c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	689b      	ldr	r3, [r3, #8]
 800b62c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	430a      	orrs	r2, r1
 800b63a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b644:	2b00      	cmp	r3, #0
 800b646:	d01a      	beq.n	800b67e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	685b      	ldr	r3, [r3, #4]
 800b64e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	430a      	orrs	r2, r1
 800b65c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b662:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b666:	d10a      	bne.n	800b67e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	430a      	orrs	r2, r1
 800b67c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b686:	2b00      	cmp	r3, #0
 800b688:	d00a      	beq.n	800b6a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	685b      	ldr	r3, [r3, #4]
 800b690:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	430a      	orrs	r2, r1
 800b69e:	605a      	str	r2, [r3, #4]
  }
}
 800b6a0:	bf00      	nop
 800b6a2:	370c      	adds	r7, #12
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr

0800b6ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b086      	sub	sp, #24
 800b6b0:	af02      	add	r7, sp, #8
 800b6b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b6bc:	f7f8 f8e2 	bl	8003884 <HAL_GetTick>
 800b6c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	f003 0308 	and.w	r3, r3, #8
 800b6cc:	2b08      	cmp	r3, #8
 800b6ce:	d10e      	bne.n	800b6ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b6d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b6d4:	9300      	str	r3, [sp, #0]
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f000 f82f 	bl	800b742 <UART_WaitOnFlagUntilTimeout>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d001      	beq.n	800b6ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b6ea:	2303      	movs	r3, #3
 800b6ec:	e025      	b.n	800b73a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f003 0304 	and.w	r3, r3, #4
 800b6f8:	2b04      	cmp	r3, #4
 800b6fa:	d10e      	bne.n	800b71a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b6fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b700:	9300      	str	r3, [sp, #0]
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	2200      	movs	r2, #0
 800b706:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f000 f819 	bl	800b742 <UART_WaitOnFlagUntilTimeout>
 800b710:	4603      	mov	r3, r0
 800b712:	2b00      	cmp	r3, #0
 800b714:	d001      	beq.n	800b71a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b716:	2303      	movs	r3, #3
 800b718:	e00f      	b.n	800b73a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2220      	movs	r2, #32
 800b71e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2220      	movs	r2, #32
 800b726:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2200      	movs	r2, #0
 800b72e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2200      	movs	r2, #0
 800b734:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b738:	2300      	movs	r3, #0
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3710      	adds	r7, #16
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}

0800b742 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b742:	b580      	push	{r7, lr}
 800b744:	b084      	sub	sp, #16
 800b746:	af00      	add	r7, sp, #0
 800b748:	60f8      	str	r0, [r7, #12]
 800b74a:	60b9      	str	r1, [r7, #8]
 800b74c:	603b      	str	r3, [r7, #0]
 800b74e:	4613      	mov	r3, r2
 800b750:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b752:	e062      	b.n	800b81a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b754:	69bb      	ldr	r3, [r7, #24]
 800b756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b75a:	d05e      	beq.n	800b81a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b75c:	f7f8 f892 	bl	8003884 <HAL_GetTick>
 800b760:	4602      	mov	r2, r0
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	1ad3      	subs	r3, r2, r3
 800b766:	69ba      	ldr	r2, [r7, #24]
 800b768:	429a      	cmp	r2, r3
 800b76a:	d302      	bcc.n	800b772 <UART_WaitOnFlagUntilTimeout+0x30>
 800b76c:	69bb      	ldr	r3, [r7, #24]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d11d      	bne.n	800b7ae <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	681a      	ldr	r2, [r3, #0]
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b780:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	689a      	ldr	r2, [r3, #8]
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f022 0201 	bic.w	r2, r2, #1
 800b790:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	2220      	movs	r2, #32
 800b796:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	2220      	movs	r2, #32
 800b79e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b7aa:	2303      	movs	r3, #3
 800b7ac:	e045      	b.n	800b83a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f003 0304 	and.w	r3, r3, #4
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d02e      	beq.n	800b81a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	69db      	ldr	r3, [r3, #28]
 800b7c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b7c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7ca:	d126      	bne.n	800b81a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b7d4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	681a      	ldr	r2, [r3, #0]
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b7e4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	689a      	ldr	r2, [r3, #8]
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f022 0201 	bic.w	r2, r2, #1
 800b7f4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	2220      	movs	r2, #32
 800b7fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	2220      	movs	r2, #32
 800b802:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	2220      	movs	r2, #32
 800b80a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	2200      	movs	r2, #0
 800b812:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b816:	2303      	movs	r3, #3
 800b818:	e00f      	b.n	800b83a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	69da      	ldr	r2, [r3, #28]
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	4013      	ands	r3, r2
 800b824:	68ba      	ldr	r2, [r7, #8]
 800b826:	429a      	cmp	r2, r3
 800b828:	bf0c      	ite	eq
 800b82a:	2301      	moveq	r3, #1
 800b82c:	2300      	movne	r3, #0
 800b82e:	b2db      	uxtb	r3, r3
 800b830:	461a      	mov	r2, r3
 800b832:	79fb      	ldrb	r3, [r7, #7]
 800b834:	429a      	cmp	r2, r3
 800b836:	d08d      	beq.n	800b754 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b838:	2300      	movs	r3, #0
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3710      	adds	r7, #16
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}

0800b842 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b842:	b480      	push	{r7}
 800b844:	b085      	sub	sp, #20
 800b846:	af00      	add	r7, sp, #0
 800b848:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b850:	2b01      	cmp	r3, #1
 800b852:	d101      	bne.n	800b858 <HAL_UARTEx_DisableFifoMode+0x16>
 800b854:	2302      	movs	r3, #2
 800b856:	e027      	b.n	800b8a8 <HAL_UARTEx_DisableFifoMode+0x66>
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2201      	movs	r2, #1
 800b85c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2224      	movs	r2, #36	; 0x24
 800b864:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	681a      	ldr	r2, [r3, #0]
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f022 0201 	bic.w	r2, r2, #1
 800b87e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b886:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2200      	movs	r2, #0
 800b88c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	68fa      	ldr	r2, [r7, #12]
 800b894:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2220      	movs	r2, #32
 800b89a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b8a6:	2300      	movs	r3, #0
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3714      	adds	r7, #20
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b2:	4770      	bx	lr

0800b8b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b084      	sub	sp, #16
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b8c4:	2b01      	cmp	r3, #1
 800b8c6:	d101      	bne.n	800b8cc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b8c8:	2302      	movs	r3, #2
 800b8ca:	e02d      	b.n	800b928 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2201      	movs	r2, #1
 800b8d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2224      	movs	r2, #36	; 0x24
 800b8d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	681a      	ldr	r2, [r3, #0]
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f022 0201 	bic.w	r2, r2, #1
 800b8f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	689b      	ldr	r3, [r3, #8]
 800b8fa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	683a      	ldr	r2, [r7, #0]
 800b904:	430a      	orrs	r2, r1
 800b906:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 f84f 	bl	800b9ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	68fa      	ldr	r2, [r7, #12]
 800b914:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2220      	movs	r2, #32
 800b91a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2200      	movs	r2, #0
 800b922:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b926:	2300      	movs	r3, #0
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3710      	adds	r7, #16
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b940:	2b01      	cmp	r3, #1
 800b942:	d101      	bne.n	800b948 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b944:	2302      	movs	r3, #2
 800b946:	e02d      	b.n	800b9a4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2201      	movs	r2, #1
 800b94c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2224      	movs	r2, #36	; 0x24
 800b954:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	681a      	ldr	r2, [r3, #0]
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f022 0201 	bic.w	r2, r2, #1
 800b96e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	689b      	ldr	r3, [r3, #8]
 800b976:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	683a      	ldr	r2, [r7, #0]
 800b980:	430a      	orrs	r2, r1
 800b982:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f000 f811 	bl	800b9ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	68fa      	ldr	r2, [r7, #12]
 800b990:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2220      	movs	r2, #32
 800b996:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2200      	movs	r2, #0
 800b99e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b9a2:	2300      	movs	r3, #0
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3710      	adds	r7, #16
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}

0800b9ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b085      	sub	sp, #20
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d108      	bne.n	800b9ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2201      	movs	r2, #1
 800b9c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b9cc:	e031      	b.n	800ba32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b9ce:	2310      	movs	r3, #16
 800b9d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b9d2:	2310      	movs	r3, #16
 800b9d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	689b      	ldr	r3, [r3, #8]
 800b9dc:	0e5b      	lsrs	r3, r3, #25
 800b9de:	b2db      	uxtb	r3, r3
 800b9e0:	f003 0307 	and.w	r3, r3, #7
 800b9e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	689b      	ldr	r3, [r3, #8]
 800b9ec:	0f5b      	lsrs	r3, r3, #29
 800b9ee:	b2db      	uxtb	r3, r3
 800b9f0:	f003 0307 	and.w	r3, r3, #7
 800b9f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b9f6:	7bbb      	ldrb	r3, [r7, #14]
 800b9f8:	7b3a      	ldrb	r2, [r7, #12]
 800b9fa:	4911      	ldr	r1, [pc, #68]	; (800ba40 <UARTEx_SetNbDataToProcess+0x94>)
 800b9fc:	5c8a      	ldrb	r2, [r1, r2]
 800b9fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ba02:	7b3a      	ldrb	r2, [r7, #12]
 800ba04:	490f      	ldr	r1, [pc, #60]	; (800ba44 <UARTEx_SetNbDataToProcess+0x98>)
 800ba06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ba08:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba0c:	b29a      	uxth	r2, r3
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba14:	7bfb      	ldrb	r3, [r7, #15]
 800ba16:	7b7a      	ldrb	r2, [r7, #13]
 800ba18:	4909      	ldr	r1, [pc, #36]	; (800ba40 <UARTEx_SetNbDataToProcess+0x94>)
 800ba1a:	5c8a      	ldrb	r2, [r1, r2]
 800ba1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ba20:	7b7a      	ldrb	r2, [r7, #13]
 800ba22:	4908      	ldr	r1, [pc, #32]	; (800ba44 <UARTEx_SetNbDataToProcess+0x98>)
 800ba24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba26:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba2a:	b29a      	uxth	r2, r3
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ba32:	bf00      	nop
 800ba34:	3714      	adds	r7, #20
 800ba36:	46bd      	mov	sp, r7
 800ba38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3c:	4770      	bx	lr
 800ba3e:	bf00      	nop
 800ba40:	0800f870 	.word	0x0800f870
 800ba44:	0800f878 	.word	0x0800f878

0800ba48 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b082      	sub	sp, #8
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d101      	bne.n	800ba5a <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800ba56:	2301      	movs	r3, #1
 800ba58:	e03c      	b.n	800bad4 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ba60:	b2db      	uxtb	r3, r3
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d106      	bne.n	800ba74 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2200      	movs	r2, #0
 800ba6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f7f6 fd24 	bl	80024bc <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2202      	movs	r2, #2
 800ba78:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	681a      	ldr	r2, [r3, #0]
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f022 0201 	bic.w	r2, r2, #1
 800ba8a:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f000 f85b 	bl	800bb48 <USART_SetConfig>
 800ba92:	4603      	mov	r3, r0
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	d101      	bne.n	800ba9c <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 800ba98:	2301      	movs	r3, #1
 800ba9a:	e01b      	b.n	800bad4 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	685a      	ldr	r2, [r3, #4]
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800baaa:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	689a      	ldr	r2, [r3, #8]
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800baba:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	681a      	ldr	r2, [r3, #0]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f042 0201 	orr.w	r2, r2, #1
 800baca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f000 fd5b 	bl	800c588 <USART_CheckIdleState>
 800bad2:	4603      	mov	r3, r0
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3708      	adds	r7, #8
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}

0800badc <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b084      	sub	sp, #16
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	60f8      	str	r0, [r7, #12]
 800bae4:	60b9      	str	r1, [r7, #8]
 800bae6:	603b      	str	r3, [r7, #0]
 800bae8:	4613      	mov	r3, r2
 800baea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800baec:	e018      	b.n	800bb20 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800baee:	69bb      	ldr	r3, [r7, #24]
 800baf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baf4:	d014      	beq.n	800bb20 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800baf6:	f7f7 fec5 	bl	8003884 <HAL_GetTick>
 800bafa:	4602      	mov	r2, r0
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	1ad3      	subs	r3, r2, r3
 800bb00:	69ba      	ldr	r2, [r7, #24]
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d302      	bcc.n	800bb0c <USART_WaitOnFlagUntilTimeout+0x30>
 800bb06:	69bb      	ldr	r3, [r7, #24]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d109      	bne.n	800bb20 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	2201      	movs	r2, #1
 800bb10:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	2200      	movs	r2, #0
 800bb18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_TIMEOUT;
 800bb1c:	2303      	movs	r3, #3
 800bb1e:	e00f      	b.n	800bb40 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	69da      	ldr	r2, [r3, #28]
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	4013      	ands	r3, r2
 800bb2a:	68ba      	ldr	r2, [r7, #8]
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	bf0c      	ite	eq
 800bb30:	2301      	moveq	r3, #1
 800bb32:	2300      	movne	r3, #0
 800bb34:	b2db      	uxtb	r3, r3
 800bb36:	461a      	mov	r2, r3
 800bb38:	79fb      	ldrb	r3, [r7, #7]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d0d7      	beq.n	800baee <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bb3e:	2300      	movs	r3, #0
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3710      	adds	r7, #16
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}

0800bb48 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b08e      	sub	sp, #56	; 0x38
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800bb50:	2300      	movs	r3, #0
 800bb52:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800bb56:	2300      	movs	r3, #0
 800bb58:	633b      	str	r3, [r7, #48]	; 0x30
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	689a      	ldr	r2, [r3, #8]
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	691b      	ldr	r3, [r3, #16]
 800bb62:	431a      	orrs	r2, r3
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	695b      	ldr	r3, [r3, #20]
 800bb68:	4313      	orrs	r3, r2
 800bb6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	681a      	ldr	r2, [r3, #0]
 800bb76:	4bc9      	ldr	r3, [pc, #804]	; (800be9c <USART_SetConfig+0x354>)
 800bb78:	4013      	ands	r3, r2
 800bb7a:	687a      	ldr	r2, [r7, #4]
 800bb7c:	6812      	ldr	r2, [r2, #0]
 800bb7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb80:	430b      	orrs	r3, r1
 800bb82:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800bb84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bb88:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6a1b      	ldr	r3, [r3, #32]
 800bb8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb90:	4313      	orrs	r3, r2
 800bb92:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	699a      	ldr	r2, [r3, #24]
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	69db      	ldr	r3, [r3, #28]
 800bb9c:	4313      	orrs	r3, r2
 800bb9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bba0:	4313      	orrs	r3, r2
 800bba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	68db      	ldr	r3, [r3, #12]
 800bba8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbaa:	4313      	orrs	r3, r2
 800bbac:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	685a      	ldr	r2, [r3, #4]
 800bbb4:	4bba      	ldr	r3, [pc, #744]	; (800bea0 <USART_SetConfig+0x358>)
 800bbb6:	4013      	ands	r3, r2
 800bbb8:	687a      	ldr	r2, [r7, #4]
 800bbba:	6812      	ldr	r2, [r2, #0]
 800bbbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bbbe:	430b      	orrs	r3, r1
 800bbc0:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbc8:	f023 010f 	bic.w	r1, r3, #15
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	430a      	orrs	r2, r1
 800bbd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	4ab1      	ldr	r2, [pc, #708]	; (800bea4 <USART_SetConfig+0x35c>)
 800bbde:	4293      	cmp	r3, r2
 800bbe0:	d176      	bne.n	800bcd0 <USART_SetConfig+0x188>
 800bbe2:	4bb1      	ldr	r3, [pc, #708]	; (800bea8 <USART_SetConfig+0x360>)
 800bbe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbe6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bbea:	2b28      	cmp	r3, #40	; 0x28
 800bbec:	d86c      	bhi.n	800bcc8 <USART_SetConfig+0x180>
 800bbee:	a201      	add	r2, pc, #4	; (adr r2, 800bbf4 <USART_SetConfig+0xac>)
 800bbf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbf4:	0800bc99 	.word	0x0800bc99
 800bbf8:	0800bcc9 	.word	0x0800bcc9
 800bbfc:	0800bcc9 	.word	0x0800bcc9
 800bc00:	0800bcc9 	.word	0x0800bcc9
 800bc04:	0800bcc9 	.word	0x0800bcc9
 800bc08:	0800bcc9 	.word	0x0800bcc9
 800bc0c:	0800bcc9 	.word	0x0800bcc9
 800bc10:	0800bcc9 	.word	0x0800bcc9
 800bc14:	0800bca1 	.word	0x0800bca1
 800bc18:	0800bcc9 	.word	0x0800bcc9
 800bc1c:	0800bcc9 	.word	0x0800bcc9
 800bc20:	0800bcc9 	.word	0x0800bcc9
 800bc24:	0800bcc9 	.word	0x0800bcc9
 800bc28:	0800bcc9 	.word	0x0800bcc9
 800bc2c:	0800bcc9 	.word	0x0800bcc9
 800bc30:	0800bcc9 	.word	0x0800bcc9
 800bc34:	0800bca9 	.word	0x0800bca9
 800bc38:	0800bcc9 	.word	0x0800bcc9
 800bc3c:	0800bcc9 	.word	0x0800bcc9
 800bc40:	0800bcc9 	.word	0x0800bcc9
 800bc44:	0800bcc9 	.word	0x0800bcc9
 800bc48:	0800bcc9 	.word	0x0800bcc9
 800bc4c:	0800bcc9 	.word	0x0800bcc9
 800bc50:	0800bcc9 	.word	0x0800bcc9
 800bc54:	0800bcb1 	.word	0x0800bcb1
 800bc58:	0800bcc9 	.word	0x0800bcc9
 800bc5c:	0800bcc9 	.word	0x0800bcc9
 800bc60:	0800bcc9 	.word	0x0800bcc9
 800bc64:	0800bcc9 	.word	0x0800bcc9
 800bc68:	0800bcc9 	.word	0x0800bcc9
 800bc6c:	0800bcc9 	.word	0x0800bcc9
 800bc70:	0800bcc9 	.word	0x0800bcc9
 800bc74:	0800bcb9 	.word	0x0800bcb9
 800bc78:	0800bcc9 	.word	0x0800bcc9
 800bc7c:	0800bcc9 	.word	0x0800bcc9
 800bc80:	0800bcc9 	.word	0x0800bcc9
 800bc84:	0800bcc9 	.word	0x0800bcc9
 800bc88:	0800bcc9 	.word	0x0800bcc9
 800bc8c:	0800bcc9 	.word	0x0800bcc9
 800bc90:	0800bcc9 	.word	0x0800bcc9
 800bc94:	0800bcc1 	.word	0x0800bcc1
 800bc98:	2301      	movs	r3, #1
 800bc9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bc9e:	e112      	b.n	800bec6 <USART_SetConfig+0x37e>
 800bca0:	2302      	movs	r3, #2
 800bca2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bca6:	e10e      	b.n	800bec6 <USART_SetConfig+0x37e>
 800bca8:	2304      	movs	r3, #4
 800bcaa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bcae:	e10a      	b.n	800bec6 <USART_SetConfig+0x37e>
 800bcb0:	2308      	movs	r3, #8
 800bcb2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bcb6:	e106      	b.n	800bec6 <USART_SetConfig+0x37e>
 800bcb8:	2310      	movs	r3, #16
 800bcba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bcbe:	e102      	b.n	800bec6 <USART_SetConfig+0x37e>
 800bcc0:	2320      	movs	r3, #32
 800bcc2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bcc6:	e0fe      	b.n	800bec6 <USART_SetConfig+0x37e>
 800bcc8:	2340      	movs	r3, #64	; 0x40
 800bcca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bcce:	e0fa      	b.n	800bec6 <USART_SetConfig+0x37e>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	4a75      	ldr	r2, [pc, #468]	; (800beac <USART_SetConfig+0x364>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d130      	bne.n	800bd3c <USART_SetConfig+0x1f4>
 800bcda:	4b73      	ldr	r3, [pc, #460]	; (800bea8 <USART_SetConfig+0x360>)
 800bcdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcde:	f003 0307 	and.w	r3, r3, #7
 800bce2:	2b05      	cmp	r3, #5
 800bce4:	d826      	bhi.n	800bd34 <USART_SetConfig+0x1ec>
 800bce6:	a201      	add	r2, pc, #4	; (adr r2, 800bcec <USART_SetConfig+0x1a4>)
 800bce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcec:	0800bd05 	.word	0x0800bd05
 800bcf0:	0800bd0d 	.word	0x0800bd0d
 800bcf4:	0800bd15 	.word	0x0800bd15
 800bcf8:	0800bd1d 	.word	0x0800bd1d
 800bcfc:	0800bd25 	.word	0x0800bd25
 800bd00:	0800bd2d 	.word	0x0800bd2d
 800bd04:	2300      	movs	r3, #0
 800bd06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bd0a:	e0dc      	b.n	800bec6 <USART_SetConfig+0x37e>
 800bd0c:	2302      	movs	r3, #2
 800bd0e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bd12:	e0d8      	b.n	800bec6 <USART_SetConfig+0x37e>
 800bd14:	2304      	movs	r3, #4
 800bd16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bd1a:	e0d4      	b.n	800bec6 <USART_SetConfig+0x37e>
 800bd1c:	2308      	movs	r3, #8
 800bd1e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bd22:	e0d0      	b.n	800bec6 <USART_SetConfig+0x37e>
 800bd24:	2310      	movs	r3, #16
 800bd26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bd2a:	e0cc      	b.n	800bec6 <USART_SetConfig+0x37e>
 800bd2c:	2320      	movs	r3, #32
 800bd2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bd32:	e0c8      	b.n	800bec6 <USART_SetConfig+0x37e>
 800bd34:	2340      	movs	r3, #64	; 0x40
 800bd36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bd3a:	e0c4      	b.n	800bec6 <USART_SetConfig+0x37e>
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	4a5b      	ldr	r2, [pc, #364]	; (800beb0 <USART_SetConfig+0x368>)
 800bd42:	4293      	cmp	r3, r2
 800bd44:	d130      	bne.n	800bda8 <USART_SetConfig+0x260>
 800bd46:	4b58      	ldr	r3, [pc, #352]	; (800bea8 <USART_SetConfig+0x360>)
 800bd48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd4a:	f003 0307 	and.w	r3, r3, #7
 800bd4e:	2b05      	cmp	r3, #5
 800bd50:	d826      	bhi.n	800bda0 <USART_SetConfig+0x258>
 800bd52:	a201      	add	r2, pc, #4	; (adr r2, 800bd58 <USART_SetConfig+0x210>)
 800bd54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd58:	0800bd71 	.word	0x0800bd71
 800bd5c:	0800bd79 	.word	0x0800bd79
 800bd60:	0800bd81 	.word	0x0800bd81
 800bd64:	0800bd89 	.word	0x0800bd89
 800bd68:	0800bd91 	.word	0x0800bd91
 800bd6c:	0800bd99 	.word	0x0800bd99
 800bd70:	2300      	movs	r3, #0
 800bd72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bd76:	e0a6      	b.n	800bec6 <USART_SetConfig+0x37e>
 800bd78:	2302      	movs	r3, #2
 800bd7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bd7e:	e0a2      	b.n	800bec6 <USART_SetConfig+0x37e>
 800bd80:	2304      	movs	r3, #4
 800bd82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bd86:	e09e      	b.n	800bec6 <USART_SetConfig+0x37e>
 800bd88:	2308      	movs	r3, #8
 800bd8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bd8e:	e09a      	b.n	800bec6 <USART_SetConfig+0x37e>
 800bd90:	2310      	movs	r3, #16
 800bd92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bd96:	e096      	b.n	800bec6 <USART_SetConfig+0x37e>
 800bd98:	2320      	movs	r3, #32
 800bd9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bd9e:	e092      	b.n	800bec6 <USART_SetConfig+0x37e>
 800bda0:	2340      	movs	r3, #64	; 0x40
 800bda2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bda6:	e08e      	b.n	800bec6 <USART_SetConfig+0x37e>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4a41      	ldr	r2, [pc, #260]	; (800beb4 <USART_SetConfig+0x36c>)
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	f040 8086 	bne.w	800bec0 <USART_SetConfig+0x378>
 800bdb4:	4b3c      	ldr	r3, [pc, #240]	; (800bea8 <USART_SetConfig+0x360>)
 800bdb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bdbc:	2b28      	cmp	r3, #40	; 0x28
 800bdbe:	d87b      	bhi.n	800beb8 <USART_SetConfig+0x370>
 800bdc0:	a201      	add	r2, pc, #4	; (adr r2, 800bdc8 <USART_SetConfig+0x280>)
 800bdc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdc6:	bf00      	nop
 800bdc8:	0800be6d 	.word	0x0800be6d
 800bdcc:	0800beb9 	.word	0x0800beb9
 800bdd0:	0800beb9 	.word	0x0800beb9
 800bdd4:	0800beb9 	.word	0x0800beb9
 800bdd8:	0800beb9 	.word	0x0800beb9
 800bddc:	0800beb9 	.word	0x0800beb9
 800bde0:	0800beb9 	.word	0x0800beb9
 800bde4:	0800beb9 	.word	0x0800beb9
 800bde8:	0800be75 	.word	0x0800be75
 800bdec:	0800beb9 	.word	0x0800beb9
 800bdf0:	0800beb9 	.word	0x0800beb9
 800bdf4:	0800beb9 	.word	0x0800beb9
 800bdf8:	0800beb9 	.word	0x0800beb9
 800bdfc:	0800beb9 	.word	0x0800beb9
 800be00:	0800beb9 	.word	0x0800beb9
 800be04:	0800beb9 	.word	0x0800beb9
 800be08:	0800be7d 	.word	0x0800be7d
 800be0c:	0800beb9 	.word	0x0800beb9
 800be10:	0800beb9 	.word	0x0800beb9
 800be14:	0800beb9 	.word	0x0800beb9
 800be18:	0800beb9 	.word	0x0800beb9
 800be1c:	0800beb9 	.word	0x0800beb9
 800be20:	0800beb9 	.word	0x0800beb9
 800be24:	0800beb9 	.word	0x0800beb9
 800be28:	0800be85 	.word	0x0800be85
 800be2c:	0800beb9 	.word	0x0800beb9
 800be30:	0800beb9 	.word	0x0800beb9
 800be34:	0800beb9 	.word	0x0800beb9
 800be38:	0800beb9 	.word	0x0800beb9
 800be3c:	0800beb9 	.word	0x0800beb9
 800be40:	0800beb9 	.word	0x0800beb9
 800be44:	0800beb9 	.word	0x0800beb9
 800be48:	0800be8d 	.word	0x0800be8d
 800be4c:	0800beb9 	.word	0x0800beb9
 800be50:	0800beb9 	.word	0x0800beb9
 800be54:	0800beb9 	.word	0x0800beb9
 800be58:	0800beb9 	.word	0x0800beb9
 800be5c:	0800beb9 	.word	0x0800beb9
 800be60:	0800beb9 	.word	0x0800beb9
 800be64:	0800beb9 	.word	0x0800beb9
 800be68:	0800be95 	.word	0x0800be95
 800be6c:	2301      	movs	r3, #1
 800be6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800be72:	e028      	b.n	800bec6 <USART_SetConfig+0x37e>
 800be74:	2302      	movs	r3, #2
 800be76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800be7a:	e024      	b.n	800bec6 <USART_SetConfig+0x37e>
 800be7c:	2304      	movs	r3, #4
 800be7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800be82:	e020      	b.n	800bec6 <USART_SetConfig+0x37e>
 800be84:	2308      	movs	r3, #8
 800be86:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800be8a:	e01c      	b.n	800bec6 <USART_SetConfig+0x37e>
 800be8c:	2310      	movs	r3, #16
 800be8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800be92:	e018      	b.n	800bec6 <USART_SetConfig+0x37e>
 800be94:	2320      	movs	r3, #32
 800be96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800be9a:	e014      	b.n	800bec6 <USART_SetConfig+0x37e>
 800be9c:	cfff69f3 	.word	0xcfff69f3
 800bea0:	ffffc0f6 	.word	0xffffc0f6
 800bea4:	40011000 	.word	0x40011000
 800bea8:	58024400 	.word	0x58024400
 800beac:	40004400 	.word	0x40004400
 800beb0:	40004800 	.word	0x40004800
 800beb4:	40011400 	.word	0x40011400
 800beb8:	2340      	movs	r3, #64	; 0x40
 800beba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bebe:	e002      	b.n	800bec6 <USART_SetConfig+0x37e>
 800bec0:	2340      	movs	r3, #64	; 0x40
 800bec2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  switch (clocksource)
 800bec6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800beca:	2b20      	cmp	r3, #32
 800becc:	f200 8329 	bhi.w	800c522 <USART_SetConfig+0x9da>
 800bed0:	a201      	add	r2, pc, #4	; (adr r2, 800bed8 <USART_SetConfig+0x390>)
 800bed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bed6:	bf00      	nop
 800bed8:	0800bf5d 	.word	0x0800bf5d
 800bedc:	0800c013 	.word	0x0800c013
 800bee0:	0800c0c9 	.word	0x0800c0c9
 800bee4:	0800c523 	.word	0x0800c523
 800bee8:	0800c183 	.word	0x0800c183
 800beec:	0800c523 	.word	0x0800c523
 800bef0:	0800c523 	.word	0x0800c523
 800bef4:	0800c523 	.word	0x0800c523
 800bef8:	0800c23d 	.word	0x0800c23d
 800befc:	0800c523 	.word	0x0800c523
 800bf00:	0800c523 	.word	0x0800c523
 800bf04:	0800c523 	.word	0x0800c523
 800bf08:	0800c523 	.word	0x0800c523
 800bf0c:	0800c523 	.word	0x0800c523
 800bf10:	0800c523 	.word	0x0800c523
 800bf14:	0800c523 	.word	0x0800c523
 800bf18:	0800c3b5 	.word	0x0800c3b5
 800bf1c:	0800c523 	.word	0x0800c523
 800bf20:	0800c523 	.word	0x0800c523
 800bf24:	0800c523 	.word	0x0800c523
 800bf28:	0800c523 	.word	0x0800c523
 800bf2c:	0800c523 	.word	0x0800c523
 800bf30:	0800c523 	.word	0x0800c523
 800bf34:	0800c523 	.word	0x0800c523
 800bf38:	0800c523 	.word	0x0800c523
 800bf3c:	0800c523 	.word	0x0800c523
 800bf40:	0800c523 	.word	0x0800c523
 800bf44:	0800c523 	.word	0x0800c523
 800bf48:	0800c523 	.word	0x0800c523
 800bf4c:	0800c523 	.word	0x0800c523
 800bf50:	0800c523 	.word	0x0800c523
 800bf54:	0800c523 	.word	0x0800c523
 800bf58:	0800c471 	.word	0x0800c471
  {
    case USART_CLOCKSOURCE_D2PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800bf5c:	f7fb fa30 	bl	80073c0 <HAL_RCC_GetPCLK1Freq>
 800bf60:	62b8      	str	r0, [r7, #40]	; 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d044      	beq.n	800bff4 <USART_SetConfig+0x4ac>
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf6e:	2b01      	cmp	r3, #1
 800bf70:	d03e      	beq.n	800bff0 <USART_SetConfig+0x4a8>
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf76:	2b02      	cmp	r3, #2
 800bf78:	d038      	beq.n	800bfec <USART_SetConfig+0x4a4>
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf7e:	2b03      	cmp	r3, #3
 800bf80:	d032      	beq.n	800bfe8 <USART_SetConfig+0x4a0>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf86:	2b04      	cmp	r3, #4
 800bf88:	d02c      	beq.n	800bfe4 <USART_SetConfig+0x49c>
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf8e:	2b05      	cmp	r3, #5
 800bf90:	d026      	beq.n	800bfe0 <USART_SetConfig+0x498>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf96:	2b06      	cmp	r3, #6
 800bf98:	d020      	beq.n	800bfdc <USART_SetConfig+0x494>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf9e:	2b07      	cmp	r3, #7
 800bfa0:	d01a      	beq.n	800bfd8 <USART_SetConfig+0x490>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfa6:	2b08      	cmp	r3, #8
 800bfa8:	d014      	beq.n	800bfd4 <USART_SetConfig+0x48c>
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfae:	2b09      	cmp	r3, #9
 800bfb0:	d00e      	beq.n	800bfd0 <USART_SetConfig+0x488>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfb6:	2b0a      	cmp	r3, #10
 800bfb8:	d008      	beq.n	800bfcc <USART_SetConfig+0x484>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfbe:	2b0b      	cmp	r3, #11
 800bfc0:	d102      	bne.n	800bfc8 <USART_SetConfig+0x480>
 800bfc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bfc6:	e016      	b.n	800bff6 <USART_SetConfig+0x4ae>
 800bfc8:	2301      	movs	r3, #1
 800bfca:	e014      	b.n	800bff6 <USART_SetConfig+0x4ae>
 800bfcc:	2380      	movs	r3, #128	; 0x80
 800bfce:	e012      	b.n	800bff6 <USART_SetConfig+0x4ae>
 800bfd0:	2340      	movs	r3, #64	; 0x40
 800bfd2:	e010      	b.n	800bff6 <USART_SetConfig+0x4ae>
 800bfd4:	2320      	movs	r3, #32
 800bfd6:	e00e      	b.n	800bff6 <USART_SetConfig+0x4ae>
 800bfd8:	2310      	movs	r3, #16
 800bfda:	e00c      	b.n	800bff6 <USART_SetConfig+0x4ae>
 800bfdc:	230c      	movs	r3, #12
 800bfde:	e00a      	b.n	800bff6 <USART_SetConfig+0x4ae>
 800bfe0:	230a      	movs	r3, #10
 800bfe2:	e008      	b.n	800bff6 <USART_SetConfig+0x4ae>
 800bfe4:	2308      	movs	r3, #8
 800bfe6:	e006      	b.n	800bff6 <USART_SetConfig+0x4ae>
 800bfe8:	2306      	movs	r3, #6
 800bfea:	e004      	b.n	800bff6 <USART_SetConfig+0x4ae>
 800bfec:	2304      	movs	r3, #4
 800bfee:	e002      	b.n	800bff6 <USART_SetConfig+0x4ae>
 800bff0:	2302      	movs	r3, #2
 800bff2:	e000      	b.n	800bff6 <USART_SetConfig+0x4ae>
 800bff4:	2301      	movs	r3, #1
 800bff6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bff8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bffc:	005a      	lsls	r2, r3, #1
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	685b      	ldr	r3, [r3, #4]
 800c002:	085b      	lsrs	r3, r3, #1
 800c004:	441a      	add	r2, r3
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	685b      	ldr	r3, [r3, #4]
 800c00a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c00e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800c010:	e28b      	b.n	800c52a <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_D2PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800c012:	f7fb f9eb 	bl	80073ec <HAL_RCC_GetPCLK2Freq>
 800c016:	62b8      	str	r0, [r7, #40]	; 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d044      	beq.n	800c0aa <USART_SetConfig+0x562>
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c024:	2b01      	cmp	r3, #1
 800c026:	d03e      	beq.n	800c0a6 <USART_SetConfig+0x55e>
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c02c:	2b02      	cmp	r3, #2
 800c02e:	d038      	beq.n	800c0a2 <USART_SetConfig+0x55a>
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c034:	2b03      	cmp	r3, #3
 800c036:	d032      	beq.n	800c09e <USART_SetConfig+0x556>
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c03c:	2b04      	cmp	r3, #4
 800c03e:	d02c      	beq.n	800c09a <USART_SetConfig+0x552>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c044:	2b05      	cmp	r3, #5
 800c046:	d026      	beq.n	800c096 <USART_SetConfig+0x54e>
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c04c:	2b06      	cmp	r3, #6
 800c04e:	d020      	beq.n	800c092 <USART_SetConfig+0x54a>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c054:	2b07      	cmp	r3, #7
 800c056:	d01a      	beq.n	800c08e <USART_SetConfig+0x546>
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c05c:	2b08      	cmp	r3, #8
 800c05e:	d014      	beq.n	800c08a <USART_SetConfig+0x542>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c064:	2b09      	cmp	r3, #9
 800c066:	d00e      	beq.n	800c086 <USART_SetConfig+0x53e>
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c06c:	2b0a      	cmp	r3, #10
 800c06e:	d008      	beq.n	800c082 <USART_SetConfig+0x53a>
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c074:	2b0b      	cmp	r3, #11
 800c076:	d102      	bne.n	800c07e <USART_SetConfig+0x536>
 800c078:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c07c:	e016      	b.n	800c0ac <USART_SetConfig+0x564>
 800c07e:	2301      	movs	r3, #1
 800c080:	e014      	b.n	800c0ac <USART_SetConfig+0x564>
 800c082:	2380      	movs	r3, #128	; 0x80
 800c084:	e012      	b.n	800c0ac <USART_SetConfig+0x564>
 800c086:	2340      	movs	r3, #64	; 0x40
 800c088:	e010      	b.n	800c0ac <USART_SetConfig+0x564>
 800c08a:	2320      	movs	r3, #32
 800c08c:	e00e      	b.n	800c0ac <USART_SetConfig+0x564>
 800c08e:	2310      	movs	r3, #16
 800c090:	e00c      	b.n	800c0ac <USART_SetConfig+0x564>
 800c092:	230c      	movs	r3, #12
 800c094:	e00a      	b.n	800c0ac <USART_SetConfig+0x564>
 800c096:	230a      	movs	r3, #10
 800c098:	e008      	b.n	800c0ac <USART_SetConfig+0x564>
 800c09a:	2308      	movs	r3, #8
 800c09c:	e006      	b.n	800c0ac <USART_SetConfig+0x564>
 800c09e:	2306      	movs	r3, #6
 800c0a0:	e004      	b.n	800c0ac <USART_SetConfig+0x564>
 800c0a2:	2304      	movs	r3, #4
 800c0a4:	e002      	b.n	800c0ac <USART_SetConfig+0x564>
 800c0a6:	2302      	movs	r3, #2
 800c0a8:	e000      	b.n	800c0ac <USART_SetConfig+0x564>
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0b2:	005a      	lsls	r2, r3, #1
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	685b      	ldr	r3, [r3, #4]
 800c0b8:	085b      	lsrs	r3, r3, #1
 800c0ba:	441a      	add	r2, r3
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	685b      	ldr	r3, [r3, #4]
 800c0c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0c4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800c0c6:	e230      	b.n	800c52a <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0c8:	f107 0318 	add.w	r3, r7, #24
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f7fc fdcb 	bl	8008c68 <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 800c0d2:	69fa      	ldr	r2, [r7, #28]
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d044      	beq.n	800c166 <USART_SetConfig+0x61e>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0e0:	2b01      	cmp	r3, #1
 800c0e2:	d03e      	beq.n	800c162 <USART_SetConfig+0x61a>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0e8:	2b02      	cmp	r3, #2
 800c0ea:	d038      	beq.n	800c15e <USART_SetConfig+0x616>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0f0:	2b03      	cmp	r3, #3
 800c0f2:	d032      	beq.n	800c15a <USART_SetConfig+0x612>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0f8:	2b04      	cmp	r3, #4
 800c0fa:	d02c      	beq.n	800c156 <USART_SetConfig+0x60e>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c100:	2b05      	cmp	r3, #5
 800c102:	d026      	beq.n	800c152 <USART_SetConfig+0x60a>
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c108:	2b06      	cmp	r3, #6
 800c10a:	d020      	beq.n	800c14e <USART_SetConfig+0x606>
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c110:	2b07      	cmp	r3, #7
 800c112:	d01a      	beq.n	800c14a <USART_SetConfig+0x602>
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c118:	2b08      	cmp	r3, #8
 800c11a:	d014      	beq.n	800c146 <USART_SetConfig+0x5fe>
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c120:	2b09      	cmp	r3, #9
 800c122:	d00e      	beq.n	800c142 <USART_SetConfig+0x5fa>
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c128:	2b0a      	cmp	r3, #10
 800c12a:	d008      	beq.n	800c13e <USART_SetConfig+0x5f6>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c130:	2b0b      	cmp	r3, #11
 800c132:	d102      	bne.n	800c13a <USART_SetConfig+0x5f2>
 800c134:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c138:	e016      	b.n	800c168 <USART_SetConfig+0x620>
 800c13a:	2301      	movs	r3, #1
 800c13c:	e014      	b.n	800c168 <USART_SetConfig+0x620>
 800c13e:	2380      	movs	r3, #128	; 0x80
 800c140:	e012      	b.n	800c168 <USART_SetConfig+0x620>
 800c142:	2340      	movs	r3, #64	; 0x40
 800c144:	e010      	b.n	800c168 <USART_SetConfig+0x620>
 800c146:	2320      	movs	r3, #32
 800c148:	e00e      	b.n	800c168 <USART_SetConfig+0x620>
 800c14a:	2310      	movs	r3, #16
 800c14c:	e00c      	b.n	800c168 <USART_SetConfig+0x620>
 800c14e:	230c      	movs	r3, #12
 800c150:	e00a      	b.n	800c168 <USART_SetConfig+0x620>
 800c152:	230a      	movs	r3, #10
 800c154:	e008      	b.n	800c168 <USART_SetConfig+0x620>
 800c156:	2308      	movs	r3, #8
 800c158:	e006      	b.n	800c168 <USART_SetConfig+0x620>
 800c15a:	2306      	movs	r3, #6
 800c15c:	e004      	b.n	800c168 <USART_SetConfig+0x620>
 800c15e:	2304      	movs	r3, #4
 800c160:	e002      	b.n	800c168 <USART_SetConfig+0x620>
 800c162:	2302      	movs	r3, #2
 800c164:	e000      	b.n	800c168 <USART_SetConfig+0x620>
 800c166:	2301      	movs	r3, #1
 800c168:	fbb2 f3f3 	udiv	r3, r2, r3
 800c16c:	005a      	lsls	r2, r3, #1
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	685b      	ldr	r3, [r3, #4]
 800c172:	085b      	lsrs	r3, r3, #1
 800c174:	441a      	add	r2, r3
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	685b      	ldr	r3, [r3, #4]
 800c17a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c17e:	633b      	str	r3, [r7, #48]	; 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800c180:	e1d3      	b.n	800c52a <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c182:	f107 030c 	add.w	r3, r7, #12
 800c186:	4618      	mov	r0, r3
 800c188:	f7fc fec2 	bl	8008f10 <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 800c18c:	693a      	ldr	r2, [r7, #16]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c192:	2b00      	cmp	r3, #0
 800c194:	d044      	beq.n	800c220 <USART_SetConfig+0x6d8>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c19a:	2b01      	cmp	r3, #1
 800c19c:	d03e      	beq.n	800c21c <USART_SetConfig+0x6d4>
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1a2:	2b02      	cmp	r3, #2
 800c1a4:	d038      	beq.n	800c218 <USART_SetConfig+0x6d0>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1aa:	2b03      	cmp	r3, #3
 800c1ac:	d032      	beq.n	800c214 <USART_SetConfig+0x6cc>
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1b2:	2b04      	cmp	r3, #4
 800c1b4:	d02c      	beq.n	800c210 <USART_SetConfig+0x6c8>
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ba:	2b05      	cmp	r3, #5
 800c1bc:	d026      	beq.n	800c20c <USART_SetConfig+0x6c4>
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1c2:	2b06      	cmp	r3, #6
 800c1c4:	d020      	beq.n	800c208 <USART_SetConfig+0x6c0>
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ca:	2b07      	cmp	r3, #7
 800c1cc:	d01a      	beq.n	800c204 <USART_SetConfig+0x6bc>
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1d2:	2b08      	cmp	r3, #8
 800c1d4:	d014      	beq.n	800c200 <USART_SetConfig+0x6b8>
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1da:	2b09      	cmp	r3, #9
 800c1dc:	d00e      	beq.n	800c1fc <USART_SetConfig+0x6b4>
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1e2:	2b0a      	cmp	r3, #10
 800c1e4:	d008      	beq.n	800c1f8 <USART_SetConfig+0x6b0>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ea:	2b0b      	cmp	r3, #11
 800c1ec:	d102      	bne.n	800c1f4 <USART_SetConfig+0x6ac>
 800c1ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c1f2:	e016      	b.n	800c222 <USART_SetConfig+0x6da>
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	e014      	b.n	800c222 <USART_SetConfig+0x6da>
 800c1f8:	2380      	movs	r3, #128	; 0x80
 800c1fa:	e012      	b.n	800c222 <USART_SetConfig+0x6da>
 800c1fc:	2340      	movs	r3, #64	; 0x40
 800c1fe:	e010      	b.n	800c222 <USART_SetConfig+0x6da>
 800c200:	2320      	movs	r3, #32
 800c202:	e00e      	b.n	800c222 <USART_SetConfig+0x6da>
 800c204:	2310      	movs	r3, #16
 800c206:	e00c      	b.n	800c222 <USART_SetConfig+0x6da>
 800c208:	230c      	movs	r3, #12
 800c20a:	e00a      	b.n	800c222 <USART_SetConfig+0x6da>
 800c20c:	230a      	movs	r3, #10
 800c20e:	e008      	b.n	800c222 <USART_SetConfig+0x6da>
 800c210:	2308      	movs	r3, #8
 800c212:	e006      	b.n	800c222 <USART_SetConfig+0x6da>
 800c214:	2306      	movs	r3, #6
 800c216:	e004      	b.n	800c222 <USART_SetConfig+0x6da>
 800c218:	2304      	movs	r3, #4
 800c21a:	e002      	b.n	800c222 <USART_SetConfig+0x6da>
 800c21c:	2302      	movs	r3, #2
 800c21e:	e000      	b.n	800c222 <USART_SetConfig+0x6da>
 800c220:	2301      	movs	r3, #1
 800c222:	fbb2 f3f3 	udiv	r3, r2, r3
 800c226:	005a      	lsls	r2, r3, #1
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	685b      	ldr	r3, [r3, #4]
 800c22c:	085b      	lsrs	r3, r3, #1
 800c22e:	441a      	add	r2, r3
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	685b      	ldr	r3, [r3, #4]
 800c234:	fbb2 f3f3 	udiv	r3, r2, r3
 800c238:	633b      	str	r3, [r7, #48]	; 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800c23a:	e176      	b.n	800c52a <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c23c:	4b89      	ldr	r3, [pc, #548]	; (800c464 <USART_SetConfig+0x91c>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	f003 0320 	and.w	r3, r3, #32
 800c244:	2b00      	cmp	r3, #0
 800c246:	d05d      	beq.n	800c304 <USART_SetConfig+0x7bc>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800c248:	4b86      	ldr	r3, [pc, #536]	; (800c464 <USART_SetConfig+0x91c>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	08db      	lsrs	r3, r3, #3
 800c24e:	f003 0303 	and.w	r3, r3, #3
 800c252:	4a85      	ldr	r2, [pc, #532]	; (800c468 <USART_SetConfig+0x920>)
 800c254:	40da      	lsrs	r2, r3
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d044      	beq.n	800c2e8 <USART_SetConfig+0x7a0>
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c262:	2b01      	cmp	r3, #1
 800c264:	d03e      	beq.n	800c2e4 <USART_SetConfig+0x79c>
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c26a:	2b02      	cmp	r3, #2
 800c26c:	d038      	beq.n	800c2e0 <USART_SetConfig+0x798>
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c272:	2b03      	cmp	r3, #3
 800c274:	d032      	beq.n	800c2dc <USART_SetConfig+0x794>
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c27a:	2b04      	cmp	r3, #4
 800c27c:	d02c      	beq.n	800c2d8 <USART_SetConfig+0x790>
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c282:	2b05      	cmp	r3, #5
 800c284:	d026      	beq.n	800c2d4 <USART_SetConfig+0x78c>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c28a:	2b06      	cmp	r3, #6
 800c28c:	d020      	beq.n	800c2d0 <USART_SetConfig+0x788>
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c292:	2b07      	cmp	r3, #7
 800c294:	d01a      	beq.n	800c2cc <USART_SetConfig+0x784>
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c29a:	2b08      	cmp	r3, #8
 800c29c:	d014      	beq.n	800c2c8 <USART_SetConfig+0x780>
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2a2:	2b09      	cmp	r3, #9
 800c2a4:	d00e      	beq.n	800c2c4 <USART_SetConfig+0x77c>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2aa:	2b0a      	cmp	r3, #10
 800c2ac:	d008      	beq.n	800c2c0 <USART_SetConfig+0x778>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2b2:	2b0b      	cmp	r3, #11
 800c2b4:	d102      	bne.n	800c2bc <USART_SetConfig+0x774>
 800c2b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c2ba:	e016      	b.n	800c2ea <USART_SetConfig+0x7a2>
 800c2bc:	2301      	movs	r3, #1
 800c2be:	e014      	b.n	800c2ea <USART_SetConfig+0x7a2>
 800c2c0:	2380      	movs	r3, #128	; 0x80
 800c2c2:	e012      	b.n	800c2ea <USART_SetConfig+0x7a2>
 800c2c4:	2340      	movs	r3, #64	; 0x40
 800c2c6:	e010      	b.n	800c2ea <USART_SetConfig+0x7a2>
 800c2c8:	2320      	movs	r3, #32
 800c2ca:	e00e      	b.n	800c2ea <USART_SetConfig+0x7a2>
 800c2cc:	2310      	movs	r3, #16
 800c2ce:	e00c      	b.n	800c2ea <USART_SetConfig+0x7a2>
 800c2d0:	230c      	movs	r3, #12
 800c2d2:	e00a      	b.n	800c2ea <USART_SetConfig+0x7a2>
 800c2d4:	230a      	movs	r3, #10
 800c2d6:	e008      	b.n	800c2ea <USART_SetConfig+0x7a2>
 800c2d8:	2308      	movs	r3, #8
 800c2da:	e006      	b.n	800c2ea <USART_SetConfig+0x7a2>
 800c2dc:	2306      	movs	r3, #6
 800c2de:	e004      	b.n	800c2ea <USART_SetConfig+0x7a2>
 800c2e0:	2304      	movs	r3, #4
 800c2e2:	e002      	b.n	800c2ea <USART_SetConfig+0x7a2>
 800c2e4:	2302      	movs	r3, #2
 800c2e6:	e000      	b.n	800c2ea <USART_SetConfig+0x7a2>
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2ee:	005a      	lsls	r2, r3, #1
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	685b      	ldr	r3, [r3, #4]
 800c2f4:	085b      	lsrs	r3, r3, #1
 800c2f6:	441a      	add	r2, r3
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	685b      	ldr	r3, [r3, #4]
 800c2fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c300:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      }
      break;
 800c302:	e112      	b.n	800c52a <USART_SetConfig+0x9e2>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d044      	beq.n	800c396 <USART_SetConfig+0x84e>
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c310:	2b01      	cmp	r3, #1
 800c312:	d03e      	beq.n	800c392 <USART_SetConfig+0x84a>
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c318:	2b02      	cmp	r3, #2
 800c31a:	d038      	beq.n	800c38e <USART_SetConfig+0x846>
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c320:	2b03      	cmp	r3, #3
 800c322:	d032      	beq.n	800c38a <USART_SetConfig+0x842>
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c328:	2b04      	cmp	r3, #4
 800c32a:	d02c      	beq.n	800c386 <USART_SetConfig+0x83e>
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c330:	2b05      	cmp	r3, #5
 800c332:	d026      	beq.n	800c382 <USART_SetConfig+0x83a>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c338:	2b06      	cmp	r3, #6
 800c33a:	d020      	beq.n	800c37e <USART_SetConfig+0x836>
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c340:	2b07      	cmp	r3, #7
 800c342:	d01a      	beq.n	800c37a <USART_SetConfig+0x832>
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c348:	2b08      	cmp	r3, #8
 800c34a:	d014      	beq.n	800c376 <USART_SetConfig+0x82e>
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c350:	2b09      	cmp	r3, #9
 800c352:	d00e      	beq.n	800c372 <USART_SetConfig+0x82a>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c358:	2b0a      	cmp	r3, #10
 800c35a:	d008      	beq.n	800c36e <USART_SetConfig+0x826>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c360:	2b0b      	cmp	r3, #11
 800c362:	d102      	bne.n	800c36a <USART_SetConfig+0x822>
 800c364:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c368:	e016      	b.n	800c398 <USART_SetConfig+0x850>
 800c36a:	2301      	movs	r3, #1
 800c36c:	e014      	b.n	800c398 <USART_SetConfig+0x850>
 800c36e:	2380      	movs	r3, #128	; 0x80
 800c370:	e012      	b.n	800c398 <USART_SetConfig+0x850>
 800c372:	2340      	movs	r3, #64	; 0x40
 800c374:	e010      	b.n	800c398 <USART_SetConfig+0x850>
 800c376:	2320      	movs	r3, #32
 800c378:	e00e      	b.n	800c398 <USART_SetConfig+0x850>
 800c37a:	2310      	movs	r3, #16
 800c37c:	e00c      	b.n	800c398 <USART_SetConfig+0x850>
 800c37e:	230c      	movs	r3, #12
 800c380:	e00a      	b.n	800c398 <USART_SetConfig+0x850>
 800c382:	230a      	movs	r3, #10
 800c384:	e008      	b.n	800c398 <USART_SetConfig+0x850>
 800c386:	2308      	movs	r3, #8
 800c388:	e006      	b.n	800c398 <USART_SetConfig+0x850>
 800c38a:	2306      	movs	r3, #6
 800c38c:	e004      	b.n	800c398 <USART_SetConfig+0x850>
 800c38e:	2304      	movs	r3, #4
 800c390:	e002      	b.n	800c398 <USART_SetConfig+0x850>
 800c392:	2302      	movs	r3, #2
 800c394:	e000      	b.n	800c398 <USART_SetConfig+0x850>
 800c396:	2301      	movs	r3, #1
 800c398:	4a33      	ldr	r2, [pc, #204]	; (800c468 <USART_SetConfig+0x920>)
 800c39a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c39e:	005a      	lsls	r2, r3, #1
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	685b      	ldr	r3, [r3, #4]
 800c3a4:	085b      	lsrs	r3, r3, #1
 800c3a6:	441a      	add	r2, r3
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	685b      	ldr	r3, [r3, #4]
 800c3ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3b0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800c3b2:	e0ba      	b.n	800c52a <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d044      	beq.n	800c446 <USART_SetConfig+0x8fe>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3c0:	2b01      	cmp	r3, #1
 800c3c2:	d03e      	beq.n	800c442 <USART_SetConfig+0x8fa>
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3c8:	2b02      	cmp	r3, #2
 800c3ca:	d038      	beq.n	800c43e <USART_SetConfig+0x8f6>
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3d0:	2b03      	cmp	r3, #3
 800c3d2:	d032      	beq.n	800c43a <USART_SetConfig+0x8f2>
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3d8:	2b04      	cmp	r3, #4
 800c3da:	d02c      	beq.n	800c436 <USART_SetConfig+0x8ee>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3e0:	2b05      	cmp	r3, #5
 800c3e2:	d026      	beq.n	800c432 <USART_SetConfig+0x8ea>
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3e8:	2b06      	cmp	r3, #6
 800c3ea:	d020      	beq.n	800c42e <USART_SetConfig+0x8e6>
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3f0:	2b07      	cmp	r3, #7
 800c3f2:	d01a      	beq.n	800c42a <USART_SetConfig+0x8e2>
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3f8:	2b08      	cmp	r3, #8
 800c3fa:	d014      	beq.n	800c426 <USART_SetConfig+0x8de>
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c400:	2b09      	cmp	r3, #9
 800c402:	d00e      	beq.n	800c422 <USART_SetConfig+0x8da>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c408:	2b0a      	cmp	r3, #10
 800c40a:	d008      	beq.n	800c41e <USART_SetConfig+0x8d6>
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c410:	2b0b      	cmp	r3, #11
 800c412:	d102      	bne.n	800c41a <USART_SetConfig+0x8d2>
 800c414:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c418:	e016      	b.n	800c448 <USART_SetConfig+0x900>
 800c41a:	2301      	movs	r3, #1
 800c41c:	e014      	b.n	800c448 <USART_SetConfig+0x900>
 800c41e:	2380      	movs	r3, #128	; 0x80
 800c420:	e012      	b.n	800c448 <USART_SetConfig+0x900>
 800c422:	2340      	movs	r3, #64	; 0x40
 800c424:	e010      	b.n	800c448 <USART_SetConfig+0x900>
 800c426:	2320      	movs	r3, #32
 800c428:	e00e      	b.n	800c448 <USART_SetConfig+0x900>
 800c42a:	2310      	movs	r3, #16
 800c42c:	e00c      	b.n	800c448 <USART_SetConfig+0x900>
 800c42e:	230c      	movs	r3, #12
 800c430:	e00a      	b.n	800c448 <USART_SetConfig+0x900>
 800c432:	230a      	movs	r3, #10
 800c434:	e008      	b.n	800c448 <USART_SetConfig+0x900>
 800c436:	2308      	movs	r3, #8
 800c438:	e006      	b.n	800c448 <USART_SetConfig+0x900>
 800c43a:	2306      	movs	r3, #6
 800c43c:	e004      	b.n	800c448 <USART_SetConfig+0x900>
 800c43e:	2304      	movs	r3, #4
 800c440:	e002      	b.n	800c448 <USART_SetConfig+0x900>
 800c442:	2302      	movs	r3, #2
 800c444:	e000      	b.n	800c448 <USART_SetConfig+0x900>
 800c446:	2301      	movs	r3, #1
 800c448:	4a08      	ldr	r2, [pc, #32]	; (800c46c <USART_SetConfig+0x924>)
 800c44a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c44e:	005a      	lsls	r2, r3, #1
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	685b      	ldr	r3, [r3, #4]
 800c454:	085b      	lsrs	r3, r3, #1
 800c456:	441a      	add	r2, r3
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	685b      	ldr	r3, [r3, #4]
 800c45c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c460:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800c462:	e062      	b.n	800c52a <USART_SetConfig+0x9e2>
 800c464:	58024400 	.word	0x58024400
 800c468:	03d09000 	.word	0x03d09000
 800c46c:	003d0900 	.word	0x003d0900
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c474:	2b00      	cmp	r3, #0
 800c476:	d044      	beq.n	800c502 <USART_SetConfig+0x9ba>
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c47c:	2b01      	cmp	r3, #1
 800c47e:	d03e      	beq.n	800c4fe <USART_SetConfig+0x9b6>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c484:	2b02      	cmp	r3, #2
 800c486:	d038      	beq.n	800c4fa <USART_SetConfig+0x9b2>
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c48c:	2b03      	cmp	r3, #3
 800c48e:	d032      	beq.n	800c4f6 <USART_SetConfig+0x9ae>
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c494:	2b04      	cmp	r3, #4
 800c496:	d02c      	beq.n	800c4f2 <USART_SetConfig+0x9aa>
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c49c:	2b05      	cmp	r3, #5
 800c49e:	d026      	beq.n	800c4ee <USART_SetConfig+0x9a6>
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4a4:	2b06      	cmp	r3, #6
 800c4a6:	d020      	beq.n	800c4ea <USART_SetConfig+0x9a2>
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ac:	2b07      	cmp	r3, #7
 800c4ae:	d01a      	beq.n	800c4e6 <USART_SetConfig+0x99e>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4b4:	2b08      	cmp	r3, #8
 800c4b6:	d014      	beq.n	800c4e2 <USART_SetConfig+0x99a>
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4bc:	2b09      	cmp	r3, #9
 800c4be:	d00e      	beq.n	800c4de <USART_SetConfig+0x996>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4c4:	2b0a      	cmp	r3, #10
 800c4c6:	d008      	beq.n	800c4da <USART_SetConfig+0x992>
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4cc:	2b0b      	cmp	r3, #11
 800c4ce:	d102      	bne.n	800c4d6 <USART_SetConfig+0x98e>
 800c4d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c4d4:	e016      	b.n	800c504 <USART_SetConfig+0x9bc>
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	e014      	b.n	800c504 <USART_SetConfig+0x9bc>
 800c4da:	2380      	movs	r3, #128	; 0x80
 800c4dc:	e012      	b.n	800c504 <USART_SetConfig+0x9bc>
 800c4de:	2340      	movs	r3, #64	; 0x40
 800c4e0:	e010      	b.n	800c504 <USART_SetConfig+0x9bc>
 800c4e2:	2320      	movs	r3, #32
 800c4e4:	e00e      	b.n	800c504 <USART_SetConfig+0x9bc>
 800c4e6:	2310      	movs	r3, #16
 800c4e8:	e00c      	b.n	800c504 <USART_SetConfig+0x9bc>
 800c4ea:	230c      	movs	r3, #12
 800c4ec:	e00a      	b.n	800c504 <USART_SetConfig+0x9bc>
 800c4ee:	230a      	movs	r3, #10
 800c4f0:	e008      	b.n	800c504 <USART_SetConfig+0x9bc>
 800c4f2:	2308      	movs	r3, #8
 800c4f4:	e006      	b.n	800c504 <USART_SetConfig+0x9bc>
 800c4f6:	2306      	movs	r3, #6
 800c4f8:	e004      	b.n	800c504 <USART_SetConfig+0x9bc>
 800c4fa:	2304      	movs	r3, #4
 800c4fc:	e002      	b.n	800c504 <USART_SetConfig+0x9bc>
 800c4fe:	2302      	movs	r3, #2
 800c500:	e000      	b.n	800c504 <USART_SetConfig+0x9bc>
 800c502:	2301      	movs	r3, #1
 800c504:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c508:	fbb2 f3f3 	udiv	r3, r2, r3
 800c50c:	005a      	lsls	r2, r3, #1
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	685b      	ldr	r3, [r3, #4]
 800c512:	085b      	lsrs	r3, r3, #1
 800c514:	441a      	add	r2, r3
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	685b      	ldr	r3, [r3, #4]
 800c51a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c51e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800c520:	e003      	b.n	800c52a <USART_SetConfig+0x9e2>
    default:
      ret = HAL_ERROR;
 800c522:	2301      	movs	r3, #1
 800c524:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
      break;
 800c528:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800c52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c52c:	2b0f      	cmp	r3, #15
 800c52e:	d916      	bls.n	800c55e <USART_SetConfig+0xa16>
 800c530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c536:	d212      	bcs.n	800c55e <USART_SetConfig+0xa16>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c53a:	b29b      	uxth	r3, r3
 800c53c:	f023 030f 	bic.w	r3, r3, #15
 800c540:	84fb      	strh	r3, [r7, #38]	; 0x26
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c544:	085b      	lsrs	r3, r3, #1
 800c546:	b29b      	uxth	r3, r3
 800c548:	f003 0307 	and.w	r3, r3, #7
 800c54c:	b29a      	uxth	r2, r3
 800c54e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c550:	4313      	orrs	r3, r2
 800c552:	84fb      	strh	r3, [r7, #38]	; 0x26
    husart->Instance->BRR = brrtemp;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c55a:	60da      	str	r2, [r3, #12]
 800c55c:	e002      	b.n	800c564 <USART_SetConfig+0xa1c>
  }
  else
  {
    ret = HAL_ERROR;
 800c55e:	2301      	movs	r3, #1
 800c560:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2201      	movs	r2, #1
 800c568:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2201      	movs	r2, #1
 800c56e:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2200      	movs	r2, #0
 800c574:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2200      	movs	r2, #0
 800c57a:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 800c57c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 800c580:	4618      	mov	r0, r3
 800c582:	3738      	adds	r7, #56	; 0x38
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}

0800c588 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b086      	sub	sp, #24
 800c58c:	af02      	add	r7, sp, #8
 800c58e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2200      	movs	r2, #0
 800c594:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c596:	f7f7 f975 	bl	8003884 <HAL_GetTick>
 800c59a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f003 0308 	and.w	r3, r3, #8
 800c5a6:	2b08      	cmp	r3, #8
 800c5a8:	d10e      	bne.n	800c5c8 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800c5aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c5ae:	9300      	str	r3, [sp, #0]
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f7ff fa8f 	bl	800badc <USART_WaitOnFlagUntilTimeout>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d001      	beq.n	800c5c8 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c5c4:	2303      	movs	r3, #3
 800c5c6:	e01e      	b.n	800c606 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f003 0304 	and.w	r3, r3, #4
 800c5d2:	2b04      	cmp	r3, #4
 800c5d4:	d10e      	bne.n	800c5f4 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800c5d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c5da:	9300      	str	r3, [sp, #0]
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	2200      	movs	r2, #0
 800c5e0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f7ff fa79 	bl	800badc <USART_WaitOnFlagUntilTimeout>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d001      	beq.n	800c5f4 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c5f0:	2303      	movs	r3, #3
 800c5f2:	e008      	b.n	800c606 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2201      	movs	r2, #1
 800c5f8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2200      	movs	r2, #0
 800c600:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800c604:	2300      	movs	r3, #0
}
 800c606:	4618      	mov	r0, r3
 800c608:	3710      	adds	r7, #16
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}

0800c60e <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 800c60e:	b480      	push	{r7}
 800c610:	b085      	sub	sp, #20
 800c612:	af00      	add	r7, sp, #0
 800c614:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	d101      	bne.n	800c624 <HAL_USARTEx_DisableFifoMode+0x16>
 800c620:	2302      	movs	r3, #2
 800c622:	e027      	b.n	800c674 <HAL_USARTEx_DisableFifoMode+0x66>
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2201      	movs	r2, #1
 800c628:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2202      	movs	r2, #2
 800c630:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	681a      	ldr	r2, [r3, #0]
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f022 0201 	bic.w	r2, r2, #1
 800c64a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c652:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2200      	movs	r2, #0
 800c658:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	68fa      	ldr	r2, [r7, #12]
 800c660:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2201      	movs	r2, #1
 800c666:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2200      	movs	r2, #0
 800c66e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800c672:	2300      	movs	r3, #0
}
 800c674:	4618      	mov	r0, r3
 800c676:	3714      	adds	r7, #20
 800c678:	46bd      	mov	sp, r7
 800c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67e:	4770      	bx	lr

0800c680 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b084      	sub	sp, #16
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
 800c688:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c690:	2b01      	cmp	r3, #1
 800c692:	d101      	bne.n	800c698 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 800c694:	2302      	movs	r3, #2
 800c696:	e02d      	b.n	800c6f4 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2201      	movs	r2, #1
 800c69c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2202      	movs	r2, #2
 800c6a4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	681a      	ldr	r2, [r3, #0]
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	f022 0201 	bic.w	r2, r2, #1
 800c6be:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	689b      	ldr	r3, [r3, #8]
 800c6c6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	683a      	ldr	r2, [r7, #0]
 800c6d0:	430a      	orrs	r2, r1
 800c6d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f000 f84f 	bl	800c778 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	68fa      	ldr	r2, [r7, #12]
 800c6e0:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2201      	movs	r2, #1
 800c6e6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800c6f2:	2300      	movs	r3, #0
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3710      	adds	r7, #16
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}

0800c6fc <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b084      	sub	sp, #16
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c70c:	2b01      	cmp	r3, #1
 800c70e:	d101      	bne.n	800c714 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 800c710:	2302      	movs	r3, #2
 800c712:	e02d      	b.n	800c770 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2201      	movs	r2, #1
 800c718:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2202      	movs	r2, #2
 800c720:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	681a      	ldr	r2, [r3, #0]
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f022 0201 	bic.w	r2, r2, #1
 800c73a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	689b      	ldr	r3, [r3, #8]
 800c742:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	683a      	ldr	r2, [r7, #0]
 800c74c:	430a      	orrs	r2, r1
 800c74e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f000 f811 	bl	800c778 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	68fa      	ldr	r2, [r7, #12]
 800c75c:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2201      	movs	r2, #1
 800c762:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2200      	movs	r2, #0
 800c76a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800c76e:	2300      	movs	r3, #0
}
 800c770:	4618      	mov	r0, r3
 800c772:	3710      	adds	r7, #16
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}

0800c778 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 800c778:	b480      	push	{r7}
 800c77a:	b085      	sub	sp, #20
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c784:	2b00      	cmp	r3, #0
 800c786:	d106      	bne.n	800c796 <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2201      	movs	r2, #1
 800c78c:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = 1U;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2201      	movs	r2, #1
 800c792:	875a      	strh	r2, [r3, #58]	; 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c794:	e02f      	b.n	800c7f6 <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c796:	2310      	movs	r3, #16
 800c798:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c79a:	2310      	movs	r3, #16
 800c79c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 800c7a4:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800c7a6:	b2db      	uxtb	r3, r3
 800c7a8:	f003 0307 	and.w	r3, r3, #7
 800c7ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 800c7b4:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800c7b6:	b2db      	uxtb	r3, r3
 800c7b8:	f003 0307 	and.w	r3, r3, #7
 800c7bc:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c7be:	7bbb      	ldrb	r3, [r7, #14]
 800c7c0:	7b3a      	ldrb	r2, [r7, #12]
 800c7c2:	4910      	ldr	r1, [pc, #64]	; (800c804 <USARTEx_SetNbDataToProcess+0x8c>)
 800c7c4:	5c8a      	ldrb	r2, [r1, r2]
 800c7c6:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 800c7ca:	7b3a      	ldrb	r2, [r7, #12]
 800c7cc:	490e      	ldr	r1, [pc, #56]	; (800c808 <USARTEx_SetNbDataToProcess+0x90>)
 800c7ce:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c7d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c7d4:	b29a      	uxth	r2, r3
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c7da:	7bfb      	ldrb	r3, [r7, #15]
 800c7dc:	7b7a      	ldrb	r2, [r7, #13]
 800c7de:	4909      	ldr	r1, [pc, #36]	; (800c804 <USARTEx_SetNbDataToProcess+0x8c>)
 800c7e0:	5c8a      	ldrb	r2, [r1, r2]
 800c7e2:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 800c7e6:	7b7a      	ldrb	r2, [r7, #13]
 800c7e8:	4907      	ldr	r1, [pc, #28]	; (800c808 <USARTEx_SetNbDataToProcess+0x90>)
 800c7ea:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c7ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800c7f0:	b29a      	uxth	r2, r3
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	875a      	strh	r2, [r3, #58]	; 0x3a
}
 800c7f6:	bf00      	nop
 800c7f8:	3714      	adds	r7, #20
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c800:	4770      	bx	lr
 800c802:	bf00      	nop
 800c804:	0800f880 	.word	0x0800f880
 800c808:	0800f888 	.word	0x0800f888

0800c80c <__errno>:
 800c80c:	4b01      	ldr	r3, [pc, #4]	; (800c814 <__errno+0x8>)
 800c80e:	6818      	ldr	r0, [r3, #0]
 800c810:	4770      	bx	lr
 800c812:	bf00      	nop
 800c814:	2400001c 	.word	0x2400001c

0800c818 <__libc_init_array>:
 800c818:	b570      	push	{r4, r5, r6, lr}
 800c81a:	4d0d      	ldr	r5, [pc, #52]	; (800c850 <__libc_init_array+0x38>)
 800c81c:	4c0d      	ldr	r4, [pc, #52]	; (800c854 <__libc_init_array+0x3c>)
 800c81e:	1b64      	subs	r4, r4, r5
 800c820:	10a4      	asrs	r4, r4, #2
 800c822:	2600      	movs	r6, #0
 800c824:	42a6      	cmp	r6, r4
 800c826:	d109      	bne.n	800c83c <__libc_init_array+0x24>
 800c828:	4d0b      	ldr	r5, [pc, #44]	; (800c858 <__libc_init_array+0x40>)
 800c82a:	4c0c      	ldr	r4, [pc, #48]	; (800c85c <__libc_init_array+0x44>)
 800c82c:	f002 feb2 	bl	800f594 <_init>
 800c830:	1b64      	subs	r4, r4, r5
 800c832:	10a4      	asrs	r4, r4, #2
 800c834:	2600      	movs	r6, #0
 800c836:	42a6      	cmp	r6, r4
 800c838:	d105      	bne.n	800c846 <__libc_init_array+0x2e>
 800c83a:	bd70      	pop	{r4, r5, r6, pc}
 800c83c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c840:	4798      	blx	r3
 800c842:	3601      	adds	r6, #1
 800c844:	e7ee      	b.n	800c824 <__libc_init_array+0xc>
 800c846:	f855 3b04 	ldr.w	r3, [r5], #4
 800c84a:	4798      	blx	r3
 800c84c:	3601      	adds	r6, #1
 800c84e:	e7f2      	b.n	800c836 <__libc_init_array+0x1e>
 800c850:	0800fc7c 	.word	0x0800fc7c
 800c854:	0800fc7c 	.word	0x0800fc7c
 800c858:	0800fc7c 	.word	0x0800fc7c
 800c85c:	0800fc80 	.word	0x0800fc80

0800c860 <memcpy>:
 800c860:	440a      	add	r2, r1
 800c862:	4291      	cmp	r1, r2
 800c864:	f100 33ff 	add.w	r3, r0, #4294967295
 800c868:	d100      	bne.n	800c86c <memcpy+0xc>
 800c86a:	4770      	bx	lr
 800c86c:	b510      	push	{r4, lr}
 800c86e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c872:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c876:	4291      	cmp	r1, r2
 800c878:	d1f9      	bne.n	800c86e <memcpy+0xe>
 800c87a:	bd10      	pop	{r4, pc}

0800c87c <memset>:
 800c87c:	4402      	add	r2, r0
 800c87e:	4603      	mov	r3, r0
 800c880:	4293      	cmp	r3, r2
 800c882:	d100      	bne.n	800c886 <memset+0xa>
 800c884:	4770      	bx	lr
 800c886:	f803 1b01 	strb.w	r1, [r3], #1
 800c88a:	e7f9      	b.n	800c880 <memset+0x4>

0800c88c <__cvt>:
 800c88c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c88e:	ed2d 8b02 	vpush	{d8}
 800c892:	eeb0 8b40 	vmov.f64	d8, d0
 800c896:	b085      	sub	sp, #20
 800c898:	4617      	mov	r7, r2
 800c89a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c89c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c89e:	ee18 2a90 	vmov	r2, s17
 800c8a2:	f025 0520 	bic.w	r5, r5, #32
 800c8a6:	2a00      	cmp	r2, #0
 800c8a8:	bfb6      	itet	lt
 800c8aa:	222d      	movlt	r2, #45	; 0x2d
 800c8ac:	2200      	movge	r2, #0
 800c8ae:	eeb1 8b40 	vneglt.f64	d8, d0
 800c8b2:	2d46      	cmp	r5, #70	; 0x46
 800c8b4:	460c      	mov	r4, r1
 800c8b6:	701a      	strb	r2, [r3, #0]
 800c8b8:	d004      	beq.n	800c8c4 <__cvt+0x38>
 800c8ba:	2d45      	cmp	r5, #69	; 0x45
 800c8bc:	d100      	bne.n	800c8c0 <__cvt+0x34>
 800c8be:	3401      	adds	r4, #1
 800c8c0:	2102      	movs	r1, #2
 800c8c2:	e000      	b.n	800c8c6 <__cvt+0x3a>
 800c8c4:	2103      	movs	r1, #3
 800c8c6:	ab03      	add	r3, sp, #12
 800c8c8:	9301      	str	r3, [sp, #4]
 800c8ca:	ab02      	add	r3, sp, #8
 800c8cc:	9300      	str	r3, [sp, #0]
 800c8ce:	4622      	mov	r2, r4
 800c8d0:	4633      	mov	r3, r6
 800c8d2:	eeb0 0b48 	vmov.f64	d0, d8
 800c8d6:	f000 fe17 	bl	800d508 <_dtoa_r>
 800c8da:	2d47      	cmp	r5, #71	; 0x47
 800c8dc:	d109      	bne.n	800c8f2 <__cvt+0x66>
 800c8de:	07fb      	lsls	r3, r7, #31
 800c8e0:	d407      	bmi.n	800c8f2 <__cvt+0x66>
 800c8e2:	9b03      	ldr	r3, [sp, #12]
 800c8e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c8e6:	1a1b      	subs	r3, r3, r0
 800c8e8:	6013      	str	r3, [r2, #0]
 800c8ea:	b005      	add	sp, #20
 800c8ec:	ecbd 8b02 	vpop	{d8}
 800c8f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8f2:	2d46      	cmp	r5, #70	; 0x46
 800c8f4:	eb00 0204 	add.w	r2, r0, r4
 800c8f8:	d10c      	bne.n	800c914 <__cvt+0x88>
 800c8fa:	7803      	ldrb	r3, [r0, #0]
 800c8fc:	2b30      	cmp	r3, #48	; 0x30
 800c8fe:	d107      	bne.n	800c910 <__cvt+0x84>
 800c900:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c908:	bf1c      	itt	ne
 800c90a:	f1c4 0401 	rsbne	r4, r4, #1
 800c90e:	6034      	strne	r4, [r6, #0]
 800c910:	6833      	ldr	r3, [r6, #0]
 800c912:	441a      	add	r2, r3
 800c914:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c91c:	bf08      	it	eq
 800c91e:	9203      	streq	r2, [sp, #12]
 800c920:	2130      	movs	r1, #48	; 0x30
 800c922:	9b03      	ldr	r3, [sp, #12]
 800c924:	4293      	cmp	r3, r2
 800c926:	d2dc      	bcs.n	800c8e2 <__cvt+0x56>
 800c928:	1c5c      	adds	r4, r3, #1
 800c92a:	9403      	str	r4, [sp, #12]
 800c92c:	7019      	strb	r1, [r3, #0]
 800c92e:	e7f8      	b.n	800c922 <__cvt+0x96>

0800c930 <__exponent>:
 800c930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c932:	4603      	mov	r3, r0
 800c934:	2900      	cmp	r1, #0
 800c936:	bfb8      	it	lt
 800c938:	4249      	neglt	r1, r1
 800c93a:	f803 2b02 	strb.w	r2, [r3], #2
 800c93e:	bfb4      	ite	lt
 800c940:	222d      	movlt	r2, #45	; 0x2d
 800c942:	222b      	movge	r2, #43	; 0x2b
 800c944:	2909      	cmp	r1, #9
 800c946:	7042      	strb	r2, [r0, #1]
 800c948:	dd2a      	ble.n	800c9a0 <__exponent+0x70>
 800c94a:	f10d 0407 	add.w	r4, sp, #7
 800c94e:	46a4      	mov	ip, r4
 800c950:	270a      	movs	r7, #10
 800c952:	46a6      	mov	lr, r4
 800c954:	460a      	mov	r2, r1
 800c956:	fb91 f6f7 	sdiv	r6, r1, r7
 800c95a:	fb07 1516 	mls	r5, r7, r6, r1
 800c95e:	3530      	adds	r5, #48	; 0x30
 800c960:	2a63      	cmp	r2, #99	; 0x63
 800c962:	f104 34ff 	add.w	r4, r4, #4294967295
 800c966:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c96a:	4631      	mov	r1, r6
 800c96c:	dcf1      	bgt.n	800c952 <__exponent+0x22>
 800c96e:	3130      	adds	r1, #48	; 0x30
 800c970:	f1ae 0502 	sub.w	r5, lr, #2
 800c974:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c978:	1c44      	adds	r4, r0, #1
 800c97a:	4629      	mov	r1, r5
 800c97c:	4561      	cmp	r1, ip
 800c97e:	d30a      	bcc.n	800c996 <__exponent+0x66>
 800c980:	f10d 0209 	add.w	r2, sp, #9
 800c984:	eba2 020e 	sub.w	r2, r2, lr
 800c988:	4565      	cmp	r5, ip
 800c98a:	bf88      	it	hi
 800c98c:	2200      	movhi	r2, #0
 800c98e:	4413      	add	r3, r2
 800c990:	1a18      	subs	r0, r3, r0
 800c992:	b003      	add	sp, #12
 800c994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c996:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c99a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c99e:	e7ed      	b.n	800c97c <__exponent+0x4c>
 800c9a0:	2330      	movs	r3, #48	; 0x30
 800c9a2:	3130      	adds	r1, #48	; 0x30
 800c9a4:	7083      	strb	r3, [r0, #2]
 800c9a6:	70c1      	strb	r1, [r0, #3]
 800c9a8:	1d03      	adds	r3, r0, #4
 800c9aa:	e7f1      	b.n	800c990 <__exponent+0x60>
 800c9ac:	0000      	movs	r0, r0
	...

0800c9b0 <_printf_float>:
 800c9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9b4:	b08b      	sub	sp, #44	; 0x2c
 800c9b6:	460c      	mov	r4, r1
 800c9b8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800c9bc:	4616      	mov	r6, r2
 800c9be:	461f      	mov	r7, r3
 800c9c0:	4605      	mov	r5, r0
 800c9c2:	f001 fcdb 	bl	800e37c <_localeconv_r>
 800c9c6:	f8d0 b000 	ldr.w	fp, [r0]
 800c9ca:	4658      	mov	r0, fp
 800c9cc:	f7f3 fc88 	bl	80002e0 <strlen>
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	9308      	str	r3, [sp, #32]
 800c9d4:	f8d8 3000 	ldr.w	r3, [r8]
 800c9d8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c9dc:	6822      	ldr	r2, [r4, #0]
 800c9de:	3307      	adds	r3, #7
 800c9e0:	f023 0307 	bic.w	r3, r3, #7
 800c9e4:	f103 0108 	add.w	r1, r3, #8
 800c9e8:	f8c8 1000 	str.w	r1, [r8]
 800c9ec:	4682      	mov	sl, r0
 800c9ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c9f2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800c9f6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800cc58 <_printf_float+0x2a8>
 800c9fa:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800c9fe:	eeb0 6bc0 	vabs.f64	d6, d0
 800ca02:	eeb4 6b47 	vcmp.f64	d6, d7
 800ca06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca0a:	dd24      	ble.n	800ca56 <_printf_float+0xa6>
 800ca0c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ca10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca14:	d502      	bpl.n	800ca1c <_printf_float+0x6c>
 800ca16:	232d      	movs	r3, #45	; 0x2d
 800ca18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca1c:	4b90      	ldr	r3, [pc, #576]	; (800cc60 <_printf_float+0x2b0>)
 800ca1e:	4891      	ldr	r0, [pc, #580]	; (800cc64 <_printf_float+0x2b4>)
 800ca20:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800ca24:	bf94      	ite	ls
 800ca26:	4698      	movls	r8, r3
 800ca28:	4680      	movhi	r8, r0
 800ca2a:	2303      	movs	r3, #3
 800ca2c:	6123      	str	r3, [r4, #16]
 800ca2e:	f022 0204 	bic.w	r2, r2, #4
 800ca32:	2300      	movs	r3, #0
 800ca34:	6022      	str	r2, [r4, #0]
 800ca36:	9304      	str	r3, [sp, #16]
 800ca38:	9700      	str	r7, [sp, #0]
 800ca3a:	4633      	mov	r3, r6
 800ca3c:	aa09      	add	r2, sp, #36	; 0x24
 800ca3e:	4621      	mov	r1, r4
 800ca40:	4628      	mov	r0, r5
 800ca42:	f000 f9d3 	bl	800cdec <_printf_common>
 800ca46:	3001      	adds	r0, #1
 800ca48:	f040 808a 	bne.w	800cb60 <_printf_float+0x1b0>
 800ca4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca50:	b00b      	add	sp, #44	; 0x2c
 800ca52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca56:	eeb4 0b40 	vcmp.f64	d0, d0
 800ca5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca5e:	d709      	bvc.n	800ca74 <_printf_float+0xc4>
 800ca60:	ee10 3a90 	vmov	r3, s1
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	bfbc      	itt	lt
 800ca68:	232d      	movlt	r3, #45	; 0x2d
 800ca6a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ca6e:	487e      	ldr	r0, [pc, #504]	; (800cc68 <_printf_float+0x2b8>)
 800ca70:	4b7e      	ldr	r3, [pc, #504]	; (800cc6c <_printf_float+0x2bc>)
 800ca72:	e7d5      	b.n	800ca20 <_printf_float+0x70>
 800ca74:	6863      	ldr	r3, [r4, #4]
 800ca76:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800ca7a:	9104      	str	r1, [sp, #16]
 800ca7c:	1c59      	adds	r1, r3, #1
 800ca7e:	d13c      	bne.n	800cafa <_printf_float+0x14a>
 800ca80:	2306      	movs	r3, #6
 800ca82:	6063      	str	r3, [r4, #4]
 800ca84:	2300      	movs	r3, #0
 800ca86:	9303      	str	r3, [sp, #12]
 800ca88:	ab08      	add	r3, sp, #32
 800ca8a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800ca8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ca92:	ab07      	add	r3, sp, #28
 800ca94:	6861      	ldr	r1, [r4, #4]
 800ca96:	9300      	str	r3, [sp, #0]
 800ca98:	6022      	str	r2, [r4, #0]
 800ca9a:	f10d 031b 	add.w	r3, sp, #27
 800ca9e:	4628      	mov	r0, r5
 800caa0:	f7ff fef4 	bl	800c88c <__cvt>
 800caa4:	9b04      	ldr	r3, [sp, #16]
 800caa6:	9907      	ldr	r1, [sp, #28]
 800caa8:	2b47      	cmp	r3, #71	; 0x47
 800caaa:	4680      	mov	r8, r0
 800caac:	d108      	bne.n	800cac0 <_printf_float+0x110>
 800caae:	1cc8      	adds	r0, r1, #3
 800cab0:	db02      	blt.n	800cab8 <_printf_float+0x108>
 800cab2:	6863      	ldr	r3, [r4, #4]
 800cab4:	4299      	cmp	r1, r3
 800cab6:	dd41      	ble.n	800cb3c <_printf_float+0x18c>
 800cab8:	f1a9 0902 	sub.w	r9, r9, #2
 800cabc:	fa5f f989 	uxtb.w	r9, r9
 800cac0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cac4:	d820      	bhi.n	800cb08 <_printf_float+0x158>
 800cac6:	3901      	subs	r1, #1
 800cac8:	464a      	mov	r2, r9
 800caca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cace:	9107      	str	r1, [sp, #28]
 800cad0:	f7ff ff2e 	bl	800c930 <__exponent>
 800cad4:	9a08      	ldr	r2, [sp, #32]
 800cad6:	9004      	str	r0, [sp, #16]
 800cad8:	1813      	adds	r3, r2, r0
 800cada:	2a01      	cmp	r2, #1
 800cadc:	6123      	str	r3, [r4, #16]
 800cade:	dc02      	bgt.n	800cae6 <_printf_float+0x136>
 800cae0:	6822      	ldr	r2, [r4, #0]
 800cae2:	07d2      	lsls	r2, r2, #31
 800cae4:	d501      	bpl.n	800caea <_printf_float+0x13a>
 800cae6:	3301      	adds	r3, #1
 800cae8:	6123      	str	r3, [r4, #16]
 800caea:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d0a2      	beq.n	800ca38 <_printf_float+0x88>
 800caf2:	232d      	movs	r3, #45	; 0x2d
 800caf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800caf8:	e79e      	b.n	800ca38 <_printf_float+0x88>
 800cafa:	9904      	ldr	r1, [sp, #16]
 800cafc:	2947      	cmp	r1, #71	; 0x47
 800cafe:	d1c1      	bne.n	800ca84 <_printf_float+0xd4>
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d1bf      	bne.n	800ca84 <_printf_float+0xd4>
 800cb04:	2301      	movs	r3, #1
 800cb06:	e7bc      	b.n	800ca82 <_printf_float+0xd2>
 800cb08:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800cb0c:	d118      	bne.n	800cb40 <_printf_float+0x190>
 800cb0e:	2900      	cmp	r1, #0
 800cb10:	6863      	ldr	r3, [r4, #4]
 800cb12:	dd0b      	ble.n	800cb2c <_printf_float+0x17c>
 800cb14:	6121      	str	r1, [r4, #16]
 800cb16:	b913      	cbnz	r3, 800cb1e <_printf_float+0x16e>
 800cb18:	6822      	ldr	r2, [r4, #0]
 800cb1a:	07d0      	lsls	r0, r2, #31
 800cb1c:	d502      	bpl.n	800cb24 <_printf_float+0x174>
 800cb1e:	3301      	adds	r3, #1
 800cb20:	440b      	add	r3, r1
 800cb22:	6123      	str	r3, [r4, #16]
 800cb24:	2300      	movs	r3, #0
 800cb26:	65a1      	str	r1, [r4, #88]	; 0x58
 800cb28:	9304      	str	r3, [sp, #16]
 800cb2a:	e7de      	b.n	800caea <_printf_float+0x13a>
 800cb2c:	b913      	cbnz	r3, 800cb34 <_printf_float+0x184>
 800cb2e:	6822      	ldr	r2, [r4, #0]
 800cb30:	07d2      	lsls	r2, r2, #31
 800cb32:	d501      	bpl.n	800cb38 <_printf_float+0x188>
 800cb34:	3302      	adds	r3, #2
 800cb36:	e7f4      	b.n	800cb22 <_printf_float+0x172>
 800cb38:	2301      	movs	r3, #1
 800cb3a:	e7f2      	b.n	800cb22 <_printf_float+0x172>
 800cb3c:	f04f 0967 	mov.w	r9, #103	; 0x67
 800cb40:	9b08      	ldr	r3, [sp, #32]
 800cb42:	4299      	cmp	r1, r3
 800cb44:	db05      	blt.n	800cb52 <_printf_float+0x1a2>
 800cb46:	6823      	ldr	r3, [r4, #0]
 800cb48:	6121      	str	r1, [r4, #16]
 800cb4a:	07d8      	lsls	r0, r3, #31
 800cb4c:	d5ea      	bpl.n	800cb24 <_printf_float+0x174>
 800cb4e:	1c4b      	adds	r3, r1, #1
 800cb50:	e7e7      	b.n	800cb22 <_printf_float+0x172>
 800cb52:	2900      	cmp	r1, #0
 800cb54:	bfd4      	ite	le
 800cb56:	f1c1 0202 	rsble	r2, r1, #2
 800cb5a:	2201      	movgt	r2, #1
 800cb5c:	4413      	add	r3, r2
 800cb5e:	e7e0      	b.n	800cb22 <_printf_float+0x172>
 800cb60:	6823      	ldr	r3, [r4, #0]
 800cb62:	055a      	lsls	r2, r3, #21
 800cb64:	d407      	bmi.n	800cb76 <_printf_float+0x1c6>
 800cb66:	6923      	ldr	r3, [r4, #16]
 800cb68:	4642      	mov	r2, r8
 800cb6a:	4631      	mov	r1, r6
 800cb6c:	4628      	mov	r0, r5
 800cb6e:	47b8      	blx	r7
 800cb70:	3001      	adds	r0, #1
 800cb72:	d12a      	bne.n	800cbca <_printf_float+0x21a>
 800cb74:	e76a      	b.n	800ca4c <_printf_float+0x9c>
 800cb76:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cb7a:	f240 80e2 	bls.w	800cd42 <_printf_float+0x392>
 800cb7e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800cb82:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cb86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb8a:	d133      	bne.n	800cbf4 <_printf_float+0x244>
 800cb8c:	4a38      	ldr	r2, [pc, #224]	; (800cc70 <_printf_float+0x2c0>)
 800cb8e:	2301      	movs	r3, #1
 800cb90:	4631      	mov	r1, r6
 800cb92:	4628      	mov	r0, r5
 800cb94:	47b8      	blx	r7
 800cb96:	3001      	adds	r0, #1
 800cb98:	f43f af58 	beq.w	800ca4c <_printf_float+0x9c>
 800cb9c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cba0:	429a      	cmp	r2, r3
 800cba2:	db02      	blt.n	800cbaa <_printf_float+0x1fa>
 800cba4:	6823      	ldr	r3, [r4, #0]
 800cba6:	07d8      	lsls	r0, r3, #31
 800cba8:	d50f      	bpl.n	800cbca <_printf_float+0x21a>
 800cbaa:	4653      	mov	r3, sl
 800cbac:	465a      	mov	r2, fp
 800cbae:	4631      	mov	r1, r6
 800cbb0:	4628      	mov	r0, r5
 800cbb2:	47b8      	blx	r7
 800cbb4:	3001      	adds	r0, #1
 800cbb6:	f43f af49 	beq.w	800ca4c <_printf_float+0x9c>
 800cbba:	f04f 0800 	mov.w	r8, #0
 800cbbe:	f104 091a 	add.w	r9, r4, #26
 800cbc2:	9b08      	ldr	r3, [sp, #32]
 800cbc4:	3b01      	subs	r3, #1
 800cbc6:	4543      	cmp	r3, r8
 800cbc8:	dc09      	bgt.n	800cbde <_printf_float+0x22e>
 800cbca:	6823      	ldr	r3, [r4, #0]
 800cbcc:	079b      	lsls	r3, r3, #30
 800cbce:	f100 8108 	bmi.w	800cde2 <_printf_float+0x432>
 800cbd2:	68e0      	ldr	r0, [r4, #12]
 800cbd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbd6:	4298      	cmp	r0, r3
 800cbd8:	bfb8      	it	lt
 800cbda:	4618      	movlt	r0, r3
 800cbdc:	e738      	b.n	800ca50 <_printf_float+0xa0>
 800cbde:	2301      	movs	r3, #1
 800cbe0:	464a      	mov	r2, r9
 800cbe2:	4631      	mov	r1, r6
 800cbe4:	4628      	mov	r0, r5
 800cbe6:	47b8      	blx	r7
 800cbe8:	3001      	adds	r0, #1
 800cbea:	f43f af2f 	beq.w	800ca4c <_printf_float+0x9c>
 800cbee:	f108 0801 	add.w	r8, r8, #1
 800cbf2:	e7e6      	b.n	800cbc2 <_printf_float+0x212>
 800cbf4:	9b07      	ldr	r3, [sp, #28]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	dc3c      	bgt.n	800cc74 <_printf_float+0x2c4>
 800cbfa:	4a1d      	ldr	r2, [pc, #116]	; (800cc70 <_printf_float+0x2c0>)
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	4631      	mov	r1, r6
 800cc00:	4628      	mov	r0, r5
 800cc02:	47b8      	blx	r7
 800cc04:	3001      	adds	r0, #1
 800cc06:	f43f af21 	beq.w	800ca4c <_printf_float+0x9c>
 800cc0a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cc0e:	4313      	orrs	r3, r2
 800cc10:	d102      	bne.n	800cc18 <_printf_float+0x268>
 800cc12:	6823      	ldr	r3, [r4, #0]
 800cc14:	07d9      	lsls	r1, r3, #31
 800cc16:	d5d8      	bpl.n	800cbca <_printf_float+0x21a>
 800cc18:	4653      	mov	r3, sl
 800cc1a:	465a      	mov	r2, fp
 800cc1c:	4631      	mov	r1, r6
 800cc1e:	4628      	mov	r0, r5
 800cc20:	47b8      	blx	r7
 800cc22:	3001      	adds	r0, #1
 800cc24:	f43f af12 	beq.w	800ca4c <_printf_float+0x9c>
 800cc28:	f04f 0900 	mov.w	r9, #0
 800cc2c:	f104 0a1a 	add.w	sl, r4, #26
 800cc30:	9b07      	ldr	r3, [sp, #28]
 800cc32:	425b      	negs	r3, r3
 800cc34:	454b      	cmp	r3, r9
 800cc36:	dc01      	bgt.n	800cc3c <_printf_float+0x28c>
 800cc38:	9b08      	ldr	r3, [sp, #32]
 800cc3a:	e795      	b.n	800cb68 <_printf_float+0x1b8>
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	4652      	mov	r2, sl
 800cc40:	4631      	mov	r1, r6
 800cc42:	4628      	mov	r0, r5
 800cc44:	47b8      	blx	r7
 800cc46:	3001      	adds	r0, #1
 800cc48:	f43f af00 	beq.w	800ca4c <_printf_float+0x9c>
 800cc4c:	f109 0901 	add.w	r9, r9, #1
 800cc50:	e7ee      	b.n	800cc30 <_printf_float+0x280>
 800cc52:	bf00      	nop
 800cc54:	f3af 8000 	nop.w
 800cc58:	ffffffff 	.word	0xffffffff
 800cc5c:	7fefffff 	.word	0x7fefffff
 800cc60:	0800f894 	.word	0x0800f894
 800cc64:	0800f898 	.word	0x0800f898
 800cc68:	0800f8a0 	.word	0x0800f8a0
 800cc6c:	0800f89c 	.word	0x0800f89c
 800cc70:	0800f8a4 	.word	0x0800f8a4
 800cc74:	9a08      	ldr	r2, [sp, #32]
 800cc76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cc78:	429a      	cmp	r2, r3
 800cc7a:	bfa8      	it	ge
 800cc7c:	461a      	movge	r2, r3
 800cc7e:	2a00      	cmp	r2, #0
 800cc80:	4691      	mov	r9, r2
 800cc82:	dc38      	bgt.n	800ccf6 <_printf_float+0x346>
 800cc84:	2300      	movs	r3, #0
 800cc86:	9305      	str	r3, [sp, #20]
 800cc88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cc8c:	f104 021a 	add.w	r2, r4, #26
 800cc90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cc92:	9905      	ldr	r1, [sp, #20]
 800cc94:	9304      	str	r3, [sp, #16]
 800cc96:	eba3 0309 	sub.w	r3, r3, r9
 800cc9a:	428b      	cmp	r3, r1
 800cc9c:	dc33      	bgt.n	800cd06 <_printf_float+0x356>
 800cc9e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cca2:	429a      	cmp	r2, r3
 800cca4:	db3c      	blt.n	800cd20 <_printf_float+0x370>
 800cca6:	6823      	ldr	r3, [r4, #0]
 800cca8:	07da      	lsls	r2, r3, #31
 800ccaa:	d439      	bmi.n	800cd20 <_printf_float+0x370>
 800ccac:	9a08      	ldr	r2, [sp, #32]
 800ccae:	9b04      	ldr	r3, [sp, #16]
 800ccb0:	9907      	ldr	r1, [sp, #28]
 800ccb2:	1ad3      	subs	r3, r2, r3
 800ccb4:	eba2 0901 	sub.w	r9, r2, r1
 800ccb8:	4599      	cmp	r9, r3
 800ccba:	bfa8      	it	ge
 800ccbc:	4699      	movge	r9, r3
 800ccbe:	f1b9 0f00 	cmp.w	r9, #0
 800ccc2:	dc35      	bgt.n	800cd30 <_printf_float+0x380>
 800ccc4:	f04f 0800 	mov.w	r8, #0
 800ccc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cccc:	f104 0a1a 	add.w	sl, r4, #26
 800ccd0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ccd4:	1a9b      	subs	r3, r3, r2
 800ccd6:	eba3 0309 	sub.w	r3, r3, r9
 800ccda:	4543      	cmp	r3, r8
 800ccdc:	f77f af75 	ble.w	800cbca <_printf_float+0x21a>
 800cce0:	2301      	movs	r3, #1
 800cce2:	4652      	mov	r2, sl
 800cce4:	4631      	mov	r1, r6
 800cce6:	4628      	mov	r0, r5
 800cce8:	47b8      	blx	r7
 800ccea:	3001      	adds	r0, #1
 800ccec:	f43f aeae 	beq.w	800ca4c <_printf_float+0x9c>
 800ccf0:	f108 0801 	add.w	r8, r8, #1
 800ccf4:	e7ec      	b.n	800ccd0 <_printf_float+0x320>
 800ccf6:	4613      	mov	r3, r2
 800ccf8:	4631      	mov	r1, r6
 800ccfa:	4642      	mov	r2, r8
 800ccfc:	4628      	mov	r0, r5
 800ccfe:	47b8      	blx	r7
 800cd00:	3001      	adds	r0, #1
 800cd02:	d1bf      	bne.n	800cc84 <_printf_float+0x2d4>
 800cd04:	e6a2      	b.n	800ca4c <_printf_float+0x9c>
 800cd06:	2301      	movs	r3, #1
 800cd08:	4631      	mov	r1, r6
 800cd0a:	4628      	mov	r0, r5
 800cd0c:	9204      	str	r2, [sp, #16]
 800cd0e:	47b8      	blx	r7
 800cd10:	3001      	adds	r0, #1
 800cd12:	f43f ae9b 	beq.w	800ca4c <_printf_float+0x9c>
 800cd16:	9b05      	ldr	r3, [sp, #20]
 800cd18:	9a04      	ldr	r2, [sp, #16]
 800cd1a:	3301      	adds	r3, #1
 800cd1c:	9305      	str	r3, [sp, #20]
 800cd1e:	e7b7      	b.n	800cc90 <_printf_float+0x2e0>
 800cd20:	4653      	mov	r3, sl
 800cd22:	465a      	mov	r2, fp
 800cd24:	4631      	mov	r1, r6
 800cd26:	4628      	mov	r0, r5
 800cd28:	47b8      	blx	r7
 800cd2a:	3001      	adds	r0, #1
 800cd2c:	d1be      	bne.n	800ccac <_printf_float+0x2fc>
 800cd2e:	e68d      	b.n	800ca4c <_printf_float+0x9c>
 800cd30:	9a04      	ldr	r2, [sp, #16]
 800cd32:	464b      	mov	r3, r9
 800cd34:	4442      	add	r2, r8
 800cd36:	4631      	mov	r1, r6
 800cd38:	4628      	mov	r0, r5
 800cd3a:	47b8      	blx	r7
 800cd3c:	3001      	adds	r0, #1
 800cd3e:	d1c1      	bne.n	800ccc4 <_printf_float+0x314>
 800cd40:	e684      	b.n	800ca4c <_printf_float+0x9c>
 800cd42:	9a08      	ldr	r2, [sp, #32]
 800cd44:	2a01      	cmp	r2, #1
 800cd46:	dc01      	bgt.n	800cd4c <_printf_float+0x39c>
 800cd48:	07db      	lsls	r3, r3, #31
 800cd4a:	d537      	bpl.n	800cdbc <_printf_float+0x40c>
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	4642      	mov	r2, r8
 800cd50:	4631      	mov	r1, r6
 800cd52:	4628      	mov	r0, r5
 800cd54:	47b8      	blx	r7
 800cd56:	3001      	adds	r0, #1
 800cd58:	f43f ae78 	beq.w	800ca4c <_printf_float+0x9c>
 800cd5c:	4653      	mov	r3, sl
 800cd5e:	465a      	mov	r2, fp
 800cd60:	4631      	mov	r1, r6
 800cd62:	4628      	mov	r0, r5
 800cd64:	47b8      	blx	r7
 800cd66:	3001      	adds	r0, #1
 800cd68:	f43f ae70 	beq.w	800ca4c <_printf_float+0x9c>
 800cd6c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800cd70:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cd74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd78:	d01b      	beq.n	800cdb2 <_printf_float+0x402>
 800cd7a:	9b08      	ldr	r3, [sp, #32]
 800cd7c:	f108 0201 	add.w	r2, r8, #1
 800cd80:	3b01      	subs	r3, #1
 800cd82:	4631      	mov	r1, r6
 800cd84:	4628      	mov	r0, r5
 800cd86:	47b8      	blx	r7
 800cd88:	3001      	adds	r0, #1
 800cd8a:	d10e      	bne.n	800cdaa <_printf_float+0x3fa>
 800cd8c:	e65e      	b.n	800ca4c <_printf_float+0x9c>
 800cd8e:	2301      	movs	r3, #1
 800cd90:	464a      	mov	r2, r9
 800cd92:	4631      	mov	r1, r6
 800cd94:	4628      	mov	r0, r5
 800cd96:	47b8      	blx	r7
 800cd98:	3001      	adds	r0, #1
 800cd9a:	f43f ae57 	beq.w	800ca4c <_printf_float+0x9c>
 800cd9e:	f108 0801 	add.w	r8, r8, #1
 800cda2:	9b08      	ldr	r3, [sp, #32]
 800cda4:	3b01      	subs	r3, #1
 800cda6:	4543      	cmp	r3, r8
 800cda8:	dcf1      	bgt.n	800cd8e <_printf_float+0x3de>
 800cdaa:	9b04      	ldr	r3, [sp, #16]
 800cdac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cdb0:	e6db      	b.n	800cb6a <_printf_float+0x1ba>
 800cdb2:	f04f 0800 	mov.w	r8, #0
 800cdb6:	f104 091a 	add.w	r9, r4, #26
 800cdba:	e7f2      	b.n	800cda2 <_printf_float+0x3f2>
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	4642      	mov	r2, r8
 800cdc0:	e7df      	b.n	800cd82 <_printf_float+0x3d2>
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	464a      	mov	r2, r9
 800cdc6:	4631      	mov	r1, r6
 800cdc8:	4628      	mov	r0, r5
 800cdca:	47b8      	blx	r7
 800cdcc:	3001      	adds	r0, #1
 800cdce:	f43f ae3d 	beq.w	800ca4c <_printf_float+0x9c>
 800cdd2:	f108 0801 	add.w	r8, r8, #1
 800cdd6:	68e3      	ldr	r3, [r4, #12]
 800cdd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cdda:	1a5b      	subs	r3, r3, r1
 800cddc:	4543      	cmp	r3, r8
 800cdde:	dcf0      	bgt.n	800cdc2 <_printf_float+0x412>
 800cde0:	e6f7      	b.n	800cbd2 <_printf_float+0x222>
 800cde2:	f04f 0800 	mov.w	r8, #0
 800cde6:	f104 0919 	add.w	r9, r4, #25
 800cdea:	e7f4      	b.n	800cdd6 <_printf_float+0x426>

0800cdec <_printf_common>:
 800cdec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdf0:	4616      	mov	r6, r2
 800cdf2:	4699      	mov	r9, r3
 800cdf4:	688a      	ldr	r2, [r1, #8]
 800cdf6:	690b      	ldr	r3, [r1, #16]
 800cdf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cdfc:	4293      	cmp	r3, r2
 800cdfe:	bfb8      	it	lt
 800ce00:	4613      	movlt	r3, r2
 800ce02:	6033      	str	r3, [r6, #0]
 800ce04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ce08:	4607      	mov	r7, r0
 800ce0a:	460c      	mov	r4, r1
 800ce0c:	b10a      	cbz	r2, 800ce12 <_printf_common+0x26>
 800ce0e:	3301      	adds	r3, #1
 800ce10:	6033      	str	r3, [r6, #0]
 800ce12:	6823      	ldr	r3, [r4, #0]
 800ce14:	0699      	lsls	r1, r3, #26
 800ce16:	bf42      	ittt	mi
 800ce18:	6833      	ldrmi	r3, [r6, #0]
 800ce1a:	3302      	addmi	r3, #2
 800ce1c:	6033      	strmi	r3, [r6, #0]
 800ce1e:	6825      	ldr	r5, [r4, #0]
 800ce20:	f015 0506 	ands.w	r5, r5, #6
 800ce24:	d106      	bne.n	800ce34 <_printf_common+0x48>
 800ce26:	f104 0a19 	add.w	sl, r4, #25
 800ce2a:	68e3      	ldr	r3, [r4, #12]
 800ce2c:	6832      	ldr	r2, [r6, #0]
 800ce2e:	1a9b      	subs	r3, r3, r2
 800ce30:	42ab      	cmp	r3, r5
 800ce32:	dc26      	bgt.n	800ce82 <_printf_common+0x96>
 800ce34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ce38:	1e13      	subs	r3, r2, #0
 800ce3a:	6822      	ldr	r2, [r4, #0]
 800ce3c:	bf18      	it	ne
 800ce3e:	2301      	movne	r3, #1
 800ce40:	0692      	lsls	r2, r2, #26
 800ce42:	d42b      	bmi.n	800ce9c <_printf_common+0xb0>
 800ce44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ce48:	4649      	mov	r1, r9
 800ce4a:	4638      	mov	r0, r7
 800ce4c:	47c0      	blx	r8
 800ce4e:	3001      	adds	r0, #1
 800ce50:	d01e      	beq.n	800ce90 <_printf_common+0xa4>
 800ce52:	6823      	ldr	r3, [r4, #0]
 800ce54:	68e5      	ldr	r5, [r4, #12]
 800ce56:	6832      	ldr	r2, [r6, #0]
 800ce58:	f003 0306 	and.w	r3, r3, #6
 800ce5c:	2b04      	cmp	r3, #4
 800ce5e:	bf08      	it	eq
 800ce60:	1aad      	subeq	r5, r5, r2
 800ce62:	68a3      	ldr	r3, [r4, #8]
 800ce64:	6922      	ldr	r2, [r4, #16]
 800ce66:	bf0c      	ite	eq
 800ce68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ce6c:	2500      	movne	r5, #0
 800ce6e:	4293      	cmp	r3, r2
 800ce70:	bfc4      	itt	gt
 800ce72:	1a9b      	subgt	r3, r3, r2
 800ce74:	18ed      	addgt	r5, r5, r3
 800ce76:	2600      	movs	r6, #0
 800ce78:	341a      	adds	r4, #26
 800ce7a:	42b5      	cmp	r5, r6
 800ce7c:	d11a      	bne.n	800ceb4 <_printf_common+0xc8>
 800ce7e:	2000      	movs	r0, #0
 800ce80:	e008      	b.n	800ce94 <_printf_common+0xa8>
 800ce82:	2301      	movs	r3, #1
 800ce84:	4652      	mov	r2, sl
 800ce86:	4649      	mov	r1, r9
 800ce88:	4638      	mov	r0, r7
 800ce8a:	47c0      	blx	r8
 800ce8c:	3001      	adds	r0, #1
 800ce8e:	d103      	bne.n	800ce98 <_printf_common+0xac>
 800ce90:	f04f 30ff 	mov.w	r0, #4294967295
 800ce94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce98:	3501      	adds	r5, #1
 800ce9a:	e7c6      	b.n	800ce2a <_printf_common+0x3e>
 800ce9c:	18e1      	adds	r1, r4, r3
 800ce9e:	1c5a      	adds	r2, r3, #1
 800cea0:	2030      	movs	r0, #48	; 0x30
 800cea2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cea6:	4422      	add	r2, r4
 800cea8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ceac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ceb0:	3302      	adds	r3, #2
 800ceb2:	e7c7      	b.n	800ce44 <_printf_common+0x58>
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	4622      	mov	r2, r4
 800ceb8:	4649      	mov	r1, r9
 800ceba:	4638      	mov	r0, r7
 800cebc:	47c0      	blx	r8
 800cebe:	3001      	adds	r0, #1
 800cec0:	d0e6      	beq.n	800ce90 <_printf_common+0xa4>
 800cec2:	3601      	adds	r6, #1
 800cec4:	e7d9      	b.n	800ce7a <_printf_common+0x8e>
	...

0800cec8 <_printf_i>:
 800cec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cecc:	460c      	mov	r4, r1
 800cece:	4691      	mov	r9, r2
 800ced0:	7e27      	ldrb	r7, [r4, #24]
 800ced2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ced4:	2f78      	cmp	r7, #120	; 0x78
 800ced6:	4680      	mov	r8, r0
 800ced8:	469a      	mov	sl, r3
 800ceda:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cede:	d807      	bhi.n	800cef0 <_printf_i+0x28>
 800cee0:	2f62      	cmp	r7, #98	; 0x62
 800cee2:	d80a      	bhi.n	800cefa <_printf_i+0x32>
 800cee4:	2f00      	cmp	r7, #0
 800cee6:	f000 80d8 	beq.w	800d09a <_printf_i+0x1d2>
 800ceea:	2f58      	cmp	r7, #88	; 0x58
 800ceec:	f000 80a3 	beq.w	800d036 <_printf_i+0x16e>
 800cef0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cef4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cef8:	e03a      	b.n	800cf70 <_printf_i+0xa8>
 800cefa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cefe:	2b15      	cmp	r3, #21
 800cf00:	d8f6      	bhi.n	800cef0 <_printf_i+0x28>
 800cf02:	a001      	add	r0, pc, #4	; (adr r0, 800cf08 <_printf_i+0x40>)
 800cf04:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800cf08:	0800cf61 	.word	0x0800cf61
 800cf0c:	0800cf75 	.word	0x0800cf75
 800cf10:	0800cef1 	.word	0x0800cef1
 800cf14:	0800cef1 	.word	0x0800cef1
 800cf18:	0800cef1 	.word	0x0800cef1
 800cf1c:	0800cef1 	.word	0x0800cef1
 800cf20:	0800cf75 	.word	0x0800cf75
 800cf24:	0800cef1 	.word	0x0800cef1
 800cf28:	0800cef1 	.word	0x0800cef1
 800cf2c:	0800cef1 	.word	0x0800cef1
 800cf30:	0800cef1 	.word	0x0800cef1
 800cf34:	0800d081 	.word	0x0800d081
 800cf38:	0800cfa5 	.word	0x0800cfa5
 800cf3c:	0800d063 	.word	0x0800d063
 800cf40:	0800cef1 	.word	0x0800cef1
 800cf44:	0800cef1 	.word	0x0800cef1
 800cf48:	0800d0a3 	.word	0x0800d0a3
 800cf4c:	0800cef1 	.word	0x0800cef1
 800cf50:	0800cfa5 	.word	0x0800cfa5
 800cf54:	0800cef1 	.word	0x0800cef1
 800cf58:	0800cef1 	.word	0x0800cef1
 800cf5c:	0800d06b 	.word	0x0800d06b
 800cf60:	680b      	ldr	r3, [r1, #0]
 800cf62:	1d1a      	adds	r2, r3, #4
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	600a      	str	r2, [r1, #0]
 800cf68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cf6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cf70:	2301      	movs	r3, #1
 800cf72:	e0a3      	b.n	800d0bc <_printf_i+0x1f4>
 800cf74:	6825      	ldr	r5, [r4, #0]
 800cf76:	6808      	ldr	r0, [r1, #0]
 800cf78:	062e      	lsls	r6, r5, #24
 800cf7a:	f100 0304 	add.w	r3, r0, #4
 800cf7e:	d50a      	bpl.n	800cf96 <_printf_i+0xce>
 800cf80:	6805      	ldr	r5, [r0, #0]
 800cf82:	600b      	str	r3, [r1, #0]
 800cf84:	2d00      	cmp	r5, #0
 800cf86:	da03      	bge.n	800cf90 <_printf_i+0xc8>
 800cf88:	232d      	movs	r3, #45	; 0x2d
 800cf8a:	426d      	negs	r5, r5
 800cf8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf90:	485e      	ldr	r0, [pc, #376]	; (800d10c <_printf_i+0x244>)
 800cf92:	230a      	movs	r3, #10
 800cf94:	e019      	b.n	800cfca <_printf_i+0x102>
 800cf96:	f015 0f40 	tst.w	r5, #64	; 0x40
 800cf9a:	6805      	ldr	r5, [r0, #0]
 800cf9c:	600b      	str	r3, [r1, #0]
 800cf9e:	bf18      	it	ne
 800cfa0:	b22d      	sxthne	r5, r5
 800cfa2:	e7ef      	b.n	800cf84 <_printf_i+0xbc>
 800cfa4:	680b      	ldr	r3, [r1, #0]
 800cfa6:	6825      	ldr	r5, [r4, #0]
 800cfa8:	1d18      	adds	r0, r3, #4
 800cfaa:	6008      	str	r0, [r1, #0]
 800cfac:	0628      	lsls	r0, r5, #24
 800cfae:	d501      	bpl.n	800cfb4 <_printf_i+0xec>
 800cfb0:	681d      	ldr	r5, [r3, #0]
 800cfb2:	e002      	b.n	800cfba <_printf_i+0xf2>
 800cfb4:	0669      	lsls	r1, r5, #25
 800cfb6:	d5fb      	bpl.n	800cfb0 <_printf_i+0xe8>
 800cfb8:	881d      	ldrh	r5, [r3, #0]
 800cfba:	4854      	ldr	r0, [pc, #336]	; (800d10c <_printf_i+0x244>)
 800cfbc:	2f6f      	cmp	r7, #111	; 0x6f
 800cfbe:	bf0c      	ite	eq
 800cfc0:	2308      	moveq	r3, #8
 800cfc2:	230a      	movne	r3, #10
 800cfc4:	2100      	movs	r1, #0
 800cfc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cfca:	6866      	ldr	r6, [r4, #4]
 800cfcc:	60a6      	str	r6, [r4, #8]
 800cfce:	2e00      	cmp	r6, #0
 800cfd0:	bfa2      	ittt	ge
 800cfd2:	6821      	ldrge	r1, [r4, #0]
 800cfd4:	f021 0104 	bicge.w	r1, r1, #4
 800cfd8:	6021      	strge	r1, [r4, #0]
 800cfda:	b90d      	cbnz	r5, 800cfe0 <_printf_i+0x118>
 800cfdc:	2e00      	cmp	r6, #0
 800cfde:	d04d      	beq.n	800d07c <_printf_i+0x1b4>
 800cfe0:	4616      	mov	r6, r2
 800cfe2:	fbb5 f1f3 	udiv	r1, r5, r3
 800cfe6:	fb03 5711 	mls	r7, r3, r1, r5
 800cfea:	5dc7      	ldrb	r7, [r0, r7]
 800cfec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cff0:	462f      	mov	r7, r5
 800cff2:	42bb      	cmp	r3, r7
 800cff4:	460d      	mov	r5, r1
 800cff6:	d9f4      	bls.n	800cfe2 <_printf_i+0x11a>
 800cff8:	2b08      	cmp	r3, #8
 800cffa:	d10b      	bne.n	800d014 <_printf_i+0x14c>
 800cffc:	6823      	ldr	r3, [r4, #0]
 800cffe:	07df      	lsls	r7, r3, #31
 800d000:	d508      	bpl.n	800d014 <_printf_i+0x14c>
 800d002:	6923      	ldr	r3, [r4, #16]
 800d004:	6861      	ldr	r1, [r4, #4]
 800d006:	4299      	cmp	r1, r3
 800d008:	bfde      	ittt	le
 800d00a:	2330      	movle	r3, #48	; 0x30
 800d00c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d010:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d014:	1b92      	subs	r2, r2, r6
 800d016:	6122      	str	r2, [r4, #16]
 800d018:	f8cd a000 	str.w	sl, [sp]
 800d01c:	464b      	mov	r3, r9
 800d01e:	aa03      	add	r2, sp, #12
 800d020:	4621      	mov	r1, r4
 800d022:	4640      	mov	r0, r8
 800d024:	f7ff fee2 	bl	800cdec <_printf_common>
 800d028:	3001      	adds	r0, #1
 800d02a:	d14c      	bne.n	800d0c6 <_printf_i+0x1fe>
 800d02c:	f04f 30ff 	mov.w	r0, #4294967295
 800d030:	b004      	add	sp, #16
 800d032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d036:	4835      	ldr	r0, [pc, #212]	; (800d10c <_printf_i+0x244>)
 800d038:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d03c:	6823      	ldr	r3, [r4, #0]
 800d03e:	680e      	ldr	r6, [r1, #0]
 800d040:	061f      	lsls	r7, r3, #24
 800d042:	f856 5b04 	ldr.w	r5, [r6], #4
 800d046:	600e      	str	r6, [r1, #0]
 800d048:	d514      	bpl.n	800d074 <_printf_i+0x1ac>
 800d04a:	07d9      	lsls	r1, r3, #31
 800d04c:	bf44      	itt	mi
 800d04e:	f043 0320 	orrmi.w	r3, r3, #32
 800d052:	6023      	strmi	r3, [r4, #0]
 800d054:	b91d      	cbnz	r5, 800d05e <_printf_i+0x196>
 800d056:	6823      	ldr	r3, [r4, #0]
 800d058:	f023 0320 	bic.w	r3, r3, #32
 800d05c:	6023      	str	r3, [r4, #0]
 800d05e:	2310      	movs	r3, #16
 800d060:	e7b0      	b.n	800cfc4 <_printf_i+0xfc>
 800d062:	6823      	ldr	r3, [r4, #0]
 800d064:	f043 0320 	orr.w	r3, r3, #32
 800d068:	6023      	str	r3, [r4, #0]
 800d06a:	2378      	movs	r3, #120	; 0x78
 800d06c:	4828      	ldr	r0, [pc, #160]	; (800d110 <_printf_i+0x248>)
 800d06e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d072:	e7e3      	b.n	800d03c <_printf_i+0x174>
 800d074:	065e      	lsls	r6, r3, #25
 800d076:	bf48      	it	mi
 800d078:	b2ad      	uxthmi	r5, r5
 800d07a:	e7e6      	b.n	800d04a <_printf_i+0x182>
 800d07c:	4616      	mov	r6, r2
 800d07e:	e7bb      	b.n	800cff8 <_printf_i+0x130>
 800d080:	680b      	ldr	r3, [r1, #0]
 800d082:	6826      	ldr	r6, [r4, #0]
 800d084:	6960      	ldr	r0, [r4, #20]
 800d086:	1d1d      	adds	r5, r3, #4
 800d088:	600d      	str	r5, [r1, #0]
 800d08a:	0635      	lsls	r5, r6, #24
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	d501      	bpl.n	800d094 <_printf_i+0x1cc>
 800d090:	6018      	str	r0, [r3, #0]
 800d092:	e002      	b.n	800d09a <_printf_i+0x1d2>
 800d094:	0671      	lsls	r1, r6, #25
 800d096:	d5fb      	bpl.n	800d090 <_printf_i+0x1c8>
 800d098:	8018      	strh	r0, [r3, #0]
 800d09a:	2300      	movs	r3, #0
 800d09c:	6123      	str	r3, [r4, #16]
 800d09e:	4616      	mov	r6, r2
 800d0a0:	e7ba      	b.n	800d018 <_printf_i+0x150>
 800d0a2:	680b      	ldr	r3, [r1, #0]
 800d0a4:	1d1a      	adds	r2, r3, #4
 800d0a6:	600a      	str	r2, [r1, #0]
 800d0a8:	681e      	ldr	r6, [r3, #0]
 800d0aa:	6862      	ldr	r2, [r4, #4]
 800d0ac:	2100      	movs	r1, #0
 800d0ae:	4630      	mov	r0, r6
 800d0b0:	f7f3 f91e 	bl	80002f0 <memchr>
 800d0b4:	b108      	cbz	r0, 800d0ba <_printf_i+0x1f2>
 800d0b6:	1b80      	subs	r0, r0, r6
 800d0b8:	6060      	str	r0, [r4, #4]
 800d0ba:	6863      	ldr	r3, [r4, #4]
 800d0bc:	6123      	str	r3, [r4, #16]
 800d0be:	2300      	movs	r3, #0
 800d0c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d0c4:	e7a8      	b.n	800d018 <_printf_i+0x150>
 800d0c6:	6923      	ldr	r3, [r4, #16]
 800d0c8:	4632      	mov	r2, r6
 800d0ca:	4649      	mov	r1, r9
 800d0cc:	4640      	mov	r0, r8
 800d0ce:	47d0      	blx	sl
 800d0d0:	3001      	adds	r0, #1
 800d0d2:	d0ab      	beq.n	800d02c <_printf_i+0x164>
 800d0d4:	6823      	ldr	r3, [r4, #0]
 800d0d6:	079b      	lsls	r3, r3, #30
 800d0d8:	d413      	bmi.n	800d102 <_printf_i+0x23a>
 800d0da:	68e0      	ldr	r0, [r4, #12]
 800d0dc:	9b03      	ldr	r3, [sp, #12]
 800d0de:	4298      	cmp	r0, r3
 800d0e0:	bfb8      	it	lt
 800d0e2:	4618      	movlt	r0, r3
 800d0e4:	e7a4      	b.n	800d030 <_printf_i+0x168>
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	4632      	mov	r2, r6
 800d0ea:	4649      	mov	r1, r9
 800d0ec:	4640      	mov	r0, r8
 800d0ee:	47d0      	blx	sl
 800d0f0:	3001      	adds	r0, #1
 800d0f2:	d09b      	beq.n	800d02c <_printf_i+0x164>
 800d0f4:	3501      	adds	r5, #1
 800d0f6:	68e3      	ldr	r3, [r4, #12]
 800d0f8:	9903      	ldr	r1, [sp, #12]
 800d0fa:	1a5b      	subs	r3, r3, r1
 800d0fc:	42ab      	cmp	r3, r5
 800d0fe:	dcf2      	bgt.n	800d0e6 <_printf_i+0x21e>
 800d100:	e7eb      	b.n	800d0da <_printf_i+0x212>
 800d102:	2500      	movs	r5, #0
 800d104:	f104 0619 	add.w	r6, r4, #25
 800d108:	e7f5      	b.n	800d0f6 <_printf_i+0x22e>
 800d10a:	bf00      	nop
 800d10c:	0800f8a6 	.word	0x0800f8a6
 800d110:	0800f8b7 	.word	0x0800f8b7

0800d114 <iprintf>:
 800d114:	b40f      	push	{r0, r1, r2, r3}
 800d116:	4b0a      	ldr	r3, [pc, #40]	; (800d140 <iprintf+0x2c>)
 800d118:	b513      	push	{r0, r1, r4, lr}
 800d11a:	681c      	ldr	r4, [r3, #0]
 800d11c:	b124      	cbz	r4, 800d128 <iprintf+0x14>
 800d11e:	69a3      	ldr	r3, [r4, #24]
 800d120:	b913      	cbnz	r3, 800d128 <iprintf+0x14>
 800d122:	4620      	mov	r0, r4
 800d124:	f001 f88c 	bl	800e240 <__sinit>
 800d128:	ab05      	add	r3, sp, #20
 800d12a:	9a04      	ldr	r2, [sp, #16]
 800d12c:	68a1      	ldr	r1, [r4, #8]
 800d12e:	9301      	str	r3, [sp, #4]
 800d130:	4620      	mov	r0, r4
 800d132:	f001 ff55 	bl	800efe0 <_vfiprintf_r>
 800d136:	b002      	add	sp, #8
 800d138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d13c:	b004      	add	sp, #16
 800d13e:	4770      	bx	lr
 800d140:	2400001c 	.word	0x2400001c

0800d144 <_puts_r>:
 800d144:	b570      	push	{r4, r5, r6, lr}
 800d146:	460e      	mov	r6, r1
 800d148:	4605      	mov	r5, r0
 800d14a:	b118      	cbz	r0, 800d154 <_puts_r+0x10>
 800d14c:	6983      	ldr	r3, [r0, #24]
 800d14e:	b90b      	cbnz	r3, 800d154 <_puts_r+0x10>
 800d150:	f001 f876 	bl	800e240 <__sinit>
 800d154:	69ab      	ldr	r3, [r5, #24]
 800d156:	68ac      	ldr	r4, [r5, #8]
 800d158:	b913      	cbnz	r3, 800d160 <_puts_r+0x1c>
 800d15a:	4628      	mov	r0, r5
 800d15c:	f001 f870 	bl	800e240 <__sinit>
 800d160:	4b2c      	ldr	r3, [pc, #176]	; (800d214 <_puts_r+0xd0>)
 800d162:	429c      	cmp	r4, r3
 800d164:	d120      	bne.n	800d1a8 <_puts_r+0x64>
 800d166:	686c      	ldr	r4, [r5, #4]
 800d168:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d16a:	07db      	lsls	r3, r3, #31
 800d16c:	d405      	bmi.n	800d17a <_puts_r+0x36>
 800d16e:	89a3      	ldrh	r3, [r4, #12]
 800d170:	0598      	lsls	r0, r3, #22
 800d172:	d402      	bmi.n	800d17a <_puts_r+0x36>
 800d174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d176:	f001 f906 	bl	800e386 <__retarget_lock_acquire_recursive>
 800d17a:	89a3      	ldrh	r3, [r4, #12]
 800d17c:	0719      	lsls	r1, r3, #28
 800d17e:	d51d      	bpl.n	800d1bc <_puts_r+0x78>
 800d180:	6923      	ldr	r3, [r4, #16]
 800d182:	b1db      	cbz	r3, 800d1bc <_puts_r+0x78>
 800d184:	3e01      	subs	r6, #1
 800d186:	68a3      	ldr	r3, [r4, #8]
 800d188:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d18c:	3b01      	subs	r3, #1
 800d18e:	60a3      	str	r3, [r4, #8]
 800d190:	bb39      	cbnz	r1, 800d1e2 <_puts_r+0x9e>
 800d192:	2b00      	cmp	r3, #0
 800d194:	da38      	bge.n	800d208 <_puts_r+0xc4>
 800d196:	4622      	mov	r2, r4
 800d198:	210a      	movs	r1, #10
 800d19a:	4628      	mov	r0, r5
 800d19c:	f000 f868 	bl	800d270 <__swbuf_r>
 800d1a0:	3001      	adds	r0, #1
 800d1a2:	d011      	beq.n	800d1c8 <_puts_r+0x84>
 800d1a4:	250a      	movs	r5, #10
 800d1a6:	e011      	b.n	800d1cc <_puts_r+0x88>
 800d1a8:	4b1b      	ldr	r3, [pc, #108]	; (800d218 <_puts_r+0xd4>)
 800d1aa:	429c      	cmp	r4, r3
 800d1ac:	d101      	bne.n	800d1b2 <_puts_r+0x6e>
 800d1ae:	68ac      	ldr	r4, [r5, #8]
 800d1b0:	e7da      	b.n	800d168 <_puts_r+0x24>
 800d1b2:	4b1a      	ldr	r3, [pc, #104]	; (800d21c <_puts_r+0xd8>)
 800d1b4:	429c      	cmp	r4, r3
 800d1b6:	bf08      	it	eq
 800d1b8:	68ec      	ldreq	r4, [r5, #12]
 800d1ba:	e7d5      	b.n	800d168 <_puts_r+0x24>
 800d1bc:	4621      	mov	r1, r4
 800d1be:	4628      	mov	r0, r5
 800d1c0:	f000 f8a8 	bl	800d314 <__swsetup_r>
 800d1c4:	2800      	cmp	r0, #0
 800d1c6:	d0dd      	beq.n	800d184 <_puts_r+0x40>
 800d1c8:	f04f 35ff 	mov.w	r5, #4294967295
 800d1cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d1ce:	07da      	lsls	r2, r3, #31
 800d1d0:	d405      	bmi.n	800d1de <_puts_r+0x9a>
 800d1d2:	89a3      	ldrh	r3, [r4, #12]
 800d1d4:	059b      	lsls	r3, r3, #22
 800d1d6:	d402      	bmi.n	800d1de <_puts_r+0x9a>
 800d1d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1da:	f001 f8d5 	bl	800e388 <__retarget_lock_release_recursive>
 800d1de:	4628      	mov	r0, r5
 800d1e0:	bd70      	pop	{r4, r5, r6, pc}
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	da04      	bge.n	800d1f0 <_puts_r+0xac>
 800d1e6:	69a2      	ldr	r2, [r4, #24]
 800d1e8:	429a      	cmp	r2, r3
 800d1ea:	dc06      	bgt.n	800d1fa <_puts_r+0xb6>
 800d1ec:	290a      	cmp	r1, #10
 800d1ee:	d004      	beq.n	800d1fa <_puts_r+0xb6>
 800d1f0:	6823      	ldr	r3, [r4, #0]
 800d1f2:	1c5a      	adds	r2, r3, #1
 800d1f4:	6022      	str	r2, [r4, #0]
 800d1f6:	7019      	strb	r1, [r3, #0]
 800d1f8:	e7c5      	b.n	800d186 <_puts_r+0x42>
 800d1fa:	4622      	mov	r2, r4
 800d1fc:	4628      	mov	r0, r5
 800d1fe:	f000 f837 	bl	800d270 <__swbuf_r>
 800d202:	3001      	adds	r0, #1
 800d204:	d1bf      	bne.n	800d186 <_puts_r+0x42>
 800d206:	e7df      	b.n	800d1c8 <_puts_r+0x84>
 800d208:	6823      	ldr	r3, [r4, #0]
 800d20a:	250a      	movs	r5, #10
 800d20c:	1c5a      	adds	r2, r3, #1
 800d20e:	6022      	str	r2, [r4, #0]
 800d210:	701d      	strb	r5, [r3, #0]
 800d212:	e7db      	b.n	800d1cc <_puts_r+0x88>
 800d214:	0800f97c 	.word	0x0800f97c
 800d218:	0800f99c 	.word	0x0800f99c
 800d21c:	0800f95c 	.word	0x0800f95c

0800d220 <puts>:
 800d220:	4b02      	ldr	r3, [pc, #8]	; (800d22c <puts+0xc>)
 800d222:	4601      	mov	r1, r0
 800d224:	6818      	ldr	r0, [r3, #0]
 800d226:	f7ff bf8d 	b.w	800d144 <_puts_r>
 800d22a:	bf00      	nop
 800d22c:	2400001c 	.word	0x2400001c

0800d230 <siprintf>:
 800d230:	b40e      	push	{r1, r2, r3}
 800d232:	b500      	push	{lr}
 800d234:	b09c      	sub	sp, #112	; 0x70
 800d236:	ab1d      	add	r3, sp, #116	; 0x74
 800d238:	9002      	str	r0, [sp, #8]
 800d23a:	9006      	str	r0, [sp, #24]
 800d23c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d240:	4809      	ldr	r0, [pc, #36]	; (800d268 <siprintf+0x38>)
 800d242:	9107      	str	r1, [sp, #28]
 800d244:	9104      	str	r1, [sp, #16]
 800d246:	4909      	ldr	r1, [pc, #36]	; (800d26c <siprintf+0x3c>)
 800d248:	f853 2b04 	ldr.w	r2, [r3], #4
 800d24c:	9105      	str	r1, [sp, #20]
 800d24e:	6800      	ldr	r0, [r0, #0]
 800d250:	9301      	str	r3, [sp, #4]
 800d252:	a902      	add	r1, sp, #8
 800d254:	f001 fd9a 	bl	800ed8c <_svfiprintf_r>
 800d258:	9b02      	ldr	r3, [sp, #8]
 800d25a:	2200      	movs	r2, #0
 800d25c:	701a      	strb	r2, [r3, #0]
 800d25e:	b01c      	add	sp, #112	; 0x70
 800d260:	f85d eb04 	ldr.w	lr, [sp], #4
 800d264:	b003      	add	sp, #12
 800d266:	4770      	bx	lr
 800d268:	2400001c 	.word	0x2400001c
 800d26c:	ffff0208 	.word	0xffff0208

0800d270 <__swbuf_r>:
 800d270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d272:	460e      	mov	r6, r1
 800d274:	4614      	mov	r4, r2
 800d276:	4605      	mov	r5, r0
 800d278:	b118      	cbz	r0, 800d282 <__swbuf_r+0x12>
 800d27a:	6983      	ldr	r3, [r0, #24]
 800d27c:	b90b      	cbnz	r3, 800d282 <__swbuf_r+0x12>
 800d27e:	f000 ffdf 	bl	800e240 <__sinit>
 800d282:	4b21      	ldr	r3, [pc, #132]	; (800d308 <__swbuf_r+0x98>)
 800d284:	429c      	cmp	r4, r3
 800d286:	d12b      	bne.n	800d2e0 <__swbuf_r+0x70>
 800d288:	686c      	ldr	r4, [r5, #4]
 800d28a:	69a3      	ldr	r3, [r4, #24]
 800d28c:	60a3      	str	r3, [r4, #8]
 800d28e:	89a3      	ldrh	r3, [r4, #12]
 800d290:	071a      	lsls	r2, r3, #28
 800d292:	d52f      	bpl.n	800d2f4 <__swbuf_r+0x84>
 800d294:	6923      	ldr	r3, [r4, #16]
 800d296:	b36b      	cbz	r3, 800d2f4 <__swbuf_r+0x84>
 800d298:	6923      	ldr	r3, [r4, #16]
 800d29a:	6820      	ldr	r0, [r4, #0]
 800d29c:	1ac0      	subs	r0, r0, r3
 800d29e:	6963      	ldr	r3, [r4, #20]
 800d2a0:	b2f6      	uxtb	r6, r6
 800d2a2:	4283      	cmp	r3, r0
 800d2a4:	4637      	mov	r7, r6
 800d2a6:	dc04      	bgt.n	800d2b2 <__swbuf_r+0x42>
 800d2a8:	4621      	mov	r1, r4
 800d2aa:	4628      	mov	r0, r5
 800d2ac:	f000 ff34 	bl	800e118 <_fflush_r>
 800d2b0:	bb30      	cbnz	r0, 800d300 <__swbuf_r+0x90>
 800d2b2:	68a3      	ldr	r3, [r4, #8]
 800d2b4:	3b01      	subs	r3, #1
 800d2b6:	60a3      	str	r3, [r4, #8]
 800d2b8:	6823      	ldr	r3, [r4, #0]
 800d2ba:	1c5a      	adds	r2, r3, #1
 800d2bc:	6022      	str	r2, [r4, #0]
 800d2be:	701e      	strb	r6, [r3, #0]
 800d2c0:	6963      	ldr	r3, [r4, #20]
 800d2c2:	3001      	adds	r0, #1
 800d2c4:	4283      	cmp	r3, r0
 800d2c6:	d004      	beq.n	800d2d2 <__swbuf_r+0x62>
 800d2c8:	89a3      	ldrh	r3, [r4, #12]
 800d2ca:	07db      	lsls	r3, r3, #31
 800d2cc:	d506      	bpl.n	800d2dc <__swbuf_r+0x6c>
 800d2ce:	2e0a      	cmp	r6, #10
 800d2d0:	d104      	bne.n	800d2dc <__swbuf_r+0x6c>
 800d2d2:	4621      	mov	r1, r4
 800d2d4:	4628      	mov	r0, r5
 800d2d6:	f000 ff1f 	bl	800e118 <_fflush_r>
 800d2da:	b988      	cbnz	r0, 800d300 <__swbuf_r+0x90>
 800d2dc:	4638      	mov	r0, r7
 800d2de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2e0:	4b0a      	ldr	r3, [pc, #40]	; (800d30c <__swbuf_r+0x9c>)
 800d2e2:	429c      	cmp	r4, r3
 800d2e4:	d101      	bne.n	800d2ea <__swbuf_r+0x7a>
 800d2e6:	68ac      	ldr	r4, [r5, #8]
 800d2e8:	e7cf      	b.n	800d28a <__swbuf_r+0x1a>
 800d2ea:	4b09      	ldr	r3, [pc, #36]	; (800d310 <__swbuf_r+0xa0>)
 800d2ec:	429c      	cmp	r4, r3
 800d2ee:	bf08      	it	eq
 800d2f0:	68ec      	ldreq	r4, [r5, #12]
 800d2f2:	e7ca      	b.n	800d28a <__swbuf_r+0x1a>
 800d2f4:	4621      	mov	r1, r4
 800d2f6:	4628      	mov	r0, r5
 800d2f8:	f000 f80c 	bl	800d314 <__swsetup_r>
 800d2fc:	2800      	cmp	r0, #0
 800d2fe:	d0cb      	beq.n	800d298 <__swbuf_r+0x28>
 800d300:	f04f 37ff 	mov.w	r7, #4294967295
 800d304:	e7ea      	b.n	800d2dc <__swbuf_r+0x6c>
 800d306:	bf00      	nop
 800d308:	0800f97c 	.word	0x0800f97c
 800d30c:	0800f99c 	.word	0x0800f99c
 800d310:	0800f95c 	.word	0x0800f95c

0800d314 <__swsetup_r>:
 800d314:	4b32      	ldr	r3, [pc, #200]	; (800d3e0 <__swsetup_r+0xcc>)
 800d316:	b570      	push	{r4, r5, r6, lr}
 800d318:	681d      	ldr	r5, [r3, #0]
 800d31a:	4606      	mov	r6, r0
 800d31c:	460c      	mov	r4, r1
 800d31e:	b125      	cbz	r5, 800d32a <__swsetup_r+0x16>
 800d320:	69ab      	ldr	r3, [r5, #24]
 800d322:	b913      	cbnz	r3, 800d32a <__swsetup_r+0x16>
 800d324:	4628      	mov	r0, r5
 800d326:	f000 ff8b 	bl	800e240 <__sinit>
 800d32a:	4b2e      	ldr	r3, [pc, #184]	; (800d3e4 <__swsetup_r+0xd0>)
 800d32c:	429c      	cmp	r4, r3
 800d32e:	d10f      	bne.n	800d350 <__swsetup_r+0x3c>
 800d330:	686c      	ldr	r4, [r5, #4]
 800d332:	89a3      	ldrh	r3, [r4, #12]
 800d334:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d338:	0719      	lsls	r1, r3, #28
 800d33a:	d42c      	bmi.n	800d396 <__swsetup_r+0x82>
 800d33c:	06dd      	lsls	r5, r3, #27
 800d33e:	d411      	bmi.n	800d364 <__swsetup_r+0x50>
 800d340:	2309      	movs	r3, #9
 800d342:	6033      	str	r3, [r6, #0]
 800d344:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d348:	81a3      	strh	r3, [r4, #12]
 800d34a:	f04f 30ff 	mov.w	r0, #4294967295
 800d34e:	e03e      	b.n	800d3ce <__swsetup_r+0xba>
 800d350:	4b25      	ldr	r3, [pc, #148]	; (800d3e8 <__swsetup_r+0xd4>)
 800d352:	429c      	cmp	r4, r3
 800d354:	d101      	bne.n	800d35a <__swsetup_r+0x46>
 800d356:	68ac      	ldr	r4, [r5, #8]
 800d358:	e7eb      	b.n	800d332 <__swsetup_r+0x1e>
 800d35a:	4b24      	ldr	r3, [pc, #144]	; (800d3ec <__swsetup_r+0xd8>)
 800d35c:	429c      	cmp	r4, r3
 800d35e:	bf08      	it	eq
 800d360:	68ec      	ldreq	r4, [r5, #12]
 800d362:	e7e6      	b.n	800d332 <__swsetup_r+0x1e>
 800d364:	0758      	lsls	r0, r3, #29
 800d366:	d512      	bpl.n	800d38e <__swsetup_r+0x7a>
 800d368:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d36a:	b141      	cbz	r1, 800d37e <__swsetup_r+0x6a>
 800d36c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d370:	4299      	cmp	r1, r3
 800d372:	d002      	beq.n	800d37a <__swsetup_r+0x66>
 800d374:	4630      	mov	r0, r6
 800d376:	f001 fc03 	bl	800eb80 <_free_r>
 800d37a:	2300      	movs	r3, #0
 800d37c:	6363      	str	r3, [r4, #52]	; 0x34
 800d37e:	89a3      	ldrh	r3, [r4, #12]
 800d380:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d384:	81a3      	strh	r3, [r4, #12]
 800d386:	2300      	movs	r3, #0
 800d388:	6063      	str	r3, [r4, #4]
 800d38a:	6923      	ldr	r3, [r4, #16]
 800d38c:	6023      	str	r3, [r4, #0]
 800d38e:	89a3      	ldrh	r3, [r4, #12]
 800d390:	f043 0308 	orr.w	r3, r3, #8
 800d394:	81a3      	strh	r3, [r4, #12]
 800d396:	6923      	ldr	r3, [r4, #16]
 800d398:	b94b      	cbnz	r3, 800d3ae <__swsetup_r+0x9a>
 800d39a:	89a3      	ldrh	r3, [r4, #12]
 800d39c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d3a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d3a4:	d003      	beq.n	800d3ae <__swsetup_r+0x9a>
 800d3a6:	4621      	mov	r1, r4
 800d3a8:	4630      	mov	r0, r6
 800d3aa:	f001 f813 	bl	800e3d4 <__smakebuf_r>
 800d3ae:	89a0      	ldrh	r0, [r4, #12]
 800d3b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d3b4:	f010 0301 	ands.w	r3, r0, #1
 800d3b8:	d00a      	beq.n	800d3d0 <__swsetup_r+0xbc>
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	60a3      	str	r3, [r4, #8]
 800d3be:	6963      	ldr	r3, [r4, #20]
 800d3c0:	425b      	negs	r3, r3
 800d3c2:	61a3      	str	r3, [r4, #24]
 800d3c4:	6923      	ldr	r3, [r4, #16]
 800d3c6:	b943      	cbnz	r3, 800d3da <__swsetup_r+0xc6>
 800d3c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d3cc:	d1ba      	bne.n	800d344 <__swsetup_r+0x30>
 800d3ce:	bd70      	pop	{r4, r5, r6, pc}
 800d3d0:	0781      	lsls	r1, r0, #30
 800d3d2:	bf58      	it	pl
 800d3d4:	6963      	ldrpl	r3, [r4, #20]
 800d3d6:	60a3      	str	r3, [r4, #8]
 800d3d8:	e7f4      	b.n	800d3c4 <__swsetup_r+0xb0>
 800d3da:	2000      	movs	r0, #0
 800d3dc:	e7f7      	b.n	800d3ce <__swsetup_r+0xba>
 800d3de:	bf00      	nop
 800d3e0:	2400001c 	.word	0x2400001c
 800d3e4:	0800f97c 	.word	0x0800f97c
 800d3e8:	0800f99c 	.word	0x0800f99c
 800d3ec:	0800f95c 	.word	0x0800f95c

0800d3f0 <quorem>:
 800d3f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3f4:	6903      	ldr	r3, [r0, #16]
 800d3f6:	690c      	ldr	r4, [r1, #16]
 800d3f8:	42a3      	cmp	r3, r4
 800d3fa:	4607      	mov	r7, r0
 800d3fc:	f2c0 8081 	blt.w	800d502 <quorem+0x112>
 800d400:	3c01      	subs	r4, #1
 800d402:	f101 0814 	add.w	r8, r1, #20
 800d406:	f100 0514 	add.w	r5, r0, #20
 800d40a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d40e:	9301      	str	r3, [sp, #4]
 800d410:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d414:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d418:	3301      	adds	r3, #1
 800d41a:	429a      	cmp	r2, r3
 800d41c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d420:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d424:	fbb2 f6f3 	udiv	r6, r2, r3
 800d428:	d331      	bcc.n	800d48e <quorem+0x9e>
 800d42a:	f04f 0e00 	mov.w	lr, #0
 800d42e:	4640      	mov	r0, r8
 800d430:	46ac      	mov	ip, r5
 800d432:	46f2      	mov	sl, lr
 800d434:	f850 2b04 	ldr.w	r2, [r0], #4
 800d438:	b293      	uxth	r3, r2
 800d43a:	fb06 e303 	mla	r3, r6, r3, lr
 800d43e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d442:	b29b      	uxth	r3, r3
 800d444:	ebaa 0303 	sub.w	r3, sl, r3
 800d448:	0c12      	lsrs	r2, r2, #16
 800d44a:	f8dc a000 	ldr.w	sl, [ip]
 800d44e:	fb06 e202 	mla	r2, r6, r2, lr
 800d452:	fa13 f38a 	uxtah	r3, r3, sl
 800d456:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d45a:	fa1f fa82 	uxth.w	sl, r2
 800d45e:	f8dc 2000 	ldr.w	r2, [ip]
 800d462:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d466:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d46a:	b29b      	uxth	r3, r3
 800d46c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d470:	4581      	cmp	r9, r0
 800d472:	f84c 3b04 	str.w	r3, [ip], #4
 800d476:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d47a:	d2db      	bcs.n	800d434 <quorem+0x44>
 800d47c:	f855 300b 	ldr.w	r3, [r5, fp]
 800d480:	b92b      	cbnz	r3, 800d48e <quorem+0x9e>
 800d482:	9b01      	ldr	r3, [sp, #4]
 800d484:	3b04      	subs	r3, #4
 800d486:	429d      	cmp	r5, r3
 800d488:	461a      	mov	r2, r3
 800d48a:	d32e      	bcc.n	800d4ea <quorem+0xfa>
 800d48c:	613c      	str	r4, [r7, #16]
 800d48e:	4638      	mov	r0, r7
 800d490:	f001 fa66 	bl	800e960 <__mcmp>
 800d494:	2800      	cmp	r0, #0
 800d496:	db24      	blt.n	800d4e2 <quorem+0xf2>
 800d498:	3601      	adds	r6, #1
 800d49a:	4628      	mov	r0, r5
 800d49c:	f04f 0c00 	mov.w	ip, #0
 800d4a0:	f858 2b04 	ldr.w	r2, [r8], #4
 800d4a4:	f8d0 e000 	ldr.w	lr, [r0]
 800d4a8:	b293      	uxth	r3, r2
 800d4aa:	ebac 0303 	sub.w	r3, ip, r3
 800d4ae:	0c12      	lsrs	r2, r2, #16
 800d4b0:	fa13 f38e 	uxtah	r3, r3, lr
 800d4b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d4b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d4bc:	b29b      	uxth	r3, r3
 800d4be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d4c2:	45c1      	cmp	r9, r8
 800d4c4:	f840 3b04 	str.w	r3, [r0], #4
 800d4c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d4cc:	d2e8      	bcs.n	800d4a0 <quorem+0xb0>
 800d4ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d4d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d4d6:	b922      	cbnz	r2, 800d4e2 <quorem+0xf2>
 800d4d8:	3b04      	subs	r3, #4
 800d4da:	429d      	cmp	r5, r3
 800d4dc:	461a      	mov	r2, r3
 800d4de:	d30a      	bcc.n	800d4f6 <quorem+0x106>
 800d4e0:	613c      	str	r4, [r7, #16]
 800d4e2:	4630      	mov	r0, r6
 800d4e4:	b003      	add	sp, #12
 800d4e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4ea:	6812      	ldr	r2, [r2, #0]
 800d4ec:	3b04      	subs	r3, #4
 800d4ee:	2a00      	cmp	r2, #0
 800d4f0:	d1cc      	bne.n	800d48c <quorem+0x9c>
 800d4f2:	3c01      	subs	r4, #1
 800d4f4:	e7c7      	b.n	800d486 <quorem+0x96>
 800d4f6:	6812      	ldr	r2, [r2, #0]
 800d4f8:	3b04      	subs	r3, #4
 800d4fa:	2a00      	cmp	r2, #0
 800d4fc:	d1f0      	bne.n	800d4e0 <quorem+0xf0>
 800d4fe:	3c01      	subs	r4, #1
 800d500:	e7eb      	b.n	800d4da <quorem+0xea>
 800d502:	2000      	movs	r0, #0
 800d504:	e7ee      	b.n	800d4e4 <quorem+0xf4>
	...

0800d508 <_dtoa_r>:
 800d508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d50c:	ec59 8b10 	vmov	r8, r9, d0
 800d510:	b095      	sub	sp, #84	; 0x54
 800d512:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d514:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800d516:	9107      	str	r1, [sp, #28]
 800d518:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d51c:	4606      	mov	r6, r0
 800d51e:	9209      	str	r2, [sp, #36]	; 0x24
 800d520:	9310      	str	r3, [sp, #64]	; 0x40
 800d522:	b975      	cbnz	r5, 800d542 <_dtoa_r+0x3a>
 800d524:	2010      	movs	r0, #16
 800d526:	f000 ff95 	bl	800e454 <malloc>
 800d52a:	4602      	mov	r2, r0
 800d52c:	6270      	str	r0, [r6, #36]	; 0x24
 800d52e:	b920      	cbnz	r0, 800d53a <_dtoa_r+0x32>
 800d530:	4bab      	ldr	r3, [pc, #684]	; (800d7e0 <_dtoa_r+0x2d8>)
 800d532:	21ea      	movs	r1, #234	; 0xea
 800d534:	48ab      	ldr	r0, [pc, #684]	; (800d7e4 <_dtoa_r+0x2dc>)
 800d536:	f001 fee9 	bl	800f30c <__assert_func>
 800d53a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d53e:	6005      	str	r5, [r0, #0]
 800d540:	60c5      	str	r5, [r0, #12]
 800d542:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d544:	6819      	ldr	r1, [r3, #0]
 800d546:	b151      	cbz	r1, 800d55e <_dtoa_r+0x56>
 800d548:	685a      	ldr	r2, [r3, #4]
 800d54a:	604a      	str	r2, [r1, #4]
 800d54c:	2301      	movs	r3, #1
 800d54e:	4093      	lsls	r3, r2
 800d550:	608b      	str	r3, [r1, #8]
 800d552:	4630      	mov	r0, r6
 800d554:	f000 ffc6 	bl	800e4e4 <_Bfree>
 800d558:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d55a:	2200      	movs	r2, #0
 800d55c:	601a      	str	r2, [r3, #0]
 800d55e:	f1b9 0300 	subs.w	r3, r9, #0
 800d562:	bfbb      	ittet	lt
 800d564:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d568:	9303      	strlt	r3, [sp, #12]
 800d56a:	2300      	movge	r3, #0
 800d56c:	2201      	movlt	r2, #1
 800d56e:	bfac      	ite	ge
 800d570:	6023      	strge	r3, [r4, #0]
 800d572:	6022      	strlt	r2, [r4, #0]
 800d574:	4b9c      	ldr	r3, [pc, #624]	; (800d7e8 <_dtoa_r+0x2e0>)
 800d576:	9c03      	ldr	r4, [sp, #12]
 800d578:	43a3      	bics	r3, r4
 800d57a:	d11a      	bne.n	800d5b2 <_dtoa_r+0xaa>
 800d57c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d57e:	f242 730f 	movw	r3, #9999	; 0x270f
 800d582:	6013      	str	r3, [r2, #0]
 800d584:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800d588:	ea53 0308 	orrs.w	r3, r3, r8
 800d58c:	f000 8512 	beq.w	800dfb4 <_dtoa_r+0xaac>
 800d590:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d592:	b953      	cbnz	r3, 800d5aa <_dtoa_r+0xa2>
 800d594:	4b95      	ldr	r3, [pc, #596]	; (800d7ec <_dtoa_r+0x2e4>)
 800d596:	e01f      	b.n	800d5d8 <_dtoa_r+0xd0>
 800d598:	4b95      	ldr	r3, [pc, #596]	; (800d7f0 <_dtoa_r+0x2e8>)
 800d59a:	9300      	str	r3, [sp, #0]
 800d59c:	3308      	adds	r3, #8
 800d59e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d5a0:	6013      	str	r3, [r2, #0]
 800d5a2:	9800      	ldr	r0, [sp, #0]
 800d5a4:	b015      	add	sp, #84	; 0x54
 800d5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5aa:	4b90      	ldr	r3, [pc, #576]	; (800d7ec <_dtoa_r+0x2e4>)
 800d5ac:	9300      	str	r3, [sp, #0]
 800d5ae:	3303      	adds	r3, #3
 800d5b0:	e7f5      	b.n	800d59e <_dtoa_r+0x96>
 800d5b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d5b6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d5ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5be:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d5c2:	d10b      	bne.n	800d5dc <_dtoa_r+0xd4>
 800d5c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	6013      	str	r3, [r2, #0]
 800d5ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	f000 84ee 	beq.w	800dfae <_dtoa_r+0xaa6>
 800d5d2:	4888      	ldr	r0, [pc, #544]	; (800d7f4 <_dtoa_r+0x2ec>)
 800d5d4:	6018      	str	r0, [r3, #0]
 800d5d6:	1e43      	subs	r3, r0, #1
 800d5d8:	9300      	str	r3, [sp, #0]
 800d5da:	e7e2      	b.n	800d5a2 <_dtoa_r+0x9a>
 800d5dc:	a913      	add	r1, sp, #76	; 0x4c
 800d5de:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d5e2:	aa12      	add	r2, sp, #72	; 0x48
 800d5e4:	4630      	mov	r0, r6
 800d5e6:	f001 fa5f 	bl	800eaa8 <__d2b>
 800d5ea:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800d5ee:	4605      	mov	r5, r0
 800d5f0:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d5f2:	2900      	cmp	r1, #0
 800d5f4:	d047      	beq.n	800d686 <_dtoa_r+0x17e>
 800d5f6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d5f8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d5fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d600:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800d604:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d608:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d60c:	2400      	movs	r4, #0
 800d60e:	ec43 2b16 	vmov	d6, r2, r3
 800d612:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800d616:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800d7c8 <_dtoa_r+0x2c0>
 800d61a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d61e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800d7d0 <_dtoa_r+0x2c8>
 800d622:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d626:	eeb0 7b46 	vmov.f64	d7, d6
 800d62a:	ee06 1a90 	vmov	s13, r1
 800d62e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800d632:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800d7d8 <_dtoa_r+0x2d0>
 800d636:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d63a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d63e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d646:	ee16 ba90 	vmov	fp, s13
 800d64a:	9411      	str	r4, [sp, #68]	; 0x44
 800d64c:	d508      	bpl.n	800d660 <_dtoa_r+0x158>
 800d64e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d652:	eeb4 6b47 	vcmp.f64	d6, d7
 800d656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d65a:	bf18      	it	ne
 800d65c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800d660:	f1bb 0f16 	cmp.w	fp, #22
 800d664:	d832      	bhi.n	800d6cc <_dtoa_r+0x1c4>
 800d666:	4b64      	ldr	r3, [pc, #400]	; (800d7f8 <_dtoa_r+0x2f0>)
 800d668:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d66c:	ed93 7b00 	vldr	d7, [r3]
 800d670:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800d674:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d67c:	d501      	bpl.n	800d682 <_dtoa_r+0x17a>
 800d67e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d682:	2300      	movs	r3, #0
 800d684:	e023      	b.n	800d6ce <_dtoa_r+0x1c6>
 800d686:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d688:	4401      	add	r1, r0
 800d68a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800d68e:	2b20      	cmp	r3, #32
 800d690:	bfc3      	ittte	gt
 800d692:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d696:	fa04 f303 	lslgt.w	r3, r4, r3
 800d69a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800d69e:	f1c3 0320 	rsble	r3, r3, #32
 800d6a2:	bfc6      	itte	gt
 800d6a4:	fa28 f804 	lsrgt.w	r8, r8, r4
 800d6a8:	ea43 0308 	orrgt.w	r3, r3, r8
 800d6ac:	fa08 f303 	lslle.w	r3, r8, r3
 800d6b0:	ee07 3a90 	vmov	s15, r3
 800d6b4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d6b8:	3901      	subs	r1, #1
 800d6ba:	ed8d 7b00 	vstr	d7, [sp]
 800d6be:	9c01      	ldr	r4, [sp, #4]
 800d6c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d6c4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800d6c8:	2401      	movs	r4, #1
 800d6ca:	e7a0      	b.n	800d60e <_dtoa_r+0x106>
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800d6d0:	1a43      	subs	r3, r0, r1
 800d6d2:	1e5a      	subs	r2, r3, #1
 800d6d4:	bf45      	ittet	mi
 800d6d6:	f1c3 0301 	rsbmi	r3, r3, #1
 800d6da:	9305      	strmi	r3, [sp, #20]
 800d6dc:	2300      	movpl	r3, #0
 800d6de:	2300      	movmi	r3, #0
 800d6e0:	9206      	str	r2, [sp, #24]
 800d6e2:	bf54      	ite	pl
 800d6e4:	9305      	strpl	r3, [sp, #20]
 800d6e6:	9306      	strmi	r3, [sp, #24]
 800d6e8:	f1bb 0f00 	cmp.w	fp, #0
 800d6ec:	db18      	blt.n	800d720 <_dtoa_r+0x218>
 800d6ee:	9b06      	ldr	r3, [sp, #24]
 800d6f0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800d6f4:	445b      	add	r3, fp
 800d6f6:	9306      	str	r3, [sp, #24]
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	9a07      	ldr	r2, [sp, #28]
 800d6fc:	2a09      	cmp	r2, #9
 800d6fe:	d849      	bhi.n	800d794 <_dtoa_r+0x28c>
 800d700:	2a05      	cmp	r2, #5
 800d702:	bfc4      	itt	gt
 800d704:	3a04      	subgt	r2, #4
 800d706:	9207      	strgt	r2, [sp, #28]
 800d708:	9a07      	ldr	r2, [sp, #28]
 800d70a:	f1a2 0202 	sub.w	r2, r2, #2
 800d70e:	bfcc      	ite	gt
 800d710:	2400      	movgt	r4, #0
 800d712:	2401      	movle	r4, #1
 800d714:	2a03      	cmp	r2, #3
 800d716:	d848      	bhi.n	800d7aa <_dtoa_r+0x2a2>
 800d718:	e8df f002 	tbb	[pc, r2]
 800d71c:	3a2c2e0b 	.word	0x3a2c2e0b
 800d720:	9b05      	ldr	r3, [sp, #20]
 800d722:	2200      	movs	r2, #0
 800d724:	eba3 030b 	sub.w	r3, r3, fp
 800d728:	9305      	str	r3, [sp, #20]
 800d72a:	920e      	str	r2, [sp, #56]	; 0x38
 800d72c:	f1cb 0300 	rsb	r3, fp, #0
 800d730:	e7e3      	b.n	800d6fa <_dtoa_r+0x1f2>
 800d732:	2200      	movs	r2, #0
 800d734:	9208      	str	r2, [sp, #32]
 800d736:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d738:	2a00      	cmp	r2, #0
 800d73a:	dc39      	bgt.n	800d7b0 <_dtoa_r+0x2a8>
 800d73c:	f04f 0a01 	mov.w	sl, #1
 800d740:	46d1      	mov	r9, sl
 800d742:	4652      	mov	r2, sl
 800d744:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800d748:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800d74a:	2100      	movs	r1, #0
 800d74c:	6079      	str	r1, [r7, #4]
 800d74e:	2004      	movs	r0, #4
 800d750:	f100 0c14 	add.w	ip, r0, #20
 800d754:	4594      	cmp	ip, r2
 800d756:	6879      	ldr	r1, [r7, #4]
 800d758:	d92f      	bls.n	800d7ba <_dtoa_r+0x2b2>
 800d75a:	4630      	mov	r0, r6
 800d75c:	930c      	str	r3, [sp, #48]	; 0x30
 800d75e:	f000 fe81 	bl	800e464 <_Balloc>
 800d762:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d764:	9000      	str	r0, [sp, #0]
 800d766:	4602      	mov	r2, r0
 800d768:	2800      	cmp	r0, #0
 800d76a:	d149      	bne.n	800d800 <_dtoa_r+0x2f8>
 800d76c:	4b23      	ldr	r3, [pc, #140]	; (800d7fc <_dtoa_r+0x2f4>)
 800d76e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d772:	e6df      	b.n	800d534 <_dtoa_r+0x2c>
 800d774:	2201      	movs	r2, #1
 800d776:	e7dd      	b.n	800d734 <_dtoa_r+0x22c>
 800d778:	2200      	movs	r2, #0
 800d77a:	9208      	str	r2, [sp, #32]
 800d77c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d77e:	eb0b 0a02 	add.w	sl, fp, r2
 800d782:	f10a 0901 	add.w	r9, sl, #1
 800d786:	464a      	mov	r2, r9
 800d788:	2a01      	cmp	r2, #1
 800d78a:	bfb8      	it	lt
 800d78c:	2201      	movlt	r2, #1
 800d78e:	e7db      	b.n	800d748 <_dtoa_r+0x240>
 800d790:	2201      	movs	r2, #1
 800d792:	e7f2      	b.n	800d77a <_dtoa_r+0x272>
 800d794:	2401      	movs	r4, #1
 800d796:	2200      	movs	r2, #0
 800d798:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800d79c:	f04f 3aff 	mov.w	sl, #4294967295
 800d7a0:	2100      	movs	r1, #0
 800d7a2:	46d1      	mov	r9, sl
 800d7a4:	2212      	movs	r2, #18
 800d7a6:	9109      	str	r1, [sp, #36]	; 0x24
 800d7a8:	e7ce      	b.n	800d748 <_dtoa_r+0x240>
 800d7aa:	2201      	movs	r2, #1
 800d7ac:	9208      	str	r2, [sp, #32]
 800d7ae:	e7f5      	b.n	800d79c <_dtoa_r+0x294>
 800d7b0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800d7b4:	46d1      	mov	r9, sl
 800d7b6:	4652      	mov	r2, sl
 800d7b8:	e7c6      	b.n	800d748 <_dtoa_r+0x240>
 800d7ba:	3101      	adds	r1, #1
 800d7bc:	6079      	str	r1, [r7, #4]
 800d7be:	0040      	lsls	r0, r0, #1
 800d7c0:	e7c6      	b.n	800d750 <_dtoa_r+0x248>
 800d7c2:	bf00      	nop
 800d7c4:	f3af 8000 	nop.w
 800d7c8:	636f4361 	.word	0x636f4361
 800d7cc:	3fd287a7 	.word	0x3fd287a7
 800d7d0:	8b60c8b3 	.word	0x8b60c8b3
 800d7d4:	3fc68a28 	.word	0x3fc68a28
 800d7d8:	509f79fb 	.word	0x509f79fb
 800d7dc:	3fd34413 	.word	0x3fd34413
 800d7e0:	0800f8d5 	.word	0x0800f8d5
 800d7e4:	0800f8ec 	.word	0x0800f8ec
 800d7e8:	7ff00000 	.word	0x7ff00000
 800d7ec:	0800f8d1 	.word	0x0800f8d1
 800d7f0:	0800f8c8 	.word	0x0800f8c8
 800d7f4:	0800f8a5 	.word	0x0800f8a5
 800d7f8:	0800fa48 	.word	0x0800fa48
 800d7fc:	0800f94b 	.word	0x0800f94b
 800d800:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800d802:	9900      	ldr	r1, [sp, #0]
 800d804:	6011      	str	r1, [r2, #0]
 800d806:	f1b9 0f0e 	cmp.w	r9, #14
 800d80a:	d872      	bhi.n	800d8f2 <_dtoa_r+0x3ea>
 800d80c:	2c00      	cmp	r4, #0
 800d80e:	d070      	beq.n	800d8f2 <_dtoa_r+0x3ea>
 800d810:	f1bb 0f00 	cmp.w	fp, #0
 800d814:	f340 80a6 	ble.w	800d964 <_dtoa_r+0x45c>
 800d818:	49ca      	ldr	r1, [pc, #808]	; (800db44 <_dtoa_r+0x63c>)
 800d81a:	f00b 020f 	and.w	r2, fp, #15
 800d81e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800d822:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d826:	ed92 7b00 	vldr	d7, [r2]
 800d82a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800d82e:	f000 808d 	beq.w	800d94c <_dtoa_r+0x444>
 800d832:	4ac5      	ldr	r2, [pc, #788]	; (800db48 <_dtoa_r+0x640>)
 800d834:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800d838:	ed92 6b08 	vldr	d6, [r2, #32]
 800d83c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800d840:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d844:	f001 010f 	and.w	r1, r1, #15
 800d848:	2203      	movs	r2, #3
 800d84a:	48bf      	ldr	r0, [pc, #764]	; (800db48 <_dtoa_r+0x640>)
 800d84c:	2900      	cmp	r1, #0
 800d84e:	d17f      	bne.n	800d950 <_dtoa_r+0x448>
 800d850:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d854:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d858:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d85c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d85e:	2900      	cmp	r1, #0
 800d860:	f000 80b2 	beq.w	800d9c8 <_dtoa_r+0x4c0>
 800d864:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d868:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d86c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d874:	f140 80a8 	bpl.w	800d9c8 <_dtoa_r+0x4c0>
 800d878:	f1b9 0f00 	cmp.w	r9, #0
 800d87c:	f000 80a4 	beq.w	800d9c8 <_dtoa_r+0x4c0>
 800d880:	f1ba 0f00 	cmp.w	sl, #0
 800d884:	dd31      	ble.n	800d8ea <_dtoa_r+0x3e2>
 800d886:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800d88a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d88e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d892:	f10b 37ff 	add.w	r7, fp, #4294967295
 800d896:	3201      	adds	r2, #1
 800d898:	4650      	mov	r0, sl
 800d89a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d89e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800d8a2:	ee07 2a90 	vmov	s15, r2
 800d8a6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d8aa:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d8ae:	ed8d 5b02 	vstr	d5, [sp, #8]
 800d8b2:	9c03      	ldr	r4, [sp, #12]
 800d8b4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800d8b8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800d8bc:	2800      	cmp	r0, #0
 800d8be:	f040 8086 	bne.w	800d9ce <_dtoa_r+0x4c6>
 800d8c2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d8c6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d8ca:	ec42 1b17 	vmov	d7, r1, r2
 800d8ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d8d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8d6:	f300 8272 	bgt.w	800ddbe <_dtoa_r+0x8b6>
 800d8da:	eeb1 7b47 	vneg.f64	d7, d7
 800d8de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d8e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8e6:	f100 8267 	bmi.w	800ddb8 <_dtoa_r+0x8b0>
 800d8ea:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800d8ee:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800d8f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d8f4:	2a00      	cmp	r2, #0
 800d8f6:	f2c0 8129 	blt.w	800db4c <_dtoa_r+0x644>
 800d8fa:	f1bb 0f0e 	cmp.w	fp, #14
 800d8fe:	f300 8125 	bgt.w	800db4c <_dtoa_r+0x644>
 800d902:	4b90      	ldr	r3, [pc, #576]	; (800db44 <_dtoa_r+0x63c>)
 800d904:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d908:	ed93 6b00 	vldr	d6, [r3]
 800d90c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d90e:	2b00      	cmp	r3, #0
 800d910:	f280 80c3 	bge.w	800da9a <_dtoa_r+0x592>
 800d914:	f1b9 0f00 	cmp.w	r9, #0
 800d918:	f300 80bf 	bgt.w	800da9a <_dtoa_r+0x592>
 800d91c:	f040 824c 	bne.w	800ddb8 <_dtoa_r+0x8b0>
 800d920:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d924:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d928:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d92c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d934:	464c      	mov	r4, r9
 800d936:	464f      	mov	r7, r9
 800d938:	f280 8222 	bge.w	800dd80 <_dtoa_r+0x878>
 800d93c:	f8dd 8000 	ldr.w	r8, [sp]
 800d940:	2331      	movs	r3, #49	; 0x31
 800d942:	f808 3b01 	strb.w	r3, [r8], #1
 800d946:	f10b 0b01 	add.w	fp, fp, #1
 800d94a:	e21e      	b.n	800dd8a <_dtoa_r+0x882>
 800d94c:	2202      	movs	r2, #2
 800d94e:	e77c      	b.n	800d84a <_dtoa_r+0x342>
 800d950:	07cc      	lsls	r4, r1, #31
 800d952:	d504      	bpl.n	800d95e <_dtoa_r+0x456>
 800d954:	ed90 6b00 	vldr	d6, [r0]
 800d958:	3201      	adds	r2, #1
 800d95a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d95e:	1049      	asrs	r1, r1, #1
 800d960:	3008      	adds	r0, #8
 800d962:	e773      	b.n	800d84c <_dtoa_r+0x344>
 800d964:	d02e      	beq.n	800d9c4 <_dtoa_r+0x4bc>
 800d966:	f1cb 0100 	rsb	r1, fp, #0
 800d96a:	4a76      	ldr	r2, [pc, #472]	; (800db44 <_dtoa_r+0x63c>)
 800d96c:	f001 000f 	and.w	r0, r1, #15
 800d970:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d974:	ed92 7b00 	vldr	d7, [r2]
 800d978:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800d97c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d980:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d984:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800d988:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800d98c:	486e      	ldr	r0, [pc, #440]	; (800db48 <_dtoa_r+0x640>)
 800d98e:	1109      	asrs	r1, r1, #4
 800d990:	2400      	movs	r4, #0
 800d992:	2202      	movs	r2, #2
 800d994:	b939      	cbnz	r1, 800d9a6 <_dtoa_r+0x49e>
 800d996:	2c00      	cmp	r4, #0
 800d998:	f43f af60 	beq.w	800d85c <_dtoa_r+0x354>
 800d99c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d9a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d9a4:	e75a      	b.n	800d85c <_dtoa_r+0x354>
 800d9a6:	07cf      	lsls	r7, r1, #31
 800d9a8:	d509      	bpl.n	800d9be <_dtoa_r+0x4b6>
 800d9aa:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800d9ae:	ed90 7b00 	vldr	d7, [r0]
 800d9b2:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d9b6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d9ba:	3201      	adds	r2, #1
 800d9bc:	2401      	movs	r4, #1
 800d9be:	1049      	asrs	r1, r1, #1
 800d9c0:	3008      	adds	r0, #8
 800d9c2:	e7e7      	b.n	800d994 <_dtoa_r+0x48c>
 800d9c4:	2202      	movs	r2, #2
 800d9c6:	e749      	b.n	800d85c <_dtoa_r+0x354>
 800d9c8:	465f      	mov	r7, fp
 800d9ca:	4648      	mov	r0, r9
 800d9cc:	e765      	b.n	800d89a <_dtoa_r+0x392>
 800d9ce:	ec42 1b17 	vmov	d7, r1, r2
 800d9d2:	4a5c      	ldr	r2, [pc, #368]	; (800db44 <_dtoa_r+0x63c>)
 800d9d4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d9d8:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d9dc:	9a00      	ldr	r2, [sp, #0]
 800d9de:	1814      	adds	r4, r2, r0
 800d9e0:	9a08      	ldr	r2, [sp, #32]
 800d9e2:	b352      	cbz	r2, 800da3a <_dtoa_r+0x532>
 800d9e4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800d9e8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800d9ec:	f8dd 8000 	ldr.w	r8, [sp]
 800d9f0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d9f4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d9f8:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d9fc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800da00:	ee14 2a90 	vmov	r2, s9
 800da04:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800da08:	3230      	adds	r2, #48	; 0x30
 800da0a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800da0e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800da12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da16:	f808 2b01 	strb.w	r2, [r8], #1
 800da1a:	d439      	bmi.n	800da90 <_dtoa_r+0x588>
 800da1c:	ee32 5b46 	vsub.f64	d5, d2, d6
 800da20:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800da24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da28:	d472      	bmi.n	800db10 <_dtoa_r+0x608>
 800da2a:	45a0      	cmp	r8, r4
 800da2c:	f43f af5d 	beq.w	800d8ea <_dtoa_r+0x3e2>
 800da30:	ee27 7b03 	vmul.f64	d7, d7, d3
 800da34:	ee26 6b03 	vmul.f64	d6, d6, d3
 800da38:	e7e0      	b.n	800d9fc <_dtoa_r+0x4f4>
 800da3a:	f8dd 8000 	ldr.w	r8, [sp]
 800da3e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800da42:	4621      	mov	r1, r4
 800da44:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800da48:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800da4c:	ee14 2a90 	vmov	r2, s9
 800da50:	3230      	adds	r2, #48	; 0x30
 800da52:	f808 2b01 	strb.w	r2, [r8], #1
 800da56:	45a0      	cmp	r8, r4
 800da58:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800da5c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800da60:	d118      	bne.n	800da94 <_dtoa_r+0x58c>
 800da62:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800da66:	ee37 4b05 	vadd.f64	d4, d7, d5
 800da6a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800da6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da72:	dc4d      	bgt.n	800db10 <_dtoa_r+0x608>
 800da74:	ee35 7b47 	vsub.f64	d7, d5, d7
 800da78:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800da7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da80:	f57f af33 	bpl.w	800d8ea <_dtoa_r+0x3e2>
 800da84:	4688      	mov	r8, r1
 800da86:	3901      	subs	r1, #1
 800da88:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800da8c:	2b30      	cmp	r3, #48	; 0x30
 800da8e:	d0f9      	beq.n	800da84 <_dtoa_r+0x57c>
 800da90:	46bb      	mov	fp, r7
 800da92:	e02a      	b.n	800daea <_dtoa_r+0x5e2>
 800da94:	ee26 6b03 	vmul.f64	d6, d6, d3
 800da98:	e7d6      	b.n	800da48 <_dtoa_r+0x540>
 800da9a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800da9e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800daa2:	f8dd 8000 	ldr.w	r8, [sp]
 800daa6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800daaa:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800daae:	ee15 3a10 	vmov	r3, s10
 800dab2:	3330      	adds	r3, #48	; 0x30
 800dab4:	f808 3b01 	strb.w	r3, [r8], #1
 800dab8:	9b00      	ldr	r3, [sp, #0]
 800daba:	eba8 0303 	sub.w	r3, r8, r3
 800dabe:	4599      	cmp	r9, r3
 800dac0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800dac4:	eea3 7b46 	vfms.f64	d7, d3, d6
 800dac8:	d133      	bne.n	800db32 <_dtoa_r+0x62a>
 800daca:	ee37 7b07 	vadd.f64	d7, d7, d7
 800dace:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800dad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dad6:	dc1a      	bgt.n	800db0e <_dtoa_r+0x606>
 800dad8:	eeb4 7b46 	vcmp.f64	d7, d6
 800dadc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dae0:	d103      	bne.n	800daea <_dtoa_r+0x5e2>
 800dae2:	ee15 3a10 	vmov	r3, s10
 800dae6:	07d9      	lsls	r1, r3, #31
 800dae8:	d411      	bmi.n	800db0e <_dtoa_r+0x606>
 800daea:	4629      	mov	r1, r5
 800daec:	4630      	mov	r0, r6
 800daee:	f000 fcf9 	bl	800e4e4 <_Bfree>
 800daf2:	2300      	movs	r3, #0
 800daf4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800daf6:	f888 3000 	strb.w	r3, [r8]
 800dafa:	f10b 0301 	add.w	r3, fp, #1
 800dafe:	6013      	str	r3, [r2, #0]
 800db00:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800db02:	2b00      	cmp	r3, #0
 800db04:	f43f ad4d 	beq.w	800d5a2 <_dtoa_r+0x9a>
 800db08:	f8c3 8000 	str.w	r8, [r3]
 800db0c:	e549      	b.n	800d5a2 <_dtoa_r+0x9a>
 800db0e:	465f      	mov	r7, fp
 800db10:	4643      	mov	r3, r8
 800db12:	4698      	mov	r8, r3
 800db14:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db18:	2a39      	cmp	r2, #57	; 0x39
 800db1a:	d106      	bne.n	800db2a <_dtoa_r+0x622>
 800db1c:	9a00      	ldr	r2, [sp, #0]
 800db1e:	429a      	cmp	r2, r3
 800db20:	d1f7      	bne.n	800db12 <_dtoa_r+0x60a>
 800db22:	9900      	ldr	r1, [sp, #0]
 800db24:	2230      	movs	r2, #48	; 0x30
 800db26:	3701      	adds	r7, #1
 800db28:	700a      	strb	r2, [r1, #0]
 800db2a:	781a      	ldrb	r2, [r3, #0]
 800db2c:	3201      	adds	r2, #1
 800db2e:	701a      	strb	r2, [r3, #0]
 800db30:	e7ae      	b.n	800da90 <_dtoa_r+0x588>
 800db32:	ee27 7b04 	vmul.f64	d7, d7, d4
 800db36:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800db3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db3e:	d1b2      	bne.n	800daa6 <_dtoa_r+0x59e>
 800db40:	e7d3      	b.n	800daea <_dtoa_r+0x5e2>
 800db42:	bf00      	nop
 800db44:	0800fa48 	.word	0x0800fa48
 800db48:	0800fa20 	.word	0x0800fa20
 800db4c:	9908      	ldr	r1, [sp, #32]
 800db4e:	2900      	cmp	r1, #0
 800db50:	f000 80d1 	beq.w	800dcf6 <_dtoa_r+0x7ee>
 800db54:	9907      	ldr	r1, [sp, #28]
 800db56:	2901      	cmp	r1, #1
 800db58:	f300 80b4 	bgt.w	800dcc4 <_dtoa_r+0x7bc>
 800db5c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800db5e:	2900      	cmp	r1, #0
 800db60:	f000 80ac 	beq.w	800dcbc <_dtoa_r+0x7b4>
 800db64:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800db68:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800db6c:	461c      	mov	r4, r3
 800db6e:	930a      	str	r3, [sp, #40]	; 0x28
 800db70:	9b05      	ldr	r3, [sp, #20]
 800db72:	4413      	add	r3, r2
 800db74:	9305      	str	r3, [sp, #20]
 800db76:	9b06      	ldr	r3, [sp, #24]
 800db78:	2101      	movs	r1, #1
 800db7a:	4413      	add	r3, r2
 800db7c:	4630      	mov	r0, r6
 800db7e:	9306      	str	r3, [sp, #24]
 800db80:	f000 fd6c 	bl	800e65c <__i2b>
 800db84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db86:	4607      	mov	r7, r0
 800db88:	f1b8 0f00 	cmp.w	r8, #0
 800db8c:	dd0d      	ble.n	800dbaa <_dtoa_r+0x6a2>
 800db8e:	9a06      	ldr	r2, [sp, #24]
 800db90:	2a00      	cmp	r2, #0
 800db92:	dd0a      	ble.n	800dbaa <_dtoa_r+0x6a2>
 800db94:	4542      	cmp	r2, r8
 800db96:	9905      	ldr	r1, [sp, #20]
 800db98:	bfa8      	it	ge
 800db9a:	4642      	movge	r2, r8
 800db9c:	1a89      	subs	r1, r1, r2
 800db9e:	9105      	str	r1, [sp, #20]
 800dba0:	9906      	ldr	r1, [sp, #24]
 800dba2:	eba8 0802 	sub.w	r8, r8, r2
 800dba6:	1a8a      	subs	r2, r1, r2
 800dba8:	9206      	str	r2, [sp, #24]
 800dbaa:	b303      	cbz	r3, 800dbee <_dtoa_r+0x6e6>
 800dbac:	9a08      	ldr	r2, [sp, #32]
 800dbae:	2a00      	cmp	r2, #0
 800dbb0:	f000 80a6 	beq.w	800dd00 <_dtoa_r+0x7f8>
 800dbb4:	2c00      	cmp	r4, #0
 800dbb6:	dd13      	ble.n	800dbe0 <_dtoa_r+0x6d8>
 800dbb8:	4639      	mov	r1, r7
 800dbba:	4622      	mov	r2, r4
 800dbbc:	4630      	mov	r0, r6
 800dbbe:	930c      	str	r3, [sp, #48]	; 0x30
 800dbc0:	f000 fe08 	bl	800e7d4 <__pow5mult>
 800dbc4:	462a      	mov	r2, r5
 800dbc6:	4601      	mov	r1, r0
 800dbc8:	4607      	mov	r7, r0
 800dbca:	4630      	mov	r0, r6
 800dbcc:	f000 fd5c 	bl	800e688 <__multiply>
 800dbd0:	4629      	mov	r1, r5
 800dbd2:	900a      	str	r0, [sp, #40]	; 0x28
 800dbd4:	4630      	mov	r0, r6
 800dbd6:	f000 fc85 	bl	800e4e4 <_Bfree>
 800dbda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dbdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dbde:	4615      	mov	r5, r2
 800dbe0:	1b1a      	subs	r2, r3, r4
 800dbe2:	d004      	beq.n	800dbee <_dtoa_r+0x6e6>
 800dbe4:	4629      	mov	r1, r5
 800dbe6:	4630      	mov	r0, r6
 800dbe8:	f000 fdf4 	bl	800e7d4 <__pow5mult>
 800dbec:	4605      	mov	r5, r0
 800dbee:	2101      	movs	r1, #1
 800dbf0:	4630      	mov	r0, r6
 800dbf2:	f000 fd33 	bl	800e65c <__i2b>
 800dbf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	4604      	mov	r4, r0
 800dbfc:	f340 8082 	ble.w	800dd04 <_dtoa_r+0x7fc>
 800dc00:	461a      	mov	r2, r3
 800dc02:	4601      	mov	r1, r0
 800dc04:	4630      	mov	r0, r6
 800dc06:	f000 fde5 	bl	800e7d4 <__pow5mult>
 800dc0a:	9b07      	ldr	r3, [sp, #28]
 800dc0c:	2b01      	cmp	r3, #1
 800dc0e:	4604      	mov	r4, r0
 800dc10:	dd7b      	ble.n	800dd0a <_dtoa_r+0x802>
 800dc12:	2300      	movs	r3, #0
 800dc14:	930a      	str	r3, [sp, #40]	; 0x28
 800dc16:	6922      	ldr	r2, [r4, #16]
 800dc18:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800dc1c:	6910      	ldr	r0, [r2, #16]
 800dc1e:	f000 fccd 	bl	800e5bc <__hi0bits>
 800dc22:	f1c0 0020 	rsb	r0, r0, #32
 800dc26:	9b06      	ldr	r3, [sp, #24]
 800dc28:	4418      	add	r0, r3
 800dc2a:	f010 001f 	ands.w	r0, r0, #31
 800dc2e:	f000 808d 	beq.w	800dd4c <_dtoa_r+0x844>
 800dc32:	f1c0 0220 	rsb	r2, r0, #32
 800dc36:	2a04      	cmp	r2, #4
 800dc38:	f340 8086 	ble.w	800dd48 <_dtoa_r+0x840>
 800dc3c:	f1c0 001c 	rsb	r0, r0, #28
 800dc40:	9b05      	ldr	r3, [sp, #20]
 800dc42:	4403      	add	r3, r0
 800dc44:	9305      	str	r3, [sp, #20]
 800dc46:	9b06      	ldr	r3, [sp, #24]
 800dc48:	4403      	add	r3, r0
 800dc4a:	4480      	add	r8, r0
 800dc4c:	9306      	str	r3, [sp, #24]
 800dc4e:	9b05      	ldr	r3, [sp, #20]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	dd05      	ble.n	800dc60 <_dtoa_r+0x758>
 800dc54:	4629      	mov	r1, r5
 800dc56:	461a      	mov	r2, r3
 800dc58:	4630      	mov	r0, r6
 800dc5a:	f000 fe15 	bl	800e888 <__lshift>
 800dc5e:	4605      	mov	r5, r0
 800dc60:	9b06      	ldr	r3, [sp, #24]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	dd05      	ble.n	800dc72 <_dtoa_r+0x76a>
 800dc66:	4621      	mov	r1, r4
 800dc68:	461a      	mov	r2, r3
 800dc6a:	4630      	mov	r0, r6
 800dc6c:	f000 fe0c 	bl	800e888 <__lshift>
 800dc70:	4604      	mov	r4, r0
 800dc72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d06b      	beq.n	800dd50 <_dtoa_r+0x848>
 800dc78:	4621      	mov	r1, r4
 800dc7a:	4628      	mov	r0, r5
 800dc7c:	f000 fe70 	bl	800e960 <__mcmp>
 800dc80:	2800      	cmp	r0, #0
 800dc82:	da65      	bge.n	800dd50 <_dtoa_r+0x848>
 800dc84:	2300      	movs	r3, #0
 800dc86:	4629      	mov	r1, r5
 800dc88:	220a      	movs	r2, #10
 800dc8a:	4630      	mov	r0, r6
 800dc8c:	f000 fc4c 	bl	800e528 <__multadd>
 800dc90:	9b08      	ldr	r3, [sp, #32]
 800dc92:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dc96:	4605      	mov	r5, r0
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	f000 8192 	beq.w	800dfc2 <_dtoa_r+0xaba>
 800dc9e:	4639      	mov	r1, r7
 800dca0:	2300      	movs	r3, #0
 800dca2:	220a      	movs	r2, #10
 800dca4:	4630      	mov	r0, r6
 800dca6:	f000 fc3f 	bl	800e528 <__multadd>
 800dcaa:	f1ba 0f00 	cmp.w	sl, #0
 800dcae:	4607      	mov	r7, r0
 800dcb0:	f300 808e 	bgt.w	800ddd0 <_dtoa_r+0x8c8>
 800dcb4:	9b07      	ldr	r3, [sp, #28]
 800dcb6:	2b02      	cmp	r3, #2
 800dcb8:	dc51      	bgt.n	800dd5e <_dtoa_r+0x856>
 800dcba:	e089      	b.n	800ddd0 <_dtoa_r+0x8c8>
 800dcbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dcbe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800dcc2:	e751      	b.n	800db68 <_dtoa_r+0x660>
 800dcc4:	f109 34ff 	add.w	r4, r9, #4294967295
 800dcc8:	42a3      	cmp	r3, r4
 800dcca:	bfbf      	itttt	lt
 800dccc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800dcce:	1ae3      	sublt	r3, r4, r3
 800dcd0:	18d2      	addlt	r2, r2, r3
 800dcd2:	4613      	movlt	r3, r2
 800dcd4:	bfb7      	itett	lt
 800dcd6:	930e      	strlt	r3, [sp, #56]	; 0x38
 800dcd8:	1b1c      	subge	r4, r3, r4
 800dcda:	4623      	movlt	r3, r4
 800dcdc:	2400      	movlt	r4, #0
 800dcde:	f1b9 0f00 	cmp.w	r9, #0
 800dce2:	bfb5      	itete	lt
 800dce4:	9a05      	ldrlt	r2, [sp, #20]
 800dce6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800dcea:	eba2 0809 	sublt.w	r8, r2, r9
 800dcee:	464a      	movge	r2, r9
 800dcf0:	bfb8      	it	lt
 800dcf2:	2200      	movlt	r2, #0
 800dcf4:	e73b      	b.n	800db6e <_dtoa_r+0x666>
 800dcf6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800dcfa:	9f08      	ldr	r7, [sp, #32]
 800dcfc:	461c      	mov	r4, r3
 800dcfe:	e743      	b.n	800db88 <_dtoa_r+0x680>
 800dd00:	461a      	mov	r2, r3
 800dd02:	e76f      	b.n	800dbe4 <_dtoa_r+0x6dc>
 800dd04:	9b07      	ldr	r3, [sp, #28]
 800dd06:	2b01      	cmp	r3, #1
 800dd08:	dc18      	bgt.n	800dd3c <_dtoa_r+0x834>
 800dd0a:	9b02      	ldr	r3, [sp, #8]
 800dd0c:	b9b3      	cbnz	r3, 800dd3c <_dtoa_r+0x834>
 800dd0e:	9b03      	ldr	r3, [sp, #12]
 800dd10:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800dd14:	b9a2      	cbnz	r2, 800dd40 <_dtoa_r+0x838>
 800dd16:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800dd1a:	0d12      	lsrs	r2, r2, #20
 800dd1c:	0512      	lsls	r2, r2, #20
 800dd1e:	b18a      	cbz	r2, 800dd44 <_dtoa_r+0x83c>
 800dd20:	9b05      	ldr	r3, [sp, #20]
 800dd22:	3301      	adds	r3, #1
 800dd24:	9305      	str	r3, [sp, #20]
 800dd26:	9b06      	ldr	r3, [sp, #24]
 800dd28:	3301      	adds	r3, #1
 800dd2a:	9306      	str	r3, [sp, #24]
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	930a      	str	r3, [sp, #40]	; 0x28
 800dd30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	f47f af6f 	bne.w	800dc16 <_dtoa_r+0x70e>
 800dd38:	2001      	movs	r0, #1
 800dd3a:	e774      	b.n	800dc26 <_dtoa_r+0x71e>
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	e7f6      	b.n	800dd2e <_dtoa_r+0x826>
 800dd40:	9b02      	ldr	r3, [sp, #8]
 800dd42:	e7f4      	b.n	800dd2e <_dtoa_r+0x826>
 800dd44:	920a      	str	r2, [sp, #40]	; 0x28
 800dd46:	e7f3      	b.n	800dd30 <_dtoa_r+0x828>
 800dd48:	d081      	beq.n	800dc4e <_dtoa_r+0x746>
 800dd4a:	4610      	mov	r0, r2
 800dd4c:	301c      	adds	r0, #28
 800dd4e:	e777      	b.n	800dc40 <_dtoa_r+0x738>
 800dd50:	f1b9 0f00 	cmp.w	r9, #0
 800dd54:	dc37      	bgt.n	800ddc6 <_dtoa_r+0x8be>
 800dd56:	9b07      	ldr	r3, [sp, #28]
 800dd58:	2b02      	cmp	r3, #2
 800dd5a:	dd34      	ble.n	800ddc6 <_dtoa_r+0x8be>
 800dd5c:	46ca      	mov	sl, r9
 800dd5e:	f1ba 0f00 	cmp.w	sl, #0
 800dd62:	d10d      	bne.n	800dd80 <_dtoa_r+0x878>
 800dd64:	4621      	mov	r1, r4
 800dd66:	4653      	mov	r3, sl
 800dd68:	2205      	movs	r2, #5
 800dd6a:	4630      	mov	r0, r6
 800dd6c:	f000 fbdc 	bl	800e528 <__multadd>
 800dd70:	4601      	mov	r1, r0
 800dd72:	4604      	mov	r4, r0
 800dd74:	4628      	mov	r0, r5
 800dd76:	f000 fdf3 	bl	800e960 <__mcmp>
 800dd7a:	2800      	cmp	r0, #0
 800dd7c:	f73f adde 	bgt.w	800d93c <_dtoa_r+0x434>
 800dd80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd82:	f8dd 8000 	ldr.w	r8, [sp]
 800dd86:	ea6f 0b03 	mvn.w	fp, r3
 800dd8a:	f04f 0900 	mov.w	r9, #0
 800dd8e:	4621      	mov	r1, r4
 800dd90:	4630      	mov	r0, r6
 800dd92:	f000 fba7 	bl	800e4e4 <_Bfree>
 800dd96:	2f00      	cmp	r7, #0
 800dd98:	f43f aea7 	beq.w	800daea <_dtoa_r+0x5e2>
 800dd9c:	f1b9 0f00 	cmp.w	r9, #0
 800dda0:	d005      	beq.n	800ddae <_dtoa_r+0x8a6>
 800dda2:	45b9      	cmp	r9, r7
 800dda4:	d003      	beq.n	800ddae <_dtoa_r+0x8a6>
 800dda6:	4649      	mov	r1, r9
 800dda8:	4630      	mov	r0, r6
 800ddaa:	f000 fb9b 	bl	800e4e4 <_Bfree>
 800ddae:	4639      	mov	r1, r7
 800ddb0:	4630      	mov	r0, r6
 800ddb2:	f000 fb97 	bl	800e4e4 <_Bfree>
 800ddb6:	e698      	b.n	800daea <_dtoa_r+0x5e2>
 800ddb8:	2400      	movs	r4, #0
 800ddba:	4627      	mov	r7, r4
 800ddbc:	e7e0      	b.n	800dd80 <_dtoa_r+0x878>
 800ddbe:	46bb      	mov	fp, r7
 800ddc0:	4604      	mov	r4, r0
 800ddc2:	4607      	mov	r7, r0
 800ddc4:	e5ba      	b.n	800d93c <_dtoa_r+0x434>
 800ddc6:	9b08      	ldr	r3, [sp, #32]
 800ddc8:	46ca      	mov	sl, r9
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	f000 8100 	beq.w	800dfd0 <_dtoa_r+0xac8>
 800ddd0:	f1b8 0f00 	cmp.w	r8, #0
 800ddd4:	dd05      	ble.n	800dde2 <_dtoa_r+0x8da>
 800ddd6:	4639      	mov	r1, r7
 800ddd8:	4642      	mov	r2, r8
 800ddda:	4630      	mov	r0, r6
 800dddc:	f000 fd54 	bl	800e888 <__lshift>
 800dde0:	4607      	mov	r7, r0
 800dde2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d05d      	beq.n	800dea4 <_dtoa_r+0x99c>
 800dde8:	6879      	ldr	r1, [r7, #4]
 800ddea:	4630      	mov	r0, r6
 800ddec:	f000 fb3a 	bl	800e464 <_Balloc>
 800ddf0:	4680      	mov	r8, r0
 800ddf2:	b928      	cbnz	r0, 800de00 <_dtoa_r+0x8f8>
 800ddf4:	4b82      	ldr	r3, [pc, #520]	; (800e000 <_dtoa_r+0xaf8>)
 800ddf6:	4602      	mov	r2, r0
 800ddf8:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ddfc:	f7ff bb9a 	b.w	800d534 <_dtoa_r+0x2c>
 800de00:	693a      	ldr	r2, [r7, #16]
 800de02:	3202      	adds	r2, #2
 800de04:	0092      	lsls	r2, r2, #2
 800de06:	f107 010c 	add.w	r1, r7, #12
 800de0a:	300c      	adds	r0, #12
 800de0c:	f7fe fd28 	bl	800c860 <memcpy>
 800de10:	2201      	movs	r2, #1
 800de12:	4641      	mov	r1, r8
 800de14:	4630      	mov	r0, r6
 800de16:	f000 fd37 	bl	800e888 <__lshift>
 800de1a:	9b00      	ldr	r3, [sp, #0]
 800de1c:	3301      	adds	r3, #1
 800de1e:	9305      	str	r3, [sp, #20]
 800de20:	9b00      	ldr	r3, [sp, #0]
 800de22:	4453      	add	r3, sl
 800de24:	9309      	str	r3, [sp, #36]	; 0x24
 800de26:	9b02      	ldr	r3, [sp, #8]
 800de28:	f003 0301 	and.w	r3, r3, #1
 800de2c:	46b9      	mov	r9, r7
 800de2e:	9308      	str	r3, [sp, #32]
 800de30:	4607      	mov	r7, r0
 800de32:	9b05      	ldr	r3, [sp, #20]
 800de34:	4621      	mov	r1, r4
 800de36:	3b01      	subs	r3, #1
 800de38:	4628      	mov	r0, r5
 800de3a:	9302      	str	r3, [sp, #8]
 800de3c:	f7ff fad8 	bl	800d3f0 <quorem>
 800de40:	4603      	mov	r3, r0
 800de42:	3330      	adds	r3, #48	; 0x30
 800de44:	9006      	str	r0, [sp, #24]
 800de46:	4649      	mov	r1, r9
 800de48:	4628      	mov	r0, r5
 800de4a:	930a      	str	r3, [sp, #40]	; 0x28
 800de4c:	f000 fd88 	bl	800e960 <__mcmp>
 800de50:	463a      	mov	r2, r7
 800de52:	4682      	mov	sl, r0
 800de54:	4621      	mov	r1, r4
 800de56:	4630      	mov	r0, r6
 800de58:	f000 fd9e 	bl	800e998 <__mdiff>
 800de5c:	68c2      	ldr	r2, [r0, #12]
 800de5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de60:	4680      	mov	r8, r0
 800de62:	bb0a      	cbnz	r2, 800dea8 <_dtoa_r+0x9a0>
 800de64:	4601      	mov	r1, r0
 800de66:	4628      	mov	r0, r5
 800de68:	f000 fd7a 	bl	800e960 <__mcmp>
 800de6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de6e:	4602      	mov	r2, r0
 800de70:	4641      	mov	r1, r8
 800de72:	4630      	mov	r0, r6
 800de74:	920e      	str	r2, [sp, #56]	; 0x38
 800de76:	930a      	str	r3, [sp, #40]	; 0x28
 800de78:	f000 fb34 	bl	800e4e4 <_Bfree>
 800de7c:	9b07      	ldr	r3, [sp, #28]
 800de7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800de80:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800de84:	ea43 0102 	orr.w	r1, r3, r2
 800de88:	9b08      	ldr	r3, [sp, #32]
 800de8a:	430b      	orrs	r3, r1
 800de8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de8e:	d10d      	bne.n	800deac <_dtoa_r+0x9a4>
 800de90:	2b39      	cmp	r3, #57	; 0x39
 800de92:	d029      	beq.n	800dee8 <_dtoa_r+0x9e0>
 800de94:	f1ba 0f00 	cmp.w	sl, #0
 800de98:	dd01      	ble.n	800de9e <_dtoa_r+0x996>
 800de9a:	9b06      	ldr	r3, [sp, #24]
 800de9c:	3331      	adds	r3, #49	; 0x31
 800de9e:	9a02      	ldr	r2, [sp, #8]
 800dea0:	7013      	strb	r3, [r2, #0]
 800dea2:	e774      	b.n	800dd8e <_dtoa_r+0x886>
 800dea4:	4638      	mov	r0, r7
 800dea6:	e7b8      	b.n	800de1a <_dtoa_r+0x912>
 800dea8:	2201      	movs	r2, #1
 800deaa:	e7e1      	b.n	800de70 <_dtoa_r+0x968>
 800deac:	f1ba 0f00 	cmp.w	sl, #0
 800deb0:	db06      	blt.n	800dec0 <_dtoa_r+0x9b8>
 800deb2:	9907      	ldr	r1, [sp, #28]
 800deb4:	ea41 0a0a 	orr.w	sl, r1, sl
 800deb8:	9908      	ldr	r1, [sp, #32]
 800deba:	ea5a 0101 	orrs.w	r1, sl, r1
 800debe:	d120      	bne.n	800df02 <_dtoa_r+0x9fa>
 800dec0:	2a00      	cmp	r2, #0
 800dec2:	ddec      	ble.n	800de9e <_dtoa_r+0x996>
 800dec4:	4629      	mov	r1, r5
 800dec6:	2201      	movs	r2, #1
 800dec8:	4630      	mov	r0, r6
 800deca:	9305      	str	r3, [sp, #20]
 800decc:	f000 fcdc 	bl	800e888 <__lshift>
 800ded0:	4621      	mov	r1, r4
 800ded2:	4605      	mov	r5, r0
 800ded4:	f000 fd44 	bl	800e960 <__mcmp>
 800ded8:	2800      	cmp	r0, #0
 800deda:	9b05      	ldr	r3, [sp, #20]
 800dedc:	dc02      	bgt.n	800dee4 <_dtoa_r+0x9dc>
 800dede:	d1de      	bne.n	800de9e <_dtoa_r+0x996>
 800dee0:	07da      	lsls	r2, r3, #31
 800dee2:	d5dc      	bpl.n	800de9e <_dtoa_r+0x996>
 800dee4:	2b39      	cmp	r3, #57	; 0x39
 800dee6:	d1d8      	bne.n	800de9a <_dtoa_r+0x992>
 800dee8:	9a02      	ldr	r2, [sp, #8]
 800deea:	2339      	movs	r3, #57	; 0x39
 800deec:	7013      	strb	r3, [r2, #0]
 800deee:	4643      	mov	r3, r8
 800def0:	4698      	mov	r8, r3
 800def2:	3b01      	subs	r3, #1
 800def4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800def8:	2a39      	cmp	r2, #57	; 0x39
 800defa:	d051      	beq.n	800dfa0 <_dtoa_r+0xa98>
 800defc:	3201      	adds	r2, #1
 800defe:	701a      	strb	r2, [r3, #0]
 800df00:	e745      	b.n	800dd8e <_dtoa_r+0x886>
 800df02:	2a00      	cmp	r2, #0
 800df04:	dd03      	ble.n	800df0e <_dtoa_r+0xa06>
 800df06:	2b39      	cmp	r3, #57	; 0x39
 800df08:	d0ee      	beq.n	800dee8 <_dtoa_r+0x9e0>
 800df0a:	3301      	adds	r3, #1
 800df0c:	e7c7      	b.n	800de9e <_dtoa_r+0x996>
 800df0e:	9a05      	ldr	r2, [sp, #20]
 800df10:	9909      	ldr	r1, [sp, #36]	; 0x24
 800df12:	f802 3c01 	strb.w	r3, [r2, #-1]
 800df16:	428a      	cmp	r2, r1
 800df18:	d02b      	beq.n	800df72 <_dtoa_r+0xa6a>
 800df1a:	4629      	mov	r1, r5
 800df1c:	2300      	movs	r3, #0
 800df1e:	220a      	movs	r2, #10
 800df20:	4630      	mov	r0, r6
 800df22:	f000 fb01 	bl	800e528 <__multadd>
 800df26:	45b9      	cmp	r9, r7
 800df28:	4605      	mov	r5, r0
 800df2a:	f04f 0300 	mov.w	r3, #0
 800df2e:	f04f 020a 	mov.w	r2, #10
 800df32:	4649      	mov	r1, r9
 800df34:	4630      	mov	r0, r6
 800df36:	d107      	bne.n	800df48 <_dtoa_r+0xa40>
 800df38:	f000 faf6 	bl	800e528 <__multadd>
 800df3c:	4681      	mov	r9, r0
 800df3e:	4607      	mov	r7, r0
 800df40:	9b05      	ldr	r3, [sp, #20]
 800df42:	3301      	adds	r3, #1
 800df44:	9305      	str	r3, [sp, #20]
 800df46:	e774      	b.n	800de32 <_dtoa_r+0x92a>
 800df48:	f000 faee 	bl	800e528 <__multadd>
 800df4c:	4639      	mov	r1, r7
 800df4e:	4681      	mov	r9, r0
 800df50:	2300      	movs	r3, #0
 800df52:	220a      	movs	r2, #10
 800df54:	4630      	mov	r0, r6
 800df56:	f000 fae7 	bl	800e528 <__multadd>
 800df5a:	4607      	mov	r7, r0
 800df5c:	e7f0      	b.n	800df40 <_dtoa_r+0xa38>
 800df5e:	f1ba 0f00 	cmp.w	sl, #0
 800df62:	9a00      	ldr	r2, [sp, #0]
 800df64:	bfcc      	ite	gt
 800df66:	46d0      	movgt	r8, sl
 800df68:	f04f 0801 	movle.w	r8, #1
 800df6c:	4490      	add	r8, r2
 800df6e:	f04f 0900 	mov.w	r9, #0
 800df72:	4629      	mov	r1, r5
 800df74:	2201      	movs	r2, #1
 800df76:	4630      	mov	r0, r6
 800df78:	9302      	str	r3, [sp, #8]
 800df7a:	f000 fc85 	bl	800e888 <__lshift>
 800df7e:	4621      	mov	r1, r4
 800df80:	4605      	mov	r5, r0
 800df82:	f000 fced 	bl	800e960 <__mcmp>
 800df86:	2800      	cmp	r0, #0
 800df88:	dcb1      	bgt.n	800deee <_dtoa_r+0x9e6>
 800df8a:	d102      	bne.n	800df92 <_dtoa_r+0xa8a>
 800df8c:	9b02      	ldr	r3, [sp, #8]
 800df8e:	07db      	lsls	r3, r3, #31
 800df90:	d4ad      	bmi.n	800deee <_dtoa_r+0x9e6>
 800df92:	4643      	mov	r3, r8
 800df94:	4698      	mov	r8, r3
 800df96:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800df9a:	2a30      	cmp	r2, #48	; 0x30
 800df9c:	d0fa      	beq.n	800df94 <_dtoa_r+0xa8c>
 800df9e:	e6f6      	b.n	800dd8e <_dtoa_r+0x886>
 800dfa0:	9a00      	ldr	r2, [sp, #0]
 800dfa2:	429a      	cmp	r2, r3
 800dfa4:	d1a4      	bne.n	800def0 <_dtoa_r+0x9e8>
 800dfa6:	f10b 0b01 	add.w	fp, fp, #1
 800dfaa:	2331      	movs	r3, #49	; 0x31
 800dfac:	e778      	b.n	800dea0 <_dtoa_r+0x998>
 800dfae:	4b15      	ldr	r3, [pc, #84]	; (800e004 <_dtoa_r+0xafc>)
 800dfb0:	f7ff bb12 	b.w	800d5d8 <_dtoa_r+0xd0>
 800dfb4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	f47f aaee 	bne.w	800d598 <_dtoa_r+0x90>
 800dfbc:	4b12      	ldr	r3, [pc, #72]	; (800e008 <_dtoa_r+0xb00>)
 800dfbe:	f7ff bb0b 	b.w	800d5d8 <_dtoa_r+0xd0>
 800dfc2:	f1ba 0f00 	cmp.w	sl, #0
 800dfc6:	dc03      	bgt.n	800dfd0 <_dtoa_r+0xac8>
 800dfc8:	9b07      	ldr	r3, [sp, #28]
 800dfca:	2b02      	cmp	r3, #2
 800dfcc:	f73f aec7 	bgt.w	800dd5e <_dtoa_r+0x856>
 800dfd0:	f8dd 8000 	ldr.w	r8, [sp]
 800dfd4:	4621      	mov	r1, r4
 800dfd6:	4628      	mov	r0, r5
 800dfd8:	f7ff fa0a 	bl	800d3f0 <quorem>
 800dfdc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800dfe0:	f808 3b01 	strb.w	r3, [r8], #1
 800dfe4:	9a00      	ldr	r2, [sp, #0]
 800dfe6:	eba8 0202 	sub.w	r2, r8, r2
 800dfea:	4592      	cmp	sl, r2
 800dfec:	ddb7      	ble.n	800df5e <_dtoa_r+0xa56>
 800dfee:	4629      	mov	r1, r5
 800dff0:	2300      	movs	r3, #0
 800dff2:	220a      	movs	r2, #10
 800dff4:	4630      	mov	r0, r6
 800dff6:	f000 fa97 	bl	800e528 <__multadd>
 800dffa:	4605      	mov	r5, r0
 800dffc:	e7ea      	b.n	800dfd4 <_dtoa_r+0xacc>
 800dffe:	bf00      	nop
 800e000:	0800f94b 	.word	0x0800f94b
 800e004:	0800f8a4 	.word	0x0800f8a4
 800e008:	0800f8c8 	.word	0x0800f8c8

0800e00c <__sflush_r>:
 800e00c:	898a      	ldrh	r2, [r1, #12]
 800e00e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e012:	4605      	mov	r5, r0
 800e014:	0710      	lsls	r0, r2, #28
 800e016:	460c      	mov	r4, r1
 800e018:	d458      	bmi.n	800e0cc <__sflush_r+0xc0>
 800e01a:	684b      	ldr	r3, [r1, #4]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	dc05      	bgt.n	800e02c <__sflush_r+0x20>
 800e020:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e022:	2b00      	cmp	r3, #0
 800e024:	dc02      	bgt.n	800e02c <__sflush_r+0x20>
 800e026:	2000      	movs	r0, #0
 800e028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e02c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e02e:	2e00      	cmp	r6, #0
 800e030:	d0f9      	beq.n	800e026 <__sflush_r+0x1a>
 800e032:	2300      	movs	r3, #0
 800e034:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e038:	682f      	ldr	r7, [r5, #0]
 800e03a:	602b      	str	r3, [r5, #0]
 800e03c:	d032      	beq.n	800e0a4 <__sflush_r+0x98>
 800e03e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e040:	89a3      	ldrh	r3, [r4, #12]
 800e042:	075a      	lsls	r2, r3, #29
 800e044:	d505      	bpl.n	800e052 <__sflush_r+0x46>
 800e046:	6863      	ldr	r3, [r4, #4]
 800e048:	1ac0      	subs	r0, r0, r3
 800e04a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e04c:	b10b      	cbz	r3, 800e052 <__sflush_r+0x46>
 800e04e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e050:	1ac0      	subs	r0, r0, r3
 800e052:	2300      	movs	r3, #0
 800e054:	4602      	mov	r2, r0
 800e056:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e058:	6a21      	ldr	r1, [r4, #32]
 800e05a:	4628      	mov	r0, r5
 800e05c:	47b0      	blx	r6
 800e05e:	1c43      	adds	r3, r0, #1
 800e060:	89a3      	ldrh	r3, [r4, #12]
 800e062:	d106      	bne.n	800e072 <__sflush_r+0x66>
 800e064:	6829      	ldr	r1, [r5, #0]
 800e066:	291d      	cmp	r1, #29
 800e068:	d82c      	bhi.n	800e0c4 <__sflush_r+0xb8>
 800e06a:	4a2a      	ldr	r2, [pc, #168]	; (800e114 <__sflush_r+0x108>)
 800e06c:	40ca      	lsrs	r2, r1
 800e06e:	07d6      	lsls	r6, r2, #31
 800e070:	d528      	bpl.n	800e0c4 <__sflush_r+0xb8>
 800e072:	2200      	movs	r2, #0
 800e074:	6062      	str	r2, [r4, #4]
 800e076:	04d9      	lsls	r1, r3, #19
 800e078:	6922      	ldr	r2, [r4, #16]
 800e07a:	6022      	str	r2, [r4, #0]
 800e07c:	d504      	bpl.n	800e088 <__sflush_r+0x7c>
 800e07e:	1c42      	adds	r2, r0, #1
 800e080:	d101      	bne.n	800e086 <__sflush_r+0x7a>
 800e082:	682b      	ldr	r3, [r5, #0]
 800e084:	b903      	cbnz	r3, 800e088 <__sflush_r+0x7c>
 800e086:	6560      	str	r0, [r4, #84]	; 0x54
 800e088:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e08a:	602f      	str	r7, [r5, #0]
 800e08c:	2900      	cmp	r1, #0
 800e08e:	d0ca      	beq.n	800e026 <__sflush_r+0x1a>
 800e090:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e094:	4299      	cmp	r1, r3
 800e096:	d002      	beq.n	800e09e <__sflush_r+0x92>
 800e098:	4628      	mov	r0, r5
 800e09a:	f000 fd71 	bl	800eb80 <_free_r>
 800e09e:	2000      	movs	r0, #0
 800e0a0:	6360      	str	r0, [r4, #52]	; 0x34
 800e0a2:	e7c1      	b.n	800e028 <__sflush_r+0x1c>
 800e0a4:	6a21      	ldr	r1, [r4, #32]
 800e0a6:	2301      	movs	r3, #1
 800e0a8:	4628      	mov	r0, r5
 800e0aa:	47b0      	blx	r6
 800e0ac:	1c41      	adds	r1, r0, #1
 800e0ae:	d1c7      	bne.n	800e040 <__sflush_r+0x34>
 800e0b0:	682b      	ldr	r3, [r5, #0]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d0c4      	beq.n	800e040 <__sflush_r+0x34>
 800e0b6:	2b1d      	cmp	r3, #29
 800e0b8:	d001      	beq.n	800e0be <__sflush_r+0xb2>
 800e0ba:	2b16      	cmp	r3, #22
 800e0bc:	d101      	bne.n	800e0c2 <__sflush_r+0xb6>
 800e0be:	602f      	str	r7, [r5, #0]
 800e0c0:	e7b1      	b.n	800e026 <__sflush_r+0x1a>
 800e0c2:	89a3      	ldrh	r3, [r4, #12]
 800e0c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0c8:	81a3      	strh	r3, [r4, #12]
 800e0ca:	e7ad      	b.n	800e028 <__sflush_r+0x1c>
 800e0cc:	690f      	ldr	r7, [r1, #16]
 800e0ce:	2f00      	cmp	r7, #0
 800e0d0:	d0a9      	beq.n	800e026 <__sflush_r+0x1a>
 800e0d2:	0793      	lsls	r3, r2, #30
 800e0d4:	680e      	ldr	r6, [r1, #0]
 800e0d6:	bf08      	it	eq
 800e0d8:	694b      	ldreq	r3, [r1, #20]
 800e0da:	600f      	str	r7, [r1, #0]
 800e0dc:	bf18      	it	ne
 800e0de:	2300      	movne	r3, #0
 800e0e0:	eba6 0807 	sub.w	r8, r6, r7
 800e0e4:	608b      	str	r3, [r1, #8]
 800e0e6:	f1b8 0f00 	cmp.w	r8, #0
 800e0ea:	dd9c      	ble.n	800e026 <__sflush_r+0x1a>
 800e0ec:	6a21      	ldr	r1, [r4, #32]
 800e0ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e0f0:	4643      	mov	r3, r8
 800e0f2:	463a      	mov	r2, r7
 800e0f4:	4628      	mov	r0, r5
 800e0f6:	47b0      	blx	r6
 800e0f8:	2800      	cmp	r0, #0
 800e0fa:	dc06      	bgt.n	800e10a <__sflush_r+0xfe>
 800e0fc:	89a3      	ldrh	r3, [r4, #12]
 800e0fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e102:	81a3      	strh	r3, [r4, #12]
 800e104:	f04f 30ff 	mov.w	r0, #4294967295
 800e108:	e78e      	b.n	800e028 <__sflush_r+0x1c>
 800e10a:	4407      	add	r7, r0
 800e10c:	eba8 0800 	sub.w	r8, r8, r0
 800e110:	e7e9      	b.n	800e0e6 <__sflush_r+0xda>
 800e112:	bf00      	nop
 800e114:	20400001 	.word	0x20400001

0800e118 <_fflush_r>:
 800e118:	b538      	push	{r3, r4, r5, lr}
 800e11a:	690b      	ldr	r3, [r1, #16]
 800e11c:	4605      	mov	r5, r0
 800e11e:	460c      	mov	r4, r1
 800e120:	b913      	cbnz	r3, 800e128 <_fflush_r+0x10>
 800e122:	2500      	movs	r5, #0
 800e124:	4628      	mov	r0, r5
 800e126:	bd38      	pop	{r3, r4, r5, pc}
 800e128:	b118      	cbz	r0, 800e132 <_fflush_r+0x1a>
 800e12a:	6983      	ldr	r3, [r0, #24]
 800e12c:	b90b      	cbnz	r3, 800e132 <_fflush_r+0x1a>
 800e12e:	f000 f887 	bl	800e240 <__sinit>
 800e132:	4b14      	ldr	r3, [pc, #80]	; (800e184 <_fflush_r+0x6c>)
 800e134:	429c      	cmp	r4, r3
 800e136:	d11b      	bne.n	800e170 <_fflush_r+0x58>
 800e138:	686c      	ldr	r4, [r5, #4]
 800e13a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d0ef      	beq.n	800e122 <_fflush_r+0xa>
 800e142:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e144:	07d0      	lsls	r0, r2, #31
 800e146:	d404      	bmi.n	800e152 <_fflush_r+0x3a>
 800e148:	0599      	lsls	r1, r3, #22
 800e14a:	d402      	bmi.n	800e152 <_fflush_r+0x3a>
 800e14c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e14e:	f000 f91a 	bl	800e386 <__retarget_lock_acquire_recursive>
 800e152:	4628      	mov	r0, r5
 800e154:	4621      	mov	r1, r4
 800e156:	f7ff ff59 	bl	800e00c <__sflush_r>
 800e15a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e15c:	07da      	lsls	r2, r3, #31
 800e15e:	4605      	mov	r5, r0
 800e160:	d4e0      	bmi.n	800e124 <_fflush_r+0xc>
 800e162:	89a3      	ldrh	r3, [r4, #12]
 800e164:	059b      	lsls	r3, r3, #22
 800e166:	d4dd      	bmi.n	800e124 <_fflush_r+0xc>
 800e168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e16a:	f000 f90d 	bl	800e388 <__retarget_lock_release_recursive>
 800e16e:	e7d9      	b.n	800e124 <_fflush_r+0xc>
 800e170:	4b05      	ldr	r3, [pc, #20]	; (800e188 <_fflush_r+0x70>)
 800e172:	429c      	cmp	r4, r3
 800e174:	d101      	bne.n	800e17a <_fflush_r+0x62>
 800e176:	68ac      	ldr	r4, [r5, #8]
 800e178:	e7df      	b.n	800e13a <_fflush_r+0x22>
 800e17a:	4b04      	ldr	r3, [pc, #16]	; (800e18c <_fflush_r+0x74>)
 800e17c:	429c      	cmp	r4, r3
 800e17e:	bf08      	it	eq
 800e180:	68ec      	ldreq	r4, [r5, #12]
 800e182:	e7da      	b.n	800e13a <_fflush_r+0x22>
 800e184:	0800f97c 	.word	0x0800f97c
 800e188:	0800f99c 	.word	0x0800f99c
 800e18c:	0800f95c 	.word	0x0800f95c

0800e190 <std>:
 800e190:	2300      	movs	r3, #0
 800e192:	b510      	push	{r4, lr}
 800e194:	4604      	mov	r4, r0
 800e196:	e9c0 3300 	strd	r3, r3, [r0]
 800e19a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e19e:	6083      	str	r3, [r0, #8]
 800e1a0:	8181      	strh	r1, [r0, #12]
 800e1a2:	6643      	str	r3, [r0, #100]	; 0x64
 800e1a4:	81c2      	strh	r2, [r0, #14]
 800e1a6:	6183      	str	r3, [r0, #24]
 800e1a8:	4619      	mov	r1, r3
 800e1aa:	2208      	movs	r2, #8
 800e1ac:	305c      	adds	r0, #92	; 0x5c
 800e1ae:	f7fe fb65 	bl	800c87c <memset>
 800e1b2:	4b05      	ldr	r3, [pc, #20]	; (800e1c8 <std+0x38>)
 800e1b4:	6263      	str	r3, [r4, #36]	; 0x24
 800e1b6:	4b05      	ldr	r3, [pc, #20]	; (800e1cc <std+0x3c>)
 800e1b8:	62a3      	str	r3, [r4, #40]	; 0x28
 800e1ba:	4b05      	ldr	r3, [pc, #20]	; (800e1d0 <std+0x40>)
 800e1bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e1be:	4b05      	ldr	r3, [pc, #20]	; (800e1d4 <std+0x44>)
 800e1c0:	6224      	str	r4, [r4, #32]
 800e1c2:	6323      	str	r3, [r4, #48]	; 0x30
 800e1c4:	bd10      	pop	{r4, pc}
 800e1c6:	bf00      	nop
 800e1c8:	0800f261 	.word	0x0800f261
 800e1cc:	0800f283 	.word	0x0800f283
 800e1d0:	0800f2bb 	.word	0x0800f2bb
 800e1d4:	0800f2df 	.word	0x0800f2df

0800e1d8 <_cleanup_r>:
 800e1d8:	4901      	ldr	r1, [pc, #4]	; (800e1e0 <_cleanup_r+0x8>)
 800e1da:	f000 b8af 	b.w	800e33c <_fwalk_reent>
 800e1de:	bf00      	nop
 800e1e0:	0800e119 	.word	0x0800e119

0800e1e4 <__sfmoreglue>:
 800e1e4:	b570      	push	{r4, r5, r6, lr}
 800e1e6:	1e4a      	subs	r2, r1, #1
 800e1e8:	2568      	movs	r5, #104	; 0x68
 800e1ea:	4355      	muls	r5, r2
 800e1ec:	460e      	mov	r6, r1
 800e1ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e1f2:	f000 fd15 	bl	800ec20 <_malloc_r>
 800e1f6:	4604      	mov	r4, r0
 800e1f8:	b140      	cbz	r0, 800e20c <__sfmoreglue+0x28>
 800e1fa:	2100      	movs	r1, #0
 800e1fc:	e9c0 1600 	strd	r1, r6, [r0]
 800e200:	300c      	adds	r0, #12
 800e202:	60a0      	str	r0, [r4, #8]
 800e204:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e208:	f7fe fb38 	bl	800c87c <memset>
 800e20c:	4620      	mov	r0, r4
 800e20e:	bd70      	pop	{r4, r5, r6, pc}

0800e210 <__sfp_lock_acquire>:
 800e210:	4801      	ldr	r0, [pc, #4]	; (800e218 <__sfp_lock_acquire+0x8>)
 800e212:	f000 b8b8 	b.w	800e386 <__retarget_lock_acquire_recursive>
 800e216:	bf00      	nop
 800e218:	24000bd4 	.word	0x24000bd4

0800e21c <__sfp_lock_release>:
 800e21c:	4801      	ldr	r0, [pc, #4]	; (800e224 <__sfp_lock_release+0x8>)
 800e21e:	f000 b8b3 	b.w	800e388 <__retarget_lock_release_recursive>
 800e222:	bf00      	nop
 800e224:	24000bd4 	.word	0x24000bd4

0800e228 <__sinit_lock_acquire>:
 800e228:	4801      	ldr	r0, [pc, #4]	; (800e230 <__sinit_lock_acquire+0x8>)
 800e22a:	f000 b8ac 	b.w	800e386 <__retarget_lock_acquire_recursive>
 800e22e:	bf00      	nop
 800e230:	24000bcf 	.word	0x24000bcf

0800e234 <__sinit_lock_release>:
 800e234:	4801      	ldr	r0, [pc, #4]	; (800e23c <__sinit_lock_release+0x8>)
 800e236:	f000 b8a7 	b.w	800e388 <__retarget_lock_release_recursive>
 800e23a:	bf00      	nop
 800e23c:	24000bcf 	.word	0x24000bcf

0800e240 <__sinit>:
 800e240:	b510      	push	{r4, lr}
 800e242:	4604      	mov	r4, r0
 800e244:	f7ff fff0 	bl	800e228 <__sinit_lock_acquire>
 800e248:	69a3      	ldr	r3, [r4, #24]
 800e24a:	b11b      	cbz	r3, 800e254 <__sinit+0x14>
 800e24c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e250:	f7ff bff0 	b.w	800e234 <__sinit_lock_release>
 800e254:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e258:	6523      	str	r3, [r4, #80]	; 0x50
 800e25a:	4b13      	ldr	r3, [pc, #76]	; (800e2a8 <__sinit+0x68>)
 800e25c:	4a13      	ldr	r2, [pc, #76]	; (800e2ac <__sinit+0x6c>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	62a2      	str	r2, [r4, #40]	; 0x28
 800e262:	42a3      	cmp	r3, r4
 800e264:	bf04      	itt	eq
 800e266:	2301      	moveq	r3, #1
 800e268:	61a3      	streq	r3, [r4, #24]
 800e26a:	4620      	mov	r0, r4
 800e26c:	f000 f820 	bl	800e2b0 <__sfp>
 800e270:	6060      	str	r0, [r4, #4]
 800e272:	4620      	mov	r0, r4
 800e274:	f000 f81c 	bl	800e2b0 <__sfp>
 800e278:	60a0      	str	r0, [r4, #8]
 800e27a:	4620      	mov	r0, r4
 800e27c:	f000 f818 	bl	800e2b0 <__sfp>
 800e280:	2200      	movs	r2, #0
 800e282:	60e0      	str	r0, [r4, #12]
 800e284:	2104      	movs	r1, #4
 800e286:	6860      	ldr	r0, [r4, #4]
 800e288:	f7ff ff82 	bl	800e190 <std>
 800e28c:	68a0      	ldr	r0, [r4, #8]
 800e28e:	2201      	movs	r2, #1
 800e290:	2109      	movs	r1, #9
 800e292:	f7ff ff7d 	bl	800e190 <std>
 800e296:	68e0      	ldr	r0, [r4, #12]
 800e298:	2202      	movs	r2, #2
 800e29a:	2112      	movs	r1, #18
 800e29c:	f7ff ff78 	bl	800e190 <std>
 800e2a0:	2301      	movs	r3, #1
 800e2a2:	61a3      	str	r3, [r4, #24]
 800e2a4:	e7d2      	b.n	800e24c <__sinit+0xc>
 800e2a6:	bf00      	nop
 800e2a8:	0800f890 	.word	0x0800f890
 800e2ac:	0800e1d9 	.word	0x0800e1d9

0800e2b0 <__sfp>:
 800e2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2b2:	4607      	mov	r7, r0
 800e2b4:	f7ff ffac 	bl	800e210 <__sfp_lock_acquire>
 800e2b8:	4b1e      	ldr	r3, [pc, #120]	; (800e334 <__sfp+0x84>)
 800e2ba:	681e      	ldr	r6, [r3, #0]
 800e2bc:	69b3      	ldr	r3, [r6, #24]
 800e2be:	b913      	cbnz	r3, 800e2c6 <__sfp+0x16>
 800e2c0:	4630      	mov	r0, r6
 800e2c2:	f7ff ffbd 	bl	800e240 <__sinit>
 800e2c6:	3648      	adds	r6, #72	; 0x48
 800e2c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e2cc:	3b01      	subs	r3, #1
 800e2ce:	d503      	bpl.n	800e2d8 <__sfp+0x28>
 800e2d0:	6833      	ldr	r3, [r6, #0]
 800e2d2:	b30b      	cbz	r3, 800e318 <__sfp+0x68>
 800e2d4:	6836      	ldr	r6, [r6, #0]
 800e2d6:	e7f7      	b.n	800e2c8 <__sfp+0x18>
 800e2d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e2dc:	b9d5      	cbnz	r5, 800e314 <__sfp+0x64>
 800e2de:	4b16      	ldr	r3, [pc, #88]	; (800e338 <__sfp+0x88>)
 800e2e0:	60e3      	str	r3, [r4, #12]
 800e2e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e2e6:	6665      	str	r5, [r4, #100]	; 0x64
 800e2e8:	f000 f84c 	bl	800e384 <__retarget_lock_init_recursive>
 800e2ec:	f7ff ff96 	bl	800e21c <__sfp_lock_release>
 800e2f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e2f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e2f8:	6025      	str	r5, [r4, #0]
 800e2fa:	61a5      	str	r5, [r4, #24]
 800e2fc:	2208      	movs	r2, #8
 800e2fe:	4629      	mov	r1, r5
 800e300:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e304:	f7fe faba 	bl	800c87c <memset>
 800e308:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e30c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e310:	4620      	mov	r0, r4
 800e312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e314:	3468      	adds	r4, #104	; 0x68
 800e316:	e7d9      	b.n	800e2cc <__sfp+0x1c>
 800e318:	2104      	movs	r1, #4
 800e31a:	4638      	mov	r0, r7
 800e31c:	f7ff ff62 	bl	800e1e4 <__sfmoreglue>
 800e320:	4604      	mov	r4, r0
 800e322:	6030      	str	r0, [r6, #0]
 800e324:	2800      	cmp	r0, #0
 800e326:	d1d5      	bne.n	800e2d4 <__sfp+0x24>
 800e328:	f7ff ff78 	bl	800e21c <__sfp_lock_release>
 800e32c:	230c      	movs	r3, #12
 800e32e:	603b      	str	r3, [r7, #0]
 800e330:	e7ee      	b.n	800e310 <__sfp+0x60>
 800e332:	bf00      	nop
 800e334:	0800f890 	.word	0x0800f890
 800e338:	ffff0001 	.word	0xffff0001

0800e33c <_fwalk_reent>:
 800e33c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e340:	4606      	mov	r6, r0
 800e342:	4688      	mov	r8, r1
 800e344:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e348:	2700      	movs	r7, #0
 800e34a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e34e:	f1b9 0901 	subs.w	r9, r9, #1
 800e352:	d505      	bpl.n	800e360 <_fwalk_reent+0x24>
 800e354:	6824      	ldr	r4, [r4, #0]
 800e356:	2c00      	cmp	r4, #0
 800e358:	d1f7      	bne.n	800e34a <_fwalk_reent+0xe>
 800e35a:	4638      	mov	r0, r7
 800e35c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e360:	89ab      	ldrh	r3, [r5, #12]
 800e362:	2b01      	cmp	r3, #1
 800e364:	d907      	bls.n	800e376 <_fwalk_reent+0x3a>
 800e366:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e36a:	3301      	adds	r3, #1
 800e36c:	d003      	beq.n	800e376 <_fwalk_reent+0x3a>
 800e36e:	4629      	mov	r1, r5
 800e370:	4630      	mov	r0, r6
 800e372:	47c0      	blx	r8
 800e374:	4307      	orrs	r7, r0
 800e376:	3568      	adds	r5, #104	; 0x68
 800e378:	e7e9      	b.n	800e34e <_fwalk_reent+0x12>
	...

0800e37c <_localeconv_r>:
 800e37c:	4800      	ldr	r0, [pc, #0]	; (800e380 <_localeconv_r+0x4>)
 800e37e:	4770      	bx	lr
 800e380:	24000170 	.word	0x24000170

0800e384 <__retarget_lock_init_recursive>:
 800e384:	4770      	bx	lr

0800e386 <__retarget_lock_acquire_recursive>:
 800e386:	4770      	bx	lr

0800e388 <__retarget_lock_release_recursive>:
 800e388:	4770      	bx	lr

0800e38a <__swhatbuf_r>:
 800e38a:	b570      	push	{r4, r5, r6, lr}
 800e38c:	460e      	mov	r6, r1
 800e38e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e392:	2900      	cmp	r1, #0
 800e394:	b096      	sub	sp, #88	; 0x58
 800e396:	4614      	mov	r4, r2
 800e398:	461d      	mov	r5, r3
 800e39a:	da07      	bge.n	800e3ac <__swhatbuf_r+0x22>
 800e39c:	2300      	movs	r3, #0
 800e39e:	602b      	str	r3, [r5, #0]
 800e3a0:	89b3      	ldrh	r3, [r6, #12]
 800e3a2:	061a      	lsls	r2, r3, #24
 800e3a4:	d410      	bmi.n	800e3c8 <__swhatbuf_r+0x3e>
 800e3a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3aa:	e00e      	b.n	800e3ca <__swhatbuf_r+0x40>
 800e3ac:	466a      	mov	r2, sp
 800e3ae:	f000 ffed 	bl	800f38c <_fstat_r>
 800e3b2:	2800      	cmp	r0, #0
 800e3b4:	dbf2      	blt.n	800e39c <__swhatbuf_r+0x12>
 800e3b6:	9a01      	ldr	r2, [sp, #4]
 800e3b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e3bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e3c0:	425a      	negs	r2, r3
 800e3c2:	415a      	adcs	r2, r3
 800e3c4:	602a      	str	r2, [r5, #0]
 800e3c6:	e7ee      	b.n	800e3a6 <__swhatbuf_r+0x1c>
 800e3c8:	2340      	movs	r3, #64	; 0x40
 800e3ca:	2000      	movs	r0, #0
 800e3cc:	6023      	str	r3, [r4, #0]
 800e3ce:	b016      	add	sp, #88	; 0x58
 800e3d0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e3d4 <__smakebuf_r>:
 800e3d4:	898b      	ldrh	r3, [r1, #12]
 800e3d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e3d8:	079d      	lsls	r5, r3, #30
 800e3da:	4606      	mov	r6, r0
 800e3dc:	460c      	mov	r4, r1
 800e3de:	d507      	bpl.n	800e3f0 <__smakebuf_r+0x1c>
 800e3e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e3e4:	6023      	str	r3, [r4, #0]
 800e3e6:	6123      	str	r3, [r4, #16]
 800e3e8:	2301      	movs	r3, #1
 800e3ea:	6163      	str	r3, [r4, #20]
 800e3ec:	b002      	add	sp, #8
 800e3ee:	bd70      	pop	{r4, r5, r6, pc}
 800e3f0:	ab01      	add	r3, sp, #4
 800e3f2:	466a      	mov	r2, sp
 800e3f4:	f7ff ffc9 	bl	800e38a <__swhatbuf_r>
 800e3f8:	9900      	ldr	r1, [sp, #0]
 800e3fa:	4605      	mov	r5, r0
 800e3fc:	4630      	mov	r0, r6
 800e3fe:	f000 fc0f 	bl	800ec20 <_malloc_r>
 800e402:	b948      	cbnz	r0, 800e418 <__smakebuf_r+0x44>
 800e404:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e408:	059a      	lsls	r2, r3, #22
 800e40a:	d4ef      	bmi.n	800e3ec <__smakebuf_r+0x18>
 800e40c:	f023 0303 	bic.w	r3, r3, #3
 800e410:	f043 0302 	orr.w	r3, r3, #2
 800e414:	81a3      	strh	r3, [r4, #12]
 800e416:	e7e3      	b.n	800e3e0 <__smakebuf_r+0xc>
 800e418:	4b0d      	ldr	r3, [pc, #52]	; (800e450 <__smakebuf_r+0x7c>)
 800e41a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e41c:	89a3      	ldrh	r3, [r4, #12]
 800e41e:	6020      	str	r0, [r4, #0]
 800e420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e424:	81a3      	strh	r3, [r4, #12]
 800e426:	9b00      	ldr	r3, [sp, #0]
 800e428:	6163      	str	r3, [r4, #20]
 800e42a:	9b01      	ldr	r3, [sp, #4]
 800e42c:	6120      	str	r0, [r4, #16]
 800e42e:	b15b      	cbz	r3, 800e448 <__smakebuf_r+0x74>
 800e430:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e434:	4630      	mov	r0, r6
 800e436:	f000 ffbb 	bl	800f3b0 <_isatty_r>
 800e43a:	b128      	cbz	r0, 800e448 <__smakebuf_r+0x74>
 800e43c:	89a3      	ldrh	r3, [r4, #12]
 800e43e:	f023 0303 	bic.w	r3, r3, #3
 800e442:	f043 0301 	orr.w	r3, r3, #1
 800e446:	81a3      	strh	r3, [r4, #12]
 800e448:	89a0      	ldrh	r0, [r4, #12]
 800e44a:	4305      	orrs	r5, r0
 800e44c:	81a5      	strh	r5, [r4, #12]
 800e44e:	e7cd      	b.n	800e3ec <__smakebuf_r+0x18>
 800e450:	0800e1d9 	.word	0x0800e1d9

0800e454 <malloc>:
 800e454:	4b02      	ldr	r3, [pc, #8]	; (800e460 <malloc+0xc>)
 800e456:	4601      	mov	r1, r0
 800e458:	6818      	ldr	r0, [r3, #0]
 800e45a:	f000 bbe1 	b.w	800ec20 <_malloc_r>
 800e45e:	bf00      	nop
 800e460:	2400001c 	.word	0x2400001c

0800e464 <_Balloc>:
 800e464:	b570      	push	{r4, r5, r6, lr}
 800e466:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e468:	4604      	mov	r4, r0
 800e46a:	460d      	mov	r5, r1
 800e46c:	b976      	cbnz	r6, 800e48c <_Balloc+0x28>
 800e46e:	2010      	movs	r0, #16
 800e470:	f7ff fff0 	bl	800e454 <malloc>
 800e474:	4602      	mov	r2, r0
 800e476:	6260      	str	r0, [r4, #36]	; 0x24
 800e478:	b920      	cbnz	r0, 800e484 <_Balloc+0x20>
 800e47a:	4b18      	ldr	r3, [pc, #96]	; (800e4dc <_Balloc+0x78>)
 800e47c:	4818      	ldr	r0, [pc, #96]	; (800e4e0 <_Balloc+0x7c>)
 800e47e:	2166      	movs	r1, #102	; 0x66
 800e480:	f000 ff44 	bl	800f30c <__assert_func>
 800e484:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e488:	6006      	str	r6, [r0, #0]
 800e48a:	60c6      	str	r6, [r0, #12]
 800e48c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e48e:	68f3      	ldr	r3, [r6, #12]
 800e490:	b183      	cbz	r3, 800e4b4 <_Balloc+0x50>
 800e492:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e494:	68db      	ldr	r3, [r3, #12]
 800e496:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e49a:	b9b8      	cbnz	r0, 800e4cc <_Balloc+0x68>
 800e49c:	2101      	movs	r1, #1
 800e49e:	fa01 f605 	lsl.w	r6, r1, r5
 800e4a2:	1d72      	adds	r2, r6, #5
 800e4a4:	0092      	lsls	r2, r2, #2
 800e4a6:	4620      	mov	r0, r4
 800e4a8:	f000 fb5a 	bl	800eb60 <_calloc_r>
 800e4ac:	b160      	cbz	r0, 800e4c8 <_Balloc+0x64>
 800e4ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e4b2:	e00e      	b.n	800e4d2 <_Balloc+0x6e>
 800e4b4:	2221      	movs	r2, #33	; 0x21
 800e4b6:	2104      	movs	r1, #4
 800e4b8:	4620      	mov	r0, r4
 800e4ba:	f000 fb51 	bl	800eb60 <_calloc_r>
 800e4be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4c0:	60f0      	str	r0, [r6, #12]
 800e4c2:	68db      	ldr	r3, [r3, #12]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d1e4      	bne.n	800e492 <_Balloc+0x2e>
 800e4c8:	2000      	movs	r0, #0
 800e4ca:	bd70      	pop	{r4, r5, r6, pc}
 800e4cc:	6802      	ldr	r2, [r0, #0]
 800e4ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e4d8:	e7f7      	b.n	800e4ca <_Balloc+0x66>
 800e4da:	bf00      	nop
 800e4dc:	0800f8d5 	.word	0x0800f8d5
 800e4e0:	0800f9bc 	.word	0x0800f9bc

0800e4e4 <_Bfree>:
 800e4e4:	b570      	push	{r4, r5, r6, lr}
 800e4e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e4e8:	4605      	mov	r5, r0
 800e4ea:	460c      	mov	r4, r1
 800e4ec:	b976      	cbnz	r6, 800e50c <_Bfree+0x28>
 800e4ee:	2010      	movs	r0, #16
 800e4f0:	f7ff ffb0 	bl	800e454 <malloc>
 800e4f4:	4602      	mov	r2, r0
 800e4f6:	6268      	str	r0, [r5, #36]	; 0x24
 800e4f8:	b920      	cbnz	r0, 800e504 <_Bfree+0x20>
 800e4fa:	4b09      	ldr	r3, [pc, #36]	; (800e520 <_Bfree+0x3c>)
 800e4fc:	4809      	ldr	r0, [pc, #36]	; (800e524 <_Bfree+0x40>)
 800e4fe:	218a      	movs	r1, #138	; 0x8a
 800e500:	f000 ff04 	bl	800f30c <__assert_func>
 800e504:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e508:	6006      	str	r6, [r0, #0]
 800e50a:	60c6      	str	r6, [r0, #12]
 800e50c:	b13c      	cbz	r4, 800e51e <_Bfree+0x3a>
 800e50e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e510:	6862      	ldr	r2, [r4, #4]
 800e512:	68db      	ldr	r3, [r3, #12]
 800e514:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e518:	6021      	str	r1, [r4, #0]
 800e51a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e51e:	bd70      	pop	{r4, r5, r6, pc}
 800e520:	0800f8d5 	.word	0x0800f8d5
 800e524:	0800f9bc 	.word	0x0800f9bc

0800e528 <__multadd>:
 800e528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e52c:	690e      	ldr	r6, [r1, #16]
 800e52e:	4607      	mov	r7, r0
 800e530:	4698      	mov	r8, r3
 800e532:	460c      	mov	r4, r1
 800e534:	f101 0014 	add.w	r0, r1, #20
 800e538:	2300      	movs	r3, #0
 800e53a:	6805      	ldr	r5, [r0, #0]
 800e53c:	b2a9      	uxth	r1, r5
 800e53e:	fb02 8101 	mla	r1, r2, r1, r8
 800e542:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e546:	0c2d      	lsrs	r5, r5, #16
 800e548:	fb02 c505 	mla	r5, r2, r5, ip
 800e54c:	b289      	uxth	r1, r1
 800e54e:	3301      	adds	r3, #1
 800e550:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e554:	429e      	cmp	r6, r3
 800e556:	f840 1b04 	str.w	r1, [r0], #4
 800e55a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e55e:	dcec      	bgt.n	800e53a <__multadd+0x12>
 800e560:	f1b8 0f00 	cmp.w	r8, #0
 800e564:	d022      	beq.n	800e5ac <__multadd+0x84>
 800e566:	68a3      	ldr	r3, [r4, #8]
 800e568:	42b3      	cmp	r3, r6
 800e56a:	dc19      	bgt.n	800e5a0 <__multadd+0x78>
 800e56c:	6861      	ldr	r1, [r4, #4]
 800e56e:	4638      	mov	r0, r7
 800e570:	3101      	adds	r1, #1
 800e572:	f7ff ff77 	bl	800e464 <_Balloc>
 800e576:	4605      	mov	r5, r0
 800e578:	b928      	cbnz	r0, 800e586 <__multadd+0x5e>
 800e57a:	4602      	mov	r2, r0
 800e57c:	4b0d      	ldr	r3, [pc, #52]	; (800e5b4 <__multadd+0x8c>)
 800e57e:	480e      	ldr	r0, [pc, #56]	; (800e5b8 <__multadd+0x90>)
 800e580:	21b5      	movs	r1, #181	; 0xb5
 800e582:	f000 fec3 	bl	800f30c <__assert_func>
 800e586:	6922      	ldr	r2, [r4, #16]
 800e588:	3202      	adds	r2, #2
 800e58a:	f104 010c 	add.w	r1, r4, #12
 800e58e:	0092      	lsls	r2, r2, #2
 800e590:	300c      	adds	r0, #12
 800e592:	f7fe f965 	bl	800c860 <memcpy>
 800e596:	4621      	mov	r1, r4
 800e598:	4638      	mov	r0, r7
 800e59a:	f7ff ffa3 	bl	800e4e4 <_Bfree>
 800e59e:	462c      	mov	r4, r5
 800e5a0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e5a4:	3601      	adds	r6, #1
 800e5a6:	f8c3 8014 	str.w	r8, [r3, #20]
 800e5aa:	6126      	str	r6, [r4, #16]
 800e5ac:	4620      	mov	r0, r4
 800e5ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5b2:	bf00      	nop
 800e5b4:	0800f94b 	.word	0x0800f94b
 800e5b8:	0800f9bc 	.word	0x0800f9bc

0800e5bc <__hi0bits>:
 800e5bc:	0c03      	lsrs	r3, r0, #16
 800e5be:	041b      	lsls	r3, r3, #16
 800e5c0:	b9d3      	cbnz	r3, 800e5f8 <__hi0bits+0x3c>
 800e5c2:	0400      	lsls	r0, r0, #16
 800e5c4:	2310      	movs	r3, #16
 800e5c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e5ca:	bf04      	itt	eq
 800e5cc:	0200      	lsleq	r0, r0, #8
 800e5ce:	3308      	addeq	r3, #8
 800e5d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e5d4:	bf04      	itt	eq
 800e5d6:	0100      	lsleq	r0, r0, #4
 800e5d8:	3304      	addeq	r3, #4
 800e5da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e5de:	bf04      	itt	eq
 800e5e0:	0080      	lsleq	r0, r0, #2
 800e5e2:	3302      	addeq	r3, #2
 800e5e4:	2800      	cmp	r0, #0
 800e5e6:	db05      	blt.n	800e5f4 <__hi0bits+0x38>
 800e5e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e5ec:	f103 0301 	add.w	r3, r3, #1
 800e5f0:	bf08      	it	eq
 800e5f2:	2320      	moveq	r3, #32
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	4770      	bx	lr
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	e7e4      	b.n	800e5c6 <__hi0bits+0xa>

0800e5fc <__lo0bits>:
 800e5fc:	6803      	ldr	r3, [r0, #0]
 800e5fe:	f013 0207 	ands.w	r2, r3, #7
 800e602:	4601      	mov	r1, r0
 800e604:	d00b      	beq.n	800e61e <__lo0bits+0x22>
 800e606:	07da      	lsls	r2, r3, #31
 800e608:	d424      	bmi.n	800e654 <__lo0bits+0x58>
 800e60a:	0798      	lsls	r0, r3, #30
 800e60c:	bf49      	itett	mi
 800e60e:	085b      	lsrmi	r3, r3, #1
 800e610:	089b      	lsrpl	r3, r3, #2
 800e612:	2001      	movmi	r0, #1
 800e614:	600b      	strmi	r3, [r1, #0]
 800e616:	bf5c      	itt	pl
 800e618:	600b      	strpl	r3, [r1, #0]
 800e61a:	2002      	movpl	r0, #2
 800e61c:	4770      	bx	lr
 800e61e:	b298      	uxth	r0, r3
 800e620:	b9b0      	cbnz	r0, 800e650 <__lo0bits+0x54>
 800e622:	0c1b      	lsrs	r3, r3, #16
 800e624:	2010      	movs	r0, #16
 800e626:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e62a:	bf04      	itt	eq
 800e62c:	0a1b      	lsreq	r3, r3, #8
 800e62e:	3008      	addeq	r0, #8
 800e630:	071a      	lsls	r2, r3, #28
 800e632:	bf04      	itt	eq
 800e634:	091b      	lsreq	r3, r3, #4
 800e636:	3004      	addeq	r0, #4
 800e638:	079a      	lsls	r2, r3, #30
 800e63a:	bf04      	itt	eq
 800e63c:	089b      	lsreq	r3, r3, #2
 800e63e:	3002      	addeq	r0, #2
 800e640:	07da      	lsls	r2, r3, #31
 800e642:	d403      	bmi.n	800e64c <__lo0bits+0x50>
 800e644:	085b      	lsrs	r3, r3, #1
 800e646:	f100 0001 	add.w	r0, r0, #1
 800e64a:	d005      	beq.n	800e658 <__lo0bits+0x5c>
 800e64c:	600b      	str	r3, [r1, #0]
 800e64e:	4770      	bx	lr
 800e650:	4610      	mov	r0, r2
 800e652:	e7e8      	b.n	800e626 <__lo0bits+0x2a>
 800e654:	2000      	movs	r0, #0
 800e656:	4770      	bx	lr
 800e658:	2020      	movs	r0, #32
 800e65a:	4770      	bx	lr

0800e65c <__i2b>:
 800e65c:	b510      	push	{r4, lr}
 800e65e:	460c      	mov	r4, r1
 800e660:	2101      	movs	r1, #1
 800e662:	f7ff feff 	bl	800e464 <_Balloc>
 800e666:	4602      	mov	r2, r0
 800e668:	b928      	cbnz	r0, 800e676 <__i2b+0x1a>
 800e66a:	4b05      	ldr	r3, [pc, #20]	; (800e680 <__i2b+0x24>)
 800e66c:	4805      	ldr	r0, [pc, #20]	; (800e684 <__i2b+0x28>)
 800e66e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e672:	f000 fe4b 	bl	800f30c <__assert_func>
 800e676:	2301      	movs	r3, #1
 800e678:	6144      	str	r4, [r0, #20]
 800e67a:	6103      	str	r3, [r0, #16]
 800e67c:	bd10      	pop	{r4, pc}
 800e67e:	bf00      	nop
 800e680:	0800f94b 	.word	0x0800f94b
 800e684:	0800f9bc 	.word	0x0800f9bc

0800e688 <__multiply>:
 800e688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e68c:	4614      	mov	r4, r2
 800e68e:	690a      	ldr	r2, [r1, #16]
 800e690:	6923      	ldr	r3, [r4, #16]
 800e692:	429a      	cmp	r2, r3
 800e694:	bfb8      	it	lt
 800e696:	460b      	movlt	r3, r1
 800e698:	460d      	mov	r5, r1
 800e69a:	bfbc      	itt	lt
 800e69c:	4625      	movlt	r5, r4
 800e69e:	461c      	movlt	r4, r3
 800e6a0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e6a4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e6a8:	68ab      	ldr	r3, [r5, #8]
 800e6aa:	6869      	ldr	r1, [r5, #4]
 800e6ac:	eb0a 0709 	add.w	r7, sl, r9
 800e6b0:	42bb      	cmp	r3, r7
 800e6b2:	b085      	sub	sp, #20
 800e6b4:	bfb8      	it	lt
 800e6b6:	3101      	addlt	r1, #1
 800e6b8:	f7ff fed4 	bl	800e464 <_Balloc>
 800e6bc:	b930      	cbnz	r0, 800e6cc <__multiply+0x44>
 800e6be:	4602      	mov	r2, r0
 800e6c0:	4b42      	ldr	r3, [pc, #264]	; (800e7cc <__multiply+0x144>)
 800e6c2:	4843      	ldr	r0, [pc, #268]	; (800e7d0 <__multiply+0x148>)
 800e6c4:	f240 115d 	movw	r1, #349	; 0x15d
 800e6c8:	f000 fe20 	bl	800f30c <__assert_func>
 800e6cc:	f100 0614 	add.w	r6, r0, #20
 800e6d0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e6d4:	4633      	mov	r3, r6
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	4543      	cmp	r3, r8
 800e6da:	d31e      	bcc.n	800e71a <__multiply+0x92>
 800e6dc:	f105 0c14 	add.w	ip, r5, #20
 800e6e0:	f104 0314 	add.w	r3, r4, #20
 800e6e4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e6e8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e6ec:	9202      	str	r2, [sp, #8]
 800e6ee:	ebac 0205 	sub.w	r2, ip, r5
 800e6f2:	3a15      	subs	r2, #21
 800e6f4:	f022 0203 	bic.w	r2, r2, #3
 800e6f8:	3204      	adds	r2, #4
 800e6fa:	f105 0115 	add.w	r1, r5, #21
 800e6fe:	458c      	cmp	ip, r1
 800e700:	bf38      	it	cc
 800e702:	2204      	movcc	r2, #4
 800e704:	9201      	str	r2, [sp, #4]
 800e706:	9a02      	ldr	r2, [sp, #8]
 800e708:	9303      	str	r3, [sp, #12]
 800e70a:	429a      	cmp	r2, r3
 800e70c:	d808      	bhi.n	800e720 <__multiply+0x98>
 800e70e:	2f00      	cmp	r7, #0
 800e710:	dc55      	bgt.n	800e7be <__multiply+0x136>
 800e712:	6107      	str	r7, [r0, #16]
 800e714:	b005      	add	sp, #20
 800e716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e71a:	f843 2b04 	str.w	r2, [r3], #4
 800e71e:	e7db      	b.n	800e6d8 <__multiply+0x50>
 800e720:	f8b3 a000 	ldrh.w	sl, [r3]
 800e724:	f1ba 0f00 	cmp.w	sl, #0
 800e728:	d020      	beq.n	800e76c <__multiply+0xe4>
 800e72a:	f105 0e14 	add.w	lr, r5, #20
 800e72e:	46b1      	mov	r9, r6
 800e730:	2200      	movs	r2, #0
 800e732:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e736:	f8d9 b000 	ldr.w	fp, [r9]
 800e73a:	b2a1      	uxth	r1, r4
 800e73c:	fa1f fb8b 	uxth.w	fp, fp
 800e740:	fb0a b101 	mla	r1, sl, r1, fp
 800e744:	4411      	add	r1, r2
 800e746:	f8d9 2000 	ldr.w	r2, [r9]
 800e74a:	0c24      	lsrs	r4, r4, #16
 800e74c:	0c12      	lsrs	r2, r2, #16
 800e74e:	fb0a 2404 	mla	r4, sl, r4, r2
 800e752:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e756:	b289      	uxth	r1, r1
 800e758:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e75c:	45f4      	cmp	ip, lr
 800e75e:	f849 1b04 	str.w	r1, [r9], #4
 800e762:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e766:	d8e4      	bhi.n	800e732 <__multiply+0xaa>
 800e768:	9901      	ldr	r1, [sp, #4]
 800e76a:	5072      	str	r2, [r6, r1]
 800e76c:	9a03      	ldr	r2, [sp, #12]
 800e76e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e772:	3304      	adds	r3, #4
 800e774:	f1b9 0f00 	cmp.w	r9, #0
 800e778:	d01f      	beq.n	800e7ba <__multiply+0x132>
 800e77a:	6834      	ldr	r4, [r6, #0]
 800e77c:	f105 0114 	add.w	r1, r5, #20
 800e780:	46b6      	mov	lr, r6
 800e782:	f04f 0a00 	mov.w	sl, #0
 800e786:	880a      	ldrh	r2, [r1, #0]
 800e788:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e78c:	fb09 b202 	mla	r2, r9, r2, fp
 800e790:	4492      	add	sl, r2
 800e792:	b2a4      	uxth	r4, r4
 800e794:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e798:	f84e 4b04 	str.w	r4, [lr], #4
 800e79c:	f851 4b04 	ldr.w	r4, [r1], #4
 800e7a0:	f8be 2000 	ldrh.w	r2, [lr]
 800e7a4:	0c24      	lsrs	r4, r4, #16
 800e7a6:	fb09 2404 	mla	r4, r9, r4, r2
 800e7aa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e7ae:	458c      	cmp	ip, r1
 800e7b0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e7b4:	d8e7      	bhi.n	800e786 <__multiply+0xfe>
 800e7b6:	9a01      	ldr	r2, [sp, #4]
 800e7b8:	50b4      	str	r4, [r6, r2]
 800e7ba:	3604      	adds	r6, #4
 800e7bc:	e7a3      	b.n	800e706 <__multiply+0x7e>
 800e7be:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d1a5      	bne.n	800e712 <__multiply+0x8a>
 800e7c6:	3f01      	subs	r7, #1
 800e7c8:	e7a1      	b.n	800e70e <__multiply+0x86>
 800e7ca:	bf00      	nop
 800e7cc:	0800f94b 	.word	0x0800f94b
 800e7d0:	0800f9bc 	.word	0x0800f9bc

0800e7d4 <__pow5mult>:
 800e7d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7d8:	4615      	mov	r5, r2
 800e7da:	f012 0203 	ands.w	r2, r2, #3
 800e7de:	4606      	mov	r6, r0
 800e7e0:	460f      	mov	r7, r1
 800e7e2:	d007      	beq.n	800e7f4 <__pow5mult+0x20>
 800e7e4:	4c25      	ldr	r4, [pc, #148]	; (800e87c <__pow5mult+0xa8>)
 800e7e6:	3a01      	subs	r2, #1
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e7ee:	f7ff fe9b 	bl	800e528 <__multadd>
 800e7f2:	4607      	mov	r7, r0
 800e7f4:	10ad      	asrs	r5, r5, #2
 800e7f6:	d03d      	beq.n	800e874 <__pow5mult+0xa0>
 800e7f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e7fa:	b97c      	cbnz	r4, 800e81c <__pow5mult+0x48>
 800e7fc:	2010      	movs	r0, #16
 800e7fe:	f7ff fe29 	bl	800e454 <malloc>
 800e802:	4602      	mov	r2, r0
 800e804:	6270      	str	r0, [r6, #36]	; 0x24
 800e806:	b928      	cbnz	r0, 800e814 <__pow5mult+0x40>
 800e808:	4b1d      	ldr	r3, [pc, #116]	; (800e880 <__pow5mult+0xac>)
 800e80a:	481e      	ldr	r0, [pc, #120]	; (800e884 <__pow5mult+0xb0>)
 800e80c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e810:	f000 fd7c 	bl	800f30c <__assert_func>
 800e814:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e818:	6004      	str	r4, [r0, #0]
 800e81a:	60c4      	str	r4, [r0, #12]
 800e81c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e820:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e824:	b94c      	cbnz	r4, 800e83a <__pow5mult+0x66>
 800e826:	f240 2171 	movw	r1, #625	; 0x271
 800e82a:	4630      	mov	r0, r6
 800e82c:	f7ff ff16 	bl	800e65c <__i2b>
 800e830:	2300      	movs	r3, #0
 800e832:	f8c8 0008 	str.w	r0, [r8, #8]
 800e836:	4604      	mov	r4, r0
 800e838:	6003      	str	r3, [r0, #0]
 800e83a:	f04f 0900 	mov.w	r9, #0
 800e83e:	07eb      	lsls	r3, r5, #31
 800e840:	d50a      	bpl.n	800e858 <__pow5mult+0x84>
 800e842:	4639      	mov	r1, r7
 800e844:	4622      	mov	r2, r4
 800e846:	4630      	mov	r0, r6
 800e848:	f7ff ff1e 	bl	800e688 <__multiply>
 800e84c:	4639      	mov	r1, r7
 800e84e:	4680      	mov	r8, r0
 800e850:	4630      	mov	r0, r6
 800e852:	f7ff fe47 	bl	800e4e4 <_Bfree>
 800e856:	4647      	mov	r7, r8
 800e858:	106d      	asrs	r5, r5, #1
 800e85a:	d00b      	beq.n	800e874 <__pow5mult+0xa0>
 800e85c:	6820      	ldr	r0, [r4, #0]
 800e85e:	b938      	cbnz	r0, 800e870 <__pow5mult+0x9c>
 800e860:	4622      	mov	r2, r4
 800e862:	4621      	mov	r1, r4
 800e864:	4630      	mov	r0, r6
 800e866:	f7ff ff0f 	bl	800e688 <__multiply>
 800e86a:	6020      	str	r0, [r4, #0]
 800e86c:	f8c0 9000 	str.w	r9, [r0]
 800e870:	4604      	mov	r4, r0
 800e872:	e7e4      	b.n	800e83e <__pow5mult+0x6a>
 800e874:	4638      	mov	r0, r7
 800e876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e87a:	bf00      	nop
 800e87c:	0800fb10 	.word	0x0800fb10
 800e880:	0800f8d5 	.word	0x0800f8d5
 800e884:	0800f9bc 	.word	0x0800f9bc

0800e888 <__lshift>:
 800e888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e88c:	460c      	mov	r4, r1
 800e88e:	6849      	ldr	r1, [r1, #4]
 800e890:	6923      	ldr	r3, [r4, #16]
 800e892:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e896:	68a3      	ldr	r3, [r4, #8]
 800e898:	4607      	mov	r7, r0
 800e89a:	4691      	mov	r9, r2
 800e89c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e8a0:	f108 0601 	add.w	r6, r8, #1
 800e8a4:	42b3      	cmp	r3, r6
 800e8a6:	db0b      	blt.n	800e8c0 <__lshift+0x38>
 800e8a8:	4638      	mov	r0, r7
 800e8aa:	f7ff fddb 	bl	800e464 <_Balloc>
 800e8ae:	4605      	mov	r5, r0
 800e8b0:	b948      	cbnz	r0, 800e8c6 <__lshift+0x3e>
 800e8b2:	4602      	mov	r2, r0
 800e8b4:	4b28      	ldr	r3, [pc, #160]	; (800e958 <__lshift+0xd0>)
 800e8b6:	4829      	ldr	r0, [pc, #164]	; (800e95c <__lshift+0xd4>)
 800e8b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e8bc:	f000 fd26 	bl	800f30c <__assert_func>
 800e8c0:	3101      	adds	r1, #1
 800e8c2:	005b      	lsls	r3, r3, #1
 800e8c4:	e7ee      	b.n	800e8a4 <__lshift+0x1c>
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	f100 0114 	add.w	r1, r0, #20
 800e8cc:	f100 0210 	add.w	r2, r0, #16
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	4553      	cmp	r3, sl
 800e8d4:	db33      	blt.n	800e93e <__lshift+0xb6>
 800e8d6:	6920      	ldr	r0, [r4, #16]
 800e8d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e8dc:	f104 0314 	add.w	r3, r4, #20
 800e8e0:	f019 091f 	ands.w	r9, r9, #31
 800e8e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e8e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e8ec:	d02b      	beq.n	800e946 <__lshift+0xbe>
 800e8ee:	f1c9 0e20 	rsb	lr, r9, #32
 800e8f2:	468a      	mov	sl, r1
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	6818      	ldr	r0, [r3, #0]
 800e8f8:	fa00 f009 	lsl.w	r0, r0, r9
 800e8fc:	4302      	orrs	r2, r0
 800e8fe:	f84a 2b04 	str.w	r2, [sl], #4
 800e902:	f853 2b04 	ldr.w	r2, [r3], #4
 800e906:	459c      	cmp	ip, r3
 800e908:	fa22 f20e 	lsr.w	r2, r2, lr
 800e90c:	d8f3      	bhi.n	800e8f6 <__lshift+0x6e>
 800e90e:	ebac 0304 	sub.w	r3, ip, r4
 800e912:	3b15      	subs	r3, #21
 800e914:	f023 0303 	bic.w	r3, r3, #3
 800e918:	3304      	adds	r3, #4
 800e91a:	f104 0015 	add.w	r0, r4, #21
 800e91e:	4584      	cmp	ip, r0
 800e920:	bf38      	it	cc
 800e922:	2304      	movcc	r3, #4
 800e924:	50ca      	str	r2, [r1, r3]
 800e926:	b10a      	cbz	r2, 800e92c <__lshift+0xa4>
 800e928:	f108 0602 	add.w	r6, r8, #2
 800e92c:	3e01      	subs	r6, #1
 800e92e:	4638      	mov	r0, r7
 800e930:	612e      	str	r6, [r5, #16]
 800e932:	4621      	mov	r1, r4
 800e934:	f7ff fdd6 	bl	800e4e4 <_Bfree>
 800e938:	4628      	mov	r0, r5
 800e93a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e93e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e942:	3301      	adds	r3, #1
 800e944:	e7c5      	b.n	800e8d2 <__lshift+0x4a>
 800e946:	3904      	subs	r1, #4
 800e948:	f853 2b04 	ldr.w	r2, [r3], #4
 800e94c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e950:	459c      	cmp	ip, r3
 800e952:	d8f9      	bhi.n	800e948 <__lshift+0xc0>
 800e954:	e7ea      	b.n	800e92c <__lshift+0xa4>
 800e956:	bf00      	nop
 800e958:	0800f94b 	.word	0x0800f94b
 800e95c:	0800f9bc 	.word	0x0800f9bc

0800e960 <__mcmp>:
 800e960:	b530      	push	{r4, r5, lr}
 800e962:	6902      	ldr	r2, [r0, #16]
 800e964:	690c      	ldr	r4, [r1, #16]
 800e966:	1b12      	subs	r2, r2, r4
 800e968:	d10e      	bne.n	800e988 <__mcmp+0x28>
 800e96a:	f100 0314 	add.w	r3, r0, #20
 800e96e:	3114      	adds	r1, #20
 800e970:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e974:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e978:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e97c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e980:	42a5      	cmp	r5, r4
 800e982:	d003      	beq.n	800e98c <__mcmp+0x2c>
 800e984:	d305      	bcc.n	800e992 <__mcmp+0x32>
 800e986:	2201      	movs	r2, #1
 800e988:	4610      	mov	r0, r2
 800e98a:	bd30      	pop	{r4, r5, pc}
 800e98c:	4283      	cmp	r3, r0
 800e98e:	d3f3      	bcc.n	800e978 <__mcmp+0x18>
 800e990:	e7fa      	b.n	800e988 <__mcmp+0x28>
 800e992:	f04f 32ff 	mov.w	r2, #4294967295
 800e996:	e7f7      	b.n	800e988 <__mcmp+0x28>

0800e998 <__mdiff>:
 800e998:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e99c:	460c      	mov	r4, r1
 800e99e:	4606      	mov	r6, r0
 800e9a0:	4611      	mov	r1, r2
 800e9a2:	4620      	mov	r0, r4
 800e9a4:	4617      	mov	r7, r2
 800e9a6:	f7ff ffdb 	bl	800e960 <__mcmp>
 800e9aa:	1e05      	subs	r5, r0, #0
 800e9ac:	d110      	bne.n	800e9d0 <__mdiff+0x38>
 800e9ae:	4629      	mov	r1, r5
 800e9b0:	4630      	mov	r0, r6
 800e9b2:	f7ff fd57 	bl	800e464 <_Balloc>
 800e9b6:	b930      	cbnz	r0, 800e9c6 <__mdiff+0x2e>
 800e9b8:	4b39      	ldr	r3, [pc, #228]	; (800eaa0 <__mdiff+0x108>)
 800e9ba:	4602      	mov	r2, r0
 800e9bc:	f240 2132 	movw	r1, #562	; 0x232
 800e9c0:	4838      	ldr	r0, [pc, #224]	; (800eaa4 <__mdiff+0x10c>)
 800e9c2:	f000 fca3 	bl	800f30c <__assert_func>
 800e9c6:	2301      	movs	r3, #1
 800e9c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e9cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9d0:	bfa4      	itt	ge
 800e9d2:	463b      	movge	r3, r7
 800e9d4:	4627      	movge	r7, r4
 800e9d6:	4630      	mov	r0, r6
 800e9d8:	6879      	ldr	r1, [r7, #4]
 800e9da:	bfa6      	itte	ge
 800e9dc:	461c      	movge	r4, r3
 800e9de:	2500      	movge	r5, #0
 800e9e0:	2501      	movlt	r5, #1
 800e9e2:	f7ff fd3f 	bl	800e464 <_Balloc>
 800e9e6:	b920      	cbnz	r0, 800e9f2 <__mdiff+0x5a>
 800e9e8:	4b2d      	ldr	r3, [pc, #180]	; (800eaa0 <__mdiff+0x108>)
 800e9ea:	4602      	mov	r2, r0
 800e9ec:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e9f0:	e7e6      	b.n	800e9c0 <__mdiff+0x28>
 800e9f2:	693e      	ldr	r6, [r7, #16]
 800e9f4:	60c5      	str	r5, [r0, #12]
 800e9f6:	6925      	ldr	r5, [r4, #16]
 800e9f8:	f107 0114 	add.w	r1, r7, #20
 800e9fc:	f104 0914 	add.w	r9, r4, #20
 800ea00:	f100 0e14 	add.w	lr, r0, #20
 800ea04:	f107 0210 	add.w	r2, r7, #16
 800ea08:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ea0c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800ea10:	46f2      	mov	sl, lr
 800ea12:	2700      	movs	r7, #0
 800ea14:	f859 3b04 	ldr.w	r3, [r9], #4
 800ea18:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ea1c:	fa1f f883 	uxth.w	r8, r3
 800ea20:	fa17 f78b 	uxtah	r7, r7, fp
 800ea24:	0c1b      	lsrs	r3, r3, #16
 800ea26:	eba7 0808 	sub.w	r8, r7, r8
 800ea2a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ea2e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ea32:	fa1f f888 	uxth.w	r8, r8
 800ea36:	141f      	asrs	r7, r3, #16
 800ea38:	454d      	cmp	r5, r9
 800ea3a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ea3e:	f84a 3b04 	str.w	r3, [sl], #4
 800ea42:	d8e7      	bhi.n	800ea14 <__mdiff+0x7c>
 800ea44:	1b2b      	subs	r3, r5, r4
 800ea46:	3b15      	subs	r3, #21
 800ea48:	f023 0303 	bic.w	r3, r3, #3
 800ea4c:	3304      	adds	r3, #4
 800ea4e:	3415      	adds	r4, #21
 800ea50:	42a5      	cmp	r5, r4
 800ea52:	bf38      	it	cc
 800ea54:	2304      	movcc	r3, #4
 800ea56:	4419      	add	r1, r3
 800ea58:	4473      	add	r3, lr
 800ea5a:	469e      	mov	lr, r3
 800ea5c:	460d      	mov	r5, r1
 800ea5e:	4565      	cmp	r5, ip
 800ea60:	d30e      	bcc.n	800ea80 <__mdiff+0xe8>
 800ea62:	f10c 0203 	add.w	r2, ip, #3
 800ea66:	1a52      	subs	r2, r2, r1
 800ea68:	f022 0203 	bic.w	r2, r2, #3
 800ea6c:	3903      	subs	r1, #3
 800ea6e:	458c      	cmp	ip, r1
 800ea70:	bf38      	it	cc
 800ea72:	2200      	movcc	r2, #0
 800ea74:	441a      	add	r2, r3
 800ea76:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ea7a:	b17b      	cbz	r3, 800ea9c <__mdiff+0x104>
 800ea7c:	6106      	str	r6, [r0, #16]
 800ea7e:	e7a5      	b.n	800e9cc <__mdiff+0x34>
 800ea80:	f855 8b04 	ldr.w	r8, [r5], #4
 800ea84:	fa17 f488 	uxtah	r4, r7, r8
 800ea88:	1422      	asrs	r2, r4, #16
 800ea8a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ea8e:	b2a4      	uxth	r4, r4
 800ea90:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ea94:	f84e 4b04 	str.w	r4, [lr], #4
 800ea98:	1417      	asrs	r7, r2, #16
 800ea9a:	e7e0      	b.n	800ea5e <__mdiff+0xc6>
 800ea9c:	3e01      	subs	r6, #1
 800ea9e:	e7ea      	b.n	800ea76 <__mdiff+0xde>
 800eaa0:	0800f94b 	.word	0x0800f94b
 800eaa4:	0800f9bc 	.word	0x0800f9bc

0800eaa8 <__d2b>:
 800eaa8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800eaac:	4689      	mov	r9, r1
 800eaae:	2101      	movs	r1, #1
 800eab0:	ec57 6b10 	vmov	r6, r7, d0
 800eab4:	4690      	mov	r8, r2
 800eab6:	f7ff fcd5 	bl	800e464 <_Balloc>
 800eaba:	4604      	mov	r4, r0
 800eabc:	b930      	cbnz	r0, 800eacc <__d2b+0x24>
 800eabe:	4602      	mov	r2, r0
 800eac0:	4b25      	ldr	r3, [pc, #148]	; (800eb58 <__d2b+0xb0>)
 800eac2:	4826      	ldr	r0, [pc, #152]	; (800eb5c <__d2b+0xb4>)
 800eac4:	f240 310a 	movw	r1, #778	; 0x30a
 800eac8:	f000 fc20 	bl	800f30c <__assert_func>
 800eacc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ead0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ead4:	bb35      	cbnz	r5, 800eb24 <__d2b+0x7c>
 800ead6:	2e00      	cmp	r6, #0
 800ead8:	9301      	str	r3, [sp, #4]
 800eada:	d028      	beq.n	800eb2e <__d2b+0x86>
 800eadc:	4668      	mov	r0, sp
 800eade:	9600      	str	r6, [sp, #0]
 800eae0:	f7ff fd8c 	bl	800e5fc <__lo0bits>
 800eae4:	9900      	ldr	r1, [sp, #0]
 800eae6:	b300      	cbz	r0, 800eb2a <__d2b+0x82>
 800eae8:	9a01      	ldr	r2, [sp, #4]
 800eaea:	f1c0 0320 	rsb	r3, r0, #32
 800eaee:	fa02 f303 	lsl.w	r3, r2, r3
 800eaf2:	430b      	orrs	r3, r1
 800eaf4:	40c2      	lsrs	r2, r0
 800eaf6:	6163      	str	r3, [r4, #20]
 800eaf8:	9201      	str	r2, [sp, #4]
 800eafa:	9b01      	ldr	r3, [sp, #4]
 800eafc:	61a3      	str	r3, [r4, #24]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	bf14      	ite	ne
 800eb02:	2202      	movne	r2, #2
 800eb04:	2201      	moveq	r2, #1
 800eb06:	6122      	str	r2, [r4, #16]
 800eb08:	b1d5      	cbz	r5, 800eb40 <__d2b+0x98>
 800eb0a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800eb0e:	4405      	add	r5, r0
 800eb10:	f8c9 5000 	str.w	r5, [r9]
 800eb14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800eb18:	f8c8 0000 	str.w	r0, [r8]
 800eb1c:	4620      	mov	r0, r4
 800eb1e:	b003      	add	sp, #12
 800eb20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eb28:	e7d5      	b.n	800ead6 <__d2b+0x2e>
 800eb2a:	6161      	str	r1, [r4, #20]
 800eb2c:	e7e5      	b.n	800eafa <__d2b+0x52>
 800eb2e:	a801      	add	r0, sp, #4
 800eb30:	f7ff fd64 	bl	800e5fc <__lo0bits>
 800eb34:	9b01      	ldr	r3, [sp, #4]
 800eb36:	6163      	str	r3, [r4, #20]
 800eb38:	2201      	movs	r2, #1
 800eb3a:	6122      	str	r2, [r4, #16]
 800eb3c:	3020      	adds	r0, #32
 800eb3e:	e7e3      	b.n	800eb08 <__d2b+0x60>
 800eb40:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eb44:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800eb48:	f8c9 0000 	str.w	r0, [r9]
 800eb4c:	6918      	ldr	r0, [r3, #16]
 800eb4e:	f7ff fd35 	bl	800e5bc <__hi0bits>
 800eb52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eb56:	e7df      	b.n	800eb18 <__d2b+0x70>
 800eb58:	0800f94b 	.word	0x0800f94b
 800eb5c:	0800f9bc 	.word	0x0800f9bc

0800eb60 <_calloc_r>:
 800eb60:	b513      	push	{r0, r1, r4, lr}
 800eb62:	434a      	muls	r2, r1
 800eb64:	4611      	mov	r1, r2
 800eb66:	9201      	str	r2, [sp, #4]
 800eb68:	f000 f85a 	bl	800ec20 <_malloc_r>
 800eb6c:	4604      	mov	r4, r0
 800eb6e:	b118      	cbz	r0, 800eb78 <_calloc_r+0x18>
 800eb70:	9a01      	ldr	r2, [sp, #4]
 800eb72:	2100      	movs	r1, #0
 800eb74:	f7fd fe82 	bl	800c87c <memset>
 800eb78:	4620      	mov	r0, r4
 800eb7a:	b002      	add	sp, #8
 800eb7c:	bd10      	pop	{r4, pc}
	...

0800eb80 <_free_r>:
 800eb80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eb82:	2900      	cmp	r1, #0
 800eb84:	d048      	beq.n	800ec18 <_free_r+0x98>
 800eb86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb8a:	9001      	str	r0, [sp, #4]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	f1a1 0404 	sub.w	r4, r1, #4
 800eb92:	bfb8      	it	lt
 800eb94:	18e4      	addlt	r4, r4, r3
 800eb96:	f000 fc59 	bl	800f44c <__malloc_lock>
 800eb9a:	4a20      	ldr	r2, [pc, #128]	; (800ec1c <_free_r+0x9c>)
 800eb9c:	9801      	ldr	r0, [sp, #4]
 800eb9e:	6813      	ldr	r3, [r2, #0]
 800eba0:	4615      	mov	r5, r2
 800eba2:	b933      	cbnz	r3, 800ebb2 <_free_r+0x32>
 800eba4:	6063      	str	r3, [r4, #4]
 800eba6:	6014      	str	r4, [r2, #0]
 800eba8:	b003      	add	sp, #12
 800ebaa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ebae:	f000 bc53 	b.w	800f458 <__malloc_unlock>
 800ebb2:	42a3      	cmp	r3, r4
 800ebb4:	d90b      	bls.n	800ebce <_free_r+0x4e>
 800ebb6:	6821      	ldr	r1, [r4, #0]
 800ebb8:	1862      	adds	r2, r4, r1
 800ebba:	4293      	cmp	r3, r2
 800ebbc:	bf04      	itt	eq
 800ebbe:	681a      	ldreq	r2, [r3, #0]
 800ebc0:	685b      	ldreq	r3, [r3, #4]
 800ebc2:	6063      	str	r3, [r4, #4]
 800ebc4:	bf04      	itt	eq
 800ebc6:	1852      	addeq	r2, r2, r1
 800ebc8:	6022      	streq	r2, [r4, #0]
 800ebca:	602c      	str	r4, [r5, #0]
 800ebcc:	e7ec      	b.n	800eba8 <_free_r+0x28>
 800ebce:	461a      	mov	r2, r3
 800ebd0:	685b      	ldr	r3, [r3, #4]
 800ebd2:	b10b      	cbz	r3, 800ebd8 <_free_r+0x58>
 800ebd4:	42a3      	cmp	r3, r4
 800ebd6:	d9fa      	bls.n	800ebce <_free_r+0x4e>
 800ebd8:	6811      	ldr	r1, [r2, #0]
 800ebda:	1855      	adds	r5, r2, r1
 800ebdc:	42a5      	cmp	r5, r4
 800ebde:	d10b      	bne.n	800ebf8 <_free_r+0x78>
 800ebe0:	6824      	ldr	r4, [r4, #0]
 800ebe2:	4421      	add	r1, r4
 800ebe4:	1854      	adds	r4, r2, r1
 800ebe6:	42a3      	cmp	r3, r4
 800ebe8:	6011      	str	r1, [r2, #0]
 800ebea:	d1dd      	bne.n	800eba8 <_free_r+0x28>
 800ebec:	681c      	ldr	r4, [r3, #0]
 800ebee:	685b      	ldr	r3, [r3, #4]
 800ebf0:	6053      	str	r3, [r2, #4]
 800ebf2:	4421      	add	r1, r4
 800ebf4:	6011      	str	r1, [r2, #0]
 800ebf6:	e7d7      	b.n	800eba8 <_free_r+0x28>
 800ebf8:	d902      	bls.n	800ec00 <_free_r+0x80>
 800ebfa:	230c      	movs	r3, #12
 800ebfc:	6003      	str	r3, [r0, #0]
 800ebfe:	e7d3      	b.n	800eba8 <_free_r+0x28>
 800ec00:	6825      	ldr	r5, [r4, #0]
 800ec02:	1961      	adds	r1, r4, r5
 800ec04:	428b      	cmp	r3, r1
 800ec06:	bf04      	itt	eq
 800ec08:	6819      	ldreq	r1, [r3, #0]
 800ec0a:	685b      	ldreq	r3, [r3, #4]
 800ec0c:	6063      	str	r3, [r4, #4]
 800ec0e:	bf04      	itt	eq
 800ec10:	1949      	addeq	r1, r1, r5
 800ec12:	6021      	streq	r1, [r4, #0]
 800ec14:	6054      	str	r4, [r2, #4]
 800ec16:	e7c7      	b.n	800eba8 <_free_r+0x28>
 800ec18:	b003      	add	sp, #12
 800ec1a:	bd30      	pop	{r4, r5, pc}
 800ec1c:	24000214 	.word	0x24000214

0800ec20 <_malloc_r>:
 800ec20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec22:	1ccd      	adds	r5, r1, #3
 800ec24:	f025 0503 	bic.w	r5, r5, #3
 800ec28:	3508      	adds	r5, #8
 800ec2a:	2d0c      	cmp	r5, #12
 800ec2c:	bf38      	it	cc
 800ec2e:	250c      	movcc	r5, #12
 800ec30:	2d00      	cmp	r5, #0
 800ec32:	4606      	mov	r6, r0
 800ec34:	db01      	blt.n	800ec3a <_malloc_r+0x1a>
 800ec36:	42a9      	cmp	r1, r5
 800ec38:	d903      	bls.n	800ec42 <_malloc_r+0x22>
 800ec3a:	230c      	movs	r3, #12
 800ec3c:	6033      	str	r3, [r6, #0]
 800ec3e:	2000      	movs	r0, #0
 800ec40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec42:	f000 fc03 	bl	800f44c <__malloc_lock>
 800ec46:	4921      	ldr	r1, [pc, #132]	; (800eccc <_malloc_r+0xac>)
 800ec48:	680a      	ldr	r2, [r1, #0]
 800ec4a:	4614      	mov	r4, r2
 800ec4c:	b99c      	cbnz	r4, 800ec76 <_malloc_r+0x56>
 800ec4e:	4f20      	ldr	r7, [pc, #128]	; (800ecd0 <_malloc_r+0xb0>)
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	b923      	cbnz	r3, 800ec5e <_malloc_r+0x3e>
 800ec54:	4621      	mov	r1, r4
 800ec56:	4630      	mov	r0, r6
 800ec58:	f000 faf2 	bl	800f240 <_sbrk_r>
 800ec5c:	6038      	str	r0, [r7, #0]
 800ec5e:	4629      	mov	r1, r5
 800ec60:	4630      	mov	r0, r6
 800ec62:	f000 faed 	bl	800f240 <_sbrk_r>
 800ec66:	1c43      	adds	r3, r0, #1
 800ec68:	d123      	bne.n	800ecb2 <_malloc_r+0x92>
 800ec6a:	230c      	movs	r3, #12
 800ec6c:	6033      	str	r3, [r6, #0]
 800ec6e:	4630      	mov	r0, r6
 800ec70:	f000 fbf2 	bl	800f458 <__malloc_unlock>
 800ec74:	e7e3      	b.n	800ec3e <_malloc_r+0x1e>
 800ec76:	6823      	ldr	r3, [r4, #0]
 800ec78:	1b5b      	subs	r3, r3, r5
 800ec7a:	d417      	bmi.n	800ecac <_malloc_r+0x8c>
 800ec7c:	2b0b      	cmp	r3, #11
 800ec7e:	d903      	bls.n	800ec88 <_malloc_r+0x68>
 800ec80:	6023      	str	r3, [r4, #0]
 800ec82:	441c      	add	r4, r3
 800ec84:	6025      	str	r5, [r4, #0]
 800ec86:	e004      	b.n	800ec92 <_malloc_r+0x72>
 800ec88:	6863      	ldr	r3, [r4, #4]
 800ec8a:	42a2      	cmp	r2, r4
 800ec8c:	bf0c      	ite	eq
 800ec8e:	600b      	streq	r3, [r1, #0]
 800ec90:	6053      	strne	r3, [r2, #4]
 800ec92:	4630      	mov	r0, r6
 800ec94:	f000 fbe0 	bl	800f458 <__malloc_unlock>
 800ec98:	f104 000b 	add.w	r0, r4, #11
 800ec9c:	1d23      	adds	r3, r4, #4
 800ec9e:	f020 0007 	bic.w	r0, r0, #7
 800eca2:	1ac2      	subs	r2, r0, r3
 800eca4:	d0cc      	beq.n	800ec40 <_malloc_r+0x20>
 800eca6:	1a1b      	subs	r3, r3, r0
 800eca8:	50a3      	str	r3, [r4, r2]
 800ecaa:	e7c9      	b.n	800ec40 <_malloc_r+0x20>
 800ecac:	4622      	mov	r2, r4
 800ecae:	6864      	ldr	r4, [r4, #4]
 800ecb0:	e7cc      	b.n	800ec4c <_malloc_r+0x2c>
 800ecb2:	1cc4      	adds	r4, r0, #3
 800ecb4:	f024 0403 	bic.w	r4, r4, #3
 800ecb8:	42a0      	cmp	r0, r4
 800ecba:	d0e3      	beq.n	800ec84 <_malloc_r+0x64>
 800ecbc:	1a21      	subs	r1, r4, r0
 800ecbe:	4630      	mov	r0, r6
 800ecc0:	f000 fabe 	bl	800f240 <_sbrk_r>
 800ecc4:	3001      	adds	r0, #1
 800ecc6:	d1dd      	bne.n	800ec84 <_malloc_r+0x64>
 800ecc8:	e7cf      	b.n	800ec6a <_malloc_r+0x4a>
 800ecca:	bf00      	nop
 800eccc:	24000214 	.word	0x24000214
 800ecd0:	24000218 	.word	0x24000218

0800ecd4 <__ssputs_r>:
 800ecd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecd8:	688e      	ldr	r6, [r1, #8]
 800ecda:	429e      	cmp	r6, r3
 800ecdc:	4682      	mov	sl, r0
 800ecde:	460c      	mov	r4, r1
 800ece0:	4690      	mov	r8, r2
 800ece2:	461f      	mov	r7, r3
 800ece4:	d838      	bhi.n	800ed58 <__ssputs_r+0x84>
 800ece6:	898a      	ldrh	r2, [r1, #12]
 800ece8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ecec:	d032      	beq.n	800ed54 <__ssputs_r+0x80>
 800ecee:	6825      	ldr	r5, [r4, #0]
 800ecf0:	6909      	ldr	r1, [r1, #16]
 800ecf2:	eba5 0901 	sub.w	r9, r5, r1
 800ecf6:	6965      	ldr	r5, [r4, #20]
 800ecf8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ecfc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ed00:	3301      	adds	r3, #1
 800ed02:	444b      	add	r3, r9
 800ed04:	106d      	asrs	r5, r5, #1
 800ed06:	429d      	cmp	r5, r3
 800ed08:	bf38      	it	cc
 800ed0a:	461d      	movcc	r5, r3
 800ed0c:	0553      	lsls	r3, r2, #21
 800ed0e:	d531      	bpl.n	800ed74 <__ssputs_r+0xa0>
 800ed10:	4629      	mov	r1, r5
 800ed12:	f7ff ff85 	bl	800ec20 <_malloc_r>
 800ed16:	4606      	mov	r6, r0
 800ed18:	b950      	cbnz	r0, 800ed30 <__ssputs_r+0x5c>
 800ed1a:	230c      	movs	r3, #12
 800ed1c:	f8ca 3000 	str.w	r3, [sl]
 800ed20:	89a3      	ldrh	r3, [r4, #12]
 800ed22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed26:	81a3      	strh	r3, [r4, #12]
 800ed28:	f04f 30ff 	mov.w	r0, #4294967295
 800ed2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed30:	6921      	ldr	r1, [r4, #16]
 800ed32:	464a      	mov	r2, r9
 800ed34:	f7fd fd94 	bl	800c860 <memcpy>
 800ed38:	89a3      	ldrh	r3, [r4, #12]
 800ed3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ed3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed42:	81a3      	strh	r3, [r4, #12]
 800ed44:	6126      	str	r6, [r4, #16]
 800ed46:	6165      	str	r5, [r4, #20]
 800ed48:	444e      	add	r6, r9
 800ed4a:	eba5 0509 	sub.w	r5, r5, r9
 800ed4e:	6026      	str	r6, [r4, #0]
 800ed50:	60a5      	str	r5, [r4, #8]
 800ed52:	463e      	mov	r6, r7
 800ed54:	42be      	cmp	r6, r7
 800ed56:	d900      	bls.n	800ed5a <__ssputs_r+0x86>
 800ed58:	463e      	mov	r6, r7
 800ed5a:	4632      	mov	r2, r6
 800ed5c:	6820      	ldr	r0, [r4, #0]
 800ed5e:	4641      	mov	r1, r8
 800ed60:	f000 fb5a 	bl	800f418 <memmove>
 800ed64:	68a3      	ldr	r3, [r4, #8]
 800ed66:	6822      	ldr	r2, [r4, #0]
 800ed68:	1b9b      	subs	r3, r3, r6
 800ed6a:	4432      	add	r2, r6
 800ed6c:	60a3      	str	r3, [r4, #8]
 800ed6e:	6022      	str	r2, [r4, #0]
 800ed70:	2000      	movs	r0, #0
 800ed72:	e7db      	b.n	800ed2c <__ssputs_r+0x58>
 800ed74:	462a      	mov	r2, r5
 800ed76:	f000 fb75 	bl	800f464 <_realloc_r>
 800ed7a:	4606      	mov	r6, r0
 800ed7c:	2800      	cmp	r0, #0
 800ed7e:	d1e1      	bne.n	800ed44 <__ssputs_r+0x70>
 800ed80:	6921      	ldr	r1, [r4, #16]
 800ed82:	4650      	mov	r0, sl
 800ed84:	f7ff fefc 	bl	800eb80 <_free_r>
 800ed88:	e7c7      	b.n	800ed1a <__ssputs_r+0x46>
	...

0800ed8c <_svfiprintf_r>:
 800ed8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed90:	4698      	mov	r8, r3
 800ed92:	898b      	ldrh	r3, [r1, #12]
 800ed94:	061b      	lsls	r3, r3, #24
 800ed96:	b09d      	sub	sp, #116	; 0x74
 800ed98:	4607      	mov	r7, r0
 800ed9a:	460d      	mov	r5, r1
 800ed9c:	4614      	mov	r4, r2
 800ed9e:	d50e      	bpl.n	800edbe <_svfiprintf_r+0x32>
 800eda0:	690b      	ldr	r3, [r1, #16]
 800eda2:	b963      	cbnz	r3, 800edbe <_svfiprintf_r+0x32>
 800eda4:	2140      	movs	r1, #64	; 0x40
 800eda6:	f7ff ff3b 	bl	800ec20 <_malloc_r>
 800edaa:	6028      	str	r0, [r5, #0]
 800edac:	6128      	str	r0, [r5, #16]
 800edae:	b920      	cbnz	r0, 800edba <_svfiprintf_r+0x2e>
 800edb0:	230c      	movs	r3, #12
 800edb2:	603b      	str	r3, [r7, #0]
 800edb4:	f04f 30ff 	mov.w	r0, #4294967295
 800edb8:	e0d1      	b.n	800ef5e <_svfiprintf_r+0x1d2>
 800edba:	2340      	movs	r3, #64	; 0x40
 800edbc:	616b      	str	r3, [r5, #20]
 800edbe:	2300      	movs	r3, #0
 800edc0:	9309      	str	r3, [sp, #36]	; 0x24
 800edc2:	2320      	movs	r3, #32
 800edc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800edc8:	f8cd 800c 	str.w	r8, [sp, #12]
 800edcc:	2330      	movs	r3, #48	; 0x30
 800edce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ef78 <_svfiprintf_r+0x1ec>
 800edd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800edd6:	f04f 0901 	mov.w	r9, #1
 800edda:	4623      	mov	r3, r4
 800eddc:	469a      	mov	sl, r3
 800edde:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ede2:	b10a      	cbz	r2, 800ede8 <_svfiprintf_r+0x5c>
 800ede4:	2a25      	cmp	r2, #37	; 0x25
 800ede6:	d1f9      	bne.n	800eddc <_svfiprintf_r+0x50>
 800ede8:	ebba 0b04 	subs.w	fp, sl, r4
 800edec:	d00b      	beq.n	800ee06 <_svfiprintf_r+0x7a>
 800edee:	465b      	mov	r3, fp
 800edf0:	4622      	mov	r2, r4
 800edf2:	4629      	mov	r1, r5
 800edf4:	4638      	mov	r0, r7
 800edf6:	f7ff ff6d 	bl	800ecd4 <__ssputs_r>
 800edfa:	3001      	adds	r0, #1
 800edfc:	f000 80aa 	beq.w	800ef54 <_svfiprintf_r+0x1c8>
 800ee00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee02:	445a      	add	r2, fp
 800ee04:	9209      	str	r2, [sp, #36]	; 0x24
 800ee06:	f89a 3000 	ldrb.w	r3, [sl]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	f000 80a2 	beq.w	800ef54 <_svfiprintf_r+0x1c8>
 800ee10:	2300      	movs	r3, #0
 800ee12:	f04f 32ff 	mov.w	r2, #4294967295
 800ee16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee1a:	f10a 0a01 	add.w	sl, sl, #1
 800ee1e:	9304      	str	r3, [sp, #16]
 800ee20:	9307      	str	r3, [sp, #28]
 800ee22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ee26:	931a      	str	r3, [sp, #104]	; 0x68
 800ee28:	4654      	mov	r4, sl
 800ee2a:	2205      	movs	r2, #5
 800ee2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee30:	4851      	ldr	r0, [pc, #324]	; (800ef78 <_svfiprintf_r+0x1ec>)
 800ee32:	f7f1 fa5d 	bl	80002f0 <memchr>
 800ee36:	9a04      	ldr	r2, [sp, #16]
 800ee38:	b9d8      	cbnz	r0, 800ee72 <_svfiprintf_r+0xe6>
 800ee3a:	06d0      	lsls	r0, r2, #27
 800ee3c:	bf44      	itt	mi
 800ee3e:	2320      	movmi	r3, #32
 800ee40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee44:	0711      	lsls	r1, r2, #28
 800ee46:	bf44      	itt	mi
 800ee48:	232b      	movmi	r3, #43	; 0x2b
 800ee4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee4e:	f89a 3000 	ldrb.w	r3, [sl]
 800ee52:	2b2a      	cmp	r3, #42	; 0x2a
 800ee54:	d015      	beq.n	800ee82 <_svfiprintf_r+0xf6>
 800ee56:	9a07      	ldr	r2, [sp, #28]
 800ee58:	4654      	mov	r4, sl
 800ee5a:	2000      	movs	r0, #0
 800ee5c:	f04f 0c0a 	mov.w	ip, #10
 800ee60:	4621      	mov	r1, r4
 800ee62:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee66:	3b30      	subs	r3, #48	; 0x30
 800ee68:	2b09      	cmp	r3, #9
 800ee6a:	d94e      	bls.n	800ef0a <_svfiprintf_r+0x17e>
 800ee6c:	b1b0      	cbz	r0, 800ee9c <_svfiprintf_r+0x110>
 800ee6e:	9207      	str	r2, [sp, #28]
 800ee70:	e014      	b.n	800ee9c <_svfiprintf_r+0x110>
 800ee72:	eba0 0308 	sub.w	r3, r0, r8
 800ee76:	fa09 f303 	lsl.w	r3, r9, r3
 800ee7a:	4313      	orrs	r3, r2
 800ee7c:	9304      	str	r3, [sp, #16]
 800ee7e:	46a2      	mov	sl, r4
 800ee80:	e7d2      	b.n	800ee28 <_svfiprintf_r+0x9c>
 800ee82:	9b03      	ldr	r3, [sp, #12]
 800ee84:	1d19      	adds	r1, r3, #4
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	9103      	str	r1, [sp, #12]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	bfbb      	ittet	lt
 800ee8e:	425b      	neglt	r3, r3
 800ee90:	f042 0202 	orrlt.w	r2, r2, #2
 800ee94:	9307      	strge	r3, [sp, #28]
 800ee96:	9307      	strlt	r3, [sp, #28]
 800ee98:	bfb8      	it	lt
 800ee9a:	9204      	strlt	r2, [sp, #16]
 800ee9c:	7823      	ldrb	r3, [r4, #0]
 800ee9e:	2b2e      	cmp	r3, #46	; 0x2e
 800eea0:	d10c      	bne.n	800eebc <_svfiprintf_r+0x130>
 800eea2:	7863      	ldrb	r3, [r4, #1]
 800eea4:	2b2a      	cmp	r3, #42	; 0x2a
 800eea6:	d135      	bne.n	800ef14 <_svfiprintf_r+0x188>
 800eea8:	9b03      	ldr	r3, [sp, #12]
 800eeaa:	1d1a      	adds	r2, r3, #4
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	9203      	str	r2, [sp, #12]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	bfb8      	it	lt
 800eeb4:	f04f 33ff 	movlt.w	r3, #4294967295
 800eeb8:	3402      	adds	r4, #2
 800eeba:	9305      	str	r3, [sp, #20]
 800eebc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ef88 <_svfiprintf_r+0x1fc>
 800eec0:	7821      	ldrb	r1, [r4, #0]
 800eec2:	2203      	movs	r2, #3
 800eec4:	4650      	mov	r0, sl
 800eec6:	f7f1 fa13 	bl	80002f0 <memchr>
 800eeca:	b140      	cbz	r0, 800eede <_svfiprintf_r+0x152>
 800eecc:	2340      	movs	r3, #64	; 0x40
 800eece:	eba0 000a 	sub.w	r0, r0, sl
 800eed2:	fa03 f000 	lsl.w	r0, r3, r0
 800eed6:	9b04      	ldr	r3, [sp, #16]
 800eed8:	4303      	orrs	r3, r0
 800eeda:	3401      	adds	r4, #1
 800eedc:	9304      	str	r3, [sp, #16]
 800eede:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eee2:	4826      	ldr	r0, [pc, #152]	; (800ef7c <_svfiprintf_r+0x1f0>)
 800eee4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eee8:	2206      	movs	r2, #6
 800eeea:	f7f1 fa01 	bl	80002f0 <memchr>
 800eeee:	2800      	cmp	r0, #0
 800eef0:	d038      	beq.n	800ef64 <_svfiprintf_r+0x1d8>
 800eef2:	4b23      	ldr	r3, [pc, #140]	; (800ef80 <_svfiprintf_r+0x1f4>)
 800eef4:	bb1b      	cbnz	r3, 800ef3e <_svfiprintf_r+0x1b2>
 800eef6:	9b03      	ldr	r3, [sp, #12]
 800eef8:	3307      	adds	r3, #7
 800eefa:	f023 0307 	bic.w	r3, r3, #7
 800eefe:	3308      	adds	r3, #8
 800ef00:	9303      	str	r3, [sp, #12]
 800ef02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef04:	4433      	add	r3, r6
 800ef06:	9309      	str	r3, [sp, #36]	; 0x24
 800ef08:	e767      	b.n	800edda <_svfiprintf_r+0x4e>
 800ef0a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef0e:	460c      	mov	r4, r1
 800ef10:	2001      	movs	r0, #1
 800ef12:	e7a5      	b.n	800ee60 <_svfiprintf_r+0xd4>
 800ef14:	2300      	movs	r3, #0
 800ef16:	3401      	adds	r4, #1
 800ef18:	9305      	str	r3, [sp, #20]
 800ef1a:	4619      	mov	r1, r3
 800ef1c:	f04f 0c0a 	mov.w	ip, #10
 800ef20:	4620      	mov	r0, r4
 800ef22:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef26:	3a30      	subs	r2, #48	; 0x30
 800ef28:	2a09      	cmp	r2, #9
 800ef2a:	d903      	bls.n	800ef34 <_svfiprintf_r+0x1a8>
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d0c5      	beq.n	800eebc <_svfiprintf_r+0x130>
 800ef30:	9105      	str	r1, [sp, #20]
 800ef32:	e7c3      	b.n	800eebc <_svfiprintf_r+0x130>
 800ef34:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef38:	4604      	mov	r4, r0
 800ef3a:	2301      	movs	r3, #1
 800ef3c:	e7f0      	b.n	800ef20 <_svfiprintf_r+0x194>
 800ef3e:	ab03      	add	r3, sp, #12
 800ef40:	9300      	str	r3, [sp, #0]
 800ef42:	462a      	mov	r2, r5
 800ef44:	4b0f      	ldr	r3, [pc, #60]	; (800ef84 <_svfiprintf_r+0x1f8>)
 800ef46:	a904      	add	r1, sp, #16
 800ef48:	4638      	mov	r0, r7
 800ef4a:	f7fd fd31 	bl	800c9b0 <_printf_float>
 800ef4e:	1c42      	adds	r2, r0, #1
 800ef50:	4606      	mov	r6, r0
 800ef52:	d1d6      	bne.n	800ef02 <_svfiprintf_r+0x176>
 800ef54:	89ab      	ldrh	r3, [r5, #12]
 800ef56:	065b      	lsls	r3, r3, #25
 800ef58:	f53f af2c 	bmi.w	800edb4 <_svfiprintf_r+0x28>
 800ef5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef5e:	b01d      	add	sp, #116	; 0x74
 800ef60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef64:	ab03      	add	r3, sp, #12
 800ef66:	9300      	str	r3, [sp, #0]
 800ef68:	462a      	mov	r2, r5
 800ef6a:	4b06      	ldr	r3, [pc, #24]	; (800ef84 <_svfiprintf_r+0x1f8>)
 800ef6c:	a904      	add	r1, sp, #16
 800ef6e:	4638      	mov	r0, r7
 800ef70:	f7fd ffaa 	bl	800cec8 <_printf_i>
 800ef74:	e7eb      	b.n	800ef4e <_svfiprintf_r+0x1c2>
 800ef76:	bf00      	nop
 800ef78:	0800fb1c 	.word	0x0800fb1c
 800ef7c:	0800fb26 	.word	0x0800fb26
 800ef80:	0800c9b1 	.word	0x0800c9b1
 800ef84:	0800ecd5 	.word	0x0800ecd5
 800ef88:	0800fb22 	.word	0x0800fb22

0800ef8c <__sfputc_r>:
 800ef8c:	6893      	ldr	r3, [r2, #8]
 800ef8e:	3b01      	subs	r3, #1
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	b410      	push	{r4}
 800ef94:	6093      	str	r3, [r2, #8]
 800ef96:	da08      	bge.n	800efaa <__sfputc_r+0x1e>
 800ef98:	6994      	ldr	r4, [r2, #24]
 800ef9a:	42a3      	cmp	r3, r4
 800ef9c:	db01      	blt.n	800efa2 <__sfputc_r+0x16>
 800ef9e:	290a      	cmp	r1, #10
 800efa0:	d103      	bne.n	800efaa <__sfputc_r+0x1e>
 800efa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800efa6:	f7fe b963 	b.w	800d270 <__swbuf_r>
 800efaa:	6813      	ldr	r3, [r2, #0]
 800efac:	1c58      	adds	r0, r3, #1
 800efae:	6010      	str	r0, [r2, #0]
 800efb0:	7019      	strb	r1, [r3, #0]
 800efb2:	4608      	mov	r0, r1
 800efb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800efb8:	4770      	bx	lr

0800efba <__sfputs_r>:
 800efba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efbc:	4606      	mov	r6, r0
 800efbe:	460f      	mov	r7, r1
 800efc0:	4614      	mov	r4, r2
 800efc2:	18d5      	adds	r5, r2, r3
 800efc4:	42ac      	cmp	r4, r5
 800efc6:	d101      	bne.n	800efcc <__sfputs_r+0x12>
 800efc8:	2000      	movs	r0, #0
 800efca:	e007      	b.n	800efdc <__sfputs_r+0x22>
 800efcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efd0:	463a      	mov	r2, r7
 800efd2:	4630      	mov	r0, r6
 800efd4:	f7ff ffda 	bl	800ef8c <__sfputc_r>
 800efd8:	1c43      	adds	r3, r0, #1
 800efda:	d1f3      	bne.n	800efc4 <__sfputs_r+0xa>
 800efdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800efe0 <_vfiprintf_r>:
 800efe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efe4:	460d      	mov	r5, r1
 800efe6:	b09d      	sub	sp, #116	; 0x74
 800efe8:	4614      	mov	r4, r2
 800efea:	4698      	mov	r8, r3
 800efec:	4606      	mov	r6, r0
 800efee:	b118      	cbz	r0, 800eff8 <_vfiprintf_r+0x18>
 800eff0:	6983      	ldr	r3, [r0, #24]
 800eff2:	b90b      	cbnz	r3, 800eff8 <_vfiprintf_r+0x18>
 800eff4:	f7ff f924 	bl	800e240 <__sinit>
 800eff8:	4b89      	ldr	r3, [pc, #548]	; (800f220 <_vfiprintf_r+0x240>)
 800effa:	429d      	cmp	r5, r3
 800effc:	d11b      	bne.n	800f036 <_vfiprintf_r+0x56>
 800effe:	6875      	ldr	r5, [r6, #4]
 800f000:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f002:	07d9      	lsls	r1, r3, #31
 800f004:	d405      	bmi.n	800f012 <_vfiprintf_r+0x32>
 800f006:	89ab      	ldrh	r3, [r5, #12]
 800f008:	059a      	lsls	r2, r3, #22
 800f00a:	d402      	bmi.n	800f012 <_vfiprintf_r+0x32>
 800f00c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f00e:	f7ff f9ba 	bl	800e386 <__retarget_lock_acquire_recursive>
 800f012:	89ab      	ldrh	r3, [r5, #12]
 800f014:	071b      	lsls	r3, r3, #28
 800f016:	d501      	bpl.n	800f01c <_vfiprintf_r+0x3c>
 800f018:	692b      	ldr	r3, [r5, #16]
 800f01a:	b9eb      	cbnz	r3, 800f058 <_vfiprintf_r+0x78>
 800f01c:	4629      	mov	r1, r5
 800f01e:	4630      	mov	r0, r6
 800f020:	f7fe f978 	bl	800d314 <__swsetup_r>
 800f024:	b1c0      	cbz	r0, 800f058 <_vfiprintf_r+0x78>
 800f026:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f028:	07dc      	lsls	r4, r3, #31
 800f02a:	d50e      	bpl.n	800f04a <_vfiprintf_r+0x6a>
 800f02c:	f04f 30ff 	mov.w	r0, #4294967295
 800f030:	b01d      	add	sp, #116	; 0x74
 800f032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f036:	4b7b      	ldr	r3, [pc, #492]	; (800f224 <_vfiprintf_r+0x244>)
 800f038:	429d      	cmp	r5, r3
 800f03a:	d101      	bne.n	800f040 <_vfiprintf_r+0x60>
 800f03c:	68b5      	ldr	r5, [r6, #8]
 800f03e:	e7df      	b.n	800f000 <_vfiprintf_r+0x20>
 800f040:	4b79      	ldr	r3, [pc, #484]	; (800f228 <_vfiprintf_r+0x248>)
 800f042:	429d      	cmp	r5, r3
 800f044:	bf08      	it	eq
 800f046:	68f5      	ldreq	r5, [r6, #12]
 800f048:	e7da      	b.n	800f000 <_vfiprintf_r+0x20>
 800f04a:	89ab      	ldrh	r3, [r5, #12]
 800f04c:	0598      	lsls	r0, r3, #22
 800f04e:	d4ed      	bmi.n	800f02c <_vfiprintf_r+0x4c>
 800f050:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f052:	f7ff f999 	bl	800e388 <__retarget_lock_release_recursive>
 800f056:	e7e9      	b.n	800f02c <_vfiprintf_r+0x4c>
 800f058:	2300      	movs	r3, #0
 800f05a:	9309      	str	r3, [sp, #36]	; 0x24
 800f05c:	2320      	movs	r3, #32
 800f05e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f062:	f8cd 800c 	str.w	r8, [sp, #12]
 800f066:	2330      	movs	r3, #48	; 0x30
 800f068:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f22c <_vfiprintf_r+0x24c>
 800f06c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f070:	f04f 0901 	mov.w	r9, #1
 800f074:	4623      	mov	r3, r4
 800f076:	469a      	mov	sl, r3
 800f078:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f07c:	b10a      	cbz	r2, 800f082 <_vfiprintf_r+0xa2>
 800f07e:	2a25      	cmp	r2, #37	; 0x25
 800f080:	d1f9      	bne.n	800f076 <_vfiprintf_r+0x96>
 800f082:	ebba 0b04 	subs.w	fp, sl, r4
 800f086:	d00b      	beq.n	800f0a0 <_vfiprintf_r+0xc0>
 800f088:	465b      	mov	r3, fp
 800f08a:	4622      	mov	r2, r4
 800f08c:	4629      	mov	r1, r5
 800f08e:	4630      	mov	r0, r6
 800f090:	f7ff ff93 	bl	800efba <__sfputs_r>
 800f094:	3001      	adds	r0, #1
 800f096:	f000 80aa 	beq.w	800f1ee <_vfiprintf_r+0x20e>
 800f09a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f09c:	445a      	add	r2, fp
 800f09e:	9209      	str	r2, [sp, #36]	; 0x24
 800f0a0:	f89a 3000 	ldrb.w	r3, [sl]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	f000 80a2 	beq.w	800f1ee <_vfiprintf_r+0x20e>
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	f04f 32ff 	mov.w	r2, #4294967295
 800f0b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f0b4:	f10a 0a01 	add.w	sl, sl, #1
 800f0b8:	9304      	str	r3, [sp, #16]
 800f0ba:	9307      	str	r3, [sp, #28]
 800f0bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f0c0:	931a      	str	r3, [sp, #104]	; 0x68
 800f0c2:	4654      	mov	r4, sl
 800f0c4:	2205      	movs	r2, #5
 800f0c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0ca:	4858      	ldr	r0, [pc, #352]	; (800f22c <_vfiprintf_r+0x24c>)
 800f0cc:	f7f1 f910 	bl	80002f0 <memchr>
 800f0d0:	9a04      	ldr	r2, [sp, #16]
 800f0d2:	b9d8      	cbnz	r0, 800f10c <_vfiprintf_r+0x12c>
 800f0d4:	06d1      	lsls	r1, r2, #27
 800f0d6:	bf44      	itt	mi
 800f0d8:	2320      	movmi	r3, #32
 800f0da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f0de:	0713      	lsls	r3, r2, #28
 800f0e0:	bf44      	itt	mi
 800f0e2:	232b      	movmi	r3, #43	; 0x2b
 800f0e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f0e8:	f89a 3000 	ldrb.w	r3, [sl]
 800f0ec:	2b2a      	cmp	r3, #42	; 0x2a
 800f0ee:	d015      	beq.n	800f11c <_vfiprintf_r+0x13c>
 800f0f0:	9a07      	ldr	r2, [sp, #28]
 800f0f2:	4654      	mov	r4, sl
 800f0f4:	2000      	movs	r0, #0
 800f0f6:	f04f 0c0a 	mov.w	ip, #10
 800f0fa:	4621      	mov	r1, r4
 800f0fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f100:	3b30      	subs	r3, #48	; 0x30
 800f102:	2b09      	cmp	r3, #9
 800f104:	d94e      	bls.n	800f1a4 <_vfiprintf_r+0x1c4>
 800f106:	b1b0      	cbz	r0, 800f136 <_vfiprintf_r+0x156>
 800f108:	9207      	str	r2, [sp, #28]
 800f10a:	e014      	b.n	800f136 <_vfiprintf_r+0x156>
 800f10c:	eba0 0308 	sub.w	r3, r0, r8
 800f110:	fa09 f303 	lsl.w	r3, r9, r3
 800f114:	4313      	orrs	r3, r2
 800f116:	9304      	str	r3, [sp, #16]
 800f118:	46a2      	mov	sl, r4
 800f11a:	e7d2      	b.n	800f0c2 <_vfiprintf_r+0xe2>
 800f11c:	9b03      	ldr	r3, [sp, #12]
 800f11e:	1d19      	adds	r1, r3, #4
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	9103      	str	r1, [sp, #12]
 800f124:	2b00      	cmp	r3, #0
 800f126:	bfbb      	ittet	lt
 800f128:	425b      	neglt	r3, r3
 800f12a:	f042 0202 	orrlt.w	r2, r2, #2
 800f12e:	9307      	strge	r3, [sp, #28]
 800f130:	9307      	strlt	r3, [sp, #28]
 800f132:	bfb8      	it	lt
 800f134:	9204      	strlt	r2, [sp, #16]
 800f136:	7823      	ldrb	r3, [r4, #0]
 800f138:	2b2e      	cmp	r3, #46	; 0x2e
 800f13a:	d10c      	bne.n	800f156 <_vfiprintf_r+0x176>
 800f13c:	7863      	ldrb	r3, [r4, #1]
 800f13e:	2b2a      	cmp	r3, #42	; 0x2a
 800f140:	d135      	bne.n	800f1ae <_vfiprintf_r+0x1ce>
 800f142:	9b03      	ldr	r3, [sp, #12]
 800f144:	1d1a      	adds	r2, r3, #4
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	9203      	str	r2, [sp, #12]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	bfb8      	it	lt
 800f14e:	f04f 33ff 	movlt.w	r3, #4294967295
 800f152:	3402      	adds	r4, #2
 800f154:	9305      	str	r3, [sp, #20]
 800f156:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f23c <_vfiprintf_r+0x25c>
 800f15a:	7821      	ldrb	r1, [r4, #0]
 800f15c:	2203      	movs	r2, #3
 800f15e:	4650      	mov	r0, sl
 800f160:	f7f1 f8c6 	bl	80002f0 <memchr>
 800f164:	b140      	cbz	r0, 800f178 <_vfiprintf_r+0x198>
 800f166:	2340      	movs	r3, #64	; 0x40
 800f168:	eba0 000a 	sub.w	r0, r0, sl
 800f16c:	fa03 f000 	lsl.w	r0, r3, r0
 800f170:	9b04      	ldr	r3, [sp, #16]
 800f172:	4303      	orrs	r3, r0
 800f174:	3401      	adds	r4, #1
 800f176:	9304      	str	r3, [sp, #16]
 800f178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f17c:	482c      	ldr	r0, [pc, #176]	; (800f230 <_vfiprintf_r+0x250>)
 800f17e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f182:	2206      	movs	r2, #6
 800f184:	f7f1 f8b4 	bl	80002f0 <memchr>
 800f188:	2800      	cmp	r0, #0
 800f18a:	d03f      	beq.n	800f20c <_vfiprintf_r+0x22c>
 800f18c:	4b29      	ldr	r3, [pc, #164]	; (800f234 <_vfiprintf_r+0x254>)
 800f18e:	bb1b      	cbnz	r3, 800f1d8 <_vfiprintf_r+0x1f8>
 800f190:	9b03      	ldr	r3, [sp, #12]
 800f192:	3307      	adds	r3, #7
 800f194:	f023 0307 	bic.w	r3, r3, #7
 800f198:	3308      	adds	r3, #8
 800f19a:	9303      	str	r3, [sp, #12]
 800f19c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f19e:	443b      	add	r3, r7
 800f1a0:	9309      	str	r3, [sp, #36]	; 0x24
 800f1a2:	e767      	b.n	800f074 <_vfiprintf_r+0x94>
 800f1a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800f1a8:	460c      	mov	r4, r1
 800f1aa:	2001      	movs	r0, #1
 800f1ac:	e7a5      	b.n	800f0fa <_vfiprintf_r+0x11a>
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	3401      	adds	r4, #1
 800f1b2:	9305      	str	r3, [sp, #20]
 800f1b4:	4619      	mov	r1, r3
 800f1b6:	f04f 0c0a 	mov.w	ip, #10
 800f1ba:	4620      	mov	r0, r4
 800f1bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f1c0:	3a30      	subs	r2, #48	; 0x30
 800f1c2:	2a09      	cmp	r2, #9
 800f1c4:	d903      	bls.n	800f1ce <_vfiprintf_r+0x1ee>
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d0c5      	beq.n	800f156 <_vfiprintf_r+0x176>
 800f1ca:	9105      	str	r1, [sp, #20]
 800f1cc:	e7c3      	b.n	800f156 <_vfiprintf_r+0x176>
 800f1ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800f1d2:	4604      	mov	r4, r0
 800f1d4:	2301      	movs	r3, #1
 800f1d6:	e7f0      	b.n	800f1ba <_vfiprintf_r+0x1da>
 800f1d8:	ab03      	add	r3, sp, #12
 800f1da:	9300      	str	r3, [sp, #0]
 800f1dc:	462a      	mov	r2, r5
 800f1de:	4b16      	ldr	r3, [pc, #88]	; (800f238 <_vfiprintf_r+0x258>)
 800f1e0:	a904      	add	r1, sp, #16
 800f1e2:	4630      	mov	r0, r6
 800f1e4:	f7fd fbe4 	bl	800c9b0 <_printf_float>
 800f1e8:	4607      	mov	r7, r0
 800f1ea:	1c78      	adds	r0, r7, #1
 800f1ec:	d1d6      	bne.n	800f19c <_vfiprintf_r+0x1bc>
 800f1ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f1f0:	07d9      	lsls	r1, r3, #31
 800f1f2:	d405      	bmi.n	800f200 <_vfiprintf_r+0x220>
 800f1f4:	89ab      	ldrh	r3, [r5, #12]
 800f1f6:	059a      	lsls	r2, r3, #22
 800f1f8:	d402      	bmi.n	800f200 <_vfiprintf_r+0x220>
 800f1fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f1fc:	f7ff f8c4 	bl	800e388 <__retarget_lock_release_recursive>
 800f200:	89ab      	ldrh	r3, [r5, #12]
 800f202:	065b      	lsls	r3, r3, #25
 800f204:	f53f af12 	bmi.w	800f02c <_vfiprintf_r+0x4c>
 800f208:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f20a:	e711      	b.n	800f030 <_vfiprintf_r+0x50>
 800f20c:	ab03      	add	r3, sp, #12
 800f20e:	9300      	str	r3, [sp, #0]
 800f210:	462a      	mov	r2, r5
 800f212:	4b09      	ldr	r3, [pc, #36]	; (800f238 <_vfiprintf_r+0x258>)
 800f214:	a904      	add	r1, sp, #16
 800f216:	4630      	mov	r0, r6
 800f218:	f7fd fe56 	bl	800cec8 <_printf_i>
 800f21c:	e7e4      	b.n	800f1e8 <_vfiprintf_r+0x208>
 800f21e:	bf00      	nop
 800f220:	0800f97c 	.word	0x0800f97c
 800f224:	0800f99c 	.word	0x0800f99c
 800f228:	0800f95c 	.word	0x0800f95c
 800f22c:	0800fb1c 	.word	0x0800fb1c
 800f230:	0800fb26 	.word	0x0800fb26
 800f234:	0800c9b1 	.word	0x0800c9b1
 800f238:	0800efbb 	.word	0x0800efbb
 800f23c:	0800fb22 	.word	0x0800fb22

0800f240 <_sbrk_r>:
 800f240:	b538      	push	{r3, r4, r5, lr}
 800f242:	4d06      	ldr	r5, [pc, #24]	; (800f25c <_sbrk_r+0x1c>)
 800f244:	2300      	movs	r3, #0
 800f246:	4604      	mov	r4, r0
 800f248:	4608      	mov	r0, r1
 800f24a:	602b      	str	r3, [r5, #0]
 800f24c:	f7f3 fe8c 	bl	8002f68 <_sbrk>
 800f250:	1c43      	adds	r3, r0, #1
 800f252:	d102      	bne.n	800f25a <_sbrk_r+0x1a>
 800f254:	682b      	ldr	r3, [r5, #0]
 800f256:	b103      	cbz	r3, 800f25a <_sbrk_r+0x1a>
 800f258:	6023      	str	r3, [r4, #0]
 800f25a:	bd38      	pop	{r3, r4, r5, pc}
 800f25c:	24000bd8 	.word	0x24000bd8

0800f260 <__sread>:
 800f260:	b510      	push	{r4, lr}
 800f262:	460c      	mov	r4, r1
 800f264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f268:	f000 f922 	bl	800f4b0 <_read_r>
 800f26c:	2800      	cmp	r0, #0
 800f26e:	bfab      	itete	ge
 800f270:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f272:	89a3      	ldrhlt	r3, [r4, #12]
 800f274:	181b      	addge	r3, r3, r0
 800f276:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f27a:	bfac      	ite	ge
 800f27c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f27e:	81a3      	strhlt	r3, [r4, #12]
 800f280:	bd10      	pop	{r4, pc}

0800f282 <__swrite>:
 800f282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f286:	461f      	mov	r7, r3
 800f288:	898b      	ldrh	r3, [r1, #12]
 800f28a:	05db      	lsls	r3, r3, #23
 800f28c:	4605      	mov	r5, r0
 800f28e:	460c      	mov	r4, r1
 800f290:	4616      	mov	r6, r2
 800f292:	d505      	bpl.n	800f2a0 <__swrite+0x1e>
 800f294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f298:	2302      	movs	r3, #2
 800f29a:	2200      	movs	r2, #0
 800f29c:	f000 f898 	bl	800f3d0 <_lseek_r>
 800f2a0:	89a3      	ldrh	r3, [r4, #12]
 800f2a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f2a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f2aa:	81a3      	strh	r3, [r4, #12]
 800f2ac:	4632      	mov	r2, r6
 800f2ae:	463b      	mov	r3, r7
 800f2b0:	4628      	mov	r0, r5
 800f2b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2b6:	f000 b817 	b.w	800f2e8 <_write_r>

0800f2ba <__sseek>:
 800f2ba:	b510      	push	{r4, lr}
 800f2bc:	460c      	mov	r4, r1
 800f2be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2c2:	f000 f885 	bl	800f3d0 <_lseek_r>
 800f2c6:	1c43      	adds	r3, r0, #1
 800f2c8:	89a3      	ldrh	r3, [r4, #12]
 800f2ca:	bf15      	itete	ne
 800f2cc:	6560      	strne	r0, [r4, #84]	; 0x54
 800f2ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f2d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f2d6:	81a3      	strheq	r3, [r4, #12]
 800f2d8:	bf18      	it	ne
 800f2da:	81a3      	strhne	r3, [r4, #12]
 800f2dc:	bd10      	pop	{r4, pc}

0800f2de <__sclose>:
 800f2de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2e2:	f000 b831 	b.w	800f348 <_close_r>
	...

0800f2e8 <_write_r>:
 800f2e8:	b538      	push	{r3, r4, r5, lr}
 800f2ea:	4d07      	ldr	r5, [pc, #28]	; (800f308 <_write_r+0x20>)
 800f2ec:	4604      	mov	r4, r0
 800f2ee:	4608      	mov	r0, r1
 800f2f0:	4611      	mov	r1, r2
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	602a      	str	r2, [r5, #0]
 800f2f6:	461a      	mov	r2, r3
 800f2f8:	f7f3 fde5 	bl	8002ec6 <_write>
 800f2fc:	1c43      	adds	r3, r0, #1
 800f2fe:	d102      	bne.n	800f306 <_write_r+0x1e>
 800f300:	682b      	ldr	r3, [r5, #0]
 800f302:	b103      	cbz	r3, 800f306 <_write_r+0x1e>
 800f304:	6023      	str	r3, [r4, #0]
 800f306:	bd38      	pop	{r3, r4, r5, pc}
 800f308:	24000bd8 	.word	0x24000bd8

0800f30c <__assert_func>:
 800f30c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f30e:	4614      	mov	r4, r2
 800f310:	461a      	mov	r2, r3
 800f312:	4b09      	ldr	r3, [pc, #36]	; (800f338 <__assert_func+0x2c>)
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	4605      	mov	r5, r0
 800f318:	68d8      	ldr	r0, [r3, #12]
 800f31a:	b14c      	cbz	r4, 800f330 <__assert_func+0x24>
 800f31c:	4b07      	ldr	r3, [pc, #28]	; (800f33c <__assert_func+0x30>)
 800f31e:	9100      	str	r1, [sp, #0]
 800f320:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f324:	4906      	ldr	r1, [pc, #24]	; (800f340 <__assert_func+0x34>)
 800f326:	462b      	mov	r3, r5
 800f328:	f000 f81e 	bl	800f368 <fiprintf>
 800f32c:	f000 f8df 	bl	800f4ee <abort>
 800f330:	4b04      	ldr	r3, [pc, #16]	; (800f344 <__assert_func+0x38>)
 800f332:	461c      	mov	r4, r3
 800f334:	e7f3      	b.n	800f31e <__assert_func+0x12>
 800f336:	bf00      	nop
 800f338:	2400001c 	.word	0x2400001c
 800f33c:	0800fb2d 	.word	0x0800fb2d
 800f340:	0800fb3a 	.word	0x0800fb3a
 800f344:	0800fb68 	.word	0x0800fb68

0800f348 <_close_r>:
 800f348:	b538      	push	{r3, r4, r5, lr}
 800f34a:	4d06      	ldr	r5, [pc, #24]	; (800f364 <_close_r+0x1c>)
 800f34c:	2300      	movs	r3, #0
 800f34e:	4604      	mov	r4, r0
 800f350:	4608      	mov	r0, r1
 800f352:	602b      	str	r3, [r5, #0]
 800f354:	f7f3 fdd3 	bl	8002efe <_close>
 800f358:	1c43      	adds	r3, r0, #1
 800f35a:	d102      	bne.n	800f362 <_close_r+0x1a>
 800f35c:	682b      	ldr	r3, [r5, #0]
 800f35e:	b103      	cbz	r3, 800f362 <_close_r+0x1a>
 800f360:	6023      	str	r3, [r4, #0]
 800f362:	bd38      	pop	{r3, r4, r5, pc}
 800f364:	24000bd8 	.word	0x24000bd8

0800f368 <fiprintf>:
 800f368:	b40e      	push	{r1, r2, r3}
 800f36a:	b503      	push	{r0, r1, lr}
 800f36c:	4601      	mov	r1, r0
 800f36e:	ab03      	add	r3, sp, #12
 800f370:	4805      	ldr	r0, [pc, #20]	; (800f388 <fiprintf+0x20>)
 800f372:	f853 2b04 	ldr.w	r2, [r3], #4
 800f376:	6800      	ldr	r0, [r0, #0]
 800f378:	9301      	str	r3, [sp, #4]
 800f37a:	f7ff fe31 	bl	800efe0 <_vfiprintf_r>
 800f37e:	b002      	add	sp, #8
 800f380:	f85d eb04 	ldr.w	lr, [sp], #4
 800f384:	b003      	add	sp, #12
 800f386:	4770      	bx	lr
 800f388:	2400001c 	.word	0x2400001c

0800f38c <_fstat_r>:
 800f38c:	b538      	push	{r3, r4, r5, lr}
 800f38e:	4d07      	ldr	r5, [pc, #28]	; (800f3ac <_fstat_r+0x20>)
 800f390:	2300      	movs	r3, #0
 800f392:	4604      	mov	r4, r0
 800f394:	4608      	mov	r0, r1
 800f396:	4611      	mov	r1, r2
 800f398:	602b      	str	r3, [r5, #0]
 800f39a:	f7f3 fdbc 	bl	8002f16 <_fstat>
 800f39e:	1c43      	adds	r3, r0, #1
 800f3a0:	d102      	bne.n	800f3a8 <_fstat_r+0x1c>
 800f3a2:	682b      	ldr	r3, [r5, #0]
 800f3a4:	b103      	cbz	r3, 800f3a8 <_fstat_r+0x1c>
 800f3a6:	6023      	str	r3, [r4, #0]
 800f3a8:	bd38      	pop	{r3, r4, r5, pc}
 800f3aa:	bf00      	nop
 800f3ac:	24000bd8 	.word	0x24000bd8

0800f3b0 <_isatty_r>:
 800f3b0:	b538      	push	{r3, r4, r5, lr}
 800f3b2:	4d06      	ldr	r5, [pc, #24]	; (800f3cc <_isatty_r+0x1c>)
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	4604      	mov	r4, r0
 800f3b8:	4608      	mov	r0, r1
 800f3ba:	602b      	str	r3, [r5, #0]
 800f3bc:	f7f3 fdbb 	bl	8002f36 <_isatty>
 800f3c0:	1c43      	adds	r3, r0, #1
 800f3c2:	d102      	bne.n	800f3ca <_isatty_r+0x1a>
 800f3c4:	682b      	ldr	r3, [r5, #0]
 800f3c6:	b103      	cbz	r3, 800f3ca <_isatty_r+0x1a>
 800f3c8:	6023      	str	r3, [r4, #0]
 800f3ca:	bd38      	pop	{r3, r4, r5, pc}
 800f3cc:	24000bd8 	.word	0x24000bd8

0800f3d0 <_lseek_r>:
 800f3d0:	b538      	push	{r3, r4, r5, lr}
 800f3d2:	4d07      	ldr	r5, [pc, #28]	; (800f3f0 <_lseek_r+0x20>)
 800f3d4:	4604      	mov	r4, r0
 800f3d6:	4608      	mov	r0, r1
 800f3d8:	4611      	mov	r1, r2
 800f3da:	2200      	movs	r2, #0
 800f3dc:	602a      	str	r2, [r5, #0]
 800f3de:	461a      	mov	r2, r3
 800f3e0:	f7f3 fdb4 	bl	8002f4c <_lseek>
 800f3e4:	1c43      	adds	r3, r0, #1
 800f3e6:	d102      	bne.n	800f3ee <_lseek_r+0x1e>
 800f3e8:	682b      	ldr	r3, [r5, #0]
 800f3ea:	b103      	cbz	r3, 800f3ee <_lseek_r+0x1e>
 800f3ec:	6023      	str	r3, [r4, #0]
 800f3ee:	bd38      	pop	{r3, r4, r5, pc}
 800f3f0:	24000bd8 	.word	0x24000bd8

0800f3f4 <__ascii_mbtowc>:
 800f3f4:	b082      	sub	sp, #8
 800f3f6:	b901      	cbnz	r1, 800f3fa <__ascii_mbtowc+0x6>
 800f3f8:	a901      	add	r1, sp, #4
 800f3fa:	b142      	cbz	r2, 800f40e <__ascii_mbtowc+0x1a>
 800f3fc:	b14b      	cbz	r3, 800f412 <__ascii_mbtowc+0x1e>
 800f3fe:	7813      	ldrb	r3, [r2, #0]
 800f400:	600b      	str	r3, [r1, #0]
 800f402:	7812      	ldrb	r2, [r2, #0]
 800f404:	1e10      	subs	r0, r2, #0
 800f406:	bf18      	it	ne
 800f408:	2001      	movne	r0, #1
 800f40a:	b002      	add	sp, #8
 800f40c:	4770      	bx	lr
 800f40e:	4610      	mov	r0, r2
 800f410:	e7fb      	b.n	800f40a <__ascii_mbtowc+0x16>
 800f412:	f06f 0001 	mvn.w	r0, #1
 800f416:	e7f8      	b.n	800f40a <__ascii_mbtowc+0x16>

0800f418 <memmove>:
 800f418:	4288      	cmp	r0, r1
 800f41a:	b510      	push	{r4, lr}
 800f41c:	eb01 0402 	add.w	r4, r1, r2
 800f420:	d902      	bls.n	800f428 <memmove+0x10>
 800f422:	4284      	cmp	r4, r0
 800f424:	4623      	mov	r3, r4
 800f426:	d807      	bhi.n	800f438 <memmove+0x20>
 800f428:	1e43      	subs	r3, r0, #1
 800f42a:	42a1      	cmp	r1, r4
 800f42c:	d008      	beq.n	800f440 <memmove+0x28>
 800f42e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f432:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f436:	e7f8      	b.n	800f42a <memmove+0x12>
 800f438:	4402      	add	r2, r0
 800f43a:	4601      	mov	r1, r0
 800f43c:	428a      	cmp	r2, r1
 800f43e:	d100      	bne.n	800f442 <memmove+0x2a>
 800f440:	bd10      	pop	{r4, pc}
 800f442:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f446:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f44a:	e7f7      	b.n	800f43c <memmove+0x24>

0800f44c <__malloc_lock>:
 800f44c:	4801      	ldr	r0, [pc, #4]	; (800f454 <__malloc_lock+0x8>)
 800f44e:	f7fe bf9a 	b.w	800e386 <__retarget_lock_acquire_recursive>
 800f452:	bf00      	nop
 800f454:	24000bd0 	.word	0x24000bd0

0800f458 <__malloc_unlock>:
 800f458:	4801      	ldr	r0, [pc, #4]	; (800f460 <__malloc_unlock+0x8>)
 800f45a:	f7fe bf95 	b.w	800e388 <__retarget_lock_release_recursive>
 800f45e:	bf00      	nop
 800f460:	24000bd0 	.word	0x24000bd0

0800f464 <_realloc_r>:
 800f464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f466:	4607      	mov	r7, r0
 800f468:	4614      	mov	r4, r2
 800f46a:	460e      	mov	r6, r1
 800f46c:	b921      	cbnz	r1, 800f478 <_realloc_r+0x14>
 800f46e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f472:	4611      	mov	r1, r2
 800f474:	f7ff bbd4 	b.w	800ec20 <_malloc_r>
 800f478:	b922      	cbnz	r2, 800f484 <_realloc_r+0x20>
 800f47a:	f7ff fb81 	bl	800eb80 <_free_r>
 800f47e:	4625      	mov	r5, r4
 800f480:	4628      	mov	r0, r5
 800f482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f484:	f000 f83a 	bl	800f4fc <_malloc_usable_size_r>
 800f488:	42a0      	cmp	r0, r4
 800f48a:	d20f      	bcs.n	800f4ac <_realloc_r+0x48>
 800f48c:	4621      	mov	r1, r4
 800f48e:	4638      	mov	r0, r7
 800f490:	f7ff fbc6 	bl	800ec20 <_malloc_r>
 800f494:	4605      	mov	r5, r0
 800f496:	2800      	cmp	r0, #0
 800f498:	d0f2      	beq.n	800f480 <_realloc_r+0x1c>
 800f49a:	4631      	mov	r1, r6
 800f49c:	4622      	mov	r2, r4
 800f49e:	f7fd f9df 	bl	800c860 <memcpy>
 800f4a2:	4631      	mov	r1, r6
 800f4a4:	4638      	mov	r0, r7
 800f4a6:	f7ff fb6b 	bl	800eb80 <_free_r>
 800f4aa:	e7e9      	b.n	800f480 <_realloc_r+0x1c>
 800f4ac:	4635      	mov	r5, r6
 800f4ae:	e7e7      	b.n	800f480 <_realloc_r+0x1c>

0800f4b0 <_read_r>:
 800f4b0:	b538      	push	{r3, r4, r5, lr}
 800f4b2:	4d07      	ldr	r5, [pc, #28]	; (800f4d0 <_read_r+0x20>)
 800f4b4:	4604      	mov	r4, r0
 800f4b6:	4608      	mov	r0, r1
 800f4b8:	4611      	mov	r1, r2
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	602a      	str	r2, [r5, #0]
 800f4be:	461a      	mov	r2, r3
 800f4c0:	f7f3 fce4 	bl	8002e8c <_read>
 800f4c4:	1c43      	adds	r3, r0, #1
 800f4c6:	d102      	bne.n	800f4ce <_read_r+0x1e>
 800f4c8:	682b      	ldr	r3, [r5, #0]
 800f4ca:	b103      	cbz	r3, 800f4ce <_read_r+0x1e>
 800f4cc:	6023      	str	r3, [r4, #0]
 800f4ce:	bd38      	pop	{r3, r4, r5, pc}
 800f4d0:	24000bd8 	.word	0x24000bd8

0800f4d4 <__ascii_wctomb>:
 800f4d4:	b149      	cbz	r1, 800f4ea <__ascii_wctomb+0x16>
 800f4d6:	2aff      	cmp	r2, #255	; 0xff
 800f4d8:	bf85      	ittet	hi
 800f4da:	238a      	movhi	r3, #138	; 0x8a
 800f4dc:	6003      	strhi	r3, [r0, #0]
 800f4de:	700a      	strbls	r2, [r1, #0]
 800f4e0:	f04f 30ff 	movhi.w	r0, #4294967295
 800f4e4:	bf98      	it	ls
 800f4e6:	2001      	movls	r0, #1
 800f4e8:	4770      	bx	lr
 800f4ea:	4608      	mov	r0, r1
 800f4ec:	4770      	bx	lr

0800f4ee <abort>:
 800f4ee:	b508      	push	{r3, lr}
 800f4f0:	2006      	movs	r0, #6
 800f4f2:	f000 f833 	bl	800f55c <raise>
 800f4f6:	2001      	movs	r0, #1
 800f4f8:	f7f3 fcbe 	bl	8002e78 <_exit>

0800f4fc <_malloc_usable_size_r>:
 800f4fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f500:	1f18      	subs	r0, r3, #4
 800f502:	2b00      	cmp	r3, #0
 800f504:	bfbc      	itt	lt
 800f506:	580b      	ldrlt	r3, [r1, r0]
 800f508:	18c0      	addlt	r0, r0, r3
 800f50a:	4770      	bx	lr

0800f50c <_raise_r>:
 800f50c:	291f      	cmp	r1, #31
 800f50e:	b538      	push	{r3, r4, r5, lr}
 800f510:	4604      	mov	r4, r0
 800f512:	460d      	mov	r5, r1
 800f514:	d904      	bls.n	800f520 <_raise_r+0x14>
 800f516:	2316      	movs	r3, #22
 800f518:	6003      	str	r3, [r0, #0]
 800f51a:	f04f 30ff 	mov.w	r0, #4294967295
 800f51e:	bd38      	pop	{r3, r4, r5, pc}
 800f520:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f522:	b112      	cbz	r2, 800f52a <_raise_r+0x1e>
 800f524:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f528:	b94b      	cbnz	r3, 800f53e <_raise_r+0x32>
 800f52a:	4620      	mov	r0, r4
 800f52c:	f000 f830 	bl	800f590 <_getpid_r>
 800f530:	462a      	mov	r2, r5
 800f532:	4601      	mov	r1, r0
 800f534:	4620      	mov	r0, r4
 800f536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f53a:	f000 b817 	b.w	800f56c <_kill_r>
 800f53e:	2b01      	cmp	r3, #1
 800f540:	d00a      	beq.n	800f558 <_raise_r+0x4c>
 800f542:	1c59      	adds	r1, r3, #1
 800f544:	d103      	bne.n	800f54e <_raise_r+0x42>
 800f546:	2316      	movs	r3, #22
 800f548:	6003      	str	r3, [r0, #0]
 800f54a:	2001      	movs	r0, #1
 800f54c:	e7e7      	b.n	800f51e <_raise_r+0x12>
 800f54e:	2400      	movs	r4, #0
 800f550:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f554:	4628      	mov	r0, r5
 800f556:	4798      	blx	r3
 800f558:	2000      	movs	r0, #0
 800f55a:	e7e0      	b.n	800f51e <_raise_r+0x12>

0800f55c <raise>:
 800f55c:	4b02      	ldr	r3, [pc, #8]	; (800f568 <raise+0xc>)
 800f55e:	4601      	mov	r1, r0
 800f560:	6818      	ldr	r0, [r3, #0]
 800f562:	f7ff bfd3 	b.w	800f50c <_raise_r>
 800f566:	bf00      	nop
 800f568:	2400001c 	.word	0x2400001c

0800f56c <_kill_r>:
 800f56c:	b538      	push	{r3, r4, r5, lr}
 800f56e:	4d07      	ldr	r5, [pc, #28]	; (800f58c <_kill_r+0x20>)
 800f570:	2300      	movs	r3, #0
 800f572:	4604      	mov	r4, r0
 800f574:	4608      	mov	r0, r1
 800f576:	4611      	mov	r1, r2
 800f578:	602b      	str	r3, [r5, #0]
 800f57a:	f7f3 fc6d 	bl	8002e58 <_kill>
 800f57e:	1c43      	adds	r3, r0, #1
 800f580:	d102      	bne.n	800f588 <_kill_r+0x1c>
 800f582:	682b      	ldr	r3, [r5, #0]
 800f584:	b103      	cbz	r3, 800f588 <_kill_r+0x1c>
 800f586:	6023      	str	r3, [r4, #0]
 800f588:	bd38      	pop	{r3, r4, r5, pc}
 800f58a:	bf00      	nop
 800f58c:	24000bd8 	.word	0x24000bd8

0800f590 <_getpid_r>:
 800f590:	f7f3 bc5a 	b.w	8002e48 <_getpid>

0800f594 <_init>:
 800f594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f596:	bf00      	nop
 800f598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f59a:	bc08      	pop	{r3}
 800f59c:	469e      	mov	lr, r3
 800f59e:	4770      	bx	lr

0800f5a0 <_fini>:
 800f5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5a2:	bf00      	nop
 800f5a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5a6:	bc08      	pop	{r3}
 800f5a8:	469e      	mov	lr, r3
 800f5aa:	4770      	bx	lr
