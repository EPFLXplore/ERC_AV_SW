
XploreAvionics_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001023c  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cd0  081104e0  081104e0  000204e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  081111b0  081111b0  000211b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  081111b8  081111b8  000211b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  081111c4  081111c4  000211c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000204  10000000  081111cc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00009dd4  10000204  081113d0  00030204  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  10009fd8  081113d0  00039fd8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 10 .debug_info   0006ac67  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b481  00000000  00000000  0009ae9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002878  00000000  00000000  000a6320  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002500  00000000  00000000  000a8b98  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004b7f3  00000000  00000000  000ab098  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003447f  00000000  00000000  000f688b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001aa32c  00000000  00000000  0012ad0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  002d5036  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b9cc  00000000  00000000  002d50b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000204 	.word	0x10000204
 81002bc:	00000000 	.word	0x00000000
 81002c0:	081104c4 	.word	0x081104c4

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000208 	.word	0x10000208
 81002dc:	081104c4 	.word	0x081104c4

081002e0 <strcmp>:
 81002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 81002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 81002e8:	2a01      	cmp	r2, #1
 81002ea:	bf28      	it	cs
 81002ec:	429a      	cmpcs	r2, r3
 81002ee:	d0f7      	beq.n	81002e0 <strcmp>
 81002f0:	1ad0      	subs	r0, r2, r3
 81002f2:	4770      	bx	lr

081002f4 <strlen>:
 81002f4:	4603      	mov	r3, r0
 81002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002fa:	2a00      	cmp	r2, #0
 81002fc:	d1fb      	bne.n	81002f6 <strlen+0x2>
 81002fe:	1a18      	subs	r0, r3, r0
 8100300:	3801      	subs	r0, #1
 8100302:	4770      	bx	lr
	...

08100310 <memchr>:
 8100310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8100314:	2a10      	cmp	r2, #16
 8100316:	db2b      	blt.n	8100370 <memchr+0x60>
 8100318:	f010 0f07 	tst.w	r0, #7
 810031c:	d008      	beq.n	8100330 <memchr+0x20>
 810031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100322:	3a01      	subs	r2, #1
 8100324:	428b      	cmp	r3, r1
 8100326:	d02d      	beq.n	8100384 <memchr+0x74>
 8100328:	f010 0f07 	tst.w	r0, #7
 810032c:	b342      	cbz	r2, 8100380 <memchr+0x70>
 810032e:	d1f6      	bne.n	810031e <memchr+0xe>
 8100330:	b4f0      	push	{r4, r5, r6, r7}
 8100332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810033a:	f022 0407 	bic.w	r4, r2, #7
 810033e:	f07f 0700 	mvns.w	r7, #0
 8100342:	2300      	movs	r3, #0
 8100344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100348:	3c08      	subs	r4, #8
 810034a:	ea85 0501 	eor.w	r5, r5, r1
 810034e:	ea86 0601 	eor.w	r6, r6, r1
 8100352:	fa85 f547 	uadd8	r5, r5, r7
 8100356:	faa3 f587 	sel	r5, r3, r7
 810035a:	fa86 f647 	uadd8	r6, r6, r7
 810035e:	faa5 f687 	sel	r6, r5, r7
 8100362:	b98e      	cbnz	r6, 8100388 <memchr+0x78>
 8100364:	d1ee      	bne.n	8100344 <memchr+0x34>
 8100366:	bcf0      	pop	{r4, r5, r6, r7}
 8100368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810036c:	f002 0207 	and.w	r2, r2, #7
 8100370:	b132      	cbz	r2, 8100380 <memchr+0x70>
 8100372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100376:	3a01      	subs	r2, #1
 8100378:	ea83 0301 	eor.w	r3, r3, r1
 810037c:	b113      	cbz	r3, 8100384 <memchr+0x74>
 810037e:	d1f8      	bne.n	8100372 <memchr+0x62>
 8100380:	2000      	movs	r0, #0
 8100382:	4770      	bx	lr
 8100384:	3801      	subs	r0, #1
 8100386:	4770      	bx	lr
 8100388:	2d00      	cmp	r5, #0
 810038a:	bf06      	itte	eq
 810038c:	4635      	moveq	r5, r6
 810038e:	3803      	subeq	r0, #3
 8100390:	3807      	subne	r0, #7
 8100392:	f015 0f01 	tst.w	r5, #1
 8100396:	d107      	bne.n	81003a8 <memchr+0x98>
 8100398:	3001      	adds	r0, #1
 810039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810039e:	bf02      	ittt	eq
 81003a0:	3001      	addeq	r0, #1
 81003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 81003a6:	3001      	addeq	r0, #1
 81003a8:	bcf0      	pop	{r4, r5, r6, r7}
 81003aa:	3801      	subs	r0, #1
 81003ac:	4770      	bx	lr
 81003ae:	bf00      	nop

081003b0 <__aeabi_drsub>:
 81003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 81003b4:	e002      	b.n	81003bc <__adddf3>
 81003b6:	bf00      	nop

081003b8 <__aeabi_dsub>:
 81003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

081003bc <__adddf3>:
 81003bc:	b530      	push	{r4, r5, lr}
 81003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003c6:	ea94 0f05 	teq	r4, r5
 81003ca:	bf08      	it	eq
 81003cc:	ea90 0f02 	teqeq	r0, r2
 81003d0:	bf1f      	itttt	ne
 81003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003e2:	f000 80e2 	beq.w	81005aa <__adddf3+0x1ee>
 81003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ee:	bfb8      	it	lt
 81003f0:	426d      	neglt	r5, r5
 81003f2:	dd0c      	ble.n	810040e <__adddf3+0x52>
 81003f4:	442c      	add	r4, r5
 81003f6:	ea80 0202 	eor.w	r2, r0, r2
 81003fa:	ea81 0303 	eor.w	r3, r1, r3
 81003fe:	ea82 0000 	eor.w	r0, r2, r0
 8100402:	ea83 0101 	eor.w	r1, r3, r1
 8100406:	ea80 0202 	eor.w	r2, r0, r2
 810040a:	ea81 0303 	eor.w	r3, r1, r3
 810040e:	2d36      	cmp	r5, #54	; 0x36
 8100410:	bf88      	it	hi
 8100412:	bd30      	pophi	{r4, r5, pc}
 8100414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100424:	d002      	beq.n	810042c <__adddf3+0x70>
 8100426:	4240      	negs	r0, r0
 8100428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100438:	d002      	beq.n	8100440 <__adddf3+0x84>
 810043a:	4252      	negs	r2, r2
 810043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100440:	ea94 0f05 	teq	r4, r5
 8100444:	f000 80a7 	beq.w	8100596 <__adddf3+0x1da>
 8100448:	f1a4 0401 	sub.w	r4, r4, #1
 810044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100450:	db0d      	blt.n	810046e <__adddf3+0xb2>
 8100452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100456:	fa22 f205 	lsr.w	r2, r2, r5
 810045a:	1880      	adds	r0, r0, r2
 810045c:	f141 0100 	adc.w	r1, r1, #0
 8100460:	fa03 f20e 	lsl.w	r2, r3, lr
 8100464:	1880      	adds	r0, r0, r2
 8100466:	fa43 f305 	asr.w	r3, r3, r5
 810046a:	4159      	adcs	r1, r3
 810046c:	e00e      	b.n	810048c <__adddf3+0xd0>
 810046e:	f1a5 0520 	sub.w	r5, r5, #32
 8100472:	f10e 0e20 	add.w	lr, lr, #32
 8100476:	2a01      	cmp	r2, #1
 8100478:	fa03 fc0e 	lsl.w	ip, r3, lr
 810047c:	bf28      	it	cs
 810047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100482:	fa43 f305 	asr.w	r3, r3, r5
 8100486:	18c0      	adds	r0, r0, r3
 8100488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100490:	d507      	bpl.n	81004a2 <__adddf3+0xe6>
 8100492:	f04f 0e00 	mov.w	lr, #0
 8100496:	f1dc 0c00 	rsbs	ip, ip, #0
 810049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810049e:	eb6e 0101 	sbc.w	r1, lr, r1
 81004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 81004a6:	d31b      	bcc.n	81004e0 <__adddf3+0x124>
 81004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 81004ac:	d30c      	bcc.n	81004c8 <__adddf3+0x10c>
 81004ae:	0849      	lsrs	r1, r1, #1
 81004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 81004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81004b8:	f104 0401 	add.w	r4, r4, #1
 81004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004c4:	f080 809a 	bcs.w	81005fc <__adddf3+0x240>
 81004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004cc:	bf08      	it	eq
 81004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004d2:	f150 0000 	adcs.w	r0, r0, #0
 81004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004da:	ea41 0105 	orr.w	r1, r1, r5
 81004de:	bd30      	pop	{r4, r5, pc}
 81004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004e4:	4140      	adcs	r0, r0
 81004e6:	eb41 0101 	adc.w	r1, r1, r1
 81004ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81004ee:	f1a4 0401 	sub.w	r4, r4, #1
 81004f2:	d1e9      	bne.n	81004c8 <__adddf3+0x10c>
 81004f4:	f091 0f00 	teq	r1, #0
 81004f8:	bf04      	itt	eq
 81004fa:	4601      	moveq	r1, r0
 81004fc:	2000      	moveq	r0, #0
 81004fe:	fab1 f381 	clz	r3, r1
 8100502:	bf08      	it	eq
 8100504:	3320      	addeq	r3, #32
 8100506:	f1a3 030b 	sub.w	r3, r3, #11
 810050a:	f1b3 0220 	subs.w	r2, r3, #32
 810050e:	da0c      	bge.n	810052a <__adddf3+0x16e>
 8100510:	320c      	adds	r2, #12
 8100512:	dd08      	ble.n	8100526 <__adddf3+0x16a>
 8100514:	f102 0c14 	add.w	ip, r2, #20
 8100518:	f1c2 020c 	rsb	r2, r2, #12
 810051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8100520:	fa21 f102 	lsr.w	r1, r1, r2
 8100524:	e00c      	b.n	8100540 <__adddf3+0x184>
 8100526:	f102 0214 	add.w	r2, r2, #20
 810052a:	bfd8      	it	le
 810052c:	f1c2 0c20 	rsble	ip, r2, #32
 8100530:	fa01 f102 	lsl.w	r1, r1, r2
 8100534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100538:	bfdc      	itt	le
 810053a:	ea41 010c 	orrle.w	r1, r1, ip
 810053e:	4090      	lslle	r0, r2
 8100540:	1ae4      	subs	r4, r4, r3
 8100542:	bfa2      	ittt	ge
 8100544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100548:	4329      	orrge	r1, r5
 810054a:	bd30      	popge	{r4, r5, pc}
 810054c:	ea6f 0404 	mvn.w	r4, r4
 8100550:	3c1f      	subs	r4, #31
 8100552:	da1c      	bge.n	810058e <__adddf3+0x1d2>
 8100554:	340c      	adds	r4, #12
 8100556:	dc0e      	bgt.n	8100576 <__adddf3+0x1ba>
 8100558:	f104 0414 	add.w	r4, r4, #20
 810055c:	f1c4 0220 	rsb	r2, r4, #32
 8100560:	fa20 f004 	lsr.w	r0, r0, r4
 8100564:	fa01 f302 	lsl.w	r3, r1, r2
 8100568:	ea40 0003 	orr.w	r0, r0, r3
 810056c:	fa21 f304 	lsr.w	r3, r1, r4
 8100570:	ea45 0103 	orr.w	r1, r5, r3
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f1c4 040c 	rsb	r4, r4, #12
 810057a:	f1c4 0220 	rsb	r2, r4, #32
 810057e:	fa20 f002 	lsr.w	r0, r0, r2
 8100582:	fa01 f304 	lsl.w	r3, r1, r4
 8100586:	ea40 0003 	orr.w	r0, r0, r3
 810058a:	4629      	mov	r1, r5
 810058c:	bd30      	pop	{r4, r5, pc}
 810058e:	fa21 f004 	lsr.w	r0, r1, r4
 8100592:	4629      	mov	r1, r5
 8100594:	bd30      	pop	{r4, r5, pc}
 8100596:	f094 0f00 	teq	r4, #0
 810059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810059e:	bf06      	itte	eq
 81005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 81005a4:	3401      	addeq	r4, #1
 81005a6:	3d01      	subne	r5, #1
 81005a8:	e74e      	b.n	8100448 <__adddf3+0x8c>
 81005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ae:	bf18      	it	ne
 81005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81005b4:	d029      	beq.n	810060a <__adddf3+0x24e>
 81005b6:	ea94 0f05 	teq	r4, r5
 81005ba:	bf08      	it	eq
 81005bc:	ea90 0f02 	teqeq	r0, r2
 81005c0:	d005      	beq.n	81005ce <__adddf3+0x212>
 81005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005c6:	bf04      	itt	eq
 81005c8:	4619      	moveq	r1, r3
 81005ca:	4610      	moveq	r0, r2
 81005cc:	bd30      	pop	{r4, r5, pc}
 81005ce:	ea91 0f03 	teq	r1, r3
 81005d2:	bf1e      	ittt	ne
 81005d4:	2100      	movne	r1, #0
 81005d6:	2000      	movne	r0, #0
 81005d8:	bd30      	popne	{r4, r5, pc}
 81005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005de:	d105      	bne.n	81005ec <__adddf3+0x230>
 81005e0:	0040      	lsls	r0, r0, #1
 81005e2:	4149      	adcs	r1, r1
 81005e4:	bf28      	it	cs
 81005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ea:	bd30      	pop	{r4, r5, pc}
 81005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005f0:	bf3c      	itt	cc
 81005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005f6:	bd30      	popcc	{r4, r5, pc}
 81005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8100600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8100604:	f04f 0000 	mov.w	r0, #0
 8100608:	bd30      	pop	{r4, r5, pc}
 810060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810060e:	bf1a      	itte	ne
 8100610:	4619      	movne	r1, r3
 8100612:	4610      	movne	r0, r2
 8100614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100618:	bf1c      	itt	ne
 810061a:	460b      	movne	r3, r1
 810061c:	4602      	movne	r2, r0
 810061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100622:	bf06      	itte	eq
 8100624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100628:	ea91 0f03 	teqeq	r1, r3
 810062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100630:	bd30      	pop	{r4, r5, pc}
 8100632:	bf00      	nop

08100634 <__aeabi_ui2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f04f 0500 	mov.w	r5, #0
 810064c:	f04f 0100 	mov.w	r1, #0
 8100650:	e750      	b.n	81004f4 <__adddf3+0x138>
 8100652:	bf00      	nop

08100654 <__aeabi_i2d>:
 8100654:	f090 0f00 	teq	r0, #0
 8100658:	bf04      	itt	eq
 810065a:	2100      	moveq	r1, #0
 810065c:	4770      	bxeq	lr
 810065e:	b530      	push	{r4, r5, lr}
 8100660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810066c:	bf48      	it	mi
 810066e:	4240      	negmi	r0, r0
 8100670:	f04f 0100 	mov.w	r1, #0
 8100674:	e73e      	b.n	81004f4 <__adddf3+0x138>
 8100676:	bf00      	nop

08100678 <__aeabi_f2d>:
 8100678:	0042      	lsls	r2, r0, #1
 810067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100686:	bf1f      	itttt	ne
 8100688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100694:	4770      	bxne	lr
 8100696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810069a:	bf08      	it	eq
 810069c:	4770      	bxeq	lr
 810069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 81006a2:	bf04      	itt	eq
 81006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 81006a8:	4770      	bxeq	lr
 81006aa:	b530      	push	{r4, r5, lr}
 81006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 81006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 81006b8:	e71c      	b.n	81004f4 <__adddf3+0x138>
 81006ba:	bf00      	nop

081006bc <__aeabi_ul2d>:
 81006bc:	ea50 0201 	orrs.w	r2, r0, r1
 81006c0:	bf08      	it	eq
 81006c2:	4770      	bxeq	lr
 81006c4:	b530      	push	{r4, r5, lr}
 81006c6:	f04f 0500 	mov.w	r5, #0
 81006ca:	e00a      	b.n	81006e2 <__aeabi_l2d+0x16>

081006cc <__aeabi_l2d>:
 81006cc:	ea50 0201 	orrs.w	r2, r0, r1
 81006d0:	bf08      	it	eq
 81006d2:	4770      	bxeq	lr
 81006d4:	b530      	push	{r4, r5, lr}
 81006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006da:	d502      	bpl.n	81006e2 <__aeabi_l2d+0x16>
 81006dc:	4240      	negs	r0, r0
 81006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ee:	f43f aed8 	beq.w	81004a2 <__adddf3+0xe6>
 81006f2:	f04f 0203 	mov.w	r2, #3
 81006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006fa:	bf18      	it	ne
 81006fc:	3203      	addne	r2, #3
 81006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100702:	bf18      	it	ne
 8100704:	3203      	addne	r2, #3
 8100706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 810070a:	f1c2 0320 	rsb	r3, r2, #32
 810070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8100712:	fa20 f002 	lsr.w	r0, r0, r2
 8100716:	fa01 fe03 	lsl.w	lr, r1, r3
 810071a:	ea40 000e 	orr.w	r0, r0, lr
 810071e:	fa21 f102 	lsr.w	r1, r1, r2
 8100722:	4414      	add	r4, r2
 8100724:	e6bd      	b.n	81004a2 <__adddf3+0xe6>
 8100726:	bf00      	nop

08100728 <__aeabi_dmul>:
 8100728:	b570      	push	{r4, r5, r6, lr}
 810072a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810072e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100736:	bf1d      	ittte	ne
 8100738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810073c:	ea94 0f0c 	teqne	r4, ip
 8100740:	ea95 0f0c 	teqne	r5, ip
 8100744:	f000 f8de 	bleq	8100904 <__aeabi_dmul+0x1dc>
 8100748:	442c      	add	r4, r5
 810074a:	ea81 0603 	eor.w	r6, r1, r3
 810074e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100752:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100756:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810075a:	bf18      	it	ne
 810075c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100760:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100764:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100768:	d038      	beq.n	81007dc <__aeabi_dmul+0xb4>
 810076a:	fba0 ce02 	umull	ip, lr, r0, r2
 810076e:	f04f 0500 	mov.w	r5, #0
 8100772:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100776:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810077a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810077e:	f04f 0600 	mov.w	r6, #0
 8100782:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100786:	f09c 0f00 	teq	ip, #0
 810078a:	bf18      	it	ne
 810078c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100790:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100794:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100798:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810079c:	d204      	bcs.n	81007a8 <__aeabi_dmul+0x80>
 810079e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81007a2:	416d      	adcs	r5, r5
 81007a4:	eb46 0606 	adc.w	r6, r6, r6
 81007a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81007ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81007b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81007b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81007b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81007bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007c0:	bf88      	it	hi
 81007c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007c6:	d81e      	bhi.n	8100806 <__aeabi_dmul+0xde>
 81007c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007cc:	bf08      	it	eq
 81007ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007d2:	f150 0000 	adcs.w	r0, r0, #0
 81007d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007da:	bd70      	pop	{r4, r5, r6, pc}
 81007dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007e0:	ea46 0101 	orr.w	r1, r6, r1
 81007e4:	ea40 0002 	orr.w	r0, r0, r2
 81007e8:	ea81 0103 	eor.w	r1, r1, r3
 81007ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007f0:	bfc2      	ittt	gt
 81007f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007fa:	bd70      	popgt	{r4, r5, r6, pc}
 81007fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100800:	f04f 0e00 	mov.w	lr, #0
 8100804:	3c01      	subs	r4, #1
 8100806:	f300 80ab 	bgt.w	8100960 <__aeabi_dmul+0x238>
 810080a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 810080e:	bfde      	ittt	le
 8100810:	2000      	movle	r0, #0
 8100812:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8100816:	bd70      	pople	{r4, r5, r6, pc}
 8100818:	f1c4 0400 	rsb	r4, r4, #0
 810081c:	3c20      	subs	r4, #32
 810081e:	da35      	bge.n	810088c <__aeabi_dmul+0x164>
 8100820:	340c      	adds	r4, #12
 8100822:	dc1b      	bgt.n	810085c <__aeabi_dmul+0x134>
 8100824:	f104 0414 	add.w	r4, r4, #20
 8100828:	f1c4 0520 	rsb	r5, r4, #32
 810082c:	fa00 f305 	lsl.w	r3, r0, r5
 8100830:	fa20 f004 	lsr.w	r0, r0, r4
 8100834:	fa01 f205 	lsl.w	r2, r1, r5
 8100838:	ea40 0002 	orr.w	r0, r0, r2
 810083c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100840:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100844:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100848:	fa21 f604 	lsr.w	r6, r1, r4
 810084c:	eb42 0106 	adc.w	r1, r2, r6
 8100850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100854:	bf08      	it	eq
 8100856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810085a:	bd70      	pop	{r4, r5, r6, pc}
 810085c:	f1c4 040c 	rsb	r4, r4, #12
 8100860:	f1c4 0520 	rsb	r5, r4, #32
 8100864:	fa00 f304 	lsl.w	r3, r0, r4
 8100868:	fa20 f005 	lsr.w	r0, r0, r5
 810086c:	fa01 f204 	lsl.w	r2, r1, r4
 8100870:	ea40 0002 	orr.w	r0, r0, r2
 8100874:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100878:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810087c:	f141 0100 	adc.w	r1, r1, #0
 8100880:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100884:	bf08      	it	eq
 8100886:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810088a:	bd70      	pop	{r4, r5, r6, pc}
 810088c:	f1c4 0520 	rsb	r5, r4, #32
 8100890:	fa00 f205 	lsl.w	r2, r0, r5
 8100894:	ea4e 0e02 	orr.w	lr, lr, r2
 8100898:	fa20 f304 	lsr.w	r3, r0, r4
 810089c:	fa01 f205 	lsl.w	r2, r1, r5
 81008a0:	ea43 0302 	orr.w	r3, r3, r2
 81008a4:	fa21 f004 	lsr.w	r0, r1, r4
 81008a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81008ac:	fa21 f204 	lsr.w	r2, r1, r4
 81008b0:	ea20 0002 	bic.w	r0, r0, r2
 81008b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81008b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81008bc:	bf08      	it	eq
 81008be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008c2:	bd70      	pop	{r4, r5, r6, pc}
 81008c4:	f094 0f00 	teq	r4, #0
 81008c8:	d10f      	bne.n	81008ea <__aeabi_dmul+0x1c2>
 81008ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ce:	0040      	lsls	r0, r0, #1
 81008d0:	eb41 0101 	adc.w	r1, r1, r1
 81008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3c01      	subeq	r4, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1a6>
 81008de:	ea41 0106 	orr.w	r1, r1, r6
 81008e2:	f095 0f00 	teq	r5, #0
 81008e6:	bf18      	it	ne
 81008e8:	4770      	bxne	lr
 81008ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ee:	0052      	lsls	r2, r2, #1
 81008f0:	eb43 0303 	adc.w	r3, r3, r3
 81008f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008f8:	bf08      	it	eq
 81008fa:	3d01      	subeq	r5, #1
 81008fc:	d0f7      	beq.n	81008ee <__aeabi_dmul+0x1c6>
 81008fe:	ea43 0306 	orr.w	r3, r3, r6
 8100902:	4770      	bx	lr
 8100904:	ea94 0f0c 	teq	r4, ip
 8100908:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 810090c:	bf18      	it	ne
 810090e:	ea95 0f0c 	teqne	r5, ip
 8100912:	d00c      	beq.n	810092e <__aeabi_dmul+0x206>
 8100914:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100918:	bf18      	it	ne
 810091a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091e:	d1d1      	bne.n	81008c4 <__aeabi_dmul+0x19c>
 8100920:	ea81 0103 	eor.w	r1, r1, r3
 8100924:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100928:	f04f 0000 	mov.w	r0, #0
 810092c:	bd70      	pop	{r4, r5, r6, pc}
 810092e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100932:	bf06      	itte	eq
 8100934:	4610      	moveq	r0, r2
 8100936:	4619      	moveq	r1, r3
 8100938:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810093c:	d019      	beq.n	8100972 <__aeabi_dmul+0x24a>
 810093e:	ea94 0f0c 	teq	r4, ip
 8100942:	d102      	bne.n	810094a <__aeabi_dmul+0x222>
 8100944:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100948:	d113      	bne.n	8100972 <__aeabi_dmul+0x24a>
 810094a:	ea95 0f0c 	teq	r5, ip
 810094e:	d105      	bne.n	810095c <__aeabi_dmul+0x234>
 8100950:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100954:	bf1c      	itt	ne
 8100956:	4610      	movne	r0, r2
 8100958:	4619      	movne	r1, r3
 810095a:	d10a      	bne.n	8100972 <__aeabi_dmul+0x24a>
 810095c:	ea81 0103 	eor.w	r1, r1, r3
 8100960:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100964:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100968:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810096c:	f04f 0000 	mov.w	r0, #0
 8100970:	bd70      	pop	{r4, r5, r6, pc}
 8100972:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100976:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810097a:	bd70      	pop	{r4, r5, r6, pc}

0810097c <__aeabi_ddiv>:
 810097c:	b570      	push	{r4, r5, r6, lr}
 810097e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100982:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100986:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810098a:	bf1d      	ittte	ne
 810098c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100990:	ea94 0f0c 	teqne	r4, ip
 8100994:	ea95 0f0c 	teqne	r5, ip
 8100998:	f000 f8a7 	bleq	8100aea <__aeabi_ddiv+0x16e>
 810099c:	eba4 0405 	sub.w	r4, r4, r5
 81009a0:	ea81 0e03 	eor.w	lr, r1, r3
 81009a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81009a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81009ac:	f000 8088 	beq.w	8100ac0 <__aeabi_ddiv+0x144>
 81009b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81009b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 81009b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81009bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009d4:	429d      	cmp	r5, r3
 81009d6:	bf08      	it	eq
 81009d8:	4296      	cmpeq	r6, r2
 81009da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009e2:	d202      	bcs.n	81009ea <__aeabi_ddiv+0x6e>
 81009e4:	085b      	lsrs	r3, r3, #1
 81009e6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ea:	1ab6      	subs	r6, r6, r2
 81009ec:	eb65 0503 	sbc.w	r5, r5, r3
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a06:	bf22      	ittt	cs
 8100a08:	1ab6      	subcs	r6, r6, r2
 8100a0a:	4675      	movcs	r5, lr
 8100a0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8100a10:	085b      	lsrs	r3, r3, #1
 8100a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a1e:	bf22      	ittt	cs
 8100a20:	1ab6      	subcs	r6, r6, r2
 8100a22:	4675      	movcs	r5, lr
 8100a24:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a28:	085b      	lsrs	r3, r3, #1
 8100a2a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a36:	bf22      	ittt	cs
 8100a38:	1ab6      	subcs	r6, r6, r2
 8100a3a:	4675      	movcs	r5, lr
 8100a3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a40:	085b      	lsrs	r3, r3, #1
 8100a42:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a46:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a4e:	bf22      	ittt	cs
 8100a50:	1ab6      	subcs	r6, r6, r2
 8100a52:	4675      	movcs	r5, lr
 8100a54:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a58:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a5c:	d018      	beq.n	8100a90 <__aeabi_ddiv+0x114>
 8100a5e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a62:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a66:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a6a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a6e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a72:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a76:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a7a:	d1c0      	bne.n	81009fe <__aeabi_ddiv+0x82>
 8100a7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a80:	d10b      	bne.n	8100a9a <__aeabi_ddiv+0x11e>
 8100a82:	ea41 0100 	orr.w	r1, r1, r0
 8100a86:	f04f 0000 	mov.w	r0, #0
 8100a8a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a8e:	e7b6      	b.n	81009fe <__aeabi_ddiv+0x82>
 8100a90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a94:	bf04      	itt	eq
 8100a96:	4301      	orreq	r1, r0
 8100a98:	2000      	moveq	r0, #0
 8100a9a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a9e:	bf88      	it	hi
 8100aa0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100aa4:	f63f aeaf 	bhi.w	8100806 <__aeabi_dmul+0xde>
 8100aa8:	ebb5 0c03 	subs.w	ip, r5, r3
 8100aac:	bf04      	itt	eq
 8100aae:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100ab2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100ab6:	f150 0000 	adcs.w	r0, r0, #0
 8100aba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100abe:	bd70      	pop	{r4, r5, r6, pc}
 8100ac0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100ac4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100ac8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100acc:	bfc2      	ittt	gt
 8100ace:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ad2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ad6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ad8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100adc:	f04f 0e00 	mov.w	lr, #0
 8100ae0:	3c01      	subs	r4, #1
 8100ae2:	e690      	b.n	8100806 <__aeabi_dmul+0xde>
 8100ae4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ae8:	e68d      	b.n	8100806 <__aeabi_dmul+0xde>
 8100aea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100aee:	ea94 0f0c 	teq	r4, ip
 8100af2:	bf08      	it	eq
 8100af4:	ea95 0f0c 	teqeq	r5, ip
 8100af8:	f43f af3b 	beq.w	8100972 <__aeabi_dmul+0x24a>
 8100afc:	ea94 0f0c 	teq	r4, ip
 8100b00:	d10a      	bne.n	8100b18 <__aeabi_ddiv+0x19c>
 8100b02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100b06:	f47f af34 	bne.w	8100972 <__aeabi_dmul+0x24a>
 8100b0a:	ea95 0f0c 	teq	r5, ip
 8100b0e:	f47f af25 	bne.w	810095c <__aeabi_dmul+0x234>
 8100b12:	4610      	mov	r0, r2
 8100b14:	4619      	mov	r1, r3
 8100b16:	e72c      	b.n	8100972 <__aeabi_dmul+0x24a>
 8100b18:	ea95 0f0c 	teq	r5, ip
 8100b1c:	d106      	bne.n	8100b2c <__aeabi_ddiv+0x1b0>
 8100b1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b22:	f43f aefd 	beq.w	8100920 <__aeabi_dmul+0x1f8>
 8100b26:	4610      	mov	r0, r2
 8100b28:	4619      	mov	r1, r3
 8100b2a:	e722      	b.n	8100972 <__aeabi_dmul+0x24a>
 8100b2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b30:	bf18      	it	ne
 8100b32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b36:	f47f aec5 	bne.w	81008c4 <__aeabi_dmul+0x19c>
 8100b3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b3e:	f47f af0d 	bne.w	810095c <__aeabi_dmul+0x234>
 8100b42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b46:	f47f aeeb 	bne.w	8100920 <__aeabi_dmul+0x1f8>
 8100b4a:	e712      	b.n	8100972 <__aeabi_dmul+0x24a>

08100b4c <__gedf2>:
 8100b4c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b50:	e006      	b.n	8100b60 <__cmpdf2+0x4>
 8100b52:	bf00      	nop

08100b54 <__ledf2>:
 8100b54:	f04f 0c01 	mov.w	ip, #1
 8100b58:	e002      	b.n	8100b60 <__cmpdf2+0x4>
 8100b5a:	bf00      	nop

08100b5c <__cmpdf2>:
 8100b5c:	f04f 0c01 	mov.w	ip, #1
 8100b60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b70:	bf18      	it	ne
 8100b72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b76:	d01b      	beq.n	8100bb0 <__cmpdf2+0x54>
 8100b78:	b001      	add	sp, #4
 8100b7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b7e:	bf0c      	ite	eq
 8100b80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b84:	ea91 0f03 	teqne	r1, r3
 8100b88:	bf02      	ittt	eq
 8100b8a:	ea90 0f02 	teqeq	r0, r2
 8100b8e:	2000      	moveq	r0, #0
 8100b90:	4770      	bxeq	lr
 8100b92:	f110 0f00 	cmn.w	r0, #0
 8100b96:	ea91 0f03 	teq	r1, r3
 8100b9a:	bf58      	it	pl
 8100b9c:	4299      	cmppl	r1, r3
 8100b9e:	bf08      	it	eq
 8100ba0:	4290      	cmpeq	r0, r2
 8100ba2:	bf2c      	ite	cs
 8100ba4:	17d8      	asrcs	r0, r3, #31
 8100ba6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100baa:	f040 0001 	orr.w	r0, r0, #1
 8100bae:	4770      	bx	lr
 8100bb0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100bb8:	d102      	bne.n	8100bc0 <__cmpdf2+0x64>
 8100bba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100bbe:	d107      	bne.n	8100bd0 <__cmpdf2+0x74>
 8100bc0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100bc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100bc8:	d1d6      	bne.n	8100b78 <__cmpdf2+0x1c>
 8100bca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bce:	d0d3      	beq.n	8100b78 <__cmpdf2+0x1c>
 8100bd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bd4:	4770      	bx	lr
 8100bd6:	bf00      	nop

08100bd8 <__aeabi_cdrcmple>:
 8100bd8:	4684      	mov	ip, r0
 8100bda:	4610      	mov	r0, r2
 8100bdc:	4662      	mov	r2, ip
 8100bde:	468c      	mov	ip, r1
 8100be0:	4619      	mov	r1, r3
 8100be2:	4663      	mov	r3, ip
 8100be4:	e000      	b.n	8100be8 <__aeabi_cdcmpeq>
 8100be6:	bf00      	nop

08100be8 <__aeabi_cdcmpeq>:
 8100be8:	b501      	push	{r0, lr}
 8100bea:	f7ff ffb7 	bl	8100b5c <__cmpdf2>
 8100bee:	2800      	cmp	r0, #0
 8100bf0:	bf48      	it	mi
 8100bf2:	f110 0f00 	cmnmi.w	r0, #0
 8100bf6:	bd01      	pop	{r0, pc}

08100bf8 <__aeabi_dcmpeq>:
 8100bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bfc:	f7ff fff4 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c00:	bf0c      	ite	eq
 8100c02:	2001      	moveq	r0, #1
 8100c04:	2000      	movne	r0, #0
 8100c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c0a:	bf00      	nop

08100c0c <__aeabi_dcmplt>:
 8100c0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c10:	f7ff ffea 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c14:	bf34      	ite	cc
 8100c16:	2001      	movcc	r0, #1
 8100c18:	2000      	movcs	r0, #0
 8100c1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c1e:	bf00      	nop

08100c20 <__aeabi_dcmple>:
 8100c20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c24:	f7ff ffe0 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c28:	bf94      	ite	ls
 8100c2a:	2001      	movls	r0, #1
 8100c2c:	2000      	movhi	r0, #0
 8100c2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c32:	bf00      	nop

08100c34 <__aeabi_dcmpge>:
 8100c34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c38:	f7ff ffce 	bl	8100bd8 <__aeabi_cdrcmple>
 8100c3c:	bf94      	ite	ls
 8100c3e:	2001      	movls	r0, #1
 8100c40:	2000      	movhi	r0, #0
 8100c42:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c46:	bf00      	nop

08100c48 <__aeabi_dcmpgt>:
 8100c48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c4c:	f7ff ffc4 	bl	8100bd8 <__aeabi_cdrcmple>
 8100c50:	bf34      	ite	cc
 8100c52:	2001      	movcc	r0, #1
 8100c54:	2000      	movcs	r0, #0
 8100c56:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c5a:	bf00      	nop

08100c5c <__aeabi_dcmpun>:
 8100c5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c64:	d102      	bne.n	8100c6c <__aeabi_dcmpun+0x10>
 8100c66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c6a:	d10a      	bne.n	8100c82 <__aeabi_dcmpun+0x26>
 8100c6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c74:	d102      	bne.n	8100c7c <__aeabi_dcmpun+0x20>
 8100c76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c7a:	d102      	bne.n	8100c82 <__aeabi_dcmpun+0x26>
 8100c7c:	f04f 0000 	mov.w	r0, #0
 8100c80:	4770      	bx	lr
 8100c82:	f04f 0001 	mov.w	r0, #1
 8100c86:	4770      	bx	lr

08100c88 <__aeabi_d2iz>:
 8100c88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c90:	d215      	bcs.n	8100cbe <__aeabi_d2iz+0x36>
 8100c92:	d511      	bpl.n	8100cb8 <__aeabi_d2iz+0x30>
 8100c94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c9c:	d912      	bls.n	8100cc4 <__aeabi_d2iz+0x3c>
 8100c9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100ca2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100ca6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100caa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100cae:	fa23 f002 	lsr.w	r0, r3, r2
 8100cb2:	bf18      	it	ne
 8100cb4:	4240      	negne	r0, r0
 8100cb6:	4770      	bx	lr
 8100cb8:	f04f 0000 	mov.w	r0, #0
 8100cbc:	4770      	bx	lr
 8100cbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cc2:	d105      	bne.n	8100cd0 <__aeabi_d2iz+0x48>
 8100cc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100cc8:	bf08      	it	eq
 8100cca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cce:	4770      	bx	lr
 8100cd0:	f04f 0000 	mov.w	r0, #0
 8100cd4:	4770      	bx	lr
 8100cd6:	bf00      	nop

08100cd8 <__aeabi_d2f>:
 8100cd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100ce0:	bf24      	itt	cs
 8100ce2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100ce6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100cea:	d90d      	bls.n	8100d08 <__aeabi_d2f+0x30>
 8100cec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100cf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100cf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100cf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100cfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d00:	bf08      	it	eq
 8100d02:	f020 0001 	biceq.w	r0, r0, #1
 8100d06:	4770      	bx	lr
 8100d08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d0c:	d121      	bne.n	8100d52 <__aeabi_d2f+0x7a>
 8100d0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d12:	bfbc      	itt	lt
 8100d14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d18:	4770      	bxlt	lr
 8100d1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d22:	f1c2 0218 	rsb	r2, r2, #24
 8100d26:	f1c2 0c20 	rsb	ip, r2, #32
 8100d2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d2e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d32:	bf18      	it	ne
 8100d34:	f040 0001 	orrne.w	r0, r0, #1
 8100d38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d44:	ea40 000c 	orr.w	r0, r0, ip
 8100d48:	fa23 f302 	lsr.w	r3, r3, r2
 8100d4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d50:	e7cc      	b.n	8100cec <__aeabi_d2f+0x14>
 8100d52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d56:	d107      	bne.n	8100d68 <__aeabi_d2f+0x90>
 8100d58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d5c:	bf1e      	ittt	ne
 8100d5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d66:	4770      	bxne	lr
 8100d68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d74:	4770      	bx	lr
 8100d76:	bf00      	nop

08100d78 <__aeabi_ldivmod>:
 8100d78:	b97b      	cbnz	r3, 8100d9a <__aeabi_ldivmod+0x22>
 8100d7a:	b972      	cbnz	r2, 8100d9a <__aeabi_ldivmod+0x22>
 8100d7c:	2900      	cmp	r1, #0
 8100d7e:	bfbe      	ittt	lt
 8100d80:	2000      	movlt	r0, #0
 8100d82:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8100d86:	e006      	blt.n	8100d96 <__aeabi_ldivmod+0x1e>
 8100d88:	bf08      	it	eq
 8100d8a:	2800      	cmpeq	r0, #0
 8100d8c:	bf1c      	itt	ne
 8100d8e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8100d92:	f04f 30ff 	movne.w	r0, #4294967295
 8100d96:	f000 b9bd 	b.w	8101114 <__aeabi_idiv0>
 8100d9a:	f1ad 0c08 	sub.w	ip, sp, #8
 8100d9e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100da2:	2900      	cmp	r1, #0
 8100da4:	db09      	blt.n	8100dba <__aeabi_ldivmod+0x42>
 8100da6:	2b00      	cmp	r3, #0
 8100da8:	db1a      	blt.n	8100de0 <__aeabi_ldivmod+0x68>
 8100daa:	f000 f84d 	bl	8100e48 <__udivmoddi4>
 8100dae:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100db2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100db6:	b004      	add	sp, #16
 8100db8:	4770      	bx	lr
 8100dba:	4240      	negs	r0, r0
 8100dbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100dc0:	2b00      	cmp	r3, #0
 8100dc2:	db1b      	blt.n	8100dfc <__aeabi_ldivmod+0x84>
 8100dc4:	f000 f840 	bl	8100e48 <__udivmoddi4>
 8100dc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dd0:	b004      	add	sp, #16
 8100dd2:	4240      	negs	r0, r0
 8100dd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100dd8:	4252      	negs	r2, r2
 8100dda:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100dde:	4770      	bx	lr
 8100de0:	4252      	negs	r2, r2
 8100de2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100de6:	f000 f82f 	bl	8100e48 <__udivmoddi4>
 8100dea:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100df2:	b004      	add	sp, #16
 8100df4:	4240      	negs	r0, r0
 8100df6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100dfa:	4770      	bx	lr
 8100dfc:	4252      	negs	r2, r2
 8100dfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100e02:	f000 f821 	bl	8100e48 <__udivmoddi4>
 8100e06:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100e0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100e0e:	b004      	add	sp, #16
 8100e10:	4252      	negs	r2, r2
 8100e12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100e16:	4770      	bx	lr

08100e18 <__aeabi_uldivmod>:
 8100e18:	b953      	cbnz	r3, 8100e30 <__aeabi_uldivmod+0x18>
 8100e1a:	b94a      	cbnz	r2, 8100e30 <__aeabi_uldivmod+0x18>
 8100e1c:	2900      	cmp	r1, #0
 8100e1e:	bf08      	it	eq
 8100e20:	2800      	cmpeq	r0, #0
 8100e22:	bf1c      	itt	ne
 8100e24:	f04f 31ff 	movne.w	r1, #4294967295
 8100e28:	f04f 30ff 	movne.w	r0, #4294967295
 8100e2c:	f000 b972 	b.w	8101114 <__aeabi_idiv0>
 8100e30:	f1ad 0c08 	sub.w	ip, sp, #8
 8100e34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100e38:	f000 f806 	bl	8100e48 <__udivmoddi4>
 8100e3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100e40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100e44:	b004      	add	sp, #16
 8100e46:	4770      	bx	lr

08100e48 <__udivmoddi4>:
 8100e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e4c:	9e08      	ldr	r6, [sp, #32]
 8100e4e:	4604      	mov	r4, r0
 8100e50:	4688      	mov	r8, r1
 8100e52:	2b00      	cmp	r3, #0
 8100e54:	d14b      	bne.n	8100eee <__udivmoddi4+0xa6>
 8100e56:	428a      	cmp	r2, r1
 8100e58:	4615      	mov	r5, r2
 8100e5a:	d967      	bls.n	8100f2c <__udivmoddi4+0xe4>
 8100e5c:	fab2 f282 	clz	r2, r2
 8100e60:	b14a      	cbz	r2, 8100e76 <__udivmoddi4+0x2e>
 8100e62:	f1c2 0720 	rsb	r7, r2, #32
 8100e66:	fa01 f302 	lsl.w	r3, r1, r2
 8100e6a:	fa20 f707 	lsr.w	r7, r0, r7
 8100e6e:	4095      	lsls	r5, r2
 8100e70:	ea47 0803 	orr.w	r8, r7, r3
 8100e74:	4094      	lsls	r4, r2
 8100e76:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8100e7a:	0c23      	lsrs	r3, r4, #16
 8100e7c:	fbb8 f7fe 	udiv	r7, r8, lr
 8100e80:	fa1f fc85 	uxth.w	ip, r5
 8100e84:	fb0e 8817 	mls	r8, lr, r7, r8
 8100e88:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8100e8c:	fb07 f10c 	mul.w	r1, r7, ip
 8100e90:	4299      	cmp	r1, r3
 8100e92:	d909      	bls.n	8100ea8 <__udivmoddi4+0x60>
 8100e94:	18eb      	adds	r3, r5, r3
 8100e96:	f107 30ff 	add.w	r0, r7, #4294967295
 8100e9a:	f080 811b 	bcs.w	81010d4 <__udivmoddi4+0x28c>
 8100e9e:	4299      	cmp	r1, r3
 8100ea0:	f240 8118 	bls.w	81010d4 <__udivmoddi4+0x28c>
 8100ea4:	3f02      	subs	r7, #2
 8100ea6:	442b      	add	r3, r5
 8100ea8:	1a5b      	subs	r3, r3, r1
 8100eaa:	b2a4      	uxth	r4, r4
 8100eac:	fbb3 f0fe 	udiv	r0, r3, lr
 8100eb0:	fb0e 3310 	mls	r3, lr, r0, r3
 8100eb4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100eb8:	fb00 fc0c 	mul.w	ip, r0, ip
 8100ebc:	45a4      	cmp	ip, r4
 8100ebe:	d909      	bls.n	8100ed4 <__udivmoddi4+0x8c>
 8100ec0:	192c      	adds	r4, r5, r4
 8100ec2:	f100 33ff 	add.w	r3, r0, #4294967295
 8100ec6:	f080 8107 	bcs.w	81010d8 <__udivmoddi4+0x290>
 8100eca:	45a4      	cmp	ip, r4
 8100ecc:	f240 8104 	bls.w	81010d8 <__udivmoddi4+0x290>
 8100ed0:	3802      	subs	r0, #2
 8100ed2:	442c      	add	r4, r5
 8100ed4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8100ed8:	eba4 040c 	sub.w	r4, r4, ip
 8100edc:	2700      	movs	r7, #0
 8100ede:	b11e      	cbz	r6, 8100ee8 <__udivmoddi4+0xa0>
 8100ee0:	40d4      	lsrs	r4, r2
 8100ee2:	2300      	movs	r3, #0
 8100ee4:	e9c6 4300 	strd	r4, r3, [r6]
 8100ee8:	4639      	mov	r1, r7
 8100eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100eee:	428b      	cmp	r3, r1
 8100ef0:	d909      	bls.n	8100f06 <__udivmoddi4+0xbe>
 8100ef2:	2e00      	cmp	r6, #0
 8100ef4:	f000 80eb 	beq.w	81010ce <__udivmoddi4+0x286>
 8100ef8:	2700      	movs	r7, #0
 8100efa:	e9c6 0100 	strd	r0, r1, [r6]
 8100efe:	4638      	mov	r0, r7
 8100f00:	4639      	mov	r1, r7
 8100f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100f06:	fab3 f783 	clz	r7, r3
 8100f0a:	2f00      	cmp	r7, #0
 8100f0c:	d147      	bne.n	8100f9e <__udivmoddi4+0x156>
 8100f0e:	428b      	cmp	r3, r1
 8100f10:	d302      	bcc.n	8100f18 <__udivmoddi4+0xd0>
 8100f12:	4282      	cmp	r2, r0
 8100f14:	f200 80fa 	bhi.w	810110c <__udivmoddi4+0x2c4>
 8100f18:	1a84      	subs	r4, r0, r2
 8100f1a:	eb61 0303 	sbc.w	r3, r1, r3
 8100f1e:	2001      	movs	r0, #1
 8100f20:	4698      	mov	r8, r3
 8100f22:	2e00      	cmp	r6, #0
 8100f24:	d0e0      	beq.n	8100ee8 <__udivmoddi4+0xa0>
 8100f26:	e9c6 4800 	strd	r4, r8, [r6]
 8100f2a:	e7dd      	b.n	8100ee8 <__udivmoddi4+0xa0>
 8100f2c:	b902      	cbnz	r2, 8100f30 <__udivmoddi4+0xe8>
 8100f2e:	deff      	udf	#255	; 0xff
 8100f30:	fab2 f282 	clz	r2, r2
 8100f34:	2a00      	cmp	r2, #0
 8100f36:	f040 808f 	bne.w	8101058 <__udivmoddi4+0x210>
 8100f3a:	1b49      	subs	r1, r1, r5
 8100f3c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8100f40:	fa1f f885 	uxth.w	r8, r5
 8100f44:	2701      	movs	r7, #1
 8100f46:	fbb1 fcfe 	udiv	ip, r1, lr
 8100f4a:	0c23      	lsrs	r3, r4, #16
 8100f4c:	fb0e 111c 	mls	r1, lr, ip, r1
 8100f50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100f54:	fb08 f10c 	mul.w	r1, r8, ip
 8100f58:	4299      	cmp	r1, r3
 8100f5a:	d907      	bls.n	8100f6c <__udivmoddi4+0x124>
 8100f5c:	18eb      	adds	r3, r5, r3
 8100f5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8100f62:	d202      	bcs.n	8100f6a <__udivmoddi4+0x122>
 8100f64:	4299      	cmp	r1, r3
 8100f66:	f200 80cd 	bhi.w	8101104 <__udivmoddi4+0x2bc>
 8100f6a:	4684      	mov	ip, r0
 8100f6c:	1a59      	subs	r1, r3, r1
 8100f6e:	b2a3      	uxth	r3, r4
 8100f70:	fbb1 f0fe 	udiv	r0, r1, lr
 8100f74:	fb0e 1410 	mls	r4, lr, r0, r1
 8100f78:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8100f7c:	fb08 f800 	mul.w	r8, r8, r0
 8100f80:	45a0      	cmp	r8, r4
 8100f82:	d907      	bls.n	8100f94 <__udivmoddi4+0x14c>
 8100f84:	192c      	adds	r4, r5, r4
 8100f86:	f100 33ff 	add.w	r3, r0, #4294967295
 8100f8a:	d202      	bcs.n	8100f92 <__udivmoddi4+0x14a>
 8100f8c:	45a0      	cmp	r8, r4
 8100f8e:	f200 80b6 	bhi.w	81010fe <__udivmoddi4+0x2b6>
 8100f92:	4618      	mov	r0, r3
 8100f94:	eba4 0408 	sub.w	r4, r4, r8
 8100f98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8100f9c:	e79f      	b.n	8100ede <__udivmoddi4+0x96>
 8100f9e:	f1c7 0c20 	rsb	ip, r7, #32
 8100fa2:	40bb      	lsls	r3, r7
 8100fa4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8100fa8:	ea4e 0e03 	orr.w	lr, lr, r3
 8100fac:	fa01 f407 	lsl.w	r4, r1, r7
 8100fb0:	fa20 f50c 	lsr.w	r5, r0, ip
 8100fb4:	fa21 f30c 	lsr.w	r3, r1, ip
 8100fb8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8100fbc:	4325      	orrs	r5, r4
 8100fbe:	fbb3 f9f8 	udiv	r9, r3, r8
 8100fc2:	0c2c      	lsrs	r4, r5, #16
 8100fc4:	fb08 3319 	mls	r3, r8, r9, r3
 8100fc8:	fa1f fa8e 	uxth.w	sl, lr
 8100fcc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8100fd0:	fb09 f40a 	mul.w	r4, r9, sl
 8100fd4:	429c      	cmp	r4, r3
 8100fd6:	fa02 f207 	lsl.w	r2, r2, r7
 8100fda:	fa00 f107 	lsl.w	r1, r0, r7
 8100fde:	d90b      	bls.n	8100ff8 <__udivmoddi4+0x1b0>
 8100fe0:	eb1e 0303 	adds.w	r3, lr, r3
 8100fe4:	f109 30ff 	add.w	r0, r9, #4294967295
 8100fe8:	f080 8087 	bcs.w	81010fa <__udivmoddi4+0x2b2>
 8100fec:	429c      	cmp	r4, r3
 8100fee:	f240 8084 	bls.w	81010fa <__udivmoddi4+0x2b2>
 8100ff2:	f1a9 0902 	sub.w	r9, r9, #2
 8100ff6:	4473      	add	r3, lr
 8100ff8:	1b1b      	subs	r3, r3, r4
 8100ffa:	b2ad      	uxth	r5, r5
 8100ffc:	fbb3 f0f8 	udiv	r0, r3, r8
 8101000:	fb08 3310 	mls	r3, r8, r0, r3
 8101004:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8101008:	fb00 fa0a 	mul.w	sl, r0, sl
 810100c:	45a2      	cmp	sl, r4
 810100e:	d908      	bls.n	8101022 <__udivmoddi4+0x1da>
 8101010:	eb1e 0404 	adds.w	r4, lr, r4
 8101014:	f100 33ff 	add.w	r3, r0, #4294967295
 8101018:	d26b      	bcs.n	81010f2 <__udivmoddi4+0x2aa>
 810101a:	45a2      	cmp	sl, r4
 810101c:	d969      	bls.n	81010f2 <__udivmoddi4+0x2aa>
 810101e:	3802      	subs	r0, #2
 8101020:	4474      	add	r4, lr
 8101022:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8101026:	fba0 8902 	umull	r8, r9, r0, r2
 810102a:	eba4 040a 	sub.w	r4, r4, sl
 810102e:	454c      	cmp	r4, r9
 8101030:	46c2      	mov	sl, r8
 8101032:	464b      	mov	r3, r9
 8101034:	d354      	bcc.n	81010e0 <__udivmoddi4+0x298>
 8101036:	d051      	beq.n	81010dc <__udivmoddi4+0x294>
 8101038:	2e00      	cmp	r6, #0
 810103a:	d069      	beq.n	8101110 <__udivmoddi4+0x2c8>
 810103c:	ebb1 050a 	subs.w	r5, r1, sl
 8101040:	eb64 0403 	sbc.w	r4, r4, r3
 8101044:	fa04 fc0c 	lsl.w	ip, r4, ip
 8101048:	40fd      	lsrs	r5, r7
 810104a:	40fc      	lsrs	r4, r7
 810104c:	ea4c 0505 	orr.w	r5, ip, r5
 8101050:	e9c6 5400 	strd	r5, r4, [r6]
 8101054:	2700      	movs	r7, #0
 8101056:	e747      	b.n	8100ee8 <__udivmoddi4+0xa0>
 8101058:	f1c2 0320 	rsb	r3, r2, #32
 810105c:	fa20 f703 	lsr.w	r7, r0, r3
 8101060:	4095      	lsls	r5, r2
 8101062:	fa01 f002 	lsl.w	r0, r1, r2
 8101066:	fa21 f303 	lsr.w	r3, r1, r3
 810106a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 810106e:	4338      	orrs	r0, r7
 8101070:	0c01      	lsrs	r1, r0, #16
 8101072:	fbb3 f7fe 	udiv	r7, r3, lr
 8101076:	fa1f f885 	uxth.w	r8, r5
 810107a:	fb0e 3317 	mls	r3, lr, r7, r3
 810107e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8101082:	fb07 f308 	mul.w	r3, r7, r8
 8101086:	428b      	cmp	r3, r1
 8101088:	fa04 f402 	lsl.w	r4, r4, r2
 810108c:	d907      	bls.n	810109e <__udivmoddi4+0x256>
 810108e:	1869      	adds	r1, r5, r1
 8101090:	f107 3cff 	add.w	ip, r7, #4294967295
 8101094:	d22f      	bcs.n	81010f6 <__udivmoddi4+0x2ae>
 8101096:	428b      	cmp	r3, r1
 8101098:	d92d      	bls.n	81010f6 <__udivmoddi4+0x2ae>
 810109a:	3f02      	subs	r7, #2
 810109c:	4429      	add	r1, r5
 810109e:	1acb      	subs	r3, r1, r3
 81010a0:	b281      	uxth	r1, r0
 81010a2:	fbb3 f0fe 	udiv	r0, r3, lr
 81010a6:	fb0e 3310 	mls	r3, lr, r0, r3
 81010aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81010ae:	fb00 f308 	mul.w	r3, r0, r8
 81010b2:	428b      	cmp	r3, r1
 81010b4:	d907      	bls.n	81010c6 <__udivmoddi4+0x27e>
 81010b6:	1869      	adds	r1, r5, r1
 81010b8:	f100 3cff 	add.w	ip, r0, #4294967295
 81010bc:	d217      	bcs.n	81010ee <__udivmoddi4+0x2a6>
 81010be:	428b      	cmp	r3, r1
 81010c0:	d915      	bls.n	81010ee <__udivmoddi4+0x2a6>
 81010c2:	3802      	subs	r0, #2
 81010c4:	4429      	add	r1, r5
 81010c6:	1ac9      	subs	r1, r1, r3
 81010c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 81010cc:	e73b      	b.n	8100f46 <__udivmoddi4+0xfe>
 81010ce:	4637      	mov	r7, r6
 81010d0:	4630      	mov	r0, r6
 81010d2:	e709      	b.n	8100ee8 <__udivmoddi4+0xa0>
 81010d4:	4607      	mov	r7, r0
 81010d6:	e6e7      	b.n	8100ea8 <__udivmoddi4+0x60>
 81010d8:	4618      	mov	r0, r3
 81010da:	e6fb      	b.n	8100ed4 <__udivmoddi4+0x8c>
 81010dc:	4541      	cmp	r1, r8
 81010de:	d2ab      	bcs.n	8101038 <__udivmoddi4+0x1f0>
 81010e0:	ebb8 0a02 	subs.w	sl, r8, r2
 81010e4:	eb69 020e 	sbc.w	r2, r9, lr
 81010e8:	3801      	subs	r0, #1
 81010ea:	4613      	mov	r3, r2
 81010ec:	e7a4      	b.n	8101038 <__udivmoddi4+0x1f0>
 81010ee:	4660      	mov	r0, ip
 81010f0:	e7e9      	b.n	81010c6 <__udivmoddi4+0x27e>
 81010f2:	4618      	mov	r0, r3
 81010f4:	e795      	b.n	8101022 <__udivmoddi4+0x1da>
 81010f6:	4667      	mov	r7, ip
 81010f8:	e7d1      	b.n	810109e <__udivmoddi4+0x256>
 81010fa:	4681      	mov	r9, r0
 81010fc:	e77c      	b.n	8100ff8 <__udivmoddi4+0x1b0>
 81010fe:	3802      	subs	r0, #2
 8101100:	442c      	add	r4, r5
 8101102:	e747      	b.n	8100f94 <__udivmoddi4+0x14c>
 8101104:	f1ac 0c02 	sub.w	ip, ip, #2
 8101108:	442b      	add	r3, r5
 810110a:	e72f      	b.n	8100f6c <__udivmoddi4+0x124>
 810110c:	4638      	mov	r0, r7
 810110e:	e708      	b.n	8100f22 <__udivmoddi4+0xda>
 8101110:	4637      	mov	r7, r6
 8101112:	e6e9      	b.n	8100ee8 <__udivmoddi4+0xa0>

08101114 <__aeabi_idiv0>:
 8101114:	4770      	bx	lr
 8101116:	bf00      	nop

08101118 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101118:	b480      	push	{r7}
 810111a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 810111c:	4b0b      	ldr	r3, [pc, #44]	; (810114c <SystemInit+0x34>)
 810111e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8101122:	4a0a      	ldr	r2, [pc, #40]	; (810114c <SystemInit+0x34>)
 8101124:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101128:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810112c:	4b07      	ldr	r3, [pc, #28]	; (810114c <SystemInit+0x34>)
 810112e:	691b      	ldr	r3, [r3, #16]
 8101130:	4a06      	ldr	r2, [pc, #24]	; (810114c <SystemInit+0x34>)
 8101132:	f043 0310 	orr.w	r3, r3, #16
 8101136:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8101138:	4b04      	ldr	r3, [pc, #16]	; (810114c <SystemInit+0x34>)
 810113a:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 810113e:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8101140:	bf00      	nop
 8101142:	46bd      	mov	sp, r7
 8101144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101148:	4770      	bx	lr
 810114a:	bf00      	nop
 810114c:	e000ed00 	.word	0xe000ed00

08101150 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8101150:	b580      	push	{r7, lr}
 8101152:	b082      	sub	sp, #8
 8101154:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8101156:	4b21      	ldr	r3, [pc, #132]	; (81011dc <MX_DMA_Init+0x8c>)
 8101158:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810115c:	4a1f      	ldr	r2, [pc, #124]	; (81011dc <MX_DMA_Init+0x8c>)
 810115e:	f043 0301 	orr.w	r3, r3, #1
 8101162:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101166:	4b1d      	ldr	r3, [pc, #116]	; (81011dc <MX_DMA_Init+0x8c>)
 8101168:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810116c:	f003 0301 	and.w	r3, r3, #1
 8101170:	607b      	str	r3, [r7, #4]
 8101172:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8101174:	4b19      	ldr	r3, [pc, #100]	; (81011dc <MX_DMA_Init+0x8c>)
 8101176:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810117a:	4a18      	ldr	r2, [pc, #96]	; (81011dc <MX_DMA_Init+0x8c>)
 810117c:	f043 0302 	orr.w	r3, r3, #2
 8101180:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101184:	4b15      	ldr	r3, [pc, #84]	; (81011dc <MX_DMA_Init+0x8c>)
 8101186:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810118a:	f003 0302 	and.w	r3, r3, #2
 810118e:	603b      	str	r3, [r7, #0]
 8101190:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8101192:	2200      	movs	r2, #0
 8101194:	2105      	movs	r1, #5
 8101196:	200b      	movs	r0, #11
 8101198:	f001 f8e9 	bl	810236e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 810119c:	200b      	movs	r0, #11
 810119e:	f001 f900 	bl	81023a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 81011a2:	2200      	movs	r2, #0
 81011a4:	2105      	movs	r1, #5
 81011a6:	200c      	movs	r0, #12
 81011a8:	f001 f8e1 	bl	810236e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 81011ac:	200c      	movs	r0, #12
 81011ae:	f001 f8f8 	bl	81023a2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 81011b2:	2200      	movs	r2, #0
 81011b4:	2105      	movs	r1, #5
 81011b6:	203a      	movs	r0, #58	; 0x3a
 81011b8:	f001 f8d9 	bl	810236e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 81011bc:	203a      	movs	r0, #58	; 0x3a
 81011be:	f001 f8f0 	bl	81023a2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 81011c2:	2200      	movs	r2, #0
 81011c4:	2105      	movs	r1, #5
 81011c6:	203b      	movs	r0, #59	; 0x3b
 81011c8:	f001 f8d1 	bl	810236e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 81011cc:	203b      	movs	r0, #59	; 0x3b
 81011ce:	f001 f8e8 	bl	81023a2 <HAL_NVIC_EnableIRQ>

}
 81011d2:	bf00      	nop
 81011d4:	3708      	adds	r7, #8
 81011d6:	46bd      	mov	sp, r7
 81011d8:	bd80      	pop	{r7, pc}
 81011da:	bf00      	nop
 81011dc:	58024400 	.word	0x58024400

081011e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 81011e0:	b480      	push	{r7}
 81011e2:	b085      	sub	sp, #20
 81011e4:	af00      	add	r7, sp, #0
 81011e6:	60f8      	str	r0, [r7, #12]
 81011e8:	60b9      	str	r1, [r7, #8]
 81011ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 81011ec:	68fb      	ldr	r3, [r7, #12]
 81011ee:	4a07      	ldr	r2, [pc, #28]	; (810120c <vApplicationGetIdleTaskMemory+0x2c>)
 81011f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 81011f2:	68bb      	ldr	r3, [r7, #8]
 81011f4:	4a06      	ldr	r2, [pc, #24]	; (8101210 <vApplicationGetIdleTaskMemory+0x30>)
 81011f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 81011f8:	687b      	ldr	r3, [r7, #4]
 81011fa:	2280      	movs	r2, #128	; 0x80
 81011fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 81011fe:	bf00      	nop
 8101200:	3714      	adds	r7, #20
 8101202:	46bd      	mov	sp, r7
 8101204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101208:	4770      	bx	lr
 810120a:	bf00      	nop
 810120c:	10000220 	.word	0x10000220
 8101210:	10000274 	.word	0x10000274

08101214 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8101214:	b5b0      	push	{r4, r5, r7, lr}
 8101216:	b088      	sub	sp, #32
 8101218:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of watchdog */
  osThreadDef(watchdog, watchdogTask, osPriorityNormal, 0, 128);
 810121a:	4b0b      	ldr	r3, [pc, #44]	; (8101248 <MX_FREERTOS_Init+0x34>)
 810121c:	1d3c      	adds	r4, r7, #4
 810121e:	461d      	mov	r5, r3
 8101220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101224:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8101228:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  watchdogHandle = osThreadCreate(osThread(watchdog), NULL);
 810122c:	1d3b      	adds	r3, r7, #4
 810122e:	2100      	movs	r1, #0
 8101230:	4618      	mov	r0, r3
 8101232:	f006 fef5 	bl	8108020 <osThreadCreate>
 8101236:	4602      	mov	r2, r0
 8101238:	4b04      	ldr	r3, [pc, #16]	; (810124c <MX_FREERTOS_Init+0x38>)
 810123a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	initCortexM4();
 810123c:	f00c fa56 	bl	810d6ec <initCortexM4>
  /* USER CODE END RTOS_THREADS */

}
 8101240:	bf00      	nop
 8101242:	3720      	adds	r7, #32
 8101244:	46bd      	mov	sp, r7
 8101246:	bdb0      	pop	{r4, r5, r7, pc}
 8101248:	081104ec 	.word	0x081104ec
 810124c:	1000960c 	.word	0x1000960c

08101250 <watchdogTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_watchdogTask */
void watchdogTask(void const * argument)
{
 8101250:	b580      	push	{r7, lr}
 8101252:	b082      	sub	sp, #8
 8101254:	af00      	add	r7, sp, #0
 8101256:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN watchdogTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8101258:	2001      	movs	r0, #1
 810125a:	f006 ff2d 	bl	81080b8 <osDelay>
 810125e:	e7fb      	b.n	8101258 <watchdogTask+0x8>

08101260 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8101260:	b480      	push	{r7}
 8101262:	b087      	sub	sp, #28
 8101264:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8101266:	4b28      	ldr	r3, [pc, #160]	; (8101308 <MX_GPIO_Init+0xa8>)
 8101268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810126c:	4a26      	ldr	r2, [pc, #152]	; (8101308 <MX_GPIO_Init+0xa8>)
 810126e:	f043 0310 	orr.w	r3, r3, #16
 8101272:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101276:	4b24      	ldr	r3, [pc, #144]	; (8101308 <MX_GPIO_Init+0xa8>)
 8101278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810127c:	f003 0310 	and.w	r3, r3, #16
 8101280:	617b      	str	r3, [r7, #20]
 8101282:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101284:	4b20      	ldr	r3, [pc, #128]	; (8101308 <MX_GPIO_Init+0xa8>)
 8101286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810128a:	4a1f      	ldr	r2, [pc, #124]	; (8101308 <MX_GPIO_Init+0xa8>)
 810128c:	f043 0301 	orr.w	r3, r3, #1
 8101290:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101294:	4b1c      	ldr	r3, [pc, #112]	; (8101308 <MX_GPIO_Init+0xa8>)
 8101296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810129a:	f003 0301 	and.w	r3, r3, #1
 810129e:	613b      	str	r3, [r7, #16]
 81012a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81012a2:	4b19      	ldr	r3, [pc, #100]	; (8101308 <MX_GPIO_Init+0xa8>)
 81012a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012a8:	4a17      	ldr	r2, [pc, #92]	; (8101308 <MX_GPIO_Init+0xa8>)
 81012aa:	f043 0302 	orr.w	r3, r3, #2
 81012ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012b2:	4b15      	ldr	r3, [pc, #84]	; (8101308 <MX_GPIO_Init+0xa8>)
 81012b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012b8:	f003 0302 	and.w	r3, r3, #2
 81012bc:	60fb      	str	r3, [r7, #12]
 81012be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81012c0:	4b11      	ldr	r3, [pc, #68]	; (8101308 <MX_GPIO_Init+0xa8>)
 81012c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012c6:	4a10      	ldr	r2, [pc, #64]	; (8101308 <MX_GPIO_Init+0xa8>)
 81012c8:	f043 0308 	orr.w	r3, r3, #8
 81012cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012d0:	4b0d      	ldr	r3, [pc, #52]	; (8101308 <MX_GPIO_Init+0xa8>)
 81012d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012d6:	f003 0308 	and.w	r3, r3, #8
 81012da:	60bb      	str	r3, [r7, #8]
 81012dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 81012de:	4b0a      	ldr	r3, [pc, #40]	; (8101308 <MX_GPIO_Init+0xa8>)
 81012e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012e4:	4a08      	ldr	r2, [pc, #32]	; (8101308 <MX_GPIO_Init+0xa8>)
 81012e6:	f043 0304 	orr.w	r3, r3, #4
 81012ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012ee:	4b06      	ldr	r3, [pc, #24]	; (8101308 <MX_GPIO_Init+0xa8>)
 81012f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012f4:	f003 0304 	and.w	r3, r3, #4
 81012f8:	607b      	str	r3, [r7, #4]
 81012fa:	687b      	ldr	r3, [r7, #4]

}
 81012fc:	bf00      	nop
 81012fe:	371c      	adds	r7, #28
 8101300:	46bd      	mov	sp, r7
 8101302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101306:	4770      	bx	lr
 8101308:	58024400 	.word	0x58024400

0810130c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 810130c:	b580      	push	{r7, lr}
 810130e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8101310:	4b1c      	ldr	r3, [pc, #112]	; (8101384 <MX_I2C1_Init+0x78>)
 8101312:	4a1d      	ldr	r2, [pc, #116]	; (8101388 <MX_I2C1_Init+0x7c>)
 8101314:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401242;
 8101316:	4b1b      	ldr	r3, [pc, #108]	; (8101384 <MX_I2C1_Init+0x78>)
 8101318:	4a1c      	ldr	r2, [pc, #112]	; (810138c <MX_I2C1_Init+0x80>)
 810131a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 810131c:	4b19      	ldr	r3, [pc, #100]	; (8101384 <MX_I2C1_Init+0x78>)
 810131e:	2200      	movs	r2, #0
 8101320:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8101322:	4b18      	ldr	r3, [pc, #96]	; (8101384 <MX_I2C1_Init+0x78>)
 8101324:	2201      	movs	r2, #1
 8101326:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8101328:	4b16      	ldr	r3, [pc, #88]	; (8101384 <MX_I2C1_Init+0x78>)
 810132a:	2200      	movs	r2, #0
 810132c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 810132e:	4b15      	ldr	r3, [pc, #84]	; (8101384 <MX_I2C1_Init+0x78>)
 8101330:	2200      	movs	r2, #0
 8101332:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8101334:	4b13      	ldr	r3, [pc, #76]	; (8101384 <MX_I2C1_Init+0x78>)
 8101336:	2200      	movs	r2, #0
 8101338:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 810133a:	4b12      	ldr	r3, [pc, #72]	; (8101384 <MX_I2C1_Init+0x78>)
 810133c:	2200      	movs	r2, #0
 810133e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8101340:	4b10      	ldr	r3, [pc, #64]	; (8101384 <MX_I2C1_Init+0x78>)
 8101342:	2200      	movs	r2, #0
 8101344:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8101346:	480f      	ldr	r0, [pc, #60]	; (8101384 <MX_I2C1_Init+0x78>)
 8101348:	f003 fdae 	bl	8104ea8 <HAL_I2C_Init>
 810134c:	4603      	mov	r3, r0
 810134e:	2b00      	cmp	r3, #0
 8101350:	d001      	beq.n	8101356 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8101352:	f000 fa01 	bl	8101758 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8101356:	2100      	movs	r1, #0
 8101358:	480a      	ldr	r0, [pc, #40]	; (8101384 <MX_I2C1_Init+0x78>)
 810135a:	f003 fe34 	bl	8104fc6 <HAL_I2CEx_ConfigAnalogFilter>
 810135e:	4603      	mov	r3, r0
 8101360:	2b00      	cmp	r3, #0
 8101362:	d001      	beq.n	8101368 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8101364:	f000 f9f8 	bl	8101758 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8101368:	2100      	movs	r1, #0
 810136a:	4806      	ldr	r0, [pc, #24]	; (8101384 <MX_I2C1_Init+0x78>)
 810136c:	f003 fe76 	bl	810505c <HAL_I2CEx_ConfigDigitalFilter>
 8101370:	4603      	mov	r3, r0
 8101372:	2b00      	cmp	r3, #0
 8101374:	d001      	beq.n	810137a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8101376:	f000 f9ef 	bl	8101758 <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 810137a:	2001      	movs	r0, #1
 810137c:	f003 feba 	bl	81050f4 <HAL_I2CEx_EnableFastModePlus>

}
 8101380:	bf00      	nop
 8101382:	bd80      	pop	{r7, pc}
 8101384:	1000965c 	.word	0x1000965c
 8101388:	40005400 	.word	0x40005400
 810138c:	00401242 	.word	0x00401242

08101390 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8101390:	b580      	push	{r7, lr}
 8101392:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8101394:	4b1b      	ldr	r3, [pc, #108]	; (8101404 <MX_I2C2_Init+0x74>)
 8101396:	4a1c      	ldr	r2, [pc, #112]	; (8101408 <MX_I2C2_Init+0x78>)
 8101398:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10C0ECFF;
 810139a:	4b1a      	ldr	r3, [pc, #104]	; (8101404 <MX_I2C2_Init+0x74>)
 810139c:	4a1b      	ldr	r2, [pc, #108]	; (810140c <MX_I2C2_Init+0x7c>)
 810139e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 81013a0:	4b18      	ldr	r3, [pc, #96]	; (8101404 <MX_I2C2_Init+0x74>)
 81013a2:	2200      	movs	r2, #0
 81013a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 81013a6:	4b17      	ldr	r3, [pc, #92]	; (8101404 <MX_I2C2_Init+0x74>)
 81013a8:	2201      	movs	r2, #1
 81013aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 81013ac:	4b15      	ldr	r3, [pc, #84]	; (8101404 <MX_I2C2_Init+0x74>)
 81013ae:	2200      	movs	r2, #0
 81013b0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 81013b2:	4b14      	ldr	r3, [pc, #80]	; (8101404 <MX_I2C2_Init+0x74>)
 81013b4:	2200      	movs	r2, #0
 81013b6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 81013b8:	4b12      	ldr	r3, [pc, #72]	; (8101404 <MX_I2C2_Init+0x74>)
 81013ba:	2200      	movs	r2, #0
 81013bc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 81013be:	4b11      	ldr	r3, [pc, #68]	; (8101404 <MX_I2C2_Init+0x74>)
 81013c0:	2200      	movs	r2, #0
 81013c2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81013c4:	4b0f      	ldr	r3, [pc, #60]	; (8101404 <MX_I2C2_Init+0x74>)
 81013c6:	2200      	movs	r2, #0
 81013c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 81013ca:	480e      	ldr	r0, [pc, #56]	; (8101404 <MX_I2C2_Init+0x74>)
 81013cc:	f003 fd6c 	bl	8104ea8 <HAL_I2C_Init>
 81013d0:	4603      	mov	r3, r0
 81013d2:	2b00      	cmp	r3, #0
 81013d4:	d001      	beq.n	81013da <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 81013d6:	f000 f9bf 	bl	8101758 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 81013da:	2100      	movs	r1, #0
 81013dc:	4809      	ldr	r0, [pc, #36]	; (8101404 <MX_I2C2_Init+0x74>)
 81013de:	f003 fdf2 	bl	8104fc6 <HAL_I2CEx_ConfigAnalogFilter>
 81013e2:	4603      	mov	r3, r0
 81013e4:	2b00      	cmp	r3, #0
 81013e6:	d001      	beq.n	81013ec <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 81013e8:	f000 f9b6 	bl	8101758 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 81013ec:	2100      	movs	r1, #0
 81013ee:	4805      	ldr	r0, [pc, #20]	; (8101404 <MX_I2C2_Init+0x74>)
 81013f0:	f003 fe34 	bl	810505c <HAL_I2CEx_ConfigDigitalFilter>
 81013f4:	4603      	mov	r3, r0
 81013f6:	2b00      	cmp	r3, #0
 81013f8:	d001      	beq.n	81013fe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 81013fa:	f000 f9ad 	bl	8101758 <Error_Handler>
  }

}
 81013fe:	bf00      	nop
 8101400:	bd80      	pop	{r7, pc}
 8101402:	bf00      	nop
 8101404:	100096a8 	.word	0x100096a8
 8101408:	40005800 	.word	0x40005800
 810140c:	10c0ecff 	.word	0x10c0ecff

08101410 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8101410:	b580      	push	{r7, lr}
 8101412:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8101414:	4b1b      	ldr	r3, [pc, #108]	; (8101484 <MX_I2C3_Init+0x74>)
 8101416:	4a1c      	ldr	r2, [pc, #112]	; (8101488 <MX_I2C3_Init+0x78>)
 8101418:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10C0ECFF;
 810141a:	4b1a      	ldr	r3, [pc, #104]	; (8101484 <MX_I2C3_Init+0x74>)
 810141c:	4a1b      	ldr	r2, [pc, #108]	; (810148c <MX_I2C3_Init+0x7c>)
 810141e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8101420:	4b18      	ldr	r3, [pc, #96]	; (8101484 <MX_I2C3_Init+0x74>)
 8101422:	2200      	movs	r2, #0
 8101424:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8101426:	4b17      	ldr	r3, [pc, #92]	; (8101484 <MX_I2C3_Init+0x74>)
 8101428:	2201      	movs	r2, #1
 810142a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 810142c:	4b15      	ldr	r3, [pc, #84]	; (8101484 <MX_I2C3_Init+0x74>)
 810142e:	2200      	movs	r2, #0
 8101430:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8101432:	4b14      	ldr	r3, [pc, #80]	; (8101484 <MX_I2C3_Init+0x74>)
 8101434:	2200      	movs	r2, #0
 8101436:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8101438:	4b12      	ldr	r3, [pc, #72]	; (8101484 <MX_I2C3_Init+0x74>)
 810143a:	2200      	movs	r2, #0
 810143c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 810143e:	4b11      	ldr	r3, [pc, #68]	; (8101484 <MX_I2C3_Init+0x74>)
 8101440:	2200      	movs	r2, #0
 8101442:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8101444:	4b0f      	ldr	r3, [pc, #60]	; (8101484 <MX_I2C3_Init+0x74>)
 8101446:	2200      	movs	r2, #0
 8101448:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 810144a:	480e      	ldr	r0, [pc, #56]	; (8101484 <MX_I2C3_Init+0x74>)
 810144c:	f003 fd2c 	bl	8104ea8 <HAL_I2C_Init>
 8101450:	4603      	mov	r3, r0
 8101452:	2b00      	cmp	r3, #0
 8101454:	d001      	beq.n	810145a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8101456:	f000 f97f 	bl	8101758 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 810145a:	2100      	movs	r1, #0
 810145c:	4809      	ldr	r0, [pc, #36]	; (8101484 <MX_I2C3_Init+0x74>)
 810145e:	f003 fdb2 	bl	8104fc6 <HAL_I2CEx_ConfigAnalogFilter>
 8101462:	4603      	mov	r3, r0
 8101464:	2b00      	cmp	r3, #0
 8101466:	d001      	beq.n	810146c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8101468:	f000 f976 	bl	8101758 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 810146c:	2100      	movs	r1, #0
 810146e:	4805      	ldr	r0, [pc, #20]	; (8101484 <MX_I2C3_Init+0x74>)
 8101470:	f003 fdf4 	bl	810505c <HAL_I2CEx_ConfigDigitalFilter>
 8101474:	4603      	mov	r3, r0
 8101476:	2b00      	cmp	r3, #0
 8101478:	d001      	beq.n	810147e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 810147a:	f000 f96d 	bl	8101758 <Error_Handler>
  }

}
 810147e:	bf00      	nop
 8101480:	bd80      	pop	{r7, pc}
 8101482:	bf00      	nop
 8101484:	10009610 	.word	0x10009610
 8101488:	40005c00 	.word	0x40005c00
 810148c:	10c0ecff 	.word	0x10c0ecff

08101490 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8101490:	b580      	push	{r7, lr}
 8101492:	b08e      	sub	sp, #56	; 0x38
 8101494:	af00      	add	r7, sp, #0
 8101496:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810149c:	2200      	movs	r2, #0
 810149e:	601a      	str	r2, [r3, #0]
 81014a0:	605a      	str	r2, [r3, #4]
 81014a2:	609a      	str	r2, [r3, #8]
 81014a4:	60da      	str	r2, [r3, #12]
 81014a6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 81014a8:	687b      	ldr	r3, [r7, #4]
 81014aa:	681b      	ldr	r3, [r3, #0]
 81014ac:	4a5f      	ldr	r2, [pc, #380]	; (810162c <HAL_I2C_MspInit+0x19c>)
 81014ae:	4293      	cmp	r3, r2
 81014b0:	d12e      	bne.n	8101510 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81014b2:	4b5f      	ldr	r3, [pc, #380]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 81014b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014b8:	4a5d      	ldr	r2, [pc, #372]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 81014ba:	f043 0302 	orr.w	r3, r3, #2
 81014be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81014c2:	4b5b      	ldr	r3, [pc, #364]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 81014c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014c8:	f003 0302 	and.w	r3, r3, #2
 81014cc:	623b      	str	r3, [r7, #32]
 81014ce:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 81014d0:	23c0      	movs	r3, #192	; 0xc0
 81014d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81014d4:	2312      	movs	r3, #18
 81014d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81014d8:	2300      	movs	r3, #0
 81014da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81014dc:	2300      	movs	r3, #0
 81014de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 81014e0:	2304      	movs	r3, #4
 81014e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81014e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81014e8:	4619      	mov	r1, r3
 81014ea:	4852      	ldr	r0, [pc, #328]	; (8101634 <HAL_I2C_MspInit+0x1a4>)
 81014ec:	f003 fa9a 	bl	8104a24 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 81014f0:	4b4f      	ldr	r3, [pc, #316]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 81014f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81014f6:	4a4e      	ldr	r2, [pc, #312]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 81014f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81014fc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101500:	4b4b      	ldr	r3, [pc, #300]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 8101502:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101506:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810150a:	61fb      	str	r3, [r7, #28]
 810150c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 810150e:	e088      	b.n	8101622 <HAL_I2C_MspInit+0x192>
  else if(i2cHandle->Instance==I2C2)
 8101510:	687b      	ldr	r3, [r7, #4]
 8101512:	681b      	ldr	r3, [r3, #0]
 8101514:	4a48      	ldr	r2, [pc, #288]	; (8101638 <HAL_I2C_MspInit+0x1a8>)
 8101516:	4293      	cmp	r3, r2
 8101518:	d12f      	bne.n	810157a <HAL_I2C_MspInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 810151a:	4b45      	ldr	r3, [pc, #276]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 810151c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101520:	4a43      	ldr	r2, [pc, #268]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 8101522:	f043 0302 	orr.w	r3, r3, #2
 8101526:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810152a:	4b41      	ldr	r3, [pc, #260]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 810152c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101530:	f003 0302 	and.w	r3, r3, #2
 8101534:	61bb      	str	r3, [r7, #24]
 8101536:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8101538:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 810153c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 810153e:	2312      	movs	r3, #18
 8101540:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101542:	2300      	movs	r3, #0
 8101544:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101546:	2300      	movs	r3, #0
 8101548:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 810154a:	2304      	movs	r3, #4
 810154c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810154e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8101552:	4619      	mov	r1, r3
 8101554:	4837      	ldr	r0, [pc, #220]	; (8101634 <HAL_I2C_MspInit+0x1a4>)
 8101556:	f003 fa65 	bl	8104a24 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 810155a:	4b35      	ldr	r3, [pc, #212]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 810155c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101560:	4a33      	ldr	r2, [pc, #204]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 8101562:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8101566:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810156a:	4b31      	ldr	r3, [pc, #196]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 810156c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101570:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8101574:	617b      	str	r3, [r7, #20]
 8101576:	697b      	ldr	r3, [r7, #20]
}
 8101578:	e053      	b.n	8101622 <HAL_I2C_MspInit+0x192>
  else if(i2cHandle->Instance==I2C3)
 810157a:	687b      	ldr	r3, [r7, #4]
 810157c:	681b      	ldr	r3, [r3, #0]
 810157e:	4a2f      	ldr	r2, [pc, #188]	; (810163c <HAL_I2C_MspInit+0x1ac>)
 8101580:	4293      	cmp	r3, r2
 8101582:	d14e      	bne.n	8101622 <HAL_I2C_MspInit+0x192>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101584:	4b2a      	ldr	r3, [pc, #168]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 8101586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810158a:	4a29      	ldr	r2, [pc, #164]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 810158c:	f043 0304 	orr.w	r3, r3, #4
 8101590:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101594:	4b26      	ldr	r3, [pc, #152]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 8101596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810159a:	f003 0304 	and.w	r3, r3, #4
 810159e:	613b      	str	r3, [r7, #16]
 81015a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 81015a2:	4b23      	ldr	r3, [pc, #140]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 81015a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81015a8:	4a21      	ldr	r2, [pc, #132]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 81015aa:	f043 0301 	orr.w	r3, r3, #1
 81015ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81015b2:	4b1f      	ldr	r3, [pc, #124]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 81015b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81015b8:	f003 0301 	and.w	r3, r3, #1
 81015bc:	60fb      	str	r3, [r7, #12]
 81015be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 81015c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 81015c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81015c6:	2312      	movs	r3, #18
 81015c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81015ca:	2300      	movs	r3, #0
 81015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81015ce:	2300      	movs	r3, #0
 81015d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 81015d2:	2304      	movs	r3, #4
 81015d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81015d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81015da:	4619      	mov	r1, r3
 81015dc:	4818      	ldr	r0, [pc, #96]	; (8101640 <HAL_I2C_MspInit+0x1b0>)
 81015de:	f003 fa21 	bl	8104a24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 81015e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 81015e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81015e8:	2312      	movs	r3, #18
 81015ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81015ec:	2300      	movs	r3, #0
 81015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81015f0:	2300      	movs	r3, #0
 81015f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 81015f4:	2304      	movs	r3, #4
 81015f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81015f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81015fc:	4619      	mov	r1, r3
 81015fe:	4811      	ldr	r0, [pc, #68]	; (8101644 <HAL_I2C_MspInit+0x1b4>)
 8101600:	f003 fa10 	bl	8104a24 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8101604:	4b0a      	ldr	r3, [pc, #40]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 8101606:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810160a:	4a09      	ldr	r2, [pc, #36]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 810160c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8101610:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101614:	4b06      	ldr	r3, [pc, #24]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 8101616:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810161a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810161e:	60bb      	str	r3, [r7, #8]
 8101620:	68bb      	ldr	r3, [r7, #8]
}
 8101622:	bf00      	nop
 8101624:	3738      	adds	r7, #56	; 0x38
 8101626:	46bd      	mov	sp, r7
 8101628:	bd80      	pop	{r7, pc}
 810162a:	bf00      	nop
 810162c:	40005400 	.word	0x40005400
 8101630:	58024400 	.word	0x58024400
 8101634:	58020400 	.word	0x58020400
 8101638:	40005800 	.word	0x40005800
 810163c:	40005c00 	.word	0x40005c00
 8101640:	58020800 	.word	0x58020800
 8101644:	58020000 	.word	0x58020000

08101648 <MX_IWDG2_Init>:

IWDG_HandleTypeDef hiwdg2;

/* IWDG2 init function */
void MX_IWDG2_Init(void)
{
 8101648:	b580      	push	{r7, lr}
 810164a:	af00      	add	r7, sp, #0

  hiwdg2.Instance = IWDG2;
 810164c:	4b0b      	ldr	r3, [pc, #44]	; (810167c <MX_IWDG2_Init+0x34>)
 810164e:	4a0c      	ldr	r2, [pc, #48]	; (8101680 <MX_IWDG2_Init+0x38>)
 8101650:	601a      	str	r2, [r3, #0]
  hiwdg2.Init.Prescaler = IWDG_PRESCALER_4;
 8101652:	4b0a      	ldr	r3, [pc, #40]	; (810167c <MX_IWDG2_Init+0x34>)
 8101654:	2200      	movs	r2, #0
 8101656:	605a      	str	r2, [r3, #4]
  hiwdg2.Init.Window = 4095;
 8101658:	4b08      	ldr	r3, [pc, #32]	; (810167c <MX_IWDG2_Init+0x34>)
 810165a:	f640 72ff 	movw	r2, #4095	; 0xfff
 810165e:	60da      	str	r2, [r3, #12]
  hiwdg2.Init.Reload = 4095;
 8101660:	4b06      	ldr	r3, [pc, #24]	; (810167c <MX_IWDG2_Init+0x34>)
 8101662:	f640 72ff 	movw	r2, #4095	; 0xfff
 8101666:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg2) != HAL_OK)
 8101668:	4804      	ldr	r0, [pc, #16]	; (810167c <MX_IWDG2_Init+0x34>)
 810166a:	f003 fd67 	bl	810513c <HAL_IWDG_Init>
 810166e:	4603      	mov	r3, r0
 8101670:	2b00      	cmp	r3, #0
 8101672:	d001      	beq.n	8101678 <MX_IWDG2_Init+0x30>
  {
    Error_Handler();
 8101674:	f000 f870 	bl	8101758 <Error_Handler>
  }

}
 8101678:	bf00      	nop
 810167a:	bd80      	pop	{r7, pc}
 810167c:	100096f4 	.word	0x100096f4
 8101680:	58004c00 	.word	0x58004c00

08101684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101684:	b580      	push	{r7, lr}
 8101686:	b082      	sub	sp, #8
 8101688:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810168a:	4b27      	ldr	r3, [pc, #156]	; (8101728 <main+0xa4>)
 810168c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101690:	4a25      	ldr	r2, [pc, #148]	; (8101728 <main+0xa4>)
 8101692:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101696:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810169a:	4b23      	ldr	r3, [pc, #140]	; (8101728 <main+0xa4>)
 810169c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81016a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81016a4:	607b      	str	r3, [r7, #4]
 81016a6:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81016a8:	2001      	movs	r0, #1
 81016aa:	f003 fbeb 	bl	8104e84 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81016ae:	f003 fe11 	bl	81052d4 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81016b2:	2201      	movs	r2, #1
 81016b4:	2102      	movs	r1, #2
 81016b6:	2000      	movs	r0, #0
 81016b8:	f003 fd96 	bl	81051e8 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81016bc:	4b1b      	ldr	r3, [pc, #108]	; (810172c <main+0xa8>)
 81016be:	681b      	ldr	r3, [r3, #0]
 81016c0:	091b      	lsrs	r3, r3, #4
 81016c2:	f003 030f 	and.w	r3, r3, #15
 81016c6:	2b07      	cmp	r3, #7
 81016c8:	d108      	bne.n	81016dc <main+0x58>
 81016ca:	4b19      	ldr	r3, [pc, #100]	; (8101730 <main+0xac>)
 81016cc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 81016d0:	4a17      	ldr	r2, [pc, #92]	; (8101730 <main+0xac>)
 81016d2:	f043 0301 	orr.w	r3, r3, #1
 81016d6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81016da:	e007      	b.n	81016ec <main+0x68>
 81016dc:	4b14      	ldr	r3, [pc, #80]	; (8101730 <main+0xac>)
 81016de:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 81016e2:	4a13      	ldr	r2, [pc, #76]	; (8101730 <main+0xac>)
 81016e4:	f043 0301 	orr.w	r3, r3, #1
 81016e8:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81016ec:	f000 fcf4 	bl	81020d8 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81016f0:	f7ff fdb6 	bl	8101260 <MX_GPIO_Init>
  MX_DMA_Init();
 81016f4:	f7ff fd2c 	bl	8101150 <MX_DMA_Init>
  MX_IWDG2_Init();
 81016f8:	f7ff ffa6 	bl	8101648 <MX_IWDG2_Init>
  MX_FATFS_Init();
 81016fc:	f006 fbac 	bl	8107e58 <MX_FATFS_Init>
  MX_I2C1_Init();
 8101700:	f7ff fe04 	bl	810130c <MX_I2C1_Init>
  MX_SPI1_Init();
 8101704:	f000 f82c 	bl	8101760 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8101708:	f000 fbc0 	bl	8101e8c <MX_USART3_UART_Init>
  MX_I2C2_Init();
 810170c:	f7ff fe40 	bl	8101390 <MX_I2C2_Init>
  MX_I2C3_Init();
 8101710:	f7ff fe7e 	bl	8101410 <MX_I2C3_Init>
  MX_SPI3_Init();
 8101714:	f000 f87a 	bl	810180c <MX_SPI3_Init>
  MX_SPI4_Init();
 8101718:	f000 f8ce 	bl	81018b8 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 810171c:	f7ff fd7a 	bl	8101214 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8101720:	f006 fc77 	bl	8108012 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8101724:	e7fe      	b.n	8101724 <main+0xa0>
 8101726:	bf00      	nop
 8101728:	58024400 	.word	0x58024400
 810172c:	e000ed00 	.word	0xe000ed00
 8101730:	58026400 	.word	0x58026400

08101734 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8101734:	b580      	push	{r7, lr}
 8101736:	b082      	sub	sp, #8
 8101738:	af00      	add	r7, sp, #0
 810173a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM8) {
 810173c:	687b      	ldr	r3, [r7, #4]
 810173e:	681b      	ldr	r3, [r3, #0]
 8101740:	4a04      	ldr	r2, [pc, #16]	; (8101754 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8101742:	4293      	cmp	r3, r2
 8101744:	d101      	bne.n	810174a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8101746:	f000 fd25 	bl	8102194 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 810174a:	bf00      	nop
 810174c:	3708      	adds	r7, #8
 810174e:	46bd      	mov	sp, r7
 8101750:	bd80      	pop	{r7, pc}
 8101752:	bf00      	nop
 8101754:	40010400 	.word	0x40010400

08101758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101758:	b480      	push	{r7}
 810175a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 810175c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 810175e:	e7fe      	b.n	810175e <Error_Handler+0x6>

08101760 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8101760:	b580      	push	{r7, lr}
 8101762:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8101764:	4b27      	ldr	r3, [pc, #156]	; (8101804 <MX_SPI1_Init+0xa4>)
 8101766:	4a28      	ldr	r2, [pc, #160]	; (8101808 <MX_SPI1_Init+0xa8>)
 8101768:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 810176a:	4b26      	ldr	r3, [pc, #152]	; (8101804 <MX_SPI1_Init+0xa4>)
 810176c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8101770:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8101772:	4b24      	ldr	r3, [pc, #144]	; (8101804 <MX_SPI1_Init+0xa4>)
 8101774:	2200      	movs	r2, #0
 8101776:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8101778:	4b22      	ldr	r3, [pc, #136]	; (8101804 <MX_SPI1_Init+0xa4>)
 810177a:	2203      	movs	r2, #3
 810177c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 810177e:	4b21      	ldr	r3, [pc, #132]	; (8101804 <MX_SPI1_Init+0xa4>)
 8101780:	2200      	movs	r2, #0
 8101782:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8101784:	4b1f      	ldr	r3, [pc, #124]	; (8101804 <MX_SPI1_Init+0xa4>)
 8101786:	2200      	movs	r2, #0
 8101788:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 810178a:	4b1e      	ldr	r3, [pc, #120]	; (8101804 <MX_SPI1_Init+0xa4>)
 810178c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8101790:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8101792:	4b1c      	ldr	r3, [pc, #112]	; (8101804 <MX_SPI1_Init+0xa4>)
 8101794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8101798:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 810179a:	4b1a      	ldr	r3, [pc, #104]	; (8101804 <MX_SPI1_Init+0xa4>)
 810179c:	2200      	movs	r2, #0
 810179e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 81017a0:	4b18      	ldr	r3, [pc, #96]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017a2:	2200      	movs	r2, #0
 81017a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 81017a6:	4b17      	ldr	r3, [pc, #92]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017a8:	2200      	movs	r2, #0
 81017aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 81017ac:	4b15      	ldr	r3, [pc, #84]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017ae:	2200      	movs	r2, #0
 81017b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 81017b2:	4b14      	ldr	r3, [pc, #80]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 81017b8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 81017ba:	4b12      	ldr	r3, [pc, #72]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017bc:	2200      	movs	r2, #0
 81017be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 81017c0:	4b10      	ldr	r3, [pc, #64]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017c2:	2200      	movs	r2, #0
 81017c4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 81017c6:	4b0f      	ldr	r3, [pc, #60]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017c8:	2200      	movs	r2, #0
 81017ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 81017cc:	4b0d      	ldr	r3, [pc, #52]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017ce:	2200      	movs	r2, #0
 81017d0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 81017d2:	4b0c      	ldr	r3, [pc, #48]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017d4:	2200      	movs	r2, #0
 81017d6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 81017d8:	4b0a      	ldr	r3, [pc, #40]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017da:	2200      	movs	r2, #0
 81017dc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 81017de:	4b09      	ldr	r3, [pc, #36]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017e0:	2200      	movs	r2, #0
 81017e2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 81017e4:	4b07      	ldr	r3, [pc, #28]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017e6:	2200      	movs	r2, #0
 81017e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 81017ea:	4b06      	ldr	r3, [pc, #24]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017ec:	2200      	movs	r2, #0
 81017ee:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 81017f0:	4804      	ldr	r0, [pc, #16]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017f2:	f004 fa3d 	bl	8105c70 <HAL_SPI_Init>
 81017f6:	4603      	mov	r3, r0
 81017f8:	2b00      	cmp	r3, #0
 81017fa:	d001      	beq.n	8101800 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 81017fc:	f7ff ffac 	bl	8101758 <Error_Handler>
  }

}
 8101800:	bf00      	nop
 8101802:	bd80      	pop	{r7, pc}
 8101804:	10009814 	.word	0x10009814
 8101808:	40013000 	.word	0x40013000

0810180c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 810180c:	b580      	push	{r7, lr}
 810180e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8101810:	4b27      	ldr	r3, [pc, #156]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101812:	4a28      	ldr	r2, [pc, #160]	; (81018b4 <MX_SPI3_Init+0xa8>)
 8101814:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8101816:	4b26      	ldr	r3, [pc, #152]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101818:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 810181c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 810181e:	4b24      	ldr	r3, [pc, #144]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101820:	2200      	movs	r2, #0
 8101822:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8101824:	4b22      	ldr	r3, [pc, #136]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101826:	2203      	movs	r2, #3
 8101828:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 810182a:	4b21      	ldr	r3, [pc, #132]	; (81018b0 <MX_SPI3_Init+0xa4>)
 810182c:	2200      	movs	r2, #0
 810182e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8101830:	4b1f      	ldr	r3, [pc, #124]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101832:	2200      	movs	r2, #0
 8101834:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8101836:	4b1e      	ldr	r3, [pc, #120]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101838:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 810183c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 810183e:	4b1c      	ldr	r3, [pc, #112]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8101844:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8101846:	4b1a      	ldr	r3, [pc, #104]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101848:	2200      	movs	r2, #0
 810184a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 810184c:	4b18      	ldr	r3, [pc, #96]	; (81018b0 <MX_SPI3_Init+0xa4>)
 810184e:	2200      	movs	r2, #0
 8101850:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8101852:	4b17      	ldr	r3, [pc, #92]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101854:	2200      	movs	r2, #0
 8101856:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8101858:	4b15      	ldr	r3, [pc, #84]	; (81018b0 <MX_SPI3_Init+0xa4>)
 810185a:	2200      	movs	r2, #0
 810185c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 810185e:	4b14      	ldr	r3, [pc, #80]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101860:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8101864:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8101866:	4b12      	ldr	r3, [pc, #72]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101868:	2200      	movs	r2, #0
 810186a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 810186c:	4b10      	ldr	r3, [pc, #64]	; (81018b0 <MX_SPI3_Init+0xa4>)
 810186e:	2200      	movs	r2, #0
 8101870:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101872:	4b0f      	ldr	r3, [pc, #60]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101874:	2200      	movs	r2, #0
 8101876:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101878:	4b0d      	ldr	r3, [pc, #52]	; (81018b0 <MX_SPI3_Init+0xa4>)
 810187a:	2200      	movs	r2, #0
 810187c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 810187e:	4b0c      	ldr	r3, [pc, #48]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101880:	2200      	movs	r2, #0
 8101882:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8101884:	4b0a      	ldr	r3, [pc, #40]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101886:	2200      	movs	r2, #0
 8101888:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 810188a:	4b09      	ldr	r3, [pc, #36]	; (81018b0 <MX_SPI3_Init+0xa4>)
 810188c:	2200      	movs	r2, #0
 810188e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8101890:	4b07      	ldr	r3, [pc, #28]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101892:	2200      	movs	r2, #0
 8101894:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8101896:	4b06      	ldr	r3, [pc, #24]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101898:	2200      	movs	r2, #0
 810189a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 810189c:	4804      	ldr	r0, [pc, #16]	; (81018b0 <MX_SPI3_Init+0xa4>)
 810189e:	f004 f9e7 	bl	8105c70 <HAL_SPI_Init>
 81018a2:	4603      	mov	r3, r0
 81018a4:	2b00      	cmp	r3, #0
 81018a6:	d001      	beq.n	81018ac <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 81018a8:	f7ff ff56 	bl	8101758 <Error_Handler>
  }

}
 81018ac:	bf00      	nop
 81018ae:	bd80      	pop	{r7, pc}
 81018b0:	10009704 	.word	0x10009704
 81018b4:	40003c00 	.word	0x40003c00

081018b8 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 81018b8:	b580      	push	{r7, lr}
 81018ba:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 81018bc:	4b27      	ldr	r3, [pc, #156]	; (810195c <MX_SPI4_Init+0xa4>)
 81018be:	4a28      	ldr	r2, [pc, #160]	; (8101960 <MX_SPI4_Init+0xa8>)
 81018c0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 81018c2:	4b26      	ldr	r3, [pc, #152]	; (810195c <MX_SPI4_Init+0xa4>)
 81018c4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 81018c8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 81018ca:	4b24      	ldr	r3, [pc, #144]	; (810195c <MX_SPI4_Init+0xa4>)
 81018cc:	2200      	movs	r2, #0
 81018ce:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 81018d0:	4b22      	ldr	r3, [pc, #136]	; (810195c <MX_SPI4_Init+0xa4>)
 81018d2:	2203      	movs	r2, #3
 81018d4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 81018d6:	4b21      	ldr	r3, [pc, #132]	; (810195c <MX_SPI4_Init+0xa4>)
 81018d8:	2200      	movs	r2, #0
 81018da:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 81018dc:	4b1f      	ldr	r3, [pc, #124]	; (810195c <MX_SPI4_Init+0xa4>)
 81018de:	2200      	movs	r2, #0
 81018e0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 81018e2:	4b1e      	ldr	r3, [pc, #120]	; (810195c <MX_SPI4_Init+0xa4>)
 81018e4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 81018e8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 81018ea:	4b1c      	ldr	r3, [pc, #112]	; (810195c <MX_SPI4_Init+0xa4>)
 81018ec:	2200      	movs	r2, #0
 81018ee:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 81018f0:	4b1a      	ldr	r3, [pc, #104]	; (810195c <MX_SPI4_Init+0xa4>)
 81018f2:	2200      	movs	r2, #0
 81018f4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 81018f6:	4b19      	ldr	r3, [pc, #100]	; (810195c <MX_SPI4_Init+0xa4>)
 81018f8:	2200      	movs	r2, #0
 81018fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 81018fc:	4b17      	ldr	r3, [pc, #92]	; (810195c <MX_SPI4_Init+0xa4>)
 81018fe:	2200      	movs	r2, #0
 8101900:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8101902:	4b16      	ldr	r3, [pc, #88]	; (810195c <MX_SPI4_Init+0xa4>)
 8101904:	2200      	movs	r2, #0
 8101906:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8101908:	4b14      	ldr	r3, [pc, #80]	; (810195c <MX_SPI4_Init+0xa4>)
 810190a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 810190e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8101910:	4b12      	ldr	r3, [pc, #72]	; (810195c <MX_SPI4_Init+0xa4>)
 8101912:	2200      	movs	r2, #0
 8101914:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8101916:	4b11      	ldr	r3, [pc, #68]	; (810195c <MX_SPI4_Init+0xa4>)
 8101918:	2200      	movs	r2, #0
 810191a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 810191c:	4b0f      	ldr	r3, [pc, #60]	; (810195c <MX_SPI4_Init+0xa4>)
 810191e:	2200      	movs	r2, #0
 8101920:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101922:	4b0e      	ldr	r3, [pc, #56]	; (810195c <MX_SPI4_Init+0xa4>)
 8101924:	2200      	movs	r2, #0
 8101926:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8101928:	4b0c      	ldr	r3, [pc, #48]	; (810195c <MX_SPI4_Init+0xa4>)
 810192a:	2200      	movs	r2, #0
 810192c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 810192e:	4b0b      	ldr	r3, [pc, #44]	; (810195c <MX_SPI4_Init+0xa4>)
 8101930:	2200      	movs	r2, #0
 8101932:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8101934:	4b09      	ldr	r3, [pc, #36]	; (810195c <MX_SPI4_Init+0xa4>)
 8101936:	2200      	movs	r2, #0
 8101938:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 810193a:	4b08      	ldr	r3, [pc, #32]	; (810195c <MX_SPI4_Init+0xa4>)
 810193c:	2200      	movs	r2, #0
 810193e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8101940:	4b06      	ldr	r3, [pc, #24]	; (810195c <MX_SPI4_Init+0xa4>)
 8101942:	2200      	movs	r2, #0
 8101944:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8101946:	4805      	ldr	r0, [pc, #20]	; (810195c <MX_SPI4_Init+0xa4>)
 8101948:	f004 f992 	bl	8105c70 <HAL_SPI_Init>
 810194c:	4603      	mov	r3, r0
 810194e:	2b00      	cmp	r3, #0
 8101950:	d001      	beq.n	8101956 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8101952:	f7ff ff01 	bl	8101758 <Error_Handler>
  }

}
 8101956:	bf00      	nop
 8101958:	bd80      	pop	{r7, pc}
 810195a:	bf00      	nop
 810195c:	1000978c 	.word	0x1000978c
 8101960:	40013400 	.word	0x40013400

08101964 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8101964:	b580      	push	{r7, lr}
 8101966:	b090      	sub	sp, #64	; 0x40
 8101968:	af00      	add	r7, sp, #0
 810196a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810196c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101970:	2200      	movs	r2, #0
 8101972:	601a      	str	r2, [r3, #0]
 8101974:	605a      	str	r2, [r3, #4]
 8101976:	609a      	str	r2, [r3, #8]
 8101978:	60da      	str	r2, [r3, #12]
 810197a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 810197c:	687b      	ldr	r3, [r7, #4]
 810197e:	681b      	ldr	r3, [r3, #0]
 8101980:	4aa0      	ldr	r2, [pc, #640]	; (8101c04 <HAL_SPI_MspInit+0x2a0>)
 8101982:	4293      	cmp	r3, r2
 8101984:	f040 80b2 	bne.w	8101aec <HAL_SPI_MspInit+0x188>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8101988:	4b9f      	ldr	r3, [pc, #636]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 810198a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810198e:	4a9e      	ldr	r2, [pc, #632]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101990:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8101994:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101998:	4b9b      	ldr	r3, [pc, #620]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 810199a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810199e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81019a2:	62bb      	str	r3, [r7, #40]	; 0x28
 81019a4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 81019a6:	4b98      	ldr	r3, [pc, #608]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 81019a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019ac:	4a96      	ldr	r2, [pc, #600]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 81019ae:	f043 0301 	orr.w	r3, r3, #1
 81019b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81019b6:	4b94      	ldr	r3, [pc, #592]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 81019b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019bc:	f003 0301 	and.w	r3, r3, #1
 81019c0:	627b      	str	r3, [r7, #36]	; 0x24
 81019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 81019c4:	4b90      	ldr	r3, [pc, #576]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 81019c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019ca:	4a8f      	ldr	r2, [pc, #572]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 81019cc:	f043 0308 	orr.w	r3, r3, #8
 81019d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81019d4:	4b8c      	ldr	r3, [pc, #560]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 81019d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019da:	f003 0308 	and.w	r3, r3, #8
 81019de:	623b      	str	r3, [r7, #32]
 81019e0:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 81019e2:	2360      	movs	r3, #96	; 0x60
 81019e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81019e6:	2302      	movs	r3, #2
 81019e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81019ea:	2300      	movs	r3, #0
 81019ec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81019ee:	2300      	movs	r3, #0
 81019f0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 81019f2:	2305      	movs	r3, #5
 81019f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81019f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 81019fa:	4619      	mov	r1, r3
 81019fc:	4883      	ldr	r0, [pc, #524]	; (8101c0c <HAL_SPI_MspInit+0x2a8>)
 81019fe:	f003 f811 	bl	8104a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8101a02:	2380      	movs	r3, #128	; 0x80
 8101a04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101a06:	2302      	movs	r3, #2
 8101a08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a0a:	2300      	movs	r3, #0
 8101a0c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a0e:	2300      	movs	r3, #0
 8101a10:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8101a12:	2305      	movs	r3, #5
 8101a14:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101a16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101a1a:	4619      	mov	r1, r3
 8101a1c:	487c      	ldr	r0, [pc, #496]	; (8101c10 <HAL_SPI_MspInit+0x2ac>)
 8101a1e:	f003 f801 	bl	8104a24 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8101a22:	4b7c      	ldr	r3, [pc, #496]	; (8101c14 <HAL_SPI_MspInit+0x2b0>)
 8101a24:	4a7c      	ldr	r2, [pc, #496]	; (8101c18 <HAL_SPI_MspInit+0x2b4>)
 8101a26:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8101a28:	4b7a      	ldr	r3, [pc, #488]	; (8101c14 <HAL_SPI_MspInit+0x2b0>)
 8101a2a:	2225      	movs	r2, #37	; 0x25
 8101a2c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8101a2e:	4b79      	ldr	r3, [pc, #484]	; (8101c14 <HAL_SPI_MspInit+0x2b0>)
 8101a30:	2200      	movs	r2, #0
 8101a32:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101a34:	4b77      	ldr	r3, [pc, #476]	; (8101c14 <HAL_SPI_MspInit+0x2b0>)
 8101a36:	2200      	movs	r2, #0
 8101a38:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8101a3a:	4b76      	ldr	r3, [pc, #472]	; (8101c14 <HAL_SPI_MspInit+0x2b0>)
 8101a3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101a40:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101a42:	4b74      	ldr	r3, [pc, #464]	; (8101c14 <HAL_SPI_MspInit+0x2b0>)
 8101a44:	2200      	movs	r2, #0
 8101a46:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101a48:	4b72      	ldr	r3, [pc, #456]	; (8101c14 <HAL_SPI_MspInit+0x2b0>)
 8101a4a:	2200      	movs	r2, #0
 8101a4c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8101a4e:	4b71      	ldr	r3, [pc, #452]	; (8101c14 <HAL_SPI_MspInit+0x2b0>)
 8101a50:	2200      	movs	r2, #0
 8101a52:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8101a54:	4b6f      	ldr	r3, [pc, #444]	; (8101c14 <HAL_SPI_MspInit+0x2b0>)
 8101a56:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8101a5a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101a5c:	4b6d      	ldr	r3, [pc, #436]	; (8101c14 <HAL_SPI_MspInit+0x2b0>)
 8101a5e:	2200      	movs	r2, #0
 8101a60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8101a62:	486c      	ldr	r0, [pc, #432]	; (8101c14 <HAL_SPI_MspInit+0x2b0>)
 8101a64:	f000 fcc4 	bl	81023f0 <HAL_DMA_Init>
 8101a68:	4603      	mov	r3, r0
 8101a6a:	2b00      	cmp	r3, #0
 8101a6c:	d001      	beq.n	8101a72 <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 8101a6e:	f7ff fe73 	bl	8101758 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8101a72:	687b      	ldr	r3, [r7, #4]
 8101a74:	4a67      	ldr	r2, [pc, #412]	; (8101c14 <HAL_SPI_MspInit+0x2b0>)
 8101a76:	67da      	str	r2, [r3, #124]	; 0x7c
 8101a78:	4a66      	ldr	r2, [pc, #408]	; (8101c14 <HAL_SPI_MspInit+0x2b0>)
 8101a7a:	687b      	ldr	r3, [r7, #4]
 8101a7c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 8101a7e:	4b67      	ldr	r3, [pc, #412]	; (8101c1c <HAL_SPI_MspInit+0x2b8>)
 8101a80:	4a67      	ldr	r2, [pc, #412]	; (8101c20 <HAL_SPI_MspInit+0x2bc>)
 8101a82:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8101a84:	4b65      	ldr	r3, [pc, #404]	; (8101c1c <HAL_SPI_MspInit+0x2b8>)
 8101a86:	2226      	movs	r2, #38	; 0x26
 8101a88:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8101a8a:	4b64      	ldr	r3, [pc, #400]	; (8101c1c <HAL_SPI_MspInit+0x2b8>)
 8101a8c:	2240      	movs	r2, #64	; 0x40
 8101a8e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101a90:	4b62      	ldr	r3, [pc, #392]	; (8101c1c <HAL_SPI_MspInit+0x2b8>)
 8101a92:	2200      	movs	r2, #0
 8101a94:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8101a96:	4b61      	ldr	r3, [pc, #388]	; (8101c1c <HAL_SPI_MspInit+0x2b8>)
 8101a98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101a9c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101a9e:	4b5f      	ldr	r3, [pc, #380]	; (8101c1c <HAL_SPI_MspInit+0x2b8>)
 8101aa0:	2200      	movs	r2, #0
 8101aa2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101aa4:	4b5d      	ldr	r3, [pc, #372]	; (8101c1c <HAL_SPI_MspInit+0x2b8>)
 8101aa6:	2200      	movs	r2, #0
 8101aa8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8101aaa:	4b5c      	ldr	r3, [pc, #368]	; (8101c1c <HAL_SPI_MspInit+0x2b8>)
 8101aac:	2200      	movs	r2, #0
 8101aae:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8101ab0:	4b5a      	ldr	r3, [pc, #360]	; (8101c1c <HAL_SPI_MspInit+0x2b8>)
 8101ab2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8101ab6:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101ab8:	4b58      	ldr	r3, [pc, #352]	; (8101c1c <HAL_SPI_MspInit+0x2b8>)
 8101aba:	2200      	movs	r2, #0
 8101abc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8101abe:	4857      	ldr	r0, [pc, #348]	; (8101c1c <HAL_SPI_MspInit+0x2b8>)
 8101ac0:	f000 fc96 	bl	81023f0 <HAL_DMA_Init>
 8101ac4:	4603      	mov	r3, r0
 8101ac6:	2b00      	cmp	r3, #0
 8101ac8:	d001      	beq.n	8101ace <HAL_SPI_MspInit+0x16a>
    {
      Error_Handler();
 8101aca:	f7ff fe45 	bl	8101758 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8101ace:	687b      	ldr	r3, [r7, #4]
 8101ad0:	4a52      	ldr	r2, [pc, #328]	; (8101c1c <HAL_SPI_MspInit+0x2b8>)
 8101ad2:	679a      	str	r2, [r3, #120]	; 0x78
 8101ad4:	4a51      	ldr	r2, [pc, #324]	; (8101c1c <HAL_SPI_MspInit+0x2b8>)
 8101ad6:	687b      	ldr	r3, [r7, #4]
 8101ad8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8101ada:	2200      	movs	r2, #0
 8101adc:	2105      	movs	r1, #5
 8101ade:	2023      	movs	r0, #35	; 0x23
 8101ae0:	f000 fc45 	bl	810236e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8101ae4:	2023      	movs	r0, #35	; 0x23
 8101ae6:	f000 fc5c 	bl	81023a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8101aea:	e086      	b.n	8101bfa <HAL_SPI_MspInit+0x296>
  else if(spiHandle->Instance==SPI3)
 8101aec:	687b      	ldr	r3, [r7, #4]
 8101aee:	681b      	ldr	r3, [r3, #0]
 8101af0:	4a4c      	ldr	r2, [pc, #304]	; (8101c24 <HAL_SPI_MspInit+0x2c0>)
 8101af2:	4293      	cmp	r3, r2
 8101af4:	d14e      	bne.n	8101b94 <HAL_SPI_MspInit+0x230>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8101af6:	4b44      	ldr	r3, [pc, #272]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101af8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101afc:	4a42      	ldr	r2, [pc, #264]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8101b02:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101b06:	4b40      	ldr	r3, [pc, #256]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101b08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101b0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8101b10:	61fb      	str	r3, [r7, #28]
 8101b12:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101b14:	4b3c      	ldr	r3, [pc, #240]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b1a:	4a3b      	ldr	r2, [pc, #236]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101b1c:	f043 0302 	orr.w	r3, r3, #2
 8101b20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101b24:	4b38      	ldr	r3, [pc, #224]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b2a:	f003 0302 	and.w	r3, r3, #2
 8101b2e:	61bb      	str	r3, [r7, #24]
 8101b30:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101b32:	4b35      	ldr	r3, [pc, #212]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b38:	4a33      	ldr	r2, [pc, #204]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101b3a:	f043 0304 	orr.w	r3, r3, #4
 8101b3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101b42:	4b31      	ldr	r3, [pc, #196]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b48:	f003 0304 	and.w	r3, r3, #4
 8101b4c:	617b      	str	r3, [r7, #20]
 8101b4e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8101b50:	2304      	movs	r3, #4
 8101b52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101b54:	2302      	movs	r3, #2
 8101b56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b58:	2300      	movs	r3, #0
 8101b5a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101b5c:	2300      	movs	r3, #0
 8101b5e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8101b60:	2307      	movs	r3, #7
 8101b62:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101b64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101b68:	4619      	mov	r1, r3
 8101b6a:	482f      	ldr	r0, [pc, #188]	; (8101c28 <HAL_SPI_MspInit+0x2c4>)
 8101b6c:	f002 ff5a 	bl	8104a24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8101b70:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8101b74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101b76:	2302      	movs	r3, #2
 8101b78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b7a:	2300      	movs	r3, #0
 8101b7c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101b7e:	2300      	movs	r3, #0
 8101b80:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8101b82:	2306      	movs	r3, #6
 8101b84:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101b86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101b8a:	4619      	mov	r1, r3
 8101b8c:	4827      	ldr	r0, [pc, #156]	; (8101c2c <HAL_SPI_MspInit+0x2c8>)
 8101b8e:	f002 ff49 	bl	8104a24 <HAL_GPIO_Init>
}
 8101b92:	e032      	b.n	8101bfa <HAL_SPI_MspInit+0x296>
  else if(spiHandle->Instance==SPI4)
 8101b94:	687b      	ldr	r3, [r7, #4]
 8101b96:	681b      	ldr	r3, [r3, #0]
 8101b98:	4a25      	ldr	r2, [pc, #148]	; (8101c30 <HAL_SPI_MspInit+0x2cc>)
 8101b9a:	4293      	cmp	r3, r2
 8101b9c:	d12d      	bne.n	8101bfa <HAL_SPI_MspInit+0x296>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8101b9e:	4b1a      	ldr	r3, [pc, #104]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101ba0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101ba4:	4a18      	ldr	r2, [pc, #96]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101ba6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8101baa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101bae:	4b16      	ldr	r3, [pc, #88]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101bb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101bb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8101bb8:	613b      	str	r3, [r7, #16]
 8101bba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8101bbc:	4b12      	ldr	r3, [pc, #72]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bc2:	4a11      	ldr	r2, [pc, #68]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101bc4:	f043 0310 	orr.w	r3, r3, #16
 8101bc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101bcc:	4b0e      	ldr	r3, [pc, #56]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bd2:	f003 0310 	and.w	r3, r3, #16
 8101bd6:	60fb      	str	r3, [r7, #12]
 8101bd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8101bda:	2364      	movs	r3, #100	; 0x64
 8101bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101bde:	2302      	movs	r3, #2
 8101be0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101be2:	2300      	movs	r3, #0
 8101be4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101be6:	2300      	movs	r3, #0
 8101be8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8101bea:	2305      	movs	r3, #5
 8101bec:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101bee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101bf2:	4619      	mov	r1, r3
 8101bf4:	480f      	ldr	r0, [pc, #60]	; (8101c34 <HAL_SPI_MspInit+0x2d0>)
 8101bf6:	f002 ff15 	bl	8104a24 <HAL_GPIO_Init>
}
 8101bfa:	bf00      	nop
 8101bfc:	3740      	adds	r7, #64	; 0x40
 8101bfe:	46bd      	mov	sp, r7
 8101c00:	bd80      	pop	{r7, pc}
 8101c02:	bf00      	nop
 8101c04:	40013000 	.word	0x40013000
 8101c08:	58024400 	.word	0x58024400
 8101c0c:	58020000 	.word	0x58020000
 8101c10:	58020c00 	.word	0x58020c00
 8101c14:	1000989c 	.word	0x1000989c
 8101c18:	40020010 	.word	0x40020010
 8101c1c:	10009914 	.word	0x10009914
 8101c20:	40020028 	.word	0x40020028
 8101c24:	40003c00 	.word	0x40003c00
 8101c28:	58020400 	.word	0x58020400
 8101c2c:	58020800 	.word	0x58020800
 8101c30:	40013400 	.word	0x40013400
 8101c34:	58021000 	.word	0x58021000

08101c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101c38:	b580      	push	{r7, lr}
 8101c3a:	b082      	sub	sp, #8
 8101c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101c3e:	4b0c      	ldr	r3, [pc, #48]	; (8101c70 <HAL_MspInit+0x38>)
 8101c40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101c44:	4a0a      	ldr	r2, [pc, #40]	; (8101c70 <HAL_MspInit+0x38>)
 8101c46:	f043 0302 	orr.w	r3, r3, #2
 8101c4a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101c4e:	4b08      	ldr	r3, [pc, #32]	; (8101c70 <HAL_MspInit+0x38>)
 8101c50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101c54:	f003 0302 	and.w	r3, r3, #2
 8101c58:	607b      	str	r3, [r7, #4]
 8101c5a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8101c5c:	2200      	movs	r2, #0
 8101c5e:	210f      	movs	r1, #15
 8101c60:	f06f 0001 	mvn.w	r0, #1
 8101c64:	f000 fb83 	bl	810236e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101c68:	bf00      	nop
 8101c6a:	3708      	adds	r7, #8
 8101c6c:	46bd      	mov	sp, r7
 8101c6e:	bd80      	pop	{r7, pc}
 8101c70:	58024400 	.word	0x58024400

08101c74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101c74:	b580      	push	{r7, lr}
 8101c76:	b08e      	sub	sp, #56	; 0x38
 8101c78:	af00      	add	r7, sp, #0
 8101c7a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM8 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101c7c:	687b      	ldr	r3, [r7, #4]
 8101c7e:	2b0f      	cmp	r3, #15
 8101c80:	d844      	bhi.n	8101d0c <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0U);
 8101c82:	2200      	movs	r2, #0
 8101c84:	6879      	ldr	r1, [r7, #4]
 8101c86:	202c      	movs	r0, #44	; 0x2c
 8101c88:	f000 fb71 	bl	810236e <HAL_NVIC_SetPriority>

  /* Enable the TIM8 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8101c8c:	202c      	movs	r0, #44	; 0x2c
 8101c8e:	f000 fb88 	bl	81023a2 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8101c92:	4a24      	ldr	r2, [pc, #144]	; (8101d24 <HAL_InitTick+0xb0>)
 8101c94:	687b      	ldr	r3, [r7, #4]
 8101c96:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 8101c98:	4b23      	ldr	r3, [pc, #140]	; (8101d28 <HAL_InitTick+0xb4>)
 8101c9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101c9e:	4a22      	ldr	r2, [pc, #136]	; (8101d28 <HAL_InitTick+0xb4>)
 8101ca0:	f043 0302 	orr.w	r3, r3, #2
 8101ca4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101ca8:	4b1f      	ldr	r3, [pc, #124]	; (8101d28 <HAL_InitTick+0xb4>)
 8101caa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101cae:	f003 0302 	and.w	r3, r3, #2
 8101cb2:	60bb      	str	r3, [r7, #8]
 8101cb4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8101cb6:	f107 020c 	add.w	r2, r7, #12
 8101cba:	f107 0310 	add.w	r3, r7, #16
 8101cbe:	4611      	mov	r1, r2
 8101cc0:	4618      	mov	r0, r3
 8101cc2:	f003 fce5 	bl	8105690 <HAL_RCC_GetClockConfig>

  /* Compute TIM8 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8101cc6:	f003 fccd 	bl	8105664 <HAL_RCC_GetPCLK2Freq>
 8101cca:	4603      	mov	r3, r0
 8101ccc:	005b      	lsls	r3, r3, #1
 8101cce:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8101cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101cd2:	4a16      	ldr	r2, [pc, #88]	; (8101d2c <HAL_InitTick+0xb8>)
 8101cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8101cd8:	0c9b      	lsrs	r3, r3, #18
 8101cda:	3b01      	subs	r3, #1
 8101cdc:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 8101cde:	4b14      	ldr	r3, [pc, #80]	; (8101d30 <HAL_InitTick+0xbc>)
 8101ce0:	4a14      	ldr	r2, [pc, #80]	; (8101d34 <HAL_InitTick+0xc0>)
 8101ce2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (1000000U / 1000U) - 1U;
 8101ce4:	4b12      	ldr	r3, [pc, #72]	; (8101d30 <HAL_InitTick+0xbc>)
 8101ce6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8101cea:	60da      	str	r2, [r3, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 8101cec:	4a10      	ldr	r2, [pc, #64]	; (8101d30 <HAL_InitTick+0xbc>)
 8101cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101cf0:	6053      	str	r3, [r2, #4]
  htim8.Init.ClockDivision = 0;
 8101cf2:	4b0f      	ldr	r3, [pc, #60]	; (8101d30 <HAL_InitTick+0xbc>)
 8101cf4:	2200      	movs	r2, #0
 8101cf6:	611a      	str	r2, [r3, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101cf8:	4b0d      	ldr	r3, [pc, #52]	; (8101d30 <HAL_InitTick+0xbc>)
 8101cfa:	2200      	movs	r2, #0
 8101cfc:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim8) == HAL_OK)
 8101cfe:	480c      	ldr	r0, [pc, #48]	; (8101d30 <HAL_InitTick+0xbc>)
 8101d00:	f004 fb8d 	bl	810641e <HAL_TIM_Base_Init>
 8101d04:	4603      	mov	r3, r0
 8101d06:	2b00      	cmp	r3, #0
 8101d08:	d107      	bne.n	8101d1a <HAL_InitTick+0xa6>
 8101d0a:	e001      	b.n	8101d10 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8101d0c:	2301      	movs	r3, #1
 8101d0e:	e005      	b.n	8101d1c <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim8);
 8101d10:	4807      	ldr	r0, [pc, #28]	; (8101d30 <HAL_InitTick+0xbc>)
 8101d12:	f004 fbe5 	bl	81064e0 <HAL_TIM_Base_Start_IT>
 8101d16:	4603      	mov	r3, r0
 8101d18:	e000      	b.n	8101d1c <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8101d1a:	2301      	movs	r3, #1
}
 8101d1c:	4618      	mov	r0, r3
 8101d1e:	3738      	adds	r7, #56	; 0x38
 8101d20:	46bd      	mov	sp, r7
 8101d22:	bd80      	pop	{r7, pc}
 8101d24:	10000008 	.word	0x10000008
 8101d28:	58024400 	.word	0x58024400
 8101d2c:	431bde83 	.word	0x431bde83
 8101d30:	1000998c 	.word	0x1000998c
 8101d34:	40010400 	.word	0x40010400

08101d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101d38:	b480      	push	{r7}
 8101d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101d3c:	e7fe      	b.n	8101d3c <NMI_Handler+0x4>

08101d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101d3e:	b480      	push	{r7}
 8101d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101d42:	e7fe      	b.n	8101d42 <HardFault_Handler+0x4>

08101d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101d44:	b480      	push	{r7}
 8101d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101d48:	e7fe      	b.n	8101d48 <MemManage_Handler+0x4>

08101d4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101d4a:	b480      	push	{r7}
 8101d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101d4e:	e7fe      	b.n	8101d4e <BusFault_Handler+0x4>

08101d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101d50:	b480      	push	{r7}
 8101d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101d54:	e7fe      	b.n	8101d54 <UsageFault_Handler+0x4>

08101d56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101d56:	b480      	push	{r7}
 8101d58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101d5a:	bf00      	nop
 8101d5c:	46bd      	mov	sp, r7
 8101d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d62:	4770      	bx	lr

08101d64 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8101d64:	b580      	push	{r7, lr}
 8101d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8101d68:	4802      	ldr	r0, [pc, #8]	; (8101d74 <DMA1_Stream0_IRQHandler+0x10>)
 8101d6a:	f001 fb49 	bl	8103400 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8101d6e:	bf00      	nop
 8101d70:	bd80      	pop	{r7, pc}
 8101d72:	bf00      	nop
 8101d74:	1000989c 	.word	0x1000989c

08101d78 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8101d78:	b580      	push	{r7, lr}
 8101d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8101d7c:	4802      	ldr	r0, [pc, #8]	; (8101d88 <DMA1_Stream1_IRQHandler+0x10>)
 8101d7e:	f001 fb3f 	bl	8103400 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8101d82:	bf00      	nop
 8101d84:	bd80      	pop	{r7, pc}
 8101d86:	bf00      	nop
 8101d88:	10009914 	.word	0x10009914

08101d8c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8101d8c:	b580      	push	{r7, lr}
 8101d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8101d90:	4802      	ldr	r0, [pc, #8]	; (8101d9c <SPI1_IRQHandler+0x10>)
 8101d92:	f004 f865 	bl	8105e60 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8101d96:	bf00      	nop
 8101d98:	bd80      	pop	{r7, pc}
 8101d9a:	bf00      	nop
 8101d9c:	10009814 	.word	0x10009814

08101da0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8101da0:	b580      	push	{r7, lr}
 8101da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8101da4:	4802      	ldr	r0, [pc, #8]	; (8101db0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8101da6:	f004 fbd1 	bl	810654c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8101daa:	bf00      	nop
 8101dac:	bd80      	pop	{r7, pc}
 8101dae:	bf00      	nop
 8101db0:	1000998c 	.word	0x1000998c

08101db4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8101db4:	b580      	push	{r7, lr}
 8101db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8101db8:	4802      	ldr	r0, [pc, #8]	; (8101dc4 <DMA2_Stream2_IRQHandler+0x10>)
 8101dba:	f001 fb21 	bl	8103400 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8101dbe:	bf00      	nop
 8101dc0:	bd80      	pop	{r7, pc}
 8101dc2:	bf00      	nop
 8101dc4:	100099d8 	.word	0x100099d8

08101dc8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8101dc8:	b580      	push	{r7, lr}
 8101dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8101dcc:	4802      	ldr	r0, [pc, #8]	; (8101dd8 <DMA2_Stream3_IRQHandler+0x10>)
 8101dce:	f001 fb17 	bl	8103400 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8101dd2:	bf00      	nop
 8101dd4:	bd80      	pop	{r7, pc}
 8101dd6:	bf00      	nop
 8101dd8:	10009adc 	.word	0x10009adc

08101ddc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8101ddc:	b480      	push	{r7}
 8101dde:	af00      	add	r7, sp, #0
	return 1;
 8101de0:	2301      	movs	r3, #1
}
 8101de2:	4618      	mov	r0, r3
 8101de4:	46bd      	mov	sp, r7
 8101de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101dea:	4770      	bx	lr

08101dec <_kill>:

int _kill(int pid, int sig)
{
 8101dec:	b580      	push	{r7, lr}
 8101dee:	b082      	sub	sp, #8
 8101df0:	af00      	add	r7, sp, #0
 8101df2:	6078      	str	r0, [r7, #4]
 8101df4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8101df6:	f00c f995 	bl	810e124 <__errno>
 8101dfa:	4602      	mov	r2, r0
 8101dfc:	2316      	movs	r3, #22
 8101dfe:	6013      	str	r3, [r2, #0]
	return -1;
 8101e00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101e04:	4618      	mov	r0, r3
 8101e06:	3708      	adds	r7, #8
 8101e08:	46bd      	mov	sp, r7
 8101e0a:	bd80      	pop	{r7, pc}

08101e0c <_exit>:

void _exit (int status)
{
 8101e0c:	b580      	push	{r7, lr}
 8101e0e:	b082      	sub	sp, #8
 8101e10:	af00      	add	r7, sp, #0
 8101e12:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8101e14:	f04f 31ff 	mov.w	r1, #4294967295
 8101e18:	6878      	ldr	r0, [r7, #4]
 8101e1a:	f7ff ffe7 	bl	8101dec <_kill>
	while (1) {}		/* Make sure we hang here */
 8101e1e:	e7fe      	b.n	8101e1e <_exit+0x12>

08101e20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101e20:	b580      	push	{r7, lr}
 8101e22:	b086      	sub	sp, #24
 8101e24:	af00      	add	r7, sp, #0
 8101e26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101e28:	4a14      	ldr	r2, [pc, #80]	; (8101e7c <_sbrk+0x5c>)
 8101e2a:	4b15      	ldr	r3, [pc, #84]	; (8101e80 <_sbrk+0x60>)
 8101e2c:	1ad3      	subs	r3, r2, r3
 8101e2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101e30:	697b      	ldr	r3, [r7, #20]
 8101e32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101e34:	4b13      	ldr	r3, [pc, #76]	; (8101e84 <_sbrk+0x64>)
 8101e36:	681b      	ldr	r3, [r3, #0]
 8101e38:	2b00      	cmp	r3, #0
 8101e3a:	d102      	bne.n	8101e42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101e3c:	4b11      	ldr	r3, [pc, #68]	; (8101e84 <_sbrk+0x64>)
 8101e3e:	4a12      	ldr	r2, [pc, #72]	; (8101e88 <_sbrk+0x68>)
 8101e40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8101e42:	4b10      	ldr	r3, [pc, #64]	; (8101e84 <_sbrk+0x64>)
 8101e44:	681a      	ldr	r2, [r3, #0]
 8101e46:	687b      	ldr	r3, [r7, #4]
 8101e48:	4413      	add	r3, r2
 8101e4a:	693a      	ldr	r2, [r7, #16]
 8101e4c:	429a      	cmp	r2, r3
 8101e4e:	d207      	bcs.n	8101e60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101e50:	f00c f968 	bl	810e124 <__errno>
 8101e54:	4602      	mov	r2, r0
 8101e56:	230c      	movs	r3, #12
 8101e58:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8101e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8101e5e:	e009      	b.n	8101e74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101e60:	4b08      	ldr	r3, [pc, #32]	; (8101e84 <_sbrk+0x64>)
 8101e62:	681b      	ldr	r3, [r3, #0]
 8101e64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101e66:	4b07      	ldr	r3, [pc, #28]	; (8101e84 <_sbrk+0x64>)
 8101e68:	681a      	ldr	r2, [r3, #0]
 8101e6a:	687b      	ldr	r3, [r7, #4]
 8101e6c:	4413      	add	r3, r2
 8101e6e:	4a05      	ldr	r2, [pc, #20]	; (8101e84 <_sbrk+0x64>)
 8101e70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101e72:	68fb      	ldr	r3, [r7, #12]
}
 8101e74:	4618      	mov	r0, r3
 8101e76:	3718      	adds	r7, #24
 8101e78:	46bd      	mov	sp, r7
 8101e7a:	bd80      	pop	{r7, pc}
 8101e7c:	10048000 	.word	0x10048000
 8101e80:	00000400 	.word	0x00000400
 8101e84:	10000474 	.word	0x10000474
 8101e88:	10009fd8 	.word	0x10009fd8

08101e8c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8101e8c:	b580      	push	{r7, lr}
 8101e8e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8101e90:	4b22      	ldr	r3, [pc, #136]	; (8101f1c <MX_USART3_UART_Init+0x90>)
 8101e92:	4a23      	ldr	r2, [pc, #140]	; (8101f20 <MX_USART3_UART_Init+0x94>)
 8101e94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8101e96:	4b21      	ldr	r3, [pc, #132]	; (8101f1c <MX_USART3_UART_Init+0x90>)
 8101e98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8101e9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8101e9e:	4b1f      	ldr	r3, [pc, #124]	; (8101f1c <MX_USART3_UART_Init+0x90>)
 8101ea0:	2200      	movs	r2, #0
 8101ea2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8101ea4:	4b1d      	ldr	r3, [pc, #116]	; (8101f1c <MX_USART3_UART_Init+0x90>)
 8101ea6:	2200      	movs	r2, #0
 8101ea8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8101eaa:	4b1c      	ldr	r3, [pc, #112]	; (8101f1c <MX_USART3_UART_Init+0x90>)
 8101eac:	2200      	movs	r2, #0
 8101eae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8101eb0:	4b1a      	ldr	r3, [pc, #104]	; (8101f1c <MX_USART3_UART_Init+0x90>)
 8101eb2:	220c      	movs	r2, #12
 8101eb4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8101eb6:	4b19      	ldr	r3, [pc, #100]	; (8101f1c <MX_USART3_UART_Init+0x90>)
 8101eb8:	2200      	movs	r2, #0
 8101eba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8101ebc:	4b17      	ldr	r3, [pc, #92]	; (8101f1c <MX_USART3_UART_Init+0x90>)
 8101ebe:	2200      	movs	r2, #0
 8101ec0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8101ec2:	4b16      	ldr	r3, [pc, #88]	; (8101f1c <MX_USART3_UART_Init+0x90>)
 8101ec4:	2200      	movs	r2, #0
 8101ec6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101ec8:	4b14      	ldr	r3, [pc, #80]	; (8101f1c <MX_USART3_UART_Init+0x90>)
 8101eca:	2200      	movs	r2, #0
 8101ecc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8101ece:	4b13      	ldr	r3, [pc, #76]	; (8101f1c <MX_USART3_UART_Init+0x90>)
 8101ed0:	2200      	movs	r2, #0
 8101ed2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8101ed4:	4811      	ldr	r0, [pc, #68]	; (8101f1c <MX_USART3_UART_Init+0x90>)
 8101ed6:	f004 fd39 	bl	810694c <HAL_UART_Init>
 8101eda:	4603      	mov	r3, r0
 8101edc:	2b00      	cmp	r3, #0
 8101ede:	d001      	beq.n	8101ee4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8101ee0:	f7ff fc3a 	bl	8101758 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101ee4:	2100      	movs	r1, #0
 8101ee6:	480d      	ldr	r0, [pc, #52]	; (8101f1c <MX_USART3_UART_Init+0x90>)
 8101ee8:	f005 fed1 	bl	8107c8e <HAL_UARTEx_SetTxFifoThreshold>
 8101eec:	4603      	mov	r3, r0
 8101eee:	2b00      	cmp	r3, #0
 8101ef0:	d001      	beq.n	8101ef6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8101ef2:	f7ff fc31 	bl	8101758 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101ef6:	2100      	movs	r1, #0
 8101ef8:	4808      	ldr	r0, [pc, #32]	; (8101f1c <MX_USART3_UART_Init+0x90>)
 8101efa:	f005 ff06 	bl	8107d0a <HAL_UARTEx_SetRxFifoThreshold>
 8101efe:	4603      	mov	r3, r0
 8101f00:	2b00      	cmp	r3, #0
 8101f02:	d001      	beq.n	8101f08 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8101f04:	f7ff fc28 	bl	8101758 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8101f08:	4804      	ldr	r0, [pc, #16]	; (8101f1c <MX_USART3_UART_Init+0x90>)
 8101f0a:	f005 fe87 	bl	8107c1c <HAL_UARTEx_DisableFifoMode>
 8101f0e:	4603      	mov	r3, r0
 8101f10:	2b00      	cmp	r3, #0
 8101f12:	d001      	beq.n	8101f18 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8101f14:	f7ff fc20 	bl	8101758 <Error_Handler>
  }

}
 8101f18:	bf00      	nop
 8101f1a:	bd80      	pop	{r7, pc}
 8101f1c:	10009a50 	.word	0x10009a50
 8101f20:	40004800 	.word	0x40004800

08101f24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8101f24:	b580      	push	{r7, lr}
 8101f26:	b08a      	sub	sp, #40	; 0x28
 8101f28:	af00      	add	r7, sp, #0
 8101f2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101f2c:	f107 0314 	add.w	r3, r7, #20
 8101f30:	2200      	movs	r2, #0
 8101f32:	601a      	str	r2, [r3, #0]
 8101f34:	605a      	str	r2, [r3, #4]
 8101f36:	609a      	str	r2, [r3, #8]
 8101f38:	60da      	str	r2, [r3, #12]
 8101f3a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8101f3c:	687b      	ldr	r3, [r7, #4]
 8101f3e:	681b      	ldr	r3, [r3, #0]
 8101f40:	4a49      	ldr	r2, [pc, #292]	; (8102068 <HAL_UART_MspInit+0x144>)
 8101f42:	4293      	cmp	r3, r2
 8101f44:	f040 808b 	bne.w	810205e <HAL_UART_MspInit+0x13a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8101f48:	4b48      	ldr	r3, [pc, #288]	; (810206c <HAL_UART_MspInit+0x148>)
 8101f4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101f4e:	4a47      	ldr	r2, [pc, #284]	; (810206c <HAL_UART_MspInit+0x148>)
 8101f50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8101f54:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101f58:	4b44      	ldr	r3, [pc, #272]	; (810206c <HAL_UART_MspInit+0x148>)
 8101f5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101f5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8101f62:	613b      	str	r3, [r7, #16]
 8101f64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101f66:	4b41      	ldr	r3, [pc, #260]	; (810206c <HAL_UART_MspInit+0x148>)
 8101f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101f6c:	4a3f      	ldr	r2, [pc, #252]	; (810206c <HAL_UART_MspInit+0x148>)
 8101f6e:	f043 0308 	orr.w	r3, r3, #8
 8101f72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101f76:	4b3d      	ldr	r3, [pc, #244]	; (810206c <HAL_UART_MspInit+0x148>)
 8101f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101f7c:	f003 0308 	and.w	r3, r3, #8
 8101f80:	60fb      	str	r3, [r7, #12]
 8101f82:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8101f84:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101f8a:	2302      	movs	r3, #2
 8101f8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101f8e:	2300      	movs	r3, #0
 8101f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101f92:	2300      	movs	r3, #0
 8101f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8101f96:	2307      	movs	r3, #7
 8101f98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101f9a:	f107 0314 	add.w	r3, r7, #20
 8101f9e:	4619      	mov	r1, r3
 8101fa0:	4833      	ldr	r0, [pc, #204]	; (8102070 <HAL_UART_MspInit+0x14c>)
 8101fa2:	f002 fd3f 	bl	8104a24 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA2_Stream2;
 8101fa6:	4b33      	ldr	r3, [pc, #204]	; (8102074 <HAL_UART_MspInit+0x150>)
 8101fa8:	4a33      	ldr	r2, [pc, #204]	; (8102078 <HAL_UART_MspInit+0x154>)
 8101faa:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8101fac:	4b31      	ldr	r3, [pc, #196]	; (8102074 <HAL_UART_MspInit+0x150>)
 8101fae:	222d      	movs	r2, #45	; 0x2d
 8101fb0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8101fb2:	4b30      	ldr	r3, [pc, #192]	; (8102074 <HAL_UART_MspInit+0x150>)
 8101fb4:	2200      	movs	r2, #0
 8101fb6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101fb8:	4b2e      	ldr	r3, [pc, #184]	; (8102074 <HAL_UART_MspInit+0x150>)
 8101fba:	2200      	movs	r2, #0
 8101fbc:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8101fbe:	4b2d      	ldr	r3, [pc, #180]	; (8102074 <HAL_UART_MspInit+0x150>)
 8101fc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101fc4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101fc6:	4b2b      	ldr	r3, [pc, #172]	; (8102074 <HAL_UART_MspInit+0x150>)
 8101fc8:	2200      	movs	r2, #0
 8101fca:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101fcc:	4b29      	ldr	r3, [pc, #164]	; (8102074 <HAL_UART_MspInit+0x150>)
 8101fce:	2200      	movs	r2, #0
 8101fd0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8101fd2:	4b28      	ldr	r3, [pc, #160]	; (8102074 <HAL_UART_MspInit+0x150>)
 8101fd4:	2200      	movs	r2, #0
 8101fd6:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8101fd8:	4b26      	ldr	r3, [pc, #152]	; (8102074 <HAL_UART_MspInit+0x150>)
 8101fda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8101fde:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101fe0:	4b24      	ldr	r3, [pc, #144]	; (8102074 <HAL_UART_MspInit+0x150>)
 8101fe2:	2200      	movs	r2, #0
 8101fe4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8101fe6:	4823      	ldr	r0, [pc, #140]	; (8102074 <HAL_UART_MspInit+0x150>)
 8101fe8:	f000 fa02 	bl	81023f0 <HAL_DMA_Init>
 8101fec:	4603      	mov	r3, r0
 8101fee:	2b00      	cmp	r3, #0
 8101ff0:	d001      	beq.n	8101ff6 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8101ff2:	f7ff fbb1 	bl	8101758 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8101ff6:	687b      	ldr	r3, [r7, #4]
 8101ff8:	4a1e      	ldr	r2, [pc, #120]	; (8102074 <HAL_UART_MspInit+0x150>)
 8101ffa:	679a      	str	r2, [r3, #120]	; 0x78
 8101ffc:	4a1d      	ldr	r2, [pc, #116]	; (8102074 <HAL_UART_MspInit+0x150>)
 8101ffe:	687b      	ldr	r3, [r7, #4]
 8102000:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA2_Stream3;
 8102002:	4b1e      	ldr	r3, [pc, #120]	; (810207c <HAL_UART_MspInit+0x158>)
 8102004:	4a1e      	ldr	r2, [pc, #120]	; (8102080 <HAL_UART_MspInit+0x15c>)
 8102006:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8102008:	4b1c      	ldr	r3, [pc, #112]	; (810207c <HAL_UART_MspInit+0x158>)
 810200a:	222e      	movs	r2, #46	; 0x2e
 810200c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 810200e:	4b1b      	ldr	r3, [pc, #108]	; (810207c <HAL_UART_MspInit+0x158>)
 8102010:	2240      	movs	r2, #64	; 0x40
 8102012:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102014:	4b19      	ldr	r3, [pc, #100]	; (810207c <HAL_UART_MspInit+0x158>)
 8102016:	2200      	movs	r2, #0
 8102018:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 810201a:	4b18      	ldr	r3, [pc, #96]	; (810207c <HAL_UART_MspInit+0x158>)
 810201c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8102020:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8102022:	4b16      	ldr	r3, [pc, #88]	; (810207c <HAL_UART_MspInit+0x158>)
 8102024:	2200      	movs	r2, #0
 8102026:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8102028:	4b14      	ldr	r3, [pc, #80]	; (810207c <HAL_UART_MspInit+0x158>)
 810202a:	2200      	movs	r2, #0
 810202c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 810202e:	4b13      	ldr	r3, [pc, #76]	; (810207c <HAL_UART_MspInit+0x158>)
 8102030:	2200      	movs	r2, #0
 8102032:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8102034:	4b11      	ldr	r3, [pc, #68]	; (810207c <HAL_UART_MspInit+0x158>)
 8102036:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 810203a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 810203c:	4b0f      	ldr	r3, [pc, #60]	; (810207c <HAL_UART_MspInit+0x158>)
 810203e:	2200      	movs	r2, #0
 8102040:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8102042:	480e      	ldr	r0, [pc, #56]	; (810207c <HAL_UART_MspInit+0x158>)
 8102044:	f000 f9d4 	bl	81023f0 <HAL_DMA_Init>
 8102048:	4603      	mov	r3, r0
 810204a:	2b00      	cmp	r3, #0
 810204c:	d001      	beq.n	8102052 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 810204e:	f7ff fb83 	bl	8101758 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8102052:	687b      	ldr	r3, [r7, #4]
 8102054:	4a09      	ldr	r2, [pc, #36]	; (810207c <HAL_UART_MspInit+0x158>)
 8102056:	675a      	str	r2, [r3, #116]	; 0x74
 8102058:	4a08      	ldr	r2, [pc, #32]	; (810207c <HAL_UART_MspInit+0x158>)
 810205a:	687b      	ldr	r3, [r7, #4]
 810205c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 810205e:	bf00      	nop
 8102060:	3728      	adds	r7, #40	; 0x28
 8102062:	46bd      	mov	sp, r7
 8102064:	bd80      	pop	{r7, pc}
 8102066:	bf00      	nop
 8102068:	40004800 	.word	0x40004800
 810206c:	58024400 	.word	0x58024400
 8102070:	58020c00 	.word	0x58020c00
 8102074:	100099d8 	.word	0x100099d8
 8102078:	40020440 	.word	0x40020440
 810207c:	10009adc 	.word	0x10009adc
 8102080:	40020458 	.word	0x40020458

08102084 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8102084:	f8df d034 	ldr.w	sp, [pc, #52]	; 81020bc <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8102088:	f7ff f846 	bl	8101118 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 810208c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 810208e:	e003      	b.n	8102098 <LoopCopyDataInit>

08102090 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8102090:	4b0b      	ldr	r3, [pc, #44]	; (81020c0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8102092:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8102094:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8102096:	3104      	adds	r1, #4

08102098 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8102098:	480a      	ldr	r0, [pc, #40]	; (81020c4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 810209a:	4b0b      	ldr	r3, [pc, #44]	; (81020c8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 810209c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 810209e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 81020a0:	d3f6      	bcc.n	8102090 <CopyDataInit>
  ldr  r2, =_sbss
 81020a2:	4a0a      	ldr	r2, [pc, #40]	; (81020cc <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 81020a4:	e002      	b.n	81020ac <LoopFillZerobss>

081020a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 81020a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 81020a8:	f842 3b04 	str.w	r3, [r2], #4

081020ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 81020ac:	4b08      	ldr	r3, [pc, #32]	; (81020d0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 81020ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 81020b0:	d3f9      	bcc.n	81020a6 <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 81020b2:	f00c f83d 	bl	810e130 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81020b6:	f7ff fae5 	bl	8101684 <main>
  bx  lr    
 81020ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81020bc:	10048000 	.word	0x10048000
  ldr  r3, =_sidata
 81020c0:	081111cc 	.word	0x081111cc
  ldr  r0, =_sdata
 81020c4:	10000000 	.word	0x10000000
  ldr  r3, =_edata
 81020c8:	10000204 	.word	0x10000204
  ldr  r2, =_sbss
 81020cc:	10000204 	.word	0x10000204
  ldr  r3, = _ebss
 81020d0:	10009fd8 	.word	0x10009fd8

081020d4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81020d4:	e7fe      	b.n	81020d4 <ADC3_IRQHandler>
	...

081020d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81020d8:	b580      	push	{r7, lr}
 81020da:	b082      	sub	sp, #8
 81020dc:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81020de:	4b28      	ldr	r3, [pc, #160]	; (8102180 <HAL_Init+0xa8>)
 81020e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81020e4:	4a26      	ldr	r2, [pc, #152]	; (8102180 <HAL_Init+0xa8>)
 81020e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81020ea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81020ee:	4b24      	ldr	r3, [pc, #144]	; (8102180 <HAL_Init+0xa8>)
 81020f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81020f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81020f8:	603b      	str	r3, [r7, #0]
 81020fa:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81020fc:	4b21      	ldr	r3, [pc, #132]	; (8102184 <HAL_Init+0xac>)
 81020fe:	681b      	ldr	r3, [r3, #0]
 8102100:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8102104:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102108:	4a1e      	ldr	r2, [pc, #120]	; (8102184 <HAL_Init+0xac>)
 810210a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810210e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102110:	4b1c      	ldr	r3, [pc, #112]	; (8102184 <HAL_Init+0xac>)
 8102112:	681b      	ldr	r3, [r3, #0]
 8102114:	4a1b      	ldr	r2, [pc, #108]	; (8102184 <HAL_Init+0xac>)
 8102116:	f043 0301 	orr.w	r3, r3, #1
 810211a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 810211c:	2003      	movs	r0, #3
 810211e:	f000 f91b 	bl	8102358 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102122:	f003 f8e5 	bl	81052f0 <HAL_RCC_GetSysClockFreq>
 8102126:	4601      	mov	r1, r0
 8102128:	4b15      	ldr	r3, [pc, #84]	; (8102180 <HAL_Init+0xa8>)
 810212a:	699b      	ldr	r3, [r3, #24]
 810212c:	0a1b      	lsrs	r3, r3, #8
 810212e:	f003 030f 	and.w	r3, r3, #15
 8102132:	4a15      	ldr	r2, [pc, #84]	; (8102188 <HAL_Init+0xb0>)
 8102134:	5cd3      	ldrb	r3, [r2, r3]
 8102136:	f003 031f 	and.w	r3, r3, #31
 810213a:	fa21 f303 	lsr.w	r3, r1, r3
 810213e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102140:	4b0f      	ldr	r3, [pc, #60]	; (8102180 <HAL_Init+0xa8>)
 8102142:	699b      	ldr	r3, [r3, #24]
 8102144:	f003 030f 	and.w	r3, r3, #15
 8102148:	4a0f      	ldr	r2, [pc, #60]	; (8102188 <HAL_Init+0xb0>)
 810214a:	5cd3      	ldrb	r3, [r2, r3]
 810214c:	f003 031f 	and.w	r3, r3, #31
 8102150:	687a      	ldr	r2, [r7, #4]
 8102152:	fa22 f303 	lsr.w	r3, r2, r3
 8102156:	4a0d      	ldr	r2, [pc, #52]	; (810218c <HAL_Init+0xb4>)
 8102158:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810215a:	4b0c      	ldr	r3, [pc, #48]	; (810218c <HAL_Init+0xb4>)
 810215c:	681b      	ldr	r3, [r3, #0]
 810215e:	4a0c      	ldr	r2, [pc, #48]	; (8102190 <HAL_Init+0xb8>)
 8102160:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8102162:	2000      	movs	r0, #0
 8102164:	f7ff fd86 	bl	8101c74 <HAL_InitTick>
 8102168:	4603      	mov	r3, r0
 810216a:	2b00      	cmp	r3, #0
 810216c:	d001      	beq.n	8102172 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810216e:	2301      	movs	r3, #1
 8102170:	e002      	b.n	8102178 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8102172:	f7ff fd61 	bl	8101c38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8102176:	2300      	movs	r3, #0
}
 8102178:	4618      	mov	r0, r3
 810217a:	3708      	adds	r7, #8
 810217c:	46bd      	mov	sp, r7
 810217e:	bd80      	pop	{r7, pc}
 8102180:	58024400 	.word	0x58024400
 8102184:	40024400 	.word	0x40024400
 8102188:	08110998 	.word	0x08110998
 810218c:	10000004 	.word	0x10000004
 8102190:	10000000 	.word	0x10000000

08102194 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8102194:	b480      	push	{r7}
 8102196:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8102198:	4b06      	ldr	r3, [pc, #24]	; (81021b4 <HAL_IncTick+0x20>)
 810219a:	781b      	ldrb	r3, [r3, #0]
 810219c:	461a      	mov	r2, r3
 810219e:	4b06      	ldr	r3, [pc, #24]	; (81021b8 <HAL_IncTick+0x24>)
 81021a0:	681b      	ldr	r3, [r3, #0]
 81021a2:	4413      	add	r3, r2
 81021a4:	4a04      	ldr	r2, [pc, #16]	; (81021b8 <HAL_IncTick+0x24>)
 81021a6:	6013      	str	r3, [r2, #0]
}
 81021a8:	bf00      	nop
 81021aa:	46bd      	mov	sp, r7
 81021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021b0:	4770      	bx	lr
 81021b2:	bf00      	nop
 81021b4:	1000000c 	.word	0x1000000c
 81021b8:	10009b54 	.word	0x10009b54

081021bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81021bc:	b480      	push	{r7}
 81021be:	af00      	add	r7, sp, #0
  return uwTick;
 81021c0:	4b03      	ldr	r3, [pc, #12]	; (81021d0 <HAL_GetTick+0x14>)
 81021c2:	681b      	ldr	r3, [r3, #0]
}
 81021c4:	4618      	mov	r0, r3
 81021c6:	46bd      	mov	sp, r7
 81021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021cc:	4770      	bx	lr
 81021ce:	bf00      	nop
 81021d0:	10009b54 	.word	0x10009b54

081021d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81021d4:	b480      	push	{r7}
 81021d6:	b085      	sub	sp, #20
 81021d8:	af00      	add	r7, sp, #0
 81021da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81021dc:	687b      	ldr	r3, [r7, #4]
 81021de:	f003 0307 	and.w	r3, r3, #7
 81021e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81021e4:	4b0c      	ldr	r3, [pc, #48]	; (8102218 <__NVIC_SetPriorityGrouping+0x44>)
 81021e6:	68db      	ldr	r3, [r3, #12]
 81021e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81021ea:	68ba      	ldr	r2, [r7, #8]
 81021ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81021f0:	4013      	ands	r3, r2
 81021f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81021f4:	68fb      	ldr	r3, [r7, #12]
 81021f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81021f8:	68bb      	ldr	r3, [r7, #8]
 81021fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81021fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8102200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8102206:	4a04      	ldr	r2, [pc, #16]	; (8102218 <__NVIC_SetPriorityGrouping+0x44>)
 8102208:	68bb      	ldr	r3, [r7, #8]
 810220a:	60d3      	str	r3, [r2, #12]
}
 810220c:	bf00      	nop
 810220e:	3714      	adds	r7, #20
 8102210:	46bd      	mov	sp, r7
 8102212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102216:	4770      	bx	lr
 8102218:	e000ed00 	.word	0xe000ed00

0810221c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 810221c:	b480      	push	{r7}
 810221e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8102220:	4b04      	ldr	r3, [pc, #16]	; (8102234 <__NVIC_GetPriorityGrouping+0x18>)
 8102222:	68db      	ldr	r3, [r3, #12]
 8102224:	0a1b      	lsrs	r3, r3, #8
 8102226:	f003 0307 	and.w	r3, r3, #7
}
 810222a:	4618      	mov	r0, r3
 810222c:	46bd      	mov	sp, r7
 810222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102232:	4770      	bx	lr
 8102234:	e000ed00 	.word	0xe000ed00

08102238 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102238:	b480      	push	{r7}
 810223a:	b083      	sub	sp, #12
 810223c:	af00      	add	r7, sp, #0
 810223e:	4603      	mov	r3, r0
 8102240:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102242:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102246:	2b00      	cmp	r3, #0
 8102248:	db0b      	blt.n	8102262 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810224a:	88fb      	ldrh	r3, [r7, #6]
 810224c:	f003 021f 	and.w	r2, r3, #31
 8102250:	4907      	ldr	r1, [pc, #28]	; (8102270 <__NVIC_EnableIRQ+0x38>)
 8102252:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102256:	095b      	lsrs	r3, r3, #5
 8102258:	2001      	movs	r0, #1
 810225a:	fa00 f202 	lsl.w	r2, r0, r2
 810225e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8102262:	bf00      	nop
 8102264:	370c      	adds	r7, #12
 8102266:	46bd      	mov	sp, r7
 8102268:	f85d 7b04 	ldr.w	r7, [sp], #4
 810226c:	4770      	bx	lr
 810226e:	bf00      	nop
 8102270:	e000e100 	.word	0xe000e100

08102274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8102274:	b480      	push	{r7}
 8102276:	b083      	sub	sp, #12
 8102278:	af00      	add	r7, sp, #0
 810227a:	4603      	mov	r3, r0
 810227c:	6039      	str	r1, [r7, #0]
 810227e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102280:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102284:	2b00      	cmp	r3, #0
 8102286:	db0a      	blt.n	810229e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102288:	683b      	ldr	r3, [r7, #0]
 810228a:	b2da      	uxtb	r2, r3
 810228c:	490c      	ldr	r1, [pc, #48]	; (81022c0 <__NVIC_SetPriority+0x4c>)
 810228e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102292:	0112      	lsls	r2, r2, #4
 8102294:	b2d2      	uxtb	r2, r2
 8102296:	440b      	add	r3, r1
 8102298:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 810229c:	e00a      	b.n	81022b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810229e:	683b      	ldr	r3, [r7, #0]
 81022a0:	b2da      	uxtb	r2, r3
 81022a2:	4908      	ldr	r1, [pc, #32]	; (81022c4 <__NVIC_SetPriority+0x50>)
 81022a4:	88fb      	ldrh	r3, [r7, #6]
 81022a6:	f003 030f 	and.w	r3, r3, #15
 81022aa:	3b04      	subs	r3, #4
 81022ac:	0112      	lsls	r2, r2, #4
 81022ae:	b2d2      	uxtb	r2, r2
 81022b0:	440b      	add	r3, r1
 81022b2:	761a      	strb	r2, [r3, #24]
}
 81022b4:	bf00      	nop
 81022b6:	370c      	adds	r7, #12
 81022b8:	46bd      	mov	sp, r7
 81022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022be:	4770      	bx	lr
 81022c0:	e000e100 	.word	0xe000e100
 81022c4:	e000ed00 	.word	0xe000ed00

081022c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81022c8:	b480      	push	{r7}
 81022ca:	b089      	sub	sp, #36	; 0x24
 81022cc:	af00      	add	r7, sp, #0
 81022ce:	60f8      	str	r0, [r7, #12]
 81022d0:	60b9      	str	r1, [r7, #8]
 81022d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81022d4:	68fb      	ldr	r3, [r7, #12]
 81022d6:	f003 0307 	and.w	r3, r3, #7
 81022da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81022dc:	69fb      	ldr	r3, [r7, #28]
 81022de:	f1c3 0307 	rsb	r3, r3, #7
 81022e2:	2b04      	cmp	r3, #4
 81022e4:	bf28      	it	cs
 81022e6:	2304      	movcs	r3, #4
 81022e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81022ea:	69fb      	ldr	r3, [r7, #28]
 81022ec:	3304      	adds	r3, #4
 81022ee:	2b06      	cmp	r3, #6
 81022f0:	d902      	bls.n	81022f8 <NVIC_EncodePriority+0x30>
 81022f2:	69fb      	ldr	r3, [r7, #28]
 81022f4:	3b03      	subs	r3, #3
 81022f6:	e000      	b.n	81022fa <NVIC_EncodePriority+0x32>
 81022f8:	2300      	movs	r3, #0
 81022fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81022fc:	f04f 32ff 	mov.w	r2, #4294967295
 8102300:	69bb      	ldr	r3, [r7, #24]
 8102302:	fa02 f303 	lsl.w	r3, r2, r3
 8102306:	43da      	mvns	r2, r3
 8102308:	68bb      	ldr	r3, [r7, #8]
 810230a:	401a      	ands	r2, r3
 810230c:	697b      	ldr	r3, [r7, #20]
 810230e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8102310:	f04f 31ff 	mov.w	r1, #4294967295
 8102314:	697b      	ldr	r3, [r7, #20]
 8102316:	fa01 f303 	lsl.w	r3, r1, r3
 810231a:	43d9      	mvns	r1, r3
 810231c:	687b      	ldr	r3, [r7, #4]
 810231e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102320:	4313      	orrs	r3, r2
         );
}
 8102322:	4618      	mov	r0, r3
 8102324:	3724      	adds	r7, #36	; 0x24
 8102326:	46bd      	mov	sp, r7
 8102328:	f85d 7b04 	ldr.w	r7, [sp], #4
 810232c:	4770      	bx	lr
	...

08102330 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8102330:	b480      	push	{r7}
 8102332:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8102334:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8102338:	4b05      	ldr	r3, [pc, #20]	; (8102350 <__NVIC_SystemReset+0x20>)
 810233a:	68db      	ldr	r3, [r3, #12]
 810233c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8102340:	4903      	ldr	r1, [pc, #12]	; (8102350 <__NVIC_SystemReset+0x20>)
 8102342:	4b04      	ldr	r3, [pc, #16]	; (8102354 <__NVIC_SystemReset+0x24>)
 8102344:	4313      	orrs	r3, r2
 8102346:	60cb      	str	r3, [r1, #12]
 8102348:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 810234c:	bf00      	nop
 810234e:	e7fd      	b.n	810234c <__NVIC_SystemReset+0x1c>
 8102350:	e000ed00 	.word	0xe000ed00
 8102354:	05fa0004 	.word	0x05fa0004

08102358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102358:	b580      	push	{r7, lr}
 810235a:	b082      	sub	sp, #8
 810235c:	af00      	add	r7, sp, #0
 810235e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8102360:	6878      	ldr	r0, [r7, #4]
 8102362:	f7ff ff37 	bl	81021d4 <__NVIC_SetPriorityGrouping>
}
 8102366:	bf00      	nop
 8102368:	3708      	adds	r7, #8
 810236a:	46bd      	mov	sp, r7
 810236c:	bd80      	pop	{r7, pc}

0810236e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810236e:	b580      	push	{r7, lr}
 8102370:	b086      	sub	sp, #24
 8102372:	af00      	add	r7, sp, #0
 8102374:	4603      	mov	r3, r0
 8102376:	60b9      	str	r1, [r7, #8]
 8102378:	607a      	str	r2, [r7, #4]
 810237a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 810237c:	f7ff ff4e 	bl	810221c <__NVIC_GetPriorityGrouping>
 8102380:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8102382:	687a      	ldr	r2, [r7, #4]
 8102384:	68b9      	ldr	r1, [r7, #8]
 8102386:	6978      	ldr	r0, [r7, #20]
 8102388:	f7ff ff9e 	bl	81022c8 <NVIC_EncodePriority>
 810238c:	4602      	mov	r2, r0
 810238e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8102392:	4611      	mov	r1, r2
 8102394:	4618      	mov	r0, r3
 8102396:	f7ff ff6d 	bl	8102274 <__NVIC_SetPriority>
}
 810239a:	bf00      	nop
 810239c:	3718      	adds	r7, #24
 810239e:	46bd      	mov	sp, r7
 81023a0:	bd80      	pop	{r7, pc}

081023a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81023a2:	b580      	push	{r7, lr}
 81023a4:	b082      	sub	sp, #8
 81023a6:	af00      	add	r7, sp, #0
 81023a8:	4603      	mov	r3, r0
 81023aa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81023ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81023b0:	4618      	mov	r0, r3
 81023b2:	f7ff ff41 	bl	8102238 <__NVIC_EnableIRQ>
}
 81023b6:	bf00      	nop
 81023b8:	3708      	adds	r7, #8
 81023ba:	46bd      	mov	sp, r7
 81023bc:	bd80      	pop	{r7, pc}

081023be <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 81023be:	b580      	push	{r7, lr}
 81023c0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 81023c2:	f7ff ffb5 	bl	8102330 <__NVIC_SystemReset>
	...

081023c8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81023c8:	b480      	push	{r7}
 81023ca:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81023cc:	4b07      	ldr	r3, [pc, #28]	; (81023ec <HAL_GetCurrentCPUID+0x24>)
 81023ce:	681b      	ldr	r3, [r3, #0]
 81023d0:	091b      	lsrs	r3, r3, #4
 81023d2:	f003 030f 	and.w	r3, r3, #15
 81023d6:	2b07      	cmp	r3, #7
 81023d8:	d101      	bne.n	81023de <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81023da:	2303      	movs	r3, #3
 81023dc:	e000      	b.n	81023e0 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81023de:	2301      	movs	r3, #1
  }
}
 81023e0:	4618      	mov	r0, r3
 81023e2:	46bd      	mov	sp, r7
 81023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023e8:	4770      	bx	lr
 81023ea:	bf00      	nop
 81023ec:	e000ed00 	.word	0xe000ed00

081023f0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 81023f0:	b580      	push	{r7, lr}
 81023f2:	b086      	sub	sp, #24
 81023f4:	af00      	add	r7, sp, #0
 81023f6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 81023f8:	f7ff fee0 	bl	81021bc <HAL_GetTick>
 81023fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81023fe:	687b      	ldr	r3, [r7, #4]
 8102400:	2b00      	cmp	r3, #0
 8102402:	d101      	bne.n	8102408 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8102404:	2301      	movs	r3, #1
 8102406:	e314      	b.n	8102a32 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102408:	687b      	ldr	r3, [r7, #4]
 810240a:	681b      	ldr	r3, [r3, #0]
 810240c:	4a66      	ldr	r2, [pc, #408]	; (81025a8 <HAL_DMA_Init+0x1b8>)
 810240e:	4293      	cmp	r3, r2
 8102410:	d04a      	beq.n	81024a8 <HAL_DMA_Init+0xb8>
 8102412:	687b      	ldr	r3, [r7, #4]
 8102414:	681b      	ldr	r3, [r3, #0]
 8102416:	4a65      	ldr	r2, [pc, #404]	; (81025ac <HAL_DMA_Init+0x1bc>)
 8102418:	4293      	cmp	r3, r2
 810241a:	d045      	beq.n	81024a8 <HAL_DMA_Init+0xb8>
 810241c:	687b      	ldr	r3, [r7, #4]
 810241e:	681b      	ldr	r3, [r3, #0]
 8102420:	4a63      	ldr	r2, [pc, #396]	; (81025b0 <HAL_DMA_Init+0x1c0>)
 8102422:	4293      	cmp	r3, r2
 8102424:	d040      	beq.n	81024a8 <HAL_DMA_Init+0xb8>
 8102426:	687b      	ldr	r3, [r7, #4]
 8102428:	681b      	ldr	r3, [r3, #0]
 810242a:	4a62      	ldr	r2, [pc, #392]	; (81025b4 <HAL_DMA_Init+0x1c4>)
 810242c:	4293      	cmp	r3, r2
 810242e:	d03b      	beq.n	81024a8 <HAL_DMA_Init+0xb8>
 8102430:	687b      	ldr	r3, [r7, #4]
 8102432:	681b      	ldr	r3, [r3, #0]
 8102434:	4a60      	ldr	r2, [pc, #384]	; (81025b8 <HAL_DMA_Init+0x1c8>)
 8102436:	4293      	cmp	r3, r2
 8102438:	d036      	beq.n	81024a8 <HAL_DMA_Init+0xb8>
 810243a:	687b      	ldr	r3, [r7, #4]
 810243c:	681b      	ldr	r3, [r3, #0]
 810243e:	4a5f      	ldr	r2, [pc, #380]	; (81025bc <HAL_DMA_Init+0x1cc>)
 8102440:	4293      	cmp	r3, r2
 8102442:	d031      	beq.n	81024a8 <HAL_DMA_Init+0xb8>
 8102444:	687b      	ldr	r3, [r7, #4]
 8102446:	681b      	ldr	r3, [r3, #0]
 8102448:	4a5d      	ldr	r2, [pc, #372]	; (81025c0 <HAL_DMA_Init+0x1d0>)
 810244a:	4293      	cmp	r3, r2
 810244c:	d02c      	beq.n	81024a8 <HAL_DMA_Init+0xb8>
 810244e:	687b      	ldr	r3, [r7, #4]
 8102450:	681b      	ldr	r3, [r3, #0]
 8102452:	4a5c      	ldr	r2, [pc, #368]	; (81025c4 <HAL_DMA_Init+0x1d4>)
 8102454:	4293      	cmp	r3, r2
 8102456:	d027      	beq.n	81024a8 <HAL_DMA_Init+0xb8>
 8102458:	687b      	ldr	r3, [r7, #4]
 810245a:	681b      	ldr	r3, [r3, #0]
 810245c:	4a5a      	ldr	r2, [pc, #360]	; (81025c8 <HAL_DMA_Init+0x1d8>)
 810245e:	4293      	cmp	r3, r2
 8102460:	d022      	beq.n	81024a8 <HAL_DMA_Init+0xb8>
 8102462:	687b      	ldr	r3, [r7, #4]
 8102464:	681b      	ldr	r3, [r3, #0]
 8102466:	4a59      	ldr	r2, [pc, #356]	; (81025cc <HAL_DMA_Init+0x1dc>)
 8102468:	4293      	cmp	r3, r2
 810246a:	d01d      	beq.n	81024a8 <HAL_DMA_Init+0xb8>
 810246c:	687b      	ldr	r3, [r7, #4]
 810246e:	681b      	ldr	r3, [r3, #0]
 8102470:	4a57      	ldr	r2, [pc, #348]	; (81025d0 <HAL_DMA_Init+0x1e0>)
 8102472:	4293      	cmp	r3, r2
 8102474:	d018      	beq.n	81024a8 <HAL_DMA_Init+0xb8>
 8102476:	687b      	ldr	r3, [r7, #4]
 8102478:	681b      	ldr	r3, [r3, #0]
 810247a:	4a56      	ldr	r2, [pc, #344]	; (81025d4 <HAL_DMA_Init+0x1e4>)
 810247c:	4293      	cmp	r3, r2
 810247e:	d013      	beq.n	81024a8 <HAL_DMA_Init+0xb8>
 8102480:	687b      	ldr	r3, [r7, #4]
 8102482:	681b      	ldr	r3, [r3, #0]
 8102484:	4a54      	ldr	r2, [pc, #336]	; (81025d8 <HAL_DMA_Init+0x1e8>)
 8102486:	4293      	cmp	r3, r2
 8102488:	d00e      	beq.n	81024a8 <HAL_DMA_Init+0xb8>
 810248a:	687b      	ldr	r3, [r7, #4]
 810248c:	681b      	ldr	r3, [r3, #0]
 810248e:	4a53      	ldr	r2, [pc, #332]	; (81025dc <HAL_DMA_Init+0x1ec>)
 8102490:	4293      	cmp	r3, r2
 8102492:	d009      	beq.n	81024a8 <HAL_DMA_Init+0xb8>
 8102494:	687b      	ldr	r3, [r7, #4]
 8102496:	681b      	ldr	r3, [r3, #0]
 8102498:	4a51      	ldr	r2, [pc, #324]	; (81025e0 <HAL_DMA_Init+0x1f0>)
 810249a:	4293      	cmp	r3, r2
 810249c:	d004      	beq.n	81024a8 <HAL_DMA_Init+0xb8>
 810249e:	687b      	ldr	r3, [r7, #4]
 81024a0:	681b      	ldr	r3, [r3, #0]
 81024a2:	4a50      	ldr	r2, [pc, #320]	; (81025e4 <HAL_DMA_Init+0x1f4>)
 81024a4:	4293      	cmp	r3, r2
 81024a6:	d101      	bne.n	81024ac <HAL_DMA_Init+0xbc>
 81024a8:	2301      	movs	r3, #1
 81024aa:	e000      	b.n	81024ae <HAL_DMA_Init+0xbe>
 81024ac:	2300      	movs	r3, #0
 81024ae:	2b00      	cmp	r3, #0
 81024b0:	f000 813b 	beq.w	810272a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 81024b4:	687b      	ldr	r3, [r7, #4]
 81024b6:	2200      	movs	r2, #0
 81024b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 81024bc:	687b      	ldr	r3, [r7, #4]
 81024be:	2202      	movs	r2, #2
 81024c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 81024c4:	687b      	ldr	r3, [r7, #4]
 81024c6:	681b      	ldr	r3, [r3, #0]
 81024c8:	4a37      	ldr	r2, [pc, #220]	; (81025a8 <HAL_DMA_Init+0x1b8>)
 81024ca:	4293      	cmp	r3, r2
 81024cc:	d04a      	beq.n	8102564 <HAL_DMA_Init+0x174>
 81024ce:	687b      	ldr	r3, [r7, #4]
 81024d0:	681b      	ldr	r3, [r3, #0]
 81024d2:	4a36      	ldr	r2, [pc, #216]	; (81025ac <HAL_DMA_Init+0x1bc>)
 81024d4:	4293      	cmp	r3, r2
 81024d6:	d045      	beq.n	8102564 <HAL_DMA_Init+0x174>
 81024d8:	687b      	ldr	r3, [r7, #4]
 81024da:	681b      	ldr	r3, [r3, #0]
 81024dc:	4a34      	ldr	r2, [pc, #208]	; (81025b0 <HAL_DMA_Init+0x1c0>)
 81024de:	4293      	cmp	r3, r2
 81024e0:	d040      	beq.n	8102564 <HAL_DMA_Init+0x174>
 81024e2:	687b      	ldr	r3, [r7, #4]
 81024e4:	681b      	ldr	r3, [r3, #0]
 81024e6:	4a33      	ldr	r2, [pc, #204]	; (81025b4 <HAL_DMA_Init+0x1c4>)
 81024e8:	4293      	cmp	r3, r2
 81024ea:	d03b      	beq.n	8102564 <HAL_DMA_Init+0x174>
 81024ec:	687b      	ldr	r3, [r7, #4]
 81024ee:	681b      	ldr	r3, [r3, #0]
 81024f0:	4a31      	ldr	r2, [pc, #196]	; (81025b8 <HAL_DMA_Init+0x1c8>)
 81024f2:	4293      	cmp	r3, r2
 81024f4:	d036      	beq.n	8102564 <HAL_DMA_Init+0x174>
 81024f6:	687b      	ldr	r3, [r7, #4]
 81024f8:	681b      	ldr	r3, [r3, #0]
 81024fa:	4a30      	ldr	r2, [pc, #192]	; (81025bc <HAL_DMA_Init+0x1cc>)
 81024fc:	4293      	cmp	r3, r2
 81024fe:	d031      	beq.n	8102564 <HAL_DMA_Init+0x174>
 8102500:	687b      	ldr	r3, [r7, #4]
 8102502:	681b      	ldr	r3, [r3, #0]
 8102504:	4a2e      	ldr	r2, [pc, #184]	; (81025c0 <HAL_DMA_Init+0x1d0>)
 8102506:	4293      	cmp	r3, r2
 8102508:	d02c      	beq.n	8102564 <HAL_DMA_Init+0x174>
 810250a:	687b      	ldr	r3, [r7, #4]
 810250c:	681b      	ldr	r3, [r3, #0]
 810250e:	4a2d      	ldr	r2, [pc, #180]	; (81025c4 <HAL_DMA_Init+0x1d4>)
 8102510:	4293      	cmp	r3, r2
 8102512:	d027      	beq.n	8102564 <HAL_DMA_Init+0x174>
 8102514:	687b      	ldr	r3, [r7, #4]
 8102516:	681b      	ldr	r3, [r3, #0]
 8102518:	4a2b      	ldr	r2, [pc, #172]	; (81025c8 <HAL_DMA_Init+0x1d8>)
 810251a:	4293      	cmp	r3, r2
 810251c:	d022      	beq.n	8102564 <HAL_DMA_Init+0x174>
 810251e:	687b      	ldr	r3, [r7, #4]
 8102520:	681b      	ldr	r3, [r3, #0]
 8102522:	4a2a      	ldr	r2, [pc, #168]	; (81025cc <HAL_DMA_Init+0x1dc>)
 8102524:	4293      	cmp	r3, r2
 8102526:	d01d      	beq.n	8102564 <HAL_DMA_Init+0x174>
 8102528:	687b      	ldr	r3, [r7, #4]
 810252a:	681b      	ldr	r3, [r3, #0]
 810252c:	4a28      	ldr	r2, [pc, #160]	; (81025d0 <HAL_DMA_Init+0x1e0>)
 810252e:	4293      	cmp	r3, r2
 8102530:	d018      	beq.n	8102564 <HAL_DMA_Init+0x174>
 8102532:	687b      	ldr	r3, [r7, #4]
 8102534:	681b      	ldr	r3, [r3, #0]
 8102536:	4a27      	ldr	r2, [pc, #156]	; (81025d4 <HAL_DMA_Init+0x1e4>)
 8102538:	4293      	cmp	r3, r2
 810253a:	d013      	beq.n	8102564 <HAL_DMA_Init+0x174>
 810253c:	687b      	ldr	r3, [r7, #4]
 810253e:	681b      	ldr	r3, [r3, #0]
 8102540:	4a25      	ldr	r2, [pc, #148]	; (81025d8 <HAL_DMA_Init+0x1e8>)
 8102542:	4293      	cmp	r3, r2
 8102544:	d00e      	beq.n	8102564 <HAL_DMA_Init+0x174>
 8102546:	687b      	ldr	r3, [r7, #4]
 8102548:	681b      	ldr	r3, [r3, #0]
 810254a:	4a24      	ldr	r2, [pc, #144]	; (81025dc <HAL_DMA_Init+0x1ec>)
 810254c:	4293      	cmp	r3, r2
 810254e:	d009      	beq.n	8102564 <HAL_DMA_Init+0x174>
 8102550:	687b      	ldr	r3, [r7, #4]
 8102552:	681b      	ldr	r3, [r3, #0]
 8102554:	4a22      	ldr	r2, [pc, #136]	; (81025e0 <HAL_DMA_Init+0x1f0>)
 8102556:	4293      	cmp	r3, r2
 8102558:	d004      	beq.n	8102564 <HAL_DMA_Init+0x174>
 810255a:	687b      	ldr	r3, [r7, #4]
 810255c:	681b      	ldr	r3, [r3, #0]
 810255e:	4a21      	ldr	r2, [pc, #132]	; (81025e4 <HAL_DMA_Init+0x1f4>)
 8102560:	4293      	cmp	r3, r2
 8102562:	d108      	bne.n	8102576 <HAL_DMA_Init+0x186>
 8102564:	687b      	ldr	r3, [r7, #4]
 8102566:	681b      	ldr	r3, [r3, #0]
 8102568:	681a      	ldr	r2, [r3, #0]
 810256a:	687b      	ldr	r3, [r7, #4]
 810256c:	681b      	ldr	r3, [r3, #0]
 810256e:	f022 0201 	bic.w	r2, r2, #1
 8102572:	601a      	str	r2, [r3, #0]
 8102574:	e007      	b.n	8102586 <HAL_DMA_Init+0x196>
 8102576:	687b      	ldr	r3, [r7, #4]
 8102578:	681b      	ldr	r3, [r3, #0]
 810257a:	681a      	ldr	r2, [r3, #0]
 810257c:	687b      	ldr	r3, [r7, #4]
 810257e:	681b      	ldr	r3, [r3, #0]
 8102580:	f022 0201 	bic.w	r2, r2, #1
 8102584:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8102586:	e02f      	b.n	81025e8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8102588:	f7ff fe18 	bl	81021bc <HAL_GetTick>
 810258c:	4602      	mov	r2, r0
 810258e:	693b      	ldr	r3, [r7, #16]
 8102590:	1ad3      	subs	r3, r2, r3
 8102592:	2b05      	cmp	r3, #5
 8102594:	d928      	bls.n	81025e8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8102596:	687b      	ldr	r3, [r7, #4]
 8102598:	2220      	movs	r2, #32
 810259a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 810259c:	687b      	ldr	r3, [r7, #4]
 810259e:	2203      	movs	r2, #3
 81025a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 81025a4:	2301      	movs	r3, #1
 81025a6:	e244      	b.n	8102a32 <HAL_DMA_Init+0x642>
 81025a8:	40020010 	.word	0x40020010
 81025ac:	40020028 	.word	0x40020028
 81025b0:	40020040 	.word	0x40020040
 81025b4:	40020058 	.word	0x40020058
 81025b8:	40020070 	.word	0x40020070
 81025bc:	40020088 	.word	0x40020088
 81025c0:	400200a0 	.word	0x400200a0
 81025c4:	400200b8 	.word	0x400200b8
 81025c8:	40020410 	.word	0x40020410
 81025cc:	40020428 	.word	0x40020428
 81025d0:	40020440 	.word	0x40020440
 81025d4:	40020458 	.word	0x40020458
 81025d8:	40020470 	.word	0x40020470
 81025dc:	40020488 	.word	0x40020488
 81025e0:	400204a0 	.word	0x400204a0
 81025e4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81025e8:	687b      	ldr	r3, [r7, #4]
 81025ea:	681b      	ldr	r3, [r3, #0]
 81025ec:	681b      	ldr	r3, [r3, #0]
 81025ee:	f003 0301 	and.w	r3, r3, #1
 81025f2:	2b00      	cmp	r3, #0
 81025f4:	d1c8      	bne.n	8102588 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 81025f6:	687b      	ldr	r3, [r7, #4]
 81025f8:	681b      	ldr	r3, [r3, #0]
 81025fa:	681b      	ldr	r3, [r3, #0]
 81025fc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 81025fe:	697a      	ldr	r2, [r7, #20]
 8102600:	4b84      	ldr	r3, [pc, #528]	; (8102814 <HAL_DMA_Init+0x424>)
 8102602:	4013      	ands	r3, r2
 8102604:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8102606:	687b      	ldr	r3, [r7, #4]
 8102608:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 810260a:	687b      	ldr	r3, [r7, #4]
 810260c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 810260e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8102610:	687b      	ldr	r3, [r7, #4]
 8102612:	691b      	ldr	r3, [r3, #16]
 8102614:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8102616:	687b      	ldr	r3, [r7, #4]
 8102618:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 810261a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 810261c:	687b      	ldr	r3, [r7, #4]
 810261e:	699b      	ldr	r3, [r3, #24]
 8102620:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8102622:	687b      	ldr	r3, [r7, #4]
 8102624:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8102626:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8102628:	687b      	ldr	r3, [r7, #4]
 810262a:	6a1b      	ldr	r3, [r3, #32]
 810262c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 810262e:	697a      	ldr	r2, [r7, #20]
 8102630:	4313      	orrs	r3, r2
 8102632:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8102634:	687b      	ldr	r3, [r7, #4]
 8102636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102638:	2b04      	cmp	r3, #4
 810263a:	d107      	bne.n	810264c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 810263c:	687b      	ldr	r3, [r7, #4]
 810263e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8102640:	687b      	ldr	r3, [r7, #4]
 8102642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102644:	4313      	orrs	r3, r2
 8102646:	697a      	ldr	r2, [r7, #20]
 8102648:	4313      	orrs	r3, r2
 810264a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 810264c:	4b72      	ldr	r3, [pc, #456]	; (8102818 <HAL_DMA_Init+0x428>)
 810264e:	681b      	ldr	r3, [r3, #0]
 8102650:	0c1b      	lsrs	r3, r3, #16
 8102652:	041b      	lsls	r3, r3, #16
 8102654:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102658:	d328      	bcc.n	81026ac <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 810265a:	687b      	ldr	r3, [r7, #4]
 810265c:	685b      	ldr	r3, [r3, #4]
 810265e:	2b28      	cmp	r3, #40	; 0x28
 8102660:	d903      	bls.n	810266a <HAL_DMA_Init+0x27a>
 8102662:	687b      	ldr	r3, [r7, #4]
 8102664:	685b      	ldr	r3, [r3, #4]
 8102666:	2b2e      	cmp	r3, #46	; 0x2e
 8102668:	d917      	bls.n	810269a <HAL_DMA_Init+0x2aa>
 810266a:	687b      	ldr	r3, [r7, #4]
 810266c:	685b      	ldr	r3, [r3, #4]
 810266e:	2b3e      	cmp	r3, #62	; 0x3e
 8102670:	d903      	bls.n	810267a <HAL_DMA_Init+0x28a>
 8102672:	687b      	ldr	r3, [r7, #4]
 8102674:	685b      	ldr	r3, [r3, #4]
 8102676:	2b42      	cmp	r3, #66	; 0x42
 8102678:	d90f      	bls.n	810269a <HAL_DMA_Init+0x2aa>
 810267a:	687b      	ldr	r3, [r7, #4]
 810267c:	685b      	ldr	r3, [r3, #4]
 810267e:	2b46      	cmp	r3, #70	; 0x46
 8102680:	d903      	bls.n	810268a <HAL_DMA_Init+0x29a>
 8102682:	687b      	ldr	r3, [r7, #4]
 8102684:	685b      	ldr	r3, [r3, #4]
 8102686:	2b48      	cmp	r3, #72	; 0x48
 8102688:	d907      	bls.n	810269a <HAL_DMA_Init+0x2aa>
 810268a:	687b      	ldr	r3, [r7, #4]
 810268c:	685b      	ldr	r3, [r3, #4]
 810268e:	2b4e      	cmp	r3, #78	; 0x4e
 8102690:	d905      	bls.n	810269e <HAL_DMA_Init+0x2ae>
 8102692:	687b      	ldr	r3, [r7, #4]
 8102694:	685b      	ldr	r3, [r3, #4]
 8102696:	2b52      	cmp	r3, #82	; 0x52
 8102698:	d801      	bhi.n	810269e <HAL_DMA_Init+0x2ae>
 810269a:	2301      	movs	r3, #1
 810269c:	e000      	b.n	81026a0 <HAL_DMA_Init+0x2b0>
 810269e:	2300      	movs	r3, #0
 81026a0:	2b00      	cmp	r3, #0
 81026a2:	d003      	beq.n	81026ac <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 81026a4:	697b      	ldr	r3, [r7, #20]
 81026a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81026aa:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 81026ac:	687b      	ldr	r3, [r7, #4]
 81026ae:	681b      	ldr	r3, [r3, #0]
 81026b0:	697a      	ldr	r2, [r7, #20]
 81026b2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 81026b4:	687b      	ldr	r3, [r7, #4]
 81026b6:	681b      	ldr	r3, [r3, #0]
 81026b8:	695b      	ldr	r3, [r3, #20]
 81026ba:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 81026bc:	697b      	ldr	r3, [r7, #20]
 81026be:	f023 0307 	bic.w	r3, r3, #7
 81026c2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 81026c4:	687b      	ldr	r3, [r7, #4]
 81026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81026c8:	697a      	ldr	r2, [r7, #20]
 81026ca:	4313      	orrs	r3, r2
 81026cc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 81026ce:	687b      	ldr	r3, [r7, #4]
 81026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81026d2:	2b04      	cmp	r3, #4
 81026d4:	d117      	bne.n	8102706 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 81026d6:	687b      	ldr	r3, [r7, #4]
 81026d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81026da:	697a      	ldr	r2, [r7, #20]
 81026dc:	4313      	orrs	r3, r2
 81026de:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 81026e0:	687b      	ldr	r3, [r7, #4]
 81026e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81026e4:	2b00      	cmp	r3, #0
 81026e6:	d00e      	beq.n	8102706 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 81026e8:	6878      	ldr	r0, [r7, #4]
 81026ea:	f002 f811 	bl	8104710 <DMA_CheckFifoParam>
 81026ee:	4603      	mov	r3, r0
 81026f0:	2b00      	cmp	r3, #0
 81026f2:	d008      	beq.n	8102706 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 81026f4:	687b      	ldr	r3, [r7, #4]
 81026f6:	2240      	movs	r2, #64	; 0x40
 81026f8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81026fa:	687b      	ldr	r3, [r7, #4]
 81026fc:	2201      	movs	r2, #1
 81026fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8102702:	2301      	movs	r3, #1
 8102704:	e195      	b.n	8102a32 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8102706:	687b      	ldr	r3, [r7, #4]
 8102708:	681b      	ldr	r3, [r3, #0]
 810270a:	697a      	ldr	r2, [r7, #20]
 810270c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 810270e:	6878      	ldr	r0, [r7, #4]
 8102710:	f001 ff4c 	bl	81045ac <DMA_CalcBaseAndBitshift>
 8102714:	4603      	mov	r3, r0
 8102716:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8102718:	687b      	ldr	r3, [r7, #4]
 810271a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810271c:	f003 031f 	and.w	r3, r3, #31
 8102720:	223f      	movs	r2, #63	; 0x3f
 8102722:	409a      	lsls	r2, r3
 8102724:	68bb      	ldr	r3, [r7, #8]
 8102726:	609a      	str	r2, [r3, #8]
 8102728:	e0cb      	b.n	81028c2 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 810272a:	687b      	ldr	r3, [r7, #4]
 810272c:	681b      	ldr	r3, [r3, #0]
 810272e:	4a3b      	ldr	r2, [pc, #236]	; (810281c <HAL_DMA_Init+0x42c>)
 8102730:	4293      	cmp	r3, r2
 8102732:	d022      	beq.n	810277a <HAL_DMA_Init+0x38a>
 8102734:	687b      	ldr	r3, [r7, #4]
 8102736:	681b      	ldr	r3, [r3, #0]
 8102738:	4a39      	ldr	r2, [pc, #228]	; (8102820 <HAL_DMA_Init+0x430>)
 810273a:	4293      	cmp	r3, r2
 810273c:	d01d      	beq.n	810277a <HAL_DMA_Init+0x38a>
 810273e:	687b      	ldr	r3, [r7, #4]
 8102740:	681b      	ldr	r3, [r3, #0]
 8102742:	4a38      	ldr	r2, [pc, #224]	; (8102824 <HAL_DMA_Init+0x434>)
 8102744:	4293      	cmp	r3, r2
 8102746:	d018      	beq.n	810277a <HAL_DMA_Init+0x38a>
 8102748:	687b      	ldr	r3, [r7, #4]
 810274a:	681b      	ldr	r3, [r3, #0]
 810274c:	4a36      	ldr	r2, [pc, #216]	; (8102828 <HAL_DMA_Init+0x438>)
 810274e:	4293      	cmp	r3, r2
 8102750:	d013      	beq.n	810277a <HAL_DMA_Init+0x38a>
 8102752:	687b      	ldr	r3, [r7, #4]
 8102754:	681b      	ldr	r3, [r3, #0]
 8102756:	4a35      	ldr	r2, [pc, #212]	; (810282c <HAL_DMA_Init+0x43c>)
 8102758:	4293      	cmp	r3, r2
 810275a:	d00e      	beq.n	810277a <HAL_DMA_Init+0x38a>
 810275c:	687b      	ldr	r3, [r7, #4]
 810275e:	681b      	ldr	r3, [r3, #0]
 8102760:	4a33      	ldr	r2, [pc, #204]	; (8102830 <HAL_DMA_Init+0x440>)
 8102762:	4293      	cmp	r3, r2
 8102764:	d009      	beq.n	810277a <HAL_DMA_Init+0x38a>
 8102766:	687b      	ldr	r3, [r7, #4]
 8102768:	681b      	ldr	r3, [r3, #0]
 810276a:	4a32      	ldr	r2, [pc, #200]	; (8102834 <HAL_DMA_Init+0x444>)
 810276c:	4293      	cmp	r3, r2
 810276e:	d004      	beq.n	810277a <HAL_DMA_Init+0x38a>
 8102770:	687b      	ldr	r3, [r7, #4]
 8102772:	681b      	ldr	r3, [r3, #0]
 8102774:	4a30      	ldr	r2, [pc, #192]	; (8102838 <HAL_DMA_Init+0x448>)
 8102776:	4293      	cmp	r3, r2
 8102778:	d101      	bne.n	810277e <HAL_DMA_Init+0x38e>
 810277a:	2301      	movs	r3, #1
 810277c:	e000      	b.n	8102780 <HAL_DMA_Init+0x390>
 810277e:	2300      	movs	r3, #0
 8102780:	2b00      	cmp	r3, #0
 8102782:	f000 8095 	beq.w	81028b0 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8102786:	687b      	ldr	r3, [r7, #4]
 8102788:	681b      	ldr	r3, [r3, #0]
 810278a:	4a24      	ldr	r2, [pc, #144]	; (810281c <HAL_DMA_Init+0x42c>)
 810278c:	4293      	cmp	r3, r2
 810278e:	d021      	beq.n	81027d4 <HAL_DMA_Init+0x3e4>
 8102790:	687b      	ldr	r3, [r7, #4]
 8102792:	681b      	ldr	r3, [r3, #0]
 8102794:	4a22      	ldr	r2, [pc, #136]	; (8102820 <HAL_DMA_Init+0x430>)
 8102796:	4293      	cmp	r3, r2
 8102798:	d01c      	beq.n	81027d4 <HAL_DMA_Init+0x3e4>
 810279a:	687b      	ldr	r3, [r7, #4]
 810279c:	681b      	ldr	r3, [r3, #0]
 810279e:	4a21      	ldr	r2, [pc, #132]	; (8102824 <HAL_DMA_Init+0x434>)
 81027a0:	4293      	cmp	r3, r2
 81027a2:	d017      	beq.n	81027d4 <HAL_DMA_Init+0x3e4>
 81027a4:	687b      	ldr	r3, [r7, #4]
 81027a6:	681b      	ldr	r3, [r3, #0]
 81027a8:	4a1f      	ldr	r2, [pc, #124]	; (8102828 <HAL_DMA_Init+0x438>)
 81027aa:	4293      	cmp	r3, r2
 81027ac:	d012      	beq.n	81027d4 <HAL_DMA_Init+0x3e4>
 81027ae:	687b      	ldr	r3, [r7, #4]
 81027b0:	681b      	ldr	r3, [r3, #0]
 81027b2:	4a1e      	ldr	r2, [pc, #120]	; (810282c <HAL_DMA_Init+0x43c>)
 81027b4:	4293      	cmp	r3, r2
 81027b6:	d00d      	beq.n	81027d4 <HAL_DMA_Init+0x3e4>
 81027b8:	687b      	ldr	r3, [r7, #4]
 81027ba:	681b      	ldr	r3, [r3, #0]
 81027bc:	4a1c      	ldr	r2, [pc, #112]	; (8102830 <HAL_DMA_Init+0x440>)
 81027be:	4293      	cmp	r3, r2
 81027c0:	d008      	beq.n	81027d4 <HAL_DMA_Init+0x3e4>
 81027c2:	687b      	ldr	r3, [r7, #4]
 81027c4:	681b      	ldr	r3, [r3, #0]
 81027c6:	4a1b      	ldr	r2, [pc, #108]	; (8102834 <HAL_DMA_Init+0x444>)
 81027c8:	4293      	cmp	r3, r2
 81027ca:	d003      	beq.n	81027d4 <HAL_DMA_Init+0x3e4>
 81027cc:	687b      	ldr	r3, [r7, #4]
 81027ce:	681b      	ldr	r3, [r3, #0]
 81027d0:	4a19      	ldr	r2, [pc, #100]	; (8102838 <HAL_DMA_Init+0x448>)
 81027d2:	4293      	cmp	r3, r2
 81027d4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 81027d6:	687b      	ldr	r3, [r7, #4]
 81027d8:	2200      	movs	r2, #0
 81027da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 81027de:	687b      	ldr	r3, [r7, #4]
 81027e0:	2202      	movs	r2, #2
 81027e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 81027e6:	687b      	ldr	r3, [r7, #4]
 81027e8:	681b      	ldr	r3, [r3, #0]
 81027ea:	681b      	ldr	r3, [r3, #0]
 81027ec:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 81027ee:	697b      	ldr	r3, [r7, #20]
 81027f0:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 81027f4:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 81027f8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81027fa:	687b      	ldr	r3, [r7, #4]
 81027fc:	689b      	ldr	r3, [r3, #8]
 81027fe:	2b40      	cmp	r3, #64	; 0x40
 8102800:	d01c      	beq.n	810283c <HAL_DMA_Init+0x44c>
 8102802:	687b      	ldr	r3, [r7, #4]
 8102804:	689b      	ldr	r3, [r3, #8]
 8102806:	2b80      	cmp	r3, #128	; 0x80
 8102808:	d102      	bne.n	8102810 <HAL_DMA_Init+0x420>
 810280a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 810280e:	e016      	b.n	810283e <HAL_DMA_Init+0x44e>
 8102810:	2300      	movs	r3, #0
 8102812:	e014      	b.n	810283e <HAL_DMA_Init+0x44e>
 8102814:	fe10803f 	.word	0xfe10803f
 8102818:	5c001000 	.word	0x5c001000
 810281c:	58025408 	.word	0x58025408
 8102820:	5802541c 	.word	0x5802541c
 8102824:	58025430 	.word	0x58025430
 8102828:	58025444 	.word	0x58025444
 810282c:	58025458 	.word	0x58025458
 8102830:	5802546c 	.word	0x5802546c
 8102834:	58025480 	.word	0x58025480
 8102838:	58025494 	.word	0x58025494
 810283c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 810283e:	687a      	ldr	r2, [r7, #4]
 8102840:	68d2      	ldr	r2, [r2, #12]
 8102842:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8102844:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8102846:	687b      	ldr	r3, [r7, #4]
 8102848:	691b      	ldr	r3, [r3, #16]
 810284a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 810284c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 810284e:	687b      	ldr	r3, [r7, #4]
 8102850:	695b      	ldr	r3, [r3, #20]
 8102852:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8102854:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8102856:	687b      	ldr	r3, [r7, #4]
 8102858:	699b      	ldr	r3, [r3, #24]
 810285a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 810285c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 810285e:	687b      	ldr	r3, [r7, #4]
 8102860:	69db      	ldr	r3, [r3, #28]
 8102862:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8102864:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8102866:	687b      	ldr	r3, [r7, #4]
 8102868:	6a1b      	ldr	r3, [r3, #32]
 810286a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 810286c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 810286e:	697a      	ldr	r2, [r7, #20]
 8102870:	4313      	orrs	r3, r2
 8102872:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8102874:	687b      	ldr	r3, [r7, #4]
 8102876:	681b      	ldr	r3, [r3, #0]
 8102878:	697a      	ldr	r2, [r7, #20]
 810287a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 810287c:	687b      	ldr	r3, [r7, #4]
 810287e:	681b      	ldr	r3, [r3, #0]
 8102880:	461a      	mov	r2, r3
 8102882:	4b6e      	ldr	r3, [pc, #440]	; (8102a3c <HAL_DMA_Init+0x64c>)
 8102884:	4413      	add	r3, r2
 8102886:	4a6e      	ldr	r2, [pc, #440]	; (8102a40 <HAL_DMA_Init+0x650>)
 8102888:	fba2 2303 	umull	r2, r3, r2, r3
 810288c:	091b      	lsrs	r3, r3, #4
 810288e:	009a      	lsls	r2, r3, #2
 8102890:	687b      	ldr	r3, [r7, #4]
 8102892:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8102894:	6878      	ldr	r0, [r7, #4]
 8102896:	f001 fe89 	bl	81045ac <DMA_CalcBaseAndBitshift>
 810289a:	4603      	mov	r3, r0
 810289c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 810289e:	687b      	ldr	r3, [r7, #4]
 81028a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81028a2:	f003 031f 	and.w	r3, r3, #31
 81028a6:	2201      	movs	r2, #1
 81028a8:	409a      	lsls	r2, r3
 81028aa:	68fb      	ldr	r3, [r7, #12]
 81028ac:	605a      	str	r2, [r3, #4]
 81028ae:	e008      	b.n	81028c2 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 81028b0:	687b      	ldr	r3, [r7, #4]
 81028b2:	2240      	movs	r2, #64	; 0x40
 81028b4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 81028b6:	687b      	ldr	r3, [r7, #4]
 81028b8:	2203      	movs	r2, #3
 81028ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 81028be:	2301      	movs	r3, #1
 81028c0:	e0b7      	b.n	8102a32 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81028c2:	687b      	ldr	r3, [r7, #4]
 81028c4:	681b      	ldr	r3, [r3, #0]
 81028c6:	4a5f      	ldr	r2, [pc, #380]	; (8102a44 <HAL_DMA_Init+0x654>)
 81028c8:	4293      	cmp	r3, r2
 81028ca:	d072      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 81028cc:	687b      	ldr	r3, [r7, #4]
 81028ce:	681b      	ldr	r3, [r3, #0]
 81028d0:	4a5d      	ldr	r2, [pc, #372]	; (8102a48 <HAL_DMA_Init+0x658>)
 81028d2:	4293      	cmp	r3, r2
 81028d4:	d06d      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 81028d6:	687b      	ldr	r3, [r7, #4]
 81028d8:	681b      	ldr	r3, [r3, #0]
 81028da:	4a5c      	ldr	r2, [pc, #368]	; (8102a4c <HAL_DMA_Init+0x65c>)
 81028dc:	4293      	cmp	r3, r2
 81028de:	d068      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 81028e0:	687b      	ldr	r3, [r7, #4]
 81028e2:	681b      	ldr	r3, [r3, #0]
 81028e4:	4a5a      	ldr	r2, [pc, #360]	; (8102a50 <HAL_DMA_Init+0x660>)
 81028e6:	4293      	cmp	r3, r2
 81028e8:	d063      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 81028ea:	687b      	ldr	r3, [r7, #4]
 81028ec:	681b      	ldr	r3, [r3, #0]
 81028ee:	4a59      	ldr	r2, [pc, #356]	; (8102a54 <HAL_DMA_Init+0x664>)
 81028f0:	4293      	cmp	r3, r2
 81028f2:	d05e      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 81028f4:	687b      	ldr	r3, [r7, #4]
 81028f6:	681b      	ldr	r3, [r3, #0]
 81028f8:	4a57      	ldr	r2, [pc, #348]	; (8102a58 <HAL_DMA_Init+0x668>)
 81028fa:	4293      	cmp	r3, r2
 81028fc:	d059      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 81028fe:	687b      	ldr	r3, [r7, #4]
 8102900:	681b      	ldr	r3, [r3, #0]
 8102902:	4a56      	ldr	r2, [pc, #344]	; (8102a5c <HAL_DMA_Init+0x66c>)
 8102904:	4293      	cmp	r3, r2
 8102906:	d054      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 8102908:	687b      	ldr	r3, [r7, #4]
 810290a:	681b      	ldr	r3, [r3, #0]
 810290c:	4a54      	ldr	r2, [pc, #336]	; (8102a60 <HAL_DMA_Init+0x670>)
 810290e:	4293      	cmp	r3, r2
 8102910:	d04f      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 8102912:	687b      	ldr	r3, [r7, #4]
 8102914:	681b      	ldr	r3, [r3, #0]
 8102916:	4a53      	ldr	r2, [pc, #332]	; (8102a64 <HAL_DMA_Init+0x674>)
 8102918:	4293      	cmp	r3, r2
 810291a:	d04a      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 810291c:	687b      	ldr	r3, [r7, #4]
 810291e:	681b      	ldr	r3, [r3, #0]
 8102920:	4a51      	ldr	r2, [pc, #324]	; (8102a68 <HAL_DMA_Init+0x678>)
 8102922:	4293      	cmp	r3, r2
 8102924:	d045      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 8102926:	687b      	ldr	r3, [r7, #4]
 8102928:	681b      	ldr	r3, [r3, #0]
 810292a:	4a50      	ldr	r2, [pc, #320]	; (8102a6c <HAL_DMA_Init+0x67c>)
 810292c:	4293      	cmp	r3, r2
 810292e:	d040      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 8102930:	687b      	ldr	r3, [r7, #4]
 8102932:	681b      	ldr	r3, [r3, #0]
 8102934:	4a4e      	ldr	r2, [pc, #312]	; (8102a70 <HAL_DMA_Init+0x680>)
 8102936:	4293      	cmp	r3, r2
 8102938:	d03b      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 810293a:	687b      	ldr	r3, [r7, #4]
 810293c:	681b      	ldr	r3, [r3, #0]
 810293e:	4a4d      	ldr	r2, [pc, #308]	; (8102a74 <HAL_DMA_Init+0x684>)
 8102940:	4293      	cmp	r3, r2
 8102942:	d036      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 8102944:	687b      	ldr	r3, [r7, #4]
 8102946:	681b      	ldr	r3, [r3, #0]
 8102948:	4a4b      	ldr	r2, [pc, #300]	; (8102a78 <HAL_DMA_Init+0x688>)
 810294a:	4293      	cmp	r3, r2
 810294c:	d031      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 810294e:	687b      	ldr	r3, [r7, #4]
 8102950:	681b      	ldr	r3, [r3, #0]
 8102952:	4a4a      	ldr	r2, [pc, #296]	; (8102a7c <HAL_DMA_Init+0x68c>)
 8102954:	4293      	cmp	r3, r2
 8102956:	d02c      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 8102958:	687b      	ldr	r3, [r7, #4]
 810295a:	681b      	ldr	r3, [r3, #0]
 810295c:	4a48      	ldr	r2, [pc, #288]	; (8102a80 <HAL_DMA_Init+0x690>)
 810295e:	4293      	cmp	r3, r2
 8102960:	d027      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 8102962:	687b      	ldr	r3, [r7, #4]
 8102964:	681b      	ldr	r3, [r3, #0]
 8102966:	4a47      	ldr	r2, [pc, #284]	; (8102a84 <HAL_DMA_Init+0x694>)
 8102968:	4293      	cmp	r3, r2
 810296a:	d022      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 810296c:	687b      	ldr	r3, [r7, #4]
 810296e:	681b      	ldr	r3, [r3, #0]
 8102970:	4a45      	ldr	r2, [pc, #276]	; (8102a88 <HAL_DMA_Init+0x698>)
 8102972:	4293      	cmp	r3, r2
 8102974:	d01d      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 8102976:	687b      	ldr	r3, [r7, #4]
 8102978:	681b      	ldr	r3, [r3, #0]
 810297a:	4a44      	ldr	r2, [pc, #272]	; (8102a8c <HAL_DMA_Init+0x69c>)
 810297c:	4293      	cmp	r3, r2
 810297e:	d018      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 8102980:	687b      	ldr	r3, [r7, #4]
 8102982:	681b      	ldr	r3, [r3, #0]
 8102984:	4a42      	ldr	r2, [pc, #264]	; (8102a90 <HAL_DMA_Init+0x6a0>)
 8102986:	4293      	cmp	r3, r2
 8102988:	d013      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 810298a:	687b      	ldr	r3, [r7, #4]
 810298c:	681b      	ldr	r3, [r3, #0]
 810298e:	4a41      	ldr	r2, [pc, #260]	; (8102a94 <HAL_DMA_Init+0x6a4>)
 8102990:	4293      	cmp	r3, r2
 8102992:	d00e      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 8102994:	687b      	ldr	r3, [r7, #4]
 8102996:	681b      	ldr	r3, [r3, #0]
 8102998:	4a3f      	ldr	r2, [pc, #252]	; (8102a98 <HAL_DMA_Init+0x6a8>)
 810299a:	4293      	cmp	r3, r2
 810299c:	d009      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 810299e:	687b      	ldr	r3, [r7, #4]
 81029a0:	681b      	ldr	r3, [r3, #0]
 81029a2:	4a3e      	ldr	r2, [pc, #248]	; (8102a9c <HAL_DMA_Init+0x6ac>)
 81029a4:	4293      	cmp	r3, r2
 81029a6:	d004      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 81029a8:	687b      	ldr	r3, [r7, #4]
 81029aa:	681b      	ldr	r3, [r3, #0]
 81029ac:	4a3c      	ldr	r2, [pc, #240]	; (8102aa0 <HAL_DMA_Init+0x6b0>)
 81029ae:	4293      	cmp	r3, r2
 81029b0:	d101      	bne.n	81029b6 <HAL_DMA_Init+0x5c6>
 81029b2:	2301      	movs	r3, #1
 81029b4:	e000      	b.n	81029b8 <HAL_DMA_Init+0x5c8>
 81029b6:	2300      	movs	r3, #0
 81029b8:	2b00      	cmp	r3, #0
 81029ba:	d032      	beq.n	8102a22 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 81029bc:	6878      	ldr	r0, [r7, #4]
 81029be:	f001 ff23 	bl	8104808 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 81029c2:	687b      	ldr	r3, [r7, #4]
 81029c4:	689b      	ldr	r3, [r3, #8]
 81029c6:	2b80      	cmp	r3, #128	; 0x80
 81029c8:	d102      	bne.n	81029d0 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 81029ca:	687b      	ldr	r3, [r7, #4]
 81029cc:	2200      	movs	r2, #0
 81029ce:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 81029d0:	687b      	ldr	r3, [r7, #4]
 81029d2:	685a      	ldr	r2, [r3, #4]
 81029d4:	687b      	ldr	r3, [r7, #4]
 81029d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81029d8:	b2d2      	uxtb	r2, r2
 81029da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81029dc:	687b      	ldr	r3, [r7, #4]
 81029de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81029e0:	687a      	ldr	r2, [r7, #4]
 81029e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 81029e4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 81029e6:	687b      	ldr	r3, [r7, #4]
 81029e8:	685b      	ldr	r3, [r3, #4]
 81029ea:	2b00      	cmp	r3, #0
 81029ec:	d010      	beq.n	8102a10 <HAL_DMA_Init+0x620>
 81029ee:	687b      	ldr	r3, [r7, #4]
 81029f0:	685b      	ldr	r3, [r3, #4]
 81029f2:	2b08      	cmp	r3, #8
 81029f4:	d80c      	bhi.n	8102a10 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 81029f6:	6878      	ldr	r0, [r7, #4]
 81029f8:	f001 ffa0 	bl	810493c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 81029fc:	687b      	ldr	r3, [r7, #4]
 81029fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102a00:	2200      	movs	r2, #0
 8102a02:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8102a04:	687b      	ldr	r3, [r7, #4]
 8102a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102a08:	687a      	ldr	r2, [r7, #4]
 8102a0a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8102a0c:	605a      	str	r2, [r3, #4]
 8102a0e:	e008      	b.n	8102a22 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8102a10:	687b      	ldr	r3, [r7, #4]
 8102a12:	2200      	movs	r2, #0
 8102a14:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8102a16:	687b      	ldr	r3, [r7, #4]
 8102a18:	2200      	movs	r2, #0
 8102a1a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8102a1c:	687b      	ldr	r3, [r7, #4]
 8102a1e:	2200      	movs	r2, #0
 8102a20:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8102a22:	687b      	ldr	r3, [r7, #4]
 8102a24:	2200      	movs	r2, #0
 8102a26:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8102a28:	687b      	ldr	r3, [r7, #4]
 8102a2a:	2201      	movs	r2, #1
 8102a2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8102a30:	2300      	movs	r3, #0
}
 8102a32:	4618      	mov	r0, r3
 8102a34:	3718      	adds	r7, #24
 8102a36:	46bd      	mov	sp, r7
 8102a38:	bd80      	pop	{r7, pc}
 8102a3a:	bf00      	nop
 8102a3c:	a7fdabf8 	.word	0xa7fdabf8
 8102a40:	cccccccd 	.word	0xcccccccd
 8102a44:	40020010 	.word	0x40020010
 8102a48:	40020028 	.word	0x40020028
 8102a4c:	40020040 	.word	0x40020040
 8102a50:	40020058 	.word	0x40020058
 8102a54:	40020070 	.word	0x40020070
 8102a58:	40020088 	.word	0x40020088
 8102a5c:	400200a0 	.word	0x400200a0
 8102a60:	400200b8 	.word	0x400200b8
 8102a64:	40020410 	.word	0x40020410
 8102a68:	40020428 	.word	0x40020428
 8102a6c:	40020440 	.word	0x40020440
 8102a70:	40020458 	.word	0x40020458
 8102a74:	40020470 	.word	0x40020470
 8102a78:	40020488 	.word	0x40020488
 8102a7c:	400204a0 	.word	0x400204a0
 8102a80:	400204b8 	.word	0x400204b8
 8102a84:	58025408 	.word	0x58025408
 8102a88:	5802541c 	.word	0x5802541c
 8102a8c:	58025430 	.word	0x58025430
 8102a90:	58025444 	.word	0x58025444
 8102a94:	58025458 	.word	0x58025458
 8102a98:	5802546c 	.word	0x5802546c
 8102a9c:	58025480 	.word	0x58025480
 8102aa0:	58025494 	.word	0x58025494

08102aa4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8102aa4:	b580      	push	{r7, lr}
 8102aa6:	b086      	sub	sp, #24
 8102aa8:	af00      	add	r7, sp, #0
 8102aaa:	60f8      	str	r0, [r7, #12]
 8102aac:	60b9      	str	r1, [r7, #8]
 8102aae:	607a      	str	r2, [r7, #4]
 8102ab0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8102ab2:	2300      	movs	r3, #0
 8102ab4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8102ab6:	68fb      	ldr	r3, [r7, #12]
 8102ab8:	2b00      	cmp	r3, #0
 8102aba:	d101      	bne.n	8102ac0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8102abc:	2301      	movs	r3, #1
 8102abe:	e226      	b.n	8102f0e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8102ac0:	68fb      	ldr	r3, [r7, #12]
 8102ac2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8102ac6:	2b01      	cmp	r3, #1
 8102ac8:	d101      	bne.n	8102ace <HAL_DMA_Start_IT+0x2a>
 8102aca:	2302      	movs	r3, #2
 8102acc:	e21f      	b.n	8102f0e <HAL_DMA_Start_IT+0x46a>
 8102ace:	68fb      	ldr	r3, [r7, #12]
 8102ad0:	2201      	movs	r2, #1
 8102ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8102ad6:	68fb      	ldr	r3, [r7, #12]
 8102ad8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8102adc:	b2db      	uxtb	r3, r3
 8102ade:	2b01      	cmp	r3, #1
 8102ae0:	f040 820a 	bne.w	8102ef8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8102ae4:	68fb      	ldr	r3, [r7, #12]
 8102ae6:	2202      	movs	r2, #2
 8102ae8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8102aec:	68fb      	ldr	r3, [r7, #12]
 8102aee:	2200      	movs	r2, #0
 8102af0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8102af2:	68fb      	ldr	r3, [r7, #12]
 8102af4:	681b      	ldr	r3, [r3, #0]
 8102af6:	4a68      	ldr	r2, [pc, #416]	; (8102c98 <HAL_DMA_Start_IT+0x1f4>)
 8102af8:	4293      	cmp	r3, r2
 8102afa:	d04a      	beq.n	8102b92 <HAL_DMA_Start_IT+0xee>
 8102afc:	68fb      	ldr	r3, [r7, #12]
 8102afe:	681b      	ldr	r3, [r3, #0]
 8102b00:	4a66      	ldr	r2, [pc, #408]	; (8102c9c <HAL_DMA_Start_IT+0x1f8>)
 8102b02:	4293      	cmp	r3, r2
 8102b04:	d045      	beq.n	8102b92 <HAL_DMA_Start_IT+0xee>
 8102b06:	68fb      	ldr	r3, [r7, #12]
 8102b08:	681b      	ldr	r3, [r3, #0]
 8102b0a:	4a65      	ldr	r2, [pc, #404]	; (8102ca0 <HAL_DMA_Start_IT+0x1fc>)
 8102b0c:	4293      	cmp	r3, r2
 8102b0e:	d040      	beq.n	8102b92 <HAL_DMA_Start_IT+0xee>
 8102b10:	68fb      	ldr	r3, [r7, #12]
 8102b12:	681b      	ldr	r3, [r3, #0]
 8102b14:	4a63      	ldr	r2, [pc, #396]	; (8102ca4 <HAL_DMA_Start_IT+0x200>)
 8102b16:	4293      	cmp	r3, r2
 8102b18:	d03b      	beq.n	8102b92 <HAL_DMA_Start_IT+0xee>
 8102b1a:	68fb      	ldr	r3, [r7, #12]
 8102b1c:	681b      	ldr	r3, [r3, #0]
 8102b1e:	4a62      	ldr	r2, [pc, #392]	; (8102ca8 <HAL_DMA_Start_IT+0x204>)
 8102b20:	4293      	cmp	r3, r2
 8102b22:	d036      	beq.n	8102b92 <HAL_DMA_Start_IT+0xee>
 8102b24:	68fb      	ldr	r3, [r7, #12]
 8102b26:	681b      	ldr	r3, [r3, #0]
 8102b28:	4a60      	ldr	r2, [pc, #384]	; (8102cac <HAL_DMA_Start_IT+0x208>)
 8102b2a:	4293      	cmp	r3, r2
 8102b2c:	d031      	beq.n	8102b92 <HAL_DMA_Start_IT+0xee>
 8102b2e:	68fb      	ldr	r3, [r7, #12]
 8102b30:	681b      	ldr	r3, [r3, #0]
 8102b32:	4a5f      	ldr	r2, [pc, #380]	; (8102cb0 <HAL_DMA_Start_IT+0x20c>)
 8102b34:	4293      	cmp	r3, r2
 8102b36:	d02c      	beq.n	8102b92 <HAL_DMA_Start_IT+0xee>
 8102b38:	68fb      	ldr	r3, [r7, #12]
 8102b3a:	681b      	ldr	r3, [r3, #0]
 8102b3c:	4a5d      	ldr	r2, [pc, #372]	; (8102cb4 <HAL_DMA_Start_IT+0x210>)
 8102b3e:	4293      	cmp	r3, r2
 8102b40:	d027      	beq.n	8102b92 <HAL_DMA_Start_IT+0xee>
 8102b42:	68fb      	ldr	r3, [r7, #12]
 8102b44:	681b      	ldr	r3, [r3, #0]
 8102b46:	4a5c      	ldr	r2, [pc, #368]	; (8102cb8 <HAL_DMA_Start_IT+0x214>)
 8102b48:	4293      	cmp	r3, r2
 8102b4a:	d022      	beq.n	8102b92 <HAL_DMA_Start_IT+0xee>
 8102b4c:	68fb      	ldr	r3, [r7, #12]
 8102b4e:	681b      	ldr	r3, [r3, #0]
 8102b50:	4a5a      	ldr	r2, [pc, #360]	; (8102cbc <HAL_DMA_Start_IT+0x218>)
 8102b52:	4293      	cmp	r3, r2
 8102b54:	d01d      	beq.n	8102b92 <HAL_DMA_Start_IT+0xee>
 8102b56:	68fb      	ldr	r3, [r7, #12]
 8102b58:	681b      	ldr	r3, [r3, #0]
 8102b5a:	4a59      	ldr	r2, [pc, #356]	; (8102cc0 <HAL_DMA_Start_IT+0x21c>)
 8102b5c:	4293      	cmp	r3, r2
 8102b5e:	d018      	beq.n	8102b92 <HAL_DMA_Start_IT+0xee>
 8102b60:	68fb      	ldr	r3, [r7, #12]
 8102b62:	681b      	ldr	r3, [r3, #0]
 8102b64:	4a57      	ldr	r2, [pc, #348]	; (8102cc4 <HAL_DMA_Start_IT+0x220>)
 8102b66:	4293      	cmp	r3, r2
 8102b68:	d013      	beq.n	8102b92 <HAL_DMA_Start_IT+0xee>
 8102b6a:	68fb      	ldr	r3, [r7, #12]
 8102b6c:	681b      	ldr	r3, [r3, #0]
 8102b6e:	4a56      	ldr	r2, [pc, #344]	; (8102cc8 <HAL_DMA_Start_IT+0x224>)
 8102b70:	4293      	cmp	r3, r2
 8102b72:	d00e      	beq.n	8102b92 <HAL_DMA_Start_IT+0xee>
 8102b74:	68fb      	ldr	r3, [r7, #12]
 8102b76:	681b      	ldr	r3, [r3, #0]
 8102b78:	4a54      	ldr	r2, [pc, #336]	; (8102ccc <HAL_DMA_Start_IT+0x228>)
 8102b7a:	4293      	cmp	r3, r2
 8102b7c:	d009      	beq.n	8102b92 <HAL_DMA_Start_IT+0xee>
 8102b7e:	68fb      	ldr	r3, [r7, #12]
 8102b80:	681b      	ldr	r3, [r3, #0]
 8102b82:	4a53      	ldr	r2, [pc, #332]	; (8102cd0 <HAL_DMA_Start_IT+0x22c>)
 8102b84:	4293      	cmp	r3, r2
 8102b86:	d004      	beq.n	8102b92 <HAL_DMA_Start_IT+0xee>
 8102b88:	68fb      	ldr	r3, [r7, #12]
 8102b8a:	681b      	ldr	r3, [r3, #0]
 8102b8c:	4a51      	ldr	r2, [pc, #324]	; (8102cd4 <HAL_DMA_Start_IT+0x230>)
 8102b8e:	4293      	cmp	r3, r2
 8102b90:	d108      	bne.n	8102ba4 <HAL_DMA_Start_IT+0x100>
 8102b92:	68fb      	ldr	r3, [r7, #12]
 8102b94:	681b      	ldr	r3, [r3, #0]
 8102b96:	681a      	ldr	r2, [r3, #0]
 8102b98:	68fb      	ldr	r3, [r7, #12]
 8102b9a:	681b      	ldr	r3, [r3, #0]
 8102b9c:	f022 0201 	bic.w	r2, r2, #1
 8102ba0:	601a      	str	r2, [r3, #0]
 8102ba2:	e007      	b.n	8102bb4 <HAL_DMA_Start_IT+0x110>
 8102ba4:	68fb      	ldr	r3, [r7, #12]
 8102ba6:	681b      	ldr	r3, [r3, #0]
 8102ba8:	681a      	ldr	r2, [r3, #0]
 8102baa:	68fb      	ldr	r3, [r7, #12]
 8102bac:	681b      	ldr	r3, [r3, #0]
 8102bae:	f022 0201 	bic.w	r2, r2, #1
 8102bb2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8102bb4:	683b      	ldr	r3, [r7, #0]
 8102bb6:	687a      	ldr	r2, [r7, #4]
 8102bb8:	68b9      	ldr	r1, [r7, #8]
 8102bba:	68f8      	ldr	r0, [r7, #12]
 8102bbc:	f001 fb4a 	bl	8104254 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102bc0:	68fb      	ldr	r3, [r7, #12]
 8102bc2:	681b      	ldr	r3, [r3, #0]
 8102bc4:	4a34      	ldr	r2, [pc, #208]	; (8102c98 <HAL_DMA_Start_IT+0x1f4>)
 8102bc6:	4293      	cmp	r3, r2
 8102bc8:	d04a      	beq.n	8102c60 <HAL_DMA_Start_IT+0x1bc>
 8102bca:	68fb      	ldr	r3, [r7, #12]
 8102bcc:	681b      	ldr	r3, [r3, #0]
 8102bce:	4a33      	ldr	r2, [pc, #204]	; (8102c9c <HAL_DMA_Start_IT+0x1f8>)
 8102bd0:	4293      	cmp	r3, r2
 8102bd2:	d045      	beq.n	8102c60 <HAL_DMA_Start_IT+0x1bc>
 8102bd4:	68fb      	ldr	r3, [r7, #12]
 8102bd6:	681b      	ldr	r3, [r3, #0]
 8102bd8:	4a31      	ldr	r2, [pc, #196]	; (8102ca0 <HAL_DMA_Start_IT+0x1fc>)
 8102bda:	4293      	cmp	r3, r2
 8102bdc:	d040      	beq.n	8102c60 <HAL_DMA_Start_IT+0x1bc>
 8102bde:	68fb      	ldr	r3, [r7, #12]
 8102be0:	681b      	ldr	r3, [r3, #0]
 8102be2:	4a30      	ldr	r2, [pc, #192]	; (8102ca4 <HAL_DMA_Start_IT+0x200>)
 8102be4:	4293      	cmp	r3, r2
 8102be6:	d03b      	beq.n	8102c60 <HAL_DMA_Start_IT+0x1bc>
 8102be8:	68fb      	ldr	r3, [r7, #12]
 8102bea:	681b      	ldr	r3, [r3, #0]
 8102bec:	4a2e      	ldr	r2, [pc, #184]	; (8102ca8 <HAL_DMA_Start_IT+0x204>)
 8102bee:	4293      	cmp	r3, r2
 8102bf0:	d036      	beq.n	8102c60 <HAL_DMA_Start_IT+0x1bc>
 8102bf2:	68fb      	ldr	r3, [r7, #12]
 8102bf4:	681b      	ldr	r3, [r3, #0]
 8102bf6:	4a2d      	ldr	r2, [pc, #180]	; (8102cac <HAL_DMA_Start_IT+0x208>)
 8102bf8:	4293      	cmp	r3, r2
 8102bfa:	d031      	beq.n	8102c60 <HAL_DMA_Start_IT+0x1bc>
 8102bfc:	68fb      	ldr	r3, [r7, #12]
 8102bfe:	681b      	ldr	r3, [r3, #0]
 8102c00:	4a2b      	ldr	r2, [pc, #172]	; (8102cb0 <HAL_DMA_Start_IT+0x20c>)
 8102c02:	4293      	cmp	r3, r2
 8102c04:	d02c      	beq.n	8102c60 <HAL_DMA_Start_IT+0x1bc>
 8102c06:	68fb      	ldr	r3, [r7, #12]
 8102c08:	681b      	ldr	r3, [r3, #0]
 8102c0a:	4a2a      	ldr	r2, [pc, #168]	; (8102cb4 <HAL_DMA_Start_IT+0x210>)
 8102c0c:	4293      	cmp	r3, r2
 8102c0e:	d027      	beq.n	8102c60 <HAL_DMA_Start_IT+0x1bc>
 8102c10:	68fb      	ldr	r3, [r7, #12]
 8102c12:	681b      	ldr	r3, [r3, #0]
 8102c14:	4a28      	ldr	r2, [pc, #160]	; (8102cb8 <HAL_DMA_Start_IT+0x214>)
 8102c16:	4293      	cmp	r3, r2
 8102c18:	d022      	beq.n	8102c60 <HAL_DMA_Start_IT+0x1bc>
 8102c1a:	68fb      	ldr	r3, [r7, #12]
 8102c1c:	681b      	ldr	r3, [r3, #0]
 8102c1e:	4a27      	ldr	r2, [pc, #156]	; (8102cbc <HAL_DMA_Start_IT+0x218>)
 8102c20:	4293      	cmp	r3, r2
 8102c22:	d01d      	beq.n	8102c60 <HAL_DMA_Start_IT+0x1bc>
 8102c24:	68fb      	ldr	r3, [r7, #12]
 8102c26:	681b      	ldr	r3, [r3, #0]
 8102c28:	4a25      	ldr	r2, [pc, #148]	; (8102cc0 <HAL_DMA_Start_IT+0x21c>)
 8102c2a:	4293      	cmp	r3, r2
 8102c2c:	d018      	beq.n	8102c60 <HAL_DMA_Start_IT+0x1bc>
 8102c2e:	68fb      	ldr	r3, [r7, #12]
 8102c30:	681b      	ldr	r3, [r3, #0]
 8102c32:	4a24      	ldr	r2, [pc, #144]	; (8102cc4 <HAL_DMA_Start_IT+0x220>)
 8102c34:	4293      	cmp	r3, r2
 8102c36:	d013      	beq.n	8102c60 <HAL_DMA_Start_IT+0x1bc>
 8102c38:	68fb      	ldr	r3, [r7, #12]
 8102c3a:	681b      	ldr	r3, [r3, #0]
 8102c3c:	4a22      	ldr	r2, [pc, #136]	; (8102cc8 <HAL_DMA_Start_IT+0x224>)
 8102c3e:	4293      	cmp	r3, r2
 8102c40:	d00e      	beq.n	8102c60 <HAL_DMA_Start_IT+0x1bc>
 8102c42:	68fb      	ldr	r3, [r7, #12]
 8102c44:	681b      	ldr	r3, [r3, #0]
 8102c46:	4a21      	ldr	r2, [pc, #132]	; (8102ccc <HAL_DMA_Start_IT+0x228>)
 8102c48:	4293      	cmp	r3, r2
 8102c4a:	d009      	beq.n	8102c60 <HAL_DMA_Start_IT+0x1bc>
 8102c4c:	68fb      	ldr	r3, [r7, #12]
 8102c4e:	681b      	ldr	r3, [r3, #0]
 8102c50:	4a1f      	ldr	r2, [pc, #124]	; (8102cd0 <HAL_DMA_Start_IT+0x22c>)
 8102c52:	4293      	cmp	r3, r2
 8102c54:	d004      	beq.n	8102c60 <HAL_DMA_Start_IT+0x1bc>
 8102c56:	68fb      	ldr	r3, [r7, #12]
 8102c58:	681b      	ldr	r3, [r3, #0]
 8102c5a:	4a1e      	ldr	r2, [pc, #120]	; (8102cd4 <HAL_DMA_Start_IT+0x230>)
 8102c5c:	4293      	cmp	r3, r2
 8102c5e:	d101      	bne.n	8102c64 <HAL_DMA_Start_IT+0x1c0>
 8102c60:	2301      	movs	r3, #1
 8102c62:	e000      	b.n	8102c66 <HAL_DMA_Start_IT+0x1c2>
 8102c64:	2300      	movs	r3, #0
 8102c66:	2b00      	cmp	r3, #0
 8102c68:	d036      	beq.n	8102cd8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8102c6a:	68fb      	ldr	r3, [r7, #12]
 8102c6c:	681b      	ldr	r3, [r3, #0]
 8102c6e:	681b      	ldr	r3, [r3, #0]
 8102c70:	f023 021e 	bic.w	r2, r3, #30
 8102c74:	68fb      	ldr	r3, [r7, #12]
 8102c76:	681b      	ldr	r3, [r3, #0]
 8102c78:	f042 0216 	orr.w	r2, r2, #22
 8102c7c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8102c7e:	68fb      	ldr	r3, [r7, #12]
 8102c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102c82:	2b00      	cmp	r3, #0
 8102c84:	d03e      	beq.n	8102d04 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8102c86:	68fb      	ldr	r3, [r7, #12]
 8102c88:	681b      	ldr	r3, [r3, #0]
 8102c8a:	681a      	ldr	r2, [r3, #0]
 8102c8c:	68fb      	ldr	r3, [r7, #12]
 8102c8e:	681b      	ldr	r3, [r3, #0]
 8102c90:	f042 0208 	orr.w	r2, r2, #8
 8102c94:	601a      	str	r2, [r3, #0]
 8102c96:	e035      	b.n	8102d04 <HAL_DMA_Start_IT+0x260>
 8102c98:	40020010 	.word	0x40020010
 8102c9c:	40020028 	.word	0x40020028
 8102ca0:	40020040 	.word	0x40020040
 8102ca4:	40020058 	.word	0x40020058
 8102ca8:	40020070 	.word	0x40020070
 8102cac:	40020088 	.word	0x40020088
 8102cb0:	400200a0 	.word	0x400200a0
 8102cb4:	400200b8 	.word	0x400200b8
 8102cb8:	40020410 	.word	0x40020410
 8102cbc:	40020428 	.word	0x40020428
 8102cc0:	40020440 	.word	0x40020440
 8102cc4:	40020458 	.word	0x40020458
 8102cc8:	40020470 	.word	0x40020470
 8102ccc:	40020488 	.word	0x40020488
 8102cd0:	400204a0 	.word	0x400204a0
 8102cd4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8102cd8:	68fb      	ldr	r3, [r7, #12]
 8102cda:	681b      	ldr	r3, [r3, #0]
 8102cdc:	681b      	ldr	r3, [r3, #0]
 8102cde:	f023 020e 	bic.w	r2, r3, #14
 8102ce2:	68fb      	ldr	r3, [r7, #12]
 8102ce4:	681b      	ldr	r3, [r3, #0]
 8102ce6:	f042 020a 	orr.w	r2, r2, #10
 8102cea:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8102cec:	68fb      	ldr	r3, [r7, #12]
 8102cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102cf0:	2b00      	cmp	r3, #0
 8102cf2:	d007      	beq.n	8102d04 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8102cf4:	68fb      	ldr	r3, [r7, #12]
 8102cf6:	681b      	ldr	r3, [r3, #0]
 8102cf8:	681a      	ldr	r2, [r3, #0]
 8102cfa:	68fb      	ldr	r3, [r7, #12]
 8102cfc:	681b      	ldr	r3, [r3, #0]
 8102cfe:	f042 0204 	orr.w	r2, r2, #4
 8102d02:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102d04:	68fb      	ldr	r3, [r7, #12]
 8102d06:	681b      	ldr	r3, [r3, #0]
 8102d08:	4a83      	ldr	r2, [pc, #524]	; (8102f18 <HAL_DMA_Start_IT+0x474>)
 8102d0a:	4293      	cmp	r3, r2
 8102d0c:	d072      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102d0e:	68fb      	ldr	r3, [r7, #12]
 8102d10:	681b      	ldr	r3, [r3, #0]
 8102d12:	4a82      	ldr	r2, [pc, #520]	; (8102f1c <HAL_DMA_Start_IT+0x478>)
 8102d14:	4293      	cmp	r3, r2
 8102d16:	d06d      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102d18:	68fb      	ldr	r3, [r7, #12]
 8102d1a:	681b      	ldr	r3, [r3, #0]
 8102d1c:	4a80      	ldr	r2, [pc, #512]	; (8102f20 <HAL_DMA_Start_IT+0x47c>)
 8102d1e:	4293      	cmp	r3, r2
 8102d20:	d068      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102d22:	68fb      	ldr	r3, [r7, #12]
 8102d24:	681b      	ldr	r3, [r3, #0]
 8102d26:	4a7f      	ldr	r2, [pc, #508]	; (8102f24 <HAL_DMA_Start_IT+0x480>)
 8102d28:	4293      	cmp	r3, r2
 8102d2a:	d063      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102d2c:	68fb      	ldr	r3, [r7, #12]
 8102d2e:	681b      	ldr	r3, [r3, #0]
 8102d30:	4a7d      	ldr	r2, [pc, #500]	; (8102f28 <HAL_DMA_Start_IT+0x484>)
 8102d32:	4293      	cmp	r3, r2
 8102d34:	d05e      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102d36:	68fb      	ldr	r3, [r7, #12]
 8102d38:	681b      	ldr	r3, [r3, #0]
 8102d3a:	4a7c      	ldr	r2, [pc, #496]	; (8102f2c <HAL_DMA_Start_IT+0x488>)
 8102d3c:	4293      	cmp	r3, r2
 8102d3e:	d059      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102d40:	68fb      	ldr	r3, [r7, #12]
 8102d42:	681b      	ldr	r3, [r3, #0]
 8102d44:	4a7a      	ldr	r2, [pc, #488]	; (8102f30 <HAL_DMA_Start_IT+0x48c>)
 8102d46:	4293      	cmp	r3, r2
 8102d48:	d054      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102d4a:	68fb      	ldr	r3, [r7, #12]
 8102d4c:	681b      	ldr	r3, [r3, #0]
 8102d4e:	4a79      	ldr	r2, [pc, #484]	; (8102f34 <HAL_DMA_Start_IT+0x490>)
 8102d50:	4293      	cmp	r3, r2
 8102d52:	d04f      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102d54:	68fb      	ldr	r3, [r7, #12]
 8102d56:	681b      	ldr	r3, [r3, #0]
 8102d58:	4a77      	ldr	r2, [pc, #476]	; (8102f38 <HAL_DMA_Start_IT+0x494>)
 8102d5a:	4293      	cmp	r3, r2
 8102d5c:	d04a      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102d5e:	68fb      	ldr	r3, [r7, #12]
 8102d60:	681b      	ldr	r3, [r3, #0]
 8102d62:	4a76      	ldr	r2, [pc, #472]	; (8102f3c <HAL_DMA_Start_IT+0x498>)
 8102d64:	4293      	cmp	r3, r2
 8102d66:	d045      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102d68:	68fb      	ldr	r3, [r7, #12]
 8102d6a:	681b      	ldr	r3, [r3, #0]
 8102d6c:	4a74      	ldr	r2, [pc, #464]	; (8102f40 <HAL_DMA_Start_IT+0x49c>)
 8102d6e:	4293      	cmp	r3, r2
 8102d70:	d040      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102d72:	68fb      	ldr	r3, [r7, #12]
 8102d74:	681b      	ldr	r3, [r3, #0]
 8102d76:	4a73      	ldr	r2, [pc, #460]	; (8102f44 <HAL_DMA_Start_IT+0x4a0>)
 8102d78:	4293      	cmp	r3, r2
 8102d7a:	d03b      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102d7c:	68fb      	ldr	r3, [r7, #12]
 8102d7e:	681b      	ldr	r3, [r3, #0]
 8102d80:	4a71      	ldr	r2, [pc, #452]	; (8102f48 <HAL_DMA_Start_IT+0x4a4>)
 8102d82:	4293      	cmp	r3, r2
 8102d84:	d036      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102d86:	68fb      	ldr	r3, [r7, #12]
 8102d88:	681b      	ldr	r3, [r3, #0]
 8102d8a:	4a70      	ldr	r2, [pc, #448]	; (8102f4c <HAL_DMA_Start_IT+0x4a8>)
 8102d8c:	4293      	cmp	r3, r2
 8102d8e:	d031      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102d90:	68fb      	ldr	r3, [r7, #12]
 8102d92:	681b      	ldr	r3, [r3, #0]
 8102d94:	4a6e      	ldr	r2, [pc, #440]	; (8102f50 <HAL_DMA_Start_IT+0x4ac>)
 8102d96:	4293      	cmp	r3, r2
 8102d98:	d02c      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102d9a:	68fb      	ldr	r3, [r7, #12]
 8102d9c:	681b      	ldr	r3, [r3, #0]
 8102d9e:	4a6d      	ldr	r2, [pc, #436]	; (8102f54 <HAL_DMA_Start_IT+0x4b0>)
 8102da0:	4293      	cmp	r3, r2
 8102da2:	d027      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102da4:	68fb      	ldr	r3, [r7, #12]
 8102da6:	681b      	ldr	r3, [r3, #0]
 8102da8:	4a6b      	ldr	r2, [pc, #428]	; (8102f58 <HAL_DMA_Start_IT+0x4b4>)
 8102daa:	4293      	cmp	r3, r2
 8102dac:	d022      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102dae:	68fb      	ldr	r3, [r7, #12]
 8102db0:	681b      	ldr	r3, [r3, #0]
 8102db2:	4a6a      	ldr	r2, [pc, #424]	; (8102f5c <HAL_DMA_Start_IT+0x4b8>)
 8102db4:	4293      	cmp	r3, r2
 8102db6:	d01d      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102db8:	68fb      	ldr	r3, [r7, #12]
 8102dba:	681b      	ldr	r3, [r3, #0]
 8102dbc:	4a68      	ldr	r2, [pc, #416]	; (8102f60 <HAL_DMA_Start_IT+0x4bc>)
 8102dbe:	4293      	cmp	r3, r2
 8102dc0:	d018      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102dc2:	68fb      	ldr	r3, [r7, #12]
 8102dc4:	681b      	ldr	r3, [r3, #0]
 8102dc6:	4a67      	ldr	r2, [pc, #412]	; (8102f64 <HAL_DMA_Start_IT+0x4c0>)
 8102dc8:	4293      	cmp	r3, r2
 8102dca:	d013      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102dcc:	68fb      	ldr	r3, [r7, #12]
 8102dce:	681b      	ldr	r3, [r3, #0]
 8102dd0:	4a65      	ldr	r2, [pc, #404]	; (8102f68 <HAL_DMA_Start_IT+0x4c4>)
 8102dd2:	4293      	cmp	r3, r2
 8102dd4:	d00e      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102dd6:	68fb      	ldr	r3, [r7, #12]
 8102dd8:	681b      	ldr	r3, [r3, #0]
 8102dda:	4a64      	ldr	r2, [pc, #400]	; (8102f6c <HAL_DMA_Start_IT+0x4c8>)
 8102ddc:	4293      	cmp	r3, r2
 8102dde:	d009      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102de0:	68fb      	ldr	r3, [r7, #12]
 8102de2:	681b      	ldr	r3, [r3, #0]
 8102de4:	4a62      	ldr	r2, [pc, #392]	; (8102f70 <HAL_DMA_Start_IT+0x4cc>)
 8102de6:	4293      	cmp	r3, r2
 8102de8:	d004      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102dea:	68fb      	ldr	r3, [r7, #12]
 8102dec:	681b      	ldr	r3, [r3, #0]
 8102dee:	4a61      	ldr	r2, [pc, #388]	; (8102f74 <HAL_DMA_Start_IT+0x4d0>)
 8102df0:	4293      	cmp	r3, r2
 8102df2:	d101      	bne.n	8102df8 <HAL_DMA_Start_IT+0x354>
 8102df4:	2301      	movs	r3, #1
 8102df6:	e000      	b.n	8102dfa <HAL_DMA_Start_IT+0x356>
 8102df8:	2300      	movs	r3, #0
 8102dfa:	2b00      	cmp	r3, #0
 8102dfc:	d01a      	beq.n	8102e34 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8102dfe:	68fb      	ldr	r3, [r7, #12]
 8102e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102e02:	681b      	ldr	r3, [r3, #0]
 8102e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102e08:	2b00      	cmp	r3, #0
 8102e0a:	d007      	beq.n	8102e1c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8102e0c:	68fb      	ldr	r3, [r7, #12]
 8102e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102e10:	681a      	ldr	r2, [r3, #0]
 8102e12:	68fb      	ldr	r3, [r7, #12]
 8102e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102e16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102e1a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8102e1c:	68fb      	ldr	r3, [r7, #12]
 8102e1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102e20:	2b00      	cmp	r3, #0
 8102e22:	d007      	beq.n	8102e34 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8102e24:	68fb      	ldr	r3, [r7, #12]
 8102e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102e28:	681a      	ldr	r2, [r3, #0]
 8102e2a:	68fb      	ldr	r3, [r7, #12]
 8102e2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102e2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102e32:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8102e34:	68fb      	ldr	r3, [r7, #12]
 8102e36:	681b      	ldr	r3, [r3, #0]
 8102e38:	4a37      	ldr	r2, [pc, #220]	; (8102f18 <HAL_DMA_Start_IT+0x474>)
 8102e3a:	4293      	cmp	r3, r2
 8102e3c:	d04a      	beq.n	8102ed4 <HAL_DMA_Start_IT+0x430>
 8102e3e:	68fb      	ldr	r3, [r7, #12]
 8102e40:	681b      	ldr	r3, [r3, #0]
 8102e42:	4a36      	ldr	r2, [pc, #216]	; (8102f1c <HAL_DMA_Start_IT+0x478>)
 8102e44:	4293      	cmp	r3, r2
 8102e46:	d045      	beq.n	8102ed4 <HAL_DMA_Start_IT+0x430>
 8102e48:	68fb      	ldr	r3, [r7, #12]
 8102e4a:	681b      	ldr	r3, [r3, #0]
 8102e4c:	4a34      	ldr	r2, [pc, #208]	; (8102f20 <HAL_DMA_Start_IT+0x47c>)
 8102e4e:	4293      	cmp	r3, r2
 8102e50:	d040      	beq.n	8102ed4 <HAL_DMA_Start_IT+0x430>
 8102e52:	68fb      	ldr	r3, [r7, #12]
 8102e54:	681b      	ldr	r3, [r3, #0]
 8102e56:	4a33      	ldr	r2, [pc, #204]	; (8102f24 <HAL_DMA_Start_IT+0x480>)
 8102e58:	4293      	cmp	r3, r2
 8102e5a:	d03b      	beq.n	8102ed4 <HAL_DMA_Start_IT+0x430>
 8102e5c:	68fb      	ldr	r3, [r7, #12]
 8102e5e:	681b      	ldr	r3, [r3, #0]
 8102e60:	4a31      	ldr	r2, [pc, #196]	; (8102f28 <HAL_DMA_Start_IT+0x484>)
 8102e62:	4293      	cmp	r3, r2
 8102e64:	d036      	beq.n	8102ed4 <HAL_DMA_Start_IT+0x430>
 8102e66:	68fb      	ldr	r3, [r7, #12]
 8102e68:	681b      	ldr	r3, [r3, #0]
 8102e6a:	4a30      	ldr	r2, [pc, #192]	; (8102f2c <HAL_DMA_Start_IT+0x488>)
 8102e6c:	4293      	cmp	r3, r2
 8102e6e:	d031      	beq.n	8102ed4 <HAL_DMA_Start_IT+0x430>
 8102e70:	68fb      	ldr	r3, [r7, #12]
 8102e72:	681b      	ldr	r3, [r3, #0]
 8102e74:	4a2e      	ldr	r2, [pc, #184]	; (8102f30 <HAL_DMA_Start_IT+0x48c>)
 8102e76:	4293      	cmp	r3, r2
 8102e78:	d02c      	beq.n	8102ed4 <HAL_DMA_Start_IT+0x430>
 8102e7a:	68fb      	ldr	r3, [r7, #12]
 8102e7c:	681b      	ldr	r3, [r3, #0]
 8102e7e:	4a2d      	ldr	r2, [pc, #180]	; (8102f34 <HAL_DMA_Start_IT+0x490>)
 8102e80:	4293      	cmp	r3, r2
 8102e82:	d027      	beq.n	8102ed4 <HAL_DMA_Start_IT+0x430>
 8102e84:	68fb      	ldr	r3, [r7, #12]
 8102e86:	681b      	ldr	r3, [r3, #0]
 8102e88:	4a2b      	ldr	r2, [pc, #172]	; (8102f38 <HAL_DMA_Start_IT+0x494>)
 8102e8a:	4293      	cmp	r3, r2
 8102e8c:	d022      	beq.n	8102ed4 <HAL_DMA_Start_IT+0x430>
 8102e8e:	68fb      	ldr	r3, [r7, #12]
 8102e90:	681b      	ldr	r3, [r3, #0]
 8102e92:	4a2a      	ldr	r2, [pc, #168]	; (8102f3c <HAL_DMA_Start_IT+0x498>)
 8102e94:	4293      	cmp	r3, r2
 8102e96:	d01d      	beq.n	8102ed4 <HAL_DMA_Start_IT+0x430>
 8102e98:	68fb      	ldr	r3, [r7, #12]
 8102e9a:	681b      	ldr	r3, [r3, #0]
 8102e9c:	4a28      	ldr	r2, [pc, #160]	; (8102f40 <HAL_DMA_Start_IT+0x49c>)
 8102e9e:	4293      	cmp	r3, r2
 8102ea0:	d018      	beq.n	8102ed4 <HAL_DMA_Start_IT+0x430>
 8102ea2:	68fb      	ldr	r3, [r7, #12]
 8102ea4:	681b      	ldr	r3, [r3, #0]
 8102ea6:	4a27      	ldr	r2, [pc, #156]	; (8102f44 <HAL_DMA_Start_IT+0x4a0>)
 8102ea8:	4293      	cmp	r3, r2
 8102eaa:	d013      	beq.n	8102ed4 <HAL_DMA_Start_IT+0x430>
 8102eac:	68fb      	ldr	r3, [r7, #12]
 8102eae:	681b      	ldr	r3, [r3, #0]
 8102eb0:	4a25      	ldr	r2, [pc, #148]	; (8102f48 <HAL_DMA_Start_IT+0x4a4>)
 8102eb2:	4293      	cmp	r3, r2
 8102eb4:	d00e      	beq.n	8102ed4 <HAL_DMA_Start_IT+0x430>
 8102eb6:	68fb      	ldr	r3, [r7, #12]
 8102eb8:	681b      	ldr	r3, [r3, #0]
 8102eba:	4a24      	ldr	r2, [pc, #144]	; (8102f4c <HAL_DMA_Start_IT+0x4a8>)
 8102ebc:	4293      	cmp	r3, r2
 8102ebe:	d009      	beq.n	8102ed4 <HAL_DMA_Start_IT+0x430>
 8102ec0:	68fb      	ldr	r3, [r7, #12]
 8102ec2:	681b      	ldr	r3, [r3, #0]
 8102ec4:	4a22      	ldr	r2, [pc, #136]	; (8102f50 <HAL_DMA_Start_IT+0x4ac>)
 8102ec6:	4293      	cmp	r3, r2
 8102ec8:	d004      	beq.n	8102ed4 <HAL_DMA_Start_IT+0x430>
 8102eca:	68fb      	ldr	r3, [r7, #12]
 8102ecc:	681b      	ldr	r3, [r3, #0]
 8102ece:	4a21      	ldr	r2, [pc, #132]	; (8102f54 <HAL_DMA_Start_IT+0x4b0>)
 8102ed0:	4293      	cmp	r3, r2
 8102ed2:	d108      	bne.n	8102ee6 <HAL_DMA_Start_IT+0x442>
 8102ed4:	68fb      	ldr	r3, [r7, #12]
 8102ed6:	681b      	ldr	r3, [r3, #0]
 8102ed8:	681a      	ldr	r2, [r3, #0]
 8102eda:	68fb      	ldr	r3, [r7, #12]
 8102edc:	681b      	ldr	r3, [r3, #0]
 8102ede:	f042 0201 	orr.w	r2, r2, #1
 8102ee2:	601a      	str	r2, [r3, #0]
 8102ee4:	e012      	b.n	8102f0c <HAL_DMA_Start_IT+0x468>
 8102ee6:	68fb      	ldr	r3, [r7, #12]
 8102ee8:	681b      	ldr	r3, [r3, #0]
 8102eea:	681a      	ldr	r2, [r3, #0]
 8102eec:	68fb      	ldr	r3, [r7, #12]
 8102eee:	681b      	ldr	r3, [r3, #0]
 8102ef0:	f042 0201 	orr.w	r2, r2, #1
 8102ef4:	601a      	str	r2, [r3, #0]
 8102ef6:	e009      	b.n	8102f0c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8102ef8:	68fb      	ldr	r3, [r7, #12]
 8102efa:	2200      	movs	r2, #0
 8102efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8102f00:	68fb      	ldr	r3, [r7, #12]
 8102f02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8102f06:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8102f08:	2301      	movs	r3, #1
 8102f0a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8102f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8102f0e:	4618      	mov	r0, r3
 8102f10:	3718      	adds	r7, #24
 8102f12:	46bd      	mov	sp, r7
 8102f14:	bd80      	pop	{r7, pc}
 8102f16:	bf00      	nop
 8102f18:	40020010 	.word	0x40020010
 8102f1c:	40020028 	.word	0x40020028
 8102f20:	40020040 	.word	0x40020040
 8102f24:	40020058 	.word	0x40020058
 8102f28:	40020070 	.word	0x40020070
 8102f2c:	40020088 	.word	0x40020088
 8102f30:	400200a0 	.word	0x400200a0
 8102f34:	400200b8 	.word	0x400200b8
 8102f38:	40020410 	.word	0x40020410
 8102f3c:	40020428 	.word	0x40020428
 8102f40:	40020440 	.word	0x40020440
 8102f44:	40020458 	.word	0x40020458
 8102f48:	40020470 	.word	0x40020470
 8102f4c:	40020488 	.word	0x40020488
 8102f50:	400204a0 	.word	0x400204a0
 8102f54:	400204b8 	.word	0x400204b8
 8102f58:	58025408 	.word	0x58025408
 8102f5c:	5802541c 	.word	0x5802541c
 8102f60:	58025430 	.word	0x58025430
 8102f64:	58025444 	.word	0x58025444
 8102f68:	58025458 	.word	0x58025458
 8102f6c:	5802546c 	.word	0x5802546c
 8102f70:	58025480 	.word	0x58025480
 8102f74:	58025494 	.word	0x58025494

08102f78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8102f78:	b580      	push	{r7, lr}
 8102f7a:	b084      	sub	sp, #16
 8102f7c:	af00      	add	r7, sp, #0
 8102f7e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8102f80:	687b      	ldr	r3, [r7, #4]
 8102f82:	2b00      	cmp	r3, #0
 8102f84:	d101      	bne.n	8102f8a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8102f86:	2301      	movs	r3, #1
 8102f88:	e205      	b.n	8103396 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8102f8a:	687b      	ldr	r3, [r7, #4]
 8102f8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8102f90:	b2db      	uxtb	r3, r3
 8102f92:	2b02      	cmp	r3, #2
 8102f94:	d004      	beq.n	8102fa0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8102f96:	687b      	ldr	r3, [r7, #4]
 8102f98:	2280      	movs	r2, #128	; 0x80
 8102f9a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8102f9c:	2301      	movs	r3, #1
 8102f9e:	e1fa      	b.n	8103396 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102fa0:	687b      	ldr	r3, [r7, #4]
 8102fa2:	681b      	ldr	r3, [r3, #0]
 8102fa4:	4a8c      	ldr	r2, [pc, #560]	; (81031d8 <HAL_DMA_Abort_IT+0x260>)
 8102fa6:	4293      	cmp	r3, r2
 8102fa8:	d04a      	beq.n	8103040 <HAL_DMA_Abort_IT+0xc8>
 8102faa:	687b      	ldr	r3, [r7, #4]
 8102fac:	681b      	ldr	r3, [r3, #0]
 8102fae:	4a8b      	ldr	r2, [pc, #556]	; (81031dc <HAL_DMA_Abort_IT+0x264>)
 8102fb0:	4293      	cmp	r3, r2
 8102fb2:	d045      	beq.n	8103040 <HAL_DMA_Abort_IT+0xc8>
 8102fb4:	687b      	ldr	r3, [r7, #4]
 8102fb6:	681b      	ldr	r3, [r3, #0]
 8102fb8:	4a89      	ldr	r2, [pc, #548]	; (81031e0 <HAL_DMA_Abort_IT+0x268>)
 8102fba:	4293      	cmp	r3, r2
 8102fbc:	d040      	beq.n	8103040 <HAL_DMA_Abort_IT+0xc8>
 8102fbe:	687b      	ldr	r3, [r7, #4]
 8102fc0:	681b      	ldr	r3, [r3, #0]
 8102fc2:	4a88      	ldr	r2, [pc, #544]	; (81031e4 <HAL_DMA_Abort_IT+0x26c>)
 8102fc4:	4293      	cmp	r3, r2
 8102fc6:	d03b      	beq.n	8103040 <HAL_DMA_Abort_IT+0xc8>
 8102fc8:	687b      	ldr	r3, [r7, #4]
 8102fca:	681b      	ldr	r3, [r3, #0]
 8102fcc:	4a86      	ldr	r2, [pc, #536]	; (81031e8 <HAL_DMA_Abort_IT+0x270>)
 8102fce:	4293      	cmp	r3, r2
 8102fd0:	d036      	beq.n	8103040 <HAL_DMA_Abort_IT+0xc8>
 8102fd2:	687b      	ldr	r3, [r7, #4]
 8102fd4:	681b      	ldr	r3, [r3, #0]
 8102fd6:	4a85      	ldr	r2, [pc, #532]	; (81031ec <HAL_DMA_Abort_IT+0x274>)
 8102fd8:	4293      	cmp	r3, r2
 8102fda:	d031      	beq.n	8103040 <HAL_DMA_Abort_IT+0xc8>
 8102fdc:	687b      	ldr	r3, [r7, #4]
 8102fde:	681b      	ldr	r3, [r3, #0]
 8102fe0:	4a83      	ldr	r2, [pc, #524]	; (81031f0 <HAL_DMA_Abort_IT+0x278>)
 8102fe2:	4293      	cmp	r3, r2
 8102fe4:	d02c      	beq.n	8103040 <HAL_DMA_Abort_IT+0xc8>
 8102fe6:	687b      	ldr	r3, [r7, #4]
 8102fe8:	681b      	ldr	r3, [r3, #0]
 8102fea:	4a82      	ldr	r2, [pc, #520]	; (81031f4 <HAL_DMA_Abort_IT+0x27c>)
 8102fec:	4293      	cmp	r3, r2
 8102fee:	d027      	beq.n	8103040 <HAL_DMA_Abort_IT+0xc8>
 8102ff0:	687b      	ldr	r3, [r7, #4]
 8102ff2:	681b      	ldr	r3, [r3, #0]
 8102ff4:	4a80      	ldr	r2, [pc, #512]	; (81031f8 <HAL_DMA_Abort_IT+0x280>)
 8102ff6:	4293      	cmp	r3, r2
 8102ff8:	d022      	beq.n	8103040 <HAL_DMA_Abort_IT+0xc8>
 8102ffa:	687b      	ldr	r3, [r7, #4]
 8102ffc:	681b      	ldr	r3, [r3, #0]
 8102ffe:	4a7f      	ldr	r2, [pc, #508]	; (81031fc <HAL_DMA_Abort_IT+0x284>)
 8103000:	4293      	cmp	r3, r2
 8103002:	d01d      	beq.n	8103040 <HAL_DMA_Abort_IT+0xc8>
 8103004:	687b      	ldr	r3, [r7, #4]
 8103006:	681b      	ldr	r3, [r3, #0]
 8103008:	4a7d      	ldr	r2, [pc, #500]	; (8103200 <HAL_DMA_Abort_IT+0x288>)
 810300a:	4293      	cmp	r3, r2
 810300c:	d018      	beq.n	8103040 <HAL_DMA_Abort_IT+0xc8>
 810300e:	687b      	ldr	r3, [r7, #4]
 8103010:	681b      	ldr	r3, [r3, #0]
 8103012:	4a7c      	ldr	r2, [pc, #496]	; (8103204 <HAL_DMA_Abort_IT+0x28c>)
 8103014:	4293      	cmp	r3, r2
 8103016:	d013      	beq.n	8103040 <HAL_DMA_Abort_IT+0xc8>
 8103018:	687b      	ldr	r3, [r7, #4]
 810301a:	681b      	ldr	r3, [r3, #0]
 810301c:	4a7a      	ldr	r2, [pc, #488]	; (8103208 <HAL_DMA_Abort_IT+0x290>)
 810301e:	4293      	cmp	r3, r2
 8103020:	d00e      	beq.n	8103040 <HAL_DMA_Abort_IT+0xc8>
 8103022:	687b      	ldr	r3, [r7, #4]
 8103024:	681b      	ldr	r3, [r3, #0]
 8103026:	4a79      	ldr	r2, [pc, #484]	; (810320c <HAL_DMA_Abort_IT+0x294>)
 8103028:	4293      	cmp	r3, r2
 810302a:	d009      	beq.n	8103040 <HAL_DMA_Abort_IT+0xc8>
 810302c:	687b      	ldr	r3, [r7, #4]
 810302e:	681b      	ldr	r3, [r3, #0]
 8103030:	4a77      	ldr	r2, [pc, #476]	; (8103210 <HAL_DMA_Abort_IT+0x298>)
 8103032:	4293      	cmp	r3, r2
 8103034:	d004      	beq.n	8103040 <HAL_DMA_Abort_IT+0xc8>
 8103036:	687b      	ldr	r3, [r7, #4]
 8103038:	681b      	ldr	r3, [r3, #0]
 810303a:	4a76      	ldr	r2, [pc, #472]	; (8103214 <HAL_DMA_Abort_IT+0x29c>)
 810303c:	4293      	cmp	r3, r2
 810303e:	d101      	bne.n	8103044 <HAL_DMA_Abort_IT+0xcc>
 8103040:	2301      	movs	r3, #1
 8103042:	e000      	b.n	8103046 <HAL_DMA_Abort_IT+0xce>
 8103044:	2300      	movs	r3, #0
 8103046:	2b00      	cmp	r3, #0
 8103048:	d065      	beq.n	8103116 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 810304a:	687b      	ldr	r3, [r7, #4]
 810304c:	2204      	movs	r2, #4
 810304e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8103052:	687b      	ldr	r3, [r7, #4]
 8103054:	681b      	ldr	r3, [r3, #0]
 8103056:	4a60      	ldr	r2, [pc, #384]	; (81031d8 <HAL_DMA_Abort_IT+0x260>)
 8103058:	4293      	cmp	r3, r2
 810305a:	d04a      	beq.n	81030f2 <HAL_DMA_Abort_IT+0x17a>
 810305c:	687b      	ldr	r3, [r7, #4]
 810305e:	681b      	ldr	r3, [r3, #0]
 8103060:	4a5e      	ldr	r2, [pc, #376]	; (81031dc <HAL_DMA_Abort_IT+0x264>)
 8103062:	4293      	cmp	r3, r2
 8103064:	d045      	beq.n	81030f2 <HAL_DMA_Abort_IT+0x17a>
 8103066:	687b      	ldr	r3, [r7, #4]
 8103068:	681b      	ldr	r3, [r3, #0]
 810306a:	4a5d      	ldr	r2, [pc, #372]	; (81031e0 <HAL_DMA_Abort_IT+0x268>)
 810306c:	4293      	cmp	r3, r2
 810306e:	d040      	beq.n	81030f2 <HAL_DMA_Abort_IT+0x17a>
 8103070:	687b      	ldr	r3, [r7, #4]
 8103072:	681b      	ldr	r3, [r3, #0]
 8103074:	4a5b      	ldr	r2, [pc, #364]	; (81031e4 <HAL_DMA_Abort_IT+0x26c>)
 8103076:	4293      	cmp	r3, r2
 8103078:	d03b      	beq.n	81030f2 <HAL_DMA_Abort_IT+0x17a>
 810307a:	687b      	ldr	r3, [r7, #4]
 810307c:	681b      	ldr	r3, [r3, #0]
 810307e:	4a5a      	ldr	r2, [pc, #360]	; (81031e8 <HAL_DMA_Abort_IT+0x270>)
 8103080:	4293      	cmp	r3, r2
 8103082:	d036      	beq.n	81030f2 <HAL_DMA_Abort_IT+0x17a>
 8103084:	687b      	ldr	r3, [r7, #4]
 8103086:	681b      	ldr	r3, [r3, #0]
 8103088:	4a58      	ldr	r2, [pc, #352]	; (81031ec <HAL_DMA_Abort_IT+0x274>)
 810308a:	4293      	cmp	r3, r2
 810308c:	d031      	beq.n	81030f2 <HAL_DMA_Abort_IT+0x17a>
 810308e:	687b      	ldr	r3, [r7, #4]
 8103090:	681b      	ldr	r3, [r3, #0]
 8103092:	4a57      	ldr	r2, [pc, #348]	; (81031f0 <HAL_DMA_Abort_IT+0x278>)
 8103094:	4293      	cmp	r3, r2
 8103096:	d02c      	beq.n	81030f2 <HAL_DMA_Abort_IT+0x17a>
 8103098:	687b      	ldr	r3, [r7, #4]
 810309a:	681b      	ldr	r3, [r3, #0]
 810309c:	4a55      	ldr	r2, [pc, #340]	; (81031f4 <HAL_DMA_Abort_IT+0x27c>)
 810309e:	4293      	cmp	r3, r2
 81030a0:	d027      	beq.n	81030f2 <HAL_DMA_Abort_IT+0x17a>
 81030a2:	687b      	ldr	r3, [r7, #4]
 81030a4:	681b      	ldr	r3, [r3, #0]
 81030a6:	4a54      	ldr	r2, [pc, #336]	; (81031f8 <HAL_DMA_Abort_IT+0x280>)
 81030a8:	4293      	cmp	r3, r2
 81030aa:	d022      	beq.n	81030f2 <HAL_DMA_Abort_IT+0x17a>
 81030ac:	687b      	ldr	r3, [r7, #4]
 81030ae:	681b      	ldr	r3, [r3, #0]
 81030b0:	4a52      	ldr	r2, [pc, #328]	; (81031fc <HAL_DMA_Abort_IT+0x284>)
 81030b2:	4293      	cmp	r3, r2
 81030b4:	d01d      	beq.n	81030f2 <HAL_DMA_Abort_IT+0x17a>
 81030b6:	687b      	ldr	r3, [r7, #4]
 81030b8:	681b      	ldr	r3, [r3, #0]
 81030ba:	4a51      	ldr	r2, [pc, #324]	; (8103200 <HAL_DMA_Abort_IT+0x288>)
 81030bc:	4293      	cmp	r3, r2
 81030be:	d018      	beq.n	81030f2 <HAL_DMA_Abort_IT+0x17a>
 81030c0:	687b      	ldr	r3, [r7, #4]
 81030c2:	681b      	ldr	r3, [r3, #0]
 81030c4:	4a4f      	ldr	r2, [pc, #316]	; (8103204 <HAL_DMA_Abort_IT+0x28c>)
 81030c6:	4293      	cmp	r3, r2
 81030c8:	d013      	beq.n	81030f2 <HAL_DMA_Abort_IT+0x17a>
 81030ca:	687b      	ldr	r3, [r7, #4]
 81030cc:	681b      	ldr	r3, [r3, #0]
 81030ce:	4a4e      	ldr	r2, [pc, #312]	; (8103208 <HAL_DMA_Abort_IT+0x290>)
 81030d0:	4293      	cmp	r3, r2
 81030d2:	d00e      	beq.n	81030f2 <HAL_DMA_Abort_IT+0x17a>
 81030d4:	687b      	ldr	r3, [r7, #4]
 81030d6:	681b      	ldr	r3, [r3, #0]
 81030d8:	4a4c      	ldr	r2, [pc, #304]	; (810320c <HAL_DMA_Abort_IT+0x294>)
 81030da:	4293      	cmp	r3, r2
 81030dc:	d009      	beq.n	81030f2 <HAL_DMA_Abort_IT+0x17a>
 81030de:	687b      	ldr	r3, [r7, #4]
 81030e0:	681b      	ldr	r3, [r3, #0]
 81030e2:	4a4b      	ldr	r2, [pc, #300]	; (8103210 <HAL_DMA_Abort_IT+0x298>)
 81030e4:	4293      	cmp	r3, r2
 81030e6:	d004      	beq.n	81030f2 <HAL_DMA_Abort_IT+0x17a>
 81030e8:	687b      	ldr	r3, [r7, #4]
 81030ea:	681b      	ldr	r3, [r3, #0]
 81030ec:	4a49      	ldr	r2, [pc, #292]	; (8103214 <HAL_DMA_Abort_IT+0x29c>)
 81030ee:	4293      	cmp	r3, r2
 81030f0:	d108      	bne.n	8103104 <HAL_DMA_Abort_IT+0x18c>
 81030f2:	687b      	ldr	r3, [r7, #4]
 81030f4:	681b      	ldr	r3, [r3, #0]
 81030f6:	681a      	ldr	r2, [r3, #0]
 81030f8:	687b      	ldr	r3, [r7, #4]
 81030fa:	681b      	ldr	r3, [r3, #0]
 81030fc:	f022 0201 	bic.w	r2, r2, #1
 8103100:	601a      	str	r2, [r3, #0]
 8103102:	e147      	b.n	8103394 <HAL_DMA_Abort_IT+0x41c>
 8103104:	687b      	ldr	r3, [r7, #4]
 8103106:	681b      	ldr	r3, [r3, #0]
 8103108:	681a      	ldr	r2, [r3, #0]
 810310a:	687b      	ldr	r3, [r7, #4]
 810310c:	681b      	ldr	r3, [r3, #0]
 810310e:	f022 0201 	bic.w	r2, r2, #1
 8103112:	601a      	str	r2, [r3, #0]
 8103114:	e13e      	b.n	8103394 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8103116:	687b      	ldr	r3, [r7, #4]
 8103118:	681b      	ldr	r3, [r3, #0]
 810311a:	681a      	ldr	r2, [r3, #0]
 810311c:	687b      	ldr	r3, [r7, #4]
 810311e:	681b      	ldr	r3, [r3, #0]
 8103120:	f022 020e 	bic.w	r2, r2, #14
 8103124:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8103126:	687b      	ldr	r3, [r7, #4]
 8103128:	681b      	ldr	r3, [r3, #0]
 810312a:	4a2b      	ldr	r2, [pc, #172]	; (81031d8 <HAL_DMA_Abort_IT+0x260>)
 810312c:	4293      	cmp	r3, r2
 810312e:	d04a      	beq.n	81031c6 <HAL_DMA_Abort_IT+0x24e>
 8103130:	687b      	ldr	r3, [r7, #4]
 8103132:	681b      	ldr	r3, [r3, #0]
 8103134:	4a29      	ldr	r2, [pc, #164]	; (81031dc <HAL_DMA_Abort_IT+0x264>)
 8103136:	4293      	cmp	r3, r2
 8103138:	d045      	beq.n	81031c6 <HAL_DMA_Abort_IT+0x24e>
 810313a:	687b      	ldr	r3, [r7, #4]
 810313c:	681b      	ldr	r3, [r3, #0]
 810313e:	4a28      	ldr	r2, [pc, #160]	; (81031e0 <HAL_DMA_Abort_IT+0x268>)
 8103140:	4293      	cmp	r3, r2
 8103142:	d040      	beq.n	81031c6 <HAL_DMA_Abort_IT+0x24e>
 8103144:	687b      	ldr	r3, [r7, #4]
 8103146:	681b      	ldr	r3, [r3, #0]
 8103148:	4a26      	ldr	r2, [pc, #152]	; (81031e4 <HAL_DMA_Abort_IT+0x26c>)
 810314a:	4293      	cmp	r3, r2
 810314c:	d03b      	beq.n	81031c6 <HAL_DMA_Abort_IT+0x24e>
 810314e:	687b      	ldr	r3, [r7, #4]
 8103150:	681b      	ldr	r3, [r3, #0]
 8103152:	4a25      	ldr	r2, [pc, #148]	; (81031e8 <HAL_DMA_Abort_IT+0x270>)
 8103154:	4293      	cmp	r3, r2
 8103156:	d036      	beq.n	81031c6 <HAL_DMA_Abort_IT+0x24e>
 8103158:	687b      	ldr	r3, [r7, #4]
 810315a:	681b      	ldr	r3, [r3, #0]
 810315c:	4a23      	ldr	r2, [pc, #140]	; (81031ec <HAL_DMA_Abort_IT+0x274>)
 810315e:	4293      	cmp	r3, r2
 8103160:	d031      	beq.n	81031c6 <HAL_DMA_Abort_IT+0x24e>
 8103162:	687b      	ldr	r3, [r7, #4]
 8103164:	681b      	ldr	r3, [r3, #0]
 8103166:	4a22      	ldr	r2, [pc, #136]	; (81031f0 <HAL_DMA_Abort_IT+0x278>)
 8103168:	4293      	cmp	r3, r2
 810316a:	d02c      	beq.n	81031c6 <HAL_DMA_Abort_IT+0x24e>
 810316c:	687b      	ldr	r3, [r7, #4]
 810316e:	681b      	ldr	r3, [r3, #0]
 8103170:	4a20      	ldr	r2, [pc, #128]	; (81031f4 <HAL_DMA_Abort_IT+0x27c>)
 8103172:	4293      	cmp	r3, r2
 8103174:	d027      	beq.n	81031c6 <HAL_DMA_Abort_IT+0x24e>
 8103176:	687b      	ldr	r3, [r7, #4]
 8103178:	681b      	ldr	r3, [r3, #0]
 810317a:	4a1f      	ldr	r2, [pc, #124]	; (81031f8 <HAL_DMA_Abort_IT+0x280>)
 810317c:	4293      	cmp	r3, r2
 810317e:	d022      	beq.n	81031c6 <HAL_DMA_Abort_IT+0x24e>
 8103180:	687b      	ldr	r3, [r7, #4]
 8103182:	681b      	ldr	r3, [r3, #0]
 8103184:	4a1d      	ldr	r2, [pc, #116]	; (81031fc <HAL_DMA_Abort_IT+0x284>)
 8103186:	4293      	cmp	r3, r2
 8103188:	d01d      	beq.n	81031c6 <HAL_DMA_Abort_IT+0x24e>
 810318a:	687b      	ldr	r3, [r7, #4]
 810318c:	681b      	ldr	r3, [r3, #0]
 810318e:	4a1c      	ldr	r2, [pc, #112]	; (8103200 <HAL_DMA_Abort_IT+0x288>)
 8103190:	4293      	cmp	r3, r2
 8103192:	d018      	beq.n	81031c6 <HAL_DMA_Abort_IT+0x24e>
 8103194:	687b      	ldr	r3, [r7, #4]
 8103196:	681b      	ldr	r3, [r3, #0]
 8103198:	4a1a      	ldr	r2, [pc, #104]	; (8103204 <HAL_DMA_Abort_IT+0x28c>)
 810319a:	4293      	cmp	r3, r2
 810319c:	d013      	beq.n	81031c6 <HAL_DMA_Abort_IT+0x24e>
 810319e:	687b      	ldr	r3, [r7, #4]
 81031a0:	681b      	ldr	r3, [r3, #0]
 81031a2:	4a19      	ldr	r2, [pc, #100]	; (8103208 <HAL_DMA_Abort_IT+0x290>)
 81031a4:	4293      	cmp	r3, r2
 81031a6:	d00e      	beq.n	81031c6 <HAL_DMA_Abort_IT+0x24e>
 81031a8:	687b      	ldr	r3, [r7, #4]
 81031aa:	681b      	ldr	r3, [r3, #0]
 81031ac:	4a17      	ldr	r2, [pc, #92]	; (810320c <HAL_DMA_Abort_IT+0x294>)
 81031ae:	4293      	cmp	r3, r2
 81031b0:	d009      	beq.n	81031c6 <HAL_DMA_Abort_IT+0x24e>
 81031b2:	687b      	ldr	r3, [r7, #4]
 81031b4:	681b      	ldr	r3, [r3, #0]
 81031b6:	4a16      	ldr	r2, [pc, #88]	; (8103210 <HAL_DMA_Abort_IT+0x298>)
 81031b8:	4293      	cmp	r3, r2
 81031ba:	d004      	beq.n	81031c6 <HAL_DMA_Abort_IT+0x24e>
 81031bc:	687b      	ldr	r3, [r7, #4]
 81031be:	681b      	ldr	r3, [r3, #0]
 81031c0:	4a14      	ldr	r2, [pc, #80]	; (8103214 <HAL_DMA_Abort_IT+0x29c>)
 81031c2:	4293      	cmp	r3, r2
 81031c4:	d128      	bne.n	8103218 <HAL_DMA_Abort_IT+0x2a0>
 81031c6:	687b      	ldr	r3, [r7, #4]
 81031c8:	681b      	ldr	r3, [r3, #0]
 81031ca:	681a      	ldr	r2, [r3, #0]
 81031cc:	687b      	ldr	r3, [r7, #4]
 81031ce:	681b      	ldr	r3, [r3, #0]
 81031d0:	f022 0201 	bic.w	r2, r2, #1
 81031d4:	601a      	str	r2, [r3, #0]
 81031d6:	e027      	b.n	8103228 <HAL_DMA_Abort_IT+0x2b0>
 81031d8:	40020010 	.word	0x40020010
 81031dc:	40020028 	.word	0x40020028
 81031e0:	40020040 	.word	0x40020040
 81031e4:	40020058 	.word	0x40020058
 81031e8:	40020070 	.word	0x40020070
 81031ec:	40020088 	.word	0x40020088
 81031f0:	400200a0 	.word	0x400200a0
 81031f4:	400200b8 	.word	0x400200b8
 81031f8:	40020410 	.word	0x40020410
 81031fc:	40020428 	.word	0x40020428
 8103200:	40020440 	.word	0x40020440
 8103204:	40020458 	.word	0x40020458
 8103208:	40020470 	.word	0x40020470
 810320c:	40020488 	.word	0x40020488
 8103210:	400204a0 	.word	0x400204a0
 8103214:	400204b8 	.word	0x400204b8
 8103218:	687b      	ldr	r3, [r7, #4]
 810321a:	681b      	ldr	r3, [r3, #0]
 810321c:	681a      	ldr	r2, [r3, #0]
 810321e:	687b      	ldr	r3, [r7, #4]
 8103220:	681b      	ldr	r3, [r3, #0]
 8103222:	f022 0201 	bic.w	r2, r2, #1
 8103226:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103228:	687b      	ldr	r3, [r7, #4]
 810322a:	681b      	ldr	r3, [r3, #0]
 810322c:	4a5c      	ldr	r2, [pc, #368]	; (81033a0 <HAL_DMA_Abort_IT+0x428>)
 810322e:	4293      	cmp	r3, r2
 8103230:	d072      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 8103232:	687b      	ldr	r3, [r7, #4]
 8103234:	681b      	ldr	r3, [r3, #0]
 8103236:	4a5b      	ldr	r2, [pc, #364]	; (81033a4 <HAL_DMA_Abort_IT+0x42c>)
 8103238:	4293      	cmp	r3, r2
 810323a:	d06d      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 810323c:	687b      	ldr	r3, [r7, #4]
 810323e:	681b      	ldr	r3, [r3, #0]
 8103240:	4a59      	ldr	r2, [pc, #356]	; (81033a8 <HAL_DMA_Abort_IT+0x430>)
 8103242:	4293      	cmp	r3, r2
 8103244:	d068      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 8103246:	687b      	ldr	r3, [r7, #4]
 8103248:	681b      	ldr	r3, [r3, #0]
 810324a:	4a58      	ldr	r2, [pc, #352]	; (81033ac <HAL_DMA_Abort_IT+0x434>)
 810324c:	4293      	cmp	r3, r2
 810324e:	d063      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 8103250:	687b      	ldr	r3, [r7, #4]
 8103252:	681b      	ldr	r3, [r3, #0]
 8103254:	4a56      	ldr	r2, [pc, #344]	; (81033b0 <HAL_DMA_Abort_IT+0x438>)
 8103256:	4293      	cmp	r3, r2
 8103258:	d05e      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 810325a:	687b      	ldr	r3, [r7, #4]
 810325c:	681b      	ldr	r3, [r3, #0]
 810325e:	4a55      	ldr	r2, [pc, #340]	; (81033b4 <HAL_DMA_Abort_IT+0x43c>)
 8103260:	4293      	cmp	r3, r2
 8103262:	d059      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 8103264:	687b      	ldr	r3, [r7, #4]
 8103266:	681b      	ldr	r3, [r3, #0]
 8103268:	4a53      	ldr	r2, [pc, #332]	; (81033b8 <HAL_DMA_Abort_IT+0x440>)
 810326a:	4293      	cmp	r3, r2
 810326c:	d054      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 810326e:	687b      	ldr	r3, [r7, #4]
 8103270:	681b      	ldr	r3, [r3, #0]
 8103272:	4a52      	ldr	r2, [pc, #328]	; (81033bc <HAL_DMA_Abort_IT+0x444>)
 8103274:	4293      	cmp	r3, r2
 8103276:	d04f      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 8103278:	687b      	ldr	r3, [r7, #4]
 810327a:	681b      	ldr	r3, [r3, #0]
 810327c:	4a50      	ldr	r2, [pc, #320]	; (81033c0 <HAL_DMA_Abort_IT+0x448>)
 810327e:	4293      	cmp	r3, r2
 8103280:	d04a      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 8103282:	687b      	ldr	r3, [r7, #4]
 8103284:	681b      	ldr	r3, [r3, #0]
 8103286:	4a4f      	ldr	r2, [pc, #316]	; (81033c4 <HAL_DMA_Abort_IT+0x44c>)
 8103288:	4293      	cmp	r3, r2
 810328a:	d045      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 810328c:	687b      	ldr	r3, [r7, #4]
 810328e:	681b      	ldr	r3, [r3, #0]
 8103290:	4a4d      	ldr	r2, [pc, #308]	; (81033c8 <HAL_DMA_Abort_IT+0x450>)
 8103292:	4293      	cmp	r3, r2
 8103294:	d040      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 8103296:	687b      	ldr	r3, [r7, #4]
 8103298:	681b      	ldr	r3, [r3, #0]
 810329a:	4a4c      	ldr	r2, [pc, #304]	; (81033cc <HAL_DMA_Abort_IT+0x454>)
 810329c:	4293      	cmp	r3, r2
 810329e:	d03b      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 81032a0:	687b      	ldr	r3, [r7, #4]
 81032a2:	681b      	ldr	r3, [r3, #0]
 81032a4:	4a4a      	ldr	r2, [pc, #296]	; (81033d0 <HAL_DMA_Abort_IT+0x458>)
 81032a6:	4293      	cmp	r3, r2
 81032a8:	d036      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 81032aa:	687b      	ldr	r3, [r7, #4]
 81032ac:	681b      	ldr	r3, [r3, #0]
 81032ae:	4a49      	ldr	r2, [pc, #292]	; (81033d4 <HAL_DMA_Abort_IT+0x45c>)
 81032b0:	4293      	cmp	r3, r2
 81032b2:	d031      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 81032b4:	687b      	ldr	r3, [r7, #4]
 81032b6:	681b      	ldr	r3, [r3, #0]
 81032b8:	4a47      	ldr	r2, [pc, #284]	; (81033d8 <HAL_DMA_Abort_IT+0x460>)
 81032ba:	4293      	cmp	r3, r2
 81032bc:	d02c      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 81032be:	687b      	ldr	r3, [r7, #4]
 81032c0:	681b      	ldr	r3, [r3, #0]
 81032c2:	4a46      	ldr	r2, [pc, #280]	; (81033dc <HAL_DMA_Abort_IT+0x464>)
 81032c4:	4293      	cmp	r3, r2
 81032c6:	d027      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 81032c8:	687b      	ldr	r3, [r7, #4]
 81032ca:	681b      	ldr	r3, [r3, #0]
 81032cc:	4a44      	ldr	r2, [pc, #272]	; (81033e0 <HAL_DMA_Abort_IT+0x468>)
 81032ce:	4293      	cmp	r3, r2
 81032d0:	d022      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 81032d2:	687b      	ldr	r3, [r7, #4]
 81032d4:	681b      	ldr	r3, [r3, #0]
 81032d6:	4a43      	ldr	r2, [pc, #268]	; (81033e4 <HAL_DMA_Abort_IT+0x46c>)
 81032d8:	4293      	cmp	r3, r2
 81032da:	d01d      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 81032dc:	687b      	ldr	r3, [r7, #4]
 81032de:	681b      	ldr	r3, [r3, #0]
 81032e0:	4a41      	ldr	r2, [pc, #260]	; (81033e8 <HAL_DMA_Abort_IT+0x470>)
 81032e2:	4293      	cmp	r3, r2
 81032e4:	d018      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 81032e6:	687b      	ldr	r3, [r7, #4]
 81032e8:	681b      	ldr	r3, [r3, #0]
 81032ea:	4a40      	ldr	r2, [pc, #256]	; (81033ec <HAL_DMA_Abort_IT+0x474>)
 81032ec:	4293      	cmp	r3, r2
 81032ee:	d013      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 81032f0:	687b      	ldr	r3, [r7, #4]
 81032f2:	681b      	ldr	r3, [r3, #0]
 81032f4:	4a3e      	ldr	r2, [pc, #248]	; (81033f0 <HAL_DMA_Abort_IT+0x478>)
 81032f6:	4293      	cmp	r3, r2
 81032f8:	d00e      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 81032fa:	687b      	ldr	r3, [r7, #4]
 81032fc:	681b      	ldr	r3, [r3, #0]
 81032fe:	4a3d      	ldr	r2, [pc, #244]	; (81033f4 <HAL_DMA_Abort_IT+0x47c>)
 8103300:	4293      	cmp	r3, r2
 8103302:	d009      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 8103304:	687b      	ldr	r3, [r7, #4]
 8103306:	681b      	ldr	r3, [r3, #0]
 8103308:	4a3b      	ldr	r2, [pc, #236]	; (81033f8 <HAL_DMA_Abort_IT+0x480>)
 810330a:	4293      	cmp	r3, r2
 810330c:	d004      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 810330e:	687b      	ldr	r3, [r7, #4]
 8103310:	681b      	ldr	r3, [r3, #0]
 8103312:	4a3a      	ldr	r2, [pc, #232]	; (81033fc <HAL_DMA_Abort_IT+0x484>)
 8103314:	4293      	cmp	r3, r2
 8103316:	d101      	bne.n	810331c <HAL_DMA_Abort_IT+0x3a4>
 8103318:	2301      	movs	r3, #1
 810331a:	e000      	b.n	810331e <HAL_DMA_Abort_IT+0x3a6>
 810331c:	2300      	movs	r3, #0
 810331e:	2b00      	cmp	r3, #0
 8103320:	d028      	beq.n	8103374 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8103322:	687b      	ldr	r3, [r7, #4]
 8103324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103326:	681a      	ldr	r2, [r3, #0]
 8103328:	687b      	ldr	r3, [r7, #4]
 810332a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810332c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8103330:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8103332:	687b      	ldr	r3, [r7, #4]
 8103334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103336:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8103338:	687b      	ldr	r3, [r7, #4]
 810333a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810333c:	f003 031f 	and.w	r3, r3, #31
 8103340:	2201      	movs	r2, #1
 8103342:	409a      	lsls	r2, r3
 8103344:	68fb      	ldr	r3, [r7, #12]
 8103346:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103348:	687b      	ldr	r3, [r7, #4]
 810334a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810334c:	687a      	ldr	r2, [r7, #4]
 810334e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8103350:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8103352:	687b      	ldr	r3, [r7, #4]
 8103354:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103356:	2b00      	cmp	r3, #0
 8103358:	d00c      	beq.n	8103374 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 810335a:	687b      	ldr	r3, [r7, #4]
 810335c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810335e:	681a      	ldr	r2, [r3, #0]
 8103360:	687b      	ldr	r3, [r7, #4]
 8103362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103364:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8103368:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 810336a:	687b      	ldr	r3, [r7, #4]
 810336c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810336e:	687a      	ldr	r2, [r7, #4]
 8103370:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8103372:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8103374:	687b      	ldr	r3, [r7, #4]
 8103376:	2200      	movs	r2, #0
 8103378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 810337c:	687b      	ldr	r3, [r7, #4]
 810337e:	2201      	movs	r2, #1
 8103380:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8103384:	687b      	ldr	r3, [r7, #4]
 8103386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103388:	2b00      	cmp	r3, #0
 810338a:	d003      	beq.n	8103394 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 810338c:	687b      	ldr	r3, [r7, #4]
 810338e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103390:	6878      	ldr	r0, [r7, #4]
 8103392:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8103394:	2300      	movs	r3, #0
}
 8103396:	4618      	mov	r0, r3
 8103398:	3710      	adds	r7, #16
 810339a:	46bd      	mov	sp, r7
 810339c:	bd80      	pop	{r7, pc}
 810339e:	bf00      	nop
 81033a0:	40020010 	.word	0x40020010
 81033a4:	40020028 	.word	0x40020028
 81033a8:	40020040 	.word	0x40020040
 81033ac:	40020058 	.word	0x40020058
 81033b0:	40020070 	.word	0x40020070
 81033b4:	40020088 	.word	0x40020088
 81033b8:	400200a0 	.word	0x400200a0
 81033bc:	400200b8 	.word	0x400200b8
 81033c0:	40020410 	.word	0x40020410
 81033c4:	40020428 	.word	0x40020428
 81033c8:	40020440 	.word	0x40020440
 81033cc:	40020458 	.word	0x40020458
 81033d0:	40020470 	.word	0x40020470
 81033d4:	40020488 	.word	0x40020488
 81033d8:	400204a0 	.word	0x400204a0
 81033dc:	400204b8 	.word	0x400204b8
 81033e0:	58025408 	.word	0x58025408
 81033e4:	5802541c 	.word	0x5802541c
 81033e8:	58025430 	.word	0x58025430
 81033ec:	58025444 	.word	0x58025444
 81033f0:	58025458 	.word	0x58025458
 81033f4:	5802546c 	.word	0x5802546c
 81033f8:	58025480 	.word	0x58025480
 81033fc:	58025494 	.word	0x58025494

08103400 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8103400:	b580      	push	{r7, lr}
 8103402:	b08a      	sub	sp, #40	; 0x28
 8103404:	af00      	add	r7, sp, #0
 8103406:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8103408:	2300      	movs	r3, #0
 810340a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 810340c:	4b67      	ldr	r3, [pc, #412]	; (81035ac <HAL_DMA_IRQHandler+0x1ac>)
 810340e:	681b      	ldr	r3, [r3, #0]
 8103410:	4a67      	ldr	r2, [pc, #412]	; (81035b0 <HAL_DMA_IRQHandler+0x1b0>)
 8103412:	fba2 2303 	umull	r2, r3, r2, r3
 8103416:	0a9b      	lsrs	r3, r3, #10
 8103418:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 810341a:	687b      	ldr	r3, [r7, #4]
 810341c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810341e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8103420:	687b      	ldr	r3, [r7, #4]
 8103422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103424:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8103426:	6a3b      	ldr	r3, [r7, #32]
 8103428:	681b      	ldr	r3, [r3, #0]
 810342a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 810342c:	69fb      	ldr	r3, [r7, #28]
 810342e:	681b      	ldr	r3, [r3, #0]
 8103430:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8103432:	687b      	ldr	r3, [r7, #4]
 8103434:	681b      	ldr	r3, [r3, #0]
 8103436:	4a5f      	ldr	r2, [pc, #380]	; (81035b4 <HAL_DMA_IRQHandler+0x1b4>)
 8103438:	4293      	cmp	r3, r2
 810343a:	d04a      	beq.n	81034d2 <HAL_DMA_IRQHandler+0xd2>
 810343c:	687b      	ldr	r3, [r7, #4]
 810343e:	681b      	ldr	r3, [r3, #0]
 8103440:	4a5d      	ldr	r2, [pc, #372]	; (81035b8 <HAL_DMA_IRQHandler+0x1b8>)
 8103442:	4293      	cmp	r3, r2
 8103444:	d045      	beq.n	81034d2 <HAL_DMA_IRQHandler+0xd2>
 8103446:	687b      	ldr	r3, [r7, #4]
 8103448:	681b      	ldr	r3, [r3, #0]
 810344a:	4a5c      	ldr	r2, [pc, #368]	; (81035bc <HAL_DMA_IRQHandler+0x1bc>)
 810344c:	4293      	cmp	r3, r2
 810344e:	d040      	beq.n	81034d2 <HAL_DMA_IRQHandler+0xd2>
 8103450:	687b      	ldr	r3, [r7, #4]
 8103452:	681b      	ldr	r3, [r3, #0]
 8103454:	4a5a      	ldr	r2, [pc, #360]	; (81035c0 <HAL_DMA_IRQHandler+0x1c0>)
 8103456:	4293      	cmp	r3, r2
 8103458:	d03b      	beq.n	81034d2 <HAL_DMA_IRQHandler+0xd2>
 810345a:	687b      	ldr	r3, [r7, #4]
 810345c:	681b      	ldr	r3, [r3, #0]
 810345e:	4a59      	ldr	r2, [pc, #356]	; (81035c4 <HAL_DMA_IRQHandler+0x1c4>)
 8103460:	4293      	cmp	r3, r2
 8103462:	d036      	beq.n	81034d2 <HAL_DMA_IRQHandler+0xd2>
 8103464:	687b      	ldr	r3, [r7, #4]
 8103466:	681b      	ldr	r3, [r3, #0]
 8103468:	4a57      	ldr	r2, [pc, #348]	; (81035c8 <HAL_DMA_IRQHandler+0x1c8>)
 810346a:	4293      	cmp	r3, r2
 810346c:	d031      	beq.n	81034d2 <HAL_DMA_IRQHandler+0xd2>
 810346e:	687b      	ldr	r3, [r7, #4]
 8103470:	681b      	ldr	r3, [r3, #0]
 8103472:	4a56      	ldr	r2, [pc, #344]	; (81035cc <HAL_DMA_IRQHandler+0x1cc>)
 8103474:	4293      	cmp	r3, r2
 8103476:	d02c      	beq.n	81034d2 <HAL_DMA_IRQHandler+0xd2>
 8103478:	687b      	ldr	r3, [r7, #4]
 810347a:	681b      	ldr	r3, [r3, #0]
 810347c:	4a54      	ldr	r2, [pc, #336]	; (81035d0 <HAL_DMA_IRQHandler+0x1d0>)
 810347e:	4293      	cmp	r3, r2
 8103480:	d027      	beq.n	81034d2 <HAL_DMA_IRQHandler+0xd2>
 8103482:	687b      	ldr	r3, [r7, #4]
 8103484:	681b      	ldr	r3, [r3, #0]
 8103486:	4a53      	ldr	r2, [pc, #332]	; (81035d4 <HAL_DMA_IRQHandler+0x1d4>)
 8103488:	4293      	cmp	r3, r2
 810348a:	d022      	beq.n	81034d2 <HAL_DMA_IRQHandler+0xd2>
 810348c:	687b      	ldr	r3, [r7, #4]
 810348e:	681b      	ldr	r3, [r3, #0]
 8103490:	4a51      	ldr	r2, [pc, #324]	; (81035d8 <HAL_DMA_IRQHandler+0x1d8>)
 8103492:	4293      	cmp	r3, r2
 8103494:	d01d      	beq.n	81034d2 <HAL_DMA_IRQHandler+0xd2>
 8103496:	687b      	ldr	r3, [r7, #4]
 8103498:	681b      	ldr	r3, [r3, #0]
 810349a:	4a50      	ldr	r2, [pc, #320]	; (81035dc <HAL_DMA_IRQHandler+0x1dc>)
 810349c:	4293      	cmp	r3, r2
 810349e:	d018      	beq.n	81034d2 <HAL_DMA_IRQHandler+0xd2>
 81034a0:	687b      	ldr	r3, [r7, #4]
 81034a2:	681b      	ldr	r3, [r3, #0]
 81034a4:	4a4e      	ldr	r2, [pc, #312]	; (81035e0 <HAL_DMA_IRQHandler+0x1e0>)
 81034a6:	4293      	cmp	r3, r2
 81034a8:	d013      	beq.n	81034d2 <HAL_DMA_IRQHandler+0xd2>
 81034aa:	687b      	ldr	r3, [r7, #4]
 81034ac:	681b      	ldr	r3, [r3, #0]
 81034ae:	4a4d      	ldr	r2, [pc, #308]	; (81035e4 <HAL_DMA_IRQHandler+0x1e4>)
 81034b0:	4293      	cmp	r3, r2
 81034b2:	d00e      	beq.n	81034d2 <HAL_DMA_IRQHandler+0xd2>
 81034b4:	687b      	ldr	r3, [r7, #4]
 81034b6:	681b      	ldr	r3, [r3, #0]
 81034b8:	4a4b      	ldr	r2, [pc, #300]	; (81035e8 <HAL_DMA_IRQHandler+0x1e8>)
 81034ba:	4293      	cmp	r3, r2
 81034bc:	d009      	beq.n	81034d2 <HAL_DMA_IRQHandler+0xd2>
 81034be:	687b      	ldr	r3, [r7, #4]
 81034c0:	681b      	ldr	r3, [r3, #0]
 81034c2:	4a4a      	ldr	r2, [pc, #296]	; (81035ec <HAL_DMA_IRQHandler+0x1ec>)
 81034c4:	4293      	cmp	r3, r2
 81034c6:	d004      	beq.n	81034d2 <HAL_DMA_IRQHandler+0xd2>
 81034c8:	687b      	ldr	r3, [r7, #4]
 81034ca:	681b      	ldr	r3, [r3, #0]
 81034cc:	4a48      	ldr	r2, [pc, #288]	; (81035f0 <HAL_DMA_IRQHandler+0x1f0>)
 81034ce:	4293      	cmp	r3, r2
 81034d0:	d101      	bne.n	81034d6 <HAL_DMA_IRQHandler+0xd6>
 81034d2:	2301      	movs	r3, #1
 81034d4:	e000      	b.n	81034d8 <HAL_DMA_IRQHandler+0xd8>
 81034d6:	2300      	movs	r3, #0
 81034d8:	2b00      	cmp	r3, #0
 81034da:	f000 842b 	beq.w	8103d34 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81034de:	687b      	ldr	r3, [r7, #4]
 81034e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81034e2:	f003 031f 	and.w	r3, r3, #31
 81034e6:	2208      	movs	r2, #8
 81034e8:	409a      	lsls	r2, r3
 81034ea:	69bb      	ldr	r3, [r7, #24]
 81034ec:	4013      	ands	r3, r2
 81034ee:	2b00      	cmp	r3, #0
 81034f0:	f000 80a2 	beq.w	8103638 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 81034f4:	687b      	ldr	r3, [r7, #4]
 81034f6:	681b      	ldr	r3, [r3, #0]
 81034f8:	4a2e      	ldr	r2, [pc, #184]	; (81035b4 <HAL_DMA_IRQHandler+0x1b4>)
 81034fa:	4293      	cmp	r3, r2
 81034fc:	d04a      	beq.n	8103594 <HAL_DMA_IRQHandler+0x194>
 81034fe:	687b      	ldr	r3, [r7, #4]
 8103500:	681b      	ldr	r3, [r3, #0]
 8103502:	4a2d      	ldr	r2, [pc, #180]	; (81035b8 <HAL_DMA_IRQHandler+0x1b8>)
 8103504:	4293      	cmp	r3, r2
 8103506:	d045      	beq.n	8103594 <HAL_DMA_IRQHandler+0x194>
 8103508:	687b      	ldr	r3, [r7, #4]
 810350a:	681b      	ldr	r3, [r3, #0]
 810350c:	4a2b      	ldr	r2, [pc, #172]	; (81035bc <HAL_DMA_IRQHandler+0x1bc>)
 810350e:	4293      	cmp	r3, r2
 8103510:	d040      	beq.n	8103594 <HAL_DMA_IRQHandler+0x194>
 8103512:	687b      	ldr	r3, [r7, #4]
 8103514:	681b      	ldr	r3, [r3, #0]
 8103516:	4a2a      	ldr	r2, [pc, #168]	; (81035c0 <HAL_DMA_IRQHandler+0x1c0>)
 8103518:	4293      	cmp	r3, r2
 810351a:	d03b      	beq.n	8103594 <HAL_DMA_IRQHandler+0x194>
 810351c:	687b      	ldr	r3, [r7, #4]
 810351e:	681b      	ldr	r3, [r3, #0]
 8103520:	4a28      	ldr	r2, [pc, #160]	; (81035c4 <HAL_DMA_IRQHandler+0x1c4>)
 8103522:	4293      	cmp	r3, r2
 8103524:	d036      	beq.n	8103594 <HAL_DMA_IRQHandler+0x194>
 8103526:	687b      	ldr	r3, [r7, #4]
 8103528:	681b      	ldr	r3, [r3, #0]
 810352a:	4a27      	ldr	r2, [pc, #156]	; (81035c8 <HAL_DMA_IRQHandler+0x1c8>)
 810352c:	4293      	cmp	r3, r2
 810352e:	d031      	beq.n	8103594 <HAL_DMA_IRQHandler+0x194>
 8103530:	687b      	ldr	r3, [r7, #4]
 8103532:	681b      	ldr	r3, [r3, #0]
 8103534:	4a25      	ldr	r2, [pc, #148]	; (81035cc <HAL_DMA_IRQHandler+0x1cc>)
 8103536:	4293      	cmp	r3, r2
 8103538:	d02c      	beq.n	8103594 <HAL_DMA_IRQHandler+0x194>
 810353a:	687b      	ldr	r3, [r7, #4]
 810353c:	681b      	ldr	r3, [r3, #0]
 810353e:	4a24      	ldr	r2, [pc, #144]	; (81035d0 <HAL_DMA_IRQHandler+0x1d0>)
 8103540:	4293      	cmp	r3, r2
 8103542:	d027      	beq.n	8103594 <HAL_DMA_IRQHandler+0x194>
 8103544:	687b      	ldr	r3, [r7, #4]
 8103546:	681b      	ldr	r3, [r3, #0]
 8103548:	4a22      	ldr	r2, [pc, #136]	; (81035d4 <HAL_DMA_IRQHandler+0x1d4>)
 810354a:	4293      	cmp	r3, r2
 810354c:	d022      	beq.n	8103594 <HAL_DMA_IRQHandler+0x194>
 810354e:	687b      	ldr	r3, [r7, #4]
 8103550:	681b      	ldr	r3, [r3, #0]
 8103552:	4a21      	ldr	r2, [pc, #132]	; (81035d8 <HAL_DMA_IRQHandler+0x1d8>)
 8103554:	4293      	cmp	r3, r2
 8103556:	d01d      	beq.n	8103594 <HAL_DMA_IRQHandler+0x194>
 8103558:	687b      	ldr	r3, [r7, #4]
 810355a:	681b      	ldr	r3, [r3, #0]
 810355c:	4a1f      	ldr	r2, [pc, #124]	; (81035dc <HAL_DMA_IRQHandler+0x1dc>)
 810355e:	4293      	cmp	r3, r2
 8103560:	d018      	beq.n	8103594 <HAL_DMA_IRQHandler+0x194>
 8103562:	687b      	ldr	r3, [r7, #4]
 8103564:	681b      	ldr	r3, [r3, #0]
 8103566:	4a1e      	ldr	r2, [pc, #120]	; (81035e0 <HAL_DMA_IRQHandler+0x1e0>)
 8103568:	4293      	cmp	r3, r2
 810356a:	d013      	beq.n	8103594 <HAL_DMA_IRQHandler+0x194>
 810356c:	687b      	ldr	r3, [r7, #4]
 810356e:	681b      	ldr	r3, [r3, #0]
 8103570:	4a1c      	ldr	r2, [pc, #112]	; (81035e4 <HAL_DMA_IRQHandler+0x1e4>)
 8103572:	4293      	cmp	r3, r2
 8103574:	d00e      	beq.n	8103594 <HAL_DMA_IRQHandler+0x194>
 8103576:	687b      	ldr	r3, [r7, #4]
 8103578:	681b      	ldr	r3, [r3, #0]
 810357a:	4a1b      	ldr	r2, [pc, #108]	; (81035e8 <HAL_DMA_IRQHandler+0x1e8>)
 810357c:	4293      	cmp	r3, r2
 810357e:	d009      	beq.n	8103594 <HAL_DMA_IRQHandler+0x194>
 8103580:	687b      	ldr	r3, [r7, #4]
 8103582:	681b      	ldr	r3, [r3, #0]
 8103584:	4a19      	ldr	r2, [pc, #100]	; (81035ec <HAL_DMA_IRQHandler+0x1ec>)
 8103586:	4293      	cmp	r3, r2
 8103588:	d004      	beq.n	8103594 <HAL_DMA_IRQHandler+0x194>
 810358a:	687b      	ldr	r3, [r7, #4]
 810358c:	681b      	ldr	r3, [r3, #0]
 810358e:	4a18      	ldr	r2, [pc, #96]	; (81035f0 <HAL_DMA_IRQHandler+0x1f0>)
 8103590:	4293      	cmp	r3, r2
 8103592:	d12f      	bne.n	81035f4 <HAL_DMA_IRQHandler+0x1f4>
 8103594:	687b      	ldr	r3, [r7, #4]
 8103596:	681b      	ldr	r3, [r3, #0]
 8103598:	681b      	ldr	r3, [r3, #0]
 810359a:	f003 0304 	and.w	r3, r3, #4
 810359e:	2b00      	cmp	r3, #0
 81035a0:	bf14      	ite	ne
 81035a2:	2301      	movne	r3, #1
 81035a4:	2300      	moveq	r3, #0
 81035a6:	b2db      	uxtb	r3, r3
 81035a8:	e02e      	b.n	8103608 <HAL_DMA_IRQHandler+0x208>
 81035aa:	bf00      	nop
 81035ac:	10000000 	.word	0x10000000
 81035b0:	1b4e81b5 	.word	0x1b4e81b5
 81035b4:	40020010 	.word	0x40020010
 81035b8:	40020028 	.word	0x40020028
 81035bc:	40020040 	.word	0x40020040
 81035c0:	40020058 	.word	0x40020058
 81035c4:	40020070 	.word	0x40020070
 81035c8:	40020088 	.word	0x40020088
 81035cc:	400200a0 	.word	0x400200a0
 81035d0:	400200b8 	.word	0x400200b8
 81035d4:	40020410 	.word	0x40020410
 81035d8:	40020428 	.word	0x40020428
 81035dc:	40020440 	.word	0x40020440
 81035e0:	40020458 	.word	0x40020458
 81035e4:	40020470 	.word	0x40020470
 81035e8:	40020488 	.word	0x40020488
 81035ec:	400204a0 	.word	0x400204a0
 81035f0:	400204b8 	.word	0x400204b8
 81035f4:	687b      	ldr	r3, [r7, #4]
 81035f6:	681b      	ldr	r3, [r3, #0]
 81035f8:	681b      	ldr	r3, [r3, #0]
 81035fa:	f003 0308 	and.w	r3, r3, #8
 81035fe:	2b00      	cmp	r3, #0
 8103600:	bf14      	ite	ne
 8103602:	2301      	movne	r3, #1
 8103604:	2300      	moveq	r3, #0
 8103606:	b2db      	uxtb	r3, r3
 8103608:	2b00      	cmp	r3, #0
 810360a:	d015      	beq.n	8103638 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 810360c:	687b      	ldr	r3, [r7, #4]
 810360e:	681b      	ldr	r3, [r3, #0]
 8103610:	681a      	ldr	r2, [r3, #0]
 8103612:	687b      	ldr	r3, [r7, #4]
 8103614:	681b      	ldr	r3, [r3, #0]
 8103616:	f022 0204 	bic.w	r2, r2, #4
 810361a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 810361c:	687b      	ldr	r3, [r7, #4]
 810361e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103620:	f003 031f 	and.w	r3, r3, #31
 8103624:	2208      	movs	r2, #8
 8103626:	409a      	lsls	r2, r3
 8103628:	6a3b      	ldr	r3, [r7, #32]
 810362a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 810362c:	687b      	ldr	r3, [r7, #4]
 810362e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103630:	f043 0201 	orr.w	r2, r3, #1
 8103634:	687b      	ldr	r3, [r7, #4]
 8103636:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103638:	687b      	ldr	r3, [r7, #4]
 810363a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810363c:	f003 031f 	and.w	r3, r3, #31
 8103640:	69ba      	ldr	r2, [r7, #24]
 8103642:	fa22 f303 	lsr.w	r3, r2, r3
 8103646:	f003 0301 	and.w	r3, r3, #1
 810364a:	2b00      	cmp	r3, #0
 810364c:	d06e      	beq.n	810372c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 810364e:	687b      	ldr	r3, [r7, #4]
 8103650:	681b      	ldr	r3, [r3, #0]
 8103652:	4a69      	ldr	r2, [pc, #420]	; (81037f8 <HAL_DMA_IRQHandler+0x3f8>)
 8103654:	4293      	cmp	r3, r2
 8103656:	d04a      	beq.n	81036ee <HAL_DMA_IRQHandler+0x2ee>
 8103658:	687b      	ldr	r3, [r7, #4]
 810365a:	681b      	ldr	r3, [r3, #0]
 810365c:	4a67      	ldr	r2, [pc, #412]	; (81037fc <HAL_DMA_IRQHandler+0x3fc>)
 810365e:	4293      	cmp	r3, r2
 8103660:	d045      	beq.n	81036ee <HAL_DMA_IRQHandler+0x2ee>
 8103662:	687b      	ldr	r3, [r7, #4]
 8103664:	681b      	ldr	r3, [r3, #0]
 8103666:	4a66      	ldr	r2, [pc, #408]	; (8103800 <HAL_DMA_IRQHandler+0x400>)
 8103668:	4293      	cmp	r3, r2
 810366a:	d040      	beq.n	81036ee <HAL_DMA_IRQHandler+0x2ee>
 810366c:	687b      	ldr	r3, [r7, #4]
 810366e:	681b      	ldr	r3, [r3, #0]
 8103670:	4a64      	ldr	r2, [pc, #400]	; (8103804 <HAL_DMA_IRQHandler+0x404>)
 8103672:	4293      	cmp	r3, r2
 8103674:	d03b      	beq.n	81036ee <HAL_DMA_IRQHandler+0x2ee>
 8103676:	687b      	ldr	r3, [r7, #4]
 8103678:	681b      	ldr	r3, [r3, #0]
 810367a:	4a63      	ldr	r2, [pc, #396]	; (8103808 <HAL_DMA_IRQHandler+0x408>)
 810367c:	4293      	cmp	r3, r2
 810367e:	d036      	beq.n	81036ee <HAL_DMA_IRQHandler+0x2ee>
 8103680:	687b      	ldr	r3, [r7, #4]
 8103682:	681b      	ldr	r3, [r3, #0]
 8103684:	4a61      	ldr	r2, [pc, #388]	; (810380c <HAL_DMA_IRQHandler+0x40c>)
 8103686:	4293      	cmp	r3, r2
 8103688:	d031      	beq.n	81036ee <HAL_DMA_IRQHandler+0x2ee>
 810368a:	687b      	ldr	r3, [r7, #4]
 810368c:	681b      	ldr	r3, [r3, #0]
 810368e:	4a60      	ldr	r2, [pc, #384]	; (8103810 <HAL_DMA_IRQHandler+0x410>)
 8103690:	4293      	cmp	r3, r2
 8103692:	d02c      	beq.n	81036ee <HAL_DMA_IRQHandler+0x2ee>
 8103694:	687b      	ldr	r3, [r7, #4]
 8103696:	681b      	ldr	r3, [r3, #0]
 8103698:	4a5e      	ldr	r2, [pc, #376]	; (8103814 <HAL_DMA_IRQHandler+0x414>)
 810369a:	4293      	cmp	r3, r2
 810369c:	d027      	beq.n	81036ee <HAL_DMA_IRQHandler+0x2ee>
 810369e:	687b      	ldr	r3, [r7, #4]
 81036a0:	681b      	ldr	r3, [r3, #0]
 81036a2:	4a5d      	ldr	r2, [pc, #372]	; (8103818 <HAL_DMA_IRQHandler+0x418>)
 81036a4:	4293      	cmp	r3, r2
 81036a6:	d022      	beq.n	81036ee <HAL_DMA_IRQHandler+0x2ee>
 81036a8:	687b      	ldr	r3, [r7, #4]
 81036aa:	681b      	ldr	r3, [r3, #0]
 81036ac:	4a5b      	ldr	r2, [pc, #364]	; (810381c <HAL_DMA_IRQHandler+0x41c>)
 81036ae:	4293      	cmp	r3, r2
 81036b0:	d01d      	beq.n	81036ee <HAL_DMA_IRQHandler+0x2ee>
 81036b2:	687b      	ldr	r3, [r7, #4]
 81036b4:	681b      	ldr	r3, [r3, #0]
 81036b6:	4a5a      	ldr	r2, [pc, #360]	; (8103820 <HAL_DMA_IRQHandler+0x420>)
 81036b8:	4293      	cmp	r3, r2
 81036ba:	d018      	beq.n	81036ee <HAL_DMA_IRQHandler+0x2ee>
 81036bc:	687b      	ldr	r3, [r7, #4]
 81036be:	681b      	ldr	r3, [r3, #0]
 81036c0:	4a58      	ldr	r2, [pc, #352]	; (8103824 <HAL_DMA_IRQHandler+0x424>)
 81036c2:	4293      	cmp	r3, r2
 81036c4:	d013      	beq.n	81036ee <HAL_DMA_IRQHandler+0x2ee>
 81036c6:	687b      	ldr	r3, [r7, #4]
 81036c8:	681b      	ldr	r3, [r3, #0]
 81036ca:	4a57      	ldr	r2, [pc, #348]	; (8103828 <HAL_DMA_IRQHandler+0x428>)
 81036cc:	4293      	cmp	r3, r2
 81036ce:	d00e      	beq.n	81036ee <HAL_DMA_IRQHandler+0x2ee>
 81036d0:	687b      	ldr	r3, [r7, #4]
 81036d2:	681b      	ldr	r3, [r3, #0]
 81036d4:	4a55      	ldr	r2, [pc, #340]	; (810382c <HAL_DMA_IRQHandler+0x42c>)
 81036d6:	4293      	cmp	r3, r2
 81036d8:	d009      	beq.n	81036ee <HAL_DMA_IRQHandler+0x2ee>
 81036da:	687b      	ldr	r3, [r7, #4]
 81036dc:	681b      	ldr	r3, [r3, #0]
 81036de:	4a54      	ldr	r2, [pc, #336]	; (8103830 <HAL_DMA_IRQHandler+0x430>)
 81036e0:	4293      	cmp	r3, r2
 81036e2:	d004      	beq.n	81036ee <HAL_DMA_IRQHandler+0x2ee>
 81036e4:	687b      	ldr	r3, [r7, #4]
 81036e6:	681b      	ldr	r3, [r3, #0]
 81036e8:	4a52      	ldr	r2, [pc, #328]	; (8103834 <HAL_DMA_IRQHandler+0x434>)
 81036ea:	4293      	cmp	r3, r2
 81036ec:	d10a      	bne.n	8103704 <HAL_DMA_IRQHandler+0x304>
 81036ee:	687b      	ldr	r3, [r7, #4]
 81036f0:	681b      	ldr	r3, [r3, #0]
 81036f2:	695b      	ldr	r3, [r3, #20]
 81036f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81036f8:	2b00      	cmp	r3, #0
 81036fa:	bf14      	ite	ne
 81036fc:	2301      	movne	r3, #1
 81036fe:	2300      	moveq	r3, #0
 8103700:	b2db      	uxtb	r3, r3
 8103702:	e003      	b.n	810370c <HAL_DMA_IRQHandler+0x30c>
 8103704:	687b      	ldr	r3, [r7, #4]
 8103706:	681b      	ldr	r3, [r3, #0]
 8103708:	681b      	ldr	r3, [r3, #0]
 810370a:	2300      	movs	r3, #0
 810370c:	2b00      	cmp	r3, #0
 810370e:	d00d      	beq.n	810372c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103710:	687b      	ldr	r3, [r7, #4]
 8103712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103714:	f003 031f 	and.w	r3, r3, #31
 8103718:	2201      	movs	r2, #1
 810371a:	409a      	lsls	r2, r3
 810371c:	6a3b      	ldr	r3, [r7, #32]
 810371e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8103720:	687b      	ldr	r3, [r7, #4]
 8103722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103724:	f043 0202 	orr.w	r2, r3, #2
 8103728:	687b      	ldr	r3, [r7, #4]
 810372a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 810372c:	687b      	ldr	r3, [r7, #4]
 810372e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103730:	f003 031f 	and.w	r3, r3, #31
 8103734:	2204      	movs	r2, #4
 8103736:	409a      	lsls	r2, r3
 8103738:	69bb      	ldr	r3, [r7, #24]
 810373a:	4013      	ands	r3, r2
 810373c:	2b00      	cmp	r3, #0
 810373e:	f000 808f 	beq.w	8103860 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8103742:	687b      	ldr	r3, [r7, #4]
 8103744:	681b      	ldr	r3, [r3, #0]
 8103746:	4a2c      	ldr	r2, [pc, #176]	; (81037f8 <HAL_DMA_IRQHandler+0x3f8>)
 8103748:	4293      	cmp	r3, r2
 810374a:	d04a      	beq.n	81037e2 <HAL_DMA_IRQHandler+0x3e2>
 810374c:	687b      	ldr	r3, [r7, #4]
 810374e:	681b      	ldr	r3, [r3, #0]
 8103750:	4a2a      	ldr	r2, [pc, #168]	; (81037fc <HAL_DMA_IRQHandler+0x3fc>)
 8103752:	4293      	cmp	r3, r2
 8103754:	d045      	beq.n	81037e2 <HAL_DMA_IRQHandler+0x3e2>
 8103756:	687b      	ldr	r3, [r7, #4]
 8103758:	681b      	ldr	r3, [r3, #0]
 810375a:	4a29      	ldr	r2, [pc, #164]	; (8103800 <HAL_DMA_IRQHandler+0x400>)
 810375c:	4293      	cmp	r3, r2
 810375e:	d040      	beq.n	81037e2 <HAL_DMA_IRQHandler+0x3e2>
 8103760:	687b      	ldr	r3, [r7, #4]
 8103762:	681b      	ldr	r3, [r3, #0]
 8103764:	4a27      	ldr	r2, [pc, #156]	; (8103804 <HAL_DMA_IRQHandler+0x404>)
 8103766:	4293      	cmp	r3, r2
 8103768:	d03b      	beq.n	81037e2 <HAL_DMA_IRQHandler+0x3e2>
 810376a:	687b      	ldr	r3, [r7, #4]
 810376c:	681b      	ldr	r3, [r3, #0]
 810376e:	4a26      	ldr	r2, [pc, #152]	; (8103808 <HAL_DMA_IRQHandler+0x408>)
 8103770:	4293      	cmp	r3, r2
 8103772:	d036      	beq.n	81037e2 <HAL_DMA_IRQHandler+0x3e2>
 8103774:	687b      	ldr	r3, [r7, #4]
 8103776:	681b      	ldr	r3, [r3, #0]
 8103778:	4a24      	ldr	r2, [pc, #144]	; (810380c <HAL_DMA_IRQHandler+0x40c>)
 810377a:	4293      	cmp	r3, r2
 810377c:	d031      	beq.n	81037e2 <HAL_DMA_IRQHandler+0x3e2>
 810377e:	687b      	ldr	r3, [r7, #4]
 8103780:	681b      	ldr	r3, [r3, #0]
 8103782:	4a23      	ldr	r2, [pc, #140]	; (8103810 <HAL_DMA_IRQHandler+0x410>)
 8103784:	4293      	cmp	r3, r2
 8103786:	d02c      	beq.n	81037e2 <HAL_DMA_IRQHandler+0x3e2>
 8103788:	687b      	ldr	r3, [r7, #4]
 810378a:	681b      	ldr	r3, [r3, #0]
 810378c:	4a21      	ldr	r2, [pc, #132]	; (8103814 <HAL_DMA_IRQHandler+0x414>)
 810378e:	4293      	cmp	r3, r2
 8103790:	d027      	beq.n	81037e2 <HAL_DMA_IRQHandler+0x3e2>
 8103792:	687b      	ldr	r3, [r7, #4]
 8103794:	681b      	ldr	r3, [r3, #0]
 8103796:	4a20      	ldr	r2, [pc, #128]	; (8103818 <HAL_DMA_IRQHandler+0x418>)
 8103798:	4293      	cmp	r3, r2
 810379a:	d022      	beq.n	81037e2 <HAL_DMA_IRQHandler+0x3e2>
 810379c:	687b      	ldr	r3, [r7, #4]
 810379e:	681b      	ldr	r3, [r3, #0]
 81037a0:	4a1e      	ldr	r2, [pc, #120]	; (810381c <HAL_DMA_IRQHandler+0x41c>)
 81037a2:	4293      	cmp	r3, r2
 81037a4:	d01d      	beq.n	81037e2 <HAL_DMA_IRQHandler+0x3e2>
 81037a6:	687b      	ldr	r3, [r7, #4]
 81037a8:	681b      	ldr	r3, [r3, #0]
 81037aa:	4a1d      	ldr	r2, [pc, #116]	; (8103820 <HAL_DMA_IRQHandler+0x420>)
 81037ac:	4293      	cmp	r3, r2
 81037ae:	d018      	beq.n	81037e2 <HAL_DMA_IRQHandler+0x3e2>
 81037b0:	687b      	ldr	r3, [r7, #4]
 81037b2:	681b      	ldr	r3, [r3, #0]
 81037b4:	4a1b      	ldr	r2, [pc, #108]	; (8103824 <HAL_DMA_IRQHandler+0x424>)
 81037b6:	4293      	cmp	r3, r2
 81037b8:	d013      	beq.n	81037e2 <HAL_DMA_IRQHandler+0x3e2>
 81037ba:	687b      	ldr	r3, [r7, #4]
 81037bc:	681b      	ldr	r3, [r3, #0]
 81037be:	4a1a      	ldr	r2, [pc, #104]	; (8103828 <HAL_DMA_IRQHandler+0x428>)
 81037c0:	4293      	cmp	r3, r2
 81037c2:	d00e      	beq.n	81037e2 <HAL_DMA_IRQHandler+0x3e2>
 81037c4:	687b      	ldr	r3, [r7, #4]
 81037c6:	681b      	ldr	r3, [r3, #0]
 81037c8:	4a18      	ldr	r2, [pc, #96]	; (810382c <HAL_DMA_IRQHandler+0x42c>)
 81037ca:	4293      	cmp	r3, r2
 81037cc:	d009      	beq.n	81037e2 <HAL_DMA_IRQHandler+0x3e2>
 81037ce:	687b      	ldr	r3, [r7, #4]
 81037d0:	681b      	ldr	r3, [r3, #0]
 81037d2:	4a17      	ldr	r2, [pc, #92]	; (8103830 <HAL_DMA_IRQHandler+0x430>)
 81037d4:	4293      	cmp	r3, r2
 81037d6:	d004      	beq.n	81037e2 <HAL_DMA_IRQHandler+0x3e2>
 81037d8:	687b      	ldr	r3, [r7, #4]
 81037da:	681b      	ldr	r3, [r3, #0]
 81037dc:	4a15      	ldr	r2, [pc, #84]	; (8103834 <HAL_DMA_IRQHandler+0x434>)
 81037de:	4293      	cmp	r3, r2
 81037e0:	d12a      	bne.n	8103838 <HAL_DMA_IRQHandler+0x438>
 81037e2:	687b      	ldr	r3, [r7, #4]
 81037e4:	681b      	ldr	r3, [r3, #0]
 81037e6:	681b      	ldr	r3, [r3, #0]
 81037e8:	f003 0302 	and.w	r3, r3, #2
 81037ec:	2b00      	cmp	r3, #0
 81037ee:	bf14      	ite	ne
 81037f0:	2301      	movne	r3, #1
 81037f2:	2300      	moveq	r3, #0
 81037f4:	b2db      	uxtb	r3, r3
 81037f6:	e023      	b.n	8103840 <HAL_DMA_IRQHandler+0x440>
 81037f8:	40020010 	.word	0x40020010
 81037fc:	40020028 	.word	0x40020028
 8103800:	40020040 	.word	0x40020040
 8103804:	40020058 	.word	0x40020058
 8103808:	40020070 	.word	0x40020070
 810380c:	40020088 	.word	0x40020088
 8103810:	400200a0 	.word	0x400200a0
 8103814:	400200b8 	.word	0x400200b8
 8103818:	40020410 	.word	0x40020410
 810381c:	40020428 	.word	0x40020428
 8103820:	40020440 	.word	0x40020440
 8103824:	40020458 	.word	0x40020458
 8103828:	40020470 	.word	0x40020470
 810382c:	40020488 	.word	0x40020488
 8103830:	400204a0 	.word	0x400204a0
 8103834:	400204b8 	.word	0x400204b8
 8103838:	687b      	ldr	r3, [r7, #4]
 810383a:	681b      	ldr	r3, [r3, #0]
 810383c:	681b      	ldr	r3, [r3, #0]
 810383e:	2300      	movs	r3, #0
 8103840:	2b00      	cmp	r3, #0
 8103842:	d00d      	beq.n	8103860 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103844:	687b      	ldr	r3, [r7, #4]
 8103846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103848:	f003 031f 	and.w	r3, r3, #31
 810384c:	2204      	movs	r2, #4
 810384e:	409a      	lsls	r2, r3
 8103850:	6a3b      	ldr	r3, [r7, #32]
 8103852:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8103854:	687b      	ldr	r3, [r7, #4]
 8103856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103858:	f043 0204 	orr.w	r2, r3, #4
 810385c:	687b      	ldr	r3, [r7, #4]
 810385e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103860:	687b      	ldr	r3, [r7, #4]
 8103862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103864:	f003 031f 	and.w	r3, r3, #31
 8103868:	2210      	movs	r2, #16
 810386a:	409a      	lsls	r2, r3
 810386c:	69bb      	ldr	r3, [r7, #24]
 810386e:	4013      	ands	r3, r2
 8103870:	2b00      	cmp	r3, #0
 8103872:	f000 80a6 	beq.w	81039c2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8103876:	687b      	ldr	r3, [r7, #4]
 8103878:	681b      	ldr	r3, [r3, #0]
 810387a:	4a85      	ldr	r2, [pc, #532]	; (8103a90 <HAL_DMA_IRQHandler+0x690>)
 810387c:	4293      	cmp	r3, r2
 810387e:	d04a      	beq.n	8103916 <HAL_DMA_IRQHandler+0x516>
 8103880:	687b      	ldr	r3, [r7, #4]
 8103882:	681b      	ldr	r3, [r3, #0]
 8103884:	4a83      	ldr	r2, [pc, #524]	; (8103a94 <HAL_DMA_IRQHandler+0x694>)
 8103886:	4293      	cmp	r3, r2
 8103888:	d045      	beq.n	8103916 <HAL_DMA_IRQHandler+0x516>
 810388a:	687b      	ldr	r3, [r7, #4]
 810388c:	681b      	ldr	r3, [r3, #0]
 810388e:	4a82      	ldr	r2, [pc, #520]	; (8103a98 <HAL_DMA_IRQHandler+0x698>)
 8103890:	4293      	cmp	r3, r2
 8103892:	d040      	beq.n	8103916 <HAL_DMA_IRQHandler+0x516>
 8103894:	687b      	ldr	r3, [r7, #4]
 8103896:	681b      	ldr	r3, [r3, #0]
 8103898:	4a80      	ldr	r2, [pc, #512]	; (8103a9c <HAL_DMA_IRQHandler+0x69c>)
 810389a:	4293      	cmp	r3, r2
 810389c:	d03b      	beq.n	8103916 <HAL_DMA_IRQHandler+0x516>
 810389e:	687b      	ldr	r3, [r7, #4]
 81038a0:	681b      	ldr	r3, [r3, #0]
 81038a2:	4a7f      	ldr	r2, [pc, #508]	; (8103aa0 <HAL_DMA_IRQHandler+0x6a0>)
 81038a4:	4293      	cmp	r3, r2
 81038a6:	d036      	beq.n	8103916 <HAL_DMA_IRQHandler+0x516>
 81038a8:	687b      	ldr	r3, [r7, #4]
 81038aa:	681b      	ldr	r3, [r3, #0]
 81038ac:	4a7d      	ldr	r2, [pc, #500]	; (8103aa4 <HAL_DMA_IRQHandler+0x6a4>)
 81038ae:	4293      	cmp	r3, r2
 81038b0:	d031      	beq.n	8103916 <HAL_DMA_IRQHandler+0x516>
 81038b2:	687b      	ldr	r3, [r7, #4]
 81038b4:	681b      	ldr	r3, [r3, #0]
 81038b6:	4a7c      	ldr	r2, [pc, #496]	; (8103aa8 <HAL_DMA_IRQHandler+0x6a8>)
 81038b8:	4293      	cmp	r3, r2
 81038ba:	d02c      	beq.n	8103916 <HAL_DMA_IRQHandler+0x516>
 81038bc:	687b      	ldr	r3, [r7, #4]
 81038be:	681b      	ldr	r3, [r3, #0]
 81038c0:	4a7a      	ldr	r2, [pc, #488]	; (8103aac <HAL_DMA_IRQHandler+0x6ac>)
 81038c2:	4293      	cmp	r3, r2
 81038c4:	d027      	beq.n	8103916 <HAL_DMA_IRQHandler+0x516>
 81038c6:	687b      	ldr	r3, [r7, #4]
 81038c8:	681b      	ldr	r3, [r3, #0]
 81038ca:	4a79      	ldr	r2, [pc, #484]	; (8103ab0 <HAL_DMA_IRQHandler+0x6b0>)
 81038cc:	4293      	cmp	r3, r2
 81038ce:	d022      	beq.n	8103916 <HAL_DMA_IRQHandler+0x516>
 81038d0:	687b      	ldr	r3, [r7, #4]
 81038d2:	681b      	ldr	r3, [r3, #0]
 81038d4:	4a77      	ldr	r2, [pc, #476]	; (8103ab4 <HAL_DMA_IRQHandler+0x6b4>)
 81038d6:	4293      	cmp	r3, r2
 81038d8:	d01d      	beq.n	8103916 <HAL_DMA_IRQHandler+0x516>
 81038da:	687b      	ldr	r3, [r7, #4]
 81038dc:	681b      	ldr	r3, [r3, #0]
 81038de:	4a76      	ldr	r2, [pc, #472]	; (8103ab8 <HAL_DMA_IRQHandler+0x6b8>)
 81038e0:	4293      	cmp	r3, r2
 81038e2:	d018      	beq.n	8103916 <HAL_DMA_IRQHandler+0x516>
 81038e4:	687b      	ldr	r3, [r7, #4]
 81038e6:	681b      	ldr	r3, [r3, #0]
 81038e8:	4a74      	ldr	r2, [pc, #464]	; (8103abc <HAL_DMA_IRQHandler+0x6bc>)
 81038ea:	4293      	cmp	r3, r2
 81038ec:	d013      	beq.n	8103916 <HAL_DMA_IRQHandler+0x516>
 81038ee:	687b      	ldr	r3, [r7, #4]
 81038f0:	681b      	ldr	r3, [r3, #0]
 81038f2:	4a73      	ldr	r2, [pc, #460]	; (8103ac0 <HAL_DMA_IRQHandler+0x6c0>)
 81038f4:	4293      	cmp	r3, r2
 81038f6:	d00e      	beq.n	8103916 <HAL_DMA_IRQHandler+0x516>
 81038f8:	687b      	ldr	r3, [r7, #4]
 81038fa:	681b      	ldr	r3, [r3, #0]
 81038fc:	4a71      	ldr	r2, [pc, #452]	; (8103ac4 <HAL_DMA_IRQHandler+0x6c4>)
 81038fe:	4293      	cmp	r3, r2
 8103900:	d009      	beq.n	8103916 <HAL_DMA_IRQHandler+0x516>
 8103902:	687b      	ldr	r3, [r7, #4]
 8103904:	681b      	ldr	r3, [r3, #0]
 8103906:	4a70      	ldr	r2, [pc, #448]	; (8103ac8 <HAL_DMA_IRQHandler+0x6c8>)
 8103908:	4293      	cmp	r3, r2
 810390a:	d004      	beq.n	8103916 <HAL_DMA_IRQHandler+0x516>
 810390c:	687b      	ldr	r3, [r7, #4]
 810390e:	681b      	ldr	r3, [r3, #0]
 8103910:	4a6e      	ldr	r2, [pc, #440]	; (8103acc <HAL_DMA_IRQHandler+0x6cc>)
 8103912:	4293      	cmp	r3, r2
 8103914:	d10a      	bne.n	810392c <HAL_DMA_IRQHandler+0x52c>
 8103916:	687b      	ldr	r3, [r7, #4]
 8103918:	681b      	ldr	r3, [r3, #0]
 810391a:	681b      	ldr	r3, [r3, #0]
 810391c:	f003 0308 	and.w	r3, r3, #8
 8103920:	2b00      	cmp	r3, #0
 8103922:	bf14      	ite	ne
 8103924:	2301      	movne	r3, #1
 8103926:	2300      	moveq	r3, #0
 8103928:	b2db      	uxtb	r3, r3
 810392a:	e009      	b.n	8103940 <HAL_DMA_IRQHandler+0x540>
 810392c:	687b      	ldr	r3, [r7, #4]
 810392e:	681b      	ldr	r3, [r3, #0]
 8103930:	681b      	ldr	r3, [r3, #0]
 8103932:	f003 0304 	and.w	r3, r3, #4
 8103936:	2b00      	cmp	r3, #0
 8103938:	bf14      	ite	ne
 810393a:	2301      	movne	r3, #1
 810393c:	2300      	moveq	r3, #0
 810393e:	b2db      	uxtb	r3, r3
 8103940:	2b00      	cmp	r3, #0
 8103942:	d03e      	beq.n	81039c2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103944:	687b      	ldr	r3, [r7, #4]
 8103946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103948:	f003 031f 	and.w	r3, r3, #31
 810394c:	2210      	movs	r2, #16
 810394e:	409a      	lsls	r2, r3
 8103950:	6a3b      	ldr	r3, [r7, #32]
 8103952:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8103954:	687b      	ldr	r3, [r7, #4]
 8103956:	681b      	ldr	r3, [r3, #0]
 8103958:	681b      	ldr	r3, [r3, #0]
 810395a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810395e:	2b00      	cmp	r3, #0
 8103960:	d018      	beq.n	8103994 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8103962:	687b      	ldr	r3, [r7, #4]
 8103964:	681b      	ldr	r3, [r3, #0]
 8103966:	681b      	ldr	r3, [r3, #0]
 8103968:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 810396c:	2b00      	cmp	r3, #0
 810396e:	d108      	bne.n	8103982 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8103970:	687b      	ldr	r3, [r7, #4]
 8103972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103974:	2b00      	cmp	r3, #0
 8103976:	d024      	beq.n	81039c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8103978:	687b      	ldr	r3, [r7, #4]
 810397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810397c:	6878      	ldr	r0, [r7, #4]
 810397e:	4798      	blx	r3
 8103980:	e01f      	b.n	81039c2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8103982:	687b      	ldr	r3, [r7, #4]
 8103984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103986:	2b00      	cmp	r3, #0
 8103988:	d01b      	beq.n	81039c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 810398a:	687b      	ldr	r3, [r7, #4]
 810398c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810398e:	6878      	ldr	r0, [r7, #4]
 8103990:	4798      	blx	r3
 8103992:	e016      	b.n	81039c2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8103994:	687b      	ldr	r3, [r7, #4]
 8103996:	681b      	ldr	r3, [r3, #0]
 8103998:	681b      	ldr	r3, [r3, #0]
 810399a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810399e:	2b00      	cmp	r3, #0
 81039a0:	d107      	bne.n	81039b2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 81039a2:	687b      	ldr	r3, [r7, #4]
 81039a4:	681b      	ldr	r3, [r3, #0]
 81039a6:	681a      	ldr	r2, [r3, #0]
 81039a8:	687b      	ldr	r3, [r7, #4]
 81039aa:	681b      	ldr	r3, [r3, #0]
 81039ac:	f022 0208 	bic.w	r2, r2, #8
 81039b0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 81039b2:	687b      	ldr	r3, [r7, #4]
 81039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81039b6:	2b00      	cmp	r3, #0
 81039b8:	d003      	beq.n	81039c2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 81039ba:	687b      	ldr	r3, [r7, #4]
 81039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81039be:	6878      	ldr	r0, [r7, #4]
 81039c0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81039c2:	687b      	ldr	r3, [r7, #4]
 81039c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81039c6:	f003 031f 	and.w	r3, r3, #31
 81039ca:	2220      	movs	r2, #32
 81039cc:	409a      	lsls	r2, r3
 81039ce:	69bb      	ldr	r3, [r7, #24]
 81039d0:	4013      	ands	r3, r2
 81039d2:	2b00      	cmp	r3, #0
 81039d4:	f000 8110 	beq.w	8103bf8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 81039d8:	687b      	ldr	r3, [r7, #4]
 81039da:	681b      	ldr	r3, [r3, #0]
 81039dc:	4a2c      	ldr	r2, [pc, #176]	; (8103a90 <HAL_DMA_IRQHandler+0x690>)
 81039de:	4293      	cmp	r3, r2
 81039e0:	d04a      	beq.n	8103a78 <HAL_DMA_IRQHandler+0x678>
 81039e2:	687b      	ldr	r3, [r7, #4]
 81039e4:	681b      	ldr	r3, [r3, #0]
 81039e6:	4a2b      	ldr	r2, [pc, #172]	; (8103a94 <HAL_DMA_IRQHandler+0x694>)
 81039e8:	4293      	cmp	r3, r2
 81039ea:	d045      	beq.n	8103a78 <HAL_DMA_IRQHandler+0x678>
 81039ec:	687b      	ldr	r3, [r7, #4]
 81039ee:	681b      	ldr	r3, [r3, #0]
 81039f0:	4a29      	ldr	r2, [pc, #164]	; (8103a98 <HAL_DMA_IRQHandler+0x698>)
 81039f2:	4293      	cmp	r3, r2
 81039f4:	d040      	beq.n	8103a78 <HAL_DMA_IRQHandler+0x678>
 81039f6:	687b      	ldr	r3, [r7, #4]
 81039f8:	681b      	ldr	r3, [r3, #0]
 81039fa:	4a28      	ldr	r2, [pc, #160]	; (8103a9c <HAL_DMA_IRQHandler+0x69c>)
 81039fc:	4293      	cmp	r3, r2
 81039fe:	d03b      	beq.n	8103a78 <HAL_DMA_IRQHandler+0x678>
 8103a00:	687b      	ldr	r3, [r7, #4]
 8103a02:	681b      	ldr	r3, [r3, #0]
 8103a04:	4a26      	ldr	r2, [pc, #152]	; (8103aa0 <HAL_DMA_IRQHandler+0x6a0>)
 8103a06:	4293      	cmp	r3, r2
 8103a08:	d036      	beq.n	8103a78 <HAL_DMA_IRQHandler+0x678>
 8103a0a:	687b      	ldr	r3, [r7, #4]
 8103a0c:	681b      	ldr	r3, [r3, #0]
 8103a0e:	4a25      	ldr	r2, [pc, #148]	; (8103aa4 <HAL_DMA_IRQHandler+0x6a4>)
 8103a10:	4293      	cmp	r3, r2
 8103a12:	d031      	beq.n	8103a78 <HAL_DMA_IRQHandler+0x678>
 8103a14:	687b      	ldr	r3, [r7, #4]
 8103a16:	681b      	ldr	r3, [r3, #0]
 8103a18:	4a23      	ldr	r2, [pc, #140]	; (8103aa8 <HAL_DMA_IRQHandler+0x6a8>)
 8103a1a:	4293      	cmp	r3, r2
 8103a1c:	d02c      	beq.n	8103a78 <HAL_DMA_IRQHandler+0x678>
 8103a1e:	687b      	ldr	r3, [r7, #4]
 8103a20:	681b      	ldr	r3, [r3, #0]
 8103a22:	4a22      	ldr	r2, [pc, #136]	; (8103aac <HAL_DMA_IRQHandler+0x6ac>)
 8103a24:	4293      	cmp	r3, r2
 8103a26:	d027      	beq.n	8103a78 <HAL_DMA_IRQHandler+0x678>
 8103a28:	687b      	ldr	r3, [r7, #4]
 8103a2a:	681b      	ldr	r3, [r3, #0]
 8103a2c:	4a20      	ldr	r2, [pc, #128]	; (8103ab0 <HAL_DMA_IRQHandler+0x6b0>)
 8103a2e:	4293      	cmp	r3, r2
 8103a30:	d022      	beq.n	8103a78 <HAL_DMA_IRQHandler+0x678>
 8103a32:	687b      	ldr	r3, [r7, #4]
 8103a34:	681b      	ldr	r3, [r3, #0]
 8103a36:	4a1f      	ldr	r2, [pc, #124]	; (8103ab4 <HAL_DMA_IRQHandler+0x6b4>)
 8103a38:	4293      	cmp	r3, r2
 8103a3a:	d01d      	beq.n	8103a78 <HAL_DMA_IRQHandler+0x678>
 8103a3c:	687b      	ldr	r3, [r7, #4]
 8103a3e:	681b      	ldr	r3, [r3, #0]
 8103a40:	4a1d      	ldr	r2, [pc, #116]	; (8103ab8 <HAL_DMA_IRQHandler+0x6b8>)
 8103a42:	4293      	cmp	r3, r2
 8103a44:	d018      	beq.n	8103a78 <HAL_DMA_IRQHandler+0x678>
 8103a46:	687b      	ldr	r3, [r7, #4]
 8103a48:	681b      	ldr	r3, [r3, #0]
 8103a4a:	4a1c      	ldr	r2, [pc, #112]	; (8103abc <HAL_DMA_IRQHandler+0x6bc>)
 8103a4c:	4293      	cmp	r3, r2
 8103a4e:	d013      	beq.n	8103a78 <HAL_DMA_IRQHandler+0x678>
 8103a50:	687b      	ldr	r3, [r7, #4]
 8103a52:	681b      	ldr	r3, [r3, #0]
 8103a54:	4a1a      	ldr	r2, [pc, #104]	; (8103ac0 <HAL_DMA_IRQHandler+0x6c0>)
 8103a56:	4293      	cmp	r3, r2
 8103a58:	d00e      	beq.n	8103a78 <HAL_DMA_IRQHandler+0x678>
 8103a5a:	687b      	ldr	r3, [r7, #4]
 8103a5c:	681b      	ldr	r3, [r3, #0]
 8103a5e:	4a19      	ldr	r2, [pc, #100]	; (8103ac4 <HAL_DMA_IRQHandler+0x6c4>)
 8103a60:	4293      	cmp	r3, r2
 8103a62:	d009      	beq.n	8103a78 <HAL_DMA_IRQHandler+0x678>
 8103a64:	687b      	ldr	r3, [r7, #4]
 8103a66:	681b      	ldr	r3, [r3, #0]
 8103a68:	4a17      	ldr	r2, [pc, #92]	; (8103ac8 <HAL_DMA_IRQHandler+0x6c8>)
 8103a6a:	4293      	cmp	r3, r2
 8103a6c:	d004      	beq.n	8103a78 <HAL_DMA_IRQHandler+0x678>
 8103a6e:	687b      	ldr	r3, [r7, #4]
 8103a70:	681b      	ldr	r3, [r3, #0]
 8103a72:	4a16      	ldr	r2, [pc, #88]	; (8103acc <HAL_DMA_IRQHandler+0x6cc>)
 8103a74:	4293      	cmp	r3, r2
 8103a76:	d12b      	bne.n	8103ad0 <HAL_DMA_IRQHandler+0x6d0>
 8103a78:	687b      	ldr	r3, [r7, #4]
 8103a7a:	681b      	ldr	r3, [r3, #0]
 8103a7c:	681b      	ldr	r3, [r3, #0]
 8103a7e:	f003 0310 	and.w	r3, r3, #16
 8103a82:	2b00      	cmp	r3, #0
 8103a84:	bf14      	ite	ne
 8103a86:	2301      	movne	r3, #1
 8103a88:	2300      	moveq	r3, #0
 8103a8a:	b2db      	uxtb	r3, r3
 8103a8c:	e02a      	b.n	8103ae4 <HAL_DMA_IRQHandler+0x6e4>
 8103a8e:	bf00      	nop
 8103a90:	40020010 	.word	0x40020010
 8103a94:	40020028 	.word	0x40020028
 8103a98:	40020040 	.word	0x40020040
 8103a9c:	40020058 	.word	0x40020058
 8103aa0:	40020070 	.word	0x40020070
 8103aa4:	40020088 	.word	0x40020088
 8103aa8:	400200a0 	.word	0x400200a0
 8103aac:	400200b8 	.word	0x400200b8
 8103ab0:	40020410 	.word	0x40020410
 8103ab4:	40020428 	.word	0x40020428
 8103ab8:	40020440 	.word	0x40020440
 8103abc:	40020458 	.word	0x40020458
 8103ac0:	40020470 	.word	0x40020470
 8103ac4:	40020488 	.word	0x40020488
 8103ac8:	400204a0 	.word	0x400204a0
 8103acc:	400204b8 	.word	0x400204b8
 8103ad0:	687b      	ldr	r3, [r7, #4]
 8103ad2:	681b      	ldr	r3, [r3, #0]
 8103ad4:	681b      	ldr	r3, [r3, #0]
 8103ad6:	f003 0302 	and.w	r3, r3, #2
 8103ada:	2b00      	cmp	r3, #0
 8103adc:	bf14      	ite	ne
 8103ade:	2301      	movne	r3, #1
 8103ae0:	2300      	moveq	r3, #0
 8103ae2:	b2db      	uxtb	r3, r3
 8103ae4:	2b00      	cmp	r3, #0
 8103ae6:	f000 8087 	beq.w	8103bf8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103aea:	687b      	ldr	r3, [r7, #4]
 8103aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103aee:	f003 031f 	and.w	r3, r3, #31
 8103af2:	2220      	movs	r2, #32
 8103af4:	409a      	lsls	r2, r3
 8103af6:	6a3b      	ldr	r3, [r7, #32]
 8103af8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8103afa:	687b      	ldr	r3, [r7, #4]
 8103afc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8103b00:	b2db      	uxtb	r3, r3
 8103b02:	2b04      	cmp	r3, #4
 8103b04:	d139      	bne.n	8103b7a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8103b06:	687b      	ldr	r3, [r7, #4]
 8103b08:	681b      	ldr	r3, [r3, #0]
 8103b0a:	681a      	ldr	r2, [r3, #0]
 8103b0c:	687b      	ldr	r3, [r7, #4]
 8103b0e:	681b      	ldr	r3, [r3, #0]
 8103b10:	f022 0216 	bic.w	r2, r2, #22
 8103b14:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8103b16:	687b      	ldr	r3, [r7, #4]
 8103b18:	681b      	ldr	r3, [r3, #0]
 8103b1a:	695a      	ldr	r2, [r3, #20]
 8103b1c:	687b      	ldr	r3, [r7, #4]
 8103b1e:	681b      	ldr	r3, [r3, #0]
 8103b20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8103b24:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8103b26:	687b      	ldr	r3, [r7, #4]
 8103b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103b2a:	2b00      	cmp	r3, #0
 8103b2c:	d103      	bne.n	8103b36 <HAL_DMA_IRQHandler+0x736>
 8103b2e:	687b      	ldr	r3, [r7, #4]
 8103b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103b32:	2b00      	cmp	r3, #0
 8103b34:	d007      	beq.n	8103b46 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8103b36:	687b      	ldr	r3, [r7, #4]
 8103b38:	681b      	ldr	r3, [r3, #0]
 8103b3a:	681a      	ldr	r2, [r3, #0]
 8103b3c:	687b      	ldr	r3, [r7, #4]
 8103b3e:	681b      	ldr	r3, [r3, #0]
 8103b40:	f022 0208 	bic.w	r2, r2, #8
 8103b44:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8103b46:	687b      	ldr	r3, [r7, #4]
 8103b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103b4a:	f003 031f 	and.w	r3, r3, #31
 8103b4e:	223f      	movs	r2, #63	; 0x3f
 8103b50:	409a      	lsls	r2, r3
 8103b52:	6a3b      	ldr	r3, [r7, #32]
 8103b54:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8103b56:	687b      	ldr	r3, [r7, #4]
 8103b58:	2200      	movs	r2, #0
 8103b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8103b5e:	687b      	ldr	r3, [r7, #4]
 8103b60:	2201      	movs	r2, #1
 8103b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8103b66:	687b      	ldr	r3, [r7, #4]
 8103b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103b6a:	2b00      	cmp	r3, #0
 8103b6c:	f000 834a 	beq.w	8104204 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8103b70:	687b      	ldr	r3, [r7, #4]
 8103b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103b74:	6878      	ldr	r0, [r7, #4]
 8103b76:	4798      	blx	r3
          }
          return;
 8103b78:	e344      	b.n	8104204 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8103b7a:	687b      	ldr	r3, [r7, #4]
 8103b7c:	681b      	ldr	r3, [r3, #0]
 8103b7e:	681b      	ldr	r3, [r3, #0]
 8103b80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103b84:	2b00      	cmp	r3, #0
 8103b86:	d018      	beq.n	8103bba <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8103b88:	687b      	ldr	r3, [r7, #4]
 8103b8a:	681b      	ldr	r3, [r3, #0]
 8103b8c:	681b      	ldr	r3, [r3, #0]
 8103b8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8103b92:	2b00      	cmp	r3, #0
 8103b94:	d108      	bne.n	8103ba8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8103b96:	687b      	ldr	r3, [r7, #4]
 8103b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103b9a:	2b00      	cmp	r3, #0
 8103b9c:	d02c      	beq.n	8103bf8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8103b9e:	687b      	ldr	r3, [r7, #4]
 8103ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103ba2:	6878      	ldr	r0, [r7, #4]
 8103ba4:	4798      	blx	r3
 8103ba6:	e027      	b.n	8103bf8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8103ba8:	687b      	ldr	r3, [r7, #4]
 8103baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103bac:	2b00      	cmp	r3, #0
 8103bae:	d023      	beq.n	8103bf8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8103bb0:	687b      	ldr	r3, [r7, #4]
 8103bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103bb4:	6878      	ldr	r0, [r7, #4]
 8103bb6:	4798      	blx	r3
 8103bb8:	e01e      	b.n	8103bf8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8103bba:	687b      	ldr	r3, [r7, #4]
 8103bbc:	681b      	ldr	r3, [r3, #0]
 8103bbe:	681b      	ldr	r3, [r3, #0]
 8103bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103bc4:	2b00      	cmp	r3, #0
 8103bc6:	d10f      	bne.n	8103be8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8103bc8:	687b      	ldr	r3, [r7, #4]
 8103bca:	681b      	ldr	r3, [r3, #0]
 8103bcc:	681a      	ldr	r2, [r3, #0]
 8103bce:	687b      	ldr	r3, [r7, #4]
 8103bd0:	681b      	ldr	r3, [r3, #0]
 8103bd2:	f022 0210 	bic.w	r2, r2, #16
 8103bd6:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8103bd8:	687b      	ldr	r3, [r7, #4]
 8103bda:	2200      	movs	r2, #0
 8103bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8103be0:	687b      	ldr	r3, [r7, #4]
 8103be2:	2201      	movs	r2, #1
 8103be4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8103be8:	687b      	ldr	r3, [r7, #4]
 8103bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103bec:	2b00      	cmp	r3, #0
 8103bee:	d003      	beq.n	8103bf8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8103bf0:	687b      	ldr	r3, [r7, #4]
 8103bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103bf4:	6878      	ldr	r0, [r7, #4]
 8103bf6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8103bf8:	687b      	ldr	r3, [r7, #4]
 8103bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103bfc:	2b00      	cmp	r3, #0
 8103bfe:	f000 8306 	beq.w	810420e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8103c02:	687b      	ldr	r3, [r7, #4]
 8103c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103c06:	f003 0301 	and.w	r3, r3, #1
 8103c0a:	2b00      	cmp	r3, #0
 8103c0c:	f000 8088 	beq.w	8103d20 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8103c10:	687b      	ldr	r3, [r7, #4]
 8103c12:	2204      	movs	r2, #4
 8103c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8103c18:	687b      	ldr	r3, [r7, #4]
 8103c1a:	681b      	ldr	r3, [r3, #0]
 8103c1c:	4a7a      	ldr	r2, [pc, #488]	; (8103e08 <HAL_DMA_IRQHandler+0xa08>)
 8103c1e:	4293      	cmp	r3, r2
 8103c20:	d04a      	beq.n	8103cb8 <HAL_DMA_IRQHandler+0x8b8>
 8103c22:	687b      	ldr	r3, [r7, #4]
 8103c24:	681b      	ldr	r3, [r3, #0]
 8103c26:	4a79      	ldr	r2, [pc, #484]	; (8103e0c <HAL_DMA_IRQHandler+0xa0c>)
 8103c28:	4293      	cmp	r3, r2
 8103c2a:	d045      	beq.n	8103cb8 <HAL_DMA_IRQHandler+0x8b8>
 8103c2c:	687b      	ldr	r3, [r7, #4]
 8103c2e:	681b      	ldr	r3, [r3, #0]
 8103c30:	4a77      	ldr	r2, [pc, #476]	; (8103e10 <HAL_DMA_IRQHandler+0xa10>)
 8103c32:	4293      	cmp	r3, r2
 8103c34:	d040      	beq.n	8103cb8 <HAL_DMA_IRQHandler+0x8b8>
 8103c36:	687b      	ldr	r3, [r7, #4]
 8103c38:	681b      	ldr	r3, [r3, #0]
 8103c3a:	4a76      	ldr	r2, [pc, #472]	; (8103e14 <HAL_DMA_IRQHandler+0xa14>)
 8103c3c:	4293      	cmp	r3, r2
 8103c3e:	d03b      	beq.n	8103cb8 <HAL_DMA_IRQHandler+0x8b8>
 8103c40:	687b      	ldr	r3, [r7, #4]
 8103c42:	681b      	ldr	r3, [r3, #0]
 8103c44:	4a74      	ldr	r2, [pc, #464]	; (8103e18 <HAL_DMA_IRQHandler+0xa18>)
 8103c46:	4293      	cmp	r3, r2
 8103c48:	d036      	beq.n	8103cb8 <HAL_DMA_IRQHandler+0x8b8>
 8103c4a:	687b      	ldr	r3, [r7, #4]
 8103c4c:	681b      	ldr	r3, [r3, #0]
 8103c4e:	4a73      	ldr	r2, [pc, #460]	; (8103e1c <HAL_DMA_IRQHandler+0xa1c>)
 8103c50:	4293      	cmp	r3, r2
 8103c52:	d031      	beq.n	8103cb8 <HAL_DMA_IRQHandler+0x8b8>
 8103c54:	687b      	ldr	r3, [r7, #4]
 8103c56:	681b      	ldr	r3, [r3, #0]
 8103c58:	4a71      	ldr	r2, [pc, #452]	; (8103e20 <HAL_DMA_IRQHandler+0xa20>)
 8103c5a:	4293      	cmp	r3, r2
 8103c5c:	d02c      	beq.n	8103cb8 <HAL_DMA_IRQHandler+0x8b8>
 8103c5e:	687b      	ldr	r3, [r7, #4]
 8103c60:	681b      	ldr	r3, [r3, #0]
 8103c62:	4a70      	ldr	r2, [pc, #448]	; (8103e24 <HAL_DMA_IRQHandler+0xa24>)
 8103c64:	4293      	cmp	r3, r2
 8103c66:	d027      	beq.n	8103cb8 <HAL_DMA_IRQHandler+0x8b8>
 8103c68:	687b      	ldr	r3, [r7, #4]
 8103c6a:	681b      	ldr	r3, [r3, #0]
 8103c6c:	4a6e      	ldr	r2, [pc, #440]	; (8103e28 <HAL_DMA_IRQHandler+0xa28>)
 8103c6e:	4293      	cmp	r3, r2
 8103c70:	d022      	beq.n	8103cb8 <HAL_DMA_IRQHandler+0x8b8>
 8103c72:	687b      	ldr	r3, [r7, #4]
 8103c74:	681b      	ldr	r3, [r3, #0]
 8103c76:	4a6d      	ldr	r2, [pc, #436]	; (8103e2c <HAL_DMA_IRQHandler+0xa2c>)
 8103c78:	4293      	cmp	r3, r2
 8103c7a:	d01d      	beq.n	8103cb8 <HAL_DMA_IRQHandler+0x8b8>
 8103c7c:	687b      	ldr	r3, [r7, #4]
 8103c7e:	681b      	ldr	r3, [r3, #0]
 8103c80:	4a6b      	ldr	r2, [pc, #428]	; (8103e30 <HAL_DMA_IRQHandler+0xa30>)
 8103c82:	4293      	cmp	r3, r2
 8103c84:	d018      	beq.n	8103cb8 <HAL_DMA_IRQHandler+0x8b8>
 8103c86:	687b      	ldr	r3, [r7, #4]
 8103c88:	681b      	ldr	r3, [r3, #0]
 8103c8a:	4a6a      	ldr	r2, [pc, #424]	; (8103e34 <HAL_DMA_IRQHandler+0xa34>)
 8103c8c:	4293      	cmp	r3, r2
 8103c8e:	d013      	beq.n	8103cb8 <HAL_DMA_IRQHandler+0x8b8>
 8103c90:	687b      	ldr	r3, [r7, #4]
 8103c92:	681b      	ldr	r3, [r3, #0]
 8103c94:	4a68      	ldr	r2, [pc, #416]	; (8103e38 <HAL_DMA_IRQHandler+0xa38>)
 8103c96:	4293      	cmp	r3, r2
 8103c98:	d00e      	beq.n	8103cb8 <HAL_DMA_IRQHandler+0x8b8>
 8103c9a:	687b      	ldr	r3, [r7, #4]
 8103c9c:	681b      	ldr	r3, [r3, #0]
 8103c9e:	4a67      	ldr	r2, [pc, #412]	; (8103e3c <HAL_DMA_IRQHandler+0xa3c>)
 8103ca0:	4293      	cmp	r3, r2
 8103ca2:	d009      	beq.n	8103cb8 <HAL_DMA_IRQHandler+0x8b8>
 8103ca4:	687b      	ldr	r3, [r7, #4]
 8103ca6:	681b      	ldr	r3, [r3, #0]
 8103ca8:	4a65      	ldr	r2, [pc, #404]	; (8103e40 <HAL_DMA_IRQHandler+0xa40>)
 8103caa:	4293      	cmp	r3, r2
 8103cac:	d004      	beq.n	8103cb8 <HAL_DMA_IRQHandler+0x8b8>
 8103cae:	687b      	ldr	r3, [r7, #4]
 8103cb0:	681b      	ldr	r3, [r3, #0]
 8103cb2:	4a64      	ldr	r2, [pc, #400]	; (8103e44 <HAL_DMA_IRQHandler+0xa44>)
 8103cb4:	4293      	cmp	r3, r2
 8103cb6:	d108      	bne.n	8103cca <HAL_DMA_IRQHandler+0x8ca>
 8103cb8:	687b      	ldr	r3, [r7, #4]
 8103cba:	681b      	ldr	r3, [r3, #0]
 8103cbc:	681a      	ldr	r2, [r3, #0]
 8103cbe:	687b      	ldr	r3, [r7, #4]
 8103cc0:	681b      	ldr	r3, [r3, #0]
 8103cc2:	f022 0201 	bic.w	r2, r2, #1
 8103cc6:	601a      	str	r2, [r3, #0]
 8103cc8:	e007      	b.n	8103cda <HAL_DMA_IRQHandler+0x8da>
 8103cca:	687b      	ldr	r3, [r7, #4]
 8103ccc:	681b      	ldr	r3, [r3, #0]
 8103cce:	681a      	ldr	r2, [r3, #0]
 8103cd0:	687b      	ldr	r3, [r7, #4]
 8103cd2:	681b      	ldr	r3, [r3, #0]
 8103cd4:	f022 0201 	bic.w	r2, r2, #1
 8103cd8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8103cda:	68fb      	ldr	r3, [r7, #12]
 8103cdc:	3301      	adds	r3, #1
 8103cde:	60fb      	str	r3, [r7, #12]
 8103ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103ce2:	429a      	cmp	r2, r3
 8103ce4:	d307      	bcc.n	8103cf6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8103ce6:	687b      	ldr	r3, [r7, #4]
 8103ce8:	681b      	ldr	r3, [r3, #0]
 8103cea:	681b      	ldr	r3, [r3, #0]
 8103cec:	f003 0301 	and.w	r3, r3, #1
 8103cf0:	2b00      	cmp	r3, #0
 8103cf2:	d1f2      	bne.n	8103cda <HAL_DMA_IRQHandler+0x8da>
 8103cf4:	e000      	b.n	8103cf8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8103cf6:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8103cf8:	687b      	ldr	r3, [r7, #4]
 8103cfa:	2200      	movs	r2, #0
 8103cfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8103d00:	687b      	ldr	r3, [r7, #4]
 8103d02:	681b      	ldr	r3, [r3, #0]
 8103d04:	681b      	ldr	r3, [r3, #0]
 8103d06:	f003 0301 	and.w	r3, r3, #1
 8103d0a:	2b00      	cmp	r3, #0
 8103d0c:	d004      	beq.n	8103d18 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8103d0e:	687b      	ldr	r3, [r7, #4]
 8103d10:	2203      	movs	r2, #3
 8103d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8103d16:	e003      	b.n	8103d20 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8103d18:	687b      	ldr	r3, [r7, #4]
 8103d1a:	2201      	movs	r2, #1
 8103d1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8103d20:	687b      	ldr	r3, [r7, #4]
 8103d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103d24:	2b00      	cmp	r3, #0
 8103d26:	f000 8272 	beq.w	810420e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8103d2a:	687b      	ldr	r3, [r7, #4]
 8103d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103d2e:	6878      	ldr	r0, [r7, #4]
 8103d30:	4798      	blx	r3
 8103d32:	e26c      	b.n	810420e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8103d34:	687b      	ldr	r3, [r7, #4]
 8103d36:	681b      	ldr	r3, [r3, #0]
 8103d38:	4a43      	ldr	r2, [pc, #268]	; (8103e48 <HAL_DMA_IRQHandler+0xa48>)
 8103d3a:	4293      	cmp	r3, r2
 8103d3c:	d022      	beq.n	8103d84 <HAL_DMA_IRQHandler+0x984>
 8103d3e:	687b      	ldr	r3, [r7, #4]
 8103d40:	681b      	ldr	r3, [r3, #0]
 8103d42:	4a42      	ldr	r2, [pc, #264]	; (8103e4c <HAL_DMA_IRQHandler+0xa4c>)
 8103d44:	4293      	cmp	r3, r2
 8103d46:	d01d      	beq.n	8103d84 <HAL_DMA_IRQHandler+0x984>
 8103d48:	687b      	ldr	r3, [r7, #4]
 8103d4a:	681b      	ldr	r3, [r3, #0]
 8103d4c:	4a40      	ldr	r2, [pc, #256]	; (8103e50 <HAL_DMA_IRQHandler+0xa50>)
 8103d4e:	4293      	cmp	r3, r2
 8103d50:	d018      	beq.n	8103d84 <HAL_DMA_IRQHandler+0x984>
 8103d52:	687b      	ldr	r3, [r7, #4]
 8103d54:	681b      	ldr	r3, [r3, #0]
 8103d56:	4a3f      	ldr	r2, [pc, #252]	; (8103e54 <HAL_DMA_IRQHandler+0xa54>)
 8103d58:	4293      	cmp	r3, r2
 8103d5a:	d013      	beq.n	8103d84 <HAL_DMA_IRQHandler+0x984>
 8103d5c:	687b      	ldr	r3, [r7, #4]
 8103d5e:	681b      	ldr	r3, [r3, #0]
 8103d60:	4a3d      	ldr	r2, [pc, #244]	; (8103e58 <HAL_DMA_IRQHandler+0xa58>)
 8103d62:	4293      	cmp	r3, r2
 8103d64:	d00e      	beq.n	8103d84 <HAL_DMA_IRQHandler+0x984>
 8103d66:	687b      	ldr	r3, [r7, #4]
 8103d68:	681b      	ldr	r3, [r3, #0]
 8103d6a:	4a3c      	ldr	r2, [pc, #240]	; (8103e5c <HAL_DMA_IRQHandler+0xa5c>)
 8103d6c:	4293      	cmp	r3, r2
 8103d6e:	d009      	beq.n	8103d84 <HAL_DMA_IRQHandler+0x984>
 8103d70:	687b      	ldr	r3, [r7, #4]
 8103d72:	681b      	ldr	r3, [r3, #0]
 8103d74:	4a3a      	ldr	r2, [pc, #232]	; (8103e60 <HAL_DMA_IRQHandler+0xa60>)
 8103d76:	4293      	cmp	r3, r2
 8103d78:	d004      	beq.n	8103d84 <HAL_DMA_IRQHandler+0x984>
 8103d7a:	687b      	ldr	r3, [r7, #4]
 8103d7c:	681b      	ldr	r3, [r3, #0]
 8103d7e:	4a39      	ldr	r2, [pc, #228]	; (8103e64 <HAL_DMA_IRQHandler+0xa64>)
 8103d80:	4293      	cmp	r3, r2
 8103d82:	d101      	bne.n	8103d88 <HAL_DMA_IRQHandler+0x988>
 8103d84:	2301      	movs	r3, #1
 8103d86:	e000      	b.n	8103d8a <HAL_DMA_IRQHandler+0x98a>
 8103d88:	2300      	movs	r3, #0
 8103d8a:	2b00      	cmp	r3, #0
 8103d8c:	f000 823f 	beq.w	810420e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8103d90:	687b      	ldr	r3, [r7, #4]
 8103d92:	681b      	ldr	r3, [r3, #0]
 8103d94:	681b      	ldr	r3, [r3, #0]
 8103d96:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8103d98:	687b      	ldr	r3, [r7, #4]
 8103d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103d9c:	f003 031f 	and.w	r3, r3, #31
 8103da0:	2204      	movs	r2, #4
 8103da2:	409a      	lsls	r2, r3
 8103da4:	697b      	ldr	r3, [r7, #20]
 8103da6:	4013      	ands	r3, r2
 8103da8:	2b00      	cmp	r3, #0
 8103daa:	f000 80cd 	beq.w	8103f48 <HAL_DMA_IRQHandler+0xb48>
 8103dae:	693b      	ldr	r3, [r7, #16]
 8103db0:	f003 0304 	and.w	r3, r3, #4
 8103db4:	2b00      	cmp	r3, #0
 8103db6:	f000 80c7 	beq.w	8103f48 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8103dba:	687b      	ldr	r3, [r7, #4]
 8103dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103dbe:	f003 031f 	and.w	r3, r3, #31
 8103dc2:	2204      	movs	r2, #4
 8103dc4:	409a      	lsls	r2, r3
 8103dc6:	69fb      	ldr	r3, [r7, #28]
 8103dc8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103dca:	693b      	ldr	r3, [r7, #16]
 8103dcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103dd0:	2b00      	cmp	r3, #0
 8103dd2:	d049      	beq.n	8103e68 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8103dd4:	693b      	ldr	r3, [r7, #16]
 8103dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103dda:	2b00      	cmp	r3, #0
 8103ddc:	d109      	bne.n	8103df2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8103dde:	687b      	ldr	r3, [r7, #4]
 8103de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103de2:	2b00      	cmp	r3, #0
 8103de4:	f000 8210 	beq.w	8104208 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8103de8:	687b      	ldr	r3, [r7, #4]
 8103dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103dec:	6878      	ldr	r0, [r7, #4]
 8103dee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103df0:	e20a      	b.n	8104208 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8103df2:	687b      	ldr	r3, [r7, #4]
 8103df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103df6:	2b00      	cmp	r3, #0
 8103df8:	f000 8206 	beq.w	8104208 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8103dfc:	687b      	ldr	r3, [r7, #4]
 8103dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103e00:	6878      	ldr	r0, [r7, #4]
 8103e02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103e04:	e200      	b.n	8104208 <HAL_DMA_IRQHandler+0xe08>
 8103e06:	bf00      	nop
 8103e08:	40020010 	.word	0x40020010
 8103e0c:	40020028 	.word	0x40020028
 8103e10:	40020040 	.word	0x40020040
 8103e14:	40020058 	.word	0x40020058
 8103e18:	40020070 	.word	0x40020070
 8103e1c:	40020088 	.word	0x40020088
 8103e20:	400200a0 	.word	0x400200a0
 8103e24:	400200b8 	.word	0x400200b8
 8103e28:	40020410 	.word	0x40020410
 8103e2c:	40020428 	.word	0x40020428
 8103e30:	40020440 	.word	0x40020440
 8103e34:	40020458 	.word	0x40020458
 8103e38:	40020470 	.word	0x40020470
 8103e3c:	40020488 	.word	0x40020488
 8103e40:	400204a0 	.word	0x400204a0
 8103e44:	400204b8 	.word	0x400204b8
 8103e48:	58025408 	.word	0x58025408
 8103e4c:	5802541c 	.word	0x5802541c
 8103e50:	58025430 	.word	0x58025430
 8103e54:	58025444 	.word	0x58025444
 8103e58:	58025458 	.word	0x58025458
 8103e5c:	5802546c 	.word	0x5802546c
 8103e60:	58025480 	.word	0x58025480
 8103e64:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8103e68:	693b      	ldr	r3, [r7, #16]
 8103e6a:	f003 0320 	and.w	r3, r3, #32
 8103e6e:	2b00      	cmp	r3, #0
 8103e70:	d160      	bne.n	8103f34 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8103e72:	687b      	ldr	r3, [r7, #4]
 8103e74:	681b      	ldr	r3, [r3, #0]
 8103e76:	4a8c      	ldr	r2, [pc, #560]	; (81040a8 <HAL_DMA_IRQHandler+0xca8>)
 8103e78:	4293      	cmp	r3, r2
 8103e7a:	d04a      	beq.n	8103f12 <HAL_DMA_IRQHandler+0xb12>
 8103e7c:	687b      	ldr	r3, [r7, #4]
 8103e7e:	681b      	ldr	r3, [r3, #0]
 8103e80:	4a8a      	ldr	r2, [pc, #552]	; (81040ac <HAL_DMA_IRQHandler+0xcac>)
 8103e82:	4293      	cmp	r3, r2
 8103e84:	d045      	beq.n	8103f12 <HAL_DMA_IRQHandler+0xb12>
 8103e86:	687b      	ldr	r3, [r7, #4]
 8103e88:	681b      	ldr	r3, [r3, #0]
 8103e8a:	4a89      	ldr	r2, [pc, #548]	; (81040b0 <HAL_DMA_IRQHandler+0xcb0>)
 8103e8c:	4293      	cmp	r3, r2
 8103e8e:	d040      	beq.n	8103f12 <HAL_DMA_IRQHandler+0xb12>
 8103e90:	687b      	ldr	r3, [r7, #4]
 8103e92:	681b      	ldr	r3, [r3, #0]
 8103e94:	4a87      	ldr	r2, [pc, #540]	; (81040b4 <HAL_DMA_IRQHandler+0xcb4>)
 8103e96:	4293      	cmp	r3, r2
 8103e98:	d03b      	beq.n	8103f12 <HAL_DMA_IRQHandler+0xb12>
 8103e9a:	687b      	ldr	r3, [r7, #4]
 8103e9c:	681b      	ldr	r3, [r3, #0]
 8103e9e:	4a86      	ldr	r2, [pc, #536]	; (81040b8 <HAL_DMA_IRQHandler+0xcb8>)
 8103ea0:	4293      	cmp	r3, r2
 8103ea2:	d036      	beq.n	8103f12 <HAL_DMA_IRQHandler+0xb12>
 8103ea4:	687b      	ldr	r3, [r7, #4]
 8103ea6:	681b      	ldr	r3, [r3, #0]
 8103ea8:	4a84      	ldr	r2, [pc, #528]	; (81040bc <HAL_DMA_IRQHandler+0xcbc>)
 8103eaa:	4293      	cmp	r3, r2
 8103eac:	d031      	beq.n	8103f12 <HAL_DMA_IRQHandler+0xb12>
 8103eae:	687b      	ldr	r3, [r7, #4]
 8103eb0:	681b      	ldr	r3, [r3, #0]
 8103eb2:	4a83      	ldr	r2, [pc, #524]	; (81040c0 <HAL_DMA_IRQHandler+0xcc0>)
 8103eb4:	4293      	cmp	r3, r2
 8103eb6:	d02c      	beq.n	8103f12 <HAL_DMA_IRQHandler+0xb12>
 8103eb8:	687b      	ldr	r3, [r7, #4]
 8103eba:	681b      	ldr	r3, [r3, #0]
 8103ebc:	4a81      	ldr	r2, [pc, #516]	; (81040c4 <HAL_DMA_IRQHandler+0xcc4>)
 8103ebe:	4293      	cmp	r3, r2
 8103ec0:	d027      	beq.n	8103f12 <HAL_DMA_IRQHandler+0xb12>
 8103ec2:	687b      	ldr	r3, [r7, #4]
 8103ec4:	681b      	ldr	r3, [r3, #0]
 8103ec6:	4a80      	ldr	r2, [pc, #512]	; (81040c8 <HAL_DMA_IRQHandler+0xcc8>)
 8103ec8:	4293      	cmp	r3, r2
 8103eca:	d022      	beq.n	8103f12 <HAL_DMA_IRQHandler+0xb12>
 8103ecc:	687b      	ldr	r3, [r7, #4]
 8103ece:	681b      	ldr	r3, [r3, #0]
 8103ed0:	4a7e      	ldr	r2, [pc, #504]	; (81040cc <HAL_DMA_IRQHandler+0xccc>)
 8103ed2:	4293      	cmp	r3, r2
 8103ed4:	d01d      	beq.n	8103f12 <HAL_DMA_IRQHandler+0xb12>
 8103ed6:	687b      	ldr	r3, [r7, #4]
 8103ed8:	681b      	ldr	r3, [r3, #0]
 8103eda:	4a7d      	ldr	r2, [pc, #500]	; (81040d0 <HAL_DMA_IRQHandler+0xcd0>)
 8103edc:	4293      	cmp	r3, r2
 8103ede:	d018      	beq.n	8103f12 <HAL_DMA_IRQHandler+0xb12>
 8103ee0:	687b      	ldr	r3, [r7, #4]
 8103ee2:	681b      	ldr	r3, [r3, #0]
 8103ee4:	4a7b      	ldr	r2, [pc, #492]	; (81040d4 <HAL_DMA_IRQHandler+0xcd4>)
 8103ee6:	4293      	cmp	r3, r2
 8103ee8:	d013      	beq.n	8103f12 <HAL_DMA_IRQHandler+0xb12>
 8103eea:	687b      	ldr	r3, [r7, #4]
 8103eec:	681b      	ldr	r3, [r3, #0]
 8103eee:	4a7a      	ldr	r2, [pc, #488]	; (81040d8 <HAL_DMA_IRQHandler+0xcd8>)
 8103ef0:	4293      	cmp	r3, r2
 8103ef2:	d00e      	beq.n	8103f12 <HAL_DMA_IRQHandler+0xb12>
 8103ef4:	687b      	ldr	r3, [r7, #4]
 8103ef6:	681b      	ldr	r3, [r3, #0]
 8103ef8:	4a78      	ldr	r2, [pc, #480]	; (81040dc <HAL_DMA_IRQHandler+0xcdc>)
 8103efa:	4293      	cmp	r3, r2
 8103efc:	d009      	beq.n	8103f12 <HAL_DMA_IRQHandler+0xb12>
 8103efe:	687b      	ldr	r3, [r7, #4]
 8103f00:	681b      	ldr	r3, [r3, #0]
 8103f02:	4a77      	ldr	r2, [pc, #476]	; (81040e0 <HAL_DMA_IRQHandler+0xce0>)
 8103f04:	4293      	cmp	r3, r2
 8103f06:	d004      	beq.n	8103f12 <HAL_DMA_IRQHandler+0xb12>
 8103f08:	687b      	ldr	r3, [r7, #4]
 8103f0a:	681b      	ldr	r3, [r3, #0]
 8103f0c:	4a75      	ldr	r2, [pc, #468]	; (81040e4 <HAL_DMA_IRQHandler+0xce4>)
 8103f0e:	4293      	cmp	r3, r2
 8103f10:	d108      	bne.n	8103f24 <HAL_DMA_IRQHandler+0xb24>
 8103f12:	687b      	ldr	r3, [r7, #4]
 8103f14:	681b      	ldr	r3, [r3, #0]
 8103f16:	681a      	ldr	r2, [r3, #0]
 8103f18:	687b      	ldr	r3, [r7, #4]
 8103f1a:	681b      	ldr	r3, [r3, #0]
 8103f1c:	f022 0208 	bic.w	r2, r2, #8
 8103f20:	601a      	str	r2, [r3, #0]
 8103f22:	e007      	b.n	8103f34 <HAL_DMA_IRQHandler+0xb34>
 8103f24:	687b      	ldr	r3, [r7, #4]
 8103f26:	681b      	ldr	r3, [r3, #0]
 8103f28:	681a      	ldr	r2, [r3, #0]
 8103f2a:	687b      	ldr	r3, [r7, #4]
 8103f2c:	681b      	ldr	r3, [r3, #0]
 8103f2e:	f022 0204 	bic.w	r2, r2, #4
 8103f32:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8103f34:	687b      	ldr	r3, [r7, #4]
 8103f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103f38:	2b00      	cmp	r3, #0
 8103f3a:	f000 8165 	beq.w	8104208 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8103f3e:	687b      	ldr	r3, [r7, #4]
 8103f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103f42:	6878      	ldr	r0, [r7, #4]
 8103f44:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103f46:	e15f      	b.n	8104208 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8103f48:	687b      	ldr	r3, [r7, #4]
 8103f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103f4c:	f003 031f 	and.w	r3, r3, #31
 8103f50:	2202      	movs	r2, #2
 8103f52:	409a      	lsls	r2, r3
 8103f54:	697b      	ldr	r3, [r7, #20]
 8103f56:	4013      	ands	r3, r2
 8103f58:	2b00      	cmp	r3, #0
 8103f5a:	f000 80c5 	beq.w	81040e8 <HAL_DMA_IRQHandler+0xce8>
 8103f5e:	693b      	ldr	r3, [r7, #16]
 8103f60:	f003 0302 	and.w	r3, r3, #2
 8103f64:	2b00      	cmp	r3, #0
 8103f66:	f000 80bf 	beq.w	81040e8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8103f6a:	687b      	ldr	r3, [r7, #4]
 8103f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103f6e:	f003 031f 	and.w	r3, r3, #31
 8103f72:	2202      	movs	r2, #2
 8103f74:	409a      	lsls	r2, r3
 8103f76:	69fb      	ldr	r3, [r7, #28]
 8103f78:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103f7a:	693b      	ldr	r3, [r7, #16]
 8103f7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103f80:	2b00      	cmp	r3, #0
 8103f82:	d018      	beq.n	8103fb6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8103f84:	693b      	ldr	r3, [r7, #16]
 8103f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103f8a:	2b00      	cmp	r3, #0
 8103f8c:	d109      	bne.n	8103fa2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8103f8e:	687b      	ldr	r3, [r7, #4]
 8103f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103f92:	2b00      	cmp	r3, #0
 8103f94:	f000 813a 	beq.w	810420c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8103f98:	687b      	ldr	r3, [r7, #4]
 8103f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103f9c:	6878      	ldr	r0, [r7, #4]
 8103f9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103fa0:	e134      	b.n	810420c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8103fa2:	687b      	ldr	r3, [r7, #4]
 8103fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103fa6:	2b00      	cmp	r3, #0
 8103fa8:	f000 8130 	beq.w	810420c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8103fac:	687b      	ldr	r3, [r7, #4]
 8103fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103fb0:	6878      	ldr	r0, [r7, #4]
 8103fb2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103fb4:	e12a      	b.n	810420c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8103fb6:	693b      	ldr	r3, [r7, #16]
 8103fb8:	f003 0320 	and.w	r3, r3, #32
 8103fbc:	2b00      	cmp	r3, #0
 8103fbe:	d168      	bne.n	8104092 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8103fc0:	687b      	ldr	r3, [r7, #4]
 8103fc2:	681b      	ldr	r3, [r3, #0]
 8103fc4:	4a38      	ldr	r2, [pc, #224]	; (81040a8 <HAL_DMA_IRQHandler+0xca8>)
 8103fc6:	4293      	cmp	r3, r2
 8103fc8:	d04a      	beq.n	8104060 <HAL_DMA_IRQHandler+0xc60>
 8103fca:	687b      	ldr	r3, [r7, #4]
 8103fcc:	681b      	ldr	r3, [r3, #0]
 8103fce:	4a37      	ldr	r2, [pc, #220]	; (81040ac <HAL_DMA_IRQHandler+0xcac>)
 8103fd0:	4293      	cmp	r3, r2
 8103fd2:	d045      	beq.n	8104060 <HAL_DMA_IRQHandler+0xc60>
 8103fd4:	687b      	ldr	r3, [r7, #4]
 8103fd6:	681b      	ldr	r3, [r3, #0]
 8103fd8:	4a35      	ldr	r2, [pc, #212]	; (81040b0 <HAL_DMA_IRQHandler+0xcb0>)
 8103fda:	4293      	cmp	r3, r2
 8103fdc:	d040      	beq.n	8104060 <HAL_DMA_IRQHandler+0xc60>
 8103fde:	687b      	ldr	r3, [r7, #4]
 8103fe0:	681b      	ldr	r3, [r3, #0]
 8103fe2:	4a34      	ldr	r2, [pc, #208]	; (81040b4 <HAL_DMA_IRQHandler+0xcb4>)
 8103fe4:	4293      	cmp	r3, r2
 8103fe6:	d03b      	beq.n	8104060 <HAL_DMA_IRQHandler+0xc60>
 8103fe8:	687b      	ldr	r3, [r7, #4]
 8103fea:	681b      	ldr	r3, [r3, #0]
 8103fec:	4a32      	ldr	r2, [pc, #200]	; (81040b8 <HAL_DMA_IRQHandler+0xcb8>)
 8103fee:	4293      	cmp	r3, r2
 8103ff0:	d036      	beq.n	8104060 <HAL_DMA_IRQHandler+0xc60>
 8103ff2:	687b      	ldr	r3, [r7, #4]
 8103ff4:	681b      	ldr	r3, [r3, #0]
 8103ff6:	4a31      	ldr	r2, [pc, #196]	; (81040bc <HAL_DMA_IRQHandler+0xcbc>)
 8103ff8:	4293      	cmp	r3, r2
 8103ffa:	d031      	beq.n	8104060 <HAL_DMA_IRQHandler+0xc60>
 8103ffc:	687b      	ldr	r3, [r7, #4]
 8103ffe:	681b      	ldr	r3, [r3, #0]
 8104000:	4a2f      	ldr	r2, [pc, #188]	; (81040c0 <HAL_DMA_IRQHandler+0xcc0>)
 8104002:	4293      	cmp	r3, r2
 8104004:	d02c      	beq.n	8104060 <HAL_DMA_IRQHandler+0xc60>
 8104006:	687b      	ldr	r3, [r7, #4]
 8104008:	681b      	ldr	r3, [r3, #0]
 810400a:	4a2e      	ldr	r2, [pc, #184]	; (81040c4 <HAL_DMA_IRQHandler+0xcc4>)
 810400c:	4293      	cmp	r3, r2
 810400e:	d027      	beq.n	8104060 <HAL_DMA_IRQHandler+0xc60>
 8104010:	687b      	ldr	r3, [r7, #4]
 8104012:	681b      	ldr	r3, [r3, #0]
 8104014:	4a2c      	ldr	r2, [pc, #176]	; (81040c8 <HAL_DMA_IRQHandler+0xcc8>)
 8104016:	4293      	cmp	r3, r2
 8104018:	d022      	beq.n	8104060 <HAL_DMA_IRQHandler+0xc60>
 810401a:	687b      	ldr	r3, [r7, #4]
 810401c:	681b      	ldr	r3, [r3, #0]
 810401e:	4a2b      	ldr	r2, [pc, #172]	; (81040cc <HAL_DMA_IRQHandler+0xccc>)
 8104020:	4293      	cmp	r3, r2
 8104022:	d01d      	beq.n	8104060 <HAL_DMA_IRQHandler+0xc60>
 8104024:	687b      	ldr	r3, [r7, #4]
 8104026:	681b      	ldr	r3, [r3, #0]
 8104028:	4a29      	ldr	r2, [pc, #164]	; (81040d0 <HAL_DMA_IRQHandler+0xcd0>)
 810402a:	4293      	cmp	r3, r2
 810402c:	d018      	beq.n	8104060 <HAL_DMA_IRQHandler+0xc60>
 810402e:	687b      	ldr	r3, [r7, #4]
 8104030:	681b      	ldr	r3, [r3, #0]
 8104032:	4a28      	ldr	r2, [pc, #160]	; (81040d4 <HAL_DMA_IRQHandler+0xcd4>)
 8104034:	4293      	cmp	r3, r2
 8104036:	d013      	beq.n	8104060 <HAL_DMA_IRQHandler+0xc60>
 8104038:	687b      	ldr	r3, [r7, #4]
 810403a:	681b      	ldr	r3, [r3, #0]
 810403c:	4a26      	ldr	r2, [pc, #152]	; (81040d8 <HAL_DMA_IRQHandler+0xcd8>)
 810403e:	4293      	cmp	r3, r2
 8104040:	d00e      	beq.n	8104060 <HAL_DMA_IRQHandler+0xc60>
 8104042:	687b      	ldr	r3, [r7, #4]
 8104044:	681b      	ldr	r3, [r3, #0]
 8104046:	4a25      	ldr	r2, [pc, #148]	; (81040dc <HAL_DMA_IRQHandler+0xcdc>)
 8104048:	4293      	cmp	r3, r2
 810404a:	d009      	beq.n	8104060 <HAL_DMA_IRQHandler+0xc60>
 810404c:	687b      	ldr	r3, [r7, #4]
 810404e:	681b      	ldr	r3, [r3, #0]
 8104050:	4a23      	ldr	r2, [pc, #140]	; (81040e0 <HAL_DMA_IRQHandler+0xce0>)
 8104052:	4293      	cmp	r3, r2
 8104054:	d004      	beq.n	8104060 <HAL_DMA_IRQHandler+0xc60>
 8104056:	687b      	ldr	r3, [r7, #4]
 8104058:	681b      	ldr	r3, [r3, #0]
 810405a:	4a22      	ldr	r2, [pc, #136]	; (81040e4 <HAL_DMA_IRQHandler+0xce4>)
 810405c:	4293      	cmp	r3, r2
 810405e:	d108      	bne.n	8104072 <HAL_DMA_IRQHandler+0xc72>
 8104060:	687b      	ldr	r3, [r7, #4]
 8104062:	681b      	ldr	r3, [r3, #0]
 8104064:	681a      	ldr	r2, [r3, #0]
 8104066:	687b      	ldr	r3, [r7, #4]
 8104068:	681b      	ldr	r3, [r3, #0]
 810406a:	f022 0214 	bic.w	r2, r2, #20
 810406e:	601a      	str	r2, [r3, #0]
 8104070:	e007      	b.n	8104082 <HAL_DMA_IRQHandler+0xc82>
 8104072:	687b      	ldr	r3, [r7, #4]
 8104074:	681b      	ldr	r3, [r3, #0]
 8104076:	681a      	ldr	r2, [r3, #0]
 8104078:	687b      	ldr	r3, [r7, #4]
 810407a:	681b      	ldr	r3, [r3, #0]
 810407c:	f022 020a 	bic.w	r2, r2, #10
 8104080:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8104082:	687b      	ldr	r3, [r7, #4]
 8104084:	2200      	movs	r2, #0
 8104086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 810408a:	687b      	ldr	r3, [r7, #4]
 810408c:	2201      	movs	r2, #1
 810408e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8104092:	687b      	ldr	r3, [r7, #4]
 8104094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104096:	2b00      	cmp	r3, #0
 8104098:	f000 80b8 	beq.w	810420c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 810409c:	687b      	ldr	r3, [r7, #4]
 810409e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81040a0:	6878      	ldr	r0, [r7, #4]
 81040a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81040a4:	e0b2      	b.n	810420c <HAL_DMA_IRQHandler+0xe0c>
 81040a6:	bf00      	nop
 81040a8:	40020010 	.word	0x40020010
 81040ac:	40020028 	.word	0x40020028
 81040b0:	40020040 	.word	0x40020040
 81040b4:	40020058 	.word	0x40020058
 81040b8:	40020070 	.word	0x40020070
 81040bc:	40020088 	.word	0x40020088
 81040c0:	400200a0 	.word	0x400200a0
 81040c4:	400200b8 	.word	0x400200b8
 81040c8:	40020410 	.word	0x40020410
 81040cc:	40020428 	.word	0x40020428
 81040d0:	40020440 	.word	0x40020440
 81040d4:	40020458 	.word	0x40020458
 81040d8:	40020470 	.word	0x40020470
 81040dc:	40020488 	.word	0x40020488
 81040e0:	400204a0 	.word	0x400204a0
 81040e4:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 81040e8:	687b      	ldr	r3, [r7, #4]
 81040ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81040ec:	f003 031f 	and.w	r3, r3, #31
 81040f0:	2208      	movs	r2, #8
 81040f2:	409a      	lsls	r2, r3
 81040f4:	697b      	ldr	r3, [r7, #20]
 81040f6:	4013      	ands	r3, r2
 81040f8:	2b00      	cmp	r3, #0
 81040fa:	f000 8088 	beq.w	810420e <HAL_DMA_IRQHandler+0xe0e>
 81040fe:	693b      	ldr	r3, [r7, #16]
 8104100:	f003 0308 	and.w	r3, r3, #8
 8104104:	2b00      	cmp	r3, #0
 8104106:	f000 8082 	beq.w	810420e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 810410a:	687b      	ldr	r3, [r7, #4]
 810410c:	681b      	ldr	r3, [r3, #0]
 810410e:	4a41      	ldr	r2, [pc, #260]	; (8104214 <HAL_DMA_IRQHandler+0xe14>)
 8104110:	4293      	cmp	r3, r2
 8104112:	d04a      	beq.n	81041aa <HAL_DMA_IRQHandler+0xdaa>
 8104114:	687b      	ldr	r3, [r7, #4]
 8104116:	681b      	ldr	r3, [r3, #0]
 8104118:	4a3f      	ldr	r2, [pc, #252]	; (8104218 <HAL_DMA_IRQHandler+0xe18>)
 810411a:	4293      	cmp	r3, r2
 810411c:	d045      	beq.n	81041aa <HAL_DMA_IRQHandler+0xdaa>
 810411e:	687b      	ldr	r3, [r7, #4]
 8104120:	681b      	ldr	r3, [r3, #0]
 8104122:	4a3e      	ldr	r2, [pc, #248]	; (810421c <HAL_DMA_IRQHandler+0xe1c>)
 8104124:	4293      	cmp	r3, r2
 8104126:	d040      	beq.n	81041aa <HAL_DMA_IRQHandler+0xdaa>
 8104128:	687b      	ldr	r3, [r7, #4]
 810412a:	681b      	ldr	r3, [r3, #0]
 810412c:	4a3c      	ldr	r2, [pc, #240]	; (8104220 <HAL_DMA_IRQHandler+0xe20>)
 810412e:	4293      	cmp	r3, r2
 8104130:	d03b      	beq.n	81041aa <HAL_DMA_IRQHandler+0xdaa>
 8104132:	687b      	ldr	r3, [r7, #4]
 8104134:	681b      	ldr	r3, [r3, #0]
 8104136:	4a3b      	ldr	r2, [pc, #236]	; (8104224 <HAL_DMA_IRQHandler+0xe24>)
 8104138:	4293      	cmp	r3, r2
 810413a:	d036      	beq.n	81041aa <HAL_DMA_IRQHandler+0xdaa>
 810413c:	687b      	ldr	r3, [r7, #4]
 810413e:	681b      	ldr	r3, [r3, #0]
 8104140:	4a39      	ldr	r2, [pc, #228]	; (8104228 <HAL_DMA_IRQHandler+0xe28>)
 8104142:	4293      	cmp	r3, r2
 8104144:	d031      	beq.n	81041aa <HAL_DMA_IRQHandler+0xdaa>
 8104146:	687b      	ldr	r3, [r7, #4]
 8104148:	681b      	ldr	r3, [r3, #0]
 810414a:	4a38      	ldr	r2, [pc, #224]	; (810422c <HAL_DMA_IRQHandler+0xe2c>)
 810414c:	4293      	cmp	r3, r2
 810414e:	d02c      	beq.n	81041aa <HAL_DMA_IRQHandler+0xdaa>
 8104150:	687b      	ldr	r3, [r7, #4]
 8104152:	681b      	ldr	r3, [r3, #0]
 8104154:	4a36      	ldr	r2, [pc, #216]	; (8104230 <HAL_DMA_IRQHandler+0xe30>)
 8104156:	4293      	cmp	r3, r2
 8104158:	d027      	beq.n	81041aa <HAL_DMA_IRQHandler+0xdaa>
 810415a:	687b      	ldr	r3, [r7, #4]
 810415c:	681b      	ldr	r3, [r3, #0]
 810415e:	4a35      	ldr	r2, [pc, #212]	; (8104234 <HAL_DMA_IRQHandler+0xe34>)
 8104160:	4293      	cmp	r3, r2
 8104162:	d022      	beq.n	81041aa <HAL_DMA_IRQHandler+0xdaa>
 8104164:	687b      	ldr	r3, [r7, #4]
 8104166:	681b      	ldr	r3, [r3, #0]
 8104168:	4a33      	ldr	r2, [pc, #204]	; (8104238 <HAL_DMA_IRQHandler+0xe38>)
 810416a:	4293      	cmp	r3, r2
 810416c:	d01d      	beq.n	81041aa <HAL_DMA_IRQHandler+0xdaa>
 810416e:	687b      	ldr	r3, [r7, #4]
 8104170:	681b      	ldr	r3, [r3, #0]
 8104172:	4a32      	ldr	r2, [pc, #200]	; (810423c <HAL_DMA_IRQHandler+0xe3c>)
 8104174:	4293      	cmp	r3, r2
 8104176:	d018      	beq.n	81041aa <HAL_DMA_IRQHandler+0xdaa>
 8104178:	687b      	ldr	r3, [r7, #4]
 810417a:	681b      	ldr	r3, [r3, #0]
 810417c:	4a30      	ldr	r2, [pc, #192]	; (8104240 <HAL_DMA_IRQHandler+0xe40>)
 810417e:	4293      	cmp	r3, r2
 8104180:	d013      	beq.n	81041aa <HAL_DMA_IRQHandler+0xdaa>
 8104182:	687b      	ldr	r3, [r7, #4]
 8104184:	681b      	ldr	r3, [r3, #0]
 8104186:	4a2f      	ldr	r2, [pc, #188]	; (8104244 <HAL_DMA_IRQHandler+0xe44>)
 8104188:	4293      	cmp	r3, r2
 810418a:	d00e      	beq.n	81041aa <HAL_DMA_IRQHandler+0xdaa>
 810418c:	687b      	ldr	r3, [r7, #4]
 810418e:	681b      	ldr	r3, [r3, #0]
 8104190:	4a2d      	ldr	r2, [pc, #180]	; (8104248 <HAL_DMA_IRQHandler+0xe48>)
 8104192:	4293      	cmp	r3, r2
 8104194:	d009      	beq.n	81041aa <HAL_DMA_IRQHandler+0xdaa>
 8104196:	687b      	ldr	r3, [r7, #4]
 8104198:	681b      	ldr	r3, [r3, #0]
 810419a:	4a2c      	ldr	r2, [pc, #176]	; (810424c <HAL_DMA_IRQHandler+0xe4c>)
 810419c:	4293      	cmp	r3, r2
 810419e:	d004      	beq.n	81041aa <HAL_DMA_IRQHandler+0xdaa>
 81041a0:	687b      	ldr	r3, [r7, #4]
 81041a2:	681b      	ldr	r3, [r3, #0]
 81041a4:	4a2a      	ldr	r2, [pc, #168]	; (8104250 <HAL_DMA_IRQHandler+0xe50>)
 81041a6:	4293      	cmp	r3, r2
 81041a8:	d108      	bne.n	81041bc <HAL_DMA_IRQHandler+0xdbc>
 81041aa:	687b      	ldr	r3, [r7, #4]
 81041ac:	681b      	ldr	r3, [r3, #0]
 81041ae:	681a      	ldr	r2, [r3, #0]
 81041b0:	687b      	ldr	r3, [r7, #4]
 81041b2:	681b      	ldr	r3, [r3, #0]
 81041b4:	f022 021c 	bic.w	r2, r2, #28
 81041b8:	601a      	str	r2, [r3, #0]
 81041ba:	e007      	b.n	81041cc <HAL_DMA_IRQHandler+0xdcc>
 81041bc:	687b      	ldr	r3, [r7, #4]
 81041be:	681b      	ldr	r3, [r3, #0]
 81041c0:	681a      	ldr	r2, [r3, #0]
 81041c2:	687b      	ldr	r3, [r7, #4]
 81041c4:	681b      	ldr	r3, [r3, #0]
 81041c6:	f022 020e 	bic.w	r2, r2, #14
 81041ca:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 81041cc:	687b      	ldr	r3, [r7, #4]
 81041ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81041d0:	f003 031f 	and.w	r3, r3, #31
 81041d4:	2201      	movs	r2, #1
 81041d6:	409a      	lsls	r2, r3
 81041d8:	69fb      	ldr	r3, [r7, #28]
 81041da:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 81041dc:	687b      	ldr	r3, [r7, #4]
 81041de:	2201      	movs	r2, #1
 81041e0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 81041e2:	687b      	ldr	r3, [r7, #4]
 81041e4:	2200      	movs	r2, #0
 81041e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 81041ea:	687b      	ldr	r3, [r7, #4]
 81041ec:	2201      	movs	r2, #1
 81041ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 81041f2:	687b      	ldr	r3, [r7, #4]
 81041f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81041f6:	2b00      	cmp	r3, #0
 81041f8:	d009      	beq.n	810420e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 81041fa:	687b      	ldr	r3, [r7, #4]
 81041fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81041fe:	6878      	ldr	r0, [r7, #4]
 8104200:	4798      	blx	r3
 8104202:	e004      	b.n	810420e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8104204:	bf00      	nop
 8104206:	e002      	b.n	810420e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104208:	bf00      	nop
 810420a:	e000      	b.n	810420e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810420c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 810420e:	3728      	adds	r7, #40	; 0x28
 8104210:	46bd      	mov	sp, r7
 8104212:	bd80      	pop	{r7, pc}
 8104214:	40020010 	.word	0x40020010
 8104218:	40020028 	.word	0x40020028
 810421c:	40020040 	.word	0x40020040
 8104220:	40020058 	.word	0x40020058
 8104224:	40020070 	.word	0x40020070
 8104228:	40020088 	.word	0x40020088
 810422c:	400200a0 	.word	0x400200a0
 8104230:	400200b8 	.word	0x400200b8
 8104234:	40020410 	.word	0x40020410
 8104238:	40020428 	.word	0x40020428
 810423c:	40020440 	.word	0x40020440
 8104240:	40020458 	.word	0x40020458
 8104244:	40020470 	.word	0x40020470
 8104248:	40020488 	.word	0x40020488
 810424c:	400204a0 	.word	0x400204a0
 8104250:	400204b8 	.word	0x400204b8

08104254 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8104254:	b480      	push	{r7}
 8104256:	b087      	sub	sp, #28
 8104258:	af00      	add	r7, sp, #0
 810425a:	60f8      	str	r0, [r7, #12]
 810425c:	60b9      	str	r1, [r7, #8]
 810425e:	607a      	str	r2, [r7, #4]
 8104260:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8104262:	68fb      	ldr	r3, [r7, #12]
 8104264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104266:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8104268:	68fb      	ldr	r3, [r7, #12]
 810426a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810426c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810426e:	68fb      	ldr	r3, [r7, #12]
 8104270:	681b      	ldr	r3, [r3, #0]
 8104272:	4a84      	ldr	r2, [pc, #528]	; (8104484 <DMA_SetConfig+0x230>)
 8104274:	4293      	cmp	r3, r2
 8104276:	d072      	beq.n	810435e <DMA_SetConfig+0x10a>
 8104278:	68fb      	ldr	r3, [r7, #12]
 810427a:	681b      	ldr	r3, [r3, #0]
 810427c:	4a82      	ldr	r2, [pc, #520]	; (8104488 <DMA_SetConfig+0x234>)
 810427e:	4293      	cmp	r3, r2
 8104280:	d06d      	beq.n	810435e <DMA_SetConfig+0x10a>
 8104282:	68fb      	ldr	r3, [r7, #12]
 8104284:	681b      	ldr	r3, [r3, #0]
 8104286:	4a81      	ldr	r2, [pc, #516]	; (810448c <DMA_SetConfig+0x238>)
 8104288:	4293      	cmp	r3, r2
 810428a:	d068      	beq.n	810435e <DMA_SetConfig+0x10a>
 810428c:	68fb      	ldr	r3, [r7, #12]
 810428e:	681b      	ldr	r3, [r3, #0]
 8104290:	4a7f      	ldr	r2, [pc, #508]	; (8104490 <DMA_SetConfig+0x23c>)
 8104292:	4293      	cmp	r3, r2
 8104294:	d063      	beq.n	810435e <DMA_SetConfig+0x10a>
 8104296:	68fb      	ldr	r3, [r7, #12]
 8104298:	681b      	ldr	r3, [r3, #0]
 810429a:	4a7e      	ldr	r2, [pc, #504]	; (8104494 <DMA_SetConfig+0x240>)
 810429c:	4293      	cmp	r3, r2
 810429e:	d05e      	beq.n	810435e <DMA_SetConfig+0x10a>
 81042a0:	68fb      	ldr	r3, [r7, #12]
 81042a2:	681b      	ldr	r3, [r3, #0]
 81042a4:	4a7c      	ldr	r2, [pc, #496]	; (8104498 <DMA_SetConfig+0x244>)
 81042a6:	4293      	cmp	r3, r2
 81042a8:	d059      	beq.n	810435e <DMA_SetConfig+0x10a>
 81042aa:	68fb      	ldr	r3, [r7, #12]
 81042ac:	681b      	ldr	r3, [r3, #0]
 81042ae:	4a7b      	ldr	r2, [pc, #492]	; (810449c <DMA_SetConfig+0x248>)
 81042b0:	4293      	cmp	r3, r2
 81042b2:	d054      	beq.n	810435e <DMA_SetConfig+0x10a>
 81042b4:	68fb      	ldr	r3, [r7, #12]
 81042b6:	681b      	ldr	r3, [r3, #0]
 81042b8:	4a79      	ldr	r2, [pc, #484]	; (81044a0 <DMA_SetConfig+0x24c>)
 81042ba:	4293      	cmp	r3, r2
 81042bc:	d04f      	beq.n	810435e <DMA_SetConfig+0x10a>
 81042be:	68fb      	ldr	r3, [r7, #12]
 81042c0:	681b      	ldr	r3, [r3, #0]
 81042c2:	4a78      	ldr	r2, [pc, #480]	; (81044a4 <DMA_SetConfig+0x250>)
 81042c4:	4293      	cmp	r3, r2
 81042c6:	d04a      	beq.n	810435e <DMA_SetConfig+0x10a>
 81042c8:	68fb      	ldr	r3, [r7, #12]
 81042ca:	681b      	ldr	r3, [r3, #0]
 81042cc:	4a76      	ldr	r2, [pc, #472]	; (81044a8 <DMA_SetConfig+0x254>)
 81042ce:	4293      	cmp	r3, r2
 81042d0:	d045      	beq.n	810435e <DMA_SetConfig+0x10a>
 81042d2:	68fb      	ldr	r3, [r7, #12]
 81042d4:	681b      	ldr	r3, [r3, #0]
 81042d6:	4a75      	ldr	r2, [pc, #468]	; (81044ac <DMA_SetConfig+0x258>)
 81042d8:	4293      	cmp	r3, r2
 81042da:	d040      	beq.n	810435e <DMA_SetConfig+0x10a>
 81042dc:	68fb      	ldr	r3, [r7, #12]
 81042de:	681b      	ldr	r3, [r3, #0]
 81042e0:	4a73      	ldr	r2, [pc, #460]	; (81044b0 <DMA_SetConfig+0x25c>)
 81042e2:	4293      	cmp	r3, r2
 81042e4:	d03b      	beq.n	810435e <DMA_SetConfig+0x10a>
 81042e6:	68fb      	ldr	r3, [r7, #12]
 81042e8:	681b      	ldr	r3, [r3, #0]
 81042ea:	4a72      	ldr	r2, [pc, #456]	; (81044b4 <DMA_SetConfig+0x260>)
 81042ec:	4293      	cmp	r3, r2
 81042ee:	d036      	beq.n	810435e <DMA_SetConfig+0x10a>
 81042f0:	68fb      	ldr	r3, [r7, #12]
 81042f2:	681b      	ldr	r3, [r3, #0]
 81042f4:	4a70      	ldr	r2, [pc, #448]	; (81044b8 <DMA_SetConfig+0x264>)
 81042f6:	4293      	cmp	r3, r2
 81042f8:	d031      	beq.n	810435e <DMA_SetConfig+0x10a>
 81042fa:	68fb      	ldr	r3, [r7, #12]
 81042fc:	681b      	ldr	r3, [r3, #0]
 81042fe:	4a6f      	ldr	r2, [pc, #444]	; (81044bc <DMA_SetConfig+0x268>)
 8104300:	4293      	cmp	r3, r2
 8104302:	d02c      	beq.n	810435e <DMA_SetConfig+0x10a>
 8104304:	68fb      	ldr	r3, [r7, #12]
 8104306:	681b      	ldr	r3, [r3, #0]
 8104308:	4a6d      	ldr	r2, [pc, #436]	; (81044c0 <DMA_SetConfig+0x26c>)
 810430a:	4293      	cmp	r3, r2
 810430c:	d027      	beq.n	810435e <DMA_SetConfig+0x10a>
 810430e:	68fb      	ldr	r3, [r7, #12]
 8104310:	681b      	ldr	r3, [r3, #0]
 8104312:	4a6c      	ldr	r2, [pc, #432]	; (81044c4 <DMA_SetConfig+0x270>)
 8104314:	4293      	cmp	r3, r2
 8104316:	d022      	beq.n	810435e <DMA_SetConfig+0x10a>
 8104318:	68fb      	ldr	r3, [r7, #12]
 810431a:	681b      	ldr	r3, [r3, #0]
 810431c:	4a6a      	ldr	r2, [pc, #424]	; (81044c8 <DMA_SetConfig+0x274>)
 810431e:	4293      	cmp	r3, r2
 8104320:	d01d      	beq.n	810435e <DMA_SetConfig+0x10a>
 8104322:	68fb      	ldr	r3, [r7, #12]
 8104324:	681b      	ldr	r3, [r3, #0]
 8104326:	4a69      	ldr	r2, [pc, #420]	; (81044cc <DMA_SetConfig+0x278>)
 8104328:	4293      	cmp	r3, r2
 810432a:	d018      	beq.n	810435e <DMA_SetConfig+0x10a>
 810432c:	68fb      	ldr	r3, [r7, #12]
 810432e:	681b      	ldr	r3, [r3, #0]
 8104330:	4a67      	ldr	r2, [pc, #412]	; (81044d0 <DMA_SetConfig+0x27c>)
 8104332:	4293      	cmp	r3, r2
 8104334:	d013      	beq.n	810435e <DMA_SetConfig+0x10a>
 8104336:	68fb      	ldr	r3, [r7, #12]
 8104338:	681b      	ldr	r3, [r3, #0]
 810433a:	4a66      	ldr	r2, [pc, #408]	; (81044d4 <DMA_SetConfig+0x280>)
 810433c:	4293      	cmp	r3, r2
 810433e:	d00e      	beq.n	810435e <DMA_SetConfig+0x10a>
 8104340:	68fb      	ldr	r3, [r7, #12]
 8104342:	681b      	ldr	r3, [r3, #0]
 8104344:	4a64      	ldr	r2, [pc, #400]	; (81044d8 <DMA_SetConfig+0x284>)
 8104346:	4293      	cmp	r3, r2
 8104348:	d009      	beq.n	810435e <DMA_SetConfig+0x10a>
 810434a:	68fb      	ldr	r3, [r7, #12]
 810434c:	681b      	ldr	r3, [r3, #0]
 810434e:	4a63      	ldr	r2, [pc, #396]	; (81044dc <DMA_SetConfig+0x288>)
 8104350:	4293      	cmp	r3, r2
 8104352:	d004      	beq.n	810435e <DMA_SetConfig+0x10a>
 8104354:	68fb      	ldr	r3, [r7, #12]
 8104356:	681b      	ldr	r3, [r3, #0]
 8104358:	4a61      	ldr	r2, [pc, #388]	; (81044e0 <DMA_SetConfig+0x28c>)
 810435a:	4293      	cmp	r3, r2
 810435c:	d101      	bne.n	8104362 <DMA_SetConfig+0x10e>
 810435e:	2301      	movs	r3, #1
 8104360:	e000      	b.n	8104364 <DMA_SetConfig+0x110>
 8104362:	2300      	movs	r3, #0
 8104364:	2b00      	cmp	r3, #0
 8104366:	d00d      	beq.n	8104384 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8104368:	68fb      	ldr	r3, [r7, #12]
 810436a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810436c:	68fa      	ldr	r2, [r7, #12]
 810436e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8104370:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8104372:	68fb      	ldr	r3, [r7, #12]
 8104374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104376:	2b00      	cmp	r3, #0
 8104378:	d004      	beq.n	8104384 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 810437a:	68fb      	ldr	r3, [r7, #12]
 810437c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810437e:	68fa      	ldr	r2, [r7, #12]
 8104380:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8104382:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104384:	68fb      	ldr	r3, [r7, #12]
 8104386:	681b      	ldr	r3, [r3, #0]
 8104388:	4a3e      	ldr	r2, [pc, #248]	; (8104484 <DMA_SetConfig+0x230>)
 810438a:	4293      	cmp	r3, r2
 810438c:	d04a      	beq.n	8104424 <DMA_SetConfig+0x1d0>
 810438e:	68fb      	ldr	r3, [r7, #12]
 8104390:	681b      	ldr	r3, [r3, #0]
 8104392:	4a3d      	ldr	r2, [pc, #244]	; (8104488 <DMA_SetConfig+0x234>)
 8104394:	4293      	cmp	r3, r2
 8104396:	d045      	beq.n	8104424 <DMA_SetConfig+0x1d0>
 8104398:	68fb      	ldr	r3, [r7, #12]
 810439a:	681b      	ldr	r3, [r3, #0]
 810439c:	4a3b      	ldr	r2, [pc, #236]	; (810448c <DMA_SetConfig+0x238>)
 810439e:	4293      	cmp	r3, r2
 81043a0:	d040      	beq.n	8104424 <DMA_SetConfig+0x1d0>
 81043a2:	68fb      	ldr	r3, [r7, #12]
 81043a4:	681b      	ldr	r3, [r3, #0]
 81043a6:	4a3a      	ldr	r2, [pc, #232]	; (8104490 <DMA_SetConfig+0x23c>)
 81043a8:	4293      	cmp	r3, r2
 81043aa:	d03b      	beq.n	8104424 <DMA_SetConfig+0x1d0>
 81043ac:	68fb      	ldr	r3, [r7, #12]
 81043ae:	681b      	ldr	r3, [r3, #0]
 81043b0:	4a38      	ldr	r2, [pc, #224]	; (8104494 <DMA_SetConfig+0x240>)
 81043b2:	4293      	cmp	r3, r2
 81043b4:	d036      	beq.n	8104424 <DMA_SetConfig+0x1d0>
 81043b6:	68fb      	ldr	r3, [r7, #12]
 81043b8:	681b      	ldr	r3, [r3, #0]
 81043ba:	4a37      	ldr	r2, [pc, #220]	; (8104498 <DMA_SetConfig+0x244>)
 81043bc:	4293      	cmp	r3, r2
 81043be:	d031      	beq.n	8104424 <DMA_SetConfig+0x1d0>
 81043c0:	68fb      	ldr	r3, [r7, #12]
 81043c2:	681b      	ldr	r3, [r3, #0]
 81043c4:	4a35      	ldr	r2, [pc, #212]	; (810449c <DMA_SetConfig+0x248>)
 81043c6:	4293      	cmp	r3, r2
 81043c8:	d02c      	beq.n	8104424 <DMA_SetConfig+0x1d0>
 81043ca:	68fb      	ldr	r3, [r7, #12]
 81043cc:	681b      	ldr	r3, [r3, #0]
 81043ce:	4a34      	ldr	r2, [pc, #208]	; (81044a0 <DMA_SetConfig+0x24c>)
 81043d0:	4293      	cmp	r3, r2
 81043d2:	d027      	beq.n	8104424 <DMA_SetConfig+0x1d0>
 81043d4:	68fb      	ldr	r3, [r7, #12]
 81043d6:	681b      	ldr	r3, [r3, #0]
 81043d8:	4a32      	ldr	r2, [pc, #200]	; (81044a4 <DMA_SetConfig+0x250>)
 81043da:	4293      	cmp	r3, r2
 81043dc:	d022      	beq.n	8104424 <DMA_SetConfig+0x1d0>
 81043de:	68fb      	ldr	r3, [r7, #12]
 81043e0:	681b      	ldr	r3, [r3, #0]
 81043e2:	4a31      	ldr	r2, [pc, #196]	; (81044a8 <DMA_SetConfig+0x254>)
 81043e4:	4293      	cmp	r3, r2
 81043e6:	d01d      	beq.n	8104424 <DMA_SetConfig+0x1d0>
 81043e8:	68fb      	ldr	r3, [r7, #12]
 81043ea:	681b      	ldr	r3, [r3, #0]
 81043ec:	4a2f      	ldr	r2, [pc, #188]	; (81044ac <DMA_SetConfig+0x258>)
 81043ee:	4293      	cmp	r3, r2
 81043f0:	d018      	beq.n	8104424 <DMA_SetConfig+0x1d0>
 81043f2:	68fb      	ldr	r3, [r7, #12]
 81043f4:	681b      	ldr	r3, [r3, #0]
 81043f6:	4a2e      	ldr	r2, [pc, #184]	; (81044b0 <DMA_SetConfig+0x25c>)
 81043f8:	4293      	cmp	r3, r2
 81043fa:	d013      	beq.n	8104424 <DMA_SetConfig+0x1d0>
 81043fc:	68fb      	ldr	r3, [r7, #12]
 81043fe:	681b      	ldr	r3, [r3, #0]
 8104400:	4a2c      	ldr	r2, [pc, #176]	; (81044b4 <DMA_SetConfig+0x260>)
 8104402:	4293      	cmp	r3, r2
 8104404:	d00e      	beq.n	8104424 <DMA_SetConfig+0x1d0>
 8104406:	68fb      	ldr	r3, [r7, #12]
 8104408:	681b      	ldr	r3, [r3, #0]
 810440a:	4a2b      	ldr	r2, [pc, #172]	; (81044b8 <DMA_SetConfig+0x264>)
 810440c:	4293      	cmp	r3, r2
 810440e:	d009      	beq.n	8104424 <DMA_SetConfig+0x1d0>
 8104410:	68fb      	ldr	r3, [r7, #12]
 8104412:	681b      	ldr	r3, [r3, #0]
 8104414:	4a29      	ldr	r2, [pc, #164]	; (81044bc <DMA_SetConfig+0x268>)
 8104416:	4293      	cmp	r3, r2
 8104418:	d004      	beq.n	8104424 <DMA_SetConfig+0x1d0>
 810441a:	68fb      	ldr	r3, [r7, #12]
 810441c:	681b      	ldr	r3, [r3, #0]
 810441e:	4a28      	ldr	r2, [pc, #160]	; (81044c0 <DMA_SetConfig+0x26c>)
 8104420:	4293      	cmp	r3, r2
 8104422:	d101      	bne.n	8104428 <DMA_SetConfig+0x1d4>
 8104424:	2301      	movs	r3, #1
 8104426:	e000      	b.n	810442a <DMA_SetConfig+0x1d6>
 8104428:	2300      	movs	r3, #0
 810442a:	2b00      	cmp	r3, #0
 810442c:	d05a      	beq.n	81044e4 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 810442e:	68fb      	ldr	r3, [r7, #12]
 8104430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104432:	f003 031f 	and.w	r3, r3, #31
 8104436:	223f      	movs	r2, #63	; 0x3f
 8104438:	409a      	lsls	r2, r3
 810443a:	697b      	ldr	r3, [r7, #20]
 810443c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 810443e:	68fb      	ldr	r3, [r7, #12]
 8104440:	681b      	ldr	r3, [r3, #0]
 8104442:	681a      	ldr	r2, [r3, #0]
 8104444:	68fb      	ldr	r3, [r7, #12]
 8104446:	681b      	ldr	r3, [r3, #0]
 8104448:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 810444c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 810444e:	68fb      	ldr	r3, [r7, #12]
 8104450:	681b      	ldr	r3, [r3, #0]
 8104452:	683a      	ldr	r2, [r7, #0]
 8104454:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8104456:	68fb      	ldr	r3, [r7, #12]
 8104458:	689b      	ldr	r3, [r3, #8]
 810445a:	2b40      	cmp	r3, #64	; 0x40
 810445c:	d108      	bne.n	8104470 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 810445e:	68fb      	ldr	r3, [r7, #12]
 8104460:	681b      	ldr	r3, [r3, #0]
 8104462:	687a      	ldr	r2, [r7, #4]
 8104464:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8104466:	68fb      	ldr	r3, [r7, #12]
 8104468:	681b      	ldr	r3, [r3, #0]
 810446a:	68ba      	ldr	r2, [r7, #8]
 810446c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 810446e:	e087      	b.n	8104580 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8104470:	68fb      	ldr	r3, [r7, #12]
 8104472:	681b      	ldr	r3, [r3, #0]
 8104474:	68ba      	ldr	r2, [r7, #8]
 8104476:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8104478:	68fb      	ldr	r3, [r7, #12]
 810447a:	681b      	ldr	r3, [r3, #0]
 810447c:	687a      	ldr	r2, [r7, #4]
 810447e:	60da      	str	r2, [r3, #12]
}
 8104480:	e07e      	b.n	8104580 <DMA_SetConfig+0x32c>
 8104482:	bf00      	nop
 8104484:	40020010 	.word	0x40020010
 8104488:	40020028 	.word	0x40020028
 810448c:	40020040 	.word	0x40020040
 8104490:	40020058 	.word	0x40020058
 8104494:	40020070 	.word	0x40020070
 8104498:	40020088 	.word	0x40020088
 810449c:	400200a0 	.word	0x400200a0
 81044a0:	400200b8 	.word	0x400200b8
 81044a4:	40020410 	.word	0x40020410
 81044a8:	40020428 	.word	0x40020428
 81044ac:	40020440 	.word	0x40020440
 81044b0:	40020458 	.word	0x40020458
 81044b4:	40020470 	.word	0x40020470
 81044b8:	40020488 	.word	0x40020488
 81044bc:	400204a0 	.word	0x400204a0
 81044c0:	400204b8 	.word	0x400204b8
 81044c4:	58025408 	.word	0x58025408
 81044c8:	5802541c 	.word	0x5802541c
 81044cc:	58025430 	.word	0x58025430
 81044d0:	58025444 	.word	0x58025444
 81044d4:	58025458 	.word	0x58025458
 81044d8:	5802546c 	.word	0x5802546c
 81044dc:	58025480 	.word	0x58025480
 81044e0:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 81044e4:	68fb      	ldr	r3, [r7, #12]
 81044e6:	681b      	ldr	r3, [r3, #0]
 81044e8:	4a28      	ldr	r2, [pc, #160]	; (810458c <DMA_SetConfig+0x338>)
 81044ea:	4293      	cmp	r3, r2
 81044ec:	d022      	beq.n	8104534 <DMA_SetConfig+0x2e0>
 81044ee:	68fb      	ldr	r3, [r7, #12]
 81044f0:	681b      	ldr	r3, [r3, #0]
 81044f2:	4a27      	ldr	r2, [pc, #156]	; (8104590 <DMA_SetConfig+0x33c>)
 81044f4:	4293      	cmp	r3, r2
 81044f6:	d01d      	beq.n	8104534 <DMA_SetConfig+0x2e0>
 81044f8:	68fb      	ldr	r3, [r7, #12]
 81044fa:	681b      	ldr	r3, [r3, #0]
 81044fc:	4a25      	ldr	r2, [pc, #148]	; (8104594 <DMA_SetConfig+0x340>)
 81044fe:	4293      	cmp	r3, r2
 8104500:	d018      	beq.n	8104534 <DMA_SetConfig+0x2e0>
 8104502:	68fb      	ldr	r3, [r7, #12]
 8104504:	681b      	ldr	r3, [r3, #0]
 8104506:	4a24      	ldr	r2, [pc, #144]	; (8104598 <DMA_SetConfig+0x344>)
 8104508:	4293      	cmp	r3, r2
 810450a:	d013      	beq.n	8104534 <DMA_SetConfig+0x2e0>
 810450c:	68fb      	ldr	r3, [r7, #12]
 810450e:	681b      	ldr	r3, [r3, #0]
 8104510:	4a22      	ldr	r2, [pc, #136]	; (810459c <DMA_SetConfig+0x348>)
 8104512:	4293      	cmp	r3, r2
 8104514:	d00e      	beq.n	8104534 <DMA_SetConfig+0x2e0>
 8104516:	68fb      	ldr	r3, [r7, #12]
 8104518:	681b      	ldr	r3, [r3, #0]
 810451a:	4a21      	ldr	r2, [pc, #132]	; (81045a0 <DMA_SetConfig+0x34c>)
 810451c:	4293      	cmp	r3, r2
 810451e:	d009      	beq.n	8104534 <DMA_SetConfig+0x2e0>
 8104520:	68fb      	ldr	r3, [r7, #12]
 8104522:	681b      	ldr	r3, [r3, #0]
 8104524:	4a1f      	ldr	r2, [pc, #124]	; (81045a4 <DMA_SetConfig+0x350>)
 8104526:	4293      	cmp	r3, r2
 8104528:	d004      	beq.n	8104534 <DMA_SetConfig+0x2e0>
 810452a:	68fb      	ldr	r3, [r7, #12]
 810452c:	681b      	ldr	r3, [r3, #0]
 810452e:	4a1e      	ldr	r2, [pc, #120]	; (81045a8 <DMA_SetConfig+0x354>)
 8104530:	4293      	cmp	r3, r2
 8104532:	d101      	bne.n	8104538 <DMA_SetConfig+0x2e4>
 8104534:	2301      	movs	r3, #1
 8104536:	e000      	b.n	810453a <DMA_SetConfig+0x2e6>
 8104538:	2300      	movs	r3, #0
 810453a:	2b00      	cmp	r3, #0
 810453c:	d020      	beq.n	8104580 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 810453e:	68fb      	ldr	r3, [r7, #12]
 8104540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104542:	f003 031f 	and.w	r3, r3, #31
 8104546:	2201      	movs	r2, #1
 8104548:	409a      	lsls	r2, r3
 810454a:	693b      	ldr	r3, [r7, #16]
 810454c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 810454e:	68fb      	ldr	r3, [r7, #12]
 8104550:	681b      	ldr	r3, [r3, #0]
 8104552:	683a      	ldr	r2, [r7, #0]
 8104554:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8104556:	68fb      	ldr	r3, [r7, #12]
 8104558:	689b      	ldr	r3, [r3, #8]
 810455a:	2b40      	cmp	r3, #64	; 0x40
 810455c:	d108      	bne.n	8104570 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 810455e:	68fb      	ldr	r3, [r7, #12]
 8104560:	681b      	ldr	r3, [r3, #0]
 8104562:	687a      	ldr	r2, [r7, #4]
 8104564:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8104566:	68fb      	ldr	r3, [r7, #12]
 8104568:	681b      	ldr	r3, [r3, #0]
 810456a:	68ba      	ldr	r2, [r7, #8]
 810456c:	60da      	str	r2, [r3, #12]
}
 810456e:	e007      	b.n	8104580 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8104570:	68fb      	ldr	r3, [r7, #12]
 8104572:	681b      	ldr	r3, [r3, #0]
 8104574:	68ba      	ldr	r2, [r7, #8]
 8104576:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8104578:	68fb      	ldr	r3, [r7, #12]
 810457a:	681b      	ldr	r3, [r3, #0]
 810457c:	687a      	ldr	r2, [r7, #4]
 810457e:	60da      	str	r2, [r3, #12]
}
 8104580:	bf00      	nop
 8104582:	371c      	adds	r7, #28
 8104584:	46bd      	mov	sp, r7
 8104586:	f85d 7b04 	ldr.w	r7, [sp], #4
 810458a:	4770      	bx	lr
 810458c:	58025408 	.word	0x58025408
 8104590:	5802541c 	.word	0x5802541c
 8104594:	58025430 	.word	0x58025430
 8104598:	58025444 	.word	0x58025444
 810459c:	58025458 	.word	0x58025458
 81045a0:	5802546c 	.word	0x5802546c
 81045a4:	58025480 	.word	0x58025480
 81045a8:	58025494 	.word	0x58025494

081045ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 81045ac:	b480      	push	{r7}
 81045ae:	b085      	sub	sp, #20
 81045b0:	af00      	add	r7, sp, #0
 81045b2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81045b4:	687b      	ldr	r3, [r7, #4]
 81045b6:	681b      	ldr	r3, [r3, #0]
 81045b8:	4a43      	ldr	r2, [pc, #268]	; (81046c8 <DMA_CalcBaseAndBitshift+0x11c>)
 81045ba:	4293      	cmp	r3, r2
 81045bc:	d04a      	beq.n	8104654 <DMA_CalcBaseAndBitshift+0xa8>
 81045be:	687b      	ldr	r3, [r7, #4]
 81045c0:	681b      	ldr	r3, [r3, #0]
 81045c2:	4a42      	ldr	r2, [pc, #264]	; (81046cc <DMA_CalcBaseAndBitshift+0x120>)
 81045c4:	4293      	cmp	r3, r2
 81045c6:	d045      	beq.n	8104654 <DMA_CalcBaseAndBitshift+0xa8>
 81045c8:	687b      	ldr	r3, [r7, #4]
 81045ca:	681b      	ldr	r3, [r3, #0]
 81045cc:	4a40      	ldr	r2, [pc, #256]	; (81046d0 <DMA_CalcBaseAndBitshift+0x124>)
 81045ce:	4293      	cmp	r3, r2
 81045d0:	d040      	beq.n	8104654 <DMA_CalcBaseAndBitshift+0xa8>
 81045d2:	687b      	ldr	r3, [r7, #4]
 81045d4:	681b      	ldr	r3, [r3, #0]
 81045d6:	4a3f      	ldr	r2, [pc, #252]	; (81046d4 <DMA_CalcBaseAndBitshift+0x128>)
 81045d8:	4293      	cmp	r3, r2
 81045da:	d03b      	beq.n	8104654 <DMA_CalcBaseAndBitshift+0xa8>
 81045dc:	687b      	ldr	r3, [r7, #4]
 81045de:	681b      	ldr	r3, [r3, #0]
 81045e0:	4a3d      	ldr	r2, [pc, #244]	; (81046d8 <DMA_CalcBaseAndBitshift+0x12c>)
 81045e2:	4293      	cmp	r3, r2
 81045e4:	d036      	beq.n	8104654 <DMA_CalcBaseAndBitshift+0xa8>
 81045e6:	687b      	ldr	r3, [r7, #4]
 81045e8:	681b      	ldr	r3, [r3, #0]
 81045ea:	4a3c      	ldr	r2, [pc, #240]	; (81046dc <DMA_CalcBaseAndBitshift+0x130>)
 81045ec:	4293      	cmp	r3, r2
 81045ee:	d031      	beq.n	8104654 <DMA_CalcBaseAndBitshift+0xa8>
 81045f0:	687b      	ldr	r3, [r7, #4]
 81045f2:	681b      	ldr	r3, [r3, #0]
 81045f4:	4a3a      	ldr	r2, [pc, #232]	; (81046e0 <DMA_CalcBaseAndBitshift+0x134>)
 81045f6:	4293      	cmp	r3, r2
 81045f8:	d02c      	beq.n	8104654 <DMA_CalcBaseAndBitshift+0xa8>
 81045fa:	687b      	ldr	r3, [r7, #4]
 81045fc:	681b      	ldr	r3, [r3, #0]
 81045fe:	4a39      	ldr	r2, [pc, #228]	; (81046e4 <DMA_CalcBaseAndBitshift+0x138>)
 8104600:	4293      	cmp	r3, r2
 8104602:	d027      	beq.n	8104654 <DMA_CalcBaseAndBitshift+0xa8>
 8104604:	687b      	ldr	r3, [r7, #4]
 8104606:	681b      	ldr	r3, [r3, #0]
 8104608:	4a37      	ldr	r2, [pc, #220]	; (81046e8 <DMA_CalcBaseAndBitshift+0x13c>)
 810460a:	4293      	cmp	r3, r2
 810460c:	d022      	beq.n	8104654 <DMA_CalcBaseAndBitshift+0xa8>
 810460e:	687b      	ldr	r3, [r7, #4]
 8104610:	681b      	ldr	r3, [r3, #0]
 8104612:	4a36      	ldr	r2, [pc, #216]	; (81046ec <DMA_CalcBaseAndBitshift+0x140>)
 8104614:	4293      	cmp	r3, r2
 8104616:	d01d      	beq.n	8104654 <DMA_CalcBaseAndBitshift+0xa8>
 8104618:	687b      	ldr	r3, [r7, #4]
 810461a:	681b      	ldr	r3, [r3, #0]
 810461c:	4a34      	ldr	r2, [pc, #208]	; (81046f0 <DMA_CalcBaseAndBitshift+0x144>)
 810461e:	4293      	cmp	r3, r2
 8104620:	d018      	beq.n	8104654 <DMA_CalcBaseAndBitshift+0xa8>
 8104622:	687b      	ldr	r3, [r7, #4]
 8104624:	681b      	ldr	r3, [r3, #0]
 8104626:	4a33      	ldr	r2, [pc, #204]	; (81046f4 <DMA_CalcBaseAndBitshift+0x148>)
 8104628:	4293      	cmp	r3, r2
 810462a:	d013      	beq.n	8104654 <DMA_CalcBaseAndBitshift+0xa8>
 810462c:	687b      	ldr	r3, [r7, #4]
 810462e:	681b      	ldr	r3, [r3, #0]
 8104630:	4a31      	ldr	r2, [pc, #196]	; (81046f8 <DMA_CalcBaseAndBitshift+0x14c>)
 8104632:	4293      	cmp	r3, r2
 8104634:	d00e      	beq.n	8104654 <DMA_CalcBaseAndBitshift+0xa8>
 8104636:	687b      	ldr	r3, [r7, #4]
 8104638:	681b      	ldr	r3, [r3, #0]
 810463a:	4a30      	ldr	r2, [pc, #192]	; (81046fc <DMA_CalcBaseAndBitshift+0x150>)
 810463c:	4293      	cmp	r3, r2
 810463e:	d009      	beq.n	8104654 <DMA_CalcBaseAndBitshift+0xa8>
 8104640:	687b      	ldr	r3, [r7, #4]
 8104642:	681b      	ldr	r3, [r3, #0]
 8104644:	4a2e      	ldr	r2, [pc, #184]	; (8104700 <DMA_CalcBaseAndBitshift+0x154>)
 8104646:	4293      	cmp	r3, r2
 8104648:	d004      	beq.n	8104654 <DMA_CalcBaseAndBitshift+0xa8>
 810464a:	687b      	ldr	r3, [r7, #4]
 810464c:	681b      	ldr	r3, [r3, #0]
 810464e:	4a2d      	ldr	r2, [pc, #180]	; (8104704 <DMA_CalcBaseAndBitshift+0x158>)
 8104650:	4293      	cmp	r3, r2
 8104652:	d101      	bne.n	8104658 <DMA_CalcBaseAndBitshift+0xac>
 8104654:	2301      	movs	r3, #1
 8104656:	e000      	b.n	810465a <DMA_CalcBaseAndBitshift+0xae>
 8104658:	2300      	movs	r3, #0
 810465a:	2b00      	cmp	r3, #0
 810465c:	d026      	beq.n	81046ac <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 810465e:	687b      	ldr	r3, [r7, #4]
 8104660:	681b      	ldr	r3, [r3, #0]
 8104662:	b2db      	uxtb	r3, r3
 8104664:	3b10      	subs	r3, #16
 8104666:	4a28      	ldr	r2, [pc, #160]	; (8104708 <DMA_CalcBaseAndBitshift+0x15c>)
 8104668:	fba2 2303 	umull	r2, r3, r2, r3
 810466c:	091b      	lsrs	r3, r3, #4
 810466e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8104670:	68fb      	ldr	r3, [r7, #12]
 8104672:	f003 0307 	and.w	r3, r3, #7
 8104676:	4a25      	ldr	r2, [pc, #148]	; (810470c <DMA_CalcBaseAndBitshift+0x160>)
 8104678:	5cd3      	ldrb	r3, [r2, r3]
 810467a:	461a      	mov	r2, r3
 810467c:	687b      	ldr	r3, [r7, #4]
 810467e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8104680:	68fb      	ldr	r3, [r7, #12]
 8104682:	2b03      	cmp	r3, #3
 8104684:	d909      	bls.n	810469a <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8104686:	687b      	ldr	r3, [r7, #4]
 8104688:	681b      	ldr	r3, [r3, #0]
 810468a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 810468e:	f023 0303 	bic.w	r3, r3, #3
 8104692:	1d1a      	adds	r2, r3, #4
 8104694:	687b      	ldr	r3, [r7, #4]
 8104696:	659a      	str	r2, [r3, #88]	; 0x58
 8104698:	e00e      	b.n	81046b8 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 810469a:	687b      	ldr	r3, [r7, #4]
 810469c:	681b      	ldr	r3, [r3, #0]
 810469e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 81046a2:	f023 0303 	bic.w	r3, r3, #3
 81046a6:	687a      	ldr	r2, [r7, #4]
 81046a8:	6593      	str	r3, [r2, #88]	; 0x58
 81046aa:	e005      	b.n	81046b8 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 81046ac:	687b      	ldr	r3, [r7, #4]
 81046ae:	681b      	ldr	r3, [r3, #0]
 81046b0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 81046b4:	687b      	ldr	r3, [r7, #4]
 81046b6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 81046b8:	687b      	ldr	r3, [r7, #4]
 81046ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 81046bc:	4618      	mov	r0, r3
 81046be:	3714      	adds	r7, #20
 81046c0:	46bd      	mov	sp, r7
 81046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81046c6:	4770      	bx	lr
 81046c8:	40020010 	.word	0x40020010
 81046cc:	40020028 	.word	0x40020028
 81046d0:	40020040 	.word	0x40020040
 81046d4:	40020058 	.word	0x40020058
 81046d8:	40020070 	.word	0x40020070
 81046dc:	40020088 	.word	0x40020088
 81046e0:	400200a0 	.word	0x400200a0
 81046e4:	400200b8 	.word	0x400200b8
 81046e8:	40020410 	.word	0x40020410
 81046ec:	40020428 	.word	0x40020428
 81046f0:	40020440 	.word	0x40020440
 81046f4:	40020458 	.word	0x40020458
 81046f8:	40020470 	.word	0x40020470
 81046fc:	40020488 	.word	0x40020488
 8104700:	400204a0 	.word	0x400204a0
 8104704:	400204b8 	.word	0x400204b8
 8104708:	aaaaaaab 	.word	0xaaaaaaab
 810470c:	081109a8 	.word	0x081109a8

08104710 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8104710:	b480      	push	{r7}
 8104712:	b085      	sub	sp, #20
 8104714:	af00      	add	r7, sp, #0
 8104716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8104718:	2300      	movs	r3, #0
 810471a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 810471c:	687b      	ldr	r3, [r7, #4]
 810471e:	699b      	ldr	r3, [r3, #24]
 8104720:	2b00      	cmp	r3, #0
 8104722:	d120      	bne.n	8104766 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8104724:	687b      	ldr	r3, [r7, #4]
 8104726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104728:	2b03      	cmp	r3, #3
 810472a:	d858      	bhi.n	81047de <DMA_CheckFifoParam+0xce>
 810472c:	a201      	add	r2, pc, #4	; (adr r2, 8104734 <DMA_CheckFifoParam+0x24>)
 810472e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104732:	bf00      	nop
 8104734:	08104745 	.word	0x08104745
 8104738:	08104757 	.word	0x08104757
 810473c:	08104745 	.word	0x08104745
 8104740:	081047df 	.word	0x081047df
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8104744:	687b      	ldr	r3, [r7, #4]
 8104746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104748:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810474c:	2b00      	cmp	r3, #0
 810474e:	d048      	beq.n	81047e2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8104750:	2301      	movs	r3, #1
 8104752:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104754:	e045      	b.n	81047e2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8104756:	687b      	ldr	r3, [r7, #4]
 8104758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810475a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 810475e:	d142      	bne.n	81047e6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8104760:	2301      	movs	r3, #1
 8104762:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104764:	e03f      	b.n	81047e6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8104766:	687b      	ldr	r3, [r7, #4]
 8104768:	699b      	ldr	r3, [r3, #24]
 810476a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810476e:	d123      	bne.n	81047b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8104770:	687b      	ldr	r3, [r7, #4]
 8104772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104774:	2b03      	cmp	r3, #3
 8104776:	d838      	bhi.n	81047ea <DMA_CheckFifoParam+0xda>
 8104778:	a201      	add	r2, pc, #4	; (adr r2, 8104780 <DMA_CheckFifoParam+0x70>)
 810477a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810477e:	bf00      	nop
 8104780:	08104791 	.word	0x08104791
 8104784:	08104797 	.word	0x08104797
 8104788:	08104791 	.word	0x08104791
 810478c:	081047a9 	.word	0x081047a9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8104790:	2301      	movs	r3, #1
 8104792:	73fb      	strb	r3, [r7, #15]
        break;
 8104794:	e030      	b.n	81047f8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8104796:	687b      	ldr	r3, [r7, #4]
 8104798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810479a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810479e:	2b00      	cmp	r3, #0
 81047a0:	d025      	beq.n	81047ee <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 81047a2:	2301      	movs	r3, #1
 81047a4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81047a6:	e022      	b.n	81047ee <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 81047a8:	687b      	ldr	r3, [r7, #4]
 81047aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81047ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 81047b0:	d11f      	bne.n	81047f2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 81047b2:	2301      	movs	r3, #1
 81047b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81047b6:	e01c      	b.n	81047f2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 81047b8:	687b      	ldr	r3, [r7, #4]
 81047ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81047bc:	2b02      	cmp	r3, #2
 81047be:	d902      	bls.n	81047c6 <DMA_CheckFifoParam+0xb6>
 81047c0:	2b03      	cmp	r3, #3
 81047c2:	d003      	beq.n	81047cc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 81047c4:	e018      	b.n	81047f8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 81047c6:	2301      	movs	r3, #1
 81047c8:	73fb      	strb	r3, [r7, #15]
        break;
 81047ca:	e015      	b.n	81047f8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81047cc:	687b      	ldr	r3, [r7, #4]
 81047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81047d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81047d4:	2b00      	cmp	r3, #0
 81047d6:	d00e      	beq.n	81047f6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 81047d8:	2301      	movs	r3, #1
 81047da:	73fb      	strb	r3, [r7, #15]
    break;
 81047dc:	e00b      	b.n	81047f6 <DMA_CheckFifoParam+0xe6>
        break;
 81047de:	bf00      	nop
 81047e0:	e00a      	b.n	81047f8 <DMA_CheckFifoParam+0xe8>
        break;
 81047e2:	bf00      	nop
 81047e4:	e008      	b.n	81047f8 <DMA_CheckFifoParam+0xe8>
        break;
 81047e6:	bf00      	nop
 81047e8:	e006      	b.n	81047f8 <DMA_CheckFifoParam+0xe8>
        break;
 81047ea:	bf00      	nop
 81047ec:	e004      	b.n	81047f8 <DMA_CheckFifoParam+0xe8>
        break;
 81047ee:	bf00      	nop
 81047f0:	e002      	b.n	81047f8 <DMA_CheckFifoParam+0xe8>
        break;
 81047f2:	bf00      	nop
 81047f4:	e000      	b.n	81047f8 <DMA_CheckFifoParam+0xe8>
    break;
 81047f6:	bf00      	nop
    }
  }

  return status;
 81047f8:	7bfb      	ldrb	r3, [r7, #15]
}
 81047fa:	4618      	mov	r0, r3
 81047fc:	3714      	adds	r7, #20
 81047fe:	46bd      	mov	sp, r7
 8104800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104804:	4770      	bx	lr
 8104806:	bf00      	nop

08104808 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8104808:	b480      	push	{r7}
 810480a:	b085      	sub	sp, #20
 810480c:	af00      	add	r7, sp, #0
 810480e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8104810:	687b      	ldr	r3, [r7, #4]
 8104812:	681b      	ldr	r3, [r3, #0]
 8104814:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8104816:	687b      	ldr	r3, [r7, #4]
 8104818:	681b      	ldr	r3, [r3, #0]
 810481a:	4a3a      	ldr	r2, [pc, #232]	; (8104904 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 810481c:	4293      	cmp	r3, r2
 810481e:	d022      	beq.n	8104866 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104820:	687b      	ldr	r3, [r7, #4]
 8104822:	681b      	ldr	r3, [r3, #0]
 8104824:	4a38      	ldr	r2, [pc, #224]	; (8104908 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8104826:	4293      	cmp	r3, r2
 8104828:	d01d      	beq.n	8104866 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810482a:	687b      	ldr	r3, [r7, #4]
 810482c:	681b      	ldr	r3, [r3, #0]
 810482e:	4a37      	ldr	r2, [pc, #220]	; (810490c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8104830:	4293      	cmp	r3, r2
 8104832:	d018      	beq.n	8104866 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104834:	687b      	ldr	r3, [r7, #4]
 8104836:	681b      	ldr	r3, [r3, #0]
 8104838:	4a35      	ldr	r2, [pc, #212]	; (8104910 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 810483a:	4293      	cmp	r3, r2
 810483c:	d013      	beq.n	8104866 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810483e:	687b      	ldr	r3, [r7, #4]
 8104840:	681b      	ldr	r3, [r3, #0]
 8104842:	4a34      	ldr	r2, [pc, #208]	; (8104914 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8104844:	4293      	cmp	r3, r2
 8104846:	d00e      	beq.n	8104866 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104848:	687b      	ldr	r3, [r7, #4]
 810484a:	681b      	ldr	r3, [r3, #0]
 810484c:	4a32      	ldr	r2, [pc, #200]	; (8104918 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 810484e:	4293      	cmp	r3, r2
 8104850:	d009      	beq.n	8104866 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104852:	687b      	ldr	r3, [r7, #4]
 8104854:	681b      	ldr	r3, [r3, #0]
 8104856:	4a31      	ldr	r2, [pc, #196]	; (810491c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8104858:	4293      	cmp	r3, r2
 810485a:	d004      	beq.n	8104866 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810485c:	687b      	ldr	r3, [r7, #4]
 810485e:	681b      	ldr	r3, [r3, #0]
 8104860:	4a2f      	ldr	r2, [pc, #188]	; (8104920 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8104862:	4293      	cmp	r3, r2
 8104864:	d101      	bne.n	810486a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8104866:	2301      	movs	r3, #1
 8104868:	e000      	b.n	810486c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 810486a:	2300      	movs	r3, #0
 810486c:	2b00      	cmp	r3, #0
 810486e:	d01c      	beq.n	81048aa <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8104870:	687b      	ldr	r3, [r7, #4]
 8104872:	681b      	ldr	r3, [r3, #0]
 8104874:	b2db      	uxtb	r3, r3
 8104876:	3b08      	subs	r3, #8
 8104878:	4a2a      	ldr	r2, [pc, #168]	; (8104924 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 810487a:	fba2 2303 	umull	r2, r3, r2, r3
 810487e:	091b      	lsrs	r3, r3, #4
 8104880:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8104882:	68fb      	ldr	r3, [r7, #12]
 8104884:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 8104888:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 810488c:	009b      	lsls	r3, r3, #2
 810488e:	461a      	mov	r2, r3
 8104890:	687b      	ldr	r3, [r7, #4]
 8104892:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8104894:	687b      	ldr	r3, [r7, #4]
 8104896:	4a24      	ldr	r2, [pc, #144]	; (8104928 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8104898:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 810489a:	68fb      	ldr	r3, [r7, #12]
 810489c:	f003 031f 	and.w	r3, r3, #31
 81048a0:	2201      	movs	r2, #1
 81048a2:	409a      	lsls	r2, r3
 81048a4:	687b      	ldr	r3, [r7, #4]
 81048a6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 81048a8:	e026      	b.n	81048f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 81048aa:	687b      	ldr	r3, [r7, #4]
 81048ac:	681b      	ldr	r3, [r3, #0]
 81048ae:	b2db      	uxtb	r3, r3
 81048b0:	3b10      	subs	r3, #16
 81048b2:	4a1e      	ldr	r2, [pc, #120]	; (810492c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 81048b4:	fba2 2303 	umull	r2, r3, r2, r3
 81048b8:	091b      	lsrs	r3, r3, #4
 81048ba:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 81048bc:	68bb      	ldr	r3, [r7, #8]
 81048be:	4a1c      	ldr	r2, [pc, #112]	; (8104930 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 81048c0:	4293      	cmp	r3, r2
 81048c2:	d806      	bhi.n	81048d2 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 81048c4:	68bb      	ldr	r3, [r7, #8]
 81048c6:	4a1b      	ldr	r2, [pc, #108]	; (8104934 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 81048c8:	4293      	cmp	r3, r2
 81048ca:	d902      	bls.n	81048d2 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 81048cc:	68fb      	ldr	r3, [r7, #12]
 81048ce:	3308      	adds	r3, #8
 81048d0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 81048d2:	68fb      	ldr	r3, [r7, #12]
 81048d4:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 81048d8:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 81048dc:	009b      	lsls	r3, r3, #2
 81048de:	461a      	mov	r2, r3
 81048e0:	687b      	ldr	r3, [r7, #4]
 81048e2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 81048e4:	687b      	ldr	r3, [r7, #4]
 81048e6:	4a14      	ldr	r2, [pc, #80]	; (8104938 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 81048e8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 81048ea:	68fb      	ldr	r3, [r7, #12]
 81048ec:	f003 031f 	and.w	r3, r3, #31
 81048f0:	2201      	movs	r2, #1
 81048f2:	409a      	lsls	r2, r3
 81048f4:	687b      	ldr	r3, [r7, #4]
 81048f6:	669a      	str	r2, [r3, #104]	; 0x68
}
 81048f8:	bf00      	nop
 81048fa:	3714      	adds	r7, #20
 81048fc:	46bd      	mov	sp, r7
 81048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104902:	4770      	bx	lr
 8104904:	58025408 	.word	0x58025408
 8104908:	5802541c 	.word	0x5802541c
 810490c:	58025430 	.word	0x58025430
 8104910:	58025444 	.word	0x58025444
 8104914:	58025458 	.word	0x58025458
 8104918:	5802546c 	.word	0x5802546c
 810491c:	58025480 	.word	0x58025480
 8104920:	58025494 	.word	0x58025494
 8104924:	cccccccd 	.word	0xcccccccd
 8104928:	58025880 	.word	0x58025880
 810492c:	aaaaaaab 	.word	0xaaaaaaab
 8104930:	400204b8 	.word	0x400204b8
 8104934:	4002040f 	.word	0x4002040f
 8104938:	40020880 	.word	0x40020880

0810493c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 810493c:	b480      	push	{r7}
 810493e:	b085      	sub	sp, #20
 8104940:	af00      	add	r7, sp, #0
 8104942:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8104944:	687b      	ldr	r3, [r7, #4]
 8104946:	685b      	ldr	r3, [r3, #4]
 8104948:	b2db      	uxtb	r3, r3
 810494a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 810494c:	68fb      	ldr	r3, [r7, #12]
 810494e:	2b00      	cmp	r3, #0
 8104950:	d04a      	beq.n	81049e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8104952:	68fb      	ldr	r3, [r7, #12]
 8104954:	2b08      	cmp	r3, #8
 8104956:	d847      	bhi.n	81049e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8104958:	687b      	ldr	r3, [r7, #4]
 810495a:	681b      	ldr	r3, [r3, #0]
 810495c:	4a25      	ldr	r2, [pc, #148]	; (81049f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 810495e:	4293      	cmp	r3, r2
 8104960:	d022      	beq.n	81049a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104962:	687b      	ldr	r3, [r7, #4]
 8104964:	681b      	ldr	r3, [r3, #0]
 8104966:	4a24      	ldr	r2, [pc, #144]	; (81049f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8104968:	4293      	cmp	r3, r2
 810496a:	d01d      	beq.n	81049a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810496c:	687b      	ldr	r3, [r7, #4]
 810496e:	681b      	ldr	r3, [r3, #0]
 8104970:	4a22      	ldr	r2, [pc, #136]	; (81049fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8104972:	4293      	cmp	r3, r2
 8104974:	d018      	beq.n	81049a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104976:	687b      	ldr	r3, [r7, #4]
 8104978:	681b      	ldr	r3, [r3, #0]
 810497a:	4a21      	ldr	r2, [pc, #132]	; (8104a00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 810497c:	4293      	cmp	r3, r2
 810497e:	d013      	beq.n	81049a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104980:	687b      	ldr	r3, [r7, #4]
 8104982:	681b      	ldr	r3, [r3, #0]
 8104984:	4a1f      	ldr	r2, [pc, #124]	; (8104a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8104986:	4293      	cmp	r3, r2
 8104988:	d00e      	beq.n	81049a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810498a:	687b      	ldr	r3, [r7, #4]
 810498c:	681b      	ldr	r3, [r3, #0]
 810498e:	4a1e      	ldr	r2, [pc, #120]	; (8104a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8104990:	4293      	cmp	r3, r2
 8104992:	d009      	beq.n	81049a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104994:	687b      	ldr	r3, [r7, #4]
 8104996:	681b      	ldr	r3, [r3, #0]
 8104998:	4a1c      	ldr	r2, [pc, #112]	; (8104a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 810499a:	4293      	cmp	r3, r2
 810499c:	d004      	beq.n	81049a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810499e:	687b      	ldr	r3, [r7, #4]
 81049a0:	681b      	ldr	r3, [r3, #0]
 81049a2:	4a1b      	ldr	r2, [pc, #108]	; (8104a10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 81049a4:	4293      	cmp	r3, r2
 81049a6:	d101      	bne.n	81049ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 81049a8:	2301      	movs	r3, #1
 81049aa:	e000      	b.n	81049ae <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 81049ac:	2300      	movs	r3, #0
 81049ae:	2b00      	cmp	r3, #0
 81049b0:	d00a      	beq.n	81049c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 81049b2:	68fa      	ldr	r2, [r7, #12]
 81049b4:	4b17      	ldr	r3, [pc, #92]	; (8104a14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 81049b6:	4413      	add	r3, r2
 81049b8:	009b      	lsls	r3, r3, #2
 81049ba:	461a      	mov	r2, r3
 81049bc:	687b      	ldr	r3, [r7, #4]
 81049be:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 81049c0:	687b      	ldr	r3, [r7, #4]
 81049c2:	4a15      	ldr	r2, [pc, #84]	; (8104a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 81049c4:	671a      	str	r2, [r3, #112]	; 0x70
 81049c6:	e009      	b.n	81049dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 81049c8:	68fa      	ldr	r2, [r7, #12]
 81049ca:	4b14      	ldr	r3, [pc, #80]	; (8104a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 81049cc:	4413      	add	r3, r2
 81049ce:	009b      	lsls	r3, r3, #2
 81049d0:	461a      	mov	r2, r3
 81049d2:	687b      	ldr	r3, [r7, #4]
 81049d4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 81049d6:	687b      	ldr	r3, [r7, #4]
 81049d8:	4a11      	ldr	r2, [pc, #68]	; (8104a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 81049da:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 81049dc:	68fb      	ldr	r3, [r7, #12]
 81049de:	3b01      	subs	r3, #1
 81049e0:	2201      	movs	r2, #1
 81049e2:	409a      	lsls	r2, r3
 81049e4:	687b      	ldr	r3, [r7, #4]
 81049e6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 81049e8:	bf00      	nop
 81049ea:	3714      	adds	r7, #20
 81049ec:	46bd      	mov	sp, r7
 81049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81049f2:	4770      	bx	lr
 81049f4:	58025408 	.word	0x58025408
 81049f8:	5802541c 	.word	0x5802541c
 81049fc:	58025430 	.word	0x58025430
 8104a00:	58025444 	.word	0x58025444
 8104a04:	58025458 	.word	0x58025458
 8104a08:	5802546c 	.word	0x5802546c
 8104a0c:	58025480 	.word	0x58025480
 8104a10:	58025494 	.word	0x58025494
 8104a14:	1600963f 	.word	0x1600963f
 8104a18:	58025940 	.word	0x58025940
 8104a1c:	1000823f 	.word	0x1000823f
 8104a20:	40020940 	.word	0x40020940

08104a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8104a24:	b480      	push	{r7}
 8104a26:	b089      	sub	sp, #36	; 0x24
 8104a28:	af00      	add	r7, sp, #0
 8104a2a:	6078      	str	r0, [r7, #4]
 8104a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8104a2e:	2300      	movs	r3, #0
 8104a30:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8104a32:	4b89      	ldr	r3, [pc, #548]	; (8104c58 <HAL_GPIO_Init+0x234>)
 8104a34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104a36:	e194      	b.n	8104d62 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8104a38:	683b      	ldr	r3, [r7, #0]
 8104a3a:	681a      	ldr	r2, [r3, #0]
 8104a3c:	2101      	movs	r1, #1
 8104a3e:	69fb      	ldr	r3, [r7, #28]
 8104a40:	fa01 f303 	lsl.w	r3, r1, r3
 8104a44:	4013      	ands	r3, r2
 8104a46:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8104a48:	693b      	ldr	r3, [r7, #16]
 8104a4a:	2b00      	cmp	r3, #0
 8104a4c:	f000 8186 	beq.w	8104d5c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8104a50:	683b      	ldr	r3, [r7, #0]
 8104a52:	685b      	ldr	r3, [r3, #4]
 8104a54:	2b01      	cmp	r3, #1
 8104a56:	d00b      	beq.n	8104a70 <HAL_GPIO_Init+0x4c>
 8104a58:	683b      	ldr	r3, [r7, #0]
 8104a5a:	685b      	ldr	r3, [r3, #4]
 8104a5c:	2b02      	cmp	r3, #2
 8104a5e:	d007      	beq.n	8104a70 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8104a60:	683b      	ldr	r3, [r7, #0]
 8104a62:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8104a64:	2b11      	cmp	r3, #17
 8104a66:	d003      	beq.n	8104a70 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8104a68:	683b      	ldr	r3, [r7, #0]
 8104a6a:	685b      	ldr	r3, [r3, #4]
 8104a6c:	2b12      	cmp	r3, #18
 8104a6e:	d130      	bne.n	8104ad2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8104a70:	687b      	ldr	r3, [r7, #4]
 8104a72:	689b      	ldr	r3, [r3, #8]
 8104a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8104a76:	69fb      	ldr	r3, [r7, #28]
 8104a78:	005b      	lsls	r3, r3, #1
 8104a7a:	2203      	movs	r2, #3
 8104a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8104a80:	43db      	mvns	r3, r3
 8104a82:	69ba      	ldr	r2, [r7, #24]
 8104a84:	4013      	ands	r3, r2
 8104a86:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8104a88:	683b      	ldr	r3, [r7, #0]
 8104a8a:	68da      	ldr	r2, [r3, #12]
 8104a8c:	69fb      	ldr	r3, [r7, #28]
 8104a8e:	005b      	lsls	r3, r3, #1
 8104a90:	fa02 f303 	lsl.w	r3, r2, r3
 8104a94:	69ba      	ldr	r2, [r7, #24]
 8104a96:	4313      	orrs	r3, r2
 8104a98:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8104a9a:	687b      	ldr	r3, [r7, #4]
 8104a9c:	69ba      	ldr	r2, [r7, #24]
 8104a9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8104aa0:	687b      	ldr	r3, [r7, #4]
 8104aa2:	685b      	ldr	r3, [r3, #4]
 8104aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8104aa6:	2201      	movs	r2, #1
 8104aa8:	69fb      	ldr	r3, [r7, #28]
 8104aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8104aae:	43db      	mvns	r3, r3
 8104ab0:	69ba      	ldr	r2, [r7, #24]
 8104ab2:	4013      	ands	r3, r2
 8104ab4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8104ab6:	683b      	ldr	r3, [r7, #0]
 8104ab8:	685b      	ldr	r3, [r3, #4]
 8104aba:	091b      	lsrs	r3, r3, #4
 8104abc:	f003 0201 	and.w	r2, r3, #1
 8104ac0:	69fb      	ldr	r3, [r7, #28]
 8104ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8104ac6:	69ba      	ldr	r2, [r7, #24]
 8104ac8:	4313      	orrs	r3, r2
 8104aca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8104acc:	687b      	ldr	r3, [r7, #4]
 8104ace:	69ba      	ldr	r2, [r7, #24]
 8104ad0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8104ad2:	687b      	ldr	r3, [r7, #4]
 8104ad4:	68db      	ldr	r3, [r3, #12]
 8104ad6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8104ad8:	69fb      	ldr	r3, [r7, #28]
 8104ada:	005b      	lsls	r3, r3, #1
 8104adc:	2203      	movs	r2, #3
 8104ade:	fa02 f303 	lsl.w	r3, r2, r3
 8104ae2:	43db      	mvns	r3, r3
 8104ae4:	69ba      	ldr	r2, [r7, #24]
 8104ae6:	4013      	ands	r3, r2
 8104ae8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8104aea:	683b      	ldr	r3, [r7, #0]
 8104aec:	689a      	ldr	r2, [r3, #8]
 8104aee:	69fb      	ldr	r3, [r7, #28]
 8104af0:	005b      	lsls	r3, r3, #1
 8104af2:	fa02 f303 	lsl.w	r3, r2, r3
 8104af6:	69ba      	ldr	r2, [r7, #24]
 8104af8:	4313      	orrs	r3, r2
 8104afa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8104afc:	687b      	ldr	r3, [r7, #4]
 8104afe:	69ba      	ldr	r2, [r7, #24]
 8104b00:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8104b02:	683b      	ldr	r3, [r7, #0]
 8104b04:	685b      	ldr	r3, [r3, #4]
 8104b06:	2b02      	cmp	r3, #2
 8104b08:	d003      	beq.n	8104b12 <HAL_GPIO_Init+0xee>
 8104b0a:	683b      	ldr	r3, [r7, #0]
 8104b0c:	685b      	ldr	r3, [r3, #4]
 8104b0e:	2b12      	cmp	r3, #18
 8104b10:	d123      	bne.n	8104b5a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8104b12:	69fb      	ldr	r3, [r7, #28]
 8104b14:	08da      	lsrs	r2, r3, #3
 8104b16:	687b      	ldr	r3, [r7, #4]
 8104b18:	3208      	adds	r2, #8
 8104b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8104b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8104b20:	69fb      	ldr	r3, [r7, #28]
 8104b22:	f003 0307 	and.w	r3, r3, #7
 8104b26:	009b      	lsls	r3, r3, #2
 8104b28:	220f      	movs	r2, #15
 8104b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8104b2e:	43db      	mvns	r3, r3
 8104b30:	69ba      	ldr	r2, [r7, #24]
 8104b32:	4013      	ands	r3, r2
 8104b34:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8104b36:	683b      	ldr	r3, [r7, #0]
 8104b38:	691a      	ldr	r2, [r3, #16]
 8104b3a:	69fb      	ldr	r3, [r7, #28]
 8104b3c:	f003 0307 	and.w	r3, r3, #7
 8104b40:	009b      	lsls	r3, r3, #2
 8104b42:	fa02 f303 	lsl.w	r3, r2, r3
 8104b46:	69ba      	ldr	r2, [r7, #24]
 8104b48:	4313      	orrs	r3, r2
 8104b4a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8104b4c:	69fb      	ldr	r3, [r7, #28]
 8104b4e:	08da      	lsrs	r2, r3, #3
 8104b50:	687b      	ldr	r3, [r7, #4]
 8104b52:	3208      	adds	r2, #8
 8104b54:	69b9      	ldr	r1, [r7, #24]
 8104b56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8104b5a:	687b      	ldr	r3, [r7, #4]
 8104b5c:	681b      	ldr	r3, [r3, #0]
 8104b5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8104b60:	69fb      	ldr	r3, [r7, #28]
 8104b62:	005b      	lsls	r3, r3, #1
 8104b64:	2203      	movs	r2, #3
 8104b66:	fa02 f303 	lsl.w	r3, r2, r3
 8104b6a:	43db      	mvns	r3, r3
 8104b6c:	69ba      	ldr	r2, [r7, #24]
 8104b6e:	4013      	ands	r3, r2
 8104b70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8104b72:	683b      	ldr	r3, [r7, #0]
 8104b74:	685b      	ldr	r3, [r3, #4]
 8104b76:	f003 0203 	and.w	r2, r3, #3
 8104b7a:	69fb      	ldr	r3, [r7, #28]
 8104b7c:	005b      	lsls	r3, r3, #1
 8104b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8104b82:	69ba      	ldr	r2, [r7, #24]
 8104b84:	4313      	orrs	r3, r2
 8104b86:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8104b88:	687b      	ldr	r3, [r7, #4]
 8104b8a:	69ba      	ldr	r2, [r7, #24]
 8104b8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8104b8e:	683b      	ldr	r3, [r7, #0]
 8104b90:	685b      	ldr	r3, [r3, #4]
 8104b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8104b96:	2b00      	cmp	r3, #0
 8104b98:	f000 80e0 	beq.w	8104d5c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8104b9c:	4b2f      	ldr	r3, [pc, #188]	; (8104c5c <HAL_GPIO_Init+0x238>)
 8104b9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8104ba2:	4a2e      	ldr	r2, [pc, #184]	; (8104c5c <HAL_GPIO_Init+0x238>)
 8104ba4:	f043 0302 	orr.w	r3, r3, #2
 8104ba8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8104bac:	4b2b      	ldr	r3, [pc, #172]	; (8104c5c <HAL_GPIO_Init+0x238>)
 8104bae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8104bb2:	f003 0302 	and.w	r3, r3, #2
 8104bb6:	60fb      	str	r3, [r7, #12]
 8104bb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8104bba:	4a29      	ldr	r2, [pc, #164]	; (8104c60 <HAL_GPIO_Init+0x23c>)
 8104bbc:	69fb      	ldr	r3, [r7, #28]
 8104bbe:	089b      	lsrs	r3, r3, #2
 8104bc0:	3302      	adds	r3, #2
 8104bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8104bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8104bc8:	69fb      	ldr	r3, [r7, #28]
 8104bca:	f003 0303 	and.w	r3, r3, #3
 8104bce:	009b      	lsls	r3, r3, #2
 8104bd0:	220f      	movs	r2, #15
 8104bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8104bd6:	43db      	mvns	r3, r3
 8104bd8:	69ba      	ldr	r2, [r7, #24]
 8104bda:	4013      	ands	r3, r2
 8104bdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8104bde:	687b      	ldr	r3, [r7, #4]
 8104be0:	4a20      	ldr	r2, [pc, #128]	; (8104c64 <HAL_GPIO_Init+0x240>)
 8104be2:	4293      	cmp	r3, r2
 8104be4:	d052      	beq.n	8104c8c <HAL_GPIO_Init+0x268>
 8104be6:	687b      	ldr	r3, [r7, #4]
 8104be8:	4a1f      	ldr	r2, [pc, #124]	; (8104c68 <HAL_GPIO_Init+0x244>)
 8104bea:	4293      	cmp	r3, r2
 8104bec:	d031      	beq.n	8104c52 <HAL_GPIO_Init+0x22e>
 8104bee:	687b      	ldr	r3, [r7, #4]
 8104bf0:	4a1e      	ldr	r2, [pc, #120]	; (8104c6c <HAL_GPIO_Init+0x248>)
 8104bf2:	4293      	cmp	r3, r2
 8104bf4:	d02b      	beq.n	8104c4e <HAL_GPIO_Init+0x22a>
 8104bf6:	687b      	ldr	r3, [r7, #4]
 8104bf8:	4a1d      	ldr	r2, [pc, #116]	; (8104c70 <HAL_GPIO_Init+0x24c>)
 8104bfa:	4293      	cmp	r3, r2
 8104bfc:	d025      	beq.n	8104c4a <HAL_GPIO_Init+0x226>
 8104bfe:	687b      	ldr	r3, [r7, #4]
 8104c00:	4a1c      	ldr	r2, [pc, #112]	; (8104c74 <HAL_GPIO_Init+0x250>)
 8104c02:	4293      	cmp	r3, r2
 8104c04:	d01f      	beq.n	8104c46 <HAL_GPIO_Init+0x222>
 8104c06:	687b      	ldr	r3, [r7, #4]
 8104c08:	4a1b      	ldr	r2, [pc, #108]	; (8104c78 <HAL_GPIO_Init+0x254>)
 8104c0a:	4293      	cmp	r3, r2
 8104c0c:	d019      	beq.n	8104c42 <HAL_GPIO_Init+0x21e>
 8104c0e:	687b      	ldr	r3, [r7, #4]
 8104c10:	4a1a      	ldr	r2, [pc, #104]	; (8104c7c <HAL_GPIO_Init+0x258>)
 8104c12:	4293      	cmp	r3, r2
 8104c14:	d013      	beq.n	8104c3e <HAL_GPIO_Init+0x21a>
 8104c16:	687b      	ldr	r3, [r7, #4]
 8104c18:	4a19      	ldr	r2, [pc, #100]	; (8104c80 <HAL_GPIO_Init+0x25c>)
 8104c1a:	4293      	cmp	r3, r2
 8104c1c:	d00d      	beq.n	8104c3a <HAL_GPIO_Init+0x216>
 8104c1e:	687b      	ldr	r3, [r7, #4]
 8104c20:	4a18      	ldr	r2, [pc, #96]	; (8104c84 <HAL_GPIO_Init+0x260>)
 8104c22:	4293      	cmp	r3, r2
 8104c24:	d007      	beq.n	8104c36 <HAL_GPIO_Init+0x212>
 8104c26:	687b      	ldr	r3, [r7, #4]
 8104c28:	4a17      	ldr	r2, [pc, #92]	; (8104c88 <HAL_GPIO_Init+0x264>)
 8104c2a:	4293      	cmp	r3, r2
 8104c2c:	d101      	bne.n	8104c32 <HAL_GPIO_Init+0x20e>
 8104c2e:	2309      	movs	r3, #9
 8104c30:	e02d      	b.n	8104c8e <HAL_GPIO_Init+0x26a>
 8104c32:	230a      	movs	r3, #10
 8104c34:	e02b      	b.n	8104c8e <HAL_GPIO_Init+0x26a>
 8104c36:	2308      	movs	r3, #8
 8104c38:	e029      	b.n	8104c8e <HAL_GPIO_Init+0x26a>
 8104c3a:	2307      	movs	r3, #7
 8104c3c:	e027      	b.n	8104c8e <HAL_GPIO_Init+0x26a>
 8104c3e:	2306      	movs	r3, #6
 8104c40:	e025      	b.n	8104c8e <HAL_GPIO_Init+0x26a>
 8104c42:	2305      	movs	r3, #5
 8104c44:	e023      	b.n	8104c8e <HAL_GPIO_Init+0x26a>
 8104c46:	2304      	movs	r3, #4
 8104c48:	e021      	b.n	8104c8e <HAL_GPIO_Init+0x26a>
 8104c4a:	2303      	movs	r3, #3
 8104c4c:	e01f      	b.n	8104c8e <HAL_GPIO_Init+0x26a>
 8104c4e:	2302      	movs	r3, #2
 8104c50:	e01d      	b.n	8104c8e <HAL_GPIO_Init+0x26a>
 8104c52:	2301      	movs	r3, #1
 8104c54:	e01b      	b.n	8104c8e <HAL_GPIO_Init+0x26a>
 8104c56:	bf00      	nop
 8104c58:	580000c0 	.word	0x580000c0
 8104c5c:	58024400 	.word	0x58024400
 8104c60:	58000400 	.word	0x58000400
 8104c64:	58020000 	.word	0x58020000
 8104c68:	58020400 	.word	0x58020400
 8104c6c:	58020800 	.word	0x58020800
 8104c70:	58020c00 	.word	0x58020c00
 8104c74:	58021000 	.word	0x58021000
 8104c78:	58021400 	.word	0x58021400
 8104c7c:	58021800 	.word	0x58021800
 8104c80:	58021c00 	.word	0x58021c00
 8104c84:	58022000 	.word	0x58022000
 8104c88:	58022400 	.word	0x58022400
 8104c8c:	2300      	movs	r3, #0
 8104c8e:	69fa      	ldr	r2, [r7, #28]
 8104c90:	f002 0203 	and.w	r2, r2, #3
 8104c94:	0092      	lsls	r2, r2, #2
 8104c96:	4093      	lsls	r3, r2
 8104c98:	69ba      	ldr	r2, [r7, #24]
 8104c9a:	4313      	orrs	r3, r2
 8104c9c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8104c9e:	4938      	ldr	r1, [pc, #224]	; (8104d80 <HAL_GPIO_Init+0x35c>)
 8104ca0:	69fb      	ldr	r3, [r7, #28]
 8104ca2:	089b      	lsrs	r3, r3, #2
 8104ca4:	3302      	adds	r3, #2
 8104ca6:	69ba      	ldr	r2, [r7, #24]
 8104ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8104cac:	697b      	ldr	r3, [r7, #20]
 8104cae:	681b      	ldr	r3, [r3, #0]
 8104cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104cb2:	693b      	ldr	r3, [r7, #16]
 8104cb4:	43db      	mvns	r3, r3
 8104cb6:	69ba      	ldr	r2, [r7, #24]
 8104cb8:	4013      	ands	r3, r2
 8104cba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8104cbc:	683b      	ldr	r3, [r7, #0]
 8104cbe:	685b      	ldr	r3, [r3, #4]
 8104cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104cc4:	2b00      	cmp	r3, #0
 8104cc6:	d003      	beq.n	8104cd0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8104cc8:	69ba      	ldr	r2, [r7, #24]
 8104cca:	693b      	ldr	r3, [r7, #16]
 8104ccc:	4313      	orrs	r3, r2
 8104cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8104cd0:	697b      	ldr	r3, [r7, #20]
 8104cd2:	69ba      	ldr	r2, [r7, #24]
 8104cd4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8104cd6:	697b      	ldr	r3, [r7, #20]
 8104cd8:	685b      	ldr	r3, [r3, #4]
 8104cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104cdc:	693b      	ldr	r3, [r7, #16]
 8104cde:	43db      	mvns	r3, r3
 8104ce0:	69ba      	ldr	r2, [r7, #24]
 8104ce2:	4013      	ands	r3, r2
 8104ce4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8104ce6:	683b      	ldr	r3, [r7, #0]
 8104ce8:	685b      	ldr	r3, [r3, #4]
 8104cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104cee:	2b00      	cmp	r3, #0
 8104cf0:	d003      	beq.n	8104cfa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8104cf2:	69ba      	ldr	r2, [r7, #24]
 8104cf4:	693b      	ldr	r3, [r7, #16]
 8104cf6:	4313      	orrs	r3, r2
 8104cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8104cfa:	697b      	ldr	r3, [r7, #20]
 8104cfc:	69ba      	ldr	r2, [r7, #24]
 8104cfe:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8104d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8104d04:	681b      	ldr	r3, [r3, #0]
 8104d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104d08:	693b      	ldr	r3, [r7, #16]
 8104d0a:	43db      	mvns	r3, r3
 8104d0c:	69ba      	ldr	r2, [r7, #24]
 8104d0e:	4013      	ands	r3, r2
 8104d10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8104d12:	683b      	ldr	r3, [r7, #0]
 8104d14:	685b      	ldr	r3, [r3, #4]
 8104d16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8104d1a:	2b00      	cmp	r3, #0
 8104d1c:	d003      	beq.n	8104d26 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8104d1e:	69ba      	ldr	r2, [r7, #24]
 8104d20:	693b      	ldr	r3, [r7, #16]
 8104d22:	4313      	orrs	r3, r2
 8104d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8104d26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8104d2a:	69bb      	ldr	r3, [r7, #24]
 8104d2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8104d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8104d32:	685b      	ldr	r3, [r3, #4]
 8104d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104d36:	693b      	ldr	r3, [r7, #16]
 8104d38:	43db      	mvns	r3, r3
 8104d3a:	69ba      	ldr	r2, [r7, #24]
 8104d3c:	4013      	ands	r3, r2
 8104d3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8104d40:	683b      	ldr	r3, [r7, #0]
 8104d42:	685b      	ldr	r3, [r3, #4]
 8104d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8104d48:	2b00      	cmp	r3, #0
 8104d4a:	d003      	beq.n	8104d54 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8104d4c:	69ba      	ldr	r2, [r7, #24]
 8104d4e:	693b      	ldr	r3, [r7, #16]
 8104d50:	4313      	orrs	r3, r2
 8104d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8104d54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8104d58:	69bb      	ldr	r3, [r7, #24]
 8104d5a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8104d5c:	69fb      	ldr	r3, [r7, #28]
 8104d5e:	3301      	adds	r3, #1
 8104d60:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104d62:	683b      	ldr	r3, [r7, #0]
 8104d64:	681a      	ldr	r2, [r3, #0]
 8104d66:	69fb      	ldr	r3, [r7, #28]
 8104d68:	fa22 f303 	lsr.w	r3, r2, r3
 8104d6c:	2b00      	cmp	r3, #0
 8104d6e:	f47f ae63 	bne.w	8104a38 <HAL_GPIO_Init+0x14>
  }
}
 8104d72:	bf00      	nop
 8104d74:	3724      	adds	r7, #36	; 0x24
 8104d76:	46bd      	mov	sp, r7
 8104d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d7c:	4770      	bx	lr
 8104d7e:	bf00      	nop
 8104d80:	58000400 	.word	0x58000400

08104d84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8104d84:	b480      	push	{r7}
 8104d86:	b085      	sub	sp, #20
 8104d88:	af00      	add	r7, sp, #0
 8104d8a:	6078      	str	r0, [r7, #4]
 8104d8c:	460b      	mov	r3, r1
 8104d8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8104d90:	687b      	ldr	r3, [r7, #4]
 8104d92:	691a      	ldr	r2, [r3, #16]
 8104d94:	887b      	ldrh	r3, [r7, #2]
 8104d96:	4013      	ands	r3, r2
 8104d98:	2b00      	cmp	r3, #0
 8104d9a:	d002      	beq.n	8104da2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8104d9c:	2301      	movs	r3, #1
 8104d9e:	73fb      	strb	r3, [r7, #15]
 8104da0:	e001      	b.n	8104da6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8104da2:	2300      	movs	r3, #0
 8104da4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8104da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8104da8:	4618      	mov	r0, r3
 8104daa:	3714      	adds	r7, #20
 8104dac:	46bd      	mov	sp, r7
 8104dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104db2:	4770      	bx	lr

08104db4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8104db4:	b480      	push	{r7}
 8104db6:	b083      	sub	sp, #12
 8104db8:	af00      	add	r7, sp, #0
 8104dba:	6078      	str	r0, [r7, #4]
 8104dbc:	460b      	mov	r3, r1
 8104dbe:	807b      	strh	r3, [r7, #2]
 8104dc0:	4613      	mov	r3, r2
 8104dc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8104dc4:	787b      	ldrb	r3, [r7, #1]
 8104dc6:	2b00      	cmp	r3, #0
 8104dc8:	d003      	beq.n	8104dd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8104dca:	887a      	ldrh	r2, [r7, #2]
 8104dcc:	687b      	ldr	r3, [r7, #4]
 8104dce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8104dd0:	e003      	b.n	8104dda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8104dd2:	887b      	ldrh	r3, [r7, #2]
 8104dd4:	041a      	lsls	r2, r3, #16
 8104dd6:	687b      	ldr	r3, [r7, #4]
 8104dd8:	619a      	str	r2, [r3, #24]
}
 8104dda:	bf00      	nop
 8104ddc:	370c      	adds	r7, #12
 8104dde:	46bd      	mov	sp, r7
 8104de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104de4:	4770      	bx	lr
	...

08104de8 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 8104de8:	b480      	push	{r7}
 8104dea:	b083      	sub	sp, #12
 8104dec:	af00      	add	r7, sp, #0
 8104dee:	6078      	str	r0, [r7, #4]
 8104df0:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 8104df2:	490e      	ldr	r1, [pc, #56]	; (8104e2c <HAL_HSEM_Take+0x44>)
 8104df4:	683b      	ldr	r3, [r7, #0]
 8104df6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8104dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8104dfe:	687a      	ldr	r2, [r7, #4]
 8104e00:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 8104e04:	4a09      	ldr	r2, [pc, #36]	; (8104e2c <HAL_HSEM_Take+0x44>)
 8104e06:	687b      	ldr	r3, [r7, #4]
 8104e08:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8104e0c:	683b      	ldr	r3, [r7, #0]
 8104e0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8104e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8104e16:	429a      	cmp	r2, r3
 8104e18:	d101      	bne.n	8104e1e <HAL_HSEM_Take+0x36>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 8104e1a:	2300      	movs	r3, #0
 8104e1c:	e000      	b.n	8104e20 <HAL_HSEM_Take+0x38>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 8104e1e:	2301      	movs	r3, #1
}
 8104e20:	4618      	mov	r0, r3
 8104e22:	370c      	adds	r7, #12
 8104e24:	46bd      	mov	sp, r7
 8104e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e2a:	4770      	bx	lr
 8104e2c:	58026400 	.word	0x58026400

08104e30 <HAL_HSEM_IsSemTaken>:
  * @brief  Check semaphore state Taken or not.
  * @param  SemID: semaphore ID
  * @retval HAL HSEM state
  */
uint32_t HAL_HSEM_IsSemTaken(uint32_t SemID)
{
 8104e30:	b480      	push	{r7}
 8104e32:	b083      	sub	sp, #12
 8104e34:	af00      	add	r7, sp, #0
 8104e36:	6078      	str	r0, [r7, #4]
  return (((HSEM->R[SemID] & HSEM_R_LOCK) != 0U) ? 1UL : 0UL);
 8104e38:	4a07      	ldr	r2, [pc, #28]	; (8104e58 <HAL_HSEM_IsSemTaken+0x28>)
 8104e3a:	687b      	ldr	r3, [r7, #4]
 8104e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8104e40:	2b00      	cmp	r3, #0
 8104e42:	da01      	bge.n	8104e48 <HAL_HSEM_IsSemTaken+0x18>
 8104e44:	2301      	movs	r3, #1
 8104e46:	e000      	b.n	8104e4a <HAL_HSEM_IsSemTaken+0x1a>
 8104e48:	2300      	movs	r3, #0
}
 8104e4a:	4618      	mov	r0, r3
 8104e4c:	370c      	adds	r7, #12
 8104e4e:	46bd      	mov	sp, r7
 8104e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e54:	4770      	bx	lr
 8104e56:	bf00      	nop
 8104e58:	58026400 	.word	0x58026400

08104e5c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8104e5c:	b480      	push	{r7}
 8104e5e:	b083      	sub	sp, #12
 8104e60:	af00      	add	r7, sp, #0
 8104e62:	6078      	str	r0, [r7, #4]
 8104e64:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8104e66:	4906      	ldr	r1, [pc, #24]	; (8104e80 <HAL_HSEM_Release+0x24>)
 8104e68:	683b      	ldr	r3, [r7, #0]
 8104e6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104e6e:	687b      	ldr	r3, [r7, #4]
 8104e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8104e74:	bf00      	nop
 8104e76:	370c      	adds	r7, #12
 8104e78:	46bd      	mov	sp, r7
 8104e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e7e:	4770      	bx	lr
 8104e80:	58026400 	.word	0x58026400

08104e84 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8104e84:	b480      	push	{r7}
 8104e86:	b083      	sub	sp, #12
 8104e88:	af00      	add	r7, sp, #0
 8104e8a:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8104e8c:	4b05      	ldr	r3, [pc, #20]	; (8104ea4 <HAL_HSEM_ActivateNotification+0x20>)
 8104e8e:	681a      	ldr	r2, [r3, #0]
 8104e90:	4904      	ldr	r1, [pc, #16]	; (8104ea4 <HAL_HSEM_ActivateNotification+0x20>)
 8104e92:	687b      	ldr	r3, [r7, #4]
 8104e94:	4313      	orrs	r3, r2
 8104e96:	600b      	str	r3, [r1, #0]
#endif
}
 8104e98:	bf00      	nop
 8104e9a:	370c      	adds	r7, #12
 8104e9c:	46bd      	mov	sp, r7
 8104e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ea2:	4770      	bx	lr
 8104ea4:	58026510 	.word	0x58026510

08104ea8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8104ea8:	b580      	push	{r7, lr}
 8104eaa:	b082      	sub	sp, #8
 8104eac:	af00      	add	r7, sp, #0
 8104eae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8104eb0:	687b      	ldr	r3, [r7, #4]
 8104eb2:	2b00      	cmp	r3, #0
 8104eb4:	d101      	bne.n	8104eba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8104eb6:	2301      	movs	r3, #1
 8104eb8:	e081      	b.n	8104fbe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8104eba:	687b      	ldr	r3, [r7, #4]
 8104ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104ec0:	b2db      	uxtb	r3, r3
 8104ec2:	2b00      	cmp	r3, #0
 8104ec4:	d106      	bne.n	8104ed4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8104ec6:	687b      	ldr	r3, [r7, #4]
 8104ec8:	2200      	movs	r2, #0
 8104eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8104ece:	6878      	ldr	r0, [r7, #4]
 8104ed0:	f7fc fade 	bl	8101490 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8104ed4:	687b      	ldr	r3, [r7, #4]
 8104ed6:	2224      	movs	r2, #36	; 0x24
 8104ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8104edc:	687b      	ldr	r3, [r7, #4]
 8104ede:	681b      	ldr	r3, [r3, #0]
 8104ee0:	681a      	ldr	r2, [r3, #0]
 8104ee2:	687b      	ldr	r3, [r7, #4]
 8104ee4:	681b      	ldr	r3, [r3, #0]
 8104ee6:	f022 0201 	bic.w	r2, r2, #1
 8104eea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8104eec:	687b      	ldr	r3, [r7, #4]
 8104eee:	685a      	ldr	r2, [r3, #4]
 8104ef0:	687b      	ldr	r3, [r7, #4]
 8104ef2:	681b      	ldr	r3, [r3, #0]
 8104ef4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8104ef8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8104efa:	687b      	ldr	r3, [r7, #4]
 8104efc:	681b      	ldr	r3, [r3, #0]
 8104efe:	689a      	ldr	r2, [r3, #8]
 8104f00:	687b      	ldr	r3, [r7, #4]
 8104f02:	681b      	ldr	r3, [r3, #0]
 8104f04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8104f08:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8104f0a:	687b      	ldr	r3, [r7, #4]
 8104f0c:	68db      	ldr	r3, [r3, #12]
 8104f0e:	2b01      	cmp	r3, #1
 8104f10:	d107      	bne.n	8104f22 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8104f12:	687b      	ldr	r3, [r7, #4]
 8104f14:	689a      	ldr	r2, [r3, #8]
 8104f16:	687b      	ldr	r3, [r7, #4]
 8104f18:	681b      	ldr	r3, [r3, #0]
 8104f1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8104f1e:	609a      	str	r2, [r3, #8]
 8104f20:	e006      	b.n	8104f30 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8104f22:	687b      	ldr	r3, [r7, #4]
 8104f24:	689a      	ldr	r2, [r3, #8]
 8104f26:	687b      	ldr	r3, [r7, #4]
 8104f28:	681b      	ldr	r3, [r3, #0]
 8104f2a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8104f2e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8104f30:	687b      	ldr	r3, [r7, #4]
 8104f32:	68db      	ldr	r3, [r3, #12]
 8104f34:	2b02      	cmp	r3, #2
 8104f36:	d104      	bne.n	8104f42 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8104f38:	687b      	ldr	r3, [r7, #4]
 8104f3a:	681b      	ldr	r3, [r3, #0]
 8104f3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8104f40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8104f42:	687b      	ldr	r3, [r7, #4]
 8104f44:	681b      	ldr	r3, [r3, #0]
 8104f46:	685b      	ldr	r3, [r3, #4]
 8104f48:	687a      	ldr	r2, [r7, #4]
 8104f4a:	6812      	ldr	r2, [r2, #0]
 8104f4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8104f50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8104f54:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8104f56:	687b      	ldr	r3, [r7, #4]
 8104f58:	681b      	ldr	r3, [r3, #0]
 8104f5a:	68da      	ldr	r2, [r3, #12]
 8104f5c:	687b      	ldr	r3, [r7, #4]
 8104f5e:	681b      	ldr	r3, [r3, #0]
 8104f60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8104f64:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8104f66:	687b      	ldr	r3, [r7, #4]
 8104f68:	691a      	ldr	r2, [r3, #16]
 8104f6a:	687b      	ldr	r3, [r7, #4]
 8104f6c:	695b      	ldr	r3, [r3, #20]
 8104f6e:	ea42 0103 	orr.w	r1, r2, r3
 8104f72:	687b      	ldr	r3, [r7, #4]
 8104f74:	699b      	ldr	r3, [r3, #24]
 8104f76:	021a      	lsls	r2, r3, #8
 8104f78:	687b      	ldr	r3, [r7, #4]
 8104f7a:	681b      	ldr	r3, [r3, #0]
 8104f7c:	430a      	orrs	r2, r1
 8104f7e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8104f80:	687b      	ldr	r3, [r7, #4]
 8104f82:	69d9      	ldr	r1, [r3, #28]
 8104f84:	687b      	ldr	r3, [r7, #4]
 8104f86:	6a1a      	ldr	r2, [r3, #32]
 8104f88:	687b      	ldr	r3, [r7, #4]
 8104f8a:	681b      	ldr	r3, [r3, #0]
 8104f8c:	430a      	orrs	r2, r1
 8104f8e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8104f90:	687b      	ldr	r3, [r7, #4]
 8104f92:	681b      	ldr	r3, [r3, #0]
 8104f94:	681a      	ldr	r2, [r3, #0]
 8104f96:	687b      	ldr	r3, [r7, #4]
 8104f98:	681b      	ldr	r3, [r3, #0]
 8104f9a:	f042 0201 	orr.w	r2, r2, #1
 8104f9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8104fa0:	687b      	ldr	r3, [r7, #4]
 8104fa2:	2200      	movs	r2, #0
 8104fa4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8104fa6:	687b      	ldr	r3, [r7, #4]
 8104fa8:	2220      	movs	r2, #32
 8104faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8104fae:	687b      	ldr	r3, [r7, #4]
 8104fb0:	2200      	movs	r2, #0
 8104fb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8104fb4:	687b      	ldr	r3, [r7, #4]
 8104fb6:	2200      	movs	r2, #0
 8104fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8104fbc:	2300      	movs	r3, #0
}
 8104fbe:	4618      	mov	r0, r3
 8104fc0:	3708      	adds	r7, #8
 8104fc2:	46bd      	mov	sp, r7
 8104fc4:	bd80      	pop	{r7, pc}

08104fc6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8104fc6:	b480      	push	{r7}
 8104fc8:	b083      	sub	sp, #12
 8104fca:	af00      	add	r7, sp, #0
 8104fcc:	6078      	str	r0, [r7, #4]
 8104fce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104fd0:	687b      	ldr	r3, [r7, #4]
 8104fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104fd6:	b2db      	uxtb	r3, r3
 8104fd8:	2b20      	cmp	r3, #32
 8104fda:	d138      	bne.n	810504e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104fdc:	687b      	ldr	r3, [r7, #4]
 8104fde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104fe2:	2b01      	cmp	r3, #1
 8104fe4:	d101      	bne.n	8104fea <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8104fe6:	2302      	movs	r3, #2
 8104fe8:	e032      	b.n	8105050 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8104fea:	687b      	ldr	r3, [r7, #4]
 8104fec:	2201      	movs	r2, #1
 8104fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8104ff2:	687b      	ldr	r3, [r7, #4]
 8104ff4:	2224      	movs	r2, #36	; 0x24
 8104ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8104ffa:	687b      	ldr	r3, [r7, #4]
 8104ffc:	681b      	ldr	r3, [r3, #0]
 8104ffe:	681a      	ldr	r2, [r3, #0]
 8105000:	687b      	ldr	r3, [r7, #4]
 8105002:	681b      	ldr	r3, [r3, #0]
 8105004:	f022 0201 	bic.w	r2, r2, #1
 8105008:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 810500a:	687b      	ldr	r3, [r7, #4]
 810500c:	681b      	ldr	r3, [r3, #0]
 810500e:	681a      	ldr	r2, [r3, #0]
 8105010:	687b      	ldr	r3, [r7, #4]
 8105012:	681b      	ldr	r3, [r3, #0]
 8105014:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8105018:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 810501a:	687b      	ldr	r3, [r7, #4]
 810501c:	681b      	ldr	r3, [r3, #0]
 810501e:	6819      	ldr	r1, [r3, #0]
 8105020:	687b      	ldr	r3, [r7, #4]
 8105022:	681b      	ldr	r3, [r3, #0]
 8105024:	683a      	ldr	r2, [r7, #0]
 8105026:	430a      	orrs	r2, r1
 8105028:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 810502a:	687b      	ldr	r3, [r7, #4]
 810502c:	681b      	ldr	r3, [r3, #0]
 810502e:	681a      	ldr	r2, [r3, #0]
 8105030:	687b      	ldr	r3, [r7, #4]
 8105032:	681b      	ldr	r3, [r3, #0]
 8105034:	f042 0201 	orr.w	r2, r2, #1
 8105038:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 810503a:	687b      	ldr	r3, [r7, #4]
 810503c:	2220      	movs	r2, #32
 810503e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105042:	687b      	ldr	r3, [r7, #4]
 8105044:	2200      	movs	r2, #0
 8105046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810504a:	2300      	movs	r3, #0
 810504c:	e000      	b.n	8105050 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 810504e:	2302      	movs	r3, #2
  }
}
 8105050:	4618      	mov	r0, r3
 8105052:	370c      	adds	r7, #12
 8105054:	46bd      	mov	sp, r7
 8105056:	f85d 7b04 	ldr.w	r7, [sp], #4
 810505a:	4770      	bx	lr

0810505c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 810505c:	b480      	push	{r7}
 810505e:	b085      	sub	sp, #20
 8105060:	af00      	add	r7, sp, #0
 8105062:	6078      	str	r0, [r7, #4]
 8105064:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8105066:	687b      	ldr	r3, [r7, #4]
 8105068:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810506c:	b2db      	uxtb	r3, r3
 810506e:	2b20      	cmp	r3, #32
 8105070:	d139      	bne.n	81050e6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8105072:	687b      	ldr	r3, [r7, #4]
 8105074:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8105078:	2b01      	cmp	r3, #1
 810507a:	d101      	bne.n	8105080 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 810507c:	2302      	movs	r3, #2
 810507e:	e033      	b.n	81050e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8105080:	687b      	ldr	r3, [r7, #4]
 8105082:	2201      	movs	r2, #1
 8105084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8105088:	687b      	ldr	r3, [r7, #4]
 810508a:	2224      	movs	r2, #36	; 0x24
 810508c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8105090:	687b      	ldr	r3, [r7, #4]
 8105092:	681b      	ldr	r3, [r3, #0]
 8105094:	681a      	ldr	r2, [r3, #0]
 8105096:	687b      	ldr	r3, [r7, #4]
 8105098:	681b      	ldr	r3, [r3, #0]
 810509a:	f022 0201 	bic.w	r2, r2, #1
 810509e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 81050a0:	687b      	ldr	r3, [r7, #4]
 81050a2:	681b      	ldr	r3, [r3, #0]
 81050a4:	681b      	ldr	r3, [r3, #0]
 81050a6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 81050a8:	68fb      	ldr	r3, [r7, #12]
 81050aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81050ae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 81050b0:	683b      	ldr	r3, [r7, #0]
 81050b2:	021b      	lsls	r3, r3, #8
 81050b4:	68fa      	ldr	r2, [r7, #12]
 81050b6:	4313      	orrs	r3, r2
 81050b8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 81050ba:	687b      	ldr	r3, [r7, #4]
 81050bc:	681b      	ldr	r3, [r3, #0]
 81050be:	68fa      	ldr	r2, [r7, #12]
 81050c0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 81050c2:	687b      	ldr	r3, [r7, #4]
 81050c4:	681b      	ldr	r3, [r3, #0]
 81050c6:	681a      	ldr	r2, [r3, #0]
 81050c8:	687b      	ldr	r3, [r7, #4]
 81050ca:	681b      	ldr	r3, [r3, #0]
 81050cc:	f042 0201 	orr.w	r2, r2, #1
 81050d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81050d2:	687b      	ldr	r3, [r7, #4]
 81050d4:	2220      	movs	r2, #32
 81050d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81050da:	687b      	ldr	r3, [r7, #4]
 81050dc:	2200      	movs	r2, #0
 81050de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81050e2:	2300      	movs	r3, #0
 81050e4:	e000      	b.n	81050e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 81050e6:	2302      	movs	r3, #2
  }
}
 81050e8:	4618      	mov	r0, r3
 81050ea:	3714      	adds	r7, #20
 81050ec:	46bd      	mov	sp, r7
 81050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81050f2:	4770      	bx	lr

081050f4 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 81050f4:	b480      	push	{r7}
 81050f6:	b085      	sub	sp, #20
 81050f8:	af00      	add	r7, sp, #0
 81050fa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81050fc:	4b0d      	ldr	r3, [pc, #52]	; (8105134 <HAL_I2CEx_EnableFastModePlus+0x40>)
 81050fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8105102:	4a0c      	ldr	r2, [pc, #48]	; (8105134 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8105104:	f043 0302 	orr.w	r3, r3, #2
 8105108:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810510c:	4b09      	ldr	r3, [pc, #36]	; (8105134 <HAL_I2CEx_EnableFastModePlus+0x40>)
 810510e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8105112:	f003 0302 	and.w	r3, r3, #2
 8105116:	60fb      	str	r3, [r7, #12]
 8105118:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 810511a:	4b07      	ldr	r3, [pc, #28]	; (8105138 <HAL_I2CEx_EnableFastModePlus+0x44>)
 810511c:	685a      	ldr	r2, [r3, #4]
 810511e:	4906      	ldr	r1, [pc, #24]	; (8105138 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8105120:	687b      	ldr	r3, [r7, #4]
 8105122:	4313      	orrs	r3, r2
 8105124:	604b      	str	r3, [r1, #4]
}
 8105126:	bf00      	nop
 8105128:	3714      	adds	r7, #20
 810512a:	46bd      	mov	sp, r7
 810512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105130:	4770      	bx	lr
 8105132:	bf00      	nop
 8105134:	58024400 	.word	0x58024400
 8105138:	58000400 	.word	0x58000400

0810513c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 810513c:	b580      	push	{r7, lr}
 810513e:	b084      	sub	sp, #16
 8105140:	af00      	add	r7, sp, #0
 8105142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8105144:	687b      	ldr	r3, [r7, #4]
 8105146:	2b00      	cmp	r3, #0
 8105148:	d101      	bne.n	810514e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 810514a:	2301      	movs	r3, #1
 810514c:	e038      	b.n	81051c0 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 810514e:	687b      	ldr	r3, [r7, #4]
 8105150:	681b      	ldr	r3, [r3, #0]
 8105152:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8105156:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8105158:	687b      	ldr	r3, [r7, #4]
 810515a:	681b      	ldr	r3, [r3, #0]
 810515c:	f245 5255 	movw	r2, #21845	; 0x5555
 8105160:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8105162:	687b      	ldr	r3, [r7, #4]
 8105164:	681b      	ldr	r3, [r3, #0]
 8105166:	687a      	ldr	r2, [r7, #4]
 8105168:	6852      	ldr	r2, [r2, #4]
 810516a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 810516c:	687b      	ldr	r3, [r7, #4]
 810516e:	681b      	ldr	r3, [r3, #0]
 8105170:	687a      	ldr	r2, [r7, #4]
 8105172:	6892      	ldr	r2, [r2, #8]
 8105174:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8105176:	f7fd f821 	bl	81021bc <HAL_GetTick>
 810517a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 810517c:	e008      	b.n	8105190 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 810517e:	f7fd f81d 	bl	81021bc <HAL_GetTick>
 8105182:	4602      	mov	r2, r0
 8105184:	68fb      	ldr	r3, [r7, #12]
 8105186:	1ad3      	subs	r3, r2, r3
 8105188:	2b30      	cmp	r3, #48	; 0x30
 810518a:	d901      	bls.n	8105190 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 810518c:	2303      	movs	r3, #3
 810518e:	e017      	b.n	81051c0 <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 8105190:	687b      	ldr	r3, [r7, #4]
 8105192:	681b      	ldr	r3, [r3, #0]
 8105194:	68db      	ldr	r3, [r3, #12]
 8105196:	2b00      	cmp	r3, #0
 8105198:	d1f1      	bne.n	810517e <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 810519a:	687b      	ldr	r3, [r7, #4]
 810519c:	681b      	ldr	r3, [r3, #0]
 810519e:	691a      	ldr	r2, [r3, #16]
 81051a0:	687b      	ldr	r3, [r7, #4]
 81051a2:	68db      	ldr	r3, [r3, #12]
 81051a4:	429a      	cmp	r2, r3
 81051a6:	d005      	beq.n	81051b4 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 81051a8:	687b      	ldr	r3, [r7, #4]
 81051aa:	681b      	ldr	r3, [r3, #0]
 81051ac:	687a      	ldr	r2, [r7, #4]
 81051ae:	68d2      	ldr	r2, [r2, #12]
 81051b0:	611a      	str	r2, [r3, #16]
 81051b2:	e004      	b.n	81051be <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 81051b4:	687b      	ldr	r3, [r7, #4]
 81051b6:	681b      	ldr	r3, [r3, #0]
 81051b8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 81051bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 81051be:	2300      	movs	r3, #0
}
 81051c0:	4618      	mov	r0, r3
 81051c2:	3710      	adds	r7, #16
 81051c4:	46bd      	mov	sp, r7
 81051c6:	bd80      	pop	{r7, pc}

081051c8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 81051c8:	b480      	push	{r7}
 81051ca:	b083      	sub	sp, #12
 81051cc:	af00      	add	r7, sp, #0
 81051ce:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 81051d0:	687b      	ldr	r3, [r7, #4]
 81051d2:	681b      	ldr	r3, [r3, #0]
 81051d4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 81051d8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 81051da:	2300      	movs	r3, #0
}
 81051dc:	4618      	mov	r0, r3
 81051de:	370c      	adds	r7, #12
 81051e0:	46bd      	mov	sp, r7
 81051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051e6:	4770      	bx	lr

081051e8 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81051e8:	b580      	push	{r7, lr}
 81051ea:	b084      	sub	sp, #16
 81051ec:	af00      	add	r7, sp, #0
 81051ee:	60f8      	str	r0, [r7, #12]
 81051f0:	460b      	mov	r3, r1
 81051f2:	607a      	str	r2, [r7, #4]
 81051f4:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81051f6:	4b35      	ldr	r3, [pc, #212]	; (81052cc <HAL_PWREx_EnterSTOPMode+0xe4>)
 81051f8:	681b      	ldr	r3, [r3, #0]
 81051fa:	f023 0201 	bic.w	r2, r3, #1
 81051fe:	4933      	ldr	r1, [pc, #204]	; (81052cc <HAL_PWREx_EnterSTOPMode+0xe4>)
 8105200:	68fb      	ldr	r3, [r7, #12]
 8105202:	4313      	orrs	r3, r2
 8105204:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8105206:	687b      	ldr	r3, [r7, #4]
 8105208:	2b00      	cmp	r3, #0
 810520a:	d121      	bne.n	8105250 <HAL_PWREx_EnterSTOPMode+0x68>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 810520c:	f7fd f8dc 	bl	81023c8 <HAL_GetCurrentCPUID>
 8105210:	4603      	mov	r3, r0
 8105212:	2b03      	cmp	r3, #3
 8105214:	d154      	bne.n	81052c0 <HAL_PWREx_EnterSTOPMode+0xd8>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8105216:	4b2d      	ldr	r3, [pc, #180]	; (81052cc <HAL_PWREx_EnterSTOPMode+0xe4>)
 8105218:	691b      	ldr	r3, [r3, #16]
 810521a:	4a2c      	ldr	r2, [pc, #176]	; (81052cc <HAL_PWREx_EnterSTOPMode+0xe4>)
 810521c:	f023 0301 	bic.w	r3, r3, #1
 8105220:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105222:	4b2b      	ldr	r3, [pc, #172]	; (81052d0 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8105224:	691b      	ldr	r3, [r3, #16]
 8105226:	4a2a      	ldr	r2, [pc, #168]	; (81052d0 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8105228:	f043 0304 	orr.w	r3, r3, #4
 810522c:	6113      	str	r3, [r2, #16]
 810522e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8105232:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8105236:	7afb      	ldrb	r3, [r7, #11]
 8105238:	2b01      	cmp	r3, #1
 810523a:	d101      	bne.n	8105240 <HAL_PWREx_EnterSTOPMode+0x58>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810523c:	bf30      	wfi
 810523e:	e000      	b.n	8105242 <HAL_PWREx_EnterSTOPMode+0x5a>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8105240:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105242:	4b23      	ldr	r3, [pc, #140]	; (81052d0 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8105244:	691b      	ldr	r3, [r3, #16]
 8105246:	4a22      	ldr	r2, [pc, #136]	; (81052d0 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8105248:	f023 0304 	bic.w	r3, r3, #4
 810524c:	6113      	str	r3, [r2, #16]
 810524e:	e03a      	b.n	81052c6 <HAL_PWREx_EnterSTOPMode+0xde>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8105250:	687b      	ldr	r3, [r7, #4]
 8105252:	2b01      	cmp	r3, #1
 8105254:	d121      	bne.n	810529a <HAL_PWREx_EnterSTOPMode+0xb2>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8105256:	f7fd f8b7 	bl	81023c8 <HAL_GetCurrentCPUID>
 810525a:	4603      	mov	r3, r0
 810525c:	2b01      	cmp	r3, #1
 810525e:	d131      	bne.n	81052c4 <HAL_PWREx_EnterSTOPMode+0xdc>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8105260:	4b1a      	ldr	r3, [pc, #104]	; (81052cc <HAL_PWREx_EnterSTOPMode+0xe4>)
 8105262:	695b      	ldr	r3, [r3, #20]
 8105264:	4a19      	ldr	r2, [pc, #100]	; (81052cc <HAL_PWREx_EnterSTOPMode+0xe4>)
 8105266:	f023 0302 	bic.w	r3, r3, #2
 810526a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810526c:	4b18      	ldr	r3, [pc, #96]	; (81052d0 <HAL_PWREx_EnterSTOPMode+0xe8>)
 810526e:	691b      	ldr	r3, [r3, #16]
 8105270:	4a17      	ldr	r2, [pc, #92]	; (81052d0 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8105272:	f043 0304 	orr.w	r3, r3, #4
 8105276:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8105278:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 810527c:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8105280:	7afb      	ldrb	r3, [r7, #11]
 8105282:	2b01      	cmp	r3, #1
 8105284:	d101      	bne.n	810528a <HAL_PWREx_EnterSTOPMode+0xa2>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8105286:	bf30      	wfi
 8105288:	e000      	b.n	810528c <HAL_PWREx_EnterSTOPMode+0xa4>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810528a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810528c:	4b10      	ldr	r3, [pc, #64]	; (81052d0 <HAL_PWREx_EnterSTOPMode+0xe8>)
 810528e:	691b      	ldr	r3, [r3, #16]
 8105290:	4a0f      	ldr	r2, [pc, #60]	; (81052d0 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8105292:	f023 0304 	bic.w	r3, r3, #4
 8105296:	6113      	str	r3, [r2, #16]
 8105298:	e015      	b.n	81052c6 <HAL_PWREx_EnterSTOPMode+0xde>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810529a:	f7fd f895 	bl	81023c8 <HAL_GetCurrentCPUID>
 810529e:	4603      	mov	r3, r0
 81052a0:	2b03      	cmp	r3, #3
 81052a2:	d106      	bne.n	81052b2 <HAL_PWREx_EnterSTOPMode+0xca>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81052a4:	4b09      	ldr	r3, [pc, #36]	; (81052cc <HAL_PWREx_EnterSTOPMode+0xe4>)
 81052a6:	691b      	ldr	r3, [r3, #16]
 81052a8:	4a08      	ldr	r2, [pc, #32]	; (81052cc <HAL_PWREx_EnterSTOPMode+0xe4>)
 81052aa:	f023 0304 	bic.w	r3, r3, #4
 81052ae:	6113      	str	r3, [r2, #16]
 81052b0:	e009      	b.n	81052c6 <HAL_PWREx_EnterSTOPMode+0xde>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81052b2:	4b06      	ldr	r3, [pc, #24]	; (81052cc <HAL_PWREx_EnterSTOPMode+0xe4>)
 81052b4:	695b      	ldr	r3, [r3, #20]
 81052b6:	4a05      	ldr	r2, [pc, #20]	; (81052cc <HAL_PWREx_EnterSTOPMode+0xe4>)
 81052b8:	f023 0304 	bic.w	r3, r3, #4
 81052bc:	6153      	str	r3, [r2, #20]
 81052be:	e002      	b.n	81052c6 <HAL_PWREx_EnterSTOPMode+0xde>
      return;
 81052c0:	bf00      	nop
 81052c2:	e000      	b.n	81052c6 <HAL_PWREx_EnterSTOPMode+0xde>
      return;
 81052c4:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81052c6:	3710      	adds	r7, #16
 81052c8:	46bd      	mov	sp, r7
 81052ca:	bd80      	pop	{r7, pc}
 81052cc:	58024800 	.word	0x58024800
 81052d0:	e000ed00 	.word	0xe000ed00

081052d4 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81052d4:	b580      	push	{r7, lr}
 81052d6:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81052d8:	f7fd f876 	bl	81023c8 <HAL_GetCurrentCPUID>
 81052dc:	4603      	mov	r3, r0
 81052de:	2b03      	cmp	r3, #3
 81052e0:	d101      	bne.n	81052e6 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81052e2:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81052e4:	e001      	b.n	81052ea <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81052e6:	bf40      	sev
    __WFE ();
 81052e8:	bf20      	wfe
}
 81052ea:	bf00      	nop
 81052ec:	bd80      	pop	{r7, pc}
	...

081052f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81052f0:	b480      	push	{r7}
 81052f2:	b089      	sub	sp, #36	; 0x24
 81052f4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81052f6:	4baf      	ldr	r3, [pc, #700]	; (81055b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81052f8:	691b      	ldr	r3, [r3, #16]
 81052fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81052fe:	2b18      	cmp	r3, #24
 8105300:	f200 814e 	bhi.w	81055a0 <HAL_RCC_GetSysClockFreq+0x2b0>
 8105304:	a201      	add	r2, pc, #4	; (adr r2, 810530c <HAL_RCC_GetSysClockFreq+0x1c>)
 8105306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810530a:	bf00      	nop
 810530c:	08105371 	.word	0x08105371
 8105310:	081055a1 	.word	0x081055a1
 8105314:	081055a1 	.word	0x081055a1
 8105318:	081055a1 	.word	0x081055a1
 810531c:	081055a1 	.word	0x081055a1
 8105320:	081055a1 	.word	0x081055a1
 8105324:	081055a1 	.word	0x081055a1
 8105328:	081055a1 	.word	0x081055a1
 810532c:	08105397 	.word	0x08105397
 8105330:	081055a1 	.word	0x081055a1
 8105334:	081055a1 	.word	0x081055a1
 8105338:	081055a1 	.word	0x081055a1
 810533c:	081055a1 	.word	0x081055a1
 8105340:	081055a1 	.word	0x081055a1
 8105344:	081055a1 	.word	0x081055a1
 8105348:	081055a1 	.word	0x081055a1
 810534c:	0810539d 	.word	0x0810539d
 8105350:	081055a1 	.word	0x081055a1
 8105354:	081055a1 	.word	0x081055a1
 8105358:	081055a1 	.word	0x081055a1
 810535c:	081055a1 	.word	0x081055a1
 8105360:	081055a1 	.word	0x081055a1
 8105364:	081055a1 	.word	0x081055a1
 8105368:	081055a1 	.word	0x081055a1
 810536c:	081053a3 	.word	0x081053a3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105370:	4b90      	ldr	r3, [pc, #576]	; (81055b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8105372:	681b      	ldr	r3, [r3, #0]
 8105374:	f003 0320 	and.w	r3, r3, #32
 8105378:	2b00      	cmp	r3, #0
 810537a:	d009      	beq.n	8105390 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810537c:	4b8d      	ldr	r3, [pc, #564]	; (81055b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810537e:	681b      	ldr	r3, [r3, #0]
 8105380:	08db      	lsrs	r3, r3, #3
 8105382:	f003 0303 	and.w	r3, r3, #3
 8105386:	4a8c      	ldr	r2, [pc, #560]	; (81055b8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8105388:	fa22 f303 	lsr.w	r3, r2, r3
 810538c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 810538e:	e10a      	b.n	81055a6 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8105390:	4b89      	ldr	r3, [pc, #548]	; (81055b8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8105392:	61bb      	str	r3, [r7, #24]
    break;
 8105394:	e107      	b.n	81055a6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8105396:	4b89      	ldr	r3, [pc, #548]	; (81055bc <HAL_RCC_GetSysClockFreq+0x2cc>)
 8105398:	61bb      	str	r3, [r7, #24]
    break;
 810539a:	e104      	b.n	81055a6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 810539c:	4b88      	ldr	r3, [pc, #544]	; (81055c0 <HAL_RCC_GetSysClockFreq+0x2d0>)
 810539e:	61bb      	str	r3, [r7, #24]
    break;
 81053a0:	e101      	b.n	81055a6 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81053a2:	4b84      	ldr	r3, [pc, #528]	; (81055b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81053a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81053a6:	f003 0303 	and.w	r3, r3, #3
 81053aa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 81053ac:	4b81      	ldr	r3, [pc, #516]	; (81055b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81053ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81053b0:	091b      	lsrs	r3, r3, #4
 81053b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81053b6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 81053b8:	4b7e      	ldr	r3, [pc, #504]	; (81055b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81053ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81053bc:	f003 0301 	and.w	r3, r3, #1
 81053c0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 81053c2:	4b7c      	ldr	r3, [pc, #496]	; (81055b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81053c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81053c6:	08db      	lsrs	r3, r3, #3
 81053c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81053cc:	68fa      	ldr	r2, [r7, #12]
 81053ce:	fb02 f303 	mul.w	r3, r2, r3
 81053d2:	ee07 3a90 	vmov	s15, r3
 81053d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81053da:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 81053de:	693b      	ldr	r3, [r7, #16]
 81053e0:	2b00      	cmp	r3, #0
 81053e2:	f000 80da 	beq.w	810559a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 81053e6:	697b      	ldr	r3, [r7, #20]
 81053e8:	2b01      	cmp	r3, #1
 81053ea:	d05a      	beq.n	81054a2 <HAL_RCC_GetSysClockFreq+0x1b2>
 81053ec:	2b01      	cmp	r3, #1
 81053ee:	d302      	bcc.n	81053f6 <HAL_RCC_GetSysClockFreq+0x106>
 81053f0:	2b02      	cmp	r3, #2
 81053f2:	d078      	beq.n	81054e6 <HAL_RCC_GetSysClockFreq+0x1f6>
 81053f4:	e099      	b.n	810552a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81053f6:	4b6f      	ldr	r3, [pc, #444]	; (81055b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81053f8:	681b      	ldr	r3, [r3, #0]
 81053fa:	f003 0320 	and.w	r3, r3, #32
 81053fe:	2b00      	cmp	r3, #0
 8105400:	d02d      	beq.n	810545e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105402:	4b6c      	ldr	r3, [pc, #432]	; (81055b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8105404:	681b      	ldr	r3, [r3, #0]
 8105406:	08db      	lsrs	r3, r3, #3
 8105408:	f003 0303 	and.w	r3, r3, #3
 810540c:	4a6a      	ldr	r2, [pc, #424]	; (81055b8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 810540e:	fa22 f303 	lsr.w	r3, r2, r3
 8105412:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105414:	687b      	ldr	r3, [r7, #4]
 8105416:	ee07 3a90 	vmov	s15, r3
 810541a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810541e:	693b      	ldr	r3, [r7, #16]
 8105420:	ee07 3a90 	vmov	s15, r3
 8105424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105428:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810542c:	4b61      	ldr	r3, [pc, #388]	; (81055b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810542e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105434:	ee07 3a90 	vmov	s15, r3
 8105438:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810543c:	ed97 6a02 	vldr	s12, [r7, #8]
 8105440:	eddf 5a60 	vldr	s11, [pc, #384]	; 81055c4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8105444:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105448:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810544c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105450:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105458:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 810545c:	e087      	b.n	810556e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810545e:	693b      	ldr	r3, [r7, #16]
 8105460:	ee07 3a90 	vmov	s15, r3
 8105464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105468:	eddf 6a57 	vldr	s13, [pc, #348]	; 81055c8 <HAL_RCC_GetSysClockFreq+0x2d8>
 810546c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105470:	4b50      	ldr	r3, [pc, #320]	; (81055b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8105472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105478:	ee07 3a90 	vmov	s15, r3
 810547c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105480:	ed97 6a02 	vldr	s12, [r7, #8]
 8105484:	eddf 5a4f 	vldr	s11, [pc, #316]	; 81055c4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8105488:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810548c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105490:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105494:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105498:	ee67 7a27 	vmul.f32	s15, s14, s15
 810549c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81054a0:	e065      	b.n	810556e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81054a2:	693b      	ldr	r3, [r7, #16]
 81054a4:	ee07 3a90 	vmov	s15, r3
 81054a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81054ac:	eddf 6a47 	vldr	s13, [pc, #284]	; 81055cc <HAL_RCC_GetSysClockFreq+0x2dc>
 81054b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81054b4:	4b3f      	ldr	r3, [pc, #252]	; (81055b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81054b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81054b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81054bc:	ee07 3a90 	vmov	s15, r3
 81054c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81054c4:	ed97 6a02 	vldr	s12, [r7, #8]
 81054c8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 81055c4 <HAL_RCC_GetSysClockFreq+0x2d4>
 81054cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81054d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81054d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81054d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81054dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 81054e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81054e4:	e043      	b.n	810556e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81054e6:	693b      	ldr	r3, [r7, #16]
 81054e8:	ee07 3a90 	vmov	s15, r3
 81054ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81054f0:	eddf 6a37 	vldr	s13, [pc, #220]	; 81055d0 <HAL_RCC_GetSysClockFreq+0x2e0>
 81054f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81054f8:	4b2e      	ldr	r3, [pc, #184]	; (81055b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81054fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81054fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105500:	ee07 3a90 	vmov	s15, r3
 8105504:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105508:	ed97 6a02 	vldr	s12, [r7, #8]
 810550c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 81055c4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8105510:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105514:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105518:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810551c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105524:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105528:	e021      	b.n	810556e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810552a:	693b      	ldr	r3, [r7, #16]
 810552c:	ee07 3a90 	vmov	s15, r3
 8105530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105534:	eddf 6a25 	vldr	s13, [pc, #148]	; 81055cc <HAL_RCC_GetSysClockFreq+0x2dc>
 8105538:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810553c:	4b1d      	ldr	r3, [pc, #116]	; (81055b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810553e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105544:	ee07 3a90 	vmov	s15, r3
 8105548:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810554c:	ed97 6a02 	vldr	s12, [r7, #8]
 8105550:	eddf 5a1c 	vldr	s11, [pc, #112]	; 81055c4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8105554:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105558:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810555c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105560:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105568:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810556c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 810556e:	4b11      	ldr	r3, [pc, #68]	; (81055b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8105570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105572:	0a5b      	lsrs	r3, r3, #9
 8105574:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105578:	3301      	adds	r3, #1
 810557a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 810557c:	683b      	ldr	r3, [r7, #0]
 810557e:	ee07 3a90 	vmov	s15, r3
 8105582:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8105586:	edd7 6a07 	vldr	s13, [r7, #28]
 810558a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810558e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105592:	ee17 3a90 	vmov	r3, s15
 8105596:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8105598:	e005      	b.n	81055a6 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 810559a:	2300      	movs	r3, #0
 810559c:	61bb      	str	r3, [r7, #24]
    break;
 810559e:	e002      	b.n	81055a6 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 81055a0:	4b06      	ldr	r3, [pc, #24]	; (81055bc <HAL_RCC_GetSysClockFreq+0x2cc>)
 81055a2:	61bb      	str	r3, [r7, #24]
    break;
 81055a4:	bf00      	nop
  }

  return sysclockfreq;
 81055a6:	69bb      	ldr	r3, [r7, #24]
}
 81055a8:	4618      	mov	r0, r3
 81055aa:	3724      	adds	r7, #36	; 0x24
 81055ac:	46bd      	mov	sp, r7
 81055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81055b2:	4770      	bx	lr
 81055b4:	58024400 	.word	0x58024400
 81055b8:	03d09000 	.word	0x03d09000
 81055bc:	003d0900 	.word	0x003d0900
 81055c0:	017d7840 	.word	0x017d7840
 81055c4:	46000000 	.word	0x46000000
 81055c8:	4c742400 	.word	0x4c742400
 81055cc:	4a742400 	.word	0x4a742400
 81055d0:	4bbebc20 	.word	0x4bbebc20

081055d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81055d4:	b580      	push	{r7, lr}
 81055d6:	b082      	sub	sp, #8
 81055d8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81055da:	f7ff fe89 	bl	81052f0 <HAL_RCC_GetSysClockFreq>
 81055de:	4601      	mov	r1, r0
 81055e0:	4b11      	ldr	r3, [pc, #68]	; (8105628 <HAL_RCC_GetHCLKFreq+0x54>)
 81055e2:	699b      	ldr	r3, [r3, #24]
 81055e4:	0a1b      	lsrs	r3, r3, #8
 81055e6:	f003 030f 	and.w	r3, r3, #15
 81055ea:	4a10      	ldr	r2, [pc, #64]	; (810562c <HAL_RCC_GetHCLKFreq+0x58>)
 81055ec:	5cd3      	ldrb	r3, [r2, r3]
 81055ee:	f003 031f 	and.w	r3, r3, #31
 81055f2:	fa21 f303 	lsr.w	r3, r1, r3
 81055f6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81055f8:	4b0b      	ldr	r3, [pc, #44]	; (8105628 <HAL_RCC_GetHCLKFreq+0x54>)
 81055fa:	699b      	ldr	r3, [r3, #24]
 81055fc:	f003 030f 	and.w	r3, r3, #15
 8105600:	4a0a      	ldr	r2, [pc, #40]	; (810562c <HAL_RCC_GetHCLKFreq+0x58>)
 8105602:	5cd3      	ldrb	r3, [r2, r3]
 8105604:	f003 031f 	and.w	r3, r3, #31
 8105608:	687a      	ldr	r2, [r7, #4]
 810560a:	fa22 f303 	lsr.w	r3, r2, r3
 810560e:	4a08      	ldr	r2, [pc, #32]	; (8105630 <HAL_RCC_GetHCLKFreq+0x5c>)
 8105610:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8105612:	4b07      	ldr	r3, [pc, #28]	; (8105630 <HAL_RCC_GetHCLKFreq+0x5c>)
 8105614:	681b      	ldr	r3, [r3, #0]
 8105616:	4a07      	ldr	r2, [pc, #28]	; (8105634 <HAL_RCC_GetHCLKFreq+0x60>)
 8105618:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810561a:	4b05      	ldr	r3, [pc, #20]	; (8105630 <HAL_RCC_GetHCLKFreq+0x5c>)
 810561c:	681b      	ldr	r3, [r3, #0]
}
 810561e:	4618      	mov	r0, r3
 8105620:	3708      	adds	r7, #8
 8105622:	46bd      	mov	sp, r7
 8105624:	bd80      	pop	{r7, pc}
 8105626:	bf00      	nop
 8105628:	58024400 	.word	0x58024400
 810562c:	08110998 	.word	0x08110998
 8105630:	10000004 	.word	0x10000004
 8105634:	10000000 	.word	0x10000000

08105638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8105638:	b580      	push	{r7, lr}
 810563a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 810563c:	f7ff ffca 	bl	81055d4 <HAL_RCC_GetHCLKFreq>
 8105640:	4601      	mov	r1, r0
 8105642:	4b06      	ldr	r3, [pc, #24]	; (810565c <HAL_RCC_GetPCLK1Freq+0x24>)
 8105644:	69db      	ldr	r3, [r3, #28]
 8105646:	091b      	lsrs	r3, r3, #4
 8105648:	f003 0307 	and.w	r3, r3, #7
 810564c:	4a04      	ldr	r2, [pc, #16]	; (8105660 <HAL_RCC_GetPCLK1Freq+0x28>)
 810564e:	5cd3      	ldrb	r3, [r2, r3]
 8105650:	f003 031f 	and.w	r3, r3, #31
 8105654:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8105658:	4618      	mov	r0, r3
 810565a:	bd80      	pop	{r7, pc}
 810565c:	58024400 	.word	0x58024400
 8105660:	08110998 	.word	0x08110998

08105664 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8105664:	b580      	push	{r7, lr}
 8105666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8105668:	f7ff ffb4 	bl	81055d4 <HAL_RCC_GetHCLKFreq>
 810566c:	4601      	mov	r1, r0
 810566e:	4b06      	ldr	r3, [pc, #24]	; (8105688 <HAL_RCC_GetPCLK2Freq+0x24>)
 8105670:	69db      	ldr	r3, [r3, #28]
 8105672:	0a1b      	lsrs	r3, r3, #8
 8105674:	f003 0307 	and.w	r3, r3, #7
 8105678:	4a04      	ldr	r2, [pc, #16]	; (810568c <HAL_RCC_GetPCLK2Freq+0x28>)
 810567a:	5cd3      	ldrb	r3, [r2, r3]
 810567c:	f003 031f 	and.w	r3, r3, #31
 8105680:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8105684:	4618      	mov	r0, r3
 8105686:	bd80      	pop	{r7, pc}
 8105688:	58024400 	.word	0x58024400
 810568c:	08110998 	.word	0x08110998

08105690 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8105690:	b480      	push	{r7}
 8105692:	b083      	sub	sp, #12
 8105694:	af00      	add	r7, sp, #0
 8105696:	6078      	str	r0, [r7, #4]
 8105698:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 810569a:	687b      	ldr	r3, [r7, #4]
 810569c:	223f      	movs	r2, #63	; 0x3f
 810569e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 81056a0:	4b1a      	ldr	r3, [pc, #104]	; (810570c <HAL_RCC_GetClockConfig+0x7c>)
 81056a2:	691b      	ldr	r3, [r3, #16]
 81056a4:	f003 0207 	and.w	r2, r3, #7
 81056a8:	687b      	ldr	r3, [r7, #4]
 81056aa:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 81056ac:	4b17      	ldr	r3, [pc, #92]	; (810570c <HAL_RCC_GetClockConfig+0x7c>)
 81056ae:	699b      	ldr	r3, [r3, #24]
 81056b0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 81056b4:	687b      	ldr	r3, [r7, #4]
 81056b6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 81056b8:	4b14      	ldr	r3, [pc, #80]	; (810570c <HAL_RCC_GetClockConfig+0x7c>)
 81056ba:	699b      	ldr	r3, [r3, #24]
 81056bc:	f003 020f 	and.w	r2, r3, #15
 81056c0:	687b      	ldr	r3, [r7, #4]
 81056c2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 81056c4:	4b11      	ldr	r3, [pc, #68]	; (810570c <HAL_RCC_GetClockConfig+0x7c>)
 81056c6:	699b      	ldr	r3, [r3, #24]
 81056c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 81056cc:	687b      	ldr	r3, [r7, #4]
 81056ce:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 81056d0:	4b0e      	ldr	r3, [pc, #56]	; (810570c <HAL_RCC_GetClockConfig+0x7c>)
 81056d2:	69db      	ldr	r3, [r3, #28]
 81056d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 81056d8:	687b      	ldr	r3, [r7, #4]
 81056da:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 81056dc:	4b0b      	ldr	r3, [pc, #44]	; (810570c <HAL_RCC_GetClockConfig+0x7c>)
 81056de:	69db      	ldr	r3, [r3, #28]
 81056e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 81056e4:	687b      	ldr	r3, [r7, #4]
 81056e6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 81056e8:	4b08      	ldr	r3, [pc, #32]	; (810570c <HAL_RCC_GetClockConfig+0x7c>)
 81056ea:	6a1b      	ldr	r3, [r3, #32]
 81056ec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 81056f0:	687b      	ldr	r3, [r7, #4]
 81056f2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 81056f4:	4b06      	ldr	r3, [pc, #24]	; (8105710 <HAL_RCC_GetClockConfig+0x80>)
 81056f6:	681b      	ldr	r3, [r3, #0]
 81056f8:	f003 020f 	and.w	r2, r3, #15
 81056fc:	683b      	ldr	r3, [r7, #0]
 81056fe:	601a      	str	r2, [r3, #0]
}
 8105700:	bf00      	nop
 8105702:	370c      	adds	r7, #12
 8105704:	46bd      	mov	sp, r7
 8105706:	f85d 7b04 	ldr.w	r7, [sp], #4
 810570a:	4770      	bx	lr
 810570c:	58024400 	.word	0x58024400
 8105710:	52002000 	.word	0x52002000

08105714 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8105714:	b580      	push	{r7, lr}
 8105716:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8105718:	f7ff ff5c 	bl	81055d4 <HAL_RCC_GetHCLKFreq>
 810571c:	4601      	mov	r1, r0
 810571e:	4b06      	ldr	r3, [pc, #24]	; (8105738 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8105720:	6a1b      	ldr	r3, [r3, #32]
 8105722:	091b      	lsrs	r3, r3, #4
 8105724:	f003 0307 	and.w	r3, r3, #7
 8105728:	4a04      	ldr	r2, [pc, #16]	; (810573c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810572a:	5cd3      	ldrb	r3, [r2, r3]
 810572c:	f003 031f 	and.w	r3, r3, #31
 8105730:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8105734:	4618      	mov	r0, r3
 8105736:	bd80      	pop	{r7, pc}
 8105738:	58024400 	.word	0x58024400
 810573c:	08110998 	.word	0x08110998

08105740 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8105740:	b480      	push	{r7}
 8105742:	b089      	sub	sp, #36	; 0x24
 8105744:	af00      	add	r7, sp, #0
 8105746:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105748:	4b9d      	ldr	r3, [pc, #628]	; (81059c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810574a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810574c:	f003 0303 	and.w	r3, r3, #3
 8105750:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8105752:	4b9b      	ldr	r3, [pc, #620]	; (81059c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8105754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105756:	0b1b      	lsrs	r3, r3, #12
 8105758:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810575c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810575e:	4b98      	ldr	r3, [pc, #608]	; (81059c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8105760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105762:	091b      	lsrs	r3, r3, #4
 8105764:	f003 0301 	and.w	r3, r3, #1
 8105768:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 810576a:	4b95      	ldr	r3, [pc, #596]	; (81059c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810576c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810576e:	08db      	lsrs	r3, r3, #3
 8105770:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105774:	693a      	ldr	r2, [r7, #16]
 8105776:	fb02 f303 	mul.w	r3, r2, r3
 810577a:	ee07 3a90 	vmov	s15, r3
 810577e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105782:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8105786:	697b      	ldr	r3, [r7, #20]
 8105788:	2b00      	cmp	r3, #0
 810578a:	f000 810a 	beq.w	81059a2 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 810578e:	69bb      	ldr	r3, [r7, #24]
 8105790:	2b01      	cmp	r3, #1
 8105792:	d05a      	beq.n	810584a <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8105794:	2b01      	cmp	r3, #1
 8105796:	d302      	bcc.n	810579e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8105798:	2b02      	cmp	r3, #2
 810579a:	d078      	beq.n	810588e <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 810579c:	e099      	b.n	81058d2 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810579e:	4b88      	ldr	r3, [pc, #544]	; (81059c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81057a0:	681b      	ldr	r3, [r3, #0]
 81057a2:	f003 0320 	and.w	r3, r3, #32
 81057a6:	2b00      	cmp	r3, #0
 81057a8:	d02d      	beq.n	8105806 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81057aa:	4b85      	ldr	r3, [pc, #532]	; (81059c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81057ac:	681b      	ldr	r3, [r3, #0]
 81057ae:	08db      	lsrs	r3, r3, #3
 81057b0:	f003 0303 	and.w	r3, r3, #3
 81057b4:	4a83      	ldr	r2, [pc, #524]	; (81059c4 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 81057b6:	fa22 f303 	lsr.w	r3, r2, r3
 81057ba:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81057bc:	68bb      	ldr	r3, [r7, #8]
 81057be:	ee07 3a90 	vmov	s15, r3
 81057c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81057c6:	697b      	ldr	r3, [r7, #20]
 81057c8:	ee07 3a90 	vmov	s15, r3
 81057cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81057d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81057d4:	4b7a      	ldr	r3, [pc, #488]	; (81059c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81057d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81057d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81057dc:	ee07 3a90 	vmov	s15, r3
 81057e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81057e4:	ed97 6a03 	vldr	s12, [r7, #12]
 81057e8:	eddf 5a77 	vldr	s11, [pc, #476]	; 81059c8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 81057ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81057f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81057f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81057f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81057fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105800:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8105804:	e087      	b.n	8105916 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8105806:	697b      	ldr	r3, [r7, #20]
 8105808:	ee07 3a90 	vmov	s15, r3
 810580c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105810:	eddf 6a6e 	vldr	s13, [pc, #440]	; 81059cc <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8105814:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105818:	4b69      	ldr	r3, [pc, #420]	; (81059c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810581a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810581c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105820:	ee07 3a90 	vmov	s15, r3
 8105824:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105828:	ed97 6a03 	vldr	s12, [r7, #12]
 810582c:	eddf 5a66 	vldr	s11, [pc, #408]	; 81059c8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8105830:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105834:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105838:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810583c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105840:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105844:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105848:	e065      	b.n	8105916 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810584a:	697b      	ldr	r3, [r7, #20]
 810584c:	ee07 3a90 	vmov	s15, r3
 8105850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105854:	eddf 6a5e 	vldr	s13, [pc, #376]	; 81059d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8105858:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810585c:	4b58      	ldr	r3, [pc, #352]	; (81059c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810585e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105864:	ee07 3a90 	vmov	s15, r3
 8105868:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810586c:	ed97 6a03 	vldr	s12, [r7, #12]
 8105870:	eddf 5a55 	vldr	s11, [pc, #340]	; 81059c8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8105874:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105878:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810587c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105880:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105884:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105888:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810588c:	e043      	b.n	8105916 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810588e:	697b      	ldr	r3, [r7, #20]
 8105890:	ee07 3a90 	vmov	s15, r3
 8105894:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105898:	eddf 6a4e 	vldr	s13, [pc, #312]	; 81059d4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 810589c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81058a0:	4b47      	ldr	r3, [pc, #284]	; (81059c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81058a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81058a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81058a8:	ee07 3a90 	vmov	s15, r3
 81058ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81058b0:	ed97 6a03 	vldr	s12, [r7, #12]
 81058b4:	eddf 5a44 	vldr	s11, [pc, #272]	; 81059c8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 81058b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81058bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81058c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81058c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81058c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81058cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81058d0:	e021      	b.n	8105916 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81058d2:	697b      	ldr	r3, [r7, #20]
 81058d4:	ee07 3a90 	vmov	s15, r3
 81058d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81058dc:	eddf 6a3c 	vldr	s13, [pc, #240]	; 81059d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 81058e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81058e4:	4b36      	ldr	r3, [pc, #216]	; (81059c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81058e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81058e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81058ec:	ee07 3a90 	vmov	s15, r3
 81058f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81058f4:	ed97 6a03 	vldr	s12, [r7, #12]
 81058f8:	eddf 5a33 	vldr	s11, [pc, #204]	; 81059c8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 81058fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105900:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105904:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105908:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810590c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105910:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105914:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8105916:	4b2a      	ldr	r3, [pc, #168]	; (81059c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8105918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810591a:	0a5b      	lsrs	r3, r3, #9
 810591c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105920:	ee07 3a90 	vmov	s15, r3
 8105924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105928:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810592c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105930:	edd7 6a07 	vldr	s13, [r7, #28]
 8105934:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105938:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810593c:	ee17 2a90 	vmov	r2, s15
 8105940:	687b      	ldr	r3, [r7, #4]
 8105942:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8105944:	4b1e      	ldr	r3, [pc, #120]	; (81059c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8105946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105948:	0c1b      	lsrs	r3, r3, #16
 810594a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810594e:	ee07 3a90 	vmov	s15, r3
 8105952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105956:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810595a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810595e:	edd7 6a07 	vldr	s13, [r7, #28]
 8105962:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105966:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810596a:	ee17 2a90 	vmov	r2, s15
 810596e:	687b      	ldr	r3, [r7, #4]
 8105970:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8105972:	4b13      	ldr	r3, [pc, #76]	; (81059c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8105974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105976:	0e1b      	lsrs	r3, r3, #24
 8105978:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810597c:	ee07 3a90 	vmov	s15, r3
 8105980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105984:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105988:	ee37 7a87 	vadd.f32	s14, s15, s14
 810598c:	edd7 6a07 	vldr	s13, [r7, #28]
 8105990:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105994:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105998:	ee17 2a90 	vmov	r2, s15
 810599c:	687b      	ldr	r3, [r7, #4]
 810599e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 81059a0:	e008      	b.n	81059b4 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 81059a2:	687b      	ldr	r3, [r7, #4]
 81059a4:	2200      	movs	r2, #0
 81059a6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 81059a8:	687b      	ldr	r3, [r7, #4]
 81059aa:	2200      	movs	r2, #0
 81059ac:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 81059ae:	687b      	ldr	r3, [r7, #4]
 81059b0:	2200      	movs	r2, #0
 81059b2:	609a      	str	r2, [r3, #8]
}
 81059b4:	bf00      	nop
 81059b6:	3724      	adds	r7, #36	; 0x24
 81059b8:	46bd      	mov	sp, r7
 81059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81059be:	4770      	bx	lr
 81059c0:	58024400 	.word	0x58024400
 81059c4:	03d09000 	.word	0x03d09000
 81059c8:	46000000 	.word	0x46000000
 81059cc:	4c742400 	.word	0x4c742400
 81059d0:	4a742400 	.word	0x4a742400
 81059d4:	4bbebc20 	.word	0x4bbebc20

081059d8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 81059d8:	b480      	push	{r7}
 81059da:	b089      	sub	sp, #36	; 0x24
 81059dc:	af00      	add	r7, sp, #0
 81059de:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81059e0:	4b9d      	ldr	r3, [pc, #628]	; (8105c58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81059e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81059e4:	f003 0303 	and.w	r3, r3, #3
 81059e8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 81059ea:	4b9b      	ldr	r3, [pc, #620]	; (8105c58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81059ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81059ee:	0d1b      	lsrs	r3, r3, #20
 81059f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81059f4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81059f6:	4b98      	ldr	r3, [pc, #608]	; (8105c58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81059f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81059fa:	0a1b      	lsrs	r3, r3, #8
 81059fc:	f003 0301 	and.w	r3, r3, #1
 8105a00:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8105a02:	4b95      	ldr	r3, [pc, #596]	; (8105c58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8105a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105a06:	08db      	lsrs	r3, r3, #3
 8105a08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105a0c:	693a      	ldr	r2, [r7, #16]
 8105a0e:	fb02 f303 	mul.w	r3, r2, r3
 8105a12:	ee07 3a90 	vmov	s15, r3
 8105a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105a1a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8105a1e:	697b      	ldr	r3, [r7, #20]
 8105a20:	2b00      	cmp	r3, #0
 8105a22:	f000 810a 	beq.w	8105c3a <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8105a26:	69bb      	ldr	r3, [r7, #24]
 8105a28:	2b01      	cmp	r3, #1
 8105a2a:	d05a      	beq.n	8105ae2 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8105a2c:	2b01      	cmp	r3, #1
 8105a2e:	d302      	bcc.n	8105a36 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8105a30:	2b02      	cmp	r3, #2
 8105a32:	d078      	beq.n	8105b26 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8105a34:	e099      	b.n	8105b6a <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105a36:	4b88      	ldr	r3, [pc, #544]	; (8105c58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8105a38:	681b      	ldr	r3, [r3, #0]
 8105a3a:	f003 0320 	and.w	r3, r3, #32
 8105a3e:	2b00      	cmp	r3, #0
 8105a40:	d02d      	beq.n	8105a9e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105a42:	4b85      	ldr	r3, [pc, #532]	; (8105c58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8105a44:	681b      	ldr	r3, [r3, #0]
 8105a46:	08db      	lsrs	r3, r3, #3
 8105a48:	f003 0303 	and.w	r3, r3, #3
 8105a4c:	4a83      	ldr	r2, [pc, #524]	; (8105c5c <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8105a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8105a52:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105a54:	68bb      	ldr	r3, [r7, #8]
 8105a56:	ee07 3a90 	vmov	s15, r3
 8105a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105a5e:	697b      	ldr	r3, [r7, #20]
 8105a60:	ee07 3a90 	vmov	s15, r3
 8105a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105a68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105a6c:	4b7a      	ldr	r3, [pc, #488]	; (8105c58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8105a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105a74:	ee07 3a90 	vmov	s15, r3
 8105a78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105a7c:	ed97 6a03 	vldr	s12, [r7, #12]
 8105a80:	eddf 5a77 	vldr	s11, [pc, #476]	; 8105c60 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8105a84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105a88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105a8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105a90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105a98:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8105a9c:	e087      	b.n	8105bae <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105a9e:	697b      	ldr	r3, [r7, #20]
 8105aa0:	ee07 3a90 	vmov	s15, r3
 8105aa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105aa8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8105c64 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8105aac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105ab0:	4b69      	ldr	r3, [pc, #420]	; (8105c58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8105ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105ab8:	ee07 3a90 	vmov	s15, r3
 8105abc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105ac0:	ed97 6a03 	vldr	s12, [r7, #12]
 8105ac4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8105c60 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8105ac8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105acc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105ad0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105ad4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105ad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105adc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105ae0:	e065      	b.n	8105bae <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105ae2:	697b      	ldr	r3, [r7, #20]
 8105ae4:	ee07 3a90 	vmov	s15, r3
 8105ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105aec:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8105c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8105af0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105af4:	4b58      	ldr	r3, [pc, #352]	; (8105c58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8105af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105afc:	ee07 3a90 	vmov	s15, r3
 8105b00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105b04:	ed97 6a03 	vldr	s12, [r7, #12]
 8105b08:	eddf 5a55 	vldr	s11, [pc, #340]	; 8105c60 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8105b0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105b10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105b14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105b18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105b20:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105b24:	e043      	b.n	8105bae <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105b26:	697b      	ldr	r3, [r7, #20]
 8105b28:	ee07 3a90 	vmov	s15, r3
 8105b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105b30:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8105c6c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8105b34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105b38:	4b47      	ldr	r3, [pc, #284]	; (8105c58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8105b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105b40:	ee07 3a90 	vmov	s15, r3
 8105b44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105b48:	ed97 6a03 	vldr	s12, [r7, #12]
 8105b4c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8105c60 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8105b50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105b54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105b58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105b5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105b60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105b64:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105b68:	e021      	b.n	8105bae <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105b6a:	697b      	ldr	r3, [r7, #20]
 8105b6c:	ee07 3a90 	vmov	s15, r3
 8105b70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105b74:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8105c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8105b78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105b7c:	4b36      	ldr	r3, [pc, #216]	; (8105c58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8105b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105b84:	ee07 3a90 	vmov	s15, r3
 8105b88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105b8c:	ed97 6a03 	vldr	s12, [r7, #12]
 8105b90:	eddf 5a33 	vldr	s11, [pc, #204]	; 8105c60 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8105b94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105b98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105b9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105ba0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105ba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105ba8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105bac:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8105bae:	4b2a      	ldr	r3, [pc, #168]	; (8105c58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8105bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105bb2:	0a5b      	lsrs	r3, r3, #9
 8105bb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105bb8:	ee07 3a90 	vmov	s15, r3
 8105bbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105bc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105bc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105bc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8105bcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105bd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105bd4:	ee17 2a90 	vmov	r2, s15
 8105bd8:	687b      	ldr	r3, [r7, #4]
 8105bda:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8105bdc:	4b1e      	ldr	r3, [pc, #120]	; (8105c58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8105bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105be0:	0c1b      	lsrs	r3, r3, #16
 8105be2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105be6:	ee07 3a90 	vmov	s15, r3
 8105bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105bee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105bf2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105bf6:	edd7 6a07 	vldr	s13, [r7, #28]
 8105bfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105bfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105c02:	ee17 2a90 	vmov	r2, s15
 8105c06:	687b      	ldr	r3, [r7, #4]
 8105c08:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8105c0a:	4b13      	ldr	r3, [pc, #76]	; (8105c58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8105c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105c0e:	0e1b      	lsrs	r3, r3, #24
 8105c10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105c14:	ee07 3a90 	vmov	s15, r3
 8105c18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105c1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105c20:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105c24:	edd7 6a07 	vldr	s13, [r7, #28]
 8105c28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105c2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105c30:	ee17 2a90 	vmov	r2, s15
 8105c34:	687b      	ldr	r3, [r7, #4]
 8105c36:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8105c38:	e008      	b.n	8105c4c <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8105c3a:	687b      	ldr	r3, [r7, #4]
 8105c3c:	2200      	movs	r2, #0
 8105c3e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8105c40:	687b      	ldr	r3, [r7, #4]
 8105c42:	2200      	movs	r2, #0
 8105c44:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8105c46:	687b      	ldr	r3, [r7, #4]
 8105c48:	2200      	movs	r2, #0
 8105c4a:	609a      	str	r2, [r3, #8]
}
 8105c4c:	bf00      	nop
 8105c4e:	3724      	adds	r7, #36	; 0x24
 8105c50:	46bd      	mov	sp, r7
 8105c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c56:	4770      	bx	lr
 8105c58:	58024400 	.word	0x58024400
 8105c5c:	03d09000 	.word	0x03d09000
 8105c60:	46000000 	.word	0x46000000
 8105c64:	4c742400 	.word	0x4c742400
 8105c68:	4a742400 	.word	0x4a742400
 8105c6c:	4bbebc20 	.word	0x4bbebc20

08105c70 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8105c70:	b580      	push	{r7, lr}
 8105c72:	b084      	sub	sp, #16
 8105c74:	af00      	add	r7, sp, #0
 8105c76:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8105c78:	2300      	movs	r3, #0
 8105c7a:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8105c7c:	687b      	ldr	r3, [r7, #4]
 8105c7e:	2b00      	cmp	r3, #0
 8105c80:	d101      	bne.n	8105c86 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8105c82:	2301      	movs	r3, #1
 8105c84:	e0e2      	b.n	8105e4c <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8105c86:	687b      	ldr	r3, [r7, #4]
 8105c88:	2200      	movs	r2, #0
 8105c8a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8105c8c:	687b      	ldr	r3, [r7, #4]
 8105c8e:	681b      	ldr	r3, [r3, #0]
 8105c90:	4a70      	ldr	r2, [pc, #448]	; (8105e54 <HAL_SPI_Init+0x1e4>)
 8105c92:	4293      	cmp	r3, r2
 8105c94:	d00f      	beq.n	8105cb6 <HAL_SPI_Init+0x46>
 8105c96:	687b      	ldr	r3, [r7, #4]
 8105c98:	681b      	ldr	r3, [r3, #0]
 8105c9a:	4a6f      	ldr	r2, [pc, #444]	; (8105e58 <HAL_SPI_Init+0x1e8>)
 8105c9c:	4293      	cmp	r3, r2
 8105c9e:	d00a      	beq.n	8105cb6 <HAL_SPI_Init+0x46>
 8105ca0:	687b      	ldr	r3, [r7, #4]
 8105ca2:	681b      	ldr	r3, [r3, #0]
 8105ca4:	4a6d      	ldr	r2, [pc, #436]	; (8105e5c <HAL_SPI_Init+0x1ec>)
 8105ca6:	4293      	cmp	r3, r2
 8105ca8:	d005      	beq.n	8105cb6 <HAL_SPI_Init+0x46>
 8105caa:	687b      	ldr	r3, [r7, #4]
 8105cac:	68db      	ldr	r3, [r3, #12]
 8105cae:	2b0f      	cmp	r3, #15
 8105cb0:	d901      	bls.n	8105cb6 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8105cb2:	2301      	movs	r3, #1
 8105cb4:	e0ca      	b.n	8105e4c <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8105cb6:	6878      	ldr	r0, [r7, #4]
 8105cb8:	f000 fb96 	bl	81063e8 <SPI_GetPacketSize>
 8105cbc:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8105cbe:	687b      	ldr	r3, [r7, #4]
 8105cc0:	681b      	ldr	r3, [r3, #0]
 8105cc2:	4a64      	ldr	r2, [pc, #400]	; (8105e54 <HAL_SPI_Init+0x1e4>)
 8105cc4:	4293      	cmp	r3, r2
 8105cc6:	d00c      	beq.n	8105ce2 <HAL_SPI_Init+0x72>
 8105cc8:	687b      	ldr	r3, [r7, #4]
 8105cca:	681b      	ldr	r3, [r3, #0]
 8105ccc:	4a62      	ldr	r2, [pc, #392]	; (8105e58 <HAL_SPI_Init+0x1e8>)
 8105cce:	4293      	cmp	r3, r2
 8105cd0:	d007      	beq.n	8105ce2 <HAL_SPI_Init+0x72>
 8105cd2:	687b      	ldr	r3, [r7, #4]
 8105cd4:	681b      	ldr	r3, [r3, #0]
 8105cd6:	4a61      	ldr	r2, [pc, #388]	; (8105e5c <HAL_SPI_Init+0x1ec>)
 8105cd8:	4293      	cmp	r3, r2
 8105cda:	d002      	beq.n	8105ce2 <HAL_SPI_Init+0x72>
 8105cdc:	68bb      	ldr	r3, [r7, #8]
 8105cde:	2b08      	cmp	r3, #8
 8105ce0:	d811      	bhi.n	8105d06 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8105ce2:	687b      	ldr	r3, [r7, #4]
 8105ce4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8105ce6:	4a5b      	ldr	r2, [pc, #364]	; (8105e54 <HAL_SPI_Init+0x1e4>)
 8105ce8:	4293      	cmp	r3, r2
 8105cea:	d009      	beq.n	8105d00 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8105cec:	687b      	ldr	r3, [r7, #4]
 8105cee:	681b      	ldr	r3, [r3, #0]
 8105cf0:	4a59      	ldr	r2, [pc, #356]	; (8105e58 <HAL_SPI_Init+0x1e8>)
 8105cf2:	4293      	cmp	r3, r2
 8105cf4:	d004      	beq.n	8105d00 <HAL_SPI_Init+0x90>
 8105cf6:	687b      	ldr	r3, [r7, #4]
 8105cf8:	681b      	ldr	r3, [r3, #0]
 8105cfa:	4a58      	ldr	r2, [pc, #352]	; (8105e5c <HAL_SPI_Init+0x1ec>)
 8105cfc:	4293      	cmp	r3, r2
 8105cfe:	d104      	bne.n	8105d0a <HAL_SPI_Init+0x9a>
 8105d00:	68bb      	ldr	r3, [r7, #8]
 8105d02:	2b10      	cmp	r3, #16
 8105d04:	d901      	bls.n	8105d0a <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8105d06:	2301      	movs	r3, #1
 8105d08:	e0a0      	b.n	8105e4c <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8105d0a:	687b      	ldr	r3, [r7, #4]
 8105d0c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8105d10:	b2db      	uxtb	r3, r3
 8105d12:	2b00      	cmp	r3, #0
 8105d14:	d106      	bne.n	8105d24 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8105d16:	687b      	ldr	r3, [r7, #4]
 8105d18:	2200      	movs	r2, #0
 8105d1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8105d1e:	6878      	ldr	r0, [r7, #4]
 8105d20:	f7fb fe20 	bl	8101964 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8105d24:	687b      	ldr	r3, [r7, #4]
 8105d26:	2202      	movs	r2, #2
 8105d28:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8105d2c:	687b      	ldr	r3, [r7, #4]
 8105d2e:	681b      	ldr	r3, [r3, #0]
 8105d30:	681a      	ldr	r2, [r3, #0]
 8105d32:	687b      	ldr	r3, [r7, #4]
 8105d34:	681b      	ldr	r3, [r3, #0]
 8105d36:	f022 0201 	bic.w	r2, r2, #1
 8105d3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8105d3c:	687b      	ldr	r3, [r7, #4]
 8105d3e:	699b      	ldr	r3, [r3, #24]
 8105d40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8105d44:	d110      	bne.n	8105d68 <HAL_SPI_Init+0xf8>
 8105d46:	687b      	ldr	r3, [r7, #4]
 8105d48:	685b      	ldr	r3, [r3, #4]
 8105d4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105d4e:	d10b      	bne.n	8105d68 <HAL_SPI_Init+0xf8>
 8105d50:	687b      	ldr	r3, [r7, #4]
 8105d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105d54:	2b00      	cmp	r3, #0
 8105d56:	d107      	bne.n	8105d68 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8105d58:	687b      	ldr	r3, [r7, #4]
 8105d5a:	681b      	ldr	r3, [r3, #0]
 8105d5c:	681a      	ldr	r2, [r3, #0]
 8105d5e:	687b      	ldr	r3, [r7, #4]
 8105d60:	681b      	ldr	r3, [r3, #0]
 8105d62:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8105d66:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8105d68:	687b      	ldr	r3, [r7, #4]
 8105d6a:	69da      	ldr	r2, [r3, #28]
 8105d6c:	687b      	ldr	r3, [r7, #4]
 8105d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105d70:	431a      	orrs	r2, r3
 8105d72:	68fb      	ldr	r3, [r7, #12]
 8105d74:	431a      	orrs	r2, r3
 8105d76:	687b      	ldr	r3, [r7, #4]
 8105d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105d7a:	ea42 0103 	orr.w	r1, r2, r3
 8105d7e:	687b      	ldr	r3, [r7, #4]
 8105d80:	68da      	ldr	r2, [r3, #12]
 8105d82:	687b      	ldr	r3, [r7, #4]
 8105d84:	681b      	ldr	r3, [r3, #0]
 8105d86:	430a      	orrs	r2, r1
 8105d88:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8105d8a:	687b      	ldr	r3, [r7, #4]
 8105d8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8105d8e:	687b      	ldr	r3, [r7, #4]
 8105d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105d92:	431a      	orrs	r2, r3
 8105d94:	687b      	ldr	r3, [r7, #4]
 8105d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105d98:	431a      	orrs	r2, r3
 8105d9a:	687b      	ldr	r3, [r7, #4]
 8105d9c:	699b      	ldr	r3, [r3, #24]
 8105d9e:	431a      	orrs	r2, r3
 8105da0:	687b      	ldr	r3, [r7, #4]
 8105da2:	691b      	ldr	r3, [r3, #16]
 8105da4:	431a      	orrs	r2, r3
 8105da6:	687b      	ldr	r3, [r7, #4]
 8105da8:	695b      	ldr	r3, [r3, #20]
 8105daa:	431a      	orrs	r2, r3
 8105dac:	687b      	ldr	r3, [r7, #4]
 8105dae:	6a1b      	ldr	r3, [r3, #32]
 8105db0:	431a      	orrs	r2, r3
 8105db2:	687b      	ldr	r3, [r7, #4]
 8105db4:	685b      	ldr	r3, [r3, #4]
 8105db6:	431a      	orrs	r2, r3
 8105db8:	687b      	ldr	r3, [r7, #4]
 8105dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105dbc:	431a      	orrs	r2, r3
 8105dbe:	687b      	ldr	r3, [r7, #4]
 8105dc0:	689b      	ldr	r3, [r3, #8]
 8105dc2:	431a      	orrs	r2, r3
 8105dc4:	687b      	ldr	r3, [r7, #4]
 8105dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105dc8:	ea42 0103 	orr.w	r1, r2, r3
 8105dcc:	687b      	ldr	r3, [r7, #4]
 8105dce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8105dd0:	687b      	ldr	r3, [r7, #4]
 8105dd2:	681b      	ldr	r3, [r3, #0]
 8105dd4:	430a      	orrs	r2, r1
 8105dd6:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8105dd8:	687b      	ldr	r3, [r7, #4]
 8105dda:	685b      	ldr	r3, [r3, #4]
 8105ddc:	2b00      	cmp	r3, #0
 8105dde:	d113      	bne.n	8105e08 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8105de0:	687b      	ldr	r3, [r7, #4]
 8105de2:	681b      	ldr	r3, [r3, #0]
 8105de4:	689b      	ldr	r3, [r3, #8]
 8105de6:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8105dea:	687b      	ldr	r3, [r7, #4]
 8105dec:	681b      	ldr	r3, [r3, #0]
 8105dee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8105df2:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8105df4:	687b      	ldr	r3, [r7, #4]
 8105df6:	681b      	ldr	r3, [r3, #0]
 8105df8:	689b      	ldr	r3, [r3, #8]
 8105dfa:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8105dfe:	687b      	ldr	r3, [r7, #4]
 8105e00:	681b      	ldr	r3, [r3, #0]
 8105e02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8105e06:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8105e08:	687b      	ldr	r3, [r7, #4]
 8105e0a:	681b      	ldr	r3, [r3, #0]
 8105e0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8105e0e:	687b      	ldr	r3, [r7, #4]
 8105e10:	681b      	ldr	r3, [r3, #0]
 8105e12:	f022 0201 	bic.w	r2, r2, #1
 8105e16:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8105e18:	687b      	ldr	r3, [r7, #4]
 8105e1a:	685b      	ldr	r3, [r3, #4]
 8105e1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8105e20:	2b00      	cmp	r3, #0
 8105e22:	d00a      	beq.n	8105e3a <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8105e24:	687b      	ldr	r3, [r7, #4]
 8105e26:	681b      	ldr	r3, [r3, #0]
 8105e28:	68db      	ldr	r3, [r3, #12]
 8105e2a:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8105e2e:	687b      	ldr	r3, [r7, #4]
 8105e30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8105e32:	687b      	ldr	r3, [r7, #4]
 8105e34:	681b      	ldr	r3, [r3, #0]
 8105e36:	430a      	orrs	r2, r1
 8105e38:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8105e3a:	687b      	ldr	r3, [r7, #4]
 8105e3c:	2200      	movs	r2, #0
 8105e3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8105e42:	687b      	ldr	r3, [r7, #4]
 8105e44:	2201      	movs	r2, #1
 8105e46:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8105e4a:	2300      	movs	r3, #0
}
 8105e4c:	4618      	mov	r0, r3
 8105e4e:	3710      	adds	r7, #16
 8105e50:	46bd      	mov	sp, r7
 8105e52:	bd80      	pop	{r7, pc}
 8105e54:	40013000 	.word	0x40013000
 8105e58:	40003800 	.word	0x40003800
 8105e5c:	40003c00 	.word	0x40003c00

08105e60 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8105e60:	b580      	push	{r7, lr}
 8105e62:	b08a      	sub	sp, #40	; 0x28
 8105e64:	af00      	add	r7, sp, #0
 8105e66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8105e68:	687b      	ldr	r3, [r7, #4]
 8105e6a:	681b      	ldr	r3, [r3, #0]
 8105e6c:	691b      	ldr	r3, [r3, #16]
 8105e6e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8105e70:	687b      	ldr	r3, [r7, #4]
 8105e72:	681b      	ldr	r3, [r3, #0]
 8105e74:	695b      	ldr	r3, [r3, #20]
 8105e76:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8105e78:	6a3a      	ldr	r2, [r7, #32]
 8105e7a:	69fb      	ldr	r3, [r7, #28]
 8105e7c:	4013      	ands	r3, r2
 8105e7e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8105e80:	687b      	ldr	r3, [r7, #4]
 8105e82:	681b      	ldr	r3, [r3, #0]
 8105e84:	689b      	ldr	r3, [r3, #8]
 8105e86:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8105e88:	2300      	movs	r3, #0
 8105e8a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8105e8c:	687b      	ldr	r3, [r7, #4]
 8105e8e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8105e92:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8105e94:	687b      	ldr	r3, [r7, #4]
 8105e96:	681b      	ldr	r3, [r3, #0]
 8105e98:	3330      	adds	r3, #48	; 0x30
 8105e9a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8105e9c:	69bb      	ldr	r3, [r7, #24]
 8105e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105ea2:	2b00      	cmp	r3, #0
 8105ea4:	d113      	bne.n	8105ece <HAL_SPI_IRQHandler+0x6e>
 8105ea6:	69bb      	ldr	r3, [r7, #24]
 8105ea8:	f003 0320 	and.w	r3, r3, #32
 8105eac:	2b00      	cmp	r3, #0
 8105eae:	d10e      	bne.n	8105ece <HAL_SPI_IRQHandler+0x6e>
 8105eb0:	69bb      	ldr	r3, [r7, #24]
 8105eb2:	f003 0304 	and.w	r3, r3, #4
 8105eb6:	2b00      	cmp	r3, #0
 8105eb8:	d009      	beq.n	8105ece <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8105eba:	687b      	ldr	r3, [r7, #4]
 8105ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8105ebe:	6878      	ldr	r0, [r7, #4]
 8105ec0:	4798      	blx	r3
    hspi->RxISR(hspi);
 8105ec2:	687b      	ldr	r3, [r7, #4]
 8105ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105ec6:	6878      	ldr	r0, [r7, #4]
 8105ec8:	4798      	blx	r3
    handled = 1UL;
 8105eca:	2301      	movs	r3, #1
 8105ecc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8105ece:	69bb      	ldr	r3, [r7, #24]
 8105ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105ed4:	2b00      	cmp	r3, #0
 8105ed6:	d10f      	bne.n	8105ef8 <HAL_SPI_IRQHandler+0x98>
 8105ed8:	69bb      	ldr	r3, [r7, #24]
 8105eda:	f003 0301 	and.w	r3, r3, #1
 8105ede:	2b00      	cmp	r3, #0
 8105ee0:	d00a      	beq.n	8105ef8 <HAL_SPI_IRQHandler+0x98>
 8105ee2:	69bb      	ldr	r3, [r7, #24]
 8105ee4:	f003 0304 	and.w	r3, r3, #4
 8105ee8:	2b00      	cmp	r3, #0
 8105eea:	d105      	bne.n	8105ef8 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8105eec:	687b      	ldr	r3, [r7, #4]
 8105eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105ef0:	6878      	ldr	r0, [r7, #4]
 8105ef2:	4798      	blx	r3
    handled = 1UL;
 8105ef4:	2301      	movs	r3, #1
 8105ef6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8105ef8:	69bb      	ldr	r3, [r7, #24]
 8105efa:	f003 0320 	and.w	r3, r3, #32
 8105efe:	2b00      	cmp	r3, #0
 8105f00:	d10f      	bne.n	8105f22 <HAL_SPI_IRQHandler+0xc2>
 8105f02:	69bb      	ldr	r3, [r7, #24]
 8105f04:	f003 0302 	and.w	r3, r3, #2
 8105f08:	2b00      	cmp	r3, #0
 8105f0a:	d00a      	beq.n	8105f22 <HAL_SPI_IRQHandler+0xc2>
 8105f0c:	69bb      	ldr	r3, [r7, #24]
 8105f0e:	f003 0304 	and.w	r3, r3, #4
 8105f12:	2b00      	cmp	r3, #0
 8105f14:	d105      	bne.n	8105f22 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8105f16:	687b      	ldr	r3, [r7, #4]
 8105f18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8105f1a:	6878      	ldr	r0, [r7, #4]
 8105f1c:	4798      	blx	r3
    handled = 1UL;
 8105f1e:	2301      	movs	r3, #1
 8105f20:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8105f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105f24:	2b00      	cmp	r3, #0
 8105f26:	f040 8172 	bne.w	810620e <HAL_SPI_IRQHandler+0x3ae>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8105f2a:	69bb      	ldr	r3, [r7, #24]
 8105f2c:	f003 0308 	and.w	r3, r3, #8
 8105f30:	2b00      	cmp	r3, #0
 8105f32:	f000 80a0 	beq.w	8106076 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8105f36:	687b      	ldr	r3, [r7, #4]
 8105f38:	681b      	ldr	r3, [r3, #0]
 8105f3a:	699a      	ldr	r2, [r3, #24]
 8105f3c:	687b      	ldr	r3, [r7, #4]
 8105f3e:	681b      	ldr	r3, [r3, #0]
 8105f40:	f042 0208 	orr.w	r2, r2, #8
 8105f44:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8105f46:	687b      	ldr	r3, [r7, #4]
 8105f48:	681b      	ldr	r3, [r3, #0]
 8105f4a:	699a      	ldr	r2, [r3, #24]
 8105f4c:	687b      	ldr	r3, [r7, #4]
 8105f4e:	681b      	ldr	r3, [r3, #0]
 8105f50:	f042 0210 	orr.w	r2, r2, #16
 8105f54:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8105f56:	687b      	ldr	r3, [r7, #4]
 8105f58:	681b      	ldr	r3, [r3, #0]
 8105f5a:	699a      	ldr	r2, [r3, #24]
 8105f5c:	687b      	ldr	r3, [r7, #4]
 8105f5e:	681b      	ldr	r3, [r3, #0]
 8105f60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8105f64:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8105f66:	687b      	ldr	r3, [r7, #4]
 8105f68:	681b      	ldr	r3, [r3, #0]
 8105f6a:	691a      	ldr	r2, [r3, #16]
 8105f6c:	687b      	ldr	r3, [r7, #4]
 8105f6e:	681b      	ldr	r3, [r3, #0]
 8105f70:	f022 0208 	bic.w	r2, r2, #8
 8105f74:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8105f76:	697b      	ldr	r3, [r7, #20]
 8105f78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8105f7c:	2b00      	cmp	r3, #0
 8105f7e:	d00f      	beq.n	8105fa0 <HAL_SPI_IRQHandler+0x140>
 8105f80:	7cfb      	ldrb	r3, [r7, #19]
 8105f82:	2b04      	cmp	r3, #4
 8105f84:	d004      	beq.n	8105f90 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8105f86:	687b      	ldr	r3, [r7, #4]
 8105f88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8105f8a:	69db      	ldr	r3, [r3, #28]
 8105f8c:	2b00      	cmp	r3, #0
 8105f8e:	d007      	beq.n	8105fa0 <HAL_SPI_IRQHandler+0x140>
 8105f90:	7cfb      	ldrb	r3, [r7, #19]
 8105f92:	2b03      	cmp	r3, #3
 8105f94:	d059      	beq.n	810604a <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8105f96:	687b      	ldr	r3, [r7, #4]
 8105f98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105f9a:	69db      	ldr	r3, [r3, #28]
 8105f9c:	2b00      	cmp	r3, #0
 8105f9e:	d154      	bne.n	810604a <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8105fa0:	687b      	ldr	r3, [r7, #4]
 8105fa2:	681b      	ldr	r3, [r3, #0]
 8105fa4:	689b      	ldr	r3, [r3, #8]
 8105fa6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8105faa:	2b00      	cmp	r3, #0
 8105fac:	d13d      	bne.n	810602a <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8105fae:	e036      	b.n	810601e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8105fb0:	687b      	ldr	r3, [r7, #4]
 8105fb2:	68db      	ldr	r3, [r3, #12]
 8105fb4:	2b0f      	cmp	r3, #15
 8105fb6:	d90b      	bls.n	8105fd0 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8105fb8:	687b      	ldr	r3, [r7, #4]
 8105fba:	681a      	ldr	r2, [r3, #0]
 8105fbc:	687b      	ldr	r3, [r7, #4]
 8105fbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105fc0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8105fc2:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8105fc4:	687b      	ldr	r3, [r7, #4]
 8105fc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105fc8:	1d1a      	adds	r2, r3, #4
 8105fca:	687b      	ldr	r3, [r7, #4]
 8105fcc:	665a      	str	r2, [r3, #100]	; 0x64
 8105fce:	e01d      	b.n	810600c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8105fd0:	687b      	ldr	r3, [r7, #4]
 8105fd2:	68db      	ldr	r3, [r3, #12]
 8105fd4:	2b07      	cmp	r3, #7
 8105fd6:	d90b      	bls.n	8105ff0 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8105fd8:	687b      	ldr	r3, [r7, #4]
 8105fda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105fdc:	68fa      	ldr	r2, [r7, #12]
 8105fde:	8812      	ldrh	r2, [r2, #0]
 8105fe0:	b292      	uxth	r2, r2
 8105fe2:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8105fe4:	687b      	ldr	r3, [r7, #4]
 8105fe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105fe8:	1c9a      	adds	r2, r3, #2
 8105fea:	687b      	ldr	r3, [r7, #4]
 8105fec:	665a      	str	r2, [r3, #100]	; 0x64
 8105fee:	e00d      	b.n	810600c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8105ff0:	687b      	ldr	r3, [r7, #4]
 8105ff2:	681b      	ldr	r3, [r3, #0]
 8105ff4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8105ff8:	687b      	ldr	r3, [r7, #4]
 8105ffa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105ffc:	7812      	ldrb	r2, [r2, #0]
 8105ffe:	b2d2      	uxtb	r2, r2
 8106000:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8106002:	687b      	ldr	r3, [r7, #4]
 8106004:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106006:	1c5a      	adds	r2, r3, #1
 8106008:	687b      	ldr	r3, [r7, #4]
 810600a:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 810600c:	687b      	ldr	r3, [r7, #4]
 810600e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8106012:	b29b      	uxth	r3, r3
 8106014:	3b01      	subs	r3, #1
 8106016:	b29a      	uxth	r2, r3
 8106018:	687b      	ldr	r3, [r7, #4]
 810601a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 810601e:	687b      	ldr	r3, [r7, #4]
 8106020:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8106024:	b29b      	uxth	r3, r3
 8106026:	2b00      	cmp	r3, #0
 8106028:	d1c2      	bne.n	8105fb0 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 810602a:	6878      	ldr	r0, [r7, #4]
 810602c:	f000 f93c 	bl	81062a8 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8106030:	687b      	ldr	r3, [r7, #4]
 8106032:	2201      	movs	r2, #1
 8106034:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8106038:	687b      	ldr	r3, [r7, #4]
 810603a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810603e:	2b00      	cmp	r3, #0
 8106040:	d003      	beq.n	810604a <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8106042:	6878      	ldr	r0, [r7, #4]
 8106044:	f000 f90c 	bl	8106260 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8106048:	e0e6      	b.n	8106218 <HAL_SPI_IRQHandler+0x3b8>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 810604a:	7cfb      	ldrb	r3, [r7, #19]
 810604c:	2b05      	cmp	r3, #5
 810604e:	d103      	bne.n	8106058 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8106050:	6878      	ldr	r0, [r7, #4]
 8106052:	f000 f8fb 	bl	810624c <HAL_SPI_TxRxCpltCallback>
    {
      /* end of the appropriate call */
    }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

    return;
 8106056:	e0dc      	b.n	8106212 <HAL_SPI_IRQHandler+0x3b2>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8106058:	7cfb      	ldrb	r3, [r7, #19]
 810605a:	2b04      	cmp	r3, #4
 810605c:	d103      	bne.n	8106066 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 810605e:	6878      	ldr	r0, [r7, #4]
 8106060:	f000 f8ea 	bl	8106238 <HAL_SPI_RxCpltCallback>
    return;
 8106064:	e0d5      	b.n	8106212 <HAL_SPI_IRQHandler+0x3b2>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8106066:	7cfb      	ldrb	r3, [r7, #19]
 8106068:	2b03      	cmp	r3, #3
 810606a:	f040 80d2 	bne.w	8106212 <HAL_SPI_IRQHandler+0x3b2>
      HAL_SPI_TxCpltCallback(hspi);
 810606e:	6878      	ldr	r0, [r7, #4]
 8106070:	f000 f8d8 	bl	8106224 <HAL_SPI_TxCpltCallback>
    return;
 8106074:	e0cd      	b.n	8106212 <HAL_SPI_IRQHandler+0x3b2>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8106076:	69fb      	ldr	r3, [r7, #28]
 8106078:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810607c:	2b00      	cmp	r3, #0
 810607e:	d00d      	beq.n	810609c <HAL_SPI_IRQHandler+0x23c>
 8106080:	6a3b      	ldr	r3, [r7, #32]
 8106082:	f003 0308 	and.w	r3, r3, #8
 8106086:	2b00      	cmp	r3, #0
 8106088:	d008      	beq.n	810609c <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 810608a:	687b      	ldr	r3, [r7, #4]
 810608c:	681b      	ldr	r3, [r3, #0]
 810608e:	699a      	ldr	r2, [r3, #24]
 8106090:	687b      	ldr	r3, [r7, #4]
 8106092:	681b      	ldr	r3, [r3, #0]
 8106094:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8106098:	619a      	str	r2, [r3, #24]

    return;
 810609a:	e0bd      	b.n	8106218 <HAL_SPI_IRQHandler+0x3b8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 810609c:	69bb      	ldr	r3, [r7, #24]
 810609e:	f403 7358 	and.w	r3, r3, #864	; 0x360
 81060a2:	2b00      	cmp	r3, #0
 81060a4:	f000 80b8 	beq.w	8106218 <HAL_SPI_IRQHandler+0x3b8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 81060a8:	69bb      	ldr	r3, [r7, #24]
 81060aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81060ae:	2b00      	cmp	r3, #0
 81060b0:	d00f      	beq.n	81060d2 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 81060b2:	687b      	ldr	r3, [r7, #4]
 81060b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81060b8:	f043 0204 	orr.w	r2, r3, #4
 81060bc:	687b      	ldr	r3, [r7, #4]
 81060be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 81060c2:	687b      	ldr	r3, [r7, #4]
 81060c4:	681b      	ldr	r3, [r3, #0]
 81060c6:	699a      	ldr	r2, [r3, #24]
 81060c8:	687b      	ldr	r3, [r7, #4]
 81060ca:	681b      	ldr	r3, [r3, #0]
 81060cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 81060d0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 81060d2:	69bb      	ldr	r3, [r7, #24]
 81060d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81060d8:	2b00      	cmp	r3, #0
 81060da:	d00f      	beq.n	81060fc <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 81060dc:	687b      	ldr	r3, [r7, #4]
 81060de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81060e2:	f043 0201 	orr.w	r2, r3, #1
 81060e6:	687b      	ldr	r3, [r7, #4]
 81060e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 81060ec:	687b      	ldr	r3, [r7, #4]
 81060ee:	681b      	ldr	r3, [r3, #0]
 81060f0:	699a      	ldr	r2, [r3, #24]
 81060f2:	687b      	ldr	r3, [r7, #4]
 81060f4:	681b      	ldr	r3, [r3, #0]
 81060f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 81060fa:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 81060fc:	69bb      	ldr	r3, [r7, #24]
 81060fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106102:	2b00      	cmp	r3, #0
 8106104:	d00f      	beq.n	8106126 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8106106:	687b      	ldr	r3, [r7, #4]
 8106108:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810610c:	f043 0208 	orr.w	r2, r3, #8
 8106110:	687b      	ldr	r3, [r7, #4]
 8106112:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8106116:	687b      	ldr	r3, [r7, #4]
 8106118:	681b      	ldr	r3, [r3, #0]
 810611a:	699a      	ldr	r2, [r3, #24]
 810611c:	687b      	ldr	r3, [r7, #4]
 810611e:	681b      	ldr	r3, [r3, #0]
 8106120:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8106124:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8106126:	69bb      	ldr	r3, [r7, #24]
 8106128:	f003 0320 	and.w	r3, r3, #32
 810612c:	2b00      	cmp	r3, #0
 810612e:	d00f      	beq.n	8106150 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8106130:	687b      	ldr	r3, [r7, #4]
 8106132:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106136:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810613a:	687b      	ldr	r3, [r7, #4]
 810613c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8106140:	687b      	ldr	r3, [r7, #4]
 8106142:	681b      	ldr	r3, [r3, #0]
 8106144:	699a      	ldr	r2, [r3, #24]
 8106146:	687b      	ldr	r3, [r7, #4]
 8106148:	681b      	ldr	r3, [r3, #0]
 810614a:	f042 0220 	orr.w	r2, r2, #32
 810614e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8106150:	687b      	ldr	r3, [r7, #4]
 8106152:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106156:	2b00      	cmp	r3, #0
 8106158:	d05d      	beq.n	8106216 <HAL_SPI_IRQHandler+0x3b6>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 810615a:	687b      	ldr	r3, [r7, #4]
 810615c:	681b      	ldr	r3, [r3, #0]
 810615e:	681a      	ldr	r2, [r3, #0]
 8106160:	687b      	ldr	r3, [r7, #4]
 8106162:	681b      	ldr	r3, [r3, #0]
 8106164:	f022 0201 	bic.w	r2, r2, #1
 8106168:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 810616a:	687b      	ldr	r3, [r7, #4]
 810616c:	681b      	ldr	r3, [r3, #0]
 810616e:	691b      	ldr	r3, [r3, #16]
 8106170:	687a      	ldr	r2, [r7, #4]
 8106172:	6812      	ldr	r2, [r2, #0]
 8106174:	f423 735a 	bic.w	r3, r3, #872	; 0x368
 8106178:	f023 0303 	bic.w	r3, r3, #3
 810617c:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 810617e:	697b      	ldr	r3, [r7, #20]
 8106180:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8106184:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8106188:	d138      	bne.n	81061fc <HAL_SPI_IRQHandler+0x39c>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810618a:	687b      	ldr	r3, [r7, #4]
 810618c:	681b      	ldr	r3, [r3, #0]
 810618e:	689a      	ldr	r2, [r3, #8]
 8106190:	687b      	ldr	r3, [r7, #4]
 8106192:	681b      	ldr	r3, [r3, #0]
 8106194:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8106198:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 810619a:	687b      	ldr	r3, [r7, #4]
 810619c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810619e:	2b00      	cmp	r3, #0
 81061a0:	d013      	beq.n	81061ca <HAL_SPI_IRQHandler+0x36a>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 81061a2:	687b      	ldr	r3, [r7, #4]
 81061a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81061a6:	4a1e      	ldr	r2, [pc, #120]	; (8106220 <HAL_SPI_IRQHandler+0x3c0>)
 81061a8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 81061aa:	687b      	ldr	r3, [r7, #4]
 81061ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81061ae:	4618      	mov	r0, r3
 81061b0:	f7fc fee2 	bl	8102f78 <HAL_DMA_Abort_IT>
 81061b4:	4603      	mov	r3, r0
 81061b6:	2b00      	cmp	r3, #0
 81061b8:	d007      	beq.n	81061ca <HAL_SPI_IRQHandler+0x36a>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 81061ba:	687b      	ldr	r3, [r7, #4]
 81061bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81061c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 81061c4:	687b      	ldr	r3, [r7, #4]
 81061c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 81061ca:	687b      	ldr	r3, [r7, #4]
 81061cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81061ce:	2b00      	cmp	r3, #0
 81061d0:	d021      	beq.n	8106216 <HAL_SPI_IRQHandler+0x3b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 81061d2:	687b      	ldr	r3, [r7, #4]
 81061d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81061d6:	4a12      	ldr	r2, [pc, #72]	; (8106220 <HAL_SPI_IRQHandler+0x3c0>)
 81061d8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 81061da:	687b      	ldr	r3, [r7, #4]
 81061dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81061de:	4618      	mov	r0, r3
 81061e0:	f7fc feca 	bl	8102f78 <HAL_DMA_Abort_IT>
 81061e4:	4603      	mov	r3, r0
 81061e6:	2b00      	cmp	r3, #0
 81061e8:	d015      	beq.n	8106216 <HAL_SPI_IRQHandler+0x3b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 81061ea:	687b      	ldr	r3, [r7, #4]
 81061ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81061f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 81061f4:	687b      	ldr	r3, [r7, #4]
 81061f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 81061fa:	e00c      	b.n	8106216 <HAL_SPI_IRQHandler+0x3b6>
        hspi->State = HAL_SPI_STATE_READY;
 81061fc:	687b      	ldr	r3, [r7, #4]
 81061fe:	2201      	movs	r2, #1
 8106200:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8106204:	6878      	ldr	r0, [r7, #4]
 8106206:	f000 f82b 	bl	8106260 <HAL_SPI_ErrorCallback>
    return;
 810620a:	bf00      	nop
 810620c:	e003      	b.n	8106216 <HAL_SPI_IRQHandler+0x3b6>
    return;
 810620e:	bf00      	nop
 8106210:	e002      	b.n	8106218 <HAL_SPI_IRQHandler+0x3b8>
    return;
 8106212:	bf00      	nop
 8106214:	e000      	b.n	8106218 <HAL_SPI_IRQHandler+0x3b8>
    return;
 8106216:	bf00      	nop
  }
}
 8106218:	3728      	adds	r7, #40	; 0x28
 810621a:	46bd      	mov	sp, r7
 810621c:	bd80      	pop	{r7, pc}
 810621e:	bf00      	nop
 8106220:	08106275 	.word	0x08106275

08106224 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8106224:	b480      	push	{r7}
 8106226:	b083      	sub	sp, #12
 8106228:	af00      	add	r7, sp, #0
 810622a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 810622c:	bf00      	nop
 810622e:	370c      	adds	r7, #12
 8106230:	46bd      	mov	sp, r7
 8106232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106236:	4770      	bx	lr

08106238 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8106238:	b480      	push	{r7}
 810623a:	b083      	sub	sp, #12
 810623c:	af00      	add	r7, sp, #0
 810623e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8106240:	bf00      	nop
 8106242:	370c      	adds	r7, #12
 8106244:	46bd      	mov	sp, r7
 8106246:	f85d 7b04 	ldr.w	r7, [sp], #4
 810624a:	4770      	bx	lr

0810624c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 810624c:	b480      	push	{r7}
 810624e:	b083      	sub	sp, #12
 8106250:	af00      	add	r7, sp, #0
 8106252:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8106254:	bf00      	nop
 8106256:	370c      	adds	r7, #12
 8106258:	46bd      	mov	sp, r7
 810625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810625e:	4770      	bx	lr

08106260 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8106260:	b480      	push	{r7}
 8106262:	b083      	sub	sp, #12
 8106264:	af00      	add	r7, sp, #0
 8106266:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8106268:	bf00      	nop
 810626a:	370c      	adds	r7, #12
 810626c:	46bd      	mov	sp, r7
 810626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106272:	4770      	bx	lr

08106274 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8106274:	b580      	push	{r7, lr}
 8106276:	b084      	sub	sp, #16
 8106278:	af00      	add	r7, sp, #0
 810627a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810627c:	687b      	ldr	r3, [r7, #4]
 810627e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106280:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8106282:	68fb      	ldr	r3, [r7, #12]
 8106284:	2200      	movs	r2, #0
 8106286:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 810628a:	68fb      	ldr	r3, [r7, #12]
 810628c:	2200      	movs	r2, #0
 810628e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8106292:	68fb      	ldr	r3, [r7, #12]
 8106294:	2201      	movs	r2, #1
 8106296:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 810629a:	68f8      	ldr	r0, [r7, #12]
 810629c:	f7ff ffe0 	bl	8106260 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 81062a0:	bf00      	nop
 81062a2:	3710      	adds	r7, #16
 81062a4:	46bd      	mov	sp, r7
 81062a6:	bd80      	pop	{r7, pc}

081062a8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 81062a8:	b480      	push	{r7}
 81062aa:	b085      	sub	sp, #20
 81062ac:	af00      	add	r7, sp, #0
 81062ae:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 81062b0:	687b      	ldr	r3, [r7, #4]
 81062b2:	681b      	ldr	r3, [r3, #0]
 81062b4:	695b      	ldr	r3, [r3, #20]
 81062b6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 81062b8:	687b      	ldr	r3, [r7, #4]
 81062ba:	681b      	ldr	r3, [r3, #0]
 81062bc:	699a      	ldr	r2, [r3, #24]
 81062be:	687b      	ldr	r3, [r7, #4]
 81062c0:	681b      	ldr	r3, [r3, #0]
 81062c2:	f042 0208 	orr.w	r2, r2, #8
 81062c6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 81062c8:	687b      	ldr	r3, [r7, #4]
 81062ca:	681b      	ldr	r3, [r3, #0]
 81062cc:	699a      	ldr	r2, [r3, #24]
 81062ce:	687b      	ldr	r3, [r7, #4]
 81062d0:	681b      	ldr	r3, [r3, #0]
 81062d2:	f042 0210 	orr.w	r2, r2, #16
 81062d6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 81062d8:	687b      	ldr	r3, [r7, #4]
 81062da:	681b      	ldr	r3, [r3, #0]
 81062dc:	681a      	ldr	r2, [r3, #0]
 81062de:	687b      	ldr	r3, [r7, #4]
 81062e0:	681b      	ldr	r3, [r3, #0]
 81062e2:	f022 0201 	bic.w	r2, r2, #1
 81062e6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 81062e8:	687b      	ldr	r3, [r7, #4]
 81062ea:	681b      	ldr	r3, [r3, #0]
 81062ec:	691b      	ldr	r3, [r3, #16]
 81062ee:	687a      	ldr	r2, [r7, #4]
 81062f0:	6812      	ldr	r2, [r2, #0]
 81062f2:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 81062f6:	f023 0303 	bic.w	r3, r3, #3
 81062fa:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 81062fc:	687b      	ldr	r3, [r7, #4]
 81062fe:	681b      	ldr	r3, [r3, #0]
 8106300:	689a      	ldr	r2, [r3, #8]
 8106302:	687b      	ldr	r3, [r7, #4]
 8106304:	681b      	ldr	r3, [r3, #0]
 8106306:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 810630a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 810630c:	687b      	ldr	r3, [r7, #4]
 810630e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8106312:	b2db      	uxtb	r3, r3
 8106314:	2b04      	cmp	r3, #4
 8106316:	d014      	beq.n	8106342 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8106318:	68fb      	ldr	r3, [r7, #12]
 810631a:	f003 0320 	and.w	r3, r3, #32
 810631e:	2b00      	cmp	r3, #0
 8106320:	d00f      	beq.n	8106342 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8106322:	687b      	ldr	r3, [r7, #4]
 8106324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106328:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810632c:	687b      	ldr	r3, [r7, #4]
 810632e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8106332:	687b      	ldr	r3, [r7, #4]
 8106334:	681b      	ldr	r3, [r3, #0]
 8106336:	699a      	ldr	r2, [r3, #24]
 8106338:	687b      	ldr	r3, [r7, #4]
 810633a:	681b      	ldr	r3, [r3, #0]
 810633c:	f042 0220 	orr.w	r2, r2, #32
 8106340:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8106342:	687b      	ldr	r3, [r7, #4]
 8106344:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8106348:	b2db      	uxtb	r3, r3
 810634a:	2b03      	cmp	r3, #3
 810634c:	d014      	beq.n	8106378 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 810634e:	68fb      	ldr	r3, [r7, #12]
 8106350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106354:	2b00      	cmp	r3, #0
 8106356:	d00f      	beq.n	8106378 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8106358:	687b      	ldr	r3, [r7, #4]
 810635a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810635e:	f043 0204 	orr.w	r2, r3, #4
 8106362:	687b      	ldr	r3, [r7, #4]
 8106364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8106368:	687b      	ldr	r3, [r7, #4]
 810636a:	681b      	ldr	r3, [r3, #0]
 810636c:	699a      	ldr	r2, [r3, #24]
 810636e:	687b      	ldr	r3, [r7, #4]
 8106370:	681b      	ldr	r3, [r3, #0]
 8106372:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8106376:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8106378:	68fb      	ldr	r3, [r7, #12]
 810637a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810637e:	2b00      	cmp	r3, #0
 8106380:	d00f      	beq.n	81063a2 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8106382:	687b      	ldr	r3, [r7, #4]
 8106384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106388:	f043 0201 	orr.w	r2, r3, #1
 810638c:	687b      	ldr	r3, [r7, #4]
 810638e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8106392:	687b      	ldr	r3, [r7, #4]
 8106394:	681b      	ldr	r3, [r3, #0]
 8106396:	699a      	ldr	r2, [r3, #24]
 8106398:	687b      	ldr	r3, [r7, #4]
 810639a:	681b      	ldr	r3, [r3, #0]
 810639c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 81063a0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 81063a2:	68fb      	ldr	r3, [r7, #12]
 81063a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81063a8:	2b00      	cmp	r3, #0
 81063aa:	d00f      	beq.n	81063cc <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 81063ac:	687b      	ldr	r3, [r7, #4]
 81063ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81063b2:	f043 0208 	orr.w	r2, r3, #8
 81063b6:	687b      	ldr	r3, [r7, #4]
 81063b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 81063bc:	687b      	ldr	r3, [r7, #4]
 81063be:	681b      	ldr	r3, [r3, #0]
 81063c0:	699a      	ldr	r2, [r3, #24]
 81063c2:	687b      	ldr	r3, [r7, #4]
 81063c4:	681b      	ldr	r3, [r3, #0]
 81063c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81063ca:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 81063cc:	687b      	ldr	r3, [r7, #4]
 81063ce:	2200      	movs	r2, #0
 81063d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 81063d4:	687b      	ldr	r3, [r7, #4]
 81063d6:	2200      	movs	r2, #0
 81063d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 81063dc:	bf00      	nop
 81063de:	3714      	adds	r7, #20
 81063e0:	46bd      	mov	sp, r7
 81063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81063e6:	4770      	bx	lr

081063e8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 81063e8:	b480      	push	{r7}
 81063ea:	b085      	sub	sp, #20
 81063ec:	af00      	add	r7, sp, #0
 81063ee:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 81063f0:	687b      	ldr	r3, [r7, #4]
 81063f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81063f4:	095b      	lsrs	r3, r3, #5
 81063f6:	3301      	adds	r3, #1
 81063f8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 81063fa:	687b      	ldr	r3, [r7, #4]
 81063fc:	68db      	ldr	r3, [r3, #12]
 81063fe:	3301      	adds	r3, #1
 8106400:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8106402:	68bb      	ldr	r3, [r7, #8]
 8106404:	3307      	adds	r3, #7
 8106406:	08db      	lsrs	r3, r3, #3
 8106408:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 810640a:	68bb      	ldr	r3, [r7, #8]
 810640c:	68fa      	ldr	r2, [r7, #12]
 810640e:	fb02 f303 	mul.w	r3, r2, r3
}
 8106412:	4618      	mov	r0, r3
 8106414:	3714      	adds	r7, #20
 8106416:	46bd      	mov	sp, r7
 8106418:	f85d 7b04 	ldr.w	r7, [sp], #4
 810641c:	4770      	bx	lr

0810641e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 810641e:	b580      	push	{r7, lr}
 8106420:	b082      	sub	sp, #8
 8106422:	af00      	add	r7, sp, #0
 8106424:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8106426:	687b      	ldr	r3, [r7, #4]
 8106428:	2b00      	cmp	r3, #0
 810642a:	d101      	bne.n	8106430 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810642c:	2301      	movs	r3, #1
 810642e:	e049      	b.n	81064c4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8106430:	687b      	ldr	r3, [r7, #4]
 8106432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8106436:	b2db      	uxtb	r3, r3
 8106438:	2b00      	cmp	r3, #0
 810643a:	d106      	bne.n	810644a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810643c:	687b      	ldr	r3, [r7, #4]
 810643e:	2200      	movs	r2, #0
 8106440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8106444:	6878      	ldr	r0, [r7, #4]
 8106446:	f000 f841 	bl	81064cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810644a:	687b      	ldr	r3, [r7, #4]
 810644c:	2202      	movs	r2, #2
 810644e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8106452:	687b      	ldr	r3, [r7, #4]
 8106454:	681a      	ldr	r2, [r3, #0]
 8106456:	687b      	ldr	r3, [r7, #4]
 8106458:	3304      	adds	r3, #4
 810645a:	4619      	mov	r1, r3
 810645c:	4610      	mov	r0, r2
 810645e:	f000 f9bd 	bl	81067dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8106462:	687b      	ldr	r3, [r7, #4]
 8106464:	2201      	movs	r2, #1
 8106466:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810646a:	687b      	ldr	r3, [r7, #4]
 810646c:	2201      	movs	r2, #1
 810646e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8106472:	687b      	ldr	r3, [r7, #4]
 8106474:	2201      	movs	r2, #1
 8106476:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 810647a:	687b      	ldr	r3, [r7, #4]
 810647c:	2201      	movs	r2, #1
 810647e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8106482:	687b      	ldr	r3, [r7, #4]
 8106484:	2201      	movs	r2, #1
 8106486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810648a:	687b      	ldr	r3, [r7, #4]
 810648c:	2201      	movs	r2, #1
 810648e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8106492:	687b      	ldr	r3, [r7, #4]
 8106494:	2201      	movs	r2, #1
 8106496:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810649a:	687b      	ldr	r3, [r7, #4]
 810649c:	2201      	movs	r2, #1
 810649e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81064a2:	687b      	ldr	r3, [r7, #4]
 81064a4:	2201      	movs	r2, #1
 81064a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81064aa:	687b      	ldr	r3, [r7, #4]
 81064ac:	2201      	movs	r2, #1
 81064ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81064b2:	687b      	ldr	r3, [r7, #4]
 81064b4:	2201      	movs	r2, #1
 81064b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81064ba:	687b      	ldr	r3, [r7, #4]
 81064bc:	2201      	movs	r2, #1
 81064be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81064c2:	2300      	movs	r3, #0
}
 81064c4:	4618      	mov	r0, r3
 81064c6:	3708      	adds	r7, #8
 81064c8:	46bd      	mov	sp, r7
 81064ca:	bd80      	pop	{r7, pc}

081064cc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 81064cc:	b480      	push	{r7}
 81064ce:	b083      	sub	sp, #12
 81064d0:	af00      	add	r7, sp, #0
 81064d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 81064d4:	bf00      	nop
 81064d6:	370c      	adds	r7, #12
 81064d8:	46bd      	mov	sp, r7
 81064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81064de:	4770      	bx	lr

081064e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 81064e0:	b480      	push	{r7}
 81064e2:	b085      	sub	sp, #20
 81064e4:	af00      	add	r7, sp, #0
 81064e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 81064e8:	687b      	ldr	r3, [r7, #4]
 81064ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81064ee:	b2db      	uxtb	r3, r3
 81064f0:	2b01      	cmp	r3, #1
 81064f2:	d001      	beq.n	81064f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 81064f4:	2301      	movs	r3, #1
 81064f6:	e021      	b.n	810653c <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81064f8:	687b      	ldr	r3, [r7, #4]
 81064fa:	2202      	movs	r2, #2
 81064fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8106500:	687b      	ldr	r3, [r7, #4]
 8106502:	681b      	ldr	r3, [r3, #0]
 8106504:	68da      	ldr	r2, [r3, #12]
 8106506:	687b      	ldr	r3, [r7, #4]
 8106508:	681b      	ldr	r3, [r3, #0]
 810650a:	f042 0201 	orr.w	r2, r2, #1
 810650e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8106510:	687b      	ldr	r3, [r7, #4]
 8106512:	681b      	ldr	r3, [r3, #0]
 8106514:	689a      	ldr	r2, [r3, #8]
 8106516:	4b0c      	ldr	r3, [pc, #48]	; (8106548 <HAL_TIM_Base_Start_IT+0x68>)
 8106518:	4013      	ands	r3, r2
 810651a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810651c:	68fb      	ldr	r3, [r7, #12]
 810651e:	2b06      	cmp	r3, #6
 8106520:	d00b      	beq.n	810653a <HAL_TIM_Base_Start_IT+0x5a>
 8106522:	68fb      	ldr	r3, [r7, #12]
 8106524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106528:	d007      	beq.n	810653a <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 810652a:	687b      	ldr	r3, [r7, #4]
 810652c:	681b      	ldr	r3, [r3, #0]
 810652e:	681a      	ldr	r2, [r3, #0]
 8106530:	687b      	ldr	r3, [r7, #4]
 8106532:	681b      	ldr	r3, [r3, #0]
 8106534:	f042 0201 	orr.w	r2, r2, #1
 8106538:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 810653a:	2300      	movs	r3, #0
}
 810653c:	4618      	mov	r0, r3
 810653e:	3714      	adds	r7, #20
 8106540:	46bd      	mov	sp, r7
 8106542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106546:	4770      	bx	lr
 8106548:	00010007 	.word	0x00010007

0810654c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 810654c:	b580      	push	{r7, lr}
 810654e:	b082      	sub	sp, #8
 8106550:	af00      	add	r7, sp, #0
 8106552:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8106554:	687b      	ldr	r3, [r7, #4]
 8106556:	681b      	ldr	r3, [r3, #0]
 8106558:	691b      	ldr	r3, [r3, #16]
 810655a:	f003 0302 	and.w	r3, r3, #2
 810655e:	2b02      	cmp	r3, #2
 8106560:	d122      	bne.n	81065a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8106562:	687b      	ldr	r3, [r7, #4]
 8106564:	681b      	ldr	r3, [r3, #0]
 8106566:	68db      	ldr	r3, [r3, #12]
 8106568:	f003 0302 	and.w	r3, r3, #2
 810656c:	2b02      	cmp	r3, #2
 810656e:	d11b      	bne.n	81065a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8106570:	687b      	ldr	r3, [r7, #4]
 8106572:	681b      	ldr	r3, [r3, #0]
 8106574:	f06f 0202 	mvn.w	r2, #2
 8106578:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810657a:	687b      	ldr	r3, [r7, #4]
 810657c:	2201      	movs	r2, #1
 810657e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8106580:	687b      	ldr	r3, [r7, #4]
 8106582:	681b      	ldr	r3, [r3, #0]
 8106584:	699b      	ldr	r3, [r3, #24]
 8106586:	f003 0303 	and.w	r3, r3, #3
 810658a:	2b00      	cmp	r3, #0
 810658c:	d003      	beq.n	8106596 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 810658e:	6878      	ldr	r0, [r7, #4]
 8106590:	f000 f905 	bl	810679e <HAL_TIM_IC_CaptureCallback>
 8106594:	e005      	b.n	81065a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8106596:	6878      	ldr	r0, [r7, #4]
 8106598:	f000 f8f7 	bl	810678a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 810659c:	6878      	ldr	r0, [r7, #4]
 810659e:	f000 f908 	bl	81067b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81065a2:	687b      	ldr	r3, [r7, #4]
 81065a4:	2200      	movs	r2, #0
 81065a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 81065a8:	687b      	ldr	r3, [r7, #4]
 81065aa:	681b      	ldr	r3, [r3, #0]
 81065ac:	691b      	ldr	r3, [r3, #16]
 81065ae:	f003 0304 	and.w	r3, r3, #4
 81065b2:	2b04      	cmp	r3, #4
 81065b4:	d122      	bne.n	81065fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 81065b6:	687b      	ldr	r3, [r7, #4]
 81065b8:	681b      	ldr	r3, [r3, #0]
 81065ba:	68db      	ldr	r3, [r3, #12]
 81065bc:	f003 0304 	and.w	r3, r3, #4
 81065c0:	2b04      	cmp	r3, #4
 81065c2:	d11b      	bne.n	81065fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 81065c4:	687b      	ldr	r3, [r7, #4]
 81065c6:	681b      	ldr	r3, [r3, #0]
 81065c8:	f06f 0204 	mvn.w	r2, #4
 81065cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 81065ce:	687b      	ldr	r3, [r7, #4]
 81065d0:	2202      	movs	r2, #2
 81065d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 81065d4:	687b      	ldr	r3, [r7, #4]
 81065d6:	681b      	ldr	r3, [r3, #0]
 81065d8:	699b      	ldr	r3, [r3, #24]
 81065da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81065de:	2b00      	cmp	r3, #0
 81065e0:	d003      	beq.n	81065ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81065e2:	6878      	ldr	r0, [r7, #4]
 81065e4:	f000 f8db 	bl	810679e <HAL_TIM_IC_CaptureCallback>
 81065e8:	e005      	b.n	81065f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81065ea:	6878      	ldr	r0, [r7, #4]
 81065ec:	f000 f8cd 	bl	810678a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81065f0:	6878      	ldr	r0, [r7, #4]
 81065f2:	f000 f8de 	bl	81067b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81065f6:	687b      	ldr	r3, [r7, #4]
 81065f8:	2200      	movs	r2, #0
 81065fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 81065fc:	687b      	ldr	r3, [r7, #4]
 81065fe:	681b      	ldr	r3, [r3, #0]
 8106600:	691b      	ldr	r3, [r3, #16]
 8106602:	f003 0308 	and.w	r3, r3, #8
 8106606:	2b08      	cmp	r3, #8
 8106608:	d122      	bne.n	8106650 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 810660a:	687b      	ldr	r3, [r7, #4]
 810660c:	681b      	ldr	r3, [r3, #0]
 810660e:	68db      	ldr	r3, [r3, #12]
 8106610:	f003 0308 	and.w	r3, r3, #8
 8106614:	2b08      	cmp	r3, #8
 8106616:	d11b      	bne.n	8106650 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8106618:	687b      	ldr	r3, [r7, #4]
 810661a:	681b      	ldr	r3, [r3, #0]
 810661c:	f06f 0208 	mvn.w	r2, #8
 8106620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8106622:	687b      	ldr	r3, [r7, #4]
 8106624:	2204      	movs	r2, #4
 8106626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8106628:	687b      	ldr	r3, [r7, #4]
 810662a:	681b      	ldr	r3, [r3, #0]
 810662c:	69db      	ldr	r3, [r3, #28]
 810662e:	f003 0303 	and.w	r3, r3, #3
 8106632:	2b00      	cmp	r3, #0
 8106634:	d003      	beq.n	810663e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8106636:	6878      	ldr	r0, [r7, #4]
 8106638:	f000 f8b1 	bl	810679e <HAL_TIM_IC_CaptureCallback>
 810663c:	e005      	b.n	810664a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810663e:	6878      	ldr	r0, [r7, #4]
 8106640:	f000 f8a3 	bl	810678a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106644:	6878      	ldr	r0, [r7, #4]
 8106646:	f000 f8b4 	bl	81067b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810664a:	687b      	ldr	r3, [r7, #4]
 810664c:	2200      	movs	r2, #0
 810664e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8106650:	687b      	ldr	r3, [r7, #4]
 8106652:	681b      	ldr	r3, [r3, #0]
 8106654:	691b      	ldr	r3, [r3, #16]
 8106656:	f003 0310 	and.w	r3, r3, #16
 810665a:	2b10      	cmp	r3, #16
 810665c:	d122      	bne.n	81066a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 810665e:	687b      	ldr	r3, [r7, #4]
 8106660:	681b      	ldr	r3, [r3, #0]
 8106662:	68db      	ldr	r3, [r3, #12]
 8106664:	f003 0310 	and.w	r3, r3, #16
 8106668:	2b10      	cmp	r3, #16
 810666a:	d11b      	bne.n	81066a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 810666c:	687b      	ldr	r3, [r7, #4]
 810666e:	681b      	ldr	r3, [r3, #0]
 8106670:	f06f 0210 	mvn.w	r2, #16
 8106674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8106676:	687b      	ldr	r3, [r7, #4]
 8106678:	2208      	movs	r2, #8
 810667a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 810667c:	687b      	ldr	r3, [r7, #4]
 810667e:	681b      	ldr	r3, [r3, #0]
 8106680:	69db      	ldr	r3, [r3, #28]
 8106682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8106686:	2b00      	cmp	r3, #0
 8106688:	d003      	beq.n	8106692 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810668a:	6878      	ldr	r0, [r7, #4]
 810668c:	f000 f887 	bl	810679e <HAL_TIM_IC_CaptureCallback>
 8106690:	e005      	b.n	810669e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8106692:	6878      	ldr	r0, [r7, #4]
 8106694:	f000 f879 	bl	810678a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106698:	6878      	ldr	r0, [r7, #4]
 810669a:	f000 f88a 	bl	81067b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810669e:	687b      	ldr	r3, [r7, #4]
 81066a0:	2200      	movs	r2, #0
 81066a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 81066a4:	687b      	ldr	r3, [r7, #4]
 81066a6:	681b      	ldr	r3, [r3, #0]
 81066a8:	691b      	ldr	r3, [r3, #16]
 81066aa:	f003 0301 	and.w	r3, r3, #1
 81066ae:	2b01      	cmp	r3, #1
 81066b0:	d10e      	bne.n	81066d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 81066b2:	687b      	ldr	r3, [r7, #4]
 81066b4:	681b      	ldr	r3, [r3, #0]
 81066b6:	68db      	ldr	r3, [r3, #12]
 81066b8:	f003 0301 	and.w	r3, r3, #1
 81066bc:	2b01      	cmp	r3, #1
 81066be:	d107      	bne.n	81066d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 81066c0:	687b      	ldr	r3, [r7, #4]
 81066c2:	681b      	ldr	r3, [r3, #0]
 81066c4:	f06f 0201 	mvn.w	r2, #1
 81066c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 81066ca:	6878      	ldr	r0, [r7, #4]
 81066cc:	f7fb f832 	bl	8101734 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 81066d0:	687b      	ldr	r3, [r7, #4]
 81066d2:	681b      	ldr	r3, [r3, #0]
 81066d4:	691b      	ldr	r3, [r3, #16]
 81066d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81066da:	2b80      	cmp	r3, #128	; 0x80
 81066dc:	d10e      	bne.n	81066fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 81066de:	687b      	ldr	r3, [r7, #4]
 81066e0:	681b      	ldr	r3, [r3, #0]
 81066e2:	68db      	ldr	r3, [r3, #12]
 81066e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81066e8:	2b80      	cmp	r3, #128	; 0x80
 81066ea:	d107      	bne.n	81066fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 81066ec:	687b      	ldr	r3, [r7, #4]
 81066ee:	681b      	ldr	r3, [r3, #0]
 81066f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 81066f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 81066f6:	6878      	ldr	r0, [r7, #4]
 81066f8:	f000 f914 	bl	8106924 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 81066fc:	687b      	ldr	r3, [r7, #4]
 81066fe:	681b      	ldr	r3, [r3, #0]
 8106700:	691b      	ldr	r3, [r3, #16]
 8106702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810670a:	d10e      	bne.n	810672a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 810670c:	687b      	ldr	r3, [r7, #4]
 810670e:	681b      	ldr	r3, [r3, #0]
 8106710:	68db      	ldr	r3, [r3, #12]
 8106712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8106716:	2b80      	cmp	r3, #128	; 0x80
 8106718:	d107      	bne.n	810672a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 810671a:	687b      	ldr	r3, [r7, #4]
 810671c:	681b      	ldr	r3, [r3, #0]
 810671e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8106722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8106724:	6878      	ldr	r0, [r7, #4]
 8106726:	f000 f907 	bl	8106938 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 810672a:	687b      	ldr	r3, [r7, #4]
 810672c:	681b      	ldr	r3, [r3, #0]
 810672e:	691b      	ldr	r3, [r3, #16]
 8106730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106734:	2b40      	cmp	r3, #64	; 0x40
 8106736:	d10e      	bne.n	8106756 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8106738:	687b      	ldr	r3, [r7, #4]
 810673a:	681b      	ldr	r3, [r3, #0]
 810673c:	68db      	ldr	r3, [r3, #12]
 810673e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106742:	2b40      	cmp	r3, #64	; 0x40
 8106744:	d107      	bne.n	8106756 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8106746:	687b      	ldr	r3, [r7, #4]
 8106748:	681b      	ldr	r3, [r3, #0]
 810674a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 810674e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8106750:	6878      	ldr	r0, [r7, #4]
 8106752:	f000 f838 	bl	81067c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8106756:	687b      	ldr	r3, [r7, #4]
 8106758:	681b      	ldr	r3, [r3, #0]
 810675a:	691b      	ldr	r3, [r3, #16]
 810675c:	f003 0320 	and.w	r3, r3, #32
 8106760:	2b20      	cmp	r3, #32
 8106762:	d10e      	bne.n	8106782 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8106764:	687b      	ldr	r3, [r7, #4]
 8106766:	681b      	ldr	r3, [r3, #0]
 8106768:	68db      	ldr	r3, [r3, #12]
 810676a:	f003 0320 	and.w	r3, r3, #32
 810676e:	2b20      	cmp	r3, #32
 8106770:	d107      	bne.n	8106782 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8106772:	687b      	ldr	r3, [r7, #4]
 8106774:	681b      	ldr	r3, [r3, #0]
 8106776:	f06f 0220 	mvn.w	r2, #32
 810677a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 810677c:	6878      	ldr	r0, [r7, #4]
 810677e:	f000 f8c7 	bl	8106910 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8106782:	bf00      	nop
 8106784:	3708      	adds	r7, #8
 8106786:	46bd      	mov	sp, r7
 8106788:	bd80      	pop	{r7, pc}

0810678a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 810678a:	b480      	push	{r7}
 810678c:	b083      	sub	sp, #12
 810678e:	af00      	add	r7, sp, #0
 8106790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8106792:	bf00      	nop
 8106794:	370c      	adds	r7, #12
 8106796:	46bd      	mov	sp, r7
 8106798:	f85d 7b04 	ldr.w	r7, [sp], #4
 810679c:	4770      	bx	lr

0810679e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 810679e:	b480      	push	{r7}
 81067a0:	b083      	sub	sp, #12
 81067a2:	af00      	add	r7, sp, #0
 81067a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 81067a6:	bf00      	nop
 81067a8:	370c      	adds	r7, #12
 81067aa:	46bd      	mov	sp, r7
 81067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067b0:	4770      	bx	lr

081067b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 81067b2:	b480      	push	{r7}
 81067b4:	b083      	sub	sp, #12
 81067b6:	af00      	add	r7, sp, #0
 81067b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 81067ba:	bf00      	nop
 81067bc:	370c      	adds	r7, #12
 81067be:	46bd      	mov	sp, r7
 81067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067c4:	4770      	bx	lr

081067c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 81067c6:	b480      	push	{r7}
 81067c8:	b083      	sub	sp, #12
 81067ca:	af00      	add	r7, sp, #0
 81067cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 81067ce:	bf00      	nop
 81067d0:	370c      	adds	r7, #12
 81067d2:	46bd      	mov	sp, r7
 81067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067d8:	4770      	bx	lr
	...

081067dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 81067dc:	b480      	push	{r7}
 81067de:	b085      	sub	sp, #20
 81067e0:	af00      	add	r7, sp, #0
 81067e2:	6078      	str	r0, [r7, #4]
 81067e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 81067e6:	687b      	ldr	r3, [r7, #4]
 81067e8:	681b      	ldr	r3, [r3, #0]
 81067ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 81067ec:	687b      	ldr	r3, [r7, #4]
 81067ee:	4a40      	ldr	r2, [pc, #256]	; (81068f0 <TIM_Base_SetConfig+0x114>)
 81067f0:	4293      	cmp	r3, r2
 81067f2:	d013      	beq.n	810681c <TIM_Base_SetConfig+0x40>
 81067f4:	687b      	ldr	r3, [r7, #4]
 81067f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81067fa:	d00f      	beq.n	810681c <TIM_Base_SetConfig+0x40>
 81067fc:	687b      	ldr	r3, [r7, #4]
 81067fe:	4a3d      	ldr	r2, [pc, #244]	; (81068f4 <TIM_Base_SetConfig+0x118>)
 8106800:	4293      	cmp	r3, r2
 8106802:	d00b      	beq.n	810681c <TIM_Base_SetConfig+0x40>
 8106804:	687b      	ldr	r3, [r7, #4]
 8106806:	4a3c      	ldr	r2, [pc, #240]	; (81068f8 <TIM_Base_SetConfig+0x11c>)
 8106808:	4293      	cmp	r3, r2
 810680a:	d007      	beq.n	810681c <TIM_Base_SetConfig+0x40>
 810680c:	687b      	ldr	r3, [r7, #4]
 810680e:	4a3b      	ldr	r2, [pc, #236]	; (81068fc <TIM_Base_SetConfig+0x120>)
 8106810:	4293      	cmp	r3, r2
 8106812:	d003      	beq.n	810681c <TIM_Base_SetConfig+0x40>
 8106814:	687b      	ldr	r3, [r7, #4]
 8106816:	4a3a      	ldr	r2, [pc, #232]	; (8106900 <TIM_Base_SetConfig+0x124>)
 8106818:	4293      	cmp	r3, r2
 810681a:	d108      	bne.n	810682e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810681c:	68fb      	ldr	r3, [r7, #12]
 810681e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8106822:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8106824:	683b      	ldr	r3, [r7, #0]
 8106826:	685b      	ldr	r3, [r3, #4]
 8106828:	68fa      	ldr	r2, [r7, #12]
 810682a:	4313      	orrs	r3, r2
 810682c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810682e:	687b      	ldr	r3, [r7, #4]
 8106830:	4a2f      	ldr	r2, [pc, #188]	; (81068f0 <TIM_Base_SetConfig+0x114>)
 8106832:	4293      	cmp	r3, r2
 8106834:	d01f      	beq.n	8106876 <TIM_Base_SetConfig+0x9a>
 8106836:	687b      	ldr	r3, [r7, #4]
 8106838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810683c:	d01b      	beq.n	8106876 <TIM_Base_SetConfig+0x9a>
 810683e:	687b      	ldr	r3, [r7, #4]
 8106840:	4a2c      	ldr	r2, [pc, #176]	; (81068f4 <TIM_Base_SetConfig+0x118>)
 8106842:	4293      	cmp	r3, r2
 8106844:	d017      	beq.n	8106876 <TIM_Base_SetConfig+0x9a>
 8106846:	687b      	ldr	r3, [r7, #4]
 8106848:	4a2b      	ldr	r2, [pc, #172]	; (81068f8 <TIM_Base_SetConfig+0x11c>)
 810684a:	4293      	cmp	r3, r2
 810684c:	d013      	beq.n	8106876 <TIM_Base_SetConfig+0x9a>
 810684e:	687b      	ldr	r3, [r7, #4]
 8106850:	4a2a      	ldr	r2, [pc, #168]	; (81068fc <TIM_Base_SetConfig+0x120>)
 8106852:	4293      	cmp	r3, r2
 8106854:	d00f      	beq.n	8106876 <TIM_Base_SetConfig+0x9a>
 8106856:	687b      	ldr	r3, [r7, #4]
 8106858:	4a29      	ldr	r2, [pc, #164]	; (8106900 <TIM_Base_SetConfig+0x124>)
 810685a:	4293      	cmp	r3, r2
 810685c:	d00b      	beq.n	8106876 <TIM_Base_SetConfig+0x9a>
 810685e:	687b      	ldr	r3, [r7, #4]
 8106860:	4a28      	ldr	r2, [pc, #160]	; (8106904 <TIM_Base_SetConfig+0x128>)
 8106862:	4293      	cmp	r3, r2
 8106864:	d007      	beq.n	8106876 <TIM_Base_SetConfig+0x9a>
 8106866:	687b      	ldr	r3, [r7, #4]
 8106868:	4a27      	ldr	r2, [pc, #156]	; (8106908 <TIM_Base_SetConfig+0x12c>)
 810686a:	4293      	cmp	r3, r2
 810686c:	d003      	beq.n	8106876 <TIM_Base_SetConfig+0x9a>
 810686e:	687b      	ldr	r3, [r7, #4]
 8106870:	4a26      	ldr	r2, [pc, #152]	; (810690c <TIM_Base_SetConfig+0x130>)
 8106872:	4293      	cmp	r3, r2
 8106874:	d108      	bne.n	8106888 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8106876:	68fb      	ldr	r3, [r7, #12]
 8106878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810687c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810687e:	683b      	ldr	r3, [r7, #0]
 8106880:	68db      	ldr	r3, [r3, #12]
 8106882:	68fa      	ldr	r2, [r7, #12]
 8106884:	4313      	orrs	r3, r2
 8106886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8106888:	68fb      	ldr	r3, [r7, #12]
 810688a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 810688e:	683b      	ldr	r3, [r7, #0]
 8106890:	695b      	ldr	r3, [r3, #20]
 8106892:	4313      	orrs	r3, r2
 8106894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8106896:	687b      	ldr	r3, [r7, #4]
 8106898:	68fa      	ldr	r2, [r7, #12]
 810689a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810689c:	683b      	ldr	r3, [r7, #0]
 810689e:	689a      	ldr	r2, [r3, #8]
 81068a0:	687b      	ldr	r3, [r7, #4]
 81068a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 81068a4:	683b      	ldr	r3, [r7, #0]
 81068a6:	681a      	ldr	r2, [r3, #0]
 81068a8:	687b      	ldr	r3, [r7, #4]
 81068aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 81068ac:	687b      	ldr	r3, [r7, #4]
 81068ae:	4a10      	ldr	r2, [pc, #64]	; (81068f0 <TIM_Base_SetConfig+0x114>)
 81068b0:	4293      	cmp	r3, r2
 81068b2:	d00f      	beq.n	81068d4 <TIM_Base_SetConfig+0xf8>
 81068b4:	687b      	ldr	r3, [r7, #4]
 81068b6:	4a12      	ldr	r2, [pc, #72]	; (8106900 <TIM_Base_SetConfig+0x124>)
 81068b8:	4293      	cmp	r3, r2
 81068ba:	d00b      	beq.n	81068d4 <TIM_Base_SetConfig+0xf8>
 81068bc:	687b      	ldr	r3, [r7, #4]
 81068be:	4a11      	ldr	r2, [pc, #68]	; (8106904 <TIM_Base_SetConfig+0x128>)
 81068c0:	4293      	cmp	r3, r2
 81068c2:	d007      	beq.n	81068d4 <TIM_Base_SetConfig+0xf8>
 81068c4:	687b      	ldr	r3, [r7, #4]
 81068c6:	4a10      	ldr	r2, [pc, #64]	; (8106908 <TIM_Base_SetConfig+0x12c>)
 81068c8:	4293      	cmp	r3, r2
 81068ca:	d003      	beq.n	81068d4 <TIM_Base_SetConfig+0xf8>
 81068cc:	687b      	ldr	r3, [r7, #4]
 81068ce:	4a0f      	ldr	r2, [pc, #60]	; (810690c <TIM_Base_SetConfig+0x130>)
 81068d0:	4293      	cmp	r3, r2
 81068d2:	d103      	bne.n	81068dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 81068d4:	683b      	ldr	r3, [r7, #0]
 81068d6:	691a      	ldr	r2, [r3, #16]
 81068d8:	687b      	ldr	r3, [r7, #4]
 81068da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 81068dc:	687b      	ldr	r3, [r7, #4]
 81068de:	2201      	movs	r2, #1
 81068e0:	615a      	str	r2, [r3, #20]
}
 81068e2:	bf00      	nop
 81068e4:	3714      	adds	r7, #20
 81068e6:	46bd      	mov	sp, r7
 81068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81068ec:	4770      	bx	lr
 81068ee:	bf00      	nop
 81068f0:	40010000 	.word	0x40010000
 81068f4:	40000400 	.word	0x40000400
 81068f8:	40000800 	.word	0x40000800
 81068fc:	40000c00 	.word	0x40000c00
 8106900:	40010400 	.word	0x40010400
 8106904:	40014000 	.word	0x40014000
 8106908:	40014400 	.word	0x40014400
 810690c:	40014800 	.word	0x40014800

08106910 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8106910:	b480      	push	{r7}
 8106912:	b083      	sub	sp, #12
 8106914:	af00      	add	r7, sp, #0
 8106916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8106918:	bf00      	nop
 810691a:	370c      	adds	r7, #12
 810691c:	46bd      	mov	sp, r7
 810691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106922:	4770      	bx	lr

08106924 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8106924:	b480      	push	{r7}
 8106926:	b083      	sub	sp, #12
 8106928:	af00      	add	r7, sp, #0
 810692a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 810692c:	bf00      	nop
 810692e:	370c      	adds	r7, #12
 8106930:	46bd      	mov	sp, r7
 8106932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106936:	4770      	bx	lr

08106938 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8106938:	b480      	push	{r7}
 810693a:	b083      	sub	sp, #12
 810693c:	af00      	add	r7, sp, #0
 810693e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8106940:	bf00      	nop
 8106942:	370c      	adds	r7, #12
 8106944:	46bd      	mov	sp, r7
 8106946:	f85d 7b04 	ldr.w	r7, [sp], #4
 810694a:	4770      	bx	lr

0810694c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810694c:	b580      	push	{r7, lr}
 810694e:	b082      	sub	sp, #8
 8106950:	af00      	add	r7, sp, #0
 8106952:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8106954:	687b      	ldr	r3, [r7, #4]
 8106956:	2b00      	cmp	r3, #0
 8106958:	d101      	bne.n	810695e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810695a:	2301      	movs	r3, #1
 810695c:	e042      	b.n	81069e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810695e:	687b      	ldr	r3, [r7, #4]
 8106960:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8106964:	2b00      	cmp	r3, #0
 8106966:	d106      	bne.n	8106976 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8106968:	687b      	ldr	r3, [r7, #4]
 810696a:	2200      	movs	r2, #0
 810696c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8106970:	6878      	ldr	r0, [r7, #4]
 8106972:	f7fb fad7 	bl	8101f24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8106976:	687b      	ldr	r3, [r7, #4]
 8106978:	2224      	movs	r2, #36	; 0x24
 810697a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 810697e:	687b      	ldr	r3, [r7, #4]
 8106980:	681b      	ldr	r3, [r3, #0]
 8106982:	681a      	ldr	r2, [r3, #0]
 8106984:	687b      	ldr	r3, [r7, #4]
 8106986:	681b      	ldr	r3, [r3, #0]
 8106988:	f022 0201 	bic.w	r2, r2, #1
 810698c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810698e:	6878      	ldr	r0, [r7, #4]
 8106990:	f000 f968 	bl	8106c64 <UART_SetConfig>
 8106994:	4603      	mov	r3, r0
 8106996:	2b01      	cmp	r3, #1
 8106998:	d101      	bne.n	810699e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 810699a:	2301      	movs	r3, #1
 810699c:	e022      	b.n	81069e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810699e:	687b      	ldr	r3, [r7, #4]
 81069a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81069a2:	2b00      	cmp	r3, #0
 81069a4:	d002      	beq.n	81069ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 81069a6:	6878      	ldr	r0, [r7, #4]
 81069a8:	f000 ff0c 	bl	81077c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 81069ac:	687b      	ldr	r3, [r7, #4]
 81069ae:	681b      	ldr	r3, [r3, #0]
 81069b0:	685a      	ldr	r2, [r3, #4]
 81069b2:	687b      	ldr	r3, [r7, #4]
 81069b4:	681b      	ldr	r3, [r3, #0]
 81069b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 81069ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 81069bc:	687b      	ldr	r3, [r7, #4]
 81069be:	681b      	ldr	r3, [r3, #0]
 81069c0:	689a      	ldr	r2, [r3, #8]
 81069c2:	687b      	ldr	r3, [r7, #4]
 81069c4:	681b      	ldr	r3, [r3, #0]
 81069c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 81069ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 81069cc:	687b      	ldr	r3, [r7, #4]
 81069ce:	681b      	ldr	r3, [r3, #0]
 81069d0:	681a      	ldr	r2, [r3, #0]
 81069d2:	687b      	ldr	r3, [r7, #4]
 81069d4:	681b      	ldr	r3, [r3, #0]
 81069d6:	f042 0201 	orr.w	r2, r2, #1
 81069da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 81069dc:	6878      	ldr	r0, [r7, #4]
 81069de:	f000 ff93 	bl	8107908 <UART_CheckIdleState>
 81069e2:	4603      	mov	r3, r0
}
 81069e4:	4618      	mov	r0, r3
 81069e6:	3708      	adds	r7, #8
 81069e8:	46bd      	mov	sp, r7
 81069ea:	bd80      	pop	{r7, pc}

081069ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81069ec:	b580      	push	{r7, lr}
 81069ee:	b08a      	sub	sp, #40	; 0x28
 81069f0:	af02      	add	r7, sp, #8
 81069f2:	60f8      	str	r0, [r7, #12]
 81069f4:	60b9      	str	r1, [r7, #8]
 81069f6:	603b      	str	r3, [r7, #0]
 81069f8:	4613      	mov	r3, r2
 81069fa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 81069fc:	68fb      	ldr	r3, [r7, #12]
 81069fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8106a02:	2b20      	cmp	r3, #32
 8106a04:	f040 8083 	bne.w	8106b0e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8106a08:	68bb      	ldr	r3, [r7, #8]
 8106a0a:	2b00      	cmp	r3, #0
 8106a0c:	d002      	beq.n	8106a14 <HAL_UART_Transmit+0x28>
 8106a0e:	88fb      	ldrh	r3, [r7, #6]
 8106a10:	2b00      	cmp	r3, #0
 8106a12:	d101      	bne.n	8106a18 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8106a14:	2301      	movs	r3, #1
 8106a16:	e07b      	b.n	8106b10 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8106a18:	68fb      	ldr	r3, [r7, #12]
 8106a1a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8106a1e:	2b01      	cmp	r3, #1
 8106a20:	d101      	bne.n	8106a26 <HAL_UART_Transmit+0x3a>
 8106a22:	2302      	movs	r3, #2
 8106a24:	e074      	b.n	8106b10 <HAL_UART_Transmit+0x124>
 8106a26:	68fb      	ldr	r3, [r7, #12]
 8106a28:	2201      	movs	r2, #1
 8106a2a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8106a2e:	68fb      	ldr	r3, [r7, #12]
 8106a30:	2200      	movs	r2, #0
 8106a32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8106a36:	68fb      	ldr	r3, [r7, #12]
 8106a38:	2221      	movs	r2, #33	; 0x21
 8106a3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8106a3e:	f7fb fbbd 	bl	81021bc <HAL_GetTick>
 8106a42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8106a44:	68fb      	ldr	r3, [r7, #12]
 8106a46:	88fa      	ldrh	r2, [r7, #6]
 8106a48:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8106a4c:	68fb      	ldr	r3, [r7, #12]
 8106a4e:	88fa      	ldrh	r2, [r7, #6]
 8106a50:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8106a54:	68fb      	ldr	r3, [r7, #12]
 8106a56:	689b      	ldr	r3, [r3, #8]
 8106a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106a5c:	d108      	bne.n	8106a70 <HAL_UART_Transmit+0x84>
 8106a5e:	68fb      	ldr	r3, [r7, #12]
 8106a60:	691b      	ldr	r3, [r3, #16]
 8106a62:	2b00      	cmp	r3, #0
 8106a64:	d104      	bne.n	8106a70 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8106a66:	2300      	movs	r3, #0
 8106a68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8106a6a:	68bb      	ldr	r3, [r7, #8]
 8106a6c:	61bb      	str	r3, [r7, #24]
 8106a6e:	e003      	b.n	8106a78 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8106a70:	68bb      	ldr	r3, [r7, #8]
 8106a72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8106a74:	2300      	movs	r3, #0
 8106a76:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8106a78:	68fb      	ldr	r3, [r7, #12]
 8106a7a:	2200      	movs	r2, #0
 8106a7c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8106a80:	e02c      	b.n	8106adc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8106a82:	683b      	ldr	r3, [r7, #0]
 8106a84:	9300      	str	r3, [sp, #0]
 8106a86:	697b      	ldr	r3, [r7, #20]
 8106a88:	2200      	movs	r2, #0
 8106a8a:	2180      	movs	r1, #128	; 0x80
 8106a8c:	68f8      	ldr	r0, [r7, #12]
 8106a8e:	f000 ff83 	bl	8107998 <UART_WaitOnFlagUntilTimeout>
 8106a92:	4603      	mov	r3, r0
 8106a94:	2b00      	cmp	r3, #0
 8106a96:	d001      	beq.n	8106a9c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8106a98:	2303      	movs	r3, #3
 8106a9a:	e039      	b.n	8106b10 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8106a9c:	69fb      	ldr	r3, [r7, #28]
 8106a9e:	2b00      	cmp	r3, #0
 8106aa0:	d10b      	bne.n	8106aba <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8106aa2:	69bb      	ldr	r3, [r7, #24]
 8106aa4:	881b      	ldrh	r3, [r3, #0]
 8106aa6:	461a      	mov	r2, r3
 8106aa8:	68fb      	ldr	r3, [r7, #12]
 8106aaa:	681b      	ldr	r3, [r3, #0]
 8106aac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8106ab0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8106ab2:	69bb      	ldr	r3, [r7, #24]
 8106ab4:	3302      	adds	r3, #2
 8106ab6:	61bb      	str	r3, [r7, #24]
 8106ab8:	e007      	b.n	8106aca <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8106aba:	69fb      	ldr	r3, [r7, #28]
 8106abc:	781a      	ldrb	r2, [r3, #0]
 8106abe:	68fb      	ldr	r3, [r7, #12]
 8106ac0:	681b      	ldr	r3, [r3, #0]
 8106ac2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8106ac4:	69fb      	ldr	r3, [r7, #28]
 8106ac6:	3301      	adds	r3, #1
 8106ac8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8106aca:	68fb      	ldr	r3, [r7, #12]
 8106acc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8106ad0:	b29b      	uxth	r3, r3
 8106ad2:	3b01      	subs	r3, #1
 8106ad4:	b29a      	uxth	r2, r3
 8106ad6:	68fb      	ldr	r3, [r7, #12]
 8106ad8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8106adc:	68fb      	ldr	r3, [r7, #12]
 8106ade:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8106ae2:	b29b      	uxth	r3, r3
 8106ae4:	2b00      	cmp	r3, #0
 8106ae6:	d1cc      	bne.n	8106a82 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8106ae8:	683b      	ldr	r3, [r7, #0]
 8106aea:	9300      	str	r3, [sp, #0]
 8106aec:	697b      	ldr	r3, [r7, #20]
 8106aee:	2200      	movs	r2, #0
 8106af0:	2140      	movs	r1, #64	; 0x40
 8106af2:	68f8      	ldr	r0, [r7, #12]
 8106af4:	f000 ff50 	bl	8107998 <UART_WaitOnFlagUntilTimeout>
 8106af8:	4603      	mov	r3, r0
 8106afa:	2b00      	cmp	r3, #0
 8106afc:	d001      	beq.n	8106b02 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8106afe:	2303      	movs	r3, #3
 8106b00:	e006      	b.n	8106b10 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8106b02:	68fb      	ldr	r3, [r7, #12]
 8106b04:	2220      	movs	r2, #32
 8106b06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8106b0a:	2300      	movs	r3, #0
 8106b0c:	e000      	b.n	8106b10 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8106b0e:	2302      	movs	r3, #2
  }
}
 8106b10:	4618      	mov	r0, r3
 8106b12:	3720      	adds	r7, #32
 8106b14:	46bd      	mov	sp, r7
 8106b16:	bd80      	pop	{r7, pc}

08106b18 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8106b18:	b580      	push	{r7, lr}
 8106b1a:	b084      	sub	sp, #16
 8106b1c:	af00      	add	r7, sp, #0
 8106b1e:	60f8      	str	r0, [r7, #12]
 8106b20:	60b9      	str	r1, [r7, #8]
 8106b22:	4613      	mov	r3, r2
 8106b24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8106b26:	68fb      	ldr	r3, [r7, #12]
 8106b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106b2c:	2b20      	cmp	r3, #32
 8106b2e:	d170      	bne.n	8106c12 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 8106b30:	68bb      	ldr	r3, [r7, #8]
 8106b32:	2b00      	cmp	r3, #0
 8106b34:	d002      	beq.n	8106b3c <HAL_UART_Receive_DMA+0x24>
 8106b36:	88fb      	ldrh	r3, [r7, #6]
 8106b38:	2b00      	cmp	r3, #0
 8106b3a:	d101      	bne.n	8106b40 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8106b3c:	2301      	movs	r3, #1
 8106b3e:	e069      	b.n	8106c14 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 8106b40:	68fb      	ldr	r3, [r7, #12]
 8106b42:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8106b46:	2b01      	cmp	r3, #1
 8106b48:	d101      	bne.n	8106b4e <HAL_UART_Receive_DMA+0x36>
 8106b4a:	2302      	movs	r3, #2
 8106b4c:	e062      	b.n	8106c14 <HAL_UART_Receive_DMA+0xfc>
 8106b4e:	68fb      	ldr	r3, [r7, #12]
 8106b50:	2201      	movs	r2, #1
 8106b52:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 8106b56:	68fb      	ldr	r3, [r7, #12]
 8106b58:	68ba      	ldr	r2, [r7, #8]
 8106b5a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 8106b5c:	68fb      	ldr	r3, [r7, #12]
 8106b5e:	88fa      	ldrh	r2, [r7, #6]
 8106b60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8106b64:	68fb      	ldr	r3, [r7, #12]
 8106b66:	2200      	movs	r2, #0
 8106b68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8106b6c:	68fb      	ldr	r3, [r7, #12]
 8106b6e:	2222      	movs	r2, #34	; 0x22
 8106b70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8106b74:	68fb      	ldr	r3, [r7, #12]
 8106b76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106b78:	2b00      	cmp	r3, #0
 8106b7a:	d02c      	beq.n	8106bd6 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8106b7c:	68fb      	ldr	r3, [r7, #12]
 8106b7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106b80:	4a26      	ldr	r2, [pc, #152]	; (8106c1c <HAL_UART_Receive_DMA+0x104>)
 8106b82:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8106b84:	68fb      	ldr	r3, [r7, #12]
 8106b86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106b88:	4a25      	ldr	r2, [pc, #148]	; (8106c20 <HAL_UART_Receive_DMA+0x108>)
 8106b8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8106b8c:	68fb      	ldr	r3, [r7, #12]
 8106b8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106b90:	4a24      	ldr	r2, [pc, #144]	; (8106c24 <HAL_UART_Receive_DMA+0x10c>)
 8106b92:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8106b94:	68fb      	ldr	r3, [r7, #12]
 8106b96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106b98:	2200      	movs	r2, #0
 8106b9a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8106b9c:	68fb      	ldr	r3, [r7, #12]
 8106b9e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8106ba0:	68fb      	ldr	r3, [r7, #12]
 8106ba2:	681b      	ldr	r3, [r3, #0]
 8106ba4:	3324      	adds	r3, #36	; 0x24
 8106ba6:	4619      	mov	r1, r3
 8106ba8:	68fb      	ldr	r3, [r7, #12]
 8106baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106bac:	461a      	mov	r2, r3
 8106bae:	88fb      	ldrh	r3, [r7, #6]
 8106bb0:	f7fb ff78 	bl	8102aa4 <HAL_DMA_Start_IT>
 8106bb4:	4603      	mov	r3, r0
 8106bb6:	2b00      	cmp	r3, #0
 8106bb8:	d00d      	beq.n	8106bd6 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8106bba:	68fb      	ldr	r3, [r7, #12]
 8106bbc:	2210      	movs	r2, #16
 8106bbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8106bc2:	68fb      	ldr	r3, [r7, #12]
 8106bc4:	2200      	movs	r2, #0
 8106bc6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8106bca:	68fb      	ldr	r3, [r7, #12]
 8106bcc:	2220      	movs	r2, #32
 8106bce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8106bd2:	2301      	movs	r3, #1
 8106bd4:	e01e      	b.n	8106c14 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 8106bd6:	68fb      	ldr	r3, [r7, #12]
 8106bd8:	2200      	movs	r2, #0
 8106bda:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8106bde:	68fb      	ldr	r3, [r7, #12]
 8106be0:	681b      	ldr	r3, [r3, #0]
 8106be2:	681a      	ldr	r2, [r3, #0]
 8106be4:	68fb      	ldr	r3, [r7, #12]
 8106be6:	681b      	ldr	r3, [r3, #0]
 8106be8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8106bec:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8106bee:	68fb      	ldr	r3, [r7, #12]
 8106bf0:	681b      	ldr	r3, [r3, #0]
 8106bf2:	689a      	ldr	r2, [r3, #8]
 8106bf4:	68fb      	ldr	r3, [r7, #12]
 8106bf6:	681b      	ldr	r3, [r3, #0]
 8106bf8:	f042 0201 	orr.w	r2, r2, #1
 8106bfc:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8106bfe:	68fb      	ldr	r3, [r7, #12]
 8106c00:	681b      	ldr	r3, [r3, #0]
 8106c02:	689a      	ldr	r2, [r3, #8]
 8106c04:	68fb      	ldr	r3, [r7, #12]
 8106c06:	681b      	ldr	r3, [r3, #0]
 8106c08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8106c0c:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8106c0e:	2300      	movs	r3, #0
 8106c10:	e000      	b.n	8106c14 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 8106c12:	2302      	movs	r3, #2
  }
}
 8106c14:	4618      	mov	r0, r3
 8106c16:	3710      	adds	r7, #16
 8106c18:	46bd      	mov	sp, r7
 8106c1a:	bd80      	pop	{r7, pc}
 8106c1c:	08107b1b 	.word	0x08107b1b
 8106c20:	08107b81 	.word	0x08107b81
 8106c24:	08107b9d 	.word	0x08107b9d

08106c28 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8106c28:	b480      	push	{r7}
 8106c2a:	b083      	sub	sp, #12
 8106c2c:	af00      	add	r7, sp, #0
 8106c2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8106c30:	bf00      	nop
 8106c32:	370c      	adds	r7, #12
 8106c34:	46bd      	mov	sp, r7
 8106c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c3a:	4770      	bx	lr

08106c3c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8106c3c:	b480      	push	{r7}
 8106c3e:	b083      	sub	sp, #12
 8106c40:	af00      	add	r7, sp, #0
 8106c42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8106c44:	bf00      	nop
 8106c46:	370c      	adds	r7, #12
 8106c48:	46bd      	mov	sp, r7
 8106c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c4e:	4770      	bx	lr

08106c50 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8106c50:	b480      	push	{r7}
 8106c52:	b083      	sub	sp, #12
 8106c54:	af00      	add	r7, sp, #0
 8106c56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8106c58:	bf00      	nop
 8106c5a:	370c      	adds	r7, #12
 8106c5c:	46bd      	mov	sp, r7
 8106c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c62:	4770      	bx	lr

08106c64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8106c64:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8106c68:	b08e      	sub	sp, #56	; 0x38
 8106c6a:	af00      	add	r7, sp, #0
 8106c6c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8106c6e:	2300      	movs	r3, #0
 8106c70:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8106c74:	687b      	ldr	r3, [r7, #4]
 8106c76:	689a      	ldr	r2, [r3, #8]
 8106c78:	687b      	ldr	r3, [r7, #4]
 8106c7a:	691b      	ldr	r3, [r3, #16]
 8106c7c:	431a      	orrs	r2, r3
 8106c7e:	687b      	ldr	r3, [r7, #4]
 8106c80:	695b      	ldr	r3, [r3, #20]
 8106c82:	431a      	orrs	r2, r3
 8106c84:	687b      	ldr	r3, [r7, #4]
 8106c86:	69db      	ldr	r3, [r3, #28]
 8106c88:	4313      	orrs	r3, r2
 8106c8a:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8106c8c:	687b      	ldr	r3, [r7, #4]
 8106c8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106c90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8106c92:	4313      	orrs	r3, r2
 8106c94:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8106c96:	687b      	ldr	r3, [r7, #4]
 8106c98:	681b      	ldr	r3, [r3, #0]
 8106c9a:	681a      	ldr	r2, [r3, #0]
 8106c9c:	4bc2      	ldr	r3, [pc, #776]	; (8106fa8 <UART_SetConfig+0x344>)
 8106c9e:	4013      	ands	r3, r2
 8106ca0:	687a      	ldr	r2, [r7, #4]
 8106ca2:	6812      	ldr	r2, [r2, #0]
 8106ca4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8106ca6:	430b      	orrs	r3, r1
 8106ca8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8106caa:	687b      	ldr	r3, [r7, #4]
 8106cac:	681b      	ldr	r3, [r3, #0]
 8106cae:	685b      	ldr	r3, [r3, #4]
 8106cb0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8106cb4:	687b      	ldr	r3, [r7, #4]
 8106cb6:	68da      	ldr	r2, [r3, #12]
 8106cb8:	687b      	ldr	r3, [r7, #4]
 8106cba:	681b      	ldr	r3, [r3, #0]
 8106cbc:	430a      	orrs	r2, r1
 8106cbe:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8106cc0:	687b      	ldr	r3, [r7, #4]
 8106cc2:	699b      	ldr	r3, [r3, #24]
 8106cc4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8106cc6:	687b      	ldr	r3, [r7, #4]
 8106cc8:	681b      	ldr	r3, [r3, #0]
 8106cca:	4ab8      	ldr	r2, [pc, #736]	; (8106fac <UART_SetConfig+0x348>)
 8106ccc:	4293      	cmp	r3, r2
 8106cce:	d004      	beq.n	8106cda <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8106cd0:	687b      	ldr	r3, [r7, #4]
 8106cd2:	6a1b      	ldr	r3, [r3, #32]
 8106cd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8106cd6:	4313      	orrs	r3, r2
 8106cd8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8106cda:	687b      	ldr	r3, [r7, #4]
 8106cdc:	681b      	ldr	r3, [r3, #0]
 8106cde:	689b      	ldr	r3, [r3, #8]
 8106ce0:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8106ce4:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8106ce8:	687a      	ldr	r2, [r7, #4]
 8106cea:	6812      	ldr	r2, [r2, #0]
 8106cec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8106cee:	430b      	orrs	r3, r1
 8106cf0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8106cf2:	687b      	ldr	r3, [r7, #4]
 8106cf4:	681b      	ldr	r3, [r3, #0]
 8106cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106cf8:	f023 010f 	bic.w	r1, r3, #15
 8106cfc:	687b      	ldr	r3, [r7, #4]
 8106cfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8106d00:	687b      	ldr	r3, [r7, #4]
 8106d02:	681b      	ldr	r3, [r3, #0]
 8106d04:	430a      	orrs	r2, r1
 8106d06:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8106d08:	687b      	ldr	r3, [r7, #4]
 8106d0a:	681b      	ldr	r3, [r3, #0]
 8106d0c:	4aa8      	ldr	r2, [pc, #672]	; (8106fb0 <UART_SetConfig+0x34c>)
 8106d0e:	4293      	cmp	r3, r2
 8106d10:	d177      	bne.n	8106e02 <UART_SetConfig+0x19e>
 8106d12:	4ba8      	ldr	r3, [pc, #672]	; (8106fb4 <UART_SetConfig+0x350>)
 8106d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106d16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8106d1a:	2b28      	cmp	r3, #40	; 0x28
 8106d1c:	d86c      	bhi.n	8106df8 <UART_SetConfig+0x194>
 8106d1e:	a201      	add	r2, pc, #4	; (adr r2, 8106d24 <UART_SetConfig+0xc0>)
 8106d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106d24:	08106dc9 	.word	0x08106dc9
 8106d28:	08106df9 	.word	0x08106df9
 8106d2c:	08106df9 	.word	0x08106df9
 8106d30:	08106df9 	.word	0x08106df9
 8106d34:	08106df9 	.word	0x08106df9
 8106d38:	08106df9 	.word	0x08106df9
 8106d3c:	08106df9 	.word	0x08106df9
 8106d40:	08106df9 	.word	0x08106df9
 8106d44:	08106dd1 	.word	0x08106dd1
 8106d48:	08106df9 	.word	0x08106df9
 8106d4c:	08106df9 	.word	0x08106df9
 8106d50:	08106df9 	.word	0x08106df9
 8106d54:	08106df9 	.word	0x08106df9
 8106d58:	08106df9 	.word	0x08106df9
 8106d5c:	08106df9 	.word	0x08106df9
 8106d60:	08106df9 	.word	0x08106df9
 8106d64:	08106dd9 	.word	0x08106dd9
 8106d68:	08106df9 	.word	0x08106df9
 8106d6c:	08106df9 	.word	0x08106df9
 8106d70:	08106df9 	.word	0x08106df9
 8106d74:	08106df9 	.word	0x08106df9
 8106d78:	08106df9 	.word	0x08106df9
 8106d7c:	08106df9 	.word	0x08106df9
 8106d80:	08106df9 	.word	0x08106df9
 8106d84:	08106de1 	.word	0x08106de1
 8106d88:	08106df9 	.word	0x08106df9
 8106d8c:	08106df9 	.word	0x08106df9
 8106d90:	08106df9 	.word	0x08106df9
 8106d94:	08106df9 	.word	0x08106df9
 8106d98:	08106df9 	.word	0x08106df9
 8106d9c:	08106df9 	.word	0x08106df9
 8106da0:	08106df9 	.word	0x08106df9
 8106da4:	08106de9 	.word	0x08106de9
 8106da8:	08106df9 	.word	0x08106df9
 8106dac:	08106df9 	.word	0x08106df9
 8106db0:	08106df9 	.word	0x08106df9
 8106db4:	08106df9 	.word	0x08106df9
 8106db8:	08106df9 	.word	0x08106df9
 8106dbc:	08106df9 	.word	0x08106df9
 8106dc0:	08106df9 	.word	0x08106df9
 8106dc4:	08106df1 	.word	0x08106df1
 8106dc8:	2301      	movs	r3, #1
 8106dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106dce:	e231      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106dd0:	2304      	movs	r3, #4
 8106dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106dd6:	e22d      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106dd8:	2308      	movs	r3, #8
 8106dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106dde:	e229      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106de0:	2310      	movs	r3, #16
 8106de2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106de6:	e225      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106de8:	2320      	movs	r3, #32
 8106dea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106dee:	e221      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106df0:	2340      	movs	r3, #64	; 0x40
 8106df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106df6:	e21d      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106df8:	2380      	movs	r3, #128	; 0x80
 8106dfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106dfe:	bf00      	nop
 8106e00:	e218      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106e02:	687b      	ldr	r3, [r7, #4]
 8106e04:	681b      	ldr	r3, [r3, #0]
 8106e06:	4a6c      	ldr	r2, [pc, #432]	; (8106fb8 <UART_SetConfig+0x354>)
 8106e08:	4293      	cmp	r3, r2
 8106e0a:	d132      	bne.n	8106e72 <UART_SetConfig+0x20e>
 8106e0c:	4b69      	ldr	r3, [pc, #420]	; (8106fb4 <UART_SetConfig+0x350>)
 8106e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106e10:	f003 0307 	and.w	r3, r3, #7
 8106e14:	2b05      	cmp	r3, #5
 8106e16:	d827      	bhi.n	8106e68 <UART_SetConfig+0x204>
 8106e18:	a201      	add	r2, pc, #4	; (adr r2, 8106e20 <UART_SetConfig+0x1bc>)
 8106e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106e1e:	bf00      	nop
 8106e20:	08106e39 	.word	0x08106e39
 8106e24:	08106e41 	.word	0x08106e41
 8106e28:	08106e49 	.word	0x08106e49
 8106e2c:	08106e51 	.word	0x08106e51
 8106e30:	08106e59 	.word	0x08106e59
 8106e34:	08106e61 	.word	0x08106e61
 8106e38:	2300      	movs	r3, #0
 8106e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106e3e:	e1f9      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106e40:	2304      	movs	r3, #4
 8106e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106e46:	e1f5      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106e48:	2308      	movs	r3, #8
 8106e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106e4e:	e1f1      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106e50:	2310      	movs	r3, #16
 8106e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106e56:	e1ed      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106e58:	2320      	movs	r3, #32
 8106e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106e5e:	e1e9      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106e60:	2340      	movs	r3, #64	; 0x40
 8106e62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106e66:	e1e5      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106e68:	2380      	movs	r3, #128	; 0x80
 8106e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106e6e:	bf00      	nop
 8106e70:	e1e0      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106e72:	687b      	ldr	r3, [r7, #4]
 8106e74:	681b      	ldr	r3, [r3, #0]
 8106e76:	4a51      	ldr	r2, [pc, #324]	; (8106fbc <UART_SetConfig+0x358>)
 8106e78:	4293      	cmp	r3, r2
 8106e7a:	d132      	bne.n	8106ee2 <UART_SetConfig+0x27e>
 8106e7c:	4b4d      	ldr	r3, [pc, #308]	; (8106fb4 <UART_SetConfig+0x350>)
 8106e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106e80:	f003 0307 	and.w	r3, r3, #7
 8106e84:	2b05      	cmp	r3, #5
 8106e86:	d827      	bhi.n	8106ed8 <UART_SetConfig+0x274>
 8106e88:	a201      	add	r2, pc, #4	; (adr r2, 8106e90 <UART_SetConfig+0x22c>)
 8106e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106e8e:	bf00      	nop
 8106e90:	08106ea9 	.word	0x08106ea9
 8106e94:	08106eb1 	.word	0x08106eb1
 8106e98:	08106eb9 	.word	0x08106eb9
 8106e9c:	08106ec1 	.word	0x08106ec1
 8106ea0:	08106ec9 	.word	0x08106ec9
 8106ea4:	08106ed1 	.word	0x08106ed1
 8106ea8:	2300      	movs	r3, #0
 8106eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106eae:	e1c1      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106eb0:	2304      	movs	r3, #4
 8106eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106eb6:	e1bd      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106eb8:	2308      	movs	r3, #8
 8106eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106ebe:	e1b9      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106ec0:	2310      	movs	r3, #16
 8106ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106ec6:	e1b5      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106ec8:	2320      	movs	r3, #32
 8106eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106ece:	e1b1      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106ed0:	2340      	movs	r3, #64	; 0x40
 8106ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106ed6:	e1ad      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106ed8:	2380      	movs	r3, #128	; 0x80
 8106eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106ede:	bf00      	nop
 8106ee0:	e1a8      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106ee2:	687b      	ldr	r3, [r7, #4]
 8106ee4:	681b      	ldr	r3, [r3, #0]
 8106ee6:	4a36      	ldr	r2, [pc, #216]	; (8106fc0 <UART_SetConfig+0x35c>)
 8106ee8:	4293      	cmp	r3, r2
 8106eea:	d132      	bne.n	8106f52 <UART_SetConfig+0x2ee>
 8106eec:	4b31      	ldr	r3, [pc, #196]	; (8106fb4 <UART_SetConfig+0x350>)
 8106eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106ef0:	f003 0307 	and.w	r3, r3, #7
 8106ef4:	2b05      	cmp	r3, #5
 8106ef6:	d827      	bhi.n	8106f48 <UART_SetConfig+0x2e4>
 8106ef8:	a201      	add	r2, pc, #4	; (adr r2, 8106f00 <UART_SetConfig+0x29c>)
 8106efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106efe:	bf00      	nop
 8106f00:	08106f19 	.word	0x08106f19
 8106f04:	08106f21 	.word	0x08106f21
 8106f08:	08106f29 	.word	0x08106f29
 8106f0c:	08106f31 	.word	0x08106f31
 8106f10:	08106f39 	.word	0x08106f39
 8106f14:	08106f41 	.word	0x08106f41
 8106f18:	2300      	movs	r3, #0
 8106f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106f1e:	e189      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106f20:	2304      	movs	r3, #4
 8106f22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106f26:	e185      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106f28:	2308      	movs	r3, #8
 8106f2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106f2e:	e181      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106f30:	2310      	movs	r3, #16
 8106f32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106f36:	e17d      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106f38:	2320      	movs	r3, #32
 8106f3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106f3e:	e179      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106f40:	2340      	movs	r3, #64	; 0x40
 8106f42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106f46:	e175      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106f48:	2380      	movs	r3, #128	; 0x80
 8106f4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106f4e:	bf00      	nop
 8106f50:	e170      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106f52:	687b      	ldr	r3, [r7, #4]
 8106f54:	681b      	ldr	r3, [r3, #0]
 8106f56:	4a1b      	ldr	r2, [pc, #108]	; (8106fc4 <UART_SetConfig+0x360>)
 8106f58:	4293      	cmp	r3, r2
 8106f5a:	d142      	bne.n	8106fe2 <UART_SetConfig+0x37e>
 8106f5c:	4b15      	ldr	r3, [pc, #84]	; (8106fb4 <UART_SetConfig+0x350>)
 8106f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106f60:	f003 0307 	and.w	r3, r3, #7
 8106f64:	2b05      	cmp	r3, #5
 8106f66:	d837      	bhi.n	8106fd8 <UART_SetConfig+0x374>
 8106f68:	a201      	add	r2, pc, #4	; (adr r2, 8106f70 <UART_SetConfig+0x30c>)
 8106f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106f6e:	bf00      	nop
 8106f70:	08106f89 	.word	0x08106f89
 8106f74:	08106f91 	.word	0x08106f91
 8106f78:	08106f99 	.word	0x08106f99
 8106f7c:	08106fa1 	.word	0x08106fa1
 8106f80:	08106fc9 	.word	0x08106fc9
 8106f84:	08106fd1 	.word	0x08106fd1
 8106f88:	2300      	movs	r3, #0
 8106f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106f8e:	e151      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106f90:	2304      	movs	r3, #4
 8106f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106f96:	e14d      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106f98:	2308      	movs	r3, #8
 8106f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106f9e:	e149      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106fa0:	2310      	movs	r3, #16
 8106fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106fa6:	e145      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106fa8:	cfff69f3 	.word	0xcfff69f3
 8106fac:	58000c00 	.word	0x58000c00
 8106fb0:	40011000 	.word	0x40011000
 8106fb4:	58024400 	.word	0x58024400
 8106fb8:	40004400 	.word	0x40004400
 8106fbc:	40004800 	.word	0x40004800
 8106fc0:	40004c00 	.word	0x40004c00
 8106fc4:	40005000 	.word	0x40005000
 8106fc8:	2320      	movs	r3, #32
 8106fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106fce:	e131      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106fd0:	2340      	movs	r3, #64	; 0x40
 8106fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106fd6:	e12d      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106fd8:	2380      	movs	r3, #128	; 0x80
 8106fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106fde:	bf00      	nop
 8106fe0:	e128      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106fe2:	687b      	ldr	r3, [r7, #4]
 8106fe4:	681b      	ldr	r3, [r3, #0]
 8106fe6:	4ab6      	ldr	r2, [pc, #728]	; (81072c0 <UART_SetConfig+0x65c>)
 8106fe8:	4293      	cmp	r3, r2
 8106fea:	d178      	bne.n	81070de <UART_SetConfig+0x47a>
 8106fec:	4bb5      	ldr	r3, [pc, #724]	; (81072c4 <UART_SetConfig+0x660>)
 8106fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106ff0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8106ff4:	2b28      	cmp	r3, #40	; 0x28
 8106ff6:	d86d      	bhi.n	81070d4 <UART_SetConfig+0x470>
 8106ff8:	a201      	add	r2, pc, #4	; (adr r2, 8107000 <UART_SetConfig+0x39c>)
 8106ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106ffe:	bf00      	nop
 8107000:	081070a5 	.word	0x081070a5
 8107004:	081070d5 	.word	0x081070d5
 8107008:	081070d5 	.word	0x081070d5
 810700c:	081070d5 	.word	0x081070d5
 8107010:	081070d5 	.word	0x081070d5
 8107014:	081070d5 	.word	0x081070d5
 8107018:	081070d5 	.word	0x081070d5
 810701c:	081070d5 	.word	0x081070d5
 8107020:	081070ad 	.word	0x081070ad
 8107024:	081070d5 	.word	0x081070d5
 8107028:	081070d5 	.word	0x081070d5
 810702c:	081070d5 	.word	0x081070d5
 8107030:	081070d5 	.word	0x081070d5
 8107034:	081070d5 	.word	0x081070d5
 8107038:	081070d5 	.word	0x081070d5
 810703c:	081070d5 	.word	0x081070d5
 8107040:	081070b5 	.word	0x081070b5
 8107044:	081070d5 	.word	0x081070d5
 8107048:	081070d5 	.word	0x081070d5
 810704c:	081070d5 	.word	0x081070d5
 8107050:	081070d5 	.word	0x081070d5
 8107054:	081070d5 	.word	0x081070d5
 8107058:	081070d5 	.word	0x081070d5
 810705c:	081070d5 	.word	0x081070d5
 8107060:	081070bd 	.word	0x081070bd
 8107064:	081070d5 	.word	0x081070d5
 8107068:	081070d5 	.word	0x081070d5
 810706c:	081070d5 	.word	0x081070d5
 8107070:	081070d5 	.word	0x081070d5
 8107074:	081070d5 	.word	0x081070d5
 8107078:	081070d5 	.word	0x081070d5
 810707c:	081070d5 	.word	0x081070d5
 8107080:	081070c5 	.word	0x081070c5
 8107084:	081070d5 	.word	0x081070d5
 8107088:	081070d5 	.word	0x081070d5
 810708c:	081070d5 	.word	0x081070d5
 8107090:	081070d5 	.word	0x081070d5
 8107094:	081070d5 	.word	0x081070d5
 8107098:	081070d5 	.word	0x081070d5
 810709c:	081070d5 	.word	0x081070d5
 81070a0:	081070cd 	.word	0x081070cd
 81070a4:	2301      	movs	r3, #1
 81070a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81070aa:	e0c3      	b.n	8107234 <UART_SetConfig+0x5d0>
 81070ac:	2304      	movs	r3, #4
 81070ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81070b2:	e0bf      	b.n	8107234 <UART_SetConfig+0x5d0>
 81070b4:	2308      	movs	r3, #8
 81070b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81070ba:	e0bb      	b.n	8107234 <UART_SetConfig+0x5d0>
 81070bc:	2310      	movs	r3, #16
 81070be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81070c2:	e0b7      	b.n	8107234 <UART_SetConfig+0x5d0>
 81070c4:	2320      	movs	r3, #32
 81070c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81070ca:	e0b3      	b.n	8107234 <UART_SetConfig+0x5d0>
 81070cc:	2340      	movs	r3, #64	; 0x40
 81070ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81070d2:	e0af      	b.n	8107234 <UART_SetConfig+0x5d0>
 81070d4:	2380      	movs	r3, #128	; 0x80
 81070d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81070da:	bf00      	nop
 81070dc:	e0aa      	b.n	8107234 <UART_SetConfig+0x5d0>
 81070de:	687b      	ldr	r3, [r7, #4]
 81070e0:	681b      	ldr	r3, [r3, #0]
 81070e2:	4a79      	ldr	r2, [pc, #484]	; (81072c8 <UART_SetConfig+0x664>)
 81070e4:	4293      	cmp	r3, r2
 81070e6:	d132      	bne.n	810714e <UART_SetConfig+0x4ea>
 81070e8:	4b76      	ldr	r3, [pc, #472]	; (81072c4 <UART_SetConfig+0x660>)
 81070ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81070ec:	f003 0307 	and.w	r3, r3, #7
 81070f0:	2b05      	cmp	r3, #5
 81070f2:	d827      	bhi.n	8107144 <UART_SetConfig+0x4e0>
 81070f4:	a201      	add	r2, pc, #4	; (adr r2, 81070fc <UART_SetConfig+0x498>)
 81070f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81070fa:	bf00      	nop
 81070fc:	08107115 	.word	0x08107115
 8107100:	0810711d 	.word	0x0810711d
 8107104:	08107125 	.word	0x08107125
 8107108:	0810712d 	.word	0x0810712d
 810710c:	08107135 	.word	0x08107135
 8107110:	0810713d 	.word	0x0810713d
 8107114:	2300      	movs	r3, #0
 8107116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810711a:	e08b      	b.n	8107234 <UART_SetConfig+0x5d0>
 810711c:	2304      	movs	r3, #4
 810711e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107122:	e087      	b.n	8107234 <UART_SetConfig+0x5d0>
 8107124:	2308      	movs	r3, #8
 8107126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810712a:	e083      	b.n	8107234 <UART_SetConfig+0x5d0>
 810712c:	2310      	movs	r3, #16
 810712e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107132:	e07f      	b.n	8107234 <UART_SetConfig+0x5d0>
 8107134:	2320      	movs	r3, #32
 8107136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810713a:	e07b      	b.n	8107234 <UART_SetConfig+0x5d0>
 810713c:	2340      	movs	r3, #64	; 0x40
 810713e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107142:	e077      	b.n	8107234 <UART_SetConfig+0x5d0>
 8107144:	2380      	movs	r3, #128	; 0x80
 8107146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810714a:	bf00      	nop
 810714c:	e072      	b.n	8107234 <UART_SetConfig+0x5d0>
 810714e:	687b      	ldr	r3, [r7, #4]
 8107150:	681b      	ldr	r3, [r3, #0]
 8107152:	4a5e      	ldr	r2, [pc, #376]	; (81072cc <UART_SetConfig+0x668>)
 8107154:	4293      	cmp	r3, r2
 8107156:	d132      	bne.n	81071be <UART_SetConfig+0x55a>
 8107158:	4b5a      	ldr	r3, [pc, #360]	; (81072c4 <UART_SetConfig+0x660>)
 810715a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810715c:	f003 0307 	and.w	r3, r3, #7
 8107160:	2b05      	cmp	r3, #5
 8107162:	d827      	bhi.n	81071b4 <UART_SetConfig+0x550>
 8107164:	a201      	add	r2, pc, #4	; (adr r2, 810716c <UART_SetConfig+0x508>)
 8107166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810716a:	bf00      	nop
 810716c:	08107185 	.word	0x08107185
 8107170:	0810718d 	.word	0x0810718d
 8107174:	08107195 	.word	0x08107195
 8107178:	0810719d 	.word	0x0810719d
 810717c:	081071a5 	.word	0x081071a5
 8107180:	081071ad 	.word	0x081071ad
 8107184:	2300      	movs	r3, #0
 8107186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810718a:	e053      	b.n	8107234 <UART_SetConfig+0x5d0>
 810718c:	2304      	movs	r3, #4
 810718e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107192:	e04f      	b.n	8107234 <UART_SetConfig+0x5d0>
 8107194:	2308      	movs	r3, #8
 8107196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810719a:	e04b      	b.n	8107234 <UART_SetConfig+0x5d0>
 810719c:	2310      	movs	r3, #16
 810719e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81071a2:	e047      	b.n	8107234 <UART_SetConfig+0x5d0>
 81071a4:	2320      	movs	r3, #32
 81071a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81071aa:	e043      	b.n	8107234 <UART_SetConfig+0x5d0>
 81071ac:	2340      	movs	r3, #64	; 0x40
 81071ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81071b2:	e03f      	b.n	8107234 <UART_SetConfig+0x5d0>
 81071b4:	2380      	movs	r3, #128	; 0x80
 81071b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81071ba:	bf00      	nop
 81071bc:	e03a      	b.n	8107234 <UART_SetConfig+0x5d0>
 81071be:	687b      	ldr	r3, [r7, #4]
 81071c0:	681b      	ldr	r3, [r3, #0]
 81071c2:	4a43      	ldr	r2, [pc, #268]	; (81072d0 <UART_SetConfig+0x66c>)
 81071c4:	4293      	cmp	r3, r2
 81071c6:	d132      	bne.n	810722e <UART_SetConfig+0x5ca>
 81071c8:	4b3e      	ldr	r3, [pc, #248]	; (81072c4 <UART_SetConfig+0x660>)
 81071ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81071cc:	f003 0307 	and.w	r3, r3, #7
 81071d0:	2b05      	cmp	r3, #5
 81071d2:	d827      	bhi.n	8107224 <UART_SetConfig+0x5c0>
 81071d4:	a201      	add	r2, pc, #4	; (adr r2, 81071dc <UART_SetConfig+0x578>)
 81071d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81071da:	bf00      	nop
 81071dc:	081071f5 	.word	0x081071f5
 81071e0:	081071fd 	.word	0x081071fd
 81071e4:	08107205 	.word	0x08107205
 81071e8:	0810720d 	.word	0x0810720d
 81071ec:	08107215 	.word	0x08107215
 81071f0:	0810721d 	.word	0x0810721d
 81071f4:	2302      	movs	r3, #2
 81071f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81071fa:	e01b      	b.n	8107234 <UART_SetConfig+0x5d0>
 81071fc:	2304      	movs	r3, #4
 81071fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107202:	e017      	b.n	8107234 <UART_SetConfig+0x5d0>
 8107204:	2308      	movs	r3, #8
 8107206:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810720a:	e013      	b.n	8107234 <UART_SetConfig+0x5d0>
 810720c:	2310      	movs	r3, #16
 810720e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107212:	e00f      	b.n	8107234 <UART_SetConfig+0x5d0>
 8107214:	2320      	movs	r3, #32
 8107216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810721a:	e00b      	b.n	8107234 <UART_SetConfig+0x5d0>
 810721c:	2340      	movs	r3, #64	; 0x40
 810721e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107222:	e007      	b.n	8107234 <UART_SetConfig+0x5d0>
 8107224:	2380      	movs	r3, #128	; 0x80
 8107226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810722a:	bf00      	nop
 810722c:	e002      	b.n	8107234 <UART_SetConfig+0x5d0>
 810722e:	2380      	movs	r3, #128	; 0x80
 8107230:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8107234:	687b      	ldr	r3, [r7, #4]
 8107236:	681b      	ldr	r3, [r3, #0]
 8107238:	4a25      	ldr	r2, [pc, #148]	; (81072d0 <UART_SetConfig+0x66c>)
 810723a:	4293      	cmp	r3, r2
 810723c:	f040 80b8 	bne.w	81073b0 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8107240:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8107244:	2b08      	cmp	r3, #8
 8107246:	d019      	beq.n	810727c <UART_SetConfig+0x618>
 8107248:	2b08      	cmp	r3, #8
 810724a:	dc04      	bgt.n	8107256 <UART_SetConfig+0x5f2>
 810724c:	2b02      	cmp	r3, #2
 810724e:	d009      	beq.n	8107264 <UART_SetConfig+0x600>
 8107250:	2b04      	cmp	r3, #4
 8107252:	d00b      	beq.n	810726c <UART_SetConfig+0x608>
 8107254:	e042      	b.n	81072dc <UART_SetConfig+0x678>
 8107256:	2b20      	cmp	r3, #32
 8107258:	d02b      	beq.n	81072b2 <UART_SetConfig+0x64e>
 810725a:	2b40      	cmp	r3, #64	; 0x40
 810725c:	d02c      	beq.n	81072b8 <UART_SetConfig+0x654>
 810725e:	2b10      	cmp	r3, #16
 8107260:	d014      	beq.n	810728c <UART_SetConfig+0x628>
 8107262:	e03b      	b.n	81072dc <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8107264:	f7fe fa56 	bl	8105714 <HAL_RCCEx_GetD3PCLK1Freq>
 8107268:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810726a:	e03d      	b.n	81072e8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810726c:	f107 0314 	add.w	r3, r7, #20
 8107270:	4618      	mov	r0, r3
 8107272:	f7fe fa65 	bl	8105740 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8107276:	69bb      	ldr	r3, [r7, #24]
 8107278:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810727a:	e035      	b.n	81072e8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810727c:	f107 0308 	add.w	r3, r7, #8
 8107280:	4618      	mov	r0, r3
 8107282:	f7fe fba9 	bl	81059d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8107286:	68fb      	ldr	r3, [r7, #12]
 8107288:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810728a:	e02d      	b.n	81072e8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810728c:	4b0d      	ldr	r3, [pc, #52]	; (81072c4 <UART_SetConfig+0x660>)
 810728e:	681b      	ldr	r3, [r3, #0]
 8107290:	f003 0320 	and.w	r3, r3, #32
 8107294:	2b00      	cmp	r3, #0
 8107296:	d009      	beq.n	81072ac <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8107298:	4b0a      	ldr	r3, [pc, #40]	; (81072c4 <UART_SetConfig+0x660>)
 810729a:	681b      	ldr	r3, [r3, #0]
 810729c:	08db      	lsrs	r3, r3, #3
 810729e:	f003 0303 	and.w	r3, r3, #3
 81072a2:	4a0c      	ldr	r2, [pc, #48]	; (81072d4 <UART_SetConfig+0x670>)
 81072a4:	fa22 f303 	lsr.w	r3, r2, r3
 81072a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81072aa:	e01d      	b.n	81072e8 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 81072ac:	4b09      	ldr	r3, [pc, #36]	; (81072d4 <UART_SetConfig+0x670>)
 81072ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81072b0:	e01a      	b.n	81072e8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81072b2:	4b09      	ldr	r3, [pc, #36]	; (81072d8 <UART_SetConfig+0x674>)
 81072b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81072b6:	e017      	b.n	81072e8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81072b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81072bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81072be:	e013      	b.n	81072e8 <UART_SetConfig+0x684>
 81072c0:	40011400 	.word	0x40011400
 81072c4:	58024400 	.word	0x58024400
 81072c8:	40007800 	.word	0x40007800
 81072cc:	40007c00 	.word	0x40007c00
 81072d0:	58000c00 	.word	0x58000c00
 81072d4:	03d09000 	.word	0x03d09000
 81072d8:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 81072dc:	2300      	movs	r3, #0
 81072de:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 81072e0:	2301      	movs	r3, #1
 81072e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 81072e6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 81072e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81072ea:	2b00      	cmp	r3, #0
 81072ec:	f000 824d 	beq.w	810778a <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 81072f0:	687b      	ldr	r3, [r7, #4]
 81072f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81072f4:	4aad      	ldr	r2, [pc, #692]	; (81075ac <UART_SetConfig+0x948>)
 81072f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81072fa:	461a      	mov	r2, r3
 81072fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81072fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8107302:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8107304:	687b      	ldr	r3, [r7, #4]
 8107306:	685a      	ldr	r2, [r3, #4]
 8107308:	4613      	mov	r3, r2
 810730a:	005b      	lsls	r3, r3, #1
 810730c:	4413      	add	r3, r2
 810730e:	6a3a      	ldr	r2, [r7, #32]
 8107310:	429a      	cmp	r2, r3
 8107312:	d305      	bcc.n	8107320 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8107314:	687b      	ldr	r3, [r7, #4]
 8107316:	685b      	ldr	r3, [r3, #4]
 8107318:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810731a:	6a3a      	ldr	r2, [r7, #32]
 810731c:	429a      	cmp	r2, r3
 810731e:	d903      	bls.n	8107328 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8107320:	2301      	movs	r3, #1
 8107322:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8107326:	e230      	b.n	810778a <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8107328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810732a:	4618      	mov	r0, r3
 810732c:	f04f 0100 	mov.w	r1, #0
 8107330:	687b      	ldr	r3, [r7, #4]
 8107332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107334:	4a9d      	ldr	r2, [pc, #628]	; (81075ac <UART_SetConfig+0x948>)
 8107336:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810733a:	b29b      	uxth	r3, r3
 810733c:	f04f 0400 	mov.w	r4, #0
 8107340:	461a      	mov	r2, r3
 8107342:	4623      	mov	r3, r4
 8107344:	f7f9 fd68 	bl	8100e18 <__aeabi_uldivmod>
 8107348:	4603      	mov	r3, r0
 810734a:	460c      	mov	r4, r1
 810734c:	4619      	mov	r1, r3
 810734e:	4622      	mov	r2, r4
 8107350:	f04f 0300 	mov.w	r3, #0
 8107354:	f04f 0400 	mov.w	r4, #0
 8107358:	0214      	lsls	r4, r2, #8
 810735a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 810735e:	020b      	lsls	r3, r1, #8
 8107360:	687a      	ldr	r2, [r7, #4]
 8107362:	6852      	ldr	r2, [r2, #4]
 8107364:	0852      	lsrs	r2, r2, #1
 8107366:	4611      	mov	r1, r2
 8107368:	f04f 0200 	mov.w	r2, #0
 810736c:	eb13 0b01 	adds.w	fp, r3, r1
 8107370:	eb44 0c02 	adc.w	ip, r4, r2
 8107374:	4658      	mov	r0, fp
 8107376:	4661      	mov	r1, ip
 8107378:	687b      	ldr	r3, [r7, #4]
 810737a:	685b      	ldr	r3, [r3, #4]
 810737c:	f04f 0400 	mov.w	r4, #0
 8107380:	461a      	mov	r2, r3
 8107382:	4623      	mov	r3, r4
 8107384:	f7f9 fd48 	bl	8100e18 <__aeabi_uldivmod>
 8107388:	4603      	mov	r3, r0
 810738a:	460c      	mov	r4, r1
 810738c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810738e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107390:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8107394:	d308      	bcc.n	81073a8 <UART_SetConfig+0x744>
 8107396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107398:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810739c:	d204      	bcs.n	81073a8 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 810739e:	687b      	ldr	r3, [r7, #4]
 81073a0:	681b      	ldr	r3, [r3, #0]
 81073a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81073a4:	60da      	str	r2, [r3, #12]
 81073a6:	e1f0      	b.n	810778a <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 81073a8:	2301      	movs	r3, #1
 81073aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 81073ae:	e1ec      	b.n	810778a <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 81073b0:	687b      	ldr	r3, [r7, #4]
 81073b2:	69db      	ldr	r3, [r3, #28]
 81073b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81073b8:	f040 8100 	bne.w	81075bc <UART_SetConfig+0x958>
  {
    switch (clocksource)
 81073bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 81073c0:	2b40      	cmp	r3, #64	; 0x40
 81073c2:	f200 80b7 	bhi.w	8107534 <UART_SetConfig+0x8d0>
 81073c6:	a201      	add	r2, pc, #4	; (adr r2, 81073cc <UART_SetConfig+0x768>)
 81073c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81073cc:	081074d1 	.word	0x081074d1
 81073d0:	081074d9 	.word	0x081074d9
 81073d4:	08107535 	.word	0x08107535
 81073d8:	08107535 	.word	0x08107535
 81073dc:	081074e1 	.word	0x081074e1
 81073e0:	08107535 	.word	0x08107535
 81073e4:	08107535 	.word	0x08107535
 81073e8:	08107535 	.word	0x08107535
 81073ec:	081074f1 	.word	0x081074f1
 81073f0:	08107535 	.word	0x08107535
 81073f4:	08107535 	.word	0x08107535
 81073f8:	08107535 	.word	0x08107535
 81073fc:	08107535 	.word	0x08107535
 8107400:	08107535 	.word	0x08107535
 8107404:	08107535 	.word	0x08107535
 8107408:	08107535 	.word	0x08107535
 810740c:	08107501 	.word	0x08107501
 8107410:	08107535 	.word	0x08107535
 8107414:	08107535 	.word	0x08107535
 8107418:	08107535 	.word	0x08107535
 810741c:	08107535 	.word	0x08107535
 8107420:	08107535 	.word	0x08107535
 8107424:	08107535 	.word	0x08107535
 8107428:	08107535 	.word	0x08107535
 810742c:	08107535 	.word	0x08107535
 8107430:	08107535 	.word	0x08107535
 8107434:	08107535 	.word	0x08107535
 8107438:	08107535 	.word	0x08107535
 810743c:	08107535 	.word	0x08107535
 8107440:	08107535 	.word	0x08107535
 8107444:	08107535 	.word	0x08107535
 8107448:	08107535 	.word	0x08107535
 810744c:	08107527 	.word	0x08107527
 8107450:	08107535 	.word	0x08107535
 8107454:	08107535 	.word	0x08107535
 8107458:	08107535 	.word	0x08107535
 810745c:	08107535 	.word	0x08107535
 8107460:	08107535 	.word	0x08107535
 8107464:	08107535 	.word	0x08107535
 8107468:	08107535 	.word	0x08107535
 810746c:	08107535 	.word	0x08107535
 8107470:	08107535 	.word	0x08107535
 8107474:	08107535 	.word	0x08107535
 8107478:	08107535 	.word	0x08107535
 810747c:	08107535 	.word	0x08107535
 8107480:	08107535 	.word	0x08107535
 8107484:	08107535 	.word	0x08107535
 8107488:	08107535 	.word	0x08107535
 810748c:	08107535 	.word	0x08107535
 8107490:	08107535 	.word	0x08107535
 8107494:	08107535 	.word	0x08107535
 8107498:	08107535 	.word	0x08107535
 810749c:	08107535 	.word	0x08107535
 81074a0:	08107535 	.word	0x08107535
 81074a4:	08107535 	.word	0x08107535
 81074a8:	08107535 	.word	0x08107535
 81074ac:	08107535 	.word	0x08107535
 81074b0:	08107535 	.word	0x08107535
 81074b4:	08107535 	.word	0x08107535
 81074b8:	08107535 	.word	0x08107535
 81074bc:	08107535 	.word	0x08107535
 81074c0:	08107535 	.word	0x08107535
 81074c4:	08107535 	.word	0x08107535
 81074c8:	08107535 	.word	0x08107535
 81074cc:	0810752d 	.word	0x0810752d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81074d0:	f7fe f8b2 	bl	8105638 <HAL_RCC_GetPCLK1Freq>
 81074d4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81074d6:	e033      	b.n	8107540 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81074d8:	f7fe f8c4 	bl	8105664 <HAL_RCC_GetPCLK2Freq>
 81074dc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81074de:	e02f      	b.n	8107540 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81074e0:	f107 0314 	add.w	r3, r7, #20
 81074e4:	4618      	mov	r0, r3
 81074e6:	f7fe f92b 	bl	8105740 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81074ea:	69bb      	ldr	r3, [r7, #24]
 81074ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81074ee:	e027      	b.n	8107540 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81074f0:	f107 0308 	add.w	r3, r7, #8
 81074f4:	4618      	mov	r0, r3
 81074f6:	f7fe fa6f 	bl	81059d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81074fa:	68fb      	ldr	r3, [r7, #12]
 81074fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81074fe:	e01f      	b.n	8107540 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107500:	4b2b      	ldr	r3, [pc, #172]	; (81075b0 <UART_SetConfig+0x94c>)
 8107502:	681b      	ldr	r3, [r3, #0]
 8107504:	f003 0320 	and.w	r3, r3, #32
 8107508:	2b00      	cmp	r3, #0
 810750a:	d009      	beq.n	8107520 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810750c:	4b28      	ldr	r3, [pc, #160]	; (81075b0 <UART_SetConfig+0x94c>)
 810750e:	681b      	ldr	r3, [r3, #0]
 8107510:	08db      	lsrs	r3, r3, #3
 8107512:	f003 0303 	and.w	r3, r3, #3
 8107516:	4a27      	ldr	r2, [pc, #156]	; (81075b4 <UART_SetConfig+0x950>)
 8107518:	fa22 f303 	lsr.w	r3, r2, r3
 810751c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810751e:	e00f      	b.n	8107540 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8107520:	4b24      	ldr	r3, [pc, #144]	; (81075b4 <UART_SetConfig+0x950>)
 8107522:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107524:	e00c      	b.n	8107540 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8107526:	4b24      	ldr	r3, [pc, #144]	; (81075b8 <UART_SetConfig+0x954>)
 8107528:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810752a:	e009      	b.n	8107540 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810752c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8107530:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107532:	e005      	b.n	8107540 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8107534:	2300      	movs	r3, #0
 8107536:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8107538:	2301      	movs	r3, #1
 810753a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810753e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8107540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107542:	2b00      	cmp	r3, #0
 8107544:	f000 8121 	beq.w	810778a <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8107548:	687b      	ldr	r3, [r7, #4]
 810754a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810754c:	4a17      	ldr	r2, [pc, #92]	; (81075ac <UART_SetConfig+0x948>)
 810754e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107552:	461a      	mov	r2, r3
 8107554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107556:	fbb3 f3f2 	udiv	r3, r3, r2
 810755a:	005a      	lsls	r2, r3, #1
 810755c:	687b      	ldr	r3, [r7, #4]
 810755e:	685b      	ldr	r3, [r3, #4]
 8107560:	085b      	lsrs	r3, r3, #1
 8107562:	441a      	add	r2, r3
 8107564:	687b      	ldr	r3, [r7, #4]
 8107566:	685b      	ldr	r3, [r3, #4]
 8107568:	fbb2 f3f3 	udiv	r3, r2, r3
 810756c:	b29b      	uxth	r3, r3
 810756e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8107570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107572:	2b0f      	cmp	r3, #15
 8107574:	d916      	bls.n	81075a4 <UART_SetConfig+0x940>
 8107576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810757c:	d212      	bcs.n	81075a4 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810757e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107580:	b29b      	uxth	r3, r3
 8107582:	f023 030f 	bic.w	r3, r3, #15
 8107586:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8107588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810758a:	085b      	lsrs	r3, r3, #1
 810758c:	b29b      	uxth	r3, r3
 810758e:	f003 0307 	and.w	r3, r3, #7
 8107592:	b29a      	uxth	r2, r3
 8107594:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8107596:	4313      	orrs	r3, r2
 8107598:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 810759a:	687b      	ldr	r3, [r7, #4]
 810759c:	681b      	ldr	r3, [r3, #0]
 810759e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 81075a0:	60da      	str	r2, [r3, #12]
 81075a2:	e0f2      	b.n	810778a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 81075a4:	2301      	movs	r3, #1
 81075a6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 81075aa:	e0ee      	b.n	810778a <UART_SetConfig+0xb26>
 81075ac:	081109b0 	.word	0x081109b0
 81075b0:	58024400 	.word	0x58024400
 81075b4:	03d09000 	.word	0x03d09000
 81075b8:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 81075bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 81075c0:	2b40      	cmp	r3, #64	; 0x40
 81075c2:	f200 80b7 	bhi.w	8107734 <UART_SetConfig+0xad0>
 81075c6:	a201      	add	r2, pc, #4	; (adr r2, 81075cc <UART_SetConfig+0x968>)
 81075c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81075cc:	081076d1 	.word	0x081076d1
 81075d0:	081076d9 	.word	0x081076d9
 81075d4:	08107735 	.word	0x08107735
 81075d8:	08107735 	.word	0x08107735
 81075dc:	081076e1 	.word	0x081076e1
 81075e0:	08107735 	.word	0x08107735
 81075e4:	08107735 	.word	0x08107735
 81075e8:	08107735 	.word	0x08107735
 81075ec:	081076f1 	.word	0x081076f1
 81075f0:	08107735 	.word	0x08107735
 81075f4:	08107735 	.word	0x08107735
 81075f8:	08107735 	.word	0x08107735
 81075fc:	08107735 	.word	0x08107735
 8107600:	08107735 	.word	0x08107735
 8107604:	08107735 	.word	0x08107735
 8107608:	08107735 	.word	0x08107735
 810760c:	08107701 	.word	0x08107701
 8107610:	08107735 	.word	0x08107735
 8107614:	08107735 	.word	0x08107735
 8107618:	08107735 	.word	0x08107735
 810761c:	08107735 	.word	0x08107735
 8107620:	08107735 	.word	0x08107735
 8107624:	08107735 	.word	0x08107735
 8107628:	08107735 	.word	0x08107735
 810762c:	08107735 	.word	0x08107735
 8107630:	08107735 	.word	0x08107735
 8107634:	08107735 	.word	0x08107735
 8107638:	08107735 	.word	0x08107735
 810763c:	08107735 	.word	0x08107735
 8107640:	08107735 	.word	0x08107735
 8107644:	08107735 	.word	0x08107735
 8107648:	08107735 	.word	0x08107735
 810764c:	08107727 	.word	0x08107727
 8107650:	08107735 	.word	0x08107735
 8107654:	08107735 	.word	0x08107735
 8107658:	08107735 	.word	0x08107735
 810765c:	08107735 	.word	0x08107735
 8107660:	08107735 	.word	0x08107735
 8107664:	08107735 	.word	0x08107735
 8107668:	08107735 	.word	0x08107735
 810766c:	08107735 	.word	0x08107735
 8107670:	08107735 	.word	0x08107735
 8107674:	08107735 	.word	0x08107735
 8107678:	08107735 	.word	0x08107735
 810767c:	08107735 	.word	0x08107735
 8107680:	08107735 	.word	0x08107735
 8107684:	08107735 	.word	0x08107735
 8107688:	08107735 	.word	0x08107735
 810768c:	08107735 	.word	0x08107735
 8107690:	08107735 	.word	0x08107735
 8107694:	08107735 	.word	0x08107735
 8107698:	08107735 	.word	0x08107735
 810769c:	08107735 	.word	0x08107735
 81076a0:	08107735 	.word	0x08107735
 81076a4:	08107735 	.word	0x08107735
 81076a8:	08107735 	.word	0x08107735
 81076ac:	08107735 	.word	0x08107735
 81076b0:	08107735 	.word	0x08107735
 81076b4:	08107735 	.word	0x08107735
 81076b8:	08107735 	.word	0x08107735
 81076bc:	08107735 	.word	0x08107735
 81076c0:	08107735 	.word	0x08107735
 81076c4:	08107735 	.word	0x08107735
 81076c8:	08107735 	.word	0x08107735
 81076cc:	0810772d 	.word	0x0810772d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81076d0:	f7fd ffb2 	bl	8105638 <HAL_RCC_GetPCLK1Freq>
 81076d4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81076d6:	e033      	b.n	8107740 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81076d8:	f7fd ffc4 	bl	8105664 <HAL_RCC_GetPCLK2Freq>
 81076dc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81076de:	e02f      	b.n	8107740 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81076e0:	f107 0314 	add.w	r3, r7, #20
 81076e4:	4618      	mov	r0, r3
 81076e6:	f7fe f82b 	bl	8105740 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81076ea:	69bb      	ldr	r3, [r7, #24]
 81076ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81076ee:	e027      	b.n	8107740 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81076f0:	f107 0308 	add.w	r3, r7, #8
 81076f4:	4618      	mov	r0, r3
 81076f6:	f7fe f96f 	bl	81059d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81076fa:	68fb      	ldr	r3, [r7, #12]
 81076fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81076fe:	e01f      	b.n	8107740 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107700:	4b2c      	ldr	r3, [pc, #176]	; (81077b4 <UART_SetConfig+0xb50>)
 8107702:	681b      	ldr	r3, [r3, #0]
 8107704:	f003 0320 	and.w	r3, r3, #32
 8107708:	2b00      	cmp	r3, #0
 810770a:	d009      	beq.n	8107720 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810770c:	4b29      	ldr	r3, [pc, #164]	; (81077b4 <UART_SetConfig+0xb50>)
 810770e:	681b      	ldr	r3, [r3, #0]
 8107710:	08db      	lsrs	r3, r3, #3
 8107712:	f003 0303 	and.w	r3, r3, #3
 8107716:	4a28      	ldr	r2, [pc, #160]	; (81077b8 <UART_SetConfig+0xb54>)
 8107718:	fa22 f303 	lsr.w	r3, r2, r3
 810771c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810771e:	e00f      	b.n	8107740 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8107720:	4b25      	ldr	r3, [pc, #148]	; (81077b8 <UART_SetConfig+0xb54>)
 8107722:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107724:	e00c      	b.n	8107740 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8107726:	4b25      	ldr	r3, [pc, #148]	; (81077bc <UART_SetConfig+0xb58>)
 8107728:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810772a:	e009      	b.n	8107740 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810772c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8107730:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107732:	e005      	b.n	8107740 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8107734:	2300      	movs	r3, #0
 8107736:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8107738:	2301      	movs	r3, #1
 810773a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810773e:	bf00      	nop
    }

    if (pclk != 0U)
 8107740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107742:	2b00      	cmp	r3, #0
 8107744:	d021      	beq.n	810778a <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8107746:	687b      	ldr	r3, [r7, #4]
 8107748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810774a:	4a1d      	ldr	r2, [pc, #116]	; (81077c0 <UART_SetConfig+0xb5c>)
 810774c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107750:	461a      	mov	r2, r3
 8107752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107754:	fbb3 f2f2 	udiv	r2, r3, r2
 8107758:	687b      	ldr	r3, [r7, #4]
 810775a:	685b      	ldr	r3, [r3, #4]
 810775c:	085b      	lsrs	r3, r3, #1
 810775e:	441a      	add	r2, r3
 8107760:	687b      	ldr	r3, [r7, #4]
 8107762:	685b      	ldr	r3, [r3, #4]
 8107764:	fbb2 f3f3 	udiv	r3, r2, r3
 8107768:	b29b      	uxth	r3, r3
 810776a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810776c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810776e:	2b0f      	cmp	r3, #15
 8107770:	d908      	bls.n	8107784 <UART_SetConfig+0xb20>
 8107772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107778:	d204      	bcs.n	8107784 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 810777a:	687b      	ldr	r3, [r7, #4]
 810777c:	681b      	ldr	r3, [r3, #0]
 810777e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8107780:	60da      	str	r2, [r3, #12]
 8107782:	e002      	b.n	810778a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8107784:	2301      	movs	r3, #1
 8107786:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810778a:	687b      	ldr	r3, [r7, #4]
 810778c:	2201      	movs	r2, #1
 810778e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8107792:	687b      	ldr	r3, [r7, #4]
 8107794:	2201      	movs	r2, #1
 8107796:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810779a:	687b      	ldr	r3, [r7, #4]
 810779c:	2200      	movs	r2, #0
 810779e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 81077a0:	687b      	ldr	r3, [r7, #4]
 81077a2:	2200      	movs	r2, #0
 81077a4:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 81077a6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 81077aa:	4618      	mov	r0, r3
 81077ac:	3738      	adds	r7, #56	; 0x38
 81077ae:	46bd      	mov	sp, r7
 81077b0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 81077b4:	58024400 	.word	0x58024400
 81077b8:	03d09000 	.word	0x03d09000
 81077bc:	003d0900 	.word	0x003d0900
 81077c0:	081109b0 	.word	0x081109b0

081077c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 81077c4:	b480      	push	{r7}
 81077c6:	b083      	sub	sp, #12
 81077c8:	af00      	add	r7, sp, #0
 81077ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 81077cc:	687b      	ldr	r3, [r7, #4]
 81077ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81077d0:	f003 0301 	and.w	r3, r3, #1
 81077d4:	2b00      	cmp	r3, #0
 81077d6:	d00a      	beq.n	81077ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 81077d8:	687b      	ldr	r3, [r7, #4]
 81077da:	681b      	ldr	r3, [r3, #0]
 81077dc:	685b      	ldr	r3, [r3, #4]
 81077de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 81077e2:	687b      	ldr	r3, [r7, #4]
 81077e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81077e6:	687b      	ldr	r3, [r7, #4]
 81077e8:	681b      	ldr	r3, [r3, #0]
 81077ea:	430a      	orrs	r2, r1
 81077ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 81077ee:	687b      	ldr	r3, [r7, #4]
 81077f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81077f2:	f003 0302 	and.w	r3, r3, #2
 81077f6:	2b00      	cmp	r3, #0
 81077f8:	d00a      	beq.n	8107810 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 81077fa:	687b      	ldr	r3, [r7, #4]
 81077fc:	681b      	ldr	r3, [r3, #0]
 81077fe:	685b      	ldr	r3, [r3, #4]
 8107800:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8107804:	687b      	ldr	r3, [r7, #4]
 8107806:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8107808:	687b      	ldr	r3, [r7, #4]
 810780a:	681b      	ldr	r3, [r3, #0]
 810780c:	430a      	orrs	r2, r1
 810780e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8107810:	687b      	ldr	r3, [r7, #4]
 8107812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107814:	f003 0304 	and.w	r3, r3, #4
 8107818:	2b00      	cmp	r3, #0
 810781a:	d00a      	beq.n	8107832 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810781c:	687b      	ldr	r3, [r7, #4]
 810781e:	681b      	ldr	r3, [r3, #0]
 8107820:	685b      	ldr	r3, [r3, #4]
 8107822:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8107826:	687b      	ldr	r3, [r7, #4]
 8107828:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810782a:	687b      	ldr	r3, [r7, #4]
 810782c:	681b      	ldr	r3, [r3, #0]
 810782e:	430a      	orrs	r2, r1
 8107830:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8107832:	687b      	ldr	r3, [r7, #4]
 8107834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107836:	f003 0308 	and.w	r3, r3, #8
 810783a:	2b00      	cmp	r3, #0
 810783c:	d00a      	beq.n	8107854 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810783e:	687b      	ldr	r3, [r7, #4]
 8107840:	681b      	ldr	r3, [r3, #0]
 8107842:	685b      	ldr	r3, [r3, #4]
 8107844:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8107848:	687b      	ldr	r3, [r7, #4]
 810784a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810784c:	687b      	ldr	r3, [r7, #4]
 810784e:	681b      	ldr	r3, [r3, #0]
 8107850:	430a      	orrs	r2, r1
 8107852:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8107854:	687b      	ldr	r3, [r7, #4]
 8107856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107858:	f003 0310 	and.w	r3, r3, #16
 810785c:	2b00      	cmp	r3, #0
 810785e:	d00a      	beq.n	8107876 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8107860:	687b      	ldr	r3, [r7, #4]
 8107862:	681b      	ldr	r3, [r3, #0]
 8107864:	689b      	ldr	r3, [r3, #8]
 8107866:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 810786a:	687b      	ldr	r3, [r7, #4]
 810786c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810786e:	687b      	ldr	r3, [r7, #4]
 8107870:	681b      	ldr	r3, [r3, #0]
 8107872:	430a      	orrs	r2, r1
 8107874:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8107876:	687b      	ldr	r3, [r7, #4]
 8107878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810787a:	f003 0320 	and.w	r3, r3, #32
 810787e:	2b00      	cmp	r3, #0
 8107880:	d00a      	beq.n	8107898 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8107882:	687b      	ldr	r3, [r7, #4]
 8107884:	681b      	ldr	r3, [r3, #0]
 8107886:	689b      	ldr	r3, [r3, #8]
 8107888:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 810788c:	687b      	ldr	r3, [r7, #4]
 810788e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8107890:	687b      	ldr	r3, [r7, #4]
 8107892:	681b      	ldr	r3, [r3, #0]
 8107894:	430a      	orrs	r2, r1
 8107896:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8107898:	687b      	ldr	r3, [r7, #4]
 810789a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810789c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81078a0:	2b00      	cmp	r3, #0
 81078a2:	d01a      	beq.n	81078da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 81078a4:	687b      	ldr	r3, [r7, #4]
 81078a6:	681b      	ldr	r3, [r3, #0]
 81078a8:	685b      	ldr	r3, [r3, #4]
 81078aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 81078ae:	687b      	ldr	r3, [r7, #4]
 81078b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 81078b2:	687b      	ldr	r3, [r7, #4]
 81078b4:	681b      	ldr	r3, [r3, #0]
 81078b6:	430a      	orrs	r2, r1
 81078b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 81078ba:	687b      	ldr	r3, [r7, #4]
 81078bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81078be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81078c2:	d10a      	bne.n	81078da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 81078c4:	687b      	ldr	r3, [r7, #4]
 81078c6:	681b      	ldr	r3, [r3, #0]
 81078c8:	685b      	ldr	r3, [r3, #4]
 81078ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 81078ce:	687b      	ldr	r3, [r7, #4]
 81078d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 81078d2:	687b      	ldr	r3, [r7, #4]
 81078d4:	681b      	ldr	r3, [r3, #0]
 81078d6:	430a      	orrs	r2, r1
 81078d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 81078da:	687b      	ldr	r3, [r7, #4]
 81078dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81078de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81078e2:	2b00      	cmp	r3, #0
 81078e4:	d00a      	beq.n	81078fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 81078e6:	687b      	ldr	r3, [r7, #4]
 81078e8:	681b      	ldr	r3, [r3, #0]
 81078ea:	685b      	ldr	r3, [r3, #4]
 81078ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 81078f0:	687b      	ldr	r3, [r7, #4]
 81078f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 81078f4:	687b      	ldr	r3, [r7, #4]
 81078f6:	681b      	ldr	r3, [r3, #0]
 81078f8:	430a      	orrs	r2, r1
 81078fa:	605a      	str	r2, [r3, #4]
  }
}
 81078fc:	bf00      	nop
 81078fe:	370c      	adds	r7, #12
 8107900:	46bd      	mov	sp, r7
 8107902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107906:	4770      	bx	lr

08107908 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8107908:	b580      	push	{r7, lr}
 810790a:	b086      	sub	sp, #24
 810790c:	af02      	add	r7, sp, #8
 810790e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107910:	687b      	ldr	r3, [r7, #4]
 8107912:	2200      	movs	r2, #0
 8107914:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8107918:	f7fa fc50 	bl	81021bc <HAL_GetTick>
 810791c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810791e:	687b      	ldr	r3, [r7, #4]
 8107920:	681b      	ldr	r3, [r3, #0]
 8107922:	681b      	ldr	r3, [r3, #0]
 8107924:	f003 0308 	and.w	r3, r3, #8
 8107928:	2b08      	cmp	r3, #8
 810792a:	d10e      	bne.n	810794a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810792c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8107930:	9300      	str	r3, [sp, #0]
 8107932:	68fb      	ldr	r3, [r7, #12]
 8107934:	2200      	movs	r2, #0
 8107936:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810793a:	6878      	ldr	r0, [r7, #4]
 810793c:	f000 f82c 	bl	8107998 <UART_WaitOnFlagUntilTimeout>
 8107940:	4603      	mov	r3, r0
 8107942:	2b00      	cmp	r3, #0
 8107944:	d001      	beq.n	810794a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8107946:	2303      	movs	r3, #3
 8107948:	e022      	b.n	8107990 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810794a:	687b      	ldr	r3, [r7, #4]
 810794c:	681b      	ldr	r3, [r3, #0]
 810794e:	681b      	ldr	r3, [r3, #0]
 8107950:	f003 0304 	and.w	r3, r3, #4
 8107954:	2b04      	cmp	r3, #4
 8107956:	d10e      	bne.n	8107976 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8107958:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810795c:	9300      	str	r3, [sp, #0]
 810795e:	68fb      	ldr	r3, [r7, #12]
 8107960:	2200      	movs	r2, #0
 8107962:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8107966:	6878      	ldr	r0, [r7, #4]
 8107968:	f000 f816 	bl	8107998 <UART_WaitOnFlagUntilTimeout>
 810796c:	4603      	mov	r3, r0
 810796e:	2b00      	cmp	r3, #0
 8107970:	d001      	beq.n	8107976 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8107972:	2303      	movs	r3, #3
 8107974:	e00c      	b.n	8107990 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8107976:	687b      	ldr	r3, [r7, #4]
 8107978:	2220      	movs	r2, #32
 810797a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 810797e:	687b      	ldr	r3, [r7, #4]
 8107980:	2220      	movs	r2, #32
 8107982:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8107986:	687b      	ldr	r3, [r7, #4]
 8107988:	2200      	movs	r2, #0
 810798a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 810798e:	2300      	movs	r3, #0
}
 8107990:	4618      	mov	r0, r3
 8107992:	3710      	adds	r7, #16
 8107994:	46bd      	mov	sp, r7
 8107996:	bd80      	pop	{r7, pc}

08107998 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8107998:	b580      	push	{r7, lr}
 810799a:	b084      	sub	sp, #16
 810799c:	af00      	add	r7, sp, #0
 810799e:	60f8      	str	r0, [r7, #12]
 81079a0:	60b9      	str	r1, [r7, #8]
 81079a2:	603b      	str	r3, [r7, #0]
 81079a4:	4613      	mov	r3, r2
 81079a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81079a8:	e062      	b.n	8107a70 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81079aa:	69bb      	ldr	r3, [r7, #24]
 81079ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 81079b0:	d05e      	beq.n	8107a70 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81079b2:	f7fa fc03 	bl	81021bc <HAL_GetTick>
 81079b6:	4602      	mov	r2, r0
 81079b8:	683b      	ldr	r3, [r7, #0]
 81079ba:	1ad3      	subs	r3, r2, r3
 81079bc:	69ba      	ldr	r2, [r7, #24]
 81079be:	429a      	cmp	r2, r3
 81079c0:	d302      	bcc.n	81079c8 <UART_WaitOnFlagUntilTimeout+0x30>
 81079c2:	69bb      	ldr	r3, [r7, #24]
 81079c4:	2b00      	cmp	r3, #0
 81079c6:	d11d      	bne.n	8107a04 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 81079c8:	68fb      	ldr	r3, [r7, #12]
 81079ca:	681b      	ldr	r3, [r3, #0]
 81079cc:	681a      	ldr	r2, [r3, #0]
 81079ce:	68fb      	ldr	r3, [r7, #12]
 81079d0:	681b      	ldr	r3, [r3, #0]
 81079d2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 81079d6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81079d8:	68fb      	ldr	r3, [r7, #12]
 81079da:	681b      	ldr	r3, [r3, #0]
 81079dc:	689a      	ldr	r2, [r3, #8]
 81079de:	68fb      	ldr	r3, [r7, #12]
 81079e0:	681b      	ldr	r3, [r3, #0]
 81079e2:	f022 0201 	bic.w	r2, r2, #1
 81079e6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 81079e8:	68fb      	ldr	r3, [r7, #12]
 81079ea:	2220      	movs	r2, #32
 81079ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 81079f0:	68fb      	ldr	r3, [r7, #12]
 81079f2:	2220      	movs	r2, #32
 81079f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 81079f8:	68fb      	ldr	r3, [r7, #12]
 81079fa:	2200      	movs	r2, #0
 81079fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8107a00:	2303      	movs	r3, #3
 8107a02:	e045      	b.n	8107a90 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8107a04:	68fb      	ldr	r3, [r7, #12]
 8107a06:	681b      	ldr	r3, [r3, #0]
 8107a08:	681b      	ldr	r3, [r3, #0]
 8107a0a:	f003 0304 	and.w	r3, r3, #4
 8107a0e:	2b00      	cmp	r3, #0
 8107a10:	d02e      	beq.n	8107a70 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8107a12:	68fb      	ldr	r3, [r7, #12]
 8107a14:	681b      	ldr	r3, [r3, #0]
 8107a16:	69db      	ldr	r3, [r3, #28]
 8107a18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8107a1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8107a20:	d126      	bne.n	8107a70 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8107a22:	68fb      	ldr	r3, [r7, #12]
 8107a24:	681b      	ldr	r3, [r3, #0]
 8107a26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8107a2a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8107a2c:	68fb      	ldr	r3, [r7, #12]
 8107a2e:	681b      	ldr	r3, [r3, #0]
 8107a30:	681a      	ldr	r2, [r3, #0]
 8107a32:	68fb      	ldr	r3, [r7, #12]
 8107a34:	681b      	ldr	r3, [r3, #0]
 8107a36:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8107a3a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8107a3c:	68fb      	ldr	r3, [r7, #12]
 8107a3e:	681b      	ldr	r3, [r3, #0]
 8107a40:	689a      	ldr	r2, [r3, #8]
 8107a42:	68fb      	ldr	r3, [r7, #12]
 8107a44:	681b      	ldr	r3, [r3, #0]
 8107a46:	f022 0201 	bic.w	r2, r2, #1
 8107a4a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8107a4c:	68fb      	ldr	r3, [r7, #12]
 8107a4e:	2220      	movs	r2, #32
 8107a50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8107a54:	68fb      	ldr	r3, [r7, #12]
 8107a56:	2220      	movs	r2, #32
 8107a58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8107a5c:	68fb      	ldr	r3, [r7, #12]
 8107a5e:	2220      	movs	r2, #32
 8107a60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8107a64:	68fb      	ldr	r3, [r7, #12]
 8107a66:	2200      	movs	r2, #0
 8107a68:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8107a6c:	2303      	movs	r3, #3
 8107a6e:	e00f      	b.n	8107a90 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8107a70:	68fb      	ldr	r3, [r7, #12]
 8107a72:	681b      	ldr	r3, [r3, #0]
 8107a74:	69da      	ldr	r2, [r3, #28]
 8107a76:	68bb      	ldr	r3, [r7, #8]
 8107a78:	4013      	ands	r3, r2
 8107a7a:	68ba      	ldr	r2, [r7, #8]
 8107a7c:	429a      	cmp	r2, r3
 8107a7e:	bf0c      	ite	eq
 8107a80:	2301      	moveq	r3, #1
 8107a82:	2300      	movne	r3, #0
 8107a84:	b2db      	uxtb	r3, r3
 8107a86:	461a      	mov	r2, r3
 8107a88:	79fb      	ldrb	r3, [r7, #7]
 8107a8a:	429a      	cmp	r2, r3
 8107a8c:	d08d      	beq.n	81079aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8107a8e:	2300      	movs	r3, #0
}
 8107a90:	4618      	mov	r0, r3
 8107a92:	3710      	adds	r7, #16
 8107a94:	46bd      	mov	sp, r7
 8107a96:	bd80      	pop	{r7, pc}

08107a98 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8107a98:	b480      	push	{r7}
 8107a9a:	b083      	sub	sp, #12
 8107a9c:	af00      	add	r7, sp, #0
 8107a9e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8107aa0:	687b      	ldr	r3, [r7, #4]
 8107aa2:	681b      	ldr	r3, [r3, #0]
 8107aa4:	681a      	ldr	r2, [r3, #0]
 8107aa6:	687b      	ldr	r3, [r7, #4]
 8107aa8:	681b      	ldr	r3, [r3, #0]
 8107aaa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8107aae:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8107ab0:	687b      	ldr	r3, [r7, #4]
 8107ab2:	681b      	ldr	r3, [r3, #0]
 8107ab4:	689a      	ldr	r2, [r3, #8]
 8107ab6:	687b      	ldr	r3, [r7, #4]
 8107ab8:	681b      	ldr	r3, [r3, #0]
 8107aba:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8107abe:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8107ac0:	687b      	ldr	r3, [r7, #4]
 8107ac2:	2220      	movs	r2, #32
 8107ac4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8107ac8:	bf00      	nop
 8107aca:	370c      	adds	r7, #12
 8107acc:	46bd      	mov	sp, r7
 8107ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ad2:	4770      	bx	lr

08107ad4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8107ad4:	b480      	push	{r7}
 8107ad6:	b083      	sub	sp, #12
 8107ad8:	af00      	add	r7, sp, #0
 8107ada:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8107adc:	687b      	ldr	r3, [r7, #4]
 8107ade:	681b      	ldr	r3, [r3, #0]
 8107ae0:	681a      	ldr	r2, [r3, #0]
 8107ae2:	687b      	ldr	r3, [r7, #4]
 8107ae4:	681b      	ldr	r3, [r3, #0]
 8107ae6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8107aea:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8107aec:	687b      	ldr	r3, [r7, #4]
 8107aee:	681b      	ldr	r3, [r3, #0]
 8107af0:	689b      	ldr	r3, [r3, #8]
 8107af2:	687a      	ldr	r2, [r7, #4]
 8107af4:	6812      	ldr	r2, [r2, #0]
 8107af6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8107afa:	f023 0301 	bic.w	r3, r3, #1
 8107afe:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8107b00:	687b      	ldr	r3, [r7, #4]
 8107b02:	2220      	movs	r2, #32
 8107b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8107b08:	687b      	ldr	r3, [r7, #4]
 8107b0a:	2200      	movs	r2, #0
 8107b0c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8107b0e:	bf00      	nop
 8107b10:	370c      	adds	r7, #12
 8107b12:	46bd      	mov	sp, r7
 8107b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b18:	4770      	bx	lr

08107b1a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8107b1a:	b580      	push	{r7, lr}
 8107b1c:	b084      	sub	sp, #16
 8107b1e:	af00      	add	r7, sp, #0
 8107b20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8107b22:	687b      	ldr	r3, [r7, #4]
 8107b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b26:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8107b28:	687b      	ldr	r3, [r7, #4]
 8107b2a:	69db      	ldr	r3, [r3, #28]
 8107b2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107b30:	d01f      	beq.n	8107b72 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 8107b32:	68fb      	ldr	r3, [r7, #12]
 8107b34:	2200      	movs	r2, #0
 8107b36:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8107b3a:	68fb      	ldr	r3, [r7, #12]
 8107b3c:	681b      	ldr	r3, [r3, #0]
 8107b3e:	681a      	ldr	r2, [r3, #0]
 8107b40:	68fb      	ldr	r3, [r7, #12]
 8107b42:	681b      	ldr	r3, [r3, #0]
 8107b44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8107b48:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8107b4a:	68fb      	ldr	r3, [r7, #12]
 8107b4c:	681b      	ldr	r3, [r3, #0]
 8107b4e:	689a      	ldr	r2, [r3, #8]
 8107b50:	68fb      	ldr	r3, [r7, #12]
 8107b52:	681b      	ldr	r3, [r3, #0]
 8107b54:	f022 0201 	bic.w	r2, r2, #1
 8107b58:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8107b5a:	68fb      	ldr	r3, [r7, #12]
 8107b5c:	681b      	ldr	r3, [r3, #0]
 8107b5e:	689a      	ldr	r2, [r3, #8]
 8107b60:	68fb      	ldr	r3, [r7, #12]
 8107b62:	681b      	ldr	r3, [r3, #0]
 8107b64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8107b68:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8107b6a:	68fb      	ldr	r3, [r7, #12]
 8107b6c:	2220      	movs	r2, #32
 8107b6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8107b72:	68f8      	ldr	r0, [r7, #12]
 8107b74:	f7ff f858 	bl	8106c28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8107b78:	bf00      	nop
 8107b7a:	3710      	adds	r7, #16
 8107b7c:	46bd      	mov	sp, r7
 8107b7e:	bd80      	pop	{r7, pc}

08107b80 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8107b80:	b580      	push	{r7, lr}
 8107b82:	b084      	sub	sp, #16
 8107b84:	af00      	add	r7, sp, #0
 8107b86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8107b88:	687b      	ldr	r3, [r7, #4]
 8107b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b8c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8107b8e:	68f8      	ldr	r0, [r7, #12]
 8107b90:	f7ff f854 	bl	8106c3c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8107b94:	bf00      	nop
 8107b96:	3710      	adds	r7, #16
 8107b98:	46bd      	mov	sp, r7
 8107b9a:	bd80      	pop	{r7, pc}

08107b9c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8107b9c:	b580      	push	{r7, lr}
 8107b9e:	b086      	sub	sp, #24
 8107ba0:	af00      	add	r7, sp, #0
 8107ba2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8107ba4:	687b      	ldr	r3, [r7, #4]
 8107ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107ba8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8107baa:	697b      	ldr	r3, [r7, #20]
 8107bac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8107bb0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8107bb2:	697b      	ldr	r3, [r7, #20]
 8107bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107bb8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8107bba:	697b      	ldr	r3, [r7, #20]
 8107bbc:	681b      	ldr	r3, [r3, #0]
 8107bbe:	689b      	ldr	r3, [r3, #8]
 8107bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8107bc4:	2b80      	cmp	r3, #128	; 0x80
 8107bc6:	d109      	bne.n	8107bdc <UART_DMAError+0x40>
 8107bc8:	693b      	ldr	r3, [r7, #16]
 8107bca:	2b21      	cmp	r3, #33	; 0x21
 8107bcc:	d106      	bne.n	8107bdc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8107bce:	697b      	ldr	r3, [r7, #20]
 8107bd0:	2200      	movs	r2, #0
 8107bd2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8107bd6:	6978      	ldr	r0, [r7, #20]
 8107bd8:	f7ff ff5e 	bl	8107a98 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8107bdc:	697b      	ldr	r3, [r7, #20]
 8107bde:	681b      	ldr	r3, [r3, #0]
 8107be0:	689b      	ldr	r3, [r3, #8]
 8107be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107be6:	2b40      	cmp	r3, #64	; 0x40
 8107be8:	d109      	bne.n	8107bfe <UART_DMAError+0x62>
 8107bea:	68fb      	ldr	r3, [r7, #12]
 8107bec:	2b22      	cmp	r3, #34	; 0x22
 8107bee:	d106      	bne.n	8107bfe <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8107bf0:	697b      	ldr	r3, [r7, #20]
 8107bf2:	2200      	movs	r2, #0
 8107bf4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8107bf8:	6978      	ldr	r0, [r7, #20]
 8107bfa:	f7ff ff6b 	bl	8107ad4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8107bfe:	697b      	ldr	r3, [r7, #20]
 8107c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8107c04:	f043 0210 	orr.w	r2, r3, #16
 8107c08:	697b      	ldr	r3, [r7, #20]
 8107c0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8107c0e:	6978      	ldr	r0, [r7, #20]
 8107c10:	f7ff f81e 	bl	8106c50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8107c14:	bf00      	nop
 8107c16:	3718      	adds	r7, #24
 8107c18:	46bd      	mov	sp, r7
 8107c1a:	bd80      	pop	{r7, pc}

08107c1c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8107c1c:	b480      	push	{r7}
 8107c1e:	b085      	sub	sp, #20
 8107c20:	af00      	add	r7, sp, #0
 8107c22:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8107c24:	687b      	ldr	r3, [r7, #4]
 8107c26:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8107c2a:	2b01      	cmp	r3, #1
 8107c2c:	d101      	bne.n	8107c32 <HAL_UARTEx_DisableFifoMode+0x16>
 8107c2e:	2302      	movs	r3, #2
 8107c30:	e027      	b.n	8107c82 <HAL_UARTEx_DisableFifoMode+0x66>
 8107c32:	687b      	ldr	r3, [r7, #4]
 8107c34:	2201      	movs	r2, #1
 8107c36:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8107c3a:	687b      	ldr	r3, [r7, #4]
 8107c3c:	2224      	movs	r2, #36	; 0x24
 8107c3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8107c42:	687b      	ldr	r3, [r7, #4]
 8107c44:	681b      	ldr	r3, [r3, #0]
 8107c46:	681b      	ldr	r3, [r3, #0]
 8107c48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8107c4a:	687b      	ldr	r3, [r7, #4]
 8107c4c:	681b      	ldr	r3, [r3, #0]
 8107c4e:	681a      	ldr	r2, [r3, #0]
 8107c50:	687b      	ldr	r3, [r7, #4]
 8107c52:	681b      	ldr	r3, [r3, #0]
 8107c54:	f022 0201 	bic.w	r2, r2, #1
 8107c58:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8107c5a:	68fb      	ldr	r3, [r7, #12]
 8107c5c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8107c60:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8107c62:	687b      	ldr	r3, [r7, #4]
 8107c64:	2200      	movs	r2, #0
 8107c66:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8107c68:	687b      	ldr	r3, [r7, #4]
 8107c6a:	681b      	ldr	r3, [r3, #0]
 8107c6c:	68fa      	ldr	r2, [r7, #12]
 8107c6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8107c70:	687b      	ldr	r3, [r7, #4]
 8107c72:	2220      	movs	r2, #32
 8107c74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8107c78:	687b      	ldr	r3, [r7, #4]
 8107c7a:	2200      	movs	r2, #0
 8107c7c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8107c80:	2300      	movs	r3, #0
}
 8107c82:	4618      	mov	r0, r3
 8107c84:	3714      	adds	r7, #20
 8107c86:	46bd      	mov	sp, r7
 8107c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c8c:	4770      	bx	lr

08107c8e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8107c8e:	b580      	push	{r7, lr}
 8107c90:	b084      	sub	sp, #16
 8107c92:	af00      	add	r7, sp, #0
 8107c94:	6078      	str	r0, [r7, #4]
 8107c96:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8107c98:	687b      	ldr	r3, [r7, #4]
 8107c9a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8107c9e:	2b01      	cmp	r3, #1
 8107ca0:	d101      	bne.n	8107ca6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8107ca2:	2302      	movs	r3, #2
 8107ca4:	e02d      	b.n	8107d02 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8107ca6:	687b      	ldr	r3, [r7, #4]
 8107ca8:	2201      	movs	r2, #1
 8107caa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8107cae:	687b      	ldr	r3, [r7, #4]
 8107cb0:	2224      	movs	r2, #36	; 0x24
 8107cb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8107cb6:	687b      	ldr	r3, [r7, #4]
 8107cb8:	681b      	ldr	r3, [r3, #0]
 8107cba:	681b      	ldr	r3, [r3, #0]
 8107cbc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8107cbe:	687b      	ldr	r3, [r7, #4]
 8107cc0:	681b      	ldr	r3, [r3, #0]
 8107cc2:	681a      	ldr	r2, [r3, #0]
 8107cc4:	687b      	ldr	r3, [r7, #4]
 8107cc6:	681b      	ldr	r3, [r3, #0]
 8107cc8:	f022 0201 	bic.w	r2, r2, #1
 8107ccc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8107cce:	687b      	ldr	r3, [r7, #4]
 8107cd0:	681b      	ldr	r3, [r3, #0]
 8107cd2:	689b      	ldr	r3, [r3, #8]
 8107cd4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8107cd8:	687b      	ldr	r3, [r7, #4]
 8107cda:	681b      	ldr	r3, [r3, #0]
 8107cdc:	683a      	ldr	r2, [r7, #0]
 8107cde:	430a      	orrs	r2, r1
 8107ce0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8107ce2:	6878      	ldr	r0, [r7, #4]
 8107ce4:	f000 f850 	bl	8107d88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8107ce8:	687b      	ldr	r3, [r7, #4]
 8107cea:	681b      	ldr	r3, [r3, #0]
 8107cec:	68fa      	ldr	r2, [r7, #12]
 8107cee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8107cf0:	687b      	ldr	r3, [r7, #4]
 8107cf2:	2220      	movs	r2, #32
 8107cf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8107cf8:	687b      	ldr	r3, [r7, #4]
 8107cfa:	2200      	movs	r2, #0
 8107cfc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8107d00:	2300      	movs	r3, #0
}
 8107d02:	4618      	mov	r0, r3
 8107d04:	3710      	adds	r7, #16
 8107d06:	46bd      	mov	sp, r7
 8107d08:	bd80      	pop	{r7, pc}

08107d0a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8107d0a:	b580      	push	{r7, lr}
 8107d0c:	b084      	sub	sp, #16
 8107d0e:	af00      	add	r7, sp, #0
 8107d10:	6078      	str	r0, [r7, #4]
 8107d12:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8107d14:	687b      	ldr	r3, [r7, #4]
 8107d16:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8107d1a:	2b01      	cmp	r3, #1
 8107d1c:	d101      	bne.n	8107d22 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8107d1e:	2302      	movs	r3, #2
 8107d20:	e02d      	b.n	8107d7e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8107d22:	687b      	ldr	r3, [r7, #4]
 8107d24:	2201      	movs	r2, #1
 8107d26:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8107d2a:	687b      	ldr	r3, [r7, #4]
 8107d2c:	2224      	movs	r2, #36	; 0x24
 8107d2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8107d32:	687b      	ldr	r3, [r7, #4]
 8107d34:	681b      	ldr	r3, [r3, #0]
 8107d36:	681b      	ldr	r3, [r3, #0]
 8107d38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8107d3a:	687b      	ldr	r3, [r7, #4]
 8107d3c:	681b      	ldr	r3, [r3, #0]
 8107d3e:	681a      	ldr	r2, [r3, #0]
 8107d40:	687b      	ldr	r3, [r7, #4]
 8107d42:	681b      	ldr	r3, [r3, #0]
 8107d44:	f022 0201 	bic.w	r2, r2, #1
 8107d48:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8107d4a:	687b      	ldr	r3, [r7, #4]
 8107d4c:	681b      	ldr	r3, [r3, #0]
 8107d4e:	689b      	ldr	r3, [r3, #8]
 8107d50:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8107d54:	687b      	ldr	r3, [r7, #4]
 8107d56:	681b      	ldr	r3, [r3, #0]
 8107d58:	683a      	ldr	r2, [r7, #0]
 8107d5a:	430a      	orrs	r2, r1
 8107d5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8107d5e:	6878      	ldr	r0, [r7, #4]
 8107d60:	f000 f812 	bl	8107d88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8107d64:	687b      	ldr	r3, [r7, #4]
 8107d66:	681b      	ldr	r3, [r3, #0]
 8107d68:	68fa      	ldr	r2, [r7, #12]
 8107d6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8107d6c:	687b      	ldr	r3, [r7, #4]
 8107d6e:	2220      	movs	r2, #32
 8107d70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8107d74:	687b      	ldr	r3, [r7, #4]
 8107d76:	2200      	movs	r2, #0
 8107d78:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8107d7c:	2300      	movs	r3, #0
}
 8107d7e:	4618      	mov	r0, r3
 8107d80:	3710      	adds	r7, #16
 8107d82:	46bd      	mov	sp, r7
 8107d84:	bd80      	pop	{r7, pc}
	...

08107d88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8107d88:	b480      	push	{r7}
 8107d8a:	b089      	sub	sp, #36	; 0x24
 8107d8c:	af00      	add	r7, sp, #0
 8107d8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8107d90:	4a2f      	ldr	r2, [pc, #188]	; (8107e50 <UARTEx_SetNbDataToProcess+0xc8>)
 8107d92:	f107 0314 	add.w	r3, r7, #20
 8107d96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8107d9a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8107d9e:	4a2d      	ldr	r2, [pc, #180]	; (8107e54 <UARTEx_SetNbDataToProcess+0xcc>)
 8107da0:	f107 030c 	add.w	r3, r7, #12
 8107da4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8107da8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8107dac:	687b      	ldr	r3, [r7, #4]
 8107dae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107db0:	2b00      	cmp	r3, #0
 8107db2:	d108      	bne.n	8107dc6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8107db4:	687b      	ldr	r3, [r7, #4]
 8107db6:	2201      	movs	r2, #1
 8107db8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8107dbc:	687b      	ldr	r3, [r7, #4]
 8107dbe:	2201      	movs	r2, #1
 8107dc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8107dc4:	e03d      	b.n	8107e42 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8107dc6:	2310      	movs	r3, #16
 8107dc8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8107dca:	2310      	movs	r3, #16
 8107dcc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8107dce:	687b      	ldr	r3, [r7, #4]
 8107dd0:	681b      	ldr	r3, [r3, #0]
 8107dd2:	689b      	ldr	r3, [r3, #8]
 8107dd4:	0e5b      	lsrs	r3, r3, #25
 8107dd6:	b2db      	uxtb	r3, r3
 8107dd8:	f003 0307 	and.w	r3, r3, #7
 8107ddc:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8107dde:	687b      	ldr	r3, [r7, #4]
 8107de0:	681b      	ldr	r3, [r3, #0]
 8107de2:	689b      	ldr	r3, [r3, #8]
 8107de4:	0f5b      	lsrs	r3, r3, #29
 8107de6:	b2db      	uxtb	r3, r3
 8107de8:	f003 0307 	and.w	r3, r3, #7
 8107dec:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8107dee:	7fbb      	ldrb	r3, [r7, #30]
 8107df0:	7f3a      	ldrb	r2, [r7, #28]
 8107df2:	f107 0120 	add.w	r1, r7, #32
 8107df6:	440a      	add	r2, r1
 8107df8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8107dfc:	fb02 f303 	mul.w	r3, r2, r3
 8107e00:	7f3a      	ldrb	r2, [r7, #28]
 8107e02:	f107 0120 	add.w	r1, r7, #32
 8107e06:	440a      	add	r2, r1
 8107e08:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8107e0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8107e10:	b29a      	uxth	r2, r3
 8107e12:	687b      	ldr	r3, [r7, #4]
 8107e14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8107e18:	7ffb      	ldrb	r3, [r7, #31]
 8107e1a:	7f7a      	ldrb	r2, [r7, #29]
 8107e1c:	f107 0120 	add.w	r1, r7, #32
 8107e20:	440a      	add	r2, r1
 8107e22:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8107e26:	fb02 f303 	mul.w	r3, r2, r3
 8107e2a:	7f7a      	ldrb	r2, [r7, #29]
 8107e2c:	f107 0120 	add.w	r1, r7, #32
 8107e30:	440a      	add	r2, r1
 8107e32:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8107e36:	fb93 f3f2 	sdiv	r3, r3, r2
 8107e3a:	b29a      	uxth	r2, r3
 8107e3c:	687b      	ldr	r3, [r7, #4]
 8107e3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8107e42:	bf00      	nop
 8107e44:	3724      	adds	r7, #36	; 0x24
 8107e46:	46bd      	mov	sp, r7
 8107e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e4c:	4770      	bx	lr
 8107e4e:	bf00      	nop
 8107e50:	08110508 	.word	0x08110508
 8107e54:	08110510 	.word	0x08110510

08107e58 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8107e58:	b580      	push	{r7, lr}
 8107e5a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8107e5c:	4904      	ldr	r1, [pc, #16]	; (8107e70 <MX_FATFS_Init+0x18>)
 8107e5e:	4805      	ldr	r0, [pc, #20]	; (8107e74 <MX_FATFS_Init+0x1c>)
 8107e60:	f000 f8b0 	bl	8107fc4 <FATFS_LinkDriver>
 8107e64:	4603      	mov	r3, r0
 8107e66:	461a      	mov	r2, r3
 8107e68:	4b03      	ldr	r3, [pc, #12]	; (8107e78 <MX_FATFS_Init+0x20>)
 8107e6a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8107e6c:	bf00      	nop
 8107e6e:	bd80      	pop	{r7, pc}
 8107e70:	10009b58 	.word	0x10009b58
 8107e74:	10000010 	.word	0x10000010
 8107e78:	10009b5c 	.word	0x10009b5c

08107e7c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8107e7c:	b480      	push	{r7}
 8107e7e:	b083      	sub	sp, #12
 8107e80:	af00      	add	r7, sp, #0
 8107e82:	4603      	mov	r3, r0
 8107e84:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8107e86:	4b06      	ldr	r3, [pc, #24]	; (8107ea0 <USER_initialize+0x24>)
 8107e88:	2201      	movs	r2, #1
 8107e8a:	701a      	strb	r2, [r3, #0]
    return Stat;
 8107e8c:	4b04      	ldr	r3, [pc, #16]	; (8107ea0 <USER_initialize+0x24>)
 8107e8e:	781b      	ldrb	r3, [r3, #0]
 8107e90:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8107e92:	4618      	mov	r0, r3
 8107e94:	370c      	adds	r7, #12
 8107e96:	46bd      	mov	sp, r7
 8107e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e9c:	4770      	bx	lr
 8107e9e:	bf00      	nop
 8107ea0:	1000000d 	.word	0x1000000d

08107ea4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8107ea4:	b480      	push	{r7}
 8107ea6:	b083      	sub	sp, #12
 8107ea8:	af00      	add	r7, sp, #0
 8107eaa:	4603      	mov	r3, r0
 8107eac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8107eae:	4b06      	ldr	r3, [pc, #24]	; (8107ec8 <USER_status+0x24>)
 8107eb0:	2201      	movs	r2, #1
 8107eb2:	701a      	strb	r2, [r3, #0]
    return Stat;
 8107eb4:	4b04      	ldr	r3, [pc, #16]	; (8107ec8 <USER_status+0x24>)
 8107eb6:	781b      	ldrb	r3, [r3, #0]
 8107eb8:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8107eba:	4618      	mov	r0, r3
 8107ebc:	370c      	adds	r7, #12
 8107ebe:	46bd      	mov	sp, r7
 8107ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ec4:	4770      	bx	lr
 8107ec6:	bf00      	nop
 8107ec8:	1000000d 	.word	0x1000000d

08107ecc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8107ecc:	b480      	push	{r7}
 8107ece:	b085      	sub	sp, #20
 8107ed0:	af00      	add	r7, sp, #0
 8107ed2:	60b9      	str	r1, [r7, #8]
 8107ed4:	607a      	str	r2, [r7, #4]
 8107ed6:	603b      	str	r3, [r7, #0]
 8107ed8:	4603      	mov	r3, r0
 8107eda:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8107edc:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8107ede:	4618      	mov	r0, r3
 8107ee0:	3714      	adds	r7, #20
 8107ee2:	46bd      	mov	sp, r7
 8107ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ee8:	4770      	bx	lr

08107eea <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8107eea:	b480      	push	{r7}
 8107eec:	b085      	sub	sp, #20
 8107eee:	af00      	add	r7, sp, #0
 8107ef0:	60b9      	str	r1, [r7, #8]
 8107ef2:	607a      	str	r2, [r7, #4]
 8107ef4:	603b      	str	r3, [r7, #0]
 8107ef6:	4603      	mov	r3, r0
 8107ef8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8107efa:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8107efc:	4618      	mov	r0, r3
 8107efe:	3714      	adds	r7, #20
 8107f00:	46bd      	mov	sp, r7
 8107f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f06:	4770      	bx	lr

08107f08 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8107f08:	b480      	push	{r7}
 8107f0a:	b085      	sub	sp, #20
 8107f0c:	af00      	add	r7, sp, #0
 8107f0e:	4603      	mov	r3, r0
 8107f10:	603a      	str	r2, [r7, #0]
 8107f12:	71fb      	strb	r3, [r7, #7]
 8107f14:	460b      	mov	r3, r1
 8107f16:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8107f18:	2301      	movs	r3, #1
 8107f1a:	73fb      	strb	r3, [r7, #15]
    return res;
 8107f1c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8107f1e:	4618      	mov	r0, r3
 8107f20:	3714      	adds	r7, #20
 8107f22:	46bd      	mov	sp, r7
 8107f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f28:	4770      	bx	lr
	...

08107f2c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8107f2c:	b480      	push	{r7}
 8107f2e:	b087      	sub	sp, #28
 8107f30:	af00      	add	r7, sp, #0
 8107f32:	60f8      	str	r0, [r7, #12]
 8107f34:	60b9      	str	r1, [r7, #8]
 8107f36:	4613      	mov	r3, r2
 8107f38:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8107f3a:	2301      	movs	r3, #1
 8107f3c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8107f3e:	2300      	movs	r3, #0
 8107f40:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8107f42:	4b1f      	ldr	r3, [pc, #124]	; (8107fc0 <FATFS_LinkDriverEx+0x94>)
 8107f44:	7a5b      	ldrb	r3, [r3, #9]
 8107f46:	b2db      	uxtb	r3, r3
 8107f48:	2b00      	cmp	r3, #0
 8107f4a:	d131      	bne.n	8107fb0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8107f4c:	4b1c      	ldr	r3, [pc, #112]	; (8107fc0 <FATFS_LinkDriverEx+0x94>)
 8107f4e:	7a5b      	ldrb	r3, [r3, #9]
 8107f50:	b2db      	uxtb	r3, r3
 8107f52:	461a      	mov	r2, r3
 8107f54:	4b1a      	ldr	r3, [pc, #104]	; (8107fc0 <FATFS_LinkDriverEx+0x94>)
 8107f56:	2100      	movs	r1, #0
 8107f58:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8107f5a:	4b19      	ldr	r3, [pc, #100]	; (8107fc0 <FATFS_LinkDriverEx+0x94>)
 8107f5c:	7a5b      	ldrb	r3, [r3, #9]
 8107f5e:	b2db      	uxtb	r3, r3
 8107f60:	4a17      	ldr	r2, [pc, #92]	; (8107fc0 <FATFS_LinkDriverEx+0x94>)
 8107f62:	009b      	lsls	r3, r3, #2
 8107f64:	4413      	add	r3, r2
 8107f66:	68fa      	ldr	r2, [r7, #12]
 8107f68:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8107f6a:	4b15      	ldr	r3, [pc, #84]	; (8107fc0 <FATFS_LinkDriverEx+0x94>)
 8107f6c:	7a5b      	ldrb	r3, [r3, #9]
 8107f6e:	b2db      	uxtb	r3, r3
 8107f70:	461a      	mov	r2, r3
 8107f72:	4b13      	ldr	r3, [pc, #76]	; (8107fc0 <FATFS_LinkDriverEx+0x94>)
 8107f74:	4413      	add	r3, r2
 8107f76:	79fa      	ldrb	r2, [r7, #7]
 8107f78:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8107f7a:	4b11      	ldr	r3, [pc, #68]	; (8107fc0 <FATFS_LinkDriverEx+0x94>)
 8107f7c:	7a5b      	ldrb	r3, [r3, #9]
 8107f7e:	b2db      	uxtb	r3, r3
 8107f80:	1c5a      	adds	r2, r3, #1
 8107f82:	b2d1      	uxtb	r1, r2
 8107f84:	4a0e      	ldr	r2, [pc, #56]	; (8107fc0 <FATFS_LinkDriverEx+0x94>)
 8107f86:	7251      	strb	r1, [r2, #9]
 8107f88:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8107f8a:	7dbb      	ldrb	r3, [r7, #22]
 8107f8c:	3330      	adds	r3, #48	; 0x30
 8107f8e:	b2da      	uxtb	r2, r3
 8107f90:	68bb      	ldr	r3, [r7, #8]
 8107f92:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8107f94:	68bb      	ldr	r3, [r7, #8]
 8107f96:	3301      	adds	r3, #1
 8107f98:	223a      	movs	r2, #58	; 0x3a
 8107f9a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8107f9c:	68bb      	ldr	r3, [r7, #8]
 8107f9e:	3302      	adds	r3, #2
 8107fa0:	222f      	movs	r2, #47	; 0x2f
 8107fa2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8107fa4:	68bb      	ldr	r3, [r7, #8]
 8107fa6:	3303      	adds	r3, #3
 8107fa8:	2200      	movs	r2, #0
 8107faa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8107fac:	2300      	movs	r3, #0
 8107fae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8107fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8107fb2:	4618      	mov	r0, r3
 8107fb4:	371c      	adds	r7, #28
 8107fb6:	46bd      	mov	sp, r7
 8107fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107fbc:	4770      	bx	lr
 8107fbe:	bf00      	nop
 8107fc0:	10000478 	.word	0x10000478

08107fc4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8107fc4:	b580      	push	{r7, lr}
 8107fc6:	b082      	sub	sp, #8
 8107fc8:	af00      	add	r7, sp, #0
 8107fca:	6078      	str	r0, [r7, #4]
 8107fcc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8107fce:	2200      	movs	r2, #0
 8107fd0:	6839      	ldr	r1, [r7, #0]
 8107fd2:	6878      	ldr	r0, [r7, #4]
 8107fd4:	f7ff ffaa 	bl	8107f2c <FATFS_LinkDriverEx>
 8107fd8:	4603      	mov	r3, r0
}
 8107fda:	4618      	mov	r0, r3
 8107fdc:	3708      	adds	r7, #8
 8107fde:	46bd      	mov	sp, r7
 8107fe0:	bd80      	pop	{r7, pc}

08107fe2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8107fe2:	b480      	push	{r7}
 8107fe4:	b085      	sub	sp, #20
 8107fe6:	af00      	add	r7, sp, #0
 8107fe8:	4603      	mov	r3, r0
 8107fea:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8107fec:	2300      	movs	r3, #0
 8107fee:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8107ff0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8107ff4:	2b84      	cmp	r3, #132	; 0x84
 8107ff6:	d005      	beq.n	8108004 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8107ff8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8107ffc:	68fb      	ldr	r3, [r7, #12]
 8107ffe:	4413      	add	r3, r2
 8108000:	3303      	adds	r3, #3
 8108002:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8108004:	68fb      	ldr	r3, [r7, #12]
}
 8108006:	4618      	mov	r0, r3
 8108008:	3714      	adds	r7, #20
 810800a:	46bd      	mov	sp, r7
 810800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108010:	4770      	bx	lr

08108012 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8108012:	b580      	push	{r7, lr}
 8108014:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8108016:	f001 fb59 	bl	81096cc <vTaskStartScheduler>
  
  return osOK;
 810801a:	2300      	movs	r3, #0
}
 810801c:	4618      	mov	r0, r3
 810801e:	bd80      	pop	{r7, pc}

08108020 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8108020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8108022:	b089      	sub	sp, #36	; 0x24
 8108024:	af04      	add	r7, sp, #16
 8108026:	6078      	str	r0, [r7, #4]
 8108028:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 810802a:	687b      	ldr	r3, [r7, #4]
 810802c:	695b      	ldr	r3, [r3, #20]
 810802e:	2b00      	cmp	r3, #0
 8108030:	d020      	beq.n	8108074 <osThreadCreate+0x54>
 8108032:	687b      	ldr	r3, [r7, #4]
 8108034:	699b      	ldr	r3, [r3, #24]
 8108036:	2b00      	cmp	r3, #0
 8108038:	d01c      	beq.n	8108074 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 810803a:	687b      	ldr	r3, [r7, #4]
 810803c:	685c      	ldr	r4, [r3, #4]
 810803e:	687b      	ldr	r3, [r7, #4]
 8108040:	681d      	ldr	r5, [r3, #0]
 8108042:	687b      	ldr	r3, [r7, #4]
 8108044:	691e      	ldr	r6, [r3, #16]
 8108046:	687b      	ldr	r3, [r7, #4]
 8108048:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 810804c:	4618      	mov	r0, r3
 810804e:	f7ff ffc8 	bl	8107fe2 <makeFreeRtosPriority>
 8108052:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8108054:	687b      	ldr	r3, [r7, #4]
 8108056:	695b      	ldr	r3, [r3, #20]
 8108058:	687a      	ldr	r2, [r7, #4]
 810805a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 810805c:	9202      	str	r2, [sp, #8]
 810805e:	9301      	str	r3, [sp, #4]
 8108060:	9100      	str	r1, [sp, #0]
 8108062:	683b      	ldr	r3, [r7, #0]
 8108064:	4632      	mov	r2, r6
 8108066:	4629      	mov	r1, r5
 8108068:	4620      	mov	r0, r4
 810806a:	f001 f96b 	bl	8109344 <xTaskCreateStatic>
 810806e:	4603      	mov	r3, r0
 8108070:	60fb      	str	r3, [r7, #12]
 8108072:	e01c      	b.n	81080ae <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8108074:	687b      	ldr	r3, [r7, #4]
 8108076:	685c      	ldr	r4, [r3, #4]
 8108078:	687b      	ldr	r3, [r7, #4]
 810807a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 810807c:	687b      	ldr	r3, [r7, #4]
 810807e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8108080:	b29e      	uxth	r6, r3
 8108082:	687b      	ldr	r3, [r7, #4]
 8108084:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8108088:	4618      	mov	r0, r3
 810808a:	f7ff ffaa 	bl	8107fe2 <makeFreeRtosPriority>
 810808e:	4602      	mov	r2, r0
 8108090:	f107 030c 	add.w	r3, r7, #12
 8108094:	9301      	str	r3, [sp, #4]
 8108096:	9200      	str	r2, [sp, #0]
 8108098:	683b      	ldr	r3, [r7, #0]
 810809a:	4632      	mov	r2, r6
 810809c:	4629      	mov	r1, r5
 810809e:	4620      	mov	r0, r4
 81080a0:	f001 f9aa 	bl	81093f8 <xTaskCreate>
 81080a4:	4603      	mov	r3, r0
 81080a6:	2b01      	cmp	r3, #1
 81080a8:	d001      	beq.n	81080ae <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 81080aa:	2300      	movs	r3, #0
 81080ac:	e000      	b.n	81080b0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 81080ae:	68fb      	ldr	r3, [r7, #12]
}
 81080b0:	4618      	mov	r0, r3
 81080b2:	3714      	adds	r7, #20
 81080b4:	46bd      	mov	sp, r7
 81080b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

081080b8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 81080b8:	b580      	push	{r7, lr}
 81080ba:	b084      	sub	sp, #16
 81080bc:	af00      	add	r7, sp, #0
 81080be:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 81080c0:	687b      	ldr	r3, [r7, #4]
 81080c2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 81080c4:	68fb      	ldr	r3, [r7, #12]
 81080c6:	2b00      	cmp	r3, #0
 81080c8:	d001      	beq.n	81080ce <osDelay+0x16>
 81080ca:	68fb      	ldr	r3, [r7, #12]
 81080cc:	e000      	b.n	81080d0 <osDelay+0x18>
 81080ce:	2301      	movs	r3, #1
 81080d0:	4618      	mov	r0, r3
 81080d2:	f001 fac7 	bl	8109664 <vTaskDelay>
  
  return osOK;
 81080d6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 81080d8:	4618      	mov	r0, r3
 81080da:	3710      	adds	r7, #16
 81080dc:	46bd      	mov	sp, r7
 81080de:	bd80      	pop	{r7, pc}

081080e0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 81080e0:	b580      	push	{r7, lr}
 81080e2:	b086      	sub	sp, #24
 81080e4:	af02      	add	r7, sp, #8
 81080e6:	6078      	str	r0, [r7, #4]
 81080e8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 81080ea:	687b      	ldr	r3, [r7, #4]
 81080ec:	685b      	ldr	r3, [r3, #4]
 81080ee:	2b00      	cmp	r3, #0
 81080f0:	d010      	beq.n	8108114 <osSemaphoreCreate+0x34>
    if (count == 1) {
 81080f2:	683b      	ldr	r3, [r7, #0]
 81080f4:	2b01      	cmp	r3, #1
 81080f6:	d10b      	bne.n	8108110 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 81080f8:	687b      	ldr	r3, [r7, #4]
 81080fa:	685a      	ldr	r2, [r3, #4]
 81080fc:	2303      	movs	r3, #3
 81080fe:	9300      	str	r3, [sp, #0]
 8108100:	4613      	mov	r3, r2
 8108102:	2200      	movs	r2, #0
 8108104:	2100      	movs	r1, #0
 8108106:	2001      	movs	r0, #1
 8108108:	f000 fd14 	bl	8108b34 <xQueueGenericCreateStatic>
 810810c:	4603      	mov	r3, r0
 810810e:	e016      	b.n	810813e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8108110:	2300      	movs	r3, #0
 8108112:	e014      	b.n	810813e <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8108114:	683b      	ldr	r3, [r7, #0]
 8108116:	2b01      	cmp	r3, #1
 8108118:	d110      	bne.n	810813c <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 810811a:	2203      	movs	r2, #3
 810811c:	2100      	movs	r1, #0
 810811e:	2001      	movs	r0, #1
 8108120:	f000 fd7b 	bl	8108c1a <xQueueGenericCreate>
 8108124:	60f8      	str	r0, [r7, #12]
 8108126:	68fb      	ldr	r3, [r7, #12]
 8108128:	2b00      	cmp	r3, #0
 810812a:	d005      	beq.n	8108138 <osSemaphoreCreate+0x58>
 810812c:	2300      	movs	r3, #0
 810812e:	2200      	movs	r2, #0
 8108130:	2100      	movs	r1, #0
 8108132:	68f8      	ldr	r0, [r7, #12]
 8108134:	f000 fe02 	bl	8108d3c <xQueueGenericSend>
      return sema;
 8108138:	68fb      	ldr	r3, [r7, #12]
 810813a:	e000      	b.n	810813e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 810813c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 810813e:	4618      	mov	r0, r3
 8108140:	3710      	adds	r7, #16
 8108142:	46bd      	mov	sp, r7
 8108144:	bd80      	pop	{r7, pc}
	...

08108148 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8108148:	b580      	push	{r7, lr}
 810814a:	b08a      	sub	sp, #40	; 0x28
 810814c:	af00      	add	r7, sp, #0
 810814e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8108150:	2300      	movs	r3, #0
 8108152:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8108154:	f001 fb18 	bl	8109788 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8108158:	4b57      	ldr	r3, [pc, #348]	; (81082b8 <pvPortMalloc+0x170>)
 810815a:	681b      	ldr	r3, [r3, #0]
 810815c:	2b00      	cmp	r3, #0
 810815e:	d101      	bne.n	8108164 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8108160:	f000 f90c 	bl	810837c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8108164:	4b55      	ldr	r3, [pc, #340]	; (81082bc <pvPortMalloc+0x174>)
 8108166:	681a      	ldr	r2, [r3, #0]
 8108168:	687b      	ldr	r3, [r7, #4]
 810816a:	4013      	ands	r3, r2
 810816c:	2b00      	cmp	r3, #0
 810816e:	f040 808c 	bne.w	810828a <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8108172:	687b      	ldr	r3, [r7, #4]
 8108174:	2b00      	cmp	r3, #0
 8108176:	d01c      	beq.n	81081b2 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8108178:	2208      	movs	r2, #8
 810817a:	687b      	ldr	r3, [r7, #4]
 810817c:	4413      	add	r3, r2
 810817e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8108180:	687b      	ldr	r3, [r7, #4]
 8108182:	f003 0307 	and.w	r3, r3, #7
 8108186:	2b00      	cmp	r3, #0
 8108188:	d013      	beq.n	81081b2 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 810818a:	687b      	ldr	r3, [r7, #4]
 810818c:	f023 0307 	bic.w	r3, r3, #7
 8108190:	3308      	adds	r3, #8
 8108192:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8108194:	687b      	ldr	r3, [r7, #4]
 8108196:	f003 0307 	and.w	r3, r3, #7
 810819a:	2b00      	cmp	r3, #0
 810819c:	d009      	beq.n	81081b2 <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 810819e:	f04f 0350 	mov.w	r3, #80	; 0x50
 81081a2:	f383 8811 	msr	BASEPRI, r3
 81081a6:	f3bf 8f6f 	isb	sy
 81081aa:	f3bf 8f4f 	dsb	sy
 81081ae:	617b      	str	r3, [r7, #20]
 81081b0:	e7fe      	b.n	81081b0 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 81081b2:	687b      	ldr	r3, [r7, #4]
 81081b4:	2b00      	cmp	r3, #0
 81081b6:	d068      	beq.n	810828a <pvPortMalloc+0x142>
 81081b8:	4b41      	ldr	r3, [pc, #260]	; (81082c0 <pvPortMalloc+0x178>)
 81081ba:	681b      	ldr	r3, [r3, #0]
 81081bc:	687a      	ldr	r2, [r7, #4]
 81081be:	429a      	cmp	r2, r3
 81081c0:	d863      	bhi.n	810828a <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 81081c2:	4b40      	ldr	r3, [pc, #256]	; (81082c4 <pvPortMalloc+0x17c>)
 81081c4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 81081c6:	4b3f      	ldr	r3, [pc, #252]	; (81082c4 <pvPortMalloc+0x17c>)
 81081c8:	681b      	ldr	r3, [r3, #0]
 81081ca:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 81081cc:	e004      	b.n	81081d8 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 81081ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81081d0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 81081d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81081d4:	681b      	ldr	r3, [r3, #0]
 81081d6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 81081d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81081da:	685b      	ldr	r3, [r3, #4]
 81081dc:	687a      	ldr	r2, [r7, #4]
 81081de:	429a      	cmp	r2, r3
 81081e0:	d903      	bls.n	81081ea <pvPortMalloc+0xa2>
 81081e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81081e4:	681b      	ldr	r3, [r3, #0]
 81081e6:	2b00      	cmp	r3, #0
 81081e8:	d1f1      	bne.n	81081ce <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 81081ea:	4b33      	ldr	r3, [pc, #204]	; (81082b8 <pvPortMalloc+0x170>)
 81081ec:	681b      	ldr	r3, [r3, #0]
 81081ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81081f0:	429a      	cmp	r2, r3
 81081f2:	d04a      	beq.n	810828a <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 81081f4:	6a3b      	ldr	r3, [r7, #32]
 81081f6:	681b      	ldr	r3, [r3, #0]
 81081f8:	2208      	movs	r2, #8
 81081fa:	4413      	add	r3, r2
 81081fc:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 81081fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108200:	681a      	ldr	r2, [r3, #0]
 8108202:	6a3b      	ldr	r3, [r7, #32]
 8108204:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8108206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108208:	685a      	ldr	r2, [r3, #4]
 810820a:	687b      	ldr	r3, [r7, #4]
 810820c:	1ad2      	subs	r2, r2, r3
 810820e:	2308      	movs	r3, #8
 8108210:	005b      	lsls	r3, r3, #1
 8108212:	429a      	cmp	r2, r3
 8108214:	d91e      	bls.n	8108254 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8108216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8108218:	687b      	ldr	r3, [r7, #4]
 810821a:	4413      	add	r3, r2
 810821c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 810821e:	69bb      	ldr	r3, [r7, #24]
 8108220:	f003 0307 	and.w	r3, r3, #7
 8108224:	2b00      	cmp	r3, #0
 8108226:	d009      	beq.n	810823c <pvPortMalloc+0xf4>
 8108228:	f04f 0350 	mov.w	r3, #80	; 0x50
 810822c:	f383 8811 	msr	BASEPRI, r3
 8108230:	f3bf 8f6f 	isb	sy
 8108234:	f3bf 8f4f 	dsb	sy
 8108238:	613b      	str	r3, [r7, #16]
 810823a:	e7fe      	b.n	810823a <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 810823c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810823e:	685a      	ldr	r2, [r3, #4]
 8108240:	687b      	ldr	r3, [r7, #4]
 8108242:	1ad2      	subs	r2, r2, r3
 8108244:	69bb      	ldr	r3, [r7, #24]
 8108246:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8108248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810824a:	687a      	ldr	r2, [r7, #4]
 810824c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 810824e:	69b8      	ldr	r0, [r7, #24]
 8108250:	f000 f8f6 	bl	8108440 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8108254:	4b1a      	ldr	r3, [pc, #104]	; (81082c0 <pvPortMalloc+0x178>)
 8108256:	681a      	ldr	r2, [r3, #0]
 8108258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810825a:	685b      	ldr	r3, [r3, #4]
 810825c:	1ad3      	subs	r3, r2, r3
 810825e:	4a18      	ldr	r2, [pc, #96]	; (81082c0 <pvPortMalloc+0x178>)
 8108260:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8108262:	4b17      	ldr	r3, [pc, #92]	; (81082c0 <pvPortMalloc+0x178>)
 8108264:	681a      	ldr	r2, [r3, #0]
 8108266:	4b18      	ldr	r3, [pc, #96]	; (81082c8 <pvPortMalloc+0x180>)
 8108268:	681b      	ldr	r3, [r3, #0]
 810826a:	429a      	cmp	r2, r3
 810826c:	d203      	bcs.n	8108276 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 810826e:	4b14      	ldr	r3, [pc, #80]	; (81082c0 <pvPortMalloc+0x178>)
 8108270:	681b      	ldr	r3, [r3, #0]
 8108272:	4a15      	ldr	r2, [pc, #84]	; (81082c8 <pvPortMalloc+0x180>)
 8108274:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8108276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108278:	685a      	ldr	r2, [r3, #4]
 810827a:	4b10      	ldr	r3, [pc, #64]	; (81082bc <pvPortMalloc+0x174>)
 810827c:	681b      	ldr	r3, [r3, #0]
 810827e:	431a      	orrs	r2, r3
 8108280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108282:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8108284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108286:	2200      	movs	r2, #0
 8108288:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 810828a:	f001 fa8b 	bl	81097a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 810828e:	69fb      	ldr	r3, [r7, #28]
 8108290:	f003 0307 	and.w	r3, r3, #7
 8108294:	2b00      	cmp	r3, #0
 8108296:	d009      	beq.n	81082ac <pvPortMalloc+0x164>
 8108298:	f04f 0350 	mov.w	r3, #80	; 0x50
 810829c:	f383 8811 	msr	BASEPRI, r3
 81082a0:	f3bf 8f6f 	isb	sy
 81082a4:	f3bf 8f4f 	dsb	sy
 81082a8:	60fb      	str	r3, [r7, #12]
 81082aa:	e7fe      	b.n	81082aa <pvPortMalloc+0x162>
	return pvReturn;
 81082ac:	69fb      	ldr	r3, [r7, #28]
}
 81082ae:	4618      	mov	r0, r3
 81082b0:	3728      	adds	r7, #40	; 0x28
 81082b2:	46bd      	mov	sp, r7
 81082b4:	bd80      	pop	{r7, pc}
 81082b6:	bf00      	nop
 81082b8:	1000408c 	.word	0x1000408c
 81082bc:	10004098 	.word	0x10004098
 81082c0:	10004090 	.word	0x10004090
 81082c4:	10004084 	.word	0x10004084
 81082c8:	10004094 	.word	0x10004094

081082cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 81082cc:	b580      	push	{r7, lr}
 81082ce:	b086      	sub	sp, #24
 81082d0:	af00      	add	r7, sp, #0
 81082d2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 81082d4:	687b      	ldr	r3, [r7, #4]
 81082d6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 81082d8:	687b      	ldr	r3, [r7, #4]
 81082da:	2b00      	cmp	r3, #0
 81082dc:	d046      	beq.n	810836c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 81082de:	2308      	movs	r3, #8
 81082e0:	425b      	negs	r3, r3
 81082e2:	697a      	ldr	r2, [r7, #20]
 81082e4:	4413      	add	r3, r2
 81082e6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 81082e8:	697b      	ldr	r3, [r7, #20]
 81082ea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 81082ec:	693b      	ldr	r3, [r7, #16]
 81082ee:	685a      	ldr	r2, [r3, #4]
 81082f0:	4b20      	ldr	r3, [pc, #128]	; (8108374 <vPortFree+0xa8>)
 81082f2:	681b      	ldr	r3, [r3, #0]
 81082f4:	4013      	ands	r3, r2
 81082f6:	2b00      	cmp	r3, #0
 81082f8:	d109      	bne.n	810830e <vPortFree+0x42>
 81082fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 81082fe:	f383 8811 	msr	BASEPRI, r3
 8108302:	f3bf 8f6f 	isb	sy
 8108306:	f3bf 8f4f 	dsb	sy
 810830a:	60fb      	str	r3, [r7, #12]
 810830c:	e7fe      	b.n	810830c <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 810830e:	693b      	ldr	r3, [r7, #16]
 8108310:	681b      	ldr	r3, [r3, #0]
 8108312:	2b00      	cmp	r3, #0
 8108314:	d009      	beq.n	810832a <vPortFree+0x5e>
 8108316:	f04f 0350 	mov.w	r3, #80	; 0x50
 810831a:	f383 8811 	msr	BASEPRI, r3
 810831e:	f3bf 8f6f 	isb	sy
 8108322:	f3bf 8f4f 	dsb	sy
 8108326:	60bb      	str	r3, [r7, #8]
 8108328:	e7fe      	b.n	8108328 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 810832a:	693b      	ldr	r3, [r7, #16]
 810832c:	685a      	ldr	r2, [r3, #4]
 810832e:	4b11      	ldr	r3, [pc, #68]	; (8108374 <vPortFree+0xa8>)
 8108330:	681b      	ldr	r3, [r3, #0]
 8108332:	4013      	ands	r3, r2
 8108334:	2b00      	cmp	r3, #0
 8108336:	d019      	beq.n	810836c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8108338:	693b      	ldr	r3, [r7, #16]
 810833a:	681b      	ldr	r3, [r3, #0]
 810833c:	2b00      	cmp	r3, #0
 810833e:	d115      	bne.n	810836c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8108340:	693b      	ldr	r3, [r7, #16]
 8108342:	685a      	ldr	r2, [r3, #4]
 8108344:	4b0b      	ldr	r3, [pc, #44]	; (8108374 <vPortFree+0xa8>)
 8108346:	681b      	ldr	r3, [r3, #0]
 8108348:	43db      	mvns	r3, r3
 810834a:	401a      	ands	r2, r3
 810834c:	693b      	ldr	r3, [r7, #16]
 810834e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8108350:	f001 fa1a 	bl	8109788 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8108354:	693b      	ldr	r3, [r7, #16]
 8108356:	685a      	ldr	r2, [r3, #4]
 8108358:	4b07      	ldr	r3, [pc, #28]	; (8108378 <vPortFree+0xac>)
 810835a:	681b      	ldr	r3, [r3, #0]
 810835c:	4413      	add	r3, r2
 810835e:	4a06      	ldr	r2, [pc, #24]	; (8108378 <vPortFree+0xac>)
 8108360:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8108362:	6938      	ldr	r0, [r7, #16]
 8108364:	f000 f86c 	bl	8108440 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8108368:	f001 fa1c 	bl	81097a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 810836c:	bf00      	nop
 810836e:	3718      	adds	r7, #24
 8108370:	46bd      	mov	sp, r7
 8108372:	bd80      	pop	{r7, pc}
 8108374:	10004098 	.word	0x10004098
 8108378:	10004090 	.word	0x10004090

0810837c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 810837c:	b480      	push	{r7}
 810837e:	b085      	sub	sp, #20
 8108380:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8108382:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8108386:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8108388:	4b27      	ldr	r3, [pc, #156]	; (8108428 <prvHeapInit+0xac>)
 810838a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 810838c:	68fb      	ldr	r3, [r7, #12]
 810838e:	f003 0307 	and.w	r3, r3, #7
 8108392:	2b00      	cmp	r3, #0
 8108394:	d00c      	beq.n	81083b0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8108396:	68fb      	ldr	r3, [r7, #12]
 8108398:	3307      	adds	r3, #7
 810839a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 810839c:	68fb      	ldr	r3, [r7, #12]
 810839e:	f023 0307 	bic.w	r3, r3, #7
 81083a2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 81083a4:	68ba      	ldr	r2, [r7, #8]
 81083a6:	68fb      	ldr	r3, [r7, #12]
 81083a8:	1ad3      	subs	r3, r2, r3
 81083aa:	4a1f      	ldr	r2, [pc, #124]	; (8108428 <prvHeapInit+0xac>)
 81083ac:	4413      	add	r3, r2
 81083ae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 81083b0:	68fb      	ldr	r3, [r7, #12]
 81083b2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 81083b4:	4a1d      	ldr	r2, [pc, #116]	; (810842c <prvHeapInit+0xb0>)
 81083b6:	687b      	ldr	r3, [r7, #4]
 81083b8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 81083ba:	4b1c      	ldr	r3, [pc, #112]	; (810842c <prvHeapInit+0xb0>)
 81083bc:	2200      	movs	r2, #0
 81083be:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 81083c0:	687b      	ldr	r3, [r7, #4]
 81083c2:	68ba      	ldr	r2, [r7, #8]
 81083c4:	4413      	add	r3, r2
 81083c6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 81083c8:	2208      	movs	r2, #8
 81083ca:	68fb      	ldr	r3, [r7, #12]
 81083cc:	1a9b      	subs	r3, r3, r2
 81083ce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 81083d0:	68fb      	ldr	r3, [r7, #12]
 81083d2:	f023 0307 	bic.w	r3, r3, #7
 81083d6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 81083d8:	68fb      	ldr	r3, [r7, #12]
 81083da:	4a15      	ldr	r2, [pc, #84]	; (8108430 <prvHeapInit+0xb4>)
 81083dc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 81083de:	4b14      	ldr	r3, [pc, #80]	; (8108430 <prvHeapInit+0xb4>)
 81083e0:	681b      	ldr	r3, [r3, #0]
 81083e2:	2200      	movs	r2, #0
 81083e4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 81083e6:	4b12      	ldr	r3, [pc, #72]	; (8108430 <prvHeapInit+0xb4>)
 81083e8:	681b      	ldr	r3, [r3, #0]
 81083ea:	2200      	movs	r2, #0
 81083ec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 81083ee:	687b      	ldr	r3, [r7, #4]
 81083f0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 81083f2:	683b      	ldr	r3, [r7, #0]
 81083f4:	68fa      	ldr	r2, [r7, #12]
 81083f6:	1ad2      	subs	r2, r2, r3
 81083f8:	683b      	ldr	r3, [r7, #0]
 81083fa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 81083fc:	4b0c      	ldr	r3, [pc, #48]	; (8108430 <prvHeapInit+0xb4>)
 81083fe:	681a      	ldr	r2, [r3, #0]
 8108400:	683b      	ldr	r3, [r7, #0]
 8108402:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8108404:	683b      	ldr	r3, [r7, #0]
 8108406:	685b      	ldr	r3, [r3, #4]
 8108408:	4a0a      	ldr	r2, [pc, #40]	; (8108434 <prvHeapInit+0xb8>)
 810840a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810840c:	683b      	ldr	r3, [r7, #0]
 810840e:	685b      	ldr	r3, [r3, #4]
 8108410:	4a09      	ldr	r2, [pc, #36]	; (8108438 <prvHeapInit+0xbc>)
 8108412:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8108414:	4b09      	ldr	r3, [pc, #36]	; (810843c <prvHeapInit+0xc0>)
 8108416:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 810841a:	601a      	str	r2, [r3, #0]
}
 810841c:	bf00      	nop
 810841e:	3714      	adds	r7, #20
 8108420:	46bd      	mov	sp, r7
 8108422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108426:	4770      	bx	lr
 8108428:	10000484 	.word	0x10000484
 810842c:	10004084 	.word	0x10004084
 8108430:	1000408c 	.word	0x1000408c
 8108434:	10004094 	.word	0x10004094
 8108438:	10004090 	.word	0x10004090
 810843c:	10004098 	.word	0x10004098

08108440 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8108440:	b480      	push	{r7}
 8108442:	b085      	sub	sp, #20
 8108444:	af00      	add	r7, sp, #0
 8108446:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8108448:	4b28      	ldr	r3, [pc, #160]	; (81084ec <prvInsertBlockIntoFreeList+0xac>)
 810844a:	60fb      	str	r3, [r7, #12]
 810844c:	e002      	b.n	8108454 <prvInsertBlockIntoFreeList+0x14>
 810844e:	68fb      	ldr	r3, [r7, #12]
 8108450:	681b      	ldr	r3, [r3, #0]
 8108452:	60fb      	str	r3, [r7, #12]
 8108454:	68fb      	ldr	r3, [r7, #12]
 8108456:	681b      	ldr	r3, [r3, #0]
 8108458:	687a      	ldr	r2, [r7, #4]
 810845a:	429a      	cmp	r2, r3
 810845c:	d8f7      	bhi.n	810844e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 810845e:	68fb      	ldr	r3, [r7, #12]
 8108460:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8108462:	68fb      	ldr	r3, [r7, #12]
 8108464:	685b      	ldr	r3, [r3, #4]
 8108466:	68ba      	ldr	r2, [r7, #8]
 8108468:	4413      	add	r3, r2
 810846a:	687a      	ldr	r2, [r7, #4]
 810846c:	429a      	cmp	r2, r3
 810846e:	d108      	bne.n	8108482 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8108470:	68fb      	ldr	r3, [r7, #12]
 8108472:	685a      	ldr	r2, [r3, #4]
 8108474:	687b      	ldr	r3, [r7, #4]
 8108476:	685b      	ldr	r3, [r3, #4]
 8108478:	441a      	add	r2, r3
 810847a:	68fb      	ldr	r3, [r7, #12]
 810847c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 810847e:	68fb      	ldr	r3, [r7, #12]
 8108480:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8108482:	687b      	ldr	r3, [r7, #4]
 8108484:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8108486:	687b      	ldr	r3, [r7, #4]
 8108488:	685b      	ldr	r3, [r3, #4]
 810848a:	68ba      	ldr	r2, [r7, #8]
 810848c:	441a      	add	r2, r3
 810848e:	68fb      	ldr	r3, [r7, #12]
 8108490:	681b      	ldr	r3, [r3, #0]
 8108492:	429a      	cmp	r2, r3
 8108494:	d118      	bne.n	81084c8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8108496:	68fb      	ldr	r3, [r7, #12]
 8108498:	681a      	ldr	r2, [r3, #0]
 810849a:	4b15      	ldr	r3, [pc, #84]	; (81084f0 <prvInsertBlockIntoFreeList+0xb0>)
 810849c:	681b      	ldr	r3, [r3, #0]
 810849e:	429a      	cmp	r2, r3
 81084a0:	d00d      	beq.n	81084be <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 81084a2:	687b      	ldr	r3, [r7, #4]
 81084a4:	685a      	ldr	r2, [r3, #4]
 81084a6:	68fb      	ldr	r3, [r7, #12]
 81084a8:	681b      	ldr	r3, [r3, #0]
 81084aa:	685b      	ldr	r3, [r3, #4]
 81084ac:	441a      	add	r2, r3
 81084ae:	687b      	ldr	r3, [r7, #4]
 81084b0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 81084b2:	68fb      	ldr	r3, [r7, #12]
 81084b4:	681b      	ldr	r3, [r3, #0]
 81084b6:	681a      	ldr	r2, [r3, #0]
 81084b8:	687b      	ldr	r3, [r7, #4]
 81084ba:	601a      	str	r2, [r3, #0]
 81084bc:	e008      	b.n	81084d0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 81084be:	4b0c      	ldr	r3, [pc, #48]	; (81084f0 <prvInsertBlockIntoFreeList+0xb0>)
 81084c0:	681a      	ldr	r2, [r3, #0]
 81084c2:	687b      	ldr	r3, [r7, #4]
 81084c4:	601a      	str	r2, [r3, #0]
 81084c6:	e003      	b.n	81084d0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 81084c8:	68fb      	ldr	r3, [r7, #12]
 81084ca:	681a      	ldr	r2, [r3, #0]
 81084cc:	687b      	ldr	r3, [r7, #4]
 81084ce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 81084d0:	68fa      	ldr	r2, [r7, #12]
 81084d2:	687b      	ldr	r3, [r7, #4]
 81084d4:	429a      	cmp	r2, r3
 81084d6:	d002      	beq.n	81084de <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 81084d8:	68fb      	ldr	r3, [r7, #12]
 81084da:	687a      	ldr	r2, [r7, #4]
 81084dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 81084de:	bf00      	nop
 81084e0:	3714      	adds	r7, #20
 81084e2:	46bd      	mov	sp, r7
 81084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81084e8:	4770      	bx	lr
 81084ea:	bf00      	nop
 81084ec:	10004084 	.word	0x10004084
 81084f0:	1000408c 	.word	0x1000408c

081084f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 81084f4:	b480      	push	{r7}
 81084f6:	b083      	sub	sp, #12
 81084f8:	af00      	add	r7, sp, #0
 81084fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 81084fc:	687b      	ldr	r3, [r7, #4]
 81084fe:	f103 0208 	add.w	r2, r3, #8
 8108502:	687b      	ldr	r3, [r7, #4]
 8108504:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8108506:	687b      	ldr	r3, [r7, #4]
 8108508:	f04f 32ff 	mov.w	r2, #4294967295
 810850c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810850e:	687b      	ldr	r3, [r7, #4]
 8108510:	f103 0208 	add.w	r2, r3, #8
 8108514:	687b      	ldr	r3, [r7, #4]
 8108516:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8108518:	687b      	ldr	r3, [r7, #4]
 810851a:	f103 0208 	add.w	r2, r3, #8
 810851e:	687b      	ldr	r3, [r7, #4]
 8108520:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8108522:	687b      	ldr	r3, [r7, #4]
 8108524:	2200      	movs	r2, #0
 8108526:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8108528:	bf00      	nop
 810852a:	370c      	adds	r7, #12
 810852c:	46bd      	mov	sp, r7
 810852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108532:	4770      	bx	lr

08108534 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8108534:	b480      	push	{r7}
 8108536:	b083      	sub	sp, #12
 8108538:	af00      	add	r7, sp, #0
 810853a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 810853c:	687b      	ldr	r3, [r7, #4]
 810853e:	2200      	movs	r2, #0
 8108540:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8108542:	bf00      	nop
 8108544:	370c      	adds	r7, #12
 8108546:	46bd      	mov	sp, r7
 8108548:	f85d 7b04 	ldr.w	r7, [sp], #4
 810854c:	4770      	bx	lr

0810854e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810854e:	b480      	push	{r7}
 8108550:	b085      	sub	sp, #20
 8108552:	af00      	add	r7, sp, #0
 8108554:	6078      	str	r0, [r7, #4]
 8108556:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8108558:	687b      	ldr	r3, [r7, #4]
 810855a:	685b      	ldr	r3, [r3, #4]
 810855c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 810855e:	683b      	ldr	r3, [r7, #0]
 8108560:	68fa      	ldr	r2, [r7, #12]
 8108562:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8108564:	68fb      	ldr	r3, [r7, #12]
 8108566:	689a      	ldr	r2, [r3, #8]
 8108568:	683b      	ldr	r3, [r7, #0]
 810856a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 810856c:	68fb      	ldr	r3, [r7, #12]
 810856e:	689b      	ldr	r3, [r3, #8]
 8108570:	683a      	ldr	r2, [r7, #0]
 8108572:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8108574:	68fb      	ldr	r3, [r7, #12]
 8108576:	683a      	ldr	r2, [r7, #0]
 8108578:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 810857a:	683b      	ldr	r3, [r7, #0]
 810857c:	687a      	ldr	r2, [r7, #4]
 810857e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8108580:	687b      	ldr	r3, [r7, #4]
 8108582:	681b      	ldr	r3, [r3, #0]
 8108584:	1c5a      	adds	r2, r3, #1
 8108586:	687b      	ldr	r3, [r7, #4]
 8108588:	601a      	str	r2, [r3, #0]
}
 810858a:	bf00      	nop
 810858c:	3714      	adds	r7, #20
 810858e:	46bd      	mov	sp, r7
 8108590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108594:	4770      	bx	lr

08108596 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8108596:	b480      	push	{r7}
 8108598:	b085      	sub	sp, #20
 810859a:	af00      	add	r7, sp, #0
 810859c:	6078      	str	r0, [r7, #4]
 810859e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 81085a0:	683b      	ldr	r3, [r7, #0]
 81085a2:	681b      	ldr	r3, [r3, #0]
 81085a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 81085a6:	68bb      	ldr	r3, [r7, #8]
 81085a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81085ac:	d103      	bne.n	81085b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 81085ae:	687b      	ldr	r3, [r7, #4]
 81085b0:	691b      	ldr	r3, [r3, #16]
 81085b2:	60fb      	str	r3, [r7, #12]
 81085b4:	e00c      	b.n	81085d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 81085b6:	687b      	ldr	r3, [r7, #4]
 81085b8:	3308      	adds	r3, #8
 81085ba:	60fb      	str	r3, [r7, #12]
 81085bc:	e002      	b.n	81085c4 <vListInsert+0x2e>
 81085be:	68fb      	ldr	r3, [r7, #12]
 81085c0:	685b      	ldr	r3, [r3, #4]
 81085c2:	60fb      	str	r3, [r7, #12]
 81085c4:	68fb      	ldr	r3, [r7, #12]
 81085c6:	685b      	ldr	r3, [r3, #4]
 81085c8:	681b      	ldr	r3, [r3, #0]
 81085ca:	68ba      	ldr	r2, [r7, #8]
 81085cc:	429a      	cmp	r2, r3
 81085ce:	d2f6      	bcs.n	81085be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 81085d0:	68fb      	ldr	r3, [r7, #12]
 81085d2:	685a      	ldr	r2, [r3, #4]
 81085d4:	683b      	ldr	r3, [r7, #0]
 81085d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 81085d8:	683b      	ldr	r3, [r7, #0]
 81085da:	685b      	ldr	r3, [r3, #4]
 81085dc:	683a      	ldr	r2, [r7, #0]
 81085de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 81085e0:	683b      	ldr	r3, [r7, #0]
 81085e2:	68fa      	ldr	r2, [r7, #12]
 81085e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 81085e6:	68fb      	ldr	r3, [r7, #12]
 81085e8:	683a      	ldr	r2, [r7, #0]
 81085ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 81085ec:	683b      	ldr	r3, [r7, #0]
 81085ee:	687a      	ldr	r2, [r7, #4]
 81085f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 81085f2:	687b      	ldr	r3, [r7, #4]
 81085f4:	681b      	ldr	r3, [r3, #0]
 81085f6:	1c5a      	adds	r2, r3, #1
 81085f8:	687b      	ldr	r3, [r7, #4]
 81085fa:	601a      	str	r2, [r3, #0]
}
 81085fc:	bf00      	nop
 81085fe:	3714      	adds	r7, #20
 8108600:	46bd      	mov	sp, r7
 8108602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108606:	4770      	bx	lr

08108608 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8108608:	b480      	push	{r7}
 810860a:	b085      	sub	sp, #20
 810860c:	af00      	add	r7, sp, #0
 810860e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8108610:	687b      	ldr	r3, [r7, #4]
 8108612:	691b      	ldr	r3, [r3, #16]
 8108614:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8108616:	687b      	ldr	r3, [r7, #4]
 8108618:	685b      	ldr	r3, [r3, #4]
 810861a:	687a      	ldr	r2, [r7, #4]
 810861c:	6892      	ldr	r2, [r2, #8]
 810861e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8108620:	687b      	ldr	r3, [r7, #4]
 8108622:	689b      	ldr	r3, [r3, #8]
 8108624:	687a      	ldr	r2, [r7, #4]
 8108626:	6852      	ldr	r2, [r2, #4]
 8108628:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 810862a:	68fb      	ldr	r3, [r7, #12]
 810862c:	685b      	ldr	r3, [r3, #4]
 810862e:	687a      	ldr	r2, [r7, #4]
 8108630:	429a      	cmp	r2, r3
 8108632:	d103      	bne.n	810863c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8108634:	687b      	ldr	r3, [r7, #4]
 8108636:	689a      	ldr	r2, [r3, #8]
 8108638:	68fb      	ldr	r3, [r7, #12]
 810863a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 810863c:	687b      	ldr	r3, [r7, #4]
 810863e:	2200      	movs	r2, #0
 8108640:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8108642:	68fb      	ldr	r3, [r7, #12]
 8108644:	681b      	ldr	r3, [r3, #0]
 8108646:	1e5a      	subs	r2, r3, #1
 8108648:	68fb      	ldr	r3, [r7, #12]
 810864a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 810864c:	68fb      	ldr	r3, [r7, #12]
 810864e:	681b      	ldr	r3, [r3, #0]
}
 8108650:	4618      	mov	r0, r3
 8108652:	3714      	adds	r7, #20
 8108654:	46bd      	mov	sp, r7
 8108656:	f85d 7b04 	ldr.w	r7, [sp], #4
 810865a:	4770      	bx	lr

0810865c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 810865c:	b480      	push	{r7}
 810865e:	b085      	sub	sp, #20
 8108660:	af00      	add	r7, sp, #0
 8108662:	60f8      	str	r0, [r7, #12]
 8108664:	60b9      	str	r1, [r7, #8]
 8108666:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8108668:	68fb      	ldr	r3, [r7, #12]
 810866a:	3b04      	subs	r3, #4
 810866c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 810866e:	68fb      	ldr	r3, [r7, #12]
 8108670:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8108674:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8108676:	68fb      	ldr	r3, [r7, #12]
 8108678:	3b04      	subs	r3, #4
 810867a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 810867c:	68bb      	ldr	r3, [r7, #8]
 810867e:	f023 0201 	bic.w	r2, r3, #1
 8108682:	68fb      	ldr	r3, [r7, #12]
 8108684:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8108686:	68fb      	ldr	r3, [r7, #12]
 8108688:	3b04      	subs	r3, #4
 810868a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 810868c:	4a0c      	ldr	r2, [pc, #48]	; (81086c0 <pxPortInitialiseStack+0x64>)
 810868e:	68fb      	ldr	r3, [r7, #12]
 8108690:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8108692:	68fb      	ldr	r3, [r7, #12]
 8108694:	3b14      	subs	r3, #20
 8108696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8108698:	687a      	ldr	r2, [r7, #4]
 810869a:	68fb      	ldr	r3, [r7, #12]
 810869c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 810869e:	68fb      	ldr	r3, [r7, #12]
 81086a0:	3b04      	subs	r3, #4
 81086a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 81086a4:	68fb      	ldr	r3, [r7, #12]
 81086a6:	f06f 0202 	mvn.w	r2, #2
 81086aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 81086ac:	68fb      	ldr	r3, [r7, #12]
 81086ae:	3b20      	subs	r3, #32
 81086b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 81086b2:	68fb      	ldr	r3, [r7, #12]
}
 81086b4:	4618      	mov	r0, r3
 81086b6:	3714      	adds	r7, #20
 81086b8:	46bd      	mov	sp, r7
 81086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81086be:	4770      	bx	lr
 81086c0:	081086c5 	.word	0x081086c5

081086c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 81086c4:	b480      	push	{r7}
 81086c6:	b085      	sub	sp, #20
 81086c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 81086ca:	2300      	movs	r3, #0
 81086cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 81086ce:	4b11      	ldr	r3, [pc, #68]	; (8108714 <prvTaskExitError+0x50>)
 81086d0:	681b      	ldr	r3, [r3, #0]
 81086d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 81086d6:	d009      	beq.n	81086ec <prvTaskExitError+0x28>
 81086d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81086dc:	f383 8811 	msr	BASEPRI, r3
 81086e0:	f3bf 8f6f 	isb	sy
 81086e4:	f3bf 8f4f 	dsb	sy
 81086e8:	60fb      	str	r3, [r7, #12]
 81086ea:	e7fe      	b.n	81086ea <prvTaskExitError+0x26>
 81086ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 81086f0:	f383 8811 	msr	BASEPRI, r3
 81086f4:	f3bf 8f6f 	isb	sy
 81086f8:	f3bf 8f4f 	dsb	sy
 81086fc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 81086fe:	bf00      	nop
 8108700:	687b      	ldr	r3, [r7, #4]
 8108702:	2b00      	cmp	r3, #0
 8108704:	d0fc      	beq.n	8108700 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8108706:	bf00      	nop
 8108708:	3714      	adds	r7, #20
 810870a:	46bd      	mov	sp, r7
 810870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108710:	4770      	bx	lr
 8108712:	bf00      	nop
 8108714:	10000024 	.word	0x10000024
	...

08108720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8108720:	4b07      	ldr	r3, [pc, #28]	; (8108740 <pxCurrentTCBConst2>)
 8108722:	6819      	ldr	r1, [r3, #0]
 8108724:	6808      	ldr	r0, [r1, #0]
 8108726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810872a:	f380 8809 	msr	PSP, r0
 810872e:	f3bf 8f6f 	isb	sy
 8108732:	f04f 0000 	mov.w	r0, #0
 8108736:	f380 8811 	msr	BASEPRI, r0
 810873a:	4770      	bx	lr
 810873c:	f3af 8000 	nop.w

08108740 <pxCurrentTCBConst2>:
 8108740:	100040a4 	.word	0x100040a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8108744:	bf00      	nop
 8108746:	bf00      	nop

08108748 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8108748:	4808      	ldr	r0, [pc, #32]	; (810876c <prvPortStartFirstTask+0x24>)
 810874a:	6800      	ldr	r0, [r0, #0]
 810874c:	6800      	ldr	r0, [r0, #0]
 810874e:	f380 8808 	msr	MSP, r0
 8108752:	f04f 0000 	mov.w	r0, #0
 8108756:	f380 8814 	msr	CONTROL, r0
 810875a:	b662      	cpsie	i
 810875c:	b661      	cpsie	f
 810875e:	f3bf 8f4f 	dsb	sy
 8108762:	f3bf 8f6f 	isb	sy
 8108766:	df00      	svc	0
 8108768:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 810876a:	bf00      	nop
 810876c:	e000ed08 	.word	0xe000ed08

08108770 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8108770:	b580      	push	{r7, lr}
 8108772:	b086      	sub	sp, #24
 8108774:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8108776:	4b44      	ldr	r3, [pc, #272]	; (8108888 <xPortStartScheduler+0x118>)
 8108778:	681b      	ldr	r3, [r3, #0]
 810877a:	4a44      	ldr	r2, [pc, #272]	; (810888c <xPortStartScheduler+0x11c>)
 810877c:	4293      	cmp	r3, r2
 810877e:	d109      	bne.n	8108794 <xPortStartScheduler+0x24>
 8108780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108784:	f383 8811 	msr	BASEPRI, r3
 8108788:	f3bf 8f6f 	isb	sy
 810878c:	f3bf 8f4f 	dsb	sy
 8108790:	613b      	str	r3, [r7, #16]
 8108792:	e7fe      	b.n	8108792 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8108794:	4b3c      	ldr	r3, [pc, #240]	; (8108888 <xPortStartScheduler+0x118>)
 8108796:	681b      	ldr	r3, [r3, #0]
 8108798:	4a3d      	ldr	r2, [pc, #244]	; (8108890 <xPortStartScheduler+0x120>)
 810879a:	4293      	cmp	r3, r2
 810879c:	d109      	bne.n	81087b2 <xPortStartScheduler+0x42>
 810879e:	f04f 0350 	mov.w	r3, #80	; 0x50
 81087a2:	f383 8811 	msr	BASEPRI, r3
 81087a6:	f3bf 8f6f 	isb	sy
 81087aa:	f3bf 8f4f 	dsb	sy
 81087ae:	60fb      	str	r3, [r7, #12]
 81087b0:	e7fe      	b.n	81087b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 81087b2:	4b38      	ldr	r3, [pc, #224]	; (8108894 <xPortStartScheduler+0x124>)
 81087b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 81087b6:	697b      	ldr	r3, [r7, #20]
 81087b8:	781b      	ldrb	r3, [r3, #0]
 81087ba:	b2db      	uxtb	r3, r3
 81087bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 81087be:	697b      	ldr	r3, [r7, #20]
 81087c0:	22ff      	movs	r2, #255	; 0xff
 81087c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 81087c4:	697b      	ldr	r3, [r7, #20]
 81087c6:	781b      	ldrb	r3, [r3, #0]
 81087c8:	b2db      	uxtb	r3, r3
 81087ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 81087cc:	78fb      	ldrb	r3, [r7, #3]
 81087ce:	b2db      	uxtb	r3, r3
 81087d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 81087d4:	b2da      	uxtb	r2, r3
 81087d6:	4b30      	ldr	r3, [pc, #192]	; (8108898 <xPortStartScheduler+0x128>)
 81087d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 81087da:	4b30      	ldr	r3, [pc, #192]	; (810889c <xPortStartScheduler+0x12c>)
 81087dc:	2207      	movs	r2, #7
 81087de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 81087e0:	e009      	b.n	81087f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 81087e2:	4b2e      	ldr	r3, [pc, #184]	; (810889c <xPortStartScheduler+0x12c>)
 81087e4:	681b      	ldr	r3, [r3, #0]
 81087e6:	3b01      	subs	r3, #1
 81087e8:	4a2c      	ldr	r2, [pc, #176]	; (810889c <xPortStartScheduler+0x12c>)
 81087ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 81087ec:	78fb      	ldrb	r3, [r7, #3]
 81087ee:	b2db      	uxtb	r3, r3
 81087f0:	005b      	lsls	r3, r3, #1
 81087f2:	b2db      	uxtb	r3, r3
 81087f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 81087f6:	78fb      	ldrb	r3, [r7, #3]
 81087f8:	b2db      	uxtb	r3, r3
 81087fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81087fe:	2b80      	cmp	r3, #128	; 0x80
 8108800:	d0ef      	beq.n	81087e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8108802:	4b26      	ldr	r3, [pc, #152]	; (810889c <xPortStartScheduler+0x12c>)
 8108804:	681b      	ldr	r3, [r3, #0]
 8108806:	f1c3 0307 	rsb	r3, r3, #7
 810880a:	2b04      	cmp	r3, #4
 810880c:	d009      	beq.n	8108822 <xPortStartScheduler+0xb2>
 810880e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108812:	f383 8811 	msr	BASEPRI, r3
 8108816:	f3bf 8f6f 	isb	sy
 810881a:	f3bf 8f4f 	dsb	sy
 810881e:	60bb      	str	r3, [r7, #8]
 8108820:	e7fe      	b.n	8108820 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8108822:	4b1e      	ldr	r3, [pc, #120]	; (810889c <xPortStartScheduler+0x12c>)
 8108824:	681b      	ldr	r3, [r3, #0]
 8108826:	021b      	lsls	r3, r3, #8
 8108828:	4a1c      	ldr	r2, [pc, #112]	; (810889c <xPortStartScheduler+0x12c>)
 810882a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 810882c:	4b1b      	ldr	r3, [pc, #108]	; (810889c <xPortStartScheduler+0x12c>)
 810882e:	681b      	ldr	r3, [r3, #0]
 8108830:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8108834:	4a19      	ldr	r2, [pc, #100]	; (810889c <xPortStartScheduler+0x12c>)
 8108836:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8108838:	687b      	ldr	r3, [r7, #4]
 810883a:	b2da      	uxtb	r2, r3
 810883c:	697b      	ldr	r3, [r7, #20]
 810883e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8108840:	4b17      	ldr	r3, [pc, #92]	; (81088a0 <xPortStartScheduler+0x130>)
 8108842:	681b      	ldr	r3, [r3, #0]
 8108844:	4a16      	ldr	r2, [pc, #88]	; (81088a0 <xPortStartScheduler+0x130>)
 8108846:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 810884a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 810884c:	4b14      	ldr	r3, [pc, #80]	; (81088a0 <xPortStartScheduler+0x130>)
 810884e:	681b      	ldr	r3, [r3, #0]
 8108850:	4a13      	ldr	r2, [pc, #76]	; (81088a0 <xPortStartScheduler+0x130>)
 8108852:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8108856:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8108858:	f000 f8d6 	bl	8108a08 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 810885c:	4b11      	ldr	r3, [pc, #68]	; (81088a4 <xPortStartScheduler+0x134>)
 810885e:	2200      	movs	r2, #0
 8108860:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8108862:	f000 f8f5 	bl	8108a50 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8108866:	4b10      	ldr	r3, [pc, #64]	; (81088a8 <xPortStartScheduler+0x138>)
 8108868:	681b      	ldr	r3, [r3, #0]
 810886a:	4a0f      	ldr	r2, [pc, #60]	; (81088a8 <xPortStartScheduler+0x138>)
 810886c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8108870:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8108872:	f7ff ff69 	bl	8108748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8108876:	f001 f8e9 	bl	8109a4c <vTaskSwitchContext>
	prvTaskExitError();
 810887a:	f7ff ff23 	bl	81086c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 810887e:	2300      	movs	r3, #0
}
 8108880:	4618      	mov	r0, r3
 8108882:	3718      	adds	r7, #24
 8108884:	46bd      	mov	sp, r7
 8108886:	bd80      	pop	{r7, pc}
 8108888:	e000ed00 	.word	0xe000ed00
 810888c:	410fc271 	.word	0x410fc271
 8108890:	410fc270 	.word	0x410fc270
 8108894:	e000e400 	.word	0xe000e400
 8108898:	1000409c 	.word	0x1000409c
 810889c:	100040a0 	.word	0x100040a0
 81088a0:	e000ed20 	.word	0xe000ed20
 81088a4:	10000024 	.word	0x10000024
 81088a8:	e000ef34 	.word	0xe000ef34

081088ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 81088ac:	b480      	push	{r7}
 81088ae:	b083      	sub	sp, #12
 81088b0:	af00      	add	r7, sp, #0
 81088b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81088b6:	f383 8811 	msr	BASEPRI, r3
 81088ba:	f3bf 8f6f 	isb	sy
 81088be:	f3bf 8f4f 	dsb	sy
 81088c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 81088c4:	4b0e      	ldr	r3, [pc, #56]	; (8108900 <vPortEnterCritical+0x54>)
 81088c6:	681b      	ldr	r3, [r3, #0]
 81088c8:	3301      	adds	r3, #1
 81088ca:	4a0d      	ldr	r2, [pc, #52]	; (8108900 <vPortEnterCritical+0x54>)
 81088cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 81088ce:	4b0c      	ldr	r3, [pc, #48]	; (8108900 <vPortEnterCritical+0x54>)
 81088d0:	681b      	ldr	r3, [r3, #0]
 81088d2:	2b01      	cmp	r3, #1
 81088d4:	d10e      	bne.n	81088f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 81088d6:	4b0b      	ldr	r3, [pc, #44]	; (8108904 <vPortEnterCritical+0x58>)
 81088d8:	681b      	ldr	r3, [r3, #0]
 81088da:	b2db      	uxtb	r3, r3
 81088dc:	2b00      	cmp	r3, #0
 81088de:	d009      	beq.n	81088f4 <vPortEnterCritical+0x48>
 81088e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81088e4:	f383 8811 	msr	BASEPRI, r3
 81088e8:	f3bf 8f6f 	isb	sy
 81088ec:	f3bf 8f4f 	dsb	sy
 81088f0:	603b      	str	r3, [r7, #0]
 81088f2:	e7fe      	b.n	81088f2 <vPortEnterCritical+0x46>
	}
}
 81088f4:	bf00      	nop
 81088f6:	370c      	adds	r7, #12
 81088f8:	46bd      	mov	sp, r7
 81088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81088fe:	4770      	bx	lr
 8108900:	10000024 	.word	0x10000024
 8108904:	e000ed04 	.word	0xe000ed04

08108908 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8108908:	b480      	push	{r7}
 810890a:	b083      	sub	sp, #12
 810890c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 810890e:	4b11      	ldr	r3, [pc, #68]	; (8108954 <vPortExitCritical+0x4c>)
 8108910:	681b      	ldr	r3, [r3, #0]
 8108912:	2b00      	cmp	r3, #0
 8108914:	d109      	bne.n	810892a <vPortExitCritical+0x22>
 8108916:	f04f 0350 	mov.w	r3, #80	; 0x50
 810891a:	f383 8811 	msr	BASEPRI, r3
 810891e:	f3bf 8f6f 	isb	sy
 8108922:	f3bf 8f4f 	dsb	sy
 8108926:	607b      	str	r3, [r7, #4]
 8108928:	e7fe      	b.n	8108928 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 810892a:	4b0a      	ldr	r3, [pc, #40]	; (8108954 <vPortExitCritical+0x4c>)
 810892c:	681b      	ldr	r3, [r3, #0]
 810892e:	3b01      	subs	r3, #1
 8108930:	4a08      	ldr	r2, [pc, #32]	; (8108954 <vPortExitCritical+0x4c>)
 8108932:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8108934:	4b07      	ldr	r3, [pc, #28]	; (8108954 <vPortExitCritical+0x4c>)
 8108936:	681b      	ldr	r3, [r3, #0]
 8108938:	2b00      	cmp	r3, #0
 810893a:	d104      	bne.n	8108946 <vPortExitCritical+0x3e>
 810893c:	2300      	movs	r3, #0
 810893e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8108940:	683b      	ldr	r3, [r7, #0]
 8108942:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8108946:	bf00      	nop
 8108948:	370c      	adds	r7, #12
 810894a:	46bd      	mov	sp, r7
 810894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108950:	4770      	bx	lr
 8108952:	bf00      	nop
 8108954:	10000024 	.word	0x10000024
	...

08108960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8108960:	f3ef 8009 	mrs	r0, PSP
 8108964:	f3bf 8f6f 	isb	sy
 8108968:	4b15      	ldr	r3, [pc, #84]	; (81089c0 <pxCurrentTCBConst>)
 810896a:	681a      	ldr	r2, [r3, #0]
 810896c:	f01e 0f10 	tst.w	lr, #16
 8108970:	bf08      	it	eq
 8108972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8108976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810897a:	6010      	str	r0, [r2, #0]
 810897c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8108980:	f04f 0050 	mov.w	r0, #80	; 0x50
 8108984:	f380 8811 	msr	BASEPRI, r0
 8108988:	f3bf 8f4f 	dsb	sy
 810898c:	f3bf 8f6f 	isb	sy
 8108990:	f001 f85c 	bl	8109a4c <vTaskSwitchContext>
 8108994:	f04f 0000 	mov.w	r0, #0
 8108998:	f380 8811 	msr	BASEPRI, r0
 810899c:	bc09      	pop	{r0, r3}
 810899e:	6819      	ldr	r1, [r3, #0]
 81089a0:	6808      	ldr	r0, [r1, #0]
 81089a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81089a6:	f01e 0f10 	tst.w	lr, #16
 81089aa:	bf08      	it	eq
 81089ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 81089b0:	f380 8809 	msr	PSP, r0
 81089b4:	f3bf 8f6f 	isb	sy
 81089b8:	4770      	bx	lr
 81089ba:	bf00      	nop
 81089bc:	f3af 8000 	nop.w

081089c0 <pxCurrentTCBConst>:
 81089c0:	100040a4 	.word	0x100040a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 81089c4:	bf00      	nop
 81089c6:	bf00      	nop

081089c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 81089c8:	b580      	push	{r7, lr}
 81089ca:	b082      	sub	sp, #8
 81089cc:	af00      	add	r7, sp, #0
	__asm volatile
 81089ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 81089d2:	f383 8811 	msr	BASEPRI, r3
 81089d6:	f3bf 8f6f 	isb	sy
 81089da:	f3bf 8f4f 	dsb	sy
 81089de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 81089e0:	f000 ff7c 	bl	81098dc <xTaskIncrementTick>
 81089e4:	4603      	mov	r3, r0
 81089e6:	2b00      	cmp	r3, #0
 81089e8:	d003      	beq.n	81089f2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 81089ea:	4b06      	ldr	r3, [pc, #24]	; (8108a04 <SysTick_Handler+0x3c>)
 81089ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81089f0:	601a      	str	r2, [r3, #0]
 81089f2:	2300      	movs	r3, #0
 81089f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 81089f6:	683b      	ldr	r3, [r7, #0]
 81089f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 81089fc:	bf00      	nop
 81089fe:	3708      	adds	r7, #8
 8108a00:	46bd      	mov	sp, r7
 8108a02:	bd80      	pop	{r7, pc}
 8108a04:	e000ed04 	.word	0xe000ed04

08108a08 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8108a08:	b480      	push	{r7}
 8108a0a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8108a0c:	4b0b      	ldr	r3, [pc, #44]	; (8108a3c <vPortSetupTimerInterrupt+0x34>)
 8108a0e:	2200      	movs	r2, #0
 8108a10:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8108a12:	4b0b      	ldr	r3, [pc, #44]	; (8108a40 <vPortSetupTimerInterrupt+0x38>)
 8108a14:	2200      	movs	r2, #0
 8108a16:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8108a18:	4b0a      	ldr	r3, [pc, #40]	; (8108a44 <vPortSetupTimerInterrupt+0x3c>)
 8108a1a:	681b      	ldr	r3, [r3, #0]
 8108a1c:	4a0a      	ldr	r2, [pc, #40]	; (8108a48 <vPortSetupTimerInterrupt+0x40>)
 8108a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8108a22:	099b      	lsrs	r3, r3, #6
 8108a24:	4a09      	ldr	r2, [pc, #36]	; (8108a4c <vPortSetupTimerInterrupt+0x44>)
 8108a26:	3b01      	subs	r3, #1
 8108a28:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8108a2a:	4b04      	ldr	r3, [pc, #16]	; (8108a3c <vPortSetupTimerInterrupt+0x34>)
 8108a2c:	2207      	movs	r2, #7
 8108a2e:	601a      	str	r2, [r3, #0]
}
 8108a30:	bf00      	nop
 8108a32:	46bd      	mov	sp, r7
 8108a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108a38:	4770      	bx	lr
 8108a3a:	bf00      	nop
 8108a3c:	e000e010 	.word	0xe000e010
 8108a40:	e000e018 	.word	0xe000e018
 8108a44:	10000004 	.word	0x10000004
 8108a48:	10624dd3 	.word	0x10624dd3
 8108a4c:	e000e014 	.word	0xe000e014

08108a50 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8108a50:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8108a60 <vPortEnableVFP+0x10>
 8108a54:	6801      	ldr	r1, [r0, #0]
 8108a56:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8108a5a:	6001      	str	r1, [r0, #0]
 8108a5c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8108a5e:	bf00      	nop
 8108a60:	e000ed88 	.word	0xe000ed88

08108a64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8108a64:	b580      	push	{r7, lr}
 8108a66:	b084      	sub	sp, #16
 8108a68:	af00      	add	r7, sp, #0
 8108a6a:	6078      	str	r0, [r7, #4]
 8108a6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8108a6e:	687b      	ldr	r3, [r7, #4]
 8108a70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8108a72:	68fb      	ldr	r3, [r7, #12]
 8108a74:	2b00      	cmp	r3, #0
 8108a76:	d109      	bne.n	8108a8c <xQueueGenericReset+0x28>
	__asm volatile
 8108a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108a7c:	f383 8811 	msr	BASEPRI, r3
 8108a80:	f3bf 8f6f 	isb	sy
 8108a84:	f3bf 8f4f 	dsb	sy
 8108a88:	60bb      	str	r3, [r7, #8]
 8108a8a:	e7fe      	b.n	8108a8a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8108a8c:	f7ff ff0e 	bl	81088ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8108a90:	68fb      	ldr	r3, [r7, #12]
 8108a92:	681a      	ldr	r2, [r3, #0]
 8108a94:	68fb      	ldr	r3, [r7, #12]
 8108a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108a98:	68f9      	ldr	r1, [r7, #12]
 8108a9a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8108a9c:	fb01 f303 	mul.w	r3, r1, r3
 8108aa0:	441a      	add	r2, r3
 8108aa2:	68fb      	ldr	r3, [r7, #12]
 8108aa4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8108aa6:	68fb      	ldr	r3, [r7, #12]
 8108aa8:	2200      	movs	r2, #0
 8108aaa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8108aac:	68fb      	ldr	r3, [r7, #12]
 8108aae:	681a      	ldr	r2, [r3, #0]
 8108ab0:	68fb      	ldr	r3, [r7, #12]
 8108ab2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8108ab4:	68fb      	ldr	r3, [r7, #12]
 8108ab6:	681a      	ldr	r2, [r3, #0]
 8108ab8:	68fb      	ldr	r3, [r7, #12]
 8108aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108abc:	3b01      	subs	r3, #1
 8108abe:	68f9      	ldr	r1, [r7, #12]
 8108ac0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8108ac2:	fb01 f303 	mul.w	r3, r1, r3
 8108ac6:	441a      	add	r2, r3
 8108ac8:	68fb      	ldr	r3, [r7, #12]
 8108aca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8108acc:	68fb      	ldr	r3, [r7, #12]
 8108ace:	22ff      	movs	r2, #255	; 0xff
 8108ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8108ad4:	68fb      	ldr	r3, [r7, #12]
 8108ad6:	22ff      	movs	r2, #255	; 0xff
 8108ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8108adc:	683b      	ldr	r3, [r7, #0]
 8108ade:	2b00      	cmp	r3, #0
 8108ae0:	d114      	bne.n	8108b0c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8108ae2:	68fb      	ldr	r3, [r7, #12]
 8108ae4:	691b      	ldr	r3, [r3, #16]
 8108ae6:	2b00      	cmp	r3, #0
 8108ae8:	d01a      	beq.n	8108b20 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8108aea:	68fb      	ldr	r3, [r7, #12]
 8108aec:	3310      	adds	r3, #16
 8108aee:	4618      	mov	r0, r3
 8108af0:	f001 f82a 	bl	8109b48 <xTaskRemoveFromEventList>
 8108af4:	4603      	mov	r3, r0
 8108af6:	2b00      	cmp	r3, #0
 8108af8:	d012      	beq.n	8108b20 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8108afa:	4b0d      	ldr	r3, [pc, #52]	; (8108b30 <xQueueGenericReset+0xcc>)
 8108afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8108b00:	601a      	str	r2, [r3, #0]
 8108b02:	f3bf 8f4f 	dsb	sy
 8108b06:	f3bf 8f6f 	isb	sy
 8108b0a:	e009      	b.n	8108b20 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8108b0c:	68fb      	ldr	r3, [r7, #12]
 8108b0e:	3310      	adds	r3, #16
 8108b10:	4618      	mov	r0, r3
 8108b12:	f7ff fcef 	bl	81084f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8108b16:	68fb      	ldr	r3, [r7, #12]
 8108b18:	3324      	adds	r3, #36	; 0x24
 8108b1a:	4618      	mov	r0, r3
 8108b1c:	f7ff fcea 	bl	81084f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8108b20:	f7ff fef2 	bl	8108908 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8108b24:	2301      	movs	r3, #1
}
 8108b26:	4618      	mov	r0, r3
 8108b28:	3710      	adds	r7, #16
 8108b2a:	46bd      	mov	sp, r7
 8108b2c:	bd80      	pop	{r7, pc}
 8108b2e:	bf00      	nop
 8108b30:	e000ed04 	.word	0xe000ed04

08108b34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8108b34:	b580      	push	{r7, lr}
 8108b36:	b08e      	sub	sp, #56	; 0x38
 8108b38:	af02      	add	r7, sp, #8
 8108b3a:	60f8      	str	r0, [r7, #12]
 8108b3c:	60b9      	str	r1, [r7, #8]
 8108b3e:	607a      	str	r2, [r7, #4]
 8108b40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8108b42:	68fb      	ldr	r3, [r7, #12]
 8108b44:	2b00      	cmp	r3, #0
 8108b46:	d109      	bne.n	8108b5c <xQueueGenericCreateStatic+0x28>
 8108b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108b4c:	f383 8811 	msr	BASEPRI, r3
 8108b50:	f3bf 8f6f 	isb	sy
 8108b54:	f3bf 8f4f 	dsb	sy
 8108b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8108b5a:	e7fe      	b.n	8108b5a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8108b5c:	683b      	ldr	r3, [r7, #0]
 8108b5e:	2b00      	cmp	r3, #0
 8108b60:	d109      	bne.n	8108b76 <xQueueGenericCreateStatic+0x42>
 8108b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108b66:	f383 8811 	msr	BASEPRI, r3
 8108b6a:	f3bf 8f6f 	isb	sy
 8108b6e:	f3bf 8f4f 	dsb	sy
 8108b72:	627b      	str	r3, [r7, #36]	; 0x24
 8108b74:	e7fe      	b.n	8108b74 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8108b76:	687b      	ldr	r3, [r7, #4]
 8108b78:	2b00      	cmp	r3, #0
 8108b7a:	d002      	beq.n	8108b82 <xQueueGenericCreateStatic+0x4e>
 8108b7c:	68bb      	ldr	r3, [r7, #8]
 8108b7e:	2b00      	cmp	r3, #0
 8108b80:	d001      	beq.n	8108b86 <xQueueGenericCreateStatic+0x52>
 8108b82:	2301      	movs	r3, #1
 8108b84:	e000      	b.n	8108b88 <xQueueGenericCreateStatic+0x54>
 8108b86:	2300      	movs	r3, #0
 8108b88:	2b00      	cmp	r3, #0
 8108b8a:	d109      	bne.n	8108ba0 <xQueueGenericCreateStatic+0x6c>
 8108b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108b90:	f383 8811 	msr	BASEPRI, r3
 8108b94:	f3bf 8f6f 	isb	sy
 8108b98:	f3bf 8f4f 	dsb	sy
 8108b9c:	623b      	str	r3, [r7, #32]
 8108b9e:	e7fe      	b.n	8108b9e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8108ba0:	687b      	ldr	r3, [r7, #4]
 8108ba2:	2b00      	cmp	r3, #0
 8108ba4:	d102      	bne.n	8108bac <xQueueGenericCreateStatic+0x78>
 8108ba6:	68bb      	ldr	r3, [r7, #8]
 8108ba8:	2b00      	cmp	r3, #0
 8108baa:	d101      	bne.n	8108bb0 <xQueueGenericCreateStatic+0x7c>
 8108bac:	2301      	movs	r3, #1
 8108bae:	e000      	b.n	8108bb2 <xQueueGenericCreateStatic+0x7e>
 8108bb0:	2300      	movs	r3, #0
 8108bb2:	2b00      	cmp	r3, #0
 8108bb4:	d109      	bne.n	8108bca <xQueueGenericCreateStatic+0x96>
 8108bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108bba:	f383 8811 	msr	BASEPRI, r3
 8108bbe:	f3bf 8f6f 	isb	sy
 8108bc2:	f3bf 8f4f 	dsb	sy
 8108bc6:	61fb      	str	r3, [r7, #28]
 8108bc8:	e7fe      	b.n	8108bc8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8108bca:	2348      	movs	r3, #72	; 0x48
 8108bcc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8108bce:	697b      	ldr	r3, [r7, #20]
 8108bd0:	2b48      	cmp	r3, #72	; 0x48
 8108bd2:	d009      	beq.n	8108be8 <xQueueGenericCreateStatic+0xb4>
 8108bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108bd8:	f383 8811 	msr	BASEPRI, r3
 8108bdc:	f3bf 8f6f 	isb	sy
 8108be0:	f3bf 8f4f 	dsb	sy
 8108be4:	61bb      	str	r3, [r7, #24]
 8108be6:	e7fe      	b.n	8108be6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8108be8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8108bea:	683b      	ldr	r3, [r7, #0]
 8108bec:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8108bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108bf0:	2b00      	cmp	r3, #0
 8108bf2:	d00d      	beq.n	8108c10 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8108bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108bf6:	2201      	movs	r2, #1
 8108bf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8108bfc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8108c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108c02:	9300      	str	r3, [sp, #0]
 8108c04:	4613      	mov	r3, r2
 8108c06:	687a      	ldr	r2, [r7, #4]
 8108c08:	68b9      	ldr	r1, [r7, #8]
 8108c0a:	68f8      	ldr	r0, [r7, #12]
 8108c0c:	f000 f844 	bl	8108c98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8108c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8108c12:	4618      	mov	r0, r3
 8108c14:	3730      	adds	r7, #48	; 0x30
 8108c16:	46bd      	mov	sp, r7
 8108c18:	bd80      	pop	{r7, pc}

08108c1a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8108c1a:	b580      	push	{r7, lr}
 8108c1c:	b08a      	sub	sp, #40	; 0x28
 8108c1e:	af02      	add	r7, sp, #8
 8108c20:	60f8      	str	r0, [r7, #12]
 8108c22:	60b9      	str	r1, [r7, #8]
 8108c24:	4613      	mov	r3, r2
 8108c26:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8108c28:	68fb      	ldr	r3, [r7, #12]
 8108c2a:	2b00      	cmp	r3, #0
 8108c2c:	d109      	bne.n	8108c42 <xQueueGenericCreate+0x28>
 8108c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108c32:	f383 8811 	msr	BASEPRI, r3
 8108c36:	f3bf 8f6f 	isb	sy
 8108c3a:	f3bf 8f4f 	dsb	sy
 8108c3e:	613b      	str	r3, [r7, #16]
 8108c40:	e7fe      	b.n	8108c40 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8108c42:	68bb      	ldr	r3, [r7, #8]
 8108c44:	2b00      	cmp	r3, #0
 8108c46:	d102      	bne.n	8108c4e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8108c48:	2300      	movs	r3, #0
 8108c4a:	61fb      	str	r3, [r7, #28]
 8108c4c:	e004      	b.n	8108c58 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8108c4e:	68fb      	ldr	r3, [r7, #12]
 8108c50:	68ba      	ldr	r2, [r7, #8]
 8108c52:	fb02 f303 	mul.w	r3, r2, r3
 8108c56:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8108c58:	69fb      	ldr	r3, [r7, #28]
 8108c5a:	3348      	adds	r3, #72	; 0x48
 8108c5c:	4618      	mov	r0, r3
 8108c5e:	f7ff fa73 	bl	8108148 <pvPortMalloc>
 8108c62:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8108c64:	69bb      	ldr	r3, [r7, #24]
 8108c66:	2b00      	cmp	r3, #0
 8108c68:	d011      	beq.n	8108c8e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8108c6a:	69bb      	ldr	r3, [r7, #24]
 8108c6c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8108c6e:	697b      	ldr	r3, [r7, #20]
 8108c70:	3348      	adds	r3, #72	; 0x48
 8108c72:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8108c74:	69bb      	ldr	r3, [r7, #24]
 8108c76:	2200      	movs	r2, #0
 8108c78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8108c7c:	79fa      	ldrb	r2, [r7, #7]
 8108c7e:	69bb      	ldr	r3, [r7, #24]
 8108c80:	9300      	str	r3, [sp, #0]
 8108c82:	4613      	mov	r3, r2
 8108c84:	697a      	ldr	r2, [r7, #20]
 8108c86:	68b9      	ldr	r1, [r7, #8]
 8108c88:	68f8      	ldr	r0, [r7, #12]
 8108c8a:	f000 f805 	bl	8108c98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8108c8e:	69bb      	ldr	r3, [r7, #24]
	}
 8108c90:	4618      	mov	r0, r3
 8108c92:	3720      	adds	r7, #32
 8108c94:	46bd      	mov	sp, r7
 8108c96:	bd80      	pop	{r7, pc}

08108c98 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8108c98:	b580      	push	{r7, lr}
 8108c9a:	b084      	sub	sp, #16
 8108c9c:	af00      	add	r7, sp, #0
 8108c9e:	60f8      	str	r0, [r7, #12]
 8108ca0:	60b9      	str	r1, [r7, #8]
 8108ca2:	607a      	str	r2, [r7, #4]
 8108ca4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8108ca6:	68bb      	ldr	r3, [r7, #8]
 8108ca8:	2b00      	cmp	r3, #0
 8108caa:	d103      	bne.n	8108cb4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8108cac:	69bb      	ldr	r3, [r7, #24]
 8108cae:	69ba      	ldr	r2, [r7, #24]
 8108cb0:	601a      	str	r2, [r3, #0]
 8108cb2:	e002      	b.n	8108cba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8108cb4:	69bb      	ldr	r3, [r7, #24]
 8108cb6:	687a      	ldr	r2, [r7, #4]
 8108cb8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8108cba:	69bb      	ldr	r3, [r7, #24]
 8108cbc:	68fa      	ldr	r2, [r7, #12]
 8108cbe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8108cc0:	69bb      	ldr	r3, [r7, #24]
 8108cc2:	68ba      	ldr	r2, [r7, #8]
 8108cc4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8108cc6:	2101      	movs	r1, #1
 8108cc8:	69b8      	ldr	r0, [r7, #24]
 8108cca:	f7ff fecb 	bl	8108a64 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8108cce:	bf00      	nop
 8108cd0:	3710      	adds	r7, #16
 8108cd2:	46bd      	mov	sp, r7
 8108cd4:	bd80      	pop	{r7, pc}

08108cd6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8108cd6:	b580      	push	{r7, lr}
 8108cd8:	b082      	sub	sp, #8
 8108cda:	af00      	add	r7, sp, #0
 8108cdc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8108cde:	687b      	ldr	r3, [r7, #4]
 8108ce0:	2b00      	cmp	r3, #0
 8108ce2:	d00e      	beq.n	8108d02 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8108ce4:	687b      	ldr	r3, [r7, #4]
 8108ce6:	2200      	movs	r2, #0
 8108ce8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8108cea:	687b      	ldr	r3, [r7, #4]
 8108cec:	2200      	movs	r2, #0
 8108cee:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8108cf0:	687b      	ldr	r3, [r7, #4]
 8108cf2:	2200      	movs	r2, #0
 8108cf4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8108cf6:	2300      	movs	r3, #0
 8108cf8:	2200      	movs	r2, #0
 8108cfa:	2100      	movs	r1, #0
 8108cfc:	6878      	ldr	r0, [r7, #4]
 8108cfe:	f000 f81d 	bl	8108d3c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8108d02:	bf00      	nop
 8108d04:	3708      	adds	r7, #8
 8108d06:	46bd      	mov	sp, r7
 8108d08:	bd80      	pop	{r7, pc}

08108d0a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8108d0a:	b580      	push	{r7, lr}
 8108d0c:	b086      	sub	sp, #24
 8108d0e:	af00      	add	r7, sp, #0
 8108d10:	4603      	mov	r3, r0
 8108d12:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8108d14:	2301      	movs	r3, #1
 8108d16:	617b      	str	r3, [r7, #20]
 8108d18:	2300      	movs	r3, #0
 8108d1a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8108d1c:	79fb      	ldrb	r3, [r7, #7]
 8108d1e:	461a      	mov	r2, r3
 8108d20:	6939      	ldr	r1, [r7, #16]
 8108d22:	6978      	ldr	r0, [r7, #20]
 8108d24:	f7ff ff79 	bl	8108c1a <xQueueGenericCreate>
 8108d28:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8108d2a:	68f8      	ldr	r0, [r7, #12]
 8108d2c:	f7ff ffd3 	bl	8108cd6 <prvInitialiseMutex>

		return xNewQueue;
 8108d30:	68fb      	ldr	r3, [r7, #12]
	}
 8108d32:	4618      	mov	r0, r3
 8108d34:	3718      	adds	r7, #24
 8108d36:	46bd      	mov	sp, r7
 8108d38:	bd80      	pop	{r7, pc}
	...

08108d3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8108d3c:	b580      	push	{r7, lr}
 8108d3e:	b08e      	sub	sp, #56	; 0x38
 8108d40:	af00      	add	r7, sp, #0
 8108d42:	60f8      	str	r0, [r7, #12]
 8108d44:	60b9      	str	r1, [r7, #8]
 8108d46:	607a      	str	r2, [r7, #4]
 8108d48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8108d4a:	2300      	movs	r3, #0
 8108d4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8108d4e:	68fb      	ldr	r3, [r7, #12]
 8108d50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8108d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108d54:	2b00      	cmp	r3, #0
 8108d56:	d109      	bne.n	8108d6c <xQueueGenericSend+0x30>
 8108d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108d5c:	f383 8811 	msr	BASEPRI, r3
 8108d60:	f3bf 8f6f 	isb	sy
 8108d64:	f3bf 8f4f 	dsb	sy
 8108d68:	62bb      	str	r3, [r7, #40]	; 0x28
 8108d6a:	e7fe      	b.n	8108d6a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8108d6c:	68bb      	ldr	r3, [r7, #8]
 8108d6e:	2b00      	cmp	r3, #0
 8108d70:	d103      	bne.n	8108d7a <xQueueGenericSend+0x3e>
 8108d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8108d76:	2b00      	cmp	r3, #0
 8108d78:	d101      	bne.n	8108d7e <xQueueGenericSend+0x42>
 8108d7a:	2301      	movs	r3, #1
 8108d7c:	e000      	b.n	8108d80 <xQueueGenericSend+0x44>
 8108d7e:	2300      	movs	r3, #0
 8108d80:	2b00      	cmp	r3, #0
 8108d82:	d109      	bne.n	8108d98 <xQueueGenericSend+0x5c>
 8108d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108d88:	f383 8811 	msr	BASEPRI, r3
 8108d8c:	f3bf 8f6f 	isb	sy
 8108d90:	f3bf 8f4f 	dsb	sy
 8108d94:	627b      	str	r3, [r7, #36]	; 0x24
 8108d96:	e7fe      	b.n	8108d96 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8108d98:	683b      	ldr	r3, [r7, #0]
 8108d9a:	2b02      	cmp	r3, #2
 8108d9c:	d103      	bne.n	8108da6 <xQueueGenericSend+0x6a>
 8108d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108da2:	2b01      	cmp	r3, #1
 8108da4:	d101      	bne.n	8108daa <xQueueGenericSend+0x6e>
 8108da6:	2301      	movs	r3, #1
 8108da8:	e000      	b.n	8108dac <xQueueGenericSend+0x70>
 8108daa:	2300      	movs	r3, #0
 8108dac:	2b00      	cmp	r3, #0
 8108dae:	d109      	bne.n	8108dc4 <xQueueGenericSend+0x88>
 8108db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108db4:	f383 8811 	msr	BASEPRI, r3
 8108db8:	f3bf 8f6f 	isb	sy
 8108dbc:	f3bf 8f4f 	dsb	sy
 8108dc0:	623b      	str	r3, [r7, #32]
 8108dc2:	e7fe      	b.n	8108dc2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8108dc4:	f001 f876 	bl	8109eb4 <xTaskGetSchedulerState>
 8108dc8:	4603      	mov	r3, r0
 8108dca:	2b00      	cmp	r3, #0
 8108dcc:	d102      	bne.n	8108dd4 <xQueueGenericSend+0x98>
 8108dce:	687b      	ldr	r3, [r7, #4]
 8108dd0:	2b00      	cmp	r3, #0
 8108dd2:	d101      	bne.n	8108dd8 <xQueueGenericSend+0x9c>
 8108dd4:	2301      	movs	r3, #1
 8108dd6:	e000      	b.n	8108dda <xQueueGenericSend+0x9e>
 8108dd8:	2300      	movs	r3, #0
 8108dda:	2b00      	cmp	r3, #0
 8108ddc:	d109      	bne.n	8108df2 <xQueueGenericSend+0xb6>
 8108dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108de2:	f383 8811 	msr	BASEPRI, r3
 8108de6:	f3bf 8f6f 	isb	sy
 8108dea:	f3bf 8f4f 	dsb	sy
 8108dee:	61fb      	str	r3, [r7, #28]
 8108df0:	e7fe      	b.n	8108df0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8108df2:	f7ff fd5b 	bl	81088ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8108df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108df8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8108dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108dfe:	429a      	cmp	r2, r3
 8108e00:	d302      	bcc.n	8108e08 <xQueueGenericSend+0xcc>
 8108e02:	683b      	ldr	r3, [r7, #0]
 8108e04:	2b02      	cmp	r3, #2
 8108e06:	d129      	bne.n	8108e5c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8108e08:	683a      	ldr	r2, [r7, #0]
 8108e0a:	68b9      	ldr	r1, [r7, #8]
 8108e0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8108e0e:	f000 f9af 	bl	8109170 <prvCopyDataToQueue>
 8108e12:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8108e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108e18:	2b00      	cmp	r3, #0
 8108e1a:	d010      	beq.n	8108e3e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8108e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108e1e:	3324      	adds	r3, #36	; 0x24
 8108e20:	4618      	mov	r0, r3
 8108e22:	f000 fe91 	bl	8109b48 <xTaskRemoveFromEventList>
 8108e26:	4603      	mov	r3, r0
 8108e28:	2b00      	cmp	r3, #0
 8108e2a:	d013      	beq.n	8108e54 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8108e2c:	4b3f      	ldr	r3, [pc, #252]	; (8108f2c <xQueueGenericSend+0x1f0>)
 8108e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8108e32:	601a      	str	r2, [r3, #0]
 8108e34:	f3bf 8f4f 	dsb	sy
 8108e38:	f3bf 8f6f 	isb	sy
 8108e3c:	e00a      	b.n	8108e54 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8108e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108e40:	2b00      	cmp	r3, #0
 8108e42:	d007      	beq.n	8108e54 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8108e44:	4b39      	ldr	r3, [pc, #228]	; (8108f2c <xQueueGenericSend+0x1f0>)
 8108e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8108e4a:	601a      	str	r2, [r3, #0]
 8108e4c:	f3bf 8f4f 	dsb	sy
 8108e50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8108e54:	f7ff fd58 	bl	8108908 <vPortExitCritical>
				return pdPASS;
 8108e58:	2301      	movs	r3, #1
 8108e5a:	e063      	b.n	8108f24 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8108e5c:	687b      	ldr	r3, [r7, #4]
 8108e5e:	2b00      	cmp	r3, #0
 8108e60:	d103      	bne.n	8108e6a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8108e62:	f7ff fd51 	bl	8108908 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8108e66:	2300      	movs	r3, #0
 8108e68:	e05c      	b.n	8108f24 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8108e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108e6c:	2b00      	cmp	r3, #0
 8108e6e:	d106      	bne.n	8108e7e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8108e70:	f107 0314 	add.w	r3, r7, #20
 8108e74:	4618      	mov	r0, r3
 8108e76:	f000 fec9 	bl	8109c0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8108e7a:	2301      	movs	r3, #1
 8108e7c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8108e7e:	f7ff fd43 	bl	8108908 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8108e82:	f000 fc81 	bl	8109788 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8108e86:	f7ff fd11 	bl	81088ac <vPortEnterCritical>
 8108e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108e8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8108e90:	b25b      	sxtb	r3, r3
 8108e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108e96:	d103      	bne.n	8108ea0 <xQueueGenericSend+0x164>
 8108e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108e9a:	2200      	movs	r2, #0
 8108e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8108ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108ea2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8108ea6:	b25b      	sxtb	r3, r3
 8108ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108eac:	d103      	bne.n	8108eb6 <xQueueGenericSend+0x17a>
 8108eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108eb0:	2200      	movs	r2, #0
 8108eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8108eb6:	f7ff fd27 	bl	8108908 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8108eba:	1d3a      	adds	r2, r7, #4
 8108ebc:	f107 0314 	add.w	r3, r7, #20
 8108ec0:	4611      	mov	r1, r2
 8108ec2:	4618      	mov	r0, r3
 8108ec4:	f000 feb8 	bl	8109c38 <xTaskCheckForTimeOut>
 8108ec8:	4603      	mov	r3, r0
 8108eca:	2b00      	cmp	r3, #0
 8108ecc:	d124      	bne.n	8108f18 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8108ece:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8108ed0:	f000 fa20 	bl	8109314 <prvIsQueueFull>
 8108ed4:	4603      	mov	r3, r0
 8108ed6:	2b00      	cmp	r3, #0
 8108ed8:	d018      	beq.n	8108f0c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8108eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108edc:	3310      	adds	r3, #16
 8108ede:	687a      	ldr	r2, [r7, #4]
 8108ee0:	4611      	mov	r1, r2
 8108ee2:	4618      	mov	r0, r3
 8108ee4:	f000 fe0c 	bl	8109b00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8108ee8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8108eea:	f000 f9ab 	bl	8109244 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8108eee:	f000 fc59 	bl	81097a4 <xTaskResumeAll>
 8108ef2:	4603      	mov	r3, r0
 8108ef4:	2b00      	cmp	r3, #0
 8108ef6:	f47f af7c 	bne.w	8108df2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8108efa:	4b0c      	ldr	r3, [pc, #48]	; (8108f2c <xQueueGenericSend+0x1f0>)
 8108efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8108f00:	601a      	str	r2, [r3, #0]
 8108f02:	f3bf 8f4f 	dsb	sy
 8108f06:	f3bf 8f6f 	isb	sy
 8108f0a:	e772      	b.n	8108df2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8108f0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8108f0e:	f000 f999 	bl	8109244 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8108f12:	f000 fc47 	bl	81097a4 <xTaskResumeAll>
 8108f16:	e76c      	b.n	8108df2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8108f18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8108f1a:	f000 f993 	bl	8109244 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8108f1e:	f000 fc41 	bl	81097a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8108f22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8108f24:	4618      	mov	r0, r3
 8108f26:	3738      	adds	r7, #56	; 0x38
 8108f28:	46bd      	mov	sp, r7
 8108f2a:	bd80      	pop	{r7, pc}
 8108f2c:	e000ed04 	.word	0xe000ed04

08108f30 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8108f30:	b580      	push	{r7, lr}
 8108f32:	b08e      	sub	sp, #56	; 0x38
 8108f34:	af00      	add	r7, sp, #0
 8108f36:	6078      	str	r0, [r7, #4]
 8108f38:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8108f3a:	2300      	movs	r3, #0
 8108f3c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8108f3e:	687b      	ldr	r3, [r7, #4]
 8108f40:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8108f42:	2300      	movs	r3, #0
 8108f44:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8108f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108f48:	2b00      	cmp	r3, #0
 8108f4a:	d109      	bne.n	8108f60 <xQueueSemaphoreTake+0x30>
 8108f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108f50:	f383 8811 	msr	BASEPRI, r3
 8108f54:	f3bf 8f6f 	isb	sy
 8108f58:	f3bf 8f4f 	dsb	sy
 8108f5c:	623b      	str	r3, [r7, #32]
 8108f5e:	e7fe      	b.n	8108f5e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8108f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8108f64:	2b00      	cmp	r3, #0
 8108f66:	d009      	beq.n	8108f7c <xQueueSemaphoreTake+0x4c>
 8108f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108f6c:	f383 8811 	msr	BASEPRI, r3
 8108f70:	f3bf 8f6f 	isb	sy
 8108f74:	f3bf 8f4f 	dsb	sy
 8108f78:	61fb      	str	r3, [r7, #28]
 8108f7a:	e7fe      	b.n	8108f7a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8108f7c:	f000 ff9a 	bl	8109eb4 <xTaskGetSchedulerState>
 8108f80:	4603      	mov	r3, r0
 8108f82:	2b00      	cmp	r3, #0
 8108f84:	d102      	bne.n	8108f8c <xQueueSemaphoreTake+0x5c>
 8108f86:	683b      	ldr	r3, [r7, #0]
 8108f88:	2b00      	cmp	r3, #0
 8108f8a:	d101      	bne.n	8108f90 <xQueueSemaphoreTake+0x60>
 8108f8c:	2301      	movs	r3, #1
 8108f8e:	e000      	b.n	8108f92 <xQueueSemaphoreTake+0x62>
 8108f90:	2300      	movs	r3, #0
 8108f92:	2b00      	cmp	r3, #0
 8108f94:	d109      	bne.n	8108faa <xQueueSemaphoreTake+0x7a>
 8108f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108f9a:	f383 8811 	msr	BASEPRI, r3
 8108f9e:	f3bf 8f6f 	isb	sy
 8108fa2:	f3bf 8f4f 	dsb	sy
 8108fa6:	61bb      	str	r3, [r7, #24]
 8108fa8:	e7fe      	b.n	8108fa8 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8108faa:	f7ff fc7f 	bl	81088ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8108fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108fb2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8108fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108fb6:	2b00      	cmp	r3, #0
 8108fb8:	d024      	beq.n	8109004 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8108fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108fbc:	1e5a      	subs	r2, r3, #1
 8108fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108fc0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8108fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108fc4:	681b      	ldr	r3, [r3, #0]
 8108fc6:	2b00      	cmp	r3, #0
 8108fc8:	d104      	bne.n	8108fd4 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8108fca:	f001 f92d 	bl	810a228 <pvTaskIncrementMutexHeldCount>
 8108fce:	4602      	mov	r2, r0
 8108fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108fd2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8108fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108fd6:	691b      	ldr	r3, [r3, #16]
 8108fd8:	2b00      	cmp	r3, #0
 8108fda:	d00f      	beq.n	8108ffc <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8108fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108fde:	3310      	adds	r3, #16
 8108fe0:	4618      	mov	r0, r3
 8108fe2:	f000 fdb1 	bl	8109b48 <xTaskRemoveFromEventList>
 8108fe6:	4603      	mov	r3, r0
 8108fe8:	2b00      	cmp	r3, #0
 8108fea:	d007      	beq.n	8108ffc <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8108fec:	4b53      	ldr	r3, [pc, #332]	; (810913c <xQueueSemaphoreTake+0x20c>)
 8108fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8108ff2:	601a      	str	r2, [r3, #0]
 8108ff4:	f3bf 8f4f 	dsb	sy
 8108ff8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8108ffc:	f7ff fc84 	bl	8108908 <vPortExitCritical>
				return pdPASS;
 8109000:	2301      	movs	r3, #1
 8109002:	e096      	b.n	8109132 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8109004:	683b      	ldr	r3, [r7, #0]
 8109006:	2b00      	cmp	r3, #0
 8109008:	d110      	bne.n	810902c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 810900a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810900c:	2b00      	cmp	r3, #0
 810900e:	d009      	beq.n	8109024 <xQueueSemaphoreTake+0xf4>
 8109010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109014:	f383 8811 	msr	BASEPRI, r3
 8109018:	f3bf 8f6f 	isb	sy
 810901c:	f3bf 8f4f 	dsb	sy
 8109020:	617b      	str	r3, [r7, #20]
 8109022:	e7fe      	b.n	8109022 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8109024:	f7ff fc70 	bl	8108908 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8109028:	2300      	movs	r3, #0
 810902a:	e082      	b.n	8109132 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 810902c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810902e:	2b00      	cmp	r3, #0
 8109030:	d106      	bne.n	8109040 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8109032:	f107 030c 	add.w	r3, r7, #12
 8109036:	4618      	mov	r0, r3
 8109038:	f000 fde8 	bl	8109c0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810903c:	2301      	movs	r3, #1
 810903e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8109040:	f7ff fc62 	bl	8108908 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8109044:	f000 fba0 	bl	8109788 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8109048:	f7ff fc30 	bl	81088ac <vPortEnterCritical>
 810904c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810904e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8109052:	b25b      	sxtb	r3, r3
 8109054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109058:	d103      	bne.n	8109062 <xQueueSemaphoreTake+0x132>
 810905a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810905c:	2200      	movs	r2, #0
 810905e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8109062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109064:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8109068:	b25b      	sxtb	r3, r3
 810906a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810906e:	d103      	bne.n	8109078 <xQueueSemaphoreTake+0x148>
 8109070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109072:	2200      	movs	r2, #0
 8109074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8109078:	f7ff fc46 	bl	8108908 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810907c:	463a      	mov	r2, r7
 810907e:	f107 030c 	add.w	r3, r7, #12
 8109082:	4611      	mov	r1, r2
 8109084:	4618      	mov	r0, r3
 8109086:	f000 fdd7 	bl	8109c38 <xTaskCheckForTimeOut>
 810908a:	4603      	mov	r3, r0
 810908c:	2b00      	cmp	r3, #0
 810908e:	d132      	bne.n	81090f6 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8109090:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8109092:	f000 f929 	bl	81092e8 <prvIsQueueEmpty>
 8109096:	4603      	mov	r3, r0
 8109098:	2b00      	cmp	r3, #0
 810909a:	d026      	beq.n	81090ea <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810909c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810909e:	681b      	ldr	r3, [r3, #0]
 81090a0:	2b00      	cmp	r3, #0
 81090a2:	d109      	bne.n	81090b8 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 81090a4:	f7ff fc02 	bl	81088ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 81090a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81090aa:	689b      	ldr	r3, [r3, #8]
 81090ac:	4618      	mov	r0, r3
 81090ae:	f000 ff1f 	bl	8109ef0 <xTaskPriorityInherit>
 81090b2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 81090b4:	f7ff fc28 	bl	8108908 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 81090b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81090ba:	3324      	adds	r3, #36	; 0x24
 81090bc:	683a      	ldr	r2, [r7, #0]
 81090be:	4611      	mov	r1, r2
 81090c0:	4618      	mov	r0, r3
 81090c2:	f000 fd1d 	bl	8109b00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 81090c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 81090c8:	f000 f8bc 	bl	8109244 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 81090cc:	f000 fb6a 	bl	81097a4 <xTaskResumeAll>
 81090d0:	4603      	mov	r3, r0
 81090d2:	2b00      	cmp	r3, #0
 81090d4:	f47f af69 	bne.w	8108faa <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 81090d8:	4b18      	ldr	r3, [pc, #96]	; (810913c <xQueueSemaphoreTake+0x20c>)
 81090da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81090de:	601a      	str	r2, [r3, #0]
 81090e0:	f3bf 8f4f 	dsb	sy
 81090e4:	f3bf 8f6f 	isb	sy
 81090e8:	e75f      	b.n	8108faa <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 81090ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 81090ec:	f000 f8aa 	bl	8109244 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 81090f0:	f000 fb58 	bl	81097a4 <xTaskResumeAll>
 81090f4:	e759      	b.n	8108faa <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 81090f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 81090f8:	f000 f8a4 	bl	8109244 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 81090fc:	f000 fb52 	bl	81097a4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8109100:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8109102:	f000 f8f1 	bl	81092e8 <prvIsQueueEmpty>
 8109106:	4603      	mov	r3, r0
 8109108:	2b00      	cmp	r3, #0
 810910a:	f43f af4e 	beq.w	8108faa <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 810910e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109110:	2b00      	cmp	r3, #0
 8109112:	d00d      	beq.n	8109130 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8109114:	f7ff fbca 	bl	81088ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8109118:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810911a:	f000 f811 	bl	8109140 <prvGetDisinheritPriorityAfterTimeout>
 810911e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8109120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109122:	689b      	ldr	r3, [r3, #8]
 8109124:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8109126:	4618      	mov	r0, r3
 8109128:	f000 ffe6 	bl	810a0f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 810912c:	f7ff fbec 	bl	8108908 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8109130:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8109132:	4618      	mov	r0, r3
 8109134:	3738      	adds	r7, #56	; 0x38
 8109136:	46bd      	mov	sp, r7
 8109138:	bd80      	pop	{r7, pc}
 810913a:	bf00      	nop
 810913c:	e000ed04 	.word	0xe000ed04

08109140 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8109140:	b480      	push	{r7}
 8109142:	b085      	sub	sp, #20
 8109144:	af00      	add	r7, sp, #0
 8109146:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8109148:	687b      	ldr	r3, [r7, #4]
 810914a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810914c:	2b00      	cmp	r3, #0
 810914e:	d006      	beq.n	810915e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8109150:	687b      	ldr	r3, [r7, #4]
 8109152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8109154:	681b      	ldr	r3, [r3, #0]
 8109156:	f1c3 0307 	rsb	r3, r3, #7
 810915a:	60fb      	str	r3, [r7, #12]
 810915c:	e001      	b.n	8109162 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 810915e:	2300      	movs	r3, #0
 8109160:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8109162:	68fb      	ldr	r3, [r7, #12]
	}
 8109164:	4618      	mov	r0, r3
 8109166:	3714      	adds	r7, #20
 8109168:	46bd      	mov	sp, r7
 810916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810916e:	4770      	bx	lr

08109170 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8109170:	b580      	push	{r7, lr}
 8109172:	b086      	sub	sp, #24
 8109174:	af00      	add	r7, sp, #0
 8109176:	60f8      	str	r0, [r7, #12]
 8109178:	60b9      	str	r1, [r7, #8]
 810917a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 810917c:	2300      	movs	r3, #0
 810917e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8109180:	68fb      	ldr	r3, [r7, #12]
 8109182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109184:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8109186:	68fb      	ldr	r3, [r7, #12]
 8109188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810918a:	2b00      	cmp	r3, #0
 810918c:	d10d      	bne.n	81091aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810918e:	68fb      	ldr	r3, [r7, #12]
 8109190:	681b      	ldr	r3, [r3, #0]
 8109192:	2b00      	cmp	r3, #0
 8109194:	d14d      	bne.n	8109232 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8109196:	68fb      	ldr	r3, [r7, #12]
 8109198:	689b      	ldr	r3, [r3, #8]
 810919a:	4618      	mov	r0, r3
 810919c:	f000 ff28 	bl	8109ff0 <xTaskPriorityDisinherit>
 81091a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 81091a2:	68fb      	ldr	r3, [r7, #12]
 81091a4:	2200      	movs	r2, #0
 81091a6:	609a      	str	r2, [r3, #8]
 81091a8:	e043      	b.n	8109232 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 81091aa:	687b      	ldr	r3, [r7, #4]
 81091ac:	2b00      	cmp	r3, #0
 81091ae:	d119      	bne.n	81091e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 81091b0:	68fb      	ldr	r3, [r7, #12]
 81091b2:	6858      	ldr	r0, [r3, #4]
 81091b4:	68fb      	ldr	r3, [r7, #12]
 81091b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81091b8:	461a      	mov	r2, r3
 81091ba:	68b9      	ldr	r1, [r7, #8]
 81091bc:	f004 ffdc 	bl	810e178 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 81091c0:	68fb      	ldr	r3, [r7, #12]
 81091c2:	685a      	ldr	r2, [r3, #4]
 81091c4:	68fb      	ldr	r3, [r7, #12]
 81091c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81091c8:	441a      	add	r2, r3
 81091ca:	68fb      	ldr	r3, [r7, #12]
 81091cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 81091ce:	68fb      	ldr	r3, [r7, #12]
 81091d0:	685a      	ldr	r2, [r3, #4]
 81091d2:	68fb      	ldr	r3, [r7, #12]
 81091d4:	689b      	ldr	r3, [r3, #8]
 81091d6:	429a      	cmp	r2, r3
 81091d8:	d32b      	bcc.n	8109232 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 81091da:	68fb      	ldr	r3, [r7, #12]
 81091dc:	681a      	ldr	r2, [r3, #0]
 81091de:	68fb      	ldr	r3, [r7, #12]
 81091e0:	605a      	str	r2, [r3, #4]
 81091e2:	e026      	b.n	8109232 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 81091e4:	68fb      	ldr	r3, [r7, #12]
 81091e6:	68d8      	ldr	r0, [r3, #12]
 81091e8:	68fb      	ldr	r3, [r7, #12]
 81091ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81091ec:	461a      	mov	r2, r3
 81091ee:	68b9      	ldr	r1, [r7, #8]
 81091f0:	f004 ffc2 	bl	810e178 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 81091f4:	68fb      	ldr	r3, [r7, #12]
 81091f6:	68da      	ldr	r2, [r3, #12]
 81091f8:	68fb      	ldr	r3, [r7, #12]
 81091fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81091fc:	425b      	negs	r3, r3
 81091fe:	441a      	add	r2, r3
 8109200:	68fb      	ldr	r3, [r7, #12]
 8109202:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8109204:	68fb      	ldr	r3, [r7, #12]
 8109206:	68da      	ldr	r2, [r3, #12]
 8109208:	68fb      	ldr	r3, [r7, #12]
 810920a:	681b      	ldr	r3, [r3, #0]
 810920c:	429a      	cmp	r2, r3
 810920e:	d207      	bcs.n	8109220 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8109210:	68fb      	ldr	r3, [r7, #12]
 8109212:	689a      	ldr	r2, [r3, #8]
 8109214:	68fb      	ldr	r3, [r7, #12]
 8109216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109218:	425b      	negs	r3, r3
 810921a:	441a      	add	r2, r3
 810921c:	68fb      	ldr	r3, [r7, #12]
 810921e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8109220:	687b      	ldr	r3, [r7, #4]
 8109222:	2b02      	cmp	r3, #2
 8109224:	d105      	bne.n	8109232 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8109226:	693b      	ldr	r3, [r7, #16]
 8109228:	2b00      	cmp	r3, #0
 810922a:	d002      	beq.n	8109232 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 810922c:	693b      	ldr	r3, [r7, #16]
 810922e:	3b01      	subs	r3, #1
 8109230:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8109232:	693b      	ldr	r3, [r7, #16]
 8109234:	1c5a      	adds	r2, r3, #1
 8109236:	68fb      	ldr	r3, [r7, #12]
 8109238:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 810923a:	697b      	ldr	r3, [r7, #20]
}
 810923c:	4618      	mov	r0, r3
 810923e:	3718      	adds	r7, #24
 8109240:	46bd      	mov	sp, r7
 8109242:	bd80      	pop	{r7, pc}

08109244 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8109244:	b580      	push	{r7, lr}
 8109246:	b084      	sub	sp, #16
 8109248:	af00      	add	r7, sp, #0
 810924a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 810924c:	f7ff fb2e 	bl	81088ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8109250:	687b      	ldr	r3, [r7, #4]
 8109252:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8109256:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8109258:	e011      	b.n	810927e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810925a:	687b      	ldr	r3, [r7, #4]
 810925c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810925e:	2b00      	cmp	r3, #0
 8109260:	d012      	beq.n	8109288 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8109262:	687b      	ldr	r3, [r7, #4]
 8109264:	3324      	adds	r3, #36	; 0x24
 8109266:	4618      	mov	r0, r3
 8109268:	f000 fc6e 	bl	8109b48 <xTaskRemoveFromEventList>
 810926c:	4603      	mov	r3, r0
 810926e:	2b00      	cmp	r3, #0
 8109270:	d001      	beq.n	8109276 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8109272:	f000 fd41 	bl	8109cf8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8109276:	7bfb      	ldrb	r3, [r7, #15]
 8109278:	3b01      	subs	r3, #1
 810927a:	b2db      	uxtb	r3, r3
 810927c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810927e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8109282:	2b00      	cmp	r3, #0
 8109284:	dce9      	bgt.n	810925a <prvUnlockQueue+0x16>
 8109286:	e000      	b.n	810928a <prvUnlockQueue+0x46>
					break;
 8109288:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 810928a:	687b      	ldr	r3, [r7, #4]
 810928c:	22ff      	movs	r2, #255	; 0xff
 810928e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8109292:	f7ff fb39 	bl	8108908 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8109296:	f7ff fb09 	bl	81088ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 810929a:	687b      	ldr	r3, [r7, #4]
 810929c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 81092a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 81092a2:	e011      	b.n	81092c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 81092a4:	687b      	ldr	r3, [r7, #4]
 81092a6:	691b      	ldr	r3, [r3, #16]
 81092a8:	2b00      	cmp	r3, #0
 81092aa:	d012      	beq.n	81092d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 81092ac:	687b      	ldr	r3, [r7, #4]
 81092ae:	3310      	adds	r3, #16
 81092b0:	4618      	mov	r0, r3
 81092b2:	f000 fc49 	bl	8109b48 <xTaskRemoveFromEventList>
 81092b6:	4603      	mov	r3, r0
 81092b8:	2b00      	cmp	r3, #0
 81092ba:	d001      	beq.n	81092c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 81092bc:	f000 fd1c 	bl	8109cf8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 81092c0:	7bbb      	ldrb	r3, [r7, #14]
 81092c2:	3b01      	subs	r3, #1
 81092c4:	b2db      	uxtb	r3, r3
 81092c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 81092c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 81092cc:	2b00      	cmp	r3, #0
 81092ce:	dce9      	bgt.n	81092a4 <prvUnlockQueue+0x60>
 81092d0:	e000      	b.n	81092d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 81092d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 81092d4:	687b      	ldr	r3, [r7, #4]
 81092d6:	22ff      	movs	r2, #255	; 0xff
 81092d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 81092dc:	f7ff fb14 	bl	8108908 <vPortExitCritical>
}
 81092e0:	bf00      	nop
 81092e2:	3710      	adds	r7, #16
 81092e4:	46bd      	mov	sp, r7
 81092e6:	bd80      	pop	{r7, pc}

081092e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 81092e8:	b580      	push	{r7, lr}
 81092ea:	b084      	sub	sp, #16
 81092ec:	af00      	add	r7, sp, #0
 81092ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 81092f0:	f7ff fadc 	bl	81088ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 81092f4:	687b      	ldr	r3, [r7, #4]
 81092f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81092f8:	2b00      	cmp	r3, #0
 81092fa:	d102      	bne.n	8109302 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 81092fc:	2301      	movs	r3, #1
 81092fe:	60fb      	str	r3, [r7, #12]
 8109300:	e001      	b.n	8109306 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8109302:	2300      	movs	r3, #0
 8109304:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8109306:	f7ff faff 	bl	8108908 <vPortExitCritical>

	return xReturn;
 810930a:	68fb      	ldr	r3, [r7, #12]
}
 810930c:	4618      	mov	r0, r3
 810930e:	3710      	adds	r7, #16
 8109310:	46bd      	mov	sp, r7
 8109312:	bd80      	pop	{r7, pc}

08109314 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8109314:	b580      	push	{r7, lr}
 8109316:	b084      	sub	sp, #16
 8109318:	af00      	add	r7, sp, #0
 810931a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810931c:	f7ff fac6 	bl	81088ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8109320:	687b      	ldr	r3, [r7, #4]
 8109322:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8109324:	687b      	ldr	r3, [r7, #4]
 8109326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109328:	429a      	cmp	r2, r3
 810932a:	d102      	bne.n	8109332 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 810932c:	2301      	movs	r3, #1
 810932e:	60fb      	str	r3, [r7, #12]
 8109330:	e001      	b.n	8109336 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8109332:	2300      	movs	r3, #0
 8109334:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8109336:	f7ff fae7 	bl	8108908 <vPortExitCritical>

	return xReturn;
 810933a:	68fb      	ldr	r3, [r7, #12]
}
 810933c:	4618      	mov	r0, r3
 810933e:	3710      	adds	r7, #16
 8109340:	46bd      	mov	sp, r7
 8109342:	bd80      	pop	{r7, pc}

08109344 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8109344:	b580      	push	{r7, lr}
 8109346:	b08e      	sub	sp, #56	; 0x38
 8109348:	af04      	add	r7, sp, #16
 810934a:	60f8      	str	r0, [r7, #12]
 810934c:	60b9      	str	r1, [r7, #8]
 810934e:	607a      	str	r2, [r7, #4]
 8109350:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8109352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8109354:	2b00      	cmp	r3, #0
 8109356:	d109      	bne.n	810936c <xTaskCreateStatic+0x28>
 8109358:	f04f 0350 	mov.w	r3, #80	; 0x50
 810935c:	f383 8811 	msr	BASEPRI, r3
 8109360:	f3bf 8f6f 	isb	sy
 8109364:	f3bf 8f4f 	dsb	sy
 8109368:	623b      	str	r3, [r7, #32]
 810936a:	e7fe      	b.n	810936a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 810936c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810936e:	2b00      	cmp	r3, #0
 8109370:	d109      	bne.n	8109386 <xTaskCreateStatic+0x42>
 8109372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109376:	f383 8811 	msr	BASEPRI, r3
 810937a:	f3bf 8f6f 	isb	sy
 810937e:	f3bf 8f4f 	dsb	sy
 8109382:	61fb      	str	r3, [r7, #28]
 8109384:	e7fe      	b.n	8109384 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8109386:	2354      	movs	r3, #84	; 0x54
 8109388:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 810938a:	693b      	ldr	r3, [r7, #16]
 810938c:	2b54      	cmp	r3, #84	; 0x54
 810938e:	d009      	beq.n	81093a4 <xTaskCreateStatic+0x60>
 8109390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109394:	f383 8811 	msr	BASEPRI, r3
 8109398:	f3bf 8f6f 	isb	sy
 810939c:	f3bf 8f4f 	dsb	sy
 81093a0:	61bb      	str	r3, [r7, #24]
 81093a2:	e7fe      	b.n	81093a2 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 81093a4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 81093a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81093a8:	2b00      	cmp	r3, #0
 81093aa:	d01e      	beq.n	81093ea <xTaskCreateStatic+0xa6>
 81093ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81093ae:	2b00      	cmp	r3, #0
 81093b0:	d01b      	beq.n	81093ea <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 81093b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81093b4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 81093b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81093b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81093ba:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 81093bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81093be:	2202      	movs	r2, #2
 81093c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 81093c4:	2300      	movs	r3, #0
 81093c6:	9303      	str	r3, [sp, #12]
 81093c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81093ca:	9302      	str	r3, [sp, #8]
 81093cc:	f107 0314 	add.w	r3, r7, #20
 81093d0:	9301      	str	r3, [sp, #4]
 81093d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81093d4:	9300      	str	r3, [sp, #0]
 81093d6:	683b      	ldr	r3, [r7, #0]
 81093d8:	687a      	ldr	r2, [r7, #4]
 81093da:	68b9      	ldr	r1, [r7, #8]
 81093dc:	68f8      	ldr	r0, [r7, #12]
 81093de:	f000 f850 	bl	8109482 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 81093e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 81093e4:	f000 f8d4 	bl	8109590 <prvAddNewTaskToReadyList>
 81093e8:	e001      	b.n	81093ee <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 81093ea:	2300      	movs	r3, #0
 81093ec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 81093ee:	697b      	ldr	r3, [r7, #20]
	}
 81093f0:	4618      	mov	r0, r3
 81093f2:	3728      	adds	r7, #40	; 0x28
 81093f4:	46bd      	mov	sp, r7
 81093f6:	bd80      	pop	{r7, pc}

081093f8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 81093f8:	b580      	push	{r7, lr}
 81093fa:	b08c      	sub	sp, #48	; 0x30
 81093fc:	af04      	add	r7, sp, #16
 81093fe:	60f8      	str	r0, [r7, #12]
 8109400:	60b9      	str	r1, [r7, #8]
 8109402:	603b      	str	r3, [r7, #0]
 8109404:	4613      	mov	r3, r2
 8109406:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8109408:	88fb      	ldrh	r3, [r7, #6]
 810940a:	009b      	lsls	r3, r3, #2
 810940c:	4618      	mov	r0, r3
 810940e:	f7fe fe9b 	bl	8108148 <pvPortMalloc>
 8109412:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8109414:	697b      	ldr	r3, [r7, #20]
 8109416:	2b00      	cmp	r3, #0
 8109418:	d00e      	beq.n	8109438 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 810941a:	2054      	movs	r0, #84	; 0x54
 810941c:	f7fe fe94 	bl	8108148 <pvPortMalloc>
 8109420:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8109422:	69fb      	ldr	r3, [r7, #28]
 8109424:	2b00      	cmp	r3, #0
 8109426:	d003      	beq.n	8109430 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8109428:	69fb      	ldr	r3, [r7, #28]
 810942a:	697a      	ldr	r2, [r7, #20]
 810942c:	631a      	str	r2, [r3, #48]	; 0x30
 810942e:	e005      	b.n	810943c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8109430:	6978      	ldr	r0, [r7, #20]
 8109432:	f7fe ff4b 	bl	81082cc <vPortFree>
 8109436:	e001      	b.n	810943c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8109438:	2300      	movs	r3, #0
 810943a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 810943c:	69fb      	ldr	r3, [r7, #28]
 810943e:	2b00      	cmp	r3, #0
 8109440:	d017      	beq.n	8109472 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8109442:	69fb      	ldr	r3, [r7, #28]
 8109444:	2200      	movs	r2, #0
 8109446:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 810944a:	88fa      	ldrh	r2, [r7, #6]
 810944c:	2300      	movs	r3, #0
 810944e:	9303      	str	r3, [sp, #12]
 8109450:	69fb      	ldr	r3, [r7, #28]
 8109452:	9302      	str	r3, [sp, #8]
 8109454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109456:	9301      	str	r3, [sp, #4]
 8109458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810945a:	9300      	str	r3, [sp, #0]
 810945c:	683b      	ldr	r3, [r7, #0]
 810945e:	68b9      	ldr	r1, [r7, #8]
 8109460:	68f8      	ldr	r0, [r7, #12]
 8109462:	f000 f80e 	bl	8109482 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8109466:	69f8      	ldr	r0, [r7, #28]
 8109468:	f000 f892 	bl	8109590 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 810946c:	2301      	movs	r3, #1
 810946e:	61bb      	str	r3, [r7, #24]
 8109470:	e002      	b.n	8109478 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8109472:	f04f 33ff 	mov.w	r3, #4294967295
 8109476:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8109478:	69bb      	ldr	r3, [r7, #24]
	}
 810947a:	4618      	mov	r0, r3
 810947c:	3720      	adds	r7, #32
 810947e:	46bd      	mov	sp, r7
 8109480:	bd80      	pop	{r7, pc}

08109482 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8109482:	b580      	push	{r7, lr}
 8109484:	b088      	sub	sp, #32
 8109486:	af00      	add	r7, sp, #0
 8109488:	60f8      	str	r0, [r7, #12]
 810948a:	60b9      	str	r1, [r7, #8]
 810948c:	607a      	str	r2, [r7, #4]
 810948e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8109490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109492:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8109494:	687b      	ldr	r3, [r7, #4]
 8109496:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 810949a:	3b01      	subs	r3, #1
 810949c:	009b      	lsls	r3, r3, #2
 810949e:	4413      	add	r3, r2
 81094a0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 81094a2:	69bb      	ldr	r3, [r7, #24]
 81094a4:	f023 0307 	bic.w	r3, r3, #7
 81094a8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 81094aa:	69bb      	ldr	r3, [r7, #24]
 81094ac:	f003 0307 	and.w	r3, r3, #7
 81094b0:	2b00      	cmp	r3, #0
 81094b2:	d009      	beq.n	81094c8 <prvInitialiseNewTask+0x46>
 81094b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81094b8:	f383 8811 	msr	BASEPRI, r3
 81094bc:	f3bf 8f6f 	isb	sy
 81094c0:	f3bf 8f4f 	dsb	sy
 81094c4:	617b      	str	r3, [r7, #20]
 81094c6:	e7fe      	b.n	81094c6 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 81094c8:	68bb      	ldr	r3, [r7, #8]
 81094ca:	2b00      	cmp	r3, #0
 81094cc:	d01f      	beq.n	810950e <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 81094ce:	2300      	movs	r3, #0
 81094d0:	61fb      	str	r3, [r7, #28]
 81094d2:	e012      	b.n	81094fa <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 81094d4:	68ba      	ldr	r2, [r7, #8]
 81094d6:	69fb      	ldr	r3, [r7, #28]
 81094d8:	4413      	add	r3, r2
 81094da:	7819      	ldrb	r1, [r3, #0]
 81094dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81094de:	69fb      	ldr	r3, [r7, #28]
 81094e0:	4413      	add	r3, r2
 81094e2:	3334      	adds	r3, #52	; 0x34
 81094e4:	460a      	mov	r2, r1
 81094e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 81094e8:	68ba      	ldr	r2, [r7, #8]
 81094ea:	69fb      	ldr	r3, [r7, #28]
 81094ec:	4413      	add	r3, r2
 81094ee:	781b      	ldrb	r3, [r3, #0]
 81094f0:	2b00      	cmp	r3, #0
 81094f2:	d006      	beq.n	8109502 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 81094f4:	69fb      	ldr	r3, [r7, #28]
 81094f6:	3301      	adds	r3, #1
 81094f8:	61fb      	str	r3, [r7, #28]
 81094fa:	69fb      	ldr	r3, [r7, #28]
 81094fc:	2b0f      	cmp	r3, #15
 81094fe:	d9e9      	bls.n	81094d4 <prvInitialiseNewTask+0x52>
 8109500:	e000      	b.n	8109504 <prvInitialiseNewTask+0x82>
			{
				break;
 8109502:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8109504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109506:	2200      	movs	r2, #0
 8109508:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 810950c:	e003      	b.n	8109516 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 810950e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109510:	2200      	movs	r2, #0
 8109512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8109516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109518:	2b06      	cmp	r3, #6
 810951a:	d901      	bls.n	8109520 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 810951c:	2306      	movs	r3, #6
 810951e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8109520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109522:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8109524:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8109526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109528:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810952a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 810952c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810952e:	2200      	movs	r2, #0
 8109530:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8109532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109534:	3304      	adds	r3, #4
 8109536:	4618      	mov	r0, r3
 8109538:	f7fe fffc 	bl	8108534 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 810953c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810953e:	3318      	adds	r3, #24
 8109540:	4618      	mov	r0, r3
 8109542:	f7fe fff7 	bl	8108534 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8109546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810954a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810954c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810954e:	f1c3 0207 	rsb	r2, r3, #7
 8109552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109554:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8109556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810955a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 810955c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810955e:	2200      	movs	r2, #0
 8109560:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8109562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109564:	2200      	movs	r2, #0
 8109566:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 810956a:	683a      	ldr	r2, [r7, #0]
 810956c:	68f9      	ldr	r1, [r7, #12]
 810956e:	69b8      	ldr	r0, [r7, #24]
 8109570:	f7ff f874 	bl	810865c <pxPortInitialiseStack>
 8109574:	4602      	mov	r2, r0
 8109576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109578:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 810957a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810957c:	2b00      	cmp	r3, #0
 810957e:	d002      	beq.n	8109586 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8109580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8109584:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8109586:	bf00      	nop
 8109588:	3720      	adds	r7, #32
 810958a:	46bd      	mov	sp, r7
 810958c:	bd80      	pop	{r7, pc}
	...

08109590 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8109590:	b580      	push	{r7, lr}
 8109592:	b082      	sub	sp, #8
 8109594:	af00      	add	r7, sp, #0
 8109596:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8109598:	f7ff f988 	bl	81088ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 810959c:	4b2a      	ldr	r3, [pc, #168]	; (8109648 <prvAddNewTaskToReadyList+0xb8>)
 810959e:	681b      	ldr	r3, [r3, #0]
 81095a0:	3301      	adds	r3, #1
 81095a2:	4a29      	ldr	r2, [pc, #164]	; (8109648 <prvAddNewTaskToReadyList+0xb8>)
 81095a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 81095a6:	4b29      	ldr	r3, [pc, #164]	; (810964c <prvAddNewTaskToReadyList+0xbc>)
 81095a8:	681b      	ldr	r3, [r3, #0]
 81095aa:	2b00      	cmp	r3, #0
 81095ac:	d109      	bne.n	81095c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 81095ae:	4a27      	ldr	r2, [pc, #156]	; (810964c <prvAddNewTaskToReadyList+0xbc>)
 81095b0:	687b      	ldr	r3, [r7, #4]
 81095b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 81095b4:	4b24      	ldr	r3, [pc, #144]	; (8109648 <prvAddNewTaskToReadyList+0xb8>)
 81095b6:	681b      	ldr	r3, [r3, #0]
 81095b8:	2b01      	cmp	r3, #1
 81095ba:	d110      	bne.n	81095de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 81095bc:	f000 fbc0 	bl	8109d40 <prvInitialiseTaskLists>
 81095c0:	e00d      	b.n	81095de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 81095c2:	4b23      	ldr	r3, [pc, #140]	; (8109650 <prvAddNewTaskToReadyList+0xc0>)
 81095c4:	681b      	ldr	r3, [r3, #0]
 81095c6:	2b00      	cmp	r3, #0
 81095c8:	d109      	bne.n	81095de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 81095ca:	4b20      	ldr	r3, [pc, #128]	; (810964c <prvAddNewTaskToReadyList+0xbc>)
 81095cc:	681b      	ldr	r3, [r3, #0]
 81095ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81095d0:	687b      	ldr	r3, [r7, #4]
 81095d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81095d4:	429a      	cmp	r2, r3
 81095d6:	d802      	bhi.n	81095de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 81095d8:	4a1c      	ldr	r2, [pc, #112]	; (810964c <prvAddNewTaskToReadyList+0xbc>)
 81095da:	687b      	ldr	r3, [r7, #4]
 81095dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 81095de:	4b1d      	ldr	r3, [pc, #116]	; (8109654 <prvAddNewTaskToReadyList+0xc4>)
 81095e0:	681b      	ldr	r3, [r3, #0]
 81095e2:	3301      	adds	r3, #1
 81095e4:	4a1b      	ldr	r2, [pc, #108]	; (8109654 <prvAddNewTaskToReadyList+0xc4>)
 81095e6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 81095e8:	687b      	ldr	r3, [r7, #4]
 81095ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81095ec:	2201      	movs	r2, #1
 81095ee:	409a      	lsls	r2, r3
 81095f0:	4b19      	ldr	r3, [pc, #100]	; (8109658 <prvAddNewTaskToReadyList+0xc8>)
 81095f2:	681b      	ldr	r3, [r3, #0]
 81095f4:	4313      	orrs	r3, r2
 81095f6:	4a18      	ldr	r2, [pc, #96]	; (8109658 <prvAddNewTaskToReadyList+0xc8>)
 81095f8:	6013      	str	r3, [r2, #0]
 81095fa:	687b      	ldr	r3, [r7, #4]
 81095fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81095fe:	4613      	mov	r3, r2
 8109600:	009b      	lsls	r3, r3, #2
 8109602:	4413      	add	r3, r2
 8109604:	009b      	lsls	r3, r3, #2
 8109606:	4a15      	ldr	r2, [pc, #84]	; (810965c <prvAddNewTaskToReadyList+0xcc>)
 8109608:	441a      	add	r2, r3
 810960a:	687b      	ldr	r3, [r7, #4]
 810960c:	3304      	adds	r3, #4
 810960e:	4619      	mov	r1, r3
 8109610:	4610      	mov	r0, r2
 8109612:	f7fe ff9c 	bl	810854e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8109616:	f7ff f977 	bl	8108908 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 810961a:	4b0d      	ldr	r3, [pc, #52]	; (8109650 <prvAddNewTaskToReadyList+0xc0>)
 810961c:	681b      	ldr	r3, [r3, #0]
 810961e:	2b00      	cmp	r3, #0
 8109620:	d00e      	beq.n	8109640 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8109622:	4b0a      	ldr	r3, [pc, #40]	; (810964c <prvAddNewTaskToReadyList+0xbc>)
 8109624:	681b      	ldr	r3, [r3, #0]
 8109626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109628:	687b      	ldr	r3, [r7, #4]
 810962a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810962c:	429a      	cmp	r2, r3
 810962e:	d207      	bcs.n	8109640 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8109630:	4b0b      	ldr	r3, [pc, #44]	; (8109660 <prvAddNewTaskToReadyList+0xd0>)
 8109632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8109636:	601a      	str	r2, [r3, #0]
 8109638:	f3bf 8f4f 	dsb	sy
 810963c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8109640:	bf00      	nop
 8109642:	3708      	adds	r7, #8
 8109644:	46bd      	mov	sp, r7
 8109646:	bd80      	pop	{r7, pc}
 8109648:	100041a4 	.word	0x100041a4
 810964c:	100040a4 	.word	0x100040a4
 8109650:	100041b0 	.word	0x100041b0
 8109654:	100041c0 	.word	0x100041c0
 8109658:	100041ac 	.word	0x100041ac
 810965c:	100040a8 	.word	0x100040a8
 8109660:	e000ed04 	.word	0xe000ed04

08109664 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8109664:	b580      	push	{r7, lr}
 8109666:	b084      	sub	sp, #16
 8109668:	af00      	add	r7, sp, #0
 810966a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 810966c:	2300      	movs	r3, #0
 810966e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8109670:	687b      	ldr	r3, [r7, #4]
 8109672:	2b00      	cmp	r3, #0
 8109674:	d016      	beq.n	81096a4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8109676:	4b13      	ldr	r3, [pc, #76]	; (81096c4 <vTaskDelay+0x60>)
 8109678:	681b      	ldr	r3, [r3, #0]
 810967a:	2b00      	cmp	r3, #0
 810967c:	d009      	beq.n	8109692 <vTaskDelay+0x2e>
 810967e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109682:	f383 8811 	msr	BASEPRI, r3
 8109686:	f3bf 8f6f 	isb	sy
 810968a:	f3bf 8f4f 	dsb	sy
 810968e:	60bb      	str	r3, [r7, #8]
 8109690:	e7fe      	b.n	8109690 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8109692:	f000 f879 	bl	8109788 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8109696:	2100      	movs	r1, #0
 8109698:	6878      	ldr	r0, [r7, #4]
 810969a:	f000 fdd9 	bl	810a250 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 810969e:	f000 f881 	bl	81097a4 <xTaskResumeAll>
 81096a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 81096a4:	68fb      	ldr	r3, [r7, #12]
 81096a6:	2b00      	cmp	r3, #0
 81096a8:	d107      	bne.n	81096ba <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 81096aa:	4b07      	ldr	r3, [pc, #28]	; (81096c8 <vTaskDelay+0x64>)
 81096ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81096b0:	601a      	str	r2, [r3, #0]
 81096b2:	f3bf 8f4f 	dsb	sy
 81096b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 81096ba:	bf00      	nop
 81096bc:	3710      	adds	r7, #16
 81096be:	46bd      	mov	sp, r7
 81096c0:	bd80      	pop	{r7, pc}
 81096c2:	bf00      	nop
 81096c4:	100041cc 	.word	0x100041cc
 81096c8:	e000ed04 	.word	0xe000ed04

081096cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 81096cc:	b580      	push	{r7, lr}
 81096ce:	b08a      	sub	sp, #40	; 0x28
 81096d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 81096d2:	2300      	movs	r3, #0
 81096d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 81096d6:	2300      	movs	r3, #0
 81096d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 81096da:	463a      	mov	r2, r7
 81096dc:	1d39      	adds	r1, r7, #4
 81096de:	f107 0308 	add.w	r3, r7, #8
 81096e2:	4618      	mov	r0, r3
 81096e4:	f7f7 fd7c 	bl	81011e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 81096e8:	6839      	ldr	r1, [r7, #0]
 81096ea:	687b      	ldr	r3, [r7, #4]
 81096ec:	68ba      	ldr	r2, [r7, #8]
 81096ee:	9202      	str	r2, [sp, #8]
 81096f0:	9301      	str	r3, [sp, #4]
 81096f2:	2300      	movs	r3, #0
 81096f4:	9300      	str	r3, [sp, #0]
 81096f6:	2300      	movs	r3, #0
 81096f8:	460a      	mov	r2, r1
 81096fa:	491d      	ldr	r1, [pc, #116]	; (8109770 <vTaskStartScheduler+0xa4>)
 81096fc:	481d      	ldr	r0, [pc, #116]	; (8109774 <vTaskStartScheduler+0xa8>)
 81096fe:	f7ff fe21 	bl	8109344 <xTaskCreateStatic>
 8109702:	4602      	mov	r2, r0
 8109704:	4b1c      	ldr	r3, [pc, #112]	; (8109778 <vTaskStartScheduler+0xac>)
 8109706:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8109708:	4b1b      	ldr	r3, [pc, #108]	; (8109778 <vTaskStartScheduler+0xac>)
 810970a:	681b      	ldr	r3, [r3, #0]
 810970c:	2b00      	cmp	r3, #0
 810970e:	d002      	beq.n	8109716 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8109710:	2301      	movs	r3, #1
 8109712:	617b      	str	r3, [r7, #20]
 8109714:	e001      	b.n	810971a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8109716:	2300      	movs	r3, #0
 8109718:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 810971a:	697b      	ldr	r3, [r7, #20]
 810971c:	2b01      	cmp	r3, #1
 810971e:	d115      	bne.n	810974c <vTaskStartScheduler+0x80>
 8109720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109724:	f383 8811 	msr	BASEPRI, r3
 8109728:	f3bf 8f6f 	isb	sy
 810972c:	f3bf 8f4f 	dsb	sy
 8109730:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8109732:	4b12      	ldr	r3, [pc, #72]	; (810977c <vTaskStartScheduler+0xb0>)
 8109734:	f04f 32ff 	mov.w	r2, #4294967295
 8109738:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 810973a:	4b11      	ldr	r3, [pc, #68]	; (8109780 <vTaskStartScheduler+0xb4>)
 810973c:	2201      	movs	r2, #1
 810973e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8109740:	4b10      	ldr	r3, [pc, #64]	; (8109784 <vTaskStartScheduler+0xb8>)
 8109742:	2200      	movs	r2, #0
 8109744:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8109746:	f7ff f813 	bl	8108770 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 810974a:	e00d      	b.n	8109768 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 810974c:	697b      	ldr	r3, [r7, #20]
 810974e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109752:	d109      	bne.n	8109768 <vTaskStartScheduler+0x9c>
 8109754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109758:	f383 8811 	msr	BASEPRI, r3
 810975c:	f3bf 8f6f 	isb	sy
 8109760:	f3bf 8f4f 	dsb	sy
 8109764:	60fb      	str	r3, [r7, #12]
 8109766:	e7fe      	b.n	8109766 <vTaskStartScheduler+0x9a>
}
 8109768:	bf00      	nop
 810976a:	3718      	adds	r7, #24
 810976c:	46bd      	mov	sp, r7
 810976e:	bd80      	pop	{r7, pc}
 8109770:	08110518 	.word	0x08110518
 8109774:	08109d11 	.word	0x08109d11
 8109778:	100041c8 	.word	0x100041c8
 810977c:	100041c4 	.word	0x100041c4
 8109780:	100041b0 	.word	0x100041b0
 8109784:	100041a8 	.word	0x100041a8

08109788 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8109788:	b480      	push	{r7}
 810978a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 810978c:	4b04      	ldr	r3, [pc, #16]	; (81097a0 <vTaskSuspendAll+0x18>)
 810978e:	681b      	ldr	r3, [r3, #0]
 8109790:	3301      	adds	r3, #1
 8109792:	4a03      	ldr	r2, [pc, #12]	; (81097a0 <vTaskSuspendAll+0x18>)
 8109794:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8109796:	bf00      	nop
 8109798:	46bd      	mov	sp, r7
 810979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810979e:	4770      	bx	lr
 81097a0:	100041cc 	.word	0x100041cc

081097a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 81097a4:	b580      	push	{r7, lr}
 81097a6:	b084      	sub	sp, #16
 81097a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 81097aa:	2300      	movs	r3, #0
 81097ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 81097ae:	2300      	movs	r3, #0
 81097b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 81097b2:	4b41      	ldr	r3, [pc, #260]	; (81098b8 <xTaskResumeAll+0x114>)
 81097b4:	681b      	ldr	r3, [r3, #0]
 81097b6:	2b00      	cmp	r3, #0
 81097b8:	d109      	bne.n	81097ce <xTaskResumeAll+0x2a>
 81097ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 81097be:	f383 8811 	msr	BASEPRI, r3
 81097c2:	f3bf 8f6f 	isb	sy
 81097c6:	f3bf 8f4f 	dsb	sy
 81097ca:	603b      	str	r3, [r7, #0]
 81097cc:	e7fe      	b.n	81097cc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 81097ce:	f7ff f86d 	bl	81088ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 81097d2:	4b39      	ldr	r3, [pc, #228]	; (81098b8 <xTaskResumeAll+0x114>)
 81097d4:	681b      	ldr	r3, [r3, #0]
 81097d6:	3b01      	subs	r3, #1
 81097d8:	4a37      	ldr	r2, [pc, #220]	; (81098b8 <xTaskResumeAll+0x114>)
 81097da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81097dc:	4b36      	ldr	r3, [pc, #216]	; (81098b8 <xTaskResumeAll+0x114>)
 81097de:	681b      	ldr	r3, [r3, #0]
 81097e0:	2b00      	cmp	r3, #0
 81097e2:	d161      	bne.n	81098a8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 81097e4:	4b35      	ldr	r3, [pc, #212]	; (81098bc <xTaskResumeAll+0x118>)
 81097e6:	681b      	ldr	r3, [r3, #0]
 81097e8:	2b00      	cmp	r3, #0
 81097ea:	d05d      	beq.n	81098a8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 81097ec:	e02e      	b.n	810984c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81097ee:	4b34      	ldr	r3, [pc, #208]	; (81098c0 <xTaskResumeAll+0x11c>)
 81097f0:	68db      	ldr	r3, [r3, #12]
 81097f2:	68db      	ldr	r3, [r3, #12]
 81097f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 81097f6:	68fb      	ldr	r3, [r7, #12]
 81097f8:	3318      	adds	r3, #24
 81097fa:	4618      	mov	r0, r3
 81097fc:	f7fe ff04 	bl	8108608 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8109800:	68fb      	ldr	r3, [r7, #12]
 8109802:	3304      	adds	r3, #4
 8109804:	4618      	mov	r0, r3
 8109806:	f7fe feff 	bl	8108608 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810980a:	68fb      	ldr	r3, [r7, #12]
 810980c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810980e:	2201      	movs	r2, #1
 8109810:	409a      	lsls	r2, r3
 8109812:	4b2c      	ldr	r3, [pc, #176]	; (81098c4 <xTaskResumeAll+0x120>)
 8109814:	681b      	ldr	r3, [r3, #0]
 8109816:	4313      	orrs	r3, r2
 8109818:	4a2a      	ldr	r2, [pc, #168]	; (81098c4 <xTaskResumeAll+0x120>)
 810981a:	6013      	str	r3, [r2, #0]
 810981c:	68fb      	ldr	r3, [r7, #12]
 810981e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109820:	4613      	mov	r3, r2
 8109822:	009b      	lsls	r3, r3, #2
 8109824:	4413      	add	r3, r2
 8109826:	009b      	lsls	r3, r3, #2
 8109828:	4a27      	ldr	r2, [pc, #156]	; (81098c8 <xTaskResumeAll+0x124>)
 810982a:	441a      	add	r2, r3
 810982c:	68fb      	ldr	r3, [r7, #12]
 810982e:	3304      	adds	r3, #4
 8109830:	4619      	mov	r1, r3
 8109832:	4610      	mov	r0, r2
 8109834:	f7fe fe8b 	bl	810854e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8109838:	68fb      	ldr	r3, [r7, #12]
 810983a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810983c:	4b23      	ldr	r3, [pc, #140]	; (81098cc <xTaskResumeAll+0x128>)
 810983e:	681b      	ldr	r3, [r3, #0]
 8109840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109842:	429a      	cmp	r2, r3
 8109844:	d302      	bcc.n	810984c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8109846:	4b22      	ldr	r3, [pc, #136]	; (81098d0 <xTaskResumeAll+0x12c>)
 8109848:	2201      	movs	r2, #1
 810984a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810984c:	4b1c      	ldr	r3, [pc, #112]	; (81098c0 <xTaskResumeAll+0x11c>)
 810984e:	681b      	ldr	r3, [r3, #0]
 8109850:	2b00      	cmp	r3, #0
 8109852:	d1cc      	bne.n	81097ee <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8109854:	68fb      	ldr	r3, [r7, #12]
 8109856:	2b00      	cmp	r3, #0
 8109858:	d001      	beq.n	810985e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 810985a:	f000 fb0b 	bl	8109e74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 810985e:	4b1d      	ldr	r3, [pc, #116]	; (81098d4 <xTaskResumeAll+0x130>)
 8109860:	681b      	ldr	r3, [r3, #0]
 8109862:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8109864:	687b      	ldr	r3, [r7, #4]
 8109866:	2b00      	cmp	r3, #0
 8109868:	d010      	beq.n	810988c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 810986a:	f000 f837 	bl	81098dc <xTaskIncrementTick>
 810986e:	4603      	mov	r3, r0
 8109870:	2b00      	cmp	r3, #0
 8109872:	d002      	beq.n	810987a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8109874:	4b16      	ldr	r3, [pc, #88]	; (81098d0 <xTaskResumeAll+0x12c>)
 8109876:	2201      	movs	r2, #1
 8109878:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 810987a:	687b      	ldr	r3, [r7, #4]
 810987c:	3b01      	subs	r3, #1
 810987e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8109880:	687b      	ldr	r3, [r7, #4]
 8109882:	2b00      	cmp	r3, #0
 8109884:	d1f1      	bne.n	810986a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8109886:	4b13      	ldr	r3, [pc, #76]	; (81098d4 <xTaskResumeAll+0x130>)
 8109888:	2200      	movs	r2, #0
 810988a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 810988c:	4b10      	ldr	r3, [pc, #64]	; (81098d0 <xTaskResumeAll+0x12c>)
 810988e:	681b      	ldr	r3, [r3, #0]
 8109890:	2b00      	cmp	r3, #0
 8109892:	d009      	beq.n	81098a8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8109894:	2301      	movs	r3, #1
 8109896:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8109898:	4b0f      	ldr	r3, [pc, #60]	; (81098d8 <xTaskResumeAll+0x134>)
 810989a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810989e:	601a      	str	r2, [r3, #0]
 81098a0:	f3bf 8f4f 	dsb	sy
 81098a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 81098a8:	f7ff f82e 	bl	8108908 <vPortExitCritical>

	return xAlreadyYielded;
 81098ac:	68bb      	ldr	r3, [r7, #8]
}
 81098ae:	4618      	mov	r0, r3
 81098b0:	3710      	adds	r7, #16
 81098b2:	46bd      	mov	sp, r7
 81098b4:	bd80      	pop	{r7, pc}
 81098b6:	bf00      	nop
 81098b8:	100041cc 	.word	0x100041cc
 81098bc:	100041a4 	.word	0x100041a4
 81098c0:	10004164 	.word	0x10004164
 81098c4:	100041ac 	.word	0x100041ac
 81098c8:	100040a8 	.word	0x100040a8
 81098cc:	100040a4 	.word	0x100040a4
 81098d0:	100041b8 	.word	0x100041b8
 81098d4:	100041b4 	.word	0x100041b4
 81098d8:	e000ed04 	.word	0xe000ed04

081098dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 81098dc:	b580      	push	{r7, lr}
 81098de:	b086      	sub	sp, #24
 81098e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 81098e2:	2300      	movs	r3, #0
 81098e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81098e6:	4b4e      	ldr	r3, [pc, #312]	; (8109a20 <xTaskIncrementTick+0x144>)
 81098e8:	681b      	ldr	r3, [r3, #0]
 81098ea:	2b00      	cmp	r3, #0
 81098ec:	f040 8087 	bne.w	81099fe <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 81098f0:	4b4c      	ldr	r3, [pc, #304]	; (8109a24 <xTaskIncrementTick+0x148>)
 81098f2:	681b      	ldr	r3, [r3, #0]
 81098f4:	3301      	adds	r3, #1
 81098f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 81098f8:	4a4a      	ldr	r2, [pc, #296]	; (8109a24 <xTaskIncrementTick+0x148>)
 81098fa:	693b      	ldr	r3, [r7, #16]
 81098fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 81098fe:	693b      	ldr	r3, [r7, #16]
 8109900:	2b00      	cmp	r3, #0
 8109902:	d11f      	bne.n	8109944 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8109904:	4b48      	ldr	r3, [pc, #288]	; (8109a28 <xTaskIncrementTick+0x14c>)
 8109906:	681b      	ldr	r3, [r3, #0]
 8109908:	681b      	ldr	r3, [r3, #0]
 810990a:	2b00      	cmp	r3, #0
 810990c:	d009      	beq.n	8109922 <xTaskIncrementTick+0x46>
 810990e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109912:	f383 8811 	msr	BASEPRI, r3
 8109916:	f3bf 8f6f 	isb	sy
 810991a:	f3bf 8f4f 	dsb	sy
 810991e:	603b      	str	r3, [r7, #0]
 8109920:	e7fe      	b.n	8109920 <xTaskIncrementTick+0x44>
 8109922:	4b41      	ldr	r3, [pc, #260]	; (8109a28 <xTaskIncrementTick+0x14c>)
 8109924:	681b      	ldr	r3, [r3, #0]
 8109926:	60fb      	str	r3, [r7, #12]
 8109928:	4b40      	ldr	r3, [pc, #256]	; (8109a2c <xTaskIncrementTick+0x150>)
 810992a:	681b      	ldr	r3, [r3, #0]
 810992c:	4a3e      	ldr	r2, [pc, #248]	; (8109a28 <xTaskIncrementTick+0x14c>)
 810992e:	6013      	str	r3, [r2, #0]
 8109930:	4a3e      	ldr	r2, [pc, #248]	; (8109a2c <xTaskIncrementTick+0x150>)
 8109932:	68fb      	ldr	r3, [r7, #12]
 8109934:	6013      	str	r3, [r2, #0]
 8109936:	4b3e      	ldr	r3, [pc, #248]	; (8109a30 <xTaskIncrementTick+0x154>)
 8109938:	681b      	ldr	r3, [r3, #0]
 810993a:	3301      	adds	r3, #1
 810993c:	4a3c      	ldr	r2, [pc, #240]	; (8109a30 <xTaskIncrementTick+0x154>)
 810993e:	6013      	str	r3, [r2, #0]
 8109940:	f000 fa98 	bl	8109e74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8109944:	4b3b      	ldr	r3, [pc, #236]	; (8109a34 <xTaskIncrementTick+0x158>)
 8109946:	681b      	ldr	r3, [r3, #0]
 8109948:	693a      	ldr	r2, [r7, #16]
 810994a:	429a      	cmp	r2, r3
 810994c:	d348      	bcc.n	81099e0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810994e:	4b36      	ldr	r3, [pc, #216]	; (8109a28 <xTaskIncrementTick+0x14c>)
 8109950:	681b      	ldr	r3, [r3, #0]
 8109952:	681b      	ldr	r3, [r3, #0]
 8109954:	2b00      	cmp	r3, #0
 8109956:	d104      	bne.n	8109962 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8109958:	4b36      	ldr	r3, [pc, #216]	; (8109a34 <xTaskIncrementTick+0x158>)
 810995a:	f04f 32ff 	mov.w	r2, #4294967295
 810995e:	601a      	str	r2, [r3, #0]
					break;
 8109960:	e03e      	b.n	81099e0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8109962:	4b31      	ldr	r3, [pc, #196]	; (8109a28 <xTaskIncrementTick+0x14c>)
 8109964:	681b      	ldr	r3, [r3, #0]
 8109966:	68db      	ldr	r3, [r3, #12]
 8109968:	68db      	ldr	r3, [r3, #12]
 810996a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 810996c:	68bb      	ldr	r3, [r7, #8]
 810996e:	685b      	ldr	r3, [r3, #4]
 8109970:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8109972:	693a      	ldr	r2, [r7, #16]
 8109974:	687b      	ldr	r3, [r7, #4]
 8109976:	429a      	cmp	r2, r3
 8109978:	d203      	bcs.n	8109982 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 810997a:	4a2e      	ldr	r2, [pc, #184]	; (8109a34 <xTaskIncrementTick+0x158>)
 810997c:	687b      	ldr	r3, [r7, #4]
 810997e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8109980:	e02e      	b.n	81099e0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8109982:	68bb      	ldr	r3, [r7, #8]
 8109984:	3304      	adds	r3, #4
 8109986:	4618      	mov	r0, r3
 8109988:	f7fe fe3e 	bl	8108608 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 810998c:	68bb      	ldr	r3, [r7, #8]
 810998e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109990:	2b00      	cmp	r3, #0
 8109992:	d004      	beq.n	810999e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8109994:	68bb      	ldr	r3, [r7, #8]
 8109996:	3318      	adds	r3, #24
 8109998:	4618      	mov	r0, r3
 810999a:	f7fe fe35 	bl	8108608 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 810999e:	68bb      	ldr	r3, [r7, #8]
 81099a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81099a2:	2201      	movs	r2, #1
 81099a4:	409a      	lsls	r2, r3
 81099a6:	4b24      	ldr	r3, [pc, #144]	; (8109a38 <xTaskIncrementTick+0x15c>)
 81099a8:	681b      	ldr	r3, [r3, #0]
 81099aa:	4313      	orrs	r3, r2
 81099ac:	4a22      	ldr	r2, [pc, #136]	; (8109a38 <xTaskIncrementTick+0x15c>)
 81099ae:	6013      	str	r3, [r2, #0]
 81099b0:	68bb      	ldr	r3, [r7, #8]
 81099b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81099b4:	4613      	mov	r3, r2
 81099b6:	009b      	lsls	r3, r3, #2
 81099b8:	4413      	add	r3, r2
 81099ba:	009b      	lsls	r3, r3, #2
 81099bc:	4a1f      	ldr	r2, [pc, #124]	; (8109a3c <xTaskIncrementTick+0x160>)
 81099be:	441a      	add	r2, r3
 81099c0:	68bb      	ldr	r3, [r7, #8]
 81099c2:	3304      	adds	r3, #4
 81099c4:	4619      	mov	r1, r3
 81099c6:	4610      	mov	r0, r2
 81099c8:	f7fe fdc1 	bl	810854e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 81099cc:	68bb      	ldr	r3, [r7, #8]
 81099ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81099d0:	4b1b      	ldr	r3, [pc, #108]	; (8109a40 <xTaskIncrementTick+0x164>)
 81099d2:	681b      	ldr	r3, [r3, #0]
 81099d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81099d6:	429a      	cmp	r2, r3
 81099d8:	d3b9      	bcc.n	810994e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 81099da:	2301      	movs	r3, #1
 81099dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 81099de:	e7b6      	b.n	810994e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 81099e0:	4b17      	ldr	r3, [pc, #92]	; (8109a40 <xTaskIncrementTick+0x164>)
 81099e2:	681b      	ldr	r3, [r3, #0]
 81099e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81099e6:	4915      	ldr	r1, [pc, #84]	; (8109a3c <xTaskIncrementTick+0x160>)
 81099e8:	4613      	mov	r3, r2
 81099ea:	009b      	lsls	r3, r3, #2
 81099ec:	4413      	add	r3, r2
 81099ee:	009b      	lsls	r3, r3, #2
 81099f0:	440b      	add	r3, r1
 81099f2:	681b      	ldr	r3, [r3, #0]
 81099f4:	2b01      	cmp	r3, #1
 81099f6:	d907      	bls.n	8109a08 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 81099f8:	2301      	movs	r3, #1
 81099fa:	617b      	str	r3, [r7, #20]
 81099fc:	e004      	b.n	8109a08 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 81099fe:	4b11      	ldr	r3, [pc, #68]	; (8109a44 <xTaskIncrementTick+0x168>)
 8109a00:	681b      	ldr	r3, [r3, #0]
 8109a02:	3301      	adds	r3, #1
 8109a04:	4a0f      	ldr	r2, [pc, #60]	; (8109a44 <xTaskIncrementTick+0x168>)
 8109a06:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8109a08:	4b0f      	ldr	r3, [pc, #60]	; (8109a48 <xTaskIncrementTick+0x16c>)
 8109a0a:	681b      	ldr	r3, [r3, #0]
 8109a0c:	2b00      	cmp	r3, #0
 8109a0e:	d001      	beq.n	8109a14 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8109a10:	2301      	movs	r3, #1
 8109a12:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8109a14:	697b      	ldr	r3, [r7, #20]
}
 8109a16:	4618      	mov	r0, r3
 8109a18:	3718      	adds	r7, #24
 8109a1a:	46bd      	mov	sp, r7
 8109a1c:	bd80      	pop	{r7, pc}
 8109a1e:	bf00      	nop
 8109a20:	100041cc 	.word	0x100041cc
 8109a24:	100041a8 	.word	0x100041a8
 8109a28:	1000415c 	.word	0x1000415c
 8109a2c:	10004160 	.word	0x10004160
 8109a30:	100041bc 	.word	0x100041bc
 8109a34:	100041c4 	.word	0x100041c4
 8109a38:	100041ac 	.word	0x100041ac
 8109a3c:	100040a8 	.word	0x100040a8
 8109a40:	100040a4 	.word	0x100040a4
 8109a44:	100041b4 	.word	0x100041b4
 8109a48:	100041b8 	.word	0x100041b8

08109a4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8109a4c:	b480      	push	{r7}
 8109a4e:	b087      	sub	sp, #28
 8109a50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8109a52:	4b26      	ldr	r3, [pc, #152]	; (8109aec <vTaskSwitchContext+0xa0>)
 8109a54:	681b      	ldr	r3, [r3, #0]
 8109a56:	2b00      	cmp	r3, #0
 8109a58:	d003      	beq.n	8109a62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8109a5a:	4b25      	ldr	r3, [pc, #148]	; (8109af0 <vTaskSwitchContext+0xa4>)
 8109a5c:	2201      	movs	r2, #1
 8109a5e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8109a60:	e03e      	b.n	8109ae0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8109a62:	4b23      	ldr	r3, [pc, #140]	; (8109af0 <vTaskSwitchContext+0xa4>)
 8109a64:	2200      	movs	r2, #0
 8109a66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8109a68:	4b22      	ldr	r3, [pc, #136]	; (8109af4 <vTaskSwitchContext+0xa8>)
 8109a6a:	681b      	ldr	r3, [r3, #0]
 8109a6c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8109a6e:	68fb      	ldr	r3, [r7, #12]
 8109a70:	fab3 f383 	clz	r3, r3
 8109a74:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8109a76:	7afb      	ldrb	r3, [r7, #11]
 8109a78:	f1c3 031f 	rsb	r3, r3, #31
 8109a7c:	617b      	str	r3, [r7, #20]
 8109a7e:	491e      	ldr	r1, [pc, #120]	; (8109af8 <vTaskSwitchContext+0xac>)
 8109a80:	697a      	ldr	r2, [r7, #20]
 8109a82:	4613      	mov	r3, r2
 8109a84:	009b      	lsls	r3, r3, #2
 8109a86:	4413      	add	r3, r2
 8109a88:	009b      	lsls	r3, r3, #2
 8109a8a:	440b      	add	r3, r1
 8109a8c:	681b      	ldr	r3, [r3, #0]
 8109a8e:	2b00      	cmp	r3, #0
 8109a90:	d109      	bne.n	8109aa6 <vTaskSwitchContext+0x5a>
	__asm volatile
 8109a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109a96:	f383 8811 	msr	BASEPRI, r3
 8109a9a:	f3bf 8f6f 	isb	sy
 8109a9e:	f3bf 8f4f 	dsb	sy
 8109aa2:	607b      	str	r3, [r7, #4]
 8109aa4:	e7fe      	b.n	8109aa4 <vTaskSwitchContext+0x58>
 8109aa6:	697a      	ldr	r2, [r7, #20]
 8109aa8:	4613      	mov	r3, r2
 8109aaa:	009b      	lsls	r3, r3, #2
 8109aac:	4413      	add	r3, r2
 8109aae:	009b      	lsls	r3, r3, #2
 8109ab0:	4a11      	ldr	r2, [pc, #68]	; (8109af8 <vTaskSwitchContext+0xac>)
 8109ab2:	4413      	add	r3, r2
 8109ab4:	613b      	str	r3, [r7, #16]
 8109ab6:	693b      	ldr	r3, [r7, #16]
 8109ab8:	685b      	ldr	r3, [r3, #4]
 8109aba:	685a      	ldr	r2, [r3, #4]
 8109abc:	693b      	ldr	r3, [r7, #16]
 8109abe:	605a      	str	r2, [r3, #4]
 8109ac0:	693b      	ldr	r3, [r7, #16]
 8109ac2:	685a      	ldr	r2, [r3, #4]
 8109ac4:	693b      	ldr	r3, [r7, #16]
 8109ac6:	3308      	adds	r3, #8
 8109ac8:	429a      	cmp	r2, r3
 8109aca:	d104      	bne.n	8109ad6 <vTaskSwitchContext+0x8a>
 8109acc:	693b      	ldr	r3, [r7, #16]
 8109ace:	685b      	ldr	r3, [r3, #4]
 8109ad0:	685a      	ldr	r2, [r3, #4]
 8109ad2:	693b      	ldr	r3, [r7, #16]
 8109ad4:	605a      	str	r2, [r3, #4]
 8109ad6:	693b      	ldr	r3, [r7, #16]
 8109ad8:	685b      	ldr	r3, [r3, #4]
 8109ada:	68db      	ldr	r3, [r3, #12]
 8109adc:	4a07      	ldr	r2, [pc, #28]	; (8109afc <vTaskSwitchContext+0xb0>)
 8109ade:	6013      	str	r3, [r2, #0]
}
 8109ae0:	bf00      	nop
 8109ae2:	371c      	adds	r7, #28
 8109ae4:	46bd      	mov	sp, r7
 8109ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109aea:	4770      	bx	lr
 8109aec:	100041cc 	.word	0x100041cc
 8109af0:	100041b8 	.word	0x100041b8
 8109af4:	100041ac 	.word	0x100041ac
 8109af8:	100040a8 	.word	0x100040a8
 8109afc:	100040a4 	.word	0x100040a4

08109b00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8109b00:	b580      	push	{r7, lr}
 8109b02:	b084      	sub	sp, #16
 8109b04:	af00      	add	r7, sp, #0
 8109b06:	6078      	str	r0, [r7, #4]
 8109b08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8109b0a:	687b      	ldr	r3, [r7, #4]
 8109b0c:	2b00      	cmp	r3, #0
 8109b0e:	d109      	bne.n	8109b24 <vTaskPlaceOnEventList+0x24>
 8109b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109b14:	f383 8811 	msr	BASEPRI, r3
 8109b18:	f3bf 8f6f 	isb	sy
 8109b1c:	f3bf 8f4f 	dsb	sy
 8109b20:	60fb      	str	r3, [r7, #12]
 8109b22:	e7fe      	b.n	8109b22 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8109b24:	4b07      	ldr	r3, [pc, #28]	; (8109b44 <vTaskPlaceOnEventList+0x44>)
 8109b26:	681b      	ldr	r3, [r3, #0]
 8109b28:	3318      	adds	r3, #24
 8109b2a:	4619      	mov	r1, r3
 8109b2c:	6878      	ldr	r0, [r7, #4]
 8109b2e:	f7fe fd32 	bl	8108596 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8109b32:	2101      	movs	r1, #1
 8109b34:	6838      	ldr	r0, [r7, #0]
 8109b36:	f000 fb8b 	bl	810a250 <prvAddCurrentTaskToDelayedList>
}
 8109b3a:	bf00      	nop
 8109b3c:	3710      	adds	r7, #16
 8109b3e:	46bd      	mov	sp, r7
 8109b40:	bd80      	pop	{r7, pc}
 8109b42:	bf00      	nop
 8109b44:	100040a4 	.word	0x100040a4

08109b48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8109b48:	b580      	push	{r7, lr}
 8109b4a:	b086      	sub	sp, #24
 8109b4c:	af00      	add	r7, sp, #0
 8109b4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8109b50:	687b      	ldr	r3, [r7, #4]
 8109b52:	68db      	ldr	r3, [r3, #12]
 8109b54:	68db      	ldr	r3, [r3, #12]
 8109b56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8109b58:	693b      	ldr	r3, [r7, #16]
 8109b5a:	2b00      	cmp	r3, #0
 8109b5c:	d109      	bne.n	8109b72 <xTaskRemoveFromEventList+0x2a>
 8109b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109b62:	f383 8811 	msr	BASEPRI, r3
 8109b66:	f3bf 8f6f 	isb	sy
 8109b6a:	f3bf 8f4f 	dsb	sy
 8109b6e:	60fb      	str	r3, [r7, #12]
 8109b70:	e7fe      	b.n	8109b70 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8109b72:	693b      	ldr	r3, [r7, #16]
 8109b74:	3318      	adds	r3, #24
 8109b76:	4618      	mov	r0, r3
 8109b78:	f7fe fd46 	bl	8108608 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8109b7c:	4b1d      	ldr	r3, [pc, #116]	; (8109bf4 <xTaskRemoveFromEventList+0xac>)
 8109b7e:	681b      	ldr	r3, [r3, #0]
 8109b80:	2b00      	cmp	r3, #0
 8109b82:	d11c      	bne.n	8109bbe <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8109b84:	693b      	ldr	r3, [r7, #16]
 8109b86:	3304      	adds	r3, #4
 8109b88:	4618      	mov	r0, r3
 8109b8a:	f7fe fd3d 	bl	8108608 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8109b8e:	693b      	ldr	r3, [r7, #16]
 8109b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109b92:	2201      	movs	r2, #1
 8109b94:	409a      	lsls	r2, r3
 8109b96:	4b18      	ldr	r3, [pc, #96]	; (8109bf8 <xTaskRemoveFromEventList+0xb0>)
 8109b98:	681b      	ldr	r3, [r3, #0]
 8109b9a:	4313      	orrs	r3, r2
 8109b9c:	4a16      	ldr	r2, [pc, #88]	; (8109bf8 <xTaskRemoveFromEventList+0xb0>)
 8109b9e:	6013      	str	r3, [r2, #0]
 8109ba0:	693b      	ldr	r3, [r7, #16]
 8109ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109ba4:	4613      	mov	r3, r2
 8109ba6:	009b      	lsls	r3, r3, #2
 8109ba8:	4413      	add	r3, r2
 8109baa:	009b      	lsls	r3, r3, #2
 8109bac:	4a13      	ldr	r2, [pc, #76]	; (8109bfc <xTaskRemoveFromEventList+0xb4>)
 8109bae:	441a      	add	r2, r3
 8109bb0:	693b      	ldr	r3, [r7, #16]
 8109bb2:	3304      	adds	r3, #4
 8109bb4:	4619      	mov	r1, r3
 8109bb6:	4610      	mov	r0, r2
 8109bb8:	f7fe fcc9 	bl	810854e <vListInsertEnd>
 8109bbc:	e005      	b.n	8109bca <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8109bbe:	693b      	ldr	r3, [r7, #16]
 8109bc0:	3318      	adds	r3, #24
 8109bc2:	4619      	mov	r1, r3
 8109bc4:	480e      	ldr	r0, [pc, #56]	; (8109c00 <xTaskRemoveFromEventList+0xb8>)
 8109bc6:	f7fe fcc2 	bl	810854e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8109bca:	693b      	ldr	r3, [r7, #16]
 8109bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109bce:	4b0d      	ldr	r3, [pc, #52]	; (8109c04 <xTaskRemoveFromEventList+0xbc>)
 8109bd0:	681b      	ldr	r3, [r3, #0]
 8109bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109bd4:	429a      	cmp	r2, r3
 8109bd6:	d905      	bls.n	8109be4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8109bd8:	2301      	movs	r3, #1
 8109bda:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8109bdc:	4b0a      	ldr	r3, [pc, #40]	; (8109c08 <xTaskRemoveFromEventList+0xc0>)
 8109bde:	2201      	movs	r2, #1
 8109be0:	601a      	str	r2, [r3, #0]
 8109be2:	e001      	b.n	8109be8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8109be4:	2300      	movs	r3, #0
 8109be6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8109be8:	697b      	ldr	r3, [r7, #20]
}
 8109bea:	4618      	mov	r0, r3
 8109bec:	3718      	adds	r7, #24
 8109bee:	46bd      	mov	sp, r7
 8109bf0:	bd80      	pop	{r7, pc}
 8109bf2:	bf00      	nop
 8109bf4:	100041cc 	.word	0x100041cc
 8109bf8:	100041ac 	.word	0x100041ac
 8109bfc:	100040a8 	.word	0x100040a8
 8109c00:	10004164 	.word	0x10004164
 8109c04:	100040a4 	.word	0x100040a4
 8109c08:	100041b8 	.word	0x100041b8

08109c0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8109c0c:	b480      	push	{r7}
 8109c0e:	b083      	sub	sp, #12
 8109c10:	af00      	add	r7, sp, #0
 8109c12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8109c14:	4b06      	ldr	r3, [pc, #24]	; (8109c30 <vTaskInternalSetTimeOutState+0x24>)
 8109c16:	681a      	ldr	r2, [r3, #0]
 8109c18:	687b      	ldr	r3, [r7, #4]
 8109c1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8109c1c:	4b05      	ldr	r3, [pc, #20]	; (8109c34 <vTaskInternalSetTimeOutState+0x28>)
 8109c1e:	681a      	ldr	r2, [r3, #0]
 8109c20:	687b      	ldr	r3, [r7, #4]
 8109c22:	605a      	str	r2, [r3, #4]
}
 8109c24:	bf00      	nop
 8109c26:	370c      	adds	r7, #12
 8109c28:	46bd      	mov	sp, r7
 8109c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109c2e:	4770      	bx	lr
 8109c30:	100041bc 	.word	0x100041bc
 8109c34:	100041a8 	.word	0x100041a8

08109c38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8109c38:	b580      	push	{r7, lr}
 8109c3a:	b088      	sub	sp, #32
 8109c3c:	af00      	add	r7, sp, #0
 8109c3e:	6078      	str	r0, [r7, #4]
 8109c40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8109c42:	687b      	ldr	r3, [r7, #4]
 8109c44:	2b00      	cmp	r3, #0
 8109c46:	d109      	bne.n	8109c5c <xTaskCheckForTimeOut+0x24>
 8109c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109c4c:	f383 8811 	msr	BASEPRI, r3
 8109c50:	f3bf 8f6f 	isb	sy
 8109c54:	f3bf 8f4f 	dsb	sy
 8109c58:	613b      	str	r3, [r7, #16]
 8109c5a:	e7fe      	b.n	8109c5a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8109c5c:	683b      	ldr	r3, [r7, #0]
 8109c5e:	2b00      	cmp	r3, #0
 8109c60:	d109      	bne.n	8109c76 <xTaskCheckForTimeOut+0x3e>
 8109c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109c66:	f383 8811 	msr	BASEPRI, r3
 8109c6a:	f3bf 8f6f 	isb	sy
 8109c6e:	f3bf 8f4f 	dsb	sy
 8109c72:	60fb      	str	r3, [r7, #12]
 8109c74:	e7fe      	b.n	8109c74 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8109c76:	f7fe fe19 	bl	81088ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8109c7a:	4b1d      	ldr	r3, [pc, #116]	; (8109cf0 <xTaskCheckForTimeOut+0xb8>)
 8109c7c:	681b      	ldr	r3, [r3, #0]
 8109c7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8109c80:	687b      	ldr	r3, [r7, #4]
 8109c82:	685b      	ldr	r3, [r3, #4]
 8109c84:	69ba      	ldr	r2, [r7, #24]
 8109c86:	1ad3      	subs	r3, r2, r3
 8109c88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8109c8a:	683b      	ldr	r3, [r7, #0]
 8109c8c:	681b      	ldr	r3, [r3, #0]
 8109c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109c92:	d102      	bne.n	8109c9a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8109c94:	2300      	movs	r3, #0
 8109c96:	61fb      	str	r3, [r7, #28]
 8109c98:	e023      	b.n	8109ce2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8109c9a:	687b      	ldr	r3, [r7, #4]
 8109c9c:	681a      	ldr	r2, [r3, #0]
 8109c9e:	4b15      	ldr	r3, [pc, #84]	; (8109cf4 <xTaskCheckForTimeOut+0xbc>)
 8109ca0:	681b      	ldr	r3, [r3, #0]
 8109ca2:	429a      	cmp	r2, r3
 8109ca4:	d007      	beq.n	8109cb6 <xTaskCheckForTimeOut+0x7e>
 8109ca6:	687b      	ldr	r3, [r7, #4]
 8109ca8:	685b      	ldr	r3, [r3, #4]
 8109caa:	69ba      	ldr	r2, [r7, #24]
 8109cac:	429a      	cmp	r2, r3
 8109cae:	d302      	bcc.n	8109cb6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8109cb0:	2301      	movs	r3, #1
 8109cb2:	61fb      	str	r3, [r7, #28]
 8109cb4:	e015      	b.n	8109ce2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8109cb6:	683b      	ldr	r3, [r7, #0]
 8109cb8:	681b      	ldr	r3, [r3, #0]
 8109cba:	697a      	ldr	r2, [r7, #20]
 8109cbc:	429a      	cmp	r2, r3
 8109cbe:	d20b      	bcs.n	8109cd8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8109cc0:	683b      	ldr	r3, [r7, #0]
 8109cc2:	681a      	ldr	r2, [r3, #0]
 8109cc4:	697b      	ldr	r3, [r7, #20]
 8109cc6:	1ad2      	subs	r2, r2, r3
 8109cc8:	683b      	ldr	r3, [r7, #0]
 8109cca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8109ccc:	6878      	ldr	r0, [r7, #4]
 8109cce:	f7ff ff9d 	bl	8109c0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8109cd2:	2300      	movs	r3, #0
 8109cd4:	61fb      	str	r3, [r7, #28]
 8109cd6:	e004      	b.n	8109ce2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8109cd8:	683b      	ldr	r3, [r7, #0]
 8109cda:	2200      	movs	r2, #0
 8109cdc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8109cde:	2301      	movs	r3, #1
 8109ce0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8109ce2:	f7fe fe11 	bl	8108908 <vPortExitCritical>

	return xReturn;
 8109ce6:	69fb      	ldr	r3, [r7, #28]
}
 8109ce8:	4618      	mov	r0, r3
 8109cea:	3720      	adds	r7, #32
 8109cec:	46bd      	mov	sp, r7
 8109cee:	bd80      	pop	{r7, pc}
 8109cf0:	100041a8 	.word	0x100041a8
 8109cf4:	100041bc 	.word	0x100041bc

08109cf8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8109cf8:	b480      	push	{r7}
 8109cfa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8109cfc:	4b03      	ldr	r3, [pc, #12]	; (8109d0c <vTaskMissedYield+0x14>)
 8109cfe:	2201      	movs	r2, #1
 8109d00:	601a      	str	r2, [r3, #0]
}
 8109d02:	bf00      	nop
 8109d04:	46bd      	mov	sp, r7
 8109d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109d0a:	4770      	bx	lr
 8109d0c:	100041b8 	.word	0x100041b8

08109d10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8109d10:	b580      	push	{r7, lr}
 8109d12:	b082      	sub	sp, #8
 8109d14:	af00      	add	r7, sp, #0
 8109d16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8109d18:	f000 f852 	bl	8109dc0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8109d1c:	4b06      	ldr	r3, [pc, #24]	; (8109d38 <prvIdleTask+0x28>)
 8109d1e:	681b      	ldr	r3, [r3, #0]
 8109d20:	2b01      	cmp	r3, #1
 8109d22:	d9f9      	bls.n	8109d18 <prvIdleTask+0x8>
			{
				taskYIELD();
 8109d24:	4b05      	ldr	r3, [pc, #20]	; (8109d3c <prvIdleTask+0x2c>)
 8109d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8109d2a:	601a      	str	r2, [r3, #0]
 8109d2c:	f3bf 8f4f 	dsb	sy
 8109d30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8109d34:	e7f0      	b.n	8109d18 <prvIdleTask+0x8>
 8109d36:	bf00      	nop
 8109d38:	100040a8 	.word	0x100040a8
 8109d3c:	e000ed04 	.word	0xe000ed04

08109d40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8109d40:	b580      	push	{r7, lr}
 8109d42:	b082      	sub	sp, #8
 8109d44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8109d46:	2300      	movs	r3, #0
 8109d48:	607b      	str	r3, [r7, #4]
 8109d4a:	e00c      	b.n	8109d66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8109d4c:	687a      	ldr	r2, [r7, #4]
 8109d4e:	4613      	mov	r3, r2
 8109d50:	009b      	lsls	r3, r3, #2
 8109d52:	4413      	add	r3, r2
 8109d54:	009b      	lsls	r3, r3, #2
 8109d56:	4a12      	ldr	r2, [pc, #72]	; (8109da0 <prvInitialiseTaskLists+0x60>)
 8109d58:	4413      	add	r3, r2
 8109d5a:	4618      	mov	r0, r3
 8109d5c:	f7fe fbca 	bl	81084f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8109d60:	687b      	ldr	r3, [r7, #4]
 8109d62:	3301      	adds	r3, #1
 8109d64:	607b      	str	r3, [r7, #4]
 8109d66:	687b      	ldr	r3, [r7, #4]
 8109d68:	2b06      	cmp	r3, #6
 8109d6a:	d9ef      	bls.n	8109d4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8109d6c:	480d      	ldr	r0, [pc, #52]	; (8109da4 <prvInitialiseTaskLists+0x64>)
 8109d6e:	f7fe fbc1 	bl	81084f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8109d72:	480d      	ldr	r0, [pc, #52]	; (8109da8 <prvInitialiseTaskLists+0x68>)
 8109d74:	f7fe fbbe 	bl	81084f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8109d78:	480c      	ldr	r0, [pc, #48]	; (8109dac <prvInitialiseTaskLists+0x6c>)
 8109d7a:	f7fe fbbb 	bl	81084f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8109d7e:	480c      	ldr	r0, [pc, #48]	; (8109db0 <prvInitialiseTaskLists+0x70>)
 8109d80:	f7fe fbb8 	bl	81084f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8109d84:	480b      	ldr	r0, [pc, #44]	; (8109db4 <prvInitialiseTaskLists+0x74>)
 8109d86:	f7fe fbb5 	bl	81084f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8109d8a:	4b0b      	ldr	r3, [pc, #44]	; (8109db8 <prvInitialiseTaskLists+0x78>)
 8109d8c:	4a05      	ldr	r2, [pc, #20]	; (8109da4 <prvInitialiseTaskLists+0x64>)
 8109d8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8109d90:	4b0a      	ldr	r3, [pc, #40]	; (8109dbc <prvInitialiseTaskLists+0x7c>)
 8109d92:	4a05      	ldr	r2, [pc, #20]	; (8109da8 <prvInitialiseTaskLists+0x68>)
 8109d94:	601a      	str	r2, [r3, #0]
}
 8109d96:	bf00      	nop
 8109d98:	3708      	adds	r7, #8
 8109d9a:	46bd      	mov	sp, r7
 8109d9c:	bd80      	pop	{r7, pc}
 8109d9e:	bf00      	nop
 8109da0:	100040a8 	.word	0x100040a8
 8109da4:	10004134 	.word	0x10004134
 8109da8:	10004148 	.word	0x10004148
 8109dac:	10004164 	.word	0x10004164
 8109db0:	10004178 	.word	0x10004178
 8109db4:	10004190 	.word	0x10004190
 8109db8:	1000415c 	.word	0x1000415c
 8109dbc:	10004160 	.word	0x10004160

08109dc0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8109dc0:	b580      	push	{r7, lr}
 8109dc2:	b082      	sub	sp, #8
 8109dc4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8109dc6:	e019      	b.n	8109dfc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8109dc8:	f7fe fd70 	bl	81088ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8109dcc:	4b0f      	ldr	r3, [pc, #60]	; (8109e0c <prvCheckTasksWaitingTermination+0x4c>)
 8109dce:	68db      	ldr	r3, [r3, #12]
 8109dd0:	68db      	ldr	r3, [r3, #12]
 8109dd2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8109dd4:	687b      	ldr	r3, [r7, #4]
 8109dd6:	3304      	adds	r3, #4
 8109dd8:	4618      	mov	r0, r3
 8109dda:	f7fe fc15 	bl	8108608 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8109dde:	4b0c      	ldr	r3, [pc, #48]	; (8109e10 <prvCheckTasksWaitingTermination+0x50>)
 8109de0:	681b      	ldr	r3, [r3, #0]
 8109de2:	3b01      	subs	r3, #1
 8109de4:	4a0a      	ldr	r2, [pc, #40]	; (8109e10 <prvCheckTasksWaitingTermination+0x50>)
 8109de6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8109de8:	4b0a      	ldr	r3, [pc, #40]	; (8109e14 <prvCheckTasksWaitingTermination+0x54>)
 8109dea:	681b      	ldr	r3, [r3, #0]
 8109dec:	3b01      	subs	r3, #1
 8109dee:	4a09      	ldr	r2, [pc, #36]	; (8109e14 <prvCheckTasksWaitingTermination+0x54>)
 8109df0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8109df2:	f7fe fd89 	bl	8108908 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8109df6:	6878      	ldr	r0, [r7, #4]
 8109df8:	f000 f80e 	bl	8109e18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8109dfc:	4b05      	ldr	r3, [pc, #20]	; (8109e14 <prvCheckTasksWaitingTermination+0x54>)
 8109dfe:	681b      	ldr	r3, [r3, #0]
 8109e00:	2b00      	cmp	r3, #0
 8109e02:	d1e1      	bne.n	8109dc8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8109e04:	bf00      	nop
 8109e06:	3708      	adds	r7, #8
 8109e08:	46bd      	mov	sp, r7
 8109e0a:	bd80      	pop	{r7, pc}
 8109e0c:	10004178 	.word	0x10004178
 8109e10:	100041a4 	.word	0x100041a4
 8109e14:	1000418c 	.word	0x1000418c

08109e18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8109e18:	b580      	push	{r7, lr}
 8109e1a:	b084      	sub	sp, #16
 8109e1c:	af00      	add	r7, sp, #0
 8109e1e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8109e20:	687b      	ldr	r3, [r7, #4]
 8109e22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8109e26:	2b00      	cmp	r3, #0
 8109e28:	d108      	bne.n	8109e3c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8109e2a:	687b      	ldr	r3, [r7, #4]
 8109e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8109e2e:	4618      	mov	r0, r3
 8109e30:	f7fe fa4c 	bl	81082cc <vPortFree>
				vPortFree( pxTCB );
 8109e34:	6878      	ldr	r0, [r7, #4]
 8109e36:	f7fe fa49 	bl	81082cc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8109e3a:	e017      	b.n	8109e6c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8109e3c:	687b      	ldr	r3, [r7, #4]
 8109e3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8109e42:	2b01      	cmp	r3, #1
 8109e44:	d103      	bne.n	8109e4e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8109e46:	6878      	ldr	r0, [r7, #4]
 8109e48:	f7fe fa40 	bl	81082cc <vPortFree>
	}
 8109e4c:	e00e      	b.n	8109e6c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8109e4e:	687b      	ldr	r3, [r7, #4]
 8109e50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8109e54:	2b02      	cmp	r3, #2
 8109e56:	d009      	beq.n	8109e6c <prvDeleteTCB+0x54>
 8109e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109e5c:	f383 8811 	msr	BASEPRI, r3
 8109e60:	f3bf 8f6f 	isb	sy
 8109e64:	f3bf 8f4f 	dsb	sy
 8109e68:	60fb      	str	r3, [r7, #12]
 8109e6a:	e7fe      	b.n	8109e6a <prvDeleteTCB+0x52>
	}
 8109e6c:	bf00      	nop
 8109e6e:	3710      	adds	r7, #16
 8109e70:	46bd      	mov	sp, r7
 8109e72:	bd80      	pop	{r7, pc}

08109e74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8109e74:	b480      	push	{r7}
 8109e76:	b083      	sub	sp, #12
 8109e78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8109e7a:	4b0c      	ldr	r3, [pc, #48]	; (8109eac <prvResetNextTaskUnblockTime+0x38>)
 8109e7c:	681b      	ldr	r3, [r3, #0]
 8109e7e:	681b      	ldr	r3, [r3, #0]
 8109e80:	2b00      	cmp	r3, #0
 8109e82:	d104      	bne.n	8109e8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8109e84:	4b0a      	ldr	r3, [pc, #40]	; (8109eb0 <prvResetNextTaskUnblockTime+0x3c>)
 8109e86:	f04f 32ff 	mov.w	r2, #4294967295
 8109e8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8109e8c:	e008      	b.n	8109ea0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8109e8e:	4b07      	ldr	r3, [pc, #28]	; (8109eac <prvResetNextTaskUnblockTime+0x38>)
 8109e90:	681b      	ldr	r3, [r3, #0]
 8109e92:	68db      	ldr	r3, [r3, #12]
 8109e94:	68db      	ldr	r3, [r3, #12]
 8109e96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8109e98:	687b      	ldr	r3, [r7, #4]
 8109e9a:	685b      	ldr	r3, [r3, #4]
 8109e9c:	4a04      	ldr	r2, [pc, #16]	; (8109eb0 <prvResetNextTaskUnblockTime+0x3c>)
 8109e9e:	6013      	str	r3, [r2, #0]
}
 8109ea0:	bf00      	nop
 8109ea2:	370c      	adds	r7, #12
 8109ea4:	46bd      	mov	sp, r7
 8109ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109eaa:	4770      	bx	lr
 8109eac:	1000415c 	.word	0x1000415c
 8109eb0:	100041c4 	.word	0x100041c4

08109eb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8109eb4:	b480      	push	{r7}
 8109eb6:	b083      	sub	sp, #12
 8109eb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8109eba:	4b0b      	ldr	r3, [pc, #44]	; (8109ee8 <xTaskGetSchedulerState+0x34>)
 8109ebc:	681b      	ldr	r3, [r3, #0]
 8109ebe:	2b00      	cmp	r3, #0
 8109ec0:	d102      	bne.n	8109ec8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8109ec2:	2301      	movs	r3, #1
 8109ec4:	607b      	str	r3, [r7, #4]
 8109ec6:	e008      	b.n	8109eda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8109ec8:	4b08      	ldr	r3, [pc, #32]	; (8109eec <xTaskGetSchedulerState+0x38>)
 8109eca:	681b      	ldr	r3, [r3, #0]
 8109ecc:	2b00      	cmp	r3, #0
 8109ece:	d102      	bne.n	8109ed6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8109ed0:	2302      	movs	r3, #2
 8109ed2:	607b      	str	r3, [r7, #4]
 8109ed4:	e001      	b.n	8109eda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8109ed6:	2300      	movs	r3, #0
 8109ed8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8109eda:	687b      	ldr	r3, [r7, #4]
	}
 8109edc:	4618      	mov	r0, r3
 8109ede:	370c      	adds	r7, #12
 8109ee0:	46bd      	mov	sp, r7
 8109ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109ee6:	4770      	bx	lr
 8109ee8:	100041b0 	.word	0x100041b0
 8109eec:	100041cc 	.word	0x100041cc

08109ef0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8109ef0:	b580      	push	{r7, lr}
 8109ef2:	b084      	sub	sp, #16
 8109ef4:	af00      	add	r7, sp, #0
 8109ef6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8109ef8:	687b      	ldr	r3, [r7, #4]
 8109efa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8109efc:	2300      	movs	r3, #0
 8109efe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8109f00:	687b      	ldr	r3, [r7, #4]
 8109f02:	2b00      	cmp	r3, #0
 8109f04:	d069      	beq.n	8109fda <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8109f06:	68bb      	ldr	r3, [r7, #8]
 8109f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109f0a:	4b36      	ldr	r3, [pc, #216]	; (8109fe4 <xTaskPriorityInherit+0xf4>)
 8109f0c:	681b      	ldr	r3, [r3, #0]
 8109f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109f10:	429a      	cmp	r2, r3
 8109f12:	d259      	bcs.n	8109fc8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8109f14:	68bb      	ldr	r3, [r7, #8]
 8109f16:	699b      	ldr	r3, [r3, #24]
 8109f18:	2b00      	cmp	r3, #0
 8109f1a:	db06      	blt.n	8109f2a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8109f1c:	4b31      	ldr	r3, [pc, #196]	; (8109fe4 <xTaskPriorityInherit+0xf4>)
 8109f1e:	681b      	ldr	r3, [r3, #0]
 8109f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109f22:	f1c3 0207 	rsb	r2, r3, #7
 8109f26:	68bb      	ldr	r3, [r7, #8]
 8109f28:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8109f2a:	68bb      	ldr	r3, [r7, #8]
 8109f2c:	6959      	ldr	r1, [r3, #20]
 8109f2e:	68bb      	ldr	r3, [r7, #8]
 8109f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109f32:	4613      	mov	r3, r2
 8109f34:	009b      	lsls	r3, r3, #2
 8109f36:	4413      	add	r3, r2
 8109f38:	009b      	lsls	r3, r3, #2
 8109f3a:	4a2b      	ldr	r2, [pc, #172]	; (8109fe8 <xTaskPriorityInherit+0xf8>)
 8109f3c:	4413      	add	r3, r2
 8109f3e:	4299      	cmp	r1, r3
 8109f40:	d13a      	bne.n	8109fb8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8109f42:	68bb      	ldr	r3, [r7, #8]
 8109f44:	3304      	adds	r3, #4
 8109f46:	4618      	mov	r0, r3
 8109f48:	f7fe fb5e 	bl	8108608 <uxListRemove>
 8109f4c:	4603      	mov	r3, r0
 8109f4e:	2b00      	cmp	r3, #0
 8109f50:	d115      	bne.n	8109f7e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8109f52:	68bb      	ldr	r3, [r7, #8]
 8109f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109f56:	4924      	ldr	r1, [pc, #144]	; (8109fe8 <xTaskPriorityInherit+0xf8>)
 8109f58:	4613      	mov	r3, r2
 8109f5a:	009b      	lsls	r3, r3, #2
 8109f5c:	4413      	add	r3, r2
 8109f5e:	009b      	lsls	r3, r3, #2
 8109f60:	440b      	add	r3, r1
 8109f62:	681b      	ldr	r3, [r3, #0]
 8109f64:	2b00      	cmp	r3, #0
 8109f66:	d10a      	bne.n	8109f7e <xTaskPriorityInherit+0x8e>
 8109f68:	68bb      	ldr	r3, [r7, #8]
 8109f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109f6c:	2201      	movs	r2, #1
 8109f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8109f72:	43da      	mvns	r2, r3
 8109f74:	4b1d      	ldr	r3, [pc, #116]	; (8109fec <xTaskPriorityInherit+0xfc>)
 8109f76:	681b      	ldr	r3, [r3, #0]
 8109f78:	4013      	ands	r3, r2
 8109f7a:	4a1c      	ldr	r2, [pc, #112]	; (8109fec <xTaskPriorityInherit+0xfc>)
 8109f7c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8109f7e:	4b19      	ldr	r3, [pc, #100]	; (8109fe4 <xTaskPriorityInherit+0xf4>)
 8109f80:	681b      	ldr	r3, [r3, #0]
 8109f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109f84:	68bb      	ldr	r3, [r7, #8]
 8109f86:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8109f88:	68bb      	ldr	r3, [r7, #8]
 8109f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109f8c:	2201      	movs	r2, #1
 8109f8e:	409a      	lsls	r2, r3
 8109f90:	4b16      	ldr	r3, [pc, #88]	; (8109fec <xTaskPriorityInherit+0xfc>)
 8109f92:	681b      	ldr	r3, [r3, #0]
 8109f94:	4313      	orrs	r3, r2
 8109f96:	4a15      	ldr	r2, [pc, #84]	; (8109fec <xTaskPriorityInherit+0xfc>)
 8109f98:	6013      	str	r3, [r2, #0]
 8109f9a:	68bb      	ldr	r3, [r7, #8]
 8109f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109f9e:	4613      	mov	r3, r2
 8109fa0:	009b      	lsls	r3, r3, #2
 8109fa2:	4413      	add	r3, r2
 8109fa4:	009b      	lsls	r3, r3, #2
 8109fa6:	4a10      	ldr	r2, [pc, #64]	; (8109fe8 <xTaskPriorityInherit+0xf8>)
 8109fa8:	441a      	add	r2, r3
 8109faa:	68bb      	ldr	r3, [r7, #8]
 8109fac:	3304      	adds	r3, #4
 8109fae:	4619      	mov	r1, r3
 8109fb0:	4610      	mov	r0, r2
 8109fb2:	f7fe facc 	bl	810854e <vListInsertEnd>
 8109fb6:	e004      	b.n	8109fc2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8109fb8:	4b0a      	ldr	r3, [pc, #40]	; (8109fe4 <xTaskPriorityInherit+0xf4>)
 8109fba:	681b      	ldr	r3, [r3, #0]
 8109fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109fbe:	68bb      	ldr	r3, [r7, #8]
 8109fc0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8109fc2:	2301      	movs	r3, #1
 8109fc4:	60fb      	str	r3, [r7, #12]
 8109fc6:	e008      	b.n	8109fda <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8109fc8:	68bb      	ldr	r3, [r7, #8]
 8109fca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8109fcc:	4b05      	ldr	r3, [pc, #20]	; (8109fe4 <xTaskPriorityInherit+0xf4>)
 8109fce:	681b      	ldr	r3, [r3, #0]
 8109fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109fd2:	429a      	cmp	r2, r3
 8109fd4:	d201      	bcs.n	8109fda <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8109fd6:	2301      	movs	r3, #1
 8109fd8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8109fda:	68fb      	ldr	r3, [r7, #12]
	}
 8109fdc:	4618      	mov	r0, r3
 8109fde:	3710      	adds	r7, #16
 8109fe0:	46bd      	mov	sp, r7
 8109fe2:	bd80      	pop	{r7, pc}
 8109fe4:	100040a4 	.word	0x100040a4
 8109fe8:	100040a8 	.word	0x100040a8
 8109fec:	100041ac 	.word	0x100041ac

08109ff0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8109ff0:	b580      	push	{r7, lr}
 8109ff2:	b086      	sub	sp, #24
 8109ff4:	af00      	add	r7, sp, #0
 8109ff6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8109ff8:	687b      	ldr	r3, [r7, #4]
 8109ffa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8109ffc:	2300      	movs	r3, #0
 8109ffe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810a000:	687b      	ldr	r3, [r7, #4]
 810a002:	2b00      	cmp	r3, #0
 810a004:	d06c      	beq.n	810a0e0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 810a006:	4b39      	ldr	r3, [pc, #228]	; (810a0ec <xTaskPriorityDisinherit+0xfc>)
 810a008:	681b      	ldr	r3, [r3, #0]
 810a00a:	693a      	ldr	r2, [r7, #16]
 810a00c:	429a      	cmp	r2, r3
 810a00e:	d009      	beq.n	810a024 <xTaskPriorityDisinherit+0x34>
 810a010:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a014:	f383 8811 	msr	BASEPRI, r3
 810a018:	f3bf 8f6f 	isb	sy
 810a01c:	f3bf 8f4f 	dsb	sy
 810a020:	60fb      	str	r3, [r7, #12]
 810a022:	e7fe      	b.n	810a022 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 810a024:	693b      	ldr	r3, [r7, #16]
 810a026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810a028:	2b00      	cmp	r3, #0
 810a02a:	d109      	bne.n	810a040 <xTaskPriorityDisinherit+0x50>
 810a02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a030:	f383 8811 	msr	BASEPRI, r3
 810a034:	f3bf 8f6f 	isb	sy
 810a038:	f3bf 8f4f 	dsb	sy
 810a03c:	60bb      	str	r3, [r7, #8]
 810a03e:	e7fe      	b.n	810a03e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 810a040:	693b      	ldr	r3, [r7, #16]
 810a042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810a044:	1e5a      	subs	r2, r3, #1
 810a046:	693b      	ldr	r3, [r7, #16]
 810a048:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 810a04a:	693b      	ldr	r3, [r7, #16]
 810a04c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a04e:	693b      	ldr	r3, [r7, #16]
 810a050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810a052:	429a      	cmp	r2, r3
 810a054:	d044      	beq.n	810a0e0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 810a056:	693b      	ldr	r3, [r7, #16]
 810a058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810a05a:	2b00      	cmp	r3, #0
 810a05c:	d140      	bne.n	810a0e0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810a05e:	693b      	ldr	r3, [r7, #16]
 810a060:	3304      	adds	r3, #4
 810a062:	4618      	mov	r0, r3
 810a064:	f7fe fad0 	bl	8108608 <uxListRemove>
 810a068:	4603      	mov	r3, r0
 810a06a:	2b00      	cmp	r3, #0
 810a06c:	d115      	bne.n	810a09a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 810a06e:	693b      	ldr	r3, [r7, #16]
 810a070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a072:	491f      	ldr	r1, [pc, #124]	; (810a0f0 <xTaskPriorityDisinherit+0x100>)
 810a074:	4613      	mov	r3, r2
 810a076:	009b      	lsls	r3, r3, #2
 810a078:	4413      	add	r3, r2
 810a07a:	009b      	lsls	r3, r3, #2
 810a07c:	440b      	add	r3, r1
 810a07e:	681b      	ldr	r3, [r3, #0]
 810a080:	2b00      	cmp	r3, #0
 810a082:	d10a      	bne.n	810a09a <xTaskPriorityDisinherit+0xaa>
 810a084:	693b      	ldr	r3, [r7, #16]
 810a086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a088:	2201      	movs	r2, #1
 810a08a:	fa02 f303 	lsl.w	r3, r2, r3
 810a08e:	43da      	mvns	r2, r3
 810a090:	4b18      	ldr	r3, [pc, #96]	; (810a0f4 <xTaskPriorityDisinherit+0x104>)
 810a092:	681b      	ldr	r3, [r3, #0]
 810a094:	4013      	ands	r3, r2
 810a096:	4a17      	ldr	r2, [pc, #92]	; (810a0f4 <xTaskPriorityDisinherit+0x104>)
 810a098:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 810a09a:	693b      	ldr	r3, [r7, #16]
 810a09c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810a09e:	693b      	ldr	r3, [r7, #16]
 810a0a0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810a0a2:	693b      	ldr	r3, [r7, #16]
 810a0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a0a6:	f1c3 0207 	rsb	r2, r3, #7
 810a0aa:	693b      	ldr	r3, [r7, #16]
 810a0ac:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 810a0ae:	693b      	ldr	r3, [r7, #16]
 810a0b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a0b2:	2201      	movs	r2, #1
 810a0b4:	409a      	lsls	r2, r3
 810a0b6:	4b0f      	ldr	r3, [pc, #60]	; (810a0f4 <xTaskPriorityDisinherit+0x104>)
 810a0b8:	681b      	ldr	r3, [r3, #0]
 810a0ba:	4313      	orrs	r3, r2
 810a0bc:	4a0d      	ldr	r2, [pc, #52]	; (810a0f4 <xTaskPriorityDisinherit+0x104>)
 810a0be:	6013      	str	r3, [r2, #0]
 810a0c0:	693b      	ldr	r3, [r7, #16]
 810a0c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a0c4:	4613      	mov	r3, r2
 810a0c6:	009b      	lsls	r3, r3, #2
 810a0c8:	4413      	add	r3, r2
 810a0ca:	009b      	lsls	r3, r3, #2
 810a0cc:	4a08      	ldr	r2, [pc, #32]	; (810a0f0 <xTaskPriorityDisinherit+0x100>)
 810a0ce:	441a      	add	r2, r3
 810a0d0:	693b      	ldr	r3, [r7, #16]
 810a0d2:	3304      	adds	r3, #4
 810a0d4:	4619      	mov	r1, r3
 810a0d6:	4610      	mov	r0, r2
 810a0d8:	f7fe fa39 	bl	810854e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 810a0dc:	2301      	movs	r3, #1
 810a0de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 810a0e0:	697b      	ldr	r3, [r7, #20]
	}
 810a0e2:	4618      	mov	r0, r3
 810a0e4:	3718      	adds	r7, #24
 810a0e6:	46bd      	mov	sp, r7
 810a0e8:	bd80      	pop	{r7, pc}
 810a0ea:	bf00      	nop
 810a0ec:	100040a4 	.word	0x100040a4
 810a0f0:	100040a8 	.word	0x100040a8
 810a0f4:	100041ac 	.word	0x100041ac

0810a0f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 810a0f8:	b580      	push	{r7, lr}
 810a0fa:	b088      	sub	sp, #32
 810a0fc:	af00      	add	r7, sp, #0
 810a0fe:	6078      	str	r0, [r7, #4]
 810a100:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 810a102:	687b      	ldr	r3, [r7, #4]
 810a104:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 810a106:	2301      	movs	r3, #1
 810a108:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810a10a:	687b      	ldr	r3, [r7, #4]
 810a10c:	2b00      	cmp	r3, #0
 810a10e:	f000 8081 	beq.w	810a214 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 810a112:	69bb      	ldr	r3, [r7, #24]
 810a114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810a116:	2b00      	cmp	r3, #0
 810a118:	d109      	bne.n	810a12e <vTaskPriorityDisinheritAfterTimeout+0x36>
 810a11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a11e:	f383 8811 	msr	BASEPRI, r3
 810a122:	f3bf 8f6f 	isb	sy
 810a126:	f3bf 8f4f 	dsb	sy
 810a12a:	60fb      	str	r3, [r7, #12]
 810a12c:	e7fe      	b.n	810a12c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 810a12e:	69bb      	ldr	r3, [r7, #24]
 810a130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810a132:	683a      	ldr	r2, [r7, #0]
 810a134:	429a      	cmp	r2, r3
 810a136:	d902      	bls.n	810a13e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 810a138:	683b      	ldr	r3, [r7, #0]
 810a13a:	61fb      	str	r3, [r7, #28]
 810a13c:	e002      	b.n	810a144 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 810a13e:	69bb      	ldr	r3, [r7, #24]
 810a140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810a142:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 810a144:	69bb      	ldr	r3, [r7, #24]
 810a146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a148:	69fa      	ldr	r2, [r7, #28]
 810a14a:	429a      	cmp	r2, r3
 810a14c:	d062      	beq.n	810a214 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 810a14e:	69bb      	ldr	r3, [r7, #24]
 810a150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810a152:	697a      	ldr	r2, [r7, #20]
 810a154:	429a      	cmp	r2, r3
 810a156:	d15d      	bne.n	810a214 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 810a158:	4b30      	ldr	r3, [pc, #192]	; (810a21c <vTaskPriorityDisinheritAfterTimeout+0x124>)
 810a15a:	681b      	ldr	r3, [r3, #0]
 810a15c:	69ba      	ldr	r2, [r7, #24]
 810a15e:	429a      	cmp	r2, r3
 810a160:	d109      	bne.n	810a176 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 810a162:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a166:	f383 8811 	msr	BASEPRI, r3
 810a16a:	f3bf 8f6f 	isb	sy
 810a16e:	f3bf 8f4f 	dsb	sy
 810a172:	60bb      	str	r3, [r7, #8]
 810a174:	e7fe      	b.n	810a174 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 810a176:	69bb      	ldr	r3, [r7, #24]
 810a178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a17a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 810a17c:	69bb      	ldr	r3, [r7, #24]
 810a17e:	69fa      	ldr	r2, [r7, #28]
 810a180:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 810a182:	69bb      	ldr	r3, [r7, #24]
 810a184:	699b      	ldr	r3, [r3, #24]
 810a186:	2b00      	cmp	r3, #0
 810a188:	db04      	blt.n	810a194 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810a18a:	69fb      	ldr	r3, [r7, #28]
 810a18c:	f1c3 0207 	rsb	r2, r3, #7
 810a190:	69bb      	ldr	r3, [r7, #24]
 810a192:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 810a194:	69bb      	ldr	r3, [r7, #24]
 810a196:	6959      	ldr	r1, [r3, #20]
 810a198:	693a      	ldr	r2, [r7, #16]
 810a19a:	4613      	mov	r3, r2
 810a19c:	009b      	lsls	r3, r3, #2
 810a19e:	4413      	add	r3, r2
 810a1a0:	009b      	lsls	r3, r3, #2
 810a1a2:	4a1f      	ldr	r2, [pc, #124]	; (810a220 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 810a1a4:	4413      	add	r3, r2
 810a1a6:	4299      	cmp	r1, r3
 810a1a8:	d134      	bne.n	810a214 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810a1aa:	69bb      	ldr	r3, [r7, #24]
 810a1ac:	3304      	adds	r3, #4
 810a1ae:	4618      	mov	r0, r3
 810a1b0:	f7fe fa2a 	bl	8108608 <uxListRemove>
 810a1b4:	4603      	mov	r3, r0
 810a1b6:	2b00      	cmp	r3, #0
 810a1b8:	d115      	bne.n	810a1e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 810a1ba:	69bb      	ldr	r3, [r7, #24]
 810a1bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a1be:	4918      	ldr	r1, [pc, #96]	; (810a220 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 810a1c0:	4613      	mov	r3, r2
 810a1c2:	009b      	lsls	r3, r3, #2
 810a1c4:	4413      	add	r3, r2
 810a1c6:	009b      	lsls	r3, r3, #2
 810a1c8:	440b      	add	r3, r1
 810a1ca:	681b      	ldr	r3, [r3, #0]
 810a1cc:	2b00      	cmp	r3, #0
 810a1ce:	d10a      	bne.n	810a1e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
 810a1d0:	69bb      	ldr	r3, [r7, #24]
 810a1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a1d4:	2201      	movs	r2, #1
 810a1d6:	fa02 f303 	lsl.w	r3, r2, r3
 810a1da:	43da      	mvns	r2, r3
 810a1dc:	4b11      	ldr	r3, [pc, #68]	; (810a224 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 810a1de:	681b      	ldr	r3, [r3, #0]
 810a1e0:	4013      	ands	r3, r2
 810a1e2:	4a10      	ldr	r2, [pc, #64]	; (810a224 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 810a1e4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 810a1e6:	69bb      	ldr	r3, [r7, #24]
 810a1e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a1ea:	2201      	movs	r2, #1
 810a1ec:	409a      	lsls	r2, r3
 810a1ee:	4b0d      	ldr	r3, [pc, #52]	; (810a224 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 810a1f0:	681b      	ldr	r3, [r3, #0]
 810a1f2:	4313      	orrs	r3, r2
 810a1f4:	4a0b      	ldr	r2, [pc, #44]	; (810a224 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 810a1f6:	6013      	str	r3, [r2, #0]
 810a1f8:	69bb      	ldr	r3, [r7, #24]
 810a1fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a1fc:	4613      	mov	r3, r2
 810a1fe:	009b      	lsls	r3, r3, #2
 810a200:	4413      	add	r3, r2
 810a202:	009b      	lsls	r3, r3, #2
 810a204:	4a06      	ldr	r2, [pc, #24]	; (810a220 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 810a206:	441a      	add	r2, r3
 810a208:	69bb      	ldr	r3, [r7, #24]
 810a20a:	3304      	adds	r3, #4
 810a20c:	4619      	mov	r1, r3
 810a20e:	4610      	mov	r0, r2
 810a210:	f7fe f99d 	bl	810854e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810a214:	bf00      	nop
 810a216:	3720      	adds	r7, #32
 810a218:	46bd      	mov	sp, r7
 810a21a:	bd80      	pop	{r7, pc}
 810a21c:	100040a4 	.word	0x100040a4
 810a220:	100040a8 	.word	0x100040a8
 810a224:	100041ac 	.word	0x100041ac

0810a228 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 810a228:	b480      	push	{r7}
 810a22a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 810a22c:	4b07      	ldr	r3, [pc, #28]	; (810a24c <pvTaskIncrementMutexHeldCount+0x24>)
 810a22e:	681b      	ldr	r3, [r3, #0]
 810a230:	2b00      	cmp	r3, #0
 810a232:	d004      	beq.n	810a23e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 810a234:	4b05      	ldr	r3, [pc, #20]	; (810a24c <pvTaskIncrementMutexHeldCount+0x24>)
 810a236:	681b      	ldr	r3, [r3, #0]
 810a238:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810a23a:	3201      	adds	r2, #1
 810a23c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 810a23e:	4b03      	ldr	r3, [pc, #12]	; (810a24c <pvTaskIncrementMutexHeldCount+0x24>)
 810a240:	681b      	ldr	r3, [r3, #0]
	}
 810a242:	4618      	mov	r0, r3
 810a244:	46bd      	mov	sp, r7
 810a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a24a:	4770      	bx	lr
 810a24c:	100040a4 	.word	0x100040a4

0810a250 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 810a250:	b580      	push	{r7, lr}
 810a252:	b084      	sub	sp, #16
 810a254:	af00      	add	r7, sp, #0
 810a256:	6078      	str	r0, [r7, #4]
 810a258:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 810a25a:	4b29      	ldr	r3, [pc, #164]	; (810a300 <prvAddCurrentTaskToDelayedList+0xb0>)
 810a25c:	681b      	ldr	r3, [r3, #0]
 810a25e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810a260:	4b28      	ldr	r3, [pc, #160]	; (810a304 <prvAddCurrentTaskToDelayedList+0xb4>)
 810a262:	681b      	ldr	r3, [r3, #0]
 810a264:	3304      	adds	r3, #4
 810a266:	4618      	mov	r0, r3
 810a268:	f7fe f9ce 	bl	8108608 <uxListRemove>
 810a26c:	4603      	mov	r3, r0
 810a26e:	2b00      	cmp	r3, #0
 810a270:	d10b      	bne.n	810a28a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 810a272:	4b24      	ldr	r3, [pc, #144]	; (810a304 <prvAddCurrentTaskToDelayedList+0xb4>)
 810a274:	681b      	ldr	r3, [r3, #0]
 810a276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a278:	2201      	movs	r2, #1
 810a27a:	fa02 f303 	lsl.w	r3, r2, r3
 810a27e:	43da      	mvns	r2, r3
 810a280:	4b21      	ldr	r3, [pc, #132]	; (810a308 <prvAddCurrentTaskToDelayedList+0xb8>)
 810a282:	681b      	ldr	r3, [r3, #0]
 810a284:	4013      	ands	r3, r2
 810a286:	4a20      	ldr	r2, [pc, #128]	; (810a308 <prvAddCurrentTaskToDelayedList+0xb8>)
 810a288:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 810a28a:	687b      	ldr	r3, [r7, #4]
 810a28c:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a290:	d10a      	bne.n	810a2a8 <prvAddCurrentTaskToDelayedList+0x58>
 810a292:	683b      	ldr	r3, [r7, #0]
 810a294:	2b00      	cmp	r3, #0
 810a296:	d007      	beq.n	810a2a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810a298:	4b1a      	ldr	r3, [pc, #104]	; (810a304 <prvAddCurrentTaskToDelayedList+0xb4>)
 810a29a:	681b      	ldr	r3, [r3, #0]
 810a29c:	3304      	adds	r3, #4
 810a29e:	4619      	mov	r1, r3
 810a2a0:	481a      	ldr	r0, [pc, #104]	; (810a30c <prvAddCurrentTaskToDelayedList+0xbc>)
 810a2a2:	f7fe f954 	bl	810854e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 810a2a6:	e026      	b.n	810a2f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 810a2a8:	68fa      	ldr	r2, [r7, #12]
 810a2aa:	687b      	ldr	r3, [r7, #4]
 810a2ac:	4413      	add	r3, r2
 810a2ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 810a2b0:	4b14      	ldr	r3, [pc, #80]	; (810a304 <prvAddCurrentTaskToDelayedList+0xb4>)
 810a2b2:	681b      	ldr	r3, [r3, #0]
 810a2b4:	68ba      	ldr	r2, [r7, #8]
 810a2b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 810a2b8:	68ba      	ldr	r2, [r7, #8]
 810a2ba:	68fb      	ldr	r3, [r7, #12]
 810a2bc:	429a      	cmp	r2, r3
 810a2be:	d209      	bcs.n	810a2d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810a2c0:	4b13      	ldr	r3, [pc, #76]	; (810a310 <prvAddCurrentTaskToDelayedList+0xc0>)
 810a2c2:	681a      	ldr	r2, [r3, #0]
 810a2c4:	4b0f      	ldr	r3, [pc, #60]	; (810a304 <prvAddCurrentTaskToDelayedList+0xb4>)
 810a2c6:	681b      	ldr	r3, [r3, #0]
 810a2c8:	3304      	adds	r3, #4
 810a2ca:	4619      	mov	r1, r3
 810a2cc:	4610      	mov	r0, r2
 810a2ce:	f7fe f962 	bl	8108596 <vListInsert>
}
 810a2d2:	e010      	b.n	810a2f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810a2d4:	4b0f      	ldr	r3, [pc, #60]	; (810a314 <prvAddCurrentTaskToDelayedList+0xc4>)
 810a2d6:	681a      	ldr	r2, [r3, #0]
 810a2d8:	4b0a      	ldr	r3, [pc, #40]	; (810a304 <prvAddCurrentTaskToDelayedList+0xb4>)
 810a2da:	681b      	ldr	r3, [r3, #0]
 810a2dc:	3304      	adds	r3, #4
 810a2de:	4619      	mov	r1, r3
 810a2e0:	4610      	mov	r0, r2
 810a2e2:	f7fe f958 	bl	8108596 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 810a2e6:	4b0c      	ldr	r3, [pc, #48]	; (810a318 <prvAddCurrentTaskToDelayedList+0xc8>)
 810a2e8:	681b      	ldr	r3, [r3, #0]
 810a2ea:	68ba      	ldr	r2, [r7, #8]
 810a2ec:	429a      	cmp	r2, r3
 810a2ee:	d202      	bcs.n	810a2f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 810a2f0:	4a09      	ldr	r2, [pc, #36]	; (810a318 <prvAddCurrentTaskToDelayedList+0xc8>)
 810a2f2:	68bb      	ldr	r3, [r7, #8]
 810a2f4:	6013      	str	r3, [r2, #0]
}
 810a2f6:	bf00      	nop
 810a2f8:	3710      	adds	r7, #16
 810a2fa:	46bd      	mov	sp, r7
 810a2fc:	bd80      	pop	{r7, pc}
 810a2fe:	bf00      	nop
 810a300:	100041a8 	.word	0x100041a8
 810a304:	100040a4 	.word	0x100040a4
 810a308:	100041ac 	.word	0x100041ac
 810a30c:	10004190 	.word	0x10004190
 810a310:	10004160 	.word	0x10004160
 810a314:	1000415c 	.word	0x1000415c
 810a318:	100041c4 	.word	0x100041c4

0810a31c <_ZN7ConsoleC1EP20__UART_HandleTypeDef>:



osSemaphoreDef(console_sem);

Console::Console(UART_HandleTypeDef* uart) : console_uart(uart) {
 810a31c:	b580      	push	{r7, lr}
 810a31e:	b082      	sub	sp, #8
 810a320:	af00      	add	r7, sp, #0
 810a322:	6078      	str	r0, [r7, #4]
 810a324:	6039      	str	r1, [r7, #0]
 810a326:	687b      	ldr	r3, [r7, #4]
 810a328:	683a      	ldr	r2, [r7, #0]
 810a32a:	601a      	str	r2, [r3, #0]
	console_uart = uart;
 810a32c:	687b      	ldr	r3, [r7, #4]
 810a32e:	683a      	ldr	r2, [r7, #0]
 810a330:	601a      	str	r2, [r3, #0]
	console_semaphore = osSemaphoreCreate(osSemaphore(console_sem), 3);
 810a332:	2103      	movs	r1, #3
 810a334:	4805      	ldr	r0, [pc, #20]	; (810a34c <_ZN7ConsoleC1EP20__UART_HandleTypeDef+0x30>)
 810a336:	f7fd fed3 	bl	81080e0 <osSemaphoreCreate>
 810a33a:	4602      	mov	r2, r0
 810a33c:	687b      	ldr	r3, [r7, #4]
 810a33e:	605a      	str	r2, [r3, #4]
}
 810a340:	687b      	ldr	r3, [r7, #4]
 810a342:	4618      	mov	r0, r3
 810a344:	3708      	adds	r7, #8
 810a346:	46bd      	mov	sp, r7
 810a348:	bd80      	pop	{r7, pc}
 810a34a:	bf00      	nop
 810a34c:	081109c8 	.word	0x081109c8

0810a350 <_ZN7Console8transmitEPhm>:

void Console::unlock() {
	osSemaphoreRelease(console_semaphore);
}

void Console::transmit(uint8_t* buffer, uint32_t length) {
 810a350:	b580      	push	{r7, lr}
 810a352:	b084      	sub	sp, #16
 810a354:	af00      	add	r7, sp, #0
 810a356:	60f8      	str	r0, [r7, #12]
 810a358:	60b9      	str	r1, [r7, #8]
 810a35a:	607a      	str	r2, [r7, #4]
	while(HAL_HSEM_IsSemTaken(HARDWARE_SEMAPHORE));
 810a35c:	2002      	movs	r0, #2
 810a35e:	f7fa fd67 	bl	8104e30 <HAL_HSEM_IsSemTaken>
 810a362:	4603      	mov	r3, r0
 810a364:	2b00      	cmp	r3, #0
 810a366:	bf14      	ite	ne
 810a368:	2301      	movne	r3, #1
 810a36a:	2300      	moveq	r3, #0
 810a36c:	b2db      	uxtb	r3, r3
 810a36e:	2b00      	cmp	r3, #0
 810a370:	d000      	beq.n	810a374 <_ZN7Console8transmitEPhm+0x24>
 810a372:	e7f3      	b.n	810a35c <_ZN7Console8transmitEPhm+0xc>

	HAL_HSEM_Take(HARDWARE_SEMAPHORE, 2);
 810a374:	2102      	movs	r1, #2
 810a376:	2002      	movs	r0, #2
 810a378:	f7fa fd36 	bl	8104de8 <HAL_HSEM_Take>
	HAL_UART_Transmit(console_uart, buffer, length, 0xFFFFFF);
 810a37c:	68fb      	ldr	r3, [r7, #12]
 810a37e:	6818      	ldr	r0, [r3, #0]
 810a380:	687b      	ldr	r3, [r7, #4]
 810a382:	b29a      	uxth	r2, r3
 810a384:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 810a388:	68b9      	ldr	r1, [r7, #8]
 810a38a:	f7fc fb2f 	bl	81069ec <HAL_UART_Transmit>
	HAL_HSEM_Release(HARDWARE_SEMAPHORE, 2);
 810a38e:	2102      	movs	r1, #2
 810a390:	2002      	movs	r0, #2
 810a392:	f7fa fd63 	bl	8104e5c <HAL_HSEM_Release>
}
 810a396:	bf00      	nop
 810a398:	3710      	adds	r7, #16
 810a39a:	46bd      	mov	sp, r7
 810a39c:	bd80      	pop	{r7, pc}

0810a39e <_ZN7Console5printEPKc>:

void Console::print(const char* buffer) {
 810a39e:	b580      	push	{r7, lr}
 810a3a0:	b082      	sub	sp, #8
 810a3a2:	af00      	add	r7, sp, #0
 810a3a4:	6078      	str	r0, [r7, #4]
 810a3a6:	6039      	str	r1, [r7, #0]
	transmit((uint8_t*) buffer, strlen(buffer));
 810a3a8:	6838      	ldr	r0, [r7, #0]
 810a3aa:	f7f5 ffa3 	bl	81002f4 <strlen>
 810a3ae:	4603      	mov	r3, r0
 810a3b0:	461a      	mov	r2, r3
 810a3b2:	6839      	ldr	r1, [r7, #0]
 810a3b4:	6878      	ldr	r0, [r7, #4]
 810a3b6:	f7ff ffcb 	bl	810a350 <_ZN7Console8transmitEPhm>
}
 810a3ba:	bf00      	nop
 810a3bc:	3708      	adds	r7, #8
 810a3be:	46bd      	mov	sp, r7
 810a3c0:	bd80      	pop	{r7, pc}

0810a3c2 <_ZN7Console6printfEPKcz>:

void Console::printf(const char *format, ...) {
 810a3c2:	b40e      	push	{r1, r2, r3}
 810a3c4:	b580      	push	{r7, lr}
 810a3c6:	b085      	sub	sp, #20
 810a3c8:	af00      	add	r7, sp, #0
 810a3ca:	6078      	str	r0, [r7, #4]
	va_list args;
	va_start(args, format);
 810a3cc:	f107 0320 	add.w	r3, r7, #32
 810a3d0:	60fb      	str	r3, [r7, #12]

	if(vsprintf(buffer, format, args) > 0) {
 810a3d2:	687b      	ldr	r3, [r7, #4]
 810a3d4:	3308      	adds	r3, #8
 810a3d6:	68fa      	ldr	r2, [r7, #12]
 810a3d8:	69f9      	ldr	r1, [r7, #28]
 810a3da:	4618      	mov	r0, r3
 810a3dc:	f004 fc48 	bl	810ec70 <vsiprintf>
 810a3e0:	4603      	mov	r3, r0
 810a3e2:	2b00      	cmp	r3, #0
 810a3e4:	bfcc      	ite	gt
 810a3e6:	2301      	movgt	r3, #1
 810a3e8:	2300      	movle	r3, #0
 810a3ea:	b2db      	uxtb	r3, r3
 810a3ec:	2b00      	cmp	r3, #0
 810a3ee:	d005      	beq.n	810a3fc <_ZN7Console6printfEPKcz+0x3a>
		print(buffer);
 810a3f0:	687b      	ldr	r3, [r7, #4]
 810a3f2:	3308      	adds	r3, #8
 810a3f4:	4619      	mov	r1, r3
 810a3f6:	6878      	ldr	r0, [r7, #4]
 810a3f8:	f7ff ffd1 	bl	810a39e <_ZN7Console5printEPKc>
	}

	va_end(args);
}
 810a3fc:	bf00      	nop
 810a3fe:	3714      	adds	r7, #20
 810a400:	46bd      	mov	sp, r7
 810a402:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810a406:	b003      	add	sp, #12
 810a408:	4770      	bx	lr
	...

0810a40c <_Z41__static_initialization_and_destruction_0ii>:


Console console(&huart3);
Monitor monitor;
Profiler profiler;
Terminal terminal;
 810a40c:	b580      	push	{r7, lr}
 810a40e:	b082      	sub	sp, #8
 810a410:	af00      	add	r7, sp, #0
 810a412:	6078      	str	r0, [r7, #4]
 810a414:	6039      	str	r1, [r7, #0]
 810a416:	687b      	ldr	r3, [r7, #4]
 810a418:	2b01      	cmp	r3, #1
 810a41a:	d108      	bne.n	810a42e <_Z41__static_initialization_and_destruction_0ii+0x22>
 810a41c:	683b      	ldr	r3, [r7, #0]
 810a41e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 810a422:	4293      	cmp	r3, r2
 810a424:	d103      	bne.n	810a42e <_Z41__static_initialization_and_destruction_0ii+0x22>
Console console(&huart3);
 810a426:	4904      	ldr	r1, [pc, #16]	; (810a438 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 810a428:	4804      	ldr	r0, [pc, #16]	; (810a43c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 810a42a:	f7ff ff77 	bl	810a31c <_ZN7ConsoleC1EP20__UART_HandleTypeDef>
Terminal terminal;
 810a42e:	bf00      	nop
 810a430:	3708      	adds	r7, #8
 810a432:	46bd      	mov	sp, r7
 810a434:	bd80      	pop	{r7, pc}
 810a436:	bf00      	nop
 810a438:	10009a50 	.word	0x10009a50
 810a43c:	100041d0 	.word	0x100041d0

0810a440 <_GLOBAL__sub_I_console>:
 810a440:	b580      	push	{r7, lr}
 810a442:	af00      	add	r7, sp, #0
 810a444:	f64f 71ff 	movw	r1, #65535	; 0xffff
 810a448:	2001      	movs	r0, #1
 810a44a:	f7ff ffdf 	bl	810a40c <_Z41__static_initialization_and_destruction_0ii>
 810a44e:	bd80      	pop	{r7, pc}

0810a450 <_ZN8Profiler6enableEv>:
			profiler->depth_to_display--;
		}
	}
}

void Profiler::enable() {
 810a450:	b480      	push	{r7}
 810a452:	b085      	sub	sp, #20
 810a454:	af00      	add	r7, sp, #0
 810a456:	6078      	str	r0, [r7, #4]
	profiling_requested = true;
 810a458:	687b      	ldr	r3, [r7, #4]
 810a45a:	2201      	movs	r2, #1
 810a45c:	f883 2340 	strb.w	r2, [r3, #832]	; 0x340

	for(uint8_t i = 0; i < NUM_PROFILERS; i++) {
 810a460:	2300      	movs	r3, #0
 810a462:	73fb      	strb	r3, [r7, #15]
 810a464:	7bfb      	ldrb	r3, [r7, #15]
 810a466:	2b0f      	cmp	r3, #15
 810a468:	d80c      	bhi.n	810a484 <_ZN8Profiler6enableEv+0x34>
		profilers[i].depth_to_display = -1;
 810a46a:	7bfb      	ldrb	r3, [r7, #15]
 810a46c:	687a      	ldr	r2, [r7, #4]
 810a46e:	2134      	movs	r1, #52	; 0x34
 810a470:	fb01 f303 	mul.w	r3, r1, r3
 810a474:	4413      	add	r3, r2
 810a476:	3308      	adds	r3, #8
 810a478:	22ff      	movs	r2, #255	; 0xff
 810a47a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < NUM_PROFILERS; i++) {
 810a47c:	7bfb      	ldrb	r3, [r7, #15]
 810a47e:	3301      	adds	r3, #1
 810a480:	73fb      	strb	r3, [r7, #15]
 810a482:	e7ef      	b.n	810a464 <_ZN8Profiler6enableEv+0x14>
	}
}
 810a484:	bf00      	nop
 810a486:	3714      	adds	r7, #20
 810a488:	46bd      	mov	sp, r7
 810a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a48e:	4770      	bx	lr

0810a490 <_ZN8Profiler7disableEv>:

void Profiler::disable() {
 810a490:	b480      	push	{r7}
 810a492:	b083      	sub	sp, #12
 810a494:	af00      	add	r7, sp, #0
 810a496:	6078      	str	r0, [r7, #4]
	profiling = false;
 810a498:	687b      	ldr	r3, [r7, #4]
 810a49a:	2200      	movs	r2, #0
 810a49c:	f883 2341 	strb.w	r2, [r3, #833]	; 0x341
}
 810a4a0:	bf00      	nop
 810a4a2:	370c      	adds	r7, #12
 810a4a4:	46bd      	mov	sp, r7
 810a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a4aa:	4770      	bx	lr

0810a4ac <_ZN5ShellC1EP20__UART_HandleTypeDefP8Terminal>:


#include "Debug.h"


Shell::Shell(UART_HandleTypeDef* uart, Terminal* terminal) : Thread("Shell"), uart(uart), terminal(terminal) {
 810a4ac:	b580      	push	{r7, lr}
 810a4ae:	b084      	sub	sp, #16
 810a4b0:	af00      	add	r7, sp, #0
 810a4b2:	60f8      	str	r0, [r7, #12]
 810a4b4:	60b9      	str	r1, [r7, #8]
 810a4b6:	607a      	str	r2, [r7, #4]
 810a4b8:	68fb      	ldr	r3, [r7, #12]
 810a4ba:	4910      	ldr	r1, [pc, #64]	; (810a4fc <_ZN5ShellC1EP20__UART_HandleTypeDefP8Terminal+0x50>)
 810a4bc:	4618      	mov	r0, r3
 810a4be:	f003 f9fe 	bl	810d8be <_ZN6ThreadC1EPKc>
 810a4c2:	4a0f      	ldr	r2, [pc, #60]	; (810a500 <_ZN5ShellC1EP20__UART_HandleTypeDefP8Terminal+0x54>)
 810a4c4:	68fb      	ldr	r3, [r7, #12]
 810a4c6:	601a      	str	r2, [r3, #0]
 810a4c8:	68fb      	ldr	r3, [r7, #12]
 810a4ca:	68ba      	ldr	r2, [r7, #8]
 810a4cc:	60da      	str	r2, [r3, #12]
 810a4ce:	68fb      	ldr	r3, [r7, #12]
 810a4d0:	687a      	ldr	r2, [r7, #4]
 810a4d2:	611a      	str	r2, [r3, #16]
 810a4d4:	68fb      	ldr	r3, [r7, #12]
 810a4d6:	2200      	movs	r2, #0
 810a4d8:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 810a4dc:	68fb      	ldr	r3, [r7, #12]
 810a4de:	2200      	movs	r2, #0
 810a4e0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
	cmd.components[0].component = command_buffer; // Bind command structure to buffer
 810a4e4:	68fb      	ldr	r3, [r7, #12]
 810a4e6:	f503 7205 	add.w	r2, r3, #532	; 0x214
 810a4ea:	68fb      	ldr	r3, [r7, #12]
 810a4ec:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
}
 810a4f0:	68fb      	ldr	r3, [r7, #12]
 810a4f2:	4618      	mov	r0, r3
 810a4f4:	3710      	adds	r7, #16
 810a4f6:	46bd      	mov	sp, r7
 810a4f8:	bd80      	pop	{r7, pc}
 810a4fa:	bf00      	nop
 810a4fc:	08110520 	.word	0x08110520
 810a500:	081109d8 	.word	0x081109d8

0810a504 <_ZN5Shell4initEv>:

void Shell::init() {
 810a504:	b580      	push	{r7, lr}
 810a506:	b082      	sub	sp, #8
 810a508:	af00      	add	r7, sp, #0
 810a50a:	6078      	str	r0, [r7, #4]
	console.printf("\x1b[2J\x1b[H");
 810a50c:	490a      	ldr	r1, [pc, #40]	; (810a538 <_ZN5Shell4initEv+0x34>)
 810a50e:	480b      	ldr	r0, [pc, #44]	; (810a53c <_ZN5Shell4initEv+0x38>)
 810a510:	f7ff ff57 	bl	810a3c2 <_ZN7Console6printfEPKcz>
	console.printf("----- EPFL Xplore Avionics Shell -----\r\n");
 810a514:	490a      	ldr	r1, [pc, #40]	; (810a540 <_ZN5Shell4initEv+0x3c>)
 810a516:	4809      	ldr	r0, [pc, #36]	; (810a53c <_ZN5Shell4initEv+0x38>)
 810a518:	f7ff ff53 	bl	810a3c2 <_ZN7Console6printfEPKcz>
	HAL_UART_Receive_DMA(uart, dma_buffer, CMD_BUFFER_SIZE);
 810a51c:	687b      	ldr	r3, [r7, #4]
 810a51e:	68d8      	ldr	r0, [r3, #12]
 810a520:	687b      	ldr	r3, [r7, #4]
 810a522:	3314      	adds	r3, #20
 810a524:	f44f 7200 	mov.w	r2, #512	; 0x200
 810a528:	4619      	mov	r1, r3
 810a52a:	f7fc faf5 	bl	8106b18 <HAL_UART_Receive_DMA>
}
 810a52e:	bf00      	nop
 810a530:	3708      	adds	r7, #8
 810a532:	46bd      	mov	sp, r7
 810a534:	bd80      	pop	{r7, pc}
 810a536:	bf00      	nop
 810a538:	08110528 	.word	0x08110528
 810a53c:	100041d0 	.word	0x100041d0
 810a540:	08110530 	.word	0x08110530

0810a544 <_ZN5Shell4loopEv>:

void Shell::loop() {
 810a544:	b580      	push	{r7, lr}
 810a546:	b082      	sub	sp, #8
 810a548:	af00      	add	r7, sp, #0
 810a54a:	6078      	str	r0, [r7, #4]
	endDmaStreamIndex = CMD_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 810a54c:	687b      	ldr	r3, [r7, #4]
 810a54e:	68db      	ldr	r3, [r3, #12]
 810a550:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a552:	681b      	ldr	r3, [r3, #0]
 810a554:	4a4e      	ldr	r2, [pc, #312]	; (810a690 <_ZN5Shell4loopEv+0x14c>)
 810a556:	4293      	cmp	r3, r2
 810a558:	d068      	beq.n	810a62c <_ZN5Shell4loopEv+0xe8>
 810a55a:	687b      	ldr	r3, [r7, #4]
 810a55c:	68db      	ldr	r3, [r3, #12]
 810a55e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a560:	681b      	ldr	r3, [r3, #0]
 810a562:	4a4c      	ldr	r2, [pc, #304]	; (810a694 <_ZN5Shell4loopEv+0x150>)
 810a564:	4293      	cmp	r3, r2
 810a566:	d061      	beq.n	810a62c <_ZN5Shell4loopEv+0xe8>
 810a568:	687b      	ldr	r3, [r7, #4]
 810a56a:	68db      	ldr	r3, [r3, #12]
 810a56c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a56e:	681b      	ldr	r3, [r3, #0]
 810a570:	4a49      	ldr	r2, [pc, #292]	; (810a698 <_ZN5Shell4loopEv+0x154>)
 810a572:	4293      	cmp	r3, r2
 810a574:	d05a      	beq.n	810a62c <_ZN5Shell4loopEv+0xe8>
 810a576:	687b      	ldr	r3, [r7, #4]
 810a578:	68db      	ldr	r3, [r3, #12]
 810a57a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a57c:	681b      	ldr	r3, [r3, #0]
 810a57e:	4a47      	ldr	r2, [pc, #284]	; (810a69c <_ZN5Shell4loopEv+0x158>)
 810a580:	4293      	cmp	r3, r2
 810a582:	d053      	beq.n	810a62c <_ZN5Shell4loopEv+0xe8>
 810a584:	687b      	ldr	r3, [r7, #4]
 810a586:	68db      	ldr	r3, [r3, #12]
 810a588:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a58a:	681b      	ldr	r3, [r3, #0]
 810a58c:	4a44      	ldr	r2, [pc, #272]	; (810a6a0 <_ZN5Shell4loopEv+0x15c>)
 810a58e:	4293      	cmp	r3, r2
 810a590:	d04c      	beq.n	810a62c <_ZN5Shell4loopEv+0xe8>
 810a592:	687b      	ldr	r3, [r7, #4]
 810a594:	68db      	ldr	r3, [r3, #12]
 810a596:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a598:	681b      	ldr	r3, [r3, #0]
 810a59a:	4a42      	ldr	r2, [pc, #264]	; (810a6a4 <_ZN5Shell4loopEv+0x160>)
 810a59c:	4293      	cmp	r3, r2
 810a59e:	d045      	beq.n	810a62c <_ZN5Shell4loopEv+0xe8>
 810a5a0:	687b      	ldr	r3, [r7, #4]
 810a5a2:	68db      	ldr	r3, [r3, #12]
 810a5a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a5a6:	681b      	ldr	r3, [r3, #0]
 810a5a8:	4a3f      	ldr	r2, [pc, #252]	; (810a6a8 <_ZN5Shell4loopEv+0x164>)
 810a5aa:	4293      	cmp	r3, r2
 810a5ac:	d03e      	beq.n	810a62c <_ZN5Shell4loopEv+0xe8>
 810a5ae:	687b      	ldr	r3, [r7, #4]
 810a5b0:	68db      	ldr	r3, [r3, #12]
 810a5b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a5b4:	681b      	ldr	r3, [r3, #0]
 810a5b6:	4a3d      	ldr	r2, [pc, #244]	; (810a6ac <_ZN5Shell4loopEv+0x168>)
 810a5b8:	4293      	cmp	r3, r2
 810a5ba:	d037      	beq.n	810a62c <_ZN5Shell4loopEv+0xe8>
 810a5bc:	687b      	ldr	r3, [r7, #4]
 810a5be:	68db      	ldr	r3, [r3, #12]
 810a5c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a5c2:	681b      	ldr	r3, [r3, #0]
 810a5c4:	4a3a      	ldr	r2, [pc, #232]	; (810a6b0 <_ZN5Shell4loopEv+0x16c>)
 810a5c6:	4293      	cmp	r3, r2
 810a5c8:	d030      	beq.n	810a62c <_ZN5Shell4loopEv+0xe8>
 810a5ca:	687b      	ldr	r3, [r7, #4]
 810a5cc:	68db      	ldr	r3, [r3, #12]
 810a5ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a5d0:	681b      	ldr	r3, [r3, #0]
 810a5d2:	4a38      	ldr	r2, [pc, #224]	; (810a6b4 <_ZN5Shell4loopEv+0x170>)
 810a5d4:	4293      	cmp	r3, r2
 810a5d6:	d029      	beq.n	810a62c <_ZN5Shell4loopEv+0xe8>
 810a5d8:	687b      	ldr	r3, [r7, #4]
 810a5da:	68db      	ldr	r3, [r3, #12]
 810a5dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a5de:	681b      	ldr	r3, [r3, #0]
 810a5e0:	4a35      	ldr	r2, [pc, #212]	; (810a6b8 <_ZN5Shell4loopEv+0x174>)
 810a5e2:	4293      	cmp	r3, r2
 810a5e4:	d022      	beq.n	810a62c <_ZN5Shell4loopEv+0xe8>
 810a5e6:	687b      	ldr	r3, [r7, #4]
 810a5e8:	68db      	ldr	r3, [r3, #12]
 810a5ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a5ec:	681b      	ldr	r3, [r3, #0]
 810a5ee:	4a33      	ldr	r2, [pc, #204]	; (810a6bc <_ZN5Shell4loopEv+0x178>)
 810a5f0:	4293      	cmp	r3, r2
 810a5f2:	d01b      	beq.n	810a62c <_ZN5Shell4loopEv+0xe8>
 810a5f4:	687b      	ldr	r3, [r7, #4]
 810a5f6:	68db      	ldr	r3, [r3, #12]
 810a5f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a5fa:	681b      	ldr	r3, [r3, #0]
 810a5fc:	4a30      	ldr	r2, [pc, #192]	; (810a6c0 <_ZN5Shell4loopEv+0x17c>)
 810a5fe:	4293      	cmp	r3, r2
 810a600:	d014      	beq.n	810a62c <_ZN5Shell4loopEv+0xe8>
 810a602:	687b      	ldr	r3, [r7, #4]
 810a604:	68db      	ldr	r3, [r3, #12]
 810a606:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a608:	681b      	ldr	r3, [r3, #0]
 810a60a:	4a2e      	ldr	r2, [pc, #184]	; (810a6c4 <_ZN5Shell4loopEv+0x180>)
 810a60c:	4293      	cmp	r3, r2
 810a60e:	d00d      	beq.n	810a62c <_ZN5Shell4loopEv+0xe8>
 810a610:	687b      	ldr	r3, [r7, #4]
 810a612:	68db      	ldr	r3, [r3, #12]
 810a614:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a616:	681b      	ldr	r3, [r3, #0]
 810a618:	4a2b      	ldr	r2, [pc, #172]	; (810a6c8 <_ZN5Shell4loopEv+0x184>)
 810a61a:	4293      	cmp	r3, r2
 810a61c:	d006      	beq.n	810a62c <_ZN5Shell4loopEv+0xe8>
 810a61e:	687b      	ldr	r3, [r7, #4]
 810a620:	68db      	ldr	r3, [r3, #12]
 810a622:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a624:	681b      	ldr	r3, [r3, #0]
 810a626:	4a29      	ldr	r2, [pc, #164]	; (810a6cc <_ZN5Shell4loopEv+0x188>)
 810a628:	4293      	cmp	r3, r2
 810a62a:	d107      	bne.n	810a63c <_ZN5Shell4loopEv+0xf8>
 810a62c:	687b      	ldr	r3, [r7, #4]
 810a62e:	68db      	ldr	r3, [r3, #12]
 810a630:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a632:	681b      	ldr	r3, [r3, #0]
 810a634:	685b      	ldr	r3, [r3, #4]
 810a636:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 810a63a:	e006      	b.n	810a64a <_ZN5Shell4loopEv+0x106>
 810a63c:	687b      	ldr	r3, [r7, #4]
 810a63e:	68db      	ldr	r3, [r3, #12]
 810a640:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a642:	681b      	ldr	r3, [r3, #0]
 810a644:	685b      	ldr	r3, [r3, #4]
 810a646:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 810a64a:	687a      	ldr	r2, [r7, #4]
 810a64c:	f8c2 3418 	str.w	r3, [r2, #1048]	; 0x418

	while(lastDmaStreamIndex != endDmaStreamIndex) {
 810a650:	687b      	ldr	r3, [r7, #4]
 810a652:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
 810a656:	687b      	ldr	r3, [r7, #4]
 810a658:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 810a65c:	429a      	cmp	r2, r3
 810a65e:	d013      	beq.n	810a688 <_ZN5Shell4loopEv+0x144>
		receiveByte(dma_buffer[lastDmaStreamIndex]);
 810a660:	687b      	ldr	r3, [r7, #4]
 810a662:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 810a666:	687a      	ldr	r2, [r7, #4]
 810a668:	4413      	add	r3, r2
 810a66a:	7d1b      	ldrb	r3, [r3, #20]
 810a66c:	4619      	mov	r1, r3
 810a66e:	6878      	ldr	r0, [r7, #4]
 810a670:	f000 f82e 	bl	810a6d0 <_ZN5Shell11receiveByteEc>
		lastDmaStreamIndex = (lastDmaStreamIndex + 1) % CMD_BUFFER_SIZE;
 810a674:	687b      	ldr	r3, [r7, #4]
 810a676:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 810a67a:	3301      	adds	r3, #1
 810a67c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810a680:	687b      	ldr	r3, [r7, #4]
 810a682:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
	while(lastDmaStreamIndex != endDmaStreamIndex) {
 810a686:	e7e3      	b.n	810a650 <_ZN5Shell4loopEv+0x10c>
	}
}
 810a688:	bf00      	nop
 810a68a:	3708      	adds	r7, #8
 810a68c:	46bd      	mov	sp, r7
 810a68e:	bd80      	pop	{r7, pc}
 810a690:	40020010 	.word	0x40020010
 810a694:	40020028 	.word	0x40020028
 810a698:	40020040 	.word	0x40020040
 810a69c:	40020058 	.word	0x40020058
 810a6a0:	40020070 	.word	0x40020070
 810a6a4:	40020088 	.word	0x40020088
 810a6a8:	400200a0 	.word	0x400200a0
 810a6ac:	400200b8 	.word	0x400200b8
 810a6b0:	40020410 	.word	0x40020410
 810a6b4:	40020428 	.word	0x40020428
 810a6b8:	40020440 	.word	0x40020440
 810a6bc:	40020458 	.word	0x40020458
 810a6c0:	40020470 	.word	0x40020470
 810a6c4:	40020488 	.word	0x40020488
 810a6c8:	400204a0 	.word	0x400204a0
 810a6cc:	400204b8 	.word	0x400204b8

0810a6d0 <_ZN5Shell11receiveByteEc>:


void Shell::receiveByte(char cbuf) {
 810a6d0:	b580      	push	{r7, lr}
 810a6d2:	b084      	sub	sp, #16
 810a6d4:	af00      	add	r7, sp, #0
 810a6d6:	6078      	str	r0, [r7, #4]
 810a6d8:	460b      	mov	r3, r1
 810a6da:	70fb      	strb	r3, [r7, #3]
	if(cbuf == '\0') {
 810a6dc:	78fb      	ldrb	r3, [r7, #3]
 810a6de:	2b00      	cmp	r3, #0
 810a6e0:	f000 809f 	beq.w	810a822 <_ZN5Shell11receiveByteEc+0x152>
		return;
	}

	if(cbuf != '\n' && cbuf != '\r' && command_index < CMD_BUFFER_SIZE) {
 810a6e4:	78fb      	ldrb	r3, [r7, #3]
 810a6e6:	2b0a      	cmp	r3, #10
 810a6e8:	d050      	beq.n	810a78c <_ZN5Shell11receiveByteEc+0xbc>
 810a6ea:	78fb      	ldrb	r3, [r7, #3]
 810a6ec:	2b0d      	cmp	r3, #13
 810a6ee:	d04d      	beq.n	810a78c <_ZN5Shell11receiveByteEc+0xbc>
		command_buffer[command_index++] = cbuf;
 810a6f0:	687b      	ldr	r3, [r7, #4]
 810a6f2:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 810a6f6:	1c5a      	adds	r2, r3, #1
 810a6f8:	b2d1      	uxtb	r1, r2
 810a6fa:	687a      	ldr	r2, [r7, #4]
 810a6fc:	f882 141c 	strb.w	r1, [r2, #1052]	; 0x41c
 810a700:	461a      	mov	r2, r3
 810a702:	687b      	ldr	r3, [r7, #4]
 810a704:	4413      	add	r3, r2
 810a706:	78fa      	ldrb	r2, [r7, #3]
 810a708:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214

		if(cbuf == ' ') {
 810a70c:	78fb      	ldrb	r3, [r7, #3]
 810a70e:	2b20      	cmp	r3, #32
 810a710:	f040 8089 	bne.w	810a826 <_ZN5Shell11receiveByteEc+0x156>
			uint8_t start_index = (&cmd.components[cmd.num_components].component[0] - &command_buffer[0]);
 810a714:	687b      	ldr	r3, [r7, #4]
 810a716:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 810a71a:	461a      	mov	r2, r3
 810a71c:	687b      	ldr	r3, [r7, #4]
 810a71e:	3284      	adds	r2, #132	; 0x84
 810a720:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 810a724:	461a      	mov	r2, r3
 810a726:	687b      	ldr	r3, [r7, #4]
 810a728:	f503 7305 	add.w	r3, r3, #532	; 0x214
 810a72c:	1ad3      	subs	r3, r2, r3
 810a72e:	73fb      	strb	r3, [r7, #15]

			cmd.components[cmd.num_components].length = command_index - start_index - 1;
 810a730:	687b      	ldr	r3, [r7, #4]
 810a732:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 810a736:	7bfb      	ldrb	r3, [r7, #15]
 810a738:	1ad3      	subs	r3, r2, r3
 810a73a:	b2db      	uxtb	r3, r3
 810a73c:	687a      	ldr	r2, [r7, #4]
 810a73e:	f892 2460 	ldrb.w	r2, [r2, #1120]	; 0x460
 810a742:	4610      	mov	r0, r2
 810a744:	3b01      	subs	r3, #1
 810a746:	b2d9      	uxtb	r1, r3
 810a748:	687a      	ldr	r2, [r7, #4]
 810a74a:	f100 0384 	add.w	r3, r0, #132	; 0x84
 810a74e:	00db      	lsls	r3, r3, #3
 810a750:	4413      	add	r3, r2
 810a752:	460a      	mov	r2, r1
 810a754:	711a      	strb	r2, [r3, #4]
			cmd.num_components++;
 810a756:	687b      	ldr	r3, [r7, #4]
 810a758:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 810a75c:	3301      	adds	r3, #1
 810a75e:	b2da      	uxtb	r2, r3
 810a760:	687b      	ldr	r3, [r7, #4]
 810a762:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
			cmd.components[cmd.num_components].component = &command_buffer[command_index];
 810a766:	687b      	ldr	r3, [r7, #4]
 810a768:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 810a76c:	461a      	mov	r2, r3
 810a76e:	687b      	ldr	r3, [r7, #4]
 810a770:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 810a774:	4618      	mov	r0, r3
 810a776:	f502 7304 	add.w	r3, r2, #528	; 0x210
 810a77a:	687a      	ldr	r2, [r7, #4]
 810a77c:	4413      	add	r3, r2
 810a77e:	1d19      	adds	r1, r3, #4
 810a780:	687b      	ldr	r3, [r7, #4]
 810a782:	f100 0284 	add.w	r2, r0, #132	; 0x84
 810a786:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
		}
 810a78a:	e04c      	b.n	810a826 <_ZN5Shell11receiveByteEc+0x156>
	} else {
		uint8_t start_index = (&cmd.components[cmd.num_components].component[0] - &command_buffer[0]);
 810a78c:	687b      	ldr	r3, [r7, #4]
 810a78e:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 810a792:	461a      	mov	r2, r3
 810a794:	687b      	ldr	r3, [r7, #4]
 810a796:	3284      	adds	r2, #132	; 0x84
 810a798:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 810a79c:	461a      	mov	r2, r3
 810a79e:	687b      	ldr	r3, [r7, #4]
 810a7a0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 810a7a4:	1ad3      	subs	r3, r2, r3
 810a7a6:	73bb      	strb	r3, [r7, #14]
		cmd.components[cmd.num_components].length = command_index - start_index;
 810a7a8:	687b      	ldr	r3, [r7, #4]
 810a7aa:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 810a7ae:	687b      	ldr	r3, [r7, #4]
 810a7b0:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 810a7b4:	4618      	mov	r0, r3
 810a7b6:	7bbb      	ldrb	r3, [r7, #14]
 810a7b8:	1ad3      	subs	r3, r2, r3
 810a7ba:	b2d9      	uxtb	r1, r3
 810a7bc:	687a      	ldr	r2, [r7, #4]
 810a7be:	f100 0384 	add.w	r3, r0, #132	; 0x84
 810a7c2:	00db      	lsls	r3, r3, #3
 810a7c4:	4413      	add	r3, r2
 810a7c6:	460a      	mov	r2, r1
 810a7c8:	711a      	strb	r2, [r3, #4]

		if(command_index - start_index > 0) {
 810a7ca:	687b      	ldr	r3, [r7, #4]
 810a7cc:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 810a7d0:	461a      	mov	r2, r3
 810a7d2:	7bbb      	ldrb	r3, [r7, #14]
 810a7d4:	1ad3      	subs	r3, r2, r3
 810a7d6:	2b00      	cmp	r3, #0
 810a7d8:	dd07      	ble.n	810a7ea <_ZN5Shell11receiveByteEc+0x11a>
			cmd.num_components++;
 810a7da:	687b      	ldr	r3, [r7, #4]
 810a7dc:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 810a7e0:	3301      	adds	r3, #1
 810a7e2:	b2da      	uxtb	r2, r3
 810a7e4:	687b      	ldr	r3, [r7, #4]
 810a7e6:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
		}

		terminal->execute(&cmd, &console);
 810a7ea:	687b      	ldr	r3, [r7, #4]
 810a7ec:	6918      	ldr	r0, [r3, #16]
 810a7ee:	687b      	ldr	r3, [r7, #4]
 810a7f0:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 810a7f4:	4a0e      	ldr	r2, [pc, #56]	; (810a830 <_ZN5Shell11receiveByteEc+0x160>)
 810a7f6:	4619      	mov	r1, r3
 810a7f8:	f000 f84e 	bl	810a898 <_ZN8Terminal7executeEP12ShellCommandP7Console>

		command_index = 0;
 810a7fc:	687b      	ldr	r3, [r7, #4]
 810a7fe:	2200      	movs	r2, #0
 810a800:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
		cmd.num_components = 0;
 810a804:	687b      	ldr	r3, [r7, #4]
 810a806:	2200      	movs	r2, #0
 810a808:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
		cmd.components[0].length = 0;
 810a80c:	687b      	ldr	r3, [r7, #4]
 810a80e:	2200      	movs	r2, #0
 810a810:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
		cmd.components[0].component = command_buffer;
 810a814:	687b      	ldr	r3, [r7, #4]
 810a816:	f503 7205 	add.w	r2, r3, #532	; 0x214
 810a81a:	687b      	ldr	r3, [r7, #4]
 810a81c:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 810a820:	e002      	b.n	810a828 <_ZN5Shell11receiveByteEc+0x158>
		return;
 810a822:	bf00      	nop
 810a824:	e000      	b.n	810a828 <_ZN5Shell11receiveByteEc+0x158>
		}
 810a826:	bf00      	nop
	}
}
 810a828:	3710      	adds	r7, #16
 810a82a:	46bd      	mov	sp, r7
 810a82c:	bd80      	pop	{r7, pc}
 810a82e:	bf00      	nop
 810a830:	100041d0 	.word	0x100041d0

0810a834 <_ZN16CommandComponent7matchesEPKc>:

struct CommandComponent {
	const char* component;
	uint8_t length;

	bool matches(const char* target) {
 810a834:	b480      	push	{r7}
 810a836:	b085      	sub	sp, #20
 810a838:	af00      	add	r7, sp, #0
 810a83a:	6078      	str	r0, [r7, #4]
 810a83c:	6039      	str	r1, [r7, #0]
		uint8_t i;

		for(i = 0; i < length; i++) {
 810a83e:	2300      	movs	r3, #0
 810a840:	73fb      	strb	r3, [r7, #15]
 810a842:	687b      	ldr	r3, [r7, #4]
 810a844:	791b      	ldrb	r3, [r3, #4]
 810a846:	7bfa      	ldrb	r2, [r7, #15]
 810a848:	429a      	cmp	r2, r3
 810a84a:	d216      	bcs.n	810a87a <_ZN16CommandComponent7matchesEPKc+0x46>
			if(target[i] != component[i] || target[i] == '\0') {
 810a84c:	7bfb      	ldrb	r3, [r7, #15]
 810a84e:	683a      	ldr	r2, [r7, #0]
 810a850:	4413      	add	r3, r2
 810a852:	781a      	ldrb	r2, [r3, #0]
 810a854:	687b      	ldr	r3, [r7, #4]
 810a856:	6819      	ldr	r1, [r3, #0]
 810a858:	7bfb      	ldrb	r3, [r7, #15]
 810a85a:	440b      	add	r3, r1
 810a85c:	781b      	ldrb	r3, [r3, #0]
 810a85e:	429a      	cmp	r2, r3
 810a860:	d105      	bne.n	810a86e <_ZN16CommandComponent7matchesEPKc+0x3a>
 810a862:	7bfb      	ldrb	r3, [r7, #15]
 810a864:	683a      	ldr	r2, [r7, #0]
 810a866:	4413      	add	r3, r2
 810a868:	781b      	ldrb	r3, [r3, #0]
 810a86a:	2b00      	cmp	r3, #0
 810a86c:	d101      	bne.n	810a872 <_ZN16CommandComponent7matchesEPKc+0x3e>
				return false;
 810a86e:	2300      	movs	r3, #0
 810a870:	e00c      	b.n	810a88c <_ZN16CommandComponent7matchesEPKc+0x58>
		for(i = 0; i < length; i++) {
 810a872:	7bfb      	ldrb	r3, [r7, #15]
 810a874:	3301      	adds	r3, #1
 810a876:	73fb      	strb	r3, [r7, #15]
 810a878:	e7e3      	b.n	810a842 <_ZN16CommandComponent7matchesEPKc+0xe>
			}
		}

		return target[i] == '\0';
 810a87a:	7bfb      	ldrb	r3, [r7, #15]
 810a87c:	683a      	ldr	r2, [r7, #0]
 810a87e:	4413      	add	r3, r2
 810a880:	781b      	ldrb	r3, [r3, #0]
 810a882:	2b00      	cmp	r3, #0
 810a884:	bf0c      	ite	eq
 810a886:	2301      	moveq	r3, #1
 810a888:	2300      	movne	r3, #0
 810a88a:	b2db      	uxtb	r3, r3
	}
 810a88c:	4618      	mov	r0, r3
 810a88e:	3714      	adds	r7, #20
 810a890:	46bd      	mov	sp, r7
 810a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a896:	4770      	bx	lr

0810a898 <_ZN8Terminal7executeEP12ShellCommandP7Console>:


#define EQUALS(index, str) (cmd->num_components > (index) && cmd->components[(index)].matches((str)))


void Terminal::execute(ShellCommand* cmd, Console* feedback) {
 810a898:	b580      	push	{r7, lr}
 810a89a:	b086      	sub	sp, #24
 810a89c:	af00      	add	r7, sp, #0
 810a89e:	60f8      	str	r0, [r7, #12]
 810a8a0:	60b9      	str	r1, [r7, #8]
 810a8a2:	607a      	str	r2, [r7, #4]
	if(cmd->num_components > 0) {
 810a8a4:	68bb      	ldr	r3, [r7, #8]
 810a8a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810a8aa:	2b00      	cmp	r3, #0
 810a8ac:	f000 81e3 	beq.w	810ac76 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		if(EQUALS(0, "help")) {
 810a8b0:	68bb      	ldr	r3, [r7, #8]
 810a8b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810a8b6:	2b00      	cmp	r3, #0
 810a8b8:	d009      	beq.n	810a8ce <_ZN8Terminal7executeEP12ShellCommandP7Console+0x36>
 810a8ba:	68bb      	ldr	r3, [r7, #8]
 810a8bc:	49a8      	ldr	r1, [pc, #672]	; (810ab60 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2c8>)
 810a8be:	4618      	mov	r0, r3
 810a8c0:	f7ff ffb8 	bl	810a834 <_ZN16CommandComponent7matchesEPKc>
 810a8c4:	4603      	mov	r3, r0
 810a8c6:	2b00      	cmp	r3, #0
 810a8c8:	d001      	beq.n	810a8ce <_ZN8Terminal7executeEP12ShellCommandP7Console+0x36>
 810a8ca:	2301      	movs	r3, #1
 810a8cc:	e000      	b.n	810a8d0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x38>
 810a8ce:	2300      	movs	r3, #0
 810a8d0:	2b00      	cmp	r3, #0
 810a8d2:	d01c      	beq.n	810a90e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x76>
			feedback->printf("> Xplore Avionics available commands:\r\n");
 810a8d4:	49a3      	ldr	r1, [pc, #652]	; (810ab64 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2cc>)
 810a8d6:	6878      	ldr	r0, [r7, #4]
 810a8d8:	f7ff fd73 	bl	810a3c2 <_ZN7Console6printfEPKcz>
			feedback->printf("> clear: clears the screen\r\n");
 810a8dc:	49a2      	ldr	r1, [pc, #648]	; (810ab68 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2d0>)
 810a8de:	6878      	ldr	r0, [r7, #4]
 810a8e0:	f7ff fd6f 	bl	810a3c2 <_ZN7Console6printfEPKcz>
			feedback->printf("> help: shows this help page\r\n");
 810a8e4:	49a1      	ldr	r1, [pc, #644]	; (810ab6c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2d4>)
 810a8e6:	6878      	ldr	r0, [r7, #4]
 810a8e8:	f7ff fd6b 	bl	810a3c2 <_ZN7Console6printfEPKcz>
			feedback->printf("> monitor: enables or disables a specific monitor\r\n");
 810a8ec:	49a0      	ldr	r1, [pc, #640]	; (810ab70 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2d8>)
 810a8ee:	6878      	ldr	r0, [r7, #4]
 810a8f0:	f7ff fd67 	bl	810a3c2 <_ZN7Console6printfEPKcz>
			feedback->printf("> profiler: enables or disables the embedded profiler\r\n");
 810a8f4:	499f      	ldr	r1, [pc, #636]	; (810ab74 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2dc>)
 810a8f6:	6878      	ldr	r0, [r7, #4]
 810a8f8:	f7ff fd63 	bl	810a3c2 <_ZN7Console6printfEPKcz>
			feedback->printf("> reset: performs a software reset of the avionics\r\n");
 810a8fc:	499e      	ldr	r1, [pc, #632]	; (810ab78 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2e0>)
 810a8fe:	6878      	ldr	r0, [r7, #4]
 810a900:	f7ff fd5f 	bl	810a3c2 <_ZN7Console6printfEPKcz>
			feedback->printf("> version: displays the current terminal version\r\n");
 810a904:	499d      	ldr	r1, [pc, #628]	; (810ab7c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2e4>)
 810a906:	6878      	ldr	r0, [r7, #4]
 810a908:	f7ff fd5b 	bl	810a3c2 <_ZN7Console6printfEPKcz>
			}
		} else {
			feedback->printf("> %.*s: command not found\r\n", cmd->components[0].length, cmd->components[0].component);
		}
	}
}
 810a90c:	e1b3      	b.n	810ac76 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "version")) {
 810a90e:	68bb      	ldr	r3, [r7, #8]
 810a910:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810a914:	2b00      	cmp	r3, #0
 810a916:	d009      	beq.n	810a92c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x94>
 810a918:	68bb      	ldr	r3, [r7, #8]
 810a91a:	4999      	ldr	r1, [pc, #612]	; (810ab80 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2e8>)
 810a91c:	4618      	mov	r0, r3
 810a91e:	f7ff ff89 	bl	810a834 <_ZN16CommandComponent7matchesEPKc>
 810a922:	4603      	mov	r3, r0
 810a924:	2b00      	cmp	r3, #0
 810a926:	d001      	beq.n	810a92c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x94>
 810a928:	2301      	movs	r3, #1
 810a92a:	e000      	b.n	810a92e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x96>
 810a92c:	2300      	movs	r3, #0
 810a92e:	2b00      	cmp	r3, #0
 810a930:	d004      	beq.n	810a93c <_ZN8Terminal7executeEP12ShellCommandP7Console+0xa4>
			feedback->printf("> Xplore Avionics Terminal v1.0 by Arion Zimmermann\r\n");
 810a932:	4994      	ldr	r1, [pc, #592]	; (810ab84 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2ec>)
 810a934:	6878      	ldr	r0, [r7, #4]
 810a936:	f7ff fd44 	bl	810a3c2 <_ZN7Console6printfEPKcz>
}
 810a93a:	e19c      	b.n	810ac76 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "reset")) {
 810a93c:	68bb      	ldr	r3, [r7, #8]
 810a93e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810a942:	2b00      	cmp	r3, #0
 810a944:	d009      	beq.n	810a95a <_ZN8Terminal7executeEP12ShellCommandP7Console+0xc2>
 810a946:	68bb      	ldr	r3, [r7, #8]
 810a948:	498f      	ldr	r1, [pc, #572]	; (810ab88 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2f0>)
 810a94a:	4618      	mov	r0, r3
 810a94c:	f7ff ff72 	bl	810a834 <_ZN16CommandComponent7matchesEPKc>
 810a950:	4603      	mov	r3, r0
 810a952:	2b00      	cmp	r3, #0
 810a954:	d001      	beq.n	810a95a <_ZN8Terminal7executeEP12ShellCommandP7Console+0xc2>
 810a956:	2301      	movs	r3, #1
 810a958:	e000      	b.n	810a95c <_ZN8Terminal7executeEP12ShellCommandP7Console+0xc4>
 810a95a:	2300      	movs	r3, #0
 810a95c:	2b00      	cmp	r3, #0
 810a95e:	d002      	beq.n	810a966 <_ZN8Terminal7executeEP12ShellCommandP7Console+0xce>
			HAL_NVIC_SystemReset();
 810a960:	f7f7 fd2d 	bl	81023be <HAL_NVIC_SystemReset>
}
 810a964:	e187      	b.n	810ac76 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "time")) {
 810a966:	68bb      	ldr	r3, [r7, #8]
 810a968:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810a96c:	2b00      	cmp	r3, #0
 810a96e:	d009      	beq.n	810a984 <_ZN8Terminal7executeEP12ShellCommandP7Console+0xec>
 810a970:	68bb      	ldr	r3, [r7, #8]
 810a972:	4986      	ldr	r1, [pc, #536]	; (810ab8c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2f4>)
 810a974:	4618      	mov	r0, r3
 810a976:	f7ff ff5d 	bl	810a834 <_ZN16CommandComponent7matchesEPKc>
 810a97a:	4603      	mov	r3, r0
 810a97c:	2b00      	cmp	r3, #0
 810a97e:	d001      	beq.n	810a984 <_ZN8Terminal7executeEP12ShellCommandP7Console+0xec>
 810a980:	2301      	movs	r3, #1
 810a982:	e000      	b.n	810a986 <_ZN8Terminal7executeEP12ShellCommandP7Console+0xee>
 810a984:	2300      	movs	r3, #0
 810a986:	2b00      	cmp	r3, #0
 810a988:	d008      	beq.n	810a99c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x104>
			feedback->printf("%d\r\n", HAL_GetTick());
 810a98a:	f7f7 fc17 	bl	81021bc <HAL_GetTick>
 810a98e:	4603      	mov	r3, r0
 810a990:	461a      	mov	r2, r3
 810a992:	497f      	ldr	r1, [pc, #508]	; (810ab90 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2f8>)
 810a994:	6878      	ldr	r0, [r7, #4]
 810a996:	f7ff fd14 	bl	810a3c2 <_ZN7Console6printfEPKcz>
}
 810a99a:	e16c      	b.n	810ac76 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "clear")) {
 810a99c:	68bb      	ldr	r3, [r7, #8]
 810a99e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810a9a2:	2b00      	cmp	r3, #0
 810a9a4:	d009      	beq.n	810a9ba <_ZN8Terminal7executeEP12ShellCommandP7Console+0x122>
 810a9a6:	68bb      	ldr	r3, [r7, #8]
 810a9a8:	497a      	ldr	r1, [pc, #488]	; (810ab94 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2fc>)
 810a9aa:	4618      	mov	r0, r3
 810a9ac:	f7ff ff42 	bl	810a834 <_ZN16CommandComponent7matchesEPKc>
 810a9b0:	4603      	mov	r3, r0
 810a9b2:	2b00      	cmp	r3, #0
 810a9b4:	d001      	beq.n	810a9ba <_ZN8Terminal7executeEP12ShellCommandP7Console+0x122>
 810a9b6:	2301      	movs	r3, #1
 810a9b8:	e000      	b.n	810a9bc <_ZN8Terminal7executeEP12ShellCommandP7Console+0x124>
 810a9ba:	2300      	movs	r3, #0
 810a9bc:	2b00      	cmp	r3, #0
 810a9be:	d004      	beq.n	810a9ca <_ZN8Terminal7executeEP12ShellCommandP7Console+0x132>
			feedback->printf("\x1b[2J\x1b[H\e7");
 810a9c0:	4975      	ldr	r1, [pc, #468]	; (810ab98 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x300>)
 810a9c2:	6878      	ldr	r0, [r7, #4]
 810a9c4:	f7ff fcfd 	bl	810a3c2 <_ZN7Console6printfEPKcz>
}
 810a9c8:	e155      	b.n	810ac76 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "profiler")) {
 810a9ca:	68bb      	ldr	r3, [r7, #8]
 810a9cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810a9d0:	2b00      	cmp	r3, #0
 810a9d2:	d009      	beq.n	810a9e8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x150>
 810a9d4:	68bb      	ldr	r3, [r7, #8]
 810a9d6:	4971      	ldr	r1, [pc, #452]	; (810ab9c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x304>)
 810a9d8:	4618      	mov	r0, r3
 810a9da:	f7ff ff2b 	bl	810a834 <_ZN16CommandComponent7matchesEPKc>
 810a9de:	4603      	mov	r3, r0
 810a9e0:	2b00      	cmp	r3, #0
 810a9e2:	d001      	beq.n	810a9e8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x150>
 810a9e4:	2301      	movs	r3, #1
 810a9e6:	e000      	b.n	810a9ea <_ZN8Terminal7executeEP12ShellCommandP7Console+0x152>
 810a9e8:	2300      	movs	r3, #0
 810a9ea:	2b00      	cmp	r3, #0
 810a9ec:	d042      	beq.n	810aa74 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1dc>
			if(EQUALS(1, "enable")) {
 810a9ee:	68bb      	ldr	r3, [r7, #8]
 810a9f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810a9f4:	2b01      	cmp	r3, #1
 810a9f6:	d90a      	bls.n	810aa0e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x176>
 810a9f8:	68bb      	ldr	r3, [r7, #8]
 810a9fa:	3308      	adds	r3, #8
 810a9fc:	4968      	ldr	r1, [pc, #416]	; (810aba0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x308>)
 810a9fe:	4618      	mov	r0, r3
 810aa00:	f7ff ff18 	bl	810a834 <_ZN16CommandComponent7matchesEPKc>
 810aa04:	4603      	mov	r3, r0
 810aa06:	2b00      	cmp	r3, #0
 810aa08:	d001      	beq.n	810aa0e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x176>
 810aa0a:	2301      	movs	r3, #1
 810aa0c:	e000      	b.n	810aa10 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x178>
 810aa0e:	2300      	movs	r3, #0
 810aa10:	2b00      	cmp	r3, #0
 810aa12:	d00b      	beq.n	810aa2c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x194>
				profiler.enable();
 810aa14:	4863      	ldr	r0, [pc, #396]	; (810aba4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x30c>)
 810aa16:	f7ff fd1b 	bl	810a450 <_ZN8Profiler6enableEv>
				feedback->printf("\x1b[2J");
 810aa1a:	4963      	ldr	r1, [pc, #396]	; (810aba8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x310>)
 810aa1c:	6878      	ldr	r0, [r7, #4]
 810aa1e:	f7ff fcd0 	bl	810a3c2 <_ZN7Console6printfEPKcz>
				feedback->printf("> Profiler now enabled\r\n");
 810aa22:	4962      	ldr	r1, [pc, #392]	; (810abac <_ZN8Terminal7executeEP12ShellCommandP7Console+0x314>)
 810aa24:	6878      	ldr	r0, [r7, #4]
 810aa26:	f7ff fccc 	bl	810a3c2 <_ZN7Console6printfEPKcz>
}
 810aa2a:	e124      	b.n	810ac76 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
			} else if(EQUALS(1, "disable")) {
 810aa2c:	68bb      	ldr	r3, [r7, #8]
 810aa2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810aa32:	2b01      	cmp	r3, #1
 810aa34:	d90a      	bls.n	810aa4c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1b4>
 810aa36:	68bb      	ldr	r3, [r7, #8]
 810aa38:	3308      	adds	r3, #8
 810aa3a:	495d      	ldr	r1, [pc, #372]	; (810abb0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x318>)
 810aa3c:	4618      	mov	r0, r3
 810aa3e:	f7ff fef9 	bl	810a834 <_ZN16CommandComponent7matchesEPKc>
 810aa42:	4603      	mov	r3, r0
 810aa44:	2b00      	cmp	r3, #0
 810aa46:	d001      	beq.n	810aa4c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1b4>
 810aa48:	2301      	movs	r3, #1
 810aa4a:	e000      	b.n	810aa4e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1b6>
 810aa4c:	2300      	movs	r3, #0
 810aa4e:	2b00      	cmp	r3, #0
 810aa50:	d00b      	beq.n	810aa6a <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1d2>
				profiler.disable();
 810aa52:	4854      	ldr	r0, [pc, #336]	; (810aba4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x30c>)
 810aa54:	f7ff fd1c 	bl	810a490 <_ZN8Profiler7disableEv>
				feedback->printf("\x1b[2J");
 810aa58:	4953      	ldr	r1, [pc, #332]	; (810aba8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x310>)
 810aa5a:	6878      	ldr	r0, [r7, #4]
 810aa5c:	f7ff fcb1 	bl	810a3c2 <_ZN7Console6printfEPKcz>
				feedback->printf("> Profiler now disabled\r\n");
 810aa60:	4954      	ldr	r1, [pc, #336]	; (810abb4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x31c>)
 810aa62:	6878      	ldr	r0, [r7, #4]
 810aa64:	f7ff fcad 	bl	810a3c2 <_ZN7Console6printfEPKcz>
}
 810aa68:	e105      	b.n	810ac76 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
				feedback->printf("> Usage: profiler { enable | disable }\r\n");
 810aa6a:	4953      	ldr	r1, [pc, #332]	; (810abb8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x320>)
 810aa6c:	6878      	ldr	r0, [r7, #4]
 810aa6e:	f7ff fca8 	bl	810a3c2 <_ZN7Console6printfEPKcz>
}
 810aa72:	e100      	b.n	810ac76 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "verbose")) {
 810aa74:	68bb      	ldr	r3, [r7, #8]
 810aa76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810aa7a:	2b00      	cmp	r3, #0
 810aa7c:	d009      	beq.n	810aa92 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1fa>
 810aa7e:	68bb      	ldr	r3, [r7, #8]
 810aa80:	494e      	ldr	r1, [pc, #312]	; (810abbc <_ZN8Terminal7executeEP12ShellCommandP7Console+0x324>)
 810aa82:	4618      	mov	r0, r3
 810aa84:	f7ff fed6 	bl	810a834 <_ZN16CommandComponent7matchesEPKc>
 810aa88:	4603      	mov	r3, r0
 810aa8a:	2b00      	cmp	r3, #0
 810aa8c:	d001      	beq.n	810aa92 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1fa>
 810aa8e:	2301      	movs	r3, #1
 810aa90:	e000      	b.n	810aa94 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1fc>
 810aa92:	2300      	movs	r3, #0
 810aa94:	2b00      	cmp	r3, #0
 810aa96:	d03a      	beq.n	810ab0e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x276>
			if(EQUALS(1, "on")) {
 810aa98:	68bb      	ldr	r3, [r7, #8]
 810aa9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810aa9e:	2b01      	cmp	r3, #1
 810aaa0:	d90a      	bls.n	810aab8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x220>
 810aaa2:	68bb      	ldr	r3, [r7, #8]
 810aaa4:	3308      	adds	r3, #8
 810aaa6:	4946      	ldr	r1, [pc, #280]	; (810abc0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x328>)
 810aaa8:	4618      	mov	r0, r3
 810aaaa:	f7ff fec3 	bl	810a834 <_ZN16CommandComponent7matchesEPKc>
 810aaae:	4603      	mov	r3, r0
 810aab0:	2b00      	cmp	r3, #0
 810aab2:	d001      	beq.n	810aab8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x220>
 810aab4:	2301      	movs	r3, #1
 810aab6:	e000      	b.n	810aaba <_ZN8Terminal7executeEP12ShellCommandP7Console+0x222>
 810aab8:	2300      	movs	r3, #0
 810aaba:	2b00      	cmp	r3, #0
 810aabc:	d007      	beq.n	810aace <_ZN8Terminal7executeEP12ShellCommandP7Console+0x236>
				verbose = true;
 810aabe:	68fb      	ldr	r3, [r7, #12]
 810aac0:	2201      	movs	r2, #1
 810aac2:	701a      	strb	r2, [r3, #0]
				feedback->printf("> Verbose mode enabled\r\n");
 810aac4:	493f      	ldr	r1, [pc, #252]	; (810abc4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x32c>)
 810aac6:	6878      	ldr	r0, [r7, #4]
 810aac8:	f7ff fc7b 	bl	810a3c2 <_ZN7Console6printfEPKcz>
}
 810aacc:	e0d3      	b.n	810ac76 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
			} else if(EQUALS(1, "off")) {
 810aace:	68bb      	ldr	r3, [r7, #8]
 810aad0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810aad4:	2b01      	cmp	r3, #1
 810aad6:	d90a      	bls.n	810aaee <_ZN8Terminal7executeEP12ShellCommandP7Console+0x256>
 810aad8:	68bb      	ldr	r3, [r7, #8]
 810aada:	3308      	adds	r3, #8
 810aadc:	493a      	ldr	r1, [pc, #232]	; (810abc8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x330>)
 810aade:	4618      	mov	r0, r3
 810aae0:	f7ff fea8 	bl	810a834 <_ZN16CommandComponent7matchesEPKc>
 810aae4:	4603      	mov	r3, r0
 810aae6:	2b00      	cmp	r3, #0
 810aae8:	d001      	beq.n	810aaee <_ZN8Terminal7executeEP12ShellCommandP7Console+0x256>
 810aaea:	2301      	movs	r3, #1
 810aaec:	e000      	b.n	810aaf0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x258>
 810aaee:	2300      	movs	r3, #0
 810aaf0:	2b00      	cmp	r3, #0
 810aaf2:	d007      	beq.n	810ab04 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x26c>
				verbose = false;
 810aaf4:	68fb      	ldr	r3, [r7, #12]
 810aaf6:	2200      	movs	r2, #0
 810aaf8:	701a      	strb	r2, [r3, #0]
				feedback->printf("> Verbose mode disabled\r\n");
 810aafa:	4934      	ldr	r1, [pc, #208]	; (810abcc <_ZN8Terminal7executeEP12ShellCommandP7Console+0x334>)
 810aafc:	6878      	ldr	r0, [r7, #4]
 810aafe:	f7ff fc60 	bl	810a3c2 <_ZN7Console6printfEPKcz>
}
 810ab02:	e0b8      	b.n	810ac76 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
				feedback->printf("> Usage: verbose { on | off }\r\n");
 810ab04:	4932      	ldr	r1, [pc, #200]	; (810abd0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x338>)
 810ab06:	6878      	ldr	r0, [r7, #4]
 810ab08:	f7ff fc5b 	bl	810a3c2 <_ZN7Console6printfEPKcz>
}
 810ab0c:	e0b3      	b.n	810ac76 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "monitor")) {
 810ab0e:	68bb      	ldr	r3, [r7, #8]
 810ab10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810ab14:	2b00      	cmp	r3, #0
 810ab16:	d009      	beq.n	810ab2c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x294>
 810ab18:	68bb      	ldr	r3, [r7, #8]
 810ab1a:	492e      	ldr	r1, [pc, #184]	; (810abd4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x33c>)
 810ab1c:	4618      	mov	r0, r3
 810ab1e:	f7ff fe89 	bl	810a834 <_ZN16CommandComponent7matchesEPKc>
 810ab22:	4603      	mov	r3, r0
 810ab24:	2b00      	cmp	r3, #0
 810ab26:	d001      	beq.n	810ab2c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x294>
 810ab28:	2301      	movs	r3, #1
 810ab2a:	e000      	b.n	810ab2e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x296>
 810ab2c:	2300      	movs	r3, #0
 810ab2e:	2b00      	cmp	r3, #0
 810ab30:	f000 8098 	beq.w	810ac64 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3cc>
			if(EQUALS(1, "enable") && cmd->num_components >= 3) {
 810ab34:	68bb      	ldr	r3, [r7, #8]
 810ab36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810ab3a:	2b01      	cmp	r3, #1
 810ab3c:	d94c      	bls.n	810abd8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x340>
 810ab3e:	68bb      	ldr	r3, [r7, #8]
 810ab40:	3308      	adds	r3, #8
 810ab42:	4917      	ldr	r1, [pc, #92]	; (810aba0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x308>)
 810ab44:	4618      	mov	r0, r3
 810ab46:	f7ff fe75 	bl	810a834 <_ZN16CommandComponent7matchesEPKc>
 810ab4a:	4603      	mov	r3, r0
 810ab4c:	2b00      	cmp	r3, #0
 810ab4e:	d043      	beq.n	810abd8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x340>
 810ab50:	68bb      	ldr	r3, [r7, #8]
 810ab52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810ab56:	2b02      	cmp	r3, #2
 810ab58:	d93e      	bls.n	810abd8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x340>
 810ab5a:	2301      	movs	r3, #1
 810ab5c:	e03d      	b.n	810abda <_ZN8Terminal7executeEP12ShellCommandP7Console+0x342>
 810ab5e:	bf00      	nop
 810ab60:	0811055c 	.word	0x0811055c
 810ab64:	08110564 	.word	0x08110564
 810ab68:	0811058c 	.word	0x0811058c
 810ab6c:	081105ac 	.word	0x081105ac
 810ab70:	081105cc 	.word	0x081105cc
 810ab74:	08110600 	.word	0x08110600
 810ab78:	08110638 	.word	0x08110638
 810ab7c:	08110670 	.word	0x08110670
 810ab80:	081106a4 	.word	0x081106a4
 810ab84:	081106ac 	.word	0x081106ac
 810ab88:	081106e4 	.word	0x081106e4
 810ab8c:	081106ec 	.word	0x081106ec
 810ab90:	081106f4 	.word	0x081106f4
 810ab94:	081106fc 	.word	0x081106fc
 810ab98:	08110704 	.word	0x08110704
 810ab9c:	08110710 	.word	0x08110710
 810aba0:	0811071c 	.word	0x0811071c
 810aba4:	100042d8 	.word	0x100042d8
 810aba8:	08110724 	.word	0x08110724
 810abac:	0811072c 	.word	0x0811072c
 810abb0:	08110748 	.word	0x08110748
 810abb4:	08110750 	.word	0x08110750
 810abb8:	0811076c 	.word	0x0811076c
 810abbc:	08110798 	.word	0x08110798
 810abc0:	081107a0 	.word	0x081107a0
 810abc4:	081107a4 	.word	0x081107a4
 810abc8:	081107c0 	.word	0x081107c0
 810abcc:	081107c4 	.word	0x081107c4
 810abd0:	081107e0 	.word	0x081107e0
 810abd4:	08110800 	.word	0x08110800
 810abd8:	2300      	movs	r3, #0
 810abda:	2b00      	cmp	r3, #0
 810abdc:	d020      	beq.n	810ac20 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x388>
				uint8_t location = 0;
 810abde:	2300      	movs	r3, #0
 810abe0:	75fb      	strb	r3, [r7, #23]
				uint8_t refresh_rate = 1;
 810abe2:	2301      	movs	r3, #1
 810abe4:	75bb      	strb	r3, [r7, #22]
				if(cmd->num_components > 3) {
 810abe6:	68bb      	ldr	r3, [r7, #8]
 810abe8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810abec:	2b03      	cmp	r3, #3
 810abee:	d906      	bls.n	810abfe <_ZN8Terminal7executeEP12ShellCommandP7Console+0x366>
					location = atoi(cmd->components[3].component);
 810abf0:	68bb      	ldr	r3, [r7, #8]
 810abf2:	699b      	ldr	r3, [r3, #24]
 810abf4:	4618      	mov	r0, r3
 810abf6:	f003 fa91 	bl	810e11c <atoi>
 810abfa:	4603      	mov	r3, r0
 810abfc:	75fb      	strb	r3, [r7, #23]
				if(cmd->num_components > 4) {
 810abfe:	68bb      	ldr	r3, [r7, #8]
 810ac00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810ac04:	2b04      	cmp	r3, #4
 810ac06:	d906      	bls.n	810ac16 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x37e>
					refresh_rate = atoi(cmd->components[4].component);
 810ac08:	68bb      	ldr	r3, [r7, #8]
 810ac0a:	6a1b      	ldr	r3, [r3, #32]
 810ac0c:	4618      	mov	r0, r3
 810ac0e:	f003 fa85 	bl	810e11c <atoi>
 810ac12:	4603      	mov	r3, r0
 810ac14:	75bb      	strb	r3, [r7, #22]
				feedback->printf("\x1b[2J");
 810ac16:	491a      	ldr	r1, [pc, #104]	; (810ac80 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3e8>)
 810ac18:	6878      	ldr	r0, [r7, #4]
 810ac1a:	f7ff fbd2 	bl	810a3c2 <_ZN7Console6printfEPKcz>
}
 810ac1e:	e02a      	b.n	810ac76 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
			} else if(EQUALS(1, "disable") && cmd->num_components == 3) {
 810ac20:	68bb      	ldr	r3, [r7, #8]
 810ac22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810ac26:	2b01      	cmp	r3, #1
 810ac28:	d90f      	bls.n	810ac4a <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3b2>
 810ac2a:	68bb      	ldr	r3, [r7, #8]
 810ac2c:	3308      	adds	r3, #8
 810ac2e:	4915      	ldr	r1, [pc, #84]	; (810ac84 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3ec>)
 810ac30:	4618      	mov	r0, r3
 810ac32:	f7ff fdff 	bl	810a834 <_ZN16CommandComponent7matchesEPKc>
 810ac36:	4603      	mov	r3, r0
 810ac38:	2b00      	cmp	r3, #0
 810ac3a:	d006      	beq.n	810ac4a <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3b2>
 810ac3c:	68bb      	ldr	r3, [r7, #8]
 810ac3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810ac42:	2b03      	cmp	r3, #3
 810ac44:	d101      	bne.n	810ac4a <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3b2>
 810ac46:	2301      	movs	r3, #1
 810ac48:	e000      	b.n	810ac4c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3b4>
 810ac4a:	2300      	movs	r3, #0
 810ac4c:	2b00      	cmp	r3, #0
 810ac4e:	d004      	beq.n	810ac5a <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3c2>
				feedback->printf("\x1b[2J");
 810ac50:	490b      	ldr	r1, [pc, #44]	; (810ac80 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3e8>)
 810ac52:	6878      	ldr	r0, [r7, #4]
 810ac54:	f7ff fbb5 	bl	810a3c2 <_ZN7Console6printfEPKcz>
}
 810ac58:	e00d      	b.n	810ac76 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
				feedback->printf("> Usage: monitor { enable | disable } { sensor | state | kalman | flash | can | telemetry | airbrakes } [location] [refresh rate; default: 10]\r\n");
 810ac5a:	490b      	ldr	r1, [pc, #44]	; (810ac88 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3f0>)
 810ac5c:	6878      	ldr	r0, [r7, #4]
 810ac5e:	f7ff fbb0 	bl	810a3c2 <_ZN7Console6printfEPKcz>
}
 810ac62:	e008      	b.n	810ac76 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
			feedback->printf("> %.*s: command not found\r\n", cmd->components[0].length, cmd->components[0].component);
 810ac64:	68bb      	ldr	r3, [r7, #8]
 810ac66:	791b      	ldrb	r3, [r3, #4]
 810ac68:	461a      	mov	r2, r3
 810ac6a:	68bb      	ldr	r3, [r7, #8]
 810ac6c:	681b      	ldr	r3, [r3, #0]
 810ac6e:	4907      	ldr	r1, [pc, #28]	; (810ac8c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3f4>)
 810ac70:	6878      	ldr	r0, [r7, #4]
 810ac72:	f7ff fba6 	bl	810a3c2 <_ZN7Console6printfEPKcz>
}
 810ac76:	bf00      	nop
 810ac78:	3718      	adds	r7, #24
 810ac7a:	46bd      	mov	sp, r7
 810ac7c:	bd80      	pop	{r7, pc}
 810ac7e:	bf00      	nop
 810ac80:	08110724 	.word	0x08110724
 810ac84:	08110748 	.word	0x08110748
 810ac88:	08110808 	.word	0x08110808
 810ac8c:	0811089c 	.word	0x0811089c

0810ac90 <_Znwj>:

#include "Operators.h"

#include "cmsis_os.h"

void * operator new(size_t size) {
 810ac90:	b580      	push	{r7, lr}
 810ac92:	b082      	sub	sp, #8
 810ac94:	af00      	add	r7, sp, #0
 810ac96:	6078      	str	r0, [r7, #4]
    return pvPortMalloc(size);
 810ac98:	6878      	ldr	r0, [r7, #4]
 810ac9a:	f7fd fa55 	bl	8108148 <pvPortMalloc>
 810ac9e:	4603      	mov	r3, r0
}
 810aca0:	4618      	mov	r0, r3
 810aca2:	3708      	adds	r7, #8
 810aca4:	46bd      	mov	sp, r7
 810aca6:	bd80      	pop	{r7, pc}

0810aca8 <_ZdlPv>:

void * operator new[](size_t size) {
    return pvPortMalloc(size);
}

void operator delete(void* ptr) {
 810aca8:	b580      	push	{r7, lr}
 810acaa:	b082      	sub	sp, #8
 810acac:	af00      	add	r7, sp, #0
 810acae:	6078      	str	r0, [r7, #4]
    vPortFree(ptr);
 810acb0:	6878      	ldr	r0, [r7, #4]
 810acb2:	f7fd fb0b 	bl	81082cc <vPortFree>
}
 810acb6:	bf00      	nop
 810acb8:	3708      	adds	r7, #8
 810acba:	46bd      	mov	sp, r7
 810acbc:	bd80      	pop	{r7, pc}
	...

0810acc0 <HX711_delay_ns>:
GPIO_TypeDef *_hx711_di_gpio;
uint32_t _hx711_di_pin;

//#############################################################################################
__STATIC_INLINE void HX711_delay_ns(uint64_t nanoseconds)
{
 810acc0:	b5b0      	push	{r4, r5, r7, lr}
 810acc2:	b084      	sub	sp, #16
 810acc4:	af00      	add	r7, sp, #0
 810acc6:	e9c7 0100 	strd	r0, r1, [r7]
  uint64_t clk_cycle_start = DWT->CYCCNT;
 810acca:	4b1f      	ldr	r3, [pc, #124]	; (810ad48 <HX711_delay_ns+0x88>)
 810accc:	685b      	ldr	r3, [r3, #4]
 810acce:	f04f 0400 	mov.w	r4, #0
 810acd2:	e9c7 3402 	strd	r3, r4, [r7, #8]
  nanoseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 810acd6:	f7fa fc7d 	bl	81055d4 <HAL_RCC_GetHCLKFreq>
 810acda:	4602      	mov	r2, r0
 810acdc:	4b1b      	ldr	r3, [pc, #108]	; (810ad4c <HX711_delay_ns+0x8c>)
 810acde:	fba3 2302 	umull	r2, r3, r3, r2
 810ace2:	0c9b      	lsrs	r3, r3, #18
 810ace4:	f04f 0400 	mov.w	r4, #0
 810ace8:	687a      	ldr	r2, [r7, #4]
 810acea:	fb03 f102 	mul.w	r1, r3, r2
 810acee:	683a      	ldr	r2, [r7, #0]
 810acf0:	fb04 f202 	mul.w	r2, r4, r2
 810acf4:	440a      	add	r2, r1
 810acf6:	6839      	ldr	r1, [r7, #0]
 810acf8:	fba1 3403 	umull	r3, r4, r1, r3
 810acfc:	4422      	add	r2, r4
 810acfe:	4614      	mov	r4, r2
 810ad00:	e9c7 3400 	strd	r3, r4, [r7]
 810ad04:	e9c7 3400 	strd	r3, r4, [r7]
  while ((DWT->CYCCNT - clk_cycle_start) < nanoseconds/1000);
 810ad08:	bf00      	nop
 810ad0a:	4b0f      	ldr	r3, [pc, #60]	; (810ad48 <HX711_delay_ns+0x88>)
 810ad0c:	685b      	ldr	r3, [r3, #4]
 810ad0e:	4619      	mov	r1, r3
 810ad10:	f04f 0200 	mov.w	r2, #0
 810ad14:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 810ad18:	1ac9      	subs	r1, r1, r3
 810ad1a:	eb62 0204 	sbc.w	r2, r2, r4
 810ad1e:	460c      	mov	r4, r1
 810ad20:	4615      	mov	r5, r2
 810ad22:	e9d7 0100 	ldrd	r0, r1, [r7]
 810ad26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 810ad2a:	f04f 0300 	mov.w	r3, #0
 810ad2e:	f7f6 f873 	bl	8100e18 <__aeabi_uldivmod>
 810ad32:	4602      	mov	r2, r0
 810ad34:	460b      	mov	r3, r1
 810ad36:	429d      	cmp	r5, r3
 810ad38:	bf08      	it	eq
 810ad3a:	4294      	cmpeq	r4, r2
 810ad3c:	d3e5      	bcc.n	810ad0a <HX711_delay_ns+0x4a>
}
 810ad3e:	bf00      	nop
 810ad40:	3710      	adds	r7, #16
 810ad42:	46bd      	mov	sp, r7
 810ad44:	bdb0      	pop	{r4, r5, r7, pc}
 810ad46:	bf00      	nop
 810ad48:	e0001000 	.word	0xe0001000
 810ad4c:	431bde83 	.word	0x431bde83

0810ad50 <HX711_set_pins>:
void  HX711_set_pins(GPIO_TypeDef *sck_gpio, uint32_t sck_pin, GPIO_TypeDef *di_gpio, uint32_t di_pin){
 810ad50:	b480      	push	{r7}
 810ad52:	b085      	sub	sp, #20
 810ad54:	af00      	add	r7, sp, #0
 810ad56:	60f8      	str	r0, [r7, #12]
 810ad58:	60b9      	str	r1, [r7, #8]
 810ad5a:	607a      	str	r2, [r7, #4]
 810ad5c:	603b      	str	r3, [r7, #0]
	_hx711_sck_gpio = sck_gpio;
 810ad5e:	4a09      	ldr	r2, [pc, #36]	; (810ad84 <HX711_set_pins+0x34>)
 810ad60:	68fb      	ldr	r3, [r7, #12]
 810ad62:	6013      	str	r3, [r2, #0]
	_hx711_sck_pin = sck_pin;
 810ad64:	4a08      	ldr	r2, [pc, #32]	; (810ad88 <HX711_set_pins+0x38>)
 810ad66:	68bb      	ldr	r3, [r7, #8]
 810ad68:	6013      	str	r3, [r2, #0]
	_hx711_di_gpio = di_gpio;
 810ad6a:	4a08      	ldr	r2, [pc, #32]	; (810ad8c <HX711_set_pins+0x3c>)
 810ad6c:	687b      	ldr	r3, [r7, #4]
 810ad6e:	6013      	str	r3, [r2, #0]
	_hx711_di_pin = di_pin;
 810ad70:	4a07      	ldr	r2, [pc, #28]	; (810ad90 <HX711_set_pins+0x40>)
 810ad72:	683b      	ldr	r3, [r7, #0]
 810ad74:	6013      	str	r3, [r2, #0]
}
 810ad76:	bf00      	nop
 810ad78:	3714      	adds	r7, #20
 810ad7a:	46bd      	mov	sp, r7
 810ad7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ad80:	4770      	bx	lr
 810ad82:	bf00      	nop
 810ad84:	10009fc8 	.word	0x10009fc8
 810ad88:	10009fc4 	.word	0x10009fc4
 810ad8c:	10009fd0 	.word	0x10009fd0
 810ad90:	10009fcc 	.word	0x10009fcc

0810ad94 <HX711_begin>:
//#############################################################################################
void  HX711_begin(void)
{
 810ad94:	b580      	push	{r7, lr}
 810ad96:	af00      	add	r7, sp, #0
  HX711_init();
 810ad98:	f000 f834 	bl	810ae04 <HX711_init>
  //initialise tick register
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 810ad9c:	4b15      	ldr	r3, [pc, #84]	; (810adf4 <HX711_begin+0x60>)
 810ad9e:	68db      	ldr	r3, [r3, #12]
 810ada0:	4a14      	ldr	r2, [pc, #80]	; (810adf4 <HX711_begin+0x60>)
 810ada2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 810ada6:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 810ada8:	4b13      	ldr	r3, [pc, #76]	; (810adf8 <HX711_begin+0x64>)
 810adaa:	2200      	movs	r2, #0
 810adac:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 810adae:	4b12      	ldr	r3, [pc, #72]	; (810adf8 <HX711_begin+0x64>)
 810adb0:	681b      	ldr	r3, [r3, #0]
 810adb2:	4a11      	ldr	r2, [pc, #68]	; (810adf8 <HX711_begin+0x64>)
 810adb4:	f043 0301 	orr.w	r3, r3, #1
 810adb8:	6013      	str	r3, [r2, #0]

  //start first reading
  HAL_GPIO_WritePin(_hx711_sck_gpio, _hx711_sck_pin, GPIO_PIN_SET);
 810adba:	4b10      	ldr	r3, [pc, #64]	; (810adfc <HX711_begin+0x68>)
 810adbc:	6818      	ldr	r0, [r3, #0]
 810adbe:	4b10      	ldr	r3, [pc, #64]	; (810ae00 <HX711_begin+0x6c>)
 810adc0:	681b      	ldr	r3, [r3, #0]
 810adc2:	b29b      	uxth	r3, r3
 810adc4:	2201      	movs	r2, #1
 810adc6:	4619      	mov	r1, r3
 810adc8:	f7f9 fff4 	bl	8104db4 <HAL_GPIO_WritePin>
  HX711_delay(10);
 810adcc:	200a      	movs	r0, #10
 810adce:	f7fd f973 	bl	81080b8 <osDelay>
  HAL_GPIO_WritePin(_hx711_sck_gpio, _hx711_sck_pin, GPIO_PIN_RESET);
 810add2:	4b0a      	ldr	r3, [pc, #40]	; (810adfc <HX711_begin+0x68>)
 810add4:	6818      	ldr	r0, [r3, #0]
 810add6:	4b0a      	ldr	r3, [pc, #40]	; (810ae00 <HX711_begin+0x6c>)
 810add8:	681b      	ldr	r3, [r3, #0]
 810adda:	b29b      	uxth	r3, r3
 810addc:	2200      	movs	r2, #0
 810adde:	4619      	mov	r1, r3
 810ade0:	f7f9 ffe8 	bl	8104db4 <HAL_GPIO_WritePin>
  HX711_delay(10);
 810ade4:	200a      	movs	r0, #10
 810ade6:	f7fd f967 	bl	81080b8 <osDelay>
  HX711_valueAve(8);
 810adea:	2008      	movs	r0, #8
 810adec:	f000 f8c2 	bl	810af74 <HX711_valueAve>
}
 810adf0:	bf00      	nop
 810adf2:	bd80      	pop	{r7, pc}
 810adf4:	e000edf0 	.word	0xe000edf0
 810adf8:	e0001000 	.word	0xe0001000
 810adfc:	10009fc8 	.word	0x10009fc8
 810ae00:	10009fc4 	.word	0x10009fc4

0810ae04 <HX711_init>:
//#############################################################################################
//setup HX711 pins
void  HX711_init(void)
{
 810ae04:	b580      	push	{r7, lr}
 810ae06:	b086      	sub	sp, #24
 810ae08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio;
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 810ae0a:	2301      	movs	r3, #1
 810ae0c:	60bb      	str	r3, [r7, #8]
  gpio.Pull = GPIO_NOPULL;
 810ae0e:	2300      	movs	r3, #0
 810ae10:	60fb      	str	r3, [r7, #12]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 810ae12:	2302      	movs	r3, #2
 810ae14:	613b      	str	r3, [r7, #16]
  gpio.Pin = _hx711_sck_pin;
 810ae16:	4b0f      	ldr	r3, [pc, #60]	; (810ae54 <HX711_init+0x50>)
 810ae18:	681b      	ldr	r3, [r3, #0]
 810ae1a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(_hx711_sck_gpio, &gpio);
 810ae1c:	4b0e      	ldr	r3, [pc, #56]	; (810ae58 <HX711_init+0x54>)
 810ae1e:	681b      	ldr	r3, [r3, #0]
 810ae20:	1d3a      	adds	r2, r7, #4
 810ae22:	4611      	mov	r1, r2
 810ae24:	4618      	mov	r0, r3
 810ae26:	f7f9 fdfd 	bl	8104a24 <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 810ae2a:	2300      	movs	r3, #0
 810ae2c:	60bb      	str	r3, [r7, #8]
  gpio.Pull = GPIO_NOPULL;
 810ae2e:	2300      	movs	r3, #0
 810ae30:	60fb      	str	r3, [r7, #12]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 810ae32:	2302      	movs	r3, #2
 810ae34:	613b      	str	r3, [r7, #16]
  gpio.Pin = _hx711_di_pin;
 810ae36:	4b09      	ldr	r3, [pc, #36]	; (810ae5c <HX711_init+0x58>)
 810ae38:	681b      	ldr	r3, [r3, #0]
 810ae3a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(_hx711_di_gpio, &gpio);
 810ae3c:	4b08      	ldr	r3, [pc, #32]	; (810ae60 <HX711_init+0x5c>)
 810ae3e:	681b      	ldr	r3, [r3, #0]
 810ae40:	1d3a      	adds	r2, r7, #4
 810ae42:	4611      	mov	r1, r2
 810ae44:	4618      	mov	r0, r3
 810ae46:	f7f9 fded 	bl	8104a24 <HAL_GPIO_Init>

}
 810ae4a:	bf00      	nop
 810ae4c:	3718      	adds	r7, #24
 810ae4e:	46bd      	mov	sp, r7
 810ae50:	bd80      	pop	{r7, pc}
 810ae52:	bf00      	nop
 810ae54:	10009fc4 	.word	0x10009fc4
 810ae58:	10009fc8 	.word	0x10009fc8
 810ae5c:	10009fcc 	.word	0x10009fcc
 810ae60:	10009fd0 	.word	0x10009fd0

0810ae64 <HX711_value>:
//#############################################################################################
int32_t HX711_value(void)
{
 810ae64:	b590      	push	{r4, r7, lr}
 810ae66:	b085      	sub	sp, #20
 810ae68:	af00      	add	r7, sp, #0
  uint32_t data = 0;
 810ae6a:	2300      	movs	r3, #0
 810ae6c:	60fb      	str	r3, [r7, #12]
  uint32_t  startTime = HAL_GetTick();
 810ae6e:	f7f7 f9a5 	bl	81021bc <HAL_GetTick>
 810ae72:	6078      	str	r0, [r7, #4]
  while(!HX711_isReady())
 810ae74:	e008      	b.n	810ae88 <HX711_value+0x24>
  {
    if(HAL_GetTick() - startTime > 150)
 810ae76:	f7f7 f9a1 	bl	81021bc <HAL_GetTick>
 810ae7a:	4602      	mov	r2, r0
 810ae7c:	687b      	ldr	r3, [r7, #4]
 810ae7e:	1ad3      	subs	r3, r2, r3
 810ae80:	2b96      	cmp	r3, #150	; 0x96
 810ae82:	d901      	bls.n	810ae88 <HX711_value+0x24>
      return 0;
 810ae84:	2300      	movs	r3, #0
 810ae86:	e068      	b.n	810af5a <HX711_value+0xf6>
  while(!HX711_isReady())
 810ae88:	f000 f8a8 	bl	810afdc <HX711_isReady>
 810ae8c:	4603      	mov	r3, r0
 810ae8e:	2b00      	cmp	r3, #0
 810ae90:	d0f1      	beq.n	810ae76 <HX711_value+0x12>
  }
  for(int8_t i=0; i<24 ; i++)
 810ae92:	2300      	movs	r3, #0
 810ae94:	72fb      	strb	r3, [r7, #11]
 810ae96:	e037      	b.n	810af08 <HX711_value+0xa4>
  {
    HAL_GPIO_WritePin(_hx711_sck_gpio, _hx711_sck_pin, GPIO_PIN_SET);
 810ae98:	4b32      	ldr	r3, [pc, #200]	; (810af64 <HX711_value+0x100>)
 810ae9a:	6818      	ldr	r0, [r3, #0]
 810ae9c:	4b32      	ldr	r3, [pc, #200]	; (810af68 <HX711_value+0x104>)
 810ae9e:	681b      	ldr	r3, [r3, #0]
 810aea0:	b29b      	uxth	r3, r3
 810aea2:	2201      	movs	r2, #1
 810aea4:	4619      	mov	r1, r3
 810aea6:	f7f9 ff85 	bl	8104db4 <HAL_GPIO_WritePin>
    HX711_delay_ns(clockPulse);
 810aeaa:	2332      	movs	r3, #50	; 0x32
 810aeac:	f04f 0400 	mov.w	r4, #0
 810aeb0:	4618      	mov	r0, r3
 810aeb2:	4621      	mov	r1, r4
 810aeb4:	f7ff ff04 	bl	810acc0 <HX711_delay_ns>
    data = data << 1;    
 810aeb8:	68fb      	ldr	r3, [r7, #12]
 810aeba:	005b      	lsls	r3, r3, #1
 810aebc:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(_hx711_sck_gpio, _hx711_sck_pin, GPIO_PIN_RESET);
 810aebe:	4b29      	ldr	r3, [pc, #164]	; (810af64 <HX711_value+0x100>)
 810aec0:	6818      	ldr	r0, [r3, #0]
 810aec2:	4b29      	ldr	r3, [pc, #164]	; (810af68 <HX711_value+0x104>)
 810aec4:	681b      	ldr	r3, [r3, #0]
 810aec6:	b29b      	uxth	r3, r3
 810aec8:	2200      	movs	r2, #0
 810aeca:	4619      	mov	r1, r3
 810aecc:	f7f9 ff72 	bl	8104db4 <HAL_GPIO_WritePin>
    HX711_delay_ns(clockPulse);
 810aed0:	2332      	movs	r3, #50	; 0x32
 810aed2:	f04f 0400 	mov.w	r4, #0
 810aed6:	4618      	mov	r0, r3
 810aed8:	4621      	mov	r1, r4
 810aeda:	f7ff fef1 	bl	810acc0 <HX711_delay_ns>
    if(HAL_GPIO_ReadPin(_hx711_di_gpio, _hx711_di_pin) == GPIO_PIN_SET)
 810aede:	4b23      	ldr	r3, [pc, #140]	; (810af6c <HX711_value+0x108>)
 810aee0:	681a      	ldr	r2, [r3, #0]
 810aee2:	4b23      	ldr	r3, [pc, #140]	; (810af70 <HX711_value+0x10c>)
 810aee4:	681b      	ldr	r3, [r3, #0]
 810aee6:	b29b      	uxth	r3, r3
 810aee8:	4619      	mov	r1, r3
 810aeea:	4610      	mov	r0, r2
 810aeec:	f7f9 ff4a 	bl	8104d84 <HAL_GPIO_ReadPin>
 810aef0:	4603      	mov	r3, r0
 810aef2:	2b01      	cmp	r3, #1
 810aef4:	d102      	bne.n	810aefc <HX711_value+0x98>
      data ++;
 810aef6:	68fb      	ldr	r3, [r7, #12]
 810aef8:	3301      	adds	r3, #1
 810aefa:	60fb      	str	r3, [r7, #12]
  for(int8_t i=0; i<24 ; i++)
 810aefc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 810af00:	b2db      	uxtb	r3, r3
 810af02:	3301      	adds	r3, #1
 810af04:	b2db      	uxtb	r3, r3
 810af06:	72fb      	strb	r3, [r7, #11]
 810af08:	f997 300b 	ldrsb.w	r3, [r7, #11]
 810af0c:	2b17      	cmp	r3, #23
 810af0e:	ddc3      	ble.n	810ae98 <HX711_value+0x34>
  }
  data = data ^ 0x800000; 
 810af10:	68fb      	ldr	r3, [r7, #12]
 810af12:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 810af16:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(_hx711_sck_gpio, _hx711_sck_pin, GPIO_PIN_SET);
 810af18:	4b12      	ldr	r3, [pc, #72]	; (810af64 <HX711_value+0x100>)
 810af1a:	6818      	ldr	r0, [r3, #0]
 810af1c:	4b12      	ldr	r3, [pc, #72]	; (810af68 <HX711_value+0x104>)
 810af1e:	681b      	ldr	r3, [r3, #0]
 810af20:	b29b      	uxth	r3, r3
 810af22:	2201      	movs	r2, #1
 810af24:	4619      	mov	r1, r3
 810af26:	f7f9 ff45 	bl	8104db4 <HAL_GPIO_WritePin>
  HX711_delay_ns(clockPulse);
 810af2a:	2332      	movs	r3, #50	; 0x32
 810af2c:	f04f 0400 	mov.w	r4, #0
 810af30:	4618      	mov	r0, r3
 810af32:	4621      	mov	r1, r4
 810af34:	f7ff fec4 	bl	810acc0 <HX711_delay_ns>
  HAL_GPIO_WritePin(_hx711_sck_gpio, _hx711_sck_pin, GPIO_PIN_RESET);
 810af38:	4b0a      	ldr	r3, [pc, #40]	; (810af64 <HX711_value+0x100>)
 810af3a:	6818      	ldr	r0, [r3, #0]
 810af3c:	4b0a      	ldr	r3, [pc, #40]	; (810af68 <HX711_value+0x104>)
 810af3e:	681b      	ldr	r3, [r3, #0]
 810af40:	b29b      	uxth	r3, r3
 810af42:	2200      	movs	r2, #0
 810af44:	4619      	mov	r1, r3
 810af46:	f7f9 ff35 	bl	8104db4 <HAL_GPIO_WritePin>
  HX711_delay_ns(clockPulse);
 810af4a:	2332      	movs	r3, #50	; 0x32
 810af4c:	f04f 0400 	mov.w	r4, #0
 810af50:	4618      	mov	r0, r3
 810af52:	4621      	mov	r1, r4
 810af54:	f7ff feb4 	bl	810acc0 <HX711_delay_ns>
  return data;    
 810af58:	68fb      	ldr	r3, [r7, #12]
}
 810af5a:	4618      	mov	r0, r3
 810af5c:	3714      	adds	r7, #20
 810af5e:	46bd      	mov	sp, r7
 810af60:	bd90      	pop	{r4, r7, pc}
 810af62:	bf00      	nop
 810af64:	10009fc8 	.word	0x10009fc8
 810af68:	10009fc4 	.word	0x10009fc4
 810af6c:	10009fd0 	.word	0x10009fd0
 810af70:	10009fcc 	.word	0x10009fcc

0810af74 <HX711_valueAve>:
//#############################################################################################
int32_t HX711_valueAve(uint16_t sample)
{
 810af74:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 810af78:	b086      	sub	sp, #24
 810af7a:	af00      	add	r7, sp, #0
 810af7c:	4603      	mov	r3, r0
 810af7e:	80fb      	strh	r3, [r7, #6]
  int64_t  ave = 0;
 810af80:	f04f 0300 	mov.w	r3, #0
 810af84:	f04f 0400 	mov.w	r4, #0
 810af88:	e9c7 3404 	strd	r3, r4, [r7, #16]
  for(uint16_t i=0 ; i<sample ; i++)
 810af8c:	2300      	movs	r3, #0
 810af8e:	81fb      	strh	r3, [r7, #14]
 810af90:	e010      	b.n	810afb4 <HX711_valueAve+0x40>
    ave += HX711_value();
 810af92:	f7ff ff67 	bl	810ae64 <HX711_value>
 810af96:	4603      	mov	r3, r0
 810af98:	469b      	mov	fp, r3
 810af9a:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 810af9e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 810afa2:	eb1b 0301 	adds.w	r3, fp, r1
 810afa6:	eb4c 0402 	adc.w	r4, ip, r2
 810afaa:	e9c7 3404 	strd	r3, r4, [r7, #16]
  for(uint16_t i=0 ; i<sample ; i++)
 810afae:	89fb      	ldrh	r3, [r7, #14]
 810afb0:	3301      	adds	r3, #1
 810afb2:	81fb      	strh	r3, [r7, #14]
 810afb4:	89fa      	ldrh	r2, [r7, #14]
 810afb6:	88fb      	ldrh	r3, [r7, #6]
 810afb8:	429a      	cmp	r2, r3
 810afba:	d3ea      	bcc.n	810af92 <HX711_valueAve+0x1e>
  return (int32_t)(ave / sample);
 810afbc:	88fb      	ldrh	r3, [r7, #6]
 810afbe:	f04f 0400 	mov.w	r4, #0
 810afc2:	461a      	mov	r2, r3
 810afc4:	4623      	mov	r3, r4
 810afc6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 810afca:	f7f5 fed5 	bl	8100d78 <__aeabi_ldivmod>
 810afce:	4603      	mov	r3, r0
 810afd0:	460c      	mov	r4, r1
}
 810afd2:	4618      	mov	r0, r3
 810afd4:	3718      	adds	r7, #24
 810afd6:	46bd      	mov	sp, r7
 810afd8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0810afdc <HX711_isReady>:
//#############################################################################################
int HX711_isReady(){
 810afdc:	b580      	push	{r7, lr}
 810afde:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(_hx711_di_gpio, _hx711_di_pin) == GPIO_PIN_RESET;
 810afe0:	4b08      	ldr	r3, [pc, #32]	; (810b004 <HX711_isReady+0x28>)
 810afe2:	681a      	ldr	r2, [r3, #0]
 810afe4:	4b08      	ldr	r3, [pc, #32]	; (810b008 <HX711_isReady+0x2c>)
 810afe6:	681b      	ldr	r3, [r3, #0]
 810afe8:	b29b      	uxth	r3, r3
 810afea:	4619      	mov	r1, r3
 810afec:	4610      	mov	r0, r2
 810afee:	f7f9 fec9 	bl	8104d84 <HAL_GPIO_ReadPin>
 810aff2:	4603      	mov	r3, r0
 810aff4:	2b00      	cmp	r3, #0
 810aff6:	bf0c      	ite	eq
 810aff8:	2301      	moveq	r3, #1
 810affa:	2300      	movne	r3, #0
 810affc:	b2db      	uxtb	r3, r3
}
 810affe:	4618      	mov	r0, r3
 810b000:	bd80      	pop	{r7, pc}
 810b002:	bf00      	nop
 810b004:	10009fd0 	.word	0x10009fd0
 810b008:	10009fcc 	.word	0x10009fcc

0810b00c <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 810b00c:	b480      	push	{r7}
 810b00e:	b083      	sub	sp, #12
 810b010:	af00      	add	r7, sp, #0
 810b012:	6078      	str	r0, [r7, #4]
 810b014:	687b      	ldr	r3, [r7, #4]
 810b016:	2200      	movs	r2, #0
 810b018:	609a      	str	r2, [r3, #8]
 810b01a:	687b      	ldr	r3, [r7, #4]
 810b01c:	4618      	mov	r0, r3
 810b01e:	370c      	adds	r7, #12
 810b020:	46bd      	mov	sp, r7
 810b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b026:	4770      	bx	lr

0810b028 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 810b028:	b580      	push	{r7, lr}
 810b02a:	b082      	sub	sp, #8
 810b02c:	af00      	add	r7, sp, #0
 810b02e:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 810b030:	687b      	ldr	r3, [r7, #4]
 810b032:	689b      	ldr	r3, [r3, #8]
 810b034:	2b00      	cmp	r3, #0
 810b036:	d005      	beq.n	810b044 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 810b038:	687b      	ldr	r3, [r7, #4]
 810b03a:	689b      	ldr	r3, [r3, #8]
 810b03c:	6878      	ldr	r0, [r7, #4]
 810b03e:	6879      	ldr	r1, [r7, #4]
 810b040:	2203      	movs	r2, #3
 810b042:	4798      	blx	r3
    }
 810b044:	687b      	ldr	r3, [r7, #4]
 810b046:	4618      	mov	r0, r3
 810b048:	3708      	adds	r7, #8
 810b04a:	46bd      	mov	sp, r7
 810b04c:	bd80      	pop	{r7, pc}

0810b04e <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 810b04e:	b480      	push	{r7}
 810b050:	b083      	sub	sp, #12
 810b052:	af00      	add	r7, sp, #0
 810b054:	6078      	str	r0, [r7, #4]
 810b056:	687b      	ldr	r3, [r7, #4]
 810b058:	689b      	ldr	r3, [r3, #8]
 810b05a:	2b00      	cmp	r3, #0
 810b05c:	bf0c      	ite	eq
 810b05e:	2301      	moveq	r3, #1
 810b060:	2300      	movne	r3, #0
 810b062:	b2db      	uxtb	r3, r3
 810b064:	4618      	mov	r0, r3
 810b066:	370c      	adds	r7, #12
 810b068:	46bd      	mov	sp, r7
 810b06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b06e:	4770      	bx	lr

0810b070 <_ZN8IODriverD1Ev>:
#include <functional>


class IODriver {
public:
	virtual ~IODriver() {}
 810b070:	b480      	push	{r7}
 810b072:	b083      	sub	sp, #12
 810b074:	af00      	add	r7, sp, #0
 810b076:	6078      	str	r0, [r7, #4]
 810b078:	4a04      	ldr	r2, [pc, #16]	; (810b08c <_ZN8IODriverD1Ev+0x1c>)
 810b07a:	687b      	ldr	r3, [r7, #4]
 810b07c:	601a      	str	r2, [r3, #0]
 810b07e:	687b      	ldr	r3, [r7, #4]
 810b080:	4618      	mov	r0, r3
 810b082:	370c      	adds	r7, #12
 810b084:	46bd      	mov	sp, r7
 810b086:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b08a:	4770      	bx	lr
 810b08c:	08110a24 	.word	0x08110a24

0810b090 <_ZN8IODriverD0Ev>:
 810b090:	b580      	push	{r7, lr}
 810b092:	b082      	sub	sp, #8
 810b094:	af00      	add	r7, sp, #0
 810b096:	6078      	str	r0, [r7, #4]
 810b098:	6878      	ldr	r0, [r7, #4]
 810b09a:	f7ff ffe9 	bl	810b070 <_ZN8IODriverD1Ev>
 810b09e:	2104      	movs	r1, #4
 810b0a0:	6878      	ldr	r0, [r7, #4]
 810b0a2:	f002 fee4 	bl	810de6e <_ZdlPvj>
 810b0a6:	687b      	ldr	r3, [r7, #4]
 810b0a8:	4618      	mov	r0, r3
 810b0aa:	3708      	adds	r7, #8
 810b0ac:	46bd      	mov	sp, r7
 810b0ae:	bd80      	pop	{r7, pc}

0810b0b0 <_ZNSt8functionIFvhPhmEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 810b0b0:	b580      	push	{r7, lr}
 810b0b2:	b082      	sub	sp, #8
 810b0b4:	af00      	add	r7, sp, #0
 810b0b6:	6078      	str	r0, [r7, #4]
 810b0b8:	687b      	ldr	r3, [r7, #4]
 810b0ba:	4618      	mov	r0, r3
 810b0bc:	f7ff ffb4 	bl	810b028 <_ZNSt14_Function_baseD1Ev>
 810b0c0:	687b      	ldr	r3, [r7, #4]
 810b0c2:	4618      	mov	r0, r3
 810b0c4:	3708      	adds	r7, #8
 810b0c6:	46bd      	mov	sp, r7
 810b0c8:	bd80      	pop	{r7, pc}
	...

0810b0cc <_ZN8IODriverC1Ev>:
class IODriver {
 810b0cc:	b480      	push	{r7}
 810b0ce:	b083      	sub	sp, #12
 810b0d0:	af00      	add	r7, sp, #0
 810b0d2:	6078      	str	r0, [r7, #4]
 810b0d4:	4a04      	ldr	r2, [pc, #16]	; (810b0e8 <_ZN8IODriverC1Ev+0x1c>)
 810b0d6:	687b      	ldr	r3, [r7, #4]
 810b0d8:	601a      	str	r2, [r3, #0]
 810b0da:	687b      	ldr	r3, [r7, #4]
 810b0dc:	4618      	mov	r0, r3
 810b0de:	370c      	adds	r7, #12
 810b0e0:	46bd      	mov	sp, r7
 810b0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b0e6:	4770      	bx	lr
 810b0e8:	08110a24 	.word	0x08110a24

0810b0ec <_ZN16BufferedIODriverC1EPVhS1_j>:
#include <cstring>

#ifdef BUILD_WITH_BUFFERED_IO


BufferedIODriver::BufferedIODriver(volatile uint8_t* bufferStorage, volatile uint8_t* bufferControl, size_t length) : bufferStorage(bufferStorage), bufferControl(bufferControl), bufferLength(length), readIndex(0), receiverFunc(nullptr) {
 810b0ec:	b580      	push	{r7, lr}
 810b0ee:	b084      	sub	sp, #16
 810b0f0:	af00      	add	r7, sp, #0
 810b0f2:	60f8      	str	r0, [r7, #12]
 810b0f4:	60b9      	str	r1, [r7, #8]
 810b0f6:	607a      	str	r2, [r7, #4]
 810b0f8:	603b      	str	r3, [r7, #0]
 810b0fa:	68fb      	ldr	r3, [r7, #12]
 810b0fc:	4618      	mov	r0, r3
 810b0fe:	f7ff ffe5 	bl	810b0cc <_ZN8IODriverC1Ev>
 810b102:	4a11      	ldr	r2, [pc, #68]	; (810b148 <_ZN16BufferedIODriverC1EPVhS1_j+0x5c>)
 810b104:	68fb      	ldr	r3, [r7, #12]
 810b106:	601a      	str	r2, [r3, #0]
 810b108:	68fb      	ldr	r3, [r7, #12]
 810b10a:	68ba      	ldr	r2, [r7, #8]
 810b10c:	609a      	str	r2, [r3, #8]
 810b10e:	68fb      	ldr	r3, [r7, #12]
 810b110:	687a      	ldr	r2, [r7, #4]
 810b112:	60da      	str	r2, [r3, #12]
 810b114:	68fb      	ldr	r3, [r7, #12]
 810b116:	683a      	ldr	r2, [r7, #0]
 810b118:	611a      	str	r2, [r3, #16]
 810b11a:	68fb      	ldr	r3, [r7, #12]
 810b11c:	2200      	movs	r2, #0
 810b11e:	829a      	strh	r2, [r3, #20]
 810b120:	68fb      	ldr	r3, [r7, #12]
 810b122:	3318      	adds	r3, #24
 810b124:	2100      	movs	r1, #0
 810b126:	4618      	mov	r0, r3
 810b128:	f000 f8b1 	bl	810b28e <_ZNSt8functionIFvhPhmEEC1EDn>
	semaphore = xSemaphoreCreateMutex();
 810b12c:	2001      	movs	r0, #1
 810b12e:	f7fd fdec 	bl	8108d0a <xQueueCreateMutex>
 810b132:	4602      	mov	r2, r0
 810b134:	68fb      	ldr	r3, [r7, #12]
 810b136:	605a      	str	r2, [r3, #4]
	*bufferControl = 0;
 810b138:	687b      	ldr	r3, [r7, #4]
 810b13a:	2200      	movs	r2, #0
 810b13c:	701a      	strb	r2, [r3, #0]
}
 810b13e:	68fb      	ldr	r3, [r7, #12]
 810b140:	4618      	mov	r0, r3
 810b142:	3710      	adds	r7, #16
 810b144:	46bd      	mov	sp, r7
 810b146:	bd80      	pop	{r7, pc}
 810b148:	08110a0c 	.word	0x08110a0c

0810b14c <_ZN16BufferedIODriver7receiveERKSt8functionIFvhPhmEE>:

void BufferedIODriver::receive(const std::function<void (uint8_t sender_id, uint8_t* buffer, uint32_t length)> &receiver) {
 810b14c:	b580      	push	{r7, lr}
 810b14e:	b082      	sub	sp, #8
 810b150:	af00      	add	r7, sp, #0
 810b152:	6078      	str	r0, [r7, #4]
 810b154:	6039      	str	r1, [r7, #0]
	receiverFunc = receiver;
 810b156:	687b      	ldr	r3, [r7, #4]
 810b158:	3318      	adds	r3, #24
 810b15a:	6839      	ldr	r1, [r7, #0]
 810b15c:	4618      	mov	r0, r3
 810b15e:	f000 f8a4 	bl	810b2aa <_ZNSt8functionIFvhPhmEEaSERKS2_>
}
 810b162:	bf00      	nop
 810b164:	3708      	adds	r7, #8
 810b166:	46bd      	mov	sp, r7
 810b168:	bd80      	pop	{r7, pc}

0810b16a <_ZN16BufferedIODriver8transmitEPhm>:
/*
 * Writes data to a buffer shared between Cortex-M4 and Cortex-M7
 * Any thread can call this function
 * Assumes there is no overrun
 */
void BufferedIODriver::transmit(uint8_t* data, uint32_t length) {
 810b16a:	b580      	push	{r7, lr}
 810b16c:	b088      	sub	sp, #32
 810b16e:	af00      	add	r7, sp, #0
 810b170:	60f8      	str	r0, [r7, #12]
 810b172:	60b9      	str	r1, [r7, #8]
 810b174:	607a      	str	r2, [r7, #4]
	if(xSemaphoreTake(semaphore, portMAX_DELAY) == pdTRUE) {
 810b176:	68fb      	ldr	r3, [r7, #12]
 810b178:	685b      	ldr	r3, [r3, #4]
 810b17a:	f04f 31ff 	mov.w	r1, #4294967295
 810b17e:	4618      	mov	r0, r3
 810b180:	f7fd fed6 	bl	8108f30 <xQueueSemaphoreTake>
 810b184:	4603      	mov	r3, r0
 810b186:	2b01      	cmp	r3, #1
 810b188:	bf0c      	ite	eq
 810b18a:	2301      	moveq	r3, #1
 810b18c:	2300      	movne	r3, #0
 810b18e:	b2db      	uxtb	r3, r3
 810b190:	2b00      	cmp	r3, #0
 810b192:	d056      	beq.n	810b242 <_ZN16BufferedIODriver8transmitEPhm+0xd8>
		while(HAL_HSEM_Take(1, 1) != HAL_OK);
 810b194:	2101      	movs	r1, #1
 810b196:	2001      	movs	r0, #1
 810b198:	f7f9 fe26 	bl	8104de8 <HAL_HSEM_Take>
 810b19c:	4603      	mov	r3, r0
 810b19e:	2b00      	cmp	r3, #0
 810b1a0:	bf14      	ite	ne
 810b1a2:	2301      	movne	r3, #1
 810b1a4:	2300      	moveq	r3, #0
 810b1a6:	b2db      	uxtb	r3, r3
 810b1a8:	2b00      	cmp	r3, #0
 810b1aa:	d000      	beq.n	810b1ae <_ZN16BufferedIODriver8transmitEPhm+0x44>
 810b1ac:	e7f2      	b.n	810b194 <_ZN16BufferedIODriver8transmitEPhm+0x2a>

		uint8_t writeIndex = *bufferControl;
 810b1ae:	68fb      	ldr	r3, [r7, #12]
 810b1b0:	68db      	ldr	r3, [r3, #12]
 810b1b2:	781b      	ldrb	r3, [r3, #0]
 810b1b4:	77fb      	strb	r3, [r7, #31]
		uint8_t* buffer = (uint8_t*) bufferStorage;
 810b1b6:	68fb      	ldr	r3, [r7, #12]
 810b1b8:	689b      	ldr	r3, [r3, #8]
 810b1ba:	61bb      	str	r3, [r7, #24]

		if(writeIndex + length < bufferLength) {
 810b1bc:	7ffa      	ldrb	r2, [r7, #31]
 810b1be:	687b      	ldr	r3, [r7, #4]
 810b1c0:	441a      	add	r2, r3
 810b1c2:	68fb      	ldr	r3, [r7, #12]
 810b1c4:	691b      	ldr	r3, [r3, #16]
 810b1c6:	429a      	cmp	r2, r3
 810b1c8:	d20d      	bcs.n	810b1e6 <_ZN16BufferedIODriver8transmitEPhm+0x7c>
			memcpy(buffer + writeIndex, data, length);
 810b1ca:	7ffb      	ldrb	r3, [r7, #31]
 810b1cc:	69ba      	ldr	r2, [r7, #24]
 810b1ce:	4413      	add	r3, r2
 810b1d0:	687a      	ldr	r2, [r7, #4]
 810b1d2:	68b9      	ldr	r1, [r7, #8]
 810b1d4:	4618      	mov	r0, r3
 810b1d6:	f002 ffcf 	bl	810e178 <memcpy>
			writeIndex += length;
 810b1da:	687b      	ldr	r3, [r7, #4]
 810b1dc:	b2da      	uxtb	r2, r3
 810b1de:	7ffb      	ldrb	r3, [r7, #31]
 810b1e0:	4413      	add	r3, r2
 810b1e2:	77fb      	strb	r3, [r7, #31]
 810b1e4:	e01e      	b.n	810b224 <_ZN16BufferedIODriver8transmitEPhm+0xba>
		} else {
			uint16_t firstSize = bufferLength - writeIndex;
 810b1e6:	68fb      	ldr	r3, [r7, #12]
 810b1e8:	691b      	ldr	r3, [r3, #16]
 810b1ea:	b29a      	uxth	r2, r3
 810b1ec:	7ffb      	ldrb	r3, [r7, #31]
 810b1ee:	b29b      	uxth	r3, r3
 810b1f0:	1ad3      	subs	r3, r2, r3
 810b1f2:	82fb      	strh	r3, [r7, #22]
			memcpy(buffer + writeIndex, data, firstSize);
 810b1f4:	7ffb      	ldrb	r3, [r7, #31]
 810b1f6:	69ba      	ldr	r2, [r7, #24]
 810b1f8:	4413      	add	r3, r2
 810b1fa:	8afa      	ldrh	r2, [r7, #22]
 810b1fc:	68b9      	ldr	r1, [r7, #8]
 810b1fe:	4618      	mov	r0, r3
 810b200:	f002 ffba 	bl	810e178 <memcpy>
			memcpy(buffer, data + firstSize, length - firstSize);
 810b204:	8afb      	ldrh	r3, [r7, #22]
 810b206:	68ba      	ldr	r2, [r7, #8]
 810b208:	18d1      	adds	r1, r2, r3
 810b20a:	8afb      	ldrh	r3, [r7, #22]
 810b20c:	687a      	ldr	r2, [r7, #4]
 810b20e:	1ad3      	subs	r3, r2, r3
 810b210:	461a      	mov	r2, r3
 810b212:	69b8      	ldr	r0, [r7, #24]
 810b214:	f002 ffb0 	bl	810e178 <memcpy>
			writeIndex = length - firstSize;
 810b218:	687b      	ldr	r3, [r7, #4]
 810b21a:	b2da      	uxtb	r2, r3
 810b21c:	8afb      	ldrh	r3, [r7, #22]
 810b21e:	b2db      	uxtb	r3, r3
 810b220:	1ad3      	subs	r3, r2, r3
 810b222:	77fb      	strb	r3, [r7, #31]
		}

		*bufferControl = writeIndex;
 810b224:	68fb      	ldr	r3, [r7, #12]
 810b226:	68db      	ldr	r3, [r3, #12]
 810b228:	7ffa      	ldrb	r2, [r7, #31]
 810b22a:	701a      	strb	r2, [r3, #0]

		HAL_HSEM_Release(1, 1);
 810b22c:	2101      	movs	r1, #1
 810b22e:	2001      	movs	r0, #1
 810b230:	f7f9 fe14 	bl	8104e5c <HAL_HSEM_Release>
		xSemaphoreGive(semaphore);
 810b234:	68fb      	ldr	r3, [r7, #12]
 810b236:	6858      	ldr	r0, [r3, #4]
 810b238:	2300      	movs	r3, #0
 810b23a:	2200      	movs	r2, #0
 810b23c:	2100      	movs	r1, #0
 810b23e:	f7fd fd7d 	bl	8108d3c <xQueueGenericSend>
	}
}
 810b242:	bf00      	nop
 810b244:	3720      	adds	r7, #32
 810b246:	46bd      	mov	sp, r7
 810b248:	bd80      	pop	{r7, pc}

0810b24a <_ZNSt8functionIFvhPhmEEC1ERKS2_>:
    function(_Functor) -> function<_Signature>;
#endif

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 810b24a:	b580      	push	{r7, lr}
 810b24c:	b082      	sub	sp, #8
 810b24e:	af00      	add	r7, sp, #0
 810b250:	6078      	str	r0, [r7, #4]
 810b252:	6039      	str	r1, [r7, #0]
    function(const function& __x)
    : _Function_base()
 810b254:	687b      	ldr	r3, [r7, #4]
 810b256:	4618      	mov	r0, r3
 810b258:	f7ff fed8 	bl	810b00c <_ZNSt14_Function_baseC1Ev>
    {
      if (static_cast<bool>(__x))
 810b25c:	6838      	ldr	r0, [r7, #0]
 810b25e:	f000 f83f 	bl	810b2e0 <_ZNKSt8functionIFvhPhmEEcvbEv>
 810b262:	4603      	mov	r3, r0
 810b264:	2b00      	cmp	r3, #0
 810b266:	d00d      	beq.n	810b284 <_ZNSt8functionIFvhPhmEEC1ERKS2_+0x3a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 810b268:	683b      	ldr	r3, [r7, #0]
 810b26a:	689b      	ldr	r3, [r3, #8]
 810b26c:	6878      	ldr	r0, [r7, #4]
 810b26e:	6839      	ldr	r1, [r7, #0]
 810b270:	2202      	movs	r2, #2
 810b272:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 810b274:	683b      	ldr	r3, [r7, #0]
 810b276:	68da      	ldr	r2, [r3, #12]
 810b278:	687b      	ldr	r3, [r7, #4]
 810b27a:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 810b27c:	683b      	ldr	r3, [r7, #0]
 810b27e:	689a      	ldr	r2, [r3, #8]
 810b280:	687b      	ldr	r3, [r7, #4]
 810b282:	609a      	str	r2, [r3, #8]
	}
    }
 810b284:	687b      	ldr	r3, [r7, #4]
 810b286:	4618      	mov	r0, r3
 810b288:	3708      	adds	r7, #8
 810b28a:	46bd      	mov	sp, r7
 810b28c:	bd80      	pop	{r7, pc}

0810b28e <_ZNSt8functionIFvhPhmEEC1EDn>:
      function(nullptr_t) noexcept
 810b28e:	b580      	push	{r7, lr}
 810b290:	b082      	sub	sp, #8
 810b292:	af00      	add	r7, sp, #0
 810b294:	6078      	str	r0, [r7, #4]
 810b296:	6039      	str	r1, [r7, #0]
      : _Function_base() { }
 810b298:	687b      	ldr	r3, [r7, #4]
 810b29a:	4618      	mov	r0, r3
 810b29c:	f7ff feb6 	bl	810b00c <_ZNSt14_Function_baseC1Ev>
 810b2a0:	687b      	ldr	r3, [r7, #4]
 810b2a2:	4618      	mov	r0, r3
 810b2a4:	3708      	adds	r7, #8
 810b2a6:	46bd      	mov	sp, r7
 810b2a8:	bd80      	pop	{r7, pc}

0810b2aa <_ZNSt8functionIFvhPhmEEaSERKS2_>:
      operator=(const function& __x)
 810b2aa:	b580      	push	{r7, lr}
 810b2ac:	b086      	sub	sp, #24
 810b2ae:	af00      	add	r7, sp, #0
 810b2b0:	6078      	str	r0, [r7, #4]
 810b2b2:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 810b2b4:	f107 0308 	add.w	r3, r7, #8
 810b2b8:	6839      	ldr	r1, [r7, #0]
 810b2ba:	4618      	mov	r0, r3
 810b2bc:	f7ff ffc5 	bl	810b24a <_ZNSt8functionIFvhPhmEEC1ERKS2_>
 810b2c0:	f107 0308 	add.w	r3, r7, #8
 810b2c4:	6879      	ldr	r1, [r7, #4]
 810b2c6:	4618      	mov	r0, r3
 810b2c8:	f000 f81a 	bl	810b300 <_ZNSt8functionIFvhPhmEE4swapERS2_>
 810b2cc:	f107 0308 	add.w	r3, r7, #8
 810b2d0:	4618      	mov	r0, r3
 810b2d2:	f7ff feed 	bl	810b0b0 <_ZNSt8functionIFvhPhmEED1Ev>
	return *this;
 810b2d6:	687b      	ldr	r3, [r7, #4]
      }
 810b2d8:	4618      	mov	r0, r3
 810b2da:	3718      	adds	r7, #24
 810b2dc:	46bd      	mov	sp, r7
 810b2de:	bd80      	pop	{r7, pc}

0810b2e0 <_ZNKSt8functionIFvhPhmEEcvbEv>:
      explicit operator bool() const noexcept
 810b2e0:	b580      	push	{r7, lr}
 810b2e2:	b082      	sub	sp, #8
 810b2e4:	af00      	add	r7, sp, #0
 810b2e6:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 810b2e8:	687b      	ldr	r3, [r7, #4]
 810b2ea:	4618      	mov	r0, r3
 810b2ec:	f7ff feaf 	bl	810b04e <_ZNKSt14_Function_base8_M_emptyEv>
 810b2f0:	4603      	mov	r3, r0
 810b2f2:	f083 0301 	eor.w	r3, r3, #1
 810b2f6:	b2db      	uxtb	r3, r3
 810b2f8:	4618      	mov	r0, r3
 810b2fa:	3708      	adds	r7, #8
 810b2fc:	46bd      	mov	sp, r7
 810b2fe:	bd80      	pop	{r7, pc}

0810b300 <_ZNSt8functionIFvhPhmEE4swapERS2_>:
      void swap(function& __x) noexcept
 810b300:	b580      	push	{r7, lr}
 810b302:	b082      	sub	sp, #8
 810b304:	af00      	add	r7, sp, #0
 810b306:	6078      	str	r0, [r7, #4]
 810b308:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 810b30a:	687b      	ldr	r3, [r7, #4]
 810b30c:	683a      	ldr	r2, [r7, #0]
 810b30e:	4611      	mov	r1, r2
 810b310:	4618      	mov	r0, r3
 810b312:	f000 f821 	bl	810b358 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 810b316:	687b      	ldr	r3, [r7, #4]
 810b318:	f103 0208 	add.w	r2, r3, #8
 810b31c:	683b      	ldr	r3, [r7, #0]
 810b31e:	3308      	adds	r3, #8
 810b320:	4619      	mov	r1, r3
 810b322:	4610      	mov	r0, r2
 810b324:	f000 f84a 	bl	810b3bc <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 810b328:	687b      	ldr	r3, [r7, #4]
 810b32a:	f103 020c 	add.w	r2, r3, #12
 810b32e:	683b      	ldr	r3, [r7, #0]
 810b330:	330c      	adds	r3, #12
 810b332:	4619      	mov	r1, r3
 810b334:	4610      	mov	r0, r2
 810b336:	f000 f86b 	bl	810b410 <_ZSt4swapIPFvRKSt9_Any_dataOhOPhOmEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISD_ESt18is_move_assignableISD_EEE5valueEvE4typeERSD_SN_>
      }
 810b33a:	bf00      	nop
 810b33c:	3708      	adds	r7, #8
 810b33e:	46bd      	mov	sp, r7
 810b340:	bd80      	pop	{r7, pc}

0810b342 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 810b342:	b480      	push	{r7}
 810b344:	b083      	sub	sp, #12
 810b346:	af00      	add	r7, sp, #0
 810b348:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810b34a:	687b      	ldr	r3, [r7, #4]
 810b34c:	4618      	mov	r0, r3
 810b34e:	370c      	adds	r7, #12
 810b350:	46bd      	mov	sp, r7
 810b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b356:	4770      	bx	lr

0810b358 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 810b358:	b580      	push	{r7, lr}
 810b35a:	b084      	sub	sp, #16
 810b35c:	af00      	add	r7, sp, #0
 810b35e:	6078      	str	r0, [r7, #4]
 810b360:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 810b362:	6878      	ldr	r0, [r7, #4]
 810b364:	f7ff ffed 	bl	810b342 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 810b368:	4602      	mov	r2, r0
 810b36a:	f107 0308 	add.w	r3, r7, #8
 810b36e:	e892 0003 	ldmia.w	r2, {r0, r1}
 810b372:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 810b376:	6838      	ldr	r0, [r7, #0]
 810b378:	f7ff ffe3 	bl	810b342 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 810b37c:	4602      	mov	r2, r0
 810b37e:	687b      	ldr	r3, [r7, #4]
 810b380:	e892 0003 	ldmia.w	r2, {r0, r1}
 810b384:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 810b388:	f107 0308 	add.w	r3, r7, #8
 810b38c:	4618      	mov	r0, r3
 810b38e:	f7ff ffd8 	bl	810b342 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 810b392:	4602      	mov	r2, r0
 810b394:	683b      	ldr	r3, [r7, #0]
 810b396:	e892 0003 	ldmia.w	r2, {r0, r1}
 810b39a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 810b39e:	bf00      	nop
 810b3a0:	3710      	adds	r7, #16
 810b3a2:	46bd      	mov	sp, r7
 810b3a4:	bd80      	pop	{r7, pc}

0810b3a6 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 810b3a6:	b480      	push	{r7}
 810b3a8:	b083      	sub	sp, #12
 810b3aa:	af00      	add	r7, sp, #0
 810b3ac:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810b3ae:	687b      	ldr	r3, [r7, #4]
 810b3b0:	4618      	mov	r0, r3
 810b3b2:	370c      	adds	r7, #12
 810b3b4:	46bd      	mov	sp, r7
 810b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b3ba:	4770      	bx	lr

0810b3bc <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 810b3bc:	b580      	push	{r7, lr}
 810b3be:	b084      	sub	sp, #16
 810b3c0:	af00      	add	r7, sp, #0
 810b3c2:	6078      	str	r0, [r7, #4]
 810b3c4:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 810b3c6:	6878      	ldr	r0, [r7, #4]
 810b3c8:	f7ff ffed 	bl	810b3a6 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 810b3cc:	4603      	mov	r3, r0
 810b3ce:	681b      	ldr	r3, [r3, #0]
 810b3d0:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 810b3d2:	6838      	ldr	r0, [r7, #0]
 810b3d4:	f7ff ffe7 	bl	810b3a6 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 810b3d8:	4603      	mov	r3, r0
 810b3da:	681a      	ldr	r2, [r3, #0]
 810b3dc:	687b      	ldr	r3, [r7, #4]
 810b3de:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 810b3e0:	f107 030c 	add.w	r3, r7, #12
 810b3e4:	4618      	mov	r0, r3
 810b3e6:	f7ff ffde 	bl	810b3a6 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 810b3ea:	4603      	mov	r3, r0
 810b3ec:	681a      	ldr	r2, [r3, #0]
 810b3ee:	683b      	ldr	r3, [r7, #0]
 810b3f0:	601a      	str	r2, [r3, #0]
    }
 810b3f2:	bf00      	nop
 810b3f4:	3710      	adds	r7, #16
 810b3f6:	46bd      	mov	sp, r7
 810b3f8:	bd80      	pop	{r7, pc}

0810b3fa <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 810b3fa:	b480      	push	{r7}
 810b3fc:	b083      	sub	sp, #12
 810b3fe:	af00      	add	r7, sp, #0
 810b400:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810b402:	687b      	ldr	r3, [r7, #4]
 810b404:	4618      	mov	r0, r3
 810b406:	370c      	adds	r7, #12
 810b408:	46bd      	mov	sp, r7
 810b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b40e:	4770      	bx	lr

0810b410 <_ZSt4swapIPFvRKSt9_Any_dataOhOPhOmEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISD_ESt18is_move_assignableISD_EEE5valueEvE4typeERSD_SN_>:
    swap(_Tp& __a, _Tp& __b)
 810b410:	b580      	push	{r7, lr}
 810b412:	b084      	sub	sp, #16
 810b414:	af00      	add	r7, sp, #0
 810b416:	6078      	str	r0, [r7, #4]
 810b418:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 810b41a:	6878      	ldr	r0, [r7, #4]
 810b41c:	f7ff ffed 	bl	810b3fa <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
 810b420:	4603      	mov	r3, r0
 810b422:	681b      	ldr	r3, [r3, #0]
 810b424:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 810b426:	6838      	ldr	r0, [r7, #0]
 810b428:	f7ff ffe7 	bl	810b3fa <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
 810b42c:	4603      	mov	r3, r0
 810b42e:	681a      	ldr	r2, [r3, #0]
 810b430:	687b      	ldr	r3, [r7, #4]
 810b432:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 810b434:	f107 030c 	add.w	r3, r7, #12
 810b438:	4618      	mov	r0, r3
 810b43a:	f7ff ffde 	bl	810b3fa <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
 810b43e:	4603      	mov	r3, r0
 810b440:	681a      	ldr	r2, [r3, #0]
 810b442:	683b      	ldr	r3, [r7, #0]
 810b444:	601a      	str	r2, [r3, #0]
    }
 810b446:	bf00      	nop
 810b448:	3710      	adds	r7, #16
 810b44a:	46bd      	mov	sp, r7
 810b44c:	bd80      	pop	{r7, pc}
	...

0810b450 <_ZN16BufferedIODriverD1Ev>:
#include <cstdint>
#include <functional>



class BufferedIODriver : public IODriver {
 810b450:	b580      	push	{r7, lr}
 810b452:	b082      	sub	sp, #8
 810b454:	af00      	add	r7, sp, #0
 810b456:	6078      	str	r0, [r7, #4]
 810b458:	4a08      	ldr	r2, [pc, #32]	; (810b47c <_ZN16BufferedIODriverD1Ev+0x2c>)
 810b45a:	687b      	ldr	r3, [r7, #4]
 810b45c:	601a      	str	r2, [r3, #0]
 810b45e:	687b      	ldr	r3, [r7, #4]
 810b460:	3318      	adds	r3, #24
 810b462:	4618      	mov	r0, r3
 810b464:	f7ff fe24 	bl	810b0b0 <_ZNSt8functionIFvhPhmEED1Ev>
 810b468:	687b      	ldr	r3, [r7, #4]
 810b46a:	4618      	mov	r0, r3
 810b46c:	f7ff fe00 	bl	810b070 <_ZN8IODriverD1Ev>
 810b470:	687b      	ldr	r3, [r7, #4]
 810b472:	4618      	mov	r0, r3
 810b474:	3708      	adds	r7, #8
 810b476:	46bd      	mov	sp, r7
 810b478:	bd80      	pop	{r7, pc}
 810b47a:	bf00      	nop
 810b47c:	08110a0c 	.word	0x08110a0c

0810b480 <_ZN16BufferedIODriverD0Ev>:
 810b480:	b580      	push	{r7, lr}
 810b482:	b082      	sub	sp, #8
 810b484:	af00      	add	r7, sp, #0
 810b486:	6078      	str	r0, [r7, #4]
 810b488:	6878      	ldr	r0, [r7, #4]
 810b48a:	f7ff ffe1 	bl	810b450 <_ZN16BufferedIODriverD1Ev>
 810b48e:	2128      	movs	r1, #40	; 0x28
 810b490:	6878      	ldr	r0, [r7, #4]
 810b492:	f002 fcec 	bl	810de6e <_ZdlPvj>
 810b496:	687b      	ldr	r3, [r7, #4]
 810b498:	4618      	mov	r0, r3
 810b49a:	3708      	adds	r7, #8
 810b49c:	46bd      	mov	sp, r7
 810b49e:	bd80      	pop	{r7, pc}

0810b4a0 <_ZN10MessageBusD1Ev>:
	size_t hash;
};

class MessageBus {
public:
	virtual ~MessageBus() {}
 810b4a0:	b480      	push	{r7}
 810b4a2:	b083      	sub	sp, #12
 810b4a4:	af00      	add	r7, sp, #0
 810b4a6:	6078      	str	r0, [r7, #4]
 810b4a8:	4a04      	ldr	r2, [pc, #16]	; (810b4bc <_ZN10MessageBusD1Ev+0x1c>)
 810b4aa:	687b      	ldr	r3, [r7, #4]
 810b4ac:	601a      	str	r2, [r3, #0]
 810b4ae:	687b      	ldr	r3, [r7, #4]
 810b4b0:	4618      	mov	r0, r3
 810b4b2:	370c      	adds	r7, #12
 810b4b4:	46bd      	mov	sp, r7
 810b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b4ba:	4770      	bx	lr
 810b4bc:	08110a88 	.word	0x08110a88

0810b4c0 <_ZN10MessageBusD0Ev>:
 810b4c0:	b580      	push	{r7, lr}
 810b4c2:	b082      	sub	sp, #8
 810b4c4:	af00      	add	r7, sp, #0
 810b4c6:	6078      	str	r0, [r7, #4]
 810b4c8:	6878      	ldr	r0, [r7, #4]
 810b4ca:	f7ff ffe9 	bl	810b4a0 <_ZN10MessageBusD1Ev>
 810b4ce:	f644 0104 	movw	r1, #18436	; 0x4804
 810b4d2:	6878      	ldr	r0, [r7, #4]
 810b4d4:	f002 fccb 	bl	810de6e <_ZdlPvj>
 810b4d8:	687b      	ldr	r3, [r7, #4]
 810b4da:	4618      	mov	r0, r3
 810b4dc:	3708      	adds	r7, #8
 810b4de:	46bd      	mov	sp, r7
 810b4e0:	bd80      	pop	{r7, pc}

0810b4e2 <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       { return &_M_pod_data[0]; }
 810b4e2:	b480      	push	{r7}
 810b4e4:	b083      	sub	sp, #12
 810b4e6:	af00      	add	r7, sp, #0
 810b4e8:	6078      	str	r0, [r7, #4]
 810b4ea:	687b      	ldr	r3, [r7, #4]
 810b4ec:	4618      	mov	r0, r3
 810b4ee:	370c      	adds	r7, #12
 810b4f0:	46bd      	mov	sp, r7
 810b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b4f6:	4770      	bx	lr

0810b4f8 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 810b4f8:	b480      	push	{r7}
 810b4fa:	b083      	sub	sp, #12
 810b4fc:	af00      	add	r7, sp, #0
 810b4fe:	6078      	str	r0, [r7, #4]
 810b500:	687b      	ldr	r3, [r7, #4]
 810b502:	4618      	mov	r0, r3
 810b504:	370c      	adds	r7, #12
 810b506:	46bd      	mov	sp, r7
 810b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b50c:	4770      	bx	lr
	...

0810b510 <_ZN10MessageBusC1Ev>:
class MessageBus {
 810b510:	b480      	push	{r7}
 810b512:	b083      	sub	sp, #12
 810b514:	af00      	add	r7, sp, #0
 810b516:	6078      	str	r0, [r7, #4]
 810b518:	4a04      	ldr	r2, [pc, #16]	; (810b52c <_ZN10MessageBusC1Ev+0x1c>)
 810b51a:	687b      	ldr	r3, [r7, #4]
 810b51c:	601a      	str	r2, [r3, #0]
 810b51e:	687b      	ldr	r3, [r7, #4]
 810b520:	4618      	mov	r0, r3
 810b522:	370c      	adds	r7, #12
 810b524:	46bd      	mov	sp, r7
 810b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b52a:	4770      	bx	lr
 810b52c:	08110a88 	.word	0x08110a88

0810b530 <_ZN5IOBusC1EP8IODriverPhm>:

#include "IOBus.h"

#include <cstring>

IOBus::IOBus(IODriver* driver, uint8_t* buffer, uint32_t length) {
 810b530:	b590      	push	{r4, r7, lr}
 810b532:	b091      	sub	sp, #68	; 0x44
 810b534:	af02      	add	r7, sp, #8
 810b536:	60f8      	str	r0, [r7, #12]
 810b538:	60b9      	str	r1, [r7, #8]
 810b53a:	607a      	str	r2, [r7, #4]
 810b53c:	603b      	str	r3, [r7, #0]
 810b53e:	68fb      	ldr	r3, [r7, #12]
 810b540:	4618      	mov	r0, r3
 810b542:	f7ff ffe5 	bl	810b510 <_ZN10MessageBusC1Ev>
 810b546:	4a24      	ldr	r2, [pc, #144]	; (810b5d8 <_ZN5IOBusC1EP8IODriverPhm+0xa8>)
 810b548:	68fb      	ldr	r3, [r7, #12]
 810b54a:	601a      	str	r2, [r3, #0]
	this->driver = driver;
 810b54c:	68fb      	ldr	r3, [r7, #12]
 810b54e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810b552:	3304      	adds	r3, #4
 810b554:	68ba      	ldr	r2, [r7, #8]
 810b556:	601a      	str	r2, [r3, #0]
	this->packet_buffer = buffer;
 810b558:	68fb      	ldr	r3, [r7, #12]
 810b55a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810b55e:	3308      	adds	r3, #8
 810b560:	687a      	ldr	r2, [r7, #4]
 810b562:	601a      	str	r2, [r3, #0]
	this->buffer_length = length;
 810b564:	68fb      	ldr	r3, [r7, #12]
 810b566:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810b56a:	330c      	adds	r3, #12
 810b56c:	683a      	ldr	r2, [r7, #0]
 810b56e:	601a      	str	r2, [r3, #0]
	this->buffer_index = 0;
 810b570:	68fb      	ldr	r3, [r7, #12]
 810b572:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810b576:	3310      	adds	r3, #16
 810b578:	2200      	movs	r2, #0
 810b57a:	701a      	strb	r2, [r3, #0]

	using namespace std::placeholders;
	driver->receive(std::bind(&IOBus::receive, this, _1, _2, _3));
 810b57c:	68bb      	ldr	r3, [r7, #8]
 810b57e:	681b      	ldr	r3, [r3, #0]
 810b580:	3308      	adds	r3, #8
 810b582:	681c      	ldr	r4, [r3, #0]
 810b584:	4b15      	ldr	r3, [pc, #84]	; (810b5dc <_ZN5IOBusC1EP8IODriverPhm+0xac>)
 810b586:	62fb      	str	r3, [r7, #44]	; 0x2c
 810b588:	2300      	movs	r3, #0
 810b58a:	633b      	str	r3, [r7, #48]	; 0x30
 810b58c:	68fb      	ldr	r3, [r7, #12]
 810b58e:	637b      	str	r3, [r7, #52]	; 0x34
 810b590:	f107 0020 	add.w	r0, r7, #32
 810b594:	f107 0234 	add.w	r2, r7, #52	; 0x34
 810b598:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 810b59c:	4b10      	ldr	r3, [pc, #64]	; (810b5e0 <_ZN5IOBusC1EP8IODriverPhm+0xb0>)
 810b59e:	9301      	str	r3, [sp, #4]
 810b5a0:	4b10      	ldr	r3, [pc, #64]	; (810b5e4 <_ZN5IOBusC1EP8IODriverPhm+0xb4>)
 810b5a2:	9300      	str	r3, [sp, #0]
 810b5a4:	4b10      	ldr	r3, [pc, #64]	; (810b5e8 <_ZN5IOBusC1EP8IODriverPhm+0xb8>)
 810b5a6:	f000 f8f0 	bl	810b78a <_ZSt4bindIM5IOBusFvhPhmEJPS0_RKSt12_PlaceholderILi1EERKS5_ILi2EERKS5_ILi3EEEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISL_EEE5valueESJ_JDpT0_EE4typeEOSJ_DpOSQ_>
 810b5aa:	f107 0220 	add.w	r2, r7, #32
 810b5ae:	f107 0310 	add.w	r3, r7, #16
 810b5b2:	4611      	mov	r1, r2
 810b5b4:	4618      	mov	r0, r3
 810b5b6:	f000 fa45 	bl	810ba44 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_>
 810b5ba:	f107 0310 	add.w	r3, r7, #16
 810b5be:	4619      	mov	r1, r3
 810b5c0:	68b8      	ldr	r0, [r7, #8]
 810b5c2:	47a0      	blx	r4
 810b5c4:	f107 0310 	add.w	r3, r7, #16
 810b5c8:	4618      	mov	r0, r3
 810b5ca:	f7ff fd71 	bl	810b0b0 <_ZNSt8functionIFvhPhmEED1Ev>
}
 810b5ce:	68fb      	ldr	r3, [r7, #12]
 810b5d0:	4618      	mov	r0, r3
 810b5d2:	373c      	adds	r7, #60	; 0x3c
 810b5d4:	46bd      	mov	sp, r7
 810b5d6:	bd90      	pop	{r4, r7, pc}
 810b5d8:	08110a70 	.word	0x08110a70
 810b5dc:	0810b5ed 	.word	0x0810b5ed
 810b5e0:	08110ef2 	.word	0x08110ef2
 810b5e4:	08110ef1 	.word	0x08110ef1
 810b5e8:	08110ef0 	.word	0x08110ef0

0810b5ec <_ZN5IOBus7receiveEhPhm>:

void IOBus::receive(uint8_t sender_id, uint8_t* buffer, uint32_t length) {
 810b5ec:	b580      	push	{r7, lr}
 810b5ee:	b084      	sub	sp, #16
 810b5f0:	af00      	add	r7, sp, #0
 810b5f2:	60f8      	str	r0, [r7, #12]
 810b5f4:	607a      	str	r2, [r7, #4]
 810b5f6:	603b      	str	r3, [r7, #0]
 810b5f8:	460b      	mov	r3, r1
 810b5fa:	72fb      	strb	r3, [r7, #11]
	while(length > buffer_length) {
 810b5fc:	68fb      	ldr	r3, [r7, #12]
 810b5fe:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810b602:	330c      	adds	r3, #12
 810b604:	681b      	ldr	r3, [r3, #0]
 810b606:	683a      	ldr	r2, [r7, #0]
 810b608:	429a      	cmp	r2, r3
 810b60a:	d91a      	bls.n	810b642 <_ZN5IOBus7receiveEhPhm+0x56>
		MessageBus::receive(sender_id, buffer, buffer_length);
 810b60c:	68f8      	ldr	r0, [r7, #12]
 810b60e:	68fb      	ldr	r3, [r7, #12]
 810b610:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810b614:	330c      	adds	r3, #12
 810b616:	681b      	ldr	r3, [r3, #0]
 810b618:	7af9      	ldrb	r1, [r7, #11]
 810b61a:	687a      	ldr	r2, [r7, #4]
 810b61c:	f001 fd6e 	bl	810d0fc <_ZN10MessageBus7receiveEhPhm>
		length -= buffer_length;
 810b620:	68fb      	ldr	r3, [r7, #12]
 810b622:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810b626:	330c      	adds	r3, #12
 810b628:	681b      	ldr	r3, [r3, #0]
 810b62a:	683a      	ldr	r2, [r7, #0]
 810b62c:	1ad3      	subs	r3, r2, r3
 810b62e:	603b      	str	r3, [r7, #0]
		buffer += buffer_length;
 810b630:	68fb      	ldr	r3, [r7, #12]
 810b632:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810b636:	330c      	adds	r3, #12
 810b638:	681b      	ldr	r3, [r3, #0]
 810b63a:	687a      	ldr	r2, [r7, #4]
 810b63c:	4413      	add	r3, r2
 810b63e:	607b      	str	r3, [r7, #4]
	while(length > buffer_length) {
 810b640:	e7dc      	b.n	810b5fc <_ZN5IOBus7receiveEhPhm+0x10>
	}

	MessageBus::receive(sender_id, buffer, length);
 810b642:	68f8      	ldr	r0, [r7, #12]
 810b644:	7af9      	ldrb	r1, [r7, #11]
 810b646:	683b      	ldr	r3, [r7, #0]
 810b648:	687a      	ldr	r2, [r7, #4]
 810b64a:	f001 fd57 	bl	810d0fc <_ZN10MessageBus7receiveEhPhm>
}
 810b64e:	bf00      	nop
 810b650:	3710      	adds	r7, #16
 810b652:	46bd      	mov	sp, r7
 810b654:	bd80      	pop	{r7, pc}

0810b656 <_ZN5IOBus6appendEPhm>:

uint8_t IOBus::append(uint8_t* buffer, uint32_t length) {
 810b656:	b580      	push	{r7, lr}
 810b658:	b086      	sub	sp, #24
 810b65a:	af00      	add	r7, sp, #0
 810b65c:	60f8      	str	r0, [r7, #12]
 810b65e:	60b9      	str	r1, [r7, #8]
 810b660:	607a      	str	r2, [r7, #4]
	uint32_t remaining_length = buffer_length - buffer_index;
 810b662:	68fb      	ldr	r3, [r7, #12]
 810b664:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810b668:	330c      	adds	r3, #12
 810b66a:	681a      	ldr	r2, [r3, #0]
 810b66c:	68fb      	ldr	r3, [r7, #12]
 810b66e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810b672:	3310      	adds	r3, #16
 810b674:	781b      	ldrb	r3, [r3, #0]
 810b676:	1ad3      	subs	r3, r2, r3
 810b678:	617b      	str	r3, [r7, #20]

	if(length > remaining_length) {
 810b67a:	687a      	ldr	r2, [r7, #4]
 810b67c:	697b      	ldr	r3, [r7, #20]
 810b67e:	429a      	cmp	r2, r3
 810b680:	d901      	bls.n	810b686 <_ZN5IOBus6appendEPhm+0x30>
		length = remaining_length;
 810b682:	697b      	ldr	r3, [r7, #20]
 810b684:	607b      	str	r3, [r7, #4]
	}

	memcpy(packet_buffer + buffer_index, buffer, length);
 810b686:	68fb      	ldr	r3, [r7, #12]
 810b688:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810b68c:	3308      	adds	r3, #8
 810b68e:	681a      	ldr	r2, [r3, #0]
 810b690:	68fb      	ldr	r3, [r7, #12]
 810b692:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810b696:	3310      	adds	r3, #16
 810b698:	781b      	ldrb	r3, [r3, #0]
 810b69a:	4413      	add	r3, r2
 810b69c:	687a      	ldr	r2, [r7, #4]
 810b69e:	68b9      	ldr	r1, [r7, #8]
 810b6a0:	4618      	mov	r0, r3
 810b6a2:	f002 fd69 	bl	810e178 <memcpy>

	buffer_index += length;
 810b6a6:	68fb      	ldr	r3, [r7, #12]
 810b6a8:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810b6ac:	3310      	adds	r3, #16
 810b6ae:	781a      	ldrb	r2, [r3, #0]
 810b6b0:	687b      	ldr	r3, [r7, #4]
 810b6b2:	b2db      	uxtb	r3, r3
 810b6b4:	4413      	add	r3, r2
 810b6b6:	b2da      	uxtb	r2, r3
 810b6b8:	68fb      	ldr	r3, [r7, #12]
 810b6ba:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810b6be:	3310      	adds	r3, #16
 810b6c0:	701a      	strb	r2, [r3, #0]


	return length;
 810b6c2:	687b      	ldr	r3, [r7, #4]
 810b6c4:	b2db      	uxtb	r3, r3
}
 810b6c6:	4618      	mov	r0, r3
 810b6c8:	3718      	adds	r7, #24
 810b6ca:	46bd      	mov	sp, r7
 810b6cc:	bd80      	pop	{r7, pc}

0810b6ce <_ZN5IOBus8transmitEv>:

void IOBus::transmit() {
 810b6ce:	b590      	push	{r4, r7, lr}
 810b6d0:	b083      	sub	sp, #12
 810b6d2:	af00      	add	r7, sp, #0
 810b6d4:	6078      	str	r0, [r7, #4]
	driver->transmit(packet_buffer, buffer_index);
 810b6d6:	687b      	ldr	r3, [r7, #4]
 810b6d8:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810b6dc:	3304      	adds	r3, #4
 810b6de:	6818      	ldr	r0, [r3, #0]
 810b6e0:	687b      	ldr	r3, [r7, #4]
 810b6e2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810b6e6:	3304      	adds	r3, #4
 810b6e8:	681b      	ldr	r3, [r3, #0]
 810b6ea:	681b      	ldr	r3, [r3, #0]
 810b6ec:	330c      	adds	r3, #12
 810b6ee:	681c      	ldr	r4, [r3, #0]
 810b6f0:	687b      	ldr	r3, [r7, #4]
 810b6f2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810b6f6:	3308      	adds	r3, #8
 810b6f8:	6819      	ldr	r1, [r3, #0]
 810b6fa:	687b      	ldr	r3, [r7, #4]
 810b6fc:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810b700:	3310      	adds	r3, #16
 810b702:	781b      	ldrb	r3, [r3, #0]
 810b704:	461a      	mov	r2, r3
 810b706:	47a0      	blx	r4
	buffer_index = 0;
 810b708:	687b      	ldr	r3, [r7, #4]
 810b70a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810b70e:	3310      	adds	r3, #16
 810b710:	2200      	movs	r2, #0
 810b712:	701a      	strb	r2, [r3, #0]
}
 810b714:	bf00      	nop
 810b716:	370c      	adds	r7, #12
 810b718:	46bd      	mov	sp, r7
 810b71a:	bd90      	pop	{r4, r7, pc}

0810b71c <_ZSt7forwardIM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810b71c:	b480      	push	{r7}
 810b71e:	b083      	sub	sp, #12
 810b720:	af00      	add	r7, sp, #0
 810b722:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810b724:	687b      	ldr	r3, [r7, #4]
 810b726:	4618      	mov	r0, r3
 810b728:	370c      	adds	r7, #12
 810b72a:	46bd      	mov	sp, r7
 810b72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b730:	4770      	bx	lr

0810b732 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810b732:	b480      	push	{r7}
 810b734:	b083      	sub	sp, #12
 810b736:	af00      	add	r7, sp, #0
 810b738:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810b73a:	687b      	ldr	r3, [r7, #4]
 810b73c:	4618      	mov	r0, r3
 810b73e:	370c      	adds	r7, #12
 810b740:	46bd      	mov	sp, r7
 810b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b746:	4770      	bx	lr

0810b748 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810b748:	b480      	push	{r7}
 810b74a:	b083      	sub	sp, #12
 810b74c:	af00      	add	r7, sp, #0
 810b74e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810b750:	687b      	ldr	r3, [r7, #4]
 810b752:	4618      	mov	r0, r3
 810b754:	370c      	adds	r7, #12
 810b756:	46bd      	mov	sp, r7
 810b758:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b75c:	4770      	bx	lr

0810b75e <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810b75e:	b480      	push	{r7}
 810b760:	b083      	sub	sp, #12
 810b762:	af00      	add	r7, sp, #0
 810b764:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810b766:	687b      	ldr	r3, [r7, #4]
 810b768:	4618      	mov	r0, r3
 810b76a:	370c      	adds	r7, #12
 810b76c:	46bd      	mov	sp, r7
 810b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b772:	4770      	bx	lr

0810b774 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810b774:	b480      	push	{r7}
 810b776:	b083      	sub	sp, #12
 810b778:	af00      	add	r7, sp, #0
 810b77a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810b77c:	687b      	ldr	r3, [r7, #4]
 810b77e:	4618      	mov	r0, r3
 810b780:	370c      	adds	r7, #12
 810b782:	46bd      	mov	sp, r7
 810b784:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b788:	4770      	bx	lr

0810b78a <_ZSt4bindIM5IOBusFvhPhmEJPS0_RKSt12_PlaceholderILi1EERKS5_ILi2EERKS5_ILi3EEEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISL_EEE5valueESJ_JDpT0_EE4typeEOSJ_DpOSQ_>:
   *  @ingroup binders
   */
  template<typename _Func, typename... _BoundArgs>
    inline typename
    _Bind_helper<__is_socketlike<_Func>::value, _Func, _BoundArgs...>::type
    bind(_Func&& __f, _BoundArgs&&... __args)
 810b78a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810b78e:	b086      	sub	sp, #24
 810b790:	af02      	add	r7, sp, #8
 810b792:	60f8      	str	r0, [r7, #12]
 810b794:	60b9      	str	r1, [r7, #8]
 810b796:	607a      	str	r2, [r7, #4]
 810b798:	603b      	str	r3, [r7, #0]
    {
      typedef _Bind_helper<false, _Func, _BoundArgs...> __helper_type;
      return typename __helper_type::type(std::forward<_Func>(__f),
					  std::forward<_BoundArgs>(__args)...);
 810b79a:	68b8      	ldr	r0, [r7, #8]
 810b79c:	f7ff ffbe 	bl	810b71c <_ZSt7forwardIM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS4_E4typeE>
 810b7a0:	4605      	mov	r5, r0
 810b7a2:	6878      	ldr	r0, [r7, #4]
 810b7a4:	f7ff ffc5 	bl	810b732 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810b7a8:	4606      	mov	r6, r0
 810b7aa:	6838      	ldr	r0, [r7, #0]
 810b7ac:	f7ff ffcc 	bl	810b748 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810b7b0:	4680      	mov	r8, r0
 810b7b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810b7b4:	f7ff ffd3 	bl	810b75e <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810b7b8:	4604      	mov	r4, r0
 810b7ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810b7bc:	f7ff ffda 	bl	810b774 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810b7c0:	4603      	mov	r3, r0
 810b7c2:	9301      	str	r3, [sp, #4]
 810b7c4:	9400      	str	r4, [sp, #0]
 810b7c6:	4643      	mov	r3, r8
 810b7c8:	4632      	mov	r2, r6
 810b7ca:	4629      	mov	r1, r5
 810b7cc:	68f8      	ldr	r0, [r7, #12]
 810b7ce:	f000 f961 	bl	810ba94 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1IJS4_RKS6_RKS7_RKS8_EEEOS3_DpOT_>
    }
 810b7d2:	68f8      	ldr	r0, [r7, #12]
 810b7d4:	3710      	adds	r7, #16
 810b7d6:	46bd      	mov	sp, r7
 810b7d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810b7dc <_ZSt4moveIRSt5tupleIJP5IOBusSt12_PlaceholderILi1EES3_ILi2EES3_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 810b7dc:	b480      	push	{r7}
 810b7de:	b083      	sub	sp, #12
 810b7e0:	af00      	add	r7, sp, #0
 810b7e2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810b7e4:	687b      	ldr	r3, [r7, #4]
 810b7e6:	4618      	mov	r0, r3
 810b7e8:	370c      	adds	r7, #12
 810b7ea:	46bd      	mov	sp, r7
 810b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b7f0:	4770      	bx	lr

0810b7f2 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEE7_M_headERS2_>:
      template<std::size_t, typename...> friend class _Tuple_impl;

      typedef _Head_base<_Idx, _Head> _Base;

      static constexpr _Head&
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810b7f2:	b580      	push	{r7, lr}
 810b7f4:	b082      	sub	sp, #8
 810b7f6:	af00      	add	r7, sp, #0
 810b7f8:	6078      	str	r0, [r7, #4]
 810b7fa:	6878      	ldr	r0, [r7, #4]
 810b7fc:	f000 f805 	bl	810b80a <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EE7_M_headERS2_>
 810b800:	4603      	mov	r3, r0
 810b802:	4618      	mov	r0, r3
 810b804:	3708      	adds	r7, #8
 810b806:	46bd      	mov	sp, r7
 810b808:	bd80      	pop	{r7, pc}

0810b80a <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 810b80a:	b480      	push	{r7}
 810b80c:	b083      	sub	sp, #12
 810b80e:	af00      	add	r7, sp, #0
 810b810:	6078      	str	r0, [r7, #4]
 810b812:	687b      	ldr	r3, [r7, #4]
 810b814:	4618      	mov	r0, r3
 810b816:	370c      	adds	r7, #12
 810b818:	46bd      	mov	sp, r7
 810b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b81e:	4770      	bx	lr

0810b820 <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810b820:	b480      	push	{r7}
 810b822:	b083      	sub	sp, #12
 810b824:	af00      	add	r7, sp, #0
 810b826:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810b828:	687b      	ldr	r3, [r7, #4]
 810b82a:	4618      	mov	r0, r3
 810b82c:	370c      	adds	r7, #12
 810b82e:	46bd      	mov	sp, r7
 810b830:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b834:	4770      	bx	lr

0810b836 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1EOS2_>:
	: _Base(std::forward<_UHead>(__head)) { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;

      constexpr
      _Tuple_impl(_Tuple_impl&& __in)
 810b836:	b580      	push	{r7, lr}
 810b838:	b082      	sub	sp, #8
 810b83a:	af00      	add	r7, sp, #0
 810b83c:	6078      	str	r0, [r7, #4]
 810b83e:	6039      	str	r1, [r7, #0]
      noexcept(is_nothrow_move_constructible<_Head>::value)
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 810b840:	6838      	ldr	r0, [r7, #0]
 810b842:	f7ff ffd6 	bl	810b7f2 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEE7_M_headERS2_>
 810b846:	4603      	mov	r3, r0
 810b848:	4618      	mov	r0, r3
 810b84a:	f7ff ffe9 	bl	810b820 <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810b84e:	4603      	mov	r3, r0
 810b850:	4619      	mov	r1, r3
 810b852:	6878      	ldr	r0, [r7, #4]
 810b854:	f000 f95a 	bl	810bb0c <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1IS1_EEOT_>
 810b858:	687b      	ldr	r3, [r7, #4]
 810b85a:	4618      	mov	r0, r3
 810b85c:	3708      	adds	r7, #8
 810b85e:	46bd      	mov	sp, r7
 810b860:	bd80      	pop	{r7, pc}

0810b862 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_tailERS3_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 810b862:	b480      	push	{r7}
 810b864:	b083      	sub	sp, #12
 810b866:	af00      	add	r7, sp, #0
 810b868:	6078      	str	r0, [r7, #4]
 810b86a:	687b      	ldr	r3, [r7, #4]
 810b86c:	4618      	mov	r0, r3
 810b86e:	370c      	adds	r7, #12
 810b870:	46bd      	mov	sp, r7
 810b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b876:	4770      	bx	lr

0810b878 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810b878:	b580      	push	{r7, lr}
 810b87a:	b082      	sub	sp, #8
 810b87c:	af00      	add	r7, sp, #0
 810b87e:	6078      	str	r0, [r7, #4]
 810b880:	6878      	ldr	r0, [r7, #4]
 810b882:	f000 f805 	bl	810b890 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EE7_M_headERS2_>
 810b886:	4603      	mov	r3, r0
 810b888:	4618      	mov	r0, r3
 810b88a:	3708      	adds	r7, #8
 810b88c:	46bd      	mov	sp, r7
 810b88e:	bd80      	pop	{r7, pc}

0810b890 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 810b890:	b480      	push	{r7}
 810b892:	b083      	sub	sp, #12
 810b894:	af00      	add	r7, sp, #0
 810b896:	6078      	str	r0, [r7, #4]
 810b898:	687b      	ldr	r3, [r7, #4]
 810b89a:	4618      	mov	r0, r3
 810b89c:	370c      	adds	r7, #12
 810b89e:	46bd      	mov	sp, r7
 810b8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b8a4:	4770      	bx	lr

0810b8a6 <_ZSt4moveIRSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 810b8a6:	b480      	push	{r7}
 810b8a8:	b083      	sub	sp, #12
 810b8aa:	af00      	add	r7, sp, #0
 810b8ac:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810b8ae:	687b      	ldr	r3, [r7, #4]
 810b8b0:	4618      	mov	r0, r3
 810b8b2:	370c      	adds	r7, #12
 810b8b4:	46bd      	mov	sp, r7
 810b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b8ba:	4770      	bx	lr

0810b8bc <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810b8bc:	b480      	push	{r7}
 810b8be:	b083      	sub	sp, #12
 810b8c0:	af00      	add	r7, sp, #0
 810b8c2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810b8c4:	687b      	ldr	r3, [r7, #4]
 810b8c6:	4618      	mov	r0, r3
 810b8c8:	370c      	adds	r7, #12
 810b8ca:	46bd      	mov	sp, r7
 810b8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b8d0:	4770      	bx	lr

0810b8d2 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1EOS3_>:
      _Tuple_impl(_Tuple_impl&& __in)
 810b8d2:	b580      	push	{r7, lr}
 810b8d4:	b082      	sub	sp, #8
 810b8d6:	af00      	add	r7, sp, #0
 810b8d8:	6078      	str	r0, [r7, #4]
 810b8da:	6039      	str	r1, [r7, #0]
      : _Inherited(std::move(_M_tail(__in))),
 810b8dc:	6838      	ldr	r0, [r7, #0]
 810b8de:	f7ff ffc0 	bl	810b862 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_tailERS3_>
 810b8e2:	4603      	mov	r3, r0
 810b8e4:	4618      	mov	r0, r3
 810b8e6:	f7ff ffde 	bl	810b8a6 <_ZSt4moveIRSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEEONSt16remove_referenceIT_E4typeEOS6_>
 810b8ea:	4603      	mov	r3, r0
	_Base(std::forward<_Head>(_M_head(__in))) { }
 810b8ec:	4619      	mov	r1, r3
 810b8ee:	6878      	ldr	r0, [r7, #4]
 810b8f0:	f7ff ffa1 	bl	810b836 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1EOS2_>
 810b8f4:	6838      	ldr	r0, [r7, #0]
 810b8f6:	f7ff ffbf 	bl	810b878 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_headERS3_>
 810b8fa:	4603      	mov	r3, r0
 810b8fc:	4618      	mov	r0, r3
 810b8fe:	f7ff ffdd 	bl	810b8bc <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810b902:	4603      	mov	r3, r0
 810b904:	4619      	mov	r1, r3
 810b906:	6878      	ldr	r0, [r7, #4]
 810b908:	f000 f90d 	bl	810bb26 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1IS1_EEOT_>
 810b90c:	687b      	ldr	r3, [r7, #4]
 810b90e:	4618      	mov	r0, r3
 810b910:	3708      	adds	r7, #8
 810b912:	46bd      	mov	sp, r7
 810b914:	bd80      	pop	{r7, pc}

0810b916 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_tailERS4_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 810b916:	b480      	push	{r7}
 810b918:	b083      	sub	sp, #12
 810b91a:	af00      	add	r7, sp, #0
 810b91c:	6078      	str	r0, [r7, #4]
 810b91e:	687b      	ldr	r3, [r7, #4]
 810b920:	4618      	mov	r0, r3
 810b922:	370c      	adds	r7, #12
 810b924:	46bd      	mov	sp, r7
 810b926:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b92a:	4770      	bx	lr

0810b92c <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810b92c:	b580      	push	{r7, lr}
 810b92e:	b082      	sub	sp, #8
 810b930:	af00      	add	r7, sp, #0
 810b932:	6078      	str	r0, [r7, #4]
 810b934:	6878      	ldr	r0, [r7, #4]
 810b936:	f000 f805 	bl	810b944 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EE7_M_headERS2_>
 810b93a:	4603      	mov	r3, r0
 810b93c:	4618      	mov	r0, r3
 810b93e:	3708      	adds	r7, #8
 810b940:	46bd      	mov	sp, r7
 810b942:	bd80      	pop	{r7, pc}

0810b944 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 810b944:	b480      	push	{r7}
 810b946:	b083      	sub	sp, #12
 810b948:	af00      	add	r7, sp, #0
 810b94a:	6078      	str	r0, [r7, #4]
 810b94c:	687b      	ldr	r3, [r7, #4]
 810b94e:	4618      	mov	r0, r3
 810b950:	370c      	adds	r7, #12
 810b952:	46bd      	mov	sp, r7
 810b954:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b958:	4770      	bx	lr

0810b95a <_ZSt4moveIRSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 810b95a:	b480      	push	{r7}
 810b95c:	b083      	sub	sp, #12
 810b95e:	af00      	add	r7, sp, #0
 810b960:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810b962:	687b      	ldr	r3, [r7, #4]
 810b964:	4618      	mov	r0, r3
 810b966:	370c      	adds	r7, #12
 810b968:	46bd      	mov	sp, r7
 810b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b96e:	4770      	bx	lr

0810b970 <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810b970:	b480      	push	{r7}
 810b972:	b083      	sub	sp, #12
 810b974:	af00      	add	r7, sp, #0
 810b976:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810b978:	687b      	ldr	r3, [r7, #4]
 810b97a:	4618      	mov	r0, r3
 810b97c:	370c      	adds	r7, #12
 810b97e:	46bd      	mov	sp, r7
 810b980:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b984:	4770      	bx	lr

0810b986 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 810b986:	b580      	push	{r7, lr}
 810b988:	b082      	sub	sp, #8
 810b98a:	af00      	add	r7, sp, #0
 810b98c:	6078      	str	r0, [r7, #4]
 810b98e:	6039      	str	r1, [r7, #0]
      : _Inherited(std::move(_M_tail(__in))),
 810b990:	6838      	ldr	r0, [r7, #0]
 810b992:	f7ff ffc0 	bl	810b916 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_tailERS4_>
 810b996:	4603      	mov	r3, r0
 810b998:	4618      	mov	r0, r3
 810b99a:	f7ff ffde 	bl	810b95a <_ZSt4moveIRSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS7_>
 810b99e:	4603      	mov	r3, r0
	_Base(std::forward<_Head>(_M_head(__in))) { }
 810b9a0:	4619      	mov	r1, r3
 810b9a2:	6878      	ldr	r0, [r7, #4]
 810b9a4:	f7ff ff95 	bl	810b8d2 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1EOS3_>
 810b9a8:	6838      	ldr	r0, [r7, #0]
 810b9aa:	f7ff ffbf 	bl	810b92c <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_headERS4_>
 810b9ae:	4603      	mov	r3, r0
 810b9b0:	4618      	mov	r0, r3
 810b9b2:	f7ff ffdd 	bl	810b970 <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810b9b6:	4603      	mov	r3, r0
 810b9b8:	4619      	mov	r1, r3
 810b9ba:	6878      	ldr	r0, [r7, #4]
 810b9bc:	f000 f8c0 	bl	810bb40 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1IS1_EEOT_>
 810b9c0:	687b      	ldr	r3, [r7, #4]
 810b9c2:	4618      	mov	r0, r3
 810b9c4:	3708      	adds	r7, #8
 810b9c6:	46bd      	mov	sp, r7
 810b9c8:	bd80      	pop	{r7, pc}

0810b9ca <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>:
        explicit constexpr tuple(_UElements&&... __elements)
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 810b9ca:	b580      	push	{r7, lr}
 810b9cc:	b082      	sub	sp, #8
 810b9ce:	af00      	add	r7, sp, #0
 810b9d0:	6078      	str	r0, [r7, #4]
 810b9d2:	6039      	str	r1, [r7, #0]
 810b9d4:	687b      	ldr	r3, [r7, #4]
 810b9d6:	683a      	ldr	r2, [r7, #0]
 810b9d8:	4611      	mov	r1, r2
 810b9da:	4618      	mov	r0, r3
 810b9dc:	f000 f8eb 	bl	810bbb6 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>
 810b9e0:	687b      	ldr	r3, [r7, #4]
 810b9e2:	4618      	mov	r0, r3
 810b9e4:	3708      	adds	r7, #8
 810b9e6:	46bd      	mov	sp, r7
 810b9e8:	bd80      	pop	{r7, pc}

0810b9ea <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1EOSA_>:
      _Bind(_Bind&& __b)
 810b9ea:	b590      	push	{r4, r7, lr}
 810b9ec:	b083      	sub	sp, #12
 810b9ee:	af00      	add	r7, sp, #0
 810b9f0:	6078      	str	r0, [r7, #4]
 810b9f2:	6039      	str	r1, [r7, #0]
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 810b9f4:	683b      	ldr	r3, [r7, #0]
 810b9f6:	4618      	mov	r0, r3
 810b9f8:	f000 f87d 	bl	810baf6 <_ZSt4moveIRM5IOBusFvhPhmEEONSt16remove_referenceIT_E4typeEOS6_>
 810b9fc:	4602      	mov	r2, r0
 810b9fe:	687b      	ldr	r3, [r7, #4]
 810ba00:	e892 0003 	ldmia.w	r2, {r0, r1}
 810ba04:	e883 0003 	stmia.w	r3, {r0, r1}
 810ba08:	687b      	ldr	r3, [r7, #4]
 810ba0a:	f103 0408 	add.w	r4, r3, #8
 810ba0e:	683b      	ldr	r3, [r7, #0]
 810ba10:	3308      	adds	r3, #8
 810ba12:	4618      	mov	r0, r3
 810ba14:	f7ff fee2 	bl	810b7dc <_ZSt4moveIRSt5tupleIJP5IOBusSt12_PlaceholderILi1EES3_ILi2EES3_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSA_>
 810ba18:	4603      	mov	r3, r0
 810ba1a:	4619      	mov	r1, r3
 810ba1c:	4620      	mov	r0, r4
 810ba1e:	f7ff ffd4 	bl	810b9ca <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>
      { }
 810ba22:	687b      	ldr	r3, [r7, #4]
 810ba24:	4618      	mov	r0, r3
 810ba26:	370c      	adds	r7, #12
 810ba28:	46bd      	mov	sp, r7
 810ba2a:	bd90      	pop	{r4, r7, pc}

0810ba2c <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>:
    move(_Tp&& __t) noexcept
 810ba2c:	b480      	push	{r7}
 810ba2e:	b083      	sub	sp, #12
 810ba30:	af00      	add	r7, sp, #0
 810ba32:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810ba34:	687b      	ldr	r3, [r7, #4]
 810ba36:	4618      	mov	r0, r3
 810ba38:	370c      	adds	r7, #12
 810ba3a:	46bd      	mov	sp, r7
 810ba3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ba40:	4770      	bx	lr
	...

0810ba44 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_>:

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
 810ba44:	b590      	push	{r4, r7, lr}
 810ba46:	b083      	sub	sp, #12
 810ba48:	af00      	add	r7, sp, #0
 810ba4a:	6078      	str	r0, [r7, #4]
 810ba4c:	6039      	str	r1, [r7, #0]
      function(_Functor __f)
      : _Function_base()
 810ba4e:	687b      	ldr	r3, [r7, #4]
 810ba50:	4618      	mov	r0, r3
 810ba52:	f7ff fadb 	bl	810b00c <_ZNSt14_Function_baseC1Ev>
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 810ba56:	6838      	ldr	r0, [r7, #0]
 810ba58:	f000 f8d0 	bl	810bbfc <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE21_M_not_empty_functionISC_EEbRKT_>
 810ba5c:	4603      	mov	r3, r0
 810ba5e:	2b00      	cmp	r3, #0
 810ba60:	d00e      	beq.n	810ba80 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_+0x3c>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 810ba62:	687c      	ldr	r4, [r7, #4]
 810ba64:	6838      	ldr	r0, [r7, #0]
 810ba66:	f7ff ffe1 	bl	810ba2c <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>
 810ba6a:	4603      	mov	r3, r0
 810ba6c:	4619      	mov	r1, r3
 810ba6e:	4620      	mov	r0, r4
 810ba70:	f000 f8cf 	bl	810bc12 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_>
	    _M_invoker = &_My_handler::_M_invoke;
 810ba74:	687b      	ldr	r3, [r7, #4]
 810ba76:	4a05      	ldr	r2, [pc, #20]	; (810ba8c <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_+0x48>)
 810ba78:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 810ba7a:	687b      	ldr	r3, [r7, #4]
 810ba7c:	4a04      	ldr	r2, [pc, #16]	; (810ba90 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_+0x4c>)
 810ba7e:	609a      	str	r2, [r3, #8]
	  }
      }
 810ba80:	687b      	ldr	r3, [r7, #4]
 810ba82:	4618      	mov	r0, r3
 810ba84:	370c      	adds	r7, #12
 810ba86:	46bd      	mov	sp, r7
 810ba88:	bd90      	pop	{r4, r7, pc}
 810ba8a:	bf00      	nop
 810ba8c:	0810bc79 	.word	0x0810bc79
 810ba90:	0810bcb9 	.word	0x0810bcb9

0810ba94 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1IJS4_RKS6_RKS7_RKS8_EEEOS3_DpOT_>:
	explicit _Bind(_Functor&& __f, _Args&&... __args)
 810ba94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810ba98:	b086      	sub	sp, #24
 810ba9a:	af02      	add	r7, sp, #8
 810ba9c:	60f8      	str	r0, [r7, #12]
 810ba9e:	60b9      	str	r1, [r7, #8]
 810baa0:	607a      	str	r2, [r7, #4]
 810baa2:	603b      	str	r3, [r7, #0]
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 810baa4:	68b8      	ldr	r0, [r7, #8]
 810baa6:	f000 f826 	bl	810baf6 <_ZSt4moveIRM5IOBusFvhPhmEEONSt16remove_referenceIT_E4typeEOS6_>
 810baaa:	4602      	mov	r2, r0
 810baac:	68fb      	ldr	r3, [r7, #12]
 810baae:	e892 0003 	ldmia.w	r2, {r0, r1}
 810bab2:	e883 0003 	stmia.w	r3, {r0, r1}
 810bab6:	68fb      	ldr	r3, [r7, #12]
 810bab8:	f103 0408 	add.w	r4, r3, #8
 810babc:	6878      	ldr	r0, [r7, #4]
 810babe:	f7ff fe38 	bl	810b732 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810bac2:	4605      	mov	r5, r0
 810bac4:	6838      	ldr	r0, [r7, #0]
 810bac6:	f7ff fe3f 	bl	810b748 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810baca:	4606      	mov	r6, r0
 810bacc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810bace:	f7ff fe46 	bl	810b75e <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810bad2:	4680      	mov	r8, r0
 810bad4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810bad6:	f7ff fe4d 	bl	810b774 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810bada:	4603      	mov	r3, r0
 810badc:	9300      	str	r3, [sp, #0]
 810bade:	4643      	mov	r3, r8
 810bae0:	4632      	mov	r2, r6
 810bae2:	4629      	mov	r1, r5
 810bae4:	4620      	mov	r0, r4
 810bae6:	f000 f921 	bl	810bd2c <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IJS1_RKS3_RKS4_RKS5_ELb1EEEDpOT_>
	{ }
 810baea:	68fb      	ldr	r3, [r7, #12]
 810baec:	4618      	mov	r0, r3
 810baee:	3710      	adds	r7, #16
 810baf0:	46bd      	mov	sp, r7
 810baf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810baf6 <_ZSt4moveIRM5IOBusFvhPhmEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 810baf6:	b480      	push	{r7}
 810baf8:	b083      	sub	sp, #12
 810bafa:	af00      	add	r7, sp, #0
 810bafc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810bafe:	687b      	ldr	r3, [r7, #4]
 810bb00:	4618      	mov	r0, r3
 810bb02:	370c      	adds	r7, #12
 810bb04:	46bd      	mov	sp, r7
 810bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bb0a:	4770      	bx	lr

0810bb0c <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810bb0c:	b580      	push	{r7, lr}
 810bb0e:	b082      	sub	sp, #8
 810bb10:	af00      	add	r7, sp, #0
 810bb12:	6078      	str	r0, [r7, #4]
 810bb14:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 810bb16:	6838      	ldr	r0, [r7, #0]
 810bb18:	f7ff fe82 	bl	810b820 <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810bb1c:	687b      	ldr	r3, [r7, #4]
 810bb1e:	4618      	mov	r0, r3
 810bb20:	3708      	adds	r7, #8
 810bb22:	46bd      	mov	sp, r7
 810bb24:	bd80      	pop	{r7, pc}

0810bb26 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810bb26:	b580      	push	{r7, lr}
 810bb28:	b082      	sub	sp, #8
 810bb2a:	af00      	add	r7, sp, #0
 810bb2c:	6078      	str	r0, [r7, #4]
 810bb2e:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 810bb30:	6838      	ldr	r0, [r7, #0]
 810bb32:	f7ff fec3 	bl	810b8bc <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810bb36:	687b      	ldr	r3, [r7, #4]
 810bb38:	4618      	mov	r0, r3
 810bb3a:	3708      	adds	r7, #8
 810bb3c:	46bd      	mov	sp, r7
 810bb3e:	bd80      	pop	{r7, pc}

0810bb40 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810bb40:	b580      	push	{r7, lr}
 810bb42:	b082      	sub	sp, #8
 810bb44:	af00      	add	r7, sp, #0
 810bb46:	6078      	str	r0, [r7, #4]
 810bb48:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 810bb4a:	6838      	ldr	r0, [r7, #0]
 810bb4c:	f7ff ff10 	bl	810b970 <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810bb50:	687b      	ldr	r3, [r7, #4]
 810bb52:	4618      	mov	r0, r3
 810bb54:	3708      	adds	r7, #8
 810bb56:	46bd      	mov	sp, r7
 810bb58:	bd80      	pop	{r7, pc}

0810bb5a <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_tailERS6_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 810bb5a:	b480      	push	{r7}
 810bb5c:	b083      	sub	sp, #12
 810bb5e:	af00      	add	r7, sp, #0
 810bb60:	6078      	str	r0, [r7, #4]
 810bb62:	687b      	ldr	r3, [r7, #4]
 810bb64:	4618      	mov	r0, r3
 810bb66:	370c      	adds	r7, #12
 810bb68:	46bd      	mov	sp, r7
 810bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bb6e:	4770      	bx	lr

0810bb70 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810bb70:	b580      	push	{r7, lr}
 810bb72:	b082      	sub	sp, #8
 810bb74:	af00      	add	r7, sp, #0
 810bb76:	6078      	str	r0, [r7, #4]
 810bb78:	687b      	ldr	r3, [r7, #4]
 810bb7a:	4618      	mov	r0, r3
 810bb7c:	f000 f805 	bl	810bb8a <_ZNSt10_Head_baseILj0EP5IOBusLb0EE7_M_headERS2_>
 810bb80:	4603      	mov	r3, r0
 810bb82:	4618      	mov	r0, r3
 810bb84:	3708      	adds	r7, #8
 810bb86:	46bd      	mov	sp, r7
 810bb88:	bd80      	pop	{r7, pc}

0810bb8a <_ZNSt10_Head_baseILj0EP5IOBusLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 810bb8a:	b480      	push	{r7}
 810bb8c:	b083      	sub	sp, #12
 810bb8e:	af00      	add	r7, sp, #0
 810bb90:	6078      	str	r0, [r7, #4]
 810bb92:	687b      	ldr	r3, [r7, #4]
 810bb94:	4618      	mov	r0, r3
 810bb96:	370c      	adds	r7, #12
 810bb98:	46bd      	mov	sp, r7
 810bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bb9e:	4770      	bx	lr

0810bba0 <_ZSt4moveIRSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES1_ILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 810bba0:	b480      	push	{r7}
 810bba2:	b083      	sub	sp, #12
 810bba4:	af00      	add	r7, sp, #0
 810bba6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810bba8:	687b      	ldr	r3, [r7, #4]
 810bbaa:	4618      	mov	r0, r3
 810bbac:	370c      	adds	r7, #12
 810bbae:	46bd      	mov	sp, r7
 810bbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bbb4:	4770      	bx	lr

0810bbb6 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>:
      _Tuple_impl(_Tuple_impl&& __in)
 810bbb6:	b590      	push	{r4, r7, lr}
 810bbb8:	b083      	sub	sp, #12
 810bbba:	af00      	add	r7, sp, #0
 810bbbc:	6078      	str	r0, [r7, #4]
 810bbbe:	6039      	str	r1, [r7, #0]
      : _Inherited(std::move(_M_tail(__in))),
 810bbc0:	6838      	ldr	r0, [r7, #0]
 810bbc2:	f7ff ffca 	bl	810bb5a <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_tailERS6_>
 810bbc6:	4603      	mov	r3, r0
 810bbc8:	4618      	mov	r0, r3
 810bbca:	f7ff ffe9 	bl	810bba0 <_ZSt4moveIRSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES1_ILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS8_>
 810bbce:	4603      	mov	r3, r0
	_Base(std::forward<_Head>(_M_head(__in))) { }
 810bbd0:	4619      	mov	r1, r3
 810bbd2:	6878      	ldr	r0, [r7, #4]
 810bbd4:	f7ff fed7 	bl	810b986 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1EOS4_>
 810bbd8:	687c      	ldr	r4, [r7, #4]
 810bbda:	6838      	ldr	r0, [r7, #0]
 810bbdc:	f7ff ffc8 	bl	810bb70 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_headERS6_>
 810bbe0:	4603      	mov	r3, r0
 810bbe2:	4618      	mov	r0, r3
 810bbe4:	f7ff fda5 	bl	810b732 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810bbe8:	4603      	mov	r3, r0
 810bbea:	4619      	mov	r1, r3
 810bbec:	4620      	mov	r0, r4
 810bbee:	f000 f8c3 	bl	810bd78 <_ZNSt10_Head_baseILj0EP5IOBusLb0EEC1IS1_EEOT_>
 810bbf2:	687b      	ldr	r3, [r7, #4]
 810bbf4:	4618      	mov	r0, r3
 810bbf6:	370c      	adds	r7, #12
 810bbf8:	46bd      	mov	sp, r7
 810bbfa:	bd90      	pop	{r4, r7, pc}

0810bbfc <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE21_M_not_empty_functionISC_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 810bbfc:	b480      	push	{r7}
 810bbfe:	b083      	sub	sp, #12
 810bc00:	af00      	add	r7, sp, #0
 810bc02:	6078      	str	r0, [r7, #4]
	  { return true; }
 810bc04:	2301      	movs	r3, #1
 810bc06:	4618      	mov	r0, r3
 810bc08:	370c      	adds	r7, #12
 810bc0a:	46bd      	mov	sp, r7
 810bc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bc10:	4770      	bx	lr

0810bc12 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 810bc12:	b590      	push	{r4, r7, lr}
 810bc14:	b085      	sub	sp, #20
 810bc16:	af00      	add	r7, sp, #0
 810bc18:	6078      	str	r0, [r7, #4]
 810bc1a:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 810bc1c:	6838      	ldr	r0, [r7, #0]
 810bc1e:	f7ff ff05 	bl	810ba2c <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>
 810bc22:	4603      	mov	r3, r0
 810bc24:	4622      	mov	r2, r4
 810bc26:	4619      	mov	r1, r3
 810bc28:	6878      	ldr	r0, [r7, #4]
 810bc2a:	f000 f8b6 	bl	810bd9a <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_St17integral_constantIbLb0EE>
 810bc2e:	bf00      	nop
 810bc30:	3714      	adds	r7, #20
 810bc32:	46bd      	mov	sp, r7
 810bc34:	bd90      	pop	{r4, r7, pc}

0810bc36 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810bc36:	b480      	push	{r7}
 810bc38:	b083      	sub	sp, #12
 810bc3a:	af00      	add	r7, sp, #0
 810bc3c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810bc3e:	687b      	ldr	r3, [r7, #4]
 810bc40:	4618      	mov	r0, r3
 810bc42:	370c      	adds	r7, #12
 810bc44:	46bd      	mov	sp, r7
 810bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bc4a:	4770      	bx	lr

0810bc4c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810bc4c:	b480      	push	{r7}
 810bc4e:	b083      	sub	sp, #12
 810bc50:	af00      	add	r7, sp, #0
 810bc52:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810bc54:	687b      	ldr	r3, [r7, #4]
 810bc56:	4618      	mov	r0, r3
 810bc58:	370c      	adds	r7, #12
 810bc5a:	46bd      	mov	sp, r7
 810bc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bc60:	4770      	bx	lr

0810bc62 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810bc62:	b480      	push	{r7}
 810bc64:	b083      	sub	sp, #12
 810bc66:	af00      	add	r7, sp, #0
 810bc68:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810bc6a:	687b      	ldr	r3, [r7, #4]
 810bc6c:	4618      	mov	r0, r3
 810bc6e:	370c      	adds	r7, #12
 810bc70:	46bd      	mov	sp, r7
 810bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bc76:	4770      	bx	lr

0810bc78 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE9_M_invokeERKSt9_Any_dataOhOS0_Om>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 810bc78:	b5f0      	push	{r4, r5, r6, r7, lr}
 810bc7a:	b085      	sub	sp, #20
 810bc7c:	af00      	add	r7, sp, #0
 810bc7e:	60f8      	str	r0, [r7, #12]
 810bc80:	60b9      	str	r1, [r7, #8]
 810bc82:	607a      	str	r2, [r7, #4]
 810bc84:	603b      	str	r3, [r7, #0]
	(*_Base::_M_get_pointer(__functor))(
 810bc86:	68f8      	ldr	r0, [r7, #12]
 810bc88:	f000 f8a3 	bl	810bdd2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>
 810bc8c:	4604      	mov	r4, r0
 810bc8e:	68b8      	ldr	r0, [r7, #8]
 810bc90:	f7ff ffd1 	bl	810bc36 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810bc94:	4605      	mov	r5, r0
 810bc96:	6878      	ldr	r0, [r7, #4]
 810bc98:	f7ff ffd8 	bl	810bc4c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810bc9c:	4606      	mov	r6, r0
 810bc9e:	6838      	ldr	r0, [r7, #0]
 810bca0:	f7ff ffdf 	bl	810bc62 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810bca4:	4603      	mov	r3, r0
 810bca6:	4632      	mov	r2, r6
 810bca8:	4629      	mov	r1, r5
 810bcaa:	4620      	mov	r0, r4
 810bcac:	f000 f9a9 	bl	810c002 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEclIJhS1_mEvEET0_DpOT_>
      }
 810bcb0:	bf00      	nop
 810bcb2:	3714      	adds	r7, #20
 810bcb4:	46bd      	mov	sp, r7
 810bcb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810bcb8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 810bcb8:	b5b0      	push	{r4, r5, r7, lr}
 810bcba:	b086      	sub	sp, #24
 810bcbc:	af00      	add	r7, sp, #0
 810bcbe:	60f8      	str	r0, [r7, #12]
 810bcc0:	60b9      	str	r1, [r7, #8]
 810bcc2:	4613      	mov	r3, r2
 810bcc4:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 810bcc6:	79fb      	ldrb	r3, [r7, #7]
 810bcc8:	2b03      	cmp	r3, #3
 810bcca:	d827      	bhi.n	810bd1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
 810bccc:	a201      	add	r2, pc, #4	; (adr r2, 810bcd4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1c>)
 810bcce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810bcd2:	bf00      	nop
 810bcd4:	0810bce5 	.word	0x0810bce5
 810bcd8:	0810bcf3 	.word	0x0810bcf3
 810bcdc:	0810bd07 	.word	0x0810bd07
 810bce0:	0810bd13 	.word	0x0810bd13
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
 810bce4:	68f8      	ldr	r0, [r7, #12]
 810bce6:	f000 f9af 	bl	810c048 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 810bcea:	4602      	mov	r2, r0
 810bcec:	4b0e      	ldr	r3, [pc, #56]	; (810bd28 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x70>)
 810bcee:	6013      	str	r3, [r2, #0]
	      break;
 810bcf0:	e014      	b.n	810bd1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 810bcf2:	68f8      	ldr	r0, [r7, #12]
 810bcf4:	f000 f9b4 	bl	810c060 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 810bcf8:	4604      	mov	r4, r0
 810bcfa:	68b8      	ldr	r0, [r7, #8]
 810bcfc:	f000 f869 	bl	810bdd2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>
 810bd00:	4603      	mov	r3, r0
 810bd02:	6023      	str	r3, [r4, #0]
	      break;
 810bd04:	e00a      	b.n	810bd1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
	      _M_clone(__dest, __source, _Local_storage());
 810bd06:	462a      	mov	r2, r5
 810bd08:	68b9      	ldr	r1, [r7, #8]
 810bd0a:	68f8      	ldr	r0, [r7, #12]
 810bd0c:	f000 f9b4 	bl	810c078 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE8_M_cloneERSt9_Any_dataRKSE_St17integral_constantIbLb0EE>
	      break;
 810bd10:	e004      	b.n	810bd1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
	      _M_destroy(__dest, _Local_storage());
 810bd12:	4621      	mov	r1, r4
 810bd14:	68f8      	ldr	r0, [r7, #12]
 810bd16:	f000 f9cd 	bl	810c0b4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
 810bd1a:	bf00      	nop
	  return false;
 810bd1c:	2300      	movs	r3, #0
	}
 810bd1e:	4618      	mov	r0, r3
 810bd20:	3718      	adds	r7, #24
 810bd22:	46bd      	mov	sp, r7
 810bd24:	bdb0      	pop	{r4, r5, r7, pc}
 810bd26:	bf00      	nop
 810bd28:	08110a98 	.word	0x08110a98

0810bd2c <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IJS1_RKS3_RKS4_RKS5_ELb1EEEDpOT_>:
        constexpr tuple(_UElements&&... __elements)
 810bd2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810bd30:	b086      	sub	sp, #24
 810bd32:	af02      	add	r7, sp, #8
 810bd34:	60f8      	str	r0, [r7, #12]
 810bd36:	60b9      	str	r1, [r7, #8]
 810bd38:	607a      	str	r2, [r7, #4]
 810bd3a:	603b      	str	r3, [r7, #0]
        : _Inherited(std::forward<_UElements>(__elements)...) { }
 810bd3c:	68fc      	ldr	r4, [r7, #12]
 810bd3e:	68b8      	ldr	r0, [r7, #8]
 810bd40:	f7ff fcf7 	bl	810b732 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810bd44:	4605      	mov	r5, r0
 810bd46:	6878      	ldr	r0, [r7, #4]
 810bd48:	f7ff fcfe 	bl	810b748 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810bd4c:	4606      	mov	r6, r0
 810bd4e:	6838      	ldr	r0, [r7, #0]
 810bd50:	f7ff fd05 	bl	810b75e <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810bd54:	4680      	mov	r8, r0
 810bd56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810bd58:	f7ff fd0c 	bl	810b774 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810bd5c:	4603      	mov	r3, r0
 810bd5e:	9300      	str	r3, [sp, #0]
 810bd60:	4643      	mov	r3, r8
 810bd62:	4632      	mov	r2, r6
 810bd64:	4629      	mov	r1, r5
 810bd66:	4620      	mov	r0, r4
 810bd68:	f000 f9b6 	bl	810c0d8 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IS1_JRKS3_RKS4_RKS5_EvEEOT_DpOT0_>
 810bd6c:	68fb      	ldr	r3, [r7, #12]
 810bd6e:	4618      	mov	r0, r3
 810bd70:	3710      	adds	r7, #16
 810bd72:	46bd      	mov	sp, r7
 810bd74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810bd78 <_ZNSt10_Head_baseILj0EP5IOBusLb0EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810bd78:	b580      	push	{r7, lr}
 810bd7a:	b082      	sub	sp, #8
 810bd7c:	af00      	add	r7, sp, #0
 810bd7e:	6078      	str	r0, [r7, #4]
 810bd80:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 810bd82:	6838      	ldr	r0, [r7, #0]
 810bd84:	f7ff fcd5 	bl	810b732 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810bd88:	4603      	mov	r3, r0
 810bd8a:	681a      	ldr	r2, [r3, #0]
 810bd8c:	687b      	ldr	r3, [r7, #4]
 810bd8e:	601a      	str	r2, [r3, #0]
 810bd90:	687b      	ldr	r3, [r7, #4]
 810bd92:	4618      	mov	r0, r3
 810bd94:	3708      	adds	r7, #8
 810bd96:	46bd      	mov	sp, r7
 810bd98:	bd80      	pop	{r7, pc}

0810bd9a <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_St17integral_constantIbLb0EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
 810bd9a:	b5b0      	push	{r4, r5, r7, lr}
 810bd9c:	b084      	sub	sp, #16
 810bd9e:	af00      	add	r7, sp, #0
 810bda0:	60f8      	str	r0, [r7, #12]
 810bda2:	60b9      	str	r1, [r7, #8]
 810bda4:	713a      	strb	r2, [r7, #4]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 810bda6:	68b8      	ldr	r0, [r7, #8]
 810bda8:	f7ff fe40 	bl	810ba2c <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>
 810bdac:	4605      	mov	r5, r0
 810bdae:	200c      	movs	r0, #12
 810bdb0:	f7fe ff6e 	bl	810ac90 <_Znwj>
 810bdb4:	4603      	mov	r3, r0
 810bdb6:	461c      	mov	r4, r3
 810bdb8:	4629      	mov	r1, r5
 810bdba:	4620      	mov	r0, r4
 810bdbc:	f7ff fe15 	bl	810b9ea <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1EOSA_>
 810bdc0:	68f8      	ldr	r0, [r7, #12]
 810bdc2:	f000 f94d 	bl	810c060 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 810bdc6:	4603      	mov	r3, r0
 810bdc8:	601c      	str	r4, [r3, #0]
 810bdca:	bf00      	nop
 810bdcc:	3710      	adds	r7, #16
 810bdce:	46bd      	mov	sp, r7
 810bdd0:	bdb0      	pop	{r4, r5, r7, pc}

0810bdd2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 810bdd2:	b580      	push	{r7, lr}
 810bdd4:	b084      	sub	sp, #16
 810bdd6:	af00      	add	r7, sp, #0
 810bdd8:	6078      	str	r0, [r7, #4]
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
 810bdda:	6878      	ldr	r0, [r7, #4]
 810bddc:	f000 f9a2 	bl	810c124 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>
 810bde0:	4603      	mov	r3, r0
	  const _Functor* __ptr =
 810bde2:	681b      	ldr	r3, [r3, #0]
 810bde4:	60fb      	str	r3, [r7, #12]
	  return const_cast<_Functor*>(__ptr);
 810bde6:	68fb      	ldr	r3, [r7, #12]
	}
 810bde8:	4618      	mov	r0, r3
 810bdea:	3710      	adds	r7, #16
 810bdec:	46bd      	mov	sp, r7
 810bdee:	bd80      	pop	{r7, pc}

0810bdf0 <_ZNSt5tupleIJOhOPhOmEEC1IJhS1_mELb1EEEDpOT_>:
        constexpr tuple(_UElements&&... __elements)
 810bdf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 810bdf2:	b085      	sub	sp, #20
 810bdf4:	af00      	add	r7, sp, #0
 810bdf6:	60f8      	str	r0, [r7, #12]
 810bdf8:	60b9      	str	r1, [r7, #8]
 810bdfa:	607a      	str	r2, [r7, #4]
 810bdfc:	603b      	str	r3, [r7, #0]
        : _Inherited(std::forward<_UElements>(__elements)...) { }
 810bdfe:	68fc      	ldr	r4, [r7, #12]
 810be00:	68b8      	ldr	r0, [r7, #8]
 810be02:	f7ff ff18 	bl	810bc36 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810be06:	4605      	mov	r5, r0
 810be08:	6878      	ldr	r0, [r7, #4]
 810be0a:	f7ff ff1f 	bl	810bc4c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810be0e:	4606      	mov	r6, r0
 810be10:	6838      	ldr	r0, [r7, #0]
 810be12:	f7ff ff26 	bl	810bc62 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810be16:	4603      	mov	r3, r0
 810be18:	4632      	mov	r2, r6
 810be1a:	4629      	mov	r1, r5
 810be1c:	4620      	mov	r0, r4
 810be1e:	f000 f805 	bl	810be2c <_ZNSt11_Tuple_implILj0EJOhOPhOmEEC1IhJS1_mEvEEOT_DpOT0_>
 810be22:	68fb      	ldr	r3, [r7, #12]
 810be24:	4618      	mov	r0, r3
 810be26:	3714      	adds	r7, #20
 810be28:	46bd      	mov	sp, r7
 810be2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810be2c <_ZNSt11_Tuple_implILj0EJOhOPhOmEEC1IhJS1_mEvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 810be2c:	b5b0      	push	{r4, r5, r7, lr}
 810be2e:	b084      	sub	sp, #16
 810be30:	af00      	add	r7, sp, #0
 810be32:	60f8      	str	r0, [r7, #12]
 810be34:	60b9      	str	r1, [r7, #8]
 810be36:	607a      	str	r2, [r7, #4]
 810be38:	603b      	str	r3, [r7, #0]
	  _Base(std::forward<_UHead>(__head)) { }
 810be3a:	68fc      	ldr	r4, [r7, #12]
 810be3c:	6878      	ldr	r0, [r7, #4]
 810be3e:	f7ff ff05 	bl	810bc4c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810be42:	4605      	mov	r5, r0
 810be44:	6838      	ldr	r0, [r7, #0]
 810be46:	f7ff ff0c 	bl	810bc62 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810be4a:	4603      	mov	r3, r0
 810be4c:	461a      	mov	r2, r3
 810be4e:	4629      	mov	r1, r5
 810be50:	4620      	mov	r0, r4
 810be52:	f000 f810 	bl	810be76 <_ZNSt11_Tuple_implILj1EJOPhOmEEC1IS0_JmEvEEOT_DpOT0_>
 810be56:	68fb      	ldr	r3, [r7, #12]
 810be58:	f103 0408 	add.w	r4, r3, #8
 810be5c:	68b8      	ldr	r0, [r7, #8]
 810be5e:	f7ff feea 	bl	810bc36 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810be62:	4603      	mov	r3, r0
 810be64:	4619      	mov	r1, r3
 810be66:	4620      	mov	r0, r4
 810be68:	f000 f856 	bl	810bf18 <_ZNSt10_Head_baseILj0EOhLb0EEC1IhEEOT_>
 810be6c:	68fb      	ldr	r3, [r7, #12]
 810be6e:	4618      	mov	r0, r3
 810be70:	3710      	adds	r7, #16
 810be72:	46bd      	mov	sp, r7
 810be74:	bdb0      	pop	{r4, r5, r7, pc}

0810be76 <_ZNSt11_Tuple_implILj1EJOPhOmEEC1IS0_JmEvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 810be76:	b590      	push	{r4, r7, lr}
 810be78:	b085      	sub	sp, #20
 810be7a:	af00      	add	r7, sp, #0
 810be7c:	60f8      	str	r0, [r7, #12]
 810be7e:	60b9      	str	r1, [r7, #8]
 810be80:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 810be82:	68fc      	ldr	r4, [r7, #12]
 810be84:	6878      	ldr	r0, [r7, #4]
 810be86:	f7ff feec 	bl	810bc62 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810be8a:	4603      	mov	r3, r0
 810be8c:	4619      	mov	r1, r3
 810be8e:	4620      	mov	r0, r4
 810be90:	f000 f80f 	bl	810beb2 <_ZNSt11_Tuple_implILj2EJOmEEC1ImEEOT_>
 810be94:	68fb      	ldr	r3, [r7, #12]
 810be96:	1d1c      	adds	r4, r3, #4
 810be98:	68b8      	ldr	r0, [r7, #8]
 810be9a:	f7ff fed7 	bl	810bc4c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810be9e:	4603      	mov	r3, r0
 810bea0:	4619      	mov	r1, r3
 810bea2:	4620      	mov	r0, r4
 810bea4:	f000 f828 	bl	810bef8 <_ZNSt10_Head_baseILj1EOPhLb0EEC1IS0_EEOT_>
 810bea8:	68fb      	ldr	r3, [r7, #12]
 810beaa:	4618      	mov	r0, r3
 810beac:	3714      	adds	r7, #20
 810beae:	46bd      	mov	sp, r7
 810beb0:	bd90      	pop	{r4, r7, pc}

0810beb2 <_ZNSt11_Tuple_implILj2EJOmEEC1ImEEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 810beb2:	b590      	push	{r4, r7, lr}
 810beb4:	b083      	sub	sp, #12
 810beb6:	af00      	add	r7, sp, #0
 810beb8:	6078      	str	r0, [r7, #4]
 810beba:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 810bebc:	687c      	ldr	r4, [r7, #4]
 810bebe:	6838      	ldr	r0, [r7, #0]
 810bec0:	f7ff fecf 	bl	810bc62 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810bec4:	4603      	mov	r3, r0
 810bec6:	4619      	mov	r1, r3
 810bec8:	4620      	mov	r0, r4
 810beca:	f000 f805 	bl	810bed8 <_ZNSt10_Head_baseILj2EOmLb0EEC1ImEEOT_>
 810bece:	687b      	ldr	r3, [r7, #4]
 810bed0:	4618      	mov	r0, r3
 810bed2:	370c      	adds	r7, #12
 810bed4:	46bd      	mov	sp, r7
 810bed6:	bd90      	pop	{r4, r7, pc}

0810bed8 <_ZNSt10_Head_baseILj2EOmLb0EEC1ImEEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810bed8:	b580      	push	{r7, lr}
 810beda:	b082      	sub	sp, #8
 810bedc:	af00      	add	r7, sp, #0
 810bede:	6078      	str	r0, [r7, #4]
 810bee0:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 810bee2:	6838      	ldr	r0, [r7, #0]
 810bee4:	f7ff febd 	bl	810bc62 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810bee8:	4602      	mov	r2, r0
 810beea:	687b      	ldr	r3, [r7, #4]
 810beec:	601a      	str	r2, [r3, #0]
 810beee:	687b      	ldr	r3, [r7, #4]
 810bef0:	4618      	mov	r0, r3
 810bef2:	3708      	adds	r7, #8
 810bef4:	46bd      	mov	sp, r7
 810bef6:	bd80      	pop	{r7, pc}

0810bef8 <_ZNSt10_Head_baseILj1EOPhLb0EEC1IS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810bef8:	b580      	push	{r7, lr}
 810befa:	b082      	sub	sp, #8
 810befc:	af00      	add	r7, sp, #0
 810befe:	6078      	str	r0, [r7, #4]
 810bf00:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 810bf02:	6838      	ldr	r0, [r7, #0]
 810bf04:	f7ff fea2 	bl	810bc4c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810bf08:	4602      	mov	r2, r0
 810bf0a:	687b      	ldr	r3, [r7, #4]
 810bf0c:	601a      	str	r2, [r3, #0]
 810bf0e:	687b      	ldr	r3, [r7, #4]
 810bf10:	4618      	mov	r0, r3
 810bf12:	3708      	adds	r7, #8
 810bf14:	46bd      	mov	sp, r7
 810bf16:	bd80      	pop	{r7, pc}

0810bf18 <_ZNSt10_Head_baseILj0EOhLb0EEC1IhEEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810bf18:	b580      	push	{r7, lr}
 810bf1a:	b082      	sub	sp, #8
 810bf1c:	af00      	add	r7, sp, #0
 810bf1e:	6078      	str	r0, [r7, #4]
 810bf20:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 810bf22:	6838      	ldr	r0, [r7, #0]
 810bf24:	f7ff fe87 	bl	810bc36 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810bf28:	4602      	mov	r2, r0
 810bf2a:	687b      	ldr	r3, [r7, #4]
 810bf2c:	601a      	str	r2, [r3, #0]
 810bf2e:	687b      	ldr	r3, [r7, #4]
 810bf30:	4618      	mov	r0, r3
 810bf32:	3708      	adds	r7, #8
 810bf34:	46bd      	mov	sp, r7
 810bf36:	bd80      	pop	{r7, pc}

0810bf38 <_ZNSt11_Tuple_implILj2EJOmEE7_M_headERS1_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810bf38:	b580      	push	{r7, lr}
 810bf3a:	b082      	sub	sp, #8
 810bf3c:	af00      	add	r7, sp, #0
 810bf3e:	6078      	str	r0, [r7, #4]
 810bf40:	687b      	ldr	r3, [r7, #4]
 810bf42:	4618      	mov	r0, r3
 810bf44:	f000 f805 	bl	810bf52 <_ZNSt10_Head_baseILj2EOmLb0EE7_M_headERS1_>
 810bf48:	4603      	mov	r3, r0
 810bf4a:	4618      	mov	r0, r3
 810bf4c:	3708      	adds	r7, #8
 810bf4e:	46bd      	mov	sp, r7
 810bf50:	bd80      	pop	{r7, pc}

0810bf52 <_ZNSt10_Head_baseILj2EOmLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 810bf52:	b480      	push	{r7}
 810bf54:	b083      	sub	sp, #12
 810bf56:	af00      	add	r7, sp, #0
 810bf58:	6078      	str	r0, [r7, #4]
 810bf5a:	687b      	ldr	r3, [r7, #4]
 810bf5c:	681b      	ldr	r3, [r3, #0]
 810bf5e:	4618      	mov	r0, r3
 810bf60:	370c      	adds	r7, #12
 810bf62:	46bd      	mov	sp, r7
 810bf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bf68:	4770      	bx	lr

0810bf6a <_ZSt7forwardIOmEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810bf6a:	b480      	push	{r7}
 810bf6c:	b083      	sub	sp, #12
 810bf6e:	af00      	add	r7, sp, #0
 810bf70:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810bf72:	687b      	ldr	r3, [r7, #4]
 810bf74:	4618      	mov	r0, r3
 810bf76:	370c      	adds	r7, #12
 810bf78:	46bd      	mov	sp, r7
 810bf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bf7e:	4770      	bx	lr

0810bf80 <_ZNSt11_Tuple_implILj1EJOPhOmEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810bf80:	b580      	push	{r7, lr}
 810bf82:	b082      	sub	sp, #8
 810bf84:	af00      	add	r7, sp, #0
 810bf86:	6078      	str	r0, [r7, #4]
 810bf88:	687b      	ldr	r3, [r7, #4]
 810bf8a:	3304      	adds	r3, #4
 810bf8c:	4618      	mov	r0, r3
 810bf8e:	f000 f805 	bl	810bf9c <_ZNSt10_Head_baseILj1EOPhLb0EE7_M_headERS2_>
 810bf92:	4603      	mov	r3, r0
 810bf94:	4618      	mov	r0, r3
 810bf96:	3708      	adds	r7, #8
 810bf98:	46bd      	mov	sp, r7
 810bf9a:	bd80      	pop	{r7, pc}

0810bf9c <_ZNSt10_Head_baseILj1EOPhLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 810bf9c:	b480      	push	{r7}
 810bf9e:	b083      	sub	sp, #12
 810bfa0:	af00      	add	r7, sp, #0
 810bfa2:	6078      	str	r0, [r7, #4]
 810bfa4:	687b      	ldr	r3, [r7, #4]
 810bfa6:	681b      	ldr	r3, [r3, #0]
 810bfa8:	4618      	mov	r0, r3
 810bfaa:	370c      	adds	r7, #12
 810bfac:	46bd      	mov	sp, r7
 810bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bfb2:	4770      	bx	lr

0810bfb4 <_ZSt7forwardIOPhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810bfb4:	b480      	push	{r7}
 810bfb6:	b083      	sub	sp, #12
 810bfb8:	af00      	add	r7, sp, #0
 810bfba:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810bfbc:	687b      	ldr	r3, [r7, #4]
 810bfbe:	4618      	mov	r0, r3
 810bfc0:	370c      	adds	r7, #12
 810bfc2:	46bd      	mov	sp, r7
 810bfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bfc8:	4770      	bx	lr

0810bfca <_ZSt16forward_as_tupleIJhPhmEESt5tupleIJDpOT_EES4_>:

  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
 810bfca:	b5b0      	push	{r4, r5, r7, lr}
 810bfcc:	b084      	sub	sp, #16
 810bfce:	af00      	add	r7, sp, #0
 810bfd0:	60f8      	str	r0, [r7, #12]
 810bfd2:	60b9      	str	r1, [r7, #8]
 810bfd4:	607a      	str	r2, [r7, #4]
 810bfd6:	603b      	str	r3, [r7, #0]
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 810bfd8:	68b8      	ldr	r0, [r7, #8]
 810bfda:	f7ff fe2c 	bl	810bc36 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810bfde:	4604      	mov	r4, r0
 810bfe0:	6878      	ldr	r0, [r7, #4]
 810bfe2:	f7ff fe33 	bl	810bc4c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810bfe6:	4605      	mov	r5, r0
 810bfe8:	6838      	ldr	r0, [r7, #0]
 810bfea:	f7ff fe3a 	bl	810bc62 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810bfee:	4603      	mov	r3, r0
 810bff0:	462a      	mov	r2, r5
 810bff2:	4621      	mov	r1, r4
 810bff4:	68f8      	ldr	r0, [r7, #12]
 810bff6:	f7ff fefb 	bl	810bdf0 <_ZNSt5tupleIJOhOPhOmEEC1IJhS1_mELb1EEEDpOT_>
 810bffa:	68f8      	ldr	r0, [r7, #12]
 810bffc:	3710      	adds	r7, #16
 810bffe:	46bd      	mov	sp, r7
 810c000:	bdb0      	pop	{r4, r5, r7, pc}

0810c002 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEclIJhS1_mEvEET0_DpOT_>:
	operator()(_Args&&... __args)
 810c002:	b5f0      	push	{r4, r5, r6, r7, lr}
 810c004:	b089      	sub	sp, #36	; 0x24
 810c006:	af00      	add	r7, sp, #0
 810c008:	60f8      	str	r0, [r7, #12]
 810c00a:	60b9      	str	r1, [r7, #8]
 810c00c:	607a      	str	r2, [r7, #4]
 810c00e:	603b      	str	r3, [r7, #0]
	      _Bound_indexes());
 810c010:	68b8      	ldr	r0, [r7, #8]
 810c012:	f7ff fe10 	bl	810bc36 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810c016:	4604      	mov	r4, r0
 810c018:	6878      	ldr	r0, [r7, #4]
 810c01a:	f7ff fe17 	bl	810bc4c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810c01e:	4605      	mov	r5, r0
 810c020:	6838      	ldr	r0, [r7, #0]
 810c022:	f7ff fe1e 	bl	810bc62 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810c026:	4603      	mov	r3, r0
 810c028:	f107 0010 	add.w	r0, r7, #16
 810c02c:	462a      	mov	r2, r5
 810c02e:	4621      	mov	r1, r4
 810c030:	f7ff ffcb 	bl	810bfca <_ZSt16forward_as_tupleIJhPhmEESt5tupleIJDpOT_EES4_>
 810c034:	f107 0310 	add.w	r3, r7, #16
 810c038:	4632      	mov	r2, r6
 810c03a:	4619      	mov	r1, r3
 810c03c:	68f8      	ldr	r0, [r7, #12]
 810c03e:	f000 f8a2 	bl	810c186 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEE6__callIvJOhOS1_OmEJLj0ELj1ELj2ELj3EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>
	}
 810c042:	3724      	adds	r7, #36	; 0x24
 810c044:	46bd      	mov	sp, r7
 810c046:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810c048 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
 810c048:	b580      	push	{r7, lr}
 810c04a:	b082      	sub	sp, #8
 810c04c:	af00      	add	r7, sp, #0
 810c04e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 810c050:	6878      	ldr	r0, [r7, #4]
 810c052:	f7ff fa46 	bl	810b4e2 <_ZNSt9_Any_data9_M_accessEv>
 810c056:	4603      	mov	r3, r0
 810c058:	4618      	mov	r0, r3
 810c05a:	3708      	adds	r7, #8
 810c05c:	46bd      	mov	sp, r7
 810c05e:	bd80      	pop	{r7, pc}

0810c060 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>:
      _M_access()
 810c060:	b580      	push	{r7, lr}
 810c062:	b082      	sub	sp, #8
 810c064:	af00      	add	r7, sp, #0
 810c066:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 810c068:	6878      	ldr	r0, [r7, #4]
 810c06a:	f7ff fa3a 	bl	810b4e2 <_ZNSt9_Any_data9_M_accessEv>
 810c06e:	4603      	mov	r3, r0
 810c070:	4618      	mov	r0, r3
 810c072:	3708      	adds	r7, #8
 810c074:	46bd      	mov	sp, r7
 810c076:	bd80      	pop	{r7, pc}

0810c078 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE8_M_cloneERSt9_Any_dataRKSE_St17integral_constantIbLb0EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
 810c078:	b5b0      	push	{r4, r5, r7, lr}
 810c07a:	b084      	sub	sp, #16
 810c07c:	af00      	add	r7, sp, #0
 810c07e:	60f8      	str	r0, [r7, #12]
 810c080:	60b9      	str	r1, [r7, #8]
 810c082:	713a      	strb	r2, [r7, #4]
	    new _Functor(*__source._M_access<_Functor*>());
 810c084:	68b8      	ldr	r0, [r7, #8]
 810c086:	f000 f84d 	bl	810c124 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>
 810c08a:	4603      	mov	r3, r0
	  __dest._M_access<_Functor*>() =
 810c08c:	681d      	ldr	r5, [r3, #0]
	    new _Functor(*__source._M_access<_Functor*>());
 810c08e:	200c      	movs	r0, #12
 810c090:	f7fe fdfe 	bl	810ac90 <_Znwj>
 810c094:	4603      	mov	r3, r0
 810c096:	461c      	mov	r4, r3
	  __dest._M_access<_Functor*>() =
 810c098:	4623      	mov	r3, r4
 810c09a:	462a      	mov	r2, r5
 810c09c:	ca07      	ldmia	r2, {r0, r1, r2}
 810c09e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 810c0a2:	68f8      	ldr	r0, [r7, #12]
 810c0a4:	f7ff ffdc 	bl	810c060 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 810c0a8:	4603      	mov	r3, r0
 810c0aa:	601c      	str	r4, [r3, #0]
	}
 810c0ac:	bf00      	nop
 810c0ae:	3710      	adds	r7, #16
 810c0b0:	46bd      	mov	sp, r7
 810c0b2:	bdb0      	pop	{r4, r5, r7, pc}

0810c0b4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
 810c0b4:	b580      	push	{r7, lr}
 810c0b6:	b082      	sub	sp, #8
 810c0b8:	af00      	add	r7, sp, #0
 810c0ba:	6078      	str	r0, [r7, #4]
 810c0bc:	7039      	strb	r1, [r7, #0]
	  delete __victim._M_access<_Functor*>();
 810c0be:	6878      	ldr	r0, [r7, #4]
 810c0c0:	f7ff ffce 	bl	810c060 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 810c0c4:	4603      	mov	r3, r0
 810c0c6:	681b      	ldr	r3, [r3, #0]
 810c0c8:	210c      	movs	r1, #12
 810c0ca:	4618      	mov	r0, r3
 810c0cc:	f001 fecf 	bl	810de6e <_ZdlPvj>
	}
 810c0d0:	bf00      	nop
 810c0d2:	3708      	adds	r7, #8
 810c0d4:	46bd      	mov	sp, r7
 810c0d6:	bd80      	pop	{r7, pc}

0810c0d8 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IS1_JRKS3_RKS4_RKS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 810c0d8:	b5b0      	push	{r4, r5, r7, lr}
 810c0da:	b084      	sub	sp, #16
 810c0dc:	af00      	add	r7, sp, #0
 810c0de:	60f8      	str	r0, [r7, #12]
 810c0e0:	60b9      	str	r1, [r7, #8]
 810c0e2:	607a      	str	r2, [r7, #4]
 810c0e4:	603b      	str	r3, [r7, #0]
	  _Base(std::forward<_UHead>(__head)) { }
 810c0e6:	6878      	ldr	r0, [r7, #4]
 810c0e8:	f7ff fb2e 	bl	810b748 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810c0ec:	4604      	mov	r4, r0
 810c0ee:	6838      	ldr	r0, [r7, #0]
 810c0f0:	f7ff fb35 	bl	810b75e <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810c0f4:	4605      	mov	r5, r0
 810c0f6:	6a38      	ldr	r0, [r7, #32]
 810c0f8:	f7ff fb3c 	bl	810b774 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810c0fc:	4603      	mov	r3, r0
 810c0fe:	462a      	mov	r2, r5
 810c100:	4621      	mov	r1, r4
 810c102:	68f8      	ldr	r0, [r7, #12]
 810c104:	f000 f887 	bl	810c216 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1ERKS1_RKS2_RKS3_>
 810c108:	68fc      	ldr	r4, [r7, #12]
 810c10a:	68b8      	ldr	r0, [r7, #8]
 810c10c:	f7ff fb11 	bl	810b732 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810c110:	4603      	mov	r3, r0
 810c112:	4619      	mov	r1, r3
 810c114:	4620      	mov	r0, r4
 810c116:	f7ff fe2f 	bl	810bd78 <_ZNSt10_Head_baseILj0EP5IOBusLb0EEC1IS1_EEOT_>
 810c11a:	68fb      	ldr	r3, [r7, #12]
 810c11c:	4618      	mov	r0, r3
 810c11e:	3710      	adds	r7, #16
 810c120:	46bd      	mov	sp, r7
 810c122:	bdb0      	pop	{r4, r5, r7, pc}

0810c124 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>:
      _M_access() const
 810c124:	b580      	push	{r7, lr}
 810c126:	b082      	sub	sp, #8
 810c128:	af00      	add	r7, sp, #0
 810c12a:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 810c12c:	6878      	ldr	r0, [r7, #4]
 810c12e:	f7ff f9e3 	bl	810b4f8 <_ZNKSt9_Any_data9_M_accessEv>
 810c132:	4603      	mov	r3, r0
 810c134:	4618      	mov	r0, r3
 810c136:	3708      	adds	r7, #8
 810c138:	46bd      	mov	sp, r7
 810c13a:	bd80      	pop	{r7, pc}

0810c13c <_ZNSt11_Tuple_implILj0EJOhOPhOmEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810c13c:	b580      	push	{r7, lr}
 810c13e:	b082      	sub	sp, #8
 810c140:	af00      	add	r7, sp, #0
 810c142:	6078      	str	r0, [r7, #4]
 810c144:	687b      	ldr	r3, [r7, #4]
 810c146:	3308      	adds	r3, #8
 810c148:	4618      	mov	r0, r3
 810c14a:	f000 f805 	bl	810c158 <_ZNSt10_Head_baseILj0EOhLb0EE7_M_headERS1_>
 810c14e:	4603      	mov	r3, r0
 810c150:	4618      	mov	r0, r3
 810c152:	3708      	adds	r7, #8
 810c154:	46bd      	mov	sp, r7
 810c156:	bd80      	pop	{r7, pc}

0810c158 <_ZNSt10_Head_baseILj0EOhLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 810c158:	b480      	push	{r7}
 810c15a:	b083      	sub	sp, #12
 810c15c:	af00      	add	r7, sp, #0
 810c15e:	6078      	str	r0, [r7, #4]
 810c160:	687b      	ldr	r3, [r7, #4]
 810c162:	681b      	ldr	r3, [r3, #0]
 810c164:	4618      	mov	r0, r3
 810c166:	370c      	adds	r7, #12
 810c168:	46bd      	mov	sp, r7
 810c16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c16e:	4770      	bx	lr

0810c170 <_ZSt7forwardIOhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810c170:	b480      	push	{r7}
 810c172:	b083      	sub	sp, #12
 810c174:	af00      	add	r7, sp, #0
 810c176:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810c178:	687b      	ldr	r3, [r7, #4]
 810c17a:	4618      	mov	r0, r3
 810c17c:	370c      	adds	r7, #12
 810c17e:	46bd      	mov	sp, r7
 810c180:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c184:	4770      	bx	lr

0810c186 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEE6__callIvJOhOS1_OmEJLj0ELj1ELj2ELj3EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>:
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 810c186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810c18a:	b08a      	sub	sp, #40	; 0x28
 810c18c:	af02      	add	r7, sp, #8
 810c18e:	60f8      	str	r0, [r7, #12]
 810c190:	60b9      	str	r1, [r7, #8]
 810c192:	713a      	strb	r2, [r7, #4]
	  return std::__invoke(_M_f,
 810c194:	68fc      	ldr	r4, [r7, #12]
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 810c196:	68fb      	ldr	r3, [r7, #12]
 810c198:	3308      	adds	r3, #8
 810c19a:	4618      	mov	r0, r3
 810c19c:	f000 f850 	bl	810c240 <_ZSt3getILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 810c1a0:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 810c1a2:	f107 0310 	add.w	r3, r7, #16
 810c1a6:	68ba      	ldr	r2, [r7, #8]
 810c1a8:	4618      	mov	r0, r3
 810c1aa:	f000 f856 	bl	810c25a <_ZNVKSt3_MuIP5IOBusLb0ELb0EEclIRS1_St5tupleIJOhOPhOmEEEEOT_SC_RT0_>
 810c1ae:	4605      	mov	r5, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 810c1b0:	68fb      	ldr	r3, [r7, #12]
 810c1b2:	3308      	adds	r3, #8
 810c1b4:	4618      	mov	r0, r3
 810c1b6:	f000 f85e 	bl	810c276 <_ZSt3getILj1EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 810c1ba:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 810c1bc:	f107 0314 	add.w	r3, r7, #20
 810c1c0:	68ba      	ldr	r2, [r7, #8]
 810c1c2:	4618      	mov	r0, r3
 810c1c4:	f000 f86e 	bl	810c2a4 <_ZNVKSt3_MuISt12_PlaceholderILi1EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj0EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj0ESC_EE4type4typeERVKS1_RSC_>
 810c1c8:	4606      	mov	r6, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 810c1ca:	68fb      	ldr	r3, [r7, #12]
 810c1cc:	3308      	adds	r3, #8
 810c1ce:	4618      	mov	r0, r3
 810c1d0:	f000 f87a 	bl	810c2c8 <_ZSt3getILj2EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 810c1d4:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 810c1d6:	f107 0318 	add.w	r3, r7, #24
 810c1da:	68ba      	ldr	r2, [r7, #8]
 810c1dc:	4618      	mov	r0, r3
 810c1de:	f000 f87f 	bl	810c2e0 <_ZNVKSt3_MuISt12_PlaceholderILi2EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj1EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj1ESC_EE4type4typeERVKS1_RSC_>
 810c1e2:	4680      	mov	r8, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 810c1e4:	68fb      	ldr	r3, [r7, #12]
 810c1e6:	3308      	adds	r3, #8
 810c1e8:	4618      	mov	r0, r3
 810c1ea:	f000 f88b 	bl	810c304 <_ZSt3getILj3EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 810c1ee:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 810c1f0:	f107 031c 	add.w	r3, r7, #28
 810c1f4:	68ba      	ldr	r2, [r7, #8]
 810c1f6:	4618      	mov	r0, r3
 810c1f8:	f000 f890 	bl	810c31c <_ZNVKSt3_MuISt12_PlaceholderILi3EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj2EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj2ESC_EE4type4typeERVKS1_RSC_>
 810c1fc:	4603      	mov	r3, r0
 810c1fe:	9300      	str	r3, [sp, #0]
 810c200:	4643      	mov	r3, r8
 810c202:	4632      	mov	r2, r6
 810c204:	4629      	mov	r1, r5
 810c206:	4620      	mov	r0, r4
 810c208:	f000 f8b0 	bl	810c36c <_ZSt8__invokeIRM5IOBusFvhPhmEJRPS0_hS1_mEENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>
	      );
 810c20c:	bf00      	nop
	}
 810c20e:	3720      	adds	r7, #32
 810c210:	46bd      	mov	sp, r7
 810c212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810c216 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1ERKS1_RKS2_RKS3_>:
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
 810c216:	b580      	push	{r7, lr}
 810c218:	b084      	sub	sp, #16
 810c21a:	af00      	add	r7, sp, #0
 810c21c:	60f8      	str	r0, [r7, #12]
 810c21e:	60b9      	str	r1, [r7, #8]
 810c220:	607a      	str	r2, [r7, #4]
 810c222:	603b      	str	r3, [r7, #0]
      : _Inherited(__tail...), _Base(__head) { }
 810c224:	683a      	ldr	r2, [r7, #0]
 810c226:	6879      	ldr	r1, [r7, #4]
 810c228:	68f8      	ldr	r0, [r7, #12]
 810c22a:	f000 f8c8 	bl	810c3be <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1ERKS1_RKS2_>
 810c22e:	68b9      	ldr	r1, [r7, #8]
 810c230:	68f8      	ldr	r0, [r7, #12]
 810c232:	f000 f8d7 	bl	810c3e4 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1ERKS1_>
 810c236:	68fb      	ldr	r3, [r7, #12]
 810c238:	4618      	mov	r0, r3
 810c23a:	3710      	adds	r7, #16
 810c23c:	46bd      	mov	sp, r7
 810c23e:	bd80      	pop	{r7, pc}

0810c240 <_ZSt3getILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 810c240:	b580      	push	{r7, lr}
 810c242:	b082      	sub	sp, #8
 810c244:	af00      	add	r7, sp, #0
 810c246:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810c248:	687b      	ldr	r3, [r7, #4]
 810c24a:	4618      	mov	r0, r3
 810c24c:	f000 f8d6 	bl	810c3fc <_ZSt12__get_helperILj0EP5IOBusJSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 810c250:	4603      	mov	r3, r0
 810c252:	4618      	mov	r0, r3
 810c254:	3708      	adds	r7, #8
 810c256:	46bd      	mov	sp, r7
 810c258:	bd80      	pop	{r7, pc}

0810c25a <_ZNVKSt3_MuIP5IOBusLb0ELb0EEclIRS1_St5tupleIJOhOPhOmEEEEOT_SC_RT0_>:
	operator()(_CVArg&& __arg, _Tuple&) const volatile
 810c25a:	b580      	push	{r7, lr}
 810c25c:	b084      	sub	sp, #16
 810c25e:	af00      	add	r7, sp, #0
 810c260:	60f8      	str	r0, [r7, #12]
 810c262:	60b9      	str	r1, [r7, #8]
 810c264:	607a      	str	r2, [r7, #4]
	{ return std::forward<_CVArg>(__arg); }
 810c266:	68b8      	ldr	r0, [r7, #8]
 810c268:	f000 f875 	bl	810c356 <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
 810c26c:	4603      	mov	r3, r0
 810c26e:	4618      	mov	r0, r3
 810c270:	3710      	adds	r7, #16
 810c272:	46bd      	mov	sp, r7
 810c274:	bd80      	pop	{r7, pc}

0810c276 <_ZSt3getILj1EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 810c276:	b580      	push	{r7, lr}
 810c278:	b082      	sub	sp, #8
 810c27a:	af00      	add	r7, sp, #0
 810c27c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810c27e:	6878      	ldr	r0, [r7, #4]
 810c280:	f000 f8c8 	bl	810c414 <_ZSt12__get_helperILj1ESt12_PlaceholderILi1EEJS0_ILi2EES0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 810c284:	4603      	mov	r3, r0
 810c286:	4618      	mov	r0, r3
 810c288:	3708      	adds	r7, #8
 810c28a:	46bd      	mov	sp, r7
 810c28c:	bd80      	pop	{r7, pc}

0810c28e <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 810c28e:	b480      	push	{r7}
 810c290:	b083      	sub	sp, #12
 810c292:	af00      	add	r7, sp, #0
 810c294:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810c296:	687b      	ldr	r3, [r7, #4]
 810c298:	4618      	mov	r0, r3
 810c29a:	370c      	adds	r7, #12
 810c29c:	46bd      	mov	sp, r7
 810c29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c2a2:	4770      	bx	lr

0810c2a4 <_ZNVKSt3_MuISt12_PlaceholderILi1EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj0EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj0ESC_EE4type4typeERVKS1_RSC_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 810c2a4:	b580      	push	{r7, lr}
 810c2a6:	b084      	sub	sp, #16
 810c2a8:	af00      	add	r7, sp, #0
 810c2aa:	60f8      	str	r0, [r7, #12]
 810c2ac:	60b9      	str	r1, [r7, #8]
 810c2ae:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 810c2b0:	6878      	ldr	r0, [r7, #4]
 810c2b2:	f7ff ffec 	bl	810c28e <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
 810c2b6:	4603      	mov	r3, r0
 810c2b8:	4618      	mov	r0, r3
 810c2ba:	f000 f8d0 	bl	810c45e <_ZSt3getILj0EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
 810c2be:	4603      	mov	r3, r0
	}
 810c2c0:	4618      	mov	r0, r3
 810c2c2:	3710      	adds	r7, #16
 810c2c4:	46bd      	mov	sp, r7
 810c2c6:	bd80      	pop	{r7, pc}

0810c2c8 <_ZSt3getILj2EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 810c2c8:	b580      	push	{r7, lr}
 810c2ca:	b082      	sub	sp, #8
 810c2cc:	af00      	add	r7, sp, #0
 810c2ce:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810c2d0:	6878      	ldr	r0, [r7, #4]
 810c2d2:	f000 f8d4 	bl	810c47e <_ZSt12__get_helperILj2ESt12_PlaceholderILi2EEJS0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 810c2d6:	4603      	mov	r3, r0
 810c2d8:	4618      	mov	r0, r3
 810c2da:	3708      	adds	r7, #8
 810c2dc:	46bd      	mov	sp, r7
 810c2de:	bd80      	pop	{r7, pc}

0810c2e0 <_ZNVKSt3_MuISt12_PlaceholderILi2EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj1EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj1ESC_EE4type4typeERVKS1_RSC_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 810c2e0:	b580      	push	{r7, lr}
 810c2e2:	b084      	sub	sp, #16
 810c2e4:	af00      	add	r7, sp, #0
 810c2e6:	60f8      	str	r0, [r7, #12]
 810c2e8:	60b9      	str	r1, [r7, #8]
 810c2ea:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 810c2ec:	6878      	ldr	r0, [r7, #4]
 810c2ee:	f7ff ffce 	bl	810c28e <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
 810c2f2:	4603      	mov	r3, r0
 810c2f4:	4618      	mov	r0, r3
 810c2f6:	f000 f8e7 	bl	810c4c8 <_ZSt3getILj1EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
 810c2fa:	4603      	mov	r3, r0
	}
 810c2fc:	4618      	mov	r0, r3
 810c2fe:	3710      	adds	r7, #16
 810c300:	46bd      	mov	sp, r7
 810c302:	bd80      	pop	{r7, pc}

0810c304 <_ZSt3getILj3EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 810c304:	b580      	push	{r7, lr}
 810c306:	b082      	sub	sp, #8
 810c308:	af00      	add	r7, sp, #0
 810c30a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810c30c:	6878      	ldr	r0, [r7, #4]
 810c30e:	f000 f8eb 	bl	810c4e8 <_ZSt12__get_helperILj3ESt12_PlaceholderILi3EEJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 810c312:	4603      	mov	r3, r0
 810c314:	4618      	mov	r0, r3
 810c316:	3708      	adds	r7, #8
 810c318:	46bd      	mov	sp, r7
 810c31a:	bd80      	pop	{r7, pc}

0810c31c <_ZNVKSt3_MuISt12_PlaceholderILi3EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj2EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj2ESC_EE4type4typeERVKS1_RSC_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 810c31c:	b580      	push	{r7, lr}
 810c31e:	b084      	sub	sp, #16
 810c320:	af00      	add	r7, sp, #0
 810c322:	60f8      	str	r0, [r7, #12]
 810c324:	60b9      	str	r1, [r7, #8]
 810c326:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 810c328:	6878      	ldr	r0, [r7, #4]
 810c32a:	f7ff ffb0 	bl	810c28e <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
 810c32e:	4603      	mov	r3, r0
 810c330:	4618      	mov	r0, r3
 810c332:	f000 f8fe 	bl	810c532 <_ZSt3getILj2EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
 810c336:	4603      	mov	r3, r0
	}
 810c338:	4618      	mov	r0, r3
 810c33a:	3710      	adds	r7, #16
 810c33c:	46bd      	mov	sp, r7
 810c33e:	bd80      	pop	{r7, pc}

0810c340 <_ZSt7forwardIRM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810c340:	b480      	push	{r7}
 810c342:	b083      	sub	sp, #12
 810c344:	af00      	add	r7, sp, #0
 810c346:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810c348:	687b      	ldr	r3, [r7, #4]
 810c34a:	4618      	mov	r0, r3
 810c34c:	370c      	adds	r7, #12
 810c34e:	46bd      	mov	sp, r7
 810c350:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c354:	4770      	bx	lr

0810c356 <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810c356:	b480      	push	{r7}
 810c358:	b083      	sub	sp, #12
 810c35a:	af00      	add	r7, sp, #0
 810c35c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810c35e:	687b      	ldr	r3, [r7, #4]
 810c360:	4618      	mov	r0, r3
 810c362:	370c      	adds	r7, #12
 810c364:	46bd      	mov	sp, r7
 810c366:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c36a:	4770      	bx	lr

0810c36c <_ZSt8__invokeIRM5IOBusFvhPhmEJRPS0_hS1_mEENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>:
    { return (*std::forward<_Tp>(__t)).*__f; }

  /// Invoke a callable object.
  template<typename _Callable, typename... _Args>
    constexpr typename __invoke_result<_Callable, _Args...>::type
    __invoke(_Callable&& __fn, _Args&&... __args)
 810c36c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810c370:	b089      	sub	sp, #36	; 0x24
 810c372:	af02      	add	r7, sp, #8
 810c374:	60f8      	str	r0, [r7, #12]
 810c376:	60b9      	str	r1, [r7, #8]
 810c378:	607a      	str	r2, [r7, #4]
 810c37a:	603b      	str	r3, [r7, #0]
    noexcept(__is_nothrow_invocable<_Callable, _Args...>::value)
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 810c37c:	68f8      	ldr	r0, [r7, #12]
 810c37e:	f7ff ffdf 	bl	810c340 <_ZSt7forwardIRM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS5_E4typeE>
 810c382:	4605      	mov	r5, r0
 810c384:	68b8      	ldr	r0, [r7, #8]
 810c386:	f7ff ffe6 	bl	810c356 <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
 810c38a:	4606      	mov	r6, r0
 810c38c:	6878      	ldr	r0, [r7, #4]
 810c38e:	f7ff fc52 	bl	810bc36 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810c392:	4680      	mov	r8, r0
 810c394:	6838      	ldr	r0, [r7, #0]
 810c396:	f7ff fc59 	bl	810bc4c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810c39a:	4604      	mov	r4, r0
 810c39c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 810c39e:	f7ff fc60 	bl	810bc62 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810c3a2:	4603      	mov	r3, r0
 810c3a4:	9301      	str	r3, [sp, #4]
 810c3a6:	9400      	str	r4, [sp, #0]
 810c3a8:	4643      	mov	r3, r8
 810c3aa:	4632      	mov	r2, r6
 810c3ac:	4629      	mov	r1, r5
 810c3ae:	4648      	mov	r0, r9
 810c3b0:	f000 f8cf 	bl	810c552 <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>
					std::forward<_Args>(__args)...);
 810c3b4:	bf00      	nop
    }
 810c3b6:	371c      	adds	r7, #28
 810c3b8:	46bd      	mov	sp, r7
 810c3ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0810c3be <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1ERKS1_RKS2_>:
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
 810c3be:	b580      	push	{r7, lr}
 810c3c0:	b084      	sub	sp, #16
 810c3c2:	af00      	add	r7, sp, #0
 810c3c4:	60f8      	str	r0, [r7, #12]
 810c3c6:	60b9      	str	r1, [r7, #8]
 810c3c8:	607a      	str	r2, [r7, #4]
      : _Inherited(__tail...), _Base(__head) { }
 810c3ca:	6879      	ldr	r1, [r7, #4]
 810c3cc:	68f8      	ldr	r0, [r7, #12]
 810c3ce:	f000 f8fa 	bl	810c5c6 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1ERKS1_>
 810c3d2:	68b9      	ldr	r1, [r7, #8]
 810c3d4:	68f8      	ldr	r0, [r7, #12]
 810c3d6:	f000 f904 	bl	810c5e2 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1ERKS1_>
 810c3da:	68fb      	ldr	r3, [r7, #12]
 810c3dc:	4618      	mov	r0, r3
 810c3de:	3710      	adds	r7, #16
 810c3e0:	46bd      	mov	sp, r7
 810c3e2:	bd80      	pop	{r7, pc}

0810c3e4 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1ERKS1_>:
      constexpr _Head_base(const _Head& __h)
 810c3e4:	b480      	push	{r7}
 810c3e6:	b083      	sub	sp, #12
 810c3e8:	af00      	add	r7, sp, #0
 810c3ea:	6078      	str	r0, [r7, #4]
 810c3ec:	6039      	str	r1, [r7, #0]
      : _Head(__h) { }
 810c3ee:	687b      	ldr	r3, [r7, #4]
 810c3f0:	4618      	mov	r0, r3
 810c3f2:	370c      	adds	r7, #12
 810c3f4:	46bd      	mov	sp, r7
 810c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c3fa:	4770      	bx	lr

0810c3fc <_ZSt12__get_helperILj0EP5IOBusJSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810c3fc:	b580      	push	{r7, lr}
 810c3fe:	b082      	sub	sp, #8
 810c400:	af00      	add	r7, sp, #0
 810c402:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810c404:	6878      	ldr	r0, [r7, #4]
 810c406:	f7ff fbb3 	bl	810bb70 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_headERS6_>
 810c40a:	4603      	mov	r3, r0
 810c40c:	4618      	mov	r0, r3
 810c40e:	3708      	adds	r7, #8
 810c410:	46bd      	mov	sp, r7
 810c412:	bd80      	pop	{r7, pc}

0810c414 <_ZSt12__get_helperILj1ESt12_PlaceholderILi1EEJS0_ILi2EES0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810c414:	b580      	push	{r7, lr}
 810c416:	b082      	sub	sp, #8
 810c418:	af00      	add	r7, sp, #0
 810c41a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810c41c:	6878      	ldr	r0, [r7, #4]
 810c41e:	f7ff fa85 	bl	810b92c <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_headERS4_>
 810c422:	4603      	mov	r3, r0
 810c424:	4618      	mov	r0, r3
 810c426:	3708      	adds	r7, #8
 810c428:	46bd      	mov	sp, r7
 810c42a:	bd80      	pop	{r7, pc}

0810c42c <_ZSt3getILj0EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 810c42c:	b580      	push	{r7, lr}
 810c42e:	b082      	sub	sp, #8
 810c430:	af00      	add	r7, sp, #0
 810c432:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810c434:	687b      	ldr	r3, [r7, #4]
 810c436:	4618      	mov	r0, r3
 810c438:	f000 f805 	bl	810c446 <_ZSt12__get_helperILj0EOhJOPhOmEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 810c43c:	4603      	mov	r3, r0
 810c43e:	4618      	mov	r0, r3
 810c440:	3708      	adds	r7, #8
 810c442:	46bd      	mov	sp, r7
 810c444:	bd80      	pop	{r7, pc}

0810c446 <_ZSt12__get_helperILj0EOhJOPhOmEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810c446:	b580      	push	{r7, lr}
 810c448:	b082      	sub	sp, #8
 810c44a:	af00      	add	r7, sp, #0
 810c44c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810c44e:	6878      	ldr	r0, [r7, #4]
 810c450:	f7ff fe74 	bl	810c13c <_ZNSt11_Tuple_implILj0EJOhOPhOmEE7_M_headERS4_>
 810c454:	4603      	mov	r3, r0
 810c456:	4618      	mov	r0, r3
 810c458:	3708      	adds	r7, #8
 810c45a:	46bd      	mov	sp, r7
 810c45c:	bd80      	pop	{r7, pc}

0810c45e <_ZSt3getILj0EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
    get(tuple<_Elements...>&& __t) noexcept
 810c45e:	b580      	push	{r7, lr}
 810c460:	b082      	sub	sp, #8
 810c462:	af00      	add	r7, sp, #0
 810c464:	6078      	str	r0, [r7, #4]
      return std::forward<__element_type&&>(std::get<__i>(__t));
 810c466:	6878      	ldr	r0, [r7, #4]
 810c468:	f7ff ffe0 	bl	810c42c <_ZSt3getILj0EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 810c46c:	4603      	mov	r3, r0
 810c46e:	4618      	mov	r0, r3
 810c470:	f7ff fe7e 	bl	810c170 <_ZSt7forwardIOhEOT_RNSt16remove_referenceIS1_E4typeE>
 810c474:	4603      	mov	r3, r0
    }
 810c476:	4618      	mov	r0, r3
 810c478:	3708      	adds	r7, #8
 810c47a:	46bd      	mov	sp, r7
 810c47c:	bd80      	pop	{r7, pc}

0810c47e <_ZSt12__get_helperILj2ESt12_PlaceholderILi2EEJS0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810c47e:	b580      	push	{r7, lr}
 810c480:	b082      	sub	sp, #8
 810c482:	af00      	add	r7, sp, #0
 810c484:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810c486:	6878      	ldr	r0, [r7, #4]
 810c488:	f7ff f9f6 	bl	810b878 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_headERS3_>
 810c48c:	4603      	mov	r3, r0
 810c48e:	4618      	mov	r0, r3
 810c490:	3708      	adds	r7, #8
 810c492:	46bd      	mov	sp, r7
 810c494:	bd80      	pop	{r7, pc}

0810c496 <_ZSt3getILj1EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 810c496:	b580      	push	{r7, lr}
 810c498:	b082      	sub	sp, #8
 810c49a:	af00      	add	r7, sp, #0
 810c49c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810c49e:	687b      	ldr	r3, [r7, #4]
 810c4a0:	4618      	mov	r0, r3
 810c4a2:	f000 f805 	bl	810c4b0 <_ZSt12__get_helperILj1EOPhJOmEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 810c4a6:	4603      	mov	r3, r0
 810c4a8:	4618      	mov	r0, r3
 810c4aa:	3708      	adds	r7, #8
 810c4ac:	46bd      	mov	sp, r7
 810c4ae:	bd80      	pop	{r7, pc}

0810c4b0 <_ZSt12__get_helperILj1EOPhJOmEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810c4b0:	b580      	push	{r7, lr}
 810c4b2:	b082      	sub	sp, #8
 810c4b4:	af00      	add	r7, sp, #0
 810c4b6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810c4b8:	6878      	ldr	r0, [r7, #4]
 810c4ba:	f7ff fd61 	bl	810bf80 <_ZNSt11_Tuple_implILj1EJOPhOmEE7_M_headERS3_>
 810c4be:	4603      	mov	r3, r0
 810c4c0:	4618      	mov	r0, r3
 810c4c2:	3708      	adds	r7, #8
 810c4c4:	46bd      	mov	sp, r7
 810c4c6:	bd80      	pop	{r7, pc}

0810c4c8 <_ZSt3getILj1EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
    get(tuple<_Elements...>&& __t) noexcept
 810c4c8:	b580      	push	{r7, lr}
 810c4ca:	b082      	sub	sp, #8
 810c4cc:	af00      	add	r7, sp, #0
 810c4ce:	6078      	str	r0, [r7, #4]
      return std::forward<__element_type&&>(std::get<__i>(__t));
 810c4d0:	6878      	ldr	r0, [r7, #4]
 810c4d2:	f7ff ffe0 	bl	810c496 <_ZSt3getILj1EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 810c4d6:	4603      	mov	r3, r0
 810c4d8:	4618      	mov	r0, r3
 810c4da:	f7ff fd6b 	bl	810bfb4 <_ZSt7forwardIOPhEOT_RNSt16remove_referenceIS2_E4typeE>
 810c4de:	4603      	mov	r3, r0
    }
 810c4e0:	4618      	mov	r0, r3
 810c4e2:	3708      	adds	r7, #8
 810c4e4:	46bd      	mov	sp, r7
 810c4e6:	bd80      	pop	{r7, pc}

0810c4e8 <_ZSt12__get_helperILj3ESt12_PlaceholderILi3EEJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810c4e8:	b580      	push	{r7, lr}
 810c4ea:	b082      	sub	sp, #8
 810c4ec:	af00      	add	r7, sp, #0
 810c4ee:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810c4f0:	6878      	ldr	r0, [r7, #4]
 810c4f2:	f7ff f97e 	bl	810b7f2 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEE7_M_headERS2_>
 810c4f6:	4603      	mov	r3, r0
 810c4f8:	4618      	mov	r0, r3
 810c4fa:	3708      	adds	r7, #8
 810c4fc:	46bd      	mov	sp, r7
 810c4fe:	bd80      	pop	{r7, pc}

0810c500 <_ZSt3getILj2EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 810c500:	b580      	push	{r7, lr}
 810c502:	b082      	sub	sp, #8
 810c504:	af00      	add	r7, sp, #0
 810c506:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810c508:	687b      	ldr	r3, [r7, #4]
 810c50a:	4618      	mov	r0, r3
 810c50c:	f000 f805 	bl	810c51a <_ZSt12__get_helperILj2EOmJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>
 810c510:	4603      	mov	r3, r0
 810c512:	4618      	mov	r0, r3
 810c514:	3708      	adds	r7, #8
 810c516:	46bd      	mov	sp, r7
 810c518:	bd80      	pop	{r7, pc}

0810c51a <_ZSt12__get_helperILj2EOmJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810c51a:	b580      	push	{r7, lr}
 810c51c:	b082      	sub	sp, #8
 810c51e:	af00      	add	r7, sp, #0
 810c520:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810c522:	6878      	ldr	r0, [r7, #4]
 810c524:	f7ff fd08 	bl	810bf38 <_ZNSt11_Tuple_implILj2EJOmEE7_M_headERS1_>
 810c528:	4603      	mov	r3, r0
 810c52a:	4618      	mov	r0, r3
 810c52c:	3708      	adds	r7, #8
 810c52e:	46bd      	mov	sp, r7
 810c530:	bd80      	pop	{r7, pc}

0810c532 <_ZSt3getILj2EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
    get(tuple<_Elements...>&& __t) noexcept
 810c532:	b580      	push	{r7, lr}
 810c534:	b082      	sub	sp, #8
 810c536:	af00      	add	r7, sp, #0
 810c538:	6078      	str	r0, [r7, #4]
      return std::forward<__element_type&&>(std::get<__i>(__t));
 810c53a:	6878      	ldr	r0, [r7, #4]
 810c53c:	f7ff ffe0 	bl	810c500 <_ZSt3getILj2EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 810c540:	4603      	mov	r3, r0
 810c542:	4618      	mov	r0, r3
 810c544:	f7ff fd11 	bl	810bf6a <_ZSt7forwardIOmEOT_RNSt16remove_referenceIS1_E4typeE>
 810c548:	4603      	mov	r3, r0
    }
 810c54a:	4618      	mov	r0, r3
 810c54c:	3708      	adds	r7, #8
 810c54e:	46bd      	mov	sp, r7
 810c550:	bd80      	pop	{r7, pc}

0810c552 <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>:
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
 810c552:	b5f0      	push	{r4, r5, r6, r7, lr}
 810c554:	b087      	sub	sp, #28
 810c556:	af00      	add	r7, sp, #0
 810c558:	7538      	strb	r0, [r7, #20]
 810c55a:	6139      	str	r1, [r7, #16]
 810c55c:	60fa      	str	r2, [r7, #12]
 810c55e:	60bb      	str	r3, [r7, #8]
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
 810c560:	68f8      	ldr	r0, [r7, #12]
 810c562:	f7ff fef8 	bl	810c356 <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
 810c566:	4603      	mov	r3, r0
 810c568:	681b      	ldr	r3, [r3, #0]
 810c56a:	693a      	ldr	r2, [r7, #16]
 810c56c:	6852      	ldr	r2, [r2, #4]
 810c56e:	1052      	asrs	r2, r2, #1
 810c570:	189d      	adds	r5, r3, r2
 810c572:	693a      	ldr	r2, [r7, #16]
 810c574:	6852      	ldr	r2, [r2, #4]
 810c576:	f002 0201 	and.w	r2, r2, #1
 810c57a:	2a00      	cmp	r2, #0
 810c57c:	d102      	bne.n	810c584 <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x32>
 810c57e:	693b      	ldr	r3, [r7, #16]
 810c580:	681c      	ldr	r4, [r3, #0]
 810c582:	e008      	b.n	810c596 <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x44>
 810c584:	693a      	ldr	r2, [r7, #16]
 810c586:	6852      	ldr	r2, [r2, #4]
 810c588:	1052      	asrs	r2, r2, #1
 810c58a:	4413      	add	r3, r2
 810c58c:	681b      	ldr	r3, [r3, #0]
 810c58e:	693a      	ldr	r2, [r7, #16]
 810c590:	6812      	ldr	r2, [r2, #0]
 810c592:	4413      	add	r3, r2
 810c594:	681c      	ldr	r4, [r3, #0]
 810c596:	68b8      	ldr	r0, [r7, #8]
 810c598:	f7ff fb4d 	bl	810bc36 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810c59c:	4603      	mov	r3, r0
 810c59e:	781e      	ldrb	r6, [r3, #0]
 810c5a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810c5a2:	f7ff fb53 	bl	810bc4c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810c5a6:	4603      	mov	r3, r0
 810c5a8:	681b      	ldr	r3, [r3, #0]
 810c5aa:	607b      	str	r3, [r7, #4]
 810c5ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 810c5ae:	f7ff fb58 	bl	810bc62 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810c5b2:	4603      	mov	r3, r0
 810c5b4:	681b      	ldr	r3, [r3, #0]
 810c5b6:	687a      	ldr	r2, [r7, #4]
 810c5b8:	4631      	mov	r1, r6
 810c5ba:	4628      	mov	r0, r5
 810c5bc:	47a0      	blx	r4
 810c5be:	bf00      	nop
    }
 810c5c0:	371c      	adds	r7, #28
 810c5c2:	46bd      	mov	sp, r7
 810c5c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810c5c6 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1ERKS1_>:
      constexpr _Tuple_impl(const _Head& __head)
 810c5c6:	b580      	push	{r7, lr}
 810c5c8:	b082      	sub	sp, #8
 810c5ca:	af00      	add	r7, sp, #0
 810c5cc:	6078      	str	r0, [r7, #4]
 810c5ce:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 810c5d0:	6839      	ldr	r1, [r7, #0]
 810c5d2:	6878      	ldr	r0, [r7, #4]
 810c5d4:	f000 f811 	bl	810c5fa <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1ERKS1_>
 810c5d8:	687b      	ldr	r3, [r7, #4]
 810c5da:	4618      	mov	r0, r3
 810c5dc:	3708      	adds	r7, #8
 810c5de:	46bd      	mov	sp, r7
 810c5e0:	bd80      	pop	{r7, pc}

0810c5e2 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1ERKS1_>:
      constexpr _Head_base(const _Head& __h)
 810c5e2:	b480      	push	{r7}
 810c5e4:	b083      	sub	sp, #12
 810c5e6:	af00      	add	r7, sp, #0
 810c5e8:	6078      	str	r0, [r7, #4]
 810c5ea:	6039      	str	r1, [r7, #0]
      : _Head(__h) { }
 810c5ec:	687b      	ldr	r3, [r7, #4]
 810c5ee:	4618      	mov	r0, r3
 810c5f0:	370c      	adds	r7, #12
 810c5f2:	46bd      	mov	sp, r7
 810c5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c5f8:	4770      	bx	lr

0810c5fa <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1ERKS1_>:
      constexpr _Head_base(const _Head& __h)
 810c5fa:	b480      	push	{r7}
 810c5fc:	b083      	sub	sp, #12
 810c5fe:	af00      	add	r7, sp, #0
 810c600:	6078      	str	r0, [r7, #4]
 810c602:	6039      	str	r1, [r7, #0]
      : _Head(__h) { }
 810c604:	687b      	ldr	r3, [r7, #4]
 810c606:	4618      	mov	r0, r3
 810c608:	370c      	adds	r7, #12
 810c60a:	46bd      	mov	sp, r7
 810c60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c610:	4770      	bx	lr
	...

0810c614 <_ZN5IOBusD1Ev>:

#include "MessageBus.h"
#include "IODriver.h"


class IOBus : public MessageBus {
 810c614:	b580      	push	{r7, lr}
 810c616:	b082      	sub	sp, #8
 810c618:	af00      	add	r7, sp, #0
 810c61a:	6078      	str	r0, [r7, #4]
 810c61c:	4a05      	ldr	r2, [pc, #20]	; (810c634 <_ZN5IOBusD1Ev+0x20>)
 810c61e:	687b      	ldr	r3, [r7, #4]
 810c620:	601a      	str	r2, [r3, #0]
 810c622:	687b      	ldr	r3, [r7, #4]
 810c624:	4618      	mov	r0, r3
 810c626:	f7fe ff3b 	bl	810b4a0 <_ZN10MessageBusD1Ev>
 810c62a:	687b      	ldr	r3, [r7, #4]
 810c62c:	4618      	mov	r0, r3
 810c62e:	3708      	adds	r7, #8
 810c630:	46bd      	mov	sp, r7
 810c632:	bd80      	pop	{r7, pc}
 810c634:	08110a70 	.word	0x08110a70

0810c638 <_ZN5IOBusD0Ev>:
 810c638:	b580      	push	{r7, lr}
 810c63a:	b082      	sub	sp, #8
 810c63c:	af00      	add	r7, sp, #0
 810c63e:	6078      	str	r0, [r7, #4]
 810c640:	6878      	ldr	r0, [r7, #4]
 810c642:	f7ff ffe7 	bl	810c614 <_ZN5IOBusD1Ev>
 810c646:	f644 0114 	movw	r1, #18452	; 0x4814
 810c64a:	6878      	ldr	r0, [r7, #4]
 810c64c:	f001 fc0f 	bl	810de6e <_ZdlPvj>
 810c650:	687b      	ldr	r3, [r7, #4]
 810c652:	4618      	mov	r0, r3
 810c654:	3708      	adds	r7, #8
 810c656:	46bd      	mov	sp, r7
 810c658:	bd80      	pop	{r7, pc}

0810c65a <_ZNKSt9type_info4nameEv>:
     *  the runtime-mandated type_info structures in the new-abi.  */
    virtual ~type_info();

    /** Returns an @e implementation-defined byte string; this is not
     *  portable between compilers!  */
    const char* name() const _GLIBCXX_NOEXCEPT
 810c65a:	b480      	push	{r7}
 810c65c:	b083      	sub	sp, #12
 810c65e:	af00      	add	r7, sp, #0
 810c660:	6078      	str	r0, [r7, #4]
    { return __name[0] == '*' ? __name + 1 : __name; }
 810c662:	687b      	ldr	r3, [r7, #4]
 810c664:	685b      	ldr	r3, [r3, #4]
 810c666:	781b      	ldrb	r3, [r3, #0]
 810c668:	2b2a      	cmp	r3, #42	; 0x2a
 810c66a:	d103      	bne.n	810c674 <_ZNKSt9type_info4nameEv+0x1a>
 810c66c:	687b      	ldr	r3, [r7, #4]
 810c66e:	685b      	ldr	r3, [r3, #4]
 810c670:	3301      	adds	r3, #1
 810c672:	e001      	b.n	810c678 <_ZNKSt9type_info4nameEv+0x1e>
 810c674:	687b      	ldr	r3, [r7, #4]
 810c676:	685b      	ldr	r3, [r3, #4]
 810c678:	4618      	mov	r0, r3
 810c67a:	370c      	adds	r7, #12
 810c67c:	46bd      	mov	sp, r7
 810c67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c682:	4770      	bx	lr

0810c684 <_ZNKSt9type_info9hash_codeEv>:
#endif
    bool operator!=(const type_info& __arg) const _GLIBCXX_NOEXCEPT
    { return !operator==(__arg); }

#if __cplusplus >= 201103L
    size_t hash_code() const noexcept
 810c684:	b590      	push	{r4, r7, lr}
 810c686:	b083      	sub	sp, #12
 810c688:	af00      	add	r7, sp, #0
 810c68a:	6078      	str	r0, [r7, #4]
    {
#  if !__GXX_MERGED_TYPEINFO_NAMES
      return _Hash_bytes(name(), __builtin_strlen(name()),
 810c68c:	6878      	ldr	r0, [r7, #4]
 810c68e:	f7ff ffe4 	bl	810c65a <_ZNKSt9type_info4nameEv>
 810c692:	4604      	mov	r4, r0
 810c694:	6878      	ldr	r0, [r7, #4]
 810c696:	f7ff ffe0 	bl	810c65a <_ZNKSt9type_info4nameEv>
 810c69a:	4603      	mov	r3, r0
 810c69c:	4618      	mov	r0, r3
 810c69e:	f7f3 fe29 	bl	81002f4 <strlen>
 810c6a2:	4603      	mov	r3, r0
			 static_cast<size_t>(0xc70f6907UL));
 810c6a4:	4a04      	ldr	r2, [pc, #16]	; (810c6b8 <_ZNKSt9type_info9hash_codeEv+0x34>)
 810c6a6:	4619      	mov	r1, r3
 810c6a8:	4620      	mov	r0, r4
 810c6aa:	f001 fbe3 	bl	810de74 <_ZSt11_Hash_bytesPKvjj>
 810c6ae:	4603      	mov	r3, r0
#  else
      return reinterpret_cast<size_t>(__name);
#  endif
    }
 810c6b0:	4618      	mov	r0, r3
 810c6b2:	370c      	adds	r7, #12
 810c6b4:	46bd      	mov	sp, r7
 810c6b6:	bd90      	pop	{r4, r7, pc}
 810c6b8:	c70f6907 	.word	0xc70f6907

0810c6bc <_ZN10MessageBus6defineI10PingPacketEEbh>:
 * Warning: this method is not thread-safe.
 */


// WARNING: using a hash as a UUID is a bad idea in general but it was to only way to get SWIG working.
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810c6bc:	b580      	push	{r7, lr}
 810c6be:	b086      	sub	sp, #24
 810c6c0:	af00      	add	r7, sp, #0
 810c6c2:	6078      	str	r0, [r7, #4]
 810c6c4:	460b      	mov	r3, r1
 810c6c6:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810c6c8:	2308      	movs	r3, #8
 810c6ca:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810c6cc:	4829      	ldr	r0, [pc, #164]	; (810c774 <_ZN10MessageBus6defineI10PingPacketEEbh+0xb8>)
 810c6ce:	f7ff ffd9 	bl	810c684 <_ZNKSt9type_info9hash_codeEv>
 810c6d2:	60f8      	str	r0, [r7, #12]

	uint32_t insertion_point = hash % 256;
 810c6d4:	68fb      	ldr	r3, [r7, #12]
 810c6d6:	b2db      	uxtb	r3, r3
 810c6d8:	617b      	str	r3, [r7, #20]

	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810c6da:	78fb      	ldrb	r3, [r7, #3]
 810c6dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810c6e0:	687a      	ldr	r2, [r7, #4]
 810c6e2:	00db      	lsls	r3, r3, #3
 810c6e4:	4413      	add	r3, r2
 810c6e6:	689b      	ldr	r3, [r3, #8]
 810c6e8:	2b00      	cmp	r3, #0
 810c6ea:	d001      	beq.n	810c6f0 <_ZN10MessageBus6defineI10PingPacketEEbh+0x34>
		return false; // Packet ID already in use
 810c6ec:	2300      	movs	r3, #0
 810c6ee:	e03c      	b.n	810c76a <_ZN10MessageBus6defineI10PingPacketEEbh+0xae>
	}

	if(struct_size > max_packet_size) {
 810c6f0:	693b      	ldr	r3, [r7, #16]
 810c6f2:	2bff      	cmp	r3, #255	; 0xff
 810c6f4:	d901      	bls.n	810c6fa <_ZN10MessageBus6defineI10PingPacketEEbh+0x3e>
		return false; // Packet size too large
 810c6f6:	2300      	movs	r3, #0
 810c6f8:	e037      	b.n	810c76a <_ZN10MessageBus6defineI10PingPacketEEbh+0xae>
	}

	while(definitions_by_type[insertion_point] != nullptr) {
 810c6fa:	687a      	ldr	r2, [r7, #4]
 810c6fc:	697b      	ldr	r3, [r7, #20]
 810c6fe:	3380      	adds	r3, #128	; 0x80
 810c700:	009b      	lsls	r3, r3, #2
 810c702:	4413      	add	r3, r2
 810c704:	685b      	ldr	r3, [r3, #4]
 810c706:	2b00      	cmp	r3, #0
 810c708:	d015      	beq.n	810c736 <_ZN10MessageBus6defineI10PingPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810c70a:	687a      	ldr	r2, [r7, #4]
 810c70c:	697b      	ldr	r3, [r7, #20]
 810c70e:	3380      	adds	r3, #128	; 0x80
 810c710:	009b      	lsls	r3, r3, #2
 810c712:	4413      	add	r3, r2
 810c714:	685b      	ldr	r3, [r3, #4]
 810c716:	685b      	ldr	r3, [r3, #4]
 810c718:	68fa      	ldr	r2, [r7, #12]
 810c71a:	429a      	cmp	r2, r3
 810c71c:	d101      	bne.n	810c722 <_ZN10MessageBus6defineI10PingPacketEEbh+0x66>
			return false; // Packet type already defined
 810c71e:	2300      	movs	r3, #0
 810c720:	e023      	b.n	810c76a <_ZN10MessageBus6defineI10PingPacketEEbh+0xae>
		}

		insertion_point++;
 810c722:	697b      	ldr	r3, [r7, #20]
 810c724:	3301      	adds	r3, #1
 810c726:	617b      	str	r3, [r7, #20]

		if(insertion_point == 256) {
 810c728:	697b      	ldr	r3, [r7, #20]
 810c72a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810c72e:	d1e4      	bne.n	810c6fa <_ZN10MessageBus6defineI10PingPacketEEbh+0x3e>
			insertion_point = 0;
 810c730:	2300      	movs	r3, #0
 810c732:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810c734:	e7e1      	b.n	810c6fa <_ZN10MessageBus6defineI10PingPacketEEbh+0x3e>
		}
	}

	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810c736:	78fb      	ldrb	r3, [r7, #3]
 810c738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810c73c:	00db      	lsls	r3, r3, #3
 810c73e:	687a      	ldr	r2, [r7, #4]
 810c740:	4413      	add	r3, r2
 810c742:	3304      	adds	r3, #4
 810c744:	60bb      	str	r3, [r7, #8]

	def->id = identifier;
 810c746:	68bb      	ldr	r3, [r7, #8]
 810c748:	78fa      	ldrb	r2, [r7, #3]
 810c74a:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810c74c:	693b      	ldr	r3, [r7, #16]
 810c74e:	b2da      	uxtb	r2, r3
 810c750:	68bb      	ldr	r3, [r7, #8]
 810c752:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810c754:	68bb      	ldr	r3, [r7, #8]
 810c756:	68fa      	ldr	r2, [r7, #12]
 810c758:	605a      	str	r2, [r3, #4]

	definitions_by_type[insertion_point] = def;
 810c75a:	687a      	ldr	r2, [r7, #4]
 810c75c:	697b      	ldr	r3, [r7, #20]
 810c75e:	3380      	adds	r3, #128	; 0x80
 810c760:	009b      	lsls	r3, r3, #2
 810c762:	4413      	add	r3, r2
 810c764:	68ba      	ldr	r2, [r7, #8]
 810c766:	605a      	str	r2, [r3, #4]

	return true;
 810c768:	2301      	movs	r3, #1
}
 810c76a:	4618      	mov	r0, r3
 810c76c:	3718      	adds	r7, #24
 810c76e:	46bd      	mov	sp, r7
 810c770:	bd80      	pop	{r7, pc}
 810c772:	bf00      	nop
 810c774:	08110cec 	.word	0x08110cec

0810c778 <_ZN10MessageBus6defineI13RequestPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810c778:	b580      	push	{r7, lr}
 810c77a:	b086      	sub	sp, #24
 810c77c:	af00      	add	r7, sp, #0
 810c77e:	6078      	str	r0, [r7, #4]
 810c780:	460b      	mov	r3, r1
 810c782:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810c784:	2308      	movs	r3, #8
 810c786:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810c788:	4829      	ldr	r0, [pc, #164]	; (810c830 <_ZN10MessageBus6defineI13RequestPacketEEbh+0xb8>)
 810c78a:	f7ff ff7b 	bl	810c684 <_ZNKSt9type_info9hash_codeEv>
 810c78e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810c790:	68fb      	ldr	r3, [r7, #12]
 810c792:	b2db      	uxtb	r3, r3
 810c794:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810c796:	78fb      	ldrb	r3, [r7, #3]
 810c798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810c79c:	687a      	ldr	r2, [r7, #4]
 810c79e:	00db      	lsls	r3, r3, #3
 810c7a0:	4413      	add	r3, r2
 810c7a2:	689b      	ldr	r3, [r3, #8]
 810c7a4:	2b00      	cmp	r3, #0
 810c7a6:	d001      	beq.n	810c7ac <_ZN10MessageBus6defineI13RequestPacketEEbh+0x34>
		return false; // Packet ID already in use
 810c7a8:	2300      	movs	r3, #0
 810c7aa:	e03c      	b.n	810c826 <_ZN10MessageBus6defineI13RequestPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810c7ac:	693b      	ldr	r3, [r7, #16]
 810c7ae:	2bff      	cmp	r3, #255	; 0xff
 810c7b0:	d901      	bls.n	810c7b6 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x3e>
		return false; // Packet size too large
 810c7b2:	2300      	movs	r3, #0
 810c7b4:	e037      	b.n	810c826 <_ZN10MessageBus6defineI13RequestPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810c7b6:	687a      	ldr	r2, [r7, #4]
 810c7b8:	697b      	ldr	r3, [r7, #20]
 810c7ba:	3380      	adds	r3, #128	; 0x80
 810c7bc:	009b      	lsls	r3, r3, #2
 810c7be:	4413      	add	r3, r2
 810c7c0:	685b      	ldr	r3, [r3, #4]
 810c7c2:	2b00      	cmp	r3, #0
 810c7c4:	d015      	beq.n	810c7f2 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810c7c6:	687a      	ldr	r2, [r7, #4]
 810c7c8:	697b      	ldr	r3, [r7, #20]
 810c7ca:	3380      	adds	r3, #128	; 0x80
 810c7cc:	009b      	lsls	r3, r3, #2
 810c7ce:	4413      	add	r3, r2
 810c7d0:	685b      	ldr	r3, [r3, #4]
 810c7d2:	685b      	ldr	r3, [r3, #4]
 810c7d4:	68fa      	ldr	r2, [r7, #12]
 810c7d6:	429a      	cmp	r2, r3
 810c7d8:	d101      	bne.n	810c7de <_ZN10MessageBus6defineI13RequestPacketEEbh+0x66>
			return false; // Packet type already defined
 810c7da:	2300      	movs	r3, #0
 810c7dc:	e023      	b.n	810c826 <_ZN10MessageBus6defineI13RequestPacketEEbh+0xae>
		insertion_point++;
 810c7de:	697b      	ldr	r3, [r7, #20]
 810c7e0:	3301      	adds	r3, #1
 810c7e2:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810c7e4:	697b      	ldr	r3, [r7, #20]
 810c7e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810c7ea:	d1e4      	bne.n	810c7b6 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x3e>
			insertion_point = 0;
 810c7ec:	2300      	movs	r3, #0
 810c7ee:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810c7f0:	e7e1      	b.n	810c7b6 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810c7f2:	78fb      	ldrb	r3, [r7, #3]
 810c7f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810c7f8:	00db      	lsls	r3, r3, #3
 810c7fa:	687a      	ldr	r2, [r7, #4]
 810c7fc:	4413      	add	r3, r2
 810c7fe:	3304      	adds	r3, #4
 810c800:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810c802:	68bb      	ldr	r3, [r7, #8]
 810c804:	78fa      	ldrb	r2, [r7, #3]
 810c806:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810c808:	693b      	ldr	r3, [r7, #16]
 810c80a:	b2da      	uxtb	r2, r3
 810c80c:	68bb      	ldr	r3, [r7, #8]
 810c80e:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810c810:	68bb      	ldr	r3, [r7, #8]
 810c812:	68fa      	ldr	r2, [r7, #12]
 810c814:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810c816:	687a      	ldr	r2, [r7, #4]
 810c818:	697b      	ldr	r3, [r7, #20]
 810c81a:	3380      	adds	r3, #128	; 0x80
 810c81c:	009b      	lsls	r3, r3, #2
 810c81e:	4413      	add	r3, r2
 810c820:	68ba      	ldr	r2, [r7, #8]
 810c822:	605a      	str	r2, [r3, #4]
	return true;
 810c824:	2301      	movs	r3, #1
}
 810c826:	4618      	mov	r0, r3
 810c828:	3718      	adds	r7, #24
 810c82a:	46bd      	mov	sp, r7
 810c82c:	bd80      	pop	{r7, pc}
 810c82e:	bf00      	nop
 810c830:	08110cd4 	.word	0x08110cd4

0810c834 <_ZN10MessageBus6defineI14ResponsePacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810c834:	b580      	push	{r7, lr}
 810c836:	b086      	sub	sp, #24
 810c838:	af00      	add	r7, sp, #0
 810c83a:	6078      	str	r0, [r7, #4]
 810c83c:	460b      	mov	r3, r1
 810c83e:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810c840:	2308      	movs	r3, #8
 810c842:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810c844:	4829      	ldr	r0, [pc, #164]	; (810c8ec <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xb8>)
 810c846:	f7ff ff1d 	bl	810c684 <_ZNKSt9type_info9hash_codeEv>
 810c84a:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810c84c:	68fb      	ldr	r3, [r7, #12]
 810c84e:	b2db      	uxtb	r3, r3
 810c850:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810c852:	78fb      	ldrb	r3, [r7, #3]
 810c854:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810c858:	687a      	ldr	r2, [r7, #4]
 810c85a:	00db      	lsls	r3, r3, #3
 810c85c:	4413      	add	r3, r2
 810c85e:	689b      	ldr	r3, [r3, #8]
 810c860:	2b00      	cmp	r3, #0
 810c862:	d001      	beq.n	810c868 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x34>
		return false; // Packet ID already in use
 810c864:	2300      	movs	r3, #0
 810c866:	e03c      	b.n	810c8e2 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810c868:	693b      	ldr	r3, [r7, #16]
 810c86a:	2bff      	cmp	r3, #255	; 0xff
 810c86c:	d901      	bls.n	810c872 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x3e>
		return false; // Packet size too large
 810c86e:	2300      	movs	r3, #0
 810c870:	e037      	b.n	810c8e2 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810c872:	687a      	ldr	r2, [r7, #4]
 810c874:	697b      	ldr	r3, [r7, #20]
 810c876:	3380      	adds	r3, #128	; 0x80
 810c878:	009b      	lsls	r3, r3, #2
 810c87a:	4413      	add	r3, r2
 810c87c:	685b      	ldr	r3, [r3, #4]
 810c87e:	2b00      	cmp	r3, #0
 810c880:	d015      	beq.n	810c8ae <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810c882:	687a      	ldr	r2, [r7, #4]
 810c884:	697b      	ldr	r3, [r7, #20]
 810c886:	3380      	adds	r3, #128	; 0x80
 810c888:	009b      	lsls	r3, r3, #2
 810c88a:	4413      	add	r3, r2
 810c88c:	685b      	ldr	r3, [r3, #4]
 810c88e:	685b      	ldr	r3, [r3, #4]
 810c890:	68fa      	ldr	r2, [r7, #12]
 810c892:	429a      	cmp	r2, r3
 810c894:	d101      	bne.n	810c89a <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x66>
			return false; // Packet type already defined
 810c896:	2300      	movs	r3, #0
 810c898:	e023      	b.n	810c8e2 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xae>
		insertion_point++;
 810c89a:	697b      	ldr	r3, [r7, #20]
 810c89c:	3301      	adds	r3, #1
 810c89e:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810c8a0:	697b      	ldr	r3, [r7, #20]
 810c8a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810c8a6:	d1e4      	bne.n	810c872 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x3e>
			insertion_point = 0;
 810c8a8:	2300      	movs	r3, #0
 810c8aa:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810c8ac:	e7e1      	b.n	810c872 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810c8ae:	78fb      	ldrb	r3, [r7, #3]
 810c8b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810c8b4:	00db      	lsls	r3, r3, #3
 810c8b6:	687a      	ldr	r2, [r7, #4]
 810c8b8:	4413      	add	r3, r2
 810c8ba:	3304      	adds	r3, #4
 810c8bc:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810c8be:	68bb      	ldr	r3, [r7, #8]
 810c8c0:	78fa      	ldrb	r2, [r7, #3]
 810c8c2:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810c8c4:	693b      	ldr	r3, [r7, #16]
 810c8c6:	b2da      	uxtb	r2, r3
 810c8c8:	68bb      	ldr	r3, [r7, #8]
 810c8ca:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810c8cc:	68bb      	ldr	r3, [r7, #8]
 810c8ce:	68fa      	ldr	r2, [r7, #12]
 810c8d0:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810c8d2:	687a      	ldr	r2, [r7, #4]
 810c8d4:	697b      	ldr	r3, [r7, #20]
 810c8d6:	3380      	adds	r3, #128	; 0x80
 810c8d8:	009b      	lsls	r3, r3, #2
 810c8da:	4413      	add	r3, r2
 810c8dc:	68ba      	ldr	r2, [r7, #8]
 810c8de:	605a      	str	r2, [r3, #4]
	return true;
 810c8e0:	2301      	movs	r3, #1
}
 810c8e2:	4618      	mov	r0, r3
 810c8e4:	3718      	adds	r7, #24
 810c8e6:	46bd      	mov	sp, r7
 810c8e8:	bd80      	pop	{r7, pc}
 810c8ea:	bf00      	nop
 810c8ec:	08110cb8 	.word	0x08110cb8

0810c8f0 <_ZN10MessageBus6defineI14ProgressPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810c8f0:	b580      	push	{r7, lr}
 810c8f2:	b086      	sub	sp, #24
 810c8f4:	af00      	add	r7, sp, #0
 810c8f6:	6078      	str	r0, [r7, #4]
 810c8f8:	460b      	mov	r3, r1
 810c8fa:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810c8fc:	2305      	movs	r3, #5
 810c8fe:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810c900:	4829      	ldr	r0, [pc, #164]	; (810c9a8 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xb8>)
 810c902:	f7ff febf 	bl	810c684 <_ZNKSt9type_info9hash_codeEv>
 810c906:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810c908:	68fb      	ldr	r3, [r7, #12]
 810c90a:	b2db      	uxtb	r3, r3
 810c90c:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810c90e:	78fb      	ldrb	r3, [r7, #3]
 810c910:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810c914:	687a      	ldr	r2, [r7, #4]
 810c916:	00db      	lsls	r3, r3, #3
 810c918:	4413      	add	r3, r2
 810c91a:	689b      	ldr	r3, [r3, #8]
 810c91c:	2b00      	cmp	r3, #0
 810c91e:	d001      	beq.n	810c924 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x34>
		return false; // Packet ID already in use
 810c920:	2300      	movs	r3, #0
 810c922:	e03c      	b.n	810c99e <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810c924:	693b      	ldr	r3, [r7, #16]
 810c926:	2bff      	cmp	r3, #255	; 0xff
 810c928:	d901      	bls.n	810c92e <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x3e>
		return false; // Packet size too large
 810c92a:	2300      	movs	r3, #0
 810c92c:	e037      	b.n	810c99e <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810c92e:	687a      	ldr	r2, [r7, #4]
 810c930:	697b      	ldr	r3, [r7, #20]
 810c932:	3380      	adds	r3, #128	; 0x80
 810c934:	009b      	lsls	r3, r3, #2
 810c936:	4413      	add	r3, r2
 810c938:	685b      	ldr	r3, [r3, #4]
 810c93a:	2b00      	cmp	r3, #0
 810c93c:	d015      	beq.n	810c96a <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810c93e:	687a      	ldr	r2, [r7, #4]
 810c940:	697b      	ldr	r3, [r7, #20]
 810c942:	3380      	adds	r3, #128	; 0x80
 810c944:	009b      	lsls	r3, r3, #2
 810c946:	4413      	add	r3, r2
 810c948:	685b      	ldr	r3, [r3, #4]
 810c94a:	685b      	ldr	r3, [r3, #4]
 810c94c:	68fa      	ldr	r2, [r7, #12]
 810c94e:	429a      	cmp	r2, r3
 810c950:	d101      	bne.n	810c956 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x66>
			return false; // Packet type already defined
 810c952:	2300      	movs	r3, #0
 810c954:	e023      	b.n	810c99e <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xae>
		insertion_point++;
 810c956:	697b      	ldr	r3, [r7, #20]
 810c958:	3301      	adds	r3, #1
 810c95a:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810c95c:	697b      	ldr	r3, [r7, #20]
 810c95e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810c962:	d1e4      	bne.n	810c92e <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x3e>
			insertion_point = 0;
 810c964:	2300      	movs	r3, #0
 810c966:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810c968:	e7e1      	b.n	810c92e <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810c96a:	78fb      	ldrb	r3, [r7, #3]
 810c96c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810c970:	00db      	lsls	r3, r3, #3
 810c972:	687a      	ldr	r2, [r7, #4]
 810c974:	4413      	add	r3, r2
 810c976:	3304      	adds	r3, #4
 810c978:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810c97a:	68bb      	ldr	r3, [r7, #8]
 810c97c:	78fa      	ldrb	r2, [r7, #3]
 810c97e:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810c980:	693b      	ldr	r3, [r7, #16]
 810c982:	b2da      	uxtb	r2, r3
 810c984:	68bb      	ldr	r3, [r7, #8]
 810c986:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810c988:	68bb      	ldr	r3, [r7, #8]
 810c98a:	68fa      	ldr	r2, [r7, #12]
 810c98c:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810c98e:	687a      	ldr	r2, [r7, #4]
 810c990:	697b      	ldr	r3, [r7, #20]
 810c992:	3380      	adds	r3, #128	; 0x80
 810c994:	009b      	lsls	r3, r3, #2
 810c996:	4413      	add	r3, r2
 810c998:	68ba      	ldr	r2, [r7, #8]
 810c99a:	605a      	str	r2, [r3, #4]
	return true;
 810c99c:	2301      	movs	r3, #1
}
 810c99e:	4618      	mov	r0, r3
 810c9a0:	3718      	adds	r7, #24
 810c9a2:	46bd      	mov	sp, r7
 810c9a4:	bd80      	pop	{r7, pc}
 810c9a6:	bf00      	nop
 810c9a8:	08110c9c 	.word	0x08110c9c

0810c9ac <_ZN10MessageBus6defineI10DataPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810c9ac:	b580      	push	{r7, lr}
 810c9ae:	b086      	sub	sp, #24
 810c9b0:	af00      	add	r7, sp, #0
 810c9b2:	6078      	str	r0, [r7, #4]
 810c9b4:	460b      	mov	r3, r1
 810c9b6:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810c9b8:	2304      	movs	r3, #4
 810c9ba:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810c9bc:	4829      	ldr	r0, [pc, #164]	; (810ca64 <_ZN10MessageBus6defineI10DataPacketEEbh+0xb8>)
 810c9be:	f7ff fe61 	bl	810c684 <_ZNKSt9type_info9hash_codeEv>
 810c9c2:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810c9c4:	68fb      	ldr	r3, [r7, #12]
 810c9c6:	b2db      	uxtb	r3, r3
 810c9c8:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810c9ca:	78fb      	ldrb	r3, [r7, #3]
 810c9cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810c9d0:	687a      	ldr	r2, [r7, #4]
 810c9d2:	00db      	lsls	r3, r3, #3
 810c9d4:	4413      	add	r3, r2
 810c9d6:	689b      	ldr	r3, [r3, #8]
 810c9d8:	2b00      	cmp	r3, #0
 810c9da:	d001      	beq.n	810c9e0 <_ZN10MessageBus6defineI10DataPacketEEbh+0x34>
		return false; // Packet ID already in use
 810c9dc:	2300      	movs	r3, #0
 810c9de:	e03c      	b.n	810ca5a <_ZN10MessageBus6defineI10DataPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810c9e0:	693b      	ldr	r3, [r7, #16]
 810c9e2:	2bff      	cmp	r3, #255	; 0xff
 810c9e4:	d901      	bls.n	810c9ea <_ZN10MessageBus6defineI10DataPacketEEbh+0x3e>
		return false; // Packet size too large
 810c9e6:	2300      	movs	r3, #0
 810c9e8:	e037      	b.n	810ca5a <_ZN10MessageBus6defineI10DataPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810c9ea:	687a      	ldr	r2, [r7, #4]
 810c9ec:	697b      	ldr	r3, [r7, #20]
 810c9ee:	3380      	adds	r3, #128	; 0x80
 810c9f0:	009b      	lsls	r3, r3, #2
 810c9f2:	4413      	add	r3, r2
 810c9f4:	685b      	ldr	r3, [r3, #4]
 810c9f6:	2b00      	cmp	r3, #0
 810c9f8:	d015      	beq.n	810ca26 <_ZN10MessageBus6defineI10DataPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810c9fa:	687a      	ldr	r2, [r7, #4]
 810c9fc:	697b      	ldr	r3, [r7, #20]
 810c9fe:	3380      	adds	r3, #128	; 0x80
 810ca00:	009b      	lsls	r3, r3, #2
 810ca02:	4413      	add	r3, r2
 810ca04:	685b      	ldr	r3, [r3, #4]
 810ca06:	685b      	ldr	r3, [r3, #4]
 810ca08:	68fa      	ldr	r2, [r7, #12]
 810ca0a:	429a      	cmp	r2, r3
 810ca0c:	d101      	bne.n	810ca12 <_ZN10MessageBus6defineI10DataPacketEEbh+0x66>
			return false; // Packet type already defined
 810ca0e:	2300      	movs	r3, #0
 810ca10:	e023      	b.n	810ca5a <_ZN10MessageBus6defineI10DataPacketEEbh+0xae>
		insertion_point++;
 810ca12:	697b      	ldr	r3, [r7, #20]
 810ca14:	3301      	adds	r3, #1
 810ca16:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810ca18:	697b      	ldr	r3, [r7, #20]
 810ca1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810ca1e:	d1e4      	bne.n	810c9ea <_ZN10MessageBus6defineI10DataPacketEEbh+0x3e>
			insertion_point = 0;
 810ca20:	2300      	movs	r3, #0
 810ca22:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810ca24:	e7e1      	b.n	810c9ea <_ZN10MessageBus6defineI10DataPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810ca26:	78fb      	ldrb	r3, [r7, #3]
 810ca28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810ca2c:	00db      	lsls	r3, r3, #3
 810ca2e:	687a      	ldr	r2, [r7, #4]
 810ca30:	4413      	add	r3, r2
 810ca32:	3304      	adds	r3, #4
 810ca34:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810ca36:	68bb      	ldr	r3, [r7, #8]
 810ca38:	78fa      	ldrb	r2, [r7, #3]
 810ca3a:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810ca3c:	693b      	ldr	r3, [r7, #16]
 810ca3e:	b2da      	uxtb	r2, r3
 810ca40:	68bb      	ldr	r3, [r7, #8]
 810ca42:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810ca44:	68bb      	ldr	r3, [r7, #8]
 810ca46:	68fa      	ldr	r2, [r7, #12]
 810ca48:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810ca4a:	687a      	ldr	r2, [r7, #4]
 810ca4c:	697b      	ldr	r3, [r7, #20]
 810ca4e:	3380      	adds	r3, #128	; 0x80
 810ca50:	009b      	lsls	r3, r3, #2
 810ca52:	4413      	add	r3, r2
 810ca54:	68ba      	ldr	r2, [r7, #8]
 810ca56:	605a      	str	r2, [r3, #4]
	return true;
 810ca58:	2301      	movs	r3, #1
}
 810ca5a:	4618      	mov	r0, r3
 810ca5c:	3718      	adds	r7, #24
 810ca5e:	46bd      	mov	sp, r7
 810ca60:	bd80      	pop	{r7, pc}
 810ca62:	bf00      	nop
 810ca64:	08110c84 	.word	0x08110c84

0810ca68 <_ZN10MessageBus6defineI11ErrorPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810ca68:	b580      	push	{r7, lr}
 810ca6a:	b086      	sub	sp, #24
 810ca6c:	af00      	add	r7, sp, #0
 810ca6e:	6078      	str	r0, [r7, #4]
 810ca70:	460b      	mov	r3, r1
 810ca72:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810ca74:	2301      	movs	r3, #1
 810ca76:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810ca78:	4829      	ldr	r0, [pc, #164]	; (810cb20 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xb8>)
 810ca7a:	f7ff fe03 	bl	810c684 <_ZNKSt9type_info9hash_codeEv>
 810ca7e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810ca80:	68fb      	ldr	r3, [r7, #12]
 810ca82:	b2db      	uxtb	r3, r3
 810ca84:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810ca86:	78fb      	ldrb	r3, [r7, #3]
 810ca88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810ca8c:	687a      	ldr	r2, [r7, #4]
 810ca8e:	00db      	lsls	r3, r3, #3
 810ca90:	4413      	add	r3, r2
 810ca92:	689b      	ldr	r3, [r3, #8]
 810ca94:	2b00      	cmp	r3, #0
 810ca96:	d001      	beq.n	810ca9c <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x34>
		return false; // Packet ID already in use
 810ca98:	2300      	movs	r3, #0
 810ca9a:	e03c      	b.n	810cb16 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810ca9c:	693b      	ldr	r3, [r7, #16]
 810ca9e:	2bff      	cmp	r3, #255	; 0xff
 810caa0:	d901      	bls.n	810caa6 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x3e>
		return false; // Packet size too large
 810caa2:	2300      	movs	r3, #0
 810caa4:	e037      	b.n	810cb16 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810caa6:	687a      	ldr	r2, [r7, #4]
 810caa8:	697b      	ldr	r3, [r7, #20]
 810caaa:	3380      	adds	r3, #128	; 0x80
 810caac:	009b      	lsls	r3, r3, #2
 810caae:	4413      	add	r3, r2
 810cab0:	685b      	ldr	r3, [r3, #4]
 810cab2:	2b00      	cmp	r3, #0
 810cab4:	d015      	beq.n	810cae2 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810cab6:	687a      	ldr	r2, [r7, #4]
 810cab8:	697b      	ldr	r3, [r7, #20]
 810caba:	3380      	adds	r3, #128	; 0x80
 810cabc:	009b      	lsls	r3, r3, #2
 810cabe:	4413      	add	r3, r2
 810cac0:	685b      	ldr	r3, [r3, #4]
 810cac2:	685b      	ldr	r3, [r3, #4]
 810cac4:	68fa      	ldr	r2, [r7, #12]
 810cac6:	429a      	cmp	r2, r3
 810cac8:	d101      	bne.n	810cace <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x66>
			return false; // Packet type already defined
 810caca:	2300      	movs	r3, #0
 810cacc:	e023      	b.n	810cb16 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xae>
		insertion_point++;
 810cace:	697b      	ldr	r3, [r7, #20]
 810cad0:	3301      	adds	r3, #1
 810cad2:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810cad4:	697b      	ldr	r3, [r7, #20]
 810cad6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810cada:	d1e4      	bne.n	810caa6 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x3e>
			insertion_point = 0;
 810cadc:	2300      	movs	r3, #0
 810cade:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810cae0:	e7e1      	b.n	810caa6 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810cae2:	78fb      	ldrb	r3, [r7, #3]
 810cae4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810cae8:	00db      	lsls	r3, r3, #3
 810caea:	687a      	ldr	r2, [r7, #4]
 810caec:	4413      	add	r3, r2
 810caee:	3304      	adds	r3, #4
 810caf0:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810caf2:	68bb      	ldr	r3, [r7, #8]
 810caf4:	78fa      	ldrb	r2, [r7, #3]
 810caf6:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810caf8:	693b      	ldr	r3, [r7, #16]
 810cafa:	b2da      	uxtb	r2, r3
 810cafc:	68bb      	ldr	r3, [r7, #8]
 810cafe:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810cb00:	68bb      	ldr	r3, [r7, #8]
 810cb02:	68fa      	ldr	r2, [r7, #12]
 810cb04:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810cb06:	687a      	ldr	r2, [r7, #4]
 810cb08:	697b      	ldr	r3, [r7, #20]
 810cb0a:	3380      	adds	r3, #128	; 0x80
 810cb0c:	009b      	lsls	r3, r3, #2
 810cb0e:	4413      	add	r3, r2
 810cb10:	68ba      	ldr	r2, [r7, #8]
 810cb12:	605a      	str	r2, [r3, #4]
	return true;
 810cb14:	2301      	movs	r3, #1
}
 810cb16:	4618      	mov	r0, r3
 810cb18:	3718      	adds	r7, #24
 810cb1a:	46bd      	mov	sp, r7
 810cb1c:	bd80      	pop	{r7, pc}
 810cb1e:	bf00      	nop
 810cb20:	08110c6c 	.word	0x08110c6c

0810cb24 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810cb24:	b580      	push	{r7, lr}
 810cb26:	b086      	sub	sp, #24
 810cb28:	af00      	add	r7, sp, #0
 810cb2a:	6078      	str	r0, [r7, #4]
 810cb2c:	460b      	mov	r3, r1
 810cb2e:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810cb30:	2308      	movs	r3, #8
 810cb32:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810cb34:	4829      	ldr	r0, [pc, #164]	; (810cbdc <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0xb8>)
 810cb36:	f7ff fda5 	bl	810c684 <_ZNKSt9type_info9hash_codeEv>
 810cb3a:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810cb3c:	68fb      	ldr	r3, [r7, #12]
 810cb3e:	b2db      	uxtb	r3, r3
 810cb40:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810cb42:	78fb      	ldrb	r3, [r7, #3]
 810cb44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810cb48:	687a      	ldr	r2, [r7, #4]
 810cb4a:	00db      	lsls	r3, r3, #3
 810cb4c:	4413      	add	r3, r2
 810cb4e:	689b      	ldr	r3, [r3, #8]
 810cb50:	2b00      	cmp	r3, #0
 810cb52:	d001      	beq.n	810cb58 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x34>
		return false; // Packet ID already in use
 810cb54:	2300      	movs	r3, #0
 810cb56:	e03c      	b.n	810cbd2 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810cb58:	693b      	ldr	r3, [r7, #16]
 810cb5a:	2bff      	cmp	r3, #255	; 0xff
 810cb5c:	d901      	bls.n	810cb62 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x3e>
		return false; // Packet size too large
 810cb5e:	2300      	movs	r3, #0
 810cb60:	e037      	b.n	810cbd2 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810cb62:	687a      	ldr	r2, [r7, #4]
 810cb64:	697b      	ldr	r3, [r7, #20]
 810cb66:	3380      	adds	r3, #128	; 0x80
 810cb68:	009b      	lsls	r3, r3, #2
 810cb6a:	4413      	add	r3, r2
 810cb6c:	685b      	ldr	r3, [r3, #4]
 810cb6e:	2b00      	cmp	r3, #0
 810cb70:	d015      	beq.n	810cb9e <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810cb72:	687a      	ldr	r2, [r7, #4]
 810cb74:	697b      	ldr	r3, [r7, #20]
 810cb76:	3380      	adds	r3, #128	; 0x80
 810cb78:	009b      	lsls	r3, r3, #2
 810cb7a:	4413      	add	r3, r2
 810cb7c:	685b      	ldr	r3, [r3, #4]
 810cb7e:	685b      	ldr	r3, [r3, #4]
 810cb80:	68fa      	ldr	r2, [r7, #12]
 810cb82:	429a      	cmp	r2, r3
 810cb84:	d101      	bne.n	810cb8a <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x66>
			return false; // Packet type already defined
 810cb86:	2300      	movs	r3, #0
 810cb88:	e023      	b.n	810cbd2 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0xae>
		insertion_point++;
 810cb8a:	697b      	ldr	r3, [r7, #20]
 810cb8c:	3301      	adds	r3, #1
 810cb8e:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810cb90:	697b      	ldr	r3, [r7, #20]
 810cb92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810cb96:	d1e4      	bne.n	810cb62 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x3e>
			insertion_point = 0;
 810cb98:	2300      	movs	r3, #0
 810cb9a:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810cb9c:	e7e1      	b.n	810cb62 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810cb9e:	78fb      	ldrb	r3, [r7, #3]
 810cba0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810cba4:	00db      	lsls	r3, r3, #3
 810cba6:	687a      	ldr	r2, [r7, #4]
 810cba8:	4413      	add	r3, r2
 810cbaa:	3304      	adds	r3, #4
 810cbac:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810cbae:	68bb      	ldr	r3, [r7, #8]
 810cbb0:	78fa      	ldrb	r2, [r7, #3]
 810cbb2:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810cbb4:	693b      	ldr	r3, [r7, #16]
 810cbb6:	b2da      	uxtb	r2, r3
 810cbb8:	68bb      	ldr	r3, [r7, #8]
 810cbba:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810cbbc:	68bb      	ldr	r3, [r7, #8]
 810cbbe:	68fa      	ldr	r2, [r7, #12]
 810cbc0:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810cbc2:	687a      	ldr	r2, [r7, #4]
 810cbc4:	697b      	ldr	r3, [r7, #20]
 810cbc6:	3380      	adds	r3, #128	; 0x80
 810cbc8:	009b      	lsls	r3, r3, #2
 810cbca:	4413      	add	r3, r2
 810cbcc:	68ba      	ldr	r2, [r7, #8]
 810cbce:	605a      	str	r2, [r3, #4]
	return true;
 810cbd0:	2301      	movs	r3, #1
}
 810cbd2:	4618      	mov	r0, r3
 810cbd4:	3718      	adds	r7, #24
 810cbd6:	46bd      	mov	sp, r7
 810cbd8:	bd80      	pop	{r7, pc}
 810cbda:	bf00      	nop
 810cbdc:	08110c48 	.word	0x08110c48

0810cbe0 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810cbe0:	b580      	push	{r7, lr}
 810cbe2:	b086      	sub	sp, #24
 810cbe4:	af00      	add	r7, sp, #0
 810cbe6:	6078      	str	r0, [r7, #4]
 810cbe8:	460b      	mov	r3, r1
 810cbea:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810cbec:	2324      	movs	r3, #36	; 0x24
 810cbee:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810cbf0:	4829      	ldr	r0, [pc, #164]	; (810cc98 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0xb8>)
 810cbf2:	f7ff fd47 	bl	810c684 <_ZNKSt9type_info9hash_codeEv>
 810cbf6:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810cbf8:	68fb      	ldr	r3, [r7, #12]
 810cbfa:	b2db      	uxtb	r3, r3
 810cbfc:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810cbfe:	78fb      	ldrb	r3, [r7, #3]
 810cc00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810cc04:	687a      	ldr	r2, [r7, #4]
 810cc06:	00db      	lsls	r3, r3, #3
 810cc08:	4413      	add	r3, r2
 810cc0a:	689b      	ldr	r3, [r3, #8]
 810cc0c:	2b00      	cmp	r3, #0
 810cc0e:	d001      	beq.n	810cc14 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x34>
		return false; // Packet ID already in use
 810cc10:	2300      	movs	r3, #0
 810cc12:	e03c      	b.n	810cc8e <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810cc14:	693b      	ldr	r3, [r7, #16]
 810cc16:	2bff      	cmp	r3, #255	; 0xff
 810cc18:	d901      	bls.n	810cc1e <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x3e>
		return false; // Packet size too large
 810cc1a:	2300      	movs	r3, #0
 810cc1c:	e037      	b.n	810cc8e <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810cc1e:	687a      	ldr	r2, [r7, #4]
 810cc20:	697b      	ldr	r3, [r7, #20]
 810cc22:	3380      	adds	r3, #128	; 0x80
 810cc24:	009b      	lsls	r3, r3, #2
 810cc26:	4413      	add	r3, r2
 810cc28:	685b      	ldr	r3, [r3, #4]
 810cc2a:	2b00      	cmp	r3, #0
 810cc2c:	d015      	beq.n	810cc5a <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810cc2e:	687a      	ldr	r2, [r7, #4]
 810cc30:	697b      	ldr	r3, [r7, #20]
 810cc32:	3380      	adds	r3, #128	; 0x80
 810cc34:	009b      	lsls	r3, r3, #2
 810cc36:	4413      	add	r3, r2
 810cc38:	685b      	ldr	r3, [r3, #4]
 810cc3a:	685b      	ldr	r3, [r3, #4]
 810cc3c:	68fa      	ldr	r2, [r7, #12]
 810cc3e:	429a      	cmp	r2, r3
 810cc40:	d101      	bne.n	810cc46 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x66>
			return false; // Packet type already defined
 810cc42:	2300      	movs	r3, #0
 810cc44:	e023      	b.n	810cc8e <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0xae>
		insertion_point++;
 810cc46:	697b      	ldr	r3, [r7, #20]
 810cc48:	3301      	adds	r3, #1
 810cc4a:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810cc4c:	697b      	ldr	r3, [r7, #20]
 810cc4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810cc52:	d1e4      	bne.n	810cc1e <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x3e>
			insertion_point = 0;
 810cc54:	2300      	movs	r3, #0
 810cc56:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810cc58:	e7e1      	b.n	810cc1e <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810cc5a:	78fb      	ldrb	r3, [r7, #3]
 810cc5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810cc60:	00db      	lsls	r3, r3, #3
 810cc62:	687a      	ldr	r2, [r7, #4]
 810cc64:	4413      	add	r3, r2
 810cc66:	3304      	adds	r3, #4
 810cc68:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810cc6a:	68bb      	ldr	r3, [r7, #8]
 810cc6c:	78fa      	ldrb	r2, [r7, #3]
 810cc6e:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810cc70:	693b      	ldr	r3, [r7, #16]
 810cc72:	b2da      	uxtb	r2, r3
 810cc74:	68bb      	ldr	r3, [r7, #8]
 810cc76:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810cc78:	68bb      	ldr	r3, [r7, #8]
 810cc7a:	68fa      	ldr	r2, [r7, #12]
 810cc7c:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810cc7e:	687a      	ldr	r2, [r7, #4]
 810cc80:	697b      	ldr	r3, [r7, #20]
 810cc82:	3380      	adds	r3, #128	; 0x80
 810cc84:	009b      	lsls	r3, r3, #2
 810cc86:	4413      	add	r3, r2
 810cc88:	68ba      	ldr	r2, [r7, #8]
 810cc8a:	605a      	str	r2, [r3, #4]
	return true;
 810cc8c:	2301      	movs	r3, #1
}
 810cc8e:	4618      	mov	r0, r3
 810cc90:	3718      	adds	r7, #24
 810cc92:	46bd      	mov	sp, r7
 810cc94:	bd80      	pop	{r7, pc}
 810cc96:	bf00      	nop
 810cc98:	08110c24 	.word	0x08110c24

0810cc9c <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810cc9c:	b580      	push	{r7, lr}
 810cc9e:	b086      	sub	sp, #24
 810cca0:	af00      	add	r7, sp, #0
 810cca2:	6078      	str	r0, [r7, #4]
 810cca4:	460b      	mov	r3, r1
 810cca6:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810cca8:	2304      	movs	r3, #4
 810ccaa:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810ccac:	4829      	ldr	r0, [pc, #164]	; (810cd54 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0xb8>)
 810ccae:	f7ff fce9 	bl	810c684 <_ZNKSt9type_info9hash_codeEv>
 810ccb2:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810ccb4:	68fb      	ldr	r3, [r7, #12]
 810ccb6:	b2db      	uxtb	r3, r3
 810ccb8:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810ccba:	78fb      	ldrb	r3, [r7, #3]
 810ccbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810ccc0:	687a      	ldr	r2, [r7, #4]
 810ccc2:	00db      	lsls	r3, r3, #3
 810ccc4:	4413      	add	r3, r2
 810ccc6:	689b      	ldr	r3, [r3, #8]
 810ccc8:	2b00      	cmp	r3, #0
 810ccca:	d001      	beq.n	810ccd0 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x34>
		return false; // Packet ID already in use
 810cccc:	2300      	movs	r3, #0
 810ccce:	e03c      	b.n	810cd4a <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810ccd0:	693b      	ldr	r3, [r7, #16]
 810ccd2:	2bff      	cmp	r3, #255	; 0xff
 810ccd4:	d901      	bls.n	810ccda <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x3e>
		return false; // Packet size too large
 810ccd6:	2300      	movs	r3, #0
 810ccd8:	e037      	b.n	810cd4a <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810ccda:	687a      	ldr	r2, [r7, #4]
 810ccdc:	697b      	ldr	r3, [r7, #20]
 810ccde:	3380      	adds	r3, #128	; 0x80
 810cce0:	009b      	lsls	r3, r3, #2
 810cce2:	4413      	add	r3, r2
 810cce4:	685b      	ldr	r3, [r3, #4]
 810cce6:	2b00      	cmp	r3, #0
 810cce8:	d015      	beq.n	810cd16 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810ccea:	687a      	ldr	r2, [r7, #4]
 810ccec:	697b      	ldr	r3, [r7, #20]
 810ccee:	3380      	adds	r3, #128	; 0x80
 810ccf0:	009b      	lsls	r3, r3, #2
 810ccf2:	4413      	add	r3, r2
 810ccf4:	685b      	ldr	r3, [r3, #4]
 810ccf6:	685b      	ldr	r3, [r3, #4]
 810ccf8:	68fa      	ldr	r2, [r7, #12]
 810ccfa:	429a      	cmp	r2, r3
 810ccfc:	d101      	bne.n	810cd02 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x66>
			return false; // Packet type already defined
 810ccfe:	2300      	movs	r3, #0
 810cd00:	e023      	b.n	810cd4a <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0xae>
		insertion_point++;
 810cd02:	697b      	ldr	r3, [r7, #20]
 810cd04:	3301      	adds	r3, #1
 810cd06:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810cd08:	697b      	ldr	r3, [r7, #20]
 810cd0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810cd0e:	d1e4      	bne.n	810ccda <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x3e>
			insertion_point = 0;
 810cd10:	2300      	movs	r3, #0
 810cd12:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810cd14:	e7e1      	b.n	810ccda <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810cd16:	78fb      	ldrb	r3, [r7, #3]
 810cd18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810cd1c:	00db      	lsls	r3, r3, #3
 810cd1e:	687a      	ldr	r2, [r7, #4]
 810cd20:	4413      	add	r3, r2
 810cd22:	3304      	adds	r3, #4
 810cd24:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810cd26:	68bb      	ldr	r3, [r7, #8]
 810cd28:	78fa      	ldrb	r2, [r7, #3]
 810cd2a:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810cd2c:	693b      	ldr	r3, [r7, #16]
 810cd2e:	b2da      	uxtb	r2, r3
 810cd30:	68bb      	ldr	r3, [r7, #8]
 810cd32:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810cd34:	68bb      	ldr	r3, [r7, #8]
 810cd36:	68fa      	ldr	r2, [r7, #12]
 810cd38:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810cd3a:	687a      	ldr	r2, [r7, #4]
 810cd3c:	697b      	ldr	r3, [r7, #20]
 810cd3e:	3380      	adds	r3, #128	; 0x80
 810cd40:	009b      	lsls	r3, r3, #2
 810cd42:	4413      	add	r3, r2
 810cd44:	68ba      	ldr	r2, [r7, #8]
 810cd46:	605a      	str	r2, [r3, #4]
	return true;
 810cd48:	2301      	movs	r3, #1
}
 810cd4a:	4618      	mov	r0, r3
 810cd4c:	3718      	adds	r7, #24
 810cd4e:	46bd      	mov	sp, r7
 810cd50:	bd80      	pop	{r7, pc}
 810cd52:	bf00      	nop
 810cd54:	08110c00 	.word	0x08110c00

0810cd58 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810cd58:	b580      	push	{r7, lr}
 810cd5a:	b086      	sub	sp, #24
 810cd5c:	af00      	add	r7, sp, #0
 810cd5e:	6078      	str	r0, [r7, #4]
 810cd60:	460b      	mov	r3, r1
 810cd62:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810cd64:	2310      	movs	r3, #16
 810cd66:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810cd68:	4829      	ldr	r0, [pc, #164]	; (810ce10 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0xb8>)
 810cd6a:	f7ff fc8b 	bl	810c684 <_ZNKSt9type_info9hash_codeEv>
 810cd6e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810cd70:	68fb      	ldr	r3, [r7, #12]
 810cd72:	b2db      	uxtb	r3, r3
 810cd74:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810cd76:	78fb      	ldrb	r3, [r7, #3]
 810cd78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810cd7c:	687a      	ldr	r2, [r7, #4]
 810cd7e:	00db      	lsls	r3, r3, #3
 810cd80:	4413      	add	r3, r2
 810cd82:	689b      	ldr	r3, [r3, #8]
 810cd84:	2b00      	cmp	r3, #0
 810cd86:	d001      	beq.n	810cd8c <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x34>
		return false; // Packet ID already in use
 810cd88:	2300      	movs	r3, #0
 810cd8a:	e03c      	b.n	810ce06 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810cd8c:	693b      	ldr	r3, [r7, #16]
 810cd8e:	2bff      	cmp	r3, #255	; 0xff
 810cd90:	d901      	bls.n	810cd96 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x3e>
		return false; // Packet size too large
 810cd92:	2300      	movs	r3, #0
 810cd94:	e037      	b.n	810ce06 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810cd96:	687a      	ldr	r2, [r7, #4]
 810cd98:	697b      	ldr	r3, [r7, #20]
 810cd9a:	3380      	adds	r3, #128	; 0x80
 810cd9c:	009b      	lsls	r3, r3, #2
 810cd9e:	4413      	add	r3, r2
 810cda0:	685b      	ldr	r3, [r3, #4]
 810cda2:	2b00      	cmp	r3, #0
 810cda4:	d015      	beq.n	810cdd2 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810cda6:	687a      	ldr	r2, [r7, #4]
 810cda8:	697b      	ldr	r3, [r7, #20]
 810cdaa:	3380      	adds	r3, #128	; 0x80
 810cdac:	009b      	lsls	r3, r3, #2
 810cdae:	4413      	add	r3, r2
 810cdb0:	685b      	ldr	r3, [r3, #4]
 810cdb2:	685b      	ldr	r3, [r3, #4]
 810cdb4:	68fa      	ldr	r2, [r7, #12]
 810cdb6:	429a      	cmp	r2, r3
 810cdb8:	d101      	bne.n	810cdbe <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x66>
			return false; // Packet type already defined
 810cdba:	2300      	movs	r3, #0
 810cdbc:	e023      	b.n	810ce06 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0xae>
		insertion_point++;
 810cdbe:	697b      	ldr	r3, [r7, #20]
 810cdc0:	3301      	adds	r3, #1
 810cdc2:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810cdc4:	697b      	ldr	r3, [r7, #20]
 810cdc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810cdca:	d1e4      	bne.n	810cd96 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x3e>
			insertion_point = 0;
 810cdcc:	2300      	movs	r3, #0
 810cdce:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810cdd0:	e7e1      	b.n	810cd96 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810cdd2:	78fb      	ldrb	r3, [r7, #3]
 810cdd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810cdd8:	00db      	lsls	r3, r3, #3
 810cdda:	687a      	ldr	r2, [r7, #4]
 810cddc:	4413      	add	r3, r2
 810cdde:	3304      	adds	r3, #4
 810cde0:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810cde2:	68bb      	ldr	r3, [r7, #8]
 810cde4:	78fa      	ldrb	r2, [r7, #3]
 810cde6:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810cde8:	693b      	ldr	r3, [r7, #16]
 810cdea:	b2da      	uxtb	r2, r3
 810cdec:	68bb      	ldr	r3, [r7, #8]
 810cdee:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810cdf0:	68bb      	ldr	r3, [r7, #8]
 810cdf2:	68fa      	ldr	r2, [r7, #12]
 810cdf4:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810cdf6:	687a      	ldr	r2, [r7, #4]
 810cdf8:	697b      	ldr	r3, [r7, #20]
 810cdfa:	3380      	adds	r3, #128	; 0x80
 810cdfc:	009b      	lsls	r3, r3, #2
 810cdfe:	4413      	add	r3, r2
 810ce00:	68ba      	ldr	r2, [r7, #8]
 810ce02:	605a      	str	r2, [r3, #4]
	return true;
 810ce04:	2301      	movs	r3, #1
}
 810ce06:	4618      	mov	r0, r3
 810ce08:	3718      	adds	r7, #24
 810ce0a:	46bd      	mov	sp, r7
 810ce0c:	bd80      	pop	{r7, pc}
 810ce0e:	bf00      	nop
 810ce10:	08110be0 	.word	0x08110be0

0810ce14 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810ce14:	b580      	push	{r7, lr}
 810ce16:	b086      	sub	sp, #24
 810ce18:	af00      	add	r7, sp, #0
 810ce1a:	6078      	str	r0, [r7, #4]
 810ce1c:	460b      	mov	r3, r1
 810ce1e:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810ce20:	2310      	movs	r3, #16
 810ce22:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810ce24:	4829      	ldr	r0, [pc, #164]	; (810cecc <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0xb8>)
 810ce26:	f7ff fc2d 	bl	810c684 <_ZNKSt9type_info9hash_codeEv>
 810ce2a:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810ce2c:	68fb      	ldr	r3, [r7, #12]
 810ce2e:	b2db      	uxtb	r3, r3
 810ce30:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810ce32:	78fb      	ldrb	r3, [r7, #3]
 810ce34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810ce38:	687a      	ldr	r2, [r7, #4]
 810ce3a:	00db      	lsls	r3, r3, #3
 810ce3c:	4413      	add	r3, r2
 810ce3e:	689b      	ldr	r3, [r3, #8]
 810ce40:	2b00      	cmp	r3, #0
 810ce42:	d001      	beq.n	810ce48 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x34>
		return false; // Packet ID already in use
 810ce44:	2300      	movs	r3, #0
 810ce46:	e03c      	b.n	810cec2 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810ce48:	693b      	ldr	r3, [r7, #16]
 810ce4a:	2bff      	cmp	r3, #255	; 0xff
 810ce4c:	d901      	bls.n	810ce52 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x3e>
		return false; // Packet size too large
 810ce4e:	2300      	movs	r3, #0
 810ce50:	e037      	b.n	810cec2 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810ce52:	687a      	ldr	r2, [r7, #4]
 810ce54:	697b      	ldr	r3, [r7, #20]
 810ce56:	3380      	adds	r3, #128	; 0x80
 810ce58:	009b      	lsls	r3, r3, #2
 810ce5a:	4413      	add	r3, r2
 810ce5c:	685b      	ldr	r3, [r3, #4]
 810ce5e:	2b00      	cmp	r3, #0
 810ce60:	d015      	beq.n	810ce8e <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810ce62:	687a      	ldr	r2, [r7, #4]
 810ce64:	697b      	ldr	r3, [r7, #20]
 810ce66:	3380      	adds	r3, #128	; 0x80
 810ce68:	009b      	lsls	r3, r3, #2
 810ce6a:	4413      	add	r3, r2
 810ce6c:	685b      	ldr	r3, [r3, #4]
 810ce6e:	685b      	ldr	r3, [r3, #4]
 810ce70:	68fa      	ldr	r2, [r7, #12]
 810ce72:	429a      	cmp	r2, r3
 810ce74:	d101      	bne.n	810ce7a <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x66>
			return false; // Packet type already defined
 810ce76:	2300      	movs	r3, #0
 810ce78:	e023      	b.n	810cec2 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0xae>
		insertion_point++;
 810ce7a:	697b      	ldr	r3, [r7, #20]
 810ce7c:	3301      	adds	r3, #1
 810ce7e:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810ce80:	697b      	ldr	r3, [r7, #20]
 810ce82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810ce86:	d1e4      	bne.n	810ce52 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x3e>
			insertion_point = 0;
 810ce88:	2300      	movs	r3, #0
 810ce8a:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810ce8c:	e7e1      	b.n	810ce52 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810ce8e:	78fb      	ldrb	r3, [r7, #3]
 810ce90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810ce94:	00db      	lsls	r3, r3, #3
 810ce96:	687a      	ldr	r2, [r7, #4]
 810ce98:	4413      	add	r3, r2
 810ce9a:	3304      	adds	r3, #4
 810ce9c:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810ce9e:	68bb      	ldr	r3, [r7, #8]
 810cea0:	78fa      	ldrb	r2, [r7, #3]
 810cea2:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810cea4:	693b      	ldr	r3, [r7, #16]
 810cea6:	b2da      	uxtb	r2, r3
 810cea8:	68bb      	ldr	r3, [r7, #8]
 810ceaa:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810ceac:	68bb      	ldr	r3, [r7, #8]
 810ceae:	68fa      	ldr	r2, [r7, #12]
 810ceb0:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810ceb2:	687a      	ldr	r2, [r7, #4]
 810ceb4:	697b      	ldr	r3, [r7, #20]
 810ceb6:	3380      	adds	r3, #128	; 0x80
 810ceb8:	009b      	lsls	r3, r3, #2
 810ceba:	4413      	add	r3, r2
 810cebc:	68ba      	ldr	r2, [r7, #8]
 810cebe:	605a      	str	r2, [r3, #4]
	return true;
 810cec0:	2301      	movs	r3, #1
}
 810cec2:	4618      	mov	r0, r3
 810cec4:	3718      	adds	r7, #24
 810cec6:	46bd      	mov	sp, r7
 810cec8:	bd80      	pop	{r7, pc}
 810ceca:	bf00      	nop
 810cecc:	08110bc0 	.word	0x08110bc0

0810ced0 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810ced0:	b580      	push	{r7, lr}
 810ced2:	b086      	sub	sp, #24
 810ced4:	af00      	add	r7, sp, #0
 810ced6:	6078      	str	r0, [r7, #4]
 810ced8:	460b      	mov	r3, r1
 810ceda:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810cedc:	2305      	movs	r3, #5
 810cede:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810cee0:	4829      	ldr	r0, [pc, #164]	; (810cf88 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0xb8>)
 810cee2:	f7ff fbcf 	bl	810c684 <_ZNKSt9type_info9hash_codeEv>
 810cee6:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810cee8:	68fb      	ldr	r3, [r7, #12]
 810ceea:	b2db      	uxtb	r3, r3
 810ceec:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810ceee:	78fb      	ldrb	r3, [r7, #3]
 810cef0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810cef4:	687a      	ldr	r2, [r7, #4]
 810cef6:	00db      	lsls	r3, r3, #3
 810cef8:	4413      	add	r3, r2
 810cefa:	689b      	ldr	r3, [r3, #8]
 810cefc:	2b00      	cmp	r3, #0
 810cefe:	d001      	beq.n	810cf04 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x34>
		return false; // Packet ID already in use
 810cf00:	2300      	movs	r3, #0
 810cf02:	e03c      	b.n	810cf7e <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810cf04:	693b      	ldr	r3, [r7, #16]
 810cf06:	2bff      	cmp	r3, #255	; 0xff
 810cf08:	d901      	bls.n	810cf0e <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x3e>
		return false; // Packet size too large
 810cf0a:	2300      	movs	r3, #0
 810cf0c:	e037      	b.n	810cf7e <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810cf0e:	687a      	ldr	r2, [r7, #4]
 810cf10:	697b      	ldr	r3, [r7, #20]
 810cf12:	3380      	adds	r3, #128	; 0x80
 810cf14:	009b      	lsls	r3, r3, #2
 810cf16:	4413      	add	r3, r2
 810cf18:	685b      	ldr	r3, [r3, #4]
 810cf1a:	2b00      	cmp	r3, #0
 810cf1c:	d015      	beq.n	810cf4a <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810cf1e:	687a      	ldr	r2, [r7, #4]
 810cf20:	697b      	ldr	r3, [r7, #20]
 810cf22:	3380      	adds	r3, #128	; 0x80
 810cf24:	009b      	lsls	r3, r3, #2
 810cf26:	4413      	add	r3, r2
 810cf28:	685b      	ldr	r3, [r3, #4]
 810cf2a:	685b      	ldr	r3, [r3, #4]
 810cf2c:	68fa      	ldr	r2, [r7, #12]
 810cf2e:	429a      	cmp	r2, r3
 810cf30:	d101      	bne.n	810cf36 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x66>
			return false; // Packet type already defined
 810cf32:	2300      	movs	r3, #0
 810cf34:	e023      	b.n	810cf7e <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0xae>
		insertion_point++;
 810cf36:	697b      	ldr	r3, [r7, #20]
 810cf38:	3301      	adds	r3, #1
 810cf3a:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810cf3c:	697b      	ldr	r3, [r7, #20]
 810cf3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810cf42:	d1e4      	bne.n	810cf0e <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x3e>
			insertion_point = 0;
 810cf44:	2300      	movs	r3, #0
 810cf46:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810cf48:	e7e1      	b.n	810cf0e <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810cf4a:	78fb      	ldrb	r3, [r7, #3]
 810cf4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810cf50:	00db      	lsls	r3, r3, #3
 810cf52:	687a      	ldr	r2, [r7, #4]
 810cf54:	4413      	add	r3, r2
 810cf56:	3304      	adds	r3, #4
 810cf58:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810cf5a:	68bb      	ldr	r3, [r7, #8]
 810cf5c:	78fa      	ldrb	r2, [r7, #3]
 810cf5e:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810cf60:	693b      	ldr	r3, [r7, #16]
 810cf62:	b2da      	uxtb	r2, r3
 810cf64:	68bb      	ldr	r3, [r7, #8]
 810cf66:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810cf68:	68bb      	ldr	r3, [r7, #8]
 810cf6a:	68fa      	ldr	r2, [r7, #12]
 810cf6c:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810cf6e:	687a      	ldr	r2, [r7, #4]
 810cf70:	697b      	ldr	r3, [r7, #20]
 810cf72:	3380      	adds	r3, #128	; 0x80
 810cf74:	009b      	lsls	r3, r3, #2
 810cf76:	4413      	add	r3, r2
 810cf78:	68ba      	ldr	r2, [r7, #8]
 810cf7a:	605a      	str	r2, [r3, #4]
	return true;
 810cf7c:	2301      	movs	r3, #1
}
 810cf7e:	4618      	mov	r0, r3
 810cf80:	3718      	adds	r7, #24
 810cf82:	46bd      	mov	sp, r7
 810cf84:	bd80      	pop	{r7, pc}
 810cf86:	bf00      	nop
 810cf88:	08110ba0 	.word	0x08110ba0

0810cf8c <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810cf8c:	b580      	push	{r7, lr}
 810cf8e:	b086      	sub	sp, #24
 810cf90:	af00      	add	r7, sp, #0
 810cf92:	6078      	str	r0, [r7, #4]
 810cf94:	460b      	mov	r3, r1
 810cf96:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810cf98:	2304      	movs	r3, #4
 810cf9a:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810cf9c:	4829      	ldr	r0, [pc, #164]	; (810d044 <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0xb8>)
 810cf9e:	f7ff fb71 	bl	810c684 <_ZNKSt9type_info9hash_codeEv>
 810cfa2:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810cfa4:	68fb      	ldr	r3, [r7, #12]
 810cfa6:	b2db      	uxtb	r3, r3
 810cfa8:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810cfaa:	78fb      	ldrb	r3, [r7, #3]
 810cfac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810cfb0:	687a      	ldr	r2, [r7, #4]
 810cfb2:	00db      	lsls	r3, r3, #3
 810cfb4:	4413      	add	r3, r2
 810cfb6:	689b      	ldr	r3, [r3, #8]
 810cfb8:	2b00      	cmp	r3, #0
 810cfba:	d001      	beq.n	810cfc0 <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x34>
		return false; // Packet ID already in use
 810cfbc:	2300      	movs	r3, #0
 810cfbe:	e03c      	b.n	810d03a <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810cfc0:	693b      	ldr	r3, [r7, #16]
 810cfc2:	2bff      	cmp	r3, #255	; 0xff
 810cfc4:	d901      	bls.n	810cfca <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x3e>
		return false; // Packet size too large
 810cfc6:	2300      	movs	r3, #0
 810cfc8:	e037      	b.n	810d03a <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810cfca:	687a      	ldr	r2, [r7, #4]
 810cfcc:	697b      	ldr	r3, [r7, #20]
 810cfce:	3380      	adds	r3, #128	; 0x80
 810cfd0:	009b      	lsls	r3, r3, #2
 810cfd2:	4413      	add	r3, r2
 810cfd4:	685b      	ldr	r3, [r3, #4]
 810cfd6:	2b00      	cmp	r3, #0
 810cfd8:	d015      	beq.n	810d006 <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810cfda:	687a      	ldr	r2, [r7, #4]
 810cfdc:	697b      	ldr	r3, [r7, #20]
 810cfde:	3380      	adds	r3, #128	; 0x80
 810cfe0:	009b      	lsls	r3, r3, #2
 810cfe2:	4413      	add	r3, r2
 810cfe4:	685b      	ldr	r3, [r3, #4]
 810cfe6:	685b      	ldr	r3, [r3, #4]
 810cfe8:	68fa      	ldr	r2, [r7, #12]
 810cfea:	429a      	cmp	r2, r3
 810cfec:	d101      	bne.n	810cff2 <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x66>
			return false; // Packet type already defined
 810cfee:	2300      	movs	r3, #0
 810cff0:	e023      	b.n	810d03a <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0xae>
		insertion_point++;
 810cff2:	697b      	ldr	r3, [r7, #20]
 810cff4:	3301      	adds	r3, #1
 810cff6:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810cff8:	697b      	ldr	r3, [r7, #20]
 810cffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810cffe:	d1e4      	bne.n	810cfca <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x3e>
			insertion_point = 0;
 810d000:	2300      	movs	r3, #0
 810d002:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810d004:	e7e1      	b.n	810cfca <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810d006:	78fb      	ldrb	r3, [r7, #3]
 810d008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810d00c:	00db      	lsls	r3, r3, #3
 810d00e:	687a      	ldr	r2, [r7, #4]
 810d010:	4413      	add	r3, r2
 810d012:	3304      	adds	r3, #4
 810d014:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810d016:	68bb      	ldr	r3, [r7, #8]
 810d018:	78fa      	ldrb	r2, [r7, #3]
 810d01a:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810d01c:	693b      	ldr	r3, [r7, #16]
 810d01e:	b2da      	uxtb	r2, r3
 810d020:	68bb      	ldr	r3, [r7, #8]
 810d022:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810d024:	68bb      	ldr	r3, [r7, #8]
 810d026:	68fa      	ldr	r2, [r7, #12]
 810d028:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810d02a:	687a      	ldr	r2, [r7, #4]
 810d02c:	697b      	ldr	r3, [r7, #20]
 810d02e:	3380      	adds	r3, #128	; 0x80
 810d030:	009b      	lsls	r3, r3, #2
 810d032:	4413      	add	r3, r2
 810d034:	68ba      	ldr	r2, [r7, #8]
 810d036:	605a      	str	r2, [r3, #4]
	return true;
 810d038:	2301      	movs	r3, #1
}
 810d03a:	4618      	mov	r0, r3
 810d03c:	3718      	adds	r7, #24
 810d03e:	46bd      	mov	sp, r7
 810d040:	bd80      	pop	{r7, pc}
 810d042:	bf00      	nop
 810d044:	08110b80 	.word	0x08110b80

0810d048 <_ZN10MessageBus4sendI21Science_MeasurePacketEEbPT_>:
}

/*
 * Sends the given message using the implemented transmission protocol.
 */
template<typename T> bool MessageBus::send(T *message) {
 810d048:	b580      	push	{r7, lr}
 810d04a:	b084      	sub	sp, #16
 810d04c:	af00      	add	r7, sp, #0
 810d04e:	6078      	str	r0, [r7, #4]
 810d050:	6039      	str	r1, [r7, #0]
	size_t hash = typeid(T).hash_code();
 810d052:	4809      	ldr	r0, [pc, #36]	; (810d078 <_ZN10MessageBus4sendI21Science_MeasurePacketEEbPT_+0x30>)
 810d054:	f7ff fb16 	bl	810c684 <_ZNKSt9type_info9hash_codeEv>
 810d058:	60f8      	str	r0, [r7, #12]

	PacketDefinition* def = retrieve(hash);
 810d05a:	68f9      	ldr	r1, [r7, #12]
 810d05c:	6878      	ldr	r0, [r7, #4]
 810d05e:	f000 f8d3 	bl	810d208 <_ZN10MessageBus8retrieveEj>
 810d062:	60b8      	str	r0, [r7, #8]

	return send(def, (uint8_t*) message);
 810d064:	683a      	ldr	r2, [r7, #0]
 810d066:	68b9      	ldr	r1, [r7, #8]
 810d068:	6878      	ldr	r0, [r7, #4]
 810d06a:	f000 f807 	bl	810d07c <_ZN10MessageBus4sendEP16PacketDefinitionPh>
 810d06e:	4603      	mov	r3, r0
}
 810d070:	4618      	mov	r0, r3
 810d072:	3710      	adds	r7, #16
 810d074:	46bd      	mov	sp, r7
 810d076:	bd80      	pop	{r7, pc}
 810d078:	08110b80 	.word	0x08110b80

0810d07c <_ZN10MessageBus4sendEP16PacketDefinitionPh>:

bool MessageBus::send(PacketDefinition* def, uint8_t* data) {
 810d07c:	b580      	push	{r7, lr}
 810d07e:	b086      	sub	sp, #24
 810d080:	af00      	add	r7, sp, #0
 810d082:	60f8      	str	r0, [r7, #12]
 810d084:	60b9      	str	r1, [r7, #8]
 810d086:	607a      	str	r2, [r7, #4]
	if(def != nullptr) {
 810d088:	68bb      	ldr	r3, [r7, #8]
 810d08a:	2b00      	cmp	r3, #0
 810d08c:	d031      	beq.n	810d0f2 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x76>
		uint32_t data_bytes_written = 0;
 810d08e:	2300      	movs	r3, #0
 810d090:	617b      	str	r3, [r7, #20]

		while(data_bytes_written < def->size) {
 810d092:	68bb      	ldr	r3, [r7, #8]
 810d094:	785b      	ldrb	r3, [r3, #1]
 810d096:	461a      	mov	r2, r3
 810d098:	697b      	ldr	r3, [r7, #20]
 810d09a:	4293      	cmp	r3, r2
 810d09c:	d227      	bcs.n	810d0ee <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x72>
			append(&def->id, 1); // Write the packet ID for each transmission frame.
 810d09e:	68fb      	ldr	r3, [r7, #12]
 810d0a0:	681b      	ldr	r3, [r3, #0]
 810d0a2:	3308      	adds	r3, #8
 810d0a4:	681b      	ldr	r3, [r3, #0]
 810d0a6:	68b9      	ldr	r1, [r7, #8]
 810d0a8:	2201      	movs	r2, #1
 810d0aa:	68f8      	ldr	r0, [r7, #12]
 810d0ac:	4798      	blx	r3
							     // This is only to facilitate the packet reconstruction and should not increment data_bytes_written.

			uint32_t new_bytes = append(data + data_bytes_written, def->size - data_bytes_written); // Send the data
 810d0ae:	68fb      	ldr	r3, [r7, #12]
 810d0b0:	681b      	ldr	r3, [r3, #0]
 810d0b2:	3308      	adds	r3, #8
 810d0b4:	681b      	ldr	r3, [r3, #0]
 810d0b6:	6879      	ldr	r1, [r7, #4]
 810d0b8:	697a      	ldr	r2, [r7, #20]
 810d0ba:	4411      	add	r1, r2
 810d0bc:	68ba      	ldr	r2, [r7, #8]
 810d0be:	7852      	ldrb	r2, [r2, #1]
 810d0c0:	4610      	mov	r0, r2
 810d0c2:	697a      	ldr	r2, [r7, #20]
 810d0c4:	1a82      	subs	r2, r0, r2
 810d0c6:	68f8      	ldr	r0, [r7, #12]
 810d0c8:	4798      	blx	r3
 810d0ca:	4603      	mov	r3, r0
 810d0cc:	613b      	str	r3, [r7, #16]

			if(new_bytes == 0) {
 810d0ce:	693b      	ldr	r3, [r7, #16]
 810d0d0:	2b00      	cmp	r3, #0
 810d0d2:	d101      	bne.n	810d0d8 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x5c>
				return false;
 810d0d4:	2300      	movs	r3, #0
 810d0d6:	e00d      	b.n	810d0f4 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x78>
			} else {
				transmit();
 810d0d8:	68fb      	ldr	r3, [r7, #12]
 810d0da:	681b      	ldr	r3, [r3, #0]
 810d0dc:	330c      	adds	r3, #12
 810d0de:	681b      	ldr	r3, [r3, #0]
 810d0e0:	68f8      	ldr	r0, [r7, #12]
 810d0e2:	4798      	blx	r3
				data_bytes_written += new_bytes;
 810d0e4:	697a      	ldr	r2, [r7, #20]
 810d0e6:	693b      	ldr	r3, [r7, #16]
 810d0e8:	4413      	add	r3, r2
 810d0ea:	617b      	str	r3, [r7, #20]
		while(data_bytes_written < def->size) {
 810d0ec:	e7d1      	b.n	810d092 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x16>
			}
		}

		return true;
 810d0ee:	2301      	movs	r3, #1
 810d0f0:	e000      	b.n	810d0f4 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x78>
	}

	return false;
 810d0f2:	2300      	movs	r3, #0
}
 810d0f4:	4618      	mov	r0, r3
 810d0f6:	3718      	adds	r7, #24
 810d0f8:	46bd      	mov	sp, r7
 810d0fa:	bd80      	pop	{r7, pc}

0810d0fc <_ZN10MessageBus7receiveEhPhm>:
 *
 * Provided an external thread calls this method with a buffer to the next incoming message,
 * dispatches the message to the appropriate message handlers.
 */
#include "Debug/Debug.h"
void MessageBus::receive(uint8_t sender_id, uint8_t *pointer, uint32_t length) {
 810d0fc:	b580      	push	{r7, lr}
 810d0fe:	b088      	sub	sp, #32
 810d100:	af00      	add	r7, sp, #0
 810d102:	60f8      	str	r0, [r7, #12]
 810d104:	607a      	str	r2, [r7, #4]
 810d106:	603b      	str	r3, [r7, #0]
 810d108:	460b      	mov	r3, r1
 810d10a:	72fb      	strb	r3, [r7, #11]
	if(length > 0) {
 810d10c:	683b      	ldr	r3, [r7, #0]
 810d10e:	2b00      	cmp	r3, #0
 810d110:	d077      	beq.n	810d202 <_ZN10MessageBus7receiveEhPhm+0x106>
		// Safe-cast verification
		uint8_t packet_id = *pointer++;
 810d112:	687b      	ldr	r3, [r7, #4]
 810d114:	1c5a      	adds	r2, r3, #1
 810d116:	607a      	str	r2, [r7, #4]
 810d118:	781b      	ldrb	r3, [r3, #0]
 810d11a:	777b      	strb	r3, [r7, #29]


		PacketDefinition* def = &definitions_by_id[packet_id & 0b00111111];
 810d11c:	7f7b      	ldrb	r3, [r7, #29]
 810d11e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810d122:	00db      	lsls	r3, r3, #3
 810d124:	68fa      	ldr	r2, [r7, #12]
 810d126:	4413      	add	r3, r2
 810d128:	3304      	adds	r3, #4
 810d12a:	61bb      	str	r3, [r7, #24]
		ReconstructionBuffer* indexable_buffer = &reconstruction_buffers[sender_id & 0b00111111];
 810d12c:	7afb      	ldrb	r3, [r7, #11]
 810d12e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810d132:	3306      	adds	r3, #6
 810d134:	021b      	lsls	r3, r3, #8
 810d136:	68fa      	ldr	r2, [r7, #12]
 810d138:	4413      	add	r3, r2
 810d13a:	3304      	adds	r3, #4
 810d13c:	617b      	str	r3, [r7, #20]

		if(indexable_buffer->index + length > max_packet_size) {
 810d13e:	697b      	ldr	r3, [r7, #20]
 810d140:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 810d144:	461a      	mov	r2, r3
 810d146:	683b      	ldr	r3, [r7, #0]
 810d148:	4413      	add	r3, r2
 810d14a:	2bff      	cmp	r3, #255	; 0xff
 810d14c:	d904      	bls.n	810d158 <_ZN10MessageBus7receiveEhPhm+0x5c>
			indexable_buffer->index = 0; // Corrupted packet
 810d14e:	697b      	ldr	r3, [r7, #20]
 810d150:	2200      	movs	r2, #0
 810d152:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
			return;
 810d156:	e054      	b.n	810d202 <_ZN10MessageBus7receiveEhPhm+0x106>
		}

		for(uint16_t i = 0; i < length - 1; i++) {
 810d158:	2300      	movs	r3, #0
 810d15a:	83fb      	strh	r3, [r7, #30]
 810d15c:	8bfa      	ldrh	r2, [r7, #30]
 810d15e:	683b      	ldr	r3, [r7, #0]
 810d160:	3b01      	subs	r3, #1
 810d162:	429a      	cmp	r2, r3
 810d164:	d211      	bcs.n	810d18a <_ZN10MessageBus7receiveEhPhm+0x8e>
			indexable_buffer->buffer[indexable_buffer->index++] = *pointer++;
 810d166:	687b      	ldr	r3, [r7, #4]
 810d168:	1c5a      	adds	r2, r3, #1
 810d16a:	607a      	str	r2, [r7, #4]
 810d16c:	697a      	ldr	r2, [r7, #20]
 810d16e:	f892 20ff 	ldrb.w	r2, [r2, #255]	; 0xff
 810d172:	1c51      	adds	r1, r2, #1
 810d174:	b2c8      	uxtb	r0, r1
 810d176:	6979      	ldr	r1, [r7, #20]
 810d178:	f881 00ff 	strb.w	r0, [r1, #255]	; 0xff
 810d17c:	7819      	ldrb	r1, [r3, #0]
 810d17e:	697b      	ldr	r3, [r7, #20]
 810d180:	5499      	strb	r1, [r3, r2]
		for(uint16_t i = 0; i < length - 1; i++) {
 810d182:	8bfb      	ldrh	r3, [r7, #30]
 810d184:	3301      	adds	r3, #1
 810d186:	83fb      	strh	r3, [r7, #30]
 810d188:	e7e8      	b.n	810d15c <_ZN10MessageBus7receiveEhPhm+0x60>
		}

		if(indexable_buffer->index >= def->size) {
 810d18a:	697b      	ldr	r3, [r7, #20]
 810d18c:	f893 20ff 	ldrb.w	r2, [r3, #255]	; 0xff
 810d190:	69bb      	ldr	r3, [r7, #24]
 810d192:	785b      	ldrb	r3, [r3, #1]
 810d194:	429a      	cmp	r2, r3
 810d196:	d334      	bcc.n	810d202 <_ZN10MessageBus7receiveEhPhm+0x106>
			// Packet is complete. Forward buffer to handler.

			if(handlers[packet_id & 0b00111111] != nullptr) {
 810d198:	7f7b      	ldrb	r3, [r7, #29]
 810d19a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810d19e:	68fa      	ldr	r2, [r7, #12]
 810d1a0:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 810d1a4:	009b      	lsls	r3, r3, #2
 810d1a6:	4413      	add	r3, r2
 810d1a8:	685b      	ldr	r3, [r3, #4]
 810d1aa:	2b00      	cmp	r3, #0
 810d1ac:	d00c      	beq.n	810d1c8 <_ZN10MessageBus7receiveEhPhm+0xcc>
				handlers[packet_id & 0b00111111](sender_id, indexable_buffer->buffer);
 810d1ae:	7f7b      	ldrb	r3, [r7, #29]
 810d1b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810d1b4:	68fa      	ldr	r2, [r7, #12]
 810d1b6:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 810d1ba:	009b      	lsls	r3, r3, #2
 810d1bc:	4413      	add	r3, r2
 810d1be:	685b      	ldr	r3, [r3, #4]
 810d1c0:	6979      	ldr	r1, [r7, #20]
 810d1c2:	7afa      	ldrb	r2, [r7, #11]
 810d1c4:	4610      	mov	r0, r2
 810d1c6:	4798      	blx	r3
			}

			if(forwarders[packet_id & 0b00111111] != nullptr) {
 810d1c8:	7f7b      	ldrb	r3, [r7, #29]
 810d1ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810d1ce:	68fa      	ldr	r2, [r7, #12]
 810d1d0:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 810d1d4:	009b      	lsls	r3, r3, #2
 810d1d6:	4413      	add	r3, r2
 810d1d8:	685b      	ldr	r3, [r3, #4]
 810d1da:	2b00      	cmp	r3, #0
 810d1dc:	d00d      	beq.n	810d1fa <_ZN10MessageBus7receiveEhPhm+0xfe>
				forwarders[packet_id & 0b00111111]->send(def, indexable_buffer->buffer);
 810d1de:	7f7b      	ldrb	r3, [r7, #29]
 810d1e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810d1e4:	68fa      	ldr	r2, [r7, #12]
 810d1e6:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 810d1ea:	009b      	lsls	r3, r3, #2
 810d1ec:	4413      	add	r3, r2
 810d1ee:	685b      	ldr	r3, [r3, #4]
 810d1f0:	697a      	ldr	r2, [r7, #20]
 810d1f2:	69b9      	ldr	r1, [r7, #24]
 810d1f4:	4618      	mov	r0, r3
 810d1f6:	f7ff ff41 	bl	810d07c <_ZN10MessageBus4sendEP16PacketDefinitionPh>
			}

			indexable_buffer->index = 0;
 810d1fa:	697b      	ldr	r3, [r7, #20]
 810d1fc:	2200      	movs	r2, #0
 810d1fe:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
		}
	}
}
 810d202:	3720      	adds	r7, #32
 810d204:	46bd      	mov	sp, r7
 810d206:	bd80      	pop	{r7, pc}

0810d208 <_ZN10MessageBus8retrieveEj>:

/*
 * Searches a packet definition matching the given type in the hash table.
 */
PacketDefinition* MessageBus::retrieve(size_t hash) {
 810d208:	b480      	push	{r7}
 810d20a:	b085      	sub	sp, #20
 810d20c:	af00      	add	r7, sp, #0
 810d20e:	6078      	str	r0, [r7, #4]
 810d210:	6039      	str	r1, [r7, #0]
	uint32_t searchPoint = hash % 256;
 810d212:	683b      	ldr	r3, [r7, #0]
 810d214:	b2db      	uxtb	r3, r3
 810d216:	60fb      	str	r3, [r7, #12]
	uint32_t searchStart = searchPoint;
 810d218:	68fb      	ldr	r3, [r7, #12]
 810d21a:	60bb      	str	r3, [r7, #8]

	while(definitions_by_type[searchPoint] != nullptr) {
 810d21c:	687a      	ldr	r2, [r7, #4]
 810d21e:	68fb      	ldr	r3, [r7, #12]
 810d220:	3380      	adds	r3, #128	; 0x80
 810d222:	009b      	lsls	r3, r3, #2
 810d224:	4413      	add	r3, r2
 810d226:	685b      	ldr	r3, [r3, #4]
 810d228:	2b00      	cmp	r3, #0
 810d22a:	d01f      	beq.n	810d26c <_ZN10MessageBus8retrieveEj+0x64>
		if(definitions_by_type[searchPoint]->hash == hash) {
 810d22c:	687a      	ldr	r2, [r7, #4]
 810d22e:	68fb      	ldr	r3, [r7, #12]
 810d230:	3380      	adds	r3, #128	; 0x80
 810d232:	009b      	lsls	r3, r3, #2
 810d234:	4413      	add	r3, r2
 810d236:	685b      	ldr	r3, [r3, #4]
 810d238:	685b      	ldr	r3, [r3, #4]
 810d23a:	683a      	ldr	r2, [r7, #0]
 810d23c:	429a      	cmp	r2, r3
 810d23e:	d106      	bne.n	810d24e <_ZN10MessageBus8retrieveEj+0x46>
			return definitions_by_type[searchPoint];
 810d240:	687a      	ldr	r2, [r7, #4]
 810d242:	68fb      	ldr	r3, [r7, #12]
 810d244:	3380      	adds	r3, #128	; 0x80
 810d246:	009b      	lsls	r3, r3, #2
 810d248:	4413      	add	r3, r2
 810d24a:	685b      	ldr	r3, [r3, #4]
 810d24c:	e00f      	b.n	810d26e <_ZN10MessageBus8retrieveEj+0x66>
		}

		searchPoint++;
 810d24e:	68fb      	ldr	r3, [r7, #12]
 810d250:	3301      	adds	r3, #1
 810d252:	60fb      	str	r3, [r7, #12]

		if(searchPoint == 256) {
 810d254:	68fb      	ldr	r3, [r7, #12]
 810d256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810d25a:	d101      	bne.n	810d260 <_ZN10MessageBus8retrieveEj+0x58>
			searchPoint = 0;
 810d25c:	2300      	movs	r3, #0
 810d25e:	60fb      	str	r3, [r7, #12]
		}

		if(searchStart == searchPoint) {
 810d260:	68ba      	ldr	r2, [r7, #8]
 810d262:	68fb      	ldr	r3, [r7, #12]
 810d264:	429a      	cmp	r2, r3
 810d266:	d000      	beq.n	810d26a <_ZN10MessageBus8retrieveEj+0x62>
	while(definitions_by_type[searchPoint] != nullptr) {
 810d268:	e7d8      	b.n	810d21c <_ZN10MessageBus8retrieveEj+0x14>
			break; // No packet definition matching the given template type
 810d26a:	bf00      	nop
		}
	}

	return nullptr;
 810d26c:	2300      	movs	r3, #0
}
 810d26e:	4618      	mov	r0, r3
 810d270:	3714      	adds	r7, #20
 810d272:	46bd      	mov	sp, r7
 810d274:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d278:	4770      	bx	lr
	...

0810d27c <_ZN10NetworkBusC1EP8IODriver>:


#include "NetworkBus.h"
#include "Protocol/Protocol.h"

NetworkBus::NetworkBus(IODriver* driver) : IOBus(driver, network_frame, sizeof(network_frame)) {
 810d27c:	b580      	push	{r7, lr}
 810d27e:	b082      	sub	sp, #8
 810d280:	af00      	add	r7, sp, #0
 810d282:	6078      	str	r0, [r7, #4]
 810d284:	6039      	str	r1, [r7, #0]
 810d286:	6878      	ldr	r0, [r7, #4]
 810d288:	687b      	ldr	r3, [r7, #4]
 810d28a:	f503 4290 	add.w	r2, r3, #18432	; 0x4800
 810d28e:	3211      	adds	r2, #17
 810d290:	f44f 7380 	mov.w	r3, #256	; 0x100
 810d294:	6839      	ldr	r1, [r7, #0]
 810d296:	f7fe f94b 	bl	810b530 <_ZN5IOBusC1EP8IODriverPhm>
 810d29a:	4a24      	ldr	r2, [pc, #144]	; (810d32c <_ZN10NetworkBusC1EP8IODriver+0xb0>)
 810d29c:	687b      	ldr	r3, [r7, #4]
 810d29e:	601a      	str	r2, [r3, #0]
	define<PingPacket>(0);
 810d2a0:	687b      	ldr	r3, [r7, #4]
 810d2a2:	2100      	movs	r1, #0
 810d2a4:	4618      	mov	r0, r3
 810d2a6:	f7ff fa09 	bl	810c6bc <_ZN10MessageBus6defineI10PingPacketEEbh>
	define<RequestPacket>(1);
 810d2aa:	687b      	ldr	r3, [r7, #4]
 810d2ac:	2101      	movs	r1, #1
 810d2ae:	4618      	mov	r0, r3
 810d2b0:	f7ff fa62 	bl	810c778 <_ZN10MessageBus6defineI13RequestPacketEEbh>
	define<ResponsePacket>(2);
 810d2b4:	687b      	ldr	r3, [r7, #4]
 810d2b6:	2102      	movs	r1, #2
 810d2b8:	4618      	mov	r0, r3
 810d2ba:	f7ff fabb 	bl	810c834 <_ZN10MessageBus6defineI14ResponsePacketEEbh>
	define<ProgressPacket>(3);
 810d2be:	687b      	ldr	r3, [r7, #4]
 810d2c0:	2103      	movs	r1, #3
 810d2c2:	4618      	mov	r0, r3
 810d2c4:	f7ff fb14 	bl	810c8f0 <_ZN10MessageBus6defineI14ProgressPacketEEbh>
	define<DataPacket>(4);
 810d2c8:	687b      	ldr	r3, [r7, #4]
 810d2ca:	2104      	movs	r1, #4
 810d2cc:	4618      	mov	r0, r3
 810d2ce:	f7ff fb6d 	bl	810c9ac <_ZN10MessageBus6defineI10DataPacketEEbh>
	define<Avionics_BaroTempPacket>(5);
 810d2d2:	687b      	ldr	r3, [r7, #4]
 810d2d4:	2105      	movs	r1, #5
 810d2d6:	4618      	mov	r0, r3
 810d2d8:	f7ff fc24 	bl	810cb24 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh>
	define<Avionics_AccelMagPacket>(6);
 810d2dc:	687b      	ldr	r3, [r7, #4]
 810d2de:	2106      	movs	r1, #6
 810d2e0:	4618      	mov	r0, r3
 810d2e2:	f7ff fc7d 	bl	810cbe0 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh>
	define<Handling_GripperPacket>(7);
 810d2e6:	687b      	ldr	r3, [r7, #4]
 810d2e8:	2107      	movs	r1, #7
 810d2ea:	4618      	mov	r0, r3
 810d2ec:	f7ff fcd6 	bl	810cc9c <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh>
	define<Power_VoltagePacket>(8);
 810d2f0:	687b      	ldr	r3, [r7, #4]
 810d2f2:	2108      	movs	r1, #8
 810d2f4:	4618      	mov	r0, r3
 810d2f6:	f7ff fd2f 	bl	810cd58 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh>
	define<Power_CurrentPacket>(9);
 810d2fa:	687b      	ldr	r3, [r7, #4]
 810d2fc:	2109      	movs	r1, #9
 810d2fe:	4618      	mov	r0, r3
 810d300:	f7ff fd88 	bl	810ce14 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh>
	define<Power_SystemPacket>(10);
 810d304:	687b      	ldr	r3, [r7, #4]
 810d306:	210a      	movs	r1, #10
 810d308:	4618      	mov	r0, r3
 810d30a:	f7ff fde1 	bl	810ced0 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh>
	define<Science_MeasurePacket>(11);
 810d30e:	687b      	ldr	r3, [r7, #4]
 810d310:	210b      	movs	r1, #11
 810d312:	4618      	mov	r0, r3
 810d314:	f7ff fe3a 	bl	810cf8c <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh>
	define<ErrorPacket>(63);
 810d318:	687b      	ldr	r3, [r7, #4]
 810d31a:	213f      	movs	r1, #63	; 0x3f
 810d31c:	4618      	mov	r0, r3
 810d31e:	f7ff fba3 	bl	810ca68 <_ZN10MessageBus6defineI11ErrorPacketEEbh>
}
 810d322:	687b      	ldr	r3, [r7, #4]
 810d324:	4618      	mov	r0, r3
 810d326:	3708      	adds	r7, #8
 810d328:	46bd      	mov	sp, r7
 810d32a:	bd80      	pop	{r7, pc}
 810d32c:	08110d0c 	.word	0x08110d0c

0810d330 <_ZN10NetworkBusD1Ev>:
#include "IOBus.h"

#define NETWORK_FRAME_SIZE 256


class NetworkBus : public IOBus {
 810d330:	b580      	push	{r7, lr}
 810d332:	b082      	sub	sp, #8
 810d334:	af00      	add	r7, sp, #0
 810d336:	6078      	str	r0, [r7, #4]
 810d338:	4a05      	ldr	r2, [pc, #20]	; (810d350 <_ZN10NetworkBusD1Ev+0x20>)
 810d33a:	687b      	ldr	r3, [r7, #4]
 810d33c:	601a      	str	r2, [r3, #0]
 810d33e:	687b      	ldr	r3, [r7, #4]
 810d340:	4618      	mov	r0, r3
 810d342:	f7ff f967 	bl	810c614 <_ZN5IOBusD1Ev>
 810d346:	687b      	ldr	r3, [r7, #4]
 810d348:	4618      	mov	r0, r3
 810d34a:	3708      	adds	r7, #8
 810d34c:	46bd      	mov	sp, r7
 810d34e:	bd80      	pop	{r7, pc}
 810d350:	08110d0c 	.word	0x08110d0c

0810d354 <_ZN10NetworkBusD0Ev>:
 810d354:	b580      	push	{r7, lr}
 810d356:	b082      	sub	sp, #8
 810d358:	af00      	add	r7, sp, #0
 810d35a:	6078      	str	r0, [r7, #4]
 810d35c:	6878      	ldr	r0, [r7, #4]
 810d35e:	f7ff ffe7 	bl	810d330 <_ZN10NetworkBusD1Ev>
 810d362:	f644 1114 	movw	r1, #18708	; 0x4914
 810d366:	6878      	ldr	r0, [r7, #4]
 810d368:	f000 fd81 	bl	810de6e <_ZdlPvj>
 810d36c:	687b      	ldr	r3, [r7, #4]
 810d36e:	4618      	mov	r0, r3
 810d370:	3708      	adds	r7, #8
 810d372:	46bd      	mov	sp, r7
 810d374:	bd80      	pop	{r7, pc}

0810d376 <_ZN14WatchdogThread4initEv>:
#include "iwdg.h"

#include "Debug/Debug.h"
#include "usart.h"

void WatchdogThread::init() {
 810d376:	b480      	push	{r7}
 810d378:	b083      	sub	sp, #12
 810d37a:	af00      	add	r7, sp, #0
 810d37c:	6078      	str	r0, [r7, #4]

}
 810d37e:	bf00      	nop
 810d380:	370c      	adds	r7, #12
 810d382:	46bd      	mov	sp, r7
 810d384:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d388:	4770      	bx	lr

0810d38a <_ZN14WatchdogThread4loopEv>:

void WatchdogThread::loop() {
 810d38a:	b580      	push	{r7, lr}
 810d38c:	b082      	sub	sp, #8
 810d38e:	af00      	add	r7, sp, #0
 810d390:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Refresh(watchdog_handle);
 810d392:	687b      	ldr	r3, [r7, #4]
 810d394:	68db      	ldr	r3, [r3, #12]
 810d396:	4618      	mov	r0, r3
 810d398:	f7f7 ff16 	bl	81051c8 <HAL_IWDG_Refresh>
	osDelay(100);
 810d39c:	2064      	movs	r0, #100	; 0x64
 810d39e:	f7fa fe8b 	bl	81080b8 <osDelay>
}
 810d3a2:	bf00      	nop
 810d3a4:	3708      	adds	r7, #8
 810d3a6:	46bd      	mov	sp, r7
 810d3a8:	bd80      	pop	{r7, pc}
	...

0810d3ac <_ZN11ScienceData8toStringEPc>:
};

struct ScienceData {
	float mass;

	char* toString(char* buffer) {
 810d3ac:	b590      	push	{r4, r7, lr}
 810d3ae:	b083      	sub	sp, #12
 810d3b0:	af00      	add	r7, sp, #0
 810d3b2:	6078      	str	r0, [r7, #4]
 810d3b4:	6039      	str	r1, [r7, #0]
		sprintf(buffer, "Mass(kg): %f", mass);
 810d3b6:	687b      	ldr	r3, [r7, #4]
 810d3b8:	681b      	ldr	r3, [r3, #0]
 810d3ba:	4618      	mov	r0, r3
 810d3bc:	f7f3 f95c 	bl	8100678 <__aeabi_f2d>
 810d3c0:	4603      	mov	r3, r0
 810d3c2:	460c      	mov	r4, r1
 810d3c4:	461a      	mov	r2, r3
 810d3c6:	4623      	mov	r3, r4
 810d3c8:	4904      	ldr	r1, [pc, #16]	; (810d3dc <_ZN11ScienceData8toStringEPc+0x30>)
 810d3ca:	6838      	ldr	r0, [r7, #0]
 810d3cc:	f001 fb88 	bl	810eae0 <siprintf>
		return buffer;
 810d3d0:	683b      	ldr	r3, [r7, #0]
	}
 810d3d2:	4618      	mov	r0, r3
 810d3d4:	370c      	adds	r7, #12
 810d3d6:	46bd      	mov	sp, r7
 810d3d8:	bd90      	pop	{r4, r7, pc}
 810d3da:	bf00      	nop
 810d3dc:	081108b8 	.word	0x081108b8

0810d3e0 <_ZN11ScienceData7toArrayEPf>:

	float* toArray(float* buffer){
 810d3e0:	b480      	push	{r7}
 810d3e2:	b083      	sub	sp, #12
 810d3e4:	af00      	add	r7, sp, #0
 810d3e6:	6078      	str	r0, [r7, #4]
 810d3e8:	6039      	str	r1, [r7, #0]
		*buffer = mass;
 810d3ea:	687b      	ldr	r3, [r7, #4]
 810d3ec:	681a      	ldr	r2, [r3, #0]
 810d3ee:	683b      	ldr	r3, [r7, #0]
 810d3f0:	601a      	str	r2, [r3, #0]
		return buffer;
 810d3f2:	683b      	ldr	r3, [r7, #0]
	}
 810d3f4:	4618      	mov	r0, r3
 810d3f6:	370c      	adds	r7, #12
 810d3f8:	46bd      	mov	sp, r7
 810d3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d3fe:	4770      	bx	lr

0810d400 <_ZN11ADC24ThreadC1EP12GPIO_TypeDefmS1_m>:
#include "Debug/Debug.h"

static char cbuf[256];
const int32_t threshold = 50000;

ADC24Thread::ADC24Thread(GPIO_TypeDef *sck_gpio, uint32_t sck_pin, GPIO_TypeDef *di_gpio, uint32_t di_pin)
 810d400:	b580      	push	{r7, lr}
 810d402:	b084      	sub	sp, #16
 810d404:	af00      	add	r7, sp, #0
 810d406:	60f8      	str	r0, [r7, #12]
 810d408:	60b9      	str	r1, [r7, #8]
 810d40a:	607a      	str	r2, [r7, #4]
 810d40c:	603b      	str	r3, [r7, #0]
: Thread("ADC24"), _nSamples(4), _multiplier(1),  _zero(0)
 810d40e:	68fb      	ldr	r3, [r7, #12]
 810d410:	490d      	ldr	r1, [pc, #52]	; (810d448 <_ZN11ADC24ThreadC1EP12GPIO_TypeDefmS1_m+0x48>)
 810d412:	4618      	mov	r0, r3
 810d414:	f000 fa53 	bl	810d8be <_ZN6ThreadC1EPKc>
 810d418:	4a0c      	ldr	r2, [pc, #48]	; (810d44c <_ZN11ADC24ThreadC1EP12GPIO_TypeDefmS1_m+0x4c>)
 810d41a:	68fb      	ldr	r3, [r7, #12]
 810d41c:	601a      	str	r2, [r3, #0]
 810d41e:	68fb      	ldr	r3, [r7, #12]
 810d420:	2204      	movs	r2, #4
 810d422:	819a      	strh	r2, [r3, #12]
 810d424:	68fb      	ldr	r3, [r7, #12]
 810d426:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 810d42a:	611a      	str	r2, [r3, #16]
 810d42c:	68fb      	ldr	r3, [r7, #12]
 810d42e:	2200      	movs	r2, #0
 810d430:	615a      	str	r2, [r3, #20]
{
	HX711_set_pins(sck_gpio, sck_pin, di_gpio, di_pin);
 810d432:	69bb      	ldr	r3, [r7, #24]
 810d434:	683a      	ldr	r2, [r7, #0]
 810d436:	6879      	ldr	r1, [r7, #4]
 810d438:	68b8      	ldr	r0, [r7, #8]
 810d43a:	f7fd fc89 	bl	810ad50 <HX711_set_pins>
}
 810d43e:	68fb      	ldr	r3, [r7, #12]
 810d440:	4618      	mov	r0, r3
 810d442:	3710      	adds	r7, #16
 810d444:	46bd      	mov	sp, r7
 810d446:	bd80      	pop	{r7, pc}
 810d448:	081108c8 	.word	0x081108c8
 810d44c:	08110d7c 	.word	0x08110d7c

0810d450 <_ZN11ADC24Thread4initEv>:

void ADC24Thread::init() {
 810d450:	b580      	push	{r7, lr}
 810d452:	b082      	sub	sp, #8
 810d454:	af00      	add	r7, sp, #0
 810d456:	6078      	str	r0, [r7, #4]
	HX711_begin();
 810d458:	f7fd fc9c 	bl	810ad94 <HX711_begin>
	while(!HX711_isReady()){
 810d45c:	f7fd fdbe 	bl	810afdc <HX711_isReady>
 810d460:	4603      	mov	r3, r0
 810d462:	2b00      	cmp	r3, #0
 810d464:	bf0c      	ite	eq
 810d466:	2301      	moveq	r3, #1
 810d468:	2300      	movne	r3, #0
 810d46a:	b2db      	uxtb	r3, r3
 810d46c:	2b00      	cmp	r3, #0
 810d46e:	d008      	beq.n	810d482 <_ZN11ADC24Thread4initEv+0x32>
		println("HX711 not responding");
 810d470:	687b      	ldr	r3, [r7, #4]
 810d472:	490c      	ldr	r1, [pc, #48]	; (810d4a4 <_ZN11ADC24Thread4initEv+0x54>)
 810d474:	4618      	mov	r0, r3
 810d476:	f000 fa77 	bl	810d968 <_ZN6Thread7printlnEPKcz>
		osDelay(100);
 810d47a:	2064      	movs	r0, #100	; 0x64
 810d47c:	f7fa fe1c 	bl	81080b8 <osDelay>
	while(!HX711_isReady()){
 810d480:	e7ec      	b.n	810d45c <_ZN11ADC24Thread4initEv+0xc>
	}
	//Ensure there is no weight on top of scale on startup
	println("HX711 is responding: ensure nothing is on scale");
 810d482:	687b      	ldr	r3, [r7, #4]
 810d484:	4908      	ldr	r1, [pc, #32]	; (810d4a8 <_ZN11ADC24Thread4initEv+0x58>)
 810d486:	4618      	mov	r0, r3
 810d488:	f000 fa6e 	bl	810d968 <_ZN6Thread7printlnEPKcz>
	calibrateMultiplier();
 810d48c:	6878      	ldr	r0, [r7, #4]
 810d48e:	f000 f84d 	bl	810d52c <_ZN11ADC24Thread19calibrateMultiplierEv>
	println("HX711 initialized");
 810d492:	687b      	ldr	r3, [r7, #4]
 810d494:	4905      	ldr	r1, [pc, #20]	; (810d4ac <_ZN11ADC24Thread4initEv+0x5c>)
 810d496:	4618      	mov	r0, r3
 810d498:	f000 fa66 	bl	810d968 <_ZN6Thread7printlnEPKcz>
}
 810d49c:	bf00      	nop
 810d49e:	3708      	adds	r7, #8
 810d4a0:	46bd      	mov	sp, r7
 810d4a2:	bd80      	pop	{r7, pc}
 810d4a4:	081108d0 	.word	0x081108d0
 810d4a8:	081108e8 	.word	0x081108e8
 810d4ac:	08110918 	.word	0x08110918

0810d4b0 <_ZN11ADC24Thread4loopEv>:

void ADC24Thread::loop() {
 810d4b0:	b590      	push	{r4, r7, lr}
 810d4b2:	b085      	sub	sp, #20
 810d4b4:	af00      	add	r7, sp, #0
 810d4b6:	6078      	str	r0, [r7, #4]
	ScienceData data;
	//__disable_irq();
	data.mass = (HX711_valueAve(_nSamples) - _zero)*_multiplier;
 810d4b8:	687b      	ldr	r3, [r7, #4]
 810d4ba:	899b      	ldrh	r3, [r3, #12]
 810d4bc:	4618      	mov	r0, r3
 810d4be:	f7fd fd59 	bl	810af74 <HX711_valueAve>
 810d4c2:	4602      	mov	r2, r0
 810d4c4:	687b      	ldr	r3, [r7, #4]
 810d4c6:	695b      	ldr	r3, [r3, #20]
 810d4c8:	1ad3      	subs	r3, r2, r3
 810d4ca:	ee07 3a90 	vmov	s15, r3
 810d4ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 810d4d2:	687b      	ldr	r3, [r7, #4]
 810d4d4:	edd3 7a04 	vldr	s15, [r3, #16]
 810d4d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 810d4dc:	edc7 7a03 	vstr	s15, [r7, #12]
	//__enable_irq();

	println("%s", data.toString(cbuf));
 810d4e0:	687c      	ldr	r4, [r7, #4]
 810d4e2:	f107 030c 	add.w	r3, r7, #12
 810d4e6:	490e      	ldr	r1, [pc, #56]	; (810d520 <_ZN11ADC24Thread4loopEv+0x70>)
 810d4e8:	4618      	mov	r0, r3
 810d4ea:	f7ff ff5f 	bl	810d3ac <_ZN11ScienceData8toStringEPc>
 810d4ee:	4603      	mov	r3, r0
 810d4f0:	461a      	mov	r2, r3
 810d4f2:	490c      	ldr	r1, [pc, #48]	; (810d524 <_ZN11ADC24Thread4loopEv+0x74>)
 810d4f4:	4620      	mov	r0, r4
 810d4f6:	f000 fa37 	bl	810d968 <_ZN6Thread7printlnEPKcz>

	Science_MeasurePacket packet;
	data.toArray((float*) &packet);
 810d4fa:	f107 0208 	add.w	r2, r7, #8
 810d4fe:	f107 030c 	add.w	r3, r7, #12
 810d502:	4611      	mov	r1, r2
 810d504:	4618      	mov	r0, r3
 810d506:	f7ff ff6b 	bl	810d3e0 <_ZN11ScienceData7toArrayEPf>
	network.send(&packet);
 810d50a:	f107 0308 	add.w	r3, r7, #8
 810d50e:	4619      	mov	r1, r3
 810d510:	4805      	ldr	r0, [pc, #20]	; (810d528 <_ZN11ADC24Thread4loopEv+0x78>)
 810d512:	f7ff fd99 	bl	810d048 <_ZN10MessageBus4sendI21Science_MeasurePacketEEbPT_>

	//osDelay(10);
}
 810d516:	bf00      	nop
 810d518:	3714      	adds	r7, #20
 810d51a:	46bd      	mov	sp, r7
 810d51c:	bd90      	pop	{r4, r7, pc}
 810d51e:	bf00      	nop
 810d520:	10004620 	.word	0x10004620
 810d524:	0811092c 	.word	0x0811092c
 810d528:	10004be0 	.word	0x10004be0

0810d52c <_ZN11ADC24Thread19calibrateMultiplierEv>:

//calibrate the voltage->mass multiplier
void ADC24Thread::calibrateMultiplier(void){
 810d52c:	b590      	push	{r4, r7, lr}
 810d52e:	b085      	sub	sp, #20
 810d530:	af00      	add	r7, sp, #0
 810d532:	6078      	str	r0, [r7, #4]
	//Put 0.5kg on top of scale
	osDelay(200);
 810d534:	20c8      	movs	r0, #200	; 0xc8
 810d536:	f7fa fdbf 	bl	81080b8 <osDelay>
	tare(HX711_valueAve(_nSamples*2));
 810d53a:	687b      	ldr	r3, [r7, #4]
 810d53c:	899b      	ldrh	r3, [r3, #12]
 810d53e:	005b      	lsls	r3, r3, #1
 810d540:	b29b      	uxth	r3, r3
 810d542:	4618      	mov	r0, r3
 810d544:	f7fd fd16 	bl	810af74 <HX711_valueAve>
 810d548:	4603      	mov	r3, r0
 810d54a:	4619      	mov	r1, r3
 810d54c:	6878      	ldr	r0, [r7, #4]
 810d54e:	f000 f841 	bl	810d5d4 <_ZN11ADC24Thread4tareEl>
	println("Place 0.5kg on top of scale in order to calibrate");
 810d552:	687b      	ldr	r3, [r7, #4]
 810d554:	491c      	ldr	r1, [pc, #112]	; (810d5c8 <_ZN11ADC24Thread19calibrateMultiplierEv+0x9c>)
 810d556:	4618      	mov	r0, r3
 810d558:	f000 fa06 	bl	810d968 <_ZN6Thread7printlnEPKcz>
	while(true){
		int32_t currentVal = HX711_valueAve(_nSamples);
 810d55c:	687b      	ldr	r3, [r7, #4]
 810d55e:	899b      	ldrh	r3, [r3, #12]
 810d560:	4618      	mov	r0, r3
 810d562:	f7fd fd07 	bl	810af74 <HX711_valueAve>
 810d566:	60f8      	str	r0, [r7, #12]
		int32_t diff = currentVal - _zero;
 810d568:	687b      	ldr	r3, [r7, #4]
 810d56a:	695b      	ldr	r3, [r3, #20]
 810d56c:	68fa      	ldr	r2, [r7, #12]
 810d56e:	1ad3      	subs	r3, r2, r3
 810d570:	60bb      	str	r3, [r7, #8]
		if(diff < -threshold){
 810d572:	68bb      	ldr	r3, [r7, #8]
 810d574:	4a15      	ldr	r2, [pc, #84]	; (810d5cc <_ZN11ADC24Thread19calibrateMultiplierEv+0xa0>)
 810d576:	4293      	cmp	r3, r2
 810d578:	daf0      	bge.n	810d55c <_ZN11ADC24Thread19calibrateMultiplierEv+0x30>
			osDelay(200); // Give the weight some time to settle
 810d57a:	20c8      	movs	r0, #200	; 0xc8
 810d57c:	f7fa fd9c 	bl	81080b8 <osDelay>
			_multiplier = 0.5/(HX711_valueAve(_nSamples) - _zero);
 810d580:	687b      	ldr	r3, [r7, #4]
 810d582:	899b      	ldrh	r3, [r3, #12]
 810d584:	4618      	mov	r0, r3
 810d586:	f7fd fcf5 	bl	810af74 <HX711_valueAve>
 810d58a:	4602      	mov	r2, r0
 810d58c:	687b      	ldr	r3, [r7, #4]
 810d58e:	695b      	ldr	r3, [r3, #20]
 810d590:	1ad3      	subs	r3, r2, r3
 810d592:	4618      	mov	r0, r3
 810d594:	f7f3 f85e 	bl	8100654 <__aeabi_i2d>
 810d598:	4603      	mov	r3, r0
 810d59a:	460c      	mov	r4, r1
 810d59c:	461a      	mov	r2, r3
 810d59e:	4623      	mov	r3, r4
 810d5a0:	f04f 0000 	mov.w	r0, #0
 810d5a4:	490a      	ldr	r1, [pc, #40]	; (810d5d0 <_ZN11ADC24Thread19calibrateMultiplierEv+0xa4>)
 810d5a6:	f7f3 f9e9 	bl	810097c <__aeabi_ddiv>
 810d5aa:	4603      	mov	r3, r0
 810d5ac:	460c      	mov	r4, r1
 810d5ae:	4618      	mov	r0, r3
 810d5b0:	4621      	mov	r1, r4
 810d5b2:	f7f3 fb91 	bl	8100cd8 <__aeabi_d2f>
 810d5b6:	4602      	mov	r2, r0
 810d5b8:	687b      	ldr	r3, [r7, #4]
 810d5ba:	611a      	str	r2, [r3, #16]
			break;
 810d5bc:	bf00      	nop
		}
	}
}
 810d5be:	bf00      	nop
 810d5c0:	3714      	adds	r7, #20
 810d5c2:	46bd      	mov	sp, r7
 810d5c4:	bd90      	pop	{r4, r7, pc}
 810d5c6:	bf00      	nop
 810d5c8:	08110930 	.word	0x08110930
 810d5cc:	ffff3cb0 	.word	0xffff3cb0
 810d5d0:	3fe00000 	.word	0x3fe00000

0810d5d4 <_ZN11ADC24Thread4tareEl>:

void ADC24Thread::tare(int32_t zero){
 810d5d4:	b580      	push	{r7, lr}
 810d5d6:	b082      	sub	sp, #8
 810d5d8:	af00      	add	r7, sp, #0
 810d5da:	6078      	str	r0, [r7, #4]
 810d5dc:	6039      	str	r1, [r7, #0]
	_zero = zero;
 810d5de:	687b      	ldr	r3, [r7, #4]
 810d5e0:	683a      	ldr	r2, [r7, #0]
 810d5e2:	615a      	str	r2, [r3, #20]
	println("Scale successfully tared");
 810d5e4:	687b      	ldr	r3, [r7, #4]
 810d5e6:	4904      	ldr	r1, [pc, #16]	; (810d5f8 <_ZN11ADC24Thread4tareEl+0x24>)
 810d5e8:	4618      	mov	r0, r3
 810d5ea:	f000 f9bd 	bl	810d968 <_ZN6Thread7printlnEPKcz>
}
 810d5ee:	bf00      	nop
 810d5f0:	3708      	adds	r7, #8
 810d5f2:	46bd      	mov	sp, r7
 810d5f4:	bd80      	pop	{r7, pc}
 810d5f6:	bf00      	nop
 810d5f8:	08110964 	.word	0x08110964

0810d5fc <_ZN6ThreadD1Ev>:
public:
	Thread(const char* name);
	Thread(const char* name, osPriority priority);
	Thread(const char* name, uint32_t stackSize);
	Thread(const char* name, osPriority priority, uint32_t stackSize);
	~Thread() {};
 810d5fc:	b480      	push	{r7}
 810d5fe:	b083      	sub	sp, #12
 810d600:	af00      	add	r7, sp, #0
 810d602:	6078      	str	r0, [r7, #4]
 810d604:	4a04      	ldr	r2, [pc, #16]	; (810d618 <_ZN6ThreadD1Ev+0x1c>)
 810d606:	687b      	ldr	r3, [r7, #4]
 810d608:	601a      	str	r2, [r3, #0]
 810d60a:	687b      	ldr	r3, [r7, #4]
 810d60c:	4618      	mov	r0, r3
 810d60e:	370c      	adds	r7, #12
 810d610:	46bd      	mov	sp, r7
 810d612:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d616:	4770      	bx	lr
 810d618:	08110db4 	.word	0x08110db4

0810d61c <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef>:

#include "../Thread.h"

class WatchdogThread : Thread {
public:
	WatchdogThread(IWDG_HandleTypeDef* hiwdg) : Thread("Watchdog"), watchdog_handle(hiwdg) {}
 810d61c:	b580      	push	{r7, lr}
 810d61e:	b082      	sub	sp, #8
 810d620:	af00      	add	r7, sp, #0
 810d622:	6078      	str	r0, [r7, #4]
 810d624:	6039      	str	r1, [r7, #0]
 810d626:	687b      	ldr	r3, [r7, #4]
 810d628:	4907      	ldr	r1, [pc, #28]	; (810d648 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef+0x2c>)
 810d62a:	4618      	mov	r0, r3
 810d62c:	f000 f947 	bl	810d8be <_ZN6ThreadC1EPKc>
 810d630:	4a06      	ldr	r2, [pc, #24]	; (810d64c <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef+0x30>)
 810d632:	687b      	ldr	r3, [r7, #4]
 810d634:	601a      	str	r2, [r3, #0]
 810d636:	687b      	ldr	r3, [r7, #4]
 810d638:	683a      	ldr	r2, [r7, #0]
 810d63a:	60da      	str	r2, [r3, #12]
 810d63c:	687b      	ldr	r3, [r7, #4]
 810d63e:	4618      	mov	r0, r3
 810d640:	3708      	adds	r7, #8
 810d642:	46bd      	mov	sp, r7
 810d644:	bd80      	pop	{r7, pc}
 810d646:	bf00      	nop
 810d648:	08110980 	.word	0x08110980
 810d64c:	08110d40 	.word	0x08110d40

0810d650 <_ZN14WatchdogThreadD1Ev>:
class WatchdogThread : Thread {
 810d650:	b580      	push	{r7, lr}
 810d652:	b082      	sub	sp, #8
 810d654:	af00      	add	r7, sp, #0
 810d656:	6078      	str	r0, [r7, #4]
 810d658:	4a05      	ldr	r2, [pc, #20]	; (810d670 <_ZN14WatchdogThreadD1Ev+0x20>)
 810d65a:	687b      	ldr	r3, [r7, #4]
 810d65c:	601a      	str	r2, [r3, #0]
 810d65e:	687b      	ldr	r3, [r7, #4]
 810d660:	4618      	mov	r0, r3
 810d662:	f7ff ffcb 	bl	810d5fc <_ZN6ThreadD1Ev>
 810d666:	687b      	ldr	r3, [r7, #4]
 810d668:	4618      	mov	r0, r3
 810d66a:	3708      	adds	r7, #8
 810d66c:	46bd      	mov	sp, r7
 810d66e:	bd80      	pop	{r7, pc}
 810d670:	08110d40 	.word	0x08110d40

0810d674 <__tcf_0>:


#ifdef CORE_CM4
#include "i2c.h"
void initCortexM4() {
	static WatchdogThread watchdog(&hiwdg2);
 810d674:	b580      	push	{r7, lr}
 810d676:	af00      	add	r7, sp, #0
 810d678:	4801      	ldr	r0, [pc, #4]	; (810d680 <__tcf_0+0xc>)
 810d67a:	f7ff ffe9 	bl	810d650 <_ZN14WatchdogThreadD1Ev>
 810d67e:	bd80      	pop	{r7, pc}
 810d680:	10004720 	.word	0x10004720

0810d684 <_ZN5ShellD1Ev>:

#define CMD_BUFFER_SIZE 512



class Shell : public Thread {
 810d684:	b580      	push	{r7, lr}
 810d686:	b082      	sub	sp, #8
 810d688:	af00      	add	r7, sp, #0
 810d68a:	6078      	str	r0, [r7, #4]
 810d68c:	4a05      	ldr	r2, [pc, #20]	; (810d6a4 <_ZN5ShellD1Ev+0x20>)
 810d68e:	687b      	ldr	r3, [r7, #4]
 810d690:	601a      	str	r2, [r3, #0]
 810d692:	687b      	ldr	r3, [r7, #4]
 810d694:	4618      	mov	r0, r3
 810d696:	f7ff ffb1 	bl	810d5fc <_ZN6ThreadD1Ev>
 810d69a:	687b      	ldr	r3, [r7, #4]
 810d69c:	4618      	mov	r0, r3
 810d69e:	3708      	adds	r7, #8
 810d6a0:	46bd      	mov	sp, r7
 810d6a2:	bd80      	pop	{r7, pc}
 810d6a4:	081109d8 	.word	0x081109d8

0810d6a8 <__tcf_1>:
	static Shell shell(&huart3, &terminal);
 810d6a8:	b580      	push	{r7, lr}
 810d6aa:	af00      	add	r7, sp, #0
 810d6ac:	4801      	ldr	r0, [pc, #4]	; (810d6b4 <__tcf_1+0xc>)
 810d6ae:	f7ff ffe9 	bl	810d684 <_ZN5ShellD1Ev>
 810d6b2:	bd80      	pop	{r7, pc}
 810d6b4:	10004734 	.word	0x10004734

0810d6b8 <_ZN11ADC24ThreadD1Ev>:
#include "DataStructures.h"

#include "Libraries/HX711/hx711.h"


class ADC24Thread : Thread {
 810d6b8:	b580      	push	{r7, lr}
 810d6ba:	b082      	sub	sp, #8
 810d6bc:	af00      	add	r7, sp, #0
 810d6be:	6078      	str	r0, [r7, #4]
 810d6c0:	4a05      	ldr	r2, [pc, #20]	; (810d6d8 <_ZN11ADC24ThreadD1Ev+0x20>)
 810d6c2:	687b      	ldr	r3, [r7, #4]
 810d6c4:	601a      	str	r2, [r3, #0]
 810d6c6:	687b      	ldr	r3, [r7, #4]
 810d6c8:	4618      	mov	r0, r3
 810d6ca:	f7ff ff97 	bl	810d5fc <_ZN6ThreadD1Ev>
 810d6ce:	687b      	ldr	r3, [r7, #4]
 810d6d0:	4618      	mov	r0, r3
 810d6d2:	3708      	adds	r7, #8
 810d6d4:	46bd      	mov	sp, r7
 810d6d6:	bd80      	pop	{r7, pc}
 810d6d8:	08110d7c 	.word	0x08110d7c

0810d6dc <__tcf_2>:
	//static IMUThread imu(&hi2c1);
	//static BarometerThread barometer(&hi2c1);
	static ADC24Thread scale(GPIOB, GPIO_PIN_10, GPIOB, GPIO_PIN_11); //Same pins as i2c2
 810d6dc:	b580      	push	{r7, lr}
 810d6de:	af00      	add	r7, sp, #0
 810d6e0:	4801      	ldr	r0, [pc, #4]	; (810d6e8 <__tcf_2+0xc>)
 810d6e2:	f7ff ffe9 	bl	810d6b8 <_ZN11ADC24ThreadD1Ev>
 810d6e6:	bd80      	pop	{r7, pc}
 810d6e8:	10004b9c 	.word	0x10004b9c

0810d6ec <initCortexM4>:
void initCortexM4() {
 810d6ec:	b580      	push	{r7, lr}
 810d6ee:	b082      	sub	sp, #8
 810d6f0:	af02      	add	r7, sp, #8
	static WatchdogThread watchdog(&hiwdg2);
 810d6f2:	4b39      	ldr	r3, [pc, #228]	; (810d7d8 <initCortexM4+0xec>)
 810d6f4:	781b      	ldrb	r3, [r3, #0]
 810d6f6:	f3bf 8f5b 	dmb	ish
 810d6fa:	b2db      	uxtb	r3, r3
 810d6fc:	f003 0301 	and.w	r3, r3, #1
 810d700:	2b00      	cmp	r3, #0
 810d702:	bf0c      	ite	eq
 810d704:	2301      	moveq	r3, #1
 810d706:	2300      	movne	r3, #0
 810d708:	b2db      	uxtb	r3, r3
 810d70a:	2b00      	cmp	r3, #0
 810d70c:	d014      	beq.n	810d738 <initCortexM4+0x4c>
 810d70e:	4832      	ldr	r0, [pc, #200]	; (810d7d8 <initCortexM4+0xec>)
 810d710:	f000 fbe4 	bl	810dedc <__cxa_guard_acquire>
 810d714:	4603      	mov	r3, r0
 810d716:	2b00      	cmp	r3, #0
 810d718:	bf14      	ite	ne
 810d71a:	2301      	movne	r3, #1
 810d71c:	2300      	moveq	r3, #0
 810d71e:	b2db      	uxtb	r3, r3
 810d720:	2b00      	cmp	r3, #0
 810d722:	d009      	beq.n	810d738 <initCortexM4+0x4c>
 810d724:	492d      	ldr	r1, [pc, #180]	; (810d7dc <initCortexM4+0xf0>)
 810d726:	482e      	ldr	r0, [pc, #184]	; (810d7e0 <initCortexM4+0xf4>)
 810d728:	f7ff ff78 	bl	810d61c <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef>
 810d72c:	482a      	ldr	r0, [pc, #168]	; (810d7d8 <initCortexM4+0xec>)
 810d72e:	f000 fbe1 	bl	810def4 <__cxa_guard_release>
 810d732:	482c      	ldr	r0, [pc, #176]	; (810d7e4 <initCortexM4+0xf8>)
 810d734:	f000 fcec 	bl	810e110 <atexit>
	static Shell shell(&huart3, &terminal);
 810d738:	4b2b      	ldr	r3, [pc, #172]	; (810d7e8 <initCortexM4+0xfc>)
 810d73a:	781b      	ldrb	r3, [r3, #0]
 810d73c:	f3bf 8f5b 	dmb	ish
 810d740:	b2db      	uxtb	r3, r3
 810d742:	f003 0301 	and.w	r3, r3, #1
 810d746:	2b00      	cmp	r3, #0
 810d748:	bf0c      	ite	eq
 810d74a:	2301      	moveq	r3, #1
 810d74c:	2300      	movne	r3, #0
 810d74e:	b2db      	uxtb	r3, r3
 810d750:	2b00      	cmp	r3, #0
 810d752:	d015      	beq.n	810d780 <initCortexM4+0x94>
 810d754:	4824      	ldr	r0, [pc, #144]	; (810d7e8 <initCortexM4+0xfc>)
 810d756:	f000 fbc1 	bl	810dedc <__cxa_guard_acquire>
 810d75a:	4603      	mov	r3, r0
 810d75c:	2b00      	cmp	r3, #0
 810d75e:	bf14      	ite	ne
 810d760:	2301      	movne	r3, #1
 810d762:	2300      	moveq	r3, #0
 810d764:	b2db      	uxtb	r3, r3
 810d766:	2b00      	cmp	r3, #0
 810d768:	d00a      	beq.n	810d780 <initCortexM4+0x94>
 810d76a:	4a20      	ldr	r2, [pc, #128]	; (810d7ec <initCortexM4+0x100>)
 810d76c:	4920      	ldr	r1, [pc, #128]	; (810d7f0 <initCortexM4+0x104>)
 810d76e:	4821      	ldr	r0, [pc, #132]	; (810d7f4 <initCortexM4+0x108>)
 810d770:	f7fc fe9c 	bl	810a4ac <_ZN5ShellC1EP20__UART_HandleTypeDefP8Terminal>
 810d774:	481c      	ldr	r0, [pc, #112]	; (810d7e8 <initCortexM4+0xfc>)
 810d776:	f000 fbbd 	bl	810def4 <__cxa_guard_release>
 810d77a:	481f      	ldr	r0, [pc, #124]	; (810d7f8 <initCortexM4+0x10c>)
 810d77c:	f000 fcc8 	bl	810e110 <atexit>
	static ADC24Thread scale(GPIOB, GPIO_PIN_10, GPIOB, GPIO_PIN_11); //Same pins as i2c2
 810d780:	4b1e      	ldr	r3, [pc, #120]	; (810d7fc <initCortexM4+0x110>)
 810d782:	781b      	ldrb	r3, [r3, #0]
 810d784:	f3bf 8f5b 	dmb	ish
 810d788:	b2db      	uxtb	r3, r3
 810d78a:	f003 0301 	and.w	r3, r3, #1
 810d78e:	2b00      	cmp	r3, #0
 810d790:	bf0c      	ite	eq
 810d792:	2301      	moveq	r3, #1
 810d794:	2300      	movne	r3, #0
 810d796:	b2db      	uxtb	r3, r3
 810d798:	2b00      	cmp	r3, #0
 810d79a:	d01a      	beq.n	810d7d2 <initCortexM4+0xe6>
 810d79c:	4817      	ldr	r0, [pc, #92]	; (810d7fc <initCortexM4+0x110>)
 810d79e:	f000 fb9d 	bl	810dedc <__cxa_guard_acquire>
 810d7a2:	4603      	mov	r3, r0
 810d7a4:	2b00      	cmp	r3, #0
 810d7a6:	bf14      	ite	ne
 810d7a8:	2301      	movne	r3, #1
 810d7aa:	2300      	moveq	r3, #0
 810d7ac:	b2db      	uxtb	r3, r3
 810d7ae:	2b00      	cmp	r3, #0
 810d7b0:	d00f      	beq.n	810d7d2 <initCortexM4+0xe6>
 810d7b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810d7b6:	9300      	str	r3, [sp, #0]
 810d7b8:	4b11      	ldr	r3, [pc, #68]	; (810d800 <initCortexM4+0x114>)
 810d7ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 810d7be:	4910      	ldr	r1, [pc, #64]	; (810d800 <initCortexM4+0x114>)
 810d7c0:	4810      	ldr	r0, [pc, #64]	; (810d804 <initCortexM4+0x118>)
 810d7c2:	f7ff fe1d 	bl	810d400 <_ZN11ADC24ThreadC1EP12GPIO_TypeDefmS1_m>
 810d7c6:	480d      	ldr	r0, [pc, #52]	; (810d7fc <initCortexM4+0x110>)
 810d7c8:	f000 fb94 	bl	810def4 <__cxa_guard_release>
 810d7cc:	480e      	ldr	r0, [pc, #56]	; (810d808 <initCortexM4+0x11c>)
 810d7ce:	f000 fc9f 	bl	810e110 <atexit>
	//static ADC16Thread potentiometer(&hi2c1);
}
 810d7d2:	bf00      	nop
 810d7d4:	46bd      	mov	sp, r7
 810d7d6:	bd80      	pop	{r7, pc}
 810d7d8:	10004730 	.word	0x10004730
 810d7dc:	100096f4 	.word	0x100096f4
 810d7e0:	10004720 	.word	0x10004720
 810d7e4:	0810d675 	.word	0x0810d675
 810d7e8:	10004b98 	.word	0x10004b98
 810d7ec:	1000461c 	.word	0x1000461c
 810d7f0:	10009a50 	.word	0x10009a50
 810d7f4:	10004734 	.word	0x10004734
 810d7f8:	0810d6a9 	.word	0x0810d6a9
 810d7fc:	10004bb4 	.word	0x10004bb4
 810d800:	58020400 	.word	0x58020400
 810d804:	10004b9c 	.word	0x10004b9c
 810d808:	0810d6dd 	.word	0x0810d6dd

0810d80c <_Z41__static_initialization_and_destruction_0ii>:



void setupTelemtry() {
	network.forward<PingPacket>(&network);
}
 810d80c:	b580      	push	{r7, lr}
 810d80e:	b082      	sub	sp, #8
 810d810:	af00      	add	r7, sp, #0
 810d812:	6078      	str	r0, [r7, #4]
 810d814:	6039      	str	r1, [r7, #0]
 810d816:	687b      	ldr	r3, [r7, #4]
 810d818:	2b01      	cmp	r3, #1
 810d81a:	d111      	bne.n	810d840 <_Z41__static_initialization_and_destruction_0ii+0x34>
 810d81c:	683b      	ldr	r3, [r7, #0]
 810d81e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 810d822:	4293      	cmp	r3, r2
 810d824:	d10c      	bne.n	810d840 <_Z41__static_initialization_and_destruction_0ii+0x34>
BufferedIODriver telemetryDriver(storage, control, 256); // Point to RAM D3
 810d826:	4b0f      	ldr	r3, [pc, #60]	; (810d864 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 810d828:	6819      	ldr	r1, [r3, #0]
 810d82a:	4b0f      	ldr	r3, [pc, #60]	; (810d868 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 810d82c:	681a      	ldr	r2, [r3, #0]
 810d82e:	f44f 7380 	mov.w	r3, #256	; 0x100
 810d832:	480e      	ldr	r0, [pc, #56]	; (810d86c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 810d834:	f7fd fc5a 	bl	810b0ec <_ZN16BufferedIODriverC1EPVhS1_j>
NetworkBus network(&telemetryDriver);
 810d838:	490c      	ldr	r1, [pc, #48]	; (810d86c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 810d83a:	480d      	ldr	r0, [pc, #52]	; (810d870 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 810d83c:	f7ff fd1e 	bl	810d27c <_ZN10NetworkBusC1EP8IODriver>
 810d840:	687b      	ldr	r3, [r7, #4]
 810d842:	2b00      	cmp	r3, #0
 810d844:	d10a      	bne.n	810d85c <_Z41__static_initialization_and_destruction_0ii+0x50>
 810d846:	683b      	ldr	r3, [r7, #0]
 810d848:	f64f 72ff 	movw	r2, #65535	; 0xffff
 810d84c:	4293      	cmp	r3, r2
 810d84e:	d105      	bne.n	810d85c <_Z41__static_initialization_and_destruction_0ii+0x50>
 810d850:	4807      	ldr	r0, [pc, #28]	; (810d870 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 810d852:	f7ff fd6d 	bl	810d330 <_ZN10NetworkBusD1Ev>
BufferedIODriver telemetryDriver(storage, control, 256); // Point to RAM D3
 810d856:	4805      	ldr	r0, [pc, #20]	; (810d86c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 810d858:	f7fd fdfa 	bl	810b450 <_ZN16BufferedIODriverD1Ev>
}
 810d85c:	bf00      	nop
 810d85e:	3708      	adds	r7, #8
 810d860:	46bd      	mov	sp, r7
 810d862:	bd80      	pop	{r7, pc}
 810d864:	1000002c 	.word	0x1000002c
 810d868:	10000028 	.word	0x10000028
 810d86c:	10004bb8 	.word	0x10004bb8
 810d870:	10004be0 	.word	0x10004be0

0810d874 <_GLOBAL__sub_I_telemetryDriver>:
 810d874:	b580      	push	{r7, lr}
 810d876:	af00      	add	r7, sp, #0
 810d878:	f64f 71ff 	movw	r1, #65535	; 0xffff
 810d87c:	2001      	movs	r0, #1
 810d87e:	f7ff ffc5 	bl	810d80c <_Z41__static_initialization_and_destruction_0ii>
 810d882:	bd80      	pop	{r7, pc}

0810d884 <_GLOBAL__sub_D_telemetryDriver>:
 810d884:	b580      	push	{r7, lr}
 810d886:	af00      	add	r7, sp, #0
 810d888:	f64f 71ff 	movw	r1, #65535	; 0xffff
 810d88c:	2000      	movs	r0, #0
 810d88e:	f7ff ffbd 	bl	810d80c <_Z41__static_initialization_and_destruction_0ii>
 810d892:	bd80      	pop	{r7, pc}

0810d894 <_Z10__task_runPKv>:

#define DEFAULT_STACK_SIZE (256) // Danger zone: changing the stack size might create very nasty bugs

static char buffer[128];

void __task_run(const void* arg) {
 810d894:	b580      	push	{r7, lr}
 810d896:	b084      	sub	sp, #16
 810d898:	af00      	add	r7, sp, #0
 810d89a:	6078      	str	r0, [r7, #4]
	Thread* thread = (Thread*) arg;
 810d89c:	687b      	ldr	r3, [r7, #4]
 810d89e:	60fb      	str	r3, [r7, #12]

	osDelay(100);
 810d8a0:	2064      	movs	r0, #100	; 0x64
 810d8a2:	f7fa fc09 	bl	81080b8 <osDelay>

	thread->init();
 810d8a6:	68fb      	ldr	r3, [r7, #12]
 810d8a8:	681b      	ldr	r3, [r3, #0]
 810d8aa:	681b      	ldr	r3, [r3, #0]
 810d8ac:	68f8      	ldr	r0, [r7, #12]
 810d8ae:	4798      	blx	r3

	while(true) {
		thread->loop();
 810d8b0:	68fb      	ldr	r3, [r7, #12]
 810d8b2:	681b      	ldr	r3, [r3, #0]
 810d8b4:	3304      	adds	r3, #4
 810d8b6:	681b      	ldr	r3, [r3, #0]
 810d8b8:	68f8      	ldr	r0, [r7, #12]
 810d8ba:	4798      	blx	r3
 810d8bc:	e7f8      	b.n	810d8b0 <_Z10__task_runPKv+0x1c>

0810d8be <_ZN6ThreadC1EPKc>:
	}
}

Thread::Thread(const char* name) : Thread(name, (osPriority) osPriorityNormal) {
 810d8be:	b580      	push	{r7, lr}
 810d8c0:	b082      	sub	sp, #8
 810d8c2:	af00      	add	r7, sp, #0
 810d8c4:	6078      	str	r0, [r7, #4]
 810d8c6:	6039      	str	r1, [r7, #0]
 810d8c8:	2200      	movs	r2, #0
 810d8ca:	6839      	ldr	r1, [r7, #0]
 810d8cc:	6878      	ldr	r0, [r7, #4]
 810d8ce:	f000 f805 	bl	810d8dc <_ZN6ThreadC1EPKc10osPriority>
	;
}
 810d8d2:	687b      	ldr	r3, [r7, #4]
 810d8d4:	4618      	mov	r0, r3
 810d8d6:	3708      	adds	r7, #8
 810d8d8:	46bd      	mov	sp, r7
 810d8da:	bd80      	pop	{r7, pc}

0810d8dc <_ZN6ThreadC1EPKc10osPriority>:

Thread::Thread(const char* name, osPriority priority) : Thread(name, priority, DEFAULT_STACK_SIZE) {
 810d8dc:	b580      	push	{r7, lr}
 810d8de:	b084      	sub	sp, #16
 810d8e0:	af00      	add	r7, sp, #0
 810d8e2:	60f8      	str	r0, [r7, #12]
 810d8e4:	60b9      	str	r1, [r7, #8]
 810d8e6:	4613      	mov	r3, r2
 810d8e8:	80fb      	strh	r3, [r7, #6]
 810d8ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 810d8ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 810d8f2:	68b9      	ldr	r1, [r7, #8]
 810d8f4:	68f8      	ldr	r0, [r7, #12]
 810d8f6:	f000 f805 	bl	810d904 <_ZN6ThreadC1EPKc10osPrioritym>
	;
}
 810d8fa:	68fb      	ldr	r3, [r7, #12]
 810d8fc:	4618      	mov	r0, r3
 810d8fe:	3710      	adds	r7, #16
 810d900:	46bd      	mov	sp, r7
 810d902:	bd80      	pop	{r7, pc}

0810d904 <_ZN6ThreadC1EPKc10osPrioritym>:

Thread::Thread(const char* name, uint32_t stackSize) : Thread(name, (osPriority) osPriorityNormal, stackSize) {
	;
}

Thread::Thread(const char* name, osPriority priority, uint32_t stackSize) {
 810d904:	b580      	push	{r7, lr}
 810d906:	b08c      	sub	sp, #48	; 0x30
 810d908:	af00      	add	r7, sp, #0
 810d90a:	60f8      	str	r0, [r7, #12]
 810d90c:	60b9      	str	r1, [r7, #8]
 810d90e:	603b      	str	r3, [r7, #0]
 810d910:	4613      	mov	r3, r2
 810d912:	80fb      	strh	r3, [r7, #6]
 810d914:	4a12      	ldr	r2, [pc, #72]	; (810d960 <_ZN6ThreadC1EPKc10osPrioritym+0x5c>)
 810d916:	68fb      	ldr	r3, [r7, #12]
 810d918:	601a      	str	r2, [r3, #0]
	osThreadDef_t thread = { (char*) name, &__task_run, priority, 0, stackSize};
 810d91a:	f107 0314 	add.w	r3, r7, #20
 810d91e:	2200      	movs	r2, #0
 810d920:	601a      	str	r2, [r3, #0]
 810d922:	605a      	str	r2, [r3, #4]
 810d924:	609a      	str	r2, [r3, #8]
 810d926:	60da      	str	r2, [r3, #12]
 810d928:	611a      	str	r2, [r3, #16]
 810d92a:	615a      	str	r2, [r3, #20]
 810d92c:	619a      	str	r2, [r3, #24]
 810d92e:	4b0d      	ldr	r3, [pc, #52]	; (810d964 <_ZN6ThreadC1EPKc10osPrioritym+0x60>)
 810d930:	61bb      	str	r3, [r7, #24]
 810d932:	68bb      	ldr	r3, [r7, #8]
 810d934:	617b      	str	r3, [r7, #20]
 810d936:	88fb      	ldrh	r3, [r7, #6]
 810d938:	83bb      	strh	r3, [r7, #28]
 810d93a:	683b      	ldr	r3, [r7, #0]
 810d93c:	627b      	str	r3, [r7, #36]	; 0x24
	this->handle = osThreadCreate(&thread, this);
 810d93e:	f107 0314 	add.w	r3, r7, #20
 810d942:	68f9      	ldr	r1, [r7, #12]
 810d944:	4618      	mov	r0, r3
 810d946:	f7fa fb6b 	bl	8108020 <osThreadCreate>
 810d94a:	4602      	mov	r2, r0
 810d94c:	68fb      	ldr	r3, [r7, #12]
 810d94e:	605a      	str	r2, [r3, #4]
	this->name = name;
 810d950:	68fb      	ldr	r3, [r7, #12]
 810d952:	68ba      	ldr	r2, [r7, #8]
 810d954:	609a      	str	r2, [r3, #8]
}
 810d956:	68fb      	ldr	r3, [r7, #12]
 810d958:	4618      	mov	r0, r3
 810d95a:	3730      	adds	r7, #48	; 0x30
 810d95c:	46bd      	mov	sp, r7
 810d95e:	bd80      	pop	{r7, pc}
 810d960:	08110db4 	.word	0x08110db4
 810d964:	0810d895 	.word	0x0810d895

0810d968 <_ZN6Thread7printlnEPKcz>:

void Thread::println(const char* format, ...) {
 810d968:	b40e      	push	{r1, r2, r3}
 810d96a:	b580      	push	{r7, lr}
 810d96c:	b085      	sub	sp, #20
 810d96e:	af00      	add	r7, sp, #0
 810d970:	6078      	str	r0, [r7, #4]
	va_list args;
	va_start(args, format);
 810d972:	f107 0320 	add.w	r3, r7, #32
 810d976:	60fb      	str	r3, [r7, #12]

	sprintf(buffer, "[%s] ", name);
 810d978:	687b      	ldr	r3, [r7, #4]
 810d97a:	689b      	ldr	r3, [r3, #8]
 810d97c:	461a      	mov	r2, r3
 810d97e:	4913      	ldr	r1, [pc, #76]	; (810d9cc <_ZN6Thread7printlnEPKcz+0x64>)
 810d980:	4813      	ldr	r0, [pc, #76]	; (810d9d0 <_ZN6Thread7printlnEPKcz+0x68>)
 810d982:	f001 f8ad 	bl	810eae0 <siprintf>
	vsprintf(buffer + strlen(buffer), format, args);
 810d986:	4812      	ldr	r0, [pc, #72]	; (810d9d0 <_ZN6Thread7printlnEPKcz+0x68>)
 810d988:	f7f2 fcb4 	bl	81002f4 <strlen>
 810d98c:	4602      	mov	r2, r0
 810d98e:	4b10      	ldr	r3, [pc, #64]	; (810d9d0 <_ZN6Thread7printlnEPKcz+0x68>)
 810d990:	4413      	add	r3, r2
 810d992:	68fa      	ldr	r2, [r7, #12]
 810d994:	69f9      	ldr	r1, [r7, #28]
 810d996:	4618      	mov	r0, r3
 810d998:	f001 f96a 	bl	810ec70 <vsiprintf>
	strcat(buffer, "\r\n");
 810d99c:	480c      	ldr	r0, [pc, #48]	; (810d9d0 <_ZN6Thread7printlnEPKcz+0x68>)
 810d99e:	f7f2 fca9 	bl	81002f4 <strlen>
 810d9a2:	4603      	mov	r3, r0
 810d9a4:	461a      	mov	r2, r3
 810d9a6:	4b0a      	ldr	r3, [pc, #40]	; (810d9d0 <_ZN6Thread7printlnEPKcz+0x68>)
 810d9a8:	4413      	add	r3, r2
 810d9aa:	4a0a      	ldr	r2, [pc, #40]	; (810d9d4 <_ZN6Thread7printlnEPKcz+0x6c>)
 810d9ac:	8811      	ldrh	r1, [r2, #0]
 810d9ae:	7892      	ldrb	r2, [r2, #2]
 810d9b0:	8019      	strh	r1, [r3, #0]
 810d9b2:	709a      	strb	r2, [r3, #2]

	console.print(buffer);
 810d9b4:	4906      	ldr	r1, [pc, #24]	; (810d9d0 <_ZN6Thread7printlnEPKcz+0x68>)
 810d9b6:	4808      	ldr	r0, [pc, #32]	; (810d9d8 <_ZN6Thread7printlnEPKcz+0x70>)
 810d9b8:	f7fc fcf1 	bl	810a39e <_ZN7Console5printEPKc>

	va_end(args);
}
 810d9bc:	bf00      	nop
 810d9be:	3714      	adds	r7, #20
 810d9c0:	46bd      	mov	sp, r7
 810d9c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810d9c6:	b003      	add	sp, #12
 810d9c8:	4770      	bx	lr
 810d9ca:	bf00      	nop
 810d9cc:	0811098c 	.word	0x0811098c
 810d9d0:	100094f4 	.word	0x100094f4
 810d9d4:	08110994 	.word	0x08110994
 810d9d8:	100041d0 	.word	0x100041d0

0810d9dc <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
 810d9dc:	b510      	push	{r4, lr}
 810d9de:	4b03      	ldr	r3, [pc, #12]	; (810d9ec <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev+0x10>)
 810d9e0:	6003      	str	r3, [r0, #0]
 810d9e2:	4604      	mov	r4, r0
 810d9e4:	f000 faaa 	bl	810df3c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 810d9e8:	4620      	mov	r0, r4
 810d9ea:	bd10      	pop	{r4, pc}
 810d9ec:	08110df8 	.word	0x08110df8

0810d9f0 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
 810d9f0:	b510      	push	{r4, lr}
 810d9f2:	4604      	mov	r4, r0
 810d9f4:	f7ff fff2 	bl	810d9dc <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>
 810d9f8:	4620      	mov	r0, r4
 810d9fa:	2118      	movs	r1, #24
 810d9fc:	f000 fa37 	bl	810de6e <_ZdlPvj>
 810da00:	4620      	mov	r0, r4
 810da02:	bd10      	pop	{r4, pc}

0810da04 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 810da04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810da08:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 810da0c:	454a      	cmp	r2, r9
 810da0e:	4604      	mov	r4, r0
 810da10:	460f      	mov	r7, r1
 810da12:	4616      	mov	r6, r2
 810da14:	4698      	mov	r8, r3
 810da16:	d024      	beq.n	810da62 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x5e>
 810da18:	68e5      	ldr	r5, [r4, #12]
 810da1a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 810da1e:	b355      	cbz	r5, 810da76 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x72>
 810da20:	68e3      	ldr	r3, [r4, #12]
 810da22:	079a      	lsls	r2, r3, #30
 810da24:	d524      	bpl.n	810da70 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 810da26:	f013 0a01 	ands.w	sl, r3, #1
 810da2a:	ea4f 2223 	mov.w	r2, r3, asr #8
 810da2e:	d003      	beq.n	810da38 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x34>
 810da30:	1cfb      	adds	r3, r7, #3
 810da32:	d01d      	beq.n	810da70 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 810da34:	6833      	ldr	r3, [r6, #0]
 810da36:	589a      	ldr	r2, [r3, r2]
 810da38:	68a0      	ldr	r0, [r4, #8]
 810da3a:	6803      	ldr	r3, [r0, #0]
 810da3c:	f8cd 9000 	str.w	r9, [sp]
 810da40:	f8d3 b020 	ldr.w	fp, [r3, #32]
 810da44:	4432      	add	r2, r6
 810da46:	4643      	mov	r3, r8
 810da48:	4639      	mov	r1, r7
 810da4a:	47d8      	blx	fp
 810da4c:	2803      	cmp	r0, #3
 810da4e:	d90f      	bls.n	810da70 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 810da50:	f1ba 0f00 	cmp.w	sl, #0
 810da54:	d002      	beq.n	810da5c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 810da56:	f040 0001 	orr.w	r0, r0, #1
 810da5a:	b2c0      	uxtb	r0, r0
 810da5c:	b003      	add	sp, #12
 810da5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810da62:	4619      	mov	r1, r3
 810da64:	f000 f9ea 	bl	810de3c <_ZNKSt9type_infoeqERKS_>
 810da68:	2800      	cmp	r0, #0
 810da6a:	d0d5      	beq.n	810da18 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 810da6c:	2006      	movs	r0, #6
 810da6e:	e7f5      	b.n	810da5c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 810da70:	3d01      	subs	r5, #1
 810da72:	3c08      	subs	r4, #8
 810da74:	e7d3      	b.n	810da1e <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1a>
 810da76:	2001      	movs	r0, #1
 810da78:	e7f0      	b.n	810da5c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>

0810da7a <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>:
 810da7a:	b4f0      	push	{r4, r5, r6, r7}
 810da7c:	1e0e      	subs	r6, r1, #0
 810da7e:	9c04      	ldr	r4, [sp, #16]
 810da80:	db06      	blt.n	810da90 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x16>
 810da82:	1990      	adds	r0, r2, r6
 810da84:	4284      	cmp	r4, r0
 810da86:	bf14      	ite	ne
 810da88:	2001      	movne	r0, #1
 810da8a:	2006      	moveq	r0, #6
 810da8c:	bcf0      	pop	{r4, r5, r6, r7}
 810da8e:	4770      	bx	lr
 810da90:	3602      	adds	r6, #2
 810da92:	d004      	beq.n	810da9e <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x24>
 810da94:	6804      	ldr	r4, [r0, #0]
 810da96:	6a24      	ldr	r4, [r4, #32]
 810da98:	46a4      	mov	ip, r4
 810da9a:	bcf0      	pop	{r4, r5, r6, r7}
 810da9c:	4760      	bx	ip
 810da9e:	2001      	movs	r0, #1
 810daa0:	e7f4      	b.n	810da8c <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x12>

0810daa2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 810daa2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810daa6:	b091      	sub	sp, #68	; 0x44
 810daa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810daac:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 810daae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 810dab0:	68a3      	ldr	r3, [r4, #8]
 810dab2:	06dd      	lsls	r5, r3, #27
 810dab4:	bf44      	itt	mi
 810dab6:	6883      	ldrmi	r3, [r0, #8]
 810dab8:	60a3      	strmi	r3, [r4, #8]
 810daba:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 810dabc:	4293      	cmp	r3, r2
 810dabe:	4681      	mov	r9, r0
 810dac0:	4688      	mov	r8, r1
 810dac2:	d107      	bne.n	810dad4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x32>
 810dac4:	991b      	ldr	r1, [sp, #108]	; 0x6c
 810dac6:	f000 f9b9 	bl	810de3c <_ZNKSt9type_infoeqERKS_>
 810daca:	b118      	cbz	r0, 810dad4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x32>
 810dacc:	9b05      	ldr	r3, [sp, #20]
 810dace:	7163      	strb	r3, [r4, #5]
 810dad0:	2600      	movs	r6, #0
 810dad2:	e0fa      	b.n	810dcca <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x228>
 810dad4:	9906      	ldr	r1, [sp, #24]
 810dad6:	4648      	mov	r0, r9
 810dad8:	f000 f9b0 	bl	810de3c <_ZNKSt9type_infoeqERKS_>
 810dadc:	4682      	mov	sl, r0
 810dade:	b1c0      	cbz	r0, 810db12 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x70>
 810dae0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 810dae2:	6023      	str	r3, [r4, #0]
 810dae4:	f1b8 0f00 	cmp.w	r8, #0
 810dae8:	9b05      	ldr	r3, [sp, #20]
 810daea:	7123      	strb	r3, [r4, #4]
 810daec:	db0b      	blt.n	810db06 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x64>
 810daee:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 810daf0:	4498      	add	r8, r3
 810daf2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 810daf4:	4543      	cmp	r3, r8
 810daf6:	bf14      	ite	ne
 810daf8:	f04f 0801 	movne.w	r8, #1
 810dafc:	f04f 0806 	moveq.w	r8, #6
 810db00:	f884 8006 	strb.w	r8, [r4, #6]
 810db04:	e7e4      	b.n	810dad0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 810db06:	f118 0f02 	cmn.w	r8, #2
 810db0a:	d1e1      	bne.n	810dad0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 810db0c:	2301      	movs	r3, #1
 810db0e:	71a3      	strb	r3, [r4, #6]
 810db10:	e7de      	b.n	810dad0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 810db12:	f1b8 0f00 	cmp.w	r8, #0
 810db16:	bfaa      	itet	ge
 810db18:	9b1c      	ldrge	r3, [sp, #112]	; 0x70
 810db1a:	f8cd a01c 	strlt.w	sl, [sp, #28]
 810db1e:	eba3 0308 	subge.w	r3, r3, r8
 810db22:	f04f 0600 	mov.w	r6, #0
 810db26:	bfa8      	it	ge
 810db28:	9307      	strge	r3, [sp, #28]
 810db2a:	2302      	movs	r3, #2
 810db2c:	e9cd 6309 	strd	r6, r3, [sp, #36]	; 0x24
 810db30:	2301      	movs	r3, #1
 810db32:	9308      	str	r3, [sp, #32]
 810db34:	9b05      	ldr	r3, [sp, #20]
 810db36:	f043 0301 	orr.w	r3, r3, #1
 810db3a:	46b3      	mov	fp, r6
 810db3c:	930b      	str	r3, [sp, #44]	; 0x2c
 810db3e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 810db42:	9304      	str	r3, [sp, #16]
 810db44:	9b04      	ldr	r3, [sp, #16]
 810db46:	2b00      	cmp	r3, #0
 810db48:	f000 80d9 	beq.w	810dcfe <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x25c>
 810db4c:	eb09 05c3 	add.w	r5, r9, r3, lsl #3
 810db50:	68a7      	ldr	r7, [r4, #8]
 810db52:	68e9      	ldr	r1, [r5, #12]
 810db54:	970f      	str	r7, [sp, #60]	; 0x3c
 810db56:	07c8      	lsls	r0, r1, #31
 810db58:	bf48      	it	mi
 810db5a:	981a      	ldrmi	r0, [sp, #104]	; 0x68
 810db5c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 810db60:	ea4f 2321 	mov.w	r3, r1, asr #8
 810db64:	bf48      	it	mi
 810db66:	6800      	ldrmi	r0, [r0, #0]
 810db68:	f88d b038 	strb.w	fp, [sp, #56]	; 0x38
 810db6c:	bf48      	it	mi
 810db6e:	58c3      	ldrmi	r3, [r0, r3]
 810db70:	981a      	ldr	r0, [sp, #104]	; 0x68
 810db72:	f88d b039 	strb.w	fp, [sp, #57]	; 0x39
 810db76:	4403      	add	r3, r0
 810db78:	9807      	ldr	r0, [sp, #28]
 810db7a:	f88d b03a 	strb.w	fp, [sp, #58]	; 0x3a
 810db7e:	bf4c      	ite	mi
 810db80:	9a0b      	ldrmi	r2, [sp, #44]	; 0x2c
 810db82:	9a05      	ldrpl	r2, [sp, #20]
 810db84:	b148      	cbz	r0, 810db9a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xf8>
 810db86:	4298      	cmp	r0, r3
 810db88:	9808      	ldr	r0, [sp, #32]
 810db8a:	bf2c      	ite	cs
 810db8c:	f04f 0c00 	movcs.w	ip, #0
 810db90:	f04f 0c01 	movcc.w	ip, #1
 810db94:	4584      	cmp	ip, r0
 810db96:	f000 80ae 	beq.w	810dcf6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x254>
 810db9a:	0789      	lsls	r1, r1, #30
 810db9c:	d407      	bmi.n	810dbae <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x10c>
 810db9e:	f118 0f02 	cmn.w	r8, #2
 810dba2:	d102      	bne.n	810dbaa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x108>
 810dba4:	07bf      	lsls	r7, r7, #30
 810dba6:	f000 80a8 	beq.w	810dcfa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x258>
 810dbaa:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 810dbae:	68a8      	ldr	r0, [r5, #8]
 810dbb0:	ad0d      	add	r5, sp, #52	; 0x34
 810dbb2:	6801      	ldr	r1, [r0, #0]
 810dbb4:	9503      	str	r5, [sp, #12]
 810dbb6:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 810dbb8:	9502      	str	r5, [sp, #8]
 810dbba:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 810dbbc:	e9cd 3500 	strd	r3, r5, [sp]
 810dbc0:	9b06      	ldr	r3, [sp, #24]
 810dbc2:	69cd      	ldr	r5, [r1, #28]
 810dbc4:	4641      	mov	r1, r8
 810dbc6:	47a8      	blx	r5
 810dbc8:	7963      	ldrb	r3, [r4, #5]
 810dbca:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 810dbce:	f89d 503a 	ldrb.w	r5, [sp, #58]	; 0x3a
 810dbd2:	990d      	ldr	r1, [sp, #52]	; 0x34
 810dbd4:	4313      	orrs	r3, r2
 810dbd6:	2d06      	cmp	r5, #6
 810dbd8:	7163      	strb	r3, [r4, #5]
 810dbda:	d001      	beq.n	810dbe0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13e>
 810dbdc:	2d02      	cmp	r5, #2
 810dbde:	d106      	bne.n	810dbee <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x14c>
 810dbe0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 810dbe4:	6021      	str	r1, [r4, #0]
 810dbe6:	7123      	strb	r3, [r4, #4]
 810dbe8:	71a5      	strb	r5, [r4, #6]
 810dbea:	4682      	mov	sl, r0
 810dbec:	e06c      	b.n	810dcc8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x226>
 810dbee:	6822      	ldr	r2, [r4, #0]
 810dbf0:	b996      	cbnz	r6, 810dc18 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x176>
 810dbf2:	b99a      	cbnz	r2, 810dc1c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x17a>
 810dbf4:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 810dbf8:	6021      	str	r1, [r4, #0]
 810dbfa:	7122      	strb	r2, [r4, #4]
 810dbfc:	b121      	cbz	r1, 810dc08 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
 810dbfe:	b11b      	cbz	r3, 810dc08 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
 810dc00:	f8d9 3008 	ldr.w	r3, [r9, #8]
 810dc04:	07dd      	lsls	r5, r3, #31
 810dc06:	d5f0      	bpl.n	810dbea <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x148>
 810dc08:	7963      	ldrb	r3, [r4, #5]
 810dc0a:	2b04      	cmp	r3, #4
 810dc0c:	d0ed      	beq.n	810dbea <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x148>
 810dc0e:	9b04      	ldr	r3, [sp, #16]
 810dc10:	3b01      	subs	r3, #1
 810dc12:	9304      	str	r3, [sp, #16]
 810dc14:	4606      	mov	r6, r0
 810dc16:	e795      	b.n	810db44 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xa2>
 810dc18:	2a00      	cmp	r2, #0
 810dc1a:	d037      	beq.n	810dc8c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ea>
 810dc1c:	4291      	cmp	r1, r2
 810dc1e:	d106      	bne.n	810dc2e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x18c>
 810dc20:	7923      	ldrb	r3, [r4, #4]
 810dc22:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 810dc26:	4313      	orrs	r3, r2
 810dc28:	7123      	strb	r3, [r4, #4]
 810dc2a:	4630      	mov	r0, r6
 810dc2c:	e7ec      	b.n	810dc08 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
 810dc2e:	b909      	cbnz	r1, 810dc34 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x192>
 810dc30:	2800      	cmp	r0, #0
 810dc32:	d0fa      	beq.n	810dc2a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x188>
 810dc34:	2b03      	cmp	r3, #3
 810dc36:	79a7      	ldrb	r7, [r4, #6]
 810dc38:	d904      	bls.n	810dc44 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1a2>
 810dc3a:	07d8      	lsls	r0, r3, #31
 810dc3c:	d529      	bpl.n	810dc92 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f0>
 810dc3e:	68a3      	ldr	r3, [r4, #8]
 810dc40:	0799      	lsls	r1, r3, #30
 810dc42:	d526      	bpl.n	810dc92 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f0>
 810dc44:	b97f      	cbnz	r7, 810dc66 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1c4>
 810dc46:	2d03      	cmp	r5, #3
 810dc48:	d905      	bls.n	810dc56 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b4>
 810dc4a:	07eb      	lsls	r3, r5, #31
 810dc4c:	d541      	bpl.n	810dcd2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x230>
 810dc4e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 810dc52:	079f      	lsls	r7, r3, #30
 810dc54:	d53d      	bpl.n	810dcd2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x230>
 810dc56:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 810dc58:	9300      	str	r3, [sp, #0]
 810dc5a:	4641      	mov	r1, r8
 810dc5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 810dc5e:	9806      	ldr	r0, [sp, #24]
 810dc60:	f7ff ff0b 	bl	810da7a <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 810dc64:	4607      	mov	r7, r0
 810dc66:	b9d5      	cbnz	r5, 810dc9e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 810dc68:	2f03      	cmp	r7, #3
 810dc6a:	d905      	bls.n	810dc78 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1d6>
 810dc6c:	07f8      	lsls	r0, r7, #31
 810dc6e:	d532      	bpl.n	810dcd6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x234>
 810dc70:	f8d9 3008 	ldr.w	r3, [r9, #8]
 810dc74:	0799      	lsls	r1, r3, #30
 810dc76:	d52e      	bpl.n	810dcd6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x234>
 810dc78:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 810dc7a:	9300      	str	r3, [sp, #0]
 810dc7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810dc7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 810dc80:	9806      	ldr	r0, [sp, #24]
 810dc82:	4641      	mov	r1, r8
 810dc84:	f7ff fef9 	bl	810da7a <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 810dc88:	4605      	mov	r5, r0
 810dc8a:	e008      	b.n	810dc9e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 810dc8c:	2900      	cmp	r1, #0
 810dc8e:	d1d1      	bne.n	810dc34 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x192>
 810dc90:	e7cb      	b.n	810dc2a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x188>
 810dc92:	2f00      	cmp	r7, #0
 810dc94:	bf08      	it	eq
 810dc96:	2701      	moveq	r7, #1
 810dc98:	2d00      	cmp	r5, #0
 810dc9a:	bf08      	it	eq
 810dc9c:	2501      	moveq	r5, #1
 810dc9e:	ea85 0307 	eor.w	r3, r5, r7
 810dca2:	b2db      	uxtb	r3, r3
 810dca4:	2b03      	cmp	r3, #3
 810dca6:	d918      	bls.n	810dcda <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x238>
 810dca8:	2d03      	cmp	r5, #3
 810dcaa:	bf81      	itttt	hi
 810dcac:	9b0d      	ldrhi	r3, [sp, #52]	; 0x34
 810dcae:	6023      	strhi	r3, [r4, #0]
 810dcb0:	462f      	movhi	r7, r5
 810dcb2:	f89d 3038 	ldrbhi.w	r3, [sp, #56]	; 0x38
 810dcb6:	bf86      	itte	hi
 810dcb8:	7123      	strbhi	r3, [r4, #4]
 810dcba:	2000      	movhi	r0, #0
 810dcbc:	4630      	movls	r0, r6
 810dcbe:	07ba      	lsls	r2, r7, #30
 810dcc0:	71a7      	strb	r7, [r4, #6]
 810dcc2:	d401      	bmi.n	810dcc8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x226>
 810dcc4:	07fb      	lsls	r3, r7, #31
 810dcc6:	d49f      	bmi.n	810dc08 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
 810dcc8:	4656      	mov	r6, sl
 810dcca:	4630      	mov	r0, r6
 810dccc:	b011      	add	sp, #68	; 0x44
 810dcce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810dcd2:	2701      	movs	r7, #1
 810dcd4:	e7e3      	b.n	810dc9e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 810dcd6:	2501      	movs	r5, #1
 810dcd8:	e7e1      	b.n	810dc9e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 810dcda:	403d      	ands	r5, r7
 810dcdc:	b2ed      	uxtb	r5, r5
 810dcde:	2d03      	cmp	r5, #3
 810dce0:	f8c4 b000 	str.w	fp, [r4]
 810dce4:	d904      	bls.n	810dcf0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x24e>
 810dce6:	2302      	movs	r3, #2
 810dce8:	71a3      	strb	r3, [r4, #6]
 810dcea:	f04f 0a01 	mov.w	sl, #1
 810dcee:	e7eb      	b.n	810dcc8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x226>
 810dcf0:	2001      	movs	r0, #1
 810dcf2:	71a0      	strb	r0, [r4, #6]
 810dcf4:	e788      	b.n	810dc08 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
 810dcf6:	2301      	movs	r3, #1
 810dcf8:	9309      	str	r3, [sp, #36]	; 0x24
 810dcfa:	4630      	mov	r0, r6
 810dcfc:	e787      	b.n	810dc0e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x16c>
 810dcfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810dd00:	2b00      	cmp	r3, #0
 810dd02:	d0e2      	beq.n	810dcca <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x228>
 810dd04:	9b04      	ldr	r3, [sp, #16]
 810dd06:	9308      	str	r3, [sp, #32]
 810dd08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810dd0a:	2b01      	cmp	r3, #1
 810dd0c:	d0dd      	beq.n	810dcca <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x228>
 810dd0e:	2301      	movs	r3, #1
 810dd10:	930a      	str	r3, [sp, #40]	; 0x28
 810dd12:	e714      	b.n	810db3e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x9c>

0810dd14 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 810dd14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810dd18:	b089      	sub	sp, #36	; 0x24
 810dd1a:	4607      	mov	r7, r0
 810dd1c:	9102      	str	r1, [sp, #8]
 810dd1e:	4692      	mov	sl, r2
 810dd20:	461c      	mov	r4, r3
 810dd22:	f000 f93c 	bl	810df9e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 810dd26:	4605      	mov	r5, r0
 810dd28:	2800      	cmp	r0, #0
 810dd2a:	d159      	bne.n	810dde0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
 810dd2c:	f8d4 8008 	ldr.w	r8, [r4, #8]
 810dd30:	f8d7 900c 	ldr.w	r9, [r7, #12]
 810dd34:	f018 0f10 	tst.w	r8, #16
 810dd38:	bf18      	it	ne
 810dd3a:	f8d7 8008 	ldrne.w	r8, [r7, #8]
 810dd3e:	f008 0301 	and.w	r3, r8, #1
 810dd42:	eb07 06c9 	add.w	r6, r7, r9, lsl #3
 810dd46:	f04f 0b00 	mov.w	fp, #0
 810dd4a:	9303      	str	r3, [sp, #12]
 810dd4c:	f1b9 0f00 	cmp.w	r9, #0
 810dd50:	d06c      	beq.n	810de2c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x118>
 810dd52:	68f2      	ldr	r2, [r6, #12]
 810dd54:	f8cd b010 	str.w	fp, [sp, #16]
 810dd58:	f002 0301 	and.w	r3, r2, #1
 810dd5c:	9300      	str	r3, [sp, #0]
 810dd5e:	f012 0302 	ands.w	r3, r2, #2
 810dd62:	f88d b014 	strb.w	fp, [sp, #20]
 810dd66:	e9cd 8b06 	strd	r8, fp, [sp, #24]
 810dd6a:	9301      	str	r3, [sp, #4]
 810dd6c:	d105      	bne.n	810dd7a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x66>
 810dd6e:	9b03      	ldr	r3, [sp, #12]
 810dd70:	b91b      	cbnz	r3, 810dd7a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x66>
 810dd72:	f109 39ff 	add.w	r9, r9, #4294967295
 810dd76:	3e08      	subs	r6, #8
 810dd78:	e7e8      	b.n	810dd4c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x38>
 810dd7a:	f1ba 0f00 	cmp.w	sl, #0
 810dd7e:	d033      	beq.n	810dde8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd4>
 810dd80:	9b00      	ldr	r3, [sp, #0]
 810dd82:	1212      	asrs	r2, r2, #8
 810dd84:	b113      	cbz	r3, 810dd8c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x78>
 810dd86:	f8da 3000 	ldr.w	r3, [sl]
 810dd8a:	589a      	ldr	r2, [r3, r2]
 810dd8c:	4452      	add	r2, sl
 810dd8e:	68b0      	ldr	r0, [r6, #8]
 810dd90:	9902      	ldr	r1, [sp, #8]
 810dd92:	6803      	ldr	r3, [r0, #0]
 810dd94:	699d      	ldr	r5, [r3, #24]
 810dd96:	ab04      	add	r3, sp, #16
 810dd98:	47a8      	blx	r5
 810dd9a:	4605      	mov	r5, r0
 810dd9c:	2800      	cmp	r0, #0
 810dd9e:	d0e8      	beq.n	810dd72 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x5e>
 810dda0:	9b07      	ldr	r3, [sp, #28]
 810dda2:	2b08      	cmp	r3, #8
 810dda4:	d103      	bne.n	810ddae <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x9a>
 810dda6:	9b00      	ldr	r3, [sp, #0]
 810dda8:	b10b      	cbz	r3, 810ddae <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x9a>
 810ddaa:	68b3      	ldr	r3, [r6, #8]
 810ddac:	9307      	str	r3, [sp, #28]
 810ddae:	f89d 3014 	ldrb.w	r3, [sp, #20]
 810ddb2:	2b03      	cmp	r3, #3
 810ddb4:	d905      	bls.n	810ddc2 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xae>
 810ddb6:	9a01      	ldr	r2, [sp, #4]
 810ddb8:	b91a      	cbnz	r2, 810ddc2 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xae>
 810ddba:	f023 0302 	bic.w	r3, r3, #2
 810ddbe:	f88d 3014 	strb.w	r3, [sp, #20]
 810ddc2:	68e1      	ldr	r1, [r4, #12]
 810ddc4:	b9c1      	cbnz	r1, 810ddf8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xe4>
 810ddc6:	ab04      	add	r3, sp, #16
 810ddc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810ddca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 810ddce:	7923      	ldrb	r3, [r4, #4]
 810ddd0:	2b03      	cmp	r3, #3
 810ddd2:	d905      	bls.n	810dde0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
 810ddd4:	079a      	lsls	r2, r3, #30
 810ddd6:	d509      	bpl.n	810ddec <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd8>
 810ddd8:	68bb      	ldr	r3, [r7, #8]
 810ddda:	f013 0f01 	tst.w	r3, #1
 810ddde:	d1c8      	bne.n	810dd72 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x5e>
 810dde0:	4628      	mov	r0, r5
 810dde2:	b009      	add	sp, #36	; 0x24
 810dde4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810dde8:	4652      	mov	r2, sl
 810ddea:	e7d0      	b.n	810dd8e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x7a>
 810ddec:	07db      	lsls	r3, r3, #31
 810ddee:	d5f7      	bpl.n	810dde0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
 810ddf0:	68bb      	ldr	r3, [r7, #8]
 810ddf2:	f013 0f02 	tst.w	r3, #2
 810ddf6:	e7f2      	b.n	810ddde <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xca>
 810ddf8:	6823      	ldr	r3, [r4, #0]
 810ddfa:	9a04      	ldr	r2, [sp, #16]
 810ddfc:	4293      	cmp	r3, r2
 810ddfe:	d004      	beq.n	810de0a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf6>
 810de00:	2300      	movs	r3, #0
 810de02:	6023      	str	r3, [r4, #0]
 810de04:	2302      	movs	r3, #2
 810de06:	7123      	strb	r3, [r4, #4]
 810de08:	e7ea      	b.n	810dde0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
 810de0a:	b12b      	cbz	r3, 810de18 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x104>
 810de0c:	7923      	ldrb	r3, [r4, #4]
 810de0e:	f89d 2014 	ldrb.w	r2, [sp, #20]
 810de12:	4313      	orrs	r3, r2
 810de14:	7123      	strb	r3, [r4, #4]
 810de16:	e7ac      	b.n	810dd72 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x5e>
 810de18:	9807      	ldr	r0, [sp, #28]
 810de1a:	2808      	cmp	r0, #8
 810de1c:	d0f2      	beq.n	810de04 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf0>
 810de1e:	2908      	cmp	r1, #8
 810de20:	d0f0      	beq.n	810de04 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf0>
 810de22:	f000 f80b 	bl	810de3c <_ZNKSt9type_infoeqERKS_>
 810de26:	2800      	cmp	r0, #0
 810de28:	d1f0      	bne.n	810de0c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf8>
 810de2a:	e7eb      	b.n	810de04 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf0>
 810de2c:	7925      	ldrb	r5, [r4, #4]
 810de2e:	3500      	adds	r5, #0
 810de30:	bf18      	it	ne
 810de32:	2501      	movne	r5, #1
 810de34:	e7d4      	b.n	810dde0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>

0810de36 <_ZNSt9type_infoD1Ev>:
 810de36:	4770      	bx	lr

0810de38 <_ZNKSt9type_info14__is_pointer_pEv>:
 810de38:	2000      	movs	r0, #0
 810de3a:	4770      	bx	lr

0810de3c <_ZNKSt9type_infoeqERKS_>:
 810de3c:	4281      	cmp	r1, r0
 810de3e:	b508      	push	{r3, lr}
 810de40:	d00e      	beq.n	810de60 <_ZNKSt9type_infoeqERKS_+0x24>
 810de42:	6840      	ldr	r0, [r0, #4]
 810de44:	7803      	ldrb	r3, [r0, #0]
 810de46:	2b2a      	cmp	r3, #42	; 0x2a
 810de48:	d00c      	beq.n	810de64 <_ZNKSt9type_infoeqERKS_+0x28>
 810de4a:	6849      	ldr	r1, [r1, #4]
 810de4c:	780b      	ldrb	r3, [r1, #0]
 810de4e:	2b2a      	cmp	r3, #42	; 0x2a
 810de50:	bf08      	it	eq
 810de52:	3101      	addeq	r1, #1
 810de54:	f7f2 fa44 	bl	81002e0 <strcmp>
 810de58:	fab0 f080 	clz	r0, r0
 810de5c:	0940      	lsrs	r0, r0, #5
 810de5e:	bd08      	pop	{r3, pc}
 810de60:	2001      	movs	r0, #1
 810de62:	e7fc      	b.n	810de5e <_ZNKSt9type_infoeqERKS_+0x22>
 810de64:	2000      	movs	r0, #0
 810de66:	e7fa      	b.n	810de5e <_ZNKSt9type_infoeqERKS_+0x22>

0810de68 <__cxa_pure_virtual>:
 810de68:	b508      	push	{r3, lr}
 810de6a:	f000 f945 	bl	810e0f8 <_ZSt9terminatev>

0810de6e <_ZdlPvj>:
 810de6e:	f7fc bf1b 	b.w	810aca8 <_ZdlPv>
	...

0810de74 <_ZSt11_Hash_bytesPKvjj>:
 810de74:	4b18      	ldr	r3, [pc, #96]	; (810ded8 <_ZSt11_Hash_bytesPKvjj+0x64>)
 810de76:	b570      	push	{r4, r5, r6, lr}
 810de78:	404a      	eors	r2, r1
 810de7a:	460d      	mov	r5, r1
 810de7c:	1846      	adds	r6, r0, r1
 810de7e:	2d03      	cmp	r5, #3
 810de80:	eba6 0405 	sub.w	r4, r6, r5
 810de84:	d908      	bls.n	810de98 <_ZSt11_Hash_bytesPKvjj+0x24>
 810de86:	6824      	ldr	r4, [r4, #0]
 810de88:	435c      	muls	r4, r3
 810de8a:	ea84 6414 	eor.w	r4, r4, r4, lsr #24
 810de8e:	435a      	muls	r2, r3
 810de90:	435c      	muls	r4, r3
 810de92:	4062      	eors	r2, r4
 810de94:	3d04      	subs	r5, #4
 810de96:	e7f2      	b.n	810de7e <_ZSt11_Hash_bytesPKvjj+0xa>
 810de98:	088d      	lsrs	r5, r1, #2
 810de9a:	f06f 0403 	mvn.w	r4, #3
 810de9e:	fb04 1105 	mla	r1, r4, r5, r1
 810dea2:	2902      	cmp	r1, #2
 810dea4:	eb00 0685 	add.w	r6, r0, r5, lsl #2
 810dea8:	d011      	beq.n	810dece <_ZSt11_Hash_bytesPKvjj+0x5a>
 810deaa:	2903      	cmp	r1, #3
 810deac:	d00c      	beq.n	810dec8 <_ZSt11_Hash_bytesPKvjj+0x54>
 810deae:	2901      	cmp	r1, #1
 810deb0:	d103      	bne.n	810deba <_ZSt11_Hash_bytesPKvjj+0x46>
 810deb2:	f810 0025 	ldrb.w	r0, [r0, r5, lsl #2]
 810deb6:	4042      	eors	r2, r0
 810deb8:	435a      	muls	r2, r3
 810deba:	ea82 3252 	eor.w	r2, r2, r2, lsr #13
 810debe:	fb03 f002 	mul.w	r0, r3, r2
 810dec2:	ea80 30d0 	eor.w	r0, r0, r0, lsr #15
 810dec6:	bd70      	pop	{r4, r5, r6, pc}
 810dec8:	78b1      	ldrb	r1, [r6, #2]
 810deca:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
 810dece:	7871      	ldrb	r1, [r6, #1]
 810ded0:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
 810ded4:	e7ed      	b.n	810deb2 <_ZSt11_Hash_bytesPKvjj+0x3e>
 810ded6:	bf00      	nop
 810ded8:	5bd1e995 	.word	0x5bd1e995

0810dedc <__cxa_guard_acquire>:
 810dedc:	6803      	ldr	r3, [r0, #0]
 810dede:	07db      	lsls	r3, r3, #31
 810dee0:	d406      	bmi.n	810def0 <__cxa_guard_acquire+0x14>
 810dee2:	7843      	ldrb	r3, [r0, #1]
 810dee4:	b103      	cbz	r3, 810dee8 <__cxa_guard_acquire+0xc>
 810dee6:	deff      	udf	#255	; 0xff
 810dee8:	2301      	movs	r3, #1
 810deea:	7043      	strb	r3, [r0, #1]
 810deec:	4618      	mov	r0, r3
 810deee:	4770      	bx	lr
 810def0:	2000      	movs	r0, #0
 810def2:	4770      	bx	lr

0810def4 <__cxa_guard_release>:
 810def4:	2301      	movs	r3, #1
 810def6:	6003      	str	r3, [r0, #0]
 810def8:	4770      	bx	lr

0810defa <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 810defa:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 810defc:	2400      	movs	r4, #0
 810defe:	2310      	movs	r3, #16
 810df00:	e9cd 3402 	strd	r3, r4, [sp, #8]
 810df04:	6803      	ldr	r3, [r0, #0]
 810df06:	9400      	str	r4, [sp, #0]
 810df08:	4615      	mov	r5, r2
 810df0a:	699e      	ldr	r6, [r3, #24]
 810df0c:	f88d 4004 	strb.w	r4, [sp, #4]
 810df10:	466b      	mov	r3, sp
 810df12:	6812      	ldr	r2, [r2, #0]
 810df14:	47b0      	blx	r6
 810df16:	f89d 3004 	ldrb.w	r3, [sp, #4]
 810df1a:	f003 0306 	and.w	r3, r3, #6
 810df1e:	2b06      	cmp	r3, #6
 810df20:	bf03      	ittte	eq
 810df22:	9b00      	ldreq	r3, [sp, #0]
 810df24:	602b      	streq	r3, [r5, #0]
 810df26:	2001      	moveq	r0, #1
 810df28:	4620      	movne	r0, r4
 810df2a:	b004      	add	sp, #16
 810df2c:	bd70      	pop	{r4, r5, r6, pc}

0810df2e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 810df2e:	9800      	ldr	r0, [sp, #0]
 810df30:	4290      	cmp	r0, r2
 810df32:	bf0c      	ite	eq
 810df34:	2006      	moveq	r0, #6
 810df36:	2001      	movne	r0, #1
 810df38:	4770      	bx	lr
	...

0810df3c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 810df3c:	b510      	push	{r4, lr}
 810df3e:	4b03      	ldr	r3, [pc, #12]	; (810df4c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 810df40:	6003      	str	r3, [r0, #0]
 810df42:	4604      	mov	r4, r0
 810df44:	f7ff ff77 	bl	810de36 <_ZNSt9type_infoD1Ev>
 810df48:	4620      	mov	r0, r4
 810df4a:	bd10      	pop	{r4, pc}
 810df4c:	08110e6c 	.word	0x08110e6c

0810df50 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 810df50:	b510      	push	{r4, lr}
 810df52:	4604      	mov	r4, r0
 810df54:	f7ff fff2 	bl	810df3c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 810df58:	4620      	mov	r0, r4
 810df5a:	2108      	movs	r1, #8
 810df5c:	f7ff ff87 	bl	810de6e <_ZdlPvj>
 810df60:	4620      	mov	r0, r4
 810df62:	bd10      	pop	{r4, pc}

0810df64 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 810df64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810df68:	4698      	mov	r8, r3
 810df6a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 810df6e:	9e06      	ldr	r6, [sp, #24]
 810df70:	429e      	cmp	r6, r3
 810df72:	4607      	mov	r7, r0
 810df74:	4615      	mov	r5, r2
 810df76:	d107      	bne.n	810df88 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 810df78:	9907      	ldr	r1, [sp, #28]
 810df7a:	f7ff ff5f 	bl	810de3c <_ZNKSt9type_infoeqERKS_>
 810df7e:	b118      	cbz	r0, 810df88 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 810df80:	7165      	strb	r5, [r4, #5]
 810df82:	2000      	movs	r0, #0
 810df84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810df88:	4641      	mov	r1, r8
 810df8a:	4638      	mov	r0, r7
 810df8c:	f7ff ff56 	bl	810de3c <_ZNKSt9type_infoeqERKS_>
 810df90:	2800      	cmp	r0, #0
 810df92:	d0f6      	beq.n	810df82 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1e>
 810df94:	2301      	movs	r3, #1
 810df96:	6026      	str	r6, [r4, #0]
 810df98:	7125      	strb	r5, [r4, #4]
 810df9a:	71a3      	strb	r3, [r4, #6]
 810df9c:	e7f1      	b.n	810df82 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1e>

0810df9e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 810df9e:	b538      	push	{r3, r4, r5, lr}
 810dfa0:	4615      	mov	r5, r2
 810dfa2:	461c      	mov	r4, r3
 810dfa4:	f7ff ff4a 	bl	810de3c <_ZNKSt9type_infoeqERKS_>
 810dfa8:	b120      	cbz	r0, 810dfb4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 810dfaa:	2308      	movs	r3, #8
 810dfac:	60e3      	str	r3, [r4, #12]
 810dfae:	2306      	movs	r3, #6
 810dfb0:	6025      	str	r5, [r4, #0]
 810dfb2:	7123      	strb	r3, [r4, #4]
 810dfb4:	bd38      	pop	{r3, r4, r5, pc}

0810dfb6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 810dfb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810dfba:	4605      	mov	r5, r0
 810dfbc:	460c      	mov	r4, r1
 810dfbe:	4616      	mov	r6, r2
 810dfc0:	461f      	mov	r7, r3
 810dfc2:	f7ff ff3b 	bl	810de3c <_ZNKSt9type_infoeqERKS_>
 810dfc6:	b948      	cbnz	r0, 810dfdc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 810dfc8:	2f03      	cmp	r7, #3
 810dfca:	d807      	bhi.n	810dfdc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 810dfcc:	6823      	ldr	r3, [r4, #0]
 810dfce:	4632      	mov	r2, r6
 810dfd0:	4629      	mov	r1, r5
 810dfd2:	4620      	mov	r0, r4
 810dfd4:	695b      	ldr	r3, [r3, #20]
 810dfd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810dfda:	4718      	bx	r3
 810dfdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810dfe0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 810dfe0:	b510      	push	{r4, lr}
 810dfe2:	4b03      	ldr	r3, [pc, #12]	; (810dff0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 810dfe4:	6003      	str	r3, [r0, #0]
 810dfe6:	4604      	mov	r4, r0
 810dfe8:	f7ff ffa8 	bl	810df3c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 810dfec:	4620      	mov	r0, r4
 810dfee:	bd10      	pop	{r4, pc}
 810dff0:	08110ecc 	.word	0x08110ecc

0810dff4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 810dff4:	b510      	push	{r4, lr}
 810dff6:	4604      	mov	r4, r0
 810dff8:	f7ff fff2 	bl	810dfe0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 810dffc:	4620      	mov	r0, r4
 810dffe:	210c      	movs	r1, #12
 810e000:	f7ff ff35 	bl	810de6e <_ZdlPvj>
 810e004:	4620      	mov	r0, r4
 810e006:	bd10      	pop	{r4, pc}

0810e008 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 810e008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810e00c:	9e06      	ldr	r6, [sp, #24]
 810e00e:	4296      	cmp	r6, r2
 810e010:	4607      	mov	r7, r0
 810e012:	4688      	mov	r8, r1
 810e014:	4615      	mov	r5, r2
 810e016:	461c      	mov	r4, r3
 810e018:	d00a      	beq.n	810e030 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x28>
 810e01a:	68b8      	ldr	r0, [r7, #8]
 810e01c:	6803      	ldr	r3, [r0, #0]
 810e01e:	9606      	str	r6, [sp, #24]
 810e020:	6a1e      	ldr	r6, [r3, #32]
 810e022:	462a      	mov	r2, r5
 810e024:	4623      	mov	r3, r4
 810e026:	4641      	mov	r1, r8
 810e028:	46b4      	mov	ip, r6
 810e02a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810e02e:	4760      	bx	ip
 810e030:	4619      	mov	r1, r3
 810e032:	f7ff ff03 	bl	810de3c <_ZNKSt9type_infoeqERKS_>
 810e036:	2800      	cmp	r0, #0
 810e038:	d0ef      	beq.n	810e01a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x12>
 810e03a:	2006      	movs	r0, #6
 810e03c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810e040 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 810e040:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e044:	460e      	mov	r6, r1
 810e046:	4619      	mov	r1, r3
 810e048:	4683      	mov	fp, r0
 810e04a:	4617      	mov	r7, r2
 810e04c:	4699      	mov	r9, r3
 810e04e:	e9dd 4a0a 	ldrd	r4, sl, [sp, #40]	; 0x28
 810e052:	e9dd 850c 	ldrd	r8, r5, [sp, #48]	; 0x30
 810e056:	f7ff fef1 	bl	810de3c <_ZNKSt9type_infoeqERKS_>
 810e05a:	b190      	cbz	r0, 810e082 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 810e05c:	2e00      	cmp	r6, #0
 810e05e:	602c      	str	r4, [r5, #0]
 810e060:	712f      	strb	r7, [r5, #4]
 810e062:	db09      	blt.n	810e078 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 810e064:	4434      	add	r4, r6
 810e066:	45a0      	cmp	r8, r4
 810e068:	bf0c      	ite	eq
 810e06a:	2406      	moveq	r4, #6
 810e06c:	2401      	movne	r4, #1
 810e06e:	71ac      	strb	r4, [r5, #6]
 810e070:	2000      	movs	r0, #0
 810e072:	b001      	add	sp, #4
 810e074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e078:	3602      	adds	r6, #2
 810e07a:	d1f9      	bne.n	810e070 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 810e07c:	2301      	movs	r3, #1
 810e07e:	71ab      	strb	r3, [r5, #6]
 810e080:	e7f6      	b.n	810e070 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 810e082:	4544      	cmp	r4, r8
 810e084:	d106      	bne.n	810e094 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 810e086:	4651      	mov	r1, sl
 810e088:	4658      	mov	r0, fp
 810e08a:	f7ff fed7 	bl	810de3c <_ZNKSt9type_infoeqERKS_>
 810e08e:	b108      	cbz	r0, 810e094 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 810e090:	716f      	strb	r7, [r5, #5]
 810e092:	e7ed      	b.n	810e070 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 810e094:	f8db 0008 	ldr.w	r0, [fp, #8]
 810e098:	6803      	ldr	r3, [r0, #0]
 810e09a:	e9cd 850c 	strd	r8, r5, [sp, #48]	; 0x30
 810e09e:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	; 0x28
 810e0a2:	69dc      	ldr	r4, [r3, #28]
 810e0a4:	463a      	mov	r2, r7
 810e0a6:	464b      	mov	r3, r9
 810e0a8:	4631      	mov	r1, r6
 810e0aa:	46a4      	mov	ip, r4
 810e0ac:	b001      	add	sp, #4
 810e0ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e0b2:	4760      	bx	ip

0810e0b4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 810e0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810e0b8:	4604      	mov	r4, r0
 810e0ba:	460d      	mov	r5, r1
 810e0bc:	4616      	mov	r6, r2
 810e0be:	461f      	mov	r7, r3
 810e0c0:	f7ff ff6d 	bl	810df9e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 810e0c4:	b948      	cbnz	r0, 810e0da <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 810e0c6:	68a0      	ldr	r0, [r4, #8]
 810e0c8:	6803      	ldr	r3, [r0, #0]
 810e0ca:	699c      	ldr	r4, [r3, #24]
 810e0cc:	4632      	mov	r2, r6
 810e0ce:	463b      	mov	r3, r7
 810e0d0:	4629      	mov	r1, r5
 810e0d2:	46a4      	mov	ip, r4
 810e0d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810e0d8:	4760      	bx	ip
 810e0da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810e0de <_ZN10__cxxabiv111__terminateEPFvvE>:
 810e0de:	b508      	push	{r3, lr}
 810e0e0:	4780      	blx	r0
 810e0e2:	f000 f80e 	bl	810e102 <abort>
	...

0810e0e8 <_ZSt13get_terminatev>:
 810e0e8:	4b02      	ldr	r3, [pc, #8]	; (810e0f4 <_ZSt13get_terminatev+0xc>)
 810e0ea:	6818      	ldr	r0, [r3, #0]
 810e0ec:	f3bf 8f5b 	dmb	ish
 810e0f0:	4770      	bx	lr
 810e0f2:	bf00      	nop
 810e0f4:	10000030 	.word	0x10000030

0810e0f8 <_ZSt9terminatev>:
 810e0f8:	b508      	push	{r3, lr}
 810e0fa:	f7ff fff5 	bl	810e0e8 <_ZSt13get_terminatev>
 810e0fe:	f7ff ffee 	bl	810e0de <_ZN10__cxxabiv111__terminateEPFvvE>

0810e102 <abort>:
 810e102:	b508      	push	{r3, lr}
 810e104:	2006      	movs	r0, #6
 810e106:	f000 fccf 	bl	810eaa8 <raise>
 810e10a:	2001      	movs	r0, #1
 810e10c:	f7f3 fe7e 	bl	8101e0c <_exit>

0810e110 <atexit>:
 810e110:	2300      	movs	r3, #0
 810e112:	4601      	mov	r1, r0
 810e114:	461a      	mov	r2, r3
 810e116:	4618      	mov	r0, r3
 810e118:	f000 bdb4 	b.w	810ec84 <__register_exitproc>

0810e11c <atoi>:
 810e11c:	220a      	movs	r2, #10
 810e11e:	2100      	movs	r1, #0
 810e120:	f000 bd7a 	b.w	810ec18 <strtol>

0810e124 <__errno>:
 810e124:	4b01      	ldr	r3, [pc, #4]	; (810e12c <__errno+0x8>)
 810e126:	6818      	ldr	r0, [r3, #0]
 810e128:	4770      	bx	lr
 810e12a:	bf00      	nop
 810e12c:	10000034 	.word	0x10000034

0810e130 <__libc_init_array>:
 810e130:	b570      	push	{r4, r5, r6, lr}
 810e132:	4e0d      	ldr	r6, [pc, #52]	; (810e168 <__libc_init_array+0x38>)
 810e134:	4c0d      	ldr	r4, [pc, #52]	; (810e16c <__libc_init_array+0x3c>)
 810e136:	1ba4      	subs	r4, r4, r6
 810e138:	10a4      	asrs	r4, r4, #2
 810e13a:	2500      	movs	r5, #0
 810e13c:	42a5      	cmp	r5, r4
 810e13e:	d109      	bne.n	810e154 <__libc_init_array+0x24>
 810e140:	4e0b      	ldr	r6, [pc, #44]	; (810e170 <__libc_init_array+0x40>)
 810e142:	4c0c      	ldr	r4, [pc, #48]	; (810e174 <__libc_init_array+0x44>)
 810e144:	f002 f9be 	bl	81104c4 <_init>
 810e148:	1ba4      	subs	r4, r4, r6
 810e14a:	10a4      	asrs	r4, r4, #2
 810e14c:	2500      	movs	r5, #0
 810e14e:	42a5      	cmp	r5, r4
 810e150:	d105      	bne.n	810e15e <__libc_init_array+0x2e>
 810e152:	bd70      	pop	{r4, r5, r6, pc}
 810e154:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 810e158:	4798      	blx	r3
 810e15a:	3501      	adds	r5, #1
 810e15c:	e7ee      	b.n	810e13c <__libc_init_array+0xc>
 810e15e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 810e162:	4798      	blx	r3
 810e164:	3501      	adds	r5, #1
 810e166:	e7f2      	b.n	810e14e <__libc_init_array+0x1e>
 810e168:	081111b8 	.word	0x081111b8
 810e16c:	081111b8 	.word	0x081111b8
 810e170:	081111b8 	.word	0x081111b8
 810e174:	081111c4 	.word	0x081111c4

0810e178 <memcpy>:
 810e178:	b510      	push	{r4, lr}
 810e17a:	1e43      	subs	r3, r0, #1
 810e17c:	440a      	add	r2, r1
 810e17e:	4291      	cmp	r1, r2
 810e180:	d100      	bne.n	810e184 <memcpy+0xc>
 810e182:	bd10      	pop	{r4, pc}
 810e184:	f811 4b01 	ldrb.w	r4, [r1], #1
 810e188:	f803 4f01 	strb.w	r4, [r3, #1]!
 810e18c:	e7f7      	b.n	810e17e <memcpy+0x6>

0810e18e <memset>:
 810e18e:	4402      	add	r2, r0
 810e190:	4603      	mov	r3, r0
 810e192:	4293      	cmp	r3, r2
 810e194:	d100      	bne.n	810e198 <memset+0xa>
 810e196:	4770      	bx	lr
 810e198:	f803 1b01 	strb.w	r1, [r3], #1
 810e19c:	e7f9      	b.n	810e192 <memset+0x4>

0810e19e <__cvt>:
 810e19e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810e1a2:	ec55 4b10 	vmov	r4, r5, d0
 810e1a6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 810e1a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 810e1ac:	2d00      	cmp	r5, #0
 810e1ae:	460e      	mov	r6, r1
 810e1b0:	4691      	mov	r9, r2
 810e1b2:	4619      	mov	r1, r3
 810e1b4:	bfb8      	it	lt
 810e1b6:	4622      	movlt	r2, r4
 810e1b8:	462b      	mov	r3, r5
 810e1ba:	f027 0720 	bic.w	r7, r7, #32
 810e1be:	bfbb      	ittet	lt
 810e1c0:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 810e1c4:	461d      	movlt	r5, r3
 810e1c6:	2300      	movge	r3, #0
 810e1c8:	232d      	movlt	r3, #45	; 0x2d
 810e1ca:	bfb8      	it	lt
 810e1cc:	4614      	movlt	r4, r2
 810e1ce:	2f46      	cmp	r7, #70	; 0x46
 810e1d0:	700b      	strb	r3, [r1, #0]
 810e1d2:	d004      	beq.n	810e1de <__cvt+0x40>
 810e1d4:	2f45      	cmp	r7, #69	; 0x45
 810e1d6:	d100      	bne.n	810e1da <__cvt+0x3c>
 810e1d8:	3601      	adds	r6, #1
 810e1da:	2102      	movs	r1, #2
 810e1dc:	e000      	b.n	810e1e0 <__cvt+0x42>
 810e1de:	2103      	movs	r1, #3
 810e1e0:	ab03      	add	r3, sp, #12
 810e1e2:	9301      	str	r3, [sp, #4]
 810e1e4:	ab02      	add	r3, sp, #8
 810e1e6:	9300      	str	r3, [sp, #0]
 810e1e8:	4632      	mov	r2, r6
 810e1ea:	4653      	mov	r3, sl
 810e1ec:	ec45 4b10 	vmov	d0, r4, r5
 810e1f0:	f000 fe3a 	bl	810ee68 <_dtoa_r>
 810e1f4:	2f47      	cmp	r7, #71	; 0x47
 810e1f6:	4680      	mov	r8, r0
 810e1f8:	d102      	bne.n	810e200 <__cvt+0x62>
 810e1fa:	f019 0f01 	tst.w	r9, #1
 810e1fe:	d026      	beq.n	810e24e <__cvt+0xb0>
 810e200:	2f46      	cmp	r7, #70	; 0x46
 810e202:	eb08 0906 	add.w	r9, r8, r6
 810e206:	d111      	bne.n	810e22c <__cvt+0x8e>
 810e208:	f898 3000 	ldrb.w	r3, [r8]
 810e20c:	2b30      	cmp	r3, #48	; 0x30
 810e20e:	d10a      	bne.n	810e226 <__cvt+0x88>
 810e210:	2200      	movs	r2, #0
 810e212:	2300      	movs	r3, #0
 810e214:	4620      	mov	r0, r4
 810e216:	4629      	mov	r1, r5
 810e218:	f7f2 fcee 	bl	8100bf8 <__aeabi_dcmpeq>
 810e21c:	b918      	cbnz	r0, 810e226 <__cvt+0x88>
 810e21e:	f1c6 0601 	rsb	r6, r6, #1
 810e222:	f8ca 6000 	str.w	r6, [sl]
 810e226:	f8da 3000 	ldr.w	r3, [sl]
 810e22a:	4499      	add	r9, r3
 810e22c:	2200      	movs	r2, #0
 810e22e:	2300      	movs	r3, #0
 810e230:	4620      	mov	r0, r4
 810e232:	4629      	mov	r1, r5
 810e234:	f7f2 fce0 	bl	8100bf8 <__aeabi_dcmpeq>
 810e238:	b938      	cbnz	r0, 810e24a <__cvt+0xac>
 810e23a:	2230      	movs	r2, #48	; 0x30
 810e23c:	9b03      	ldr	r3, [sp, #12]
 810e23e:	454b      	cmp	r3, r9
 810e240:	d205      	bcs.n	810e24e <__cvt+0xb0>
 810e242:	1c59      	adds	r1, r3, #1
 810e244:	9103      	str	r1, [sp, #12]
 810e246:	701a      	strb	r2, [r3, #0]
 810e248:	e7f8      	b.n	810e23c <__cvt+0x9e>
 810e24a:	f8cd 900c 	str.w	r9, [sp, #12]
 810e24e:	9b03      	ldr	r3, [sp, #12]
 810e250:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810e252:	eba3 0308 	sub.w	r3, r3, r8
 810e256:	4640      	mov	r0, r8
 810e258:	6013      	str	r3, [r2, #0]
 810e25a:	b004      	add	sp, #16
 810e25c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0810e260 <__exponent>:
 810e260:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810e262:	2900      	cmp	r1, #0
 810e264:	4604      	mov	r4, r0
 810e266:	bfba      	itte	lt
 810e268:	4249      	neglt	r1, r1
 810e26a:	232d      	movlt	r3, #45	; 0x2d
 810e26c:	232b      	movge	r3, #43	; 0x2b
 810e26e:	2909      	cmp	r1, #9
 810e270:	f804 2b02 	strb.w	r2, [r4], #2
 810e274:	7043      	strb	r3, [r0, #1]
 810e276:	dd20      	ble.n	810e2ba <__exponent+0x5a>
 810e278:	f10d 0307 	add.w	r3, sp, #7
 810e27c:	461f      	mov	r7, r3
 810e27e:	260a      	movs	r6, #10
 810e280:	fb91 f5f6 	sdiv	r5, r1, r6
 810e284:	fb06 1115 	mls	r1, r6, r5, r1
 810e288:	3130      	adds	r1, #48	; 0x30
 810e28a:	2d09      	cmp	r5, #9
 810e28c:	f803 1c01 	strb.w	r1, [r3, #-1]
 810e290:	f103 32ff 	add.w	r2, r3, #4294967295
 810e294:	4629      	mov	r1, r5
 810e296:	dc09      	bgt.n	810e2ac <__exponent+0x4c>
 810e298:	3130      	adds	r1, #48	; 0x30
 810e29a:	3b02      	subs	r3, #2
 810e29c:	f802 1c01 	strb.w	r1, [r2, #-1]
 810e2a0:	42bb      	cmp	r3, r7
 810e2a2:	4622      	mov	r2, r4
 810e2a4:	d304      	bcc.n	810e2b0 <__exponent+0x50>
 810e2a6:	1a10      	subs	r0, r2, r0
 810e2a8:	b003      	add	sp, #12
 810e2aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810e2ac:	4613      	mov	r3, r2
 810e2ae:	e7e7      	b.n	810e280 <__exponent+0x20>
 810e2b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 810e2b4:	f804 2b01 	strb.w	r2, [r4], #1
 810e2b8:	e7f2      	b.n	810e2a0 <__exponent+0x40>
 810e2ba:	2330      	movs	r3, #48	; 0x30
 810e2bc:	4419      	add	r1, r3
 810e2be:	7083      	strb	r3, [r0, #2]
 810e2c0:	1d02      	adds	r2, r0, #4
 810e2c2:	70c1      	strb	r1, [r0, #3]
 810e2c4:	e7ef      	b.n	810e2a6 <__exponent+0x46>
	...

0810e2c8 <_printf_float>:
 810e2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e2cc:	b08d      	sub	sp, #52	; 0x34
 810e2ce:	460c      	mov	r4, r1
 810e2d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 810e2d4:	4616      	mov	r6, r2
 810e2d6:	461f      	mov	r7, r3
 810e2d8:	4605      	mov	r5, r0
 810e2da:	f001 fb81 	bl	810f9e0 <_localeconv_r>
 810e2de:	6803      	ldr	r3, [r0, #0]
 810e2e0:	9304      	str	r3, [sp, #16]
 810e2e2:	4618      	mov	r0, r3
 810e2e4:	f7f2 f806 	bl	81002f4 <strlen>
 810e2e8:	2300      	movs	r3, #0
 810e2ea:	930a      	str	r3, [sp, #40]	; 0x28
 810e2ec:	f8d8 3000 	ldr.w	r3, [r8]
 810e2f0:	9005      	str	r0, [sp, #20]
 810e2f2:	3307      	adds	r3, #7
 810e2f4:	f023 0307 	bic.w	r3, r3, #7
 810e2f8:	f103 0208 	add.w	r2, r3, #8
 810e2fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 810e300:	f8d4 b000 	ldr.w	fp, [r4]
 810e304:	f8c8 2000 	str.w	r2, [r8]
 810e308:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e30c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 810e310:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 810e314:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810e318:	9307      	str	r3, [sp, #28]
 810e31a:	f8cd 8018 	str.w	r8, [sp, #24]
 810e31e:	f04f 32ff 	mov.w	r2, #4294967295
 810e322:	4ba7      	ldr	r3, [pc, #668]	; (810e5c0 <_printf_float+0x2f8>)
 810e324:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810e328:	f7f2 fc98 	bl	8100c5c <__aeabi_dcmpun>
 810e32c:	bb70      	cbnz	r0, 810e38c <_printf_float+0xc4>
 810e32e:	f04f 32ff 	mov.w	r2, #4294967295
 810e332:	4ba3      	ldr	r3, [pc, #652]	; (810e5c0 <_printf_float+0x2f8>)
 810e334:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810e338:	f7f2 fc72 	bl	8100c20 <__aeabi_dcmple>
 810e33c:	bb30      	cbnz	r0, 810e38c <_printf_float+0xc4>
 810e33e:	2200      	movs	r2, #0
 810e340:	2300      	movs	r3, #0
 810e342:	4640      	mov	r0, r8
 810e344:	4649      	mov	r1, r9
 810e346:	f7f2 fc61 	bl	8100c0c <__aeabi_dcmplt>
 810e34a:	b110      	cbz	r0, 810e352 <_printf_float+0x8a>
 810e34c:	232d      	movs	r3, #45	; 0x2d
 810e34e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810e352:	4a9c      	ldr	r2, [pc, #624]	; (810e5c4 <_printf_float+0x2fc>)
 810e354:	4b9c      	ldr	r3, [pc, #624]	; (810e5c8 <_printf_float+0x300>)
 810e356:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 810e35a:	bf8c      	ite	hi
 810e35c:	4690      	movhi	r8, r2
 810e35e:	4698      	movls	r8, r3
 810e360:	2303      	movs	r3, #3
 810e362:	f02b 0204 	bic.w	r2, fp, #4
 810e366:	6123      	str	r3, [r4, #16]
 810e368:	6022      	str	r2, [r4, #0]
 810e36a:	f04f 0900 	mov.w	r9, #0
 810e36e:	9700      	str	r7, [sp, #0]
 810e370:	4633      	mov	r3, r6
 810e372:	aa0b      	add	r2, sp, #44	; 0x2c
 810e374:	4621      	mov	r1, r4
 810e376:	4628      	mov	r0, r5
 810e378:	f000 f9e6 	bl	810e748 <_printf_common>
 810e37c:	3001      	adds	r0, #1
 810e37e:	f040 808d 	bne.w	810e49c <_printf_float+0x1d4>
 810e382:	f04f 30ff 	mov.w	r0, #4294967295
 810e386:	b00d      	add	sp, #52	; 0x34
 810e388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e38c:	4642      	mov	r2, r8
 810e38e:	464b      	mov	r3, r9
 810e390:	4640      	mov	r0, r8
 810e392:	4649      	mov	r1, r9
 810e394:	f7f2 fc62 	bl	8100c5c <__aeabi_dcmpun>
 810e398:	b110      	cbz	r0, 810e3a0 <_printf_float+0xd8>
 810e39a:	4a8c      	ldr	r2, [pc, #560]	; (810e5cc <_printf_float+0x304>)
 810e39c:	4b8c      	ldr	r3, [pc, #560]	; (810e5d0 <_printf_float+0x308>)
 810e39e:	e7da      	b.n	810e356 <_printf_float+0x8e>
 810e3a0:	6861      	ldr	r1, [r4, #4]
 810e3a2:	1c4b      	adds	r3, r1, #1
 810e3a4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 810e3a8:	a80a      	add	r0, sp, #40	; 0x28
 810e3aa:	d13e      	bne.n	810e42a <_printf_float+0x162>
 810e3ac:	2306      	movs	r3, #6
 810e3ae:	6063      	str	r3, [r4, #4]
 810e3b0:	2300      	movs	r3, #0
 810e3b2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 810e3b6:	ab09      	add	r3, sp, #36	; 0x24
 810e3b8:	9300      	str	r3, [sp, #0]
 810e3ba:	ec49 8b10 	vmov	d0, r8, r9
 810e3be:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 810e3c2:	6022      	str	r2, [r4, #0]
 810e3c4:	f8cd a004 	str.w	sl, [sp, #4]
 810e3c8:	6861      	ldr	r1, [r4, #4]
 810e3ca:	4628      	mov	r0, r5
 810e3cc:	f7ff fee7 	bl	810e19e <__cvt>
 810e3d0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 810e3d4:	2b47      	cmp	r3, #71	; 0x47
 810e3d6:	4680      	mov	r8, r0
 810e3d8:	d109      	bne.n	810e3ee <_printf_float+0x126>
 810e3da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810e3dc:	1cd8      	adds	r0, r3, #3
 810e3de:	db02      	blt.n	810e3e6 <_printf_float+0x11e>
 810e3e0:	6862      	ldr	r2, [r4, #4]
 810e3e2:	4293      	cmp	r3, r2
 810e3e4:	dd47      	ble.n	810e476 <_printf_float+0x1ae>
 810e3e6:	f1aa 0a02 	sub.w	sl, sl, #2
 810e3ea:	fa5f fa8a 	uxtb.w	sl, sl
 810e3ee:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 810e3f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 810e3f4:	d824      	bhi.n	810e440 <_printf_float+0x178>
 810e3f6:	3901      	subs	r1, #1
 810e3f8:	4652      	mov	r2, sl
 810e3fa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 810e3fe:	9109      	str	r1, [sp, #36]	; 0x24
 810e400:	f7ff ff2e 	bl	810e260 <__exponent>
 810e404:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810e406:	1813      	adds	r3, r2, r0
 810e408:	2a01      	cmp	r2, #1
 810e40a:	4681      	mov	r9, r0
 810e40c:	6123      	str	r3, [r4, #16]
 810e40e:	dc02      	bgt.n	810e416 <_printf_float+0x14e>
 810e410:	6822      	ldr	r2, [r4, #0]
 810e412:	07d1      	lsls	r1, r2, #31
 810e414:	d501      	bpl.n	810e41a <_printf_float+0x152>
 810e416:	3301      	adds	r3, #1
 810e418:	6123      	str	r3, [r4, #16]
 810e41a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 810e41e:	2b00      	cmp	r3, #0
 810e420:	d0a5      	beq.n	810e36e <_printf_float+0xa6>
 810e422:	232d      	movs	r3, #45	; 0x2d
 810e424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810e428:	e7a1      	b.n	810e36e <_printf_float+0xa6>
 810e42a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 810e42e:	f000 8177 	beq.w	810e720 <_printf_float+0x458>
 810e432:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 810e436:	d1bb      	bne.n	810e3b0 <_printf_float+0xe8>
 810e438:	2900      	cmp	r1, #0
 810e43a:	d1b9      	bne.n	810e3b0 <_printf_float+0xe8>
 810e43c:	2301      	movs	r3, #1
 810e43e:	e7b6      	b.n	810e3ae <_printf_float+0xe6>
 810e440:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 810e444:	d119      	bne.n	810e47a <_printf_float+0x1b2>
 810e446:	2900      	cmp	r1, #0
 810e448:	6863      	ldr	r3, [r4, #4]
 810e44a:	dd0c      	ble.n	810e466 <_printf_float+0x19e>
 810e44c:	6121      	str	r1, [r4, #16]
 810e44e:	b913      	cbnz	r3, 810e456 <_printf_float+0x18e>
 810e450:	6822      	ldr	r2, [r4, #0]
 810e452:	07d2      	lsls	r2, r2, #31
 810e454:	d502      	bpl.n	810e45c <_printf_float+0x194>
 810e456:	3301      	adds	r3, #1
 810e458:	440b      	add	r3, r1
 810e45a:	6123      	str	r3, [r4, #16]
 810e45c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810e45e:	65a3      	str	r3, [r4, #88]	; 0x58
 810e460:	f04f 0900 	mov.w	r9, #0
 810e464:	e7d9      	b.n	810e41a <_printf_float+0x152>
 810e466:	b913      	cbnz	r3, 810e46e <_printf_float+0x1a6>
 810e468:	6822      	ldr	r2, [r4, #0]
 810e46a:	07d0      	lsls	r0, r2, #31
 810e46c:	d501      	bpl.n	810e472 <_printf_float+0x1aa>
 810e46e:	3302      	adds	r3, #2
 810e470:	e7f3      	b.n	810e45a <_printf_float+0x192>
 810e472:	2301      	movs	r3, #1
 810e474:	e7f1      	b.n	810e45a <_printf_float+0x192>
 810e476:	f04f 0a67 	mov.w	sl, #103	; 0x67
 810e47a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 810e47e:	4293      	cmp	r3, r2
 810e480:	db05      	blt.n	810e48e <_printf_float+0x1c6>
 810e482:	6822      	ldr	r2, [r4, #0]
 810e484:	6123      	str	r3, [r4, #16]
 810e486:	07d1      	lsls	r1, r2, #31
 810e488:	d5e8      	bpl.n	810e45c <_printf_float+0x194>
 810e48a:	3301      	adds	r3, #1
 810e48c:	e7e5      	b.n	810e45a <_printf_float+0x192>
 810e48e:	2b00      	cmp	r3, #0
 810e490:	bfd4      	ite	le
 810e492:	f1c3 0302 	rsble	r3, r3, #2
 810e496:	2301      	movgt	r3, #1
 810e498:	4413      	add	r3, r2
 810e49a:	e7de      	b.n	810e45a <_printf_float+0x192>
 810e49c:	6823      	ldr	r3, [r4, #0]
 810e49e:	055a      	lsls	r2, r3, #21
 810e4a0:	d407      	bmi.n	810e4b2 <_printf_float+0x1ea>
 810e4a2:	6923      	ldr	r3, [r4, #16]
 810e4a4:	4642      	mov	r2, r8
 810e4a6:	4631      	mov	r1, r6
 810e4a8:	4628      	mov	r0, r5
 810e4aa:	47b8      	blx	r7
 810e4ac:	3001      	adds	r0, #1
 810e4ae:	d12b      	bne.n	810e508 <_printf_float+0x240>
 810e4b0:	e767      	b.n	810e382 <_printf_float+0xba>
 810e4b2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 810e4b6:	f240 80dc 	bls.w	810e672 <_printf_float+0x3aa>
 810e4ba:	2200      	movs	r2, #0
 810e4bc:	2300      	movs	r3, #0
 810e4be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810e4c2:	f7f2 fb99 	bl	8100bf8 <__aeabi_dcmpeq>
 810e4c6:	2800      	cmp	r0, #0
 810e4c8:	d033      	beq.n	810e532 <_printf_float+0x26a>
 810e4ca:	2301      	movs	r3, #1
 810e4cc:	4a41      	ldr	r2, [pc, #260]	; (810e5d4 <_printf_float+0x30c>)
 810e4ce:	4631      	mov	r1, r6
 810e4d0:	4628      	mov	r0, r5
 810e4d2:	47b8      	blx	r7
 810e4d4:	3001      	adds	r0, #1
 810e4d6:	f43f af54 	beq.w	810e382 <_printf_float+0xba>
 810e4da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810e4de:	429a      	cmp	r2, r3
 810e4e0:	db02      	blt.n	810e4e8 <_printf_float+0x220>
 810e4e2:	6823      	ldr	r3, [r4, #0]
 810e4e4:	07d8      	lsls	r0, r3, #31
 810e4e6:	d50f      	bpl.n	810e508 <_printf_float+0x240>
 810e4e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810e4ec:	4631      	mov	r1, r6
 810e4ee:	4628      	mov	r0, r5
 810e4f0:	47b8      	blx	r7
 810e4f2:	3001      	adds	r0, #1
 810e4f4:	f43f af45 	beq.w	810e382 <_printf_float+0xba>
 810e4f8:	f04f 0800 	mov.w	r8, #0
 810e4fc:	f104 091a 	add.w	r9, r4, #26
 810e500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810e502:	3b01      	subs	r3, #1
 810e504:	4543      	cmp	r3, r8
 810e506:	dc09      	bgt.n	810e51c <_printf_float+0x254>
 810e508:	6823      	ldr	r3, [r4, #0]
 810e50a:	079b      	lsls	r3, r3, #30
 810e50c:	f100 8103 	bmi.w	810e716 <_printf_float+0x44e>
 810e510:	68e0      	ldr	r0, [r4, #12]
 810e512:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810e514:	4298      	cmp	r0, r3
 810e516:	bfb8      	it	lt
 810e518:	4618      	movlt	r0, r3
 810e51a:	e734      	b.n	810e386 <_printf_float+0xbe>
 810e51c:	2301      	movs	r3, #1
 810e51e:	464a      	mov	r2, r9
 810e520:	4631      	mov	r1, r6
 810e522:	4628      	mov	r0, r5
 810e524:	47b8      	blx	r7
 810e526:	3001      	adds	r0, #1
 810e528:	f43f af2b 	beq.w	810e382 <_printf_float+0xba>
 810e52c:	f108 0801 	add.w	r8, r8, #1
 810e530:	e7e6      	b.n	810e500 <_printf_float+0x238>
 810e532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810e534:	2b00      	cmp	r3, #0
 810e536:	dc2b      	bgt.n	810e590 <_printf_float+0x2c8>
 810e538:	2301      	movs	r3, #1
 810e53a:	4a26      	ldr	r2, [pc, #152]	; (810e5d4 <_printf_float+0x30c>)
 810e53c:	4631      	mov	r1, r6
 810e53e:	4628      	mov	r0, r5
 810e540:	47b8      	blx	r7
 810e542:	3001      	adds	r0, #1
 810e544:	f43f af1d 	beq.w	810e382 <_printf_float+0xba>
 810e548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810e54a:	b923      	cbnz	r3, 810e556 <_printf_float+0x28e>
 810e54c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810e54e:	b913      	cbnz	r3, 810e556 <_printf_float+0x28e>
 810e550:	6823      	ldr	r3, [r4, #0]
 810e552:	07d9      	lsls	r1, r3, #31
 810e554:	d5d8      	bpl.n	810e508 <_printf_float+0x240>
 810e556:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810e55a:	4631      	mov	r1, r6
 810e55c:	4628      	mov	r0, r5
 810e55e:	47b8      	blx	r7
 810e560:	3001      	adds	r0, #1
 810e562:	f43f af0e 	beq.w	810e382 <_printf_float+0xba>
 810e566:	f04f 0900 	mov.w	r9, #0
 810e56a:	f104 0a1a 	add.w	sl, r4, #26
 810e56e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810e570:	425b      	negs	r3, r3
 810e572:	454b      	cmp	r3, r9
 810e574:	dc01      	bgt.n	810e57a <_printf_float+0x2b2>
 810e576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810e578:	e794      	b.n	810e4a4 <_printf_float+0x1dc>
 810e57a:	2301      	movs	r3, #1
 810e57c:	4652      	mov	r2, sl
 810e57e:	4631      	mov	r1, r6
 810e580:	4628      	mov	r0, r5
 810e582:	47b8      	blx	r7
 810e584:	3001      	adds	r0, #1
 810e586:	f43f aefc 	beq.w	810e382 <_printf_float+0xba>
 810e58a:	f109 0901 	add.w	r9, r9, #1
 810e58e:	e7ee      	b.n	810e56e <_printf_float+0x2a6>
 810e590:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810e592:	6da3      	ldr	r3, [r4, #88]	; 0x58
 810e594:	429a      	cmp	r2, r3
 810e596:	bfa8      	it	ge
 810e598:	461a      	movge	r2, r3
 810e59a:	2a00      	cmp	r2, #0
 810e59c:	4691      	mov	r9, r2
 810e59e:	dd07      	ble.n	810e5b0 <_printf_float+0x2e8>
 810e5a0:	4613      	mov	r3, r2
 810e5a2:	4631      	mov	r1, r6
 810e5a4:	4642      	mov	r2, r8
 810e5a6:	4628      	mov	r0, r5
 810e5a8:	47b8      	blx	r7
 810e5aa:	3001      	adds	r0, #1
 810e5ac:	f43f aee9 	beq.w	810e382 <_printf_float+0xba>
 810e5b0:	f104 031a 	add.w	r3, r4, #26
 810e5b4:	f04f 0b00 	mov.w	fp, #0
 810e5b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810e5bc:	9306      	str	r3, [sp, #24]
 810e5be:	e015      	b.n	810e5ec <_printf_float+0x324>
 810e5c0:	7fefffff 	.word	0x7fefffff
 810e5c4:	08110ef7 	.word	0x08110ef7
 810e5c8:	08110ef3 	.word	0x08110ef3
 810e5cc:	08110eff 	.word	0x08110eff
 810e5d0:	08110efb 	.word	0x08110efb
 810e5d4:	08110f03 	.word	0x08110f03
 810e5d8:	2301      	movs	r3, #1
 810e5da:	9a06      	ldr	r2, [sp, #24]
 810e5dc:	4631      	mov	r1, r6
 810e5de:	4628      	mov	r0, r5
 810e5e0:	47b8      	blx	r7
 810e5e2:	3001      	adds	r0, #1
 810e5e4:	f43f aecd 	beq.w	810e382 <_printf_float+0xba>
 810e5e8:	f10b 0b01 	add.w	fp, fp, #1
 810e5ec:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 810e5f0:	ebaa 0309 	sub.w	r3, sl, r9
 810e5f4:	455b      	cmp	r3, fp
 810e5f6:	dcef      	bgt.n	810e5d8 <_printf_float+0x310>
 810e5f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810e5fc:	429a      	cmp	r2, r3
 810e5fe:	44d0      	add	r8, sl
 810e600:	db15      	blt.n	810e62e <_printf_float+0x366>
 810e602:	6823      	ldr	r3, [r4, #0]
 810e604:	07da      	lsls	r2, r3, #31
 810e606:	d412      	bmi.n	810e62e <_printf_float+0x366>
 810e608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810e60a:	9909      	ldr	r1, [sp, #36]	; 0x24
 810e60c:	eba3 020a 	sub.w	r2, r3, sl
 810e610:	eba3 0a01 	sub.w	sl, r3, r1
 810e614:	4592      	cmp	sl, r2
 810e616:	bfa8      	it	ge
 810e618:	4692      	movge	sl, r2
 810e61a:	f1ba 0f00 	cmp.w	sl, #0
 810e61e:	dc0e      	bgt.n	810e63e <_printf_float+0x376>
 810e620:	f04f 0800 	mov.w	r8, #0
 810e624:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810e628:	f104 091a 	add.w	r9, r4, #26
 810e62c:	e019      	b.n	810e662 <_printf_float+0x39a>
 810e62e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810e632:	4631      	mov	r1, r6
 810e634:	4628      	mov	r0, r5
 810e636:	47b8      	blx	r7
 810e638:	3001      	adds	r0, #1
 810e63a:	d1e5      	bne.n	810e608 <_printf_float+0x340>
 810e63c:	e6a1      	b.n	810e382 <_printf_float+0xba>
 810e63e:	4653      	mov	r3, sl
 810e640:	4642      	mov	r2, r8
 810e642:	4631      	mov	r1, r6
 810e644:	4628      	mov	r0, r5
 810e646:	47b8      	blx	r7
 810e648:	3001      	adds	r0, #1
 810e64a:	d1e9      	bne.n	810e620 <_printf_float+0x358>
 810e64c:	e699      	b.n	810e382 <_printf_float+0xba>
 810e64e:	2301      	movs	r3, #1
 810e650:	464a      	mov	r2, r9
 810e652:	4631      	mov	r1, r6
 810e654:	4628      	mov	r0, r5
 810e656:	47b8      	blx	r7
 810e658:	3001      	adds	r0, #1
 810e65a:	f43f ae92 	beq.w	810e382 <_printf_float+0xba>
 810e65e:	f108 0801 	add.w	r8, r8, #1
 810e662:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810e666:	1a9b      	subs	r3, r3, r2
 810e668:	eba3 030a 	sub.w	r3, r3, sl
 810e66c:	4543      	cmp	r3, r8
 810e66e:	dcee      	bgt.n	810e64e <_printf_float+0x386>
 810e670:	e74a      	b.n	810e508 <_printf_float+0x240>
 810e672:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810e674:	2a01      	cmp	r2, #1
 810e676:	dc01      	bgt.n	810e67c <_printf_float+0x3b4>
 810e678:	07db      	lsls	r3, r3, #31
 810e67a:	d53a      	bpl.n	810e6f2 <_printf_float+0x42a>
 810e67c:	2301      	movs	r3, #1
 810e67e:	4642      	mov	r2, r8
 810e680:	4631      	mov	r1, r6
 810e682:	4628      	mov	r0, r5
 810e684:	47b8      	blx	r7
 810e686:	3001      	adds	r0, #1
 810e688:	f43f ae7b 	beq.w	810e382 <_printf_float+0xba>
 810e68c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810e690:	4631      	mov	r1, r6
 810e692:	4628      	mov	r0, r5
 810e694:	47b8      	blx	r7
 810e696:	3001      	adds	r0, #1
 810e698:	f108 0801 	add.w	r8, r8, #1
 810e69c:	f43f ae71 	beq.w	810e382 <_printf_float+0xba>
 810e6a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810e6a2:	2200      	movs	r2, #0
 810e6a4:	f103 3aff 	add.w	sl, r3, #4294967295
 810e6a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810e6ac:	2300      	movs	r3, #0
 810e6ae:	f7f2 faa3 	bl	8100bf8 <__aeabi_dcmpeq>
 810e6b2:	b9c8      	cbnz	r0, 810e6e8 <_printf_float+0x420>
 810e6b4:	4653      	mov	r3, sl
 810e6b6:	4642      	mov	r2, r8
 810e6b8:	4631      	mov	r1, r6
 810e6ba:	4628      	mov	r0, r5
 810e6bc:	47b8      	blx	r7
 810e6be:	3001      	adds	r0, #1
 810e6c0:	d10e      	bne.n	810e6e0 <_printf_float+0x418>
 810e6c2:	e65e      	b.n	810e382 <_printf_float+0xba>
 810e6c4:	2301      	movs	r3, #1
 810e6c6:	4652      	mov	r2, sl
 810e6c8:	4631      	mov	r1, r6
 810e6ca:	4628      	mov	r0, r5
 810e6cc:	47b8      	blx	r7
 810e6ce:	3001      	adds	r0, #1
 810e6d0:	f43f ae57 	beq.w	810e382 <_printf_float+0xba>
 810e6d4:	f108 0801 	add.w	r8, r8, #1
 810e6d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810e6da:	3b01      	subs	r3, #1
 810e6dc:	4543      	cmp	r3, r8
 810e6de:	dcf1      	bgt.n	810e6c4 <_printf_float+0x3fc>
 810e6e0:	464b      	mov	r3, r9
 810e6e2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 810e6e6:	e6de      	b.n	810e4a6 <_printf_float+0x1de>
 810e6e8:	f04f 0800 	mov.w	r8, #0
 810e6ec:	f104 0a1a 	add.w	sl, r4, #26
 810e6f0:	e7f2      	b.n	810e6d8 <_printf_float+0x410>
 810e6f2:	2301      	movs	r3, #1
 810e6f4:	e7df      	b.n	810e6b6 <_printf_float+0x3ee>
 810e6f6:	2301      	movs	r3, #1
 810e6f8:	464a      	mov	r2, r9
 810e6fa:	4631      	mov	r1, r6
 810e6fc:	4628      	mov	r0, r5
 810e6fe:	47b8      	blx	r7
 810e700:	3001      	adds	r0, #1
 810e702:	f43f ae3e 	beq.w	810e382 <_printf_float+0xba>
 810e706:	f108 0801 	add.w	r8, r8, #1
 810e70a:	68e3      	ldr	r3, [r4, #12]
 810e70c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810e70e:	1a9b      	subs	r3, r3, r2
 810e710:	4543      	cmp	r3, r8
 810e712:	dcf0      	bgt.n	810e6f6 <_printf_float+0x42e>
 810e714:	e6fc      	b.n	810e510 <_printf_float+0x248>
 810e716:	f04f 0800 	mov.w	r8, #0
 810e71a:	f104 0919 	add.w	r9, r4, #25
 810e71e:	e7f4      	b.n	810e70a <_printf_float+0x442>
 810e720:	2900      	cmp	r1, #0
 810e722:	f43f ae8b 	beq.w	810e43c <_printf_float+0x174>
 810e726:	2300      	movs	r3, #0
 810e728:	e9cd 0302 	strd	r0, r3, [sp, #8]
 810e72c:	ab09      	add	r3, sp, #36	; 0x24
 810e72e:	9300      	str	r3, [sp, #0]
 810e730:	ec49 8b10 	vmov	d0, r8, r9
 810e734:	6022      	str	r2, [r4, #0]
 810e736:	f8cd a004 	str.w	sl, [sp, #4]
 810e73a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 810e73e:	4628      	mov	r0, r5
 810e740:	f7ff fd2d 	bl	810e19e <__cvt>
 810e744:	4680      	mov	r8, r0
 810e746:	e648      	b.n	810e3da <_printf_float+0x112>

0810e748 <_printf_common>:
 810e748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810e74c:	4691      	mov	r9, r2
 810e74e:	461f      	mov	r7, r3
 810e750:	688a      	ldr	r2, [r1, #8]
 810e752:	690b      	ldr	r3, [r1, #16]
 810e754:	f8dd 8020 	ldr.w	r8, [sp, #32]
 810e758:	4293      	cmp	r3, r2
 810e75a:	bfb8      	it	lt
 810e75c:	4613      	movlt	r3, r2
 810e75e:	f8c9 3000 	str.w	r3, [r9]
 810e762:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 810e766:	4606      	mov	r6, r0
 810e768:	460c      	mov	r4, r1
 810e76a:	b112      	cbz	r2, 810e772 <_printf_common+0x2a>
 810e76c:	3301      	adds	r3, #1
 810e76e:	f8c9 3000 	str.w	r3, [r9]
 810e772:	6823      	ldr	r3, [r4, #0]
 810e774:	0699      	lsls	r1, r3, #26
 810e776:	bf42      	ittt	mi
 810e778:	f8d9 3000 	ldrmi.w	r3, [r9]
 810e77c:	3302      	addmi	r3, #2
 810e77e:	f8c9 3000 	strmi.w	r3, [r9]
 810e782:	6825      	ldr	r5, [r4, #0]
 810e784:	f015 0506 	ands.w	r5, r5, #6
 810e788:	d107      	bne.n	810e79a <_printf_common+0x52>
 810e78a:	f104 0a19 	add.w	sl, r4, #25
 810e78e:	68e3      	ldr	r3, [r4, #12]
 810e790:	f8d9 2000 	ldr.w	r2, [r9]
 810e794:	1a9b      	subs	r3, r3, r2
 810e796:	42ab      	cmp	r3, r5
 810e798:	dc28      	bgt.n	810e7ec <_printf_common+0xa4>
 810e79a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 810e79e:	6822      	ldr	r2, [r4, #0]
 810e7a0:	3300      	adds	r3, #0
 810e7a2:	bf18      	it	ne
 810e7a4:	2301      	movne	r3, #1
 810e7a6:	0692      	lsls	r2, r2, #26
 810e7a8:	d42d      	bmi.n	810e806 <_printf_common+0xbe>
 810e7aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 810e7ae:	4639      	mov	r1, r7
 810e7b0:	4630      	mov	r0, r6
 810e7b2:	47c0      	blx	r8
 810e7b4:	3001      	adds	r0, #1
 810e7b6:	d020      	beq.n	810e7fa <_printf_common+0xb2>
 810e7b8:	6823      	ldr	r3, [r4, #0]
 810e7ba:	68e5      	ldr	r5, [r4, #12]
 810e7bc:	f8d9 2000 	ldr.w	r2, [r9]
 810e7c0:	f003 0306 	and.w	r3, r3, #6
 810e7c4:	2b04      	cmp	r3, #4
 810e7c6:	bf08      	it	eq
 810e7c8:	1aad      	subeq	r5, r5, r2
 810e7ca:	68a3      	ldr	r3, [r4, #8]
 810e7cc:	6922      	ldr	r2, [r4, #16]
 810e7ce:	bf0c      	ite	eq
 810e7d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810e7d4:	2500      	movne	r5, #0
 810e7d6:	4293      	cmp	r3, r2
 810e7d8:	bfc4      	itt	gt
 810e7da:	1a9b      	subgt	r3, r3, r2
 810e7dc:	18ed      	addgt	r5, r5, r3
 810e7de:	f04f 0900 	mov.w	r9, #0
 810e7e2:	341a      	adds	r4, #26
 810e7e4:	454d      	cmp	r5, r9
 810e7e6:	d11a      	bne.n	810e81e <_printf_common+0xd6>
 810e7e8:	2000      	movs	r0, #0
 810e7ea:	e008      	b.n	810e7fe <_printf_common+0xb6>
 810e7ec:	2301      	movs	r3, #1
 810e7ee:	4652      	mov	r2, sl
 810e7f0:	4639      	mov	r1, r7
 810e7f2:	4630      	mov	r0, r6
 810e7f4:	47c0      	blx	r8
 810e7f6:	3001      	adds	r0, #1
 810e7f8:	d103      	bne.n	810e802 <_printf_common+0xba>
 810e7fa:	f04f 30ff 	mov.w	r0, #4294967295
 810e7fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810e802:	3501      	adds	r5, #1
 810e804:	e7c3      	b.n	810e78e <_printf_common+0x46>
 810e806:	18e1      	adds	r1, r4, r3
 810e808:	1c5a      	adds	r2, r3, #1
 810e80a:	2030      	movs	r0, #48	; 0x30
 810e80c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 810e810:	4422      	add	r2, r4
 810e812:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 810e816:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 810e81a:	3302      	adds	r3, #2
 810e81c:	e7c5      	b.n	810e7aa <_printf_common+0x62>
 810e81e:	2301      	movs	r3, #1
 810e820:	4622      	mov	r2, r4
 810e822:	4639      	mov	r1, r7
 810e824:	4630      	mov	r0, r6
 810e826:	47c0      	blx	r8
 810e828:	3001      	adds	r0, #1
 810e82a:	d0e6      	beq.n	810e7fa <_printf_common+0xb2>
 810e82c:	f109 0901 	add.w	r9, r9, #1
 810e830:	e7d8      	b.n	810e7e4 <_printf_common+0x9c>
	...

0810e834 <_printf_i>:
 810e834:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810e838:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 810e83c:	460c      	mov	r4, r1
 810e83e:	7e09      	ldrb	r1, [r1, #24]
 810e840:	b085      	sub	sp, #20
 810e842:	296e      	cmp	r1, #110	; 0x6e
 810e844:	4617      	mov	r7, r2
 810e846:	4606      	mov	r6, r0
 810e848:	4698      	mov	r8, r3
 810e84a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 810e84c:	f000 80b3 	beq.w	810e9b6 <_printf_i+0x182>
 810e850:	d822      	bhi.n	810e898 <_printf_i+0x64>
 810e852:	2963      	cmp	r1, #99	; 0x63
 810e854:	d036      	beq.n	810e8c4 <_printf_i+0x90>
 810e856:	d80a      	bhi.n	810e86e <_printf_i+0x3a>
 810e858:	2900      	cmp	r1, #0
 810e85a:	f000 80b9 	beq.w	810e9d0 <_printf_i+0x19c>
 810e85e:	2958      	cmp	r1, #88	; 0x58
 810e860:	f000 8083 	beq.w	810e96a <_printf_i+0x136>
 810e864:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810e868:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 810e86c:	e032      	b.n	810e8d4 <_printf_i+0xa0>
 810e86e:	2964      	cmp	r1, #100	; 0x64
 810e870:	d001      	beq.n	810e876 <_printf_i+0x42>
 810e872:	2969      	cmp	r1, #105	; 0x69
 810e874:	d1f6      	bne.n	810e864 <_printf_i+0x30>
 810e876:	6820      	ldr	r0, [r4, #0]
 810e878:	6813      	ldr	r3, [r2, #0]
 810e87a:	0605      	lsls	r5, r0, #24
 810e87c:	f103 0104 	add.w	r1, r3, #4
 810e880:	d52a      	bpl.n	810e8d8 <_printf_i+0xa4>
 810e882:	681b      	ldr	r3, [r3, #0]
 810e884:	6011      	str	r1, [r2, #0]
 810e886:	2b00      	cmp	r3, #0
 810e888:	da03      	bge.n	810e892 <_printf_i+0x5e>
 810e88a:	222d      	movs	r2, #45	; 0x2d
 810e88c:	425b      	negs	r3, r3
 810e88e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 810e892:	486f      	ldr	r0, [pc, #444]	; (810ea50 <_printf_i+0x21c>)
 810e894:	220a      	movs	r2, #10
 810e896:	e039      	b.n	810e90c <_printf_i+0xd8>
 810e898:	2973      	cmp	r1, #115	; 0x73
 810e89a:	f000 809d 	beq.w	810e9d8 <_printf_i+0x1a4>
 810e89e:	d808      	bhi.n	810e8b2 <_printf_i+0x7e>
 810e8a0:	296f      	cmp	r1, #111	; 0x6f
 810e8a2:	d020      	beq.n	810e8e6 <_printf_i+0xb2>
 810e8a4:	2970      	cmp	r1, #112	; 0x70
 810e8a6:	d1dd      	bne.n	810e864 <_printf_i+0x30>
 810e8a8:	6823      	ldr	r3, [r4, #0]
 810e8aa:	f043 0320 	orr.w	r3, r3, #32
 810e8ae:	6023      	str	r3, [r4, #0]
 810e8b0:	e003      	b.n	810e8ba <_printf_i+0x86>
 810e8b2:	2975      	cmp	r1, #117	; 0x75
 810e8b4:	d017      	beq.n	810e8e6 <_printf_i+0xb2>
 810e8b6:	2978      	cmp	r1, #120	; 0x78
 810e8b8:	d1d4      	bne.n	810e864 <_printf_i+0x30>
 810e8ba:	2378      	movs	r3, #120	; 0x78
 810e8bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 810e8c0:	4864      	ldr	r0, [pc, #400]	; (810ea54 <_printf_i+0x220>)
 810e8c2:	e055      	b.n	810e970 <_printf_i+0x13c>
 810e8c4:	6813      	ldr	r3, [r2, #0]
 810e8c6:	1d19      	adds	r1, r3, #4
 810e8c8:	681b      	ldr	r3, [r3, #0]
 810e8ca:	6011      	str	r1, [r2, #0]
 810e8cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810e8d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 810e8d4:	2301      	movs	r3, #1
 810e8d6:	e08c      	b.n	810e9f2 <_printf_i+0x1be>
 810e8d8:	681b      	ldr	r3, [r3, #0]
 810e8da:	6011      	str	r1, [r2, #0]
 810e8dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 810e8e0:	bf18      	it	ne
 810e8e2:	b21b      	sxthne	r3, r3
 810e8e4:	e7cf      	b.n	810e886 <_printf_i+0x52>
 810e8e6:	6813      	ldr	r3, [r2, #0]
 810e8e8:	6825      	ldr	r5, [r4, #0]
 810e8ea:	1d18      	adds	r0, r3, #4
 810e8ec:	6010      	str	r0, [r2, #0]
 810e8ee:	0628      	lsls	r0, r5, #24
 810e8f0:	d501      	bpl.n	810e8f6 <_printf_i+0xc2>
 810e8f2:	681b      	ldr	r3, [r3, #0]
 810e8f4:	e002      	b.n	810e8fc <_printf_i+0xc8>
 810e8f6:	0668      	lsls	r0, r5, #25
 810e8f8:	d5fb      	bpl.n	810e8f2 <_printf_i+0xbe>
 810e8fa:	881b      	ldrh	r3, [r3, #0]
 810e8fc:	4854      	ldr	r0, [pc, #336]	; (810ea50 <_printf_i+0x21c>)
 810e8fe:	296f      	cmp	r1, #111	; 0x6f
 810e900:	bf14      	ite	ne
 810e902:	220a      	movne	r2, #10
 810e904:	2208      	moveq	r2, #8
 810e906:	2100      	movs	r1, #0
 810e908:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 810e90c:	6865      	ldr	r5, [r4, #4]
 810e90e:	60a5      	str	r5, [r4, #8]
 810e910:	2d00      	cmp	r5, #0
 810e912:	f2c0 8095 	blt.w	810ea40 <_printf_i+0x20c>
 810e916:	6821      	ldr	r1, [r4, #0]
 810e918:	f021 0104 	bic.w	r1, r1, #4
 810e91c:	6021      	str	r1, [r4, #0]
 810e91e:	2b00      	cmp	r3, #0
 810e920:	d13d      	bne.n	810e99e <_printf_i+0x16a>
 810e922:	2d00      	cmp	r5, #0
 810e924:	f040 808e 	bne.w	810ea44 <_printf_i+0x210>
 810e928:	4665      	mov	r5, ip
 810e92a:	2a08      	cmp	r2, #8
 810e92c:	d10b      	bne.n	810e946 <_printf_i+0x112>
 810e92e:	6823      	ldr	r3, [r4, #0]
 810e930:	07db      	lsls	r3, r3, #31
 810e932:	d508      	bpl.n	810e946 <_printf_i+0x112>
 810e934:	6923      	ldr	r3, [r4, #16]
 810e936:	6862      	ldr	r2, [r4, #4]
 810e938:	429a      	cmp	r2, r3
 810e93a:	bfde      	ittt	le
 810e93c:	2330      	movle	r3, #48	; 0x30
 810e93e:	f805 3c01 	strble.w	r3, [r5, #-1]
 810e942:	f105 35ff 	addle.w	r5, r5, #4294967295
 810e946:	ebac 0305 	sub.w	r3, ip, r5
 810e94a:	6123      	str	r3, [r4, #16]
 810e94c:	f8cd 8000 	str.w	r8, [sp]
 810e950:	463b      	mov	r3, r7
 810e952:	aa03      	add	r2, sp, #12
 810e954:	4621      	mov	r1, r4
 810e956:	4630      	mov	r0, r6
 810e958:	f7ff fef6 	bl	810e748 <_printf_common>
 810e95c:	3001      	adds	r0, #1
 810e95e:	d14d      	bne.n	810e9fc <_printf_i+0x1c8>
 810e960:	f04f 30ff 	mov.w	r0, #4294967295
 810e964:	b005      	add	sp, #20
 810e966:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810e96a:	4839      	ldr	r0, [pc, #228]	; (810ea50 <_printf_i+0x21c>)
 810e96c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 810e970:	6813      	ldr	r3, [r2, #0]
 810e972:	6821      	ldr	r1, [r4, #0]
 810e974:	1d1d      	adds	r5, r3, #4
 810e976:	681b      	ldr	r3, [r3, #0]
 810e978:	6015      	str	r5, [r2, #0]
 810e97a:	060a      	lsls	r2, r1, #24
 810e97c:	d50b      	bpl.n	810e996 <_printf_i+0x162>
 810e97e:	07ca      	lsls	r2, r1, #31
 810e980:	bf44      	itt	mi
 810e982:	f041 0120 	orrmi.w	r1, r1, #32
 810e986:	6021      	strmi	r1, [r4, #0]
 810e988:	b91b      	cbnz	r3, 810e992 <_printf_i+0x15e>
 810e98a:	6822      	ldr	r2, [r4, #0]
 810e98c:	f022 0220 	bic.w	r2, r2, #32
 810e990:	6022      	str	r2, [r4, #0]
 810e992:	2210      	movs	r2, #16
 810e994:	e7b7      	b.n	810e906 <_printf_i+0xd2>
 810e996:	064d      	lsls	r5, r1, #25
 810e998:	bf48      	it	mi
 810e99a:	b29b      	uxthmi	r3, r3
 810e99c:	e7ef      	b.n	810e97e <_printf_i+0x14a>
 810e99e:	4665      	mov	r5, ip
 810e9a0:	fbb3 f1f2 	udiv	r1, r3, r2
 810e9a4:	fb02 3311 	mls	r3, r2, r1, r3
 810e9a8:	5cc3      	ldrb	r3, [r0, r3]
 810e9aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 810e9ae:	460b      	mov	r3, r1
 810e9b0:	2900      	cmp	r1, #0
 810e9b2:	d1f5      	bne.n	810e9a0 <_printf_i+0x16c>
 810e9b4:	e7b9      	b.n	810e92a <_printf_i+0xf6>
 810e9b6:	6813      	ldr	r3, [r2, #0]
 810e9b8:	6825      	ldr	r5, [r4, #0]
 810e9ba:	6961      	ldr	r1, [r4, #20]
 810e9bc:	1d18      	adds	r0, r3, #4
 810e9be:	6010      	str	r0, [r2, #0]
 810e9c0:	0628      	lsls	r0, r5, #24
 810e9c2:	681b      	ldr	r3, [r3, #0]
 810e9c4:	d501      	bpl.n	810e9ca <_printf_i+0x196>
 810e9c6:	6019      	str	r1, [r3, #0]
 810e9c8:	e002      	b.n	810e9d0 <_printf_i+0x19c>
 810e9ca:	066a      	lsls	r2, r5, #25
 810e9cc:	d5fb      	bpl.n	810e9c6 <_printf_i+0x192>
 810e9ce:	8019      	strh	r1, [r3, #0]
 810e9d0:	2300      	movs	r3, #0
 810e9d2:	6123      	str	r3, [r4, #16]
 810e9d4:	4665      	mov	r5, ip
 810e9d6:	e7b9      	b.n	810e94c <_printf_i+0x118>
 810e9d8:	6813      	ldr	r3, [r2, #0]
 810e9da:	1d19      	adds	r1, r3, #4
 810e9dc:	6011      	str	r1, [r2, #0]
 810e9de:	681d      	ldr	r5, [r3, #0]
 810e9e0:	6862      	ldr	r2, [r4, #4]
 810e9e2:	2100      	movs	r1, #0
 810e9e4:	4628      	mov	r0, r5
 810e9e6:	f7f1 fc93 	bl	8100310 <memchr>
 810e9ea:	b108      	cbz	r0, 810e9f0 <_printf_i+0x1bc>
 810e9ec:	1b40      	subs	r0, r0, r5
 810e9ee:	6060      	str	r0, [r4, #4]
 810e9f0:	6863      	ldr	r3, [r4, #4]
 810e9f2:	6123      	str	r3, [r4, #16]
 810e9f4:	2300      	movs	r3, #0
 810e9f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810e9fa:	e7a7      	b.n	810e94c <_printf_i+0x118>
 810e9fc:	6923      	ldr	r3, [r4, #16]
 810e9fe:	462a      	mov	r2, r5
 810ea00:	4639      	mov	r1, r7
 810ea02:	4630      	mov	r0, r6
 810ea04:	47c0      	blx	r8
 810ea06:	3001      	adds	r0, #1
 810ea08:	d0aa      	beq.n	810e960 <_printf_i+0x12c>
 810ea0a:	6823      	ldr	r3, [r4, #0]
 810ea0c:	079b      	lsls	r3, r3, #30
 810ea0e:	d413      	bmi.n	810ea38 <_printf_i+0x204>
 810ea10:	68e0      	ldr	r0, [r4, #12]
 810ea12:	9b03      	ldr	r3, [sp, #12]
 810ea14:	4298      	cmp	r0, r3
 810ea16:	bfb8      	it	lt
 810ea18:	4618      	movlt	r0, r3
 810ea1a:	e7a3      	b.n	810e964 <_printf_i+0x130>
 810ea1c:	2301      	movs	r3, #1
 810ea1e:	464a      	mov	r2, r9
 810ea20:	4639      	mov	r1, r7
 810ea22:	4630      	mov	r0, r6
 810ea24:	47c0      	blx	r8
 810ea26:	3001      	adds	r0, #1
 810ea28:	d09a      	beq.n	810e960 <_printf_i+0x12c>
 810ea2a:	3501      	adds	r5, #1
 810ea2c:	68e3      	ldr	r3, [r4, #12]
 810ea2e:	9a03      	ldr	r2, [sp, #12]
 810ea30:	1a9b      	subs	r3, r3, r2
 810ea32:	42ab      	cmp	r3, r5
 810ea34:	dcf2      	bgt.n	810ea1c <_printf_i+0x1e8>
 810ea36:	e7eb      	b.n	810ea10 <_printf_i+0x1dc>
 810ea38:	2500      	movs	r5, #0
 810ea3a:	f104 0919 	add.w	r9, r4, #25
 810ea3e:	e7f5      	b.n	810ea2c <_printf_i+0x1f8>
 810ea40:	2b00      	cmp	r3, #0
 810ea42:	d1ac      	bne.n	810e99e <_printf_i+0x16a>
 810ea44:	7803      	ldrb	r3, [r0, #0]
 810ea46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 810ea4a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810ea4e:	e76c      	b.n	810e92a <_printf_i+0xf6>
 810ea50:	08110f05 	.word	0x08110f05
 810ea54:	08110f16 	.word	0x08110f16

0810ea58 <_raise_r>:
 810ea58:	291f      	cmp	r1, #31
 810ea5a:	b538      	push	{r3, r4, r5, lr}
 810ea5c:	4604      	mov	r4, r0
 810ea5e:	460d      	mov	r5, r1
 810ea60:	d904      	bls.n	810ea6c <_raise_r+0x14>
 810ea62:	2316      	movs	r3, #22
 810ea64:	6003      	str	r3, [r0, #0]
 810ea66:	f04f 30ff 	mov.w	r0, #4294967295
 810ea6a:	bd38      	pop	{r3, r4, r5, pc}
 810ea6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810ea6e:	b112      	cbz	r2, 810ea76 <_raise_r+0x1e>
 810ea70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810ea74:	b94b      	cbnz	r3, 810ea8a <_raise_r+0x32>
 810ea76:	4620      	mov	r0, r4
 810ea78:	f000 f830 	bl	810eadc <_getpid_r>
 810ea7c:	462a      	mov	r2, r5
 810ea7e:	4601      	mov	r1, r0
 810ea80:	4620      	mov	r0, r4
 810ea82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810ea86:	f000 b817 	b.w	810eab8 <_kill_r>
 810ea8a:	2b01      	cmp	r3, #1
 810ea8c:	d00a      	beq.n	810eaa4 <_raise_r+0x4c>
 810ea8e:	1c59      	adds	r1, r3, #1
 810ea90:	d103      	bne.n	810ea9a <_raise_r+0x42>
 810ea92:	2316      	movs	r3, #22
 810ea94:	6003      	str	r3, [r0, #0]
 810ea96:	2001      	movs	r0, #1
 810ea98:	e7e7      	b.n	810ea6a <_raise_r+0x12>
 810ea9a:	2400      	movs	r4, #0
 810ea9c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810eaa0:	4628      	mov	r0, r5
 810eaa2:	4798      	blx	r3
 810eaa4:	2000      	movs	r0, #0
 810eaa6:	e7e0      	b.n	810ea6a <_raise_r+0x12>

0810eaa8 <raise>:
 810eaa8:	4b02      	ldr	r3, [pc, #8]	; (810eab4 <raise+0xc>)
 810eaaa:	4601      	mov	r1, r0
 810eaac:	6818      	ldr	r0, [r3, #0]
 810eaae:	f7ff bfd3 	b.w	810ea58 <_raise_r>
 810eab2:	bf00      	nop
 810eab4:	10000034 	.word	0x10000034

0810eab8 <_kill_r>:
 810eab8:	b538      	push	{r3, r4, r5, lr}
 810eaba:	4c07      	ldr	r4, [pc, #28]	; (810ead8 <_kill_r+0x20>)
 810eabc:	2300      	movs	r3, #0
 810eabe:	4605      	mov	r5, r0
 810eac0:	4608      	mov	r0, r1
 810eac2:	4611      	mov	r1, r2
 810eac4:	6023      	str	r3, [r4, #0]
 810eac6:	f7f3 f991 	bl	8101dec <_kill>
 810eaca:	1c43      	adds	r3, r0, #1
 810eacc:	d102      	bne.n	810ead4 <_kill_r+0x1c>
 810eace:	6823      	ldr	r3, [r4, #0]
 810ead0:	b103      	cbz	r3, 810ead4 <_kill_r+0x1c>
 810ead2:	602b      	str	r3, [r5, #0]
 810ead4:	bd38      	pop	{r3, r4, r5, pc}
 810ead6:	bf00      	nop
 810ead8:	10009fd4 	.word	0x10009fd4

0810eadc <_getpid_r>:
 810eadc:	f7f3 b97e 	b.w	8101ddc <_getpid>

0810eae0 <siprintf>:
 810eae0:	b40e      	push	{r1, r2, r3}
 810eae2:	b500      	push	{lr}
 810eae4:	b09c      	sub	sp, #112	; 0x70
 810eae6:	ab1d      	add	r3, sp, #116	; 0x74
 810eae8:	9002      	str	r0, [sp, #8]
 810eaea:	9006      	str	r0, [sp, #24]
 810eaec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 810eaf0:	4809      	ldr	r0, [pc, #36]	; (810eb18 <siprintf+0x38>)
 810eaf2:	9107      	str	r1, [sp, #28]
 810eaf4:	9104      	str	r1, [sp, #16]
 810eaf6:	4909      	ldr	r1, [pc, #36]	; (810eb1c <siprintf+0x3c>)
 810eaf8:	f853 2b04 	ldr.w	r2, [r3], #4
 810eafc:	9105      	str	r1, [sp, #20]
 810eafe:	6800      	ldr	r0, [r0, #0]
 810eb00:	9301      	str	r3, [sp, #4]
 810eb02:	a902      	add	r1, sp, #8
 810eb04:	f001 fb80 	bl	8110208 <_svfiprintf_r>
 810eb08:	9b02      	ldr	r3, [sp, #8]
 810eb0a:	2200      	movs	r2, #0
 810eb0c:	701a      	strb	r2, [r3, #0]
 810eb0e:	b01c      	add	sp, #112	; 0x70
 810eb10:	f85d eb04 	ldr.w	lr, [sp], #4
 810eb14:	b003      	add	sp, #12
 810eb16:	4770      	bx	lr
 810eb18:	10000034 	.word	0x10000034
 810eb1c:	ffff0208 	.word	0xffff0208

0810eb20 <_strtol_l.isra.0>:
 810eb20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810eb24:	4680      	mov	r8, r0
 810eb26:	4689      	mov	r9, r1
 810eb28:	4692      	mov	sl, r2
 810eb2a:	461e      	mov	r6, r3
 810eb2c:	460f      	mov	r7, r1
 810eb2e:	463d      	mov	r5, r7
 810eb30:	9808      	ldr	r0, [sp, #32]
 810eb32:	f815 4b01 	ldrb.w	r4, [r5], #1
 810eb36:	f000 ff4f 	bl	810f9d8 <__locale_ctype_ptr_l>
 810eb3a:	4420      	add	r0, r4
 810eb3c:	7843      	ldrb	r3, [r0, #1]
 810eb3e:	f013 0308 	ands.w	r3, r3, #8
 810eb42:	d132      	bne.n	810ebaa <_strtol_l.isra.0+0x8a>
 810eb44:	2c2d      	cmp	r4, #45	; 0x2d
 810eb46:	d132      	bne.n	810ebae <_strtol_l.isra.0+0x8e>
 810eb48:	787c      	ldrb	r4, [r7, #1]
 810eb4a:	1cbd      	adds	r5, r7, #2
 810eb4c:	2201      	movs	r2, #1
 810eb4e:	2e00      	cmp	r6, #0
 810eb50:	d05d      	beq.n	810ec0e <_strtol_l.isra.0+0xee>
 810eb52:	2e10      	cmp	r6, #16
 810eb54:	d109      	bne.n	810eb6a <_strtol_l.isra.0+0x4a>
 810eb56:	2c30      	cmp	r4, #48	; 0x30
 810eb58:	d107      	bne.n	810eb6a <_strtol_l.isra.0+0x4a>
 810eb5a:	782b      	ldrb	r3, [r5, #0]
 810eb5c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810eb60:	2b58      	cmp	r3, #88	; 0x58
 810eb62:	d14f      	bne.n	810ec04 <_strtol_l.isra.0+0xe4>
 810eb64:	786c      	ldrb	r4, [r5, #1]
 810eb66:	2610      	movs	r6, #16
 810eb68:	3502      	adds	r5, #2
 810eb6a:	2a00      	cmp	r2, #0
 810eb6c:	bf14      	ite	ne
 810eb6e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 810eb72:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 810eb76:	2700      	movs	r7, #0
 810eb78:	fbb1 fcf6 	udiv	ip, r1, r6
 810eb7c:	4638      	mov	r0, r7
 810eb7e:	fb06 1e1c 	mls	lr, r6, ip, r1
 810eb82:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 810eb86:	2b09      	cmp	r3, #9
 810eb88:	d817      	bhi.n	810ebba <_strtol_l.isra.0+0x9a>
 810eb8a:	461c      	mov	r4, r3
 810eb8c:	42a6      	cmp	r6, r4
 810eb8e:	dd23      	ble.n	810ebd8 <_strtol_l.isra.0+0xb8>
 810eb90:	1c7b      	adds	r3, r7, #1
 810eb92:	d007      	beq.n	810eba4 <_strtol_l.isra.0+0x84>
 810eb94:	4584      	cmp	ip, r0
 810eb96:	d31c      	bcc.n	810ebd2 <_strtol_l.isra.0+0xb2>
 810eb98:	d101      	bne.n	810eb9e <_strtol_l.isra.0+0x7e>
 810eb9a:	45a6      	cmp	lr, r4
 810eb9c:	db19      	blt.n	810ebd2 <_strtol_l.isra.0+0xb2>
 810eb9e:	fb00 4006 	mla	r0, r0, r6, r4
 810eba2:	2701      	movs	r7, #1
 810eba4:	f815 4b01 	ldrb.w	r4, [r5], #1
 810eba8:	e7eb      	b.n	810eb82 <_strtol_l.isra.0+0x62>
 810ebaa:	462f      	mov	r7, r5
 810ebac:	e7bf      	b.n	810eb2e <_strtol_l.isra.0+0xe>
 810ebae:	2c2b      	cmp	r4, #43	; 0x2b
 810ebb0:	bf04      	itt	eq
 810ebb2:	1cbd      	addeq	r5, r7, #2
 810ebb4:	787c      	ldrbeq	r4, [r7, #1]
 810ebb6:	461a      	mov	r2, r3
 810ebb8:	e7c9      	b.n	810eb4e <_strtol_l.isra.0+0x2e>
 810ebba:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 810ebbe:	2b19      	cmp	r3, #25
 810ebc0:	d801      	bhi.n	810ebc6 <_strtol_l.isra.0+0xa6>
 810ebc2:	3c37      	subs	r4, #55	; 0x37
 810ebc4:	e7e2      	b.n	810eb8c <_strtol_l.isra.0+0x6c>
 810ebc6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 810ebca:	2b19      	cmp	r3, #25
 810ebcc:	d804      	bhi.n	810ebd8 <_strtol_l.isra.0+0xb8>
 810ebce:	3c57      	subs	r4, #87	; 0x57
 810ebd0:	e7dc      	b.n	810eb8c <_strtol_l.isra.0+0x6c>
 810ebd2:	f04f 37ff 	mov.w	r7, #4294967295
 810ebd6:	e7e5      	b.n	810eba4 <_strtol_l.isra.0+0x84>
 810ebd8:	1c7b      	adds	r3, r7, #1
 810ebda:	d108      	bne.n	810ebee <_strtol_l.isra.0+0xce>
 810ebdc:	2322      	movs	r3, #34	; 0x22
 810ebde:	f8c8 3000 	str.w	r3, [r8]
 810ebe2:	4608      	mov	r0, r1
 810ebe4:	f1ba 0f00 	cmp.w	sl, #0
 810ebe8:	d107      	bne.n	810ebfa <_strtol_l.isra.0+0xda>
 810ebea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810ebee:	b102      	cbz	r2, 810ebf2 <_strtol_l.isra.0+0xd2>
 810ebf0:	4240      	negs	r0, r0
 810ebf2:	f1ba 0f00 	cmp.w	sl, #0
 810ebf6:	d0f8      	beq.n	810ebea <_strtol_l.isra.0+0xca>
 810ebf8:	b10f      	cbz	r7, 810ebfe <_strtol_l.isra.0+0xde>
 810ebfa:	f105 39ff 	add.w	r9, r5, #4294967295
 810ebfe:	f8ca 9000 	str.w	r9, [sl]
 810ec02:	e7f2      	b.n	810ebea <_strtol_l.isra.0+0xca>
 810ec04:	2430      	movs	r4, #48	; 0x30
 810ec06:	2e00      	cmp	r6, #0
 810ec08:	d1af      	bne.n	810eb6a <_strtol_l.isra.0+0x4a>
 810ec0a:	2608      	movs	r6, #8
 810ec0c:	e7ad      	b.n	810eb6a <_strtol_l.isra.0+0x4a>
 810ec0e:	2c30      	cmp	r4, #48	; 0x30
 810ec10:	d0a3      	beq.n	810eb5a <_strtol_l.isra.0+0x3a>
 810ec12:	260a      	movs	r6, #10
 810ec14:	e7a9      	b.n	810eb6a <_strtol_l.isra.0+0x4a>
	...

0810ec18 <strtol>:
 810ec18:	4b08      	ldr	r3, [pc, #32]	; (810ec3c <strtol+0x24>)
 810ec1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810ec1c:	681c      	ldr	r4, [r3, #0]
 810ec1e:	4d08      	ldr	r5, [pc, #32]	; (810ec40 <strtol+0x28>)
 810ec20:	6a23      	ldr	r3, [r4, #32]
 810ec22:	2b00      	cmp	r3, #0
 810ec24:	bf08      	it	eq
 810ec26:	462b      	moveq	r3, r5
 810ec28:	9300      	str	r3, [sp, #0]
 810ec2a:	4613      	mov	r3, r2
 810ec2c:	460a      	mov	r2, r1
 810ec2e:	4601      	mov	r1, r0
 810ec30:	4620      	mov	r0, r4
 810ec32:	f7ff ff75 	bl	810eb20 <_strtol_l.isra.0>
 810ec36:	b003      	add	sp, #12
 810ec38:	bd30      	pop	{r4, r5, pc}
 810ec3a:	bf00      	nop
 810ec3c:	10000034 	.word	0x10000034
 810ec40:	10000098 	.word	0x10000098

0810ec44 <_vsiprintf_r>:
 810ec44:	b500      	push	{lr}
 810ec46:	b09b      	sub	sp, #108	; 0x6c
 810ec48:	9100      	str	r1, [sp, #0]
 810ec4a:	9104      	str	r1, [sp, #16]
 810ec4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 810ec50:	9105      	str	r1, [sp, #20]
 810ec52:	9102      	str	r1, [sp, #8]
 810ec54:	4905      	ldr	r1, [pc, #20]	; (810ec6c <_vsiprintf_r+0x28>)
 810ec56:	9103      	str	r1, [sp, #12]
 810ec58:	4669      	mov	r1, sp
 810ec5a:	f001 fad5 	bl	8110208 <_svfiprintf_r>
 810ec5e:	9b00      	ldr	r3, [sp, #0]
 810ec60:	2200      	movs	r2, #0
 810ec62:	701a      	strb	r2, [r3, #0]
 810ec64:	b01b      	add	sp, #108	; 0x6c
 810ec66:	f85d fb04 	ldr.w	pc, [sp], #4
 810ec6a:	bf00      	nop
 810ec6c:	ffff0208 	.word	0xffff0208

0810ec70 <vsiprintf>:
 810ec70:	4613      	mov	r3, r2
 810ec72:	460a      	mov	r2, r1
 810ec74:	4601      	mov	r1, r0
 810ec76:	4802      	ldr	r0, [pc, #8]	; (810ec80 <vsiprintf+0x10>)
 810ec78:	6800      	ldr	r0, [r0, #0]
 810ec7a:	f7ff bfe3 	b.w	810ec44 <_vsiprintf_r>
 810ec7e:	bf00      	nop
 810ec80:	10000034 	.word	0x10000034

0810ec84 <__register_exitproc>:
 810ec84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810ec88:	4d2c      	ldr	r5, [pc, #176]	; (810ed3c <__register_exitproc+0xb8>)
 810ec8a:	682c      	ldr	r4, [r5, #0]
 810ec8c:	4607      	mov	r7, r0
 810ec8e:	460e      	mov	r6, r1
 810ec90:	4691      	mov	r9, r2
 810ec92:	4698      	mov	r8, r3
 810ec94:	b934      	cbnz	r4, 810eca4 <__register_exitproc+0x20>
 810ec96:	4b2a      	ldr	r3, [pc, #168]	; (810ed40 <__register_exitproc+0xbc>)
 810ec98:	4c2a      	ldr	r4, [pc, #168]	; (810ed44 <__register_exitproc+0xc0>)
 810ec9a:	602c      	str	r4, [r5, #0]
 810ec9c:	b113      	cbz	r3, 810eca4 <__register_exitproc+0x20>
 810ec9e:	681b      	ldr	r3, [r3, #0]
 810eca0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 810eca4:	6863      	ldr	r3, [r4, #4]
 810eca6:	2b1f      	cmp	r3, #31
 810eca8:	dd3d      	ble.n	810ed26 <__register_exitproc+0xa2>
 810ecaa:	4b27      	ldr	r3, [pc, #156]	; (810ed48 <__register_exitproc+0xc4>)
 810ecac:	b91b      	cbnz	r3, 810ecb6 <__register_exitproc+0x32>
 810ecae:	f04f 30ff 	mov.w	r0, #4294967295
 810ecb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810ecb6:	208c      	movs	r0, #140	; 0x8c
 810ecb8:	f000 fea0 	bl	810f9fc <malloc>
 810ecbc:	4604      	mov	r4, r0
 810ecbe:	2800      	cmp	r0, #0
 810ecc0:	d0f5      	beq.n	810ecae <__register_exitproc+0x2a>
 810ecc2:	2300      	movs	r3, #0
 810ecc4:	682a      	ldr	r2, [r5, #0]
 810ecc6:	6002      	str	r2, [r0, #0]
 810ecc8:	6043      	str	r3, [r0, #4]
 810ecca:	6028      	str	r0, [r5, #0]
 810eccc:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 810ecd0:	b30f      	cbz	r7, 810ed16 <__register_exitproc+0x92>
 810ecd2:	f44f 7084 	mov.w	r0, #264	; 0x108
 810ecd6:	f000 fe91 	bl	810f9fc <malloc>
 810ecda:	2800      	cmp	r0, #0
 810ecdc:	d0e7      	beq.n	810ecae <__register_exitproc+0x2a>
 810ecde:	2300      	movs	r3, #0
 810ece0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 810ece4:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 810ece8:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 810ecec:	6862      	ldr	r2, [r4, #4]
 810ecee:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 810ecf2:	2301      	movs	r3, #1
 810ecf4:	4093      	lsls	r3, r2
 810ecf6:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 810ecfa:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 810ecfe:	431a      	orrs	r2, r3
 810ed00:	2f02      	cmp	r7, #2
 810ed02:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 810ed06:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 810ed0a:	bf02      	ittt	eq
 810ed0c:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 810ed10:	4313      	orreq	r3, r2
 810ed12:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 810ed16:	6863      	ldr	r3, [r4, #4]
 810ed18:	1c5a      	adds	r2, r3, #1
 810ed1a:	3302      	adds	r3, #2
 810ed1c:	6062      	str	r2, [r4, #4]
 810ed1e:	2000      	movs	r0, #0
 810ed20:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 810ed24:	e7c5      	b.n	810ecb2 <__register_exitproc+0x2e>
 810ed26:	2f00      	cmp	r7, #0
 810ed28:	d0f5      	beq.n	810ed16 <__register_exitproc+0x92>
 810ed2a:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 810ed2e:	2800      	cmp	r0, #0
 810ed30:	d1dc      	bne.n	810ecec <__register_exitproc+0x68>
 810ed32:	4b05      	ldr	r3, [pc, #20]	; (810ed48 <__register_exitproc+0xc4>)
 810ed34:	2b00      	cmp	r3, #0
 810ed36:	d0ba      	beq.n	810ecae <__register_exitproc+0x2a>
 810ed38:	e7cb      	b.n	810ecd2 <__register_exitproc+0x4e>
 810ed3a:	bf00      	nop
 810ed3c:	10009600 	.word	0x10009600
 810ed40:	00000000 	.word	0x00000000
 810ed44:	10009574 	.word	0x10009574
 810ed48:	0810f9fd 	.word	0x0810f9fd

0810ed4c <quorem>:
 810ed4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ed50:	6903      	ldr	r3, [r0, #16]
 810ed52:	690c      	ldr	r4, [r1, #16]
 810ed54:	42a3      	cmp	r3, r4
 810ed56:	4680      	mov	r8, r0
 810ed58:	f2c0 8082 	blt.w	810ee60 <quorem+0x114>
 810ed5c:	3c01      	subs	r4, #1
 810ed5e:	f101 0714 	add.w	r7, r1, #20
 810ed62:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 810ed66:	f100 0614 	add.w	r6, r0, #20
 810ed6a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 810ed6e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 810ed72:	eb06 030c 	add.w	r3, r6, ip
 810ed76:	3501      	adds	r5, #1
 810ed78:	eb07 090c 	add.w	r9, r7, ip
 810ed7c:	9301      	str	r3, [sp, #4]
 810ed7e:	fbb0 f5f5 	udiv	r5, r0, r5
 810ed82:	b395      	cbz	r5, 810edea <quorem+0x9e>
 810ed84:	f04f 0a00 	mov.w	sl, #0
 810ed88:	4638      	mov	r0, r7
 810ed8a:	46b6      	mov	lr, r6
 810ed8c:	46d3      	mov	fp, sl
 810ed8e:	f850 2b04 	ldr.w	r2, [r0], #4
 810ed92:	b293      	uxth	r3, r2
 810ed94:	fb05 a303 	mla	r3, r5, r3, sl
 810ed98:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 810ed9c:	b29b      	uxth	r3, r3
 810ed9e:	ebab 0303 	sub.w	r3, fp, r3
 810eda2:	0c12      	lsrs	r2, r2, #16
 810eda4:	f8de b000 	ldr.w	fp, [lr]
 810eda8:	fb05 a202 	mla	r2, r5, r2, sl
 810edac:	fa13 f38b 	uxtah	r3, r3, fp
 810edb0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 810edb4:	fa1f fb82 	uxth.w	fp, r2
 810edb8:	f8de 2000 	ldr.w	r2, [lr]
 810edbc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 810edc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810edc4:	b29b      	uxth	r3, r3
 810edc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810edca:	4581      	cmp	r9, r0
 810edcc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 810edd0:	f84e 3b04 	str.w	r3, [lr], #4
 810edd4:	d2db      	bcs.n	810ed8e <quorem+0x42>
 810edd6:	f856 300c 	ldr.w	r3, [r6, ip]
 810edda:	b933      	cbnz	r3, 810edea <quorem+0x9e>
 810eddc:	9b01      	ldr	r3, [sp, #4]
 810edde:	3b04      	subs	r3, #4
 810ede0:	429e      	cmp	r6, r3
 810ede2:	461a      	mov	r2, r3
 810ede4:	d330      	bcc.n	810ee48 <quorem+0xfc>
 810ede6:	f8c8 4010 	str.w	r4, [r8, #16]
 810edea:	4640      	mov	r0, r8
 810edec:	f001 f836 	bl	810fe5c <__mcmp>
 810edf0:	2800      	cmp	r0, #0
 810edf2:	db25      	blt.n	810ee40 <quorem+0xf4>
 810edf4:	3501      	adds	r5, #1
 810edf6:	4630      	mov	r0, r6
 810edf8:	f04f 0c00 	mov.w	ip, #0
 810edfc:	f857 2b04 	ldr.w	r2, [r7], #4
 810ee00:	f8d0 e000 	ldr.w	lr, [r0]
 810ee04:	b293      	uxth	r3, r2
 810ee06:	ebac 0303 	sub.w	r3, ip, r3
 810ee0a:	0c12      	lsrs	r2, r2, #16
 810ee0c:	fa13 f38e 	uxtah	r3, r3, lr
 810ee10:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 810ee14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810ee18:	b29b      	uxth	r3, r3
 810ee1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810ee1e:	45b9      	cmp	r9, r7
 810ee20:	ea4f 4c22 	mov.w	ip, r2, asr #16
 810ee24:	f840 3b04 	str.w	r3, [r0], #4
 810ee28:	d2e8      	bcs.n	810edfc <quorem+0xb0>
 810ee2a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 810ee2e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 810ee32:	b92a      	cbnz	r2, 810ee40 <quorem+0xf4>
 810ee34:	3b04      	subs	r3, #4
 810ee36:	429e      	cmp	r6, r3
 810ee38:	461a      	mov	r2, r3
 810ee3a:	d30b      	bcc.n	810ee54 <quorem+0x108>
 810ee3c:	f8c8 4010 	str.w	r4, [r8, #16]
 810ee40:	4628      	mov	r0, r5
 810ee42:	b003      	add	sp, #12
 810ee44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ee48:	6812      	ldr	r2, [r2, #0]
 810ee4a:	3b04      	subs	r3, #4
 810ee4c:	2a00      	cmp	r2, #0
 810ee4e:	d1ca      	bne.n	810ede6 <quorem+0x9a>
 810ee50:	3c01      	subs	r4, #1
 810ee52:	e7c5      	b.n	810ede0 <quorem+0x94>
 810ee54:	6812      	ldr	r2, [r2, #0]
 810ee56:	3b04      	subs	r3, #4
 810ee58:	2a00      	cmp	r2, #0
 810ee5a:	d1ef      	bne.n	810ee3c <quorem+0xf0>
 810ee5c:	3c01      	subs	r4, #1
 810ee5e:	e7ea      	b.n	810ee36 <quorem+0xea>
 810ee60:	2000      	movs	r0, #0
 810ee62:	e7ee      	b.n	810ee42 <quorem+0xf6>
 810ee64:	0000      	movs	r0, r0
	...

0810ee68 <_dtoa_r>:
 810ee68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ee6c:	ec57 6b10 	vmov	r6, r7, d0
 810ee70:	b097      	sub	sp, #92	; 0x5c
 810ee72:	6a45      	ldr	r5, [r0, #36]	; 0x24
 810ee74:	9106      	str	r1, [sp, #24]
 810ee76:	4604      	mov	r4, r0
 810ee78:	920b      	str	r2, [sp, #44]	; 0x2c
 810ee7a:	9312      	str	r3, [sp, #72]	; 0x48
 810ee7c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 810ee80:	e9cd 6700 	strd	r6, r7, [sp]
 810ee84:	b93d      	cbnz	r5, 810ee96 <_dtoa_r+0x2e>
 810ee86:	2010      	movs	r0, #16
 810ee88:	f000 fdb8 	bl	810f9fc <malloc>
 810ee8c:	6260      	str	r0, [r4, #36]	; 0x24
 810ee8e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 810ee92:	6005      	str	r5, [r0, #0]
 810ee94:	60c5      	str	r5, [r0, #12]
 810ee96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810ee98:	6819      	ldr	r1, [r3, #0]
 810ee9a:	b151      	cbz	r1, 810eeb2 <_dtoa_r+0x4a>
 810ee9c:	685a      	ldr	r2, [r3, #4]
 810ee9e:	604a      	str	r2, [r1, #4]
 810eea0:	2301      	movs	r3, #1
 810eea2:	4093      	lsls	r3, r2
 810eea4:	608b      	str	r3, [r1, #8]
 810eea6:	4620      	mov	r0, r4
 810eea8:	f000 fdf6 	bl	810fa98 <_Bfree>
 810eeac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810eeae:	2200      	movs	r2, #0
 810eeb0:	601a      	str	r2, [r3, #0]
 810eeb2:	1e3b      	subs	r3, r7, #0
 810eeb4:	bfbb      	ittet	lt
 810eeb6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 810eeba:	9301      	strlt	r3, [sp, #4]
 810eebc:	2300      	movge	r3, #0
 810eebe:	2201      	movlt	r2, #1
 810eec0:	bfac      	ite	ge
 810eec2:	f8c8 3000 	strge.w	r3, [r8]
 810eec6:	f8c8 2000 	strlt.w	r2, [r8]
 810eeca:	4baf      	ldr	r3, [pc, #700]	; (810f188 <_dtoa_r+0x320>)
 810eecc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 810eed0:	ea33 0308 	bics.w	r3, r3, r8
 810eed4:	d114      	bne.n	810ef00 <_dtoa_r+0x98>
 810eed6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810eed8:	f242 730f 	movw	r3, #9999	; 0x270f
 810eedc:	6013      	str	r3, [r2, #0]
 810eede:	9b00      	ldr	r3, [sp, #0]
 810eee0:	b923      	cbnz	r3, 810eeec <_dtoa_r+0x84>
 810eee2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 810eee6:	2800      	cmp	r0, #0
 810eee8:	f000 8542 	beq.w	810f970 <_dtoa_r+0xb08>
 810eeec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810eeee:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 810f19c <_dtoa_r+0x334>
 810eef2:	2b00      	cmp	r3, #0
 810eef4:	f000 8544 	beq.w	810f980 <_dtoa_r+0xb18>
 810eef8:	f10b 0303 	add.w	r3, fp, #3
 810eefc:	f000 bd3e 	b.w	810f97c <_dtoa_r+0xb14>
 810ef00:	e9dd 6700 	ldrd	r6, r7, [sp]
 810ef04:	2200      	movs	r2, #0
 810ef06:	2300      	movs	r3, #0
 810ef08:	4630      	mov	r0, r6
 810ef0a:	4639      	mov	r1, r7
 810ef0c:	f7f1 fe74 	bl	8100bf8 <__aeabi_dcmpeq>
 810ef10:	4681      	mov	r9, r0
 810ef12:	b168      	cbz	r0, 810ef30 <_dtoa_r+0xc8>
 810ef14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810ef16:	2301      	movs	r3, #1
 810ef18:	6013      	str	r3, [r2, #0]
 810ef1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810ef1c:	2b00      	cmp	r3, #0
 810ef1e:	f000 8524 	beq.w	810f96a <_dtoa_r+0xb02>
 810ef22:	4b9a      	ldr	r3, [pc, #616]	; (810f18c <_dtoa_r+0x324>)
 810ef24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810ef26:	f103 3bff 	add.w	fp, r3, #4294967295
 810ef2a:	6013      	str	r3, [r2, #0]
 810ef2c:	f000 bd28 	b.w	810f980 <_dtoa_r+0xb18>
 810ef30:	aa14      	add	r2, sp, #80	; 0x50
 810ef32:	a915      	add	r1, sp, #84	; 0x54
 810ef34:	ec47 6b10 	vmov	d0, r6, r7
 810ef38:	4620      	mov	r0, r4
 810ef3a:	f001 f806 	bl	810ff4a <__d2b>
 810ef3e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 810ef42:	9004      	str	r0, [sp, #16]
 810ef44:	2d00      	cmp	r5, #0
 810ef46:	d07c      	beq.n	810f042 <_dtoa_r+0x1da>
 810ef48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810ef4c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 810ef50:	46b2      	mov	sl, r6
 810ef52:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 810ef56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 810ef5a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 810ef5e:	2200      	movs	r2, #0
 810ef60:	4b8b      	ldr	r3, [pc, #556]	; (810f190 <_dtoa_r+0x328>)
 810ef62:	4650      	mov	r0, sl
 810ef64:	4659      	mov	r1, fp
 810ef66:	f7f1 fa27 	bl	81003b8 <__aeabi_dsub>
 810ef6a:	a381      	add	r3, pc, #516	; (adr r3, 810f170 <_dtoa_r+0x308>)
 810ef6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ef70:	f7f1 fbda 	bl	8100728 <__aeabi_dmul>
 810ef74:	a380      	add	r3, pc, #512	; (adr r3, 810f178 <_dtoa_r+0x310>)
 810ef76:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ef7a:	f7f1 fa1f 	bl	81003bc <__adddf3>
 810ef7e:	4606      	mov	r6, r0
 810ef80:	4628      	mov	r0, r5
 810ef82:	460f      	mov	r7, r1
 810ef84:	f7f1 fb66 	bl	8100654 <__aeabi_i2d>
 810ef88:	a37d      	add	r3, pc, #500	; (adr r3, 810f180 <_dtoa_r+0x318>)
 810ef8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ef8e:	f7f1 fbcb 	bl	8100728 <__aeabi_dmul>
 810ef92:	4602      	mov	r2, r0
 810ef94:	460b      	mov	r3, r1
 810ef96:	4630      	mov	r0, r6
 810ef98:	4639      	mov	r1, r7
 810ef9a:	f7f1 fa0f 	bl	81003bc <__adddf3>
 810ef9e:	4606      	mov	r6, r0
 810efa0:	460f      	mov	r7, r1
 810efa2:	f7f1 fe71 	bl	8100c88 <__aeabi_d2iz>
 810efa6:	2200      	movs	r2, #0
 810efa8:	4682      	mov	sl, r0
 810efaa:	2300      	movs	r3, #0
 810efac:	4630      	mov	r0, r6
 810efae:	4639      	mov	r1, r7
 810efb0:	f7f1 fe2c 	bl	8100c0c <__aeabi_dcmplt>
 810efb4:	b148      	cbz	r0, 810efca <_dtoa_r+0x162>
 810efb6:	4650      	mov	r0, sl
 810efb8:	f7f1 fb4c 	bl	8100654 <__aeabi_i2d>
 810efbc:	4632      	mov	r2, r6
 810efbe:	463b      	mov	r3, r7
 810efc0:	f7f1 fe1a 	bl	8100bf8 <__aeabi_dcmpeq>
 810efc4:	b908      	cbnz	r0, 810efca <_dtoa_r+0x162>
 810efc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 810efca:	f1ba 0f16 	cmp.w	sl, #22
 810efce:	d859      	bhi.n	810f084 <_dtoa_r+0x21c>
 810efd0:	4970      	ldr	r1, [pc, #448]	; (810f194 <_dtoa_r+0x32c>)
 810efd2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 810efd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 810efda:	e9d1 0100 	ldrd	r0, r1, [r1]
 810efde:	f7f1 fe33 	bl	8100c48 <__aeabi_dcmpgt>
 810efe2:	2800      	cmp	r0, #0
 810efe4:	d050      	beq.n	810f088 <_dtoa_r+0x220>
 810efe6:	f10a 3aff 	add.w	sl, sl, #4294967295
 810efea:	2300      	movs	r3, #0
 810efec:	930f      	str	r3, [sp, #60]	; 0x3c
 810efee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810eff0:	1b5d      	subs	r5, r3, r5
 810eff2:	f1b5 0801 	subs.w	r8, r5, #1
 810eff6:	bf49      	itett	mi
 810eff8:	f1c5 0301 	rsbmi	r3, r5, #1
 810effc:	2300      	movpl	r3, #0
 810effe:	9305      	strmi	r3, [sp, #20]
 810f000:	f04f 0800 	movmi.w	r8, #0
 810f004:	bf58      	it	pl
 810f006:	9305      	strpl	r3, [sp, #20]
 810f008:	f1ba 0f00 	cmp.w	sl, #0
 810f00c:	db3e      	blt.n	810f08c <_dtoa_r+0x224>
 810f00e:	2300      	movs	r3, #0
 810f010:	44d0      	add	r8, sl
 810f012:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 810f016:	9307      	str	r3, [sp, #28]
 810f018:	9b06      	ldr	r3, [sp, #24]
 810f01a:	2b09      	cmp	r3, #9
 810f01c:	f200 8090 	bhi.w	810f140 <_dtoa_r+0x2d8>
 810f020:	2b05      	cmp	r3, #5
 810f022:	bfc4      	itt	gt
 810f024:	3b04      	subgt	r3, #4
 810f026:	9306      	strgt	r3, [sp, #24]
 810f028:	9b06      	ldr	r3, [sp, #24]
 810f02a:	f1a3 0302 	sub.w	r3, r3, #2
 810f02e:	bfcc      	ite	gt
 810f030:	2500      	movgt	r5, #0
 810f032:	2501      	movle	r5, #1
 810f034:	2b03      	cmp	r3, #3
 810f036:	f200 808f 	bhi.w	810f158 <_dtoa_r+0x2f0>
 810f03a:	e8df f003 	tbb	[pc, r3]
 810f03e:	7f7d      	.short	0x7f7d
 810f040:	7131      	.short	0x7131
 810f042:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 810f046:	441d      	add	r5, r3
 810f048:	f205 4032 	addw	r0, r5, #1074	; 0x432
 810f04c:	2820      	cmp	r0, #32
 810f04e:	dd13      	ble.n	810f078 <_dtoa_r+0x210>
 810f050:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 810f054:	9b00      	ldr	r3, [sp, #0]
 810f056:	fa08 f800 	lsl.w	r8, r8, r0
 810f05a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 810f05e:	fa23 f000 	lsr.w	r0, r3, r0
 810f062:	ea48 0000 	orr.w	r0, r8, r0
 810f066:	f7f1 fae5 	bl	8100634 <__aeabi_ui2d>
 810f06a:	2301      	movs	r3, #1
 810f06c:	4682      	mov	sl, r0
 810f06e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 810f072:	3d01      	subs	r5, #1
 810f074:	9313      	str	r3, [sp, #76]	; 0x4c
 810f076:	e772      	b.n	810ef5e <_dtoa_r+0xf6>
 810f078:	9b00      	ldr	r3, [sp, #0]
 810f07a:	f1c0 0020 	rsb	r0, r0, #32
 810f07e:	fa03 f000 	lsl.w	r0, r3, r0
 810f082:	e7f0      	b.n	810f066 <_dtoa_r+0x1fe>
 810f084:	2301      	movs	r3, #1
 810f086:	e7b1      	b.n	810efec <_dtoa_r+0x184>
 810f088:	900f      	str	r0, [sp, #60]	; 0x3c
 810f08a:	e7b0      	b.n	810efee <_dtoa_r+0x186>
 810f08c:	9b05      	ldr	r3, [sp, #20]
 810f08e:	eba3 030a 	sub.w	r3, r3, sl
 810f092:	9305      	str	r3, [sp, #20]
 810f094:	f1ca 0300 	rsb	r3, sl, #0
 810f098:	9307      	str	r3, [sp, #28]
 810f09a:	2300      	movs	r3, #0
 810f09c:	930e      	str	r3, [sp, #56]	; 0x38
 810f09e:	e7bb      	b.n	810f018 <_dtoa_r+0x1b0>
 810f0a0:	2301      	movs	r3, #1
 810f0a2:	930a      	str	r3, [sp, #40]	; 0x28
 810f0a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810f0a6:	2b00      	cmp	r3, #0
 810f0a8:	dd59      	ble.n	810f15e <_dtoa_r+0x2f6>
 810f0aa:	9302      	str	r3, [sp, #8]
 810f0ac:	4699      	mov	r9, r3
 810f0ae:	6a66      	ldr	r6, [r4, #36]	; 0x24
 810f0b0:	2200      	movs	r2, #0
 810f0b2:	6072      	str	r2, [r6, #4]
 810f0b4:	2204      	movs	r2, #4
 810f0b6:	f102 0014 	add.w	r0, r2, #20
 810f0ba:	4298      	cmp	r0, r3
 810f0bc:	6871      	ldr	r1, [r6, #4]
 810f0be:	d953      	bls.n	810f168 <_dtoa_r+0x300>
 810f0c0:	4620      	mov	r0, r4
 810f0c2:	f000 fcb5 	bl	810fa30 <_Balloc>
 810f0c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810f0c8:	6030      	str	r0, [r6, #0]
 810f0ca:	f1b9 0f0e 	cmp.w	r9, #14
 810f0ce:	f8d3 b000 	ldr.w	fp, [r3]
 810f0d2:	f200 80e6 	bhi.w	810f2a2 <_dtoa_r+0x43a>
 810f0d6:	2d00      	cmp	r5, #0
 810f0d8:	f000 80e3 	beq.w	810f2a2 <_dtoa_r+0x43a>
 810f0dc:	ed9d 7b00 	vldr	d7, [sp]
 810f0e0:	f1ba 0f00 	cmp.w	sl, #0
 810f0e4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 810f0e8:	dd74      	ble.n	810f1d4 <_dtoa_r+0x36c>
 810f0ea:	4a2a      	ldr	r2, [pc, #168]	; (810f194 <_dtoa_r+0x32c>)
 810f0ec:	f00a 030f 	and.w	r3, sl, #15
 810f0f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 810f0f4:	ed93 7b00 	vldr	d7, [r3]
 810f0f8:	ea4f 162a 	mov.w	r6, sl, asr #4
 810f0fc:	06f0      	lsls	r0, r6, #27
 810f0fe:	ed8d 7b08 	vstr	d7, [sp, #32]
 810f102:	d565      	bpl.n	810f1d0 <_dtoa_r+0x368>
 810f104:	4b24      	ldr	r3, [pc, #144]	; (810f198 <_dtoa_r+0x330>)
 810f106:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 810f10a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810f10e:	f7f1 fc35 	bl	810097c <__aeabi_ddiv>
 810f112:	e9cd 0100 	strd	r0, r1, [sp]
 810f116:	f006 060f 	and.w	r6, r6, #15
 810f11a:	2503      	movs	r5, #3
 810f11c:	4f1e      	ldr	r7, [pc, #120]	; (810f198 <_dtoa_r+0x330>)
 810f11e:	e04c      	b.n	810f1ba <_dtoa_r+0x352>
 810f120:	2301      	movs	r3, #1
 810f122:	930a      	str	r3, [sp, #40]	; 0x28
 810f124:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810f126:	4453      	add	r3, sl
 810f128:	f103 0901 	add.w	r9, r3, #1
 810f12c:	9302      	str	r3, [sp, #8]
 810f12e:	464b      	mov	r3, r9
 810f130:	2b01      	cmp	r3, #1
 810f132:	bfb8      	it	lt
 810f134:	2301      	movlt	r3, #1
 810f136:	e7ba      	b.n	810f0ae <_dtoa_r+0x246>
 810f138:	2300      	movs	r3, #0
 810f13a:	e7b2      	b.n	810f0a2 <_dtoa_r+0x23a>
 810f13c:	2300      	movs	r3, #0
 810f13e:	e7f0      	b.n	810f122 <_dtoa_r+0x2ba>
 810f140:	2501      	movs	r5, #1
 810f142:	2300      	movs	r3, #0
 810f144:	9306      	str	r3, [sp, #24]
 810f146:	950a      	str	r5, [sp, #40]	; 0x28
 810f148:	f04f 33ff 	mov.w	r3, #4294967295
 810f14c:	9302      	str	r3, [sp, #8]
 810f14e:	4699      	mov	r9, r3
 810f150:	2200      	movs	r2, #0
 810f152:	2312      	movs	r3, #18
 810f154:	920b      	str	r2, [sp, #44]	; 0x2c
 810f156:	e7aa      	b.n	810f0ae <_dtoa_r+0x246>
 810f158:	2301      	movs	r3, #1
 810f15a:	930a      	str	r3, [sp, #40]	; 0x28
 810f15c:	e7f4      	b.n	810f148 <_dtoa_r+0x2e0>
 810f15e:	2301      	movs	r3, #1
 810f160:	9302      	str	r3, [sp, #8]
 810f162:	4699      	mov	r9, r3
 810f164:	461a      	mov	r2, r3
 810f166:	e7f5      	b.n	810f154 <_dtoa_r+0x2ec>
 810f168:	3101      	adds	r1, #1
 810f16a:	6071      	str	r1, [r6, #4]
 810f16c:	0052      	lsls	r2, r2, #1
 810f16e:	e7a2      	b.n	810f0b6 <_dtoa_r+0x24e>
 810f170:	636f4361 	.word	0x636f4361
 810f174:	3fd287a7 	.word	0x3fd287a7
 810f178:	8b60c8b3 	.word	0x8b60c8b3
 810f17c:	3fc68a28 	.word	0x3fc68a28
 810f180:	509f79fb 	.word	0x509f79fb
 810f184:	3fd34413 	.word	0x3fd34413
 810f188:	7ff00000 	.word	0x7ff00000
 810f18c:	08110f04 	.word	0x08110f04
 810f190:	3ff80000 	.word	0x3ff80000
 810f194:	08110fc8 	.word	0x08110fc8
 810f198:	08110fa0 	.word	0x08110fa0
 810f19c:	08110f30 	.word	0x08110f30
 810f1a0:	07f1      	lsls	r1, r6, #31
 810f1a2:	d508      	bpl.n	810f1b6 <_dtoa_r+0x34e>
 810f1a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810f1a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 810f1ac:	f7f1 fabc 	bl	8100728 <__aeabi_dmul>
 810f1b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 810f1b4:	3501      	adds	r5, #1
 810f1b6:	1076      	asrs	r6, r6, #1
 810f1b8:	3708      	adds	r7, #8
 810f1ba:	2e00      	cmp	r6, #0
 810f1bc:	d1f0      	bne.n	810f1a0 <_dtoa_r+0x338>
 810f1be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 810f1c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 810f1c6:	f7f1 fbd9 	bl	810097c <__aeabi_ddiv>
 810f1ca:	e9cd 0100 	strd	r0, r1, [sp]
 810f1ce:	e01a      	b.n	810f206 <_dtoa_r+0x39e>
 810f1d0:	2502      	movs	r5, #2
 810f1d2:	e7a3      	b.n	810f11c <_dtoa_r+0x2b4>
 810f1d4:	f000 80a0 	beq.w	810f318 <_dtoa_r+0x4b0>
 810f1d8:	f1ca 0600 	rsb	r6, sl, #0
 810f1dc:	4b9f      	ldr	r3, [pc, #636]	; (810f45c <_dtoa_r+0x5f4>)
 810f1de:	4fa0      	ldr	r7, [pc, #640]	; (810f460 <_dtoa_r+0x5f8>)
 810f1e0:	f006 020f 	and.w	r2, r6, #15
 810f1e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810f1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f1ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 810f1f0:	f7f1 fa9a 	bl	8100728 <__aeabi_dmul>
 810f1f4:	e9cd 0100 	strd	r0, r1, [sp]
 810f1f8:	1136      	asrs	r6, r6, #4
 810f1fa:	2300      	movs	r3, #0
 810f1fc:	2502      	movs	r5, #2
 810f1fe:	2e00      	cmp	r6, #0
 810f200:	d17f      	bne.n	810f302 <_dtoa_r+0x49a>
 810f202:	2b00      	cmp	r3, #0
 810f204:	d1e1      	bne.n	810f1ca <_dtoa_r+0x362>
 810f206:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810f208:	2b00      	cmp	r3, #0
 810f20a:	f000 8087 	beq.w	810f31c <_dtoa_r+0x4b4>
 810f20e:	e9dd 6700 	ldrd	r6, r7, [sp]
 810f212:	2200      	movs	r2, #0
 810f214:	4b93      	ldr	r3, [pc, #588]	; (810f464 <_dtoa_r+0x5fc>)
 810f216:	4630      	mov	r0, r6
 810f218:	4639      	mov	r1, r7
 810f21a:	f7f1 fcf7 	bl	8100c0c <__aeabi_dcmplt>
 810f21e:	2800      	cmp	r0, #0
 810f220:	d07c      	beq.n	810f31c <_dtoa_r+0x4b4>
 810f222:	f1b9 0f00 	cmp.w	r9, #0
 810f226:	d079      	beq.n	810f31c <_dtoa_r+0x4b4>
 810f228:	9b02      	ldr	r3, [sp, #8]
 810f22a:	2b00      	cmp	r3, #0
 810f22c:	dd35      	ble.n	810f29a <_dtoa_r+0x432>
 810f22e:	f10a 33ff 	add.w	r3, sl, #4294967295
 810f232:	9308      	str	r3, [sp, #32]
 810f234:	4639      	mov	r1, r7
 810f236:	2200      	movs	r2, #0
 810f238:	4b8b      	ldr	r3, [pc, #556]	; (810f468 <_dtoa_r+0x600>)
 810f23a:	4630      	mov	r0, r6
 810f23c:	f7f1 fa74 	bl	8100728 <__aeabi_dmul>
 810f240:	e9cd 0100 	strd	r0, r1, [sp]
 810f244:	9f02      	ldr	r7, [sp, #8]
 810f246:	3501      	adds	r5, #1
 810f248:	4628      	mov	r0, r5
 810f24a:	f7f1 fa03 	bl	8100654 <__aeabi_i2d>
 810f24e:	e9dd 2300 	ldrd	r2, r3, [sp]
 810f252:	f7f1 fa69 	bl	8100728 <__aeabi_dmul>
 810f256:	2200      	movs	r2, #0
 810f258:	4b84      	ldr	r3, [pc, #528]	; (810f46c <_dtoa_r+0x604>)
 810f25a:	f7f1 f8af 	bl	81003bc <__adddf3>
 810f25e:	4605      	mov	r5, r0
 810f260:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 810f264:	2f00      	cmp	r7, #0
 810f266:	d15d      	bne.n	810f324 <_dtoa_r+0x4bc>
 810f268:	2200      	movs	r2, #0
 810f26a:	4b81      	ldr	r3, [pc, #516]	; (810f470 <_dtoa_r+0x608>)
 810f26c:	e9dd 0100 	ldrd	r0, r1, [sp]
 810f270:	f7f1 f8a2 	bl	81003b8 <__aeabi_dsub>
 810f274:	462a      	mov	r2, r5
 810f276:	4633      	mov	r3, r6
 810f278:	e9cd 0100 	strd	r0, r1, [sp]
 810f27c:	f7f1 fce4 	bl	8100c48 <__aeabi_dcmpgt>
 810f280:	2800      	cmp	r0, #0
 810f282:	f040 8288 	bne.w	810f796 <_dtoa_r+0x92e>
 810f286:	462a      	mov	r2, r5
 810f288:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 810f28c:	e9dd 0100 	ldrd	r0, r1, [sp]
 810f290:	f7f1 fcbc 	bl	8100c0c <__aeabi_dcmplt>
 810f294:	2800      	cmp	r0, #0
 810f296:	f040 827c 	bne.w	810f792 <_dtoa_r+0x92a>
 810f29a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 810f29e:	e9cd 2300 	strd	r2, r3, [sp]
 810f2a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810f2a4:	2b00      	cmp	r3, #0
 810f2a6:	f2c0 8150 	blt.w	810f54a <_dtoa_r+0x6e2>
 810f2aa:	f1ba 0f0e 	cmp.w	sl, #14
 810f2ae:	f300 814c 	bgt.w	810f54a <_dtoa_r+0x6e2>
 810f2b2:	4b6a      	ldr	r3, [pc, #424]	; (810f45c <_dtoa_r+0x5f4>)
 810f2b4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 810f2b8:	ed93 7b00 	vldr	d7, [r3]
 810f2bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810f2be:	2b00      	cmp	r3, #0
 810f2c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 810f2c4:	f280 80d8 	bge.w	810f478 <_dtoa_r+0x610>
 810f2c8:	f1b9 0f00 	cmp.w	r9, #0
 810f2cc:	f300 80d4 	bgt.w	810f478 <_dtoa_r+0x610>
 810f2d0:	f040 825e 	bne.w	810f790 <_dtoa_r+0x928>
 810f2d4:	2200      	movs	r2, #0
 810f2d6:	4b66      	ldr	r3, [pc, #408]	; (810f470 <_dtoa_r+0x608>)
 810f2d8:	ec51 0b17 	vmov	r0, r1, d7
 810f2dc:	f7f1 fa24 	bl	8100728 <__aeabi_dmul>
 810f2e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 810f2e4:	f7f1 fca6 	bl	8100c34 <__aeabi_dcmpge>
 810f2e8:	464f      	mov	r7, r9
 810f2ea:	464e      	mov	r6, r9
 810f2ec:	2800      	cmp	r0, #0
 810f2ee:	f040 8234 	bne.w	810f75a <_dtoa_r+0x8f2>
 810f2f2:	2331      	movs	r3, #49	; 0x31
 810f2f4:	f10b 0501 	add.w	r5, fp, #1
 810f2f8:	f88b 3000 	strb.w	r3, [fp]
 810f2fc:	f10a 0a01 	add.w	sl, sl, #1
 810f300:	e22f      	b.n	810f762 <_dtoa_r+0x8fa>
 810f302:	07f2      	lsls	r2, r6, #31
 810f304:	d505      	bpl.n	810f312 <_dtoa_r+0x4aa>
 810f306:	e9d7 2300 	ldrd	r2, r3, [r7]
 810f30a:	f7f1 fa0d 	bl	8100728 <__aeabi_dmul>
 810f30e:	3501      	adds	r5, #1
 810f310:	2301      	movs	r3, #1
 810f312:	1076      	asrs	r6, r6, #1
 810f314:	3708      	adds	r7, #8
 810f316:	e772      	b.n	810f1fe <_dtoa_r+0x396>
 810f318:	2502      	movs	r5, #2
 810f31a:	e774      	b.n	810f206 <_dtoa_r+0x39e>
 810f31c:	f8cd a020 	str.w	sl, [sp, #32]
 810f320:	464f      	mov	r7, r9
 810f322:	e791      	b.n	810f248 <_dtoa_r+0x3e0>
 810f324:	4b4d      	ldr	r3, [pc, #308]	; (810f45c <_dtoa_r+0x5f4>)
 810f326:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 810f32a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 810f32e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810f330:	2b00      	cmp	r3, #0
 810f332:	d047      	beq.n	810f3c4 <_dtoa_r+0x55c>
 810f334:	4602      	mov	r2, r0
 810f336:	460b      	mov	r3, r1
 810f338:	2000      	movs	r0, #0
 810f33a:	494e      	ldr	r1, [pc, #312]	; (810f474 <_dtoa_r+0x60c>)
 810f33c:	f7f1 fb1e 	bl	810097c <__aeabi_ddiv>
 810f340:	462a      	mov	r2, r5
 810f342:	4633      	mov	r3, r6
 810f344:	f7f1 f838 	bl	81003b8 <__aeabi_dsub>
 810f348:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 810f34c:	465d      	mov	r5, fp
 810f34e:	e9dd 0100 	ldrd	r0, r1, [sp]
 810f352:	f7f1 fc99 	bl	8100c88 <__aeabi_d2iz>
 810f356:	4606      	mov	r6, r0
 810f358:	f7f1 f97c 	bl	8100654 <__aeabi_i2d>
 810f35c:	4602      	mov	r2, r0
 810f35e:	460b      	mov	r3, r1
 810f360:	e9dd 0100 	ldrd	r0, r1, [sp]
 810f364:	f7f1 f828 	bl	81003b8 <__aeabi_dsub>
 810f368:	3630      	adds	r6, #48	; 0x30
 810f36a:	f805 6b01 	strb.w	r6, [r5], #1
 810f36e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 810f372:	e9cd 0100 	strd	r0, r1, [sp]
 810f376:	f7f1 fc49 	bl	8100c0c <__aeabi_dcmplt>
 810f37a:	2800      	cmp	r0, #0
 810f37c:	d163      	bne.n	810f446 <_dtoa_r+0x5de>
 810f37e:	e9dd 2300 	ldrd	r2, r3, [sp]
 810f382:	2000      	movs	r0, #0
 810f384:	4937      	ldr	r1, [pc, #220]	; (810f464 <_dtoa_r+0x5fc>)
 810f386:	f7f1 f817 	bl	81003b8 <__aeabi_dsub>
 810f38a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 810f38e:	f7f1 fc3d 	bl	8100c0c <__aeabi_dcmplt>
 810f392:	2800      	cmp	r0, #0
 810f394:	f040 80b7 	bne.w	810f506 <_dtoa_r+0x69e>
 810f398:	eba5 030b 	sub.w	r3, r5, fp
 810f39c:	429f      	cmp	r7, r3
 810f39e:	f77f af7c 	ble.w	810f29a <_dtoa_r+0x432>
 810f3a2:	2200      	movs	r2, #0
 810f3a4:	4b30      	ldr	r3, [pc, #192]	; (810f468 <_dtoa_r+0x600>)
 810f3a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 810f3aa:	f7f1 f9bd 	bl	8100728 <__aeabi_dmul>
 810f3ae:	2200      	movs	r2, #0
 810f3b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 810f3b4:	4b2c      	ldr	r3, [pc, #176]	; (810f468 <_dtoa_r+0x600>)
 810f3b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 810f3ba:	f7f1 f9b5 	bl	8100728 <__aeabi_dmul>
 810f3be:	e9cd 0100 	strd	r0, r1, [sp]
 810f3c2:	e7c4      	b.n	810f34e <_dtoa_r+0x4e6>
 810f3c4:	462a      	mov	r2, r5
 810f3c6:	4633      	mov	r3, r6
 810f3c8:	f7f1 f9ae 	bl	8100728 <__aeabi_dmul>
 810f3cc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 810f3d0:	eb0b 0507 	add.w	r5, fp, r7
 810f3d4:	465e      	mov	r6, fp
 810f3d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 810f3da:	f7f1 fc55 	bl	8100c88 <__aeabi_d2iz>
 810f3de:	4607      	mov	r7, r0
 810f3e0:	f7f1 f938 	bl	8100654 <__aeabi_i2d>
 810f3e4:	3730      	adds	r7, #48	; 0x30
 810f3e6:	4602      	mov	r2, r0
 810f3e8:	460b      	mov	r3, r1
 810f3ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 810f3ee:	f7f0 ffe3 	bl	81003b8 <__aeabi_dsub>
 810f3f2:	f806 7b01 	strb.w	r7, [r6], #1
 810f3f6:	42ae      	cmp	r6, r5
 810f3f8:	e9cd 0100 	strd	r0, r1, [sp]
 810f3fc:	f04f 0200 	mov.w	r2, #0
 810f400:	d126      	bne.n	810f450 <_dtoa_r+0x5e8>
 810f402:	4b1c      	ldr	r3, [pc, #112]	; (810f474 <_dtoa_r+0x60c>)
 810f404:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 810f408:	f7f0 ffd8 	bl	81003bc <__adddf3>
 810f40c:	4602      	mov	r2, r0
 810f40e:	460b      	mov	r3, r1
 810f410:	e9dd 0100 	ldrd	r0, r1, [sp]
 810f414:	f7f1 fc18 	bl	8100c48 <__aeabi_dcmpgt>
 810f418:	2800      	cmp	r0, #0
 810f41a:	d174      	bne.n	810f506 <_dtoa_r+0x69e>
 810f41c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 810f420:	2000      	movs	r0, #0
 810f422:	4914      	ldr	r1, [pc, #80]	; (810f474 <_dtoa_r+0x60c>)
 810f424:	f7f0 ffc8 	bl	81003b8 <__aeabi_dsub>
 810f428:	4602      	mov	r2, r0
 810f42a:	460b      	mov	r3, r1
 810f42c:	e9dd 0100 	ldrd	r0, r1, [sp]
 810f430:	f7f1 fbec 	bl	8100c0c <__aeabi_dcmplt>
 810f434:	2800      	cmp	r0, #0
 810f436:	f43f af30 	beq.w	810f29a <_dtoa_r+0x432>
 810f43a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810f43e:	2b30      	cmp	r3, #48	; 0x30
 810f440:	f105 32ff 	add.w	r2, r5, #4294967295
 810f444:	d002      	beq.n	810f44c <_dtoa_r+0x5e4>
 810f446:	f8dd a020 	ldr.w	sl, [sp, #32]
 810f44a:	e04a      	b.n	810f4e2 <_dtoa_r+0x67a>
 810f44c:	4615      	mov	r5, r2
 810f44e:	e7f4      	b.n	810f43a <_dtoa_r+0x5d2>
 810f450:	4b05      	ldr	r3, [pc, #20]	; (810f468 <_dtoa_r+0x600>)
 810f452:	f7f1 f969 	bl	8100728 <__aeabi_dmul>
 810f456:	e9cd 0100 	strd	r0, r1, [sp]
 810f45a:	e7bc      	b.n	810f3d6 <_dtoa_r+0x56e>
 810f45c:	08110fc8 	.word	0x08110fc8
 810f460:	08110fa0 	.word	0x08110fa0
 810f464:	3ff00000 	.word	0x3ff00000
 810f468:	40240000 	.word	0x40240000
 810f46c:	401c0000 	.word	0x401c0000
 810f470:	40140000 	.word	0x40140000
 810f474:	3fe00000 	.word	0x3fe00000
 810f478:	e9dd 6700 	ldrd	r6, r7, [sp]
 810f47c:	465d      	mov	r5, fp
 810f47e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810f482:	4630      	mov	r0, r6
 810f484:	4639      	mov	r1, r7
 810f486:	f7f1 fa79 	bl	810097c <__aeabi_ddiv>
 810f48a:	f7f1 fbfd 	bl	8100c88 <__aeabi_d2iz>
 810f48e:	4680      	mov	r8, r0
 810f490:	f7f1 f8e0 	bl	8100654 <__aeabi_i2d>
 810f494:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810f498:	f7f1 f946 	bl	8100728 <__aeabi_dmul>
 810f49c:	4602      	mov	r2, r0
 810f49e:	460b      	mov	r3, r1
 810f4a0:	4630      	mov	r0, r6
 810f4a2:	4639      	mov	r1, r7
 810f4a4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 810f4a8:	f7f0 ff86 	bl	81003b8 <__aeabi_dsub>
 810f4ac:	f805 6b01 	strb.w	r6, [r5], #1
 810f4b0:	eba5 060b 	sub.w	r6, r5, fp
 810f4b4:	45b1      	cmp	r9, r6
 810f4b6:	4602      	mov	r2, r0
 810f4b8:	460b      	mov	r3, r1
 810f4ba:	d139      	bne.n	810f530 <_dtoa_r+0x6c8>
 810f4bc:	f7f0 ff7e 	bl	81003bc <__adddf3>
 810f4c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810f4c4:	4606      	mov	r6, r0
 810f4c6:	460f      	mov	r7, r1
 810f4c8:	f7f1 fbbe 	bl	8100c48 <__aeabi_dcmpgt>
 810f4cc:	b9c8      	cbnz	r0, 810f502 <_dtoa_r+0x69a>
 810f4ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810f4d2:	4630      	mov	r0, r6
 810f4d4:	4639      	mov	r1, r7
 810f4d6:	f7f1 fb8f 	bl	8100bf8 <__aeabi_dcmpeq>
 810f4da:	b110      	cbz	r0, 810f4e2 <_dtoa_r+0x67a>
 810f4dc:	f018 0f01 	tst.w	r8, #1
 810f4e0:	d10f      	bne.n	810f502 <_dtoa_r+0x69a>
 810f4e2:	9904      	ldr	r1, [sp, #16]
 810f4e4:	4620      	mov	r0, r4
 810f4e6:	f000 fad7 	bl	810fa98 <_Bfree>
 810f4ea:	2300      	movs	r3, #0
 810f4ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810f4ee:	702b      	strb	r3, [r5, #0]
 810f4f0:	f10a 0301 	add.w	r3, sl, #1
 810f4f4:	6013      	str	r3, [r2, #0]
 810f4f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810f4f8:	2b00      	cmp	r3, #0
 810f4fa:	f000 8241 	beq.w	810f980 <_dtoa_r+0xb18>
 810f4fe:	601d      	str	r5, [r3, #0]
 810f500:	e23e      	b.n	810f980 <_dtoa_r+0xb18>
 810f502:	f8cd a020 	str.w	sl, [sp, #32]
 810f506:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810f50a:	2a39      	cmp	r2, #57	; 0x39
 810f50c:	f105 33ff 	add.w	r3, r5, #4294967295
 810f510:	d108      	bne.n	810f524 <_dtoa_r+0x6bc>
 810f512:	459b      	cmp	fp, r3
 810f514:	d10a      	bne.n	810f52c <_dtoa_r+0x6c4>
 810f516:	9b08      	ldr	r3, [sp, #32]
 810f518:	3301      	adds	r3, #1
 810f51a:	9308      	str	r3, [sp, #32]
 810f51c:	2330      	movs	r3, #48	; 0x30
 810f51e:	f88b 3000 	strb.w	r3, [fp]
 810f522:	465b      	mov	r3, fp
 810f524:	781a      	ldrb	r2, [r3, #0]
 810f526:	3201      	adds	r2, #1
 810f528:	701a      	strb	r2, [r3, #0]
 810f52a:	e78c      	b.n	810f446 <_dtoa_r+0x5de>
 810f52c:	461d      	mov	r5, r3
 810f52e:	e7ea      	b.n	810f506 <_dtoa_r+0x69e>
 810f530:	2200      	movs	r2, #0
 810f532:	4b9b      	ldr	r3, [pc, #620]	; (810f7a0 <_dtoa_r+0x938>)
 810f534:	f7f1 f8f8 	bl	8100728 <__aeabi_dmul>
 810f538:	2200      	movs	r2, #0
 810f53a:	2300      	movs	r3, #0
 810f53c:	4606      	mov	r6, r0
 810f53e:	460f      	mov	r7, r1
 810f540:	f7f1 fb5a 	bl	8100bf8 <__aeabi_dcmpeq>
 810f544:	2800      	cmp	r0, #0
 810f546:	d09a      	beq.n	810f47e <_dtoa_r+0x616>
 810f548:	e7cb      	b.n	810f4e2 <_dtoa_r+0x67a>
 810f54a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810f54c:	2a00      	cmp	r2, #0
 810f54e:	f000 808b 	beq.w	810f668 <_dtoa_r+0x800>
 810f552:	9a06      	ldr	r2, [sp, #24]
 810f554:	2a01      	cmp	r2, #1
 810f556:	dc6e      	bgt.n	810f636 <_dtoa_r+0x7ce>
 810f558:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 810f55a:	2a00      	cmp	r2, #0
 810f55c:	d067      	beq.n	810f62e <_dtoa_r+0x7c6>
 810f55e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 810f562:	9f07      	ldr	r7, [sp, #28]
 810f564:	9d05      	ldr	r5, [sp, #20]
 810f566:	9a05      	ldr	r2, [sp, #20]
 810f568:	2101      	movs	r1, #1
 810f56a:	441a      	add	r2, r3
 810f56c:	4620      	mov	r0, r4
 810f56e:	9205      	str	r2, [sp, #20]
 810f570:	4498      	add	r8, r3
 810f572:	f000 fb31 	bl	810fbd8 <__i2b>
 810f576:	4606      	mov	r6, r0
 810f578:	2d00      	cmp	r5, #0
 810f57a:	dd0c      	ble.n	810f596 <_dtoa_r+0x72e>
 810f57c:	f1b8 0f00 	cmp.w	r8, #0
 810f580:	dd09      	ble.n	810f596 <_dtoa_r+0x72e>
 810f582:	4545      	cmp	r5, r8
 810f584:	9a05      	ldr	r2, [sp, #20]
 810f586:	462b      	mov	r3, r5
 810f588:	bfa8      	it	ge
 810f58a:	4643      	movge	r3, r8
 810f58c:	1ad2      	subs	r2, r2, r3
 810f58e:	9205      	str	r2, [sp, #20]
 810f590:	1aed      	subs	r5, r5, r3
 810f592:	eba8 0803 	sub.w	r8, r8, r3
 810f596:	9b07      	ldr	r3, [sp, #28]
 810f598:	b1eb      	cbz	r3, 810f5d6 <_dtoa_r+0x76e>
 810f59a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810f59c:	2b00      	cmp	r3, #0
 810f59e:	d067      	beq.n	810f670 <_dtoa_r+0x808>
 810f5a0:	b18f      	cbz	r7, 810f5c6 <_dtoa_r+0x75e>
 810f5a2:	4631      	mov	r1, r6
 810f5a4:	463a      	mov	r2, r7
 810f5a6:	4620      	mov	r0, r4
 810f5a8:	f000 fbb6 	bl	810fd18 <__pow5mult>
 810f5ac:	9a04      	ldr	r2, [sp, #16]
 810f5ae:	4601      	mov	r1, r0
 810f5b0:	4606      	mov	r6, r0
 810f5b2:	4620      	mov	r0, r4
 810f5b4:	f000 fb19 	bl	810fbea <__multiply>
 810f5b8:	9904      	ldr	r1, [sp, #16]
 810f5ba:	9008      	str	r0, [sp, #32]
 810f5bc:	4620      	mov	r0, r4
 810f5be:	f000 fa6b 	bl	810fa98 <_Bfree>
 810f5c2:	9b08      	ldr	r3, [sp, #32]
 810f5c4:	9304      	str	r3, [sp, #16]
 810f5c6:	9b07      	ldr	r3, [sp, #28]
 810f5c8:	1bda      	subs	r2, r3, r7
 810f5ca:	d004      	beq.n	810f5d6 <_dtoa_r+0x76e>
 810f5cc:	9904      	ldr	r1, [sp, #16]
 810f5ce:	4620      	mov	r0, r4
 810f5d0:	f000 fba2 	bl	810fd18 <__pow5mult>
 810f5d4:	9004      	str	r0, [sp, #16]
 810f5d6:	2101      	movs	r1, #1
 810f5d8:	4620      	mov	r0, r4
 810f5da:	f000 fafd 	bl	810fbd8 <__i2b>
 810f5de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810f5e0:	4607      	mov	r7, r0
 810f5e2:	2b00      	cmp	r3, #0
 810f5e4:	f000 81d0 	beq.w	810f988 <_dtoa_r+0xb20>
 810f5e8:	461a      	mov	r2, r3
 810f5ea:	4601      	mov	r1, r0
 810f5ec:	4620      	mov	r0, r4
 810f5ee:	f000 fb93 	bl	810fd18 <__pow5mult>
 810f5f2:	9b06      	ldr	r3, [sp, #24]
 810f5f4:	2b01      	cmp	r3, #1
 810f5f6:	4607      	mov	r7, r0
 810f5f8:	dc40      	bgt.n	810f67c <_dtoa_r+0x814>
 810f5fa:	9b00      	ldr	r3, [sp, #0]
 810f5fc:	2b00      	cmp	r3, #0
 810f5fe:	d139      	bne.n	810f674 <_dtoa_r+0x80c>
 810f600:	9b01      	ldr	r3, [sp, #4]
 810f602:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810f606:	2b00      	cmp	r3, #0
 810f608:	d136      	bne.n	810f678 <_dtoa_r+0x810>
 810f60a:	9b01      	ldr	r3, [sp, #4]
 810f60c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810f610:	0d1b      	lsrs	r3, r3, #20
 810f612:	051b      	lsls	r3, r3, #20
 810f614:	b12b      	cbz	r3, 810f622 <_dtoa_r+0x7ba>
 810f616:	9b05      	ldr	r3, [sp, #20]
 810f618:	3301      	adds	r3, #1
 810f61a:	9305      	str	r3, [sp, #20]
 810f61c:	f108 0801 	add.w	r8, r8, #1
 810f620:	2301      	movs	r3, #1
 810f622:	9307      	str	r3, [sp, #28]
 810f624:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810f626:	2b00      	cmp	r3, #0
 810f628:	d12a      	bne.n	810f680 <_dtoa_r+0x818>
 810f62a:	2001      	movs	r0, #1
 810f62c:	e030      	b.n	810f690 <_dtoa_r+0x828>
 810f62e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810f630:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 810f634:	e795      	b.n	810f562 <_dtoa_r+0x6fa>
 810f636:	9b07      	ldr	r3, [sp, #28]
 810f638:	f109 37ff 	add.w	r7, r9, #4294967295
 810f63c:	42bb      	cmp	r3, r7
 810f63e:	bfbf      	itttt	lt
 810f640:	9b07      	ldrlt	r3, [sp, #28]
 810f642:	9707      	strlt	r7, [sp, #28]
 810f644:	1afa      	sublt	r2, r7, r3
 810f646:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 810f648:	bfbb      	ittet	lt
 810f64a:	189b      	addlt	r3, r3, r2
 810f64c:	930e      	strlt	r3, [sp, #56]	; 0x38
 810f64e:	1bdf      	subge	r7, r3, r7
 810f650:	2700      	movlt	r7, #0
 810f652:	f1b9 0f00 	cmp.w	r9, #0
 810f656:	bfb5      	itete	lt
 810f658:	9b05      	ldrlt	r3, [sp, #20]
 810f65a:	9d05      	ldrge	r5, [sp, #20]
 810f65c:	eba3 0509 	sublt.w	r5, r3, r9
 810f660:	464b      	movge	r3, r9
 810f662:	bfb8      	it	lt
 810f664:	2300      	movlt	r3, #0
 810f666:	e77e      	b.n	810f566 <_dtoa_r+0x6fe>
 810f668:	9f07      	ldr	r7, [sp, #28]
 810f66a:	9d05      	ldr	r5, [sp, #20]
 810f66c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 810f66e:	e783      	b.n	810f578 <_dtoa_r+0x710>
 810f670:	9a07      	ldr	r2, [sp, #28]
 810f672:	e7ab      	b.n	810f5cc <_dtoa_r+0x764>
 810f674:	2300      	movs	r3, #0
 810f676:	e7d4      	b.n	810f622 <_dtoa_r+0x7ba>
 810f678:	9b00      	ldr	r3, [sp, #0]
 810f67a:	e7d2      	b.n	810f622 <_dtoa_r+0x7ba>
 810f67c:	2300      	movs	r3, #0
 810f67e:	9307      	str	r3, [sp, #28]
 810f680:	693b      	ldr	r3, [r7, #16]
 810f682:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 810f686:	6918      	ldr	r0, [r3, #16]
 810f688:	f000 fa58 	bl	810fb3c <__hi0bits>
 810f68c:	f1c0 0020 	rsb	r0, r0, #32
 810f690:	4440      	add	r0, r8
 810f692:	f010 001f 	ands.w	r0, r0, #31
 810f696:	d047      	beq.n	810f728 <_dtoa_r+0x8c0>
 810f698:	f1c0 0320 	rsb	r3, r0, #32
 810f69c:	2b04      	cmp	r3, #4
 810f69e:	dd3b      	ble.n	810f718 <_dtoa_r+0x8b0>
 810f6a0:	9b05      	ldr	r3, [sp, #20]
 810f6a2:	f1c0 001c 	rsb	r0, r0, #28
 810f6a6:	4403      	add	r3, r0
 810f6a8:	9305      	str	r3, [sp, #20]
 810f6aa:	4405      	add	r5, r0
 810f6ac:	4480      	add	r8, r0
 810f6ae:	9b05      	ldr	r3, [sp, #20]
 810f6b0:	2b00      	cmp	r3, #0
 810f6b2:	dd05      	ble.n	810f6c0 <_dtoa_r+0x858>
 810f6b4:	461a      	mov	r2, r3
 810f6b6:	9904      	ldr	r1, [sp, #16]
 810f6b8:	4620      	mov	r0, r4
 810f6ba:	f000 fb7b 	bl	810fdb4 <__lshift>
 810f6be:	9004      	str	r0, [sp, #16]
 810f6c0:	f1b8 0f00 	cmp.w	r8, #0
 810f6c4:	dd05      	ble.n	810f6d2 <_dtoa_r+0x86a>
 810f6c6:	4639      	mov	r1, r7
 810f6c8:	4642      	mov	r2, r8
 810f6ca:	4620      	mov	r0, r4
 810f6cc:	f000 fb72 	bl	810fdb4 <__lshift>
 810f6d0:	4607      	mov	r7, r0
 810f6d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810f6d4:	b353      	cbz	r3, 810f72c <_dtoa_r+0x8c4>
 810f6d6:	4639      	mov	r1, r7
 810f6d8:	9804      	ldr	r0, [sp, #16]
 810f6da:	f000 fbbf 	bl	810fe5c <__mcmp>
 810f6de:	2800      	cmp	r0, #0
 810f6e0:	da24      	bge.n	810f72c <_dtoa_r+0x8c4>
 810f6e2:	2300      	movs	r3, #0
 810f6e4:	220a      	movs	r2, #10
 810f6e6:	9904      	ldr	r1, [sp, #16]
 810f6e8:	4620      	mov	r0, r4
 810f6ea:	f000 f9ec 	bl	810fac6 <__multadd>
 810f6ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810f6f0:	9004      	str	r0, [sp, #16]
 810f6f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 810f6f6:	2b00      	cmp	r3, #0
 810f6f8:	f000 814d 	beq.w	810f996 <_dtoa_r+0xb2e>
 810f6fc:	2300      	movs	r3, #0
 810f6fe:	4631      	mov	r1, r6
 810f700:	220a      	movs	r2, #10
 810f702:	4620      	mov	r0, r4
 810f704:	f000 f9df 	bl	810fac6 <__multadd>
 810f708:	9b02      	ldr	r3, [sp, #8]
 810f70a:	2b00      	cmp	r3, #0
 810f70c:	4606      	mov	r6, r0
 810f70e:	dc4f      	bgt.n	810f7b0 <_dtoa_r+0x948>
 810f710:	9b06      	ldr	r3, [sp, #24]
 810f712:	2b02      	cmp	r3, #2
 810f714:	dd4c      	ble.n	810f7b0 <_dtoa_r+0x948>
 810f716:	e011      	b.n	810f73c <_dtoa_r+0x8d4>
 810f718:	d0c9      	beq.n	810f6ae <_dtoa_r+0x846>
 810f71a:	9a05      	ldr	r2, [sp, #20]
 810f71c:	331c      	adds	r3, #28
 810f71e:	441a      	add	r2, r3
 810f720:	9205      	str	r2, [sp, #20]
 810f722:	441d      	add	r5, r3
 810f724:	4498      	add	r8, r3
 810f726:	e7c2      	b.n	810f6ae <_dtoa_r+0x846>
 810f728:	4603      	mov	r3, r0
 810f72a:	e7f6      	b.n	810f71a <_dtoa_r+0x8b2>
 810f72c:	f1b9 0f00 	cmp.w	r9, #0
 810f730:	dc38      	bgt.n	810f7a4 <_dtoa_r+0x93c>
 810f732:	9b06      	ldr	r3, [sp, #24]
 810f734:	2b02      	cmp	r3, #2
 810f736:	dd35      	ble.n	810f7a4 <_dtoa_r+0x93c>
 810f738:	f8cd 9008 	str.w	r9, [sp, #8]
 810f73c:	9b02      	ldr	r3, [sp, #8]
 810f73e:	b963      	cbnz	r3, 810f75a <_dtoa_r+0x8f2>
 810f740:	4639      	mov	r1, r7
 810f742:	2205      	movs	r2, #5
 810f744:	4620      	mov	r0, r4
 810f746:	f000 f9be 	bl	810fac6 <__multadd>
 810f74a:	4601      	mov	r1, r0
 810f74c:	4607      	mov	r7, r0
 810f74e:	9804      	ldr	r0, [sp, #16]
 810f750:	f000 fb84 	bl	810fe5c <__mcmp>
 810f754:	2800      	cmp	r0, #0
 810f756:	f73f adcc 	bgt.w	810f2f2 <_dtoa_r+0x48a>
 810f75a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810f75c:	465d      	mov	r5, fp
 810f75e:	ea6f 0a03 	mvn.w	sl, r3
 810f762:	f04f 0900 	mov.w	r9, #0
 810f766:	4639      	mov	r1, r7
 810f768:	4620      	mov	r0, r4
 810f76a:	f000 f995 	bl	810fa98 <_Bfree>
 810f76e:	2e00      	cmp	r6, #0
 810f770:	f43f aeb7 	beq.w	810f4e2 <_dtoa_r+0x67a>
 810f774:	f1b9 0f00 	cmp.w	r9, #0
 810f778:	d005      	beq.n	810f786 <_dtoa_r+0x91e>
 810f77a:	45b1      	cmp	r9, r6
 810f77c:	d003      	beq.n	810f786 <_dtoa_r+0x91e>
 810f77e:	4649      	mov	r1, r9
 810f780:	4620      	mov	r0, r4
 810f782:	f000 f989 	bl	810fa98 <_Bfree>
 810f786:	4631      	mov	r1, r6
 810f788:	4620      	mov	r0, r4
 810f78a:	f000 f985 	bl	810fa98 <_Bfree>
 810f78e:	e6a8      	b.n	810f4e2 <_dtoa_r+0x67a>
 810f790:	2700      	movs	r7, #0
 810f792:	463e      	mov	r6, r7
 810f794:	e7e1      	b.n	810f75a <_dtoa_r+0x8f2>
 810f796:	f8dd a020 	ldr.w	sl, [sp, #32]
 810f79a:	463e      	mov	r6, r7
 810f79c:	e5a9      	b.n	810f2f2 <_dtoa_r+0x48a>
 810f79e:	bf00      	nop
 810f7a0:	40240000 	.word	0x40240000
 810f7a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810f7a6:	f8cd 9008 	str.w	r9, [sp, #8]
 810f7aa:	2b00      	cmp	r3, #0
 810f7ac:	f000 80fa 	beq.w	810f9a4 <_dtoa_r+0xb3c>
 810f7b0:	2d00      	cmp	r5, #0
 810f7b2:	dd05      	ble.n	810f7c0 <_dtoa_r+0x958>
 810f7b4:	4631      	mov	r1, r6
 810f7b6:	462a      	mov	r2, r5
 810f7b8:	4620      	mov	r0, r4
 810f7ba:	f000 fafb 	bl	810fdb4 <__lshift>
 810f7be:	4606      	mov	r6, r0
 810f7c0:	9b07      	ldr	r3, [sp, #28]
 810f7c2:	2b00      	cmp	r3, #0
 810f7c4:	d04c      	beq.n	810f860 <_dtoa_r+0x9f8>
 810f7c6:	6871      	ldr	r1, [r6, #4]
 810f7c8:	4620      	mov	r0, r4
 810f7ca:	f000 f931 	bl	810fa30 <_Balloc>
 810f7ce:	6932      	ldr	r2, [r6, #16]
 810f7d0:	3202      	adds	r2, #2
 810f7d2:	4605      	mov	r5, r0
 810f7d4:	0092      	lsls	r2, r2, #2
 810f7d6:	f106 010c 	add.w	r1, r6, #12
 810f7da:	300c      	adds	r0, #12
 810f7dc:	f7fe fccc 	bl	810e178 <memcpy>
 810f7e0:	2201      	movs	r2, #1
 810f7e2:	4629      	mov	r1, r5
 810f7e4:	4620      	mov	r0, r4
 810f7e6:	f000 fae5 	bl	810fdb4 <__lshift>
 810f7ea:	9b00      	ldr	r3, [sp, #0]
 810f7ec:	f8cd b014 	str.w	fp, [sp, #20]
 810f7f0:	f003 0301 	and.w	r3, r3, #1
 810f7f4:	46b1      	mov	r9, r6
 810f7f6:	9307      	str	r3, [sp, #28]
 810f7f8:	4606      	mov	r6, r0
 810f7fa:	4639      	mov	r1, r7
 810f7fc:	9804      	ldr	r0, [sp, #16]
 810f7fe:	f7ff faa5 	bl	810ed4c <quorem>
 810f802:	4649      	mov	r1, r9
 810f804:	4605      	mov	r5, r0
 810f806:	f100 0830 	add.w	r8, r0, #48	; 0x30
 810f80a:	9804      	ldr	r0, [sp, #16]
 810f80c:	f000 fb26 	bl	810fe5c <__mcmp>
 810f810:	4632      	mov	r2, r6
 810f812:	9000      	str	r0, [sp, #0]
 810f814:	4639      	mov	r1, r7
 810f816:	4620      	mov	r0, r4
 810f818:	f000 fb3a 	bl	810fe90 <__mdiff>
 810f81c:	68c3      	ldr	r3, [r0, #12]
 810f81e:	4602      	mov	r2, r0
 810f820:	bb03      	cbnz	r3, 810f864 <_dtoa_r+0x9fc>
 810f822:	4601      	mov	r1, r0
 810f824:	9008      	str	r0, [sp, #32]
 810f826:	9804      	ldr	r0, [sp, #16]
 810f828:	f000 fb18 	bl	810fe5c <__mcmp>
 810f82c:	9a08      	ldr	r2, [sp, #32]
 810f82e:	4603      	mov	r3, r0
 810f830:	4611      	mov	r1, r2
 810f832:	4620      	mov	r0, r4
 810f834:	9308      	str	r3, [sp, #32]
 810f836:	f000 f92f 	bl	810fa98 <_Bfree>
 810f83a:	9b08      	ldr	r3, [sp, #32]
 810f83c:	b9a3      	cbnz	r3, 810f868 <_dtoa_r+0xa00>
 810f83e:	9a06      	ldr	r2, [sp, #24]
 810f840:	b992      	cbnz	r2, 810f868 <_dtoa_r+0xa00>
 810f842:	9a07      	ldr	r2, [sp, #28]
 810f844:	b982      	cbnz	r2, 810f868 <_dtoa_r+0xa00>
 810f846:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 810f84a:	d029      	beq.n	810f8a0 <_dtoa_r+0xa38>
 810f84c:	9b00      	ldr	r3, [sp, #0]
 810f84e:	2b00      	cmp	r3, #0
 810f850:	dd01      	ble.n	810f856 <_dtoa_r+0x9ee>
 810f852:	f105 0831 	add.w	r8, r5, #49	; 0x31
 810f856:	9b05      	ldr	r3, [sp, #20]
 810f858:	1c5d      	adds	r5, r3, #1
 810f85a:	f883 8000 	strb.w	r8, [r3]
 810f85e:	e782      	b.n	810f766 <_dtoa_r+0x8fe>
 810f860:	4630      	mov	r0, r6
 810f862:	e7c2      	b.n	810f7ea <_dtoa_r+0x982>
 810f864:	2301      	movs	r3, #1
 810f866:	e7e3      	b.n	810f830 <_dtoa_r+0x9c8>
 810f868:	9a00      	ldr	r2, [sp, #0]
 810f86a:	2a00      	cmp	r2, #0
 810f86c:	db04      	blt.n	810f878 <_dtoa_r+0xa10>
 810f86e:	d125      	bne.n	810f8bc <_dtoa_r+0xa54>
 810f870:	9a06      	ldr	r2, [sp, #24]
 810f872:	bb1a      	cbnz	r2, 810f8bc <_dtoa_r+0xa54>
 810f874:	9a07      	ldr	r2, [sp, #28]
 810f876:	bb0a      	cbnz	r2, 810f8bc <_dtoa_r+0xa54>
 810f878:	2b00      	cmp	r3, #0
 810f87a:	ddec      	ble.n	810f856 <_dtoa_r+0x9ee>
 810f87c:	2201      	movs	r2, #1
 810f87e:	9904      	ldr	r1, [sp, #16]
 810f880:	4620      	mov	r0, r4
 810f882:	f000 fa97 	bl	810fdb4 <__lshift>
 810f886:	4639      	mov	r1, r7
 810f888:	9004      	str	r0, [sp, #16]
 810f88a:	f000 fae7 	bl	810fe5c <__mcmp>
 810f88e:	2800      	cmp	r0, #0
 810f890:	dc03      	bgt.n	810f89a <_dtoa_r+0xa32>
 810f892:	d1e0      	bne.n	810f856 <_dtoa_r+0x9ee>
 810f894:	f018 0f01 	tst.w	r8, #1
 810f898:	d0dd      	beq.n	810f856 <_dtoa_r+0x9ee>
 810f89a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 810f89e:	d1d8      	bne.n	810f852 <_dtoa_r+0x9ea>
 810f8a0:	9b05      	ldr	r3, [sp, #20]
 810f8a2:	9a05      	ldr	r2, [sp, #20]
 810f8a4:	1c5d      	adds	r5, r3, #1
 810f8a6:	2339      	movs	r3, #57	; 0x39
 810f8a8:	7013      	strb	r3, [r2, #0]
 810f8aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810f8ae:	2b39      	cmp	r3, #57	; 0x39
 810f8b0:	f105 32ff 	add.w	r2, r5, #4294967295
 810f8b4:	d04f      	beq.n	810f956 <_dtoa_r+0xaee>
 810f8b6:	3301      	adds	r3, #1
 810f8b8:	7013      	strb	r3, [r2, #0]
 810f8ba:	e754      	b.n	810f766 <_dtoa_r+0x8fe>
 810f8bc:	9a05      	ldr	r2, [sp, #20]
 810f8be:	2b00      	cmp	r3, #0
 810f8c0:	f102 0501 	add.w	r5, r2, #1
 810f8c4:	dd06      	ble.n	810f8d4 <_dtoa_r+0xa6c>
 810f8c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 810f8ca:	d0e9      	beq.n	810f8a0 <_dtoa_r+0xa38>
 810f8cc:	f108 0801 	add.w	r8, r8, #1
 810f8d0:	9b05      	ldr	r3, [sp, #20]
 810f8d2:	e7c2      	b.n	810f85a <_dtoa_r+0x9f2>
 810f8d4:	9a02      	ldr	r2, [sp, #8]
 810f8d6:	f805 8c01 	strb.w	r8, [r5, #-1]
 810f8da:	eba5 030b 	sub.w	r3, r5, fp
 810f8de:	4293      	cmp	r3, r2
 810f8e0:	d021      	beq.n	810f926 <_dtoa_r+0xabe>
 810f8e2:	2300      	movs	r3, #0
 810f8e4:	220a      	movs	r2, #10
 810f8e6:	9904      	ldr	r1, [sp, #16]
 810f8e8:	4620      	mov	r0, r4
 810f8ea:	f000 f8ec 	bl	810fac6 <__multadd>
 810f8ee:	45b1      	cmp	r9, r6
 810f8f0:	9004      	str	r0, [sp, #16]
 810f8f2:	f04f 0300 	mov.w	r3, #0
 810f8f6:	f04f 020a 	mov.w	r2, #10
 810f8fa:	4649      	mov	r1, r9
 810f8fc:	4620      	mov	r0, r4
 810f8fe:	d105      	bne.n	810f90c <_dtoa_r+0xaa4>
 810f900:	f000 f8e1 	bl	810fac6 <__multadd>
 810f904:	4681      	mov	r9, r0
 810f906:	4606      	mov	r6, r0
 810f908:	9505      	str	r5, [sp, #20]
 810f90a:	e776      	b.n	810f7fa <_dtoa_r+0x992>
 810f90c:	f000 f8db 	bl	810fac6 <__multadd>
 810f910:	4631      	mov	r1, r6
 810f912:	4681      	mov	r9, r0
 810f914:	2300      	movs	r3, #0
 810f916:	220a      	movs	r2, #10
 810f918:	4620      	mov	r0, r4
 810f91a:	f000 f8d4 	bl	810fac6 <__multadd>
 810f91e:	4606      	mov	r6, r0
 810f920:	e7f2      	b.n	810f908 <_dtoa_r+0xaa0>
 810f922:	f04f 0900 	mov.w	r9, #0
 810f926:	2201      	movs	r2, #1
 810f928:	9904      	ldr	r1, [sp, #16]
 810f92a:	4620      	mov	r0, r4
 810f92c:	f000 fa42 	bl	810fdb4 <__lshift>
 810f930:	4639      	mov	r1, r7
 810f932:	9004      	str	r0, [sp, #16]
 810f934:	f000 fa92 	bl	810fe5c <__mcmp>
 810f938:	2800      	cmp	r0, #0
 810f93a:	dcb6      	bgt.n	810f8aa <_dtoa_r+0xa42>
 810f93c:	d102      	bne.n	810f944 <_dtoa_r+0xadc>
 810f93e:	f018 0f01 	tst.w	r8, #1
 810f942:	d1b2      	bne.n	810f8aa <_dtoa_r+0xa42>
 810f944:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810f948:	2b30      	cmp	r3, #48	; 0x30
 810f94a:	f105 32ff 	add.w	r2, r5, #4294967295
 810f94e:	f47f af0a 	bne.w	810f766 <_dtoa_r+0x8fe>
 810f952:	4615      	mov	r5, r2
 810f954:	e7f6      	b.n	810f944 <_dtoa_r+0xadc>
 810f956:	4593      	cmp	fp, r2
 810f958:	d105      	bne.n	810f966 <_dtoa_r+0xafe>
 810f95a:	2331      	movs	r3, #49	; 0x31
 810f95c:	f10a 0a01 	add.w	sl, sl, #1
 810f960:	f88b 3000 	strb.w	r3, [fp]
 810f964:	e6ff      	b.n	810f766 <_dtoa_r+0x8fe>
 810f966:	4615      	mov	r5, r2
 810f968:	e79f      	b.n	810f8aa <_dtoa_r+0xa42>
 810f96a:	f8df b064 	ldr.w	fp, [pc, #100]	; 810f9d0 <_dtoa_r+0xb68>
 810f96e:	e007      	b.n	810f980 <_dtoa_r+0xb18>
 810f970:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810f972:	f8df b060 	ldr.w	fp, [pc, #96]	; 810f9d4 <_dtoa_r+0xb6c>
 810f976:	b11b      	cbz	r3, 810f980 <_dtoa_r+0xb18>
 810f978:	f10b 0308 	add.w	r3, fp, #8
 810f97c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810f97e:	6013      	str	r3, [r2, #0]
 810f980:	4658      	mov	r0, fp
 810f982:	b017      	add	sp, #92	; 0x5c
 810f984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810f988:	9b06      	ldr	r3, [sp, #24]
 810f98a:	2b01      	cmp	r3, #1
 810f98c:	f77f ae35 	ble.w	810f5fa <_dtoa_r+0x792>
 810f990:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810f992:	9307      	str	r3, [sp, #28]
 810f994:	e649      	b.n	810f62a <_dtoa_r+0x7c2>
 810f996:	9b02      	ldr	r3, [sp, #8]
 810f998:	2b00      	cmp	r3, #0
 810f99a:	dc03      	bgt.n	810f9a4 <_dtoa_r+0xb3c>
 810f99c:	9b06      	ldr	r3, [sp, #24]
 810f99e:	2b02      	cmp	r3, #2
 810f9a0:	f73f aecc 	bgt.w	810f73c <_dtoa_r+0x8d4>
 810f9a4:	465d      	mov	r5, fp
 810f9a6:	4639      	mov	r1, r7
 810f9a8:	9804      	ldr	r0, [sp, #16]
 810f9aa:	f7ff f9cf 	bl	810ed4c <quorem>
 810f9ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 810f9b2:	f805 8b01 	strb.w	r8, [r5], #1
 810f9b6:	9a02      	ldr	r2, [sp, #8]
 810f9b8:	eba5 030b 	sub.w	r3, r5, fp
 810f9bc:	429a      	cmp	r2, r3
 810f9be:	ddb0      	ble.n	810f922 <_dtoa_r+0xaba>
 810f9c0:	2300      	movs	r3, #0
 810f9c2:	220a      	movs	r2, #10
 810f9c4:	9904      	ldr	r1, [sp, #16]
 810f9c6:	4620      	mov	r0, r4
 810f9c8:	f000 f87d 	bl	810fac6 <__multadd>
 810f9cc:	9004      	str	r0, [sp, #16]
 810f9ce:	e7ea      	b.n	810f9a6 <_dtoa_r+0xb3e>
 810f9d0:	08110f03 	.word	0x08110f03
 810f9d4:	08110f27 	.word	0x08110f27

0810f9d8 <__locale_ctype_ptr_l>:
 810f9d8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 810f9dc:	4770      	bx	lr
	...

0810f9e0 <_localeconv_r>:
 810f9e0:	4b04      	ldr	r3, [pc, #16]	; (810f9f4 <_localeconv_r+0x14>)
 810f9e2:	681b      	ldr	r3, [r3, #0]
 810f9e4:	6a18      	ldr	r0, [r3, #32]
 810f9e6:	4b04      	ldr	r3, [pc, #16]	; (810f9f8 <_localeconv_r+0x18>)
 810f9e8:	2800      	cmp	r0, #0
 810f9ea:	bf08      	it	eq
 810f9ec:	4618      	moveq	r0, r3
 810f9ee:	30f0      	adds	r0, #240	; 0xf0
 810f9f0:	4770      	bx	lr
 810f9f2:	bf00      	nop
 810f9f4:	10000034 	.word	0x10000034
 810f9f8:	10000098 	.word	0x10000098

0810f9fc <malloc>:
 810f9fc:	4b02      	ldr	r3, [pc, #8]	; (810fa08 <malloc+0xc>)
 810f9fe:	4601      	mov	r1, r0
 810fa00:	6818      	ldr	r0, [r3, #0]
 810fa02:	f000 bb4d 	b.w	81100a0 <_malloc_r>
 810fa06:	bf00      	nop
 810fa08:	10000034 	.word	0x10000034

0810fa0c <__ascii_mbtowc>:
 810fa0c:	b082      	sub	sp, #8
 810fa0e:	b901      	cbnz	r1, 810fa12 <__ascii_mbtowc+0x6>
 810fa10:	a901      	add	r1, sp, #4
 810fa12:	b142      	cbz	r2, 810fa26 <__ascii_mbtowc+0x1a>
 810fa14:	b14b      	cbz	r3, 810fa2a <__ascii_mbtowc+0x1e>
 810fa16:	7813      	ldrb	r3, [r2, #0]
 810fa18:	600b      	str	r3, [r1, #0]
 810fa1a:	7812      	ldrb	r2, [r2, #0]
 810fa1c:	1c10      	adds	r0, r2, #0
 810fa1e:	bf18      	it	ne
 810fa20:	2001      	movne	r0, #1
 810fa22:	b002      	add	sp, #8
 810fa24:	4770      	bx	lr
 810fa26:	4610      	mov	r0, r2
 810fa28:	e7fb      	b.n	810fa22 <__ascii_mbtowc+0x16>
 810fa2a:	f06f 0001 	mvn.w	r0, #1
 810fa2e:	e7f8      	b.n	810fa22 <__ascii_mbtowc+0x16>

0810fa30 <_Balloc>:
 810fa30:	b570      	push	{r4, r5, r6, lr}
 810fa32:	6a45      	ldr	r5, [r0, #36]	; 0x24
 810fa34:	4604      	mov	r4, r0
 810fa36:	460e      	mov	r6, r1
 810fa38:	b93d      	cbnz	r5, 810fa4a <_Balloc+0x1a>
 810fa3a:	2010      	movs	r0, #16
 810fa3c:	f7ff ffde 	bl	810f9fc <malloc>
 810fa40:	6260      	str	r0, [r4, #36]	; 0x24
 810fa42:	e9c0 5501 	strd	r5, r5, [r0, #4]
 810fa46:	6005      	str	r5, [r0, #0]
 810fa48:	60c5      	str	r5, [r0, #12]
 810fa4a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 810fa4c:	68eb      	ldr	r3, [r5, #12]
 810fa4e:	b183      	cbz	r3, 810fa72 <_Balloc+0x42>
 810fa50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810fa52:	68db      	ldr	r3, [r3, #12]
 810fa54:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 810fa58:	b9b8      	cbnz	r0, 810fa8a <_Balloc+0x5a>
 810fa5a:	2101      	movs	r1, #1
 810fa5c:	fa01 f506 	lsl.w	r5, r1, r6
 810fa60:	1d6a      	adds	r2, r5, #5
 810fa62:	0092      	lsls	r2, r2, #2
 810fa64:	4620      	mov	r0, r4
 810fa66:	f000 fabf 	bl	810ffe8 <_calloc_r>
 810fa6a:	b160      	cbz	r0, 810fa86 <_Balloc+0x56>
 810fa6c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 810fa70:	e00e      	b.n	810fa90 <_Balloc+0x60>
 810fa72:	2221      	movs	r2, #33	; 0x21
 810fa74:	2104      	movs	r1, #4
 810fa76:	4620      	mov	r0, r4
 810fa78:	f000 fab6 	bl	810ffe8 <_calloc_r>
 810fa7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810fa7e:	60e8      	str	r0, [r5, #12]
 810fa80:	68db      	ldr	r3, [r3, #12]
 810fa82:	2b00      	cmp	r3, #0
 810fa84:	d1e4      	bne.n	810fa50 <_Balloc+0x20>
 810fa86:	2000      	movs	r0, #0
 810fa88:	bd70      	pop	{r4, r5, r6, pc}
 810fa8a:	6802      	ldr	r2, [r0, #0]
 810fa8c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 810fa90:	2300      	movs	r3, #0
 810fa92:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810fa96:	e7f7      	b.n	810fa88 <_Balloc+0x58>

0810fa98 <_Bfree>:
 810fa98:	b570      	push	{r4, r5, r6, lr}
 810fa9a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 810fa9c:	4606      	mov	r6, r0
 810fa9e:	460d      	mov	r5, r1
 810faa0:	b93c      	cbnz	r4, 810fab2 <_Bfree+0x1a>
 810faa2:	2010      	movs	r0, #16
 810faa4:	f7ff ffaa 	bl	810f9fc <malloc>
 810faa8:	6270      	str	r0, [r6, #36]	; 0x24
 810faaa:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810faae:	6004      	str	r4, [r0, #0]
 810fab0:	60c4      	str	r4, [r0, #12]
 810fab2:	b13d      	cbz	r5, 810fac4 <_Bfree+0x2c>
 810fab4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 810fab6:	686a      	ldr	r2, [r5, #4]
 810fab8:	68db      	ldr	r3, [r3, #12]
 810faba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810fabe:	6029      	str	r1, [r5, #0]
 810fac0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 810fac4:	bd70      	pop	{r4, r5, r6, pc}

0810fac6 <__multadd>:
 810fac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810faca:	690d      	ldr	r5, [r1, #16]
 810facc:	461f      	mov	r7, r3
 810face:	4606      	mov	r6, r0
 810fad0:	460c      	mov	r4, r1
 810fad2:	f101 0c14 	add.w	ip, r1, #20
 810fad6:	2300      	movs	r3, #0
 810fad8:	f8dc 0000 	ldr.w	r0, [ip]
 810fadc:	b281      	uxth	r1, r0
 810fade:	fb02 7101 	mla	r1, r2, r1, r7
 810fae2:	0c0f      	lsrs	r7, r1, #16
 810fae4:	0c00      	lsrs	r0, r0, #16
 810fae6:	fb02 7000 	mla	r0, r2, r0, r7
 810faea:	b289      	uxth	r1, r1
 810faec:	3301      	adds	r3, #1
 810faee:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 810faf2:	429d      	cmp	r5, r3
 810faf4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 810faf8:	f84c 1b04 	str.w	r1, [ip], #4
 810fafc:	dcec      	bgt.n	810fad8 <__multadd+0x12>
 810fafe:	b1d7      	cbz	r7, 810fb36 <__multadd+0x70>
 810fb00:	68a3      	ldr	r3, [r4, #8]
 810fb02:	42ab      	cmp	r3, r5
 810fb04:	dc12      	bgt.n	810fb2c <__multadd+0x66>
 810fb06:	6861      	ldr	r1, [r4, #4]
 810fb08:	4630      	mov	r0, r6
 810fb0a:	3101      	adds	r1, #1
 810fb0c:	f7ff ff90 	bl	810fa30 <_Balloc>
 810fb10:	6922      	ldr	r2, [r4, #16]
 810fb12:	3202      	adds	r2, #2
 810fb14:	f104 010c 	add.w	r1, r4, #12
 810fb18:	4680      	mov	r8, r0
 810fb1a:	0092      	lsls	r2, r2, #2
 810fb1c:	300c      	adds	r0, #12
 810fb1e:	f7fe fb2b 	bl	810e178 <memcpy>
 810fb22:	4621      	mov	r1, r4
 810fb24:	4630      	mov	r0, r6
 810fb26:	f7ff ffb7 	bl	810fa98 <_Bfree>
 810fb2a:	4644      	mov	r4, r8
 810fb2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810fb30:	3501      	adds	r5, #1
 810fb32:	615f      	str	r7, [r3, #20]
 810fb34:	6125      	str	r5, [r4, #16]
 810fb36:	4620      	mov	r0, r4
 810fb38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810fb3c <__hi0bits>:
 810fb3c:	0c02      	lsrs	r2, r0, #16
 810fb3e:	0412      	lsls	r2, r2, #16
 810fb40:	4603      	mov	r3, r0
 810fb42:	b9b2      	cbnz	r2, 810fb72 <__hi0bits+0x36>
 810fb44:	0403      	lsls	r3, r0, #16
 810fb46:	2010      	movs	r0, #16
 810fb48:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 810fb4c:	bf04      	itt	eq
 810fb4e:	021b      	lsleq	r3, r3, #8
 810fb50:	3008      	addeq	r0, #8
 810fb52:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 810fb56:	bf04      	itt	eq
 810fb58:	011b      	lsleq	r3, r3, #4
 810fb5a:	3004      	addeq	r0, #4
 810fb5c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 810fb60:	bf04      	itt	eq
 810fb62:	009b      	lsleq	r3, r3, #2
 810fb64:	3002      	addeq	r0, #2
 810fb66:	2b00      	cmp	r3, #0
 810fb68:	db06      	blt.n	810fb78 <__hi0bits+0x3c>
 810fb6a:	005b      	lsls	r3, r3, #1
 810fb6c:	d503      	bpl.n	810fb76 <__hi0bits+0x3a>
 810fb6e:	3001      	adds	r0, #1
 810fb70:	4770      	bx	lr
 810fb72:	2000      	movs	r0, #0
 810fb74:	e7e8      	b.n	810fb48 <__hi0bits+0xc>
 810fb76:	2020      	movs	r0, #32
 810fb78:	4770      	bx	lr

0810fb7a <__lo0bits>:
 810fb7a:	6803      	ldr	r3, [r0, #0]
 810fb7c:	f013 0207 	ands.w	r2, r3, #7
 810fb80:	4601      	mov	r1, r0
 810fb82:	d00b      	beq.n	810fb9c <__lo0bits+0x22>
 810fb84:	07da      	lsls	r2, r3, #31
 810fb86:	d423      	bmi.n	810fbd0 <__lo0bits+0x56>
 810fb88:	0798      	lsls	r0, r3, #30
 810fb8a:	bf49      	itett	mi
 810fb8c:	085b      	lsrmi	r3, r3, #1
 810fb8e:	089b      	lsrpl	r3, r3, #2
 810fb90:	2001      	movmi	r0, #1
 810fb92:	600b      	strmi	r3, [r1, #0]
 810fb94:	bf5c      	itt	pl
 810fb96:	600b      	strpl	r3, [r1, #0]
 810fb98:	2002      	movpl	r0, #2
 810fb9a:	4770      	bx	lr
 810fb9c:	b298      	uxth	r0, r3
 810fb9e:	b9a8      	cbnz	r0, 810fbcc <__lo0bits+0x52>
 810fba0:	0c1b      	lsrs	r3, r3, #16
 810fba2:	2010      	movs	r0, #16
 810fba4:	f013 0fff 	tst.w	r3, #255	; 0xff
 810fba8:	bf04      	itt	eq
 810fbaa:	0a1b      	lsreq	r3, r3, #8
 810fbac:	3008      	addeq	r0, #8
 810fbae:	071a      	lsls	r2, r3, #28
 810fbb0:	bf04      	itt	eq
 810fbb2:	091b      	lsreq	r3, r3, #4
 810fbb4:	3004      	addeq	r0, #4
 810fbb6:	079a      	lsls	r2, r3, #30
 810fbb8:	bf04      	itt	eq
 810fbba:	089b      	lsreq	r3, r3, #2
 810fbbc:	3002      	addeq	r0, #2
 810fbbe:	07da      	lsls	r2, r3, #31
 810fbc0:	d402      	bmi.n	810fbc8 <__lo0bits+0x4e>
 810fbc2:	085b      	lsrs	r3, r3, #1
 810fbc4:	d006      	beq.n	810fbd4 <__lo0bits+0x5a>
 810fbc6:	3001      	adds	r0, #1
 810fbc8:	600b      	str	r3, [r1, #0]
 810fbca:	4770      	bx	lr
 810fbcc:	4610      	mov	r0, r2
 810fbce:	e7e9      	b.n	810fba4 <__lo0bits+0x2a>
 810fbd0:	2000      	movs	r0, #0
 810fbd2:	4770      	bx	lr
 810fbd4:	2020      	movs	r0, #32
 810fbd6:	4770      	bx	lr

0810fbd8 <__i2b>:
 810fbd8:	b510      	push	{r4, lr}
 810fbda:	460c      	mov	r4, r1
 810fbdc:	2101      	movs	r1, #1
 810fbde:	f7ff ff27 	bl	810fa30 <_Balloc>
 810fbe2:	2201      	movs	r2, #1
 810fbe4:	6144      	str	r4, [r0, #20]
 810fbe6:	6102      	str	r2, [r0, #16]
 810fbe8:	bd10      	pop	{r4, pc}

0810fbea <__multiply>:
 810fbea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810fbee:	4614      	mov	r4, r2
 810fbf0:	690a      	ldr	r2, [r1, #16]
 810fbf2:	6923      	ldr	r3, [r4, #16]
 810fbf4:	429a      	cmp	r2, r3
 810fbf6:	bfb8      	it	lt
 810fbf8:	460b      	movlt	r3, r1
 810fbfa:	4688      	mov	r8, r1
 810fbfc:	bfbc      	itt	lt
 810fbfe:	46a0      	movlt	r8, r4
 810fc00:	461c      	movlt	r4, r3
 810fc02:	f8d8 7010 	ldr.w	r7, [r8, #16]
 810fc06:	f8d4 9010 	ldr.w	r9, [r4, #16]
 810fc0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810fc0e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 810fc12:	eb07 0609 	add.w	r6, r7, r9
 810fc16:	42b3      	cmp	r3, r6
 810fc18:	bfb8      	it	lt
 810fc1a:	3101      	addlt	r1, #1
 810fc1c:	f7ff ff08 	bl	810fa30 <_Balloc>
 810fc20:	f100 0514 	add.w	r5, r0, #20
 810fc24:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 810fc28:	462b      	mov	r3, r5
 810fc2a:	2200      	movs	r2, #0
 810fc2c:	4573      	cmp	r3, lr
 810fc2e:	d316      	bcc.n	810fc5e <__multiply+0x74>
 810fc30:	f104 0214 	add.w	r2, r4, #20
 810fc34:	f108 0114 	add.w	r1, r8, #20
 810fc38:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 810fc3c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 810fc40:	9300      	str	r3, [sp, #0]
 810fc42:	9b00      	ldr	r3, [sp, #0]
 810fc44:	9201      	str	r2, [sp, #4]
 810fc46:	4293      	cmp	r3, r2
 810fc48:	d80c      	bhi.n	810fc64 <__multiply+0x7a>
 810fc4a:	2e00      	cmp	r6, #0
 810fc4c:	dd03      	ble.n	810fc56 <__multiply+0x6c>
 810fc4e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 810fc52:	2b00      	cmp	r3, #0
 810fc54:	d05d      	beq.n	810fd12 <__multiply+0x128>
 810fc56:	6106      	str	r6, [r0, #16]
 810fc58:	b003      	add	sp, #12
 810fc5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810fc5e:	f843 2b04 	str.w	r2, [r3], #4
 810fc62:	e7e3      	b.n	810fc2c <__multiply+0x42>
 810fc64:	f8b2 b000 	ldrh.w	fp, [r2]
 810fc68:	f1bb 0f00 	cmp.w	fp, #0
 810fc6c:	d023      	beq.n	810fcb6 <__multiply+0xcc>
 810fc6e:	4689      	mov	r9, r1
 810fc70:	46ac      	mov	ip, r5
 810fc72:	f04f 0800 	mov.w	r8, #0
 810fc76:	f859 4b04 	ldr.w	r4, [r9], #4
 810fc7a:	f8dc a000 	ldr.w	sl, [ip]
 810fc7e:	b2a3      	uxth	r3, r4
 810fc80:	fa1f fa8a 	uxth.w	sl, sl
 810fc84:	fb0b a303 	mla	r3, fp, r3, sl
 810fc88:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 810fc8c:	f8dc 4000 	ldr.w	r4, [ip]
 810fc90:	4443      	add	r3, r8
 810fc92:	ea4f 4814 	mov.w	r8, r4, lsr #16
 810fc96:	fb0b 840a 	mla	r4, fp, sl, r8
 810fc9a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 810fc9e:	46e2      	mov	sl, ip
 810fca0:	b29b      	uxth	r3, r3
 810fca2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 810fca6:	454f      	cmp	r7, r9
 810fca8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 810fcac:	f84a 3b04 	str.w	r3, [sl], #4
 810fcb0:	d82b      	bhi.n	810fd0a <__multiply+0x120>
 810fcb2:	f8cc 8004 	str.w	r8, [ip, #4]
 810fcb6:	9b01      	ldr	r3, [sp, #4]
 810fcb8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 810fcbc:	3204      	adds	r2, #4
 810fcbe:	f1ba 0f00 	cmp.w	sl, #0
 810fcc2:	d020      	beq.n	810fd06 <__multiply+0x11c>
 810fcc4:	682b      	ldr	r3, [r5, #0]
 810fcc6:	4689      	mov	r9, r1
 810fcc8:	46a8      	mov	r8, r5
 810fcca:	f04f 0b00 	mov.w	fp, #0
 810fcce:	f8b9 c000 	ldrh.w	ip, [r9]
 810fcd2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 810fcd6:	fb0a 440c 	mla	r4, sl, ip, r4
 810fcda:	445c      	add	r4, fp
 810fcdc:	46c4      	mov	ip, r8
 810fcde:	b29b      	uxth	r3, r3
 810fce0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 810fce4:	f84c 3b04 	str.w	r3, [ip], #4
 810fce8:	f859 3b04 	ldr.w	r3, [r9], #4
 810fcec:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 810fcf0:	0c1b      	lsrs	r3, r3, #16
 810fcf2:	fb0a b303 	mla	r3, sl, r3, fp
 810fcf6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 810fcfa:	454f      	cmp	r7, r9
 810fcfc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 810fd00:	d805      	bhi.n	810fd0e <__multiply+0x124>
 810fd02:	f8c8 3004 	str.w	r3, [r8, #4]
 810fd06:	3504      	adds	r5, #4
 810fd08:	e79b      	b.n	810fc42 <__multiply+0x58>
 810fd0a:	46d4      	mov	ip, sl
 810fd0c:	e7b3      	b.n	810fc76 <__multiply+0x8c>
 810fd0e:	46e0      	mov	r8, ip
 810fd10:	e7dd      	b.n	810fcce <__multiply+0xe4>
 810fd12:	3e01      	subs	r6, #1
 810fd14:	e799      	b.n	810fc4a <__multiply+0x60>
	...

0810fd18 <__pow5mult>:
 810fd18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810fd1c:	4615      	mov	r5, r2
 810fd1e:	f012 0203 	ands.w	r2, r2, #3
 810fd22:	4606      	mov	r6, r0
 810fd24:	460f      	mov	r7, r1
 810fd26:	d007      	beq.n	810fd38 <__pow5mult+0x20>
 810fd28:	3a01      	subs	r2, #1
 810fd2a:	4c21      	ldr	r4, [pc, #132]	; (810fdb0 <__pow5mult+0x98>)
 810fd2c:	2300      	movs	r3, #0
 810fd2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810fd32:	f7ff fec8 	bl	810fac6 <__multadd>
 810fd36:	4607      	mov	r7, r0
 810fd38:	10ad      	asrs	r5, r5, #2
 810fd3a:	d035      	beq.n	810fda8 <__pow5mult+0x90>
 810fd3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 810fd3e:	b93c      	cbnz	r4, 810fd50 <__pow5mult+0x38>
 810fd40:	2010      	movs	r0, #16
 810fd42:	f7ff fe5b 	bl	810f9fc <malloc>
 810fd46:	6270      	str	r0, [r6, #36]	; 0x24
 810fd48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810fd4c:	6004      	str	r4, [r0, #0]
 810fd4e:	60c4      	str	r4, [r0, #12]
 810fd50:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 810fd54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810fd58:	b94c      	cbnz	r4, 810fd6e <__pow5mult+0x56>
 810fd5a:	f240 2171 	movw	r1, #625	; 0x271
 810fd5e:	4630      	mov	r0, r6
 810fd60:	f7ff ff3a 	bl	810fbd8 <__i2b>
 810fd64:	2300      	movs	r3, #0
 810fd66:	f8c8 0008 	str.w	r0, [r8, #8]
 810fd6a:	4604      	mov	r4, r0
 810fd6c:	6003      	str	r3, [r0, #0]
 810fd6e:	f04f 0800 	mov.w	r8, #0
 810fd72:	07eb      	lsls	r3, r5, #31
 810fd74:	d50a      	bpl.n	810fd8c <__pow5mult+0x74>
 810fd76:	4639      	mov	r1, r7
 810fd78:	4622      	mov	r2, r4
 810fd7a:	4630      	mov	r0, r6
 810fd7c:	f7ff ff35 	bl	810fbea <__multiply>
 810fd80:	4639      	mov	r1, r7
 810fd82:	4681      	mov	r9, r0
 810fd84:	4630      	mov	r0, r6
 810fd86:	f7ff fe87 	bl	810fa98 <_Bfree>
 810fd8a:	464f      	mov	r7, r9
 810fd8c:	106d      	asrs	r5, r5, #1
 810fd8e:	d00b      	beq.n	810fda8 <__pow5mult+0x90>
 810fd90:	6820      	ldr	r0, [r4, #0]
 810fd92:	b938      	cbnz	r0, 810fda4 <__pow5mult+0x8c>
 810fd94:	4622      	mov	r2, r4
 810fd96:	4621      	mov	r1, r4
 810fd98:	4630      	mov	r0, r6
 810fd9a:	f7ff ff26 	bl	810fbea <__multiply>
 810fd9e:	6020      	str	r0, [r4, #0]
 810fda0:	f8c0 8000 	str.w	r8, [r0]
 810fda4:	4604      	mov	r4, r0
 810fda6:	e7e4      	b.n	810fd72 <__pow5mult+0x5a>
 810fda8:	4638      	mov	r0, r7
 810fdaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810fdae:	bf00      	nop
 810fdb0:	08111090 	.word	0x08111090

0810fdb4 <__lshift>:
 810fdb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810fdb8:	460c      	mov	r4, r1
 810fdba:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810fdbe:	6923      	ldr	r3, [r4, #16]
 810fdc0:	6849      	ldr	r1, [r1, #4]
 810fdc2:	eb0a 0903 	add.w	r9, sl, r3
 810fdc6:	68a3      	ldr	r3, [r4, #8]
 810fdc8:	4607      	mov	r7, r0
 810fdca:	4616      	mov	r6, r2
 810fdcc:	f109 0501 	add.w	r5, r9, #1
 810fdd0:	42ab      	cmp	r3, r5
 810fdd2:	db32      	blt.n	810fe3a <__lshift+0x86>
 810fdd4:	4638      	mov	r0, r7
 810fdd6:	f7ff fe2b 	bl	810fa30 <_Balloc>
 810fdda:	2300      	movs	r3, #0
 810fddc:	4680      	mov	r8, r0
 810fdde:	f100 0114 	add.w	r1, r0, #20
 810fde2:	461a      	mov	r2, r3
 810fde4:	4553      	cmp	r3, sl
 810fde6:	db2b      	blt.n	810fe40 <__lshift+0x8c>
 810fde8:	6920      	ldr	r0, [r4, #16]
 810fdea:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810fdee:	f104 0314 	add.w	r3, r4, #20
 810fdf2:	f016 021f 	ands.w	r2, r6, #31
 810fdf6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810fdfa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810fdfe:	d025      	beq.n	810fe4c <__lshift+0x98>
 810fe00:	f1c2 0e20 	rsb	lr, r2, #32
 810fe04:	2000      	movs	r0, #0
 810fe06:	681e      	ldr	r6, [r3, #0]
 810fe08:	468a      	mov	sl, r1
 810fe0a:	4096      	lsls	r6, r2
 810fe0c:	4330      	orrs	r0, r6
 810fe0e:	f84a 0b04 	str.w	r0, [sl], #4
 810fe12:	f853 0b04 	ldr.w	r0, [r3], #4
 810fe16:	459c      	cmp	ip, r3
 810fe18:	fa20 f00e 	lsr.w	r0, r0, lr
 810fe1c:	d814      	bhi.n	810fe48 <__lshift+0x94>
 810fe1e:	6048      	str	r0, [r1, #4]
 810fe20:	b108      	cbz	r0, 810fe26 <__lshift+0x72>
 810fe22:	f109 0502 	add.w	r5, r9, #2
 810fe26:	3d01      	subs	r5, #1
 810fe28:	4638      	mov	r0, r7
 810fe2a:	f8c8 5010 	str.w	r5, [r8, #16]
 810fe2e:	4621      	mov	r1, r4
 810fe30:	f7ff fe32 	bl	810fa98 <_Bfree>
 810fe34:	4640      	mov	r0, r8
 810fe36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810fe3a:	3101      	adds	r1, #1
 810fe3c:	005b      	lsls	r3, r3, #1
 810fe3e:	e7c7      	b.n	810fdd0 <__lshift+0x1c>
 810fe40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 810fe44:	3301      	adds	r3, #1
 810fe46:	e7cd      	b.n	810fde4 <__lshift+0x30>
 810fe48:	4651      	mov	r1, sl
 810fe4a:	e7dc      	b.n	810fe06 <__lshift+0x52>
 810fe4c:	3904      	subs	r1, #4
 810fe4e:	f853 2b04 	ldr.w	r2, [r3], #4
 810fe52:	f841 2f04 	str.w	r2, [r1, #4]!
 810fe56:	459c      	cmp	ip, r3
 810fe58:	d8f9      	bhi.n	810fe4e <__lshift+0x9a>
 810fe5a:	e7e4      	b.n	810fe26 <__lshift+0x72>

0810fe5c <__mcmp>:
 810fe5c:	6903      	ldr	r3, [r0, #16]
 810fe5e:	690a      	ldr	r2, [r1, #16]
 810fe60:	1a9b      	subs	r3, r3, r2
 810fe62:	b530      	push	{r4, r5, lr}
 810fe64:	d10c      	bne.n	810fe80 <__mcmp+0x24>
 810fe66:	0092      	lsls	r2, r2, #2
 810fe68:	3014      	adds	r0, #20
 810fe6a:	3114      	adds	r1, #20
 810fe6c:	1884      	adds	r4, r0, r2
 810fe6e:	4411      	add	r1, r2
 810fe70:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 810fe74:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 810fe78:	4295      	cmp	r5, r2
 810fe7a:	d003      	beq.n	810fe84 <__mcmp+0x28>
 810fe7c:	d305      	bcc.n	810fe8a <__mcmp+0x2e>
 810fe7e:	2301      	movs	r3, #1
 810fe80:	4618      	mov	r0, r3
 810fe82:	bd30      	pop	{r4, r5, pc}
 810fe84:	42a0      	cmp	r0, r4
 810fe86:	d3f3      	bcc.n	810fe70 <__mcmp+0x14>
 810fe88:	e7fa      	b.n	810fe80 <__mcmp+0x24>
 810fe8a:	f04f 33ff 	mov.w	r3, #4294967295
 810fe8e:	e7f7      	b.n	810fe80 <__mcmp+0x24>

0810fe90 <__mdiff>:
 810fe90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810fe94:	460d      	mov	r5, r1
 810fe96:	4607      	mov	r7, r0
 810fe98:	4611      	mov	r1, r2
 810fe9a:	4628      	mov	r0, r5
 810fe9c:	4614      	mov	r4, r2
 810fe9e:	f7ff ffdd 	bl	810fe5c <__mcmp>
 810fea2:	1e06      	subs	r6, r0, #0
 810fea4:	d108      	bne.n	810feb8 <__mdiff+0x28>
 810fea6:	4631      	mov	r1, r6
 810fea8:	4638      	mov	r0, r7
 810feaa:	f7ff fdc1 	bl	810fa30 <_Balloc>
 810feae:	2301      	movs	r3, #1
 810feb0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 810feb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810feb8:	bfa4      	itt	ge
 810feba:	4623      	movge	r3, r4
 810febc:	462c      	movge	r4, r5
 810febe:	4638      	mov	r0, r7
 810fec0:	6861      	ldr	r1, [r4, #4]
 810fec2:	bfa6      	itte	ge
 810fec4:	461d      	movge	r5, r3
 810fec6:	2600      	movge	r6, #0
 810fec8:	2601      	movlt	r6, #1
 810feca:	f7ff fdb1 	bl	810fa30 <_Balloc>
 810fece:	692b      	ldr	r3, [r5, #16]
 810fed0:	60c6      	str	r6, [r0, #12]
 810fed2:	6926      	ldr	r6, [r4, #16]
 810fed4:	f105 0914 	add.w	r9, r5, #20
 810fed8:	f104 0214 	add.w	r2, r4, #20
 810fedc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 810fee0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 810fee4:	f100 0514 	add.w	r5, r0, #20
 810fee8:	f04f 0e00 	mov.w	lr, #0
 810feec:	f852 ab04 	ldr.w	sl, [r2], #4
 810fef0:	f859 4b04 	ldr.w	r4, [r9], #4
 810fef4:	fa1e f18a 	uxtah	r1, lr, sl
 810fef8:	b2a3      	uxth	r3, r4
 810fefa:	1ac9      	subs	r1, r1, r3
 810fefc:	0c23      	lsrs	r3, r4, #16
 810fefe:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 810ff02:	eb03 4321 	add.w	r3, r3, r1, asr #16
 810ff06:	b289      	uxth	r1, r1
 810ff08:	ea4f 4e23 	mov.w	lr, r3, asr #16
 810ff0c:	45c8      	cmp	r8, r9
 810ff0e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 810ff12:	4694      	mov	ip, r2
 810ff14:	f845 3b04 	str.w	r3, [r5], #4
 810ff18:	d8e8      	bhi.n	810feec <__mdiff+0x5c>
 810ff1a:	45bc      	cmp	ip, r7
 810ff1c:	d304      	bcc.n	810ff28 <__mdiff+0x98>
 810ff1e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 810ff22:	b183      	cbz	r3, 810ff46 <__mdiff+0xb6>
 810ff24:	6106      	str	r6, [r0, #16]
 810ff26:	e7c5      	b.n	810feb4 <__mdiff+0x24>
 810ff28:	f85c 1b04 	ldr.w	r1, [ip], #4
 810ff2c:	fa1e f381 	uxtah	r3, lr, r1
 810ff30:	141a      	asrs	r2, r3, #16
 810ff32:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 810ff36:	b29b      	uxth	r3, r3
 810ff38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810ff3c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 810ff40:	f845 3b04 	str.w	r3, [r5], #4
 810ff44:	e7e9      	b.n	810ff1a <__mdiff+0x8a>
 810ff46:	3e01      	subs	r6, #1
 810ff48:	e7e9      	b.n	810ff1e <__mdiff+0x8e>

0810ff4a <__d2b>:
 810ff4a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810ff4e:	460e      	mov	r6, r1
 810ff50:	2101      	movs	r1, #1
 810ff52:	ec59 8b10 	vmov	r8, r9, d0
 810ff56:	4615      	mov	r5, r2
 810ff58:	f7ff fd6a 	bl	810fa30 <_Balloc>
 810ff5c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 810ff60:	4607      	mov	r7, r0
 810ff62:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810ff66:	bb34      	cbnz	r4, 810ffb6 <__d2b+0x6c>
 810ff68:	9301      	str	r3, [sp, #4]
 810ff6a:	f1b8 0300 	subs.w	r3, r8, #0
 810ff6e:	d027      	beq.n	810ffc0 <__d2b+0x76>
 810ff70:	a802      	add	r0, sp, #8
 810ff72:	f840 3d08 	str.w	r3, [r0, #-8]!
 810ff76:	f7ff fe00 	bl	810fb7a <__lo0bits>
 810ff7a:	9900      	ldr	r1, [sp, #0]
 810ff7c:	b1f0      	cbz	r0, 810ffbc <__d2b+0x72>
 810ff7e:	9a01      	ldr	r2, [sp, #4]
 810ff80:	f1c0 0320 	rsb	r3, r0, #32
 810ff84:	fa02 f303 	lsl.w	r3, r2, r3
 810ff88:	430b      	orrs	r3, r1
 810ff8a:	40c2      	lsrs	r2, r0
 810ff8c:	617b      	str	r3, [r7, #20]
 810ff8e:	9201      	str	r2, [sp, #4]
 810ff90:	9b01      	ldr	r3, [sp, #4]
 810ff92:	61bb      	str	r3, [r7, #24]
 810ff94:	2b00      	cmp	r3, #0
 810ff96:	bf14      	ite	ne
 810ff98:	2102      	movne	r1, #2
 810ff9a:	2101      	moveq	r1, #1
 810ff9c:	6139      	str	r1, [r7, #16]
 810ff9e:	b1c4      	cbz	r4, 810ffd2 <__d2b+0x88>
 810ffa0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 810ffa4:	4404      	add	r4, r0
 810ffa6:	6034      	str	r4, [r6, #0]
 810ffa8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810ffac:	6028      	str	r0, [r5, #0]
 810ffae:	4638      	mov	r0, r7
 810ffb0:	b003      	add	sp, #12
 810ffb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810ffb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810ffba:	e7d5      	b.n	810ff68 <__d2b+0x1e>
 810ffbc:	6179      	str	r1, [r7, #20]
 810ffbe:	e7e7      	b.n	810ff90 <__d2b+0x46>
 810ffc0:	a801      	add	r0, sp, #4
 810ffc2:	f7ff fdda 	bl	810fb7a <__lo0bits>
 810ffc6:	9b01      	ldr	r3, [sp, #4]
 810ffc8:	617b      	str	r3, [r7, #20]
 810ffca:	2101      	movs	r1, #1
 810ffcc:	6139      	str	r1, [r7, #16]
 810ffce:	3020      	adds	r0, #32
 810ffd0:	e7e5      	b.n	810ff9e <__d2b+0x54>
 810ffd2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 810ffd6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810ffda:	6030      	str	r0, [r6, #0]
 810ffdc:	6918      	ldr	r0, [r3, #16]
 810ffde:	f7ff fdad 	bl	810fb3c <__hi0bits>
 810ffe2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 810ffe6:	e7e1      	b.n	810ffac <__d2b+0x62>

0810ffe8 <_calloc_r>:
 810ffe8:	b538      	push	{r3, r4, r5, lr}
 810ffea:	fb02 f401 	mul.w	r4, r2, r1
 810ffee:	4621      	mov	r1, r4
 810fff0:	f000 f856 	bl	81100a0 <_malloc_r>
 810fff4:	4605      	mov	r5, r0
 810fff6:	b118      	cbz	r0, 8110000 <_calloc_r+0x18>
 810fff8:	4622      	mov	r2, r4
 810fffa:	2100      	movs	r1, #0
 810fffc:	f7fe f8c7 	bl	810e18e <memset>
 8110000:	4628      	mov	r0, r5
 8110002:	bd38      	pop	{r3, r4, r5, pc}

08110004 <_free_r>:
 8110004:	b538      	push	{r3, r4, r5, lr}
 8110006:	4605      	mov	r5, r0
 8110008:	2900      	cmp	r1, #0
 811000a:	d045      	beq.n	8110098 <_free_r+0x94>
 811000c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8110010:	1f0c      	subs	r4, r1, #4
 8110012:	2b00      	cmp	r3, #0
 8110014:	bfb8      	it	lt
 8110016:	18e4      	addlt	r4, r4, r3
 8110018:	f000 fa24 	bl	8110464 <__malloc_lock>
 811001c:	4a1f      	ldr	r2, [pc, #124]	; (811009c <_free_r+0x98>)
 811001e:	6813      	ldr	r3, [r2, #0]
 8110020:	4610      	mov	r0, r2
 8110022:	b933      	cbnz	r3, 8110032 <_free_r+0x2e>
 8110024:	6063      	str	r3, [r4, #4]
 8110026:	6014      	str	r4, [r2, #0]
 8110028:	4628      	mov	r0, r5
 811002a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 811002e:	f000 ba1a 	b.w	8110466 <__malloc_unlock>
 8110032:	42a3      	cmp	r3, r4
 8110034:	d90c      	bls.n	8110050 <_free_r+0x4c>
 8110036:	6821      	ldr	r1, [r4, #0]
 8110038:	1862      	adds	r2, r4, r1
 811003a:	4293      	cmp	r3, r2
 811003c:	bf04      	itt	eq
 811003e:	681a      	ldreq	r2, [r3, #0]
 8110040:	685b      	ldreq	r3, [r3, #4]
 8110042:	6063      	str	r3, [r4, #4]
 8110044:	bf04      	itt	eq
 8110046:	1852      	addeq	r2, r2, r1
 8110048:	6022      	streq	r2, [r4, #0]
 811004a:	6004      	str	r4, [r0, #0]
 811004c:	e7ec      	b.n	8110028 <_free_r+0x24>
 811004e:	4613      	mov	r3, r2
 8110050:	685a      	ldr	r2, [r3, #4]
 8110052:	b10a      	cbz	r2, 8110058 <_free_r+0x54>
 8110054:	42a2      	cmp	r2, r4
 8110056:	d9fa      	bls.n	811004e <_free_r+0x4a>
 8110058:	6819      	ldr	r1, [r3, #0]
 811005a:	1858      	adds	r0, r3, r1
 811005c:	42a0      	cmp	r0, r4
 811005e:	d10b      	bne.n	8110078 <_free_r+0x74>
 8110060:	6820      	ldr	r0, [r4, #0]
 8110062:	4401      	add	r1, r0
 8110064:	1858      	adds	r0, r3, r1
 8110066:	4282      	cmp	r2, r0
 8110068:	6019      	str	r1, [r3, #0]
 811006a:	d1dd      	bne.n	8110028 <_free_r+0x24>
 811006c:	6810      	ldr	r0, [r2, #0]
 811006e:	6852      	ldr	r2, [r2, #4]
 8110070:	605a      	str	r2, [r3, #4]
 8110072:	4401      	add	r1, r0
 8110074:	6019      	str	r1, [r3, #0]
 8110076:	e7d7      	b.n	8110028 <_free_r+0x24>
 8110078:	d902      	bls.n	8110080 <_free_r+0x7c>
 811007a:	230c      	movs	r3, #12
 811007c:	602b      	str	r3, [r5, #0]
 811007e:	e7d3      	b.n	8110028 <_free_r+0x24>
 8110080:	6820      	ldr	r0, [r4, #0]
 8110082:	1821      	adds	r1, r4, r0
 8110084:	428a      	cmp	r2, r1
 8110086:	bf04      	itt	eq
 8110088:	6811      	ldreq	r1, [r2, #0]
 811008a:	6852      	ldreq	r2, [r2, #4]
 811008c:	6062      	str	r2, [r4, #4]
 811008e:	bf04      	itt	eq
 8110090:	1809      	addeq	r1, r1, r0
 8110092:	6021      	streq	r1, [r4, #0]
 8110094:	605c      	str	r4, [r3, #4]
 8110096:	e7c7      	b.n	8110028 <_free_r+0x24>
 8110098:	bd38      	pop	{r3, r4, r5, pc}
 811009a:	bf00      	nop
 811009c:	10009604 	.word	0x10009604

081100a0 <_malloc_r>:
 81100a0:	b570      	push	{r4, r5, r6, lr}
 81100a2:	1ccd      	adds	r5, r1, #3
 81100a4:	f025 0503 	bic.w	r5, r5, #3
 81100a8:	3508      	adds	r5, #8
 81100aa:	2d0c      	cmp	r5, #12
 81100ac:	bf38      	it	cc
 81100ae:	250c      	movcc	r5, #12
 81100b0:	2d00      	cmp	r5, #0
 81100b2:	4606      	mov	r6, r0
 81100b4:	db01      	blt.n	81100ba <_malloc_r+0x1a>
 81100b6:	42a9      	cmp	r1, r5
 81100b8:	d903      	bls.n	81100c2 <_malloc_r+0x22>
 81100ba:	230c      	movs	r3, #12
 81100bc:	6033      	str	r3, [r6, #0]
 81100be:	2000      	movs	r0, #0
 81100c0:	bd70      	pop	{r4, r5, r6, pc}
 81100c2:	f000 f9cf 	bl	8110464 <__malloc_lock>
 81100c6:	4a21      	ldr	r2, [pc, #132]	; (811014c <_malloc_r+0xac>)
 81100c8:	6814      	ldr	r4, [r2, #0]
 81100ca:	4621      	mov	r1, r4
 81100cc:	b991      	cbnz	r1, 81100f4 <_malloc_r+0x54>
 81100ce:	4c20      	ldr	r4, [pc, #128]	; (8110150 <_malloc_r+0xb0>)
 81100d0:	6823      	ldr	r3, [r4, #0]
 81100d2:	b91b      	cbnz	r3, 81100dc <_malloc_r+0x3c>
 81100d4:	4630      	mov	r0, r6
 81100d6:	f000 f98f 	bl	81103f8 <_sbrk_r>
 81100da:	6020      	str	r0, [r4, #0]
 81100dc:	4629      	mov	r1, r5
 81100de:	4630      	mov	r0, r6
 81100e0:	f000 f98a 	bl	81103f8 <_sbrk_r>
 81100e4:	1c43      	adds	r3, r0, #1
 81100e6:	d124      	bne.n	8110132 <_malloc_r+0x92>
 81100e8:	230c      	movs	r3, #12
 81100ea:	6033      	str	r3, [r6, #0]
 81100ec:	4630      	mov	r0, r6
 81100ee:	f000 f9ba 	bl	8110466 <__malloc_unlock>
 81100f2:	e7e4      	b.n	81100be <_malloc_r+0x1e>
 81100f4:	680b      	ldr	r3, [r1, #0]
 81100f6:	1b5b      	subs	r3, r3, r5
 81100f8:	d418      	bmi.n	811012c <_malloc_r+0x8c>
 81100fa:	2b0b      	cmp	r3, #11
 81100fc:	d90f      	bls.n	811011e <_malloc_r+0x7e>
 81100fe:	600b      	str	r3, [r1, #0]
 8110100:	50cd      	str	r5, [r1, r3]
 8110102:	18cc      	adds	r4, r1, r3
 8110104:	4630      	mov	r0, r6
 8110106:	f000 f9ae 	bl	8110466 <__malloc_unlock>
 811010a:	f104 000b 	add.w	r0, r4, #11
 811010e:	1d23      	adds	r3, r4, #4
 8110110:	f020 0007 	bic.w	r0, r0, #7
 8110114:	1ac3      	subs	r3, r0, r3
 8110116:	d0d3      	beq.n	81100c0 <_malloc_r+0x20>
 8110118:	425a      	negs	r2, r3
 811011a:	50e2      	str	r2, [r4, r3]
 811011c:	e7d0      	b.n	81100c0 <_malloc_r+0x20>
 811011e:	428c      	cmp	r4, r1
 8110120:	684b      	ldr	r3, [r1, #4]
 8110122:	bf16      	itet	ne
 8110124:	6063      	strne	r3, [r4, #4]
 8110126:	6013      	streq	r3, [r2, #0]
 8110128:	460c      	movne	r4, r1
 811012a:	e7eb      	b.n	8110104 <_malloc_r+0x64>
 811012c:	460c      	mov	r4, r1
 811012e:	6849      	ldr	r1, [r1, #4]
 8110130:	e7cc      	b.n	81100cc <_malloc_r+0x2c>
 8110132:	1cc4      	adds	r4, r0, #3
 8110134:	f024 0403 	bic.w	r4, r4, #3
 8110138:	42a0      	cmp	r0, r4
 811013a:	d005      	beq.n	8110148 <_malloc_r+0xa8>
 811013c:	1a21      	subs	r1, r4, r0
 811013e:	4630      	mov	r0, r6
 8110140:	f000 f95a 	bl	81103f8 <_sbrk_r>
 8110144:	3001      	adds	r0, #1
 8110146:	d0cf      	beq.n	81100e8 <_malloc_r+0x48>
 8110148:	6025      	str	r5, [r4, #0]
 811014a:	e7db      	b.n	8110104 <_malloc_r+0x64>
 811014c:	10009604 	.word	0x10009604
 8110150:	10009608 	.word	0x10009608

08110154 <__ssputs_r>:
 8110154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8110158:	688e      	ldr	r6, [r1, #8]
 811015a:	429e      	cmp	r6, r3
 811015c:	4682      	mov	sl, r0
 811015e:	460c      	mov	r4, r1
 8110160:	4690      	mov	r8, r2
 8110162:	4699      	mov	r9, r3
 8110164:	d837      	bhi.n	81101d6 <__ssputs_r+0x82>
 8110166:	898a      	ldrh	r2, [r1, #12]
 8110168:	f412 6f90 	tst.w	r2, #1152	; 0x480
 811016c:	d031      	beq.n	81101d2 <__ssputs_r+0x7e>
 811016e:	6825      	ldr	r5, [r4, #0]
 8110170:	6909      	ldr	r1, [r1, #16]
 8110172:	1a6f      	subs	r7, r5, r1
 8110174:	6965      	ldr	r5, [r4, #20]
 8110176:	2302      	movs	r3, #2
 8110178:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 811017c:	fb95 f5f3 	sdiv	r5, r5, r3
 8110180:	f109 0301 	add.w	r3, r9, #1
 8110184:	443b      	add	r3, r7
 8110186:	429d      	cmp	r5, r3
 8110188:	bf38      	it	cc
 811018a:	461d      	movcc	r5, r3
 811018c:	0553      	lsls	r3, r2, #21
 811018e:	d530      	bpl.n	81101f2 <__ssputs_r+0x9e>
 8110190:	4629      	mov	r1, r5
 8110192:	f7ff ff85 	bl	81100a0 <_malloc_r>
 8110196:	4606      	mov	r6, r0
 8110198:	b950      	cbnz	r0, 81101b0 <__ssputs_r+0x5c>
 811019a:	230c      	movs	r3, #12
 811019c:	f8ca 3000 	str.w	r3, [sl]
 81101a0:	89a3      	ldrh	r3, [r4, #12]
 81101a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81101a6:	81a3      	strh	r3, [r4, #12]
 81101a8:	f04f 30ff 	mov.w	r0, #4294967295
 81101ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81101b0:	463a      	mov	r2, r7
 81101b2:	6921      	ldr	r1, [r4, #16]
 81101b4:	f7fd ffe0 	bl	810e178 <memcpy>
 81101b8:	89a3      	ldrh	r3, [r4, #12]
 81101ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 81101be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 81101c2:	81a3      	strh	r3, [r4, #12]
 81101c4:	6126      	str	r6, [r4, #16]
 81101c6:	6165      	str	r5, [r4, #20]
 81101c8:	443e      	add	r6, r7
 81101ca:	1bed      	subs	r5, r5, r7
 81101cc:	6026      	str	r6, [r4, #0]
 81101ce:	60a5      	str	r5, [r4, #8]
 81101d0:	464e      	mov	r6, r9
 81101d2:	454e      	cmp	r6, r9
 81101d4:	d900      	bls.n	81101d8 <__ssputs_r+0x84>
 81101d6:	464e      	mov	r6, r9
 81101d8:	4632      	mov	r2, r6
 81101da:	4641      	mov	r1, r8
 81101dc:	6820      	ldr	r0, [r4, #0]
 81101de:	f000 f928 	bl	8110432 <memmove>
 81101e2:	68a3      	ldr	r3, [r4, #8]
 81101e4:	1b9b      	subs	r3, r3, r6
 81101e6:	60a3      	str	r3, [r4, #8]
 81101e8:	6823      	ldr	r3, [r4, #0]
 81101ea:	441e      	add	r6, r3
 81101ec:	6026      	str	r6, [r4, #0]
 81101ee:	2000      	movs	r0, #0
 81101f0:	e7dc      	b.n	81101ac <__ssputs_r+0x58>
 81101f2:	462a      	mov	r2, r5
 81101f4:	f000 f938 	bl	8110468 <_realloc_r>
 81101f8:	4606      	mov	r6, r0
 81101fa:	2800      	cmp	r0, #0
 81101fc:	d1e2      	bne.n	81101c4 <__ssputs_r+0x70>
 81101fe:	6921      	ldr	r1, [r4, #16]
 8110200:	4650      	mov	r0, sl
 8110202:	f7ff feff 	bl	8110004 <_free_r>
 8110206:	e7c8      	b.n	811019a <__ssputs_r+0x46>

08110208 <_svfiprintf_r>:
 8110208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811020c:	461d      	mov	r5, r3
 811020e:	898b      	ldrh	r3, [r1, #12]
 8110210:	061f      	lsls	r7, r3, #24
 8110212:	b09d      	sub	sp, #116	; 0x74
 8110214:	4680      	mov	r8, r0
 8110216:	460c      	mov	r4, r1
 8110218:	4616      	mov	r6, r2
 811021a:	d50f      	bpl.n	811023c <_svfiprintf_r+0x34>
 811021c:	690b      	ldr	r3, [r1, #16]
 811021e:	b96b      	cbnz	r3, 811023c <_svfiprintf_r+0x34>
 8110220:	2140      	movs	r1, #64	; 0x40
 8110222:	f7ff ff3d 	bl	81100a0 <_malloc_r>
 8110226:	6020      	str	r0, [r4, #0]
 8110228:	6120      	str	r0, [r4, #16]
 811022a:	b928      	cbnz	r0, 8110238 <_svfiprintf_r+0x30>
 811022c:	230c      	movs	r3, #12
 811022e:	f8c8 3000 	str.w	r3, [r8]
 8110232:	f04f 30ff 	mov.w	r0, #4294967295
 8110236:	e0c8      	b.n	81103ca <_svfiprintf_r+0x1c2>
 8110238:	2340      	movs	r3, #64	; 0x40
 811023a:	6163      	str	r3, [r4, #20]
 811023c:	2300      	movs	r3, #0
 811023e:	9309      	str	r3, [sp, #36]	; 0x24
 8110240:	2320      	movs	r3, #32
 8110242:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8110246:	2330      	movs	r3, #48	; 0x30
 8110248:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 811024c:	9503      	str	r5, [sp, #12]
 811024e:	f04f 0b01 	mov.w	fp, #1
 8110252:	4637      	mov	r7, r6
 8110254:	463d      	mov	r5, r7
 8110256:	f815 3b01 	ldrb.w	r3, [r5], #1
 811025a:	b10b      	cbz	r3, 8110260 <_svfiprintf_r+0x58>
 811025c:	2b25      	cmp	r3, #37	; 0x25
 811025e:	d13e      	bne.n	81102de <_svfiprintf_r+0xd6>
 8110260:	ebb7 0a06 	subs.w	sl, r7, r6
 8110264:	d00b      	beq.n	811027e <_svfiprintf_r+0x76>
 8110266:	4653      	mov	r3, sl
 8110268:	4632      	mov	r2, r6
 811026a:	4621      	mov	r1, r4
 811026c:	4640      	mov	r0, r8
 811026e:	f7ff ff71 	bl	8110154 <__ssputs_r>
 8110272:	3001      	adds	r0, #1
 8110274:	f000 80a4 	beq.w	81103c0 <_svfiprintf_r+0x1b8>
 8110278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 811027a:	4453      	add	r3, sl
 811027c:	9309      	str	r3, [sp, #36]	; 0x24
 811027e:	783b      	ldrb	r3, [r7, #0]
 8110280:	2b00      	cmp	r3, #0
 8110282:	f000 809d 	beq.w	81103c0 <_svfiprintf_r+0x1b8>
 8110286:	2300      	movs	r3, #0
 8110288:	f04f 32ff 	mov.w	r2, #4294967295
 811028c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8110290:	9304      	str	r3, [sp, #16]
 8110292:	9307      	str	r3, [sp, #28]
 8110294:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8110298:	931a      	str	r3, [sp, #104]	; 0x68
 811029a:	462f      	mov	r7, r5
 811029c:	2205      	movs	r2, #5
 811029e:	f817 1b01 	ldrb.w	r1, [r7], #1
 81102a2:	4850      	ldr	r0, [pc, #320]	; (81103e4 <_svfiprintf_r+0x1dc>)
 81102a4:	f7f0 f834 	bl	8100310 <memchr>
 81102a8:	9b04      	ldr	r3, [sp, #16]
 81102aa:	b9d0      	cbnz	r0, 81102e2 <_svfiprintf_r+0xda>
 81102ac:	06d9      	lsls	r1, r3, #27
 81102ae:	bf44      	itt	mi
 81102b0:	2220      	movmi	r2, #32
 81102b2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 81102b6:	071a      	lsls	r2, r3, #28
 81102b8:	bf44      	itt	mi
 81102ba:	222b      	movmi	r2, #43	; 0x2b
 81102bc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 81102c0:	782a      	ldrb	r2, [r5, #0]
 81102c2:	2a2a      	cmp	r2, #42	; 0x2a
 81102c4:	d015      	beq.n	81102f2 <_svfiprintf_r+0xea>
 81102c6:	9a07      	ldr	r2, [sp, #28]
 81102c8:	462f      	mov	r7, r5
 81102ca:	2000      	movs	r0, #0
 81102cc:	250a      	movs	r5, #10
 81102ce:	4639      	mov	r1, r7
 81102d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 81102d4:	3b30      	subs	r3, #48	; 0x30
 81102d6:	2b09      	cmp	r3, #9
 81102d8:	d94d      	bls.n	8110376 <_svfiprintf_r+0x16e>
 81102da:	b1b8      	cbz	r0, 811030c <_svfiprintf_r+0x104>
 81102dc:	e00f      	b.n	81102fe <_svfiprintf_r+0xf6>
 81102de:	462f      	mov	r7, r5
 81102e0:	e7b8      	b.n	8110254 <_svfiprintf_r+0x4c>
 81102e2:	4a40      	ldr	r2, [pc, #256]	; (81103e4 <_svfiprintf_r+0x1dc>)
 81102e4:	1a80      	subs	r0, r0, r2
 81102e6:	fa0b f000 	lsl.w	r0, fp, r0
 81102ea:	4318      	orrs	r0, r3
 81102ec:	9004      	str	r0, [sp, #16]
 81102ee:	463d      	mov	r5, r7
 81102f0:	e7d3      	b.n	811029a <_svfiprintf_r+0x92>
 81102f2:	9a03      	ldr	r2, [sp, #12]
 81102f4:	1d11      	adds	r1, r2, #4
 81102f6:	6812      	ldr	r2, [r2, #0]
 81102f8:	9103      	str	r1, [sp, #12]
 81102fa:	2a00      	cmp	r2, #0
 81102fc:	db01      	blt.n	8110302 <_svfiprintf_r+0xfa>
 81102fe:	9207      	str	r2, [sp, #28]
 8110300:	e004      	b.n	811030c <_svfiprintf_r+0x104>
 8110302:	4252      	negs	r2, r2
 8110304:	f043 0302 	orr.w	r3, r3, #2
 8110308:	9207      	str	r2, [sp, #28]
 811030a:	9304      	str	r3, [sp, #16]
 811030c:	783b      	ldrb	r3, [r7, #0]
 811030e:	2b2e      	cmp	r3, #46	; 0x2e
 8110310:	d10c      	bne.n	811032c <_svfiprintf_r+0x124>
 8110312:	787b      	ldrb	r3, [r7, #1]
 8110314:	2b2a      	cmp	r3, #42	; 0x2a
 8110316:	d133      	bne.n	8110380 <_svfiprintf_r+0x178>
 8110318:	9b03      	ldr	r3, [sp, #12]
 811031a:	1d1a      	adds	r2, r3, #4
 811031c:	681b      	ldr	r3, [r3, #0]
 811031e:	9203      	str	r2, [sp, #12]
 8110320:	2b00      	cmp	r3, #0
 8110322:	bfb8      	it	lt
 8110324:	f04f 33ff 	movlt.w	r3, #4294967295
 8110328:	3702      	adds	r7, #2
 811032a:	9305      	str	r3, [sp, #20]
 811032c:	4d2e      	ldr	r5, [pc, #184]	; (81103e8 <_svfiprintf_r+0x1e0>)
 811032e:	7839      	ldrb	r1, [r7, #0]
 8110330:	2203      	movs	r2, #3
 8110332:	4628      	mov	r0, r5
 8110334:	f7ef ffec 	bl	8100310 <memchr>
 8110338:	b138      	cbz	r0, 811034a <_svfiprintf_r+0x142>
 811033a:	2340      	movs	r3, #64	; 0x40
 811033c:	1b40      	subs	r0, r0, r5
 811033e:	fa03 f000 	lsl.w	r0, r3, r0
 8110342:	9b04      	ldr	r3, [sp, #16]
 8110344:	4303      	orrs	r3, r0
 8110346:	3701      	adds	r7, #1
 8110348:	9304      	str	r3, [sp, #16]
 811034a:	7839      	ldrb	r1, [r7, #0]
 811034c:	4827      	ldr	r0, [pc, #156]	; (81103ec <_svfiprintf_r+0x1e4>)
 811034e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8110352:	2206      	movs	r2, #6
 8110354:	1c7e      	adds	r6, r7, #1
 8110356:	f7ef ffdb 	bl	8100310 <memchr>
 811035a:	2800      	cmp	r0, #0
 811035c:	d038      	beq.n	81103d0 <_svfiprintf_r+0x1c8>
 811035e:	4b24      	ldr	r3, [pc, #144]	; (81103f0 <_svfiprintf_r+0x1e8>)
 8110360:	bb13      	cbnz	r3, 81103a8 <_svfiprintf_r+0x1a0>
 8110362:	9b03      	ldr	r3, [sp, #12]
 8110364:	3307      	adds	r3, #7
 8110366:	f023 0307 	bic.w	r3, r3, #7
 811036a:	3308      	adds	r3, #8
 811036c:	9303      	str	r3, [sp, #12]
 811036e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8110370:	444b      	add	r3, r9
 8110372:	9309      	str	r3, [sp, #36]	; 0x24
 8110374:	e76d      	b.n	8110252 <_svfiprintf_r+0x4a>
 8110376:	fb05 3202 	mla	r2, r5, r2, r3
 811037a:	2001      	movs	r0, #1
 811037c:	460f      	mov	r7, r1
 811037e:	e7a6      	b.n	81102ce <_svfiprintf_r+0xc6>
 8110380:	2300      	movs	r3, #0
 8110382:	3701      	adds	r7, #1
 8110384:	9305      	str	r3, [sp, #20]
 8110386:	4619      	mov	r1, r3
 8110388:	250a      	movs	r5, #10
 811038a:	4638      	mov	r0, r7
 811038c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8110390:	3a30      	subs	r2, #48	; 0x30
 8110392:	2a09      	cmp	r2, #9
 8110394:	d903      	bls.n	811039e <_svfiprintf_r+0x196>
 8110396:	2b00      	cmp	r3, #0
 8110398:	d0c8      	beq.n	811032c <_svfiprintf_r+0x124>
 811039a:	9105      	str	r1, [sp, #20]
 811039c:	e7c6      	b.n	811032c <_svfiprintf_r+0x124>
 811039e:	fb05 2101 	mla	r1, r5, r1, r2
 81103a2:	2301      	movs	r3, #1
 81103a4:	4607      	mov	r7, r0
 81103a6:	e7f0      	b.n	811038a <_svfiprintf_r+0x182>
 81103a8:	ab03      	add	r3, sp, #12
 81103aa:	9300      	str	r3, [sp, #0]
 81103ac:	4622      	mov	r2, r4
 81103ae:	4b11      	ldr	r3, [pc, #68]	; (81103f4 <_svfiprintf_r+0x1ec>)
 81103b0:	a904      	add	r1, sp, #16
 81103b2:	4640      	mov	r0, r8
 81103b4:	f7fd ff88 	bl	810e2c8 <_printf_float>
 81103b8:	f1b0 3fff 	cmp.w	r0, #4294967295
 81103bc:	4681      	mov	r9, r0
 81103be:	d1d6      	bne.n	811036e <_svfiprintf_r+0x166>
 81103c0:	89a3      	ldrh	r3, [r4, #12]
 81103c2:	065b      	lsls	r3, r3, #25
 81103c4:	f53f af35 	bmi.w	8110232 <_svfiprintf_r+0x2a>
 81103c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 81103ca:	b01d      	add	sp, #116	; 0x74
 81103cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81103d0:	ab03      	add	r3, sp, #12
 81103d2:	9300      	str	r3, [sp, #0]
 81103d4:	4622      	mov	r2, r4
 81103d6:	4b07      	ldr	r3, [pc, #28]	; (81103f4 <_svfiprintf_r+0x1ec>)
 81103d8:	a904      	add	r1, sp, #16
 81103da:	4640      	mov	r0, r8
 81103dc:	f7fe fa2a 	bl	810e834 <_printf_i>
 81103e0:	e7ea      	b.n	81103b8 <_svfiprintf_r+0x1b0>
 81103e2:	bf00      	nop
 81103e4:	0811109c 	.word	0x0811109c
 81103e8:	081110a2 	.word	0x081110a2
 81103ec:	081110a6 	.word	0x081110a6
 81103f0:	0810e2c9 	.word	0x0810e2c9
 81103f4:	08110155 	.word	0x08110155

081103f8 <_sbrk_r>:
 81103f8:	b538      	push	{r3, r4, r5, lr}
 81103fa:	4c06      	ldr	r4, [pc, #24]	; (8110414 <_sbrk_r+0x1c>)
 81103fc:	2300      	movs	r3, #0
 81103fe:	4605      	mov	r5, r0
 8110400:	4608      	mov	r0, r1
 8110402:	6023      	str	r3, [r4, #0]
 8110404:	f7f1 fd0c 	bl	8101e20 <_sbrk>
 8110408:	1c43      	adds	r3, r0, #1
 811040a:	d102      	bne.n	8110412 <_sbrk_r+0x1a>
 811040c:	6823      	ldr	r3, [r4, #0]
 811040e:	b103      	cbz	r3, 8110412 <_sbrk_r+0x1a>
 8110410:	602b      	str	r3, [r5, #0]
 8110412:	bd38      	pop	{r3, r4, r5, pc}
 8110414:	10009fd4 	.word	0x10009fd4

08110418 <__ascii_wctomb>:
 8110418:	b149      	cbz	r1, 811042e <__ascii_wctomb+0x16>
 811041a:	2aff      	cmp	r2, #255	; 0xff
 811041c:	bf85      	ittet	hi
 811041e:	238a      	movhi	r3, #138	; 0x8a
 8110420:	6003      	strhi	r3, [r0, #0]
 8110422:	700a      	strbls	r2, [r1, #0]
 8110424:	f04f 30ff 	movhi.w	r0, #4294967295
 8110428:	bf98      	it	ls
 811042a:	2001      	movls	r0, #1
 811042c:	4770      	bx	lr
 811042e:	4608      	mov	r0, r1
 8110430:	4770      	bx	lr

08110432 <memmove>:
 8110432:	4288      	cmp	r0, r1
 8110434:	b510      	push	{r4, lr}
 8110436:	eb01 0302 	add.w	r3, r1, r2
 811043a:	d807      	bhi.n	811044c <memmove+0x1a>
 811043c:	1e42      	subs	r2, r0, #1
 811043e:	4299      	cmp	r1, r3
 8110440:	d00a      	beq.n	8110458 <memmove+0x26>
 8110442:	f811 4b01 	ldrb.w	r4, [r1], #1
 8110446:	f802 4f01 	strb.w	r4, [r2, #1]!
 811044a:	e7f8      	b.n	811043e <memmove+0xc>
 811044c:	4283      	cmp	r3, r0
 811044e:	d9f5      	bls.n	811043c <memmove+0xa>
 8110450:	1881      	adds	r1, r0, r2
 8110452:	1ad2      	subs	r2, r2, r3
 8110454:	42d3      	cmn	r3, r2
 8110456:	d100      	bne.n	811045a <memmove+0x28>
 8110458:	bd10      	pop	{r4, pc}
 811045a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 811045e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8110462:	e7f7      	b.n	8110454 <memmove+0x22>

08110464 <__malloc_lock>:
 8110464:	4770      	bx	lr

08110466 <__malloc_unlock>:
 8110466:	4770      	bx	lr

08110468 <_realloc_r>:
 8110468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811046a:	4607      	mov	r7, r0
 811046c:	4614      	mov	r4, r2
 811046e:	460e      	mov	r6, r1
 8110470:	b921      	cbnz	r1, 811047c <_realloc_r+0x14>
 8110472:	4611      	mov	r1, r2
 8110474:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8110478:	f7ff be12 	b.w	81100a0 <_malloc_r>
 811047c:	b922      	cbnz	r2, 8110488 <_realloc_r+0x20>
 811047e:	f7ff fdc1 	bl	8110004 <_free_r>
 8110482:	4625      	mov	r5, r4
 8110484:	4628      	mov	r0, r5
 8110486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8110488:	f000 f814 	bl	81104b4 <_malloc_usable_size_r>
 811048c:	42a0      	cmp	r0, r4
 811048e:	d20f      	bcs.n	81104b0 <_realloc_r+0x48>
 8110490:	4621      	mov	r1, r4
 8110492:	4638      	mov	r0, r7
 8110494:	f7ff fe04 	bl	81100a0 <_malloc_r>
 8110498:	4605      	mov	r5, r0
 811049a:	2800      	cmp	r0, #0
 811049c:	d0f2      	beq.n	8110484 <_realloc_r+0x1c>
 811049e:	4631      	mov	r1, r6
 81104a0:	4622      	mov	r2, r4
 81104a2:	f7fd fe69 	bl	810e178 <memcpy>
 81104a6:	4631      	mov	r1, r6
 81104a8:	4638      	mov	r0, r7
 81104aa:	f7ff fdab 	bl	8110004 <_free_r>
 81104ae:	e7e9      	b.n	8110484 <_realloc_r+0x1c>
 81104b0:	4635      	mov	r5, r6
 81104b2:	e7e7      	b.n	8110484 <_realloc_r+0x1c>

081104b4 <_malloc_usable_size_r>:
 81104b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 81104b8:	1f18      	subs	r0, r3, #4
 81104ba:	2b00      	cmp	r3, #0
 81104bc:	bfbc      	itt	lt
 81104be:	580b      	ldrlt	r3, [r1, r0]
 81104c0:	18c0      	addlt	r0, r0, r3
 81104c2:	4770      	bx	lr

081104c4 <_init>:
 81104c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81104c6:	bf00      	nop
 81104c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81104ca:	bc08      	pop	{r3}
 81104cc:	469e      	mov	lr, r3
 81104ce:	4770      	bx	lr

081104d0 <_fini>:
 81104d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81104d2:	bf00      	nop
 81104d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81104d6:	bc08      	pop	{r3}
 81104d8:	469e      	mov	lr, r3
 81104da:	4770      	bx	lr
