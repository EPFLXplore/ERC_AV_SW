
XploreAvionics_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbd8  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  0810be78  0810be78  0001be78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810c1d0  0810c1d0  0001c1d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810c1d8  0810c1d8  0001c1d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810c1dc  0810c1dc  0001c1dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001fc  10000000  0810c1e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000053c4  100001fc  0810c3dc  000201fc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  100055c0  0810c3dc  000255c0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 10 .debug_info   000470f2  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000735e  00000000  00000000  0006731e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000023e8  00000000  00000000  0006e680  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002110  00000000  00000000  00070a68  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004446e  00000000  00000000  00072b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00029c78  00000000  00000000  000b6fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001a95ee  00000000  00000000  000e0c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  0028a24c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a248  00000000  00000000  0028a2c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100001fc 	.word	0x100001fc
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810be60 	.word	0x0810be60

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000200 	.word	0x10000200
 81002dc:	0810be60 	.word	0x0810be60

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <__aeabi_drsub>:
 81002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 81002f4:	e002      	b.n	81002fc <__adddf3>
 81002f6:	bf00      	nop

081002f8 <__aeabi_dsub>:
 81002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

081002fc <__adddf3>:
 81002fc:	b530      	push	{r4, r5, lr}
 81002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8100302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8100306:	ea94 0f05 	teq	r4, r5
 810030a:	bf08      	it	eq
 810030c:	ea90 0f02 	teqeq	r0, r2
 8100310:	bf1f      	itttt	ne
 8100312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8100316:	ea55 0c02 	orrsne.w	ip, r5, r2
 810031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 810031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100322:	f000 80e2 	beq.w	81004ea <__adddf3+0x1ee>
 8100326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 810032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 810032e:	bfb8      	it	lt
 8100330:	426d      	neglt	r5, r5
 8100332:	dd0c      	ble.n	810034e <__adddf3+0x52>
 8100334:	442c      	add	r4, r5
 8100336:	ea80 0202 	eor.w	r2, r0, r2
 810033a:	ea81 0303 	eor.w	r3, r1, r3
 810033e:	ea82 0000 	eor.w	r0, r2, r0
 8100342:	ea83 0101 	eor.w	r1, r3, r1
 8100346:	ea80 0202 	eor.w	r2, r0, r2
 810034a:	ea81 0303 	eor.w	r3, r1, r3
 810034e:	2d36      	cmp	r5, #54	; 0x36
 8100350:	bf88      	it	hi
 8100352:	bd30      	pophi	{r4, r5, pc}
 8100354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100364:	d002      	beq.n	810036c <__adddf3+0x70>
 8100366:	4240      	negs	r0, r0
 8100368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100378:	d002      	beq.n	8100380 <__adddf3+0x84>
 810037a:	4252      	negs	r2, r2
 810037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100380:	ea94 0f05 	teq	r4, r5
 8100384:	f000 80a7 	beq.w	81004d6 <__adddf3+0x1da>
 8100388:	f1a4 0401 	sub.w	r4, r4, #1
 810038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100390:	db0d      	blt.n	81003ae <__adddf3+0xb2>
 8100392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100396:	fa22 f205 	lsr.w	r2, r2, r5
 810039a:	1880      	adds	r0, r0, r2
 810039c:	f141 0100 	adc.w	r1, r1, #0
 81003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 81003a4:	1880      	adds	r0, r0, r2
 81003a6:	fa43 f305 	asr.w	r3, r3, r5
 81003aa:	4159      	adcs	r1, r3
 81003ac:	e00e      	b.n	81003cc <__adddf3+0xd0>
 81003ae:	f1a5 0520 	sub.w	r5, r5, #32
 81003b2:	f10e 0e20 	add.w	lr, lr, #32
 81003b6:	2a01      	cmp	r2, #1
 81003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 81003bc:	bf28      	it	cs
 81003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 81003c2:	fa43 f305 	asr.w	r3, r3, r5
 81003c6:	18c0      	adds	r0, r0, r3
 81003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 81003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81003d0:	d507      	bpl.n	81003e2 <__adddf3+0xe6>
 81003d2:	f04f 0e00 	mov.w	lr, #0
 81003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 81003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 81003de:	eb6e 0101 	sbc.w	r1, lr, r1
 81003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 81003e6:	d31b      	bcc.n	8100420 <__adddf3+0x124>
 81003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 81003ec:	d30c      	bcc.n	8100408 <__adddf3+0x10c>
 81003ee:	0849      	lsrs	r1, r1, #1
 81003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 81003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81003f8:	f104 0401 	add.w	r4, r4, #1
 81003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8100400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8100404:	f080 809a 	bcs.w	810053c <__adddf3+0x240>
 8100408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 810040c:	bf08      	it	eq
 810040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100412:	f150 0000 	adcs.w	r0, r0, #0
 8100416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 810041a:	ea41 0105 	orr.w	r1, r1, r5
 810041e:	bd30      	pop	{r4, r5, pc}
 8100420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8100424:	4140      	adcs	r0, r0
 8100426:	eb41 0101 	adc.w	r1, r1, r1
 810042a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 810042e:	f1a4 0401 	sub.w	r4, r4, #1
 8100432:	d1e9      	bne.n	8100408 <__adddf3+0x10c>
 8100434:	f091 0f00 	teq	r1, #0
 8100438:	bf04      	itt	eq
 810043a:	4601      	moveq	r1, r0
 810043c:	2000      	moveq	r0, #0
 810043e:	fab1 f381 	clz	r3, r1
 8100442:	bf08      	it	eq
 8100444:	3320      	addeq	r3, #32
 8100446:	f1a3 030b 	sub.w	r3, r3, #11
 810044a:	f1b3 0220 	subs.w	r2, r3, #32
 810044e:	da0c      	bge.n	810046a <__adddf3+0x16e>
 8100450:	320c      	adds	r2, #12
 8100452:	dd08      	ble.n	8100466 <__adddf3+0x16a>
 8100454:	f102 0c14 	add.w	ip, r2, #20
 8100458:	f1c2 020c 	rsb	r2, r2, #12
 810045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8100460:	fa21 f102 	lsr.w	r1, r1, r2
 8100464:	e00c      	b.n	8100480 <__adddf3+0x184>
 8100466:	f102 0214 	add.w	r2, r2, #20
 810046a:	bfd8      	it	le
 810046c:	f1c2 0c20 	rsble	ip, r2, #32
 8100470:	fa01 f102 	lsl.w	r1, r1, r2
 8100474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100478:	bfdc      	itt	le
 810047a:	ea41 010c 	orrle.w	r1, r1, ip
 810047e:	4090      	lslle	r0, r2
 8100480:	1ae4      	subs	r4, r4, r3
 8100482:	bfa2      	ittt	ge
 8100484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100488:	4329      	orrge	r1, r5
 810048a:	bd30      	popge	{r4, r5, pc}
 810048c:	ea6f 0404 	mvn.w	r4, r4
 8100490:	3c1f      	subs	r4, #31
 8100492:	da1c      	bge.n	81004ce <__adddf3+0x1d2>
 8100494:	340c      	adds	r4, #12
 8100496:	dc0e      	bgt.n	81004b6 <__adddf3+0x1ba>
 8100498:	f104 0414 	add.w	r4, r4, #20
 810049c:	f1c4 0220 	rsb	r2, r4, #32
 81004a0:	fa20 f004 	lsr.w	r0, r0, r4
 81004a4:	fa01 f302 	lsl.w	r3, r1, r2
 81004a8:	ea40 0003 	orr.w	r0, r0, r3
 81004ac:	fa21 f304 	lsr.w	r3, r1, r4
 81004b0:	ea45 0103 	orr.w	r1, r5, r3
 81004b4:	bd30      	pop	{r4, r5, pc}
 81004b6:	f1c4 040c 	rsb	r4, r4, #12
 81004ba:	f1c4 0220 	rsb	r2, r4, #32
 81004be:	fa20 f002 	lsr.w	r0, r0, r2
 81004c2:	fa01 f304 	lsl.w	r3, r1, r4
 81004c6:	ea40 0003 	orr.w	r0, r0, r3
 81004ca:	4629      	mov	r1, r5
 81004cc:	bd30      	pop	{r4, r5, pc}
 81004ce:	fa21 f004 	lsr.w	r0, r1, r4
 81004d2:	4629      	mov	r1, r5
 81004d4:	bd30      	pop	{r4, r5, pc}
 81004d6:	f094 0f00 	teq	r4, #0
 81004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 81004de:	bf06      	itte	eq
 81004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 81004e4:	3401      	addeq	r4, #1
 81004e6:	3d01      	subne	r5, #1
 81004e8:	e74e      	b.n	8100388 <__adddf3+0x8c>
 81004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81004ee:	bf18      	it	ne
 81004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81004f4:	d029      	beq.n	810054a <__adddf3+0x24e>
 81004f6:	ea94 0f05 	teq	r4, r5
 81004fa:	bf08      	it	eq
 81004fc:	ea90 0f02 	teqeq	r0, r2
 8100500:	d005      	beq.n	810050e <__adddf3+0x212>
 8100502:	ea54 0c00 	orrs.w	ip, r4, r0
 8100506:	bf04      	itt	eq
 8100508:	4619      	moveq	r1, r3
 810050a:	4610      	moveq	r0, r2
 810050c:	bd30      	pop	{r4, r5, pc}
 810050e:	ea91 0f03 	teq	r1, r3
 8100512:	bf1e      	ittt	ne
 8100514:	2100      	movne	r1, #0
 8100516:	2000      	movne	r0, #0
 8100518:	bd30      	popne	{r4, r5, pc}
 810051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 810051e:	d105      	bne.n	810052c <__adddf3+0x230>
 8100520:	0040      	lsls	r0, r0, #1
 8100522:	4149      	adcs	r1, r1
 8100524:	bf28      	it	cs
 8100526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 810052a:	bd30      	pop	{r4, r5, pc}
 810052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8100530:	bf3c      	itt	cc
 8100532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8100536:	bd30      	popcc	{r4, r5, pc}
 8100538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 810053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8100540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8100544:	f04f 0000 	mov.w	r0, #0
 8100548:	bd30      	pop	{r4, r5, pc}
 810054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810054e:	bf1a      	itte	ne
 8100550:	4619      	movne	r1, r3
 8100552:	4610      	movne	r0, r2
 8100554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100558:	bf1c      	itt	ne
 810055a:	460b      	movne	r3, r1
 810055c:	4602      	movne	r2, r0
 810055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100562:	bf06      	itte	eq
 8100564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100568:	ea91 0f03 	teqeq	r1, r3
 810056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100570:	bd30      	pop	{r4, r5, pc}
 8100572:	bf00      	nop

08100574 <__aeabi_ui2d>:
 8100574:	f090 0f00 	teq	r0, #0
 8100578:	bf04      	itt	eq
 810057a:	2100      	moveq	r1, #0
 810057c:	4770      	bxeq	lr
 810057e:	b530      	push	{r4, r5, lr}
 8100580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100588:	f04f 0500 	mov.w	r5, #0
 810058c:	f04f 0100 	mov.w	r1, #0
 8100590:	e750      	b.n	8100434 <__adddf3+0x138>
 8100592:	bf00      	nop

08100594 <__aeabi_i2d>:
 8100594:	f090 0f00 	teq	r0, #0
 8100598:	bf04      	itt	eq
 810059a:	2100      	moveq	r1, #0
 810059c:	4770      	bxeq	lr
 810059e:	b530      	push	{r4, r5, lr}
 81005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 81005ac:	bf48      	it	mi
 81005ae:	4240      	negmi	r0, r0
 81005b0:	f04f 0100 	mov.w	r1, #0
 81005b4:	e73e      	b.n	8100434 <__adddf3+0x138>
 81005b6:	bf00      	nop

081005b8 <__aeabi_f2d>:
 81005b8:	0042      	lsls	r2, r0, #1
 81005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 81005be:	ea4f 0131 	mov.w	r1, r1, rrx
 81005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 81005c6:	bf1f      	itttt	ne
 81005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 81005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 81005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 81005d4:	4770      	bxne	lr
 81005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 81005da:	bf08      	it	eq
 81005dc:	4770      	bxeq	lr
 81005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 81005e2:	bf04      	itt	eq
 81005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 81005e8:	4770      	bxeq	lr
 81005ea:	b530      	push	{r4, r5, lr}
 81005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 81005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 81005f8:	e71c      	b.n	8100434 <__adddf3+0x138>
 81005fa:	bf00      	nop

081005fc <__aeabi_ul2d>:
 81005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8100600:	bf08      	it	eq
 8100602:	4770      	bxeq	lr
 8100604:	b530      	push	{r4, r5, lr}
 8100606:	f04f 0500 	mov.w	r5, #0
 810060a:	e00a      	b.n	8100622 <__aeabi_l2d+0x16>

0810060c <__aeabi_l2d>:
 810060c:	ea50 0201 	orrs.w	r2, r0, r1
 8100610:	bf08      	it	eq
 8100612:	4770      	bxeq	lr
 8100614:	b530      	push	{r4, r5, lr}
 8100616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 810061a:	d502      	bpl.n	8100622 <__aeabi_l2d+0x16>
 810061c:	4240      	negs	r0, r0
 810061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 810062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 810062e:	f43f aed8 	beq.w	81003e2 <__adddf3+0xe6>
 8100632:	f04f 0203 	mov.w	r2, #3
 8100636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 810063a:	bf18      	it	ne
 810063c:	3203      	addne	r2, #3
 810063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100642:	bf18      	it	ne
 8100644:	3203      	addne	r2, #3
 8100646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 810064a:	f1c2 0320 	rsb	r3, r2, #32
 810064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8100652:	fa20 f002 	lsr.w	r0, r0, r2
 8100656:	fa01 fe03 	lsl.w	lr, r1, r3
 810065a:	ea40 000e 	orr.w	r0, r0, lr
 810065e:	fa21 f102 	lsr.w	r1, r1, r2
 8100662:	4414      	add	r4, r2
 8100664:	e6bd      	b.n	81003e2 <__adddf3+0xe6>
 8100666:	bf00      	nop

08100668 <__aeabi_dmul>:
 8100668:	b570      	push	{r4, r5, r6, lr}
 810066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100676:	bf1d      	ittte	ne
 8100678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810067c:	ea94 0f0c 	teqne	r4, ip
 8100680:	ea95 0f0c 	teqne	r5, ip
 8100684:	f000 f8de 	bleq	8100844 <__aeabi_dmul+0x1dc>
 8100688:	442c      	add	r4, r5
 810068a:	ea81 0603 	eor.w	r6, r1, r3
 810068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810069a:	bf18      	it	ne
 810069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 81006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81006a8:	d038      	beq.n	810071c <__aeabi_dmul+0xb4>
 81006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 81006ae:	f04f 0500 	mov.w	r5, #0
 81006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 81006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 81006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 81006be:	f04f 0600 	mov.w	r6, #0
 81006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 81006c6:	f09c 0f00 	teq	ip, #0
 81006ca:	bf18      	it	ne
 81006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 81006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 81006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 81006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 81006dc:	d204      	bcs.n	81006e8 <__aeabi_dmul+0x80>
 81006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81006e2:	416d      	adcs	r5, r5
 81006e4:	eb46 0606 	adc.w	r6, r6, r6
 81006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100700:	bf88      	it	hi
 8100702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100706:	d81e      	bhi.n	8100746 <__aeabi_dmul+0xde>
 8100708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 810070c:	bf08      	it	eq
 810070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8100712:	f150 0000 	adcs.w	r0, r0, #0
 8100716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 810071a:	bd70      	pop	{r4, r5, r6, pc}
 810071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8100720:	ea46 0101 	orr.w	r1, r6, r1
 8100724:	ea40 0002 	orr.w	r0, r0, r2
 8100728:	ea81 0103 	eor.w	r1, r1, r3
 810072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8100730:	bfc2      	ittt	gt
 8100732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 810073a:	bd70      	popgt	{r4, r5, r6, pc}
 810073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100740:	f04f 0e00 	mov.w	lr, #0
 8100744:	3c01      	subs	r4, #1
 8100746:	f300 80ab 	bgt.w	81008a0 <__aeabi_dmul+0x238>
 810074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 810074e:	bfde      	ittt	le
 8100750:	2000      	movle	r0, #0
 8100752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8100756:	bd70      	pople	{r4, r5, r6, pc}
 8100758:	f1c4 0400 	rsb	r4, r4, #0
 810075c:	3c20      	subs	r4, #32
 810075e:	da35      	bge.n	81007cc <__aeabi_dmul+0x164>
 8100760:	340c      	adds	r4, #12
 8100762:	dc1b      	bgt.n	810079c <__aeabi_dmul+0x134>
 8100764:	f104 0414 	add.w	r4, r4, #20
 8100768:	f1c4 0520 	rsb	r5, r4, #32
 810076c:	fa00 f305 	lsl.w	r3, r0, r5
 8100770:	fa20 f004 	lsr.w	r0, r0, r4
 8100774:	fa01 f205 	lsl.w	r2, r1, r5
 8100778:	ea40 0002 	orr.w	r0, r0, r2
 810077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100788:	fa21 f604 	lsr.w	r6, r1, r4
 810078c:	eb42 0106 	adc.w	r1, r2, r6
 8100790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100794:	bf08      	it	eq
 8100796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810079a:	bd70      	pop	{r4, r5, r6, pc}
 810079c:	f1c4 040c 	rsb	r4, r4, #12
 81007a0:	f1c4 0520 	rsb	r5, r4, #32
 81007a4:	fa00 f304 	lsl.w	r3, r0, r4
 81007a8:	fa20 f005 	lsr.w	r0, r0, r5
 81007ac:	fa01 f204 	lsl.w	r2, r1, r4
 81007b0:	ea40 0002 	orr.w	r0, r0, r2
 81007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 81007bc:	f141 0100 	adc.w	r1, r1, #0
 81007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007c4:	bf08      	it	eq
 81007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007ca:	bd70      	pop	{r4, r5, r6, pc}
 81007cc:	f1c4 0520 	rsb	r5, r4, #32
 81007d0:	fa00 f205 	lsl.w	r2, r0, r5
 81007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 81007d8:	fa20 f304 	lsr.w	r3, r0, r4
 81007dc:	fa01 f205 	lsl.w	r2, r1, r5
 81007e0:	ea43 0302 	orr.w	r3, r3, r2
 81007e4:	fa21 f004 	lsr.w	r0, r1, r4
 81007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007ec:	fa21 f204 	lsr.w	r2, r1, r4
 81007f0:	ea20 0002 	bic.w	r0, r0, r2
 81007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007fc:	bf08      	it	eq
 81007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8100802:	bd70      	pop	{r4, r5, r6, pc}
 8100804:	f094 0f00 	teq	r4, #0
 8100808:	d10f      	bne.n	810082a <__aeabi_dmul+0x1c2>
 810080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 810080e:	0040      	lsls	r0, r0, #1
 8100810:	eb41 0101 	adc.w	r1, r1, r1
 8100814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100818:	bf08      	it	eq
 810081a:	3c01      	subeq	r4, #1
 810081c:	d0f7      	beq.n	810080e <__aeabi_dmul+0x1a6>
 810081e:	ea41 0106 	orr.w	r1, r1, r6
 8100822:	f095 0f00 	teq	r5, #0
 8100826:	bf18      	it	ne
 8100828:	4770      	bxne	lr
 810082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 810082e:	0052      	lsls	r2, r2, #1
 8100830:	eb43 0303 	adc.w	r3, r3, r3
 8100834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8100838:	bf08      	it	eq
 810083a:	3d01      	subeq	r5, #1
 810083c:	d0f7      	beq.n	810082e <__aeabi_dmul+0x1c6>
 810083e:	ea43 0306 	orr.w	r3, r3, r6
 8100842:	4770      	bx	lr
 8100844:	ea94 0f0c 	teq	r4, ip
 8100848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 810084c:	bf18      	it	ne
 810084e:	ea95 0f0c 	teqne	r5, ip
 8100852:	d00c      	beq.n	810086e <__aeabi_dmul+0x206>
 8100854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100858:	bf18      	it	ne
 810085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810085e:	d1d1      	bne.n	8100804 <__aeabi_dmul+0x19c>
 8100860:	ea81 0103 	eor.w	r1, r1, r3
 8100864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100868:	f04f 0000 	mov.w	r0, #0
 810086c:	bd70      	pop	{r4, r5, r6, pc}
 810086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100872:	bf06      	itte	eq
 8100874:	4610      	moveq	r0, r2
 8100876:	4619      	moveq	r1, r3
 8100878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810087c:	d019      	beq.n	81008b2 <__aeabi_dmul+0x24a>
 810087e:	ea94 0f0c 	teq	r4, ip
 8100882:	d102      	bne.n	810088a <__aeabi_dmul+0x222>
 8100884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100888:	d113      	bne.n	81008b2 <__aeabi_dmul+0x24a>
 810088a:	ea95 0f0c 	teq	r5, ip
 810088e:	d105      	bne.n	810089c <__aeabi_dmul+0x234>
 8100890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100894:	bf1c      	itt	ne
 8100896:	4610      	movne	r0, r2
 8100898:	4619      	movne	r1, r3
 810089a:	d10a      	bne.n	81008b2 <__aeabi_dmul+0x24a>
 810089c:	ea81 0103 	eor.w	r1, r1, r3
 81008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 81008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81008ac:	f04f 0000 	mov.w	r0, #0
 81008b0:	bd70      	pop	{r4, r5, r6, pc}
 81008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 81008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 81008ba:	bd70      	pop	{r4, r5, r6, pc}

081008bc <__aeabi_ddiv>:
 81008bc:	b570      	push	{r4, r5, r6, lr}
 81008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 81008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 81008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 81008ca:	bf1d      	ittte	ne
 81008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 81008d0:	ea94 0f0c 	teqne	r4, ip
 81008d4:	ea95 0f0c 	teqne	r5, ip
 81008d8:	f000 f8a7 	bleq	8100a2a <__aeabi_ddiv+0x16e>
 81008dc:	eba4 0405 	sub.w	r4, r4, r5
 81008e0:	ea81 0e03 	eor.w	lr, r1, r3
 81008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81008ec:	f000 8088 	beq.w	8100a00 <__aeabi_ddiv+0x144>
 81008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 81008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8100900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8100904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8100908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 810090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8100910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8100914:	429d      	cmp	r5, r3
 8100916:	bf08      	it	eq
 8100918:	4296      	cmpeq	r6, r2
 810091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 810091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8100922:	d202      	bcs.n	810092a <__aeabi_ddiv+0x6e>
 8100924:	085b      	lsrs	r3, r3, #1
 8100926:	ea4f 0232 	mov.w	r2, r2, rrx
 810092a:	1ab6      	subs	r6, r6, r2
 810092c:	eb65 0503 	sbc.w	r5, r5, r3
 8100930:	085b      	lsrs	r3, r3, #1
 8100932:	ea4f 0232 	mov.w	r2, r2, rrx
 8100936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 810093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 810093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100946:	bf22      	ittt	cs
 8100948:	1ab6      	subcs	r6, r6, r2
 810094a:	4675      	movcs	r5, lr
 810094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8100950:	085b      	lsrs	r3, r3, #1
 8100952:	ea4f 0232 	mov.w	r2, r2, rrx
 8100956:	ebb6 0e02 	subs.w	lr, r6, r2
 810095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810095e:	bf22      	ittt	cs
 8100960:	1ab6      	subcs	r6, r6, r2
 8100962:	4675      	movcs	r5, lr
 8100964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100968:	085b      	lsrs	r3, r3, #1
 810096a:	ea4f 0232 	mov.w	r2, r2, rrx
 810096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100976:	bf22      	ittt	cs
 8100978:	1ab6      	subcs	r6, r6, r2
 810097a:	4675      	movcs	r5, lr
 810097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100980:	085b      	lsrs	r3, r3, #1
 8100982:	ea4f 0232 	mov.w	r2, r2, rrx
 8100986:	ebb6 0e02 	subs.w	lr, r6, r2
 810098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810098e:	bf22      	ittt	cs
 8100990:	1ab6      	subcs	r6, r6, r2
 8100992:	4675      	movcs	r5, lr
 8100994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100998:	ea55 0e06 	orrs.w	lr, r5, r6
 810099c:	d018      	beq.n	81009d0 <__aeabi_ddiv+0x114>
 810099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 81009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 81009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 81009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 81009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 81009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 81009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 81009ba:	d1c0      	bne.n	810093e <__aeabi_ddiv+0x82>
 81009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009c0:	d10b      	bne.n	81009da <__aeabi_ddiv+0x11e>
 81009c2:	ea41 0100 	orr.w	r1, r1, r0
 81009c6:	f04f 0000 	mov.w	r0, #0
 81009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 81009ce:	e7b6      	b.n	810093e <__aeabi_ddiv+0x82>
 81009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009d4:	bf04      	itt	eq
 81009d6:	4301      	orreq	r1, r0
 81009d8:	2000      	moveq	r0, #0
 81009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81009de:	bf88      	it	hi
 81009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81009e4:	f63f aeaf 	bhi.w	8100746 <__aeabi_dmul+0xde>
 81009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 81009ec:	bf04      	itt	eq
 81009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 81009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81009f6:	f150 0000 	adcs.w	r0, r0, #0
 81009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81009fe:	bd70      	pop	{r4, r5, r6, pc}
 8100a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100a0c:	bfc2      	ittt	gt
 8100a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100a16:	bd70      	popgt	{r4, r5, r6, pc}
 8100a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100a1c:	f04f 0e00 	mov.w	lr, #0
 8100a20:	3c01      	subs	r4, #1
 8100a22:	e690      	b.n	8100746 <__aeabi_dmul+0xde>
 8100a24:	ea45 0e06 	orr.w	lr, r5, r6
 8100a28:	e68d      	b.n	8100746 <__aeabi_dmul+0xde>
 8100a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100a2e:	ea94 0f0c 	teq	r4, ip
 8100a32:	bf08      	it	eq
 8100a34:	ea95 0f0c 	teqeq	r5, ip
 8100a38:	f43f af3b 	beq.w	81008b2 <__aeabi_dmul+0x24a>
 8100a3c:	ea94 0f0c 	teq	r4, ip
 8100a40:	d10a      	bne.n	8100a58 <__aeabi_ddiv+0x19c>
 8100a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100a46:	f47f af34 	bne.w	81008b2 <__aeabi_dmul+0x24a>
 8100a4a:	ea95 0f0c 	teq	r5, ip
 8100a4e:	f47f af25 	bne.w	810089c <__aeabi_dmul+0x234>
 8100a52:	4610      	mov	r0, r2
 8100a54:	4619      	mov	r1, r3
 8100a56:	e72c      	b.n	81008b2 <__aeabi_dmul+0x24a>
 8100a58:	ea95 0f0c 	teq	r5, ip
 8100a5c:	d106      	bne.n	8100a6c <__aeabi_ddiv+0x1b0>
 8100a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100a62:	f43f aefd 	beq.w	8100860 <__aeabi_dmul+0x1f8>
 8100a66:	4610      	mov	r0, r2
 8100a68:	4619      	mov	r1, r3
 8100a6a:	e722      	b.n	81008b2 <__aeabi_dmul+0x24a>
 8100a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100a70:	bf18      	it	ne
 8100a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100a76:	f47f aec5 	bne.w	8100804 <__aeabi_dmul+0x19c>
 8100a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100a7e:	f47f af0d 	bne.w	810089c <__aeabi_dmul+0x234>
 8100a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100a86:	f47f aeeb 	bne.w	8100860 <__aeabi_dmul+0x1f8>
 8100a8a:	e712      	b.n	81008b2 <__aeabi_dmul+0x24a>

08100a8c <__gedf2>:
 8100a8c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8100a90:	e006      	b.n	8100aa0 <__cmpdf2+0x4>
 8100a92:	bf00      	nop

08100a94 <__ledf2>:
 8100a94:	f04f 0c01 	mov.w	ip, #1
 8100a98:	e002      	b.n	8100aa0 <__cmpdf2+0x4>
 8100a9a:	bf00      	nop

08100a9c <__cmpdf2>:
 8100a9c:	f04f 0c01 	mov.w	ip, #1
 8100aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ab0:	bf18      	it	ne
 8100ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100ab6:	d01b      	beq.n	8100af0 <__cmpdf2+0x54>
 8100ab8:	b001      	add	sp, #4
 8100aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100abe:	bf0c      	ite	eq
 8100ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100ac4:	ea91 0f03 	teqne	r1, r3
 8100ac8:	bf02      	ittt	eq
 8100aca:	ea90 0f02 	teqeq	r0, r2
 8100ace:	2000      	moveq	r0, #0
 8100ad0:	4770      	bxeq	lr
 8100ad2:	f110 0f00 	cmn.w	r0, #0
 8100ad6:	ea91 0f03 	teq	r1, r3
 8100ada:	bf58      	it	pl
 8100adc:	4299      	cmppl	r1, r3
 8100ade:	bf08      	it	eq
 8100ae0:	4290      	cmpeq	r0, r2
 8100ae2:	bf2c      	ite	cs
 8100ae4:	17d8      	asrcs	r0, r3, #31
 8100ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100aea:	f040 0001 	orr.w	r0, r0, #1
 8100aee:	4770      	bx	lr
 8100af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100af8:	d102      	bne.n	8100b00 <__cmpdf2+0x64>
 8100afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100afe:	d107      	bne.n	8100b10 <__cmpdf2+0x74>
 8100b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b08:	d1d6      	bne.n	8100ab8 <__cmpdf2+0x1c>
 8100b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100b0e:	d0d3      	beq.n	8100ab8 <__cmpdf2+0x1c>
 8100b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100b14:	4770      	bx	lr
 8100b16:	bf00      	nop

08100b18 <__aeabi_cdrcmple>:
 8100b18:	4684      	mov	ip, r0
 8100b1a:	4610      	mov	r0, r2
 8100b1c:	4662      	mov	r2, ip
 8100b1e:	468c      	mov	ip, r1
 8100b20:	4619      	mov	r1, r3
 8100b22:	4663      	mov	r3, ip
 8100b24:	e000      	b.n	8100b28 <__aeabi_cdcmpeq>
 8100b26:	bf00      	nop

08100b28 <__aeabi_cdcmpeq>:
 8100b28:	b501      	push	{r0, lr}
 8100b2a:	f7ff ffb7 	bl	8100a9c <__cmpdf2>
 8100b2e:	2800      	cmp	r0, #0
 8100b30:	bf48      	it	mi
 8100b32:	f110 0f00 	cmnmi.w	r0, #0
 8100b36:	bd01      	pop	{r0, pc}

08100b38 <__aeabi_dcmpeq>:
 8100b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b3c:	f7ff fff4 	bl	8100b28 <__aeabi_cdcmpeq>
 8100b40:	bf0c      	ite	eq
 8100b42:	2001      	moveq	r0, #1
 8100b44:	2000      	movne	r0, #0
 8100b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b4a:	bf00      	nop

08100b4c <__aeabi_dcmplt>:
 8100b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b50:	f7ff ffea 	bl	8100b28 <__aeabi_cdcmpeq>
 8100b54:	bf34      	ite	cc
 8100b56:	2001      	movcc	r0, #1
 8100b58:	2000      	movcs	r0, #0
 8100b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b5e:	bf00      	nop

08100b60 <__aeabi_dcmple>:
 8100b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b64:	f7ff ffe0 	bl	8100b28 <__aeabi_cdcmpeq>
 8100b68:	bf94      	ite	ls
 8100b6a:	2001      	movls	r0, #1
 8100b6c:	2000      	movhi	r0, #0
 8100b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b72:	bf00      	nop

08100b74 <__aeabi_dcmpge>:
 8100b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b78:	f7ff ffce 	bl	8100b18 <__aeabi_cdrcmple>
 8100b7c:	bf94      	ite	ls
 8100b7e:	2001      	movls	r0, #1
 8100b80:	2000      	movhi	r0, #0
 8100b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b86:	bf00      	nop

08100b88 <__aeabi_dcmpgt>:
 8100b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b8c:	f7ff ffc4 	bl	8100b18 <__aeabi_cdrcmple>
 8100b90:	bf34      	ite	cc
 8100b92:	2001      	movcc	r0, #1
 8100b94:	2000      	movcs	r0, #0
 8100b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b9a:	bf00      	nop

08100b9c <__aeabi_dcmpun>:
 8100b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba4:	d102      	bne.n	8100bac <__aeabi_dcmpun+0x10>
 8100ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100baa:	d10a      	bne.n	8100bc2 <__aeabi_dcmpun+0x26>
 8100bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100bb4:	d102      	bne.n	8100bbc <__aeabi_dcmpun+0x20>
 8100bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bba:	d102      	bne.n	8100bc2 <__aeabi_dcmpun+0x26>
 8100bbc:	f04f 0000 	mov.w	r0, #0
 8100bc0:	4770      	bx	lr
 8100bc2:	f04f 0001 	mov.w	r0, #1
 8100bc6:	4770      	bx	lr

08100bc8 <__aeabi_d2iz>:
 8100bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100bd0:	d215      	bcs.n	8100bfe <__aeabi_d2iz+0x36>
 8100bd2:	d511      	bpl.n	8100bf8 <__aeabi_d2iz+0x30>
 8100bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100bdc:	d912      	bls.n	8100c04 <__aeabi_d2iz+0x3c>
 8100bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100bee:	fa23 f002 	lsr.w	r0, r3, r2
 8100bf2:	bf18      	it	ne
 8100bf4:	4240      	negne	r0, r0
 8100bf6:	4770      	bx	lr
 8100bf8:	f04f 0000 	mov.w	r0, #0
 8100bfc:	4770      	bx	lr
 8100bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100c02:	d105      	bne.n	8100c10 <__aeabi_d2iz+0x48>
 8100c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100c08:	bf08      	it	eq
 8100c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100c0e:	4770      	bx	lr
 8100c10:	f04f 0000 	mov.w	r0, #0
 8100c14:	4770      	bx	lr
 8100c16:	bf00      	nop

08100c18 <__aeabi_uldivmod>:
 8100c18:	b953      	cbnz	r3, 8100c30 <__aeabi_uldivmod+0x18>
 8100c1a:	b94a      	cbnz	r2, 8100c30 <__aeabi_uldivmod+0x18>
 8100c1c:	2900      	cmp	r1, #0
 8100c1e:	bf08      	it	eq
 8100c20:	2800      	cmpeq	r0, #0
 8100c22:	bf1c      	itt	ne
 8100c24:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8100c28:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8100c2c:	f000 b972 	b.w	8100f14 <__aeabi_idiv0>
 8100c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8100c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100c38:	f000 f806 	bl	8100c48 <__udivmoddi4>
 8100c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100c44:	b004      	add	sp, #16
 8100c46:	4770      	bx	lr

08100c48 <__udivmoddi4>:
 8100c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100c4c:	9e08      	ldr	r6, [sp, #32]
 8100c4e:	4604      	mov	r4, r0
 8100c50:	4688      	mov	r8, r1
 8100c52:	2b00      	cmp	r3, #0
 8100c54:	d14b      	bne.n	8100cee <__udivmoddi4+0xa6>
 8100c56:	428a      	cmp	r2, r1
 8100c58:	4615      	mov	r5, r2
 8100c5a:	d967      	bls.n	8100d2c <__udivmoddi4+0xe4>
 8100c5c:	fab2 f282 	clz	r2, r2
 8100c60:	b14a      	cbz	r2, 8100c76 <__udivmoddi4+0x2e>
 8100c62:	f1c2 0720 	rsb	r7, r2, #32
 8100c66:	fa01 f302 	lsl.w	r3, r1, r2
 8100c6a:	fa20 f707 	lsr.w	r7, r0, r7
 8100c6e:	4095      	lsls	r5, r2
 8100c70:	ea47 0803 	orr.w	r8, r7, r3
 8100c74:	4094      	lsls	r4, r2
 8100c76:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8100c7a:	0c23      	lsrs	r3, r4, #16
 8100c7c:	fbb8 f7fe 	udiv	r7, r8, lr
 8100c80:	fa1f fc85 	uxth.w	ip, r5
 8100c84:	fb0e 8817 	mls	r8, lr, r7, r8
 8100c88:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8100c8c:	fb07 f10c 	mul.w	r1, r7, ip
 8100c90:	4299      	cmp	r1, r3
 8100c92:	d909      	bls.n	8100ca8 <__udivmoddi4+0x60>
 8100c94:	18eb      	adds	r3, r5, r3
 8100c96:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8100c9a:	f080 811b 	bcs.w	8100ed4 <__udivmoddi4+0x28c>
 8100c9e:	4299      	cmp	r1, r3
 8100ca0:	f240 8118 	bls.w	8100ed4 <__udivmoddi4+0x28c>
 8100ca4:	3f02      	subs	r7, #2
 8100ca6:	442b      	add	r3, r5
 8100ca8:	1a5b      	subs	r3, r3, r1
 8100caa:	b2a4      	uxth	r4, r4
 8100cac:	fbb3 f0fe 	udiv	r0, r3, lr
 8100cb0:	fb0e 3310 	mls	r3, lr, r0, r3
 8100cb4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100cb8:	fb00 fc0c 	mul.w	ip, r0, ip
 8100cbc:	45a4      	cmp	ip, r4
 8100cbe:	d909      	bls.n	8100cd4 <__udivmoddi4+0x8c>
 8100cc0:	192c      	adds	r4, r5, r4
 8100cc2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8100cc6:	f080 8107 	bcs.w	8100ed8 <__udivmoddi4+0x290>
 8100cca:	45a4      	cmp	ip, r4
 8100ccc:	f240 8104 	bls.w	8100ed8 <__udivmoddi4+0x290>
 8100cd0:	3802      	subs	r0, #2
 8100cd2:	442c      	add	r4, r5
 8100cd4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8100cd8:	eba4 040c 	sub.w	r4, r4, ip
 8100cdc:	2700      	movs	r7, #0
 8100cde:	b11e      	cbz	r6, 8100ce8 <__udivmoddi4+0xa0>
 8100ce0:	40d4      	lsrs	r4, r2
 8100ce2:	2300      	movs	r3, #0
 8100ce4:	e9c6 4300 	strd	r4, r3, [r6]
 8100ce8:	4639      	mov	r1, r7
 8100cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100cee:	428b      	cmp	r3, r1
 8100cf0:	d909      	bls.n	8100d06 <__udivmoddi4+0xbe>
 8100cf2:	2e00      	cmp	r6, #0
 8100cf4:	f000 80eb 	beq.w	8100ece <__udivmoddi4+0x286>
 8100cf8:	2700      	movs	r7, #0
 8100cfa:	e9c6 0100 	strd	r0, r1, [r6]
 8100cfe:	4638      	mov	r0, r7
 8100d00:	4639      	mov	r1, r7
 8100d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100d06:	fab3 f783 	clz	r7, r3
 8100d0a:	2f00      	cmp	r7, #0
 8100d0c:	d147      	bne.n	8100d9e <__udivmoddi4+0x156>
 8100d0e:	428b      	cmp	r3, r1
 8100d10:	d302      	bcc.n	8100d18 <__udivmoddi4+0xd0>
 8100d12:	4282      	cmp	r2, r0
 8100d14:	f200 80fa 	bhi.w	8100f0c <__udivmoddi4+0x2c4>
 8100d18:	1a84      	subs	r4, r0, r2
 8100d1a:	eb61 0303 	sbc.w	r3, r1, r3
 8100d1e:	2001      	movs	r0, #1
 8100d20:	4698      	mov	r8, r3
 8100d22:	2e00      	cmp	r6, #0
 8100d24:	d0e0      	beq.n	8100ce8 <__udivmoddi4+0xa0>
 8100d26:	e9c6 4800 	strd	r4, r8, [r6]
 8100d2a:	e7dd      	b.n	8100ce8 <__udivmoddi4+0xa0>
 8100d2c:	b902      	cbnz	r2, 8100d30 <__udivmoddi4+0xe8>
 8100d2e:	deff      	udf	#255	; 0xff
 8100d30:	fab2 f282 	clz	r2, r2
 8100d34:	2a00      	cmp	r2, #0
 8100d36:	f040 808f 	bne.w	8100e58 <__udivmoddi4+0x210>
 8100d3a:	1b49      	subs	r1, r1, r5
 8100d3c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8100d40:	fa1f f885 	uxth.w	r8, r5
 8100d44:	2701      	movs	r7, #1
 8100d46:	fbb1 fcfe 	udiv	ip, r1, lr
 8100d4a:	0c23      	lsrs	r3, r4, #16
 8100d4c:	fb0e 111c 	mls	r1, lr, ip, r1
 8100d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100d54:	fb08 f10c 	mul.w	r1, r8, ip
 8100d58:	4299      	cmp	r1, r3
 8100d5a:	d907      	bls.n	8100d6c <__udivmoddi4+0x124>
 8100d5c:	18eb      	adds	r3, r5, r3
 8100d5e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8100d62:	d202      	bcs.n	8100d6a <__udivmoddi4+0x122>
 8100d64:	4299      	cmp	r1, r3
 8100d66:	f200 80cd 	bhi.w	8100f04 <__udivmoddi4+0x2bc>
 8100d6a:	4684      	mov	ip, r0
 8100d6c:	1a59      	subs	r1, r3, r1
 8100d6e:	b2a3      	uxth	r3, r4
 8100d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8100d74:	fb0e 1410 	mls	r4, lr, r0, r1
 8100d78:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8100d7c:	fb08 f800 	mul.w	r8, r8, r0
 8100d80:	45a0      	cmp	r8, r4
 8100d82:	d907      	bls.n	8100d94 <__udivmoddi4+0x14c>
 8100d84:	192c      	adds	r4, r5, r4
 8100d86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8100d8a:	d202      	bcs.n	8100d92 <__udivmoddi4+0x14a>
 8100d8c:	45a0      	cmp	r8, r4
 8100d8e:	f200 80b6 	bhi.w	8100efe <__udivmoddi4+0x2b6>
 8100d92:	4618      	mov	r0, r3
 8100d94:	eba4 0408 	sub.w	r4, r4, r8
 8100d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8100d9c:	e79f      	b.n	8100cde <__udivmoddi4+0x96>
 8100d9e:	f1c7 0c20 	rsb	ip, r7, #32
 8100da2:	40bb      	lsls	r3, r7
 8100da4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8100da8:	ea4e 0e03 	orr.w	lr, lr, r3
 8100dac:	fa01 f407 	lsl.w	r4, r1, r7
 8100db0:	fa20 f50c 	lsr.w	r5, r0, ip
 8100db4:	fa21 f30c 	lsr.w	r3, r1, ip
 8100db8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8100dbc:	4325      	orrs	r5, r4
 8100dbe:	fbb3 f9f8 	udiv	r9, r3, r8
 8100dc2:	0c2c      	lsrs	r4, r5, #16
 8100dc4:	fb08 3319 	mls	r3, r8, r9, r3
 8100dc8:	fa1f fa8e 	uxth.w	sl, lr
 8100dcc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8100dd0:	fb09 f40a 	mul.w	r4, r9, sl
 8100dd4:	429c      	cmp	r4, r3
 8100dd6:	fa02 f207 	lsl.w	r2, r2, r7
 8100dda:	fa00 f107 	lsl.w	r1, r0, r7
 8100dde:	d90b      	bls.n	8100df8 <__udivmoddi4+0x1b0>
 8100de0:	eb1e 0303 	adds.w	r3, lr, r3
 8100de4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8100de8:	f080 8087 	bcs.w	8100efa <__udivmoddi4+0x2b2>
 8100dec:	429c      	cmp	r4, r3
 8100dee:	f240 8084 	bls.w	8100efa <__udivmoddi4+0x2b2>
 8100df2:	f1a9 0902 	sub.w	r9, r9, #2
 8100df6:	4473      	add	r3, lr
 8100df8:	1b1b      	subs	r3, r3, r4
 8100dfa:	b2ad      	uxth	r5, r5
 8100dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8100e00:	fb08 3310 	mls	r3, r8, r0, r3
 8100e04:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8100e08:	fb00 fa0a 	mul.w	sl, r0, sl
 8100e0c:	45a2      	cmp	sl, r4
 8100e0e:	d908      	bls.n	8100e22 <__udivmoddi4+0x1da>
 8100e10:	eb1e 0404 	adds.w	r4, lr, r4
 8100e14:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8100e18:	d26b      	bcs.n	8100ef2 <__udivmoddi4+0x2aa>
 8100e1a:	45a2      	cmp	sl, r4
 8100e1c:	d969      	bls.n	8100ef2 <__udivmoddi4+0x2aa>
 8100e1e:	3802      	subs	r0, #2
 8100e20:	4474      	add	r4, lr
 8100e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8100e26:	fba0 8902 	umull	r8, r9, r0, r2
 8100e2a:	eba4 040a 	sub.w	r4, r4, sl
 8100e2e:	454c      	cmp	r4, r9
 8100e30:	46c2      	mov	sl, r8
 8100e32:	464b      	mov	r3, r9
 8100e34:	d354      	bcc.n	8100ee0 <__udivmoddi4+0x298>
 8100e36:	d051      	beq.n	8100edc <__udivmoddi4+0x294>
 8100e38:	2e00      	cmp	r6, #0
 8100e3a:	d069      	beq.n	8100f10 <__udivmoddi4+0x2c8>
 8100e3c:	ebb1 050a 	subs.w	r5, r1, sl
 8100e40:	eb64 0403 	sbc.w	r4, r4, r3
 8100e44:	fa04 fc0c 	lsl.w	ip, r4, ip
 8100e48:	40fd      	lsrs	r5, r7
 8100e4a:	40fc      	lsrs	r4, r7
 8100e4c:	ea4c 0505 	orr.w	r5, ip, r5
 8100e50:	e9c6 5400 	strd	r5, r4, [r6]
 8100e54:	2700      	movs	r7, #0
 8100e56:	e747      	b.n	8100ce8 <__udivmoddi4+0xa0>
 8100e58:	f1c2 0320 	rsb	r3, r2, #32
 8100e5c:	fa20 f703 	lsr.w	r7, r0, r3
 8100e60:	4095      	lsls	r5, r2
 8100e62:	fa01 f002 	lsl.w	r0, r1, r2
 8100e66:	fa21 f303 	lsr.w	r3, r1, r3
 8100e6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8100e6e:	4338      	orrs	r0, r7
 8100e70:	0c01      	lsrs	r1, r0, #16
 8100e72:	fbb3 f7fe 	udiv	r7, r3, lr
 8100e76:	fa1f f885 	uxth.w	r8, r5
 8100e7a:	fb0e 3317 	mls	r3, lr, r7, r3
 8100e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100e82:	fb07 f308 	mul.w	r3, r7, r8
 8100e86:	428b      	cmp	r3, r1
 8100e88:	fa04 f402 	lsl.w	r4, r4, r2
 8100e8c:	d907      	bls.n	8100e9e <__udivmoddi4+0x256>
 8100e8e:	1869      	adds	r1, r5, r1
 8100e90:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8100e94:	d22f      	bcs.n	8100ef6 <__udivmoddi4+0x2ae>
 8100e96:	428b      	cmp	r3, r1
 8100e98:	d92d      	bls.n	8100ef6 <__udivmoddi4+0x2ae>
 8100e9a:	3f02      	subs	r7, #2
 8100e9c:	4429      	add	r1, r5
 8100e9e:	1acb      	subs	r3, r1, r3
 8100ea0:	b281      	uxth	r1, r0
 8100ea2:	fbb3 f0fe 	udiv	r0, r3, lr
 8100ea6:	fb0e 3310 	mls	r3, lr, r0, r3
 8100eaa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100eae:	fb00 f308 	mul.w	r3, r0, r8
 8100eb2:	428b      	cmp	r3, r1
 8100eb4:	d907      	bls.n	8100ec6 <__udivmoddi4+0x27e>
 8100eb6:	1869      	adds	r1, r5, r1
 8100eb8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8100ebc:	d217      	bcs.n	8100eee <__udivmoddi4+0x2a6>
 8100ebe:	428b      	cmp	r3, r1
 8100ec0:	d915      	bls.n	8100eee <__udivmoddi4+0x2a6>
 8100ec2:	3802      	subs	r0, #2
 8100ec4:	4429      	add	r1, r5
 8100ec6:	1ac9      	subs	r1, r1, r3
 8100ec8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8100ecc:	e73b      	b.n	8100d46 <__udivmoddi4+0xfe>
 8100ece:	4637      	mov	r7, r6
 8100ed0:	4630      	mov	r0, r6
 8100ed2:	e709      	b.n	8100ce8 <__udivmoddi4+0xa0>
 8100ed4:	4607      	mov	r7, r0
 8100ed6:	e6e7      	b.n	8100ca8 <__udivmoddi4+0x60>
 8100ed8:	4618      	mov	r0, r3
 8100eda:	e6fb      	b.n	8100cd4 <__udivmoddi4+0x8c>
 8100edc:	4541      	cmp	r1, r8
 8100ede:	d2ab      	bcs.n	8100e38 <__udivmoddi4+0x1f0>
 8100ee0:	ebb8 0a02 	subs.w	sl, r8, r2
 8100ee4:	eb69 020e 	sbc.w	r2, r9, lr
 8100ee8:	3801      	subs	r0, #1
 8100eea:	4613      	mov	r3, r2
 8100eec:	e7a4      	b.n	8100e38 <__udivmoddi4+0x1f0>
 8100eee:	4660      	mov	r0, ip
 8100ef0:	e7e9      	b.n	8100ec6 <__udivmoddi4+0x27e>
 8100ef2:	4618      	mov	r0, r3
 8100ef4:	e795      	b.n	8100e22 <__udivmoddi4+0x1da>
 8100ef6:	4667      	mov	r7, ip
 8100ef8:	e7d1      	b.n	8100e9e <__udivmoddi4+0x256>
 8100efa:	4681      	mov	r9, r0
 8100efc:	e77c      	b.n	8100df8 <__udivmoddi4+0x1b0>
 8100efe:	3802      	subs	r0, #2
 8100f00:	442c      	add	r4, r5
 8100f02:	e747      	b.n	8100d94 <__udivmoddi4+0x14c>
 8100f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8100f08:	442b      	add	r3, r5
 8100f0a:	e72f      	b.n	8100d6c <__udivmoddi4+0x124>
 8100f0c:	4638      	mov	r0, r7
 8100f0e:	e708      	b.n	8100d22 <__udivmoddi4+0xda>
 8100f10:	4637      	mov	r7, r6
 8100f12:	e6e9      	b.n	8100ce8 <__udivmoddi4+0xa0>

08100f14 <__aeabi_idiv0>:
 8100f14:	4770      	bx	lr
 8100f16:	bf00      	nop

08100f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100f18:	b480      	push	{r7}
 8100f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100f1c:	4b0b      	ldr	r3, [pc, #44]	; (8100f4c <SystemInit+0x34>)
 8100f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8100f22:	4a0a      	ldr	r2, [pc, #40]	; (8100f4c <SystemInit+0x34>)
 8100f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100f2c:	4b07      	ldr	r3, [pc, #28]	; (8100f4c <SystemInit+0x34>)
 8100f2e:	691b      	ldr	r3, [r3, #16]
 8100f30:	4a06      	ldr	r2, [pc, #24]	; (8100f4c <SystemInit+0x34>)
 8100f32:	f043 0310 	orr.w	r3, r3, #16
 8100f36:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8100f38:	4b04      	ldr	r3, [pc, #16]	; (8100f4c <SystemInit+0x34>)
 8100f3a:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8100f3e:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8100f40:	bf00      	nop
 8100f42:	46bd      	mov	sp, r7
 8100f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f48:	4770      	bx	lr
 8100f4a:	bf00      	nop
 8100f4c:	e000ed00 	.word	0xe000ed00

08100f50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8100f50:	b580      	push	{r7, lr}
 8100f52:	b082      	sub	sp, #8
 8100f54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8100f56:	4b21      	ldr	r3, [pc, #132]	; (8100fdc <MX_DMA_Init+0x8c>)
 8100f58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100f5c:	4a1f      	ldr	r2, [pc, #124]	; (8100fdc <MX_DMA_Init+0x8c>)
 8100f5e:	f043 0301 	orr.w	r3, r3, #1
 8100f62:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100f66:	4b1d      	ldr	r3, [pc, #116]	; (8100fdc <MX_DMA_Init+0x8c>)
 8100f68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100f6c:	f003 0301 	and.w	r3, r3, #1
 8100f70:	607b      	str	r3, [r7, #4]
 8100f72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8100f74:	4b19      	ldr	r3, [pc, #100]	; (8100fdc <MX_DMA_Init+0x8c>)
 8100f76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100f7a:	4a18      	ldr	r2, [pc, #96]	; (8100fdc <MX_DMA_Init+0x8c>)
 8100f7c:	f043 0302 	orr.w	r3, r3, #2
 8100f80:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100f84:	4b15      	ldr	r3, [pc, #84]	; (8100fdc <MX_DMA_Init+0x8c>)
 8100f86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100f8a:	f003 0302 	and.w	r3, r3, #2
 8100f8e:	603b      	str	r3, [r7, #0]
 8100f90:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8100f92:	2200      	movs	r2, #0
 8100f94:	2105      	movs	r1, #5
 8100f96:	200b      	movs	r0, #11
 8100f98:	f000 fff2 	bl	8101f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8100f9c:	200b      	movs	r0, #11
 8100f9e:	f001 f809 	bl	8101fb4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8100fa2:	2200      	movs	r2, #0
 8100fa4:	2105      	movs	r1, #5
 8100fa6:	200c      	movs	r0, #12
 8100fa8:	f000 ffea 	bl	8101f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8100fac:	200c      	movs	r0, #12
 8100fae:	f001 f801 	bl	8101fb4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8100fb2:	2200      	movs	r2, #0
 8100fb4:	2105      	movs	r1, #5
 8100fb6:	203a      	movs	r0, #58	; 0x3a
 8100fb8:	f000 ffe2 	bl	8101f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8100fbc:	203a      	movs	r0, #58	; 0x3a
 8100fbe:	f000 fff9 	bl	8101fb4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8100fc2:	2200      	movs	r2, #0
 8100fc4:	2105      	movs	r1, #5
 8100fc6:	203b      	movs	r0, #59	; 0x3b
 8100fc8:	f000 ffda 	bl	8101f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8100fcc:	203b      	movs	r0, #59	; 0x3b
 8100fce:	f000 fff1 	bl	8101fb4 <HAL_NVIC_EnableIRQ>

}
 8100fd2:	bf00      	nop
 8100fd4:	3708      	adds	r7, #8
 8100fd6:	46bd      	mov	sp, r7
 8100fd8:	bd80      	pop	{r7, pc}
 8100fda:	bf00      	nop
 8100fdc:	58024400 	.word	0x58024400

08100fe0 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8100fe0:	b580      	push	{r7, lr}
 8100fe2:	af00      	add	r7, sp, #0

  hfdcan1.Instance = FDCAN1;
 8100fe4:	4b2e      	ldr	r3, [pc, #184]	; (81010a0 <MX_FDCAN1_Init+0xc0>)
 8100fe6:	4a2f      	ldr	r2, [pc, #188]	; (81010a4 <MX_FDCAN1_Init+0xc4>)
 8100fe8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8100fea:	4b2d      	ldr	r3, [pc, #180]	; (81010a0 <MX_FDCAN1_Init+0xc0>)
 8100fec:	2200      	movs	r2, #0
 8100fee:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8100ff0:	4b2b      	ldr	r3, [pc, #172]	; (81010a0 <MX_FDCAN1_Init+0xc0>)
 8100ff2:	2200      	movs	r2, #0
 8100ff4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8100ff6:	4b2a      	ldr	r3, [pc, #168]	; (81010a0 <MX_FDCAN1_Init+0xc0>)
 8100ff8:	2200      	movs	r2, #0
 8100ffa:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8100ffc:	4b28      	ldr	r3, [pc, #160]	; (81010a0 <MX_FDCAN1_Init+0xc0>)
 8100ffe:	2200      	movs	r2, #0
 8101000:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8101002:	4b27      	ldr	r3, [pc, #156]	; (81010a0 <MX_FDCAN1_Init+0xc0>)
 8101004:	2200      	movs	r2, #0
 8101006:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8101008:	4b25      	ldr	r3, [pc, #148]	; (81010a0 <MX_FDCAN1_Init+0xc0>)
 810100a:	2201      	movs	r2, #1
 810100c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 810100e:	4b24      	ldr	r3, [pc, #144]	; (81010a0 <MX_FDCAN1_Init+0xc0>)
 8101010:	2201      	movs	r2, #1
 8101012:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8101014:	4b22      	ldr	r3, [pc, #136]	; (81010a0 <MX_FDCAN1_Init+0xc0>)
 8101016:	2202      	movs	r2, #2
 8101018:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 810101a:	4b21      	ldr	r3, [pc, #132]	; (81010a0 <MX_FDCAN1_Init+0xc0>)
 810101c:	2202      	movs	r2, #2
 810101e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8101020:	4b1f      	ldr	r3, [pc, #124]	; (81010a0 <MX_FDCAN1_Init+0xc0>)
 8101022:	2201      	movs	r2, #1
 8101024:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8101026:	4b1e      	ldr	r3, [pc, #120]	; (81010a0 <MX_FDCAN1_Init+0xc0>)
 8101028:	2201      	movs	r2, #1
 810102a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 810102c:	4b1c      	ldr	r3, [pc, #112]	; (81010a0 <MX_FDCAN1_Init+0xc0>)
 810102e:	2201      	movs	r2, #1
 8101030:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8101032:	4b1b      	ldr	r3, [pc, #108]	; (81010a0 <MX_FDCAN1_Init+0xc0>)
 8101034:	2201      	movs	r2, #1
 8101036:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8101038:	4b19      	ldr	r3, [pc, #100]	; (81010a0 <MX_FDCAN1_Init+0xc0>)
 810103a:	2200      	movs	r2, #0
 810103c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 810103e:	4b18      	ldr	r3, [pc, #96]	; (81010a0 <MX_FDCAN1_Init+0xc0>)
 8101040:	2200      	movs	r2, #0
 8101042:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8101044:	4b16      	ldr	r3, [pc, #88]	; (81010a0 <MX_FDCAN1_Init+0xc0>)
 8101046:	2200      	movs	r2, #0
 8101048:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 810104a:	4b15      	ldr	r3, [pc, #84]	; (81010a0 <MX_FDCAN1_Init+0xc0>)
 810104c:	2200      	movs	r2, #0
 810104e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8101050:	4b13      	ldr	r3, [pc, #76]	; (81010a0 <MX_FDCAN1_Init+0xc0>)
 8101052:	2204      	movs	r2, #4
 8101054:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8101056:	4b12      	ldr	r3, [pc, #72]	; (81010a0 <MX_FDCAN1_Init+0xc0>)
 8101058:	2200      	movs	r2, #0
 810105a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 810105c:	4b10      	ldr	r3, [pc, #64]	; (81010a0 <MX_FDCAN1_Init+0xc0>)
 810105e:	2204      	movs	r2, #4
 8101060:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8101062:	4b0f      	ldr	r3, [pc, #60]	; (81010a0 <MX_FDCAN1_Init+0xc0>)
 8101064:	2200      	movs	r2, #0
 8101066:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8101068:	4b0d      	ldr	r3, [pc, #52]	; (81010a0 <MX_FDCAN1_Init+0xc0>)
 810106a:	2204      	movs	r2, #4
 810106c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 810106e:	4b0c      	ldr	r3, [pc, #48]	; (81010a0 <MX_FDCAN1_Init+0xc0>)
 8101070:	2200      	movs	r2, #0
 8101072:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8101074:	4b0a      	ldr	r3, [pc, #40]	; (81010a0 <MX_FDCAN1_Init+0xc0>)
 8101076:	2200      	movs	r2, #0
 8101078:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 810107a:	4b09      	ldr	r3, [pc, #36]	; (81010a0 <MX_FDCAN1_Init+0xc0>)
 810107c:	2200      	movs	r2, #0
 810107e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8101080:	4b07      	ldr	r3, [pc, #28]	; (81010a0 <MX_FDCAN1_Init+0xc0>)
 8101082:	2200      	movs	r2, #0
 8101084:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8101086:	4b06      	ldr	r3, [pc, #24]	; (81010a0 <MX_FDCAN1_Init+0xc0>)
 8101088:	2204      	movs	r2, #4
 810108a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 810108c:	4804      	ldr	r0, [pc, #16]	; (81010a0 <MX_FDCAN1_Init+0xc0>)
 810108e:	f002 feb7 	bl	8103e00 <HAL_FDCAN_Init>
 8101092:	4603      	mov	r3, r0
 8101094:	2b00      	cmp	r3, #0
 8101096:	d001      	beq.n	810109c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8101098:	f000 fa2c 	bl	81014f4 <Error_Handler>
  }

}
 810109c:	bf00      	nop
 810109e:	bd80      	pop	{r7, pc}
 81010a0:	10004bfc 	.word	0x10004bfc
 81010a4:	4000a000 	.word	0x4000a000

081010a8 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 81010a8:	b580      	push	{r7, lr}
 81010aa:	b08a      	sub	sp, #40	; 0x28
 81010ac:	af00      	add	r7, sp, #0
 81010ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81010b0:	f107 0314 	add.w	r3, r7, #20
 81010b4:	2200      	movs	r2, #0
 81010b6:	601a      	str	r2, [r3, #0]
 81010b8:	605a      	str	r2, [r3, #4]
 81010ba:	609a      	str	r2, [r3, #8]
 81010bc:	60da      	str	r2, [r3, #12]
 81010be:	611a      	str	r2, [r3, #16]
  if(fdcanHandle->Instance==FDCAN1)
 81010c0:	687b      	ldr	r3, [r7, #4]
 81010c2:	681b      	ldr	r3, [r3, #0]
 81010c4:	4a1a      	ldr	r2, [pc, #104]	; (8101130 <HAL_FDCAN_MspInit+0x88>)
 81010c6:	4293      	cmp	r3, r2
 81010c8:	d12e      	bne.n	8101128 <HAL_FDCAN_MspInit+0x80>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 81010ca:	4b1a      	ldr	r3, [pc, #104]	; (8101134 <HAL_FDCAN_MspInit+0x8c>)
 81010cc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 81010d0:	4a18      	ldr	r2, [pc, #96]	; (8101134 <HAL_FDCAN_MspInit+0x8c>)
 81010d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81010d6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 81010da:	4b16      	ldr	r3, [pc, #88]	; (8101134 <HAL_FDCAN_MspInit+0x8c>)
 81010dc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 81010e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81010e4:	613b      	str	r3, [r7, #16]
 81010e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 81010e8:	4b12      	ldr	r3, [pc, #72]	; (8101134 <HAL_FDCAN_MspInit+0x8c>)
 81010ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81010ee:	4a11      	ldr	r2, [pc, #68]	; (8101134 <HAL_FDCAN_MspInit+0x8c>)
 81010f0:	f043 0301 	orr.w	r3, r3, #1
 81010f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81010f8:	4b0e      	ldr	r3, [pc, #56]	; (8101134 <HAL_FDCAN_MspInit+0x8c>)
 81010fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81010fe:	f003 0301 	and.w	r3, r3, #1
 8101102:	60fb      	str	r3, [r7, #12]
 8101104:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8101106:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 810110a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810110c:	2302      	movs	r3, #2
 810110e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101110:	2300      	movs	r3, #0
 8101112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101114:	2303      	movs	r3, #3
 8101116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8101118:	2309      	movs	r3, #9
 810111a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810111c:	f107 0314 	add.w	r3, r7, #20
 8101120:	4619      	mov	r1, r3
 8101122:	4805      	ldr	r0, [pc, #20]	; (8101138 <HAL_FDCAN_MspInit+0x90>)
 8101124:	f003 f9de 	bl	81044e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8101128:	bf00      	nop
 810112a:	3728      	adds	r7, #40	; 0x28
 810112c:	46bd      	mov	sp, r7
 810112e:	bd80      	pop	{r7, pc}
 8101130:	4000a000 	.word	0x4000a000
 8101134:	58024400 	.word	0x58024400
 8101138:	58020000 	.word	0x58020000

0810113c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 810113c:	b580      	push	{r7, lr}
 810113e:	af00      	add	r7, sp, #0

  /* Create the thread(s) */
  /* creation of watchdog */

  /* USER CODE BEGIN RTOS_THREADS */
	initCortexM4();
 8101140:	f008 ffd2 	bl	810a0e8 <initCortexM4>
  /* USER CODE END RTOS_THREADS */

}
 8101144:	bf00      	nop
 8101146:	bd80      	pop	{r7, pc}

08101148 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8101148:	b480      	push	{r7}
 810114a:	b085      	sub	sp, #20
 810114c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 810114e:	4b21      	ldr	r3, [pc, #132]	; (81011d4 <MX_GPIO_Init+0x8c>)
 8101150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101154:	4a1f      	ldr	r2, [pc, #124]	; (81011d4 <MX_GPIO_Init+0x8c>)
 8101156:	f043 0320 	orr.w	r3, r3, #32
 810115a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810115e:	4b1d      	ldr	r3, [pc, #116]	; (81011d4 <MX_GPIO_Init+0x8c>)
 8101160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101164:	f003 0320 	and.w	r3, r3, #32
 8101168:	60fb      	str	r3, [r7, #12]
 810116a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 810116c:	4b19      	ldr	r3, [pc, #100]	; (81011d4 <MX_GPIO_Init+0x8c>)
 810116e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101172:	4a18      	ldr	r2, [pc, #96]	; (81011d4 <MX_GPIO_Init+0x8c>)
 8101174:	f043 0301 	orr.w	r3, r3, #1
 8101178:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810117c:	4b15      	ldr	r3, [pc, #84]	; (81011d4 <MX_GPIO_Init+0x8c>)
 810117e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101182:	f003 0301 	and.w	r3, r3, #1
 8101186:	60bb      	str	r3, [r7, #8]
 8101188:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 810118a:	4b12      	ldr	r3, [pc, #72]	; (81011d4 <MX_GPIO_Init+0x8c>)
 810118c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101190:	4a10      	ldr	r2, [pc, #64]	; (81011d4 <MX_GPIO_Init+0x8c>)
 8101192:	f043 0308 	orr.w	r3, r3, #8
 8101196:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810119a:	4b0e      	ldr	r3, [pc, #56]	; (81011d4 <MX_GPIO_Init+0x8c>)
 810119c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011a0:	f003 0308 	and.w	r3, r3, #8
 81011a4:	607b      	str	r3, [r7, #4]
 81011a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81011a8:	4b0a      	ldr	r3, [pc, #40]	; (81011d4 <MX_GPIO_Init+0x8c>)
 81011aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011ae:	4a09      	ldr	r2, [pc, #36]	; (81011d4 <MX_GPIO_Init+0x8c>)
 81011b0:	f043 0302 	orr.w	r3, r3, #2
 81011b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81011b8:	4b06      	ldr	r3, [pc, #24]	; (81011d4 <MX_GPIO_Init+0x8c>)
 81011ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011be:	f003 0302 	and.w	r3, r3, #2
 81011c2:	603b      	str	r3, [r7, #0]
 81011c4:	683b      	ldr	r3, [r7, #0]

}
 81011c6:	bf00      	nop
 81011c8:	3714      	adds	r7, #20
 81011ca:	46bd      	mov	sp, r7
 81011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011d0:	4770      	bx	lr
 81011d2:	bf00      	nop
 81011d4:	58024400 	.word	0x58024400

081011d8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 81011d8:	b580      	push	{r7, lr}
 81011da:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 81011dc:	4b1c      	ldr	r3, [pc, #112]	; (8101250 <MX_I2C1_Init+0x78>)
 81011de:	4a1d      	ldr	r2, [pc, #116]	; (8101254 <MX_I2C1_Init+0x7c>)
 81011e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401242;
 81011e2:	4b1b      	ldr	r3, [pc, #108]	; (8101250 <MX_I2C1_Init+0x78>)
 81011e4:	4a1c      	ldr	r2, [pc, #112]	; (8101258 <MX_I2C1_Init+0x80>)
 81011e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 81011e8:	4b19      	ldr	r3, [pc, #100]	; (8101250 <MX_I2C1_Init+0x78>)
 81011ea:	2200      	movs	r2, #0
 81011ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 81011ee:	4b18      	ldr	r3, [pc, #96]	; (8101250 <MX_I2C1_Init+0x78>)
 81011f0:	2201      	movs	r2, #1
 81011f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 81011f4:	4b16      	ldr	r3, [pc, #88]	; (8101250 <MX_I2C1_Init+0x78>)
 81011f6:	2200      	movs	r2, #0
 81011f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 81011fa:	4b15      	ldr	r3, [pc, #84]	; (8101250 <MX_I2C1_Init+0x78>)
 81011fc:	2200      	movs	r2, #0
 81011fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8101200:	4b13      	ldr	r3, [pc, #76]	; (8101250 <MX_I2C1_Init+0x78>)
 8101202:	2200      	movs	r2, #0
 8101204:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8101206:	4b12      	ldr	r3, [pc, #72]	; (8101250 <MX_I2C1_Init+0x78>)
 8101208:	2200      	movs	r2, #0
 810120a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 810120c:	4b10      	ldr	r3, [pc, #64]	; (8101250 <MX_I2C1_Init+0x78>)
 810120e:	2200      	movs	r2, #0
 8101210:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8101212:	480f      	ldr	r0, [pc, #60]	; (8101250 <MX_I2C1_Init+0x78>)
 8101214:	f003 fb28 	bl	8104868 <HAL_I2C_Init>
 8101218:	4603      	mov	r3, r0
 810121a:	2b00      	cmp	r3, #0
 810121c:	d001      	beq.n	8101222 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 810121e:	f000 f969 	bl	81014f4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8101222:	2100      	movs	r1, #0
 8101224:	480a      	ldr	r0, [pc, #40]	; (8101250 <MX_I2C1_Init+0x78>)
 8101226:	f003 fbae 	bl	8104986 <HAL_I2CEx_ConfigAnalogFilter>
 810122a:	4603      	mov	r3, r0
 810122c:	2b00      	cmp	r3, #0
 810122e:	d001      	beq.n	8101234 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8101230:	f000 f960 	bl	81014f4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8101234:	2100      	movs	r1, #0
 8101236:	4806      	ldr	r0, [pc, #24]	; (8101250 <MX_I2C1_Init+0x78>)
 8101238:	f003 fbf0 	bl	8104a1c <HAL_I2CEx_ConfigDigitalFilter>
 810123c:	4603      	mov	r3, r0
 810123e:	2b00      	cmp	r3, #0
 8101240:	d001      	beq.n	8101246 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8101242:	f000 f957 	bl	81014f4 <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8101246:	2001      	movs	r0, #1
 8101248:	f003 fc34 	bl	8104ab4 <HAL_I2CEx_EnableFastModePlus>

}
 810124c:	bf00      	nop
 810124e:	bd80      	pop	{r7, pc}
 8101250:	10004ce8 	.word	0x10004ce8
 8101254:	40005400 	.word	0x40005400
 8101258:	00401242 	.word	0x00401242

0810125c <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 810125c:	b580      	push	{r7, lr}
 810125e:	af00      	add	r7, sp, #0

  hi2c4.Instance = I2C4;
 8101260:	4b1b      	ldr	r3, [pc, #108]	; (81012d0 <MX_I2C4_Init+0x74>)
 8101262:	4a1c      	ldr	r2, [pc, #112]	; (81012d4 <MX_I2C4_Init+0x78>)
 8101264:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10C0ECFF;
 8101266:	4b1a      	ldr	r3, [pc, #104]	; (81012d0 <MX_I2C4_Init+0x74>)
 8101268:	4a1b      	ldr	r2, [pc, #108]	; (81012d8 <MX_I2C4_Init+0x7c>)
 810126a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 810126c:	4b18      	ldr	r3, [pc, #96]	; (81012d0 <MX_I2C4_Init+0x74>)
 810126e:	2200      	movs	r2, #0
 8101270:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8101272:	4b17      	ldr	r3, [pc, #92]	; (81012d0 <MX_I2C4_Init+0x74>)
 8101274:	2201      	movs	r2, #1
 8101276:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8101278:	4b15      	ldr	r3, [pc, #84]	; (81012d0 <MX_I2C4_Init+0x74>)
 810127a:	2200      	movs	r2, #0
 810127c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 810127e:	4b14      	ldr	r3, [pc, #80]	; (81012d0 <MX_I2C4_Init+0x74>)
 8101280:	2200      	movs	r2, #0
 8101282:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8101284:	4b12      	ldr	r3, [pc, #72]	; (81012d0 <MX_I2C4_Init+0x74>)
 8101286:	2200      	movs	r2, #0
 8101288:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 810128a:	4b11      	ldr	r3, [pc, #68]	; (81012d0 <MX_I2C4_Init+0x74>)
 810128c:	2200      	movs	r2, #0
 810128e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8101290:	4b0f      	ldr	r3, [pc, #60]	; (81012d0 <MX_I2C4_Init+0x74>)
 8101292:	2200      	movs	r2, #0
 8101294:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8101296:	480e      	ldr	r0, [pc, #56]	; (81012d0 <MX_I2C4_Init+0x74>)
 8101298:	f003 fae6 	bl	8104868 <HAL_I2C_Init>
 810129c:	4603      	mov	r3, r0
 810129e:	2b00      	cmp	r3, #0
 81012a0:	d001      	beq.n	81012a6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 81012a2:	f000 f927 	bl	81014f4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 81012a6:	2100      	movs	r1, #0
 81012a8:	4809      	ldr	r0, [pc, #36]	; (81012d0 <MX_I2C4_Init+0x74>)
 81012aa:	f003 fb6c 	bl	8104986 <HAL_I2CEx_ConfigAnalogFilter>
 81012ae:	4603      	mov	r3, r0
 81012b0:	2b00      	cmp	r3, #0
 81012b2:	d001      	beq.n	81012b8 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 81012b4:	f000 f91e 	bl	81014f4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 81012b8:	2100      	movs	r1, #0
 81012ba:	4805      	ldr	r0, [pc, #20]	; (81012d0 <MX_I2C4_Init+0x74>)
 81012bc:	f003 fbae 	bl	8104a1c <HAL_I2CEx_ConfigDigitalFilter>
 81012c0:	4603      	mov	r3, r0
 81012c2:	2b00      	cmp	r3, #0
 81012c4:	d001      	beq.n	81012ca <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 81012c6:	f000 f915 	bl	81014f4 <Error_Handler>
  }

}
 81012ca:	bf00      	nop
 81012cc:	bd80      	pop	{r7, pc}
 81012ce:	bf00      	nop
 81012d0:	10004c9c 	.word	0x10004c9c
 81012d4:	58001c00 	.word	0x58001c00
 81012d8:	10c0ecff 	.word	0x10c0ecff

081012dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 81012dc:	b580      	push	{r7, lr}
 81012de:	b08c      	sub	sp, #48	; 0x30
 81012e0:	af00      	add	r7, sp, #0
 81012e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81012e4:	f107 031c 	add.w	r3, r7, #28
 81012e8:	2200      	movs	r2, #0
 81012ea:	601a      	str	r2, [r3, #0]
 81012ec:	605a      	str	r2, [r3, #4]
 81012ee:	609a      	str	r2, [r3, #8]
 81012f0:	60da      	str	r2, [r3, #12]
 81012f2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 81012f4:	687b      	ldr	r3, [r7, #4]
 81012f6:	681b      	ldr	r3, [r3, #0]
 81012f8:	4a35      	ldr	r2, [pc, #212]	; (81013d0 <HAL_I2C_MspInit+0xf4>)
 81012fa:	4293      	cmp	r3, r2
 81012fc:	d12f      	bne.n	810135e <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81012fe:	4b35      	ldr	r3, [pc, #212]	; (81013d4 <HAL_I2C_MspInit+0xf8>)
 8101300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101304:	4a33      	ldr	r2, [pc, #204]	; (81013d4 <HAL_I2C_MspInit+0xf8>)
 8101306:	f043 0302 	orr.w	r3, r3, #2
 810130a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810130e:	4b31      	ldr	r3, [pc, #196]	; (81013d4 <HAL_I2C_MspInit+0xf8>)
 8101310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101314:	f003 0302 	and.w	r3, r3, #2
 8101318:	61bb      	str	r3, [r7, #24]
 810131a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 810131c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8101320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101322:	2312      	movs	r3, #18
 8101324:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101326:	2300      	movs	r3, #0
 8101328:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810132a:	2300      	movs	r3, #0
 810132c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 810132e:	2304      	movs	r3, #4
 8101330:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101332:	f107 031c 	add.w	r3, r7, #28
 8101336:	4619      	mov	r1, r3
 8101338:	4827      	ldr	r0, [pc, #156]	; (81013d8 <HAL_I2C_MspInit+0xfc>)
 810133a:	f003 f8d3 	bl	81044e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 810133e:	4b25      	ldr	r3, [pc, #148]	; (81013d4 <HAL_I2C_MspInit+0xf8>)
 8101340:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101344:	4a23      	ldr	r2, [pc, #140]	; (81013d4 <HAL_I2C_MspInit+0xf8>)
 8101346:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 810134a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810134e:	4b21      	ldr	r3, [pc, #132]	; (81013d4 <HAL_I2C_MspInit+0xf8>)
 8101350:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101358:	617b      	str	r3, [r7, #20]
 810135a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 810135c:	e033      	b.n	81013c6 <HAL_I2C_MspInit+0xea>
  else if(i2cHandle->Instance==I2C4)
 810135e:	687b      	ldr	r3, [r7, #4]
 8101360:	681b      	ldr	r3, [r3, #0]
 8101362:	4a1e      	ldr	r2, [pc, #120]	; (81013dc <HAL_I2C_MspInit+0x100>)
 8101364:	4293      	cmp	r3, r2
 8101366:	d12e      	bne.n	81013c6 <HAL_I2C_MspInit+0xea>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8101368:	4b1a      	ldr	r3, [pc, #104]	; (81013d4 <HAL_I2C_MspInit+0xf8>)
 810136a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810136e:	4a19      	ldr	r2, [pc, #100]	; (81013d4 <HAL_I2C_MspInit+0xf8>)
 8101370:	f043 0320 	orr.w	r3, r3, #32
 8101374:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101378:	4b16      	ldr	r3, [pc, #88]	; (81013d4 <HAL_I2C_MspInit+0xf8>)
 810137a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810137e:	f003 0320 	and.w	r3, r3, #32
 8101382:	613b      	str	r3, [r7, #16]
 8101384:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8101386:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 810138a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 810138c:	2312      	movs	r3, #18
 810138e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101390:	2300      	movs	r3, #0
 8101392:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101394:	2300      	movs	r3, #0
 8101396:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8101398:	2304      	movs	r3, #4
 810139a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 810139c:	f107 031c 	add.w	r3, r7, #28
 81013a0:	4619      	mov	r1, r3
 81013a2:	480f      	ldr	r0, [pc, #60]	; (81013e0 <HAL_I2C_MspInit+0x104>)
 81013a4:	f003 f89e 	bl	81044e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 81013a8:	4b0a      	ldr	r3, [pc, #40]	; (81013d4 <HAL_I2C_MspInit+0xf8>)
 81013aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81013ae:	4a09      	ldr	r2, [pc, #36]	; (81013d4 <HAL_I2C_MspInit+0xf8>)
 81013b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 81013b4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81013b8:	4b06      	ldr	r3, [pc, #24]	; (81013d4 <HAL_I2C_MspInit+0xf8>)
 81013ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81013be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81013c2:	60fb      	str	r3, [r7, #12]
 81013c4:	68fb      	ldr	r3, [r7, #12]
}
 81013c6:	bf00      	nop
 81013c8:	3730      	adds	r7, #48	; 0x30
 81013ca:	46bd      	mov	sp, r7
 81013cc:	bd80      	pop	{r7, pc}
 81013ce:	bf00      	nop
 81013d0:	40005400 	.word	0x40005400
 81013d4:	58024400 	.word	0x58024400
 81013d8:	58020400 	.word	0x58020400
 81013dc:	58001c00 	.word	0x58001c00
 81013e0:	58021400 	.word	0x58021400

081013e4 <MX_IWDG2_Init>:

IWDG_HandleTypeDef hiwdg2;

/* IWDG2 init function */
void MX_IWDG2_Init(void)
{
 81013e4:	b580      	push	{r7, lr}
 81013e6:	af00      	add	r7, sp, #0

  hiwdg2.Instance = IWDG2;
 81013e8:	4b0b      	ldr	r3, [pc, #44]	; (8101418 <MX_IWDG2_Init+0x34>)
 81013ea:	4a0c      	ldr	r2, [pc, #48]	; (810141c <MX_IWDG2_Init+0x38>)
 81013ec:	601a      	str	r2, [r3, #0]
  hiwdg2.Init.Prescaler = IWDG_PRESCALER_4;
 81013ee:	4b0a      	ldr	r3, [pc, #40]	; (8101418 <MX_IWDG2_Init+0x34>)
 81013f0:	2200      	movs	r2, #0
 81013f2:	605a      	str	r2, [r3, #4]
  hiwdg2.Init.Window = 4095;
 81013f4:	4b08      	ldr	r3, [pc, #32]	; (8101418 <MX_IWDG2_Init+0x34>)
 81013f6:	f640 72ff 	movw	r2, #4095	; 0xfff
 81013fa:	60da      	str	r2, [r3, #12]
  hiwdg2.Init.Reload = 4095;
 81013fc:	4b06      	ldr	r3, [pc, #24]	; (8101418 <MX_IWDG2_Init+0x34>)
 81013fe:	f640 72ff 	movw	r2, #4095	; 0xfff
 8101402:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg2) != HAL_OK)
 8101404:	4804      	ldr	r0, [pc, #16]	; (8101418 <MX_IWDG2_Init+0x34>)
 8101406:	f003 fb79 	bl	8104afc <HAL_IWDG_Init>
 810140a:	4603      	mov	r3, r0
 810140c:	2b00      	cmp	r3, #0
 810140e:	d001      	beq.n	8101414 <MX_IWDG2_Init+0x30>
  {
    Error_Handler();
 8101410:	f000 f870 	bl	81014f4 <Error_Handler>
  }

}
 8101414:	bf00      	nop
 8101416:	bd80      	pop	{r7, pc}
 8101418:	10004d34 	.word	0x10004d34
 810141c:	58004c00 	.word	0x58004c00

08101420 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101420:	b580      	push	{r7, lr}
 8101422:	b082      	sub	sp, #8
 8101424:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101426:	4b27      	ldr	r3, [pc, #156]	; (81014c4 <main+0xa4>)
 8101428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810142c:	4a25      	ldr	r2, [pc, #148]	; (81014c4 <main+0xa4>)
 810142e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101432:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101436:	4b23      	ldr	r3, [pc, #140]	; (81014c4 <main+0xa4>)
 8101438:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810143c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101440:	607b      	str	r3, [r7, #4]
 8101442:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101444:	2001      	movs	r0, #1
 8101446:	f003 f9fd 	bl	8104844 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810144a:	f003 fc23 	bl	8104c94 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810144e:	2201      	movs	r2, #1
 8101450:	2102      	movs	r1, #2
 8101452:	2000      	movs	r0, #0
 8101454:	f003 fba8 	bl	8104ba8 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101458:	4b1b      	ldr	r3, [pc, #108]	; (81014c8 <main+0xa8>)
 810145a:	681b      	ldr	r3, [r3, #0]
 810145c:	091b      	lsrs	r3, r3, #4
 810145e:	f003 030f 	and.w	r3, r3, #15
 8101462:	2b07      	cmp	r3, #7
 8101464:	d108      	bne.n	8101478 <main+0x58>
 8101466:	4b19      	ldr	r3, [pc, #100]	; (81014cc <main+0xac>)
 8101468:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 810146c:	4a17      	ldr	r2, [pc, #92]	; (81014cc <main+0xac>)
 810146e:	f043 0301 	orr.w	r3, r3, #1
 8101472:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8101476:	e007      	b.n	8101488 <main+0x68>
 8101478:	4b14      	ldr	r3, [pc, #80]	; (81014cc <main+0xac>)
 810147a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 810147e:	4a13      	ldr	r2, [pc, #76]	; (81014cc <main+0xac>)
 8101480:	f043 0301 	orr.w	r3, r3, #1
 8101484:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101488:	f000 fc44 	bl	8101d14 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 810148c:	f7ff fe5c 	bl	8101148 <MX_GPIO_Init>
  MX_DMA_Init();
 8101490:	f7ff fd5e 	bl	8100f50 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8101494:	f7ff fda4 	bl	8100fe0 <MX_FDCAN1_Init>
  MX_IWDG2_Init();
 8101498:	f7ff ffa4 	bl	81013e4 <MX_IWDG2_Init>
  MX_SPI5_Init();
 810149c:	f000 f884 	bl	81015a8 <MX_SPI5_Init>
  MX_FATFS_Init();
 81014a0:	f005 ffbc 	bl	810741c <MX_FATFS_Init>
  MX_I2C1_Init();
 81014a4:	f7ff fe98 	bl	81011d8 <MX_I2C1_Init>
  MX_I2C4_Init();
 81014a8:	f7ff fed8 	bl	810125c <MX_I2C4_Init>
  MX_SPI1_Init();
 81014ac:	f000 f826 	bl	81014fc <MX_SPI1_Init>
  MX_USART3_UART_Init();
 81014b0:	f000 fb0a 	bl	8101ac8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 81014b4:	f006 f87e 	bl	81075b4 <osKernelInitialize>
  MX_FREERTOS_Init();
 81014b8:	f7ff fe40 	bl	810113c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 81014bc:	f006 f8ae 	bl	810761c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81014c0:	e7fe      	b.n	81014c0 <main+0xa0>
 81014c2:	bf00      	nop
 81014c4:	58024400 	.word	0x58024400
 81014c8:	e000ed00 	.word	0xe000ed00
 81014cc:	58026400 	.word	0x58026400

081014d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 81014d0:	b580      	push	{r7, lr}
 81014d2:	b082      	sub	sp, #8
 81014d4:	af00      	add	r7, sp, #0
 81014d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM8) {
 81014d8:	687b      	ldr	r3, [r7, #4]
 81014da:	681b      	ldr	r3, [r3, #0]
 81014dc:	4a04      	ldr	r2, [pc, #16]	; (81014f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 81014de:	4293      	cmp	r3, r2
 81014e0:	d101      	bne.n	81014e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 81014e2:	f000 fc75 	bl	8101dd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 81014e6:	bf00      	nop
 81014e8:	3708      	adds	r7, #8
 81014ea:	46bd      	mov	sp, r7
 81014ec:	bd80      	pop	{r7, pc}
 81014ee:	bf00      	nop
 81014f0:	40010400 	.word	0x40010400

081014f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81014f4:	b480      	push	{r7}
 81014f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81014f8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81014fa:	e7fe      	b.n	81014fa <Error_Handler+0x6>

081014fc <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 81014fc:	b580      	push	{r7, lr}
 81014fe:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8101500:	4b27      	ldr	r3, [pc, #156]	; (81015a0 <MX_SPI1_Init+0xa4>)
 8101502:	4a28      	ldr	r2, [pc, #160]	; (81015a4 <MX_SPI1_Init+0xa8>)
 8101504:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8101506:	4b26      	ldr	r3, [pc, #152]	; (81015a0 <MX_SPI1_Init+0xa4>)
 8101508:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 810150c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 810150e:	4b24      	ldr	r3, [pc, #144]	; (81015a0 <MX_SPI1_Init+0xa4>)
 8101510:	2200      	movs	r2, #0
 8101512:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8101514:	4b22      	ldr	r3, [pc, #136]	; (81015a0 <MX_SPI1_Init+0xa4>)
 8101516:	2203      	movs	r2, #3
 8101518:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 810151a:	4b21      	ldr	r3, [pc, #132]	; (81015a0 <MX_SPI1_Init+0xa4>)
 810151c:	2200      	movs	r2, #0
 810151e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8101520:	4b1f      	ldr	r3, [pc, #124]	; (81015a0 <MX_SPI1_Init+0xa4>)
 8101522:	2200      	movs	r2, #0
 8101524:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8101526:	4b1e      	ldr	r3, [pc, #120]	; (81015a0 <MX_SPI1_Init+0xa4>)
 8101528:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 810152c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 810152e:	4b1c      	ldr	r3, [pc, #112]	; (81015a0 <MX_SPI1_Init+0xa4>)
 8101530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8101534:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8101536:	4b1a      	ldr	r3, [pc, #104]	; (81015a0 <MX_SPI1_Init+0xa4>)
 8101538:	2200      	movs	r2, #0
 810153a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 810153c:	4b18      	ldr	r3, [pc, #96]	; (81015a0 <MX_SPI1_Init+0xa4>)
 810153e:	2200      	movs	r2, #0
 8101540:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8101542:	4b17      	ldr	r3, [pc, #92]	; (81015a0 <MX_SPI1_Init+0xa4>)
 8101544:	2200      	movs	r2, #0
 8101546:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8101548:	4b15      	ldr	r3, [pc, #84]	; (81015a0 <MX_SPI1_Init+0xa4>)
 810154a:	2200      	movs	r2, #0
 810154c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 810154e:	4b14      	ldr	r3, [pc, #80]	; (81015a0 <MX_SPI1_Init+0xa4>)
 8101550:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8101554:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8101556:	4b12      	ldr	r3, [pc, #72]	; (81015a0 <MX_SPI1_Init+0xa4>)
 8101558:	2200      	movs	r2, #0
 810155a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 810155c:	4b10      	ldr	r3, [pc, #64]	; (81015a0 <MX_SPI1_Init+0xa4>)
 810155e:	2200      	movs	r2, #0
 8101560:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101562:	4b0f      	ldr	r3, [pc, #60]	; (81015a0 <MX_SPI1_Init+0xa4>)
 8101564:	2200      	movs	r2, #0
 8101566:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101568:	4b0d      	ldr	r3, [pc, #52]	; (81015a0 <MX_SPI1_Init+0xa4>)
 810156a:	2200      	movs	r2, #0
 810156c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 810156e:	4b0c      	ldr	r3, [pc, #48]	; (81015a0 <MX_SPI1_Init+0xa4>)
 8101570:	2200      	movs	r2, #0
 8101572:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8101574:	4b0a      	ldr	r3, [pc, #40]	; (81015a0 <MX_SPI1_Init+0xa4>)
 8101576:	2200      	movs	r2, #0
 8101578:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 810157a:	4b09      	ldr	r3, [pc, #36]	; (81015a0 <MX_SPI1_Init+0xa4>)
 810157c:	2200      	movs	r2, #0
 810157e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8101580:	4b07      	ldr	r3, [pc, #28]	; (81015a0 <MX_SPI1_Init+0xa4>)
 8101582:	2200      	movs	r2, #0
 8101584:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8101586:	4b06      	ldr	r3, [pc, #24]	; (81015a0 <MX_SPI1_Init+0xa4>)
 8101588:	2200      	movs	r2, #0
 810158a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 810158c:	4804      	ldr	r0, [pc, #16]	; (81015a0 <MX_SPI1_Init+0xa4>)
 810158e:	f004 f84f 	bl	8105630 <HAL_SPI_Init>
 8101592:	4603      	mov	r3, r0
 8101594:	2b00      	cmp	r3, #0
 8101596:	d001      	beq.n	810159c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8101598:	f7ff ffac 	bl	81014f4 <Error_Handler>
  }

}
 810159c:	bf00      	nop
 810159e:	bd80      	pop	{r7, pc}
 81015a0:	10004dcc 	.word	0x10004dcc
 81015a4:	40013000 	.word	0x40013000

081015a8 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 81015a8:	b580      	push	{r7, lr}
 81015aa:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 81015ac:	4b27      	ldr	r3, [pc, #156]	; (810164c <MX_SPI5_Init+0xa4>)
 81015ae:	4a28      	ldr	r2, [pc, #160]	; (8101650 <MX_SPI5_Init+0xa8>)
 81015b0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 81015b2:	4b26      	ldr	r3, [pc, #152]	; (810164c <MX_SPI5_Init+0xa4>)
 81015b4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 81015b8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 81015ba:	4b24      	ldr	r3, [pc, #144]	; (810164c <MX_SPI5_Init+0xa4>)
 81015bc:	2200      	movs	r2, #0
 81015be:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 81015c0:	4b22      	ldr	r3, [pc, #136]	; (810164c <MX_SPI5_Init+0xa4>)
 81015c2:	2203      	movs	r2, #3
 81015c4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 81015c6:	4b21      	ldr	r3, [pc, #132]	; (810164c <MX_SPI5_Init+0xa4>)
 81015c8:	2200      	movs	r2, #0
 81015ca:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 81015cc:	4b1f      	ldr	r3, [pc, #124]	; (810164c <MX_SPI5_Init+0xa4>)
 81015ce:	2200      	movs	r2, #0
 81015d0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 81015d2:	4b1e      	ldr	r3, [pc, #120]	; (810164c <MX_SPI5_Init+0xa4>)
 81015d4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 81015d8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 81015da:	4b1c      	ldr	r3, [pc, #112]	; (810164c <MX_SPI5_Init+0xa4>)
 81015dc:	2200      	movs	r2, #0
 81015de:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 81015e0:	4b1a      	ldr	r3, [pc, #104]	; (810164c <MX_SPI5_Init+0xa4>)
 81015e2:	2200      	movs	r2, #0
 81015e4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 81015e6:	4b19      	ldr	r3, [pc, #100]	; (810164c <MX_SPI5_Init+0xa4>)
 81015e8:	2200      	movs	r2, #0
 81015ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 81015ec:	4b17      	ldr	r3, [pc, #92]	; (810164c <MX_SPI5_Init+0xa4>)
 81015ee:	2200      	movs	r2, #0
 81015f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 81015f2:	4b16      	ldr	r3, [pc, #88]	; (810164c <MX_SPI5_Init+0xa4>)
 81015f4:	2200      	movs	r2, #0
 81015f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 81015f8:	4b14      	ldr	r3, [pc, #80]	; (810164c <MX_SPI5_Init+0xa4>)
 81015fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 81015fe:	635a      	str	r2, [r3, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8101600:	4b12      	ldr	r3, [pc, #72]	; (810164c <MX_SPI5_Init+0xa4>)
 8101602:	2200      	movs	r2, #0
 8101604:	639a      	str	r2, [r3, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8101606:	4b11      	ldr	r3, [pc, #68]	; (810164c <MX_SPI5_Init+0xa4>)
 8101608:	2200      	movs	r2, #0
 810160a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 810160c:	4b0f      	ldr	r3, [pc, #60]	; (810164c <MX_SPI5_Init+0xa4>)
 810160e:	2200      	movs	r2, #0
 8101610:	641a      	str	r2, [r3, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101612:	4b0e      	ldr	r3, [pc, #56]	; (810164c <MX_SPI5_Init+0xa4>)
 8101614:	2200      	movs	r2, #0
 8101616:	645a      	str	r2, [r3, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8101618:	4b0c      	ldr	r3, [pc, #48]	; (810164c <MX_SPI5_Init+0xa4>)
 810161a:	2200      	movs	r2, #0
 810161c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 810161e:	4b0b      	ldr	r3, [pc, #44]	; (810164c <MX_SPI5_Init+0xa4>)
 8101620:	2200      	movs	r2, #0
 8101622:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8101624:	4b09      	ldr	r3, [pc, #36]	; (810164c <MX_SPI5_Init+0xa4>)
 8101626:	2200      	movs	r2, #0
 8101628:	651a      	str	r2, [r3, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 810162a:	4b08      	ldr	r3, [pc, #32]	; (810164c <MX_SPI5_Init+0xa4>)
 810162c:	2200      	movs	r2, #0
 810162e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8101630:	4b06      	ldr	r3, [pc, #24]	; (810164c <MX_SPI5_Init+0xa4>)
 8101632:	2200      	movs	r2, #0
 8101634:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8101636:	4805      	ldr	r0, [pc, #20]	; (810164c <MX_SPI5_Init+0xa4>)
 8101638:	f003 fffa 	bl	8105630 <HAL_SPI_Init>
 810163c:	4603      	mov	r3, r0
 810163e:	2b00      	cmp	r3, #0
 8101640:	d001      	beq.n	8101646 <MX_SPI5_Init+0x9e>
  {
    Error_Handler();
 8101642:	f7ff ff57 	bl	81014f4 <Error_Handler>
  }

}
 8101646:	bf00      	nop
 8101648:	bd80      	pop	{r7, pc}
 810164a:	bf00      	nop
 810164c:	10004d44 	.word	0x10004d44
 8101650:	40015000 	.word	0x40015000

08101654 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8101654:	b580      	push	{r7, lr}
 8101656:	b08c      	sub	sp, #48	; 0x30
 8101658:	af00      	add	r7, sp, #0
 810165a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810165c:	f107 031c 	add.w	r3, r7, #28
 8101660:	2200      	movs	r2, #0
 8101662:	601a      	str	r2, [r3, #0]
 8101664:	605a      	str	r2, [r3, #4]
 8101666:	609a      	str	r2, [r3, #8]
 8101668:	60da      	str	r2, [r3, #12]
 810166a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 810166c:	687b      	ldr	r3, [r7, #4]
 810166e:	681b      	ldr	r3, [r3, #0]
 8101670:	4a76      	ldr	r2, [pc, #472]	; (810184c <HAL_SPI_MspInit+0x1f8>)
 8101672:	4293      	cmp	r3, r2
 8101674:	f040 80b2 	bne.w	81017dc <HAL_SPI_MspInit+0x188>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8101678:	4b75      	ldr	r3, [pc, #468]	; (8101850 <HAL_SPI_MspInit+0x1fc>)
 810167a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810167e:	4a74      	ldr	r2, [pc, #464]	; (8101850 <HAL_SPI_MspInit+0x1fc>)
 8101680:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8101684:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101688:	4b71      	ldr	r3, [pc, #452]	; (8101850 <HAL_SPI_MspInit+0x1fc>)
 810168a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810168e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8101692:	61bb      	str	r3, [r7, #24]
 8101694:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101696:	4b6e      	ldr	r3, [pc, #440]	; (8101850 <HAL_SPI_MspInit+0x1fc>)
 8101698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810169c:	4a6c      	ldr	r2, [pc, #432]	; (8101850 <HAL_SPI_MspInit+0x1fc>)
 810169e:	f043 0301 	orr.w	r3, r3, #1
 81016a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81016a6:	4b6a      	ldr	r3, [pc, #424]	; (8101850 <HAL_SPI_MspInit+0x1fc>)
 81016a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81016ac:	f003 0301 	and.w	r3, r3, #1
 81016b0:	617b      	str	r3, [r7, #20]
 81016b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 81016b4:	4b66      	ldr	r3, [pc, #408]	; (8101850 <HAL_SPI_MspInit+0x1fc>)
 81016b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81016ba:	4a65      	ldr	r2, [pc, #404]	; (8101850 <HAL_SPI_MspInit+0x1fc>)
 81016bc:	f043 0308 	orr.w	r3, r3, #8
 81016c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81016c4:	4b62      	ldr	r3, [pc, #392]	; (8101850 <HAL_SPI_MspInit+0x1fc>)
 81016c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81016ca:	f003 0308 	and.w	r3, r3, #8
 81016ce:	613b      	str	r3, [r7, #16]
 81016d0:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 81016d2:	2360      	movs	r3, #96	; 0x60
 81016d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81016d6:	2302      	movs	r3, #2
 81016d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81016da:	2300      	movs	r3, #0
 81016dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81016de:	2300      	movs	r3, #0
 81016e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 81016e2:	2305      	movs	r3, #5
 81016e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81016e6:	f107 031c 	add.w	r3, r7, #28
 81016ea:	4619      	mov	r1, r3
 81016ec:	4859      	ldr	r0, [pc, #356]	; (8101854 <HAL_SPI_MspInit+0x200>)
 81016ee:	f002 fef9 	bl	81044e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 81016f2:	2380      	movs	r3, #128	; 0x80
 81016f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81016f6:	2302      	movs	r3, #2
 81016f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81016fa:	2300      	movs	r3, #0
 81016fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81016fe:	2300      	movs	r3, #0
 8101700:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8101702:	2305      	movs	r3, #5
 8101704:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101706:	f107 031c 	add.w	r3, r7, #28
 810170a:	4619      	mov	r1, r3
 810170c:	4852      	ldr	r0, [pc, #328]	; (8101858 <HAL_SPI_MspInit+0x204>)
 810170e:	f002 fee9 	bl	81044e4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8101712:	4b52      	ldr	r3, [pc, #328]	; (810185c <HAL_SPI_MspInit+0x208>)
 8101714:	4a52      	ldr	r2, [pc, #328]	; (8101860 <HAL_SPI_MspInit+0x20c>)
 8101716:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8101718:	4b50      	ldr	r3, [pc, #320]	; (810185c <HAL_SPI_MspInit+0x208>)
 810171a:	2225      	movs	r2, #37	; 0x25
 810171c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 810171e:	4b4f      	ldr	r3, [pc, #316]	; (810185c <HAL_SPI_MspInit+0x208>)
 8101720:	2200      	movs	r2, #0
 8101722:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101724:	4b4d      	ldr	r3, [pc, #308]	; (810185c <HAL_SPI_MspInit+0x208>)
 8101726:	2200      	movs	r2, #0
 8101728:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 810172a:	4b4c      	ldr	r3, [pc, #304]	; (810185c <HAL_SPI_MspInit+0x208>)
 810172c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101730:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101732:	4b4a      	ldr	r3, [pc, #296]	; (810185c <HAL_SPI_MspInit+0x208>)
 8101734:	2200      	movs	r2, #0
 8101736:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101738:	4b48      	ldr	r3, [pc, #288]	; (810185c <HAL_SPI_MspInit+0x208>)
 810173a:	2200      	movs	r2, #0
 810173c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 810173e:	4b47      	ldr	r3, [pc, #284]	; (810185c <HAL_SPI_MspInit+0x208>)
 8101740:	2200      	movs	r2, #0
 8101742:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8101744:	4b45      	ldr	r3, [pc, #276]	; (810185c <HAL_SPI_MspInit+0x208>)
 8101746:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 810174a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 810174c:	4b43      	ldr	r3, [pc, #268]	; (810185c <HAL_SPI_MspInit+0x208>)
 810174e:	2200      	movs	r2, #0
 8101750:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8101752:	4842      	ldr	r0, [pc, #264]	; (810185c <HAL_SPI_MspInit+0x208>)
 8101754:	f000 fc50 	bl	8101ff8 <HAL_DMA_Init>
 8101758:	4603      	mov	r3, r0
 810175a:	2b00      	cmp	r3, #0
 810175c:	d001      	beq.n	8101762 <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 810175e:	f7ff fec9 	bl	81014f4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8101762:	687b      	ldr	r3, [r7, #4]
 8101764:	4a3d      	ldr	r2, [pc, #244]	; (810185c <HAL_SPI_MspInit+0x208>)
 8101766:	67da      	str	r2, [r3, #124]	; 0x7c
 8101768:	4a3c      	ldr	r2, [pc, #240]	; (810185c <HAL_SPI_MspInit+0x208>)
 810176a:	687b      	ldr	r3, [r7, #4]
 810176c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 810176e:	4b3d      	ldr	r3, [pc, #244]	; (8101864 <HAL_SPI_MspInit+0x210>)
 8101770:	4a3d      	ldr	r2, [pc, #244]	; (8101868 <HAL_SPI_MspInit+0x214>)
 8101772:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8101774:	4b3b      	ldr	r3, [pc, #236]	; (8101864 <HAL_SPI_MspInit+0x210>)
 8101776:	2226      	movs	r2, #38	; 0x26
 8101778:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 810177a:	4b3a      	ldr	r3, [pc, #232]	; (8101864 <HAL_SPI_MspInit+0x210>)
 810177c:	2240      	movs	r2, #64	; 0x40
 810177e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101780:	4b38      	ldr	r3, [pc, #224]	; (8101864 <HAL_SPI_MspInit+0x210>)
 8101782:	2200      	movs	r2, #0
 8101784:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8101786:	4b37      	ldr	r3, [pc, #220]	; (8101864 <HAL_SPI_MspInit+0x210>)
 8101788:	f44f 6280 	mov.w	r2, #1024	; 0x400
 810178c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 810178e:	4b35      	ldr	r3, [pc, #212]	; (8101864 <HAL_SPI_MspInit+0x210>)
 8101790:	2200      	movs	r2, #0
 8101792:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101794:	4b33      	ldr	r3, [pc, #204]	; (8101864 <HAL_SPI_MspInit+0x210>)
 8101796:	2200      	movs	r2, #0
 8101798:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 810179a:	4b32      	ldr	r3, [pc, #200]	; (8101864 <HAL_SPI_MspInit+0x210>)
 810179c:	2200      	movs	r2, #0
 810179e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 81017a0:	4b30      	ldr	r3, [pc, #192]	; (8101864 <HAL_SPI_MspInit+0x210>)
 81017a2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 81017a6:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81017a8:	4b2e      	ldr	r3, [pc, #184]	; (8101864 <HAL_SPI_MspInit+0x210>)
 81017aa:	2200      	movs	r2, #0
 81017ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 81017ae:	482d      	ldr	r0, [pc, #180]	; (8101864 <HAL_SPI_MspInit+0x210>)
 81017b0:	f000 fc22 	bl	8101ff8 <HAL_DMA_Init>
 81017b4:	4603      	mov	r3, r0
 81017b6:	2b00      	cmp	r3, #0
 81017b8:	d001      	beq.n	81017be <HAL_SPI_MspInit+0x16a>
    {
      Error_Handler();
 81017ba:	f7ff fe9b 	bl	81014f4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 81017be:	687b      	ldr	r3, [r7, #4]
 81017c0:	4a28      	ldr	r2, [pc, #160]	; (8101864 <HAL_SPI_MspInit+0x210>)
 81017c2:	679a      	str	r2, [r3, #120]	; 0x78
 81017c4:	4a27      	ldr	r2, [pc, #156]	; (8101864 <HAL_SPI_MspInit+0x210>)
 81017c6:	687b      	ldr	r3, [r7, #4]
 81017c8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 81017ca:	2200      	movs	r2, #0
 81017cc:	2105      	movs	r1, #5
 81017ce:	2023      	movs	r0, #35	; 0x23
 81017d0:	f000 fbd6 	bl	8101f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 81017d4:	2023      	movs	r0, #35	; 0x23
 81017d6:	f000 fbed 	bl	8101fb4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 81017da:	e033      	b.n	8101844 <HAL_SPI_MspInit+0x1f0>
  else if(spiHandle->Instance==SPI5)
 81017dc:	687b      	ldr	r3, [r7, #4]
 81017de:	681b      	ldr	r3, [r3, #0]
 81017e0:	4a22      	ldr	r2, [pc, #136]	; (810186c <HAL_SPI_MspInit+0x218>)
 81017e2:	4293      	cmp	r3, r2
 81017e4:	d12e      	bne.n	8101844 <HAL_SPI_MspInit+0x1f0>
    __HAL_RCC_SPI5_CLK_ENABLE();
 81017e6:	4b1a      	ldr	r3, [pc, #104]	; (8101850 <HAL_SPI_MspInit+0x1fc>)
 81017e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81017ec:	4a18      	ldr	r2, [pc, #96]	; (8101850 <HAL_SPI_MspInit+0x1fc>)
 81017ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81017f2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 81017f6:	4b16      	ldr	r3, [pc, #88]	; (8101850 <HAL_SPI_MspInit+0x1fc>)
 81017f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81017fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8101800:	60fb      	str	r3, [r7, #12]
 8101802:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8101804:	4b12      	ldr	r3, [pc, #72]	; (8101850 <HAL_SPI_MspInit+0x1fc>)
 8101806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810180a:	4a11      	ldr	r2, [pc, #68]	; (8101850 <HAL_SPI_MspInit+0x1fc>)
 810180c:	f043 0320 	orr.w	r3, r3, #32
 8101810:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101814:	4b0e      	ldr	r3, [pc, #56]	; (8101850 <HAL_SPI_MspInit+0x1fc>)
 8101816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810181a:	f003 0320 	and.w	r3, r3, #32
 810181e:	60bb      	str	r3, [r7, #8]
 8101820:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11;
 8101822:	f44f 6318 	mov.w	r3, #2432	; 0x980
 8101826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101828:	2302      	movs	r3, #2
 810182a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810182c:	2300      	movs	r3, #0
 810182e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101830:	2300      	movs	r3, #0
 8101832:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8101834:	2305      	movs	r3, #5
 8101836:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8101838:	f107 031c 	add.w	r3, r7, #28
 810183c:	4619      	mov	r1, r3
 810183e:	480c      	ldr	r0, [pc, #48]	; (8101870 <HAL_SPI_MspInit+0x21c>)
 8101840:	f002 fe50 	bl	81044e4 <HAL_GPIO_Init>
}
 8101844:	bf00      	nop
 8101846:	3730      	adds	r7, #48	; 0x30
 8101848:	46bd      	mov	sp, r7
 810184a:	bd80      	pop	{r7, pc}
 810184c:	40013000 	.word	0x40013000
 8101850:	58024400 	.word	0x58024400
 8101854:	58020000 	.word	0x58020000
 8101858:	58020c00 	.word	0x58020c00
 810185c:	10004e54 	.word	0x10004e54
 8101860:	40020010 	.word	0x40020010
 8101864:	10004ecc 	.word	0x10004ecc
 8101868:	40020028 	.word	0x40020028
 810186c:	40015000 	.word	0x40015000
 8101870:	58021400 	.word	0x58021400

08101874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101874:	b580      	push	{r7, lr}
 8101876:	b082      	sub	sp, #8
 8101878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810187a:	4b0c      	ldr	r3, [pc, #48]	; (81018ac <HAL_MspInit+0x38>)
 810187c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101880:	4a0a      	ldr	r2, [pc, #40]	; (81018ac <HAL_MspInit+0x38>)
 8101882:	f043 0302 	orr.w	r3, r3, #2
 8101886:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810188a:	4b08      	ldr	r3, [pc, #32]	; (81018ac <HAL_MspInit+0x38>)
 810188c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101890:	f003 0302 	and.w	r3, r3, #2
 8101894:	607b      	str	r3, [r7, #4]
 8101896:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8101898:	2200      	movs	r2, #0
 810189a:	210f      	movs	r1, #15
 810189c:	f06f 0001 	mvn.w	r0, #1
 81018a0:	f000 fb6e 	bl	8101f80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81018a4:	bf00      	nop
 81018a6:	3708      	adds	r7, #8
 81018a8:	46bd      	mov	sp, r7
 81018aa:	bd80      	pop	{r7, pc}
 81018ac:	58024400 	.word	0x58024400

081018b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81018b0:	b580      	push	{r7, lr}
 81018b2:	b08e      	sub	sp, #56	; 0x38
 81018b4:	af00      	add	r7, sp, #0
 81018b6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM8 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81018b8:	687b      	ldr	r3, [r7, #4]
 81018ba:	2b0f      	cmp	r3, #15
 81018bc:	d844      	bhi.n	8101948 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0U);
 81018be:	2200      	movs	r2, #0
 81018c0:	6879      	ldr	r1, [r7, #4]
 81018c2:	202c      	movs	r0, #44	; 0x2c
 81018c4:	f000 fb5c 	bl	8101f80 <HAL_NVIC_SetPriority>

  /* Enable the TIM8 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 81018c8:	202c      	movs	r0, #44	; 0x2c
 81018ca:	f000 fb73 	bl	8101fb4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 81018ce:	4a24      	ldr	r2, [pc, #144]	; (8101960 <HAL_InitTick+0xb0>)
 81018d0:	687b      	ldr	r3, [r7, #4]
 81018d2:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 81018d4:	4b23      	ldr	r3, [pc, #140]	; (8101964 <HAL_InitTick+0xb4>)
 81018d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81018da:	4a22      	ldr	r2, [pc, #136]	; (8101964 <HAL_InitTick+0xb4>)
 81018dc:	f043 0302 	orr.w	r3, r3, #2
 81018e0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 81018e4:	4b1f      	ldr	r3, [pc, #124]	; (8101964 <HAL_InitTick+0xb4>)
 81018e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81018ea:	f003 0302 	and.w	r3, r3, #2
 81018ee:	60bb      	str	r3, [r7, #8]
 81018f0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 81018f2:	f107 020c 	add.w	r2, r7, #12
 81018f6:	f107 0310 	add.w	r3, r7, #16
 81018fa:	4611      	mov	r1, r2
 81018fc:	4618      	mov	r0, r3
 81018fe:	f003 fba7 	bl	8105050 <HAL_RCC_GetClockConfig>

  /* Compute TIM8 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8101902:	f003 fb8f 	bl	8105024 <HAL_RCC_GetPCLK2Freq>
 8101906:	4603      	mov	r3, r0
 8101908:	005b      	lsls	r3, r3, #1
 810190a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 810190c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810190e:	4a16      	ldr	r2, [pc, #88]	; (8101968 <HAL_InitTick+0xb8>)
 8101910:	fba2 2303 	umull	r2, r3, r2, r3
 8101914:	0c9b      	lsrs	r3, r3, #18
 8101916:	3b01      	subs	r3, #1
 8101918:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 810191a:	4b14      	ldr	r3, [pc, #80]	; (810196c <HAL_InitTick+0xbc>)
 810191c:	4a14      	ldr	r2, [pc, #80]	; (8101970 <HAL_InitTick+0xc0>)
 810191e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (1000000U / 1000U) - 1U;
 8101920:	4b12      	ldr	r3, [pc, #72]	; (810196c <HAL_InitTick+0xbc>)
 8101922:	f240 32e7 	movw	r2, #999	; 0x3e7
 8101926:	60da      	str	r2, [r3, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 8101928:	4a10      	ldr	r2, [pc, #64]	; (810196c <HAL_InitTick+0xbc>)
 810192a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810192c:	6053      	str	r3, [r2, #4]
  htim8.Init.ClockDivision = 0;
 810192e:	4b0f      	ldr	r3, [pc, #60]	; (810196c <HAL_InitTick+0xbc>)
 8101930:	2200      	movs	r2, #0
 8101932:	611a      	str	r2, [r3, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101934:	4b0d      	ldr	r3, [pc, #52]	; (810196c <HAL_InitTick+0xbc>)
 8101936:	2200      	movs	r2, #0
 8101938:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim8) == HAL_OK)
 810193a:	480c      	ldr	r0, [pc, #48]	; (810196c <HAL_InitTick+0xbc>)
 810193c:	f004 fa4f 	bl	8105dde <HAL_TIM_Base_Init>
 8101940:	4603      	mov	r3, r0
 8101942:	2b00      	cmp	r3, #0
 8101944:	d107      	bne.n	8101956 <HAL_InitTick+0xa6>
 8101946:	e001      	b.n	810194c <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8101948:	2301      	movs	r3, #1
 810194a:	e005      	b.n	8101958 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim8);
 810194c:	4807      	ldr	r0, [pc, #28]	; (810196c <HAL_InitTick+0xbc>)
 810194e:	f004 faa7 	bl	8105ea0 <HAL_TIM_Base_Start_IT>
 8101952:	4603      	mov	r3, r0
 8101954:	e000      	b.n	8101958 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8101956:	2301      	movs	r3, #1
}
 8101958:	4618      	mov	r0, r3
 810195a:	3738      	adds	r7, #56	; 0x38
 810195c:	46bd      	mov	sp, r7
 810195e:	bd80      	pop	{r7, pc}
 8101960:	10000008 	.word	0x10000008
 8101964:	58024400 	.word	0x58024400
 8101968:	431bde83 	.word	0x431bde83
 810196c:	10004f44 	.word	0x10004f44
 8101970:	40010400 	.word	0x40010400

08101974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101974:	b480      	push	{r7}
 8101976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101978:	e7fe      	b.n	8101978 <NMI_Handler+0x4>

0810197a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810197a:	b480      	push	{r7}
 810197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810197e:	e7fe      	b.n	810197e <HardFault_Handler+0x4>

08101980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101980:	b480      	push	{r7}
 8101982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101984:	e7fe      	b.n	8101984 <MemManage_Handler+0x4>

08101986 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101986:	b480      	push	{r7}
 8101988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810198a:	e7fe      	b.n	810198a <BusFault_Handler+0x4>

0810198c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 810198c:	b480      	push	{r7}
 810198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101990:	e7fe      	b.n	8101990 <UsageFault_Handler+0x4>

08101992 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101992:	b480      	push	{r7}
 8101994:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101996:	bf00      	nop
 8101998:	46bd      	mov	sp, r7
 810199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810199e:	4770      	bx	lr

081019a0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 81019a0:	b580      	push	{r7, lr}
 81019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 81019a4:	4802      	ldr	r0, [pc, #8]	; (81019b0 <DMA1_Stream0_IRQHandler+0x10>)
 81019a6:	f001 f8c5 	bl	8102b34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 81019aa:	bf00      	nop
 81019ac:	bd80      	pop	{r7, pc}
 81019ae:	bf00      	nop
 81019b0:	10004e54 	.word	0x10004e54

081019b4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 81019b4:	b580      	push	{r7, lr}
 81019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 81019b8:	4802      	ldr	r0, [pc, #8]	; (81019c4 <DMA1_Stream1_IRQHandler+0x10>)
 81019ba:	f001 f8bb 	bl	8102b34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 81019be:	bf00      	nop
 81019c0:	bd80      	pop	{r7, pc}
 81019c2:	bf00      	nop
 81019c4:	10004ecc 	.word	0x10004ecc

081019c8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 81019c8:	b580      	push	{r7, lr}
 81019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 81019cc:	4802      	ldr	r0, [pc, #8]	; (81019d8 <SPI1_IRQHandler+0x10>)
 81019ce:	f003 ff27 	bl	8105820 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 81019d2:	bf00      	nop
 81019d4:	bd80      	pop	{r7, pc}
 81019d6:	bf00      	nop
 81019d8:	10004dcc 	.word	0x10004dcc

081019dc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 81019dc:	b580      	push	{r7, lr}
 81019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 81019e0:	4802      	ldr	r0, [pc, #8]	; (81019ec <TIM8_UP_TIM13_IRQHandler+0x10>)
 81019e2:	f004 fa93 	bl	8105f0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 81019e6:	bf00      	nop
 81019e8:	bd80      	pop	{r7, pc}
 81019ea:	bf00      	nop
 81019ec:	10004f44 	.word	0x10004f44

081019f0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 81019f0:	b580      	push	{r7, lr}
 81019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 81019f4:	4802      	ldr	r0, [pc, #8]	; (8101a00 <DMA2_Stream2_IRQHandler+0x10>)
 81019f6:	f001 f89d 	bl	8102b34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 81019fa:	bf00      	nop
 81019fc:	bd80      	pop	{r7, pc}
 81019fe:	bf00      	nop
 8101a00:	10004f90 	.word	0x10004f90

08101a04 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8101a04:	b580      	push	{r7, lr}
 8101a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8101a08:	4802      	ldr	r0, [pc, #8]	; (8101a14 <DMA2_Stream3_IRQHandler+0x10>)
 8101a0a:	f001 f893 	bl	8102b34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8101a0e:	bf00      	nop
 8101a10:	bd80      	pop	{r7, pc}
 8101a12:	bf00      	nop
 8101a14:	10005094 	.word	0x10005094

08101a18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8101a18:	b480      	push	{r7}
 8101a1a:	af00      	add	r7, sp, #0
	return 1;
 8101a1c:	2301      	movs	r3, #1
}
 8101a1e:	4618      	mov	r0, r3
 8101a20:	46bd      	mov	sp, r7
 8101a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a26:	4770      	bx	lr

08101a28 <_kill>:

int _kill(int pid, int sig)
{
 8101a28:	b580      	push	{r7, lr}
 8101a2a:	b082      	sub	sp, #8
 8101a2c:	af00      	add	r7, sp, #0
 8101a2e:	6078      	str	r0, [r7, #4]
 8101a30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8101a32:	f008 fc13 	bl	810a25c <__errno>
 8101a36:	4602      	mov	r2, r0
 8101a38:	2316      	movs	r3, #22
 8101a3a:	6013      	str	r3, [r2, #0]
	return -1;
 8101a3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8101a40:	4618      	mov	r0, r3
 8101a42:	3708      	adds	r7, #8
 8101a44:	46bd      	mov	sp, r7
 8101a46:	bd80      	pop	{r7, pc}

08101a48 <_exit>:

void _exit (int status)
{
 8101a48:	b580      	push	{r7, lr}
 8101a4a:	b082      	sub	sp, #8
 8101a4c:	af00      	add	r7, sp, #0
 8101a4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8101a50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8101a54:	6878      	ldr	r0, [r7, #4]
 8101a56:	f7ff ffe7 	bl	8101a28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8101a5a:	e7fe      	b.n	8101a5a <_exit+0x12>

08101a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101a5c:	b580      	push	{r7, lr}
 8101a5e:	b086      	sub	sp, #24
 8101a60:	af00      	add	r7, sp, #0
 8101a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101a64:	4a14      	ldr	r2, [pc, #80]	; (8101ab8 <_sbrk+0x5c>)
 8101a66:	4b15      	ldr	r3, [pc, #84]	; (8101abc <_sbrk+0x60>)
 8101a68:	1ad3      	subs	r3, r2, r3
 8101a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101a6c:	697b      	ldr	r3, [r7, #20]
 8101a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101a70:	4b13      	ldr	r3, [pc, #76]	; (8101ac0 <_sbrk+0x64>)
 8101a72:	681b      	ldr	r3, [r3, #0]
 8101a74:	2b00      	cmp	r3, #0
 8101a76:	d102      	bne.n	8101a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101a78:	4b11      	ldr	r3, [pc, #68]	; (8101ac0 <_sbrk+0x64>)
 8101a7a:	4a12      	ldr	r2, [pc, #72]	; (8101ac4 <_sbrk+0x68>)
 8101a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8101a7e:	4b10      	ldr	r3, [pc, #64]	; (8101ac0 <_sbrk+0x64>)
 8101a80:	681a      	ldr	r2, [r3, #0]
 8101a82:	687b      	ldr	r3, [r7, #4]
 8101a84:	4413      	add	r3, r2
 8101a86:	693a      	ldr	r2, [r7, #16]
 8101a88:	429a      	cmp	r2, r3
 8101a8a:	d207      	bcs.n	8101a9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101a8c:	f008 fbe6 	bl	810a25c <__errno>
 8101a90:	4602      	mov	r2, r0
 8101a92:	230c      	movs	r3, #12
 8101a94:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8101a96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8101a9a:	e009      	b.n	8101ab0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101a9c:	4b08      	ldr	r3, [pc, #32]	; (8101ac0 <_sbrk+0x64>)
 8101a9e:	681b      	ldr	r3, [r3, #0]
 8101aa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101aa2:	4b07      	ldr	r3, [pc, #28]	; (8101ac0 <_sbrk+0x64>)
 8101aa4:	681a      	ldr	r2, [r3, #0]
 8101aa6:	687b      	ldr	r3, [r7, #4]
 8101aa8:	4413      	add	r3, r2
 8101aaa:	4a05      	ldr	r2, [pc, #20]	; (8101ac0 <_sbrk+0x64>)
 8101aac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101aae:	68fb      	ldr	r3, [r7, #12]
}
 8101ab0:	4618      	mov	r0, r3
 8101ab2:	3718      	adds	r7, #24
 8101ab4:	46bd      	mov	sp, r7
 8101ab6:	bd80      	pop	{r7, pc}
 8101ab8:	10048000 	.word	0x10048000
 8101abc:	00000400 	.word	0x00000400
 8101ac0:	10000218 	.word	0x10000218
 8101ac4:	100055c0 	.word	0x100055c0

08101ac8 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8101ac8:	b580      	push	{r7, lr}
 8101aca:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8101acc:	4b22      	ldr	r3, [pc, #136]	; (8101b58 <MX_USART3_UART_Init+0x90>)
 8101ace:	4a23      	ldr	r2, [pc, #140]	; (8101b5c <MX_USART3_UART_Init+0x94>)
 8101ad0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8101ad2:	4b21      	ldr	r3, [pc, #132]	; (8101b58 <MX_USART3_UART_Init+0x90>)
 8101ad4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8101ad8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8101ada:	4b1f      	ldr	r3, [pc, #124]	; (8101b58 <MX_USART3_UART_Init+0x90>)
 8101adc:	2200      	movs	r2, #0
 8101ade:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8101ae0:	4b1d      	ldr	r3, [pc, #116]	; (8101b58 <MX_USART3_UART_Init+0x90>)
 8101ae2:	2200      	movs	r2, #0
 8101ae4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8101ae6:	4b1c      	ldr	r3, [pc, #112]	; (8101b58 <MX_USART3_UART_Init+0x90>)
 8101ae8:	2200      	movs	r2, #0
 8101aea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8101aec:	4b1a      	ldr	r3, [pc, #104]	; (8101b58 <MX_USART3_UART_Init+0x90>)
 8101aee:	220c      	movs	r2, #12
 8101af0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8101af2:	4b19      	ldr	r3, [pc, #100]	; (8101b58 <MX_USART3_UART_Init+0x90>)
 8101af4:	2200      	movs	r2, #0
 8101af6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8101af8:	4b17      	ldr	r3, [pc, #92]	; (8101b58 <MX_USART3_UART_Init+0x90>)
 8101afa:	2200      	movs	r2, #0
 8101afc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8101afe:	4b16      	ldr	r3, [pc, #88]	; (8101b58 <MX_USART3_UART_Init+0x90>)
 8101b00:	2200      	movs	r2, #0
 8101b02:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101b04:	4b14      	ldr	r3, [pc, #80]	; (8101b58 <MX_USART3_UART_Init+0x90>)
 8101b06:	2200      	movs	r2, #0
 8101b08:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8101b0a:	4b13      	ldr	r3, [pc, #76]	; (8101b58 <MX_USART3_UART_Init+0x90>)
 8101b0c:	2200      	movs	r2, #0
 8101b0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8101b10:	4811      	ldr	r0, [pc, #68]	; (8101b58 <MX_USART3_UART_Init+0x90>)
 8101b12:	f004 fbfb 	bl	810630c <HAL_UART_Init>
 8101b16:	4603      	mov	r3, r0
 8101b18:	2b00      	cmp	r3, #0
 8101b1a:	d001      	beq.n	8101b20 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8101b1c:	f7ff fcea 	bl	81014f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101b20:	2100      	movs	r1, #0
 8101b22:	480d      	ldr	r0, [pc, #52]	; (8101b58 <MX_USART3_UART_Init+0x90>)
 8101b24:	f005 fb95 	bl	8107252 <HAL_UARTEx_SetTxFifoThreshold>
 8101b28:	4603      	mov	r3, r0
 8101b2a:	2b00      	cmp	r3, #0
 8101b2c:	d001      	beq.n	8101b32 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8101b2e:	f7ff fce1 	bl	81014f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101b32:	2100      	movs	r1, #0
 8101b34:	4808      	ldr	r0, [pc, #32]	; (8101b58 <MX_USART3_UART_Init+0x90>)
 8101b36:	f005 fbca 	bl	81072ce <HAL_UARTEx_SetRxFifoThreshold>
 8101b3a:	4603      	mov	r3, r0
 8101b3c:	2b00      	cmp	r3, #0
 8101b3e:	d001      	beq.n	8101b44 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8101b40:	f7ff fcd8 	bl	81014f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8101b44:	4804      	ldr	r0, [pc, #16]	; (8101b58 <MX_USART3_UART_Init+0x90>)
 8101b46:	f005 fb4b 	bl	81071e0 <HAL_UARTEx_DisableFifoMode>
 8101b4a:	4603      	mov	r3, r0
 8101b4c:	2b00      	cmp	r3, #0
 8101b4e:	d001      	beq.n	8101b54 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8101b50:	f7ff fcd0 	bl	81014f4 <Error_Handler>
  }

}
 8101b54:	bf00      	nop
 8101b56:	bd80      	pop	{r7, pc}
 8101b58:	10005008 	.word	0x10005008
 8101b5c:	40004800 	.word	0x40004800

08101b60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8101b60:	b580      	push	{r7, lr}
 8101b62:	b08a      	sub	sp, #40	; 0x28
 8101b64:	af00      	add	r7, sp, #0
 8101b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101b68:	f107 0314 	add.w	r3, r7, #20
 8101b6c:	2200      	movs	r2, #0
 8101b6e:	601a      	str	r2, [r3, #0]
 8101b70:	605a      	str	r2, [r3, #4]
 8101b72:	609a      	str	r2, [r3, #8]
 8101b74:	60da      	str	r2, [r3, #12]
 8101b76:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8101b78:	687b      	ldr	r3, [r7, #4]
 8101b7a:	681b      	ldr	r3, [r3, #0]
 8101b7c:	4a49      	ldr	r2, [pc, #292]	; (8101ca4 <HAL_UART_MspInit+0x144>)
 8101b7e:	4293      	cmp	r3, r2
 8101b80:	f040 808b 	bne.w	8101c9a <HAL_UART_MspInit+0x13a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8101b84:	4b48      	ldr	r3, [pc, #288]	; (8101ca8 <HAL_UART_MspInit+0x148>)
 8101b86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101b8a:	4a47      	ldr	r2, [pc, #284]	; (8101ca8 <HAL_UART_MspInit+0x148>)
 8101b8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8101b90:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101b94:	4b44      	ldr	r3, [pc, #272]	; (8101ca8 <HAL_UART_MspInit+0x148>)
 8101b96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101b9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8101b9e:	613b      	str	r3, [r7, #16]
 8101ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101ba2:	4b41      	ldr	r3, [pc, #260]	; (8101ca8 <HAL_UART_MspInit+0x148>)
 8101ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ba8:	4a3f      	ldr	r2, [pc, #252]	; (8101ca8 <HAL_UART_MspInit+0x148>)
 8101baa:	f043 0308 	orr.w	r3, r3, #8
 8101bae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101bb2:	4b3d      	ldr	r3, [pc, #244]	; (8101ca8 <HAL_UART_MspInit+0x148>)
 8101bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bb8:	f003 0308 	and.w	r3, r3, #8
 8101bbc:	60fb      	str	r3, [r7, #12]
 8101bbe:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8101bc0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101bc6:	2302      	movs	r3, #2
 8101bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101bca:	2300      	movs	r3, #0
 8101bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101bce:	2300      	movs	r3, #0
 8101bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8101bd2:	2307      	movs	r3, #7
 8101bd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101bd6:	f107 0314 	add.w	r3, r7, #20
 8101bda:	4619      	mov	r1, r3
 8101bdc:	4833      	ldr	r0, [pc, #204]	; (8101cac <HAL_UART_MspInit+0x14c>)
 8101bde:	f002 fc81 	bl	81044e4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA2_Stream2;
 8101be2:	4b33      	ldr	r3, [pc, #204]	; (8101cb0 <HAL_UART_MspInit+0x150>)
 8101be4:	4a33      	ldr	r2, [pc, #204]	; (8101cb4 <HAL_UART_MspInit+0x154>)
 8101be6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8101be8:	4b31      	ldr	r3, [pc, #196]	; (8101cb0 <HAL_UART_MspInit+0x150>)
 8101bea:	222d      	movs	r2, #45	; 0x2d
 8101bec:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8101bee:	4b30      	ldr	r3, [pc, #192]	; (8101cb0 <HAL_UART_MspInit+0x150>)
 8101bf0:	2200      	movs	r2, #0
 8101bf2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101bf4:	4b2e      	ldr	r3, [pc, #184]	; (8101cb0 <HAL_UART_MspInit+0x150>)
 8101bf6:	2200      	movs	r2, #0
 8101bf8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8101bfa:	4b2d      	ldr	r3, [pc, #180]	; (8101cb0 <HAL_UART_MspInit+0x150>)
 8101bfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101c00:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101c02:	4b2b      	ldr	r3, [pc, #172]	; (8101cb0 <HAL_UART_MspInit+0x150>)
 8101c04:	2200      	movs	r2, #0
 8101c06:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101c08:	4b29      	ldr	r3, [pc, #164]	; (8101cb0 <HAL_UART_MspInit+0x150>)
 8101c0a:	2200      	movs	r2, #0
 8101c0c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8101c0e:	4b28      	ldr	r3, [pc, #160]	; (8101cb0 <HAL_UART_MspInit+0x150>)
 8101c10:	2200      	movs	r2, #0
 8101c12:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8101c14:	4b26      	ldr	r3, [pc, #152]	; (8101cb0 <HAL_UART_MspInit+0x150>)
 8101c16:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8101c1a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101c1c:	4b24      	ldr	r3, [pc, #144]	; (8101cb0 <HAL_UART_MspInit+0x150>)
 8101c1e:	2200      	movs	r2, #0
 8101c20:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8101c22:	4823      	ldr	r0, [pc, #140]	; (8101cb0 <HAL_UART_MspInit+0x150>)
 8101c24:	f000 f9e8 	bl	8101ff8 <HAL_DMA_Init>
 8101c28:	4603      	mov	r3, r0
 8101c2a:	2b00      	cmp	r3, #0
 8101c2c:	d001      	beq.n	8101c32 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8101c2e:	f7ff fc61 	bl	81014f4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8101c32:	687b      	ldr	r3, [r7, #4]
 8101c34:	4a1e      	ldr	r2, [pc, #120]	; (8101cb0 <HAL_UART_MspInit+0x150>)
 8101c36:	679a      	str	r2, [r3, #120]	; 0x78
 8101c38:	4a1d      	ldr	r2, [pc, #116]	; (8101cb0 <HAL_UART_MspInit+0x150>)
 8101c3a:	687b      	ldr	r3, [r7, #4]
 8101c3c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA2_Stream3;
 8101c3e:	4b1e      	ldr	r3, [pc, #120]	; (8101cb8 <HAL_UART_MspInit+0x158>)
 8101c40:	4a1e      	ldr	r2, [pc, #120]	; (8101cbc <HAL_UART_MspInit+0x15c>)
 8101c42:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8101c44:	4b1c      	ldr	r3, [pc, #112]	; (8101cb8 <HAL_UART_MspInit+0x158>)
 8101c46:	222e      	movs	r2, #46	; 0x2e
 8101c48:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8101c4a:	4b1b      	ldr	r3, [pc, #108]	; (8101cb8 <HAL_UART_MspInit+0x158>)
 8101c4c:	2240      	movs	r2, #64	; 0x40
 8101c4e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101c50:	4b19      	ldr	r3, [pc, #100]	; (8101cb8 <HAL_UART_MspInit+0x158>)
 8101c52:	2200      	movs	r2, #0
 8101c54:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8101c56:	4b18      	ldr	r3, [pc, #96]	; (8101cb8 <HAL_UART_MspInit+0x158>)
 8101c58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101c5c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101c5e:	4b16      	ldr	r3, [pc, #88]	; (8101cb8 <HAL_UART_MspInit+0x158>)
 8101c60:	2200      	movs	r2, #0
 8101c62:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101c64:	4b14      	ldr	r3, [pc, #80]	; (8101cb8 <HAL_UART_MspInit+0x158>)
 8101c66:	2200      	movs	r2, #0
 8101c68:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8101c6a:	4b13      	ldr	r3, [pc, #76]	; (8101cb8 <HAL_UART_MspInit+0x158>)
 8101c6c:	2200      	movs	r2, #0
 8101c6e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8101c70:	4b11      	ldr	r3, [pc, #68]	; (8101cb8 <HAL_UART_MspInit+0x158>)
 8101c72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8101c76:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101c78:	4b0f      	ldr	r3, [pc, #60]	; (8101cb8 <HAL_UART_MspInit+0x158>)
 8101c7a:	2200      	movs	r2, #0
 8101c7c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8101c7e:	480e      	ldr	r0, [pc, #56]	; (8101cb8 <HAL_UART_MspInit+0x158>)
 8101c80:	f000 f9ba 	bl	8101ff8 <HAL_DMA_Init>
 8101c84:	4603      	mov	r3, r0
 8101c86:	2b00      	cmp	r3, #0
 8101c88:	d001      	beq.n	8101c8e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8101c8a:	f7ff fc33 	bl	81014f4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8101c8e:	687b      	ldr	r3, [r7, #4]
 8101c90:	4a09      	ldr	r2, [pc, #36]	; (8101cb8 <HAL_UART_MspInit+0x158>)
 8101c92:	675a      	str	r2, [r3, #116]	; 0x74
 8101c94:	4a08      	ldr	r2, [pc, #32]	; (8101cb8 <HAL_UART_MspInit+0x158>)
 8101c96:	687b      	ldr	r3, [r7, #4]
 8101c98:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8101c9a:	bf00      	nop
 8101c9c:	3728      	adds	r7, #40	; 0x28
 8101c9e:	46bd      	mov	sp, r7
 8101ca0:	bd80      	pop	{r7, pc}
 8101ca2:	bf00      	nop
 8101ca4:	40004800 	.word	0x40004800
 8101ca8:	58024400 	.word	0x58024400
 8101cac:	58020c00 	.word	0x58020c00
 8101cb0:	10004f90 	.word	0x10004f90
 8101cb4:	40020440 	.word	0x40020440
 8101cb8:	10005094 	.word	0x10005094
 8101cbc:	40020458 	.word	0x40020458

08101cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8101cc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101cf8 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8101cc4:	f7ff f928 	bl	8100f18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8101cc8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8101cca:	e003      	b.n	8101cd4 <LoopCopyDataInit>

08101ccc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8101ccc:	4b0b      	ldr	r3, [pc, #44]	; (8101cfc <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8101cce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8101cd0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8101cd2:	3104      	adds	r1, #4

08101cd4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8101cd4:	480a      	ldr	r0, [pc, #40]	; (8101d00 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8101cd6:	4b0b      	ldr	r3, [pc, #44]	; (8101d04 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8101cd8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8101cda:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8101cdc:	d3f6      	bcc.n	8101ccc <CopyDataInit>
  ldr  r2, =_sbss
 8101cde:	4a0a      	ldr	r2, [pc, #40]	; (8101d08 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8101ce0:	e002      	b.n	8101ce8 <LoopFillZerobss>

08101ce2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8101ce2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8101ce4:	f842 3b04 	str.w	r3, [r2], #4

08101ce8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8101ce8:	4b08      	ldr	r3, [pc, #32]	; (8101d0c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8101cea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8101cec:	d3f9      	bcc.n	8101ce2 <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 8101cee:	f008 fabb 	bl	810a268 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101cf2:	f7ff fb95 	bl	8101420 <main>
  bx  lr    
 8101cf6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101cf8:	10048000 	.word	0x10048000
  ldr  r3, =_sidata
 8101cfc:	0810c1e0 	.word	0x0810c1e0
  ldr  r0, =_sdata
 8101d00:	10000000 	.word	0x10000000
  ldr  r3, =_edata
 8101d04:	100001fc 	.word	0x100001fc
  ldr  r2, =_sbss
 8101d08:	100001fc 	.word	0x100001fc
  ldr  r3, = _ebss
 8101d0c:	100055c0 	.word	0x100055c0

08101d10 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101d10:	e7fe      	b.n	8101d10 <ADC3_IRQHandler>
	...

08101d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101d14:	b580      	push	{r7, lr}
 8101d16:	b082      	sub	sp, #8
 8101d18:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101d1a:	4b28      	ldr	r3, [pc, #160]	; (8101dbc <HAL_Init+0xa8>)
 8101d1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101d20:	4a26      	ldr	r2, [pc, #152]	; (8101dbc <HAL_Init+0xa8>)
 8101d22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101d26:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101d2a:	4b24      	ldr	r3, [pc, #144]	; (8101dbc <HAL_Init+0xa8>)
 8101d2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101d30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101d34:	603b      	str	r3, [r7, #0]
 8101d36:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101d38:	4b21      	ldr	r3, [pc, #132]	; (8101dc0 <HAL_Init+0xac>)
 8101d3a:	681b      	ldr	r3, [r3, #0]
 8101d3c:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101d40:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101d44:	4a1e      	ldr	r2, [pc, #120]	; (8101dc0 <HAL_Init+0xac>)
 8101d46:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8101d4a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101d4c:	4b1c      	ldr	r3, [pc, #112]	; (8101dc0 <HAL_Init+0xac>)
 8101d4e:	681b      	ldr	r3, [r3, #0]
 8101d50:	4a1b      	ldr	r2, [pc, #108]	; (8101dc0 <HAL_Init+0xac>)
 8101d52:	f043 0301 	orr.w	r3, r3, #1
 8101d56:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101d58:	2003      	movs	r0, #3
 8101d5a:	f000 f906 	bl	8101f6a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101d5e:	f002 ffa7 	bl	8104cb0 <HAL_RCC_GetSysClockFreq>
 8101d62:	4601      	mov	r1, r0
 8101d64:	4b15      	ldr	r3, [pc, #84]	; (8101dbc <HAL_Init+0xa8>)
 8101d66:	699b      	ldr	r3, [r3, #24]
 8101d68:	0a1b      	lsrs	r3, r3, #8
 8101d6a:	f003 030f 	and.w	r3, r3, #15
 8101d6e:	4a15      	ldr	r2, [pc, #84]	; (8101dc4 <HAL_Init+0xb0>)
 8101d70:	5cd3      	ldrb	r3, [r2, r3]
 8101d72:	f003 031f 	and.w	r3, r3, #31
 8101d76:	fa21 f303 	lsr.w	r3, r1, r3
 8101d7a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101d7c:	4b0f      	ldr	r3, [pc, #60]	; (8101dbc <HAL_Init+0xa8>)
 8101d7e:	699b      	ldr	r3, [r3, #24]
 8101d80:	f003 030f 	and.w	r3, r3, #15
 8101d84:	4a0f      	ldr	r2, [pc, #60]	; (8101dc4 <HAL_Init+0xb0>)
 8101d86:	5cd3      	ldrb	r3, [r2, r3]
 8101d88:	f003 031f 	and.w	r3, r3, #31
 8101d8c:	687a      	ldr	r2, [r7, #4]
 8101d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8101d92:	4a0d      	ldr	r2, [pc, #52]	; (8101dc8 <HAL_Init+0xb4>)
 8101d94:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101d96:	4b0c      	ldr	r3, [pc, #48]	; (8101dc8 <HAL_Init+0xb4>)
 8101d98:	681b      	ldr	r3, [r3, #0]
 8101d9a:	4a0c      	ldr	r2, [pc, #48]	; (8101dcc <HAL_Init+0xb8>)
 8101d9c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101d9e:	2000      	movs	r0, #0
 8101da0:	f7ff fd86 	bl	81018b0 <HAL_InitTick>
 8101da4:	4603      	mov	r3, r0
 8101da6:	2b00      	cmp	r3, #0
 8101da8:	d001      	beq.n	8101dae <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101daa:	2301      	movs	r3, #1
 8101dac:	e002      	b.n	8101db4 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101dae:	f7ff fd61 	bl	8101874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101db2:	2300      	movs	r3, #0
}
 8101db4:	4618      	mov	r0, r3
 8101db6:	3708      	adds	r7, #8
 8101db8:	46bd      	mov	sp, r7
 8101dba:	bd80      	pop	{r7, pc}
 8101dbc:	58024400 	.word	0x58024400
 8101dc0:	40024400 	.word	0x40024400
 8101dc4:	0810bef8 	.word	0x0810bef8
 8101dc8:	10000004 	.word	0x10000004
 8101dcc:	10000000 	.word	0x10000000

08101dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101dd0:	b480      	push	{r7}
 8101dd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101dd4:	4b06      	ldr	r3, [pc, #24]	; (8101df0 <HAL_IncTick+0x20>)
 8101dd6:	781b      	ldrb	r3, [r3, #0]
 8101dd8:	461a      	mov	r2, r3
 8101dda:	4b06      	ldr	r3, [pc, #24]	; (8101df4 <HAL_IncTick+0x24>)
 8101ddc:	681b      	ldr	r3, [r3, #0]
 8101dde:	4413      	add	r3, r2
 8101de0:	4a04      	ldr	r2, [pc, #16]	; (8101df4 <HAL_IncTick+0x24>)
 8101de2:	6013      	str	r3, [r2, #0]
}
 8101de4:	bf00      	nop
 8101de6:	46bd      	mov	sp, r7
 8101de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101dec:	4770      	bx	lr
 8101dee:	bf00      	nop
 8101df0:	1000000c 	.word	0x1000000c
 8101df4:	1000510c 	.word	0x1000510c

08101df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101df8:	b480      	push	{r7}
 8101dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8101dfc:	4b03      	ldr	r3, [pc, #12]	; (8101e0c <HAL_GetTick+0x14>)
 8101dfe:	681b      	ldr	r3, [r3, #0]
}
 8101e00:	4618      	mov	r0, r3
 8101e02:	46bd      	mov	sp, r7
 8101e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e08:	4770      	bx	lr
 8101e0a:	bf00      	nop
 8101e0c:	1000510c 	.word	0x1000510c

08101e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101e10:	b480      	push	{r7}
 8101e12:	b085      	sub	sp, #20
 8101e14:	af00      	add	r7, sp, #0
 8101e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101e18:	687b      	ldr	r3, [r7, #4]
 8101e1a:	f003 0307 	and.w	r3, r3, #7
 8101e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101e20:	4b0c      	ldr	r3, [pc, #48]	; (8101e54 <__NVIC_SetPriorityGrouping+0x44>)
 8101e22:	68db      	ldr	r3, [r3, #12]
 8101e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101e26:	68ba      	ldr	r2, [r7, #8]
 8101e28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8101e2c:	4013      	ands	r3, r2
 8101e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101e30:	68fb      	ldr	r3, [r7, #12]
 8101e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101e34:	68bb      	ldr	r3, [r7, #8]
 8101e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101e38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8101e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101e42:	4a04      	ldr	r2, [pc, #16]	; (8101e54 <__NVIC_SetPriorityGrouping+0x44>)
 8101e44:	68bb      	ldr	r3, [r7, #8]
 8101e46:	60d3      	str	r3, [r2, #12]
}
 8101e48:	bf00      	nop
 8101e4a:	3714      	adds	r7, #20
 8101e4c:	46bd      	mov	sp, r7
 8101e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e52:	4770      	bx	lr
 8101e54:	e000ed00 	.word	0xe000ed00

08101e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101e58:	b480      	push	{r7}
 8101e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101e5c:	4b04      	ldr	r3, [pc, #16]	; (8101e70 <__NVIC_GetPriorityGrouping+0x18>)
 8101e5e:	68db      	ldr	r3, [r3, #12]
 8101e60:	0a1b      	lsrs	r3, r3, #8
 8101e62:	f003 0307 	and.w	r3, r3, #7
}
 8101e66:	4618      	mov	r0, r3
 8101e68:	46bd      	mov	sp, r7
 8101e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e6e:	4770      	bx	lr
 8101e70:	e000ed00 	.word	0xe000ed00

08101e74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101e74:	b480      	push	{r7}
 8101e76:	b083      	sub	sp, #12
 8101e78:	af00      	add	r7, sp, #0
 8101e7a:	4603      	mov	r3, r0
 8101e7c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101e7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101e82:	2b00      	cmp	r3, #0
 8101e84:	db0b      	blt.n	8101e9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8101e86:	88fb      	ldrh	r3, [r7, #6]
 8101e88:	f003 021f 	and.w	r2, r3, #31
 8101e8c:	4907      	ldr	r1, [pc, #28]	; (8101eac <__NVIC_EnableIRQ+0x38>)
 8101e8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101e92:	095b      	lsrs	r3, r3, #5
 8101e94:	2001      	movs	r0, #1
 8101e96:	fa00 f202 	lsl.w	r2, r0, r2
 8101e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8101e9e:	bf00      	nop
 8101ea0:	370c      	adds	r7, #12
 8101ea2:	46bd      	mov	sp, r7
 8101ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ea8:	4770      	bx	lr
 8101eaa:	bf00      	nop
 8101eac:	e000e100 	.word	0xe000e100

08101eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101eb0:	b480      	push	{r7}
 8101eb2:	b083      	sub	sp, #12
 8101eb4:	af00      	add	r7, sp, #0
 8101eb6:	4603      	mov	r3, r0
 8101eb8:	6039      	str	r1, [r7, #0]
 8101eba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101ebc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101ec0:	2b00      	cmp	r3, #0
 8101ec2:	db0a      	blt.n	8101eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101ec4:	683b      	ldr	r3, [r7, #0]
 8101ec6:	b2da      	uxtb	r2, r3
 8101ec8:	490c      	ldr	r1, [pc, #48]	; (8101efc <__NVIC_SetPriority+0x4c>)
 8101eca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101ece:	0112      	lsls	r2, r2, #4
 8101ed0:	b2d2      	uxtb	r2, r2
 8101ed2:	440b      	add	r3, r1
 8101ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101ed8:	e00a      	b.n	8101ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101eda:	683b      	ldr	r3, [r7, #0]
 8101edc:	b2da      	uxtb	r2, r3
 8101ede:	4908      	ldr	r1, [pc, #32]	; (8101f00 <__NVIC_SetPriority+0x50>)
 8101ee0:	88fb      	ldrh	r3, [r7, #6]
 8101ee2:	f003 030f 	and.w	r3, r3, #15
 8101ee6:	3b04      	subs	r3, #4
 8101ee8:	0112      	lsls	r2, r2, #4
 8101eea:	b2d2      	uxtb	r2, r2
 8101eec:	440b      	add	r3, r1
 8101eee:	761a      	strb	r2, [r3, #24]
}
 8101ef0:	bf00      	nop
 8101ef2:	370c      	adds	r7, #12
 8101ef4:	46bd      	mov	sp, r7
 8101ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101efa:	4770      	bx	lr
 8101efc:	e000e100 	.word	0xe000e100
 8101f00:	e000ed00 	.word	0xe000ed00

08101f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101f04:	b480      	push	{r7}
 8101f06:	b089      	sub	sp, #36	; 0x24
 8101f08:	af00      	add	r7, sp, #0
 8101f0a:	60f8      	str	r0, [r7, #12]
 8101f0c:	60b9      	str	r1, [r7, #8]
 8101f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101f10:	68fb      	ldr	r3, [r7, #12]
 8101f12:	f003 0307 	and.w	r3, r3, #7
 8101f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101f18:	69fb      	ldr	r3, [r7, #28]
 8101f1a:	f1c3 0307 	rsb	r3, r3, #7
 8101f1e:	2b04      	cmp	r3, #4
 8101f20:	bf28      	it	cs
 8101f22:	2304      	movcs	r3, #4
 8101f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101f26:	69fb      	ldr	r3, [r7, #28]
 8101f28:	3304      	adds	r3, #4
 8101f2a:	2b06      	cmp	r3, #6
 8101f2c:	d902      	bls.n	8101f34 <NVIC_EncodePriority+0x30>
 8101f2e:	69fb      	ldr	r3, [r7, #28]
 8101f30:	3b03      	subs	r3, #3
 8101f32:	e000      	b.n	8101f36 <NVIC_EncodePriority+0x32>
 8101f34:	2300      	movs	r3, #0
 8101f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101f38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8101f3c:	69bb      	ldr	r3, [r7, #24]
 8101f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8101f42:	43da      	mvns	r2, r3
 8101f44:	68bb      	ldr	r3, [r7, #8]
 8101f46:	401a      	ands	r2, r3
 8101f48:	697b      	ldr	r3, [r7, #20]
 8101f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101f4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8101f50:	697b      	ldr	r3, [r7, #20]
 8101f52:	fa01 f303 	lsl.w	r3, r1, r3
 8101f56:	43d9      	mvns	r1, r3
 8101f58:	687b      	ldr	r3, [r7, #4]
 8101f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101f5c:	4313      	orrs	r3, r2
         );
}
 8101f5e:	4618      	mov	r0, r3
 8101f60:	3724      	adds	r7, #36	; 0x24
 8101f62:	46bd      	mov	sp, r7
 8101f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f68:	4770      	bx	lr

08101f6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101f6a:	b580      	push	{r7, lr}
 8101f6c:	b082      	sub	sp, #8
 8101f6e:	af00      	add	r7, sp, #0
 8101f70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101f72:	6878      	ldr	r0, [r7, #4]
 8101f74:	f7ff ff4c 	bl	8101e10 <__NVIC_SetPriorityGrouping>
}
 8101f78:	bf00      	nop
 8101f7a:	3708      	adds	r7, #8
 8101f7c:	46bd      	mov	sp, r7
 8101f7e:	bd80      	pop	{r7, pc}

08101f80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101f80:	b580      	push	{r7, lr}
 8101f82:	b086      	sub	sp, #24
 8101f84:	af00      	add	r7, sp, #0
 8101f86:	4603      	mov	r3, r0
 8101f88:	60b9      	str	r1, [r7, #8]
 8101f8a:	607a      	str	r2, [r7, #4]
 8101f8c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101f8e:	f7ff ff63 	bl	8101e58 <__NVIC_GetPriorityGrouping>
 8101f92:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101f94:	687a      	ldr	r2, [r7, #4]
 8101f96:	68b9      	ldr	r1, [r7, #8]
 8101f98:	6978      	ldr	r0, [r7, #20]
 8101f9a:	f7ff ffb3 	bl	8101f04 <NVIC_EncodePriority>
 8101f9e:	4602      	mov	r2, r0
 8101fa0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101fa4:	4611      	mov	r1, r2
 8101fa6:	4618      	mov	r0, r3
 8101fa8:	f7ff ff82 	bl	8101eb0 <__NVIC_SetPriority>
}
 8101fac:	bf00      	nop
 8101fae:	3718      	adds	r7, #24
 8101fb0:	46bd      	mov	sp, r7
 8101fb2:	bd80      	pop	{r7, pc}

08101fb4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101fb4:	b580      	push	{r7, lr}
 8101fb6:	b082      	sub	sp, #8
 8101fb8:	af00      	add	r7, sp, #0
 8101fba:	4603      	mov	r3, r0
 8101fbc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8101fbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101fc2:	4618      	mov	r0, r3
 8101fc4:	f7ff ff56 	bl	8101e74 <__NVIC_EnableIRQ>
}
 8101fc8:	bf00      	nop
 8101fca:	3708      	adds	r7, #8
 8101fcc:	46bd      	mov	sp, r7
 8101fce:	bd80      	pop	{r7, pc}

08101fd0 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101fd0:	b480      	push	{r7}
 8101fd2:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101fd4:	4b07      	ldr	r3, [pc, #28]	; (8101ff4 <HAL_GetCurrentCPUID+0x24>)
 8101fd6:	681b      	ldr	r3, [r3, #0]
 8101fd8:	091b      	lsrs	r3, r3, #4
 8101fda:	f003 030f 	and.w	r3, r3, #15
 8101fde:	2b07      	cmp	r3, #7
 8101fe0:	d101      	bne.n	8101fe6 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101fe2:	2303      	movs	r3, #3
 8101fe4:	e000      	b.n	8101fe8 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101fe6:	2301      	movs	r3, #1
  }
}
 8101fe8:	4618      	mov	r0, r3
 8101fea:	46bd      	mov	sp, r7
 8101fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ff0:	4770      	bx	lr
 8101ff2:	bf00      	nop
 8101ff4:	e000ed00 	.word	0xe000ed00

08101ff8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8101ff8:	b580      	push	{r7, lr}
 8101ffa:	b086      	sub	sp, #24
 8101ffc:	af00      	add	r7, sp, #0
 8101ffe:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8102000:	f7ff fefa 	bl	8101df8 <HAL_GetTick>
 8102004:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8102006:	687b      	ldr	r3, [r7, #4]
 8102008:	2b00      	cmp	r3, #0
 810200a:	d101      	bne.n	8102010 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 810200c:	2301      	movs	r3, #1
 810200e:	e314      	b.n	810263a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102010:	687b      	ldr	r3, [r7, #4]
 8102012:	681b      	ldr	r3, [r3, #0]
 8102014:	4a66      	ldr	r2, [pc, #408]	; (81021b0 <HAL_DMA_Init+0x1b8>)
 8102016:	4293      	cmp	r3, r2
 8102018:	d04a      	beq.n	81020b0 <HAL_DMA_Init+0xb8>
 810201a:	687b      	ldr	r3, [r7, #4]
 810201c:	681b      	ldr	r3, [r3, #0]
 810201e:	4a65      	ldr	r2, [pc, #404]	; (81021b4 <HAL_DMA_Init+0x1bc>)
 8102020:	4293      	cmp	r3, r2
 8102022:	d045      	beq.n	81020b0 <HAL_DMA_Init+0xb8>
 8102024:	687b      	ldr	r3, [r7, #4]
 8102026:	681b      	ldr	r3, [r3, #0]
 8102028:	4a63      	ldr	r2, [pc, #396]	; (81021b8 <HAL_DMA_Init+0x1c0>)
 810202a:	4293      	cmp	r3, r2
 810202c:	d040      	beq.n	81020b0 <HAL_DMA_Init+0xb8>
 810202e:	687b      	ldr	r3, [r7, #4]
 8102030:	681b      	ldr	r3, [r3, #0]
 8102032:	4a62      	ldr	r2, [pc, #392]	; (81021bc <HAL_DMA_Init+0x1c4>)
 8102034:	4293      	cmp	r3, r2
 8102036:	d03b      	beq.n	81020b0 <HAL_DMA_Init+0xb8>
 8102038:	687b      	ldr	r3, [r7, #4]
 810203a:	681b      	ldr	r3, [r3, #0]
 810203c:	4a60      	ldr	r2, [pc, #384]	; (81021c0 <HAL_DMA_Init+0x1c8>)
 810203e:	4293      	cmp	r3, r2
 8102040:	d036      	beq.n	81020b0 <HAL_DMA_Init+0xb8>
 8102042:	687b      	ldr	r3, [r7, #4]
 8102044:	681b      	ldr	r3, [r3, #0]
 8102046:	4a5f      	ldr	r2, [pc, #380]	; (81021c4 <HAL_DMA_Init+0x1cc>)
 8102048:	4293      	cmp	r3, r2
 810204a:	d031      	beq.n	81020b0 <HAL_DMA_Init+0xb8>
 810204c:	687b      	ldr	r3, [r7, #4]
 810204e:	681b      	ldr	r3, [r3, #0]
 8102050:	4a5d      	ldr	r2, [pc, #372]	; (81021c8 <HAL_DMA_Init+0x1d0>)
 8102052:	4293      	cmp	r3, r2
 8102054:	d02c      	beq.n	81020b0 <HAL_DMA_Init+0xb8>
 8102056:	687b      	ldr	r3, [r7, #4]
 8102058:	681b      	ldr	r3, [r3, #0]
 810205a:	4a5c      	ldr	r2, [pc, #368]	; (81021cc <HAL_DMA_Init+0x1d4>)
 810205c:	4293      	cmp	r3, r2
 810205e:	d027      	beq.n	81020b0 <HAL_DMA_Init+0xb8>
 8102060:	687b      	ldr	r3, [r7, #4]
 8102062:	681b      	ldr	r3, [r3, #0]
 8102064:	4a5a      	ldr	r2, [pc, #360]	; (81021d0 <HAL_DMA_Init+0x1d8>)
 8102066:	4293      	cmp	r3, r2
 8102068:	d022      	beq.n	81020b0 <HAL_DMA_Init+0xb8>
 810206a:	687b      	ldr	r3, [r7, #4]
 810206c:	681b      	ldr	r3, [r3, #0]
 810206e:	4a59      	ldr	r2, [pc, #356]	; (81021d4 <HAL_DMA_Init+0x1dc>)
 8102070:	4293      	cmp	r3, r2
 8102072:	d01d      	beq.n	81020b0 <HAL_DMA_Init+0xb8>
 8102074:	687b      	ldr	r3, [r7, #4]
 8102076:	681b      	ldr	r3, [r3, #0]
 8102078:	4a57      	ldr	r2, [pc, #348]	; (81021d8 <HAL_DMA_Init+0x1e0>)
 810207a:	4293      	cmp	r3, r2
 810207c:	d018      	beq.n	81020b0 <HAL_DMA_Init+0xb8>
 810207e:	687b      	ldr	r3, [r7, #4]
 8102080:	681b      	ldr	r3, [r3, #0]
 8102082:	4a56      	ldr	r2, [pc, #344]	; (81021dc <HAL_DMA_Init+0x1e4>)
 8102084:	4293      	cmp	r3, r2
 8102086:	d013      	beq.n	81020b0 <HAL_DMA_Init+0xb8>
 8102088:	687b      	ldr	r3, [r7, #4]
 810208a:	681b      	ldr	r3, [r3, #0]
 810208c:	4a54      	ldr	r2, [pc, #336]	; (81021e0 <HAL_DMA_Init+0x1e8>)
 810208e:	4293      	cmp	r3, r2
 8102090:	d00e      	beq.n	81020b0 <HAL_DMA_Init+0xb8>
 8102092:	687b      	ldr	r3, [r7, #4]
 8102094:	681b      	ldr	r3, [r3, #0]
 8102096:	4a53      	ldr	r2, [pc, #332]	; (81021e4 <HAL_DMA_Init+0x1ec>)
 8102098:	4293      	cmp	r3, r2
 810209a:	d009      	beq.n	81020b0 <HAL_DMA_Init+0xb8>
 810209c:	687b      	ldr	r3, [r7, #4]
 810209e:	681b      	ldr	r3, [r3, #0]
 81020a0:	4a51      	ldr	r2, [pc, #324]	; (81021e8 <HAL_DMA_Init+0x1f0>)
 81020a2:	4293      	cmp	r3, r2
 81020a4:	d004      	beq.n	81020b0 <HAL_DMA_Init+0xb8>
 81020a6:	687b      	ldr	r3, [r7, #4]
 81020a8:	681b      	ldr	r3, [r3, #0]
 81020aa:	4a50      	ldr	r2, [pc, #320]	; (81021ec <HAL_DMA_Init+0x1f4>)
 81020ac:	4293      	cmp	r3, r2
 81020ae:	d101      	bne.n	81020b4 <HAL_DMA_Init+0xbc>
 81020b0:	2301      	movs	r3, #1
 81020b2:	e000      	b.n	81020b6 <HAL_DMA_Init+0xbe>
 81020b4:	2300      	movs	r3, #0
 81020b6:	2b00      	cmp	r3, #0
 81020b8:	f000 813b 	beq.w	8102332 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 81020bc:	687b      	ldr	r3, [r7, #4]
 81020be:	2200      	movs	r2, #0
 81020c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 81020c4:	687b      	ldr	r3, [r7, #4]
 81020c6:	2202      	movs	r2, #2
 81020c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 81020cc:	687b      	ldr	r3, [r7, #4]
 81020ce:	681b      	ldr	r3, [r3, #0]
 81020d0:	4a37      	ldr	r2, [pc, #220]	; (81021b0 <HAL_DMA_Init+0x1b8>)
 81020d2:	4293      	cmp	r3, r2
 81020d4:	d04a      	beq.n	810216c <HAL_DMA_Init+0x174>
 81020d6:	687b      	ldr	r3, [r7, #4]
 81020d8:	681b      	ldr	r3, [r3, #0]
 81020da:	4a36      	ldr	r2, [pc, #216]	; (81021b4 <HAL_DMA_Init+0x1bc>)
 81020dc:	4293      	cmp	r3, r2
 81020de:	d045      	beq.n	810216c <HAL_DMA_Init+0x174>
 81020e0:	687b      	ldr	r3, [r7, #4]
 81020e2:	681b      	ldr	r3, [r3, #0]
 81020e4:	4a34      	ldr	r2, [pc, #208]	; (81021b8 <HAL_DMA_Init+0x1c0>)
 81020e6:	4293      	cmp	r3, r2
 81020e8:	d040      	beq.n	810216c <HAL_DMA_Init+0x174>
 81020ea:	687b      	ldr	r3, [r7, #4]
 81020ec:	681b      	ldr	r3, [r3, #0]
 81020ee:	4a33      	ldr	r2, [pc, #204]	; (81021bc <HAL_DMA_Init+0x1c4>)
 81020f0:	4293      	cmp	r3, r2
 81020f2:	d03b      	beq.n	810216c <HAL_DMA_Init+0x174>
 81020f4:	687b      	ldr	r3, [r7, #4]
 81020f6:	681b      	ldr	r3, [r3, #0]
 81020f8:	4a31      	ldr	r2, [pc, #196]	; (81021c0 <HAL_DMA_Init+0x1c8>)
 81020fa:	4293      	cmp	r3, r2
 81020fc:	d036      	beq.n	810216c <HAL_DMA_Init+0x174>
 81020fe:	687b      	ldr	r3, [r7, #4]
 8102100:	681b      	ldr	r3, [r3, #0]
 8102102:	4a30      	ldr	r2, [pc, #192]	; (81021c4 <HAL_DMA_Init+0x1cc>)
 8102104:	4293      	cmp	r3, r2
 8102106:	d031      	beq.n	810216c <HAL_DMA_Init+0x174>
 8102108:	687b      	ldr	r3, [r7, #4]
 810210a:	681b      	ldr	r3, [r3, #0]
 810210c:	4a2e      	ldr	r2, [pc, #184]	; (81021c8 <HAL_DMA_Init+0x1d0>)
 810210e:	4293      	cmp	r3, r2
 8102110:	d02c      	beq.n	810216c <HAL_DMA_Init+0x174>
 8102112:	687b      	ldr	r3, [r7, #4]
 8102114:	681b      	ldr	r3, [r3, #0]
 8102116:	4a2d      	ldr	r2, [pc, #180]	; (81021cc <HAL_DMA_Init+0x1d4>)
 8102118:	4293      	cmp	r3, r2
 810211a:	d027      	beq.n	810216c <HAL_DMA_Init+0x174>
 810211c:	687b      	ldr	r3, [r7, #4]
 810211e:	681b      	ldr	r3, [r3, #0]
 8102120:	4a2b      	ldr	r2, [pc, #172]	; (81021d0 <HAL_DMA_Init+0x1d8>)
 8102122:	4293      	cmp	r3, r2
 8102124:	d022      	beq.n	810216c <HAL_DMA_Init+0x174>
 8102126:	687b      	ldr	r3, [r7, #4]
 8102128:	681b      	ldr	r3, [r3, #0]
 810212a:	4a2a      	ldr	r2, [pc, #168]	; (81021d4 <HAL_DMA_Init+0x1dc>)
 810212c:	4293      	cmp	r3, r2
 810212e:	d01d      	beq.n	810216c <HAL_DMA_Init+0x174>
 8102130:	687b      	ldr	r3, [r7, #4]
 8102132:	681b      	ldr	r3, [r3, #0]
 8102134:	4a28      	ldr	r2, [pc, #160]	; (81021d8 <HAL_DMA_Init+0x1e0>)
 8102136:	4293      	cmp	r3, r2
 8102138:	d018      	beq.n	810216c <HAL_DMA_Init+0x174>
 810213a:	687b      	ldr	r3, [r7, #4]
 810213c:	681b      	ldr	r3, [r3, #0]
 810213e:	4a27      	ldr	r2, [pc, #156]	; (81021dc <HAL_DMA_Init+0x1e4>)
 8102140:	4293      	cmp	r3, r2
 8102142:	d013      	beq.n	810216c <HAL_DMA_Init+0x174>
 8102144:	687b      	ldr	r3, [r7, #4]
 8102146:	681b      	ldr	r3, [r3, #0]
 8102148:	4a25      	ldr	r2, [pc, #148]	; (81021e0 <HAL_DMA_Init+0x1e8>)
 810214a:	4293      	cmp	r3, r2
 810214c:	d00e      	beq.n	810216c <HAL_DMA_Init+0x174>
 810214e:	687b      	ldr	r3, [r7, #4]
 8102150:	681b      	ldr	r3, [r3, #0]
 8102152:	4a24      	ldr	r2, [pc, #144]	; (81021e4 <HAL_DMA_Init+0x1ec>)
 8102154:	4293      	cmp	r3, r2
 8102156:	d009      	beq.n	810216c <HAL_DMA_Init+0x174>
 8102158:	687b      	ldr	r3, [r7, #4]
 810215a:	681b      	ldr	r3, [r3, #0]
 810215c:	4a22      	ldr	r2, [pc, #136]	; (81021e8 <HAL_DMA_Init+0x1f0>)
 810215e:	4293      	cmp	r3, r2
 8102160:	d004      	beq.n	810216c <HAL_DMA_Init+0x174>
 8102162:	687b      	ldr	r3, [r7, #4]
 8102164:	681b      	ldr	r3, [r3, #0]
 8102166:	4a21      	ldr	r2, [pc, #132]	; (81021ec <HAL_DMA_Init+0x1f4>)
 8102168:	4293      	cmp	r3, r2
 810216a:	d108      	bne.n	810217e <HAL_DMA_Init+0x186>
 810216c:	687b      	ldr	r3, [r7, #4]
 810216e:	681b      	ldr	r3, [r3, #0]
 8102170:	681a      	ldr	r2, [r3, #0]
 8102172:	687b      	ldr	r3, [r7, #4]
 8102174:	681b      	ldr	r3, [r3, #0]
 8102176:	f022 0201 	bic.w	r2, r2, #1
 810217a:	601a      	str	r2, [r3, #0]
 810217c:	e007      	b.n	810218e <HAL_DMA_Init+0x196>
 810217e:	687b      	ldr	r3, [r7, #4]
 8102180:	681b      	ldr	r3, [r3, #0]
 8102182:	681a      	ldr	r2, [r3, #0]
 8102184:	687b      	ldr	r3, [r7, #4]
 8102186:	681b      	ldr	r3, [r3, #0]
 8102188:	f022 0201 	bic.w	r2, r2, #1
 810218c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 810218e:	e02f      	b.n	81021f0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8102190:	f7ff fe32 	bl	8101df8 <HAL_GetTick>
 8102194:	4602      	mov	r2, r0
 8102196:	693b      	ldr	r3, [r7, #16]
 8102198:	1ad3      	subs	r3, r2, r3
 810219a:	2b05      	cmp	r3, #5
 810219c:	d928      	bls.n	81021f0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 810219e:	687b      	ldr	r3, [r7, #4]
 81021a0:	2220      	movs	r2, #32
 81021a2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 81021a4:	687b      	ldr	r3, [r7, #4]
 81021a6:	2203      	movs	r2, #3
 81021a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 81021ac:	2301      	movs	r3, #1
 81021ae:	e244      	b.n	810263a <HAL_DMA_Init+0x642>
 81021b0:	40020010 	.word	0x40020010
 81021b4:	40020028 	.word	0x40020028
 81021b8:	40020040 	.word	0x40020040
 81021bc:	40020058 	.word	0x40020058
 81021c0:	40020070 	.word	0x40020070
 81021c4:	40020088 	.word	0x40020088
 81021c8:	400200a0 	.word	0x400200a0
 81021cc:	400200b8 	.word	0x400200b8
 81021d0:	40020410 	.word	0x40020410
 81021d4:	40020428 	.word	0x40020428
 81021d8:	40020440 	.word	0x40020440
 81021dc:	40020458 	.word	0x40020458
 81021e0:	40020470 	.word	0x40020470
 81021e4:	40020488 	.word	0x40020488
 81021e8:	400204a0 	.word	0x400204a0
 81021ec:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81021f0:	687b      	ldr	r3, [r7, #4]
 81021f2:	681b      	ldr	r3, [r3, #0]
 81021f4:	681b      	ldr	r3, [r3, #0]
 81021f6:	f003 0301 	and.w	r3, r3, #1
 81021fa:	2b00      	cmp	r3, #0
 81021fc:	d1c8      	bne.n	8102190 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 81021fe:	687b      	ldr	r3, [r7, #4]
 8102200:	681b      	ldr	r3, [r3, #0]
 8102202:	681b      	ldr	r3, [r3, #0]
 8102204:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8102206:	697a      	ldr	r2, [r7, #20]
 8102208:	4b84      	ldr	r3, [pc, #528]	; (810241c <HAL_DMA_Init+0x424>)
 810220a:	4013      	ands	r3, r2
 810220c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 810220e:	687b      	ldr	r3, [r7, #4]
 8102210:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8102212:	687b      	ldr	r3, [r7, #4]
 8102214:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8102216:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8102218:	687b      	ldr	r3, [r7, #4]
 810221a:	691b      	ldr	r3, [r3, #16]
 810221c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 810221e:	687b      	ldr	r3, [r7, #4]
 8102220:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8102222:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8102224:	687b      	ldr	r3, [r7, #4]
 8102226:	699b      	ldr	r3, [r3, #24]
 8102228:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 810222a:	687b      	ldr	r3, [r7, #4]
 810222c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 810222e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8102230:	687b      	ldr	r3, [r7, #4]
 8102232:	6a1b      	ldr	r3, [r3, #32]
 8102234:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8102236:	697a      	ldr	r2, [r7, #20]
 8102238:	4313      	orrs	r3, r2
 810223a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 810223c:	687b      	ldr	r3, [r7, #4]
 810223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102240:	2b04      	cmp	r3, #4
 8102242:	d107      	bne.n	8102254 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8102244:	687b      	ldr	r3, [r7, #4]
 8102246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8102248:	687b      	ldr	r3, [r7, #4]
 810224a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810224c:	4313      	orrs	r3, r2
 810224e:	697a      	ldr	r2, [r7, #20]
 8102250:	4313      	orrs	r3, r2
 8102252:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8102254:	4b72      	ldr	r3, [pc, #456]	; (8102420 <HAL_DMA_Init+0x428>)
 8102256:	681b      	ldr	r3, [r3, #0]
 8102258:	0c1b      	lsrs	r3, r3, #16
 810225a:	041b      	lsls	r3, r3, #16
 810225c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102260:	d328      	bcc.n	81022b4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8102262:	687b      	ldr	r3, [r7, #4]
 8102264:	685b      	ldr	r3, [r3, #4]
 8102266:	2b28      	cmp	r3, #40	; 0x28
 8102268:	d903      	bls.n	8102272 <HAL_DMA_Init+0x27a>
 810226a:	687b      	ldr	r3, [r7, #4]
 810226c:	685b      	ldr	r3, [r3, #4]
 810226e:	2b2e      	cmp	r3, #46	; 0x2e
 8102270:	d917      	bls.n	81022a2 <HAL_DMA_Init+0x2aa>
 8102272:	687b      	ldr	r3, [r7, #4]
 8102274:	685b      	ldr	r3, [r3, #4]
 8102276:	2b3e      	cmp	r3, #62	; 0x3e
 8102278:	d903      	bls.n	8102282 <HAL_DMA_Init+0x28a>
 810227a:	687b      	ldr	r3, [r7, #4]
 810227c:	685b      	ldr	r3, [r3, #4]
 810227e:	2b42      	cmp	r3, #66	; 0x42
 8102280:	d90f      	bls.n	81022a2 <HAL_DMA_Init+0x2aa>
 8102282:	687b      	ldr	r3, [r7, #4]
 8102284:	685b      	ldr	r3, [r3, #4]
 8102286:	2b46      	cmp	r3, #70	; 0x46
 8102288:	d903      	bls.n	8102292 <HAL_DMA_Init+0x29a>
 810228a:	687b      	ldr	r3, [r7, #4]
 810228c:	685b      	ldr	r3, [r3, #4]
 810228e:	2b48      	cmp	r3, #72	; 0x48
 8102290:	d907      	bls.n	81022a2 <HAL_DMA_Init+0x2aa>
 8102292:	687b      	ldr	r3, [r7, #4]
 8102294:	685b      	ldr	r3, [r3, #4]
 8102296:	2b4e      	cmp	r3, #78	; 0x4e
 8102298:	d905      	bls.n	81022a6 <HAL_DMA_Init+0x2ae>
 810229a:	687b      	ldr	r3, [r7, #4]
 810229c:	685b      	ldr	r3, [r3, #4]
 810229e:	2b52      	cmp	r3, #82	; 0x52
 81022a0:	d801      	bhi.n	81022a6 <HAL_DMA_Init+0x2ae>
 81022a2:	2301      	movs	r3, #1
 81022a4:	e000      	b.n	81022a8 <HAL_DMA_Init+0x2b0>
 81022a6:	2300      	movs	r3, #0
 81022a8:	2b00      	cmp	r3, #0
 81022aa:	d003      	beq.n	81022b4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 81022ac:	697b      	ldr	r3, [r7, #20]
 81022ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81022b2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 81022b4:	687b      	ldr	r3, [r7, #4]
 81022b6:	681b      	ldr	r3, [r3, #0]
 81022b8:	697a      	ldr	r2, [r7, #20]
 81022ba:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 81022bc:	687b      	ldr	r3, [r7, #4]
 81022be:	681b      	ldr	r3, [r3, #0]
 81022c0:	695b      	ldr	r3, [r3, #20]
 81022c2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 81022c4:	697b      	ldr	r3, [r7, #20]
 81022c6:	f023 0307 	bic.w	r3, r3, #7
 81022ca:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 81022cc:	687b      	ldr	r3, [r7, #4]
 81022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81022d0:	697a      	ldr	r2, [r7, #20]
 81022d2:	4313      	orrs	r3, r2
 81022d4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 81022d6:	687b      	ldr	r3, [r7, #4]
 81022d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81022da:	2b04      	cmp	r3, #4
 81022dc:	d117      	bne.n	810230e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 81022de:	687b      	ldr	r3, [r7, #4]
 81022e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81022e2:	697a      	ldr	r2, [r7, #20]
 81022e4:	4313      	orrs	r3, r2
 81022e6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 81022e8:	687b      	ldr	r3, [r7, #4]
 81022ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81022ec:	2b00      	cmp	r3, #0
 81022ee:	d00e      	beq.n	810230e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 81022f0:	6878      	ldr	r0, [r7, #4]
 81022f2:	f001 fbfb 	bl	8103aec <DMA_CheckFifoParam>
 81022f6:	4603      	mov	r3, r0
 81022f8:	2b00      	cmp	r3, #0
 81022fa:	d008      	beq.n	810230e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 81022fc:	687b      	ldr	r3, [r7, #4]
 81022fe:	2240      	movs	r2, #64	; 0x40
 8102300:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8102302:	687b      	ldr	r3, [r7, #4]
 8102304:	2201      	movs	r2, #1
 8102306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 810230a:	2301      	movs	r3, #1
 810230c:	e195      	b.n	810263a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 810230e:	687b      	ldr	r3, [r7, #4]
 8102310:	681b      	ldr	r3, [r3, #0]
 8102312:	697a      	ldr	r2, [r7, #20]
 8102314:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8102316:	6878      	ldr	r0, [r7, #4]
 8102318:	f001 fb36 	bl	8103988 <DMA_CalcBaseAndBitshift>
 810231c:	4603      	mov	r3, r0
 810231e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8102320:	687b      	ldr	r3, [r7, #4]
 8102322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102324:	f003 031f 	and.w	r3, r3, #31
 8102328:	223f      	movs	r2, #63	; 0x3f
 810232a:	409a      	lsls	r2, r3
 810232c:	68bb      	ldr	r3, [r7, #8]
 810232e:	609a      	str	r2, [r3, #8]
 8102330:	e0cb      	b.n	81024ca <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8102332:	687b      	ldr	r3, [r7, #4]
 8102334:	681b      	ldr	r3, [r3, #0]
 8102336:	4a3b      	ldr	r2, [pc, #236]	; (8102424 <HAL_DMA_Init+0x42c>)
 8102338:	4293      	cmp	r3, r2
 810233a:	d022      	beq.n	8102382 <HAL_DMA_Init+0x38a>
 810233c:	687b      	ldr	r3, [r7, #4]
 810233e:	681b      	ldr	r3, [r3, #0]
 8102340:	4a39      	ldr	r2, [pc, #228]	; (8102428 <HAL_DMA_Init+0x430>)
 8102342:	4293      	cmp	r3, r2
 8102344:	d01d      	beq.n	8102382 <HAL_DMA_Init+0x38a>
 8102346:	687b      	ldr	r3, [r7, #4]
 8102348:	681b      	ldr	r3, [r3, #0]
 810234a:	4a38      	ldr	r2, [pc, #224]	; (810242c <HAL_DMA_Init+0x434>)
 810234c:	4293      	cmp	r3, r2
 810234e:	d018      	beq.n	8102382 <HAL_DMA_Init+0x38a>
 8102350:	687b      	ldr	r3, [r7, #4]
 8102352:	681b      	ldr	r3, [r3, #0]
 8102354:	4a36      	ldr	r2, [pc, #216]	; (8102430 <HAL_DMA_Init+0x438>)
 8102356:	4293      	cmp	r3, r2
 8102358:	d013      	beq.n	8102382 <HAL_DMA_Init+0x38a>
 810235a:	687b      	ldr	r3, [r7, #4]
 810235c:	681b      	ldr	r3, [r3, #0]
 810235e:	4a35      	ldr	r2, [pc, #212]	; (8102434 <HAL_DMA_Init+0x43c>)
 8102360:	4293      	cmp	r3, r2
 8102362:	d00e      	beq.n	8102382 <HAL_DMA_Init+0x38a>
 8102364:	687b      	ldr	r3, [r7, #4]
 8102366:	681b      	ldr	r3, [r3, #0]
 8102368:	4a33      	ldr	r2, [pc, #204]	; (8102438 <HAL_DMA_Init+0x440>)
 810236a:	4293      	cmp	r3, r2
 810236c:	d009      	beq.n	8102382 <HAL_DMA_Init+0x38a>
 810236e:	687b      	ldr	r3, [r7, #4]
 8102370:	681b      	ldr	r3, [r3, #0]
 8102372:	4a32      	ldr	r2, [pc, #200]	; (810243c <HAL_DMA_Init+0x444>)
 8102374:	4293      	cmp	r3, r2
 8102376:	d004      	beq.n	8102382 <HAL_DMA_Init+0x38a>
 8102378:	687b      	ldr	r3, [r7, #4]
 810237a:	681b      	ldr	r3, [r3, #0]
 810237c:	4a30      	ldr	r2, [pc, #192]	; (8102440 <HAL_DMA_Init+0x448>)
 810237e:	4293      	cmp	r3, r2
 8102380:	d101      	bne.n	8102386 <HAL_DMA_Init+0x38e>
 8102382:	2301      	movs	r3, #1
 8102384:	e000      	b.n	8102388 <HAL_DMA_Init+0x390>
 8102386:	2300      	movs	r3, #0
 8102388:	2b00      	cmp	r3, #0
 810238a:	f000 8095 	beq.w	81024b8 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 810238e:	687b      	ldr	r3, [r7, #4]
 8102390:	681b      	ldr	r3, [r3, #0]
 8102392:	4a24      	ldr	r2, [pc, #144]	; (8102424 <HAL_DMA_Init+0x42c>)
 8102394:	4293      	cmp	r3, r2
 8102396:	d021      	beq.n	81023dc <HAL_DMA_Init+0x3e4>
 8102398:	687b      	ldr	r3, [r7, #4]
 810239a:	681b      	ldr	r3, [r3, #0]
 810239c:	4a22      	ldr	r2, [pc, #136]	; (8102428 <HAL_DMA_Init+0x430>)
 810239e:	4293      	cmp	r3, r2
 81023a0:	d01c      	beq.n	81023dc <HAL_DMA_Init+0x3e4>
 81023a2:	687b      	ldr	r3, [r7, #4]
 81023a4:	681b      	ldr	r3, [r3, #0]
 81023a6:	4a21      	ldr	r2, [pc, #132]	; (810242c <HAL_DMA_Init+0x434>)
 81023a8:	4293      	cmp	r3, r2
 81023aa:	d017      	beq.n	81023dc <HAL_DMA_Init+0x3e4>
 81023ac:	687b      	ldr	r3, [r7, #4]
 81023ae:	681b      	ldr	r3, [r3, #0]
 81023b0:	4a1f      	ldr	r2, [pc, #124]	; (8102430 <HAL_DMA_Init+0x438>)
 81023b2:	4293      	cmp	r3, r2
 81023b4:	d012      	beq.n	81023dc <HAL_DMA_Init+0x3e4>
 81023b6:	687b      	ldr	r3, [r7, #4]
 81023b8:	681b      	ldr	r3, [r3, #0]
 81023ba:	4a1e      	ldr	r2, [pc, #120]	; (8102434 <HAL_DMA_Init+0x43c>)
 81023bc:	4293      	cmp	r3, r2
 81023be:	d00d      	beq.n	81023dc <HAL_DMA_Init+0x3e4>
 81023c0:	687b      	ldr	r3, [r7, #4]
 81023c2:	681b      	ldr	r3, [r3, #0]
 81023c4:	4a1c      	ldr	r2, [pc, #112]	; (8102438 <HAL_DMA_Init+0x440>)
 81023c6:	4293      	cmp	r3, r2
 81023c8:	d008      	beq.n	81023dc <HAL_DMA_Init+0x3e4>
 81023ca:	687b      	ldr	r3, [r7, #4]
 81023cc:	681b      	ldr	r3, [r3, #0]
 81023ce:	4a1b      	ldr	r2, [pc, #108]	; (810243c <HAL_DMA_Init+0x444>)
 81023d0:	4293      	cmp	r3, r2
 81023d2:	d003      	beq.n	81023dc <HAL_DMA_Init+0x3e4>
 81023d4:	687b      	ldr	r3, [r7, #4]
 81023d6:	681b      	ldr	r3, [r3, #0]
 81023d8:	4a19      	ldr	r2, [pc, #100]	; (8102440 <HAL_DMA_Init+0x448>)
 81023da:	4293      	cmp	r3, r2
 81023dc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 81023de:	687b      	ldr	r3, [r7, #4]
 81023e0:	2200      	movs	r2, #0
 81023e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 81023e6:	687b      	ldr	r3, [r7, #4]
 81023e8:	2202      	movs	r2, #2
 81023ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 81023ee:	687b      	ldr	r3, [r7, #4]
 81023f0:	681b      	ldr	r3, [r3, #0]
 81023f2:	681b      	ldr	r3, [r3, #0]
 81023f4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 81023f6:	697b      	ldr	r3, [r7, #20]
 81023f8:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 81023fc:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8102400:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8102402:	687b      	ldr	r3, [r7, #4]
 8102404:	689b      	ldr	r3, [r3, #8]
 8102406:	2b40      	cmp	r3, #64	; 0x40
 8102408:	d01c      	beq.n	8102444 <HAL_DMA_Init+0x44c>
 810240a:	687b      	ldr	r3, [r7, #4]
 810240c:	689b      	ldr	r3, [r3, #8]
 810240e:	2b80      	cmp	r3, #128	; 0x80
 8102410:	d102      	bne.n	8102418 <HAL_DMA_Init+0x420>
 8102412:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8102416:	e016      	b.n	8102446 <HAL_DMA_Init+0x44e>
 8102418:	2300      	movs	r3, #0
 810241a:	e014      	b.n	8102446 <HAL_DMA_Init+0x44e>
 810241c:	fe10803f 	.word	0xfe10803f
 8102420:	5c001000 	.word	0x5c001000
 8102424:	58025408 	.word	0x58025408
 8102428:	5802541c 	.word	0x5802541c
 810242c:	58025430 	.word	0x58025430
 8102430:	58025444 	.word	0x58025444
 8102434:	58025458 	.word	0x58025458
 8102438:	5802546c 	.word	0x5802546c
 810243c:	58025480 	.word	0x58025480
 8102440:	58025494 	.word	0x58025494
 8102444:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8102446:	687a      	ldr	r2, [r7, #4]
 8102448:	68d2      	ldr	r2, [r2, #12]
 810244a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 810244c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 810244e:	687b      	ldr	r3, [r7, #4]
 8102450:	691b      	ldr	r3, [r3, #16]
 8102452:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8102454:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8102456:	687b      	ldr	r3, [r7, #4]
 8102458:	695b      	ldr	r3, [r3, #20]
 810245a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 810245c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 810245e:	687b      	ldr	r3, [r7, #4]
 8102460:	699b      	ldr	r3, [r3, #24]
 8102462:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8102464:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8102466:	687b      	ldr	r3, [r7, #4]
 8102468:	69db      	ldr	r3, [r3, #28]
 810246a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 810246c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 810246e:	687b      	ldr	r3, [r7, #4]
 8102470:	6a1b      	ldr	r3, [r3, #32]
 8102472:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8102474:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8102476:	697a      	ldr	r2, [r7, #20]
 8102478:	4313      	orrs	r3, r2
 810247a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 810247c:	687b      	ldr	r3, [r7, #4]
 810247e:	681b      	ldr	r3, [r3, #0]
 8102480:	697a      	ldr	r2, [r7, #20]
 8102482:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8102484:	687b      	ldr	r3, [r7, #4]
 8102486:	681b      	ldr	r3, [r3, #0]
 8102488:	461a      	mov	r2, r3
 810248a:	4b6e      	ldr	r3, [pc, #440]	; (8102644 <HAL_DMA_Init+0x64c>)
 810248c:	4413      	add	r3, r2
 810248e:	4a6e      	ldr	r2, [pc, #440]	; (8102648 <HAL_DMA_Init+0x650>)
 8102490:	fba2 2303 	umull	r2, r3, r2, r3
 8102494:	091b      	lsrs	r3, r3, #4
 8102496:	009a      	lsls	r2, r3, #2
 8102498:	687b      	ldr	r3, [r7, #4]
 810249a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 810249c:	6878      	ldr	r0, [r7, #4]
 810249e:	f001 fa73 	bl	8103988 <DMA_CalcBaseAndBitshift>
 81024a2:	4603      	mov	r3, r0
 81024a4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81024a6:	687b      	ldr	r3, [r7, #4]
 81024a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81024aa:	f003 031f 	and.w	r3, r3, #31
 81024ae:	2201      	movs	r2, #1
 81024b0:	409a      	lsls	r2, r3
 81024b2:	68fb      	ldr	r3, [r7, #12]
 81024b4:	605a      	str	r2, [r3, #4]
 81024b6:	e008      	b.n	81024ca <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 81024b8:	687b      	ldr	r3, [r7, #4]
 81024ba:	2240      	movs	r2, #64	; 0x40
 81024bc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 81024be:	687b      	ldr	r3, [r7, #4]
 81024c0:	2203      	movs	r2, #3
 81024c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 81024c6:	2301      	movs	r3, #1
 81024c8:	e0b7      	b.n	810263a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81024ca:	687b      	ldr	r3, [r7, #4]
 81024cc:	681b      	ldr	r3, [r3, #0]
 81024ce:	4a5f      	ldr	r2, [pc, #380]	; (810264c <HAL_DMA_Init+0x654>)
 81024d0:	4293      	cmp	r3, r2
 81024d2:	d072      	beq.n	81025ba <HAL_DMA_Init+0x5c2>
 81024d4:	687b      	ldr	r3, [r7, #4]
 81024d6:	681b      	ldr	r3, [r3, #0]
 81024d8:	4a5d      	ldr	r2, [pc, #372]	; (8102650 <HAL_DMA_Init+0x658>)
 81024da:	4293      	cmp	r3, r2
 81024dc:	d06d      	beq.n	81025ba <HAL_DMA_Init+0x5c2>
 81024de:	687b      	ldr	r3, [r7, #4]
 81024e0:	681b      	ldr	r3, [r3, #0]
 81024e2:	4a5c      	ldr	r2, [pc, #368]	; (8102654 <HAL_DMA_Init+0x65c>)
 81024e4:	4293      	cmp	r3, r2
 81024e6:	d068      	beq.n	81025ba <HAL_DMA_Init+0x5c2>
 81024e8:	687b      	ldr	r3, [r7, #4]
 81024ea:	681b      	ldr	r3, [r3, #0]
 81024ec:	4a5a      	ldr	r2, [pc, #360]	; (8102658 <HAL_DMA_Init+0x660>)
 81024ee:	4293      	cmp	r3, r2
 81024f0:	d063      	beq.n	81025ba <HAL_DMA_Init+0x5c2>
 81024f2:	687b      	ldr	r3, [r7, #4]
 81024f4:	681b      	ldr	r3, [r3, #0]
 81024f6:	4a59      	ldr	r2, [pc, #356]	; (810265c <HAL_DMA_Init+0x664>)
 81024f8:	4293      	cmp	r3, r2
 81024fa:	d05e      	beq.n	81025ba <HAL_DMA_Init+0x5c2>
 81024fc:	687b      	ldr	r3, [r7, #4]
 81024fe:	681b      	ldr	r3, [r3, #0]
 8102500:	4a57      	ldr	r2, [pc, #348]	; (8102660 <HAL_DMA_Init+0x668>)
 8102502:	4293      	cmp	r3, r2
 8102504:	d059      	beq.n	81025ba <HAL_DMA_Init+0x5c2>
 8102506:	687b      	ldr	r3, [r7, #4]
 8102508:	681b      	ldr	r3, [r3, #0]
 810250a:	4a56      	ldr	r2, [pc, #344]	; (8102664 <HAL_DMA_Init+0x66c>)
 810250c:	4293      	cmp	r3, r2
 810250e:	d054      	beq.n	81025ba <HAL_DMA_Init+0x5c2>
 8102510:	687b      	ldr	r3, [r7, #4]
 8102512:	681b      	ldr	r3, [r3, #0]
 8102514:	4a54      	ldr	r2, [pc, #336]	; (8102668 <HAL_DMA_Init+0x670>)
 8102516:	4293      	cmp	r3, r2
 8102518:	d04f      	beq.n	81025ba <HAL_DMA_Init+0x5c2>
 810251a:	687b      	ldr	r3, [r7, #4]
 810251c:	681b      	ldr	r3, [r3, #0]
 810251e:	4a53      	ldr	r2, [pc, #332]	; (810266c <HAL_DMA_Init+0x674>)
 8102520:	4293      	cmp	r3, r2
 8102522:	d04a      	beq.n	81025ba <HAL_DMA_Init+0x5c2>
 8102524:	687b      	ldr	r3, [r7, #4]
 8102526:	681b      	ldr	r3, [r3, #0]
 8102528:	4a51      	ldr	r2, [pc, #324]	; (8102670 <HAL_DMA_Init+0x678>)
 810252a:	4293      	cmp	r3, r2
 810252c:	d045      	beq.n	81025ba <HAL_DMA_Init+0x5c2>
 810252e:	687b      	ldr	r3, [r7, #4]
 8102530:	681b      	ldr	r3, [r3, #0]
 8102532:	4a50      	ldr	r2, [pc, #320]	; (8102674 <HAL_DMA_Init+0x67c>)
 8102534:	4293      	cmp	r3, r2
 8102536:	d040      	beq.n	81025ba <HAL_DMA_Init+0x5c2>
 8102538:	687b      	ldr	r3, [r7, #4]
 810253a:	681b      	ldr	r3, [r3, #0]
 810253c:	4a4e      	ldr	r2, [pc, #312]	; (8102678 <HAL_DMA_Init+0x680>)
 810253e:	4293      	cmp	r3, r2
 8102540:	d03b      	beq.n	81025ba <HAL_DMA_Init+0x5c2>
 8102542:	687b      	ldr	r3, [r7, #4]
 8102544:	681b      	ldr	r3, [r3, #0]
 8102546:	4a4d      	ldr	r2, [pc, #308]	; (810267c <HAL_DMA_Init+0x684>)
 8102548:	4293      	cmp	r3, r2
 810254a:	d036      	beq.n	81025ba <HAL_DMA_Init+0x5c2>
 810254c:	687b      	ldr	r3, [r7, #4]
 810254e:	681b      	ldr	r3, [r3, #0]
 8102550:	4a4b      	ldr	r2, [pc, #300]	; (8102680 <HAL_DMA_Init+0x688>)
 8102552:	4293      	cmp	r3, r2
 8102554:	d031      	beq.n	81025ba <HAL_DMA_Init+0x5c2>
 8102556:	687b      	ldr	r3, [r7, #4]
 8102558:	681b      	ldr	r3, [r3, #0]
 810255a:	4a4a      	ldr	r2, [pc, #296]	; (8102684 <HAL_DMA_Init+0x68c>)
 810255c:	4293      	cmp	r3, r2
 810255e:	d02c      	beq.n	81025ba <HAL_DMA_Init+0x5c2>
 8102560:	687b      	ldr	r3, [r7, #4]
 8102562:	681b      	ldr	r3, [r3, #0]
 8102564:	4a48      	ldr	r2, [pc, #288]	; (8102688 <HAL_DMA_Init+0x690>)
 8102566:	4293      	cmp	r3, r2
 8102568:	d027      	beq.n	81025ba <HAL_DMA_Init+0x5c2>
 810256a:	687b      	ldr	r3, [r7, #4]
 810256c:	681b      	ldr	r3, [r3, #0]
 810256e:	4a47      	ldr	r2, [pc, #284]	; (810268c <HAL_DMA_Init+0x694>)
 8102570:	4293      	cmp	r3, r2
 8102572:	d022      	beq.n	81025ba <HAL_DMA_Init+0x5c2>
 8102574:	687b      	ldr	r3, [r7, #4]
 8102576:	681b      	ldr	r3, [r3, #0]
 8102578:	4a45      	ldr	r2, [pc, #276]	; (8102690 <HAL_DMA_Init+0x698>)
 810257a:	4293      	cmp	r3, r2
 810257c:	d01d      	beq.n	81025ba <HAL_DMA_Init+0x5c2>
 810257e:	687b      	ldr	r3, [r7, #4]
 8102580:	681b      	ldr	r3, [r3, #0]
 8102582:	4a44      	ldr	r2, [pc, #272]	; (8102694 <HAL_DMA_Init+0x69c>)
 8102584:	4293      	cmp	r3, r2
 8102586:	d018      	beq.n	81025ba <HAL_DMA_Init+0x5c2>
 8102588:	687b      	ldr	r3, [r7, #4]
 810258a:	681b      	ldr	r3, [r3, #0]
 810258c:	4a42      	ldr	r2, [pc, #264]	; (8102698 <HAL_DMA_Init+0x6a0>)
 810258e:	4293      	cmp	r3, r2
 8102590:	d013      	beq.n	81025ba <HAL_DMA_Init+0x5c2>
 8102592:	687b      	ldr	r3, [r7, #4]
 8102594:	681b      	ldr	r3, [r3, #0]
 8102596:	4a41      	ldr	r2, [pc, #260]	; (810269c <HAL_DMA_Init+0x6a4>)
 8102598:	4293      	cmp	r3, r2
 810259a:	d00e      	beq.n	81025ba <HAL_DMA_Init+0x5c2>
 810259c:	687b      	ldr	r3, [r7, #4]
 810259e:	681b      	ldr	r3, [r3, #0]
 81025a0:	4a3f      	ldr	r2, [pc, #252]	; (81026a0 <HAL_DMA_Init+0x6a8>)
 81025a2:	4293      	cmp	r3, r2
 81025a4:	d009      	beq.n	81025ba <HAL_DMA_Init+0x5c2>
 81025a6:	687b      	ldr	r3, [r7, #4]
 81025a8:	681b      	ldr	r3, [r3, #0]
 81025aa:	4a3e      	ldr	r2, [pc, #248]	; (81026a4 <HAL_DMA_Init+0x6ac>)
 81025ac:	4293      	cmp	r3, r2
 81025ae:	d004      	beq.n	81025ba <HAL_DMA_Init+0x5c2>
 81025b0:	687b      	ldr	r3, [r7, #4]
 81025b2:	681b      	ldr	r3, [r3, #0]
 81025b4:	4a3c      	ldr	r2, [pc, #240]	; (81026a8 <HAL_DMA_Init+0x6b0>)
 81025b6:	4293      	cmp	r3, r2
 81025b8:	d101      	bne.n	81025be <HAL_DMA_Init+0x5c6>
 81025ba:	2301      	movs	r3, #1
 81025bc:	e000      	b.n	81025c0 <HAL_DMA_Init+0x5c8>
 81025be:	2300      	movs	r3, #0
 81025c0:	2b00      	cmp	r3, #0
 81025c2:	d032      	beq.n	810262a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 81025c4:	6878      	ldr	r0, [r7, #4]
 81025c6:	f001 fb0d 	bl	8103be4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 81025ca:	687b      	ldr	r3, [r7, #4]
 81025cc:	689b      	ldr	r3, [r3, #8]
 81025ce:	2b80      	cmp	r3, #128	; 0x80
 81025d0:	d102      	bne.n	81025d8 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 81025d2:	687b      	ldr	r3, [r7, #4]
 81025d4:	2200      	movs	r2, #0
 81025d6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 81025d8:	687b      	ldr	r3, [r7, #4]
 81025da:	685a      	ldr	r2, [r3, #4]
 81025dc:	687b      	ldr	r3, [r7, #4]
 81025de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81025e0:	b2d2      	uxtb	r2, r2
 81025e2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81025e4:	687b      	ldr	r3, [r7, #4]
 81025e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81025e8:	687a      	ldr	r2, [r7, #4]
 81025ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 81025ec:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 81025ee:	687b      	ldr	r3, [r7, #4]
 81025f0:	685b      	ldr	r3, [r3, #4]
 81025f2:	2b00      	cmp	r3, #0
 81025f4:	d010      	beq.n	8102618 <HAL_DMA_Init+0x620>
 81025f6:	687b      	ldr	r3, [r7, #4]
 81025f8:	685b      	ldr	r3, [r3, #4]
 81025fa:	2b08      	cmp	r3, #8
 81025fc:	d80c      	bhi.n	8102618 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 81025fe:	6878      	ldr	r0, [r7, #4]
 8102600:	f001 fb8a 	bl	8103d18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8102604:	687b      	ldr	r3, [r7, #4]
 8102606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102608:	2200      	movs	r2, #0
 810260a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 810260c:	687b      	ldr	r3, [r7, #4]
 810260e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102610:	687a      	ldr	r2, [r7, #4]
 8102612:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8102614:	605a      	str	r2, [r3, #4]
 8102616:	e008      	b.n	810262a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8102618:	687b      	ldr	r3, [r7, #4]
 810261a:	2200      	movs	r2, #0
 810261c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 810261e:	687b      	ldr	r3, [r7, #4]
 8102620:	2200      	movs	r2, #0
 8102622:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8102624:	687b      	ldr	r3, [r7, #4]
 8102626:	2200      	movs	r2, #0
 8102628:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 810262a:	687b      	ldr	r3, [r7, #4]
 810262c:	2200      	movs	r2, #0
 810262e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8102630:	687b      	ldr	r3, [r7, #4]
 8102632:	2201      	movs	r2, #1
 8102634:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8102638:	2300      	movs	r3, #0
}
 810263a:	4618      	mov	r0, r3
 810263c:	3718      	adds	r7, #24
 810263e:	46bd      	mov	sp, r7
 8102640:	bd80      	pop	{r7, pc}
 8102642:	bf00      	nop
 8102644:	a7fdabf8 	.word	0xa7fdabf8
 8102648:	cccccccd 	.word	0xcccccccd
 810264c:	40020010 	.word	0x40020010
 8102650:	40020028 	.word	0x40020028
 8102654:	40020040 	.word	0x40020040
 8102658:	40020058 	.word	0x40020058
 810265c:	40020070 	.word	0x40020070
 8102660:	40020088 	.word	0x40020088
 8102664:	400200a0 	.word	0x400200a0
 8102668:	400200b8 	.word	0x400200b8
 810266c:	40020410 	.word	0x40020410
 8102670:	40020428 	.word	0x40020428
 8102674:	40020440 	.word	0x40020440
 8102678:	40020458 	.word	0x40020458
 810267c:	40020470 	.word	0x40020470
 8102680:	40020488 	.word	0x40020488
 8102684:	400204a0 	.word	0x400204a0
 8102688:	400204b8 	.word	0x400204b8
 810268c:	58025408 	.word	0x58025408
 8102690:	5802541c 	.word	0x5802541c
 8102694:	58025430 	.word	0x58025430
 8102698:	58025444 	.word	0x58025444
 810269c:	58025458 	.word	0x58025458
 81026a0:	5802546c 	.word	0x5802546c
 81026a4:	58025480 	.word	0x58025480
 81026a8:	58025494 	.word	0x58025494

081026ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 81026ac:	b580      	push	{r7, lr}
 81026ae:	b084      	sub	sp, #16
 81026b0:	af00      	add	r7, sp, #0
 81026b2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81026b4:	687b      	ldr	r3, [r7, #4]
 81026b6:	2b00      	cmp	r3, #0
 81026b8:	d101      	bne.n	81026be <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 81026ba:	2301      	movs	r3, #1
 81026bc:	e205      	b.n	8102aca <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 81026be:	687b      	ldr	r3, [r7, #4]
 81026c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81026c4:	b2db      	uxtb	r3, r3
 81026c6:	2b02      	cmp	r3, #2
 81026c8:	d004      	beq.n	81026d4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 81026ca:	687b      	ldr	r3, [r7, #4]
 81026cc:	2280      	movs	r2, #128	; 0x80
 81026ce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 81026d0:	2301      	movs	r3, #1
 81026d2:	e1fa      	b.n	8102aca <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81026d4:	687b      	ldr	r3, [r7, #4]
 81026d6:	681b      	ldr	r3, [r3, #0]
 81026d8:	4a8c      	ldr	r2, [pc, #560]	; (810290c <HAL_DMA_Abort_IT+0x260>)
 81026da:	4293      	cmp	r3, r2
 81026dc:	d04a      	beq.n	8102774 <HAL_DMA_Abort_IT+0xc8>
 81026de:	687b      	ldr	r3, [r7, #4]
 81026e0:	681b      	ldr	r3, [r3, #0]
 81026e2:	4a8b      	ldr	r2, [pc, #556]	; (8102910 <HAL_DMA_Abort_IT+0x264>)
 81026e4:	4293      	cmp	r3, r2
 81026e6:	d045      	beq.n	8102774 <HAL_DMA_Abort_IT+0xc8>
 81026e8:	687b      	ldr	r3, [r7, #4]
 81026ea:	681b      	ldr	r3, [r3, #0]
 81026ec:	4a89      	ldr	r2, [pc, #548]	; (8102914 <HAL_DMA_Abort_IT+0x268>)
 81026ee:	4293      	cmp	r3, r2
 81026f0:	d040      	beq.n	8102774 <HAL_DMA_Abort_IT+0xc8>
 81026f2:	687b      	ldr	r3, [r7, #4]
 81026f4:	681b      	ldr	r3, [r3, #0]
 81026f6:	4a88      	ldr	r2, [pc, #544]	; (8102918 <HAL_DMA_Abort_IT+0x26c>)
 81026f8:	4293      	cmp	r3, r2
 81026fa:	d03b      	beq.n	8102774 <HAL_DMA_Abort_IT+0xc8>
 81026fc:	687b      	ldr	r3, [r7, #4]
 81026fe:	681b      	ldr	r3, [r3, #0]
 8102700:	4a86      	ldr	r2, [pc, #536]	; (810291c <HAL_DMA_Abort_IT+0x270>)
 8102702:	4293      	cmp	r3, r2
 8102704:	d036      	beq.n	8102774 <HAL_DMA_Abort_IT+0xc8>
 8102706:	687b      	ldr	r3, [r7, #4]
 8102708:	681b      	ldr	r3, [r3, #0]
 810270a:	4a85      	ldr	r2, [pc, #532]	; (8102920 <HAL_DMA_Abort_IT+0x274>)
 810270c:	4293      	cmp	r3, r2
 810270e:	d031      	beq.n	8102774 <HAL_DMA_Abort_IT+0xc8>
 8102710:	687b      	ldr	r3, [r7, #4]
 8102712:	681b      	ldr	r3, [r3, #0]
 8102714:	4a83      	ldr	r2, [pc, #524]	; (8102924 <HAL_DMA_Abort_IT+0x278>)
 8102716:	4293      	cmp	r3, r2
 8102718:	d02c      	beq.n	8102774 <HAL_DMA_Abort_IT+0xc8>
 810271a:	687b      	ldr	r3, [r7, #4]
 810271c:	681b      	ldr	r3, [r3, #0]
 810271e:	4a82      	ldr	r2, [pc, #520]	; (8102928 <HAL_DMA_Abort_IT+0x27c>)
 8102720:	4293      	cmp	r3, r2
 8102722:	d027      	beq.n	8102774 <HAL_DMA_Abort_IT+0xc8>
 8102724:	687b      	ldr	r3, [r7, #4]
 8102726:	681b      	ldr	r3, [r3, #0]
 8102728:	4a80      	ldr	r2, [pc, #512]	; (810292c <HAL_DMA_Abort_IT+0x280>)
 810272a:	4293      	cmp	r3, r2
 810272c:	d022      	beq.n	8102774 <HAL_DMA_Abort_IT+0xc8>
 810272e:	687b      	ldr	r3, [r7, #4]
 8102730:	681b      	ldr	r3, [r3, #0]
 8102732:	4a7f      	ldr	r2, [pc, #508]	; (8102930 <HAL_DMA_Abort_IT+0x284>)
 8102734:	4293      	cmp	r3, r2
 8102736:	d01d      	beq.n	8102774 <HAL_DMA_Abort_IT+0xc8>
 8102738:	687b      	ldr	r3, [r7, #4]
 810273a:	681b      	ldr	r3, [r3, #0]
 810273c:	4a7d      	ldr	r2, [pc, #500]	; (8102934 <HAL_DMA_Abort_IT+0x288>)
 810273e:	4293      	cmp	r3, r2
 8102740:	d018      	beq.n	8102774 <HAL_DMA_Abort_IT+0xc8>
 8102742:	687b      	ldr	r3, [r7, #4]
 8102744:	681b      	ldr	r3, [r3, #0]
 8102746:	4a7c      	ldr	r2, [pc, #496]	; (8102938 <HAL_DMA_Abort_IT+0x28c>)
 8102748:	4293      	cmp	r3, r2
 810274a:	d013      	beq.n	8102774 <HAL_DMA_Abort_IT+0xc8>
 810274c:	687b      	ldr	r3, [r7, #4]
 810274e:	681b      	ldr	r3, [r3, #0]
 8102750:	4a7a      	ldr	r2, [pc, #488]	; (810293c <HAL_DMA_Abort_IT+0x290>)
 8102752:	4293      	cmp	r3, r2
 8102754:	d00e      	beq.n	8102774 <HAL_DMA_Abort_IT+0xc8>
 8102756:	687b      	ldr	r3, [r7, #4]
 8102758:	681b      	ldr	r3, [r3, #0]
 810275a:	4a79      	ldr	r2, [pc, #484]	; (8102940 <HAL_DMA_Abort_IT+0x294>)
 810275c:	4293      	cmp	r3, r2
 810275e:	d009      	beq.n	8102774 <HAL_DMA_Abort_IT+0xc8>
 8102760:	687b      	ldr	r3, [r7, #4]
 8102762:	681b      	ldr	r3, [r3, #0]
 8102764:	4a77      	ldr	r2, [pc, #476]	; (8102944 <HAL_DMA_Abort_IT+0x298>)
 8102766:	4293      	cmp	r3, r2
 8102768:	d004      	beq.n	8102774 <HAL_DMA_Abort_IT+0xc8>
 810276a:	687b      	ldr	r3, [r7, #4]
 810276c:	681b      	ldr	r3, [r3, #0]
 810276e:	4a76      	ldr	r2, [pc, #472]	; (8102948 <HAL_DMA_Abort_IT+0x29c>)
 8102770:	4293      	cmp	r3, r2
 8102772:	d101      	bne.n	8102778 <HAL_DMA_Abort_IT+0xcc>
 8102774:	2301      	movs	r3, #1
 8102776:	e000      	b.n	810277a <HAL_DMA_Abort_IT+0xce>
 8102778:	2300      	movs	r3, #0
 810277a:	2b00      	cmp	r3, #0
 810277c:	d065      	beq.n	810284a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 810277e:	687b      	ldr	r3, [r7, #4]
 8102780:	2204      	movs	r2, #4
 8102782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8102786:	687b      	ldr	r3, [r7, #4]
 8102788:	681b      	ldr	r3, [r3, #0]
 810278a:	4a60      	ldr	r2, [pc, #384]	; (810290c <HAL_DMA_Abort_IT+0x260>)
 810278c:	4293      	cmp	r3, r2
 810278e:	d04a      	beq.n	8102826 <HAL_DMA_Abort_IT+0x17a>
 8102790:	687b      	ldr	r3, [r7, #4]
 8102792:	681b      	ldr	r3, [r3, #0]
 8102794:	4a5e      	ldr	r2, [pc, #376]	; (8102910 <HAL_DMA_Abort_IT+0x264>)
 8102796:	4293      	cmp	r3, r2
 8102798:	d045      	beq.n	8102826 <HAL_DMA_Abort_IT+0x17a>
 810279a:	687b      	ldr	r3, [r7, #4]
 810279c:	681b      	ldr	r3, [r3, #0]
 810279e:	4a5d      	ldr	r2, [pc, #372]	; (8102914 <HAL_DMA_Abort_IT+0x268>)
 81027a0:	4293      	cmp	r3, r2
 81027a2:	d040      	beq.n	8102826 <HAL_DMA_Abort_IT+0x17a>
 81027a4:	687b      	ldr	r3, [r7, #4]
 81027a6:	681b      	ldr	r3, [r3, #0]
 81027a8:	4a5b      	ldr	r2, [pc, #364]	; (8102918 <HAL_DMA_Abort_IT+0x26c>)
 81027aa:	4293      	cmp	r3, r2
 81027ac:	d03b      	beq.n	8102826 <HAL_DMA_Abort_IT+0x17a>
 81027ae:	687b      	ldr	r3, [r7, #4]
 81027b0:	681b      	ldr	r3, [r3, #0]
 81027b2:	4a5a      	ldr	r2, [pc, #360]	; (810291c <HAL_DMA_Abort_IT+0x270>)
 81027b4:	4293      	cmp	r3, r2
 81027b6:	d036      	beq.n	8102826 <HAL_DMA_Abort_IT+0x17a>
 81027b8:	687b      	ldr	r3, [r7, #4]
 81027ba:	681b      	ldr	r3, [r3, #0]
 81027bc:	4a58      	ldr	r2, [pc, #352]	; (8102920 <HAL_DMA_Abort_IT+0x274>)
 81027be:	4293      	cmp	r3, r2
 81027c0:	d031      	beq.n	8102826 <HAL_DMA_Abort_IT+0x17a>
 81027c2:	687b      	ldr	r3, [r7, #4]
 81027c4:	681b      	ldr	r3, [r3, #0]
 81027c6:	4a57      	ldr	r2, [pc, #348]	; (8102924 <HAL_DMA_Abort_IT+0x278>)
 81027c8:	4293      	cmp	r3, r2
 81027ca:	d02c      	beq.n	8102826 <HAL_DMA_Abort_IT+0x17a>
 81027cc:	687b      	ldr	r3, [r7, #4]
 81027ce:	681b      	ldr	r3, [r3, #0]
 81027d0:	4a55      	ldr	r2, [pc, #340]	; (8102928 <HAL_DMA_Abort_IT+0x27c>)
 81027d2:	4293      	cmp	r3, r2
 81027d4:	d027      	beq.n	8102826 <HAL_DMA_Abort_IT+0x17a>
 81027d6:	687b      	ldr	r3, [r7, #4]
 81027d8:	681b      	ldr	r3, [r3, #0]
 81027da:	4a54      	ldr	r2, [pc, #336]	; (810292c <HAL_DMA_Abort_IT+0x280>)
 81027dc:	4293      	cmp	r3, r2
 81027de:	d022      	beq.n	8102826 <HAL_DMA_Abort_IT+0x17a>
 81027e0:	687b      	ldr	r3, [r7, #4]
 81027e2:	681b      	ldr	r3, [r3, #0]
 81027e4:	4a52      	ldr	r2, [pc, #328]	; (8102930 <HAL_DMA_Abort_IT+0x284>)
 81027e6:	4293      	cmp	r3, r2
 81027e8:	d01d      	beq.n	8102826 <HAL_DMA_Abort_IT+0x17a>
 81027ea:	687b      	ldr	r3, [r7, #4]
 81027ec:	681b      	ldr	r3, [r3, #0]
 81027ee:	4a51      	ldr	r2, [pc, #324]	; (8102934 <HAL_DMA_Abort_IT+0x288>)
 81027f0:	4293      	cmp	r3, r2
 81027f2:	d018      	beq.n	8102826 <HAL_DMA_Abort_IT+0x17a>
 81027f4:	687b      	ldr	r3, [r7, #4]
 81027f6:	681b      	ldr	r3, [r3, #0]
 81027f8:	4a4f      	ldr	r2, [pc, #316]	; (8102938 <HAL_DMA_Abort_IT+0x28c>)
 81027fa:	4293      	cmp	r3, r2
 81027fc:	d013      	beq.n	8102826 <HAL_DMA_Abort_IT+0x17a>
 81027fe:	687b      	ldr	r3, [r7, #4]
 8102800:	681b      	ldr	r3, [r3, #0]
 8102802:	4a4e      	ldr	r2, [pc, #312]	; (810293c <HAL_DMA_Abort_IT+0x290>)
 8102804:	4293      	cmp	r3, r2
 8102806:	d00e      	beq.n	8102826 <HAL_DMA_Abort_IT+0x17a>
 8102808:	687b      	ldr	r3, [r7, #4]
 810280a:	681b      	ldr	r3, [r3, #0]
 810280c:	4a4c      	ldr	r2, [pc, #304]	; (8102940 <HAL_DMA_Abort_IT+0x294>)
 810280e:	4293      	cmp	r3, r2
 8102810:	d009      	beq.n	8102826 <HAL_DMA_Abort_IT+0x17a>
 8102812:	687b      	ldr	r3, [r7, #4]
 8102814:	681b      	ldr	r3, [r3, #0]
 8102816:	4a4b      	ldr	r2, [pc, #300]	; (8102944 <HAL_DMA_Abort_IT+0x298>)
 8102818:	4293      	cmp	r3, r2
 810281a:	d004      	beq.n	8102826 <HAL_DMA_Abort_IT+0x17a>
 810281c:	687b      	ldr	r3, [r7, #4]
 810281e:	681b      	ldr	r3, [r3, #0]
 8102820:	4a49      	ldr	r2, [pc, #292]	; (8102948 <HAL_DMA_Abort_IT+0x29c>)
 8102822:	4293      	cmp	r3, r2
 8102824:	d108      	bne.n	8102838 <HAL_DMA_Abort_IT+0x18c>
 8102826:	687b      	ldr	r3, [r7, #4]
 8102828:	681b      	ldr	r3, [r3, #0]
 810282a:	681a      	ldr	r2, [r3, #0]
 810282c:	687b      	ldr	r3, [r7, #4]
 810282e:	681b      	ldr	r3, [r3, #0]
 8102830:	f022 0201 	bic.w	r2, r2, #1
 8102834:	601a      	str	r2, [r3, #0]
 8102836:	e147      	b.n	8102ac8 <HAL_DMA_Abort_IT+0x41c>
 8102838:	687b      	ldr	r3, [r7, #4]
 810283a:	681b      	ldr	r3, [r3, #0]
 810283c:	681a      	ldr	r2, [r3, #0]
 810283e:	687b      	ldr	r3, [r7, #4]
 8102840:	681b      	ldr	r3, [r3, #0]
 8102842:	f022 0201 	bic.w	r2, r2, #1
 8102846:	601a      	str	r2, [r3, #0]
 8102848:	e13e      	b.n	8102ac8 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 810284a:	687b      	ldr	r3, [r7, #4]
 810284c:	681b      	ldr	r3, [r3, #0]
 810284e:	681a      	ldr	r2, [r3, #0]
 8102850:	687b      	ldr	r3, [r7, #4]
 8102852:	681b      	ldr	r3, [r3, #0]
 8102854:	f022 020e 	bic.w	r2, r2, #14
 8102858:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 810285a:	687b      	ldr	r3, [r7, #4]
 810285c:	681b      	ldr	r3, [r3, #0]
 810285e:	4a2b      	ldr	r2, [pc, #172]	; (810290c <HAL_DMA_Abort_IT+0x260>)
 8102860:	4293      	cmp	r3, r2
 8102862:	d04a      	beq.n	81028fa <HAL_DMA_Abort_IT+0x24e>
 8102864:	687b      	ldr	r3, [r7, #4]
 8102866:	681b      	ldr	r3, [r3, #0]
 8102868:	4a29      	ldr	r2, [pc, #164]	; (8102910 <HAL_DMA_Abort_IT+0x264>)
 810286a:	4293      	cmp	r3, r2
 810286c:	d045      	beq.n	81028fa <HAL_DMA_Abort_IT+0x24e>
 810286e:	687b      	ldr	r3, [r7, #4]
 8102870:	681b      	ldr	r3, [r3, #0]
 8102872:	4a28      	ldr	r2, [pc, #160]	; (8102914 <HAL_DMA_Abort_IT+0x268>)
 8102874:	4293      	cmp	r3, r2
 8102876:	d040      	beq.n	81028fa <HAL_DMA_Abort_IT+0x24e>
 8102878:	687b      	ldr	r3, [r7, #4]
 810287a:	681b      	ldr	r3, [r3, #0]
 810287c:	4a26      	ldr	r2, [pc, #152]	; (8102918 <HAL_DMA_Abort_IT+0x26c>)
 810287e:	4293      	cmp	r3, r2
 8102880:	d03b      	beq.n	81028fa <HAL_DMA_Abort_IT+0x24e>
 8102882:	687b      	ldr	r3, [r7, #4]
 8102884:	681b      	ldr	r3, [r3, #0]
 8102886:	4a25      	ldr	r2, [pc, #148]	; (810291c <HAL_DMA_Abort_IT+0x270>)
 8102888:	4293      	cmp	r3, r2
 810288a:	d036      	beq.n	81028fa <HAL_DMA_Abort_IT+0x24e>
 810288c:	687b      	ldr	r3, [r7, #4]
 810288e:	681b      	ldr	r3, [r3, #0]
 8102890:	4a23      	ldr	r2, [pc, #140]	; (8102920 <HAL_DMA_Abort_IT+0x274>)
 8102892:	4293      	cmp	r3, r2
 8102894:	d031      	beq.n	81028fa <HAL_DMA_Abort_IT+0x24e>
 8102896:	687b      	ldr	r3, [r7, #4]
 8102898:	681b      	ldr	r3, [r3, #0]
 810289a:	4a22      	ldr	r2, [pc, #136]	; (8102924 <HAL_DMA_Abort_IT+0x278>)
 810289c:	4293      	cmp	r3, r2
 810289e:	d02c      	beq.n	81028fa <HAL_DMA_Abort_IT+0x24e>
 81028a0:	687b      	ldr	r3, [r7, #4]
 81028a2:	681b      	ldr	r3, [r3, #0]
 81028a4:	4a20      	ldr	r2, [pc, #128]	; (8102928 <HAL_DMA_Abort_IT+0x27c>)
 81028a6:	4293      	cmp	r3, r2
 81028a8:	d027      	beq.n	81028fa <HAL_DMA_Abort_IT+0x24e>
 81028aa:	687b      	ldr	r3, [r7, #4]
 81028ac:	681b      	ldr	r3, [r3, #0]
 81028ae:	4a1f      	ldr	r2, [pc, #124]	; (810292c <HAL_DMA_Abort_IT+0x280>)
 81028b0:	4293      	cmp	r3, r2
 81028b2:	d022      	beq.n	81028fa <HAL_DMA_Abort_IT+0x24e>
 81028b4:	687b      	ldr	r3, [r7, #4]
 81028b6:	681b      	ldr	r3, [r3, #0]
 81028b8:	4a1d      	ldr	r2, [pc, #116]	; (8102930 <HAL_DMA_Abort_IT+0x284>)
 81028ba:	4293      	cmp	r3, r2
 81028bc:	d01d      	beq.n	81028fa <HAL_DMA_Abort_IT+0x24e>
 81028be:	687b      	ldr	r3, [r7, #4]
 81028c0:	681b      	ldr	r3, [r3, #0]
 81028c2:	4a1c      	ldr	r2, [pc, #112]	; (8102934 <HAL_DMA_Abort_IT+0x288>)
 81028c4:	4293      	cmp	r3, r2
 81028c6:	d018      	beq.n	81028fa <HAL_DMA_Abort_IT+0x24e>
 81028c8:	687b      	ldr	r3, [r7, #4]
 81028ca:	681b      	ldr	r3, [r3, #0]
 81028cc:	4a1a      	ldr	r2, [pc, #104]	; (8102938 <HAL_DMA_Abort_IT+0x28c>)
 81028ce:	4293      	cmp	r3, r2
 81028d0:	d013      	beq.n	81028fa <HAL_DMA_Abort_IT+0x24e>
 81028d2:	687b      	ldr	r3, [r7, #4]
 81028d4:	681b      	ldr	r3, [r3, #0]
 81028d6:	4a19      	ldr	r2, [pc, #100]	; (810293c <HAL_DMA_Abort_IT+0x290>)
 81028d8:	4293      	cmp	r3, r2
 81028da:	d00e      	beq.n	81028fa <HAL_DMA_Abort_IT+0x24e>
 81028dc:	687b      	ldr	r3, [r7, #4]
 81028de:	681b      	ldr	r3, [r3, #0]
 81028e0:	4a17      	ldr	r2, [pc, #92]	; (8102940 <HAL_DMA_Abort_IT+0x294>)
 81028e2:	4293      	cmp	r3, r2
 81028e4:	d009      	beq.n	81028fa <HAL_DMA_Abort_IT+0x24e>
 81028e6:	687b      	ldr	r3, [r7, #4]
 81028e8:	681b      	ldr	r3, [r3, #0]
 81028ea:	4a16      	ldr	r2, [pc, #88]	; (8102944 <HAL_DMA_Abort_IT+0x298>)
 81028ec:	4293      	cmp	r3, r2
 81028ee:	d004      	beq.n	81028fa <HAL_DMA_Abort_IT+0x24e>
 81028f0:	687b      	ldr	r3, [r7, #4]
 81028f2:	681b      	ldr	r3, [r3, #0]
 81028f4:	4a14      	ldr	r2, [pc, #80]	; (8102948 <HAL_DMA_Abort_IT+0x29c>)
 81028f6:	4293      	cmp	r3, r2
 81028f8:	d128      	bne.n	810294c <HAL_DMA_Abort_IT+0x2a0>
 81028fa:	687b      	ldr	r3, [r7, #4]
 81028fc:	681b      	ldr	r3, [r3, #0]
 81028fe:	681a      	ldr	r2, [r3, #0]
 8102900:	687b      	ldr	r3, [r7, #4]
 8102902:	681b      	ldr	r3, [r3, #0]
 8102904:	f022 0201 	bic.w	r2, r2, #1
 8102908:	601a      	str	r2, [r3, #0]
 810290a:	e027      	b.n	810295c <HAL_DMA_Abort_IT+0x2b0>
 810290c:	40020010 	.word	0x40020010
 8102910:	40020028 	.word	0x40020028
 8102914:	40020040 	.word	0x40020040
 8102918:	40020058 	.word	0x40020058
 810291c:	40020070 	.word	0x40020070
 8102920:	40020088 	.word	0x40020088
 8102924:	400200a0 	.word	0x400200a0
 8102928:	400200b8 	.word	0x400200b8
 810292c:	40020410 	.word	0x40020410
 8102930:	40020428 	.word	0x40020428
 8102934:	40020440 	.word	0x40020440
 8102938:	40020458 	.word	0x40020458
 810293c:	40020470 	.word	0x40020470
 8102940:	40020488 	.word	0x40020488
 8102944:	400204a0 	.word	0x400204a0
 8102948:	400204b8 	.word	0x400204b8
 810294c:	687b      	ldr	r3, [r7, #4]
 810294e:	681b      	ldr	r3, [r3, #0]
 8102950:	681a      	ldr	r2, [r3, #0]
 8102952:	687b      	ldr	r3, [r7, #4]
 8102954:	681b      	ldr	r3, [r3, #0]
 8102956:	f022 0201 	bic.w	r2, r2, #1
 810295a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810295c:	687b      	ldr	r3, [r7, #4]
 810295e:	681b      	ldr	r3, [r3, #0]
 8102960:	4a5c      	ldr	r2, [pc, #368]	; (8102ad4 <HAL_DMA_Abort_IT+0x428>)
 8102962:	4293      	cmp	r3, r2
 8102964:	d072      	beq.n	8102a4c <HAL_DMA_Abort_IT+0x3a0>
 8102966:	687b      	ldr	r3, [r7, #4]
 8102968:	681b      	ldr	r3, [r3, #0]
 810296a:	4a5b      	ldr	r2, [pc, #364]	; (8102ad8 <HAL_DMA_Abort_IT+0x42c>)
 810296c:	4293      	cmp	r3, r2
 810296e:	d06d      	beq.n	8102a4c <HAL_DMA_Abort_IT+0x3a0>
 8102970:	687b      	ldr	r3, [r7, #4]
 8102972:	681b      	ldr	r3, [r3, #0]
 8102974:	4a59      	ldr	r2, [pc, #356]	; (8102adc <HAL_DMA_Abort_IT+0x430>)
 8102976:	4293      	cmp	r3, r2
 8102978:	d068      	beq.n	8102a4c <HAL_DMA_Abort_IT+0x3a0>
 810297a:	687b      	ldr	r3, [r7, #4]
 810297c:	681b      	ldr	r3, [r3, #0]
 810297e:	4a58      	ldr	r2, [pc, #352]	; (8102ae0 <HAL_DMA_Abort_IT+0x434>)
 8102980:	4293      	cmp	r3, r2
 8102982:	d063      	beq.n	8102a4c <HAL_DMA_Abort_IT+0x3a0>
 8102984:	687b      	ldr	r3, [r7, #4]
 8102986:	681b      	ldr	r3, [r3, #0]
 8102988:	4a56      	ldr	r2, [pc, #344]	; (8102ae4 <HAL_DMA_Abort_IT+0x438>)
 810298a:	4293      	cmp	r3, r2
 810298c:	d05e      	beq.n	8102a4c <HAL_DMA_Abort_IT+0x3a0>
 810298e:	687b      	ldr	r3, [r7, #4]
 8102990:	681b      	ldr	r3, [r3, #0]
 8102992:	4a55      	ldr	r2, [pc, #340]	; (8102ae8 <HAL_DMA_Abort_IT+0x43c>)
 8102994:	4293      	cmp	r3, r2
 8102996:	d059      	beq.n	8102a4c <HAL_DMA_Abort_IT+0x3a0>
 8102998:	687b      	ldr	r3, [r7, #4]
 810299a:	681b      	ldr	r3, [r3, #0]
 810299c:	4a53      	ldr	r2, [pc, #332]	; (8102aec <HAL_DMA_Abort_IT+0x440>)
 810299e:	4293      	cmp	r3, r2
 81029a0:	d054      	beq.n	8102a4c <HAL_DMA_Abort_IT+0x3a0>
 81029a2:	687b      	ldr	r3, [r7, #4]
 81029a4:	681b      	ldr	r3, [r3, #0]
 81029a6:	4a52      	ldr	r2, [pc, #328]	; (8102af0 <HAL_DMA_Abort_IT+0x444>)
 81029a8:	4293      	cmp	r3, r2
 81029aa:	d04f      	beq.n	8102a4c <HAL_DMA_Abort_IT+0x3a0>
 81029ac:	687b      	ldr	r3, [r7, #4]
 81029ae:	681b      	ldr	r3, [r3, #0]
 81029b0:	4a50      	ldr	r2, [pc, #320]	; (8102af4 <HAL_DMA_Abort_IT+0x448>)
 81029b2:	4293      	cmp	r3, r2
 81029b4:	d04a      	beq.n	8102a4c <HAL_DMA_Abort_IT+0x3a0>
 81029b6:	687b      	ldr	r3, [r7, #4]
 81029b8:	681b      	ldr	r3, [r3, #0]
 81029ba:	4a4f      	ldr	r2, [pc, #316]	; (8102af8 <HAL_DMA_Abort_IT+0x44c>)
 81029bc:	4293      	cmp	r3, r2
 81029be:	d045      	beq.n	8102a4c <HAL_DMA_Abort_IT+0x3a0>
 81029c0:	687b      	ldr	r3, [r7, #4]
 81029c2:	681b      	ldr	r3, [r3, #0]
 81029c4:	4a4d      	ldr	r2, [pc, #308]	; (8102afc <HAL_DMA_Abort_IT+0x450>)
 81029c6:	4293      	cmp	r3, r2
 81029c8:	d040      	beq.n	8102a4c <HAL_DMA_Abort_IT+0x3a0>
 81029ca:	687b      	ldr	r3, [r7, #4]
 81029cc:	681b      	ldr	r3, [r3, #0]
 81029ce:	4a4c      	ldr	r2, [pc, #304]	; (8102b00 <HAL_DMA_Abort_IT+0x454>)
 81029d0:	4293      	cmp	r3, r2
 81029d2:	d03b      	beq.n	8102a4c <HAL_DMA_Abort_IT+0x3a0>
 81029d4:	687b      	ldr	r3, [r7, #4]
 81029d6:	681b      	ldr	r3, [r3, #0]
 81029d8:	4a4a      	ldr	r2, [pc, #296]	; (8102b04 <HAL_DMA_Abort_IT+0x458>)
 81029da:	4293      	cmp	r3, r2
 81029dc:	d036      	beq.n	8102a4c <HAL_DMA_Abort_IT+0x3a0>
 81029de:	687b      	ldr	r3, [r7, #4]
 81029e0:	681b      	ldr	r3, [r3, #0]
 81029e2:	4a49      	ldr	r2, [pc, #292]	; (8102b08 <HAL_DMA_Abort_IT+0x45c>)
 81029e4:	4293      	cmp	r3, r2
 81029e6:	d031      	beq.n	8102a4c <HAL_DMA_Abort_IT+0x3a0>
 81029e8:	687b      	ldr	r3, [r7, #4]
 81029ea:	681b      	ldr	r3, [r3, #0]
 81029ec:	4a47      	ldr	r2, [pc, #284]	; (8102b0c <HAL_DMA_Abort_IT+0x460>)
 81029ee:	4293      	cmp	r3, r2
 81029f0:	d02c      	beq.n	8102a4c <HAL_DMA_Abort_IT+0x3a0>
 81029f2:	687b      	ldr	r3, [r7, #4]
 81029f4:	681b      	ldr	r3, [r3, #0]
 81029f6:	4a46      	ldr	r2, [pc, #280]	; (8102b10 <HAL_DMA_Abort_IT+0x464>)
 81029f8:	4293      	cmp	r3, r2
 81029fa:	d027      	beq.n	8102a4c <HAL_DMA_Abort_IT+0x3a0>
 81029fc:	687b      	ldr	r3, [r7, #4]
 81029fe:	681b      	ldr	r3, [r3, #0]
 8102a00:	4a44      	ldr	r2, [pc, #272]	; (8102b14 <HAL_DMA_Abort_IT+0x468>)
 8102a02:	4293      	cmp	r3, r2
 8102a04:	d022      	beq.n	8102a4c <HAL_DMA_Abort_IT+0x3a0>
 8102a06:	687b      	ldr	r3, [r7, #4]
 8102a08:	681b      	ldr	r3, [r3, #0]
 8102a0a:	4a43      	ldr	r2, [pc, #268]	; (8102b18 <HAL_DMA_Abort_IT+0x46c>)
 8102a0c:	4293      	cmp	r3, r2
 8102a0e:	d01d      	beq.n	8102a4c <HAL_DMA_Abort_IT+0x3a0>
 8102a10:	687b      	ldr	r3, [r7, #4]
 8102a12:	681b      	ldr	r3, [r3, #0]
 8102a14:	4a41      	ldr	r2, [pc, #260]	; (8102b1c <HAL_DMA_Abort_IT+0x470>)
 8102a16:	4293      	cmp	r3, r2
 8102a18:	d018      	beq.n	8102a4c <HAL_DMA_Abort_IT+0x3a0>
 8102a1a:	687b      	ldr	r3, [r7, #4]
 8102a1c:	681b      	ldr	r3, [r3, #0]
 8102a1e:	4a40      	ldr	r2, [pc, #256]	; (8102b20 <HAL_DMA_Abort_IT+0x474>)
 8102a20:	4293      	cmp	r3, r2
 8102a22:	d013      	beq.n	8102a4c <HAL_DMA_Abort_IT+0x3a0>
 8102a24:	687b      	ldr	r3, [r7, #4]
 8102a26:	681b      	ldr	r3, [r3, #0]
 8102a28:	4a3e      	ldr	r2, [pc, #248]	; (8102b24 <HAL_DMA_Abort_IT+0x478>)
 8102a2a:	4293      	cmp	r3, r2
 8102a2c:	d00e      	beq.n	8102a4c <HAL_DMA_Abort_IT+0x3a0>
 8102a2e:	687b      	ldr	r3, [r7, #4]
 8102a30:	681b      	ldr	r3, [r3, #0]
 8102a32:	4a3d      	ldr	r2, [pc, #244]	; (8102b28 <HAL_DMA_Abort_IT+0x47c>)
 8102a34:	4293      	cmp	r3, r2
 8102a36:	d009      	beq.n	8102a4c <HAL_DMA_Abort_IT+0x3a0>
 8102a38:	687b      	ldr	r3, [r7, #4]
 8102a3a:	681b      	ldr	r3, [r3, #0]
 8102a3c:	4a3b      	ldr	r2, [pc, #236]	; (8102b2c <HAL_DMA_Abort_IT+0x480>)
 8102a3e:	4293      	cmp	r3, r2
 8102a40:	d004      	beq.n	8102a4c <HAL_DMA_Abort_IT+0x3a0>
 8102a42:	687b      	ldr	r3, [r7, #4]
 8102a44:	681b      	ldr	r3, [r3, #0]
 8102a46:	4a3a      	ldr	r2, [pc, #232]	; (8102b30 <HAL_DMA_Abort_IT+0x484>)
 8102a48:	4293      	cmp	r3, r2
 8102a4a:	d101      	bne.n	8102a50 <HAL_DMA_Abort_IT+0x3a4>
 8102a4c:	2301      	movs	r3, #1
 8102a4e:	e000      	b.n	8102a52 <HAL_DMA_Abort_IT+0x3a6>
 8102a50:	2300      	movs	r3, #0
 8102a52:	2b00      	cmp	r3, #0
 8102a54:	d028      	beq.n	8102aa8 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8102a56:	687b      	ldr	r3, [r7, #4]
 8102a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102a5a:	681a      	ldr	r2, [r3, #0]
 8102a5c:	687b      	ldr	r3, [r7, #4]
 8102a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102a60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8102a64:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8102a66:	687b      	ldr	r3, [r7, #4]
 8102a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102a6a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8102a6c:	687b      	ldr	r3, [r7, #4]
 8102a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102a70:	f003 031f 	and.w	r3, r3, #31
 8102a74:	2201      	movs	r2, #1
 8102a76:	409a      	lsls	r2, r3
 8102a78:	68fb      	ldr	r3, [r7, #12]
 8102a7a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8102a7c:	687b      	ldr	r3, [r7, #4]
 8102a7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102a80:	687a      	ldr	r2, [r7, #4]
 8102a82:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8102a84:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8102a86:	687b      	ldr	r3, [r7, #4]
 8102a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102a8a:	2b00      	cmp	r3, #0
 8102a8c:	d00c      	beq.n	8102aa8 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8102a8e:	687b      	ldr	r3, [r7, #4]
 8102a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102a92:	681a      	ldr	r2, [r3, #0]
 8102a94:	687b      	ldr	r3, [r7, #4]
 8102a96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102a98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8102a9c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8102a9e:	687b      	ldr	r3, [r7, #4]
 8102aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102aa2:	687a      	ldr	r2, [r7, #4]
 8102aa4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8102aa6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8102aa8:	687b      	ldr	r3, [r7, #4]
 8102aaa:	2200      	movs	r2, #0
 8102aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8102ab0:	687b      	ldr	r3, [r7, #4]
 8102ab2:	2201      	movs	r2, #1
 8102ab4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8102ab8:	687b      	ldr	r3, [r7, #4]
 8102aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102abc:	2b00      	cmp	r3, #0
 8102abe:	d003      	beq.n	8102ac8 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8102ac0:	687b      	ldr	r3, [r7, #4]
 8102ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102ac4:	6878      	ldr	r0, [r7, #4]
 8102ac6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8102ac8:	2300      	movs	r3, #0
}
 8102aca:	4618      	mov	r0, r3
 8102acc:	3710      	adds	r7, #16
 8102ace:	46bd      	mov	sp, r7
 8102ad0:	bd80      	pop	{r7, pc}
 8102ad2:	bf00      	nop
 8102ad4:	40020010 	.word	0x40020010
 8102ad8:	40020028 	.word	0x40020028
 8102adc:	40020040 	.word	0x40020040
 8102ae0:	40020058 	.word	0x40020058
 8102ae4:	40020070 	.word	0x40020070
 8102ae8:	40020088 	.word	0x40020088
 8102aec:	400200a0 	.word	0x400200a0
 8102af0:	400200b8 	.word	0x400200b8
 8102af4:	40020410 	.word	0x40020410
 8102af8:	40020428 	.word	0x40020428
 8102afc:	40020440 	.word	0x40020440
 8102b00:	40020458 	.word	0x40020458
 8102b04:	40020470 	.word	0x40020470
 8102b08:	40020488 	.word	0x40020488
 8102b0c:	400204a0 	.word	0x400204a0
 8102b10:	400204b8 	.word	0x400204b8
 8102b14:	58025408 	.word	0x58025408
 8102b18:	5802541c 	.word	0x5802541c
 8102b1c:	58025430 	.word	0x58025430
 8102b20:	58025444 	.word	0x58025444
 8102b24:	58025458 	.word	0x58025458
 8102b28:	5802546c 	.word	0x5802546c
 8102b2c:	58025480 	.word	0x58025480
 8102b30:	58025494 	.word	0x58025494

08102b34 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8102b34:	b580      	push	{r7, lr}
 8102b36:	b08a      	sub	sp, #40	; 0x28
 8102b38:	af00      	add	r7, sp, #0
 8102b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8102b3c:	2300      	movs	r3, #0
 8102b3e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8102b40:	4b67      	ldr	r3, [pc, #412]	; (8102ce0 <HAL_DMA_IRQHandler+0x1ac>)
 8102b42:	681b      	ldr	r3, [r3, #0]
 8102b44:	4a67      	ldr	r2, [pc, #412]	; (8102ce4 <HAL_DMA_IRQHandler+0x1b0>)
 8102b46:	fba2 2303 	umull	r2, r3, r2, r3
 8102b4a:	0a9b      	lsrs	r3, r3, #10
 8102b4c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8102b4e:	687b      	ldr	r3, [r7, #4]
 8102b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102b52:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8102b54:	687b      	ldr	r3, [r7, #4]
 8102b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102b58:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8102b5a:	6a3b      	ldr	r3, [r7, #32]
 8102b5c:	681b      	ldr	r3, [r3, #0]
 8102b5e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8102b60:	69fb      	ldr	r3, [r7, #28]
 8102b62:	681b      	ldr	r3, [r3, #0]
 8102b64:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8102b66:	687b      	ldr	r3, [r7, #4]
 8102b68:	681b      	ldr	r3, [r3, #0]
 8102b6a:	4a5f      	ldr	r2, [pc, #380]	; (8102ce8 <HAL_DMA_IRQHandler+0x1b4>)
 8102b6c:	4293      	cmp	r3, r2
 8102b6e:	d04a      	beq.n	8102c06 <HAL_DMA_IRQHandler+0xd2>
 8102b70:	687b      	ldr	r3, [r7, #4]
 8102b72:	681b      	ldr	r3, [r3, #0]
 8102b74:	4a5d      	ldr	r2, [pc, #372]	; (8102cec <HAL_DMA_IRQHandler+0x1b8>)
 8102b76:	4293      	cmp	r3, r2
 8102b78:	d045      	beq.n	8102c06 <HAL_DMA_IRQHandler+0xd2>
 8102b7a:	687b      	ldr	r3, [r7, #4]
 8102b7c:	681b      	ldr	r3, [r3, #0]
 8102b7e:	4a5c      	ldr	r2, [pc, #368]	; (8102cf0 <HAL_DMA_IRQHandler+0x1bc>)
 8102b80:	4293      	cmp	r3, r2
 8102b82:	d040      	beq.n	8102c06 <HAL_DMA_IRQHandler+0xd2>
 8102b84:	687b      	ldr	r3, [r7, #4]
 8102b86:	681b      	ldr	r3, [r3, #0]
 8102b88:	4a5a      	ldr	r2, [pc, #360]	; (8102cf4 <HAL_DMA_IRQHandler+0x1c0>)
 8102b8a:	4293      	cmp	r3, r2
 8102b8c:	d03b      	beq.n	8102c06 <HAL_DMA_IRQHandler+0xd2>
 8102b8e:	687b      	ldr	r3, [r7, #4]
 8102b90:	681b      	ldr	r3, [r3, #0]
 8102b92:	4a59      	ldr	r2, [pc, #356]	; (8102cf8 <HAL_DMA_IRQHandler+0x1c4>)
 8102b94:	4293      	cmp	r3, r2
 8102b96:	d036      	beq.n	8102c06 <HAL_DMA_IRQHandler+0xd2>
 8102b98:	687b      	ldr	r3, [r7, #4]
 8102b9a:	681b      	ldr	r3, [r3, #0]
 8102b9c:	4a57      	ldr	r2, [pc, #348]	; (8102cfc <HAL_DMA_IRQHandler+0x1c8>)
 8102b9e:	4293      	cmp	r3, r2
 8102ba0:	d031      	beq.n	8102c06 <HAL_DMA_IRQHandler+0xd2>
 8102ba2:	687b      	ldr	r3, [r7, #4]
 8102ba4:	681b      	ldr	r3, [r3, #0]
 8102ba6:	4a56      	ldr	r2, [pc, #344]	; (8102d00 <HAL_DMA_IRQHandler+0x1cc>)
 8102ba8:	4293      	cmp	r3, r2
 8102baa:	d02c      	beq.n	8102c06 <HAL_DMA_IRQHandler+0xd2>
 8102bac:	687b      	ldr	r3, [r7, #4]
 8102bae:	681b      	ldr	r3, [r3, #0]
 8102bb0:	4a54      	ldr	r2, [pc, #336]	; (8102d04 <HAL_DMA_IRQHandler+0x1d0>)
 8102bb2:	4293      	cmp	r3, r2
 8102bb4:	d027      	beq.n	8102c06 <HAL_DMA_IRQHandler+0xd2>
 8102bb6:	687b      	ldr	r3, [r7, #4]
 8102bb8:	681b      	ldr	r3, [r3, #0]
 8102bba:	4a53      	ldr	r2, [pc, #332]	; (8102d08 <HAL_DMA_IRQHandler+0x1d4>)
 8102bbc:	4293      	cmp	r3, r2
 8102bbe:	d022      	beq.n	8102c06 <HAL_DMA_IRQHandler+0xd2>
 8102bc0:	687b      	ldr	r3, [r7, #4]
 8102bc2:	681b      	ldr	r3, [r3, #0]
 8102bc4:	4a51      	ldr	r2, [pc, #324]	; (8102d0c <HAL_DMA_IRQHandler+0x1d8>)
 8102bc6:	4293      	cmp	r3, r2
 8102bc8:	d01d      	beq.n	8102c06 <HAL_DMA_IRQHandler+0xd2>
 8102bca:	687b      	ldr	r3, [r7, #4]
 8102bcc:	681b      	ldr	r3, [r3, #0]
 8102bce:	4a50      	ldr	r2, [pc, #320]	; (8102d10 <HAL_DMA_IRQHandler+0x1dc>)
 8102bd0:	4293      	cmp	r3, r2
 8102bd2:	d018      	beq.n	8102c06 <HAL_DMA_IRQHandler+0xd2>
 8102bd4:	687b      	ldr	r3, [r7, #4]
 8102bd6:	681b      	ldr	r3, [r3, #0]
 8102bd8:	4a4e      	ldr	r2, [pc, #312]	; (8102d14 <HAL_DMA_IRQHandler+0x1e0>)
 8102bda:	4293      	cmp	r3, r2
 8102bdc:	d013      	beq.n	8102c06 <HAL_DMA_IRQHandler+0xd2>
 8102bde:	687b      	ldr	r3, [r7, #4]
 8102be0:	681b      	ldr	r3, [r3, #0]
 8102be2:	4a4d      	ldr	r2, [pc, #308]	; (8102d18 <HAL_DMA_IRQHandler+0x1e4>)
 8102be4:	4293      	cmp	r3, r2
 8102be6:	d00e      	beq.n	8102c06 <HAL_DMA_IRQHandler+0xd2>
 8102be8:	687b      	ldr	r3, [r7, #4]
 8102bea:	681b      	ldr	r3, [r3, #0]
 8102bec:	4a4b      	ldr	r2, [pc, #300]	; (8102d1c <HAL_DMA_IRQHandler+0x1e8>)
 8102bee:	4293      	cmp	r3, r2
 8102bf0:	d009      	beq.n	8102c06 <HAL_DMA_IRQHandler+0xd2>
 8102bf2:	687b      	ldr	r3, [r7, #4]
 8102bf4:	681b      	ldr	r3, [r3, #0]
 8102bf6:	4a4a      	ldr	r2, [pc, #296]	; (8102d20 <HAL_DMA_IRQHandler+0x1ec>)
 8102bf8:	4293      	cmp	r3, r2
 8102bfa:	d004      	beq.n	8102c06 <HAL_DMA_IRQHandler+0xd2>
 8102bfc:	687b      	ldr	r3, [r7, #4]
 8102bfe:	681b      	ldr	r3, [r3, #0]
 8102c00:	4a48      	ldr	r2, [pc, #288]	; (8102d24 <HAL_DMA_IRQHandler+0x1f0>)
 8102c02:	4293      	cmp	r3, r2
 8102c04:	d101      	bne.n	8102c0a <HAL_DMA_IRQHandler+0xd6>
 8102c06:	2301      	movs	r3, #1
 8102c08:	e000      	b.n	8102c0c <HAL_DMA_IRQHandler+0xd8>
 8102c0a:	2300      	movs	r3, #0
 8102c0c:	2b00      	cmp	r3, #0
 8102c0e:	f000 842b 	beq.w	8103468 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8102c12:	687b      	ldr	r3, [r7, #4]
 8102c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102c16:	f003 031f 	and.w	r3, r3, #31
 8102c1a:	2208      	movs	r2, #8
 8102c1c:	409a      	lsls	r2, r3
 8102c1e:	69bb      	ldr	r3, [r7, #24]
 8102c20:	4013      	ands	r3, r2
 8102c22:	2b00      	cmp	r3, #0
 8102c24:	f000 80a2 	beq.w	8102d6c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8102c28:	687b      	ldr	r3, [r7, #4]
 8102c2a:	681b      	ldr	r3, [r3, #0]
 8102c2c:	4a2e      	ldr	r2, [pc, #184]	; (8102ce8 <HAL_DMA_IRQHandler+0x1b4>)
 8102c2e:	4293      	cmp	r3, r2
 8102c30:	d04a      	beq.n	8102cc8 <HAL_DMA_IRQHandler+0x194>
 8102c32:	687b      	ldr	r3, [r7, #4]
 8102c34:	681b      	ldr	r3, [r3, #0]
 8102c36:	4a2d      	ldr	r2, [pc, #180]	; (8102cec <HAL_DMA_IRQHandler+0x1b8>)
 8102c38:	4293      	cmp	r3, r2
 8102c3a:	d045      	beq.n	8102cc8 <HAL_DMA_IRQHandler+0x194>
 8102c3c:	687b      	ldr	r3, [r7, #4]
 8102c3e:	681b      	ldr	r3, [r3, #0]
 8102c40:	4a2b      	ldr	r2, [pc, #172]	; (8102cf0 <HAL_DMA_IRQHandler+0x1bc>)
 8102c42:	4293      	cmp	r3, r2
 8102c44:	d040      	beq.n	8102cc8 <HAL_DMA_IRQHandler+0x194>
 8102c46:	687b      	ldr	r3, [r7, #4]
 8102c48:	681b      	ldr	r3, [r3, #0]
 8102c4a:	4a2a      	ldr	r2, [pc, #168]	; (8102cf4 <HAL_DMA_IRQHandler+0x1c0>)
 8102c4c:	4293      	cmp	r3, r2
 8102c4e:	d03b      	beq.n	8102cc8 <HAL_DMA_IRQHandler+0x194>
 8102c50:	687b      	ldr	r3, [r7, #4]
 8102c52:	681b      	ldr	r3, [r3, #0]
 8102c54:	4a28      	ldr	r2, [pc, #160]	; (8102cf8 <HAL_DMA_IRQHandler+0x1c4>)
 8102c56:	4293      	cmp	r3, r2
 8102c58:	d036      	beq.n	8102cc8 <HAL_DMA_IRQHandler+0x194>
 8102c5a:	687b      	ldr	r3, [r7, #4]
 8102c5c:	681b      	ldr	r3, [r3, #0]
 8102c5e:	4a27      	ldr	r2, [pc, #156]	; (8102cfc <HAL_DMA_IRQHandler+0x1c8>)
 8102c60:	4293      	cmp	r3, r2
 8102c62:	d031      	beq.n	8102cc8 <HAL_DMA_IRQHandler+0x194>
 8102c64:	687b      	ldr	r3, [r7, #4]
 8102c66:	681b      	ldr	r3, [r3, #0]
 8102c68:	4a25      	ldr	r2, [pc, #148]	; (8102d00 <HAL_DMA_IRQHandler+0x1cc>)
 8102c6a:	4293      	cmp	r3, r2
 8102c6c:	d02c      	beq.n	8102cc8 <HAL_DMA_IRQHandler+0x194>
 8102c6e:	687b      	ldr	r3, [r7, #4]
 8102c70:	681b      	ldr	r3, [r3, #0]
 8102c72:	4a24      	ldr	r2, [pc, #144]	; (8102d04 <HAL_DMA_IRQHandler+0x1d0>)
 8102c74:	4293      	cmp	r3, r2
 8102c76:	d027      	beq.n	8102cc8 <HAL_DMA_IRQHandler+0x194>
 8102c78:	687b      	ldr	r3, [r7, #4]
 8102c7a:	681b      	ldr	r3, [r3, #0]
 8102c7c:	4a22      	ldr	r2, [pc, #136]	; (8102d08 <HAL_DMA_IRQHandler+0x1d4>)
 8102c7e:	4293      	cmp	r3, r2
 8102c80:	d022      	beq.n	8102cc8 <HAL_DMA_IRQHandler+0x194>
 8102c82:	687b      	ldr	r3, [r7, #4]
 8102c84:	681b      	ldr	r3, [r3, #0]
 8102c86:	4a21      	ldr	r2, [pc, #132]	; (8102d0c <HAL_DMA_IRQHandler+0x1d8>)
 8102c88:	4293      	cmp	r3, r2
 8102c8a:	d01d      	beq.n	8102cc8 <HAL_DMA_IRQHandler+0x194>
 8102c8c:	687b      	ldr	r3, [r7, #4]
 8102c8e:	681b      	ldr	r3, [r3, #0]
 8102c90:	4a1f      	ldr	r2, [pc, #124]	; (8102d10 <HAL_DMA_IRQHandler+0x1dc>)
 8102c92:	4293      	cmp	r3, r2
 8102c94:	d018      	beq.n	8102cc8 <HAL_DMA_IRQHandler+0x194>
 8102c96:	687b      	ldr	r3, [r7, #4]
 8102c98:	681b      	ldr	r3, [r3, #0]
 8102c9a:	4a1e      	ldr	r2, [pc, #120]	; (8102d14 <HAL_DMA_IRQHandler+0x1e0>)
 8102c9c:	4293      	cmp	r3, r2
 8102c9e:	d013      	beq.n	8102cc8 <HAL_DMA_IRQHandler+0x194>
 8102ca0:	687b      	ldr	r3, [r7, #4]
 8102ca2:	681b      	ldr	r3, [r3, #0]
 8102ca4:	4a1c      	ldr	r2, [pc, #112]	; (8102d18 <HAL_DMA_IRQHandler+0x1e4>)
 8102ca6:	4293      	cmp	r3, r2
 8102ca8:	d00e      	beq.n	8102cc8 <HAL_DMA_IRQHandler+0x194>
 8102caa:	687b      	ldr	r3, [r7, #4]
 8102cac:	681b      	ldr	r3, [r3, #0]
 8102cae:	4a1b      	ldr	r2, [pc, #108]	; (8102d1c <HAL_DMA_IRQHandler+0x1e8>)
 8102cb0:	4293      	cmp	r3, r2
 8102cb2:	d009      	beq.n	8102cc8 <HAL_DMA_IRQHandler+0x194>
 8102cb4:	687b      	ldr	r3, [r7, #4]
 8102cb6:	681b      	ldr	r3, [r3, #0]
 8102cb8:	4a19      	ldr	r2, [pc, #100]	; (8102d20 <HAL_DMA_IRQHandler+0x1ec>)
 8102cba:	4293      	cmp	r3, r2
 8102cbc:	d004      	beq.n	8102cc8 <HAL_DMA_IRQHandler+0x194>
 8102cbe:	687b      	ldr	r3, [r7, #4]
 8102cc0:	681b      	ldr	r3, [r3, #0]
 8102cc2:	4a18      	ldr	r2, [pc, #96]	; (8102d24 <HAL_DMA_IRQHandler+0x1f0>)
 8102cc4:	4293      	cmp	r3, r2
 8102cc6:	d12f      	bne.n	8102d28 <HAL_DMA_IRQHandler+0x1f4>
 8102cc8:	687b      	ldr	r3, [r7, #4]
 8102cca:	681b      	ldr	r3, [r3, #0]
 8102ccc:	681b      	ldr	r3, [r3, #0]
 8102cce:	f003 0304 	and.w	r3, r3, #4
 8102cd2:	2b00      	cmp	r3, #0
 8102cd4:	bf14      	ite	ne
 8102cd6:	2301      	movne	r3, #1
 8102cd8:	2300      	moveq	r3, #0
 8102cda:	b2db      	uxtb	r3, r3
 8102cdc:	e02e      	b.n	8102d3c <HAL_DMA_IRQHandler+0x208>
 8102cde:	bf00      	nop
 8102ce0:	10000000 	.word	0x10000000
 8102ce4:	1b4e81b5 	.word	0x1b4e81b5
 8102ce8:	40020010 	.word	0x40020010
 8102cec:	40020028 	.word	0x40020028
 8102cf0:	40020040 	.word	0x40020040
 8102cf4:	40020058 	.word	0x40020058
 8102cf8:	40020070 	.word	0x40020070
 8102cfc:	40020088 	.word	0x40020088
 8102d00:	400200a0 	.word	0x400200a0
 8102d04:	400200b8 	.word	0x400200b8
 8102d08:	40020410 	.word	0x40020410
 8102d0c:	40020428 	.word	0x40020428
 8102d10:	40020440 	.word	0x40020440
 8102d14:	40020458 	.word	0x40020458
 8102d18:	40020470 	.word	0x40020470
 8102d1c:	40020488 	.word	0x40020488
 8102d20:	400204a0 	.word	0x400204a0
 8102d24:	400204b8 	.word	0x400204b8
 8102d28:	687b      	ldr	r3, [r7, #4]
 8102d2a:	681b      	ldr	r3, [r3, #0]
 8102d2c:	681b      	ldr	r3, [r3, #0]
 8102d2e:	f003 0308 	and.w	r3, r3, #8
 8102d32:	2b00      	cmp	r3, #0
 8102d34:	bf14      	ite	ne
 8102d36:	2301      	movne	r3, #1
 8102d38:	2300      	moveq	r3, #0
 8102d3a:	b2db      	uxtb	r3, r3
 8102d3c:	2b00      	cmp	r3, #0
 8102d3e:	d015      	beq.n	8102d6c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8102d40:	687b      	ldr	r3, [r7, #4]
 8102d42:	681b      	ldr	r3, [r3, #0]
 8102d44:	681a      	ldr	r2, [r3, #0]
 8102d46:	687b      	ldr	r3, [r7, #4]
 8102d48:	681b      	ldr	r3, [r3, #0]
 8102d4a:	f022 0204 	bic.w	r2, r2, #4
 8102d4e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8102d50:	687b      	ldr	r3, [r7, #4]
 8102d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102d54:	f003 031f 	and.w	r3, r3, #31
 8102d58:	2208      	movs	r2, #8
 8102d5a:	409a      	lsls	r2, r3
 8102d5c:	6a3b      	ldr	r3, [r7, #32]
 8102d5e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8102d60:	687b      	ldr	r3, [r7, #4]
 8102d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102d64:	f043 0201 	orr.w	r2, r3, #1
 8102d68:	687b      	ldr	r3, [r7, #4]
 8102d6a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8102d6c:	687b      	ldr	r3, [r7, #4]
 8102d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102d70:	f003 031f 	and.w	r3, r3, #31
 8102d74:	69ba      	ldr	r2, [r7, #24]
 8102d76:	fa22 f303 	lsr.w	r3, r2, r3
 8102d7a:	f003 0301 	and.w	r3, r3, #1
 8102d7e:	2b00      	cmp	r3, #0
 8102d80:	d06e      	beq.n	8102e60 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8102d82:	687b      	ldr	r3, [r7, #4]
 8102d84:	681b      	ldr	r3, [r3, #0]
 8102d86:	4a69      	ldr	r2, [pc, #420]	; (8102f2c <HAL_DMA_IRQHandler+0x3f8>)
 8102d88:	4293      	cmp	r3, r2
 8102d8a:	d04a      	beq.n	8102e22 <HAL_DMA_IRQHandler+0x2ee>
 8102d8c:	687b      	ldr	r3, [r7, #4]
 8102d8e:	681b      	ldr	r3, [r3, #0]
 8102d90:	4a67      	ldr	r2, [pc, #412]	; (8102f30 <HAL_DMA_IRQHandler+0x3fc>)
 8102d92:	4293      	cmp	r3, r2
 8102d94:	d045      	beq.n	8102e22 <HAL_DMA_IRQHandler+0x2ee>
 8102d96:	687b      	ldr	r3, [r7, #4]
 8102d98:	681b      	ldr	r3, [r3, #0]
 8102d9a:	4a66      	ldr	r2, [pc, #408]	; (8102f34 <HAL_DMA_IRQHandler+0x400>)
 8102d9c:	4293      	cmp	r3, r2
 8102d9e:	d040      	beq.n	8102e22 <HAL_DMA_IRQHandler+0x2ee>
 8102da0:	687b      	ldr	r3, [r7, #4]
 8102da2:	681b      	ldr	r3, [r3, #0]
 8102da4:	4a64      	ldr	r2, [pc, #400]	; (8102f38 <HAL_DMA_IRQHandler+0x404>)
 8102da6:	4293      	cmp	r3, r2
 8102da8:	d03b      	beq.n	8102e22 <HAL_DMA_IRQHandler+0x2ee>
 8102daa:	687b      	ldr	r3, [r7, #4]
 8102dac:	681b      	ldr	r3, [r3, #0]
 8102dae:	4a63      	ldr	r2, [pc, #396]	; (8102f3c <HAL_DMA_IRQHandler+0x408>)
 8102db0:	4293      	cmp	r3, r2
 8102db2:	d036      	beq.n	8102e22 <HAL_DMA_IRQHandler+0x2ee>
 8102db4:	687b      	ldr	r3, [r7, #4]
 8102db6:	681b      	ldr	r3, [r3, #0]
 8102db8:	4a61      	ldr	r2, [pc, #388]	; (8102f40 <HAL_DMA_IRQHandler+0x40c>)
 8102dba:	4293      	cmp	r3, r2
 8102dbc:	d031      	beq.n	8102e22 <HAL_DMA_IRQHandler+0x2ee>
 8102dbe:	687b      	ldr	r3, [r7, #4]
 8102dc0:	681b      	ldr	r3, [r3, #0]
 8102dc2:	4a60      	ldr	r2, [pc, #384]	; (8102f44 <HAL_DMA_IRQHandler+0x410>)
 8102dc4:	4293      	cmp	r3, r2
 8102dc6:	d02c      	beq.n	8102e22 <HAL_DMA_IRQHandler+0x2ee>
 8102dc8:	687b      	ldr	r3, [r7, #4]
 8102dca:	681b      	ldr	r3, [r3, #0]
 8102dcc:	4a5e      	ldr	r2, [pc, #376]	; (8102f48 <HAL_DMA_IRQHandler+0x414>)
 8102dce:	4293      	cmp	r3, r2
 8102dd0:	d027      	beq.n	8102e22 <HAL_DMA_IRQHandler+0x2ee>
 8102dd2:	687b      	ldr	r3, [r7, #4]
 8102dd4:	681b      	ldr	r3, [r3, #0]
 8102dd6:	4a5d      	ldr	r2, [pc, #372]	; (8102f4c <HAL_DMA_IRQHandler+0x418>)
 8102dd8:	4293      	cmp	r3, r2
 8102dda:	d022      	beq.n	8102e22 <HAL_DMA_IRQHandler+0x2ee>
 8102ddc:	687b      	ldr	r3, [r7, #4]
 8102dde:	681b      	ldr	r3, [r3, #0]
 8102de0:	4a5b      	ldr	r2, [pc, #364]	; (8102f50 <HAL_DMA_IRQHandler+0x41c>)
 8102de2:	4293      	cmp	r3, r2
 8102de4:	d01d      	beq.n	8102e22 <HAL_DMA_IRQHandler+0x2ee>
 8102de6:	687b      	ldr	r3, [r7, #4]
 8102de8:	681b      	ldr	r3, [r3, #0]
 8102dea:	4a5a      	ldr	r2, [pc, #360]	; (8102f54 <HAL_DMA_IRQHandler+0x420>)
 8102dec:	4293      	cmp	r3, r2
 8102dee:	d018      	beq.n	8102e22 <HAL_DMA_IRQHandler+0x2ee>
 8102df0:	687b      	ldr	r3, [r7, #4]
 8102df2:	681b      	ldr	r3, [r3, #0]
 8102df4:	4a58      	ldr	r2, [pc, #352]	; (8102f58 <HAL_DMA_IRQHandler+0x424>)
 8102df6:	4293      	cmp	r3, r2
 8102df8:	d013      	beq.n	8102e22 <HAL_DMA_IRQHandler+0x2ee>
 8102dfa:	687b      	ldr	r3, [r7, #4]
 8102dfc:	681b      	ldr	r3, [r3, #0]
 8102dfe:	4a57      	ldr	r2, [pc, #348]	; (8102f5c <HAL_DMA_IRQHandler+0x428>)
 8102e00:	4293      	cmp	r3, r2
 8102e02:	d00e      	beq.n	8102e22 <HAL_DMA_IRQHandler+0x2ee>
 8102e04:	687b      	ldr	r3, [r7, #4]
 8102e06:	681b      	ldr	r3, [r3, #0]
 8102e08:	4a55      	ldr	r2, [pc, #340]	; (8102f60 <HAL_DMA_IRQHandler+0x42c>)
 8102e0a:	4293      	cmp	r3, r2
 8102e0c:	d009      	beq.n	8102e22 <HAL_DMA_IRQHandler+0x2ee>
 8102e0e:	687b      	ldr	r3, [r7, #4]
 8102e10:	681b      	ldr	r3, [r3, #0]
 8102e12:	4a54      	ldr	r2, [pc, #336]	; (8102f64 <HAL_DMA_IRQHandler+0x430>)
 8102e14:	4293      	cmp	r3, r2
 8102e16:	d004      	beq.n	8102e22 <HAL_DMA_IRQHandler+0x2ee>
 8102e18:	687b      	ldr	r3, [r7, #4]
 8102e1a:	681b      	ldr	r3, [r3, #0]
 8102e1c:	4a52      	ldr	r2, [pc, #328]	; (8102f68 <HAL_DMA_IRQHandler+0x434>)
 8102e1e:	4293      	cmp	r3, r2
 8102e20:	d10a      	bne.n	8102e38 <HAL_DMA_IRQHandler+0x304>
 8102e22:	687b      	ldr	r3, [r7, #4]
 8102e24:	681b      	ldr	r3, [r3, #0]
 8102e26:	695b      	ldr	r3, [r3, #20]
 8102e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102e2c:	2b00      	cmp	r3, #0
 8102e2e:	bf14      	ite	ne
 8102e30:	2301      	movne	r3, #1
 8102e32:	2300      	moveq	r3, #0
 8102e34:	b2db      	uxtb	r3, r3
 8102e36:	e003      	b.n	8102e40 <HAL_DMA_IRQHandler+0x30c>
 8102e38:	687b      	ldr	r3, [r7, #4]
 8102e3a:	681b      	ldr	r3, [r3, #0]
 8102e3c:	681b      	ldr	r3, [r3, #0]
 8102e3e:	2300      	movs	r3, #0
 8102e40:	2b00      	cmp	r3, #0
 8102e42:	d00d      	beq.n	8102e60 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8102e44:	687b      	ldr	r3, [r7, #4]
 8102e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102e48:	f003 031f 	and.w	r3, r3, #31
 8102e4c:	2201      	movs	r2, #1
 8102e4e:	409a      	lsls	r2, r3
 8102e50:	6a3b      	ldr	r3, [r7, #32]
 8102e52:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8102e54:	687b      	ldr	r3, [r7, #4]
 8102e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102e58:	f043 0202 	orr.w	r2, r3, #2
 8102e5c:	687b      	ldr	r3, [r7, #4]
 8102e5e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8102e60:	687b      	ldr	r3, [r7, #4]
 8102e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102e64:	f003 031f 	and.w	r3, r3, #31
 8102e68:	2204      	movs	r2, #4
 8102e6a:	409a      	lsls	r2, r3
 8102e6c:	69bb      	ldr	r3, [r7, #24]
 8102e6e:	4013      	ands	r3, r2
 8102e70:	2b00      	cmp	r3, #0
 8102e72:	f000 808f 	beq.w	8102f94 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8102e76:	687b      	ldr	r3, [r7, #4]
 8102e78:	681b      	ldr	r3, [r3, #0]
 8102e7a:	4a2c      	ldr	r2, [pc, #176]	; (8102f2c <HAL_DMA_IRQHandler+0x3f8>)
 8102e7c:	4293      	cmp	r3, r2
 8102e7e:	d04a      	beq.n	8102f16 <HAL_DMA_IRQHandler+0x3e2>
 8102e80:	687b      	ldr	r3, [r7, #4]
 8102e82:	681b      	ldr	r3, [r3, #0]
 8102e84:	4a2a      	ldr	r2, [pc, #168]	; (8102f30 <HAL_DMA_IRQHandler+0x3fc>)
 8102e86:	4293      	cmp	r3, r2
 8102e88:	d045      	beq.n	8102f16 <HAL_DMA_IRQHandler+0x3e2>
 8102e8a:	687b      	ldr	r3, [r7, #4]
 8102e8c:	681b      	ldr	r3, [r3, #0]
 8102e8e:	4a29      	ldr	r2, [pc, #164]	; (8102f34 <HAL_DMA_IRQHandler+0x400>)
 8102e90:	4293      	cmp	r3, r2
 8102e92:	d040      	beq.n	8102f16 <HAL_DMA_IRQHandler+0x3e2>
 8102e94:	687b      	ldr	r3, [r7, #4]
 8102e96:	681b      	ldr	r3, [r3, #0]
 8102e98:	4a27      	ldr	r2, [pc, #156]	; (8102f38 <HAL_DMA_IRQHandler+0x404>)
 8102e9a:	4293      	cmp	r3, r2
 8102e9c:	d03b      	beq.n	8102f16 <HAL_DMA_IRQHandler+0x3e2>
 8102e9e:	687b      	ldr	r3, [r7, #4]
 8102ea0:	681b      	ldr	r3, [r3, #0]
 8102ea2:	4a26      	ldr	r2, [pc, #152]	; (8102f3c <HAL_DMA_IRQHandler+0x408>)
 8102ea4:	4293      	cmp	r3, r2
 8102ea6:	d036      	beq.n	8102f16 <HAL_DMA_IRQHandler+0x3e2>
 8102ea8:	687b      	ldr	r3, [r7, #4]
 8102eaa:	681b      	ldr	r3, [r3, #0]
 8102eac:	4a24      	ldr	r2, [pc, #144]	; (8102f40 <HAL_DMA_IRQHandler+0x40c>)
 8102eae:	4293      	cmp	r3, r2
 8102eb0:	d031      	beq.n	8102f16 <HAL_DMA_IRQHandler+0x3e2>
 8102eb2:	687b      	ldr	r3, [r7, #4]
 8102eb4:	681b      	ldr	r3, [r3, #0]
 8102eb6:	4a23      	ldr	r2, [pc, #140]	; (8102f44 <HAL_DMA_IRQHandler+0x410>)
 8102eb8:	4293      	cmp	r3, r2
 8102eba:	d02c      	beq.n	8102f16 <HAL_DMA_IRQHandler+0x3e2>
 8102ebc:	687b      	ldr	r3, [r7, #4]
 8102ebe:	681b      	ldr	r3, [r3, #0]
 8102ec0:	4a21      	ldr	r2, [pc, #132]	; (8102f48 <HAL_DMA_IRQHandler+0x414>)
 8102ec2:	4293      	cmp	r3, r2
 8102ec4:	d027      	beq.n	8102f16 <HAL_DMA_IRQHandler+0x3e2>
 8102ec6:	687b      	ldr	r3, [r7, #4]
 8102ec8:	681b      	ldr	r3, [r3, #0]
 8102eca:	4a20      	ldr	r2, [pc, #128]	; (8102f4c <HAL_DMA_IRQHandler+0x418>)
 8102ecc:	4293      	cmp	r3, r2
 8102ece:	d022      	beq.n	8102f16 <HAL_DMA_IRQHandler+0x3e2>
 8102ed0:	687b      	ldr	r3, [r7, #4]
 8102ed2:	681b      	ldr	r3, [r3, #0]
 8102ed4:	4a1e      	ldr	r2, [pc, #120]	; (8102f50 <HAL_DMA_IRQHandler+0x41c>)
 8102ed6:	4293      	cmp	r3, r2
 8102ed8:	d01d      	beq.n	8102f16 <HAL_DMA_IRQHandler+0x3e2>
 8102eda:	687b      	ldr	r3, [r7, #4]
 8102edc:	681b      	ldr	r3, [r3, #0]
 8102ede:	4a1d      	ldr	r2, [pc, #116]	; (8102f54 <HAL_DMA_IRQHandler+0x420>)
 8102ee0:	4293      	cmp	r3, r2
 8102ee2:	d018      	beq.n	8102f16 <HAL_DMA_IRQHandler+0x3e2>
 8102ee4:	687b      	ldr	r3, [r7, #4]
 8102ee6:	681b      	ldr	r3, [r3, #0]
 8102ee8:	4a1b      	ldr	r2, [pc, #108]	; (8102f58 <HAL_DMA_IRQHandler+0x424>)
 8102eea:	4293      	cmp	r3, r2
 8102eec:	d013      	beq.n	8102f16 <HAL_DMA_IRQHandler+0x3e2>
 8102eee:	687b      	ldr	r3, [r7, #4]
 8102ef0:	681b      	ldr	r3, [r3, #0]
 8102ef2:	4a1a      	ldr	r2, [pc, #104]	; (8102f5c <HAL_DMA_IRQHandler+0x428>)
 8102ef4:	4293      	cmp	r3, r2
 8102ef6:	d00e      	beq.n	8102f16 <HAL_DMA_IRQHandler+0x3e2>
 8102ef8:	687b      	ldr	r3, [r7, #4]
 8102efa:	681b      	ldr	r3, [r3, #0]
 8102efc:	4a18      	ldr	r2, [pc, #96]	; (8102f60 <HAL_DMA_IRQHandler+0x42c>)
 8102efe:	4293      	cmp	r3, r2
 8102f00:	d009      	beq.n	8102f16 <HAL_DMA_IRQHandler+0x3e2>
 8102f02:	687b      	ldr	r3, [r7, #4]
 8102f04:	681b      	ldr	r3, [r3, #0]
 8102f06:	4a17      	ldr	r2, [pc, #92]	; (8102f64 <HAL_DMA_IRQHandler+0x430>)
 8102f08:	4293      	cmp	r3, r2
 8102f0a:	d004      	beq.n	8102f16 <HAL_DMA_IRQHandler+0x3e2>
 8102f0c:	687b      	ldr	r3, [r7, #4]
 8102f0e:	681b      	ldr	r3, [r3, #0]
 8102f10:	4a15      	ldr	r2, [pc, #84]	; (8102f68 <HAL_DMA_IRQHandler+0x434>)
 8102f12:	4293      	cmp	r3, r2
 8102f14:	d12a      	bne.n	8102f6c <HAL_DMA_IRQHandler+0x438>
 8102f16:	687b      	ldr	r3, [r7, #4]
 8102f18:	681b      	ldr	r3, [r3, #0]
 8102f1a:	681b      	ldr	r3, [r3, #0]
 8102f1c:	f003 0302 	and.w	r3, r3, #2
 8102f20:	2b00      	cmp	r3, #0
 8102f22:	bf14      	ite	ne
 8102f24:	2301      	movne	r3, #1
 8102f26:	2300      	moveq	r3, #0
 8102f28:	b2db      	uxtb	r3, r3
 8102f2a:	e023      	b.n	8102f74 <HAL_DMA_IRQHandler+0x440>
 8102f2c:	40020010 	.word	0x40020010
 8102f30:	40020028 	.word	0x40020028
 8102f34:	40020040 	.word	0x40020040
 8102f38:	40020058 	.word	0x40020058
 8102f3c:	40020070 	.word	0x40020070
 8102f40:	40020088 	.word	0x40020088
 8102f44:	400200a0 	.word	0x400200a0
 8102f48:	400200b8 	.word	0x400200b8
 8102f4c:	40020410 	.word	0x40020410
 8102f50:	40020428 	.word	0x40020428
 8102f54:	40020440 	.word	0x40020440
 8102f58:	40020458 	.word	0x40020458
 8102f5c:	40020470 	.word	0x40020470
 8102f60:	40020488 	.word	0x40020488
 8102f64:	400204a0 	.word	0x400204a0
 8102f68:	400204b8 	.word	0x400204b8
 8102f6c:	687b      	ldr	r3, [r7, #4]
 8102f6e:	681b      	ldr	r3, [r3, #0]
 8102f70:	681b      	ldr	r3, [r3, #0]
 8102f72:	2300      	movs	r3, #0
 8102f74:	2b00      	cmp	r3, #0
 8102f76:	d00d      	beq.n	8102f94 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8102f78:	687b      	ldr	r3, [r7, #4]
 8102f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102f7c:	f003 031f 	and.w	r3, r3, #31
 8102f80:	2204      	movs	r2, #4
 8102f82:	409a      	lsls	r2, r3
 8102f84:	6a3b      	ldr	r3, [r7, #32]
 8102f86:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8102f88:	687b      	ldr	r3, [r7, #4]
 8102f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102f8c:	f043 0204 	orr.w	r2, r3, #4
 8102f90:	687b      	ldr	r3, [r7, #4]
 8102f92:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8102f94:	687b      	ldr	r3, [r7, #4]
 8102f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102f98:	f003 031f 	and.w	r3, r3, #31
 8102f9c:	2210      	movs	r2, #16
 8102f9e:	409a      	lsls	r2, r3
 8102fa0:	69bb      	ldr	r3, [r7, #24]
 8102fa2:	4013      	ands	r3, r2
 8102fa4:	2b00      	cmp	r3, #0
 8102fa6:	f000 80a6 	beq.w	81030f6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8102faa:	687b      	ldr	r3, [r7, #4]
 8102fac:	681b      	ldr	r3, [r3, #0]
 8102fae:	4a85      	ldr	r2, [pc, #532]	; (81031c4 <HAL_DMA_IRQHandler+0x690>)
 8102fb0:	4293      	cmp	r3, r2
 8102fb2:	d04a      	beq.n	810304a <HAL_DMA_IRQHandler+0x516>
 8102fb4:	687b      	ldr	r3, [r7, #4]
 8102fb6:	681b      	ldr	r3, [r3, #0]
 8102fb8:	4a83      	ldr	r2, [pc, #524]	; (81031c8 <HAL_DMA_IRQHandler+0x694>)
 8102fba:	4293      	cmp	r3, r2
 8102fbc:	d045      	beq.n	810304a <HAL_DMA_IRQHandler+0x516>
 8102fbe:	687b      	ldr	r3, [r7, #4]
 8102fc0:	681b      	ldr	r3, [r3, #0]
 8102fc2:	4a82      	ldr	r2, [pc, #520]	; (81031cc <HAL_DMA_IRQHandler+0x698>)
 8102fc4:	4293      	cmp	r3, r2
 8102fc6:	d040      	beq.n	810304a <HAL_DMA_IRQHandler+0x516>
 8102fc8:	687b      	ldr	r3, [r7, #4]
 8102fca:	681b      	ldr	r3, [r3, #0]
 8102fcc:	4a80      	ldr	r2, [pc, #512]	; (81031d0 <HAL_DMA_IRQHandler+0x69c>)
 8102fce:	4293      	cmp	r3, r2
 8102fd0:	d03b      	beq.n	810304a <HAL_DMA_IRQHandler+0x516>
 8102fd2:	687b      	ldr	r3, [r7, #4]
 8102fd4:	681b      	ldr	r3, [r3, #0]
 8102fd6:	4a7f      	ldr	r2, [pc, #508]	; (81031d4 <HAL_DMA_IRQHandler+0x6a0>)
 8102fd8:	4293      	cmp	r3, r2
 8102fda:	d036      	beq.n	810304a <HAL_DMA_IRQHandler+0x516>
 8102fdc:	687b      	ldr	r3, [r7, #4]
 8102fde:	681b      	ldr	r3, [r3, #0]
 8102fe0:	4a7d      	ldr	r2, [pc, #500]	; (81031d8 <HAL_DMA_IRQHandler+0x6a4>)
 8102fe2:	4293      	cmp	r3, r2
 8102fe4:	d031      	beq.n	810304a <HAL_DMA_IRQHandler+0x516>
 8102fe6:	687b      	ldr	r3, [r7, #4]
 8102fe8:	681b      	ldr	r3, [r3, #0]
 8102fea:	4a7c      	ldr	r2, [pc, #496]	; (81031dc <HAL_DMA_IRQHandler+0x6a8>)
 8102fec:	4293      	cmp	r3, r2
 8102fee:	d02c      	beq.n	810304a <HAL_DMA_IRQHandler+0x516>
 8102ff0:	687b      	ldr	r3, [r7, #4]
 8102ff2:	681b      	ldr	r3, [r3, #0]
 8102ff4:	4a7a      	ldr	r2, [pc, #488]	; (81031e0 <HAL_DMA_IRQHandler+0x6ac>)
 8102ff6:	4293      	cmp	r3, r2
 8102ff8:	d027      	beq.n	810304a <HAL_DMA_IRQHandler+0x516>
 8102ffa:	687b      	ldr	r3, [r7, #4]
 8102ffc:	681b      	ldr	r3, [r3, #0]
 8102ffe:	4a79      	ldr	r2, [pc, #484]	; (81031e4 <HAL_DMA_IRQHandler+0x6b0>)
 8103000:	4293      	cmp	r3, r2
 8103002:	d022      	beq.n	810304a <HAL_DMA_IRQHandler+0x516>
 8103004:	687b      	ldr	r3, [r7, #4]
 8103006:	681b      	ldr	r3, [r3, #0]
 8103008:	4a77      	ldr	r2, [pc, #476]	; (81031e8 <HAL_DMA_IRQHandler+0x6b4>)
 810300a:	4293      	cmp	r3, r2
 810300c:	d01d      	beq.n	810304a <HAL_DMA_IRQHandler+0x516>
 810300e:	687b      	ldr	r3, [r7, #4]
 8103010:	681b      	ldr	r3, [r3, #0]
 8103012:	4a76      	ldr	r2, [pc, #472]	; (81031ec <HAL_DMA_IRQHandler+0x6b8>)
 8103014:	4293      	cmp	r3, r2
 8103016:	d018      	beq.n	810304a <HAL_DMA_IRQHandler+0x516>
 8103018:	687b      	ldr	r3, [r7, #4]
 810301a:	681b      	ldr	r3, [r3, #0]
 810301c:	4a74      	ldr	r2, [pc, #464]	; (81031f0 <HAL_DMA_IRQHandler+0x6bc>)
 810301e:	4293      	cmp	r3, r2
 8103020:	d013      	beq.n	810304a <HAL_DMA_IRQHandler+0x516>
 8103022:	687b      	ldr	r3, [r7, #4]
 8103024:	681b      	ldr	r3, [r3, #0]
 8103026:	4a73      	ldr	r2, [pc, #460]	; (81031f4 <HAL_DMA_IRQHandler+0x6c0>)
 8103028:	4293      	cmp	r3, r2
 810302a:	d00e      	beq.n	810304a <HAL_DMA_IRQHandler+0x516>
 810302c:	687b      	ldr	r3, [r7, #4]
 810302e:	681b      	ldr	r3, [r3, #0]
 8103030:	4a71      	ldr	r2, [pc, #452]	; (81031f8 <HAL_DMA_IRQHandler+0x6c4>)
 8103032:	4293      	cmp	r3, r2
 8103034:	d009      	beq.n	810304a <HAL_DMA_IRQHandler+0x516>
 8103036:	687b      	ldr	r3, [r7, #4]
 8103038:	681b      	ldr	r3, [r3, #0]
 810303a:	4a70      	ldr	r2, [pc, #448]	; (81031fc <HAL_DMA_IRQHandler+0x6c8>)
 810303c:	4293      	cmp	r3, r2
 810303e:	d004      	beq.n	810304a <HAL_DMA_IRQHandler+0x516>
 8103040:	687b      	ldr	r3, [r7, #4]
 8103042:	681b      	ldr	r3, [r3, #0]
 8103044:	4a6e      	ldr	r2, [pc, #440]	; (8103200 <HAL_DMA_IRQHandler+0x6cc>)
 8103046:	4293      	cmp	r3, r2
 8103048:	d10a      	bne.n	8103060 <HAL_DMA_IRQHandler+0x52c>
 810304a:	687b      	ldr	r3, [r7, #4]
 810304c:	681b      	ldr	r3, [r3, #0]
 810304e:	681b      	ldr	r3, [r3, #0]
 8103050:	f003 0308 	and.w	r3, r3, #8
 8103054:	2b00      	cmp	r3, #0
 8103056:	bf14      	ite	ne
 8103058:	2301      	movne	r3, #1
 810305a:	2300      	moveq	r3, #0
 810305c:	b2db      	uxtb	r3, r3
 810305e:	e009      	b.n	8103074 <HAL_DMA_IRQHandler+0x540>
 8103060:	687b      	ldr	r3, [r7, #4]
 8103062:	681b      	ldr	r3, [r3, #0]
 8103064:	681b      	ldr	r3, [r3, #0]
 8103066:	f003 0304 	and.w	r3, r3, #4
 810306a:	2b00      	cmp	r3, #0
 810306c:	bf14      	ite	ne
 810306e:	2301      	movne	r3, #1
 8103070:	2300      	moveq	r3, #0
 8103072:	b2db      	uxtb	r3, r3
 8103074:	2b00      	cmp	r3, #0
 8103076:	d03e      	beq.n	81030f6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103078:	687b      	ldr	r3, [r7, #4]
 810307a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810307c:	f003 031f 	and.w	r3, r3, #31
 8103080:	2210      	movs	r2, #16
 8103082:	409a      	lsls	r2, r3
 8103084:	6a3b      	ldr	r3, [r7, #32]
 8103086:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8103088:	687b      	ldr	r3, [r7, #4]
 810308a:	681b      	ldr	r3, [r3, #0]
 810308c:	681b      	ldr	r3, [r3, #0]
 810308e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103092:	2b00      	cmp	r3, #0
 8103094:	d018      	beq.n	81030c8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8103096:	687b      	ldr	r3, [r7, #4]
 8103098:	681b      	ldr	r3, [r3, #0]
 810309a:	681b      	ldr	r3, [r3, #0]
 810309c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81030a0:	2b00      	cmp	r3, #0
 81030a2:	d108      	bne.n	81030b6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 81030a4:	687b      	ldr	r3, [r7, #4]
 81030a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81030a8:	2b00      	cmp	r3, #0
 81030aa:	d024      	beq.n	81030f6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 81030ac:	687b      	ldr	r3, [r7, #4]
 81030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81030b0:	6878      	ldr	r0, [r7, #4]
 81030b2:	4798      	blx	r3
 81030b4:	e01f      	b.n	81030f6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 81030b6:	687b      	ldr	r3, [r7, #4]
 81030b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81030ba:	2b00      	cmp	r3, #0
 81030bc:	d01b      	beq.n	81030f6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 81030be:	687b      	ldr	r3, [r7, #4]
 81030c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81030c2:	6878      	ldr	r0, [r7, #4]
 81030c4:	4798      	blx	r3
 81030c6:	e016      	b.n	81030f6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 81030c8:	687b      	ldr	r3, [r7, #4]
 81030ca:	681b      	ldr	r3, [r3, #0]
 81030cc:	681b      	ldr	r3, [r3, #0]
 81030ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81030d2:	2b00      	cmp	r3, #0
 81030d4:	d107      	bne.n	81030e6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 81030d6:	687b      	ldr	r3, [r7, #4]
 81030d8:	681b      	ldr	r3, [r3, #0]
 81030da:	681a      	ldr	r2, [r3, #0]
 81030dc:	687b      	ldr	r3, [r7, #4]
 81030de:	681b      	ldr	r3, [r3, #0]
 81030e0:	f022 0208 	bic.w	r2, r2, #8
 81030e4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 81030e6:	687b      	ldr	r3, [r7, #4]
 81030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81030ea:	2b00      	cmp	r3, #0
 81030ec:	d003      	beq.n	81030f6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 81030ee:	687b      	ldr	r3, [r7, #4]
 81030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81030f2:	6878      	ldr	r0, [r7, #4]
 81030f4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81030f6:	687b      	ldr	r3, [r7, #4]
 81030f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81030fa:	f003 031f 	and.w	r3, r3, #31
 81030fe:	2220      	movs	r2, #32
 8103100:	409a      	lsls	r2, r3
 8103102:	69bb      	ldr	r3, [r7, #24]
 8103104:	4013      	ands	r3, r2
 8103106:	2b00      	cmp	r3, #0
 8103108:	f000 8110 	beq.w	810332c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 810310c:	687b      	ldr	r3, [r7, #4]
 810310e:	681b      	ldr	r3, [r3, #0]
 8103110:	4a2c      	ldr	r2, [pc, #176]	; (81031c4 <HAL_DMA_IRQHandler+0x690>)
 8103112:	4293      	cmp	r3, r2
 8103114:	d04a      	beq.n	81031ac <HAL_DMA_IRQHandler+0x678>
 8103116:	687b      	ldr	r3, [r7, #4]
 8103118:	681b      	ldr	r3, [r3, #0]
 810311a:	4a2b      	ldr	r2, [pc, #172]	; (81031c8 <HAL_DMA_IRQHandler+0x694>)
 810311c:	4293      	cmp	r3, r2
 810311e:	d045      	beq.n	81031ac <HAL_DMA_IRQHandler+0x678>
 8103120:	687b      	ldr	r3, [r7, #4]
 8103122:	681b      	ldr	r3, [r3, #0]
 8103124:	4a29      	ldr	r2, [pc, #164]	; (81031cc <HAL_DMA_IRQHandler+0x698>)
 8103126:	4293      	cmp	r3, r2
 8103128:	d040      	beq.n	81031ac <HAL_DMA_IRQHandler+0x678>
 810312a:	687b      	ldr	r3, [r7, #4]
 810312c:	681b      	ldr	r3, [r3, #0]
 810312e:	4a28      	ldr	r2, [pc, #160]	; (81031d0 <HAL_DMA_IRQHandler+0x69c>)
 8103130:	4293      	cmp	r3, r2
 8103132:	d03b      	beq.n	81031ac <HAL_DMA_IRQHandler+0x678>
 8103134:	687b      	ldr	r3, [r7, #4]
 8103136:	681b      	ldr	r3, [r3, #0]
 8103138:	4a26      	ldr	r2, [pc, #152]	; (81031d4 <HAL_DMA_IRQHandler+0x6a0>)
 810313a:	4293      	cmp	r3, r2
 810313c:	d036      	beq.n	81031ac <HAL_DMA_IRQHandler+0x678>
 810313e:	687b      	ldr	r3, [r7, #4]
 8103140:	681b      	ldr	r3, [r3, #0]
 8103142:	4a25      	ldr	r2, [pc, #148]	; (81031d8 <HAL_DMA_IRQHandler+0x6a4>)
 8103144:	4293      	cmp	r3, r2
 8103146:	d031      	beq.n	81031ac <HAL_DMA_IRQHandler+0x678>
 8103148:	687b      	ldr	r3, [r7, #4]
 810314a:	681b      	ldr	r3, [r3, #0]
 810314c:	4a23      	ldr	r2, [pc, #140]	; (81031dc <HAL_DMA_IRQHandler+0x6a8>)
 810314e:	4293      	cmp	r3, r2
 8103150:	d02c      	beq.n	81031ac <HAL_DMA_IRQHandler+0x678>
 8103152:	687b      	ldr	r3, [r7, #4]
 8103154:	681b      	ldr	r3, [r3, #0]
 8103156:	4a22      	ldr	r2, [pc, #136]	; (81031e0 <HAL_DMA_IRQHandler+0x6ac>)
 8103158:	4293      	cmp	r3, r2
 810315a:	d027      	beq.n	81031ac <HAL_DMA_IRQHandler+0x678>
 810315c:	687b      	ldr	r3, [r7, #4]
 810315e:	681b      	ldr	r3, [r3, #0]
 8103160:	4a20      	ldr	r2, [pc, #128]	; (81031e4 <HAL_DMA_IRQHandler+0x6b0>)
 8103162:	4293      	cmp	r3, r2
 8103164:	d022      	beq.n	81031ac <HAL_DMA_IRQHandler+0x678>
 8103166:	687b      	ldr	r3, [r7, #4]
 8103168:	681b      	ldr	r3, [r3, #0]
 810316a:	4a1f      	ldr	r2, [pc, #124]	; (81031e8 <HAL_DMA_IRQHandler+0x6b4>)
 810316c:	4293      	cmp	r3, r2
 810316e:	d01d      	beq.n	81031ac <HAL_DMA_IRQHandler+0x678>
 8103170:	687b      	ldr	r3, [r7, #4]
 8103172:	681b      	ldr	r3, [r3, #0]
 8103174:	4a1d      	ldr	r2, [pc, #116]	; (81031ec <HAL_DMA_IRQHandler+0x6b8>)
 8103176:	4293      	cmp	r3, r2
 8103178:	d018      	beq.n	81031ac <HAL_DMA_IRQHandler+0x678>
 810317a:	687b      	ldr	r3, [r7, #4]
 810317c:	681b      	ldr	r3, [r3, #0]
 810317e:	4a1c      	ldr	r2, [pc, #112]	; (81031f0 <HAL_DMA_IRQHandler+0x6bc>)
 8103180:	4293      	cmp	r3, r2
 8103182:	d013      	beq.n	81031ac <HAL_DMA_IRQHandler+0x678>
 8103184:	687b      	ldr	r3, [r7, #4]
 8103186:	681b      	ldr	r3, [r3, #0]
 8103188:	4a1a      	ldr	r2, [pc, #104]	; (81031f4 <HAL_DMA_IRQHandler+0x6c0>)
 810318a:	4293      	cmp	r3, r2
 810318c:	d00e      	beq.n	81031ac <HAL_DMA_IRQHandler+0x678>
 810318e:	687b      	ldr	r3, [r7, #4]
 8103190:	681b      	ldr	r3, [r3, #0]
 8103192:	4a19      	ldr	r2, [pc, #100]	; (81031f8 <HAL_DMA_IRQHandler+0x6c4>)
 8103194:	4293      	cmp	r3, r2
 8103196:	d009      	beq.n	81031ac <HAL_DMA_IRQHandler+0x678>
 8103198:	687b      	ldr	r3, [r7, #4]
 810319a:	681b      	ldr	r3, [r3, #0]
 810319c:	4a17      	ldr	r2, [pc, #92]	; (81031fc <HAL_DMA_IRQHandler+0x6c8>)
 810319e:	4293      	cmp	r3, r2
 81031a0:	d004      	beq.n	81031ac <HAL_DMA_IRQHandler+0x678>
 81031a2:	687b      	ldr	r3, [r7, #4]
 81031a4:	681b      	ldr	r3, [r3, #0]
 81031a6:	4a16      	ldr	r2, [pc, #88]	; (8103200 <HAL_DMA_IRQHandler+0x6cc>)
 81031a8:	4293      	cmp	r3, r2
 81031aa:	d12b      	bne.n	8103204 <HAL_DMA_IRQHandler+0x6d0>
 81031ac:	687b      	ldr	r3, [r7, #4]
 81031ae:	681b      	ldr	r3, [r3, #0]
 81031b0:	681b      	ldr	r3, [r3, #0]
 81031b2:	f003 0310 	and.w	r3, r3, #16
 81031b6:	2b00      	cmp	r3, #0
 81031b8:	bf14      	ite	ne
 81031ba:	2301      	movne	r3, #1
 81031bc:	2300      	moveq	r3, #0
 81031be:	b2db      	uxtb	r3, r3
 81031c0:	e02a      	b.n	8103218 <HAL_DMA_IRQHandler+0x6e4>
 81031c2:	bf00      	nop
 81031c4:	40020010 	.word	0x40020010
 81031c8:	40020028 	.word	0x40020028
 81031cc:	40020040 	.word	0x40020040
 81031d0:	40020058 	.word	0x40020058
 81031d4:	40020070 	.word	0x40020070
 81031d8:	40020088 	.word	0x40020088
 81031dc:	400200a0 	.word	0x400200a0
 81031e0:	400200b8 	.word	0x400200b8
 81031e4:	40020410 	.word	0x40020410
 81031e8:	40020428 	.word	0x40020428
 81031ec:	40020440 	.word	0x40020440
 81031f0:	40020458 	.word	0x40020458
 81031f4:	40020470 	.word	0x40020470
 81031f8:	40020488 	.word	0x40020488
 81031fc:	400204a0 	.word	0x400204a0
 8103200:	400204b8 	.word	0x400204b8
 8103204:	687b      	ldr	r3, [r7, #4]
 8103206:	681b      	ldr	r3, [r3, #0]
 8103208:	681b      	ldr	r3, [r3, #0]
 810320a:	f003 0302 	and.w	r3, r3, #2
 810320e:	2b00      	cmp	r3, #0
 8103210:	bf14      	ite	ne
 8103212:	2301      	movne	r3, #1
 8103214:	2300      	moveq	r3, #0
 8103216:	b2db      	uxtb	r3, r3
 8103218:	2b00      	cmp	r3, #0
 810321a:	f000 8087 	beq.w	810332c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 810321e:	687b      	ldr	r3, [r7, #4]
 8103220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103222:	f003 031f 	and.w	r3, r3, #31
 8103226:	2220      	movs	r2, #32
 8103228:	409a      	lsls	r2, r3
 810322a:	6a3b      	ldr	r3, [r7, #32]
 810322c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 810322e:	687b      	ldr	r3, [r7, #4]
 8103230:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8103234:	b2db      	uxtb	r3, r3
 8103236:	2b04      	cmp	r3, #4
 8103238:	d139      	bne.n	81032ae <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 810323a:	687b      	ldr	r3, [r7, #4]
 810323c:	681b      	ldr	r3, [r3, #0]
 810323e:	681a      	ldr	r2, [r3, #0]
 8103240:	687b      	ldr	r3, [r7, #4]
 8103242:	681b      	ldr	r3, [r3, #0]
 8103244:	f022 0216 	bic.w	r2, r2, #22
 8103248:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 810324a:	687b      	ldr	r3, [r7, #4]
 810324c:	681b      	ldr	r3, [r3, #0]
 810324e:	695a      	ldr	r2, [r3, #20]
 8103250:	687b      	ldr	r3, [r7, #4]
 8103252:	681b      	ldr	r3, [r3, #0]
 8103254:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8103258:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 810325a:	687b      	ldr	r3, [r7, #4]
 810325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810325e:	2b00      	cmp	r3, #0
 8103260:	d103      	bne.n	810326a <HAL_DMA_IRQHandler+0x736>
 8103262:	687b      	ldr	r3, [r7, #4]
 8103264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103266:	2b00      	cmp	r3, #0
 8103268:	d007      	beq.n	810327a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 810326a:	687b      	ldr	r3, [r7, #4]
 810326c:	681b      	ldr	r3, [r3, #0]
 810326e:	681a      	ldr	r2, [r3, #0]
 8103270:	687b      	ldr	r3, [r7, #4]
 8103272:	681b      	ldr	r3, [r3, #0]
 8103274:	f022 0208 	bic.w	r2, r2, #8
 8103278:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 810327a:	687b      	ldr	r3, [r7, #4]
 810327c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810327e:	f003 031f 	and.w	r3, r3, #31
 8103282:	223f      	movs	r2, #63	; 0x3f
 8103284:	409a      	lsls	r2, r3
 8103286:	6a3b      	ldr	r3, [r7, #32]
 8103288:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 810328a:	687b      	ldr	r3, [r7, #4]
 810328c:	2200      	movs	r2, #0
 810328e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8103292:	687b      	ldr	r3, [r7, #4]
 8103294:	2201      	movs	r2, #1
 8103296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 810329a:	687b      	ldr	r3, [r7, #4]
 810329c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810329e:	2b00      	cmp	r3, #0
 81032a0:	f000 834a 	beq.w	8103938 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 81032a4:	687b      	ldr	r3, [r7, #4]
 81032a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81032a8:	6878      	ldr	r0, [r7, #4]
 81032aa:	4798      	blx	r3
          }
          return;
 81032ac:	e344      	b.n	8103938 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 81032ae:	687b      	ldr	r3, [r7, #4]
 81032b0:	681b      	ldr	r3, [r3, #0]
 81032b2:	681b      	ldr	r3, [r3, #0]
 81032b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81032b8:	2b00      	cmp	r3, #0
 81032ba:	d018      	beq.n	81032ee <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 81032bc:	687b      	ldr	r3, [r7, #4]
 81032be:	681b      	ldr	r3, [r3, #0]
 81032c0:	681b      	ldr	r3, [r3, #0]
 81032c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81032c6:	2b00      	cmp	r3, #0
 81032c8:	d108      	bne.n	81032dc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 81032ca:	687b      	ldr	r3, [r7, #4]
 81032cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81032ce:	2b00      	cmp	r3, #0
 81032d0:	d02c      	beq.n	810332c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 81032d2:	687b      	ldr	r3, [r7, #4]
 81032d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81032d6:	6878      	ldr	r0, [r7, #4]
 81032d8:	4798      	blx	r3
 81032da:	e027      	b.n	810332c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 81032dc:	687b      	ldr	r3, [r7, #4]
 81032de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81032e0:	2b00      	cmp	r3, #0
 81032e2:	d023      	beq.n	810332c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 81032e4:	687b      	ldr	r3, [r7, #4]
 81032e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81032e8:	6878      	ldr	r0, [r7, #4]
 81032ea:	4798      	blx	r3
 81032ec:	e01e      	b.n	810332c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 81032ee:	687b      	ldr	r3, [r7, #4]
 81032f0:	681b      	ldr	r3, [r3, #0]
 81032f2:	681b      	ldr	r3, [r3, #0]
 81032f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81032f8:	2b00      	cmp	r3, #0
 81032fa:	d10f      	bne.n	810331c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 81032fc:	687b      	ldr	r3, [r7, #4]
 81032fe:	681b      	ldr	r3, [r3, #0]
 8103300:	681a      	ldr	r2, [r3, #0]
 8103302:	687b      	ldr	r3, [r7, #4]
 8103304:	681b      	ldr	r3, [r3, #0]
 8103306:	f022 0210 	bic.w	r2, r2, #16
 810330a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 810330c:	687b      	ldr	r3, [r7, #4]
 810330e:	2200      	movs	r2, #0
 8103310:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8103314:	687b      	ldr	r3, [r7, #4]
 8103316:	2201      	movs	r2, #1
 8103318:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 810331c:	687b      	ldr	r3, [r7, #4]
 810331e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103320:	2b00      	cmp	r3, #0
 8103322:	d003      	beq.n	810332c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8103324:	687b      	ldr	r3, [r7, #4]
 8103326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103328:	6878      	ldr	r0, [r7, #4]
 810332a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 810332c:	687b      	ldr	r3, [r7, #4]
 810332e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103330:	2b00      	cmp	r3, #0
 8103332:	f000 8306 	beq.w	8103942 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8103336:	687b      	ldr	r3, [r7, #4]
 8103338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810333a:	f003 0301 	and.w	r3, r3, #1
 810333e:	2b00      	cmp	r3, #0
 8103340:	f000 8088 	beq.w	8103454 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8103344:	687b      	ldr	r3, [r7, #4]
 8103346:	2204      	movs	r2, #4
 8103348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 810334c:	687b      	ldr	r3, [r7, #4]
 810334e:	681b      	ldr	r3, [r3, #0]
 8103350:	4a7a      	ldr	r2, [pc, #488]	; (810353c <HAL_DMA_IRQHandler+0xa08>)
 8103352:	4293      	cmp	r3, r2
 8103354:	d04a      	beq.n	81033ec <HAL_DMA_IRQHandler+0x8b8>
 8103356:	687b      	ldr	r3, [r7, #4]
 8103358:	681b      	ldr	r3, [r3, #0]
 810335a:	4a79      	ldr	r2, [pc, #484]	; (8103540 <HAL_DMA_IRQHandler+0xa0c>)
 810335c:	4293      	cmp	r3, r2
 810335e:	d045      	beq.n	81033ec <HAL_DMA_IRQHandler+0x8b8>
 8103360:	687b      	ldr	r3, [r7, #4]
 8103362:	681b      	ldr	r3, [r3, #0]
 8103364:	4a77      	ldr	r2, [pc, #476]	; (8103544 <HAL_DMA_IRQHandler+0xa10>)
 8103366:	4293      	cmp	r3, r2
 8103368:	d040      	beq.n	81033ec <HAL_DMA_IRQHandler+0x8b8>
 810336a:	687b      	ldr	r3, [r7, #4]
 810336c:	681b      	ldr	r3, [r3, #0]
 810336e:	4a76      	ldr	r2, [pc, #472]	; (8103548 <HAL_DMA_IRQHandler+0xa14>)
 8103370:	4293      	cmp	r3, r2
 8103372:	d03b      	beq.n	81033ec <HAL_DMA_IRQHandler+0x8b8>
 8103374:	687b      	ldr	r3, [r7, #4]
 8103376:	681b      	ldr	r3, [r3, #0]
 8103378:	4a74      	ldr	r2, [pc, #464]	; (810354c <HAL_DMA_IRQHandler+0xa18>)
 810337a:	4293      	cmp	r3, r2
 810337c:	d036      	beq.n	81033ec <HAL_DMA_IRQHandler+0x8b8>
 810337e:	687b      	ldr	r3, [r7, #4]
 8103380:	681b      	ldr	r3, [r3, #0]
 8103382:	4a73      	ldr	r2, [pc, #460]	; (8103550 <HAL_DMA_IRQHandler+0xa1c>)
 8103384:	4293      	cmp	r3, r2
 8103386:	d031      	beq.n	81033ec <HAL_DMA_IRQHandler+0x8b8>
 8103388:	687b      	ldr	r3, [r7, #4]
 810338a:	681b      	ldr	r3, [r3, #0]
 810338c:	4a71      	ldr	r2, [pc, #452]	; (8103554 <HAL_DMA_IRQHandler+0xa20>)
 810338e:	4293      	cmp	r3, r2
 8103390:	d02c      	beq.n	81033ec <HAL_DMA_IRQHandler+0x8b8>
 8103392:	687b      	ldr	r3, [r7, #4]
 8103394:	681b      	ldr	r3, [r3, #0]
 8103396:	4a70      	ldr	r2, [pc, #448]	; (8103558 <HAL_DMA_IRQHandler+0xa24>)
 8103398:	4293      	cmp	r3, r2
 810339a:	d027      	beq.n	81033ec <HAL_DMA_IRQHandler+0x8b8>
 810339c:	687b      	ldr	r3, [r7, #4]
 810339e:	681b      	ldr	r3, [r3, #0]
 81033a0:	4a6e      	ldr	r2, [pc, #440]	; (810355c <HAL_DMA_IRQHandler+0xa28>)
 81033a2:	4293      	cmp	r3, r2
 81033a4:	d022      	beq.n	81033ec <HAL_DMA_IRQHandler+0x8b8>
 81033a6:	687b      	ldr	r3, [r7, #4]
 81033a8:	681b      	ldr	r3, [r3, #0]
 81033aa:	4a6d      	ldr	r2, [pc, #436]	; (8103560 <HAL_DMA_IRQHandler+0xa2c>)
 81033ac:	4293      	cmp	r3, r2
 81033ae:	d01d      	beq.n	81033ec <HAL_DMA_IRQHandler+0x8b8>
 81033b0:	687b      	ldr	r3, [r7, #4]
 81033b2:	681b      	ldr	r3, [r3, #0]
 81033b4:	4a6b      	ldr	r2, [pc, #428]	; (8103564 <HAL_DMA_IRQHandler+0xa30>)
 81033b6:	4293      	cmp	r3, r2
 81033b8:	d018      	beq.n	81033ec <HAL_DMA_IRQHandler+0x8b8>
 81033ba:	687b      	ldr	r3, [r7, #4]
 81033bc:	681b      	ldr	r3, [r3, #0]
 81033be:	4a6a      	ldr	r2, [pc, #424]	; (8103568 <HAL_DMA_IRQHandler+0xa34>)
 81033c0:	4293      	cmp	r3, r2
 81033c2:	d013      	beq.n	81033ec <HAL_DMA_IRQHandler+0x8b8>
 81033c4:	687b      	ldr	r3, [r7, #4]
 81033c6:	681b      	ldr	r3, [r3, #0]
 81033c8:	4a68      	ldr	r2, [pc, #416]	; (810356c <HAL_DMA_IRQHandler+0xa38>)
 81033ca:	4293      	cmp	r3, r2
 81033cc:	d00e      	beq.n	81033ec <HAL_DMA_IRQHandler+0x8b8>
 81033ce:	687b      	ldr	r3, [r7, #4]
 81033d0:	681b      	ldr	r3, [r3, #0]
 81033d2:	4a67      	ldr	r2, [pc, #412]	; (8103570 <HAL_DMA_IRQHandler+0xa3c>)
 81033d4:	4293      	cmp	r3, r2
 81033d6:	d009      	beq.n	81033ec <HAL_DMA_IRQHandler+0x8b8>
 81033d8:	687b      	ldr	r3, [r7, #4]
 81033da:	681b      	ldr	r3, [r3, #0]
 81033dc:	4a65      	ldr	r2, [pc, #404]	; (8103574 <HAL_DMA_IRQHandler+0xa40>)
 81033de:	4293      	cmp	r3, r2
 81033e0:	d004      	beq.n	81033ec <HAL_DMA_IRQHandler+0x8b8>
 81033e2:	687b      	ldr	r3, [r7, #4]
 81033e4:	681b      	ldr	r3, [r3, #0]
 81033e6:	4a64      	ldr	r2, [pc, #400]	; (8103578 <HAL_DMA_IRQHandler+0xa44>)
 81033e8:	4293      	cmp	r3, r2
 81033ea:	d108      	bne.n	81033fe <HAL_DMA_IRQHandler+0x8ca>
 81033ec:	687b      	ldr	r3, [r7, #4]
 81033ee:	681b      	ldr	r3, [r3, #0]
 81033f0:	681a      	ldr	r2, [r3, #0]
 81033f2:	687b      	ldr	r3, [r7, #4]
 81033f4:	681b      	ldr	r3, [r3, #0]
 81033f6:	f022 0201 	bic.w	r2, r2, #1
 81033fa:	601a      	str	r2, [r3, #0]
 81033fc:	e007      	b.n	810340e <HAL_DMA_IRQHandler+0x8da>
 81033fe:	687b      	ldr	r3, [r7, #4]
 8103400:	681b      	ldr	r3, [r3, #0]
 8103402:	681a      	ldr	r2, [r3, #0]
 8103404:	687b      	ldr	r3, [r7, #4]
 8103406:	681b      	ldr	r3, [r3, #0]
 8103408:	f022 0201 	bic.w	r2, r2, #1
 810340c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 810340e:	68fb      	ldr	r3, [r7, #12]
 8103410:	3301      	adds	r3, #1
 8103412:	60fb      	str	r3, [r7, #12]
 8103414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103416:	429a      	cmp	r2, r3
 8103418:	d307      	bcc.n	810342a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 810341a:	687b      	ldr	r3, [r7, #4]
 810341c:	681b      	ldr	r3, [r3, #0]
 810341e:	681b      	ldr	r3, [r3, #0]
 8103420:	f003 0301 	and.w	r3, r3, #1
 8103424:	2b00      	cmp	r3, #0
 8103426:	d1f2      	bne.n	810340e <HAL_DMA_IRQHandler+0x8da>
 8103428:	e000      	b.n	810342c <HAL_DMA_IRQHandler+0x8f8>
            break;
 810342a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 810342c:	687b      	ldr	r3, [r7, #4]
 810342e:	2200      	movs	r2, #0
 8103430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8103434:	687b      	ldr	r3, [r7, #4]
 8103436:	681b      	ldr	r3, [r3, #0]
 8103438:	681b      	ldr	r3, [r3, #0]
 810343a:	f003 0301 	and.w	r3, r3, #1
 810343e:	2b00      	cmp	r3, #0
 8103440:	d004      	beq.n	810344c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8103442:	687b      	ldr	r3, [r7, #4]
 8103444:	2203      	movs	r2, #3
 8103446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 810344a:	e003      	b.n	8103454 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 810344c:	687b      	ldr	r3, [r7, #4]
 810344e:	2201      	movs	r2, #1
 8103450:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8103454:	687b      	ldr	r3, [r7, #4]
 8103456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103458:	2b00      	cmp	r3, #0
 810345a:	f000 8272 	beq.w	8103942 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 810345e:	687b      	ldr	r3, [r7, #4]
 8103460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103462:	6878      	ldr	r0, [r7, #4]
 8103464:	4798      	blx	r3
 8103466:	e26c      	b.n	8103942 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8103468:	687b      	ldr	r3, [r7, #4]
 810346a:	681b      	ldr	r3, [r3, #0]
 810346c:	4a43      	ldr	r2, [pc, #268]	; (810357c <HAL_DMA_IRQHandler+0xa48>)
 810346e:	4293      	cmp	r3, r2
 8103470:	d022      	beq.n	81034b8 <HAL_DMA_IRQHandler+0x984>
 8103472:	687b      	ldr	r3, [r7, #4]
 8103474:	681b      	ldr	r3, [r3, #0]
 8103476:	4a42      	ldr	r2, [pc, #264]	; (8103580 <HAL_DMA_IRQHandler+0xa4c>)
 8103478:	4293      	cmp	r3, r2
 810347a:	d01d      	beq.n	81034b8 <HAL_DMA_IRQHandler+0x984>
 810347c:	687b      	ldr	r3, [r7, #4]
 810347e:	681b      	ldr	r3, [r3, #0]
 8103480:	4a40      	ldr	r2, [pc, #256]	; (8103584 <HAL_DMA_IRQHandler+0xa50>)
 8103482:	4293      	cmp	r3, r2
 8103484:	d018      	beq.n	81034b8 <HAL_DMA_IRQHandler+0x984>
 8103486:	687b      	ldr	r3, [r7, #4]
 8103488:	681b      	ldr	r3, [r3, #0]
 810348a:	4a3f      	ldr	r2, [pc, #252]	; (8103588 <HAL_DMA_IRQHandler+0xa54>)
 810348c:	4293      	cmp	r3, r2
 810348e:	d013      	beq.n	81034b8 <HAL_DMA_IRQHandler+0x984>
 8103490:	687b      	ldr	r3, [r7, #4]
 8103492:	681b      	ldr	r3, [r3, #0]
 8103494:	4a3d      	ldr	r2, [pc, #244]	; (810358c <HAL_DMA_IRQHandler+0xa58>)
 8103496:	4293      	cmp	r3, r2
 8103498:	d00e      	beq.n	81034b8 <HAL_DMA_IRQHandler+0x984>
 810349a:	687b      	ldr	r3, [r7, #4]
 810349c:	681b      	ldr	r3, [r3, #0]
 810349e:	4a3c      	ldr	r2, [pc, #240]	; (8103590 <HAL_DMA_IRQHandler+0xa5c>)
 81034a0:	4293      	cmp	r3, r2
 81034a2:	d009      	beq.n	81034b8 <HAL_DMA_IRQHandler+0x984>
 81034a4:	687b      	ldr	r3, [r7, #4]
 81034a6:	681b      	ldr	r3, [r3, #0]
 81034a8:	4a3a      	ldr	r2, [pc, #232]	; (8103594 <HAL_DMA_IRQHandler+0xa60>)
 81034aa:	4293      	cmp	r3, r2
 81034ac:	d004      	beq.n	81034b8 <HAL_DMA_IRQHandler+0x984>
 81034ae:	687b      	ldr	r3, [r7, #4]
 81034b0:	681b      	ldr	r3, [r3, #0]
 81034b2:	4a39      	ldr	r2, [pc, #228]	; (8103598 <HAL_DMA_IRQHandler+0xa64>)
 81034b4:	4293      	cmp	r3, r2
 81034b6:	d101      	bne.n	81034bc <HAL_DMA_IRQHandler+0x988>
 81034b8:	2301      	movs	r3, #1
 81034ba:	e000      	b.n	81034be <HAL_DMA_IRQHandler+0x98a>
 81034bc:	2300      	movs	r3, #0
 81034be:	2b00      	cmp	r3, #0
 81034c0:	f000 823f 	beq.w	8103942 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 81034c4:	687b      	ldr	r3, [r7, #4]
 81034c6:	681b      	ldr	r3, [r3, #0]
 81034c8:	681b      	ldr	r3, [r3, #0]
 81034ca:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 81034cc:	687b      	ldr	r3, [r7, #4]
 81034ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81034d0:	f003 031f 	and.w	r3, r3, #31
 81034d4:	2204      	movs	r2, #4
 81034d6:	409a      	lsls	r2, r3
 81034d8:	697b      	ldr	r3, [r7, #20]
 81034da:	4013      	ands	r3, r2
 81034dc:	2b00      	cmp	r3, #0
 81034de:	f000 80cd 	beq.w	810367c <HAL_DMA_IRQHandler+0xb48>
 81034e2:	693b      	ldr	r3, [r7, #16]
 81034e4:	f003 0304 	and.w	r3, r3, #4
 81034e8:	2b00      	cmp	r3, #0
 81034ea:	f000 80c7 	beq.w	810367c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 81034ee:	687b      	ldr	r3, [r7, #4]
 81034f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81034f2:	f003 031f 	and.w	r3, r3, #31
 81034f6:	2204      	movs	r2, #4
 81034f8:	409a      	lsls	r2, r3
 81034fa:	69fb      	ldr	r3, [r7, #28]
 81034fc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81034fe:	693b      	ldr	r3, [r7, #16]
 8103500:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103504:	2b00      	cmp	r3, #0
 8103506:	d049      	beq.n	810359c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8103508:	693b      	ldr	r3, [r7, #16]
 810350a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810350e:	2b00      	cmp	r3, #0
 8103510:	d109      	bne.n	8103526 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8103512:	687b      	ldr	r3, [r7, #4]
 8103514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103516:	2b00      	cmp	r3, #0
 8103518:	f000 8210 	beq.w	810393c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 810351c:	687b      	ldr	r3, [r7, #4]
 810351e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103520:	6878      	ldr	r0, [r7, #4]
 8103522:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103524:	e20a      	b.n	810393c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8103526:	687b      	ldr	r3, [r7, #4]
 8103528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810352a:	2b00      	cmp	r3, #0
 810352c:	f000 8206 	beq.w	810393c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8103530:	687b      	ldr	r3, [r7, #4]
 8103532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103534:	6878      	ldr	r0, [r7, #4]
 8103536:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103538:	e200      	b.n	810393c <HAL_DMA_IRQHandler+0xe08>
 810353a:	bf00      	nop
 810353c:	40020010 	.word	0x40020010
 8103540:	40020028 	.word	0x40020028
 8103544:	40020040 	.word	0x40020040
 8103548:	40020058 	.word	0x40020058
 810354c:	40020070 	.word	0x40020070
 8103550:	40020088 	.word	0x40020088
 8103554:	400200a0 	.word	0x400200a0
 8103558:	400200b8 	.word	0x400200b8
 810355c:	40020410 	.word	0x40020410
 8103560:	40020428 	.word	0x40020428
 8103564:	40020440 	.word	0x40020440
 8103568:	40020458 	.word	0x40020458
 810356c:	40020470 	.word	0x40020470
 8103570:	40020488 	.word	0x40020488
 8103574:	400204a0 	.word	0x400204a0
 8103578:	400204b8 	.word	0x400204b8
 810357c:	58025408 	.word	0x58025408
 8103580:	5802541c 	.word	0x5802541c
 8103584:	58025430 	.word	0x58025430
 8103588:	58025444 	.word	0x58025444
 810358c:	58025458 	.word	0x58025458
 8103590:	5802546c 	.word	0x5802546c
 8103594:	58025480 	.word	0x58025480
 8103598:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 810359c:	693b      	ldr	r3, [r7, #16]
 810359e:	f003 0320 	and.w	r3, r3, #32
 81035a2:	2b00      	cmp	r3, #0
 81035a4:	d160      	bne.n	8103668 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 81035a6:	687b      	ldr	r3, [r7, #4]
 81035a8:	681b      	ldr	r3, [r3, #0]
 81035aa:	4a8c      	ldr	r2, [pc, #560]	; (81037dc <HAL_DMA_IRQHandler+0xca8>)
 81035ac:	4293      	cmp	r3, r2
 81035ae:	d04a      	beq.n	8103646 <HAL_DMA_IRQHandler+0xb12>
 81035b0:	687b      	ldr	r3, [r7, #4]
 81035b2:	681b      	ldr	r3, [r3, #0]
 81035b4:	4a8a      	ldr	r2, [pc, #552]	; (81037e0 <HAL_DMA_IRQHandler+0xcac>)
 81035b6:	4293      	cmp	r3, r2
 81035b8:	d045      	beq.n	8103646 <HAL_DMA_IRQHandler+0xb12>
 81035ba:	687b      	ldr	r3, [r7, #4]
 81035bc:	681b      	ldr	r3, [r3, #0]
 81035be:	4a89      	ldr	r2, [pc, #548]	; (81037e4 <HAL_DMA_IRQHandler+0xcb0>)
 81035c0:	4293      	cmp	r3, r2
 81035c2:	d040      	beq.n	8103646 <HAL_DMA_IRQHandler+0xb12>
 81035c4:	687b      	ldr	r3, [r7, #4]
 81035c6:	681b      	ldr	r3, [r3, #0]
 81035c8:	4a87      	ldr	r2, [pc, #540]	; (81037e8 <HAL_DMA_IRQHandler+0xcb4>)
 81035ca:	4293      	cmp	r3, r2
 81035cc:	d03b      	beq.n	8103646 <HAL_DMA_IRQHandler+0xb12>
 81035ce:	687b      	ldr	r3, [r7, #4]
 81035d0:	681b      	ldr	r3, [r3, #0]
 81035d2:	4a86      	ldr	r2, [pc, #536]	; (81037ec <HAL_DMA_IRQHandler+0xcb8>)
 81035d4:	4293      	cmp	r3, r2
 81035d6:	d036      	beq.n	8103646 <HAL_DMA_IRQHandler+0xb12>
 81035d8:	687b      	ldr	r3, [r7, #4]
 81035da:	681b      	ldr	r3, [r3, #0]
 81035dc:	4a84      	ldr	r2, [pc, #528]	; (81037f0 <HAL_DMA_IRQHandler+0xcbc>)
 81035de:	4293      	cmp	r3, r2
 81035e0:	d031      	beq.n	8103646 <HAL_DMA_IRQHandler+0xb12>
 81035e2:	687b      	ldr	r3, [r7, #4]
 81035e4:	681b      	ldr	r3, [r3, #0]
 81035e6:	4a83      	ldr	r2, [pc, #524]	; (81037f4 <HAL_DMA_IRQHandler+0xcc0>)
 81035e8:	4293      	cmp	r3, r2
 81035ea:	d02c      	beq.n	8103646 <HAL_DMA_IRQHandler+0xb12>
 81035ec:	687b      	ldr	r3, [r7, #4]
 81035ee:	681b      	ldr	r3, [r3, #0]
 81035f0:	4a81      	ldr	r2, [pc, #516]	; (81037f8 <HAL_DMA_IRQHandler+0xcc4>)
 81035f2:	4293      	cmp	r3, r2
 81035f4:	d027      	beq.n	8103646 <HAL_DMA_IRQHandler+0xb12>
 81035f6:	687b      	ldr	r3, [r7, #4]
 81035f8:	681b      	ldr	r3, [r3, #0]
 81035fa:	4a80      	ldr	r2, [pc, #512]	; (81037fc <HAL_DMA_IRQHandler+0xcc8>)
 81035fc:	4293      	cmp	r3, r2
 81035fe:	d022      	beq.n	8103646 <HAL_DMA_IRQHandler+0xb12>
 8103600:	687b      	ldr	r3, [r7, #4]
 8103602:	681b      	ldr	r3, [r3, #0]
 8103604:	4a7e      	ldr	r2, [pc, #504]	; (8103800 <HAL_DMA_IRQHandler+0xccc>)
 8103606:	4293      	cmp	r3, r2
 8103608:	d01d      	beq.n	8103646 <HAL_DMA_IRQHandler+0xb12>
 810360a:	687b      	ldr	r3, [r7, #4]
 810360c:	681b      	ldr	r3, [r3, #0]
 810360e:	4a7d      	ldr	r2, [pc, #500]	; (8103804 <HAL_DMA_IRQHandler+0xcd0>)
 8103610:	4293      	cmp	r3, r2
 8103612:	d018      	beq.n	8103646 <HAL_DMA_IRQHandler+0xb12>
 8103614:	687b      	ldr	r3, [r7, #4]
 8103616:	681b      	ldr	r3, [r3, #0]
 8103618:	4a7b      	ldr	r2, [pc, #492]	; (8103808 <HAL_DMA_IRQHandler+0xcd4>)
 810361a:	4293      	cmp	r3, r2
 810361c:	d013      	beq.n	8103646 <HAL_DMA_IRQHandler+0xb12>
 810361e:	687b      	ldr	r3, [r7, #4]
 8103620:	681b      	ldr	r3, [r3, #0]
 8103622:	4a7a      	ldr	r2, [pc, #488]	; (810380c <HAL_DMA_IRQHandler+0xcd8>)
 8103624:	4293      	cmp	r3, r2
 8103626:	d00e      	beq.n	8103646 <HAL_DMA_IRQHandler+0xb12>
 8103628:	687b      	ldr	r3, [r7, #4]
 810362a:	681b      	ldr	r3, [r3, #0]
 810362c:	4a78      	ldr	r2, [pc, #480]	; (8103810 <HAL_DMA_IRQHandler+0xcdc>)
 810362e:	4293      	cmp	r3, r2
 8103630:	d009      	beq.n	8103646 <HAL_DMA_IRQHandler+0xb12>
 8103632:	687b      	ldr	r3, [r7, #4]
 8103634:	681b      	ldr	r3, [r3, #0]
 8103636:	4a77      	ldr	r2, [pc, #476]	; (8103814 <HAL_DMA_IRQHandler+0xce0>)
 8103638:	4293      	cmp	r3, r2
 810363a:	d004      	beq.n	8103646 <HAL_DMA_IRQHandler+0xb12>
 810363c:	687b      	ldr	r3, [r7, #4]
 810363e:	681b      	ldr	r3, [r3, #0]
 8103640:	4a75      	ldr	r2, [pc, #468]	; (8103818 <HAL_DMA_IRQHandler+0xce4>)
 8103642:	4293      	cmp	r3, r2
 8103644:	d108      	bne.n	8103658 <HAL_DMA_IRQHandler+0xb24>
 8103646:	687b      	ldr	r3, [r7, #4]
 8103648:	681b      	ldr	r3, [r3, #0]
 810364a:	681a      	ldr	r2, [r3, #0]
 810364c:	687b      	ldr	r3, [r7, #4]
 810364e:	681b      	ldr	r3, [r3, #0]
 8103650:	f022 0208 	bic.w	r2, r2, #8
 8103654:	601a      	str	r2, [r3, #0]
 8103656:	e007      	b.n	8103668 <HAL_DMA_IRQHandler+0xb34>
 8103658:	687b      	ldr	r3, [r7, #4]
 810365a:	681b      	ldr	r3, [r3, #0]
 810365c:	681a      	ldr	r2, [r3, #0]
 810365e:	687b      	ldr	r3, [r7, #4]
 8103660:	681b      	ldr	r3, [r3, #0]
 8103662:	f022 0204 	bic.w	r2, r2, #4
 8103666:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8103668:	687b      	ldr	r3, [r7, #4]
 810366a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810366c:	2b00      	cmp	r3, #0
 810366e:	f000 8165 	beq.w	810393c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8103672:	687b      	ldr	r3, [r7, #4]
 8103674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103676:	6878      	ldr	r0, [r7, #4]
 8103678:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810367a:	e15f      	b.n	810393c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 810367c:	687b      	ldr	r3, [r7, #4]
 810367e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103680:	f003 031f 	and.w	r3, r3, #31
 8103684:	2202      	movs	r2, #2
 8103686:	409a      	lsls	r2, r3
 8103688:	697b      	ldr	r3, [r7, #20]
 810368a:	4013      	ands	r3, r2
 810368c:	2b00      	cmp	r3, #0
 810368e:	f000 80c5 	beq.w	810381c <HAL_DMA_IRQHandler+0xce8>
 8103692:	693b      	ldr	r3, [r7, #16]
 8103694:	f003 0302 	and.w	r3, r3, #2
 8103698:	2b00      	cmp	r3, #0
 810369a:	f000 80bf 	beq.w	810381c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 810369e:	687b      	ldr	r3, [r7, #4]
 81036a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81036a2:	f003 031f 	and.w	r3, r3, #31
 81036a6:	2202      	movs	r2, #2
 81036a8:	409a      	lsls	r2, r3
 81036aa:	69fb      	ldr	r3, [r7, #28]
 81036ac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81036ae:	693b      	ldr	r3, [r7, #16]
 81036b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81036b4:	2b00      	cmp	r3, #0
 81036b6:	d018      	beq.n	81036ea <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 81036b8:	693b      	ldr	r3, [r7, #16]
 81036ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81036be:	2b00      	cmp	r3, #0
 81036c0:	d109      	bne.n	81036d6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 81036c2:	687b      	ldr	r3, [r7, #4]
 81036c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81036c6:	2b00      	cmp	r3, #0
 81036c8:	f000 813a 	beq.w	8103940 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 81036cc:	687b      	ldr	r3, [r7, #4]
 81036ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81036d0:	6878      	ldr	r0, [r7, #4]
 81036d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81036d4:	e134      	b.n	8103940 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 81036d6:	687b      	ldr	r3, [r7, #4]
 81036d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81036da:	2b00      	cmp	r3, #0
 81036dc:	f000 8130 	beq.w	8103940 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 81036e0:	687b      	ldr	r3, [r7, #4]
 81036e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81036e4:	6878      	ldr	r0, [r7, #4]
 81036e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81036e8:	e12a      	b.n	8103940 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 81036ea:	693b      	ldr	r3, [r7, #16]
 81036ec:	f003 0320 	and.w	r3, r3, #32
 81036f0:	2b00      	cmp	r3, #0
 81036f2:	d168      	bne.n	81037c6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 81036f4:	687b      	ldr	r3, [r7, #4]
 81036f6:	681b      	ldr	r3, [r3, #0]
 81036f8:	4a38      	ldr	r2, [pc, #224]	; (81037dc <HAL_DMA_IRQHandler+0xca8>)
 81036fa:	4293      	cmp	r3, r2
 81036fc:	d04a      	beq.n	8103794 <HAL_DMA_IRQHandler+0xc60>
 81036fe:	687b      	ldr	r3, [r7, #4]
 8103700:	681b      	ldr	r3, [r3, #0]
 8103702:	4a37      	ldr	r2, [pc, #220]	; (81037e0 <HAL_DMA_IRQHandler+0xcac>)
 8103704:	4293      	cmp	r3, r2
 8103706:	d045      	beq.n	8103794 <HAL_DMA_IRQHandler+0xc60>
 8103708:	687b      	ldr	r3, [r7, #4]
 810370a:	681b      	ldr	r3, [r3, #0]
 810370c:	4a35      	ldr	r2, [pc, #212]	; (81037e4 <HAL_DMA_IRQHandler+0xcb0>)
 810370e:	4293      	cmp	r3, r2
 8103710:	d040      	beq.n	8103794 <HAL_DMA_IRQHandler+0xc60>
 8103712:	687b      	ldr	r3, [r7, #4]
 8103714:	681b      	ldr	r3, [r3, #0]
 8103716:	4a34      	ldr	r2, [pc, #208]	; (81037e8 <HAL_DMA_IRQHandler+0xcb4>)
 8103718:	4293      	cmp	r3, r2
 810371a:	d03b      	beq.n	8103794 <HAL_DMA_IRQHandler+0xc60>
 810371c:	687b      	ldr	r3, [r7, #4]
 810371e:	681b      	ldr	r3, [r3, #0]
 8103720:	4a32      	ldr	r2, [pc, #200]	; (81037ec <HAL_DMA_IRQHandler+0xcb8>)
 8103722:	4293      	cmp	r3, r2
 8103724:	d036      	beq.n	8103794 <HAL_DMA_IRQHandler+0xc60>
 8103726:	687b      	ldr	r3, [r7, #4]
 8103728:	681b      	ldr	r3, [r3, #0]
 810372a:	4a31      	ldr	r2, [pc, #196]	; (81037f0 <HAL_DMA_IRQHandler+0xcbc>)
 810372c:	4293      	cmp	r3, r2
 810372e:	d031      	beq.n	8103794 <HAL_DMA_IRQHandler+0xc60>
 8103730:	687b      	ldr	r3, [r7, #4]
 8103732:	681b      	ldr	r3, [r3, #0]
 8103734:	4a2f      	ldr	r2, [pc, #188]	; (81037f4 <HAL_DMA_IRQHandler+0xcc0>)
 8103736:	4293      	cmp	r3, r2
 8103738:	d02c      	beq.n	8103794 <HAL_DMA_IRQHandler+0xc60>
 810373a:	687b      	ldr	r3, [r7, #4]
 810373c:	681b      	ldr	r3, [r3, #0]
 810373e:	4a2e      	ldr	r2, [pc, #184]	; (81037f8 <HAL_DMA_IRQHandler+0xcc4>)
 8103740:	4293      	cmp	r3, r2
 8103742:	d027      	beq.n	8103794 <HAL_DMA_IRQHandler+0xc60>
 8103744:	687b      	ldr	r3, [r7, #4]
 8103746:	681b      	ldr	r3, [r3, #0]
 8103748:	4a2c      	ldr	r2, [pc, #176]	; (81037fc <HAL_DMA_IRQHandler+0xcc8>)
 810374a:	4293      	cmp	r3, r2
 810374c:	d022      	beq.n	8103794 <HAL_DMA_IRQHandler+0xc60>
 810374e:	687b      	ldr	r3, [r7, #4]
 8103750:	681b      	ldr	r3, [r3, #0]
 8103752:	4a2b      	ldr	r2, [pc, #172]	; (8103800 <HAL_DMA_IRQHandler+0xccc>)
 8103754:	4293      	cmp	r3, r2
 8103756:	d01d      	beq.n	8103794 <HAL_DMA_IRQHandler+0xc60>
 8103758:	687b      	ldr	r3, [r7, #4]
 810375a:	681b      	ldr	r3, [r3, #0]
 810375c:	4a29      	ldr	r2, [pc, #164]	; (8103804 <HAL_DMA_IRQHandler+0xcd0>)
 810375e:	4293      	cmp	r3, r2
 8103760:	d018      	beq.n	8103794 <HAL_DMA_IRQHandler+0xc60>
 8103762:	687b      	ldr	r3, [r7, #4]
 8103764:	681b      	ldr	r3, [r3, #0]
 8103766:	4a28      	ldr	r2, [pc, #160]	; (8103808 <HAL_DMA_IRQHandler+0xcd4>)
 8103768:	4293      	cmp	r3, r2
 810376a:	d013      	beq.n	8103794 <HAL_DMA_IRQHandler+0xc60>
 810376c:	687b      	ldr	r3, [r7, #4]
 810376e:	681b      	ldr	r3, [r3, #0]
 8103770:	4a26      	ldr	r2, [pc, #152]	; (810380c <HAL_DMA_IRQHandler+0xcd8>)
 8103772:	4293      	cmp	r3, r2
 8103774:	d00e      	beq.n	8103794 <HAL_DMA_IRQHandler+0xc60>
 8103776:	687b      	ldr	r3, [r7, #4]
 8103778:	681b      	ldr	r3, [r3, #0]
 810377a:	4a25      	ldr	r2, [pc, #148]	; (8103810 <HAL_DMA_IRQHandler+0xcdc>)
 810377c:	4293      	cmp	r3, r2
 810377e:	d009      	beq.n	8103794 <HAL_DMA_IRQHandler+0xc60>
 8103780:	687b      	ldr	r3, [r7, #4]
 8103782:	681b      	ldr	r3, [r3, #0]
 8103784:	4a23      	ldr	r2, [pc, #140]	; (8103814 <HAL_DMA_IRQHandler+0xce0>)
 8103786:	4293      	cmp	r3, r2
 8103788:	d004      	beq.n	8103794 <HAL_DMA_IRQHandler+0xc60>
 810378a:	687b      	ldr	r3, [r7, #4]
 810378c:	681b      	ldr	r3, [r3, #0]
 810378e:	4a22      	ldr	r2, [pc, #136]	; (8103818 <HAL_DMA_IRQHandler+0xce4>)
 8103790:	4293      	cmp	r3, r2
 8103792:	d108      	bne.n	81037a6 <HAL_DMA_IRQHandler+0xc72>
 8103794:	687b      	ldr	r3, [r7, #4]
 8103796:	681b      	ldr	r3, [r3, #0]
 8103798:	681a      	ldr	r2, [r3, #0]
 810379a:	687b      	ldr	r3, [r7, #4]
 810379c:	681b      	ldr	r3, [r3, #0]
 810379e:	f022 0214 	bic.w	r2, r2, #20
 81037a2:	601a      	str	r2, [r3, #0]
 81037a4:	e007      	b.n	81037b6 <HAL_DMA_IRQHandler+0xc82>
 81037a6:	687b      	ldr	r3, [r7, #4]
 81037a8:	681b      	ldr	r3, [r3, #0]
 81037aa:	681a      	ldr	r2, [r3, #0]
 81037ac:	687b      	ldr	r3, [r7, #4]
 81037ae:	681b      	ldr	r3, [r3, #0]
 81037b0:	f022 020a 	bic.w	r2, r2, #10
 81037b4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 81037b6:	687b      	ldr	r3, [r7, #4]
 81037b8:	2200      	movs	r2, #0
 81037ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81037be:	687b      	ldr	r3, [r7, #4]
 81037c0:	2201      	movs	r2, #1
 81037c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 81037c6:	687b      	ldr	r3, [r7, #4]
 81037c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81037ca:	2b00      	cmp	r3, #0
 81037cc:	f000 80b8 	beq.w	8103940 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 81037d0:	687b      	ldr	r3, [r7, #4]
 81037d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81037d4:	6878      	ldr	r0, [r7, #4]
 81037d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81037d8:	e0b2      	b.n	8103940 <HAL_DMA_IRQHandler+0xe0c>
 81037da:	bf00      	nop
 81037dc:	40020010 	.word	0x40020010
 81037e0:	40020028 	.word	0x40020028
 81037e4:	40020040 	.word	0x40020040
 81037e8:	40020058 	.word	0x40020058
 81037ec:	40020070 	.word	0x40020070
 81037f0:	40020088 	.word	0x40020088
 81037f4:	400200a0 	.word	0x400200a0
 81037f8:	400200b8 	.word	0x400200b8
 81037fc:	40020410 	.word	0x40020410
 8103800:	40020428 	.word	0x40020428
 8103804:	40020440 	.word	0x40020440
 8103808:	40020458 	.word	0x40020458
 810380c:	40020470 	.word	0x40020470
 8103810:	40020488 	.word	0x40020488
 8103814:	400204a0 	.word	0x400204a0
 8103818:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 810381c:	687b      	ldr	r3, [r7, #4]
 810381e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103820:	f003 031f 	and.w	r3, r3, #31
 8103824:	2208      	movs	r2, #8
 8103826:	409a      	lsls	r2, r3
 8103828:	697b      	ldr	r3, [r7, #20]
 810382a:	4013      	ands	r3, r2
 810382c:	2b00      	cmp	r3, #0
 810382e:	f000 8088 	beq.w	8103942 <HAL_DMA_IRQHandler+0xe0e>
 8103832:	693b      	ldr	r3, [r7, #16]
 8103834:	f003 0308 	and.w	r3, r3, #8
 8103838:	2b00      	cmp	r3, #0
 810383a:	f000 8082 	beq.w	8103942 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 810383e:	687b      	ldr	r3, [r7, #4]
 8103840:	681b      	ldr	r3, [r3, #0]
 8103842:	4a41      	ldr	r2, [pc, #260]	; (8103948 <HAL_DMA_IRQHandler+0xe14>)
 8103844:	4293      	cmp	r3, r2
 8103846:	d04a      	beq.n	81038de <HAL_DMA_IRQHandler+0xdaa>
 8103848:	687b      	ldr	r3, [r7, #4]
 810384a:	681b      	ldr	r3, [r3, #0]
 810384c:	4a3f      	ldr	r2, [pc, #252]	; (810394c <HAL_DMA_IRQHandler+0xe18>)
 810384e:	4293      	cmp	r3, r2
 8103850:	d045      	beq.n	81038de <HAL_DMA_IRQHandler+0xdaa>
 8103852:	687b      	ldr	r3, [r7, #4]
 8103854:	681b      	ldr	r3, [r3, #0]
 8103856:	4a3e      	ldr	r2, [pc, #248]	; (8103950 <HAL_DMA_IRQHandler+0xe1c>)
 8103858:	4293      	cmp	r3, r2
 810385a:	d040      	beq.n	81038de <HAL_DMA_IRQHandler+0xdaa>
 810385c:	687b      	ldr	r3, [r7, #4]
 810385e:	681b      	ldr	r3, [r3, #0]
 8103860:	4a3c      	ldr	r2, [pc, #240]	; (8103954 <HAL_DMA_IRQHandler+0xe20>)
 8103862:	4293      	cmp	r3, r2
 8103864:	d03b      	beq.n	81038de <HAL_DMA_IRQHandler+0xdaa>
 8103866:	687b      	ldr	r3, [r7, #4]
 8103868:	681b      	ldr	r3, [r3, #0]
 810386a:	4a3b      	ldr	r2, [pc, #236]	; (8103958 <HAL_DMA_IRQHandler+0xe24>)
 810386c:	4293      	cmp	r3, r2
 810386e:	d036      	beq.n	81038de <HAL_DMA_IRQHandler+0xdaa>
 8103870:	687b      	ldr	r3, [r7, #4]
 8103872:	681b      	ldr	r3, [r3, #0]
 8103874:	4a39      	ldr	r2, [pc, #228]	; (810395c <HAL_DMA_IRQHandler+0xe28>)
 8103876:	4293      	cmp	r3, r2
 8103878:	d031      	beq.n	81038de <HAL_DMA_IRQHandler+0xdaa>
 810387a:	687b      	ldr	r3, [r7, #4]
 810387c:	681b      	ldr	r3, [r3, #0]
 810387e:	4a38      	ldr	r2, [pc, #224]	; (8103960 <HAL_DMA_IRQHandler+0xe2c>)
 8103880:	4293      	cmp	r3, r2
 8103882:	d02c      	beq.n	81038de <HAL_DMA_IRQHandler+0xdaa>
 8103884:	687b      	ldr	r3, [r7, #4]
 8103886:	681b      	ldr	r3, [r3, #0]
 8103888:	4a36      	ldr	r2, [pc, #216]	; (8103964 <HAL_DMA_IRQHandler+0xe30>)
 810388a:	4293      	cmp	r3, r2
 810388c:	d027      	beq.n	81038de <HAL_DMA_IRQHandler+0xdaa>
 810388e:	687b      	ldr	r3, [r7, #4]
 8103890:	681b      	ldr	r3, [r3, #0]
 8103892:	4a35      	ldr	r2, [pc, #212]	; (8103968 <HAL_DMA_IRQHandler+0xe34>)
 8103894:	4293      	cmp	r3, r2
 8103896:	d022      	beq.n	81038de <HAL_DMA_IRQHandler+0xdaa>
 8103898:	687b      	ldr	r3, [r7, #4]
 810389a:	681b      	ldr	r3, [r3, #0]
 810389c:	4a33      	ldr	r2, [pc, #204]	; (810396c <HAL_DMA_IRQHandler+0xe38>)
 810389e:	4293      	cmp	r3, r2
 81038a0:	d01d      	beq.n	81038de <HAL_DMA_IRQHandler+0xdaa>
 81038a2:	687b      	ldr	r3, [r7, #4]
 81038a4:	681b      	ldr	r3, [r3, #0]
 81038a6:	4a32      	ldr	r2, [pc, #200]	; (8103970 <HAL_DMA_IRQHandler+0xe3c>)
 81038a8:	4293      	cmp	r3, r2
 81038aa:	d018      	beq.n	81038de <HAL_DMA_IRQHandler+0xdaa>
 81038ac:	687b      	ldr	r3, [r7, #4]
 81038ae:	681b      	ldr	r3, [r3, #0]
 81038b0:	4a30      	ldr	r2, [pc, #192]	; (8103974 <HAL_DMA_IRQHandler+0xe40>)
 81038b2:	4293      	cmp	r3, r2
 81038b4:	d013      	beq.n	81038de <HAL_DMA_IRQHandler+0xdaa>
 81038b6:	687b      	ldr	r3, [r7, #4]
 81038b8:	681b      	ldr	r3, [r3, #0]
 81038ba:	4a2f      	ldr	r2, [pc, #188]	; (8103978 <HAL_DMA_IRQHandler+0xe44>)
 81038bc:	4293      	cmp	r3, r2
 81038be:	d00e      	beq.n	81038de <HAL_DMA_IRQHandler+0xdaa>
 81038c0:	687b      	ldr	r3, [r7, #4]
 81038c2:	681b      	ldr	r3, [r3, #0]
 81038c4:	4a2d      	ldr	r2, [pc, #180]	; (810397c <HAL_DMA_IRQHandler+0xe48>)
 81038c6:	4293      	cmp	r3, r2
 81038c8:	d009      	beq.n	81038de <HAL_DMA_IRQHandler+0xdaa>
 81038ca:	687b      	ldr	r3, [r7, #4]
 81038cc:	681b      	ldr	r3, [r3, #0]
 81038ce:	4a2c      	ldr	r2, [pc, #176]	; (8103980 <HAL_DMA_IRQHandler+0xe4c>)
 81038d0:	4293      	cmp	r3, r2
 81038d2:	d004      	beq.n	81038de <HAL_DMA_IRQHandler+0xdaa>
 81038d4:	687b      	ldr	r3, [r7, #4]
 81038d6:	681b      	ldr	r3, [r3, #0]
 81038d8:	4a2a      	ldr	r2, [pc, #168]	; (8103984 <HAL_DMA_IRQHandler+0xe50>)
 81038da:	4293      	cmp	r3, r2
 81038dc:	d108      	bne.n	81038f0 <HAL_DMA_IRQHandler+0xdbc>
 81038de:	687b      	ldr	r3, [r7, #4]
 81038e0:	681b      	ldr	r3, [r3, #0]
 81038e2:	681a      	ldr	r2, [r3, #0]
 81038e4:	687b      	ldr	r3, [r7, #4]
 81038e6:	681b      	ldr	r3, [r3, #0]
 81038e8:	f022 021c 	bic.w	r2, r2, #28
 81038ec:	601a      	str	r2, [r3, #0]
 81038ee:	e007      	b.n	8103900 <HAL_DMA_IRQHandler+0xdcc>
 81038f0:	687b      	ldr	r3, [r7, #4]
 81038f2:	681b      	ldr	r3, [r3, #0]
 81038f4:	681a      	ldr	r2, [r3, #0]
 81038f6:	687b      	ldr	r3, [r7, #4]
 81038f8:	681b      	ldr	r3, [r3, #0]
 81038fa:	f022 020e 	bic.w	r2, r2, #14
 81038fe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8103900:	687b      	ldr	r3, [r7, #4]
 8103902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103904:	f003 031f 	and.w	r3, r3, #31
 8103908:	2201      	movs	r2, #1
 810390a:	409a      	lsls	r2, r3
 810390c:	69fb      	ldr	r3, [r7, #28]
 810390e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8103910:	687b      	ldr	r3, [r7, #4]
 8103912:	2201      	movs	r2, #1
 8103914:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8103916:	687b      	ldr	r3, [r7, #4]
 8103918:	2200      	movs	r2, #0
 810391a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 810391e:	687b      	ldr	r3, [r7, #4]
 8103920:	2201      	movs	r2, #1
 8103922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8103926:	687b      	ldr	r3, [r7, #4]
 8103928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810392a:	2b00      	cmp	r3, #0
 810392c:	d009      	beq.n	8103942 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 810392e:	687b      	ldr	r3, [r7, #4]
 8103930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103932:	6878      	ldr	r0, [r7, #4]
 8103934:	4798      	blx	r3
 8103936:	e004      	b.n	8103942 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8103938:	bf00      	nop
 810393a:	e002      	b.n	8103942 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810393c:	bf00      	nop
 810393e:	e000      	b.n	8103942 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103940:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8103942:	3728      	adds	r7, #40	; 0x28
 8103944:	46bd      	mov	sp, r7
 8103946:	bd80      	pop	{r7, pc}
 8103948:	40020010 	.word	0x40020010
 810394c:	40020028 	.word	0x40020028
 8103950:	40020040 	.word	0x40020040
 8103954:	40020058 	.word	0x40020058
 8103958:	40020070 	.word	0x40020070
 810395c:	40020088 	.word	0x40020088
 8103960:	400200a0 	.word	0x400200a0
 8103964:	400200b8 	.word	0x400200b8
 8103968:	40020410 	.word	0x40020410
 810396c:	40020428 	.word	0x40020428
 8103970:	40020440 	.word	0x40020440
 8103974:	40020458 	.word	0x40020458
 8103978:	40020470 	.word	0x40020470
 810397c:	40020488 	.word	0x40020488
 8103980:	400204a0 	.word	0x400204a0
 8103984:	400204b8 	.word	0x400204b8

08103988 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8103988:	b480      	push	{r7}
 810398a:	b085      	sub	sp, #20
 810398c:	af00      	add	r7, sp, #0
 810398e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103990:	687b      	ldr	r3, [r7, #4]
 8103992:	681b      	ldr	r3, [r3, #0]
 8103994:	4a43      	ldr	r2, [pc, #268]	; (8103aa4 <DMA_CalcBaseAndBitshift+0x11c>)
 8103996:	4293      	cmp	r3, r2
 8103998:	d04a      	beq.n	8103a30 <DMA_CalcBaseAndBitshift+0xa8>
 810399a:	687b      	ldr	r3, [r7, #4]
 810399c:	681b      	ldr	r3, [r3, #0]
 810399e:	4a42      	ldr	r2, [pc, #264]	; (8103aa8 <DMA_CalcBaseAndBitshift+0x120>)
 81039a0:	4293      	cmp	r3, r2
 81039a2:	d045      	beq.n	8103a30 <DMA_CalcBaseAndBitshift+0xa8>
 81039a4:	687b      	ldr	r3, [r7, #4]
 81039a6:	681b      	ldr	r3, [r3, #0]
 81039a8:	4a40      	ldr	r2, [pc, #256]	; (8103aac <DMA_CalcBaseAndBitshift+0x124>)
 81039aa:	4293      	cmp	r3, r2
 81039ac:	d040      	beq.n	8103a30 <DMA_CalcBaseAndBitshift+0xa8>
 81039ae:	687b      	ldr	r3, [r7, #4]
 81039b0:	681b      	ldr	r3, [r3, #0]
 81039b2:	4a3f      	ldr	r2, [pc, #252]	; (8103ab0 <DMA_CalcBaseAndBitshift+0x128>)
 81039b4:	4293      	cmp	r3, r2
 81039b6:	d03b      	beq.n	8103a30 <DMA_CalcBaseAndBitshift+0xa8>
 81039b8:	687b      	ldr	r3, [r7, #4]
 81039ba:	681b      	ldr	r3, [r3, #0]
 81039bc:	4a3d      	ldr	r2, [pc, #244]	; (8103ab4 <DMA_CalcBaseAndBitshift+0x12c>)
 81039be:	4293      	cmp	r3, r2
 81039c0:	d036      	beq.n	8103a30 <DMA_CalcBaseAndBitshift+0xa8>
 81039c2:	687b      	ldr	r3, [r7, #4]
 81039c4:	681b      	ldr	r3, [r3, #0]
 81039c6:	4a3c      	ldr	r2, [pc, #240]	; (8103ab8 <DMA_CalcBaseAndBitshift+0x130>)
 81039c8:	4293      	cmp	r3, r2
 81039ca:	d031      	beq.n	8103a30 <DMA_CalcBaseAndBitshift+0xa8>
 81039cc:	687b      	ldr	r3, [r7, #4]
 81039ce:	681b      	ldr	r3, [r3, #0]
 81039d0:	4a3a      	ldr	r2, [pc, #232]	; (8103abc <DMA_CalcBaseAndBitshift+0x134>)
 81039d2:	4293      	cmp	r3, r2
 81039d4:	d02c      	beq.n	8103a30 <DMA_CalcBaseAndBitshift+0xa8>
 81039d6:	687b      	ldr	r3, [r7, #4]
 81039d8:	681b      	ldr	r3, [r3, #0]
 81039da:	4a39      	ldr	r2, [pc, #228]	; (8103ac0 <DMA_CalcBaseAndBitshift+0x138>)
 81039dc:	4293      	cmp	r3, r2
 81039de:	d027      	beq.n	8103a30 <DMA_CalcBaseAndBitshift+0xa8>
 81039e0:	687b      	ldr	r3, [r7, #4]
 81039e2:	681b      	ldr	r3, [r3, #0]
 81039e4:	4a37      	ldr	r2, [pc, #220]	; (8103ac4 <DMA_CalcBaseAndBitshift+0x13c>)
 81039e6:	4293      	cmp	r3, r2
 81039e8:	d022      	beq.n	8103a30 <DMA_CalcBaseAndBitshift+0xa8>
 81039ea:	687b      	ldr	r3, [r7, #4]
 81039ec:	681b      	ldr	r3, [r3, #0]
 81039ee:	4a36      	ldr	r2, [pc, #216]	; (8103ac8 <DMA_CalcBaseAndBitshift+0x140>)
 81039f0:	4293      	cmp	r3, r2
 81039f2:	d01d      	beq.n	8103a30 <DMA_CalcBaseAndBitshift+0xa8>
 81039f4:	687b      	ldr	r3, [r7, #4]
 81039f6:	681b      	ldr	r3, [r3, #0]
 81039f8:	4a34      	ldr	r2, [pc, #208]	; (8103acc <DMA_CalcBaseAndBitshift+0x144>)
 81039fa:	4293      	cmp	r3, r2
 81039fc:	d018      	beq.n	8103a30 <DMA_CalcBaseAndBitshift+0xa8>
 81039fe:	687b      	ldr	r3, [r7, #4]
 8103a00:	681b      	ldr	r3, [r3, #0]
 8103a02:	4a33      	ldr	r2, [pc, #204]	; (8103ad0 <DMA_CalcBaseAndBitshift+0x148>)
 8103a04:	4293      	cmp	r3, r2
 8103a06:	d013      	beq.n	8103a30 <DMA_CalcBaseAndBitshift+0xa8>
 8103a08:	687b      	ldr	r3, [r7, #4]
 8103a0a:	681b      	ldr	r3, [r3, #0]
 8103a0c:	4a31      	ldr	r2, [pc, #196]	; (8103ad4 <DMA_CalcBaseAndBitshift+0x14c>)
 8103a0e:	4293      	cmp	r3, r2
 8103a10:	d00e      	beq.n	8103a30 <DMA_CalcBaseAndBitshift+0xa8>
 8103a12:	687b      	ldr	r3, [r7, #4]
 8103a14:	681b      	ldr	r3, [r3, #0]
 8103a16:	4a30      	ldr	r2, [pc, #192]	; (8103ad8 <DMA_CalcBaseAndBitshift+0x150>)
 8103a18:	4293      	cmp	r3, r2
 8103a1a:	d009      	beq.n	8103a30 <DMA_CalcBaseAndBitshift+0xa8>
 8103a1c:	687b      	ldr	r3, [r7, #4]
 8103a1e:	681b      	ldr	r3, [r3, #0]
 8103a20:	4a2e      	ldr	r2, [pc, #184]	; (8103adc <DMA_CalcBaseAndBitshift+0x154>)
 8103a22:	4293      	cmp	r3, r2
 8103a24:	d004      	beq.n	8103a30 <DMA_CalcBaseAndBitshift+0xa8>
 8103a26:	687b      	ldr	r3, [r7, #4]
 8103a28:	681b      	ldr	r3, [r3, #0]
 8103a2a:	4a2d      	ldr	r2, [pc, #180]	; (8103ae0 <DMA_CalcBaseAndBitshift+0x158>)
 8103a2c:	4293      	cmp	r3, r2
 8103a2e:	d101      	bne.n	8103a34 <DMA_CalcBaseAndBitshift+0xac>
 8103a30:	2301      	movs	r3, #1
 8103a32:	e000      	b.n	8103a36 <DMA_CalcBaseAndBitshift+0xae>
 8103a34:	2300      	movs	r3, #0
 8103a36:	2b00      	cmp	r3, #0
 8103a38:	d026      	beq.n	8103a88 <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8103a3a:	687b      	ldr	r3, [r7, #4]
 8103a3c:	681b      	ldr	r3, [r3, #0]
 8103a3e:	b2db      	uxtb	r3, r3
 8103a40:	3b10      	subs	r3, #16
 8103a42:	4a28      	ldr	r2, [pc, #160]	; (8103ae4 <DMA_CalcBaseAndBitshift+0x15c>)
 8103a44:	fba2 2303 	umull	r2, r3, r2, r3
 8103a48:	091b      	lsrs	r3, r3, #4
 8103a4a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8103a4c:	68fb      	ldr	r3, [r7, #12]
 8103a4e:	f003 0307 	and.w	r3, r3, #7
 8103a52:	4a25      	ldr	r2, [pc, #148]	; (8103ae8 <DMA_CalcBaseAndBitshift+0x160>)
 8103a54:	5cd3      	ldrb	r3, [r2, r3]
 8103a56:	461a      	mov	r2, r3
 8103a58:	687b      	ldr	r3, [r7, #4]
 8103a5a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8103a5c:	68fb      	ldr	r3, [r7, #12]
 8103a5e:	2b03      	cmp	r3, #3
 8103a60:	d909      	bls.n	8103a76 <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8103a62:	687b      	ldr	r3, [r7, #4]
 8103a64:	681b      	ldr	r3, [r3, #0]
 8103a66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8103a6a:	f023 0303 	bic.w	r3, r3, #3
 8103a6e:	1d1a      	adds	r2, r3, #4
 8103a70:	687b      	ldr	r3, [r7, #4]
 8103a72:	659a      	str	r2, [r3, #88]	; 0x58
 8103a74:	e00e      	b.n	8103a94 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8103a76:	687b      	ldr	r3, [r7, #4]
 8103a78:	681b      	ldr	r3, [r3, #0]
 8103a7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8103a7e:	f023 0303 	bic.w	r3, r3, #3
 8103a82:	687a      	ldr	r2, [r7, #4]
 8103a84:	6593      	str	r3, [r2, #88]	; 0x58
 8103a86:	e005      	b.n	8103a94 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8103a88:	687b      	ldr	r3, [r7, #4]
 8103a8a:	681b      	ldr	r3, [r3, #0]
 8103a8c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8103a90:	687b      	ldr	r3, [r7, #4]
 8103a92:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8103a94:	687b      	ldr	r3, [r7, #4]
 8103a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8103a98:	4618      	mov	r0, r3
 8103a9a:	3714      	adds	r7, #20
 8103a9c:	46bd      	mov	sp, r7
 8103a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103aa2:	4770      	bx	lr
 8103aa4:	40020010 	.word	0x40020010
 8103aa8:	40020028 	.word	0x40020028
 8103aac:	40020040 	.word	0x40020040
 8103ab0:	40020058 	.word	0x40020058
 8103ab4:	40020070 	.word	0x40020070
 8103ab8:	40020088 	.word	0x40020088
 8103abc:	400200a0 	.word	0x400200a0
 8103ac0:	400200b8 	.word	0x400200b8
 8103ac4:	40020410 	.word	0x40020410
 8103ac8:	40020428 	.word	0x40020428
 8103acc:	40020440 	.word	0x40020440
 8103ad0:	40020458 	.word	0x40020458
 8103ad4:	40020470 	.word	0x40020470
 8103ad8:	40020488 	.word	0x40020488
 8103adc:	400204a0 	.word	0x400204a0
 8103ae0:	400204b8 	.word	0x400204b8
 8103ae4:	aaaaaaab 	.word	0xaaaaaaab
 8103ae8:	0810bf08 	.word	0x0810bf08

08103aec <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8103aec:	b480      	push	{r7}
 8103aee:	b085      	sub	sp, #20
 8103af0:	af00      	add	r7, sp, #0
 8103af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8103af4:	2300      	movs	r3, #0
 8103af6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8103af8:	687b      	ldr	r3, [r7, #4]
 8103afa:	699b      	ldr	r3, [r3, #24]
 8103afc:	2b00      	cmp	r3, #0
 8103afe:	d120      	bne.n	8103b42 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8103b00:	687b      	ldr	r3, [r7, #4]
 8103b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103b04:	2b03      	cmp	r3, #3
 8103b06:	d858      	bhi.n	8103bba <DMA_CheckFifoParam+0xce>
 8103b08:	a201      	add	r2, pc, #4	; (adr r2, 8103b10 <DMA_CheckFifoParam+0x24>)
 8103b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103b0e:	bf00      	nop
 8103b10:	08103b21 	.word	0x08103b21
 8103b14:	08103b33 	.word	0x08103b33
 8103b18:	08103b21 	.word	0x08103b21
 8103b1c:	08103bbb 	.word	0x08103bbb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8103b20:	687b      	ldr	r3, [r7, #4]
 8103b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103b24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103b28:	2b00      	cmp	r3, #0
 8103b2a:	d048      	beq.n	8103bbe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8103b2c:	2301      	movs	r3, #1
 8103b2e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8103b30:	e045      	b.n	8103bbe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8103b32:	687b      	ldr	r3, [r7, #4]
 8103b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103b36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8103b3a:	d142      	bne.n	8103bc2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8103b3c:	2301      	movs	r3, #1
 8103b3e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8103b40:	e03f      	b.n	8103bc2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8103b42:	687b      	ldr	r3, [r7, #4]
 8103b44:	699b      	ldr	r3, [r3, #24]
 8103b46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103b4a:	d123      	bne.n	8103b94 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8103b4c:	687b      	ldr	r3, [r7, #4]
 8103b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103b50:	2b03      	cmp	r3, #3
 8103b52:	d838      	bhi.n	8103bc6 <DMA_CheckFifoParam+0xda>
 8103b54:	a201      	add	r2, pc, #4	; (adr r2, 8103b5c <DMA_CheckFifoParam+0x70>)
 8103b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103b5a:	bf00      	nop
 8103b5c:	08103b6d 	.word	0x08103b6d
 8103b60:	08103b73 	.word	0x08103b73
 8103b64:	08103b6d 	.word	0x08103b6d
 8103b68:	08103b85 	.word	0x08103b85
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8103b6c:	2301      	movs	r3, #1
 8103b6e:	73fb      	strb	r3, [r7, #15]
        break;
 8103b70:	e030      	b.n	8103bd4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8103b72:	687b      	ldr	r3, [r7, #4]
 8103b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103b76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103b7a:	2b00      	cmp	r3, #0
 8103b7c:	d025      	beq.n	8103bca <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8103b7e:	2301      	movs	r3, #1
 8103b80:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8103b82:	e022      	b.n	8103bca <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8103b84:	687b      	ldr	r3, [r7, #4]
 8103b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103b88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8103b8c:	d11f      	bne.n	8103bce <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8103b8e:	2301      	movs	r3, #1
 8103b90:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8103b92:	e01c      	b.n	8103bce <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8103b94:	687b      	ldr	r3, [r7, #4]
 8103b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103b98:	2b02      	cmp	r3, #2
 8103b9a:	d902      	bls.n	8103ba2 <DMA_CheckFifoParam+0xb6>
 8103b9c:	2b03      	cmp	r3, #3
 8103b9e:	d003      	beq.n	8103ba8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8103ba0:	e018      	b.n	8103bd4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8103ba2:	2301      	movs	r3, #1
 8103ba4:	73fb      	strb	r3, [r7, #15]
        break;
 8103ba6:	e015      	b.n	8103bd4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8103ba8:	687b      	ldr	r3, [r7, #4]
 8103baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103bac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103bb0:	2b00      	cmp	r3, #0
 8103bb2:	d00e      	beq.n	8103bd2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8103bb4:	2301      	movs	r3, #1
 8103bb6:	73fb      	strb	r3, [r7, #15]
    break;
 8103bb8:	e00b      	b.n	8103bd2 <DMA_CheckFifoParam+0xe6>
        break;
 8103bba:	bf00      	nop
 8103bbc:	e00a      	b.n	8103bd4 <DMA_CheckFifoParam+0xe8>
        break;
 8103bbe:	bf00      	nop
 8103bc0:	e008      	b.n	8103bd4 <DMA_CheckFifoParam+0xe8>
        break;
 8103bc2:	bf00      	nop
 8103bc4:	e006      	b.n	8103bd4 <DMA_CheckFifoParam+0xe8>
        break;
 8103bc6:	bf00      	nop
 8103bc8:	e004      	b.n	8103bd4 <DMA_CheckFifoParam+0xe8>
        break;
 8103bca:	bf00      	nop
 8103bcc:	e002      	b.n	8103bd4 <DMA_CheckFifoParam+0xe8>
        break;
 8103bce:	bf00      	nop
 8103bd0:	e000      	b.n	8103bd4 <DMA_CheckFifoParam+0xe8>
    break;
 8103bd2:	bf00      	nop
    }
  }

  return status;
 8103bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8103bd6:	4618      	mov	r0, r3
 8103bd8:	3714      	adds	r7, #20
 8103bda:	46bd      	mov	sp, r7
 8103bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103be0:	4770      	bx	lr
 8103be2:	bf00      	nop

08103be4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8103be4:	b480      	push	{r7}
 8103be6:	b085      	sub	sp, #20
 8103be8:	af00      	add	r7, sp, #0
 8103bea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8103bec:	687b      	ldr	r3, [r7, #4]
 8103bee:	681b      	ldr	r3, [r3, #0]
 8103bf0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8103bf2:	687b      	ldr	r3, [r7, #4]
 8103bf4:	681b      	ldr	r3, [r3, #0]
 8103bf6:	4a3a      	ldr	r2, [pc, #232]	; (8103ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8103bf8:	4293      	cmp	r3, r2
 8103bfa:	d022      	beq.n	8103c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103bfc:	687b      	ldr	r3, [r7, #4]
 8103bfe:	681b      	ldr	r3, [r3, #0]
 8103c00:	4a38      	ldr	r2, [pc, #224]	; (8103ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8103c02:	4293      	cmp	r3, r2
 8103c04:	d01d      	beq.n	8103c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103c06:	687b      	ldr	r3, [r7, #4]
 8103c08:	681b      	ldr	r3, [r3, #0]
 8103c0a:	4a37      	ldr	r2, [pc, #220]	; (8103ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8103c0c:	4293      	cmp	r3, r2
 8103c0e:	d018      	beq.n	8103c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103c10:	687b      	ldr	r3, [r7, #4]
 8103c12:	681b      	ldr	r3, [r3, #0]
 8103c14:	4a35      	ldr	r2, [pc, #212]	; (8103cec <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8103c16:	4293      	cmp	r3, r2
 8103c18:	d013      	beq.n	8103c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103c1a:	687b      	ldr	r3, [r7, #4]
 8103c1c:	681b      	ldr	r3, [r3, #0]
 8103c1e:	4a34      	ldr	r2, [pc, #208]	; (8103cf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8103c20:	4293      	cmp	r3, r2
 8103c22:	d00e      	beq.n	8103c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103c24:	687b      	ldr	r3, [r7, #4]
 8103c26:	681b      	ldr	r3, [r3, #0]
 8103c28:	4a32      	ldr	r2, [pc, #200]	; (8103cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8103c2a:	4293      	cmp	r3, r2
 8103c2c:	d009      	beq.n	8103c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103c2e:	687b      	ldr	r3, [r7, #4]
 8103c30:	681b      	ldr	r3, [r3, #0]
 8103c32:	4a31      	ldr	r2, [pc, #196]	; (8103cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8103c34:	4293      	cmp	r3, r2
 8103c36:	d004      	beq.n	8103c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103c38:	687b      	ldr	r3, [r7, #4]
 8103c3a:	681b      	ldr	r3, [r3, #0]
 8103c3c:	4a2f      	ldr	r2, [pc, #188]	; (8103cfc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8103c3e:	4293      	cmp	r3, r2
 8103c40:	d101      	bne.n	8103c46 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8103c42:	2301      	movs	r3, #1
 8103c44:	e000      	b.n	8103c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8103c46:	2300      	movs	r3, #0
 8103c48:	2b00      	cmp	r3, #0
 8103c4a:	d01c      	beq.n	8103c86 <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8103c4c:	687b      	ldr	r3, [r7, #4]
 8103c4e:	681b      	ldr	r3, [r3, #0]
 8103c50:	b2db      	uxtb	r3, r3
 8103c52:	3b08      	subs	r3, #8
 8103c54:	4a2a      	ldr	r2, [pc, #168]	; (8103d00 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8103c56:	fba2 2303 	umull	r2, r3, r2, r3
 8103c5a:	091b      	lsrs	r3, r3, #4
 8103c5c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8103c5e:	68fb      	ldr	r3, [r7, #12]
 8103c60:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 8103c64:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 8103c68:	009b      	lsls	r3, r3, #2
 8103c6a:	461a      	mov	r2, r3
 8103c6c:	687b      	ldr	r3, [r7, #4]
 8103c6e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8103c70:	687b      	ldr	r3, [r7, #4]
 8103c72:	4a24      	ldr	r2, [pc, #144]	; (8103d04 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8103c74:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8103c76:	68fb      	ldr	r3, [r7, #12]
 8103c78:	f003 031f 	and.w	r3, r3, #31
 8103c7c:	2201      	movs	r2, #1
 8103c7e:	409a      	lsls	r2, r3
 8103c80:	687b      	ldr	r3, [r7, #4]
 8103c82:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8103c84:	e026      	b.n	8103cd4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8103c86:	687b      	ldr	r3, [r7, #4]
 8103c88:	681b      	ldr	r3, [r3, #0]
 8103c8a:	b2db      	uxtb	r3, r3
 8103c8c:	3b10      	subs	r3, #16
 8103c8e:	4a1e      	ldr	r2, [pc, #120]	; (8103d08 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8103c90:	fba2 2303 	umull	r2, r3, r2, r3
 8103c94:	091b      	lsrs	r3, r3, #4
 8103c96:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8103c98:	68bb      	ldr	r3, [r7, #8]
 8103c9a:	4a1c      	ldr	r2, [pc, #112]	; (8103d0c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8103c9c:	4293      	cmp	r3, r2
 8103c9e:	d806      	bhi.n	8103cae <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 8103ca0:	68bb      	ldr	r3, [r7, #8]
 8103ca2:	4a1b      	ldr	r2, [pc, #108]	; (8103d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8103ca4:	4293      	cmp	r3, r2
 8103ca6:	d902      	bls.n	8103cae <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 8103ca8:	68fb      	ldr	r3, [r7, #12]
 8103caa:	3308      	adds	r3, #8
 8103cac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8103cae:	68fb      	ldr	r3, [r7, #12]
 8103cb0:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8103cb4:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8103cb8:	009b      	lsls	r3, r3, #2
 8103cba:	461a      	mov	r2, r3
 8103cbc:	687b      	ldr	r3, [r7, #4]
 8103cbe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8103cc0:	687b      	ldr	r3, [r7, #4]
 8103cc2:	4a14      	ldr	r2, [pc, #80]	; (8103d14 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8103cc4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8103cc6:	68fb      	ldr	r3, [r7, #12]
 8103cc8:	f003 031f 	and.w	r3, r3, #31
 8103ccc:	2201      	movs	r2, #1
 8103cce:	409a      	lsls	r2, r3
 8103cd0:	687b      	ldr	r3, [r7, #4]
 8103cd2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8103cd4:	bf00      	nop
 8103cd6:	3714      	adds	r7, #20
 8103cd8:	46bd      	mov	sp, r7
 8103cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103cde:	4770      	bx	lr
 8103ce0:	58025408 	.word	0x58025408
 8103ce4:	5802541c 	.word	0x5802541c
 8103ce8:	58025430 	.word	0x58025430
 8103cec:	58025444 	.word	0x58025444
 8103cf0:	58025458 	.word	0x58025458
 8103cf4:	5802546c 	.word	0x5802546c
 8103cf8:	58025480 	.word	0x58025480
 8103cfc:	58025494 	.word	0x58025494
 8103d00:	cccccccd 	.word	0xcccccccd
 8103d04:	58025880 	.word	0x58025880
 8103d08:	aaaaaaab 	.word	0xaaaaaaab
 8103d0c:	400204b8 	.word	0x400204b8
 8103d10:	4002040f 	.word	0x4002040f
 8103d14:	40020880 	.word	0x40020880

08103d18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8103d18:	b480      	push	{r7}
 8103d1a:	b085      	sub	sp, #20
 8103d1c:	af00      	add	r7, sp, #0
 8103d1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8103d20:	687b      	ldr	r3, [r7, #4]
 8103d22:	685b      	ldr	r3, [r3, #4]
 8103d24:	b2db      	uxtb	r3, r3
 8103d26:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8103d28:	68fb      	ldr	r3, [r7, #12]
 8103d2a:	2b00      	cmp	r3, #0
 8103d2c:	d04a      	beq.n	8103dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8103d2e:	68fb      	ldr	r3, [r7, #12]
 8103d30:	2b08      	cmp	r3, #8
 8103d32:	d847      	bhi.n	8103dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8103d34:	687b      	ldr	r3, [r7, #4]
 8103d36:	681b      	ldr	r3, [r3, #0]
 8103d38:	4a25      	ldr	r2, [pc, #148]	; (8103dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8103d3a:	4293      	cmp	r3, r2
 8103d3c:	d022      	beq.n	8103d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8103d3e:	687b      	ldr	r3, [r7, #4]
 8103d40:	681b      	ldr	r3, [r3, #0]
 8103d42:	4a24      	ldr	r2, [pc, #144]	; (8103dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8103d44:	4293      	cmp	r3, r2
 8103d46:	d01d      	beq.n	8103d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8103d48:	687b      	ldr	r3, [r7, #4]
 8103d4a:	681b      	ldr	r3, [r3, #0]
 8103d4c:	4a22      	ldr	r2, [pc, #136]	; (8103dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8103d4e:	4293      	cmp	r3, r2
 8103d50:	d018      	beq.n	8103d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8103d52:	687b      	ldr	r3, [r7, #4]
 8103d54:	681b      	ldr	r3, [r3, #0]
 8103d56:	4a21      	ldr	r2, [pc, #132]	; (8103ddc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8103d58:	4293      	cmp	r3, r2
 8103d5a:	d013      	beq.n	8103d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8103d5c:	687b      	ldr	r3, [r7, #4]
 8103d5e:	681b      	ldr	r3, [r3, #0]
 8103d60:	4a1f      	ldr	r2, [pc, #124]	; (8103de0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8103d62:	4293      	cmp	r3, r2
 8103d64:	d00e      	beq.n	8103d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8103d66:	687b      	ldr	r3, [r7, #4]
 8103d68:	681b      	ldr	r3, [r3, #0]
 8103d6a:	4a1e      	ldr	r2, [pc, #120]	; (8103de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8103d6c:	4293      	cmp	r3, r2
 8103d6e:	d009      	beq.n	8103d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8103d70:	687b      	ldr	r3, [r7, #4]
 8103d72:	681b      	ldr	r3, [r3, #0]
 8103d74:	4a1c      	ldr	r2, [pc, #112]	; (8103de8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8103d76:	4293      	cmp	r3, r2
 8103d78:	d004      	beq.n	8103d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8103d7a:	687b      	ldr	r3, [r7, #4]
 8103d7c:	681b      	ldr	r3, [r3, #0]
 8103d7e:	4a1b      	ldr	r2, [pc, #108]	; (8103dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8103d80:	4293      	cmp	r3, r2
 8103d82:	d101      	bne.n	8103d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8103d84:	2301      	movs	r3, #1
 8103d86:	e000      	b.n	8103d8a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8103d88:	2300      	movs	r3, #0
 8103d8a:	2b00      	cmp	r3, #0
 8103d8c:	d00a      	beq.n	8103da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8103d8e:	68fa      	ldr	r2, [r7, #12]
 8103d90:	4b17      	ldr	r3, [pc, #92]	; (8103df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8103d92:	4413      	add	r3, r2
 8103d94:	009b      	lsls	r3, r3, #2
 8103d96:	461a      	mov	r2, r3
 8103d98:	687b      	ldr	r3, [r7, #4]
 8103d9a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8103d9c:	687b      	ldr	r3, [r7, #4]
 8103d9e:	4a15      	ldr	r2, [pc, #84]	; (8103df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8103da0:	671a      	str	r2, [r3, #112]	; 0x70
 8103da2:	e009      	b.n	8103db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8103da4:	68fa      	ldr	r2, [r7, #12]
 8103da6:	4b14      	ldr	r3, [pc, #80]	; (8103df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8103da8:	4413      	add	r3, r2
 8103daa:	009b      	lsls	r3, r3, #2
 8103dac:	461a      	mov	r2, r3
 8103dae:	687b      	ldr	r3, [r7, #4]
 8103db0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8103db2:	687b      	ldr	r3, [r7, #4]
 8103db4:	4a11      	ldr	r2, [pc, #68]	; (8103dfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8103db6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8103db8:	68fb      	ldr	r3, [r7, #12]
 8103dba:	3b01      	subs	r3, #1
 8103dbc:	2201      	movs	r2, #1
 8103dbe:	409a      	lsls	r2, r3
 8103dc0:	687b      	ldr	r3, [r7, #4]
 8103dc2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8103dc4:	bf00      	nop
 8103dc6:	3714      	adds	r7, #20
 8103dc8:	46bd      	mov	sp, r7
 8103dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103dce:	4770      	bx	lr
 8103dd0:	58025408 	.word	0x58025408
 8103dd4:	5802541c 	.word	0x5802541c
 8103dd8:	58025430 	.word	0x58025430
 8103ddc:	58025444 	.word	0x58025444
 8103de0:	58025458 	.word	0x58025458
 8103de4:	5802546c 	.word	0x5802546c
 8103de8:	58025480 	.word	0x58025480
 8103dec:	58025494 	.word	0x58025494
 8103df0:	1600963f 	.word	0x1600963f
 8103df4:	58025940 	.word	0x58025940
 8103df8:	1000823f 	.word	0x1000823f
 8103dfc:	40020940 	.word	0x40020940

08103e00 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8103e00:	b580      	push	{r7, lr}
 8103e02:	b098      	sub	sp, #96	; 0x60
 8103e04:	af00      	add	r7, sp, #0
 8103e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8103e08:	4a84      	ldr	r2, [pc, #528]	; (810401c <HAL_FDCAN_Init+0x21c>)
 8103e0a:	f107 030c 	add.w	r3, r7, #12
 8103e0e:	4611      	mov	r1, r2
 8103e10:	224c      	movs	r2, #76	; 0x4c
 8103e12:	4618      	mov	r0, r3
 8103e14:	f006 fa4c 	bl	810a2b0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8103e18:	687b      	ldr	r3, [r7, #4]
 8103e1a:	2b00      	cmp	r3, #0
 8103e1c:	d101      	bne.n	8103e22 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8103e1e:	2301      	movs	r3, #1
 8103e20:	e1ca      	b.n	81041b8 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8103e22:	687b      	ldr	r3, [r7, #4]
 8103e24:	681b      	ldr	r3, [r3, #0]
 8103e26:	4a7e      	ldr	r2, [pc, #504]	; (8104020 <HAL_FDCAN_Init+0x220>)
 8103e28:	4293      	cmp	r3, r2
 8103e2a:	d106      	bne.n	8103e3a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8103e2c:	687b      	ldr	r3, [r7, #4]
 8103e2e:	681b      	ldr	r3, [r3, #0]
 8103e30:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8103e34:	461a      	mov	r2, r3
 8103e36:	687b      	ldr	r3, [r7, #4]
 8103e38:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8103e3a:	687b      	ldr	r3, [r7, #4]
 8103e3c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8103e40:	b2db      	uxtb	r3, r3
 8103e42:	2b00      	cmp	r3, #0
 8103e44:	d106      	bne.n	8103e54 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8103e46:	687b      	ldr	r3, [r7, #4]
 8103e48:	2200      	movs	r2, #0
 8103e4a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8103e4e:	6878      	ldr	r0, [r7, #4]
 8103e50:	f7fd f92a 	bl	81010a8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8103e54:	687b      	ldr	r3, [r7, #4]
 8103e56:	681b      	ldr	r3, [r3, #0]
 8103e58:	699a      	ldr	r2, [r3, #24]
 8103e5a:	687b      	ldr	r3, [r7, #4]
 8103e5c:	681b      	ldr	r3, [r3, #0]
 8103e5e:	f022 0210 	bic.w	r2, r2, #16
 8103e62:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8103e64:	f7fd ffc8 	bl	8101df8 <HAL_GetTick>
 8103e68:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8103e6a:	e014      	b.n	8103e96 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8103e6c:	f7fd ffc4 	bl	8101df8 <HAL_GetTick>
 8103e70:	4602      	mov	r2, r0
 8103e72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8103e74:	1ad3      	subs	r3, r2, r3
 8103e76:	2b0a      	cmp	r3, #10
 8103e78:	d90d      	bls.n	8103e96 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8103e7a:	687b      	ldr	r3, [r7, #4]
 8103e7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103e80:	f043 0201 	orr.w	r2, r3, #1
 8103e84:	687b      	ldr	r3, [r7, #4]
 8103e86:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8103e8a:	687b      	ldr	r3, [r7, #4]
 8103e8c:	2203      	movs	r2, #3
 8103e8e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8103e92:	2301      	movs	r3, #1
 8103e94:	e190      	b.n	81041b8 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8103e96:	687b      	ldr	r3, [r7, #4]
 8103e98:	681b      	ldr	r3, [r3, #0]
 8103e9a:	699b      	ldr	r3, [r3, #24]
 8103e9c:	f003 0308 	and.w	r3, r3, #8
 8103ea0:	2b08      	cmp	r3, #8
 8103ea2:	d0e3      	beq.n	8103e6c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8103ea4:	687b      	ldr	r3, [r7, #4]
 8103ea6:	681b      	ldr	r3, [r3, #0]
 8103ea8:	699a      	ldr	r2, [r3, #24]
 8103eaa:	687b      	ldr	r3, [r7, #4]
 8103eac:	681b      	ldr	r3, [r3, #0]
 8103eae:	f042 0201 	orr.w	r2, r2, #1
 8103eb2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8103eb4:	f7fd ffa0 	bl	8101df8 <HAL_GetTick>
 8103eb8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8103eba:	e014      	b.n	8103ee6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8103ebc:	f7fd ff9c 	bl	8101df8 <HAL_GetTick>
 8103ec0:	4602      	mov	r2, r0
 8103ec2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8103ec4:	1ad3      	subs	r3, r2, r3
 8103ec6:	2b0a      	cmp	r3, #10
 8103ec8:	d90d      	bls.n	8103ee6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8103eca:	687b      	ldr	r3, [r7, #4]
 8103ecc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103ed0:	f043 0201 	orr.w	r2, r3, #1
 8103ed4:	687b      	ldr	r3, [r7, #4]
 8103ed6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8103eda:	687b      	ldr	r3, [r7, #4]
 8103edc:	2203      	movs	r2, #3
 8103ede:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8103ee2:	2301      	movs	r3, #1
 8103ee4:	e168      	b.n	81041b8 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8103ee6:	687b      	ldr	r3, [r7, #4]
 8103ee8:	681b      	ldr	r3, [r3, #0]
 8103eea:	699b      	ldr	r3, [r3, #24]
 8103eec:	f003 0301 	and.w	r3, r3, #1
 8103ef0:	2b00      	cmp	r3, #0
 8103ef2:	d0e3      	beq.n	8103ebc <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8103ef4:	687b      	ldr	r3, [r7, #4]
 8103ef6:	681b      	ldr	r3, [r3, #0]
 8103ef8:	699a      	ldr	r2, [r3, #24]
 8103efa:	687b      	ldr	r3, [r7, #4]
 8103efc:	681b      	ldr	r3, [r3, #0]
 8103efe:	f042 0202 	orr.w	r2, r2, #2
 8103f02:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8103f04:	687b      	ldr	r3, [r7, #4]
 8103f06:	7c1b      	ldrb	r3, [r3, #16]
 8103f08:	2b01      	cmp	r3, #1
 8103f0a:	d108      	bne.n	8103f1e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8103f0c:	687b      	ldr	r3, [r7, #4]
 8103f0e:	681b      	ldr	r3, [r3, #0]
 8103f10:	699a      	ldr	r2, [r3, #24]
 8103f12:	687b      	ldr	r3, [r7, #4]
 8103f14:	681b      	ldr	r3, [r3, #0]
 8103f16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8103f1a:	619a      	str	r2, [r3, #24]
 8103f1c:	e007      	b.n	8103f2e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8103f1e:	687b      	ldr	r3, [r7, #4]
 8103f20:	681b      	ldr	r3, [r3, #0]
 8103f22:	699a      	ldr	r2, [r3, #24]
 8103f24:	687b      	ldr	r3, [r7, #4]
 8103f26:	681b      	ldr	r3, [r3, #0]
 8103f28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8103f2c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8103f2e:	687b      	ldr	r3, [r7, #4]
 8103f30:	7c5b      	ldrb	r3, [r3, #17]
 8103f32:	2b01      	cmp	r3, #1
 8103f34:	d108      	bne.n	8103f48 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8103f36:	687b      	ldr	r3, [r7, #4]
 8103f38:	681b      	ldr	r3, [r3, #0]
 8103f3a:	699a      	ldr	r2, [r3, #24]
 8103f3c:	687b      	ldr	r3, [r7, #4]
 8103f3e:	681b      	ldr	r3, [r3, #0]
 8103f40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8103f44:	619a      	str	r2, [r3, #24]
 8103f46:	e007      	b.n	8103f58 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8103f48:	687b      	ldr	r3, [r7, #4]
 8103f4a:	681b      	ldr	r3, [r3, #0]
 8103f4c:	699a      	ldr	r2, [r3, #24]
 8103f4e:	687b      	ldr	r3, [r7, #4]
 8103f50:	681b      	ldr	r3, [r3, #0]
 8103f52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8103f56:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8103f58:	687b      	ldr	r3, [r7, #4]
 8103f5a:	7c9b      	ldrb	r3, [r3, #18]
 8103f5c:	2b01      	cmp	r3, #1
 8103f5e:	d108      	bne.n	8103f72 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8103f60:	687b      	ldr	r3, [r7, #4]
 8103f62:	681b      	ldr	r3, [r3, #0]
 8103f64:	699a      	ldr	r2, [r3, #24]
 8103f66:	687b      	ldr	r3, [r7, #4]
 8103f68:	681b      	ldr	r3, [r3, #0]
 8103f6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8103f6e:	619a      	str	r2, [r3, #24]
 8103f70:	e007      	b.n	8103f82 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8103f72:	687b      	ldr	r3, [r7, #4]
 8103f74:	681b      	ldr	r3, [r3, #0]
 8103f76:	699a      	ldr	r2, [r3, #24]
 8103f78:	687b      	ldr	r3, [r7, #4]
 8103f7a:	681b      	ldr	r3, [r3, #0]
 8103f7c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8103f80:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8103f82:	687b      	ldr	r3, [r7, #4]
 8103f84:	681b      	ldr	r3, [r3, #0]
 8103f86:	699b      	ldr	r3, [r3, #24]
 8103f88:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8103f8c:	687b      	ldr	r3, [r7, #4]
 8103f8e:	689a      	ldr	r2, [r3, #8]
 8103f90:	687b      	ldr	r3, [r7, #4]
 8103f92:	681b      	ldr	r3, [r3, #0]
 8103f94:	430a      	orrs	r2, r1
 8103f96:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8103f98:	687b      	ldr	r3, [r7, #4]
 8103f9a:	681b      	ldr	r3, [r3, #0]
 8103f9c:	699a      	ldr	r2, [r3, #24]
 8103f9e:	687b      	ldr	r3, [r7, #4]
 8103fa0:	681b      	ldr	r3, [r3, #0]
 8103fa2:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8103fa6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8103fa8:	687b      	ldr	r3, [r7, #4]
 8103faa:	681b      	ldr	r3, [r3, #0]
 8103fac:	691a      	ldr	r2, [r3, #16]
 8103fae:	687b      	ldr	r3, [r7, #4]
 8103fb0:	681b      	ldr	r3, [r3, #0]
 8103fb2:	f022 0210 	bic.w	r2, r2, #16
 8103fb6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8103fb8:	687b      	ldr	r3, [r7, #4]
 8103fba:	68db      	ldr	r3, [r3, #12]
 8103fbc:	2b01      	cmp	r3, #1
 8103fbe:	d108      	bne.n	8103fd2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8103fc0:	687b      	ldr	r3, [r7, #4]
 8103fc2:	681b      	ldr	r3, [r3, #0]
 8103fc4:	699a      	ldr	r2, [r3, #24]
 8103fc6:	687b      	ldr	r3, [r7, #4]
 8103fc8:	681b      	ldr	r3, [r3, #0]
 8103fca:	f042 0204 	orr.w	r2, r2, #4
 8103fce:	619a      	str	r2, [r3, #24]
 8103fd0:	e030      	b.n	8104034 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8103fd2:	687b      	ldr	r3, [r7, #4]
 8103fd4:	68db      	ldr	r3, [r3, #12]
 8103fd6:	2b00      	cmp	r3, #0
 8103fd8:	d02c      	beq.n	8104034 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8103fda:	687b      	ldr	r3, [r7, #4]
 8103fdc:	68db      	ldr	r3, [r3, #12]
 8103fde:	2b02      	cmp	r3, #2
 8103fe0:	d020      	beq.n	8104024 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8103fe2:	687b      	ldr	r3, [r7, #4]
 8103fe4:	681b      	ldr	r3, [r3, #0]
 8103fe6:	699a      	ldr	r2, [r3, #24]
 8103fe8:	687b      	ldr	r3, [r7, #4]
 8103fea:	681b      	ldr	r3, [r3, #0]
 8103fec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8103ff0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8103ff2:	687b      	ldr	r3, [r7, #4]
 8103ff4:	681b      	ldr	r3, [r3, #0]
 8103ff6:	691a      	ldr	r2, [r3, #16]
 8103ff8:	687b      	ldr	r3, [r7, #4]
 8103ffa:	681b      	ldr	r3, [r3, #0]
 8103ffc:	f042 0210 	orr.w	r2, r2, #16
 8104000:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8104002:	687b      	ldr	r3, [r7, #4]
 8104004:	68db      	ldr	r3, [r3, #12]
 8104006:	2b03      	cmp	r3, #3
 8104008:	d114      	bne.n	8104034 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 810400a:	687b      	ldr	r3, [r7, #4]
 810400c:	681b      	ldr	r3, [r3, #0]
 810400e:	699a      	ldr	r2, [r3, #24]
 8104010:	687b      	ldr	r3, [r7, #4]
 8104012:	681b      	ldr	r3, [r3, #0]
 8104014:	f042 0220 	orr.w	r2, r2, #32
 8104018:	619a      	str	r2, [r3, #24]
 810401a:	e00b      	b.n	8104034 <HAL_FDCAN_Init+0x234>
 810401c:	0810be78 	.word	0x0810be78
 8104020:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8104024:	687b      	ldr	r3, [r7, #4]
 8104026:	681b      	ldr	r3, [r3, #0]
 8104028:	699a      	ldr	r2, [r3, #24]
 810402a:	687b      	ldr	r3, [r7, #4]
 810402c:	681b      	ldr	r3, [r3, #0]
 810402e:	f042 0220 	orr.w	r2, r2, #32
 8104032:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8104034:	687b      	ldr	r3, [r7, #4]
 8104036:	699b      	ldr	r3, [r3, #24]
 8104038:	3b01      	subs	r3, #1
 810403a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 810403c:	687b      	ldr	r3, [r7, #4]
 810403e:	69db      	ldr	r3, [r3, #28]
 8104040:	3b01      	subs	r3, #1
 8104042:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8104044:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8104046:	687b      	ldr	r3, [r7, #4]
 8104048:	6a1b      	ldr	r3, [r3, #32]
 810404a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 810404c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8104050:	687b      	ldr	r3, [r7, #4]
 8104052:	695b      	ldr	r3, [r3, #20]
 8104054:	3b01      	subs	r3, #1
 8104056:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8104058:	687b      	ldr	r3, [r7, #4]
 810405a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 810405c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 810405e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8104060:	687b      	ldr	r3, [r7, #4]
 8104062:	689b      	ldr	r3, [r3, #8]
 8104064:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104068:	d115      	bne.n	8104096 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 810406a:	687b      	ldr	r3, [r7, #4]
 810406c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810406e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8104070:	687b      	ldr	r3, [r7, #4]
 8104072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104074:	3b01      	subs	r3, #1
 8104076:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8104078:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 810407a:	687b      	ldr	r3, [r7, #4]
 810407c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810407e:	3b01      	subs	r3, #1
 8104080:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8104082:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8104086:	687b      	ldr	r3, [r7, #4]
 8104088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810408a:	3b01      	subs	r3, #1
 810408c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 810408e:	687b      	ldr	r3, [r7, #4]
 8104090:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8104092:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8104094:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8104096:	687b      	ldr	r3, [r7, #4]
 8104098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810409a:	2b00      	cmp	r3, #0
 810409c:	d00a      	beq.n	81040b4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 810409e:	687b      	ldr	r3, [r7, #4]
 81040a0:	681b      	ldr	r3, [r3, #0]
 81040a2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 81040a6:	687b      	ldr	r3, [r7, #4]
 81040a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 81040aa:	687b      	ldr	r3, [r7, #4]
 81040ac:	681b      	ldr	r3, [r3, #0]
 81040ae:	430a      	orrs	r2, r1
 81040b0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 81040b4:	687b      	ldr	r3, [r7, #4]
 81040b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 81040b8:	687b      	ldr	r3, [r7, #4]
 81040ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81040bc:	4413      	add	r3, r2
 81040be:	2b00      	cmp	r3, #0
 81040c0:	d012      	beq.n	81040e8 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 81040c2:	687b      	ldr	r3, [r7, #4]
 81040c4:	681b      	ldr	r3, [r3, #0]
 81040c6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 81040ca:	f023 0107 	bic.w	r1, r3, #7
 81040ce:	687b      	ldr	r3, [r7, #4]
 81040d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81040d2:	009b      	lsls	r3, r3, #2
 81040d4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 81040d8:	4413      	add	r3, r2
 81040da:	f853 2c54 	ldr.w	r2, [r3, #-84]
 81040de:	687b      	ldr	r3, [r7, #4]
 81040e0:	681b      	ldr	r3, [r3, #0]
 81040e2:	430a      	orrs	r2, r1
 81040e4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 81040e8:	687b      	ldr	r3, [r7, #4]
 81040ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81040ec:	2b00      	cmp	r3, #0
 81040ee:	d012      	beq.n	8104116 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 81040f0:	687b      	ldr	r3, [r7, #4]
 81040f2:	681b      	ldr	r3, [r3, #0]
 81040f4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 81040f8:	f023 0107 	bic.w	r1, r3, #7
 81040fc:	687b      	ldr	r3, [r7, #4]
 81040fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104100:	009b      	lsls	r3, r3, #2
 8104102:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8104106:	4413      	add	r3, r2
 8104108:	f853 2c54 	ldr.w	r2, [r3, #-84]
 810410c:	687b      	ldr	r3, [r7, #4]
 810410e:	681b      	ldr	r3, [r3, #0]
 8104110:	430a      	orrs	r2, r1
 8104112:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8104116:	687b      	ldr	r3, [r7, #4]
 8104118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810411a:	2b00      	cmp	r3, #0
 810411c:	d013      	beq.n	8104146 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 810411e:	687b      	ldr	r3, [r7, #4]
 8104120:	681b      	ldr	r3, [r3, #0]
 8104122:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8104126:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 810412a:	687b      	ldr	r3, [r7, #4]
 810412c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810412e:	009b      	lsls	r3, r3, #2
 8104130:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8104134:	4413      	add	r3, r2
 8104136:	f853 3c54 	ldr.w	r3, [r3, #-84]
 810413a:	011a      	lsls	r2, r3, #4
 810413c:	687b      	ldr	r3, [r7, #4]
 810413e:	681b      	ldr	r3, [r3, #0]
 8104140:	430a      	orrs	r2, r1
 8104142:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8104146:	687b      	ldr	r3, [r7, #4]
 8104148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810414a:	2b00      	cmp	r3, #0
 810414c:	d013      	beq.n	8104176 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 810414e:	687b      	ldr	r3, [r7, #4]
 8104150:	681b      	ldr	r3, [r3, #0]
 8104152:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8104156:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 810415a:	687b      	ldr	r3, [r7, #4]
 810415c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810415e:	009b      	lsls	r3, r3, #2
 8104160:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8104164:	4413      	add	r3, r2
 8104166:	f853 3c54 	ldr.w	r3, [r3, #-84]
 810416a:	021a      	lsls	r2, r3, #8
 810416c:	687b      	ldr	r3, [r7, #4]
 810416e:	681b      	ldr	r3, [r3, #0]
 8104170:	430a      	orrs	r2, r1
 8104172:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8104176:	687b      	ldr	r3, [r7, #4]
 8104178:	681b      	ldr	r3, [r3, #0]
 810417a:	4a11      	ldr	r2, [pc, #68]	; (81041c0 <HAL_FDCAN_Init+0x3c0>)
 810417c:	4293      	cmp	r3, r2
 810417e:	d107      	bne.n	8104190 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8104180:	687b      	ldr	r3, [r7, #4]
 8104182:	685b      	ldr	r3, [r3, #4]
 8104184:	689a      	ldr	r2, [r3, #8]
 8104186:	687b      	ldr	r3, [r7, #4]
 8104188:	685b      	ldr	r3, [r3, #4]
 810418a:	f022 0203 	bic.w	r2, r2, #3
 810418e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8104190:	687b      	ldr	r3, [r7, #4]
 8104192:	2200      	movs	r2, #0
 8104194:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8104198:	687b      	ldr	r3, [r7, #4]
 810419a:	2200      	movs	r2, #0
 810419c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 81041a0:	687b      	ldr	r3, [r7, #4]
 81041a2:	2201      	movs	r2, #1
 81041a4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 81041a8:	6878      	ldr	r0, [r7, #4]
 81041aa:	f000 f80b 	bl	81041c4 <FDCAN_CalcultateRamBlockAddresses>
 81041ae:	4603      	mov	r3, r0
 81041b0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 81041b4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 81041b8:	4618      	mov	r0, r3
 81041ba:	3760      	adds	r7, #96	; 0x60
 81041bc:	46bd      	mov	sp, r7
 81041be:	bd80      	pop	{r7, pc}
 81041c0:	4000a000 	.word	0x4000a000

081041c4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 81041c4:	b480      	push	{r7}
 81041c6:	b085      	sub	sp, #20
 81041c8:	af00      	add	r7, sp, #0
 81041ca:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 81041cc:	687b      	ldr	r3, [r7, #4]
 81041ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81041d0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 81041d2:	687b      	ldr	r3, [r7, #4]
 81041d4:	681b      	ldr	r3, [r3, #0]
 81041d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81041da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81041de:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 81041e2:	68ba      	ldr	r2, [r7, #8]
 81041e4:	0091      	lsls	r1, r2, #2
 81041e6:	687a      	ldr	r2, [r7, #4]
 81041e8:	6812      	ldr	r2, [r2, #0]
 81041ea:	430b      	orrs	r3, r1
 81041ec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 81041f0:	687b      	ldr	r3, [r7, #4]
 81041f2:	681b      	ldr	r3, [r3, #0]
 81041f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81041f8:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 81041fc:	687b      	ldr	r3, [r7, #4]
 81041fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104200:	041a      	lsls	r2, r3, #16
 8104202:	687b      	ldr	r3, [r7, #4]
 8104204:	681b      	ldr	r3, [r3, #0]
 8104206:	430a      	orrs	r2, r1
 8104208:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 810420c:	687b      	ldr	r3, [r7, #4]
 810420e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104210:	68ba      	ldr	r2, [r7, #8]
 8104212:	4413      	add	r3, r2
 8104214:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8104216:	687b      	ldr	r3, [r7, #4]
 8104218:	681b      	ldr	r3, [r3, #0]
 810421a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810421e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104222:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8104226:	68ba      	ldr	r2, [r7, #8]
 8104228:	0091      	lsls	r1, r2, #2
 810422a:	687a      	ldr	r2, [r7, #4]
 810422c:	6812      	ldr	r2, [r2, #0]
 810422e:	430b      	orrs	r3, r1
 8104230:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8104234:	687b      	ldr	r3, [r7, #4]
 8104236:	681b      	ldr	r3, [r3, #0]
 8104238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810423c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8104240:	687b      	ldr	r3, [r7, #4]
 8104242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104244:	041a      	lsls	r2, r3, #16
 8104246:	687b      	ldr	r3, [r7, #4]
 8104248:	681b      	ldr	r3, [r3, #0]
 810424a:	430a      	orrs	r2, r1
 810424c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8104250:	687b      	ldr	r3, [r7, #4]
 8104252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104254:	005b      	lsls	r3, r3, #1
 8104256:	68ba      	ldr	r2, [r7, #8]
 8104258:	4413      	add	r3, r2
 810425a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 810425c:	687b      	ldr	r3, [r7, #4]
 810425e:	681b      	ldr	r3, [r3, #0]
 8104260:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8104264:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104268:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 810426c:	68ba      	ldr	r2, [r7, #8]
 810426e:	0091      	lsls	r1, r2, #2
 8104270:	687a      	ldr	r2, [r7, #4]
 8104272:	6812      	ldr	r2, [r2, #0]
 8104274:	430b      	orrs	r3, r1
 8104276:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 810427a:	687b      	ldr	r3, [r7, #4]
 810427c:	681b      	ldr	r3, [r3, #0]
 810427e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8104282:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8104286:	687b      	ldr	r3, [r7, #4]
 8104288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810428a:	041a      	lsls	r2, r3, #16
 810428c:	687b      	ldr	r3, [r7, #4]
 810428e:	681b      	ldr	r3, [r3, #0]
 8104290:	430a      	orrs	r2, r1
 8104292:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8104296:	687b      	ldr	r3, [r7, #4]
 8104298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810429a:	687a      	ldr	r2, [r7, #4]
 810429c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 810429e:	fb02 f303 	mul.w	r3, r2, r3
 81042a2:	68ba      	ldr	r2, [r7, #8]
 81042a4:	4413      	add	r3, r2
 81042a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 81042a8:	687b      	ldr	r3, [r7, #4]
 81042aa:	681b      	ldr	r3, [r3, #0]
 81042ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81042b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81042b4:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 81042b8:	68ba      	ldr	r2, [r7, #8]
 81042ba:	0091      	lsls	r1, r2, #2
 81042bc:	687a      	ldr	r2, [r7, #4]
 81042be:	6812      	ldr	r2, [r2, #0]
 81042c0:	430b      	orrs	r3, r1
 81042c2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 81042c6:	687b      	ldr	r3, [r7, #4]
 81042c8:	681b      	ldr	r3, [r3, #0]
 81042ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81042ce:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 81042d2:	687b      	ldr	r3, [r7, #4]
 81042d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81042d6:	041a      	lsls	r2, r3, #16
 81042d8:	687b      	ldr	r3, [r7, #4]
 81042da:	681b      	ldr	r3, [r3, #0]
 81042dc:	430a      	orrs	r2, r1
 81042de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 81042e2:	687b      	ldr	r3, [r7, #4]
 81042e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81042e6:	687a      	ldr	r2, [r7, #4]
 81042e8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 81042ea:	fb02 f303 	mul.w	r3, r2, r3
 81042ee:	68ba      	ldr	r2, [r7, #8]
 81042f0:	4413      	add	r3, r2
 81042f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 81042f4:	687b      	ldr	r3, [r7, #4]
 81042f6:	681b      	ldr	r3, [r3, #0]
 81042f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81042fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104300:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8104304:	68ba      	ldr	r2, [r7, #8]
 8104306:	0091      	lsls	r1, r2, #2
 8104308:	687a      	ldr	r2, [r7, #4]
 810430a:	6812      	ldr	r2, [r2, #0]
 810430c:	430b      	orrs	r3, r1
 810430e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8104312:	687b      	ldr	r3, [r7, #4]
 8104314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104316:	687a      	ldr	r2, [r7, #4]
 8104318:	6d52      	ldr	r2, [r2, #84]	; 0x54
 810431a:	fb02 f303 	mul.w	r3, r2, r3
 810431e:	68ba      	ldr	r2, [r7, #8]
 8104320:	4413      	add	r3, r2
 8104322:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8104324:	687b      	ldr	r3, [r7, #4]
 8104326:	681b      	ldr	r3, [r3, #0]
 8104328:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810432c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104330:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8104334:	68ba      	ldr	r2, [r7, #8]
 8104336:	0091      	lsls	r1, r2, #2
 8104338:	687a      	ldr	r2, [r7, #4]
 810433a:	6812      	ldr	r2, [r2, #0]
 810433c:	430b      	orrs	r3, r1
 810433e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8104342:	687b      	ldr	r3, [r7, #4]
 8104344:	681b      	ldr	r3, [r3, #0]
 8104346:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810434a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 810434e:	687b      	ldr	r3, [r7, #4]
 8104350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104352:	041a      	lsls	r2, r3, #16
 8104354:	687b      	ldr	r3, [r7, #4]
 8104356:	681b      	ldr	r3, [r3, #0]
 8104358:	430a      	orrs	r2, r1
 810435a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 810435e:	687b      	ldr	r3, [r7, #4]
 8104360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104362:	005b      	lsls	r3, r3, #1
 8104364:	68ba      	ldr	r2, [r7, #8]
 8104366:	4413      	add	r3, r2
 8104368:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 810436a:	687b      	ldr	r3, [r7, #4]
 810436c:	681b      	ldr	r3, [r3, #0]
 810436e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8104372:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104376:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 810437a:	68ba      	ldr	r2, [r7, #8]
 810437c:	0091      	lsls	r1, r2, #2
 810437e:	687a      	ldr	r2, [r7, #4]
 8104380:	6812      	ldr	r2, [r2, #0]
 8104382:	430b      	orrs	r3, r1
 8104384:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8104388:	687b      	ldr	r3, [r7, #4]
 810438a:	681b      	ldr	r3, [r3, #0]
 810438c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8104390:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8104394:	687b      	ldr	r3, [r7, #4]
 8104396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104398:	041a      	lsls	r2, r3, #16
 810439a:	687b      	ldr	r3, [r7, #4]
 810439c:	681b      	ldr	r3, [r3, #0]
 810439e:	430a      	orrs	r2, r1
 81043a0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 81043a4:	687b      	ldr	r3, [r7, #4]
 81043a6:	681b      	ldr	r3, [r3, #0]
 81043a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 81043ac:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 81043b0:	687b      	ldr	r3, [r7, #4]
 81043b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81043b4:	061a      	lsls	r2, r3, #24
 81043b6:	687b      	ldr	r3, [r7, #4]
 81043b8:	681b      	ldr	r3, [r3, #0]
 81043ba:	430a      	orrs	r2, r1
 81043bc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 81043c0:	687b      	ldr	r3, [r7, #4]
 81043c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81043c4:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 81043c8:	f503 532c 	add.w	r3, r3, #11008	; 0x2b00
 81043cc:	009a      	lsls	r2, r3, #2
 81043ce:	687b      	ldr	r3, [r7, #4]
 81043d0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 81043d2:	687b      	ldr	r3, [r7, #4]
 81043d4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 81043d6:	687b      	ldr	r3, [r7, #4]
 81043d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81043da:	009b      	lsls	r3, r3, #2
 81043dc:	441a      	add	r2, r3
 81043de:	687b      	ldr	r3, [r7, #4]
 81043e0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 81043e2:	687b      	ldr	r3, [r7, #4]
 81043e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81043e6:	687b      	ldr	r3, [r7, #4]
 81043e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81043ea:	00db      	lsls	r3, r3, #3
 81043ec:	441a      	add	r2, r3
 81043ee:	687b      	ldr	r3, [r7, #4]
 81043f0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 81043f2:	687b      	ldr	r3, [r7, #4]
 81043f4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 81043f6:	687b      	ldr	r3, [r7, #4]
 81043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81043fa:	6879      	ldr	r1, [r7, #4]
 81043fc:	6c49      	ldr	r1, [r1, #68]	; 0x44
 81043fe:	fb01 f303 	mul.w	r3, r1, r3
 8104402:	009b      	lsls	r3, r3, #2
 8104404:	441a      	add	r2, r3
 8104406:	687b      	ldr	r3, [r7, #4]
 8104408:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 810440a:	687b      	ldr	r3, [r7, #4]
 810440c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 810440e:	687b      	ldr	r3, [r7, #4]
 8104410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104412:	6879      	ldr	r1, [r7, #4]
 8104414:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8104416:	fb01 f303 	mul.w	r3, r1, r3
 810441a:	009b      	lsls	r3, r3, #2
 810441c:	441a      	add	r2, r3
 810441e:	687b      	ldr	r3, [r7, #4]
 8104420:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8104422:	687b      	ldr	r3, [r7, #4]
 8104424:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8104426:	687b      	ldr	r3, [r7, #4]
 8104428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810442a:	6879      	ldr	r1, [r7, #4]
 810442c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 810442e:	fb01 f303 	mul.w	r3, r1, r3
 8104432:	009b      	lsls	r3, r3, #2
 8104434:	441a      	add	r2, r3
 8104436:	687b      	ldr	r3, [r7, #4]
 8104438:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 810443c:	687b      	ldr	r3, [r7, #4]
 810443e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8104442:	687b      	ldr	r3, [r7, #4]
 8104444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104446:	00db      	lsls	r3, r3, #3
 8104448:	441a      	add	r2, r3
 810444a:	687b      	ldr	r3, [r7, #4]
 810444c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8104450:	687b      	ldr	r3, [r7, #4]
 8104452:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8104456:	687b      	ldr	r3, [r7, #4]
 8104458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810445a:	6879      	ldr	r1, [r7, #4]
 810445c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 810445e:	fb01 f303 	mul.w	r3, r1, r3
 8104462:	009b      	lsls	r3, r3, #2
 8104464:	441a      	add	r2, r3
 8104466:	687b      	ldr	r3, [r7, #4]
 8104468:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 810446c:	687b      	ldr	r3, [r7, #4]
 810446e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8104472:	687b      	ldr	r3, [r7, #4]
 8104474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104476:	6879      	ldr	r1, [r7, #4]
 8104478:	6e89      	ldr	r1, [r1, #104]	; 0x68
 810447a:	fb01 f303 	mul.w	r3, r1, r3
 810447e:	009b      	lsls	r3, r3, #2
 8104480:	441a      	add	r2, r3
 8104482:	687b      	ldr	r3, [r7, #4]
 8104484:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8104488:	687b      	ldr	r3, [r7, #4]
 810448a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810448e:	4a14      	ldr	r2, [pc, #80]	; (81044e0 <FDCAN_CalcultateRamBlockAddresses+0x31c>)
 8104490:	4293      	cmp	r3, r2
 8104492:	d90d      	bls.n	81044b0 <FDCAN_CalcultateRamBlockAddresses+0x2ec>
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8104494:	687b      	ldr	r3, [r7, #4]
 8104496:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810449a:	f043 0220 	orr.w	r2, r3, #32
 810449e:	687b      	ldr	r3, [r7, #4]
 81044a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 81044a4:	687b      	ldr	r3, [r7, #4]
 81044a6:	2203      	movs	r2, #3
 81044a8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 81044ac:	2301      	movs	r3, #1
 81044ae:	e010      	b.n	81044d2 <FDCAN_CalcultateRamBlockAddresses+0x30e>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 81044b0:	687b      	ldr	r3, [r7, #4]
 81044b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81044b4:	60fb      	str	r3, [r7, #12]
 81044b6:	e005      	b.n	81044c4 <FDCAN_CalcultateRamBlockAddresses+0x300>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 81044b8:	68fb      	ldr	r3, [r7, #12]
 81044ba:	2200      	movs	r2, #0
 81044bc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 81044be:	68fb      	ldr	r3, [r7, #12]
 81044c0:	3304      	adds	r3, #4
 81044c2:	60fb      	str	r3, [r7, #12]
 81044c4:	687b      	ldr	r3, [r7, #4]
 81044c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81044ca:	68fa      	ldr	r2, [r7, #12]
 81044cc:	429a      	cmp	r2, r3
 81044ce:	d3f3      	bcc.n	81044b8 <FDCAN_CalcultateRamBlockAddresses+0x2f4>
    }
  }

  /* Return function status */
  return HAL_OK;
 81044d0:	2300      	movs	r3, #0
}
 81044d2:	4618      	mov	r0, r3
 81044d4:	3714      	adds	r7, #20
 81044d6:	46bd      	mov	sp, r7
 81044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044dc:	4770      	bx	lr
 81044de:	bf00      	nop
 81044e0:	4000d3fc 	.word	0x4000d3fc

081044e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81044e4:	b480      	push	{r7}
 81044e6:	b089      	sub	sp, #36	; 0x24
 81044e8:	af00      	add	r7, sp, #0
 81044ea:	6078      	str	r0, [r7, #4]
 81044ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81044ee:	2300      	movs	r3, #0
 81044f0:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81044f2:	4b89      	ldr	r3, [pc, #548]	; (8104718 <HAL_GPIO_Init+0x234>)
 81044f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81044f6:	e194      	b.n	8104822 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81044f8:	683b      	ldr	r3, [r7, #0]
 81044fa:	681a      	ldr	r2, [r3, #0]
 81044fc:	2101      	movs	r1, #1
 81044fe:	69fb      	ldr	r3, [r7, #28]
 8104500:	fa01 f303 	lsl.w	r3, r1, r3
 8104504:	4013      	ands	r3, r2
 8104506:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8104508:	693b      	ldr	r3, [r7, #16]
 810450a:	2b00      	cmp	r3, #0
 810450c:	f000 8186 	beq.w	810481c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8104510:	683b      	ldr	r3, [r7, #0]
 8104512:	685b      	ldr	r3, [r3, #4]
 8104514:	2b01      	cmp	r3, #1
 8104516:	d00b      	beq.n	8104530 <HAL_GPIO_Init+0x4c>
 8104518:	683b      	ldr	r3, [r7, #0]
 810451a:	685b      	ldr	r3, [r3, #4]
 810451c:	2b02      	cmp	r3, #2
 810451e:	d007      	beq.n	8104530 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8104520:	683b      	ldr	r3, [r7, #0]
 8104522:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8104524:	2b11      	cmp	r3, #17
 8104526:	d003      	beq.n	8104530 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8104528:	683b      	ldr	r3, [r7, #0]
 810452a:	685b      	ldr	r3, [r3, #4]
 810452c:	2b12      	cmp	r3, #18
 810452e:	d130      	bne.n	8104592 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8104530:	687b      	ldr	r3, [r7, #4]
 8104532:	689b      	ldr	r3, [r3, #8]
 8104534:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8104536:	69fb      	ldr	r3, [r7, #28]
 8104538:	005b      	lsls	r3, r3, #1
 810453a:	2203      	movs	r2, #3
 810453c:	fa02 f303 	lsl.w	r3, r2, r3
 8104540:	43db      	mvns	r3, r3
 8104542:	69ba      	ldr	r2, [r7, #24]
 8104544:	4013      	ands	r3, r2
 8104546:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8104548:	683b      	ldr	r3, [r7, #0]
 810454a:	68da      	ldr	r2, [r3, #12]
 810454c:	69fb      	ldr	r3, [r7, #28]
 810454e:	005b      	lsls	r3, r3, #1
 8104550:	fa02 f303 	lsl.w	r3, r2, r3
 8104554:	69ba      	ldr	r2, [r7, #24]
 8104556:	4313      	orrs	r3, r2
 8104558:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810455a:	687b      	ldr	r3, [r7, #4]
 810455c:	69ba      	ldr	r2, [r7, #24]
 810455e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8104560:	687b      	ldr	r3, [r7, #4]
 8104562:	685b      	ldr	r3, [r3, #4]
 8104564:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8104566:	2201      	movs	r2, #1
 8104568:	69fb      	ldr	r3, [r7, #28]
 810456a:	fa02 f303 	lsl.w	r3, r2, r3
 810456e:	43db      	mvns	r3, r3
 8104570:	69ba      	ldr	r2, [r7, #24]
 8104572:	4013      	ands	r3, r2
 8104574:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8104576:	683b      	ldr	r3, [r7, #0]
 8104578:	685b      	ldr	r3, [r3, #4]
 810457a:	091b      	lsrs	r3, r3, #4
 810457c:	f003 0201 	and.w	r2, r3, #1
 8104580:	69fb      	ldr	r3, [r7, #28]
 8104582:	fa02 f303 	lsl.w	r3, r2, r3
 8104586:	69ba      	ldr	r2, [r7, #24]
 8104588:	4313      	orrs	r3, r2
 810458a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 810458c:	687b      	ldr	r3, [r7, #4]
 810458e:	69ba      	ldr	r2, [r7, #24]
 8104590:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8104592:	687b      	ldr	r3, [r7, #4]
 8104594:	68db      	ldr	r3, [r3, #12]
 8104596:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8104598:	69fb      	ldr	r3, [r7, #28]
 810459a:	005b      	lsls	r3, r3, #1
 810459c:	2203      	movs	r2, #3
 810459e:	fa02 f303 	lsl.w	r3, r2, r3
 81045a2:	43db      	mvns	r3, r3
 81045a4:	69ba      	ldr	r2, [r7, #24]
 81045a6:	4013      	ands	r3, r2
 81045a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81045aa:	683b      	ldr	r3, [r7, #0]
 81045ac:	689a      	ldr	r2, [r3, #8]
 81045ae:	69fb      	ldr	r3, [r7, #28]
 81045b0:	005b      	lsls	r3, r3, #1
 81045b2:	fa02 f303 	lsl.w	r3, r2, r3
 81045b6:	69ba      	ldr	r2, [r7, #24]
 81045b8:	4313      	orrs	r3, r2
 81045ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81045bc:	687b      	ldr	r3, [r7, #4]
 81045be:	69ba      	ldr	r2, [r7, #24]
 81045c0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 81045c2:	683b      	ldr	r3, [r7, #0]
 81045c4:	685b      	ldr	r3, [r3, #4]
 81045c6:	2b02      	cmp	r3, #2
 81045c8:	d003      	beq.n	81045d2 <HAL_GPIO_Init+0xee>
 81045ca:	683b      	ldr	r3, [r7, #0]
 81045cc:	685b      	ldr	r3, [r3, #4]
 81045ce:	2b12      	cmp	r3, #18
 81045d0:	d123      	bne.n	810461a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81045d2:	69fb      	ldr	r3, [r7, #28]
 81045d4:	08da      	lsrs	r2, r3, #3
 81045d6:	687b      	ldr	r3, [r7, #4]
 81045d8:	3208      	adds	r2, #8
 81045da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81045de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81045e0:	69fb      	ldr	r3, [r7, #28]
 81045e2:	f003 0307 	and.w	r3, r3, #7
 81045e6:	009b      	lsls	r3, r3, #2
 81045e8:	220f      	movs	r2, #15
 81045ea:	fa02 f303 	lsl.w	r3, r2, r3
 81045ee:	43db      	mvns	r3, r3
 81045f0:	69ba      	ldr	r2, [r7, #24]
 81045f2:	4013      	ands	r3, r2
 81045f4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81045f6:	683b      	ldr	r3, [r7, #0]
 81045f8:	691a      	ldr	r2, [r3, #16]
 81045fa:	69fb      	ldr	r3, [r7, #28]
 81045fc:	f003 0307 	and.w	r3, r3, #7
 8104600:	009b      	lsls	r3, r3, #2
 8104602:	fa02 f303 	lsl.w	r3, r2, r3
 8104606:	69ba      	ldr	r2, [r7, #24]
 8104608:	4313      	orrs	r3, r2
 810460a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 810460c:	69fb      	ldr	r3, [r7, #28]
 810460e:	08da      	lsrs	r2, r3, #3
 8104610:	687b      	ldr	r3, [r7, #4]
 8104612:	3208      	adds	r2, #8
 8104614:	69b9      	ldr	r1, [r7, #24]
 8104616:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 810461a:	687b      	ldr	r3, [r7, #4]
 810461c:	681b      	ldr	r3, [r3, #0]
 810461e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8104620:	69fb      	ldr	r3, [r7, #28]
 8104622:	005b      	lsls	r3, r3, #1
 8104624:	2203      	movs	r2, #3
 8104626:	fa02 f303 	lsl.w	r3, r2, r3
 810462a:	43db      	mvns	r3, r3
 810462c:	69ba      	ldr	r2, [r7, #24]
 810462e:	4013      	ands	r3, r2
 8104630:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8104632:	683b      	ldr	r3, [r7, #0]
 8104634:	685b      	ldr	r3, [r3, #4]
 8104636:	f003 0203 	and.w	r2, r3, #3
 810463a:	69fb      	ldr	r3, [r7, #28]
 810463c:	005b      	lsls	r3, r3, #1
 810463e:	fa02 f303 	lsl.w	r3, r2, r3
 8104642:	69ba      	ldr	r2, [r7, #24]
 8104644:	4313      	orrs	r3, r2
 8104646:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8104648:	687b      	ldr	r3, [r7, #4]
 810464a:	69ba      	ldr	r2, [r7, #24]
 810464c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 810464e:	683b      	ldr	r3, [r7, #0]
 8104650:	685b      	ldr	r3, [r3, #4]
 8104652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8104656:	2b00      	cmp	r3, #0
 8104658:	f000 80e0 	beq.w	810481c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 810465c:	4b2f      	ldr	r3, [pc, #188]	; (810471c <HAL_GPIO_Init+0x238>)
 810465e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8104662:	4a2e      	ldr	r2, [pc, #184]	; (810471c <HAL_GPIO_Init+0x238>)
 8104664:	f043 0302 	orr.w	r3, r3, #2
 8104668:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810466c:	4b2b      	ldr	r3, [pc, #172]	; (810471c <HAL_GPIO_Init+0x238>)
 810466e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8104672:	f003 0302 	and.w	r3, r3, #2
 8104676:	60fb      	str	r3, [r7, #12]
 8104678:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810467a:	4a29      	ldr	r2, [pc, #164]	; (8104720 <HAL_GPIO_Init+0x23c>)
 810467c:	69fb      	ldr	r3, [r7, #28]
 810467e:	089b      	lsrs	r3, r3, #2
 8104680:	3302      	adds	r3, #2
 8104682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8104686:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8104688:	69fb      	ldr	r3, [r7, #28]
 810468a:	f003 0303 	and.w	r3, r3, #3
 810468e:	009b      	lsls	r3, r3, #2
 8104690:	220f      	movs	r2, #15
 8104692:	fa02 f303 	lsl.w	r3, r2, r3
 8104696:	43db      	mvns	r3, r3
 8104698:	69ba      	ldr	r2, [r7, #24]
 810469a:	4013      	ands	r3, r2
 810469c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810469e:	687b      	ldr	r3, [r7, #4]
 81046a0:	4a20      	ldr	r2, [pc, #128]	; (8104724 <HAL_GPIO_Init+0x240>)
 81046a2:	4293      	cmp	r3, r2
 81046a4:	d052      	beq.n	810474c <HAL_GPIO_Init+0x268>
 81046a6:	687b      	ldr	r3, [r7, #4]
 81046a8:	4a1f      	ldr	r2, [pc, #124]	; (8104728 <HAL_GPIO_Init+0x244>)
 81046aa:	4293      	cmp	r3, r2
 81046ac:	d031      	beq.n	8104712 <HAL_GPIO_Init+0x22e>
 81046ae:	687b      	ldr	r3, [r7, #4]
 81046b0:	4a1e      	ldr	r2, [pc, #120]	; (810472c <HAL_GPIO_Init+0x248>)
 81046b2:	4293      	cmp	r3, r2
 81046b4:	d02b      	beq.n	810470e <HAL_GPIO_Init+0x22a>
 81046b6:	687b      	ldr	r3, [r7, #4]
 81046b8:	4a1d      	ldr	r2, [pc, #116]	; (8104730 <HAL_GPIO_Init+0x24c>)
 81046ba:	4293      	cmp	r3, r2
 81046bc:	d025      	beq.n	810470a <HAL_GPIO_Init+0x226>
 81046be:	687b      	ldr	r3, [r7, #4]
 81046c0:	4a1c      	ldr	r2, [pc, #112]	; (8104734 <HAL_GPIO_Init+0x250>)
 81046c2:	4293      	cmp	r3, r2
 81046c4:	d01f      	beq.n	8104706 <HAL_GPIO_Init+0x222>
 81046c6:	687b      	ldr	r3, [r7, #4]
 81046c8:	4a1b      	ldr	r2, [pc, #108]	; (8104738 <HAL_GPIO_Init+0x254>)
 81046ca:	4293      	cmp	r3, r2
 81046cc:	d019      	beq.n	8104702 <HAL_GPIO_Init+0x21e>
 81046ce:	687b      	ldr	r3, [r7, #4]
 81046d0:	4a1a      	ldr	r2, [pc, #104]	; (810473c <HAL_GPIO_Init+0x258>)
 81046d2:	4293      	cmp	r3, r2
 81046d4:	d013      	beq.n	81046fe <HAL_GPIO_Init+0x21a>
 81046d6:	687b      	ldr	r3, [r7, #4]
 81046d8:	4a19      	ldr	r2, [pc, #100]	; (8104740 <HAL_GPIO_Init+0x25c>)
 81046da:	4293      	cmp	r3, r2
 81046dc:	d00d      	beq.n	81046fa <HAL_GPIO_Init+0x216>
 81046de:	687b      	ldr	r3, [r7, #4]
 81046e0:	4a18      	ldr	r2, [pc, #96]	; (8104744 <HAL_GPIO_Init+0x260>)
 81046e2:	4293      	cmp	r3, r2
 81046e4:	d007      	beq.n	81046f6 <HAL_GPIO_Init+0x212>
 81046e6:	687b      	ldr	r3, [r7, #4]
 81046e8:	4a17      	ldr	r2, [pc, #92]	; (8104748 <HAL_GPIO_Init+0x264>)
 81046ea:	4293      	cmp	r3, r2
 81046ec:	d101      	bne.n	81046f2 <HAL_GPIO_Init+0x20e>
 81046ee:	2309      	movs	r3, #9
 81046f0:	e02d      	b.n	810474e <HAL_GPIO_Init+0x26a>
 81046f2:	230a      	movs	r3, #10
 81046f4:	e02b      	b.n	810474e <HAL_GPIO_Init+0x26a>
 81046f6:	2308      	movs	r3, #8
 81046f8:	e029      	b.n	810474e <HAL_GPIO_Init+0x26a>
 81046fa:	2307      	movs	r3, #7
 81046fc:	e027      	b.n	810474e <HAL_GPIO_Init+0x26a>
 81046fe:	2306      	movs	r3, #6
 8104700:	e025      	b.n	810474e <HAL_GPIO_Init+0x26a>
 8104702:	2305      	movs	r3, #5
 8104704:	e023      	b.n	810474e <HAL_GPIO_Init+0x26a>
 8104706:	2304      	movs	r3, #4
 8104708:	e021      	b.n	810474e <HAL_GPIO_Init+0x26a>
 810470a:	2303      	movs	r3, #3
 810470c:	e01f      	b.n	810474e <HAL_GPIO_Init+0x26a>
 810470e:	2302      	movs	r3, #2
 8104710:	e01d      	b.n	810474e <HAL_GPIO_Init+0x26a>
 8104712:	2301      	movs	r3, #1
 8104714:	e01b      	b.n	810474e <HAL_GPIO_Init+0x26a>
 8104716:	bf00      	nop
 8104718:	580000c0 	.word	0x580000c0
 810471c:	58024400 	.word	0x58024400
 8104720:	58000400 	.word	0x58000400
 8104724:	58020000 	.word	0x58020000
 8104728:	58020400 	.word	0x58020400
 810472c:	58020800 	.word	0x58020800
 8104730:	58020c00 	.word	0x58020c00
 8104734:	58021000 	.word	0x58021000
 8104738:	58021400 	.word	0x58021400
 810473c:	58021800 	.word	0x58021800
 8104740:	58021c00 	.word	0x58021c00
 8104744:	58022000 	.word	0x58022000
 8104748:	58022400 	.word	0x58022400
 810474c:	2300      	movs	r3, #0
 810474e:	69fa      	ldr	r2, [r7, #28]
 8104750:	f002 0203 	and.w	r2, r2, #3
 8104754:	0092      	lsls	r2, r2, #2
 8104756:	4093      	lsls	r3, r2
 8104758:	69ba      	ldr	r2, [r7, #24]
 810475a:	4313      	orrs	r3, r2
 810475c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810475e:	4938      	ldr	r1, [pc, #224]	; (8104840 <HAL_GPIO_Init+0x35c>)
 8104760:	69fb      	ldr	r3, [r7, #28]
 8104762:	089b      	lsrs	r3, r3, #2
 8104764:	3302      	adds	r3, #2
 8104766:	69ba      	ldr	r2, [r7, #24]
 8104768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810476c:	697b      	ldr	r3, [r7, #20]
 810476e:	681b      	ldr	r3, [r3, #0]
 8104770:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104772:	693b      	ldr	r3, [r7, #16]
 8104774:	43db      	mvns	r3, r3
 8104776:	69ba      	ldr	r2, [r7, #24]
 8104778:	4013      	ands	r3, r2
 810477a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 810477c:	683b      	ldr	r3, [r7, #0]
 810477e:	685b      	ldr	r3, [r3, #4]
 8104780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104784:	2b00      	cmp	r3, #0
 8104786:	d003      	beq.n	8104790 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8104788:	69ba      	ldr	r2, [r7, #24]
 810478a:	693b      	ldr	r3, [r7, #16]
 810478c:	4313      	orrs	r3, r2
 810478e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8104790:	697b      	ldr	r3, [r7, #20]
 8104792:	69ba      	ldr	r2, [r7, #24]
 8104794:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8104796:	697b      	ldr	r3, [r7, #20]
 8104798:	685b      	ldr	r3, [r3, #4]
 810479a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810479c:	693b      	ldr	r3, [r7, #16]
 810479e:	43db      	mvns	r3, r3
 81047a0:	69ba      	ldr	r2, [r7, #24]
 81047a2:	4013      	ands	r3, r2
 81047a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 81047a6:	683b      	ldr	r3, [r7, #0]
 81047a8:	685b      	ldr	r3, [r3, #4]
 81047aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81047ae:	2b00      	cmp	r3, #0
 81047b0:	d003      	beq.n	81047ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 81047b2:	69ba      	ldr	r2, [r7, #24]
 81047b4:	693b      	ldr	r3, [r7, #16]
 81047b6:	4313      	orrs	r3, r2
 81047b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81047ba:	697b      	ldr	r3, [r7, #20]
 81047bc:	69ba      	ldr	r2, [r7, #24]
 81047be:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81047c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81047c4:	681b      	ldr	r3, [r3, #0]
 81047c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81047c8:	693b      	ldr	r3, [r7, #16]
 81047ca:	43db      	mvns	r3, r3
 81047cc:	69ba      	ldr	r2, [r7, #24]
 81047ce:	4013      	ands	r3, r2
 81047d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 81047d2:	683b      	ldr	r3, [r7, #0]
 81047d4:	685b      	ldr	r3, [r3, #4]
 81047d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81047da:	2b00      	cmp	r3, #0
 81047dc:	d003      	beq.n	81047e6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 81047de:	69ba      	ldr	r2, [r7, #24]
 81047e0:	693b      	ldr	r3, [r7, #16]
 81047e2:	4313      	orrs	r3, r2
 81047e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81047e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81047ea:	69bb      	ldr	r3, [r7, #24]
 81047ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81047ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81047f2:	685b      	ldr	r3, [r3, #4]
 81047f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81047f6:	693b      	ldr	r3, [r7, #16]
 81047f8:	43db      	mvns	r3, r3
 81047fa:	69ba      	ldr	r2, [r7, #24]
 81047fc:	4013      	ands	r3, r2
 81047fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8104800:	683b      	ldr	r3, [r7, #0]
 8104802:	685b      	ldr	r3, [r3, #4]
 8104804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8104808:	2b00      	cmp	r3, #0
 810480a:	d003      	beq.n	8104814 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 810480c:	69ba      	ldr	r2, [r7, #24]
 810480e:	693b      	ldr	r3, [r7, #16]
 8104810:	4313      	orrs	r3, r2
 8104812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8104814:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8104818:	69bb      	ldr	r3, [r7, #24]
 810481a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 810481c:	69fb      	ldr	r3, [r7, #28]
 810481e:	3301      	adds	r3, #1
 8104820:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104822:	683b      	ldr	r3, [r7, #0]
 8104824:	681a      	ldr	r2, [r3, #0]
 8104826:	69fb      	ldr	r3, [r7, #28]
 8104828:	fa22 f303 	lsr.w	r3, r2, r3
 810482c:	2b00      	cmp	r3, #0
 810482e:	f47f ae63 	bne.w	81044f8 <HAL_GPIO_Init+0x14>
  }
}
 8104832:	bf00      	nop
 8104834:	3724      	adds	r7, #36	; 0x24
 8104836:	46bd      	mov	sp, r7
 8104838:	f85d 7b04 	ldr.w	r7, [sp], #4
 810483c:	4770      	bx	lr
 810483e:	bf00      	nop
 8104840:	58000400 	.word	0x58000400

08104844 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8104844:	b480      	push	{r7}
 8104846:	b083      	sub	sp, #12
 8104848:	af00      	add	r7, sp, #0
 810484a:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 810484c:	4b05      	ldr	r3, [pc, #20]	; (8104864 <HAL_HSEM_ActivateNotification+0x20>)
 810484e:	681a      	ldr	r2, [r3, #0]
 8104850:	4904      	ldr	r1, [pc, #16]	; (8104864 <HAL_HSEM_ActivateNotification+0x20>)
 8104852:	687b      	ldr	r3, [r7, #4]
 8104854:	4313      	orrs	r3, r2
 8104856:	600b      	str	r3, [r1, #0]
#endif
}
 8104858:	bf00      	nop
 810485a:	370c      	adds	r7, #12
 810485c:	46bd      	mov	sp, r7
 810485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104862:	4770      	bx	lr
 8104864:	58026510 	.word	0x58026510

08104868 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8104868:	b580      	push	{r7, lr}
 810486a:	b082      	sub	sp, #8
 810486c:	af00      	add	r7, sp, #0
 810486e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8104870:	687b      	ldr	r3, [r7, #4]
 8104872:	2b00      	cmp	r3, #0
 8104874:	d101      	bne.n	810487a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8104876:	2301      	movs	r3, #1
 8104878:	e081      	b.n	810497e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 810487a:	687b      	ldr	r3, [r7, #4]
 810487c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104880:	b2db      	uxtb	r3, r3
 8104882:	2b00      	cmp	r3, #0
 8104884:	d106      	bne.n	8104894 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8104886:	687b      	ldr	r3, [r7, #4]
 8104888:	2200      	movs	r2, #0
 810488a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 810488e:	6878      	ldr	r0, [r7, #4]
 8104890:	f7fc fd24 	bl	81012dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8104894:	687b      	ldr	r3, [r7, #4]
 8104896:	2224      	movs	r2, #36	; 0x24
 8104898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 810489c:	687b      	ldr	r3, [r7, #4]
 810489e:	681b      	ldr	r3, [r3, #0]
 81048a0:	681a      	ldr	r2, [r3, #0]
 81048a2:	687b      	ldr	r3, [r7, #4]
 81048a4:	681b      	ldr	r3, [r3, #0]
 81048a6:	f022 0201 	bic.w	r2, r2, #1
 81048aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 81048ac:	687b      	ldr	r3, [r7, #4]
 81048ae:	685a      	ldr	r2, [r3, #4]
 81048b0:	687b      	ldr	r3, [r7, #4]
 81048b2:	681b      	ldr	r3, [r3, #0]
 81048b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 81048b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 81048ba:	687b      	ldr	r3, [r7, #4]
 81048bc:	681b      	ldr	r3, [r3, #0]
 81048be:	689a      	ldr	r2, [r3, #8]
 81048c0:	687b      	ldr	r3, [r7, #4]
 81048c2:	681b      	ldr	r3, [r3, #0]
 81048c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81048c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 81048ca:	687b      	ldr	r3, [r7, #4]
 81048cc:	68db      	ldr	r3, [r3, #12]
 81048ce:	2b01      	cmp	r3, #1
 81048d0:	d107      	bne.n	81048e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 81048d2:	687b      	ldr	r3, [r7, #4]
 81048d4:	689a      	ldr	r2, [r3, #8]
 81048d6:	687b      	ldr	r3, [r7, #4]
 81048d8:	681b      	ldr	r3, [r3, #0]
 81048da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 81048de:	609a      	str	r2, [r3, #8]
 81048e0:	e006      	b.n	81048f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 81048e2:	687b      	ldr	r3, [r7, #4]
 81048e4:	689a      	ldr	r2, [r3, #8]
 81048e6:	687b      	ldr	r3, [r7, #4]
 81048e8:	681b      	ldr	r3, [r3, #0]
 81048ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 81048ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 81048f0:	687b      	ldr	r3, [r7, #4]
 81048f2:	68db      	ldr	r3, [r3, #12]
 81048f4:	2b02      	cmp	r3, #2
 81048f6:	d104      	bne.n	8104902 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 81048f8:	687b      	ldr	r3, [r7, #4]
 81048fa:	681b      	ldr	r3, [r3, #0]
 81048fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8104900:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8104902:	687b      	ldr	r3, [r7, #4]
 8104904:	681b      	ldr	r3, [r3, #0]
 8104906:	685b      	ldr	r3, [r3, #4]
 8104908:	687a      	ldr	r2, [r7, #4]
 810490a:	6812      	ldr	r2, [r2, #0]
 810490c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8104910:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8104914:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8104916:	687b      	ldr	r3, [r7, #4]
 8104918:	681b      	ldr	r3, [r3, #0]
 810491a:	68da      	ldr	r2, [r3, #12]
 810491c:	687b      	ldr	r3, [r7, #4]
 810491e:	681b      	ldr	r3, [r3, #0]
 8104920:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8104924:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8104926:	687b      	ldr	r3, [r7, #4]
 8104928:	691a      	ldr	r2, [r3, #16]
 810492a:	687b      	ldr	r3, [r7, #4]
 810492c:	695b      	ldr	r3, [r3, #20]
 810492e:	ea42 0103 	orr.w	r1, r2, r3
 8104932:	687b      	ldr	r3, [r7, #4]
 8104934:	699b      	ldr	r3, [r3, #24]
 8104936:	021a      	lsls	r2, r3, #8
 8104938:	687b      	ldr	r3, [r7, #4]
 810493a:	681b      	ldr	r3, [r3, #0]
 810493c:	430a      	orrs	r2, r1
 810493e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8104940:	687b      	ldr	r3, [r7, #4]
 8104942:	69d9      	ldr	r1, [r3, #28]
 8104944:	687b      	ldr	r3, [r7, #4]
 8104946:	6a1a      	ldr	r2, [r3, #32]
 8104948:	687b      	ldr	r3, [r7, #4]
 810494a:	681b      	ldr	r3, [r3, #0]
 810494c:	430a      	orrs	r2, r1
 810494e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8104950:	687b      	ldr	r3, [r7, #4]
 8104952:	681b      	ldr	r3, [r3, #0]
 8104954:	681a      	ldr	r2, [r3, #0]
 8104956:	687b      	ldr	r3, [r7, #4]
 8104958:	681b      	ldr	r3, [r3, #0]
 810495a:	f042 0201 	orr.w	r2, r2, #1
 810495e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8104960:	687b      	ldr	r3, [r7, #4]
 8104962:	2200      	movs	r2, #0
 8104964:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8104966:	687b      	ldr	r3, [r7, #4]
 8104968:	2220      	movs	r2, #32
 810496a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 810496e:	687b      	ldr	r3, [r7, #4]
 8104970:	2200      	movs	r2, #0
 8104972:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8104974:	687b      	ldr	r3, [r7, #4]
 8104976:	2200      	movs	r2, #0
 8104978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 810497c:	2300      	movs	r3, #0
}
 810497e:	4618      	mov	r0, r3
 8104980:	3708      	adds	r7, #8
 8104982:	46bd      	mov	sp, r7
 8104984:	bd80      	pop	{r7, pc}

08104986 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8104986:	b480      	push	{r7}
 8104988:	b083      	sub	sp, #12
 810498a:	af00      	add	r7, sp, #0
 810498c:	6078      	str	r0, [r7, #4]
 810498e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104990:	687b      	ldr	r3, [r7, #4]
 8104992:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104996:	b2db      	uxtb	r3, r3
 8104998:	2b20      	cmp	r3, #32
 810499a:	d138      	bne.n	8104a0e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810499c:	687b      	ldr	r3, [r7, #4]
 810499e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81049a2:	2b01      	cmp	r3, #1
 81049a4:	d101      	bne.n	81049aa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 81049a6:	2302      	movs	r3, #2
 81049a8:	e032      	b.n	8104a10 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 81049aa:	687b      	ldr	r3, [r7, #4]
 81049ac:	2201      	movs	r2, #1
 81049ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81049b2:	687b      	ldr	r3, [r7, #4]
 81049b4:	2224      	movs	r2, #36	; 0x24
 81049b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81049ba:	687b      	ldr	r3, [r7, #4]
 81049bc:	681b      	ldr	r3, [r3, #0]
 81049be:	681a      	ldr	r2, [r3, #0]
 81049c0:	687b      	ldr	r3, [r7, #4]
 81049c2:	681b      	ldr	r3, [r3, #0]
 81049c4:	f022 0201 	bic.w	r2, r2, #1
 81049c8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 81049ca:	687b      	ldr	r3, [r7, #4]
 81049cc:	681b      	ldr	r3, [r3, #0]
 81049ce:	681a      	ldr	r2, [r3, #0]
 81049d0:	687b      	ldr	r3, [r7, #4]
 81049d2:	681b      	ldr	r3, [r3, #0]
 81049d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 81049d8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 81049da:	687b      	ldr	r3, [r7, #4]
 81049dc:	681b      	ldr	r3, [r3, #0]
 81049de:	6819      	ldr	r1, [r3, #0]
 81049e0:	687b      	ldr	r3, [r7, #4]
 81049e2:	681b      	ldr	r3, [r3, #0]
 81049e4:	683a      	ldr	r2, [r7, #0]
 81049e6:	430a      	orrs	r2, r1
 81049e8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 81049ea:	687b      	ldr	r3, [r7, #4]
 81049ec:	681b      	ldr	r3, [r3, #0]
 81049ee:	681a      	ldr	r2, [r3, #0]
 81049f0:	687b      	ldr	r3, [r7, #4]
 81049f2:	681b      	ldr	r3, [r3, #0]
 81049f4:	f042 0201 	orr.w	r2, r2, #1
 81049f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81049fa:	687b      	ldr	r3, [r7, #4]
 81049fc:	2220      	movs	r2, #32
 81049fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104a02:	687b      	ldr	r3, [r7, #4]
 8104a04:	2200      	movs	r2, #0
 8104a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8104a0a:	2300      	movs	r3, #0
 8104a0c:	e000      	b.n	8104a10 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8104a0e:	2302      	movs	r3, #2
  }
}
 8104a10:	4618      	mov	r0, r3
 8104a12:	370c      	adds	r7, #12
 8104a14:	46bd      	mov	sp, r7
 8104a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a1a:	4770      	bx	lr

08104a1c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8104a1c:	b480      	push	{r7}
 8104a1e:	b085      	sub	sp, #20
 8104a20:	af00      	add	r7, sp, #0
 8104a22:	6078      	str	r0, [r7, #4]
 8104a24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104a26:	687b      	ldr	r3, [r7, #4]
 8104a28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104a2c:	b2db      	uxtb	r3, r3
 8104a2e:	2b20      	cmp	r3, #32
 8104a30:	d139      	bne.n	8104aa6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104a32:	687b      	ldr	r3, [r7, #4]
 8104a34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104a38:	2b01      	cmp	r3, #1
 8104a3a:	d101      	bne.n	8104a40 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8104a3c:	2302      	movs	r3, #2
 8104a3e:	e033      	b.n	8104aa8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8104a40:	687b      	ldr	r3, [r7, #4]
 8104a42:	2201      	movs	r2, #1
 8104a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8104a48:	687b      	ldr	r3, [r7, #4]
 8104a4a:	2224      	movs	r2, #36	; 0x24
 8104a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8104a50:	687b      	ldr	r3, [r7, #4]
 8104a52:	681b      	ldr	r3, [r3, #0]
 8104a54:	681a      	ldr	r2, [r3, #0]
 8104a56:	687b      	ldr	r3, [r7, #4]
 8104a58:	681b      	ldr	r3, [r3, #0]
 8104a5a:	f022 0201 	bic.w	r2, r2, #1
 8104a5e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8104a60:	687b      	ldr	r3, [r7, #4]
 8104a62:	681b      	ldr	r3, [r3, #0]
 8104a64:	681b      	ldr	r3, [r3, #0]
 8104a66:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8104a68:	68fb      	ldr	r3, [r7, #12]
 8104a6a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8104a6e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8104a70:	683b      	ldr	r3, [r7, #0]
 8104a72:	021b      	lsls	r3, r3, #8
 8104a74:	68fa      	ldr	r2, [r7, #12]
 8104a76:	4313      	orrs	r3, r2
 8104a78:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8104a7a:	687b      	ldr	r3, [r7, #4]
 8104a7c:	681b      	ldr	r3, [r3, #0]
 8104a7e:	68fa      	ldr	r2, [r7, #12]
 8104a80:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8104a82:	687b      	ldr	r3, [r7, #4]
 8104a84:	681b      	ldr	r3, [r3, #0]
 8104a86:	681a      	ldr	r2, [r3, #0]
 8104a88:	687b      	ldr	r3, [r7, #4]
 8104a8a:	681b      	ldr	r3, [r3, #0]
 8104a8c:	f042 0201 	orr.w	r2, r2, #1
 8104a90:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8104a92:	687b      	ldr	r3, [r7, #4]
 8104a94:	2220      	movs	r2, #32
 8104a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104a9a:	687b      	ldr	r3, [r7, #4]
 8104a9c:	2200      	movs	r2, #0
 8104a9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8104aa2:	2300      	movs	r3, #0
 8104aa4:	e000      	b.n	8104aa8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8104aa6:	2302      	movs	r3, #2
  }
}
 8104aa8:	4618      	mov	r0, r3
 8104aaa:	3714      	adds	r7, #20
 8104aac:	46bd      	mov	sp, r7
 8104aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ab2:	4770      	bx	lr

08104ab4 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8104ab4:	b480      	push	{r7}
 8104ab6:	b085      	sub	sp, #20
 8104ab8:	af00      	add	r7, sp, #0
 8104aba:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8104abc:	4b0d      	ldr	r3, [pc, #52]	; (8104af4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8104abe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8104ac2:	4a0c      	ldr	r2, [pc, #48]	; (8104af4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8104ac4:	f043 0302 	orr.w	r3, r3, #2
 8104ac8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8104acc:	4b09      	ldr	r3, [pc, #36]	; (8104af4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8104ace:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8104ad2:	f003 0302 	and.w	r3, r3, #2
 8104ad6:	60fb      	str	r3, [r7, #12]
 8104ad8:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8104ada:	4b07      	ldr	r3, [pc, #28]	; (8104af8 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8104adc:	685a      	ldr	r2, [r3, #4]
 8104ade:	4906      	ldr	r1, [pc, #24]	; (8104af8 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8104ae0:	687b      	ldr	r3, [r7, #4]
 8104ae2:	4313      	orrs	r3, r2
 8104ae4:	604b      	str	r3, [r1, #4]
}
 8104ae6:	bf00      	nop
 8104ae8:	3714      	adds	r7, #20
 8104aea:	46bd      	mov	sp, r7
 8104aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104af0:	4770      	bx	lr
 8104af2:	bf00      	nop
 8104af4:	58024400 	.word	0x58024400
 8104af8:	58000400 	.word	0x58000400

08104afc <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8104afc:	b580      	push	{r7, lr}
 8104afe:	b084      	sub	sp, #16
 8104b00:	af00      	add	r7, sp, #0
 8104b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8104b04:	687b      	ldr	r3, [r7, #4]
 8104b06:	2b00      	cmp	r3, #0
 8104b08:	d101      	bne.n	8104b0e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8104b0a:	2301      	movs	r3, #1
 8104b0c:	e038      	b.n	8104b80 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8104b0e:	687b      	ldr	r3, [r7, #4]
 8104b10:	681b      	ldr	r3, [r3, #0]
 8104b12:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8104b16:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8104b18:	687b      	ldr	r3, [r7, #4]
 8104b1a:	681b      	ldr	r3, [r3, #0]
 8104b1c:	f245 5255 	movw	r2, #21845	; 0x5555
 8104b20:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8104b22:	687b      	ldr	r3, [r7, #4]
 8104b24:	681b      	ldr	r3, [r3, #0]
 8104b26:	687a      	ldr	r2, [r7, #4]
 8104b28:	6852      	ldr	r2, [r2, #4]
 8104b2a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8104b2c:	687b      	ldr	r3, [r7, #4]
 8104b2e:	681b      	ldr	r3, [r3, #0]
 8104b30:	687a      	ldr	r2, [r7, #4]
 8104b32:	6892      	ldr	r2, [r2, #8]
 8104b34:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8104b36:	f7fd f95f 	bl	8101df8 <HAL_GetTick>
 8104b3a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8104b3c:	e008      	b.n	8104b50 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8104b3e:	f7fd f95b 	bl	8101df8 <HAL_GetTick>
 8104b42:	4602      	mov	r2, r0
 8104b44:	68fb      	ldr	r3, [r7, #12]
 8104b46:	1ad3      	subs	r3, r2, r3
 8104b48:	2b30      	cmp	r3, #48	; 0x30
 8104b4a:	d901      	bls.n	8104b50 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8104b4c:	2303      	movs	r3, #3
 8104b4e:	e017      	b.n	8104b80 <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 8104b50:	687b      	ldr	r3, [r7, #4]
 8104b52:	681b      	ldr	r3, [r3, #0]
 8104b54:	68db      	ldr	r3, [r3, #12]
 8104b56:	2b00      	cmp	r3, #0
 8104b58:	d1f1      	bne.n	8104b3e <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8104b5a:	687b      	ldr	r3, [r7, #4]
 8104b5c:	681b      	ldr	r3, [r3, #0]
 8104b5e:	691a      	ldr	r2, [r3, #16]
 8104b60:	687b      	ldr	r3, [r7, #4]
 8104b62:	68db      	ldr	r3, [r3, #12]
 8104b64:	429a      	cmp	r2, r3
 8104b66:	d005      	beq.n	8104b74 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8104b68:	687b      	ldr	r3, [r7, #4]
 8104b6a:	681b      	ldr	r3, [r3, #0]
 8104b6c:	687a      	ldr	r2, [r7, #4]
 8104b6e:	68d2      	ldr	r2, [r2, #12]
 8104b70:	611a      	str	r2, [r3, #16]
 8104b72:	e004      	b.n	8104b7e <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8104b74:	687b      	ldr	r3, [r7, #4]
 8104b76:	681b      	ldr	r3, [r3, #0]
 8104b78:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8104b7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8104b7e:	2300      	movs	r3, #0
}
 8104b80:	4618      	mov	r0, r3
 8104b82:	3710      	adds	r7, #16
 8104b84:	46bd      	mov	sp, r7
 8104b86:	bd80      	pop	{r7, pc}

08104b88 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8104b88:	b480      	push	{r7}
 8104b8a:	b083      	sub	sp, #12
 8104b8c:	af00      	add	r7, sp, #0
 8104b8e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8104b90:	687b      	ldr	r3, [r7, #4]
 8104b92:	681b      	ldr	r3, [r3, #0]
 8104b94:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8104b98:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8104b9a:	2300      	movs	r3, #0
}
 8104b9c:	4618      	mov	r0, r3
 8104b9e:	370c      	adds	r7, #12
 8104ba0:	46bd      	mov	sp, r7
 8104ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ba6:	4770      	bx	lr

08104ba8 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8104ba8:	b580      	push	{r7, lr}
 8104baa:	b084      	sub	sp, #16
 8104bac:	af00      	add	r7, sp, #0
 8104bae:	60f8      	str	r0, [r7, #12]
 8104bb0:	460b      	mov	r3, r1
 8104bb2:	607a      	str	r2, [r7, #4]
 8104bb4:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8104bb6:	4b35      	ldr	r3, [pc, #212]	; (8104c8c <HAL_PWREx_EnterSTOPMode+0xe4>)
 8104bb8:	681b      	ldr	r3, [r3, #0]
 8104bba:	f023 0201 	bic.w	r2, r3, #1
 8104bbe:	4933      	ldr	r1, [pc, #204]	; (8104c8c <HAL_PWREx_EnterSTOPMode+0xe4>)
 8104bc0:	68fb      	ldr	r3, [r7, #12]
 8104bc2:	4313      	orrs	r3, r2
 8104bc4:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8104bc6:	687b      	ldr	r3, [r7, #4]
 8104bc8:	2b00      	cmp	r3, #0
 8104bca:	d121      	bne.n	8104c10 <HAL_PWREx_EnterSTOPMode+0x68>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8104bcc:	f7fd fa00 	bl	8101fd0 <HAL_GetCurrentCPUID>
 8104bd0:	4603      	mov	r3, r0
 8104bd2:	2b03      	cmp	r3, #3
 8104bd4:	d154      	bne.n	8104c80 <HAL_PWREx_EnterSTOPMode+0xd8>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8104bd6:	4b2d      	ldr	r3, [pc, #180]	; (8104c8c <HAL_PWREx_EnterSTOPMode+0xe4>)
 8104bd8:	691b      	ldr	r3, [r3, #16]
 8104bda:	4a2c      	ldr	r2, [pc, #176]	; (8104c8c <HAL_PWREx_EnterSTOPMode+0xe4>)
 8104bdc:	f023 0301 	bic.w	r3, r3, #1
 8104be0:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104be2:	4b2b      	ldr	r3, [pc, #172]	; (8104c90 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8104be4:	691b      	ldr	r3, [r3, #16]
 8104be6:	4a2a      	ldr	r2, [pc, #168]	; (8104c90 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8104be8:	f043 0304 	orr.w	r3, r3, #4
 8104bec:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8104bee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8104bf2:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8104bf6:	7afb      	ldrb	r3, [r7, #11]
 8104bf8:	2b01      	cmp	r3, #1
 8104bfa:	d101      	bne.n	8104c00 <HAL_PWREx_EnterSTOPMode+0x58>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8104bfc:	bf30      	wfi
 8104bfe:	e000      	b.n	8104c02 <HAL_PWREx_EnterSTOPMode+0x5a>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8104c00:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104c02:	4b23      	ldr	r3, [pc, #140]	; (8104c90 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8104c04:	691b      	ldr	r3, [r3, #16]
 8104c06:	4a22      	ldr	r2, [pc, #136]	; (8104c90 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8104c08:	f023 0304 	bic.w	r3, r3, #4
 8104c0c:	6113      	str	r3, [r2, #16]
 8104c0e:	e03a      	b.n	8104c86 <HAL_PWREx_EnterSTOPMode+0xde>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8104c10:	687b      	ldr	r3, [r7, #4]
 8104c12:	2b01      	cmp	r3, #1
 8104c14:	d121      	bne.n	8104c5a <HAL_PWREx_EnterSTOPMode+0xb2>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8104c16:	f7fd f9db 	bl	8101fd0 <HAL_GetCurrentCPUID>
 8104c1a:	4603      	mov	r3, r0
 8104c1c:	2b01      	cmp	r3, #1
 8104c1e:	d131      	bne.n	8104c84 <HAL_PWREx_EnterSTOPMode+0xdc>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8104c20:	4b1a      	ldr	r3, [pc, #104]	; (8104c8c <HAL_PWREx_EnterSTOPMode+0xe4>)
 8104c22:	695b      	ldr	r3, [r3, #20]
 8104c24:	4a19      	ldr	r2, [pc, #100]	; (8104c8c <HAL_PWREx_EnterSTOPMode+0xe4>)
 8104c26:	f023 0302 	bic.w	r3, r3, #2
 8104c2a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104c2c:	4b18      	ldr	r3, [pc, #96]	; (8104c90 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8104c2e:	691b      	ldr	r3, [r3, #16]
 8104c30:	4a17      	ldr	r2, [pc, #92]	; (8104c90 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8104c32:	f043 0304 	orr.w	r3, r3, #4
 8104c36:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8104c38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8104c3c:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8104c40:	7afb      	ldrb	r3, [r7, #11]
 8104c42:	2b01      	cmp	r3, #1
 8104c44:	d101      	bne.n	8104c4a <HAL_PWREx_EnterSTOPMode+0xa2>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8104c46:	bf30      	wfi
 8104c48:	e000      	b.n	8104c4c <HAL_PWREx_EnterSTOPMode+0xa4>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8104c4a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104c4c:	4b10      	ldr	r3, [pc, #64]	; (8104c90 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8104c4e:	691b      	ldr	r3, [r3, #16]
 8104c50:	4a0f      	ldr	r2, [pc, #60]	; (8104c90 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8104c52:	f023 0304 	bic.w	r3, r3, #4
 8104c56:	6113      	str	r3, [r2, #16]
 8104c58:	e015      	b.n	8104c86 <HAL_PWREx_EnterSTOPMode+0xde>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8104c5a:	f7fd f9b9 	bl	8101fd0 <HAL_GetCurrentCPUID>
 8104c5e:	4603      	mov	r3, r0
 8104c60:	2b03      	cmp	r3, #3
 8104c62:	d106      	bne.n	8104c72 <HAL_PWREx_EnterSTOPMode+0xca>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8104c64:	4b09      	ldr	r3, [pc, #36]	; (8104c8c <HAL_PWREx_EnterSTOPMode+0xe4>)
 8104c66:	691b      	ldr	r3, [r3, #16]
 8104c68:	4a08      	ldr	r2, [pc, #32]	; (8104c8c <HAL_PWREx_EnterSTOPMode+0xe4>)
 8104c6a:	f023 0304 	bic.w	r3, r3, #4
 8104c6e:	6113      	str	r3, [r2, #16]
 8104c70:	e009      	b.n	8104c86 <HAL_PWREx_EnterSTOPMode+0xde>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8104c72:	4b06      	ldr	r3, [pc, #24]	; (8104c8c <HAL_PWREx_EnterSTOPMode+0xe4>)
 8104c74:	695b      	ldr	r3, [r3, #20]
 8104c76:	4a05      	ldr	r2, [pc, #20]	; (8104c8c <HAL_PWREx_EnterSTOPMode+0xe4>)
 8104c78:	f023 0304 	bic.w	r3, r3, #4
 8104c7c:	6153      	str	r3, [r2, #20]
 8104c7e:	e002      	b.n	8104c86 <HAL_PWREx_EnterSTOPMode+0xde>
      return;
 8104c80:	bf00      	nop
 8104c82:	e000      	b.n	8104c86 <HAL_PWREx_EnterSTOPMode+0xde>
      return;
 8104c84:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8104c86:	3710      	adds	r7, #16
 8104c88:	46bd      	mov	sp, r7
 8104c8a:	bd80      	pop	{r7, pc}
 8104c8c:	58024800 	.word	0x58024800
 8104c90:	e000ed00 	.word	0xe000ed00

08104c94 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8104c94:	b580      	push	{r7, lr}
 8104c96:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8104c98:	f7fd f99a 	bl	8101fd0 <HAL_GetCurrentCPUID>
 8104c9c:	4603      	mov	r3, r0
 8104c9e:	2b03      	cmp	r3, #3
 8104ca0:	d101      	bne.n	8104ca6 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8104ca2:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8104ca4:	e001      	b.n	8104caa <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8104ca6:	bf40      	sev
    __WFE ();
 8104ca8:	bf20      	wfe
}
 8104caa:	bf00      	nop
 8104cac:	bd80      	pop	{r7, pc}
	...

08104cb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8104cb0:	b480      	push	{r7}
 8104cb2:	b089      	sub	sp, #36	; 0x24
 8104cb4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8104cb6:	4baf      	ldr	r3, [pc, #700]	; (8104f74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8104cb8:	691b      	ldr	r3, [r3, #16]
 8104cba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8104cbe:	2b18      	cmp	r3, #24
 8104cc0:	f200 814e 	bhi.w	8104f60 <HAL_RCC_GetSysClockFreq+0x2b0>
 8104cc4:	a201      	add	r2, pc, #4	; (adr r2, 8104ccc <HAL_RCC_GetSysClockFreq+0x1c>)
 8104cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104cca:	bf00      	nop
 8104ccc:	08104d31 	.word	0x08104d31
 8104cd0:	08104f61 	.word	0x08104f61
 8104cd4:	08104f61 	.word	0x08104f61
 8104cd8:	08104f61 	.word	0x08104f61
 8104cdc:	08104f61 	.word	0x08104f61
 8104ce0:	08104f61 	.word	0x08104f61
 8104ce4:	08104f61 	.word	0x08104f61
 8104ce8:	08104f61 	.word	0x08104f61
 8104cec:	08104d57 	.word	0x08104d57
 8104cf0:	08104f61 	.word	0x08104f61
 8104cf4:	08104f61 	.word	0x08104f61
 8104cf8:	08104f61 	.word	0x08104f61
 8104cfc:	08104f61 	.word	0x08104f61
 8104d00:	08104f61 	.word	0x08104f61
 8104d04:	08104f61 	.word	0x08104f61
 8104d08:	08104f61 	.word	0x08104f61
 8104d0c:	08104d5d 	.word	0x08104d5d
 8104d10:	08104f61 	.word	0x08104f61
 8104d14:	08104f61 	.word	0x08104f61
 8104d18:	08104f61 	.word	0x08104f61
 8104d1c:	08104f61 	.word	0x08104f61
 8104d20:	08104f61 	.word	0x08104f61
 8104d24:	08104f61 	.word	0x08104f61
 8104d28:	08104f61 	.word	0x08104f61
 8104d2c:	08104d63 	.word	0x08104d63
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104d30:	4b90      	ldr	r3, [pc, #576]	; (8104f74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8104d32:	681b      	ldr	r3, [r3, #0]
 8104d34:	f003 0320 	and.w	r3, r3, #32
 8104d38:	2b00      	cmp	r3, #0
 8104d3a:	d009      	beq.n	8104d50 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104d3c:	4b8d      	ldr	r3, [pc, #564]	; (8104f74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8104d3e:	681b      	ldr	r3, [r3, #0]
 8104d40:	08db      	lsrs	r3, r3, #3
 8104d42:	f003 0303 	and.w	r3, r3, #3
 8104d46:	4a8c      	ldr	r2, [pc, #560]	; (8104f78 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8104d48:	fa22 f303 	lsr.w	r3, r2, r3
 8104d4c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8104d4e:	e10a      	b.n	8104f66 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8104d50:	4b89      	ldr	r3, [pc, #548]	; (8104f78 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8104d52:	61bb      	str	r3, [r7, #24]
    break;
 8104d54:	e107      	b.n	8104f66 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8104d56:	4b89      	ldr	r3, [pc, #548]	; (8104f7c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8104d58:	61bb      	str	r3, [r7, #24]
    break;
 8104d5a:	e104      	b.n	8104f66 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8104d5c:	4b88      	ldr	r3, [pc, #544]	; (8104f80 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8104d5e:	61bb      	str	r3, [r7, #24]
    break;
 8104d60:	e101      	b.n	8104f66 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104d62:	4b84      	ldr	r3, [pc, #528]	; (8104f74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8104d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104d66:	f003 0303 	and.w	r3, r3, #3
 8104d6a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8104d6c:	4b81      	ldr	r3, [pc, #516]	; (8104f74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8104d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104d70:	091b      	lsrs	r3, r3, #4
 8104d72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8104d76:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8104d78:	4b7e      	ldr	r3, [pc, #504]	; (8104f74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8104d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104d7c:	f003 0301 	and.w	r3, r3, #1
 8104d80:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8104d82:	4b7c      	ldr	r3, [pc, #496]	; (8104f74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8104d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8104d86:	08db      	lsrs	r3, r3, #3
 8104d88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104d8c:	68fa      	ldr	r2, [r7, #12]
 8104d8e:	fb02 f303 	mul.w	r3, r2, r3
 8104d92:	ee07 3a90 	vmov	s15, r3
 8104d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104d9a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8104d9e:	693b      	ldr	r3, [r7, #16]
 8104da0:	2b00      	cmp	r3, #0
 8104da2:	f000 80da 	beq.w	8104f5a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8104da6:	697b      	ldr	r3, [r7, #20]
 8104da8:	2b01      	cmp	r3, #1
 8104daa:	d05a      	beq.n	8104e62 <HAL_RCC_GetSysClockFreq+0x1b2>
 8104dac:	2b01      	cmp	r3, #1
 8104dae:	d302      	bcc.n	8104db6 <HAL_RCC_GetSysClockFreq+0x106>
 8104db0:	2b02      	cmp	r3, #2
 8104db2:	d078      	beq.n	8104ea6 <HAL_RCC_GetSysClockFreq+0x1f6>
 8104db4:	e099      	b.n	8104eea <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104db6:	4b6f      	ldr	r3, [pc, #444]	; (8104f74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8104db8:	681b      	ldr	r3, [r3, #0]
 8104dba:	f003 0320 	and.w	r3, r3, #32
 8104dbe:	2b00      	cmp	r3, #0
 8104dc0:	d02d      	beq.n	8104e1e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104dc2:	4b6c      	ldr	r3, [pc, #432]	; (8104f74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8104dc4:	681b      	ldr	r3, [r3, #0]
 8104dc6:	08db      	lsrs	r3, r3, #3
 8104dc8:	f003 0303 	and.w	r3, r3, #3
 8104dcc:	4a6a      	ldr	r2, [pc, #424]	; (8104f78 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8104dce:	fa22 f303 	lsr.w	r3, r2, r3
 8104dd2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104dd4:	687b      	ldr	r3, [r7, #4]
 8104dd6:	ee07 3a90 	vmov	s15, r3
 8104dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104dde:	693b      	ldr	r3, [r7, #16]
 8104de0:	ee07 3a90 	vmov	s15, r3
 8104de4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104de8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104dec:	4b61      	ldr	r3, [pc, #388]	; (8104f74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8104dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104df4:	ee07 3a90 	vmov	s15, r3
 8104df8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104dfc:	ed97 6a02 	vldr	s12, [r7, #8]
 8104e00:	eddf 5a60 	vldr	s11, [pc, #384]	; 8104f84 <HAL_RCC_GetSysClockFreq+0x2d4>
 8104e04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104e08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104e0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104e10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104e14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104e18:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8104e1c:	e087      	b.n	8104f2e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104e1e:	693b      	ldr	r3, [r7, #16]
 8104e20:	ee07 3a90 	vmov	s15, r3
 8104e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104e28:	eddf 6a57 	vldr	s13, [pc, #348]	; 8104f88 <HAL_RCC_GetSysClockFreq+0x2d8>
 8104e2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104e30:	4b50      	ldr	r3, [pc, #320]	; (8104f74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8104e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104e38:	ee07 3a90 	vmov	s15, r3
 8104e3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104e40:	ed97 6a02 	vldr	s12, [r7, #8]
 8104e44:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8104f84 <HAL_RCC_GetSysClockFreq+0x2d4>
 8104e48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104e4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104e50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104e54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104e5c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104e60:	e065      	b.n	8104f2e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104e62:	693b      	ldr	r3, [r7, #16]
 8104e64:	ee07 3a90 	vmov	s15, r3
 8104e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104e6c:	eddf 6a47 	vldr	s13, [pc, #284]	; 8104f8c <HAL_RCC_GetSysClockFreq+0x2dc>
 8104e70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104e74:	4b3f      	ldr	r3, [pc, #252]	; (8104f74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8104e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104e7c:	ee07 3a90 	vmov	s15, r3
 8104e80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104e84:	ed97 6a02 	vldr	s12, [r7, #8]
 8104e88:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8104f84 <HAL_RCC_GetSysClockFreq+0x2d4>
 8104e8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104e90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104e94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104e98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104ea0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104ea4:	e043      	b.n	8104f2e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104ea6:	693b      	ldr	r3, [r7, #16]
 8104ea8:	ee07 3a90 	vmov	s15, r3
 8104eac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104eb0:	eddf 6a37 	vldr	s13, [pc, #220]	; 8104f90 <HAL_RCC_GetSysClockFreq+0x2e0>
 8104eb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104eb8:	4b2e      	ldr	r3, [pc, #184]	; (8104f74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8104eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104ec0:	ee07 3a90 	vmov	s15, r3
 8104ec4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104ec8:	ed97 6a02 	vldr	s12, [r7, #8]
 8104ecc:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8104f84 <HAL_RCC_GetSysClockFreq+0x2d4>
 8104ed0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104ed4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104ed8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104edc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104ee4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104ee8:	e021      	b.n	8104f2e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104eea:	693b      	ldr	r3, [r7, #16]
 8104eec:	ee07 3a90 	vmov	s15, r3
 8104ef0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104ef4:	eddf 6a25 	vldr	s13, [pc, #148]	; 8104f8c <HAL_RCC_GetSysClockFreq+0x2dc>
 8104ef8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104efc:	4b1d      	ldr	r3, [pc, #116]	; (8104f74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8104efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104f04:	ee07 3a90 	vmov	s15, r3
 8104f08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104f0c:	ed97 6a02 	vldr	s12, [r7, #8]
 8104f10:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8104f84 <HAL_RCC_GetSysClockFreq+0x2d4>
 8104f14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104f18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104f1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104f20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104f28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104f2c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8104f2e:	4b11      	ldr	r3, [pc, #68]	; (8104f74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8104f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104f32:	0a5b      	lsrs	r3, r3, #9
 8104f34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104f38:	3301      	adds	r3, #1
 8104f3a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8104f3c:	683b      	ldr	r3, [r7, #0]
 8104f3e:	ee07 3a90 	vmov	s15, r3
 8104f42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8104f46:	edd7 6a07 	vldr	s13, [r7, #28]
 8104f4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104f4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104f52:	ee17 3a90 	vmov	r3, s15
 8104f56:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8104f58:	e005      	b.n	8104f66 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8104f5a:	2300      	movs	r3, #0
 8104f5c:	61bb      	str	r3, [r7, #24]
    break;
 8104f5e:	e002      	b.n	8104f66 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8104f60:	4b06      	ldr	r3, [pc, #24]	; (8104f7c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8104f62:	61bb      	str	r3, [r7, #24]
    break;
 8104f64:	bf00      	nop
  }

  return sysclockfreq;
 8104f66:	69bb      	ldr	r3, [r7, #24]
}
 8104f68:	4618      	mov	r0, r3
 8104f6a:	3724      	adds	r7, #36	; 0x24
 8104f6c:	46bd      	mov	sp, r7
 8104f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f72:	4770      	bx	lr
 8104f74:	58024400 	.word	0x58024400
 8104f78:	03d09000 	.word	0x03d09000
 8104f7c:	003d0900 	.word	0x003d0900
 8104f80:	017d7840 	.word	0x017d7840
 8104f84:	46000000 	.word	0x46000000
 8104f88:	4c742400 	.word	0x4c742400
 8104f8c:	4a742400 	.word	0x4a742400
 8104f90:	4bbebc20 	.word	0x4bbebc20

08104f94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8104f94:	b580      	push	{r7, lr}
 8104f96:	b082      	sub	sp, #8
 8104f98:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8104f9a:	f7ff fe89 	bl	8104cb0 <HAL_RCC_GetSysClockFreq>
 8104f9e:	4601      	mov	r1, r0
 8104fa0:	4b11      	ldr	r3, [pc, #68]	; (8104fe8 <HAL_RCC_GetHCLKFreq+0x54>)
 8104fa2:	699b      	ldr	r3, [r3, #24]
 8104fa4:	0a1b      	lsrs	r3, r3, #8
 8104fa6:	f003 030f 	and.w	r3, r3, #15
 8104faa:	4a10      	ldr	r2, [pc, #64]	; (8104fec <HAL_RCC_GetHCLKFreq+0x58>)
 8104fac:	5cd3      	ldrb	r3, [r2, r3]
 8104fae:	f003 031f 	and.w	r3, r3, #31
 8104fb2:	fa21 f303 	lsr.w	r3, r1, r3
 8104fb6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8104fb8:	4b0b      	ldr	r3, [pc, #44]	; (8104fe8 <HAL_RCC_GetHCLKFreq+0x54>)
 8104fba:	699b      	ldr	r3, [r3, #24]
 8104fbc:	f003 030f 	and.w	r3, r3, #15
 8104fc0:	4a0a      	ldr	r2, [pc, #40]	; (8104fec <HAL_RCC_GetHCLKFreq+0x58>)
 8104fc2:	5cd3      	ldrb	r3, [r2, r3]
 8104fc4:	f003 031f 	and.w	r3, r3, #31
 8104fc8:	687a      	ldr	r2, [r7, #4]
 8104fca:	fa22 f303 	lsr.w	r3, r2, r3
 8104fce:	4a08      	ldr	r2, [pc, #32]	; (8104ff0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8104fd0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8104fd2:	4b07      	ldr	r3, [pc, #28]	; (8104ff0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8104fd4:	681b      	ldr	r3, [r3, #0]
 8104fd6:	4a07      	ldr	r2, [pc, #28]	; (8104ff4 <HAL_RCC_GetHCLKFreq+0x60>)
 8104fd8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8104fda:	4b05      	ldr	r3, [pc, #20]	; (8104ff0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8104fdc:	681b      	ldr	r3, [r3, #0]
}
 8104fde:	4618      	mov	r0, r3
 8104fe0:	3708      	adds	r7, #8
 8104fe2:	46bd      	mov	sp, r7
 8104fe4:	bd80      	pop	{r7, pc}
 8104fe6:	bf00      	nop
 8104fe8:	58024400 	.word	0x58024400
 8104fec:	0810bef8 	.word	0x0810bef8
 8104ff0:	10000004 	.word	0x10000004
 8104ff4:	10000000 	.word	0x10000000

08104ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8104ff8:	b580      	push	{r7, lr}
 8104ffa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8104ffc:	f7ff ffca 	bl	8104f94 <HAL_RCC_GetHCLKFreq>
 8105000:	4601      	mov	r1, r0
 8105002:	4b06      	ldr	r3, [pc, #24]	; (810501c <HAL_RCC_GetPCLK1Freq+0x24>)
 8105004:	69db      	ldr	r3, [r3, #28]
 8105006:	091b      	lsrs	r3, r3, #4
 8105008:	f003 0307 	and.w	r3, r3, #7
 810500c:	4a04      	ldr	r2, [pc, #16]	; (8105020 <HAL_RCC_GetPCLK1Freq+0x28>)
 810500e:	5cd3      	ldrb	r3, [r2, r3]
 8105010:	f003 031f 	and.w	r3, r3, #31
 8105014:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8105018:	4618      	mov	r0, r3
 810501a:	bd80      	pop	{r7, pc}
 810501c:	58024400 	.word	0x58024400
 8105020:	0810bef8 	.word	0x0810bef8

08105024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8105024:	b580      	push	{r7, lr}
 8105026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8105028:	f7ff ffb4 	bl	8104f94 <HAL_RCC_GetHCLKFreq>
 810502c:	4601      	mov	r1, r0
 810502e:	4b06      	ldr	r3, [pc, #24]	; (8105048 <HAL_RCC_GetPCLK2Freq+0x24>)
 8105030:	69db      	ldr	r3, [r3, #28]
 8105032:	0a1b      	lsrs	r3, r3, #8
 8105034:	f003 0307 	and.w	r3, r3, #7
 8105038:	4a04      	ldr	r2, [pc, #16]	; (810504c <HAL_RCC_GetPCLK2Freq+0x28>)
 810503a:	5cd3      	ldrb	r3, [r2, r3]
 810503c:	f003 031f 	and.w	r3, r3, #31
 8105040:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8105044:	4618      	mov	r0, r3
 8105046:	bd80      	pop	{r7, pc}
 8105048:	58024400 	.word	0x58024400
 810504c:	0810bef8 	.word	0x0810bef8

08105050 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8105050:	b480      	push	{r7}
 8105052:	b083      	sub	sp, #12
 8105054:	af00      	add	r7, sp, #0
 8105056:	6078      	str	r0, [r7, #4]
 8105058:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 810505a:	687b      	ldr	r3, [r7, #4]
 810505c:	223f      	movs	r2, #63	; 0x3f
 810505e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8105060:	4b1a      	ldr	r3, [pc, #104]	; (81050cc <HAL_RCC_GetClockConfig+0x7c>)
 8105062:	691b      	ldr	r3, [r3, #16]
 8105064:	f003 0207 	and.w	r2, r3, #7
 8105068:	687b      	ldr	r3, [r7, #4]
 810506a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 810506c:	4b17      	ldr	r3, [pc, #92]	; (81050cc <HAL_RCC_GetClockConfig+0x7c>)
 810506e:	699b      	ldr	r3, [r3, #24]
 8105070:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8105074:	687b      	ldr	r3, [r7, #4]
 8105076:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8105078:	4b14      	ldr	r3, [pc, #80]	; (81050cc <HAL_RCC_GetClockConfig+0x7c>)
 810507a:	699b      	ldr	r3, [r3, #24]
 810507c:	f003 020f 	and.w	r2, r3, #15
 8105080:	687b      	ldr	r3, [r7, #4]
 8105082:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8105084:	4b11      	ldr	r3, [pc, #68]	; (81050cc <HAL_RCC_GetClockConfig+0x7c>)
 8105086:	699b      	ldr	r3, [r3, #24]
 8105088:	f003 0270 	and.w	r2, r3, #112	; 0x70
 810508c:	687b      	ldr	r3, [r7, #4]
 810508e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8105090:	4b0e      	ldr	r3, [pc, #56]	; (81050cc <HAL_RCC_GetClockConfig+0x7c>)
 8105092:	69db      	ldr	r3, [r3, #28]
 8105094:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8105098:	687b      	ldr	r3, [r7, #4]
 810509a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 810509c:	4b0b      	ldr	r3, [pc, #44]	; (81050cc <HAL_RCC_GetClockConfig+0x7c>)
 810509e:	69db      	ldr	r3, [r3, #28]
 81050a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 81050a4:	687b      	ldr	r3, [r7, #4]
 81050a6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 81050a8:	4b08      	ldr	r3, [pc, #32]	; (81050cc <HAL_RCC_GetClockConfig+0x7c>)
 81050aa:	6a1b      	ldr	r3, [r3, #32]
 81050ac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 81050b0:	687b      	ldr	r3, [r7, #4]
 81050b2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 81050b4:	4b06      	ldr	r3, [pc, #24]	; (81050d0 <HAL_RCC_GetClockConfig+0x80>)
 81050b6:	681b      	ldr	r3, [r3, #0]
 81050b8:	f003 020f 	and.w	r2, r3, #15
 81050bc:	683b      	ldr	r3, [r7, #0]
 81050be:	601a      	str	r2, [r3, #0]
}
 81050c0:	bf00      	nop
 81050c2:	370c      	adds	r7, #12
 81050c4:	46bd      	mov	sp, r7
 81050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81050ca:	4770      	bx	lr
 81050cc:	58024400 	.word	0x58024400
 81050d0:	52002000 	.word	0x52002000

081050d4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81050d4:	b580      	push	{r7, lr}
 81050d6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81050d8:	f7ff ff5c 	bl	8104f94 <HAL_RCC_GetHCLKFreq>
 81050dc:	4601      	mov	r1, r0
 81050de:	4b06      	ldr	r3, [pc, #24]	; (81050f8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81050e0:	6a1b      	ldr	r3, [r3, #32]
 81050e2:	091b      	lsrs	r3, r3, #4
 81050e4:	f003 0307 	and.w	r3, r3, #7
 81050e8:	4a04      	ldr	r2, [pc, #16]	; (81050fc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81050ea:	5cd3      	ldrb	r3, [r2, r3]
 81050ec:	f003 031f 	and.w	r3, r3, #31
 81050f0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 81050f4:	4618      	mov	r0, r3
 81050f6:	bd80      	pop	{r7, pc}
 81050f8:	58024400 	.word	0x58024400
 81050fc:	0810bef8 	.word	0x0810bef8

08105100 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8105100:	b480      	push	{r7}
 8105102:	b089      	sub	sp, #36	; 0x24
 8105104:	af00      	add	r7, sp, #0
 8105106:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105108:	4b9d      	ldr	r3, [pc, #628]	; (8105380 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810510a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810510c:	f003 0303 	and.w	r3, r3, #3
 8105110:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8105112:	4b9b      	ldr	r3, [pc, #620]	; (8105380 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8105114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105116:	0b1b      	lsrs	r3, r3, #12
 8105118:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810511c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810511e:	4b98      	ldr	r3, [pc, #608]	; (8105380 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8105120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105122:	091b      	lsrs	r3, r3, #4
 8105124:	f003 0301 	and.w	r3, r3, #1
 8105128:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 810512a:	4b95      	ldr	r3, [pc, #596]	; (8105380 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810512c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810512e:	08db      	lsrs	r3, r3, #3
 8105130:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105134:	693a      	ldr	r2, [r7, #16]
 8105136:	fb02 f303 	mul.w	r3, r2, r3
 810513a:	ee07 3a90 	vmov	s15, r3
 810513e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105142:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8105146:	697b      	ldr	r3, [r7, #20]
 8105148:	2b00      	cmp	r3, #0
 810514a:	f000 810a 	beq.w	8105362 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 810514e:	69bb      	ldr	r3, [r7, #24]
 8105150:	2b01      	cmp	r3, #1
 8105152:	d05a      	beq.n	810520a <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8105154:	2b01      	cmp	r3, #1
 8105156:	d302      	bcc.n	810515e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8105158:	2b02      	cmp	r3, #2
 810515a:	d078      	beq.n	810524e <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 810515c:	e099      	b.n	8105292 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810515e:	4b88      	ldr	r3, [pc, #544]	; (8105380 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8105160:	681b      	ldr	r3, [r3, #0]
 8105162:	f003 0320 	and.w	r3, r3, #32
 8105166:	2b00      	cmp	r3, #0
 8105168:	d02d      	beq.n	81051c6 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810516a:	4b85      	ldr	r3, [pc, #532]	; (8105380 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810516c:	681b      	ldr	r3, [r3, #0]
 810516e:	08db      	lsrs	r3, r3, #3
 8105170:	f003 0303 	and.w	r3, r3, #3
 8105174:	4a83      	ldr	r2, [pc, #524]	; (8105384 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8105176:	fa22 f303 	lsr.w	r3, r2, r3
 810517a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810517c:	68bb      	ldr	r3, [r7, #8]
 810517e:	ee07 3a90 	vmov	s15, r3
 8105182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105186:	697b      	ldr	r3, [r7, #20]
 8105188:	ee07 3a90 	vmov	s15, r3
 810518c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105190:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105194:	4b7a      	ldr	r3, [pc, #488]	; (8105380 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8105196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810519c:	ee07 3a90 	vmov	s15, r3
 81051a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81051a4:	ed97 6a03 	vldr	s12, [r7, #12]
 81051a8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8105388 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 81051ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81051b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81051b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81051b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81051bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 81051c0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81051c4:	e087      	b.n	81052d6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81051c6:	697b      	ldr	r3, [r7, #20]
 81051c8:	ee07 3a90 	vmov	s15, r3
 81051cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81051d0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 810538c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 81051d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81051d8:	4b69      	ldr	r3, [pc, #420]	; (8105380 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81051da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81051dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81051e0:	ee07 3a90 	vmov	s15, r3
 81051e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81051e8:	ed97 6a03 	vldr	s12, [r7, #12]
 81051ec:	eddf 5a66 	vldr	s11, [pc, #408]	; 8105388 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 81051f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81051f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81051f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81051fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105204:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105208:	e065      	b.n	81052d6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810520a:	697b      	ldr	r3, [r7, #20]
 810520c:	ee07 3a90 	vmov	s15, r3
 8105210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105214:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8105390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8105218:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810521c:	4b58      	ldr	r3, [pc, #352]	; (8105380 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810521e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105224:	ee07 3a90 	vmov	s15, r3
 8105228:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810522c:	ed97 6a03 	vldr	s12, [r7, #12]
 8105230:	eddf 5a55 	vldr	s11, [pc, #340]	; 8105388 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8105234:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105238:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810523c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105240:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105244:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105248:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810524c:	e043      	b.n	81052d6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810524e:	697b      	ldr	r3, [r7, #20]
 8105250:	ee07 3a90 	vmov	s15, r3
 8105254:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105258:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8105394 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 810525c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105260:	4b47      	ldr	r3, [pc, #284]	; (8105380 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8105262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105268:	ee07 3a90 	vmov	s15, r3
 810526c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105270:	ed97 6a03 	vldr	s12, [r7, #12]
 8105274:	eddf 5a44 	vldr	s11, [pc, #272]	; 8105388 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8105278:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810527c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105280:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105284:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105288:	ee67 7a27 	vmul.f32	s15, s14, s15
 810528c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105290:	e021      	b.n	81052d6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8105292:	697b      	ldr	r3, [r7, #20]
 8105294:	ee07 3a90 	vmov	s15, r3
 8105298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810529c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8105390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 81052a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81052a4:	4b36      	ldr	r3, [pc, #216]	; (8105380 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81052a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81052a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81052ac:	ee07 3a90 	vmov	s15, r3
 81052b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81052b4:	ed97 6a03 	vldr	s12, [r7, #12]
 81052b8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8105388 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 81052bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81052c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81052c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81052c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81052cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 81052d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81052d4:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 81052d6:	4b2a      	ldr	r3, [pc, #168]	; (8105380 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81052d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81052da:	0a5b      	lsrs	r3, r3, #9
 81052dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81052e0:	ee07 3a90 	vmov	s15, r3
 81052e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81052e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81052ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 81052f0:	edd7 6a07 	vldr	s13, [r7, #28]
 81052f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81052f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81052fc:	ee17 2a90 	vmov	r2, s15
 8105300:	687b      	ldr	r3, [r7, #4]
 8105302:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8105304:	4b1e      	ldr	r3, [pc, #120]	; (8105380 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8105306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105308:	0c1b      	lsrs	r3, r3, #16
 810530a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810530e:	ee07 3a90 	vmov	s15, r3
 8105312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105316:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810531a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810531e:	edd7 6a07 	vldr	s13, [r7, #28]
 8105322:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105326:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810532a:	ee17 2a90 	vmov	r2, s15
 810532e:	687b      	ldr	r3, [r7, #4]
 8105330:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8105332:	4b13      	ldr	r3, [pc, #76]	; (8105380 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8105334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105336:	0e1b      	lsrs	r3, r3, #24
 8105338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810533c:	ee07 3a90 	vmov	s15, r3
 8105340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105344:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105348:	ee37 7a87 	vadd.f32	s14, s15, s14
 810534c:	edd7 6a07 	vldr	s13, [r7, #28]
 8105350:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105354:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105358:	ee17 2a90 	vmov	r2, s15
 810535c:	687b      	ldr	r3, [r7, #4]
 810535e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8105360:	e008      	b.n	8105374 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8105362:	687b      	ldr	r3, [r7, #4]
 8105364:	2200      	movs	r2, #0
 8105366:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8105368:	687b      	ldr	r3, [r7, #4]
 810536a:	2200      	movs	r2, #0
 810536c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 810536e:	687b      	ldr	r3, [r7, #4]
 8105370:	2200      	movs	r2, #0
 8105372:	609a      	str	r2, [r3, #8]
}
 8105374:	bf00      	nop
 8105376:	3724      	adds	r7, #36	; 0x24
 8105378:	46bd      	mov	sp, r7
 810537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810537e:	4770      	bx	lr
 8105380:	58024400 	.word	0x58024400
 8105384:	03d09000 	.word	0x03d09000
 8105388:	46000000 	.word	0x46000000
 810538c:	4c742400 	.word	0x4c742400
 8105390:	4a742400 	.word	0x4a742400
 8105394:	4bbebc20 	.word	0x4bbebc20

08105398 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8105398:	b480      	push	{r7}
 810539a:	b089      	sub	sp, #36	; 0x24
 810539c:	af00      	add	r7, sp, #0
 810539e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81053a0:	4b9d      	ldr	r3, [pc, #628]	; (8105618 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81053a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81053a4:	f003 0303 	and.w	r3, r3, #3
 81053a8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 81053aa:	4b9b      	ldr	r3, [pc, #620]	; (8105618 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81053ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81053ae:	0d1b      	lsrs	r3, r3, #20
 81053b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81053b4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81053b6:	4b98      	ldr	r3, [pc, #608]	; (8105618 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81053b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81053ba:	0a1b      	lsrs	r3, r3, #8
 81053bc:	f003 0301 	and.w	r3, r3, #1
 81053c0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 81053c2:	4b95      	ldr	r3, [pc, #596]	; (8105618 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81053c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81053c6:	08db      	lsrs	r3, r3, #3
 81053c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81053cc:	693a      	ldr	r2, [r7, #16]
 81053ce:	fb02 f303 	mul.w	r3, r2, r3
 81053d2:	ee07 3a90 	vmov	s15, r3
 81053d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81053da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 81053de:	697b      	ldr	r3, [r7, #20]
 81053e0:	2b00      	cmp	r3, #0
 81053e2:	f000 810a 	beq.w	81055fa <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 81053e6:	69bb      	ldr	r3, [r7, #24]
 81053e8:	2b01      	cmp	r3, #1
 81053ea:	d05a      	beq.n	81054a2 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 81053ec:	2b01      	cmp	r3, #1
 81053ee:	d302      	bcc.n	81053f6 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 81053f0:	2b02      	cmp	r3, #2
 81053f2:	d078      	beq.n	81054e6 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 81053f4:	e099      	b.n	810552a <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81053f6:	4b88      	ldr	r3, [pc, #544]	; (8105618 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81053f8:	681b      	ldr	r3, [r3, #0]
 81053fa:	f003 0320 	and.w	r3, r3, #32
 81053fe:	2b00      	cmp	r3, #0
 8105400:	d02d      	beq.n	810545e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105402:	4b85      	ldr	r3, [pc, #532]	; (8105618 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8105404:	681b      	ldr	r3, [r3, #0]
 8105406:	08db      	lsrs	r3, r3, #3
 8105408:	f003 0303 	and.w	r3, r3, #3
 810540c:	4a83      	ldr	r2, [pc, #524]	; (810561c <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 810540e:	fa22 f303 	lsr.w	r3, r2, r3
 8105412:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105414:	68bb      	ldr	r3, [r7, #8]
 8105416:	ee07 3a90 	vmov	s15, r3
 810541a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810541e:	697b      	ldr	r3, [r7, #20]
 8105420:	ee07 3a90 	vmov	s15, r3
 8105424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105428:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810542c:	4b7a      	ldr	r3, [pc, #488]	; (8105618 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810542e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105434:	ee07 3a90 	vmov	s15, r3
 8105438:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810543c:	ed97 6a03 	vldr	s12, [r7, #12]
 8105440:	eddf 5a77 	vldr	s11, [pc, #476]	; 8105620 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8105444:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105448:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810544c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105450:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105458:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810545c:	e087      	b.n	810556e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810545e:	697b      	ldr	r3, [r7, #20]
 8105460:	ee07 3a90 	vmov	s15, r3
 8105464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105468:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8105624 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 810546c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105470:	4b69      	ldr	r3, [pc, #420]	; (8105618 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8105472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105478:	ee07 3a90 	vmov	s15, r3
 810547c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105480:	ed97 6a03 	vldr	s12, [r7, #12]
 8105484:	eddf 5a66 	vldr	s11, [pc, #408]	; 8105620 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8105488:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810548c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105490:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105494:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105498:	ee67 7a27 	vmul.f32	s15, s14, s15
 810549c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81054a0:	e065      	b.n	810556e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81054a2:	697b      	ldr	r3, [r7, #20]
 81054a4:	ee07 3a90 	vmov	s15, r3
 81054a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81054ac:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8105628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 81054b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81054b4:	4b58      	ldr	r3, [pc, #352]	; (8105618 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81054b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81054b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81054bc:	ee07 3a90 	vmov	s15, r3
 81054c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81054c4:	ed97 6a03 	vldr	s12, [r7, #12]
 81054c8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8105620 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 81054cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81054d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81054d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81054d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81054dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 81054e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81054e4:	e043      	b.n	810556e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81054e6:	697b      	ldr	r3, [r7, #20]
 81054e8:	ee07 3a90 	vmov	s15, r3
 81054ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81054f0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 810562c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 81054f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81054f8:	4b47      	ldr	r3, [pc, #284]	; (8105618 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81054fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81054fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105500:	ee07 3a90 	vmov	s15, r3
 8105504:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105508:	ed97 6a03 	vldr	s12, [r7, #12]
 810550c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8105620 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8105510:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105514:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105518:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810551c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105524:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105528:	e021      	b.n	810556e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810552a:	697b      	ldr	r3, [r7, #20]
 810552c:	ee07 3a90 	vmov	s15, r3
 8105530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105534:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8105628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8105538:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810553c:	4b36      	ldr	r3, [pc, #216]	; (8105618 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810553e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105544:	ee07 3a90 	vmov	s15, r3
 8105548:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810554c:	ed97 6a03 	vldr	s12, [r7, #12]
 8105550:	eddf 5a33 	vldr	s11, [pc, #204]	; 8105620 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8105554:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105558:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810555c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105560:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105568:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810556c:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 810556e:	4b2a      	ldr	r3, [pc, #168]	; (8105618 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8105570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105572:	0a5b      	lsrs	r3, r3, #9
 8105574:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105578:	ee07 3a90 	vmov	s15, r3
 810557c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105580:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105584:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105588:	edd7 6a07 	vldr	s13, [r7, #28]
 810558c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105590:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105594:	ee17 2a90 	vmov	r2, s15
 8105598:	687b      	ldr	r3, [r7, #4]
 810559a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 810559c:	4b1e      	ldr	r3, [pc, #120]	; (8105618 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810559e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81055a0:	0c1b      	lsrs	r3, r3, #16
 81055a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81055a6:	ee07 3a90 	vmov	s15, r3
 81055aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81055ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81055b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 81055b6:	edd7 6a07 	vldr	s13, [r7, #28]
 81055ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81055be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81055c2:	ee17 2a90 	vmov	r2, s15
 81055c6:	687b      	ldr	r3, [r7, #4]
 81055c8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 81055ca:	4b13      	ldr	r3, [pc, #76]	; (8105618 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81055cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81055ce:	0e1b      	lsrs	r3, r3, #24
 81055d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81055d4:	ee07 3a90 	vmov	s15, r3
 81055d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81055dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81055e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 81055e4:	edd7 6a07 	vldr	s13, [r7, #28]
 81055e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81055ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81055f0:	ee17 2a90 	vmov	r2, s15
 81055f4:	687b      	ldr	r3, [r7, #4]
 81055f6:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 81055f8:	e008      	b.n	810560c <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 81055fa:	687b      	ldr	r3, [r7, #4]
 81055fc:	2200      	movs	r2, #0
 81055fe:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8105600:	687b      	ldr	r3, [r7, #4]
 8105602:	2200      	movs	r2, #0
 8105604:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8105606:	687b      	ldr	r3, [r7, #4]
 8105608:	2200      	movs	r2, #0
 810560a:	609a      	str	r2, [r3, #8]
}
 810560c:	bf00      	nop
 810560e:	3724      	adds	r7, #36	; 0x24
 8105610:	46bd      	mov	sp, r7
 8105612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105616:	4770      	bx	lr
 8105618:	58024400 	.word	0x58024400
 810561c:	03d09000 	.word	0x03d09000
 8105620:	46000000 	.word	0x46000000
 8105624:	4c742400 	.word	0x4c742400
 8105628:	4a742400 	.word	0x4a742400
 810562c:	4bbebc20 	.word	0x4bbebc20

08105630 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8105630:	b580      	push	{r7, lr}
 8105632:	b084      	sub	sp, #16
 8105634:	af00      	add	r7, sp, #0
 8105636:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8105638:	2300      	movs	r3, #0
 810563a:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 810563c:	687b      	ldr	r3, [r7, #4]
 810563e:	2b00      	cmp	r3, #0
 8105640:	d101      	bne.n	8105646 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8105642:	2301      	movs	r3, #1
 8105644:	e0e2      	b.n	810580c <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8105646:	687b      	ldr	r3, [r7, #4]
 8105648:	2200      	movs	r2, #0
 810564a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 810564c:	687b      	ldr	r3, [r7, #4]
 810564e:	681b      	ldr	r3, [r3, #0]
 8105650:	4a70      	ldr	r2, [pc, #448]	; (8105814 <HAL_SPI_Init+0x1e4>)
 8105652:	4293      	cmp	r3, r2
 8105654:	d00f      	beq.n	8105676 <HAL_SPI_Init+0x46>
 8105656:	687b      	ldr	r3, [r7, #4]
 8105658:	681b      	ldr	r3, [r3, #0]
 810565a:	4a6f      	ldr	r2, [pc, #444]	; (8105818 <HAL_SPI_Init+0x1e8>)
 810565c:	4293      	cmp	r3, r2
 810565e:	d00a      	beq.n	8105676 <HAL_SPI_Init+0x46>
 8105660:	687b      	ldr	r3, [r7, #4]
 8105662:	681b      	ldr	r3, [r3, #0]
 8105664:	4a6d      	ldr	r2, [pc, #436]	; (810581c <HAL_SPI_Init+0x1ec>)
 8105666:	4293      	cmp	r3, r2
 8105668:	d005      	beq.n	8105676 <HAL_SPI_Init+0x46>
 810566a:	687b      	ldr	r3, [r7, #4]
 810566c:	68db      	ldr	r3, [r3, #12]
 810566e:	2b0f      	cmp	r3, #15
 8105670:	d901      	bls.n	8105676 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8105672:	2301      	movs	r3, #1
 8105674:	e0ca      	b.n	810580c <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8105676:	6878      	ldr	r0, [r7, #4]
 8105678:	f000 fb96 	bl	8105da8 <SPI_GetPacketSize>
 810567c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810567e:	687b      	ldr	r3, [r7, #4]
 8105680:	681b      	ldr	r3, [r3, #0]
 8105682:	4a64      	ldr	r2, [pc, #400]	; (8105814 <HAL_SPI_Init+0x1e4>)
 8105684:	4293      	cmp	r3, r2
 8105686:	d00c      	beq.n	81056a2 <HAL_SPI_Init+0x72>
 8105688:	687b      	ldr	r3, [r7, #4]
 810568a:	681b      	ldr	r3, [r3, #0]
 810568c:	4a62      	ldr	r2, [pc, #392]	; (8105818 <HAL_SPI_Init+0x1e8>)
 810568e:	4293      	cmp	r3, r2
 8105690:	d007      	beq.n	81056a2 <HAL_SPI_Init+0x72>
 8105692:	687b      	ldr	r3, [r7, #4]
 8105694:	681b      	ldr	r3, [r3, #0]
 8105696:	4a61      	ldr	r2, [pc, #388]	; (810581c <HAL_SPI_Init+0x1ec>)
 8105698:	4293      	cmp	r3, r2
 810569a:	d002      	beq.n	81056a2 <HAL_SPI_Init+0x72>
 810569c:	68bb      	ldr	r3, [r7, #8]
 810569e:	2b08      	cmp	r3, #8
 81056a0:	d811      	bhi.n	81056c6 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 81056a2:	687b      	ldr	r3, [r7, #4]
 81056a4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 81056a6:	4a5b      	ldr	r2, [pc, #364]	; (8105814 <HAL_SPI_Init+0x1e4>)
 81056a8:	4293      	cmp	r3, r2
 81056aa:	d009      	beq.n	81056c0 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 81056ac:	687b      	ldr	r3, [r7, #4]
 81056ae:	681b      	ldr	r3, [r3, #0]
 81056b0:	4a59      	ldr	r2, [pc, #356]	; (8105818 <HAL_SPI_Init+0x1e8>)
 81056b2:	4293      	cmp	r3, r2
 81056b4:	d004      	beq.n	81056c0 <HAL_SPI_Init+0x90>
 81056b6:	687b      	ldr	r3, [r7, #4]
 81056b8:	681b      	ldr	r3, [r3, #0]
 81056ba:	4a58      	ldr	r2, [pc, #352]	; (810581c <HAL_SPI_Init+0x1ec>)
 81056bc:	4293      	cmp	r3, r2
 81056be:	d104      	bne.n	81056ca <HAL_SPI_Init+0x9a>
 81056c0:	68bb      	ldr	r3, [r7, #8]
 81056c2:	2b10      	cmp	r3, #16
 81056c4:	d901      	bls.n	81056ca <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 81056c6:	2301      	movs	r3, #1
 81056c8:	e0a0      	b.n	810580c <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 81056ca:	687b      	ldr	r3, [r7, #4]
 81056cc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81056d0:	b2db      	uxtb	r3, r3
 81056d2:	2b00      	cmp	r3, #0
 81056d4:	d106      	bne.n	81056e4 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 81056d6:	687b      	ldr	r3, [r7, #4]
 81056d8:	2200      	movs	r2, #0
 81056da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 81056de:	6878      	ldr	r0, [r7, #4]
 81056e0:	f7fb ffb8 	bl	8101654 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 81056e4:	687b      	ldr	r3, [r7, #4]
 81056e6:	2202      	movs	r2, #2
 81056e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 81056ec:	687b      	ldr	r3, [r7, #4]
 81056ee:	681b      	ldr	r3, [r3, #0]
 81056f0:	681a      	ldr	r2, [r3, #0]
 81056f2:	687b      	ldr	r3, [r7, #4]
 81056f4:	681b      	ldr	r3, [r3, #0]
 81056f6:	f022 0201 	bic.w	r2, r2, #1
 81056fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 81056fc:	687b      	ldr	r3, [r7, #4]
 81056fe:	699b      	ldr	r3, [r3, #24]
 8105700:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8105704:	d110      	bne.n	8105728 <HAL_SPI_Init+0xf8>
 8105706:	687b      	ldr	r3, [r7, #4]
 8105708:	685b      	ldr	r3, [r3, #4]
 810570a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810570e:	d10b      	bne.n	8105728 <HAL_SPI_Init+0xf8>
 8105710:	687b      	ldr	r3, [r7, #4]
 8105712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105714:	2b00      	cmp	r3, #0
 8105716:	d107      	bne.n	8105728 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8105718:	687b      	ldr	r3, [r7, #4]
 810571a:	681b      	ldr	r3, [r3, #0]
 810571c:	681a      	ldr	r2, [r3, #0]
 810571e:	687b      	ldr	r3, [r7, #4]
 8105720:	681b      	ldr	r3, [r3, #0]
 8105722:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8105726:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8105728:	687b      	ldr	r3, [r7, #4]
 810572a:	69da      	ldr	r2, [r3, #28]
 810572c:	687b      	ldr	r3, [r7, #4]
 810572e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105730:	431a      	orrs	r2, r3
 8105732:	68fb      	ldr	r3, [r7, #12]
 8105734:	431a      	orrs	r2, r3
 8105736:	687b      	ldr	r3, [r7, #4]
 8105738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810573a:	ea42 0103 	orr.w	r1, r2, r3
 810573e:	687b      	ldr	r3, [r7, #4]
 8105740:	68da      	ldr	r2, [r3, #12]
 8105742:	687b      	ldr	r3, [r7, #4]
 8105744:	681b      	ldr	r3, [r3, #0]
 8105746:	430a      	orrs	r2, r1
 8105748:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 810574a:	687b      	ldr	r3, [r7, #4]
 810574c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810574e:	687b      	ldr	r3, [r7, #4]
 8105750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105752:	431a      	orrs	r2, r3
 8105754:	687b      	ldr	r3, [r7, #4]
 8105756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105758:	431a      	orrs	r2, r3
 810575a:	687b      	ldr	r3, [r7, #4]
 810575c:	699b      	ldr	r3, [r3, #24]
 810575e:	431a      	orrs	r2, r3
 8105760:	687b      	ldr	r3, [r7, #4]
 8105762:	691b      	ldr	r3, [r3, #16]
 8105764:	431a      	orrs	r2, r3
 8105766:	687b      	ldr	r3, [r7, #4]
 8105768:	695b      	ldr	r3, [r3, #20]
 810576a:	431a      	orrs	r2, r3
 810576c:	687b      	ldr	r3, [r7, #4]
 810576e:	6a1b      	ldr	r3, [r3, #32]
 8105770:	431a      	orrs	r2, r3
 8105772:	687b      	ldr	r3, [r7, #4]
 8105774:	685b      	ldr	r3, [r3, #4]
 8105776:	431a      	orrs	r2, r3
 8105778:	687b      	ldr	r3, [r7, #4]
 810577a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810577c:	431a      	orrs	r2, r3
 810577e:	687b      	ldr	r3, [r7, #4]
 8105780:	689b      	ldr	r3, [r3, #8]
 8105782:	431a      	orrs	r2, r3
 8105784:	687b      	ldr	r3, [r7, #4]
 8105786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105788:	ea42 0103 	orr.w	r1, r2, r3
 810578c:	687b      	ldr	r3, [r7, #4]
 810578e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8105790:	687b      	ldr	r3, [r7, #4]
 8105792:	681b      	ldr	r3, [r3, #0]
 8105794:	430a      	orrs	r2, r1
 8105796:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8105798:	687b      	ldr	r3, [r7, #4]
 810579a:	685b      	ldr	r3, [r3, #4]
 810579c:	2b00      	cmp	r3, #0
 810579e:	d113      	bne.n	81057c8 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 81057a0:	687b      	ldr	r3, [r7, #4]
 81057a2:	681b      	ldr	r3, [r3, #0]
 81057a4:	689b      	ldr	r3, [r3, #8]
 81057a6:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 81057aa:	687b      	ldr	r3, [r7, #4]
 81057ac:	681b      	ldr	r3, [r3, #0]
 81057ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81057b2:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 81057b4:	687b      	ldr	r3, [r7, #4]
 81057b6:	681b      	ldr	r3, [r3, #0]
 81057b8:	689b      	ldr	r3, [r3, #8]
 81057ba:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 81057be:	687b      	ldr	r3, [r7, #4]
 81057c0:	681b      	ldr	r3, [r3, #0]
 81057c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 81057c6:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 81057c8:	687b      	ldr	r3, [r7, #4]
 81057ca:	681b      	ldr	r3, [r3, #0]
 81057cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 81057ce:	687b      	ldr	r3, [r7, #4]
 81057d0:	681b      	ldr	r3, [r3, #0]
 81057d2:	f022 0201 	bic.w	r2, r2, #1
 81057d6:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 81057d8:	687b      	ldr	r3, [r7, #4]
 81057da:	685b      	ldr	r3, [r3, #4]
 81057dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81057e0:	2b00      	cmp	r3, #0
 81057e2:	d00a      	beq.n	81057fa <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 81057e4:	687b      	ldr	r3, [r7, #4]
 81057e6:	681b      	ldr	r3, [r3, #0]
 81057e8:	68db      	ldr	r3, [r3, #12]
 81057ea:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 81057ee:	687b      	ldr	r3, [r7, #4]
 81057f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81057f2:	687b      	ldr	r3, [r7, #4]
 81057f4:	681b      	ldr	r3, [r3, #0]
 81057f6:	430a      	orrs	r2, r1
 81057f8:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 81057fa:	687b      	ldr	r3, [r7, #4]
 81057fc:	2200      	movs	r2, #0
 81057fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8105802:	687b      	ldr	r3, [r7, #4]
 8105804:	2201      	movs	r2, #1
 8105806:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 810580a:	2300      	movs	r3, #0
}
 810580c:	4618      	mov	r0, r3
 810580e:	3710      	adds	r7, #16
 8105810:	46bd      	mov	sp, r7
 8105812:	bd80      	pop	{r7, pc}
 8105814:	40013000 	.word	0x40013000
 8105818:	40003800 	.word	0x40003800
 810581c:	40003c00 	.word	0x40003c00

08105820 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8105820:	b580      	push	{r7, lr}
 8105822:	b08a      	sub	sp, #40	; 0x28
 8105824:	af00      	add	r7, sp, #0
 8105826:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8105828:	687b      	ldr	r3, [r7, #4]
 810582a:	681b      	ldr	r3, [r3, #0]
 810582c:	691b      	ldr	r3, [r3, #16]
 810582e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8105830:	687b      	ldr	r3, [r7, #4]
 8105832:	681b      	ldr	r3, [r3, #0]
 8105834:	695b      	ldr	r3, [r3, #20]
 8105836:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8105838:	6a3a      	ldr	r2, [r7, #32]
 810583a:	69fb      	ldr	r3, [r7, #28]
 810583c:	4013      	ands	r3, r2
 810583e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8105840:	687b      	ldr	r3, [r7, #4]
 8105842:	681b      	ldr	r3, [r3, #0]
 8105844:	689b      	ldr	r3, [r3, #8]
 8105846:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8105848:	2300      	movs	r3, #0
 810584a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 810584c:	687b      	ldr	r3, [r7, #4]
 810584e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8105852:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8105854:	687b      	ldr	r3, [r7, #4]
 8105856:	681b      	ldr	r3, [r3, #0]
 8105858:	3330      	adds	r3, #48	; 0x30
 810585a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 810585c:	69bb      	ldr	r3, [r7, #24]
 810585e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105862:	2b00      	cmp	r3, #0
 8105864:	d113      	bne.n	810588e <HAL_SPI_IRQHandler+0x6e>
 8105866:	69bb      	ldr	r3, [r7, #24]
 8105868:	f003 0320 	and.w	r3, r3, #32
 810586c:	2b00      	cmp	r3, #0
 810586e:	d10e      	bne.n	810588e <HAL_SPI_IRQHandler+0x6e>
 8105870:	69bb      	ldr	r3, [r7, #24]
 8105872:	f003 0304 	and.w	r3, r3, #4
 8105876:	2b00      	cmp	r3, #0
 8105878:	d009      	beq.n	810588e <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 810587a:	687b      	ldr	r3, [r7, #4]
 810587c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810587e:	6878      	ldr	r0, [r7, #4]
 8105880:	4798      	blx	r3
    hspi->RxISR(hspi);
 8105882:	687b      	ldr	r3, [r7, #4]
 8105884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105886:	6878      	ldr	r0, [r7, #4]
 8105888:	4798      	blx	r3
    handled = 1UL;
 810588a:	2301      	movs	r3, #1
 810588c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 810588e:	69bb      	ldr	r3, [r7, #24]
 8105890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105894:	2b00      	cmp	r3, #0
 8105896:	d10f      	bne.n	81058b8 <HAL_SPI_IRQHandler+0x98>
 8105898:	69bb      	ldr	r3, [r7, #24]
 810589a:	f003 0301 	and.w	r3, r3, #1
 810589e:	2b00      	cmp	r3, #0
 81058a0:	d00a      	beq.n	81058b8 <HAL_SPI_IRQHandler+0x98>
 81058a2:	69bb      	ldr	r3, [r7, #24]
 81058a4:	f003 0304 	and.w	r3, r3, #4
 81058a8:	2b00      	cmp	r3, #0
 81058aa:	d105      	bne.n	81058b8 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 81058ac:	687b      	ldr	r3, [r7, #4]
 81058ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81058b0:	6878      	ldr	r0, [r7, #4]
 81058b2:	4798      	blx	r3
    handled = 1UL;
 81058b4:	2301      	movs	r3, #1
 81058b6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 81058b8:	69bb      	ldr	r3, [r7, #24]
 81058ba:	f003 0320 	and.w	r3, r3, #32
 81058be:	2b00      	cmp	r3, #0
 81058c0:	d10f      	bne.n	81058e2 <HAL_SPI_IRQHandler+0xc2>
 81058c2:	69bb      	ldr	r3, [r7, #24]
 81058c4:	f003 0302 	and.w	r3, r3, #2
 81058c8:	2b00      	cmp	r3, #0
 81058ca:	d00a      	beq.n	81058e2 <HAL_SPI_IRQHandler+0xc2>
 81058cc:	69bb      	ldr	r3, [r7, #24]
 81058ce:	f003 0304 	and.w	r3, r3, #4
 81058d2:	2b00      	cmp	r3, #0
 81058d4:	d105      	bne.n	81058e2 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 81058d6:	687b      	ldr	r3, [r7, #4]
 81058d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81058da:	6878      	ldr	r0, [r7, #4]
 81058dc:	4798      	blx	r3
    handled = 1UL;
 81058de:	2301      	movs	r3, #1
 81058e0:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 81058e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81058e4:	2b00      	cmp	r3, #0
 81058e6:	f040 8172 	bne.w	8105bce <HAL_SPI_IRQHandler+0x3ae>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 81058ea:	69bb      	ldr	r3, [r7, #24]
 81058ec:	f003 0308 	and.w	r3, r3, #8
 81058f0:	2b00      	cmp	r3, #0
 81058f2:	f000 80a0 	beq.w	8105a36 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 81058f6:	687b      	ldr	r3, [r7, #4]
 81058f8:	681b      	ldr	r3, [r3, #0]
 81058fa:	699a      	ldr	r2, [r3, #24]
 81058fc:	687b      	ldr	r3, [r7, #4]
 81058fe:	681b      	ldr	r3, [r3, #0]
 8105900:	f042 0208 	orr.w	r2, r2, #8
 8105904:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8105906:	687b      	ldr	r3, [r7, #4]
 8105908:	681b      	ldr	r3, [r3, #0]
 810590a:	699a      	ldr	r2, [r3, #24]
 810590c:	687b      	ldr	r3, [r7, #4]
 810590e:	681b      	ldr	r3, [r3, #0]
 8105910:	f042 0210 	orr.w	r2, r2, #16
 8105914:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8105916:	687b      	ldr	r3, [r7, #4]
 8105918:	681b      	ldr	r3, [r3, #0]
 810591a:	699a      	ldr	r2, [r3, #24]
 810591c:	687b      	ldr	r3, [r7, #4]
 810591e:	681b      	ldr	r3, [r3, #0]
 8105920:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8105924:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8105926:	687b      	ldr	r3, [r7, #4]
 8105928:	681b      	ldr	r3, [r3, #0]
 810592a:	691a      	ldr	r2, [r3, #16]
 810592c:	687b      	ldr	r3, [r7, #4]
 810592e:	681b      	ldr	r3, [r3, #0]
 8105930:	f022 0208 	bic.w	r2, r2, #8
 8105934:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8105936:	697b      	ldr	r3, [r7, #20]
 8105938:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810593c:	2b00      	cmp	r3, #0
 810593e:	d00f      	beq.n	8105960 <HAL_SPI_IRQHandler+0x140>
 8105940:	7cfb      	ldrb	r3, [r7, #19]
 8105942:	2b04      	cmp	r3, #4
 8105944:	d004      	beq.n	8105950 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8105946:	687b      	ldr	r3, [r7, #4]
 8105948:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810594a:	69db      	ldr	r3, [r3, #28]
 810594c:	2b00      	cmp	r3, #0
 810594e:	d007      	beq.n	8105960 <HAL_SPI_IRQHandler+0x140>
 8105950:	7cfb      	ldrb	r3, [r7, #19]
 8105952:	2b03      	cmp	r3, #3
 8105954:	d059      	beq.n	8105a0a <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8105956:	687b      	ldr	r3, [r7, #4]
 8105958:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810595a:	69db      	ldr	r3, [r3, #28]
 810595c:	2b00      	cmp	r3, #0
 810595e:	d154      	bne.n	8105a0a <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8105960:	687b      	ldr	r3, [r7, #4]
 8105962:	681b      	ldr	r3, [r3, #0]
 8105964:	689b      	ldr	r3, [r3, #8]
 8105966:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810596a:	2b00      	cmp	r3, #0
 810596c:	d13d      	bne.n	81059ea <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 810596e:	e036      	b.n	81059de <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8105970:	687b      	ldr	r3, [r7, #4]
 8105972:	68db      	ldr	r3, [r3, #12]
 8105974:	2b0f      	cmp	r3, #15
 8105976:	d90b      	bls.n	8105990 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8105978:	687b      	ldr	r3, [r7, #4]
 810597a:	681a      	ldr	r2, [r3, #0]
 810597c:	687b      	ldr	r3, [r7, #4]
 810597e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105980:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8105982:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8105984:	687b      	ldr	r3, [r7, #4]
 8105986:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105988:	1d1a      	adds	r2, r3, #4
 810598a:	687b      	ldr	r3, [r7, #4]
 810598c:	665a      	str	r2, [r3, #100]	; 0x64
 810598e:	e01d      	b.n	81059cc <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8105990:	687b      	ldr	r3, [r7, #4]
 8105992:	68db      	ldr	r3, [r3, #12]
 8105994:	2b07      	cmp	r3, #7
 8105996:	d90b      	bls.n	81059b0 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8105998:	687b      	ldr	r3, [r7, #4]
 810599a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810599c:	68fa      	ldr	r2, [r7, #12]
 810599e:	8812      	ldrh	r2, [r2, #0]
 81059a0:	b292      	uxth	r2, r2
 81059a2:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 81059a4:	687b      	ldr	r3, [r7, #4]
 81059a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81059a8:	1c9a      	adds	r2, r3, #2
 81059aa:	687b      	ldr	r3, [r7, #4]
 81059ac:	665a      	str	r2, [r3, #100]	; 0x64
 81059ae:	e00d      	b.n	81059cc <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 81059b0:	687b      	ldr	r3, [r7, #4]
 81059b2:	681b      	ldr	r3, [r3, #0]
 81059b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 81059b8:	687b      	ldr	r3, [r7, #4]
 81059ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81059bc:	7812      	ldrb	r2, [r2, #0]
 81059be:	b2d2      	uxtb	r2, r2
 81059c0:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 81059c2:	687b      	ldr	r3, [r7, #4]
 81059c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81059c6:	1c5a      	adds	r2, r3, #1
 81059c8:	687b      	ldr	r3, [r7, #4]
 81059ca:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 81059cc:	687b      	ldr	r3, [r7, #4]
 81059ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81059d2:	b29b      	uxth	r3, r3
 81059d4:	3b01      	subs	r3, #1
 81059d6:	b29a      	uxth	r2, r3
 81059d8:	687b      	ldr	r3, [r7, #4]
 81059da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 81059de:	687b      	ldr	r3, [r7, #4]
 81059e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81059e4:	b29b      	uxth	r3, r3
 81059e6:	2b00      	cmp	r3, #0
 81059e8:	d1c2      	bne.n	8105970 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 81059ea:	6878      	ldr	r0, [r7, #4]
 81059ec:	f000 f93c 	bl	8105c68 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 81059f0:	687b      	ldr	r3, [r7, #4]
 81059f2:	2201      	movs	r2, #1
 81059f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 81059f8:	687b      	ldr	r3, [r7, #4]
 81059fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81059fe:	2b00      	cmp	r3, #0
 8105a00:	d003      	beq.n	8105a0a <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8105a02:	6878      	ldr	r0, [r7, #4]
 8105a04:	f000 f90c 	bl	8105c20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8105a08:	e0e6      	b.n	8105bd8 <HAL_SPI_IRQHandler+0x3b8>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8105a0a:	7cfb      	ldrb	r3, [r7, #19]
 8105a0c:	2b05      	cmp	r3, #5
 8105a0e:	d103      	bne.n	8105a18 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8105a10:	6878      	ldr	r0, [r7, #4]
 8105a12:	f000 f8fb 	bl	8105c0c <HAL_SPI_TxRxCpltCallback>
    {
      /* end of the appropriate call */
    }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

    return;
 8105a16:	e0dc      	b.n	8105bd2 <HAL_SPI_IRQHandler+0x3b2>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8105a18:	7cfb      	ldrb	r3, [r7, #19]
 8105a1a:	2b04      	cmp	r3, #4
 8105a1c:	d103      	bne.n	8105a26 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8105a1e:	6878      	ldr	r0, [r7, #4]
 8105a20:	f000 f8ea 	bl	8105bf8 <HAL_SPI_RxCpltCallback>
    return;
 8105a24:	e0d5      	b.n	8105bd2 <HAL_SPI_IRQHandler+0x3b2>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8105a26:	7cfb      	ldrb	r3, [r7, #19]
 8105a28:	2b03      	cmp	r3, #3
 8105a2a:	f040 80d2 	bne.w	8105bd2 <HAL_SPI_IRQHandler+0x3b2>
      HAL_SPI_TxCpltCallback(hspi);
 8105a2e:	6878      	ldr	r0, [r7, #4]
 8105a30:	f000 f8d8 	bl	8105be4 <HAL_SPI_TxCpltCallback>
    return;
 8105a34:	e0cd      	b.n	8105bd2 <HAL_SPI_IRQHandler+0x3b2>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8105a36:	69fb      	ldr	r3, [r7, #28]
 8105a38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8105a3c:	2b00      	cmp	r3, #0
 8105a3e:	d00d      	beq.n	8105a5c <HAL_SPI_IRQHandler+0x23c>
 8105a40:	6a3b      	ldr	r3, [r7, #32]
 8105a42:	f003 0308 	and.w	r3, r3, #8
 8105a46:	2b00      	cmp	r3, #0
 8105a48:	d008      	beq.n	8105a5c <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8105a4a:	687b      	ldr	r3, [r7, #4]
 8105a4c:	681b      	ldr	r3, [r3, #0]
 8105a4e:	699a      	ldr	r2, [r3, #24]
 8105a50:	687b      	ldr	r3, [r7, #4]
 8105a52:	681b      	ldr	r3, [r3, #0]
 8105a54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8105a58:	619a      	str	r2, [r3, #24]

    return;
 8105a5a:	e0bd      	b.n	8105bd8 <HAL_SPI_IRQHandler+0x3b8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8105a5c:	69bb      	ldr	r3, [r7, #24]
 8105a5e:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8105a62:	2b00      	cmp	r3, #0
 8105a64:	f000 80b8 	beq.w	8105bd8 <HAL_SPI_IRQHandler+0x3b8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8105a68:	69bb      	ldr	r3, [r7, #24]
 8105a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105a6e:	2b00      	cmp	r3, #0
 8105a70:	d00f      	beq.n	8105a92 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8105a72:	687b      	ldr	r3, [r7, #4]
 8105a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105a78:	f043 0204 	orr.w	r2, r3, #4
 8105a7c:	687b      	ldr	r3, [r7, #4]
 8105a7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8105a82:	687b      	ldr	r3, [r7, #4]
 8105a84:	681b      	ldr	r3, [r3, #0]
 8105a86:	699a      	ldr	r2, [r3, #24]
 8105a88:	687b      	ldr	r3, [r7, #4]
 8105a8a:	681b      	ldr	r3, [r3, #0]
 8105a8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8105a90:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8105a92:	69bb      	ldr	r3, [r7, #24]
 8105a94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8105a98:	2b00      	cmp	r3, #0
 8105a9a:	d00f      	beq.n	8105abc <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8105a9c:	687b      	ldr	r3, [r7, #4]
 8105a9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105aa2:	f043 0201 	orr.w	r2, r3, #1
 8105aa6:	687b      	ldr	r3, [r7, #4]
 8105aa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8105aac:	687b      	ldr	r3, [r7, #4]
 8105aae:	681b      	ldr	r3, [r3, #0]
 8105ab0:	699a      	ldr	r2, [r3, #24]
 8105ab2:	687b      	ldr	r3, [r7, #4]
 8105ab4:	681b      	ldr	r3, [r3, #0]
 8105ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8105aba:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8105abc:	69bb      	ldr	r3, [r7, #24]
 8105abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105ac2:	2b00      	cmp	r3, #0
 8105ac4:	d00f      	beq.n	8105ae6 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8105ac6:	687b      	ldr	r3, [r7, #4]
 8105ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105acc:	f043 0208 	orr.w	r2, r3, #8
 8105ad0:	687b      	ldr	r3, [r7, #4]
 8105ad2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8105ad6:	687b      	ldr	r3, [r7, #4]
 8105ad8:	681b      	ldr	r3, [r3, #0]
 8105ada:	699a      	ldr	r2, [r3, #24]
 8105adc:	687b      	ldr	r3, [r7, #4]
 8105ade:	681b      	ldr	r3, [r3, #0]
 8105ae0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8105ae4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8105ae6:	69bb      	ldr	r3, [r7, #24]
 8105ae8:	f003 0320 	and.w	r3, r3, #32
 8105aec:	2b00      	cmp	r3, #0
 8105aee:	d00f      	beq.n	8105b10 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8105af0:	687b      	ldr	r3, [r7, #4]
 8105af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105af6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8105afa:	687b      	ldr	r3, [r7, #4]
 8105afc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8105b00:	687b      	ldr	r3, [r7, #4]
 8105b02:	681b      	ldr	r3, [r3, #0]
 8105b04:	699a      	ldr	r2, [r3, #24]
 8105b06:	687b      	ldr	r3, [r7, #4]
 8105b08:	681b      	ldr	r3, [r3, #0]
 8105b0a:	f042 0220 	orr.w	r2, r2, #32
 8105b0e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8105b10:	687b      	ldr	r3, [r7, #4]
 8105b12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105b16:	2b00      	cmp	r3, #0
 8105b18:	d05d      	beq.n	8105bd6 <HAL_SPI_IRQHandler+0x3b6>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8105b1a:	687b      	ldr	r3, [r7, #4]
 8105b1c:	681b      	ldr	r3, [r3, #0]
 8105b1e:	681a      	ldr	r2, [r3, #0]
 8105b20:	687b      	ldr	r3, [r7, #4]
 8105b22:	681b      	ldr	r3, [r3, #0]
 8105b24:	f022 0201 	bic.w	r2, r2, #1
 8105b28:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8105b2a:	687b      	ldr	r3, [r7, #4]
 8105b2c:	681b      	ldr	r3, [r3, #0]
 8105b2e:	691b      	ldr	r3, [r3, #16]
 8105b30:	687a      	ldr	r2, [r7, #4]
 8105b32:	6812      	ldr	r2, [r2, #0]
 8105b34:	f423 735a 	bic.w	r3, r3, #872	; 0x368
 8105b38:	f023 0303 	bic.w	r3, r3, #3
 8105b3c:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8105b3e:	697b      	ldr	r3, [r7, #20]
 8105b40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8105b44:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8105b48:	d138      	bne.n	8105bbc <HAL_SPI_IRQHandler+0x39c>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8105b4a:	687b      	ldr	r3, [r7, #4]
 8105b4c:	681b      	ldr	r3, [r3, #0]
 8105b4e:	689a      	ldr	r2, [r3, #8]
 8105b50:	687b      	ldr	r3, [r7, #4]
 8105b52:	681b      	ldr	r3, [r3, #0]
 8105b54:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8105b58:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8105b5a:	687b      	ldr	r3, [r7, #4]
 8105b5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105b5e:	2b00      	cmp	r3, #0
 8105b60:	d013      	beq.n	8105b8a <HAL_SPI_IRQHandler+0x36a>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8105b62:	687b      	ldr	r3, [r7, #4]
 8105b64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105b66:	4a1e      	ldr	r2, [pc, #120]	; (8105be0 <HAL_SPI_IRQHandler+0x3c0>)
 8105b68:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8105b6a:	687b      	ldr	r3, [r7, #4]
 8105b6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105b6e:	4618      	mov	r0, r3
 8105b70:	f7fc fd9c 	bl	81026ac <HAL_DMA_Abort_IT>
 8105b74:	4603      	mov	r3, r0
 8105b76:	2b00      	cmp	r3, #0
 8105b78:	d007      	beq.n	8105b8a <HAL_SPI_IRQHandler+0x36a>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8105b7a:	687b      	ldr	r3, [r7, #4]
 8105b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105b80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8105b84:	687b      	ldr	r3, [r7, #4]
 8105b86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8105b8a:	687b      	ldr	r3, [r7, #4]
 8105b8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8105b8e:	2b00      	cmp	r3, #0
 8105b90:	d021      	beq.n	8105bd6 <HAL_SPI_IRQHandler+0x3b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8105b92:	687b      	ldr	r3, [r7, #4]
 8105b94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8105b96:	4a12      	ldr	r2, [pc, #72]	; (8105be0 <HAL_SPI_IRQHandler+0x3c0>)
 8105b98:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8105b9a:	687b      	ldr	r3, [r7, #4]
 8105b9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8105b9e:	4618      	mov	r0, r3
 8105ba0:	f7fc fd84 	bl	81026ac <HAL_DMA_Abort_IT>
 8105ba4:	4603      	mov	r3, r0
 8105ba6:	2b00      	cmp	r3, #0
 8105ba8:	d015      	beq.n	8105bd6 <HAL_SPI_IRQHandler+0x3b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8105baa:	687b      	ldr	r3, [r7, #4]
 8105bac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105bb0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8105bb4:	687b      	ldr	r3, [r7, #4]
 8105bb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8105bba:	e00c      	b.n	8105bd6 <HAL_SPI_IRQHandler+0x3b6>
        hspi->State = HAL_SPI_STATE_READY;
 8105bbc:	687b      	ldr	r3, [r7, #4]
 8105bbe:	2201      	movs	r2, #1
 8105bc0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8105bc4:	6878      	ldr	r0, [r7, #4]
 8105bc6:	f000 f82b 	bl	8105c20 <HAL_SPI_ErrorCallback>
    return;
 8105bca:	bf00      	nop
 8105bcc:	e003      	b.n	8105bd6 <HAL_SPI_IRQHandler+0x3b6>
    return;
 8105bce:	bf00      	nop
 8105bd0:	e002      	b.n	8105bd8 <HAL_SPI_IRQHandler+0x3b8>
    return;
 8105bd2:	bf00      	nop
 8105bd4:	e000      	b.n	8105bd8 <HAL_SPI_IRQHandler+0x3b8>
    return;
 8105bd6:	bf00      	nop
  }
}
 8105bd8:	3728      	adds	r7, #40	; 0x28
 8105bda:	46bd      	mov	sp, r7
 8105bdc:	bd80      	pop	{r7, pc}
 8105bde:	bf00      	nop
 8105be0:	08105c35 	.word	0x08105c35

08105be4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8105be4:	b480      	push	{r7}
 8105be6:	b083      	sub	sp, #12
 8105be8:	af00      	add	r7, sp, #0
 8105bea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8105bec:	bf00      	nop
 8105bee:	370c      	adds	r7, #12
 8105bf0:	46bd      	mov	sp, r7
 8105bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105bf6:	4770      	bx	lr

08105bf8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8105bf8:	b480      	push	{r7}
 8105bfa:	b083      	sub	sp, #12
 8105bfc:	af00      	add	r7, sp, #0
 8105bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8105c00:	bf00      	nop
 8105c02:	370c      	adds	r7, #12
 8105c04:	46bd      	mov	sp, r7
 8105c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c0a:	4770      	bx	lr

08105c0c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8105c0c:	b480      	push	{r7}
 8105c0e:	b083      	sub	sp, #12
 8105c10:	af00      	add	r7, sp, #0
 8105c12:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8105c14:	bf00      	nop
 8105c16:	370c      	adds	r7, #12
 8105c18:	46bd      	mov	sp, r7
 8105c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c1e:	4770      	bx	lr

08105c20 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8105c20:	b480      	push	{r7}
 8105c22:	b083      	sub	sp, #12
 8105c24:	af00      	add	r7, sp, #0
 8105c26:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8105c28:	bf00      	nop
 8105c2a:	370c      	adds	r7, #12
 8105c2c:	46bd      	mov	sp, r7
 8105c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c32:	4770      	bx	lr

08105c34 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8105c34:	b580      	push	{r7, lr}
 8105c36:	b084      	sub	sp, #16
 8105c38:	af00      	add	r7, sp, #0
 8105c3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8105c3c:	687b      	ldr	r3, [r7, #4]
 8105c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105c40:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8105c42:	68fb      	ldr	r3, [r7, #12]
 8105c44:	2200      	movs	r2, #0
 8105c46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8105c4a:	68fb      	ldr	r3, [r7, #12]
 8105c4c:	2200      	movs	r2, #0
 8105c4e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8105c52:	68fb      	ldr	r3, [r7, #12]
 8105c54:	2201      	movs	r2, #1
 8105c56:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8105c5a:	68f8      	ldr	r0, [r7, #12]
 8105c5c:	f7ff ffe0 	bl	8105c20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8105c60:	bf00      	nop
 8105c62:	3710      	adds	r7, #16
 8105c64:	46bd      	mov	sp, r7
 8105c66:	bd80      	pop	{r7, pc}

08105c68 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8105c68:	b480      	push	{r7}
 8105c6a:	b085      	sub	sp, #20
 8105c6c:	af00      	add	r7, sp, #0
 8105c6e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8105c70:	687b      	ldr	r3, [r7, #4]
 8105c72:	681b      	ldr	r3, [r3, #0]
 8105c74:	695b      	ldr	r3, [r3, #20]
 8105c76:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8105c78:	687b      	ldr	r3, [r7, #4]
 8105c7a:	681b      	ldr	r3, [r3, #0]
 8105c7c:	699a      	ldr	r2, [r3, #24]
 8105c7e:	687b      	ldr	r3, [r7, #4]
 8105c80:	681b      	ldr	r3, [r3, #0]
 8105c82:	f042 0208 	orr.w	r2, r2, #8
 8105c86:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8105c88:	687b      	ldr	r3, [r7, #4]
 8105c8a:	681b      	ldr	r3, [r3, #0]
 8105c8c:	699a      	ldr	r2, [r3, #24]
 8105c8e:	687b      	ldr	r3, [r7, #4]
 8105c90:	681b      	ldr	r3, [r3, #0]
 8105c92:	f042 0210 	orr.w	r2, r2, #16
 8105c96:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8105c98:	687b      	ldr	r3, [r7, #4]
 8105c9a:	681b      	ldr	r3, [r3, #0]
 8105c9c:	681a      	ldr	r2, [r3, #0]
 8105c9e:	687b      	ldr	r3, [r7, #4]
 8105ca0:	681b      	ldr	r3, [r3, #0]
 8105ca2:	f022 0201 	bic.w	r2, r2, #1
 8105ca6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8105ca8:	687b      	ldr	r3, [r7, #4]
 8105caa:	681b      	ldr	r3, [r3, #0]
 8105cac:	691b      	ldr	r3, [r3, #16]
 8105cae:	687a      	ldr	r2, [r7, #4]
 8105cb0:	6812      	ldr	r2, [r2, #0]
 8105cb2:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8105cb6:	f023 0303 	bic.w	r3, r3, #3
 8105cba:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8105cbc:	687b      	ldr	r3, [r7, #4]
 8105cbe:	681b      	ldr	r3, [r3, #0]
 8105cc0:	689a      	ldr	r2, [r3, #8]
 8105cc2:	687b      	ldr	r3, [r7, #4]
 8105cc4:	681b      	ldr	r3, [r3, #0]
 8105cc6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8105cca:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8105ccc:	687b      	ldr	r3, [r7, #4]
 8105cce:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8105cd2:	b2db      	uxtb	r3, r3
 8105cd4:	2b04      	cmp	r3, #4
 8105cd6:	d014      	beq.n	8105d02 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8105cd8:	68fb      	ldr	r3, [r7, #12]
 8105cda:	f003 0320 	and.w	r3, r3, #32
 8105cde:	2b00      	cmp	r3, #0
 8105ce0:	d00f      	beq.n	8105d02 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8105ce2:	687b      	ldr	r3, [r7, #4]
 8105ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105ce8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8105cec:	687b      	ldr	r3, [r7, #4]
 8105cee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8105cf2:	687b      	ldr	r3, [r7, #4]
 8105cf4:	681b      	ldr	r3, [r3, #0]
 8105cf6:	699a      	ldr	r2, [r3, #24]
 8105cf8:	687b      	ldr	r3, [r7, #4]
 8105cfa:	681b      	ldr	r3, [r3, #0]
 8105cfc:	f042 0220 	orr.w	r2, r2, #32
 8105d00:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8105d02:	687b      	ldr	r3, [r7, #4]
 8105d04:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8105d08:	b2db      	uxtb	r3, r3
 8105d0a:	2b03      	cmp	r3, #3
 8105d0c:	d014      	beq.n	8105d38 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8105d0e:	68fb      	ldr	r3, [r7, #12]
 8105d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105d14:	2b00      	cmp	r3, #0
 8105d16:	d00f      	beq.n	8105d38 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8105d18:	687b      	ldr	r3, [r7, #4]
 8105d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105d1e:	f043 0204 	orr.w	r2, r3, #4
 8105d22:	687b      	ldr	r3, [r7, #4]
 8105d24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8105d28:	687b      	ldr	r3, [r7, #4]
 8105d2a:	681b      	ldr	r3, [r3, #0]
 8105d2c:	699a      	ldr	r2, [r3, #24]
 8105d2e:	687b      	ldr	r3, [r7, #4]
 8105d30:	681b      	ldr	r3, [r3, #0]
 8105d32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8105d36:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8105d38:	68fb      	ldr	r3, [r7, #12]
 8105d3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8105d3e:	2b00      	cmp	r3, #0
 8105d40:	d00f      	beq.n	8105d62 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8105d42:	687b      	ldr	r3, [r7, #4]
 8105d44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105d48:	f043 0201 	orr.w	r2, r3, #1
 8105d4c:	687b      	ldr	r3, [r7, #4]
 8105d4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8105d52:	687b      	ldr	r3, [r7, #4]
 8105d54:	681b      	ldr	r3, [r3, #0]
 8105d56:	699a      	ldr	r2, [r3, #24]
 8105d58:	687b      	ldr	r3, [r7, #4]
 8105d5a:	681b      	ldr	r3, [r3, #0]
 8105d5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8105d60:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8105d62:	68fb      	ldr	r3, [r7, #12]
 8105d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105d68:	2b00      	cmp	r3, #0
 8105d6a:	d00f      	beq.n	8105d8c <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8105d6c:	687b      	ldr	r3, [r7, #4]
 8105d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105d72:	f043 0208 	orr.w	r2, r3, #8
 8105d76:	687b      	ldr	r3, [r7, #4]
 8105d78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8105d7c:	687b      	ldr	r3, [r7, #4]
 8105d7e:	681b      	ldr	r3, [r3, #0]
 8105d80:	699a      	ldr	r2, [r3, #24]
 8105d82:	687b      	ldr	r3, [r7, #4]
 8105d84:	681b      	ldr	r3, [r3, #0]
 8105d86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8105d8a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8105d8c:	687b      	ldr	r3, [r7, #4]
 8105d8e:	2200      	movs	r2, #0
 8105d90:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8105d94:	687b      	ldr	r3, [r7, #4]
 8105d96:	2200      	movs	r2, #0
 8105d98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8105d9c:	bf00      	nop
 8105d9e:	3714      	adds	r7, #20
 8105da0:	46bd      	mov	sp, r7
 8105da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105da6:	4770      	bx	lr

08105da8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8105da8:	b480      	push	{r7}
 8105daa:	b085      	sub	sp, #20
 8105dac:	af00      	add	r7, sp, #0
 8105dae:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8105db0:	687b      	ldr	r3, [r7, #4]
 8105db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105db4:	095b      	lsrs	r3, r3, #5
 8105db6:	3301      	adds	r3, #1
 8105db8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8105dba:	687b      	ldr	r3, [r7, #4]
 8105dbc:	68db      	ldr	r3, [r3, #12]
 8105dbe:	3301      	adds	r3, #1
 8105dc0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8105dc2:	68bb      	ldr	r3, [r7, #8]
 8105dc4:	3307      	adds	r3, #7
 8105dc6:	08db      	lsrs	r3, r3, #3
 8105dc8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8105dca:	68bb      	ldr	r3, [r7, #8]
 8105dcc:	68fa      	ldr	r2, [r7, #12]
 8105dce:	fb02 f303 	mul.w	r3, r2, r3
}
 8105dd2:	4618      	mov	r0, r3
 8105dd4:	3714      	adds	r7, #20
 8105dd6:	46bd      	mov	sp, r7
 8105dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ddc:	4770      	bx	lr

08105dde <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8105dde:	b580      	push	{r7, lr}
 8105de0:	b082      	sub	sp, #8
 8105de2:	af00      	add	r7, sp, #0
 8105de4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8105de6:	687b      	ldr	r3, [r7, #4]
 8105de8:	2b00      	cmp	r3, #0
 8105dea:	d101      	bne.n	8105df0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8105dec:	2301      	movs	r3, #1
 8105dee:	e049      	b.n	8105e84 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8105df0:	687b      	ldr	r3, [r7, #4]
 8105df2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8105df6:	b2db      	uxtb	r3, r3
 8105df8:	2b00      	cmp	r3, #0
 8105dfa:	d106      	bne.n	8105e0a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8105dfc:	687b      	ldr	r3, [r7, #4]
 8105dfe:	2200      	movs	r2, #0
 8105e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8105e04:	6878      	ldr	r0, [r7, #4]
 8105e06:	f000 f841 	bl	8105e8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8105e0a:	687b      	ldr	r3, [r7, #4]
 8105e0c:	2202      	movs	r2, #2
 8105e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8105e12:	687b      	ldr	r3, [r7, #4]
 8105e14:	681a      	ldr	r2, [r3, #0]
 8105e16:	687b      	ldr	r3, [r7, #4]
 8105e18:	3304      	adds	r3, #4
 8105e1a:	4619      	mov	r1, r3
 8105e1c:	4610      	mov	r0, r2
 8105e1e:	f000 f9bd 	bl	810619c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8105e22:	687b      	ldr	r3, [r7, #4]
 8105e24:	2201      	movs	r2, #1
 8105e26:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8105e2a:	687b      	ldr	r3, [r7, #4]
 8105e2c:	2201      	movs	r2, #1
 8105e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8105e32:	687b      	ldr	r3, [r7, #4]
 8105e34:	2201      	movs	r2, #1
 8105e36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8105e3a:	687b      	ldr	r3, [r7, #4]
 8105e3c:	2201      	movs	r2, #1
 8105e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8105e42:	687b      	ldr	r3, [r7, #4]
 8105e44:	2201      	movs	r2, #1
 8105e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8105e4a:	687b      	ldr	r3, [r7, #4]
 8105e4c:	2201      	movs	r2, #1
 8105e4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8105e52:	687b      	ldr	r3, [r7, #4]
 8105e54:	2201      	movs	r2, #1
 8105e56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8105e5a:	687b      	ldr	r3, [r7, #4]
 8105e5c:	2201      	movs	r2, #1
 8105e5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8105e62:	687b      	ldr	r3, [r7, #4]
 8105e64:	2201      	movs	r2, #1
 8105e66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8105e6a:	687b      	ldr	r3, [r7, #4]
 8105e6c:	2201      	movs	r2, #1
 8105e6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8105e72:	687b      	ldr	r3, [r7, #4]
 8105e74:	2201      	movs	r2, #1
 8105e76:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8105e7a:	687b      	ldr	r3, [r7, #4]
 8105e7c:	2201      	movs	r2, #1
 8105e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8105e82:	2300      	movs	r3, #0
}
 8105e84:	4618      	mov	r0, r3
 8105e86:	3708      	adds	r7, #8
 8105e88:	46bd      	mov	sp, r7
 8105e8a:	bd80      	pop	{r7, pc}

08105e8c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8105e8c:	b480      	push	{r7}
 8105e8e:	b083      	sub	sp, #12
 8105e90:	af00      	add	r7, sp, #0
 8105e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8105e94:	bf00      	nop
 8105e96:	370c      	adds	r7, #12
 8105e98:	46bd      	mov	sp, r7
 8105e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e9e:	4770      	bx	lr

08105ea0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8105ea0:	b480      	push	{r7}
 8105ea2:	b085      	sub	sp, #20
 8105ea4:	af00      	add	r7, sp, #0
 8105ea6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8105ea8:	687b      	ldr	r3, [r7, #4]
 8105eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8105eae:	b2db      	uxtb	r3, r3
 8105eb0:	2b01      	cmp	r3, #1
 8105eb2:	d001      	beq.n	8105eb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8105eb4:	2301      	movs	r3, #1
 8105eb6:	e021      	b.n	8105efc <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8105eb8:	687b      	ldr	r3, [r7, #4]
 8105eba:	2202      	movs	r2, #2
 8105ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8105ec0:	687b      	ldr	r3, [r7, #4]
 8105ec2:	681b      	ldr	r3, [r3, #0]
 8105ec4:	68da      	ldr	r2, [r3, #12]
 8105ec6:	687b      	ldr	r3, [r7, #4]
 8105ec8:	681b      	ldr	r3, [r3, #0]
 8105eca:	f042 0201 	orr.w	r2, r2, #1
 8105ece:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8105ed0:	687b      	ldr	r3, [r7, #4]
 8105ed2:	681b      	ldr	r3, [r3, #0]
 8105ed4:	689a      	ldr	r2, [r3, #8]
 8105ed6:	4b0c      	ldr	r3, [pc, #48]	; (8105f08 <HAL_TIM_Base_Start_IT+0x68>)
 8105ed8:	4013      	ands	r3, r2
 8105eda:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8105edc:	68fb      	ldr	r3, [r7, #12]
 8105ede:	2b06      	cmp	r3, #6
 8105ee0:	d00b      	beq.n	8105efa <HAL_TIM_Base_Start_IT+0x5a>
 8105ee2:	68fb      	ldr	r3, [r7, #12]
 8105ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105ee8:	d007      	beq.n	8105efa <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8105eea:	687b      	ldr	r3, [r7, #4]
 8105eec:	681b      	ldr	r3, [r3, #0]
 8105eee:	681a      	ldr	r2, [r3, #0]
 8105ef0:	687b      	ldr	r3, [r7, #4]
 8105ef2:	681b      	ldr	r3, [r3, #0]
 8105ef4:	f042 0201 	orr.w	r2, r2, #1
 8105ef8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8105efa:	2300      	movs	r3, #0
}
 8105efc:	4618      	mov	r0, r3
 8105efe:	3714      	adds	r7, #20
 8105f00:	46bd      	mov	sp, r7
 8105f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f06:	4770      	bx	lr
 8105f08:	00010007 	.word	0x00010007

08105f0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8105f0c:	b580      	push	{r7, lr}
 8105f0e:	b082      	sub	sp, #8
 8105f10:	af00      	add	r7, sp, #0
 8105f12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8105f14:	687b      	ldr	r3, [r7, #4]
 8105f16:	681b      	ldr	r3, [r3, #0]
 8105f18:	691b      	ldr	r3, [r3, #16]
 8105f1a:	f003 0302 	and.w	r3, r3, #2
 8105f1e:	2b02      	cmp	r3, #2
 8105f20:	d122      	bne.n	8105f68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8105f22:	687b      	ldr	r3, [r7, #4]
 8105f24:	681b      	ldr	r3, [r3, #0]
 8105f26:	68db      	ldr	r3, [r3, #12]
 8105f28:	f003 0302 	and.w	r3, r3, #2
 8105f2c:	2b02      	cmp	r3, #2
 8105f2e:	d11b      	bne.n	8105f68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8105f30:	687b      	ldr	r3, [r7, #4]
 8105f32:	681b      	ldr	r3, [r3, #0]
 8105f34:	f06f 0202 	mvn.w	r2, #2
 8105f38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8105f3a:	687b      	ldr	r3, [r7, #4]
 8105f3c:	2201      	movs	r2, #1
 8105f3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8105f40:	687b      	ldr	r3, [r7, #4]
 8105f42:	681b      	ldr	r3, [r3, #0]
 8105f44:	699b      	ldr	r3, [r3, #24]
 8105f46:	f003 0303 	and.w	r3, r3, #3
 8105f4a:	2b00      	cmp	r3, #0
 8105f4c:	d003      	beq.n	8105f56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8105f4e:	6878      	ldr	r0, [r7, #4]
 8105f50:	f000 f905 	bl	810615e <HAL_TIM_IC_CaptureCallback>
 8105f54:	e005      	b.n	8105f62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8105f56:	6878      	ldr	r0, [r7, #4]
 8105f58:	f000 f8f7 	bl	810614a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8105f5c:	6878      	ldr	r0, [r7, #4]
 8105f5e:	f000 f908 	bl	8106172 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8105f62:	687b      	ldr	r3, [r7, #4]
 8105f64:	2200      	movs	r2, #0
 8105f66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8105f68:	687b      	ldr	r3, [r7, #4]
 8105f6a:	681b      	ldr	r3, [r3, #0]
 8105f6c:	691b      	ldr	r3, [r3, #16]
 8105f6e:	f003 0304 	and.w	r3, r3, #4
 8105f72:	2b04      	cmp	r3, #4
 8105f74:	d122      	bne.n	8105fbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8105f76:	687b      	ldr	r3, [r7, #4]
 8105f78:	681b      	ldr	r3, [r3, #0]
 8105f7a:	68db      	ldr	r3, [r3, #12]
 8105f7c:	f003 0304 	and.w	r3, r3, #4
 8105f80:	2b04      	cmp	r3, #4
 8105f82:	d11b      	bne.n	8105fbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8105f84:	687b      	ldr	r3, [r7, #4]
 8105f86:	681b      	ldr	r3, [r3, #0]
 8105f88:	f06f 0204 	mvn.w	r2, #4
 8105f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8105f8e:	687b      	ldr	r3, [r7, #4]
 8105f90:	2202      	movs	r2, #2
 8105f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8105f94:	687b      	ldr	r3, [r7, #4]
 8105f96:	681b      	ldr	r3, [r3, #0]
 8105f98:	699b      	ldr	r3, [r3, #24]
 8105f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8105f9e:	2b00      	cmp	r3, #0
 8105fa0:	d003      	beq.n	8105faa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8105fa2:	6878      	ldr	r0, [r7, #4]
 8105fa4:	f000 f8db 	bl	810615e <HAL_TIM_IC_CaptureCallback>
 8105fa8:	e005      	b.n	8105fb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8105faa:	6878      	ldr	r0, [r7, #4]
 8105fac:	f000 f8cd 	bl	810614a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8105fb0:	6878      	ldr	r0, [r7, #4]
 8105fb2:	f000 f8de 	bl	8106172 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8105fb6:	687b      	ldr	r3, [r7, #4]
 8105fb8:	2200      	movs	r2, #0
 8105fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8105fbc:	687b      	ldr	r3, [r7, #4]
 8105fbe:	681b      	ldr	r3, [r3, #0]
 8105fc0:	691b      	ldr	r3, [r3, #16]
 8105fc2:	f003 0308 	and.w	r3, r3, #8
 8105fc6:	2b08      	cmp	r3, #8
 8105fc8:	d122      	bne.n	8106010 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8105fca:	687b      	ldr	r3, [r7, #4]
 8105fcc:	681b      	ldr	r3, [r3, #0]
 8105fce:	68db      	ldr	r3, [r3, #12]
 8105fd0:	f003 0308 	and.w	r3, r3, #8
 8105fd4:	2b08      	cmp	r3, #8
 8105fd6:	d11b      	bne.n	8106010 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8105fd8:	687b      	ldr	r3, [r7, #4]
 8105fda:	681b      	ldr	r3, [r3, #0]
 8105fdc:	f06f 0208 	mvn.w	r2, #8
 8105fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8105fe2:	687b      	ldr	r3, [r7, #4]
 8105fe4:	2204      	movs	r2, #4
 8105fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8105fe8:	687b      	ldr	r3, [r7, #4]
 8105fea:	681b      	ldr	r3, [r3, #0]
 8105fec:	69db      	ldr	r3, [r3, #28]
 8105fee:	f003 0303 	and.w	r3, r3, #3
 8105ff2:	2b00      	cmp	r3, #0
 8105ff4:	d003      	beq.n	8105ffe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8105ff6:	6878      	ldr	r0, [r7, #4]
 8105ff8:	f000 f8b1 	bl	810615e <HAL_TIM_IC_CaptureCallback>
 8105ffc:	e005      	b.n	810600a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8105ffe:	6878      	ldr	r0, [r7, #4]
 8106000:	f000 f8a3 	bl	810614a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106004:	6878      	ldr	r0, [r7, #4]
 8106006:	f000 f8b4 	bl	8106172 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810600a:	687b      	ldr	r3, [r7, #4]
 810600c:	2200      	movs	r2, #0
 810600e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8106010:	687b      	ldr	r3, [r7, #4]
 8106012:	681b      	ldr	r3, [r3, #0]
 8106014:	691b      	ldr	r3, [r3, #16]
 8106016:	f003 0310 	and.w	r3, r3, #16
 810601a:	2b10      	cmp	r3, #16
 810601c:	d122      	bne.n	8106064 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 810601e:	687b      	ldr	r3, [r7, #4]
 8106020:	681b      	ldr	r3, [r3, #0]
 8106022:	68db      	ldr	r3, [r3, #12]
 8106024:	f003 0310 	and.w	r3, r3, #16
 8106028:	2b10      	cmp	r3, #16
 810602a:	d11b      	bne.n	8106064 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 810602c:	687b      	ldr	r3, [r7, #4]
 810602e:	681b      	ldr	r3, [r3, #0]
 8106030:	f06f 0210 	mvn.w	r2, #16
 8106034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8106036:	687b      	ldr	r3, [r7, #4]
 8106038:	2208      	movs	r2, #8
 810603a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 810603c:	687b      	ldr	r3, [r7, #4]
 810603e:	681b      	ldr	r3, [r3, #0]
 8106040:	69db      	ldr	r3, [r3, #28]
 8106042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8106046:	2b00      	cmp	r3, #0
 8106048:	d003      	beq.n	8106052 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810604a:	6878      	ldr	r0, [r7, #4]
 810604c:	f000 f887 	bl	810615e <HAL_TIM_IC_CaptureCallback>
 8106050:	e005      	b.n	810605e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8106052:	6878      	ldr	r0, [r7, #4]
 8106054:	f000 f879 	bl	810614a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106058:	6878      	ldr	r0, [r7, #4]
 810605a:	f000 f88a 	bl	8106172 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810605e:	687b      	ldr	r3, [r7, #4]
 8106060:	2200      	movs	r2, #0
 8106062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8106064:	687b      	ldr	r3, [r7, #4]
 8106066:	681b      	ldr	r3, [r3, #0]
 8106068:	691b      	ldr	r3, [r3, #16]
 810606a:	f003 0301 	and.w	r3, r3, #1
 810606e:	2b01      	cmp	r3, #1
 8106070:	d10e      	bne.n	8106090 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8106072:	687b      	ldr	r3, [r7, #4]
 8106074:	681b      	ldr	r3, [r3, #0]
 8106076:	68db      	ldr	r3, [r3, #12]
 8106078:	f003 0301 	and.w	r3, r3, #1
 810607c:	2b01      	cmp	r3, #1
 810607e:	d107      	bne.n	8106090 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8106080:	687b      	ldr	r3, [r7, #4]
 8106082:	681b      	ldr	r3, [r3, #0]
 8106084:	f06f 0201 	mvn.w	r2, #1
 8106088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810608a:	6878      	ldr	r0, [r7, #4]
 810608c:	f7fb fa20 	bl	81014d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8106090:	687b      	ldr	r3, [r7, #4]
 8106092:	681b      	ldr	r3, [r3, #0]
 8106094:	691b      	ldr	r3, [r3, #16]
 8106096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810609a:	2b80      	cmp	r3, #128	; 0x80
 810609c:	d10e      	bne.n	81060bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 810609e:	687b      	ldr	r3, [r7, #4]
 81060a0:	681b      	ldr	r3, [r3, #0]
 81060a2:	68db      	ldr	r3, [r3, #12]
 81060a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81060a8:	2b80      	cmp	r3, #128	; 0x80
 81060aa:	d107      	bne.n	81060bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 81060ac:	687b      	ldr	r3, [r7, #4]
 81060ae:	681b      	ldr	r3, [r3, #0]
 81060b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 81060b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 81060b6:	6878      	ldr	r0, [r7, #4]
 81060b8:	f000 f914 	bl	81062e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 81060bc:	687b      	ldr	r3, [r7, #4]
 81060be:	681b      	ldr	r3, [r3, #0]
 81060c0:	691b      	ldr	r3, [r3, #16]
 81060c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81060c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81060ca:	d10e      	bne.n	81060ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 81060cc:	687b      	ldr	r3, [r7, #4]
 81060ce:	681b      	ldr	r3, [r3, #0]
 81060d0:	68db      	ldr	r3, [r3, #12]
 81060d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81060d6:	2b80      	cmp	r3, #128	; 0x80
 81060d8:	d107      	bne.n	81060ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 81060da:	687b      	ldr	r3, [r7, #4]
 81060dc:	681b      	ldr	r3, [r3, #0]
 81060de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 81060e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 81060e4:	6878      	ldr	r0, [r7, #4]
 81060e6:	f000 f907 	bl	81062f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 81060ea:	687b      	ldr	r3, [r7, #4]
 81060ec:	681b      	ldr	r3, [r3, #0]
 81060ee:	691b      	ldr	r3, [r3, #16]
 81060f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81060f4:	2b40      	cmp	r3, #64	; 0x40
 81060f6:	d10e      	bne.n	8106116 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 81060f8:	687b      	ldr	r3, [r7, #4]
 81060fa:	681b      	ldr	r3, [r3, #0]
 81060fc:	68db      	ldr	r3, [r3, #12]
 81060fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106102:	2b40      	cmp	r3, #64	; 0x40
 8106104:	d107      	bne.n	8106116 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8106106:	687b      	ldr	r3, [r7, #4]
 8106108:	681b      	ldr	r3, [r3, #0]
 810610a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 810610e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8106110:	6878      	ldr	r0, [r7, #4]
 8106112:	f000 f838 	bl	8106186 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8106116:	687b      	ldr	r3, [r7, #4]
 8106118:	681b      	ldr	r3, [r3, #0]
 810611a:	691b      	ldr	r3, [r3, #16]
 810611c:	f003 0320 	and.w	r3, r3, #32
 8106120:	2b20      	cmp	r3, #32
 8106122:	d10e      	bne.n	8106142 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8106124:	687b      	ldr	r3, [r7, #4]
 8106126:	681b      	ldr	r3, [r3, #0]
 8106128:	68db      	ldr	r3, [r3, #12]
 810612a:	f003 0320 	and.w	r3, r3, #32
 810612e:	2b20      	cmp	r3, #32
 8106130:	d107      	bne.n	8106142 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8106132:	687b      	ldr	r3, [r7, #4]
 8106134:	681b      	ldr	r3, [r3, #0]
 8106136:	f06f 0220 	mvn.w	r2, #32
 810613a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 810613c:	6878      	ldr	r0, [r7, #4]
 810613e:	f000 f8c7 	bl	81062d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8106142:	bf00      	nop
 8106144:	3708      	adds	r7, #8
 8106146:	46bd      	mov	sp, r7
 8106148:	bd80      	pop	{r7, pc}

0810614a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 810614a:	b480      	push	{r7}
 810614c:	b083      	sub	sp, #12
 810614e:	af00      	add	r7, sp, #0
 8106150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8106152:	bf00      	nop
 8106154:	370c      	adds	r7, #12
 8106156:	46bd      	mov	sp, r7
 8106158:	f85d 7b04 	ldr.w	r7, [sp], #4
 810615c:	4770      	bx	lr

0810615e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 810615e:	b480      	push	{r7}
 8106160:	b083      	sub	sp, #12
 8106162:	af00      	add	r7, sp, #0
 8106164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8106166:	bf00      	nop
 8106168:	370c      	adds	r7, #12
 810616a:	46bd      	mov	sp, r7
 810616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106170:	4770      	bx	lr

08106172 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8106172:	b480      	push	{r7}
 8106174:	b083      	sub	sp, #12
 8106176:	af00      	add	r7, sp, #0
 8106178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 810617a:	bf00      	nop
 810617c:	370c      	adds	r7, #12
 810617e:	46bd      	mov	sp, r7
 8106180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106184:	4770      	bx	lr

08106186 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8106186:	b480      	push	{r7}
 8106188:	b083      	sub	sp, #12
 810618a:	af00      	add	r7, sp, #0
 810618c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 810618e:	bf00      	nop
 8106190:	370c      	adds	r7, #12
 8106192:	46bd      	mov	sp, r7
 8106194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106198:	4770      	bx	lr
	...

0810619c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 810619c:	b480      	push	{r7}
 810619e:	b085      	sub	sp, #20
 81061a0:	af00      	add	r7, sp, #0
 81061a2:	6078      	str	r0, [r7, #4]
 81061a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 81061a6:	687b      	ldr	r3, [r7, #4]
 81061a8:	681b      	ldr	r3, [r3, #0]
 81061aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 81061ac:	687b      	ldr	r3, [r7, #4]
 81061ae:	4a40      	ldr	r2, [pc, #256]	; (81062b0 <TIM_Base_SetConfig+0x114>)
 81061b0:	4293      	cmp	r3, r2
 81061b2:	d013      	beq.n	81061dc <TIM_Base_SetConfig+0x40>
 81061b4:	687b      	ldr	r3, [r7, #4]
 81061b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81061ba:	d00f      	beq.n	81061dc <TIM_Base_SetConfig+0x40>
 81061bc:	687b      	ldr	r3, [r7, #4]
 81061be:	4a3d      	ldr	r2, [pc, #244]	; (81062b4 <TIM_Base_SetConfig+0x118>)
 81061c0:	4293      	cmp	r3, r2
 81061c2:	d00b      	beq.n	81061dc <TIM_Base_SetConfig+0x40>
 81061c4:	687b      	ldr	r3, [r7, #4]
 81061c6:	4a3c      	ldr	r2, [pc, #240]	; (81062b8 <TIM_Base_SetConfig+0x11c>)
 81061c8:	4293      	cmp	r3, r2
 81061ca:	d007      	beq.n	81061dc <TIM_Base_SetConfig+0x40>
 81061cc:	687b      	ldr	r3, [r7, #4]
 81061ce:	4a3b      	ldr	r2, [pc, #236]	; (81062bc <TIM_Base_SetConfig+0x120>)
 81061d0:	4293      	cmp	r3, r2
 81061d2:	d003      	beq.n	81061dc <TIM_Base_SetConfig+0x40>
 81061d4:	687b      	ldr	r3, [r7, #4]
 81061d6:	4a3a      	ldr	r2, [pc, #232]	; (81062c0 <TIM_Base_SetConfig+0x124>)
 81061d8:	4293      	cmp	r3, r2
 81061da:	d108      	bne.n	81061ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 81061dc:	68fb      	ldr	r3, [r7, #12]
 81061de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81061e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 81061e4:	683b      	ldr	r3, [r7, #0]
 81061e6:	685b      	ldr	r3, [r3, #4]
 81061e8:	68fa      	ldr	r2, [r7, #12]
 81061ea:	4313      	orrs	r3, r2
 81061ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 81061ee:	687b      	ldr	r3, [r7, #4]
 81061f0:	4a2f      	ldr	r2, [pc, #188]	; (81062b0 <TIM_Base_SetConfig+0x114>)
 81061f2:	4293      	cmp	r3, r2
 81061f4:	d01f      	beq.n	8106236 <TIM_Base_SetConfig+0x9a>
 81061f6:	687b      	ldr	r3, [r7, #4]
 81061f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81061fc:	d01b      	beq.n	8106236 <TIM_Base_SetConfig+0x9a>
 81061fe:	687b      	ldr	r3, [r7, #4]
 8106200:	4a2c      	ldr	r2, [pc, #176]	; (81062b4 <TIM_Base_SetConfig+0x118>)
 8106202:	4293      	cmp	r3, r2
 8106204:	d017      	beq.n	8106236 <TIM_Base_SetConfig+0x9a>
 8106206:	687b      	ldr	r3, [r7, #4]
 8106208:	4a2b      	ldr	r2, [pc, #172]	; (81062b8 <TIM_Base_SetConfig+0x11c>)
 810620a:	4293      	cmp	r3, r2
 810620c:	d013      	beq.n	8106236 <TIM_Base_SetConfig+0x9a>
 810620e:	687b      	ldr	r3, [r7, #4]
 8106210:	4a2a      	ldr	r2, [pc, #168]	; (81062bc <TIM_Base_SetConfig+0x120>)
 8106212:	4293      	cmp	r3, r2
 8106214:	d00f      	beq.n	8106236 <TIM_Base_SetConfig+0x9a>
 8106216:	687b      	ldr	r3, [r7, #4]
 8106218:	4a29      	ldr	r2, [pc, #164]	; (81062c0 <TIM_Base_SetConfig+0x124>)
 810621a:	4293      	cmp	r3, r2
 810621c:	d00b      	beq.n	8106236 <TIM_Base_SetConfig+0x9a>
 810621e:	687b      	ldr	r3, [r7, #4]
 8106220:	4a28      	ldr	r2, [pc, #160]	; (81062c4 <TIM_Base_SetConfig+0x128>)
 8106222:	4293      	cmp	r3, r2
 8106224:	d007      	beq.n	8106236 <TIM_Base_SetConfig+0x9a>
 8106226:	687b      	ldr	r3, [r7, #4]
 8106228:	4a27      	ldr	r2, [pc, #156]	; (81062c8 <TIM_Base_SetConfig+0x12c>)
 810622a:	4293      	cmp	r3, r2
 810622c:	d003      	beq.n	8106236 <TIM_Base_SetConfig+0x9a>
 810622e:	687b      	ldr	r3, [r7, #4]
 8106230:	4a26      	ldr	r2, [pc, #152]	; (81062cc <TIM_Base_SetConfig+0x130>)
 8106232:	4293      	cmp	r3, r2
 8106234:	d108      	bne.n	8106248 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8106236:	68fb      	ldr	r3, [r7, #12]
 8106238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810623c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810623e:	683b      	ldr	r3, [r7, #0]
 8106240:	68db      	ldr	r3, [r3, #12]
 8106242:	68fa      	ldr	r2, [r7, #12]
 8106244:	4313      	orrs	r3, r2
 8106246:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8106248:	68fb      	ldr	r3, [r7, #12]
 810624a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 810624e:	683b      	ldr	r3, [r7, #0]
 8106250:	695b      	ldr	r3, [r3, #20]
 8106252:	4313      	orrs	r3, r2
 8106254:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8106256:	687b      	ldr	r3, [r7, #4]
 8106258:	68fa      	ldr	r2, [r7, #12]
 810625a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810625c:	683b      	ldr	r3, [r7, #0]
 810625e:	689a      	ldr	r2, [r3, #8]
 8106260:	687b      	ldr	r3, [r7, #4]
 8106262:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8106264:	683b      	ldr	r3, [r7, #0]
 8106266:	681a      	ldr	r2, [r3, #0]
 8106268:	687b      	ldr	r3, [r7, #4]
 810626a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810626c:	687b      	ldr	r3, [r7, #4]
 810626e:	4a10      	ldr	r2, [pc, #64]	; (81062b0 <TIM_Base_SetConfig+0x114>)
 8106270:	4293      	cmp	r3, r2
 8106272:	d00f      	beq.n	8106294 <TIM_Base_SetConfig+0xf8>
 8106274:	687b      	ldr	r3, [r7, #4]
 8106276:	4a12      	ldr	r2, [pc, #72]	; (81062c0 <TIM_Base_SetConfig+0x124>)
 8106278:	4293      	cmp	r3, r2
 810627a:	d00b      	beq.n	8106294 <TIM_Base_SetConfig+0xf8>
 810627c:	687b      	ldr	r3, [r7, #4]
 810627e:	4a11      	ldr	r2, [pc, #68]	; (81062c4 <TIM_Base_SetConfig+0x128>)
 8106280:	4293      	cmp	r3, r2
 8106282:	d007      	beq.n	8106294 <TIM_Base_SetConfig+0xf8>
 8106284:	687b      	ldr	r3, [r7, #4]
 8106286:	4a10      	ldr	r2, [pc, #64]	; (81062c8 <TIM_Base_SetConfig+0x12c>)
 8106288:	4293      	cmp	r3, r2
 810628a:	d003      	beq.n	8106294 <TIM_Base_SetConfig+0xf8>
 810628c:	687b      	ldr	r3, [r7, #4]
 810628e:	4a0f      	ldr	r2, [pc, #60]	; (81062cc <TIM_Base_SetConfig+0x130>)
 8106290:	4293      	cmp	r3, r2
 8106292:	d103      	bne.n	810629c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8106294:	683b      	ldr	r3, [r7, #0]
 8106296:	691a      	ldr	r2, [r3, #16]
 8106298:	687b      	ldr	r3, [r7, #4]
 810629a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810629c:	687b      	ldr	r3, [r7, #4]
 810629e:	2201      	movs	r2, #1
 81062a0:	615a      	str	r2, [r3, #20]
}
 81062a2:	bf00      	nop
 81062a4:	3714      	adds	r7, #20
 81062a6:	46bd      	mov	sp, r7
 81062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81062ac:	4770      	bx	lr
 81062ae:	bf00      	nop
 81062b0:	40010000 	.word	0x40010000
 81062b4:	40000400 	.word	0x40000400
 81062b8:	40000800 	.word	0x40000800
 81062bc:	40000c00 	.word	0x40000c00
 81062c0:	40010400 	.word	0x40010400
 81062c4:	40014000 	.word	0x40014000
 81062c8:	40014400 	.word	0x40014400
 81062cc:	40014800 	.word	0x40014800

081062d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 81062d0:	b480      	push	{r7}
 81062d2:	b083      	sub	sp, #12
 81062d4:	af00      	add	r7, sp, #0
 81062d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 81062d8:	bf00      	nop
 81062da:	370c      	adds	r7, #12
 81062dc:	46bd      	mov	sp, r7
 81062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81062e2:	4770      	bx	lr

081062e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 81062e4:	b480      	push	{r7}
 81062e6:	b083      	sub	sp, #12
 81062e8:	af00      	add	r7, sp, #0
 81062ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 81062ec:	bf00      	nop
 81062ee:	370c      	adds	r7, #12
 81062f0:	46bd      	mov	sp, r7
 81062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81062f6:	4770      	bx	lr

081062f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 81062f8:	b480      	push	{r7}
 81062fa:	b083      	sub	sp, #12
 81062fc:	af00      	add	r7, sp, #0
 81062fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8106300:	bf00      	nop
 8106302:	370c      	adds	r7, #12
 8106304:	46bd      	mov	sp, r7
 8106306:	f85d 7b04 	ldr.w	r7, [sp], #4
 810630a:	4770      	bx	lr

0810630c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810630c:	b580      	push	{r7, lr}
 810630e:	b082      	sub	sp, #8
 8106310:	af00      	add	r7, sp, #0
 8106312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8106314:	687b      	ldr	r3, [r7, #4]
 8106316:	2b00      	cmp	r3, #0
 8106318:	d101      	bne.n	810631e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810631a:	2301      	movs	r3, #1
 810631c:	e042      	b.n	81063a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810631e:	687b      	ldr	r3, [r7, #4]
 8106320:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8106324:	2b00      	cmp	r3, #0
 8106326:	d106      	bne.n	8106336 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8106328:	687b      	ldr	r3, [r7, #4]
 810632a:	2200      	movs	r2, #0
 810632c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8106330:	6878      	ldr	r0, [r7, #4]
 8106332:	f7fb fc15 	bl	8101b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8106336:	687b      	ldr	r3, [r7, #4]
 8106338:	2224      	movs	r2, #36	; 0x24
 810633a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 810633e:	687b      	ldr	r3, [r7, #4]
 8106340:	681b      	ldr	r3, [r3, #0]
 8106342:	681a      	ldr	r2, [r3, #0]
 8106344:	687b      	ldr	r3, [r7, #4]
 8106346:	681b      	ldr	r3, [r3, #0]
 8106348:	f022 0201 	bic.w	r2, r2, #1
 810634c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810634e:	6878      	ldr	r0, [r7, #4]
 8106350:	f000 f82c 	bl	81063ac <UART_SetConfig>
 8106354:	4603      	mov	r3, r0
 8106356:	2b01      	cmp	r3, #1
 8106358:	d101      	bne.n	810635e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 810635a:	2301      	movs	r3, #1
 810635c:	e022      	b.n	81063a4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810635e:	687b      	ldr	r3, [r7, #4]
 8106360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106362:	2b00      	cmp	r3, #0
 8106364:	d002      	beq.n	810636c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8106366:	6878      	ldr	r0, [r7, #4]
 8106368:	f000 fdd0 	bl	8106f0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810636c:	687b      	ldr	r3, [r7, #4]
 810636e:	681b      	ldr	r3, [r3, #0]
 8106370:	685a      	ldr	r2, [r3, #4]
 8106372:	687b      	ldr	r3, [r7, #4]
 8106374:	681b      	ldr	r3, [r3, #0]
 8106376:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 810637a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810637c:	687b      	ldr	r3, [r7, #4]
 810637e:	681b      	ldr	r3, [r3, #0]
 8106380:	689a      	ldr	r2, [r3, #8]
 8106382:	687b      	ldr	r3, [r7, #4]
 8106384:	681b      	ldr	r3, [r3, #0]
 8106386:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 810638a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810638c:	687b      	ldr	r3, [r7, #4]
 810638e:	681b      	ldr	r3, [r3, #0]
 8106390:	681a      	ldr	r2, [r3, #0]
 8106392:	687b      	ldr	r3, [r7, #4]
 8106394:	681b      	ldr	r3, [r3, #0]
 8106396:	f042 0201 	orr.w	r2, r2, #1
 810639a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810639c:	6878      	ldr	r0, [r7, #4]
 810639e:	f000 fe57 	bl	8107050 <UART_CheckIdleState>
 81063a2:	4603      	mov	r3, r0
}
 81063a4:	4618      	mov	r0, r3
 81063a6:	3708      	adds	r7, #8
 81063a8:	46bd      	mov	sp, r7
 81063aa:	bd80      	pop	{r7, pc}

081063ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 81063ac:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 81063b0:	b08e      	sub	sp, #56	; 0x38
 81063b2:	af00      	add	r7, sp, #0
 81063b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 81063b6:	2300      	movs	r3, #0
 81063b8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 81063bc:	687b      	ldr	r3, [r7, #4]
 81063be:	689a      	ldr	r2, [r3, #8]
 81063c0:	687b      	ldr	r3, [r7, #4]
 81063c2:	691b      	ldr	r3, [r3, #16]
 81063c4:	431a      	orrs	r2, r3
 81063c6:	687b      	ldr	r3, [r7, #4]
 81063c8:	695b      	ldr	r3, [r3, #20]
 81063ca:	431a      	orrs	r2, r3
 81063cc:	687b      	ldr	r3, [r7, #4]
 81063ce:	69db      	ldr	r3, [r3, #28]
 81063d0:	4313      	orrs	r3, r2
 81063d2:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 81063d4:	687b      	ldr	r3, [r7, #4]
 81063d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81063d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81063da:	4313      	orrs	r3, r2
 81063dc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 81063de:	687b      	ldr	r3, [r7, #4]
 81063e0:	681b      	ldr	r3, [r3, #0]
 81063e2:	681a      	ldr	r2, [r3, #0]
 81063e4:	4bc2      	ldr	r3, [pc, #776]	; (81066f0 <UART_SetConfig+0x344>)
 81063e6:	4013      	ands	r3, r2
 81063e8:	687a      	ldr	r2, [r7, #4]
 81063ea:	6812      	ldr	r2, [r2, #0]
 81063ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 81063ee:	430b      	orrs	r3, r1
 81063f0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 81063f2:	687b      	ldr	r3, [r7, #4]
 81063f4:	681b      	ldr	r3, [r3, #0]
 81063f6:	685b      	ldr	r3, [r3, #4]
 81063f8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 81063fc:	687b      	ldr	r3, [r7, #4]
 81063fe:	68da      	ldr	r2, [r3, #12]
 8106400:	687b      	ldr	r3, [r7, #4]
 8106402:	681b      	ldr	r3, [r3, #0]
 8106404:	430a      	orrs	r2, r1
 8106406:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8106408:	687b      	ldr	r3, [r7, #4]
 810640a:	699b      	ldr	r3, [r3, #24]
 810640c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810640e:	687b      	ldr	r3, [r7, #4]
 8106410:	681b      	ldr	r3, [r3, #0]
 8106412:	4ab8      	ldr	r2, [pc, #736]	; (81066f4 <UART_SetConfig+0x348>)
 8106414:	4293      	cmp	r3, r2
 8106416:	d004      	beq.n	8106422 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8106418:	687b      	ldr	r3, [r7, #4]
 810641a:	6a1b      	ldr	r3, [r3, #32]
 810641c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810641e:	4313      	orrs	r3, r2
 8106420:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8106422:	687b      	ldr	r3, [r7, #4]
 8106424:	681b      	ldr	r3, [r3, #0]
 8106426:	689b      	ldr	r3, [r3, #8]
 8106428:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 810642c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8106430:	687a      	ldr	r2, [r7, #4]
 8106432:	6812      	ldr	r2, [r2, #0]
 8106434:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8106436:	430b      	orrs	r3, r1
 8106438:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810643a:	687b      	ldr	r3, [r7, #4]
 810643c:	681b      	ldr	r3, [r3, #0]
 810643e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106440:	f023 010f 	bic.w	r1, r3, #15
 8106444:	687b      	ldr	r3, [r7, #4]
 8106446:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8106448:	687b      	ldr	r3, [r7, #4]
 810644a:	681b      	ldr	r3, [r3, #0]
 810644c:	430a      	orrs	r2, r1
 810644e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8106450:	687b      	ldr	r3, [r7, #4]
 8106452:	681b      	ldr	r3, [r3, #0]
 8106454:	4aa8      	ldr	r2, [pc, #672]	; (81066f8 <UART_SetConfig+0x34c>)
 8106456:	4293      	cmp	r3, r2
 8106458:	d177      	bne.n	810654a <UART_SetConfig+0x19e>
 810645a:	4ba8      	ldr	r3, [pc, #672]	; (81066fc <UART_SetConfig+0x350>)
 810645c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810645e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8106462:	2b28      	cmp	r3, #40	; 0x28
 8106464:	d86c      	bhi.n	8106540 <UART_SetConfig+0x194>
 8106466:	a201      	add	r2, pc, #4	; (adr r2, 810646c <UART_SetConfig+0xc0>)
 8106468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810646c:	08106511 	.word	0x08106511
 8106470:	08106541 	.word	0x08106541
 8106474:	08106541 	.word	0x08106541
 8106478:	08106541 	.word	0x08106541
 810647c:	08106541 	.word	0x08106541
 8106480:	08106541 	.word	0x08106541
 8106484:	08106541 	.word	0x08106541
 8106488:	08106541 	.word	0x08106541
 810648c:	08106519 	.word	0x08106519
 8106490:	08106541 	.word	0x08106541
 8106494:	08106541 	.word	0x08106541
 8106498:	08106541 	.word	0x08106541
 810649c:	08106541 	.word	0x08106541
 81064a0:	08106541 	.word	0x08106541
 81064a4:	08106541 	.word	0x08106541
 81064a8:	08106541 	.word	0x08106541
 81064ac:	08106521 	.word	0x08106521
 81064b0:	08106541 	.word	0x08106541
 81064b4:	08106541 	.word	0x08106541
 81064b8:	08106541 	.word	0x08106541
 81064bc:	08106541 	.word	0x08106541
 81064c0:	08106541 	.word	0x08106541
 81064c4:	08106541 	.word	0x08106541
 81064c8:	08106541 	.word	0x08106541
 81064cc:	08106529 	.word	0x08106529
 81064d0:	08106541 	.word	0x08106541
 81064d4:	08106541 	.word	0x08106541
 81064d8:	08106541 	.word	0x08106541
 81064dc:	08106541 	.word	0x08106541
 81064e0:	08106541 	.word	0x08106541
 81064e4:	08106541 	.word	0x08106541
 81064e8:	08106541 	.word	0x08106541
 81064ec:	08106531 	.word	0x08106531
 81064f0:	08106541 	.word	0x08106541
 81064f4:	08106541 	.word	0x08106541
 81064f8:	08106541 	.word	0x08106541
 81064fc:	08106541 	.word	0x08106541
 8106500:	08106541 	.word	0x08106541
 8106504:	08106541 	.word	0x08106541
 8106508:	08106541 	.word	0x08106541
 810650c:	08106539 	.word	0x08106539
 8106510:	2301      	movs	r3, #1
 8106512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106516:	e231      	b.n	810697c <UART_SetConfig+0x5d0>
 8106518:	2304      	movs	r3, #4
 810651a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810651e:	e22d      	b.n	810697c <UART_SetConfig+0x5d0>
 8106520:	2308      	movs	r3, #8
 8106522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106526:	e229      	b.n	810697c <UART_SetConfig+0x5d0>
 8106528:	2310      	movs	r3, #16
 810652a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810652e:	e225      	b.n	810697c <UART_SetConfig+0x5d0>
 8106530:	2320      	movs	r3, #32
 8106532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106536:	e221      	b.n	810697c <UART_SetConfig+0x5d0>
 8106538:	2340      	movs	r3, #64	; 0x40
 810653a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810653e:	e21d      	b.n	810697c <UART_SetConfig+0x5d0>
 8106540:	2380      	movs	r3, #128	; 0x80
 8106542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106546:	bf00      	nop
 8106548:	e218      	b.n	810697c <UART_SetConfig+0x5d0>
 810654a:	687b      	ldr	r3, [r7, #4]
 810654c:	681b      	ldr	r3, [r3, #0]
 810654e:	4a6c      	ldr	r2, [pc, #432]	; (8106700 <UART_SetConfig+0x354>)
 8106550:	4293      	cmp	r3, r2
 8106552:	d132      	bne.n	81065ba <UART_SetConfig+0x20e>
 8106554:	4b69      	ldr	r3, [pc, #420]	; (81066fc <UART_SetConfig+0x350>)
 8106556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106558:	f003 0307 	and.w	r3, r3, #7
 810655c:	2b05      	cmp	r3, #5
 810655e:	d827      	bhi.n	81065b0 <UART_SetConfig+0x204>
 8106560:	a201      	add	r2, pc, #4	; (adr r2, 8106568 <UART_SetConfig+0x1bc>)
 8106562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106566:	bf00      	nop
 8106568:	08106581 	.word	0x08106581
 810656c:	08106589 	.word	0x08106589
 8106570:	08106591 	.word	0x08106591
 8106574:	08106599 	.word	0x08106599
 8106578:	081065a1 	.word	0x081065a1
 810657c:	081065a9 	.word	0x081065a9
 8106580:	2300      	movs	r3, #0
 8106582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106586:	e1f9      	b.n	810697c <UART_SetConfig+0x5d0>
 8106588:	2304      	movs	r3, #4
 810658a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810658e:	e1f5      	b.n	810697c <UART_SetConfig+0x5d0>
 8106590:	2308      	movs	r3, #8
 8106592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106596:	e1f1      	b.n	810697c <UART_SetConfig+0x5d0>
 8106598:	2310      	movs	r3, #16
 810659a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810659e:	e1ed      	b.n	810697c <UART_SetConfig+0x5d0>
 81065a0:	2320      	movs	r3, #32
 81065a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81065a6:	e1e9      	b.n	810697c <UART_SetConfig+0x5d0>
 81065a8:	2340      	movs	r3, #64	; 0x40
 81065aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81065ae:	e1e5      	b.n	810697c <UART_SetConfig+0x5d0>
 81065b0:	2380      	movs	r3, #128	; 0x80
 81065b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81065b6:	bf00      	nop
 81065b8:	e1e0      	b.n	810697c <UART_SetConfig+0x5d0>
 81065ba:	687b      	ldr	r3, [r7, #4]
 81065bc:	681b      	ldr	r3, [r3, #0]
 81065be:	4a51      	ldr	r2, [pc, #324]	; (8106704 <UART_SetConfig+0x358>)
 81065c0:	4293      	cmp	r3, r2
 81065c2:	d132      	bne.n	810662a <UART_SetConfig+0x27e>
 81065c4:	4b4d      	ldr	r3, [pc, #308]	; (81066fc <UART_SetConfig+0x350>)
 81065c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81065c8:	f003 0307 	and.w	r3, r3, #7
 81065cc:	2b05      	cmp	r3, #5
 81065ce:	d827      	bhi.n	8106620 <UART_SetConfig+0x274>
 81065d0:	a201      	add	r2, pc, #4	; (adr r2, 81065d8 <UART_SetConfig+0x22c>)
 81065d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81065d6:	bf00      	nop
 81065d8:	081065f1 	.word	0x081065f1
 81065dc:	081065f9 	.word	0x081065f9
 81065e0:	08106601 	.word	0x08106601
 81065e4:	08106609 	.word	0x08106609
 81065e8:	08106611 	.word	0x08106611
 81065ec:	08106619 	.word	0x08106619
 81065f0:	2300      	movs	r3, #0
 81065f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81065f6:	e1c1      	b.n	810697c <UART_SetConfig+0x5d0>
 81065f8:	2304      	movs	r3, #4
 81065fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81065fe:	e1bd      	b.n	810697c <UART_SetConfig+0x5d0>
 8106600:	2308      	movs	r3, #8
 8106602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106606:	e1b9      	b.n	810697c <UART_SetConfig+0x5d0>
 8106608:	2310      	movs	r3, #16
 810660a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810660e:	e1b5      	b.n	810697c <UART_SetConfig+0x5d0>
 8106610:	2320      	movs	r3, #32
 8106612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106616:	e1b1      	b.n	810697c <UART_SetConfig+0x5d0>
 8106618:	2340      	movs	r3, #64	; 0x40
 810661a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810661e:	e1ad      	b.n	810697c <UART_SetConfig+0x5d0>
 8106620:	2380      	movs	r3, #128	; 0x80
 8106622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106626:	bf00      	nop
 8106628:	e1a8      	b.n	810697c <UART_SetConfig+0x5d0>
 810662a:	687b      	ldr	r3, [r7, #4]
 810662c:	681b      	ldr	r3, [r3, #0]
 810662e:	4a36      	ldr	r2, [pc, #216]	; (8106708 <UART_SetConfig+0x35c>)
 8106630:	4293      	cmp	r3, r2
 8106632:	d132      	bne.n	810669a <UART_SetConfig+0x2ee>
 8106634:	4b31      	ldr	r3, [pc, #196]	; (81066fc <UART_SetConfig+0x350>)
 8106636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106638:	f003 0307 	and.w	r3, r3, #7
 810663c:	2b05      	cmp	r3, #5
 810663e:	d827      	bhi.n	8106690 <UART_SetConfig+0x2e4>
 8106640:	a201      	add	r2, pc, #4	; (adr r2, 8106648 <UART_SetConfig+0x29c>)
 8106642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106646:	bf00      	nop
 8106648:	08106661 	.word	0x08106661
 810664c:	08106669 	.word	0x08106669
 8106650:	08106671 	.word	0x08106671
 8106654:	08106679 	.word	0x08106679
 8106658:	08106681 	.word	0x08106681
 810665c:	08106689 	.word	0x08106689
 8106660:	2300      	movs	r3, #0
 8106662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106666:	e189      	b.n	810697c <UART_SetConfig+0x5d0>
 8106668:	2304      	movs	r3, #4
 810666a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810666e:	e185      	b.n	810697c <UART_SetConfig+0x5d0>
 8106670:	2308      	movs	r3, #8
 8106672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106676:	e181      	b.n	810697c <UART_SetConfig+0x5d0>
 8106678:	2310      	movs	r3, #16
 810667a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810667e:	e17d      	b.n	810697c <UART_SetConfig+0x5d0>
 8106680:	2320      	movs	r3, #32
 8106682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106686:	e179      	b.n	810697c <UART_SetConfig+0x5d0>
 8106688:	2340      	movs	r3, #64	; 0x40
 810668a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810668e:	e175      	b.n	810697c <UART_SetConfig+0x5d0>
 8106690:	2380      	movs	r3, #128	; 0x80
 8106692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106696:	bf00      	nop
 8106698:	e170      	b.n	810697c <UART_SetConfig+0x5d0>
 810669a:	687b      	ldr	r3, [r7, #4]
 810669c:	681b      	ldr	r3, [r3, #0]
 810669e:	4a1b      	ldr	r2, [pc, #108]	; (810670c <UART_SetConfig+0x360>)
 81066a0:	4293      	cmp	r3, r2
 81066a2:	d142      	bne.n	810672a <UART_SetConfig+0x37e>
 81066a4:	4b15      	ldr	r3, [pc, #84]	; (81066fc <UART_SetConfig+0x350>)
 81066a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81066a8:	f003 0307 	and.w	r3, r3, #7
 81066ac:	2b05      	cmp	r3, #5
 81066ae:	d837      	bhi.n	8106720 <UART_SetConfig+0x374>
 81066b0:	a201      	add	r2, pc, #4	; (adr r2, 81066b8 <UART_SetConfig+0x30c>)
 81066b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81066b6:	bf00      	nop
 81066b8:	081066d1 	.word	0x081066d1
 81066bc:	081066d9 	.word	0x081066d9
 81066c0:	081066e1 	.word	0x081066e1
 81066c4:	081066e9 	.word	0x081066e9
 81066c8:	08106711 	.word	0x08106711
 81066cc:	08106719 	.word	0x08106719
 81066d0:	2300      	movs	r3, #0
 81066d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81066d6:	e151      	b.n	810697c <UART_SetConfig+0x5d0>
 81066d8:	2304      	movs	r3, #4
 81066da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81066de:	e14d      	b.n	810697c <UART_SetConfig+0x5d0>
 81066e0:	2308      	movs	r3, #8
 81066e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81066e6:	e149      	b.n	810697c <UART_SetConfig+0x5d0>
 81066e8:	2310      	movs	r3, #16
 81066ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81066ee:	e145      	b.n	810697c <UART_SetConfig+0x5d0>
 81066f0:	cfff69f3 	.word	0xcfff69f3
 81066f4:	58000c00 	.word	0x58000c00
 81066f8:	40011000 	.word	0x40011000
 81066fc:	58024400 	.word	0x58024400
 8106700:	40004400 	.word	0x40004400
 8106704:	40004800 	.word	0x40004800
 8106708:	40004c00 	.word	0x40004c00
 810670c:	40005000 	.word	0x40005000
 8106710:	2320      	movs	r3, #32
 8106712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106716:	e131      	b.n	810697c <UART_SetConfig+0x5d0>
 8106718:	2340      	movs	r3, #64	; 0x40
 810671a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810671e:	e12d      	b.n	810697c <UART_SetConfig+0x5d0>
 8106720:	2380      	movs	r3, #128	; 0x80
 8106722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106726:	bf00      	nop
 8106728:	e128      	b.n	810697c <UART_SetConfig+0x5d0>
 810672a:	687b      	ldr	r3, [r7, #4]
 810672c:	681b      	ldr	r3, [r3, #0]
 810672e:	4ab6      	ldr	r2, [pc, #728]	; (8106a08 <UART_SetConfig+0x65c>)
 8106730:	4293      	cmp	r3, r2
 8106732:	d178      	bne.n	8106826 <UART_SetConfig+0x47a>
 8106734:	4bb5      	ldr	r3, [pc, #724]	; (8106a0c <UART_SetConfig+0x660>)
 8106736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106738:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810673c:	2b28      	cmp	r3, #40	; 0x28
 810673e:	d86d      	bhi.n	810681c <UART_SetConfig+0x470>
 8106740:	a201      	add	r2, pc, #4	; (adr r2, 8106748 <UART_SetConfig+0x39c>)
 8106742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106746:	bf00      	nop
 8106748:	081067ed 	.word	0x081067ed
 810674c:	0810681d 	.word	0x0810681d
 8106750:	0810681d 	.word	0x0810681d
 8106754:	0810681d 	.word	0x0810681d
 8106758:	0810681d 	.word	0x0810681d
 810675c:	0810681d 	.word	0x0810681d
 8106760:	0810681d 	.word	0x0810681d
 8106764:	0810681d 	.word	0x0810681d
 8106768:	081067f5 	.word	0x081067f5
 810676c:	0810681d 	.word	0x0810681d
 8106770:	0810681d 	.word	0x0810681d
 8106774:	0810681d 	.word	0x0810681d
 8106778:	0810681d 	.word	0x0810681d
 810677c:	0810681d 	.word	0x0810681d
 8106780:	0810681d 	.word	0x0810681d
 8106784:	0810681d 	.word	0x0810681d
 8106788:	081067fd 	.word	0x081067fd
 810678c:	0810681d 	.word	0x0810681d
 8106790:	0810681d 	.word	0x0810681d
 8106794:	0810681d 	.word	0x0810681d
 8106798:	0810681d 	.word	0x0810681d
 810679c:	0810681d 	.word	0x0810681d
 81067a0:	0810681d 	.word	0x0810681d
 81067a4:	0810681d 	.word	0x0810681d
 81067a8:	08106805 	.word	0x08106805
 81067ac:	0810681d 	.word	0x0810681d
 81067b0:	0810681d 	.word	0x0810681d
 81067b4:	0810681d 	.word	0x0810681d
 81067b8:	0810681d 	.word	0x0810681d
 81067bc:	0810681d 	.word	0x0810681d
 81067c0:	0810681d 	.word	0x0810681d
 81067c4:	0810681d 	.word	0x0810681d
 81067c8:	0810680d 	.word	0x0810680d
 81067cc:	0810681d 	.word	0x0810681d
 81067d0:	0810681d 	.word	0x0810681d
 81067d4:	0810681d 	.word	0x0810681d
 81067d8:	0810681d 	.word	0x0810681d
 81067dc:	0810681d 	.word	0x0810681d
 81067e0:	0810681d 	.word	0x0810681d
 81067e4:	0810681d 	.word	0x0810681d
 81067e8:	08106815 	.word	0x08106815
 81067ec:	2301      	movs	r3, #1
 81067ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81067f2:	e0c3      	b.n	810697c <UART_SetConfig+0x5d0>
 81067f4:	2304      	movs	r3, #4
 81067f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81067fa:	e0bf      	b.n	810697c <UART_SetConfig+0x5d0>
 81067fc:	2308      	movs	r3, #8
 81067fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106802:	e0bb      	b.n	810697c <UART_SetConfig+0x5d0>
 8106804:	2310      	movs	r3, #16
 8106806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810680a:	e0b7      	b.n	810697c <UART_SetConfig+0x5d0>
 810680c:	2320      	movs	r3, #32
 810680e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106812:	e0b3      	b.n	810697c <UART_SetConfig+0x5d0>
 8106814:	2340      	movs	r3, #64	; 0x40
 8106816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810681a:	e0af      	b.n	810697c <UART_SetConfig+0x5d0>
 810681c:	2380      	movs	r3, #128	; 0x80
 810681e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106822:	bf00      	nop
 8106824:	e0aa      	b.n	810697c <UART_SetConfig+0x5d0>
 8106826:	687b      	ldr	r3, [r7, #4]
 8106828:	681b      	ldr	r3, [r3, #0]
 810682a:	4a79      	ldr	r2, [pc, #484]	; (8106a10 <UART_SetConfig+0x664>)
 810682c:	4293      	cmp	r3, r2
 810682e:	d132      	bne.n	8106896 <UART_SetConfig+0x4ea>
 8106830:	4b76      	ldr	r3, [pc, #472]	; (8106a0c <UART_SetConfig+0x660>)
 8106832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106834:	f003 0307 	and.w	r3, r3, #7
 8106838:	2b05      	cmp	r3, #5
 810683a:	d827      	bhi.n	810688c <UART_SetConfig+0x4e0>
 810683c:	a201      	add	r2, pc, #4	; (adr r2, 8106844 <UART_SetConfig+0x498>)
 810683e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106842:	bf00      	nop
 8106844:	0810685d 	.word	0x0810685d
 8106848:	08106865 	.word	0x08106865
 810684c:	0810686d 	.word	0x0810686d
 8106850:	08106875 	.word	0x08106875
 8106854:	0810687d 	.word	0x0810687d
 8106858:	08106885 	.word	0x08106885
 810685c:	2300      	movs	r3, #0
 810685e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106862:	e08b      	b.n	810697c <UART_SetConfig+0x5d0>
 8106864:	2304      	movs	r3, #4
 8106866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810686a:	e087      	b.n	810697c <UART_SetConfig+0x5d0>
 810686c:	2308      	movs	r3, #8
 810686e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106872:	e083      	b.n	810697c <UART_SetConfig+0x5d0>
 8106874:	2310      	movs	r3, #16
 8106876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810687a:	e07f      	b.n	810697c <UART_SetConfig+0x5d0>
 810687c:	2320      	movs	r3, #32
 810687e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106882:	e07b      	b.n	810697c <UART_SetConfig+0x5d0>
 8106884:	2340      	movs	r3, #64	; 0x40
 8106886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810688a:	e077      	b.n	810697c <UART_SetConfig+0x5d0>
 810688c:	2380      	movs	r3, #128	; 0x80
 810688e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106892:	bf00      	nop
 8106894:	e072      	b.n	810697c <UART_SetConfig+0x5d0>
 8106896:	687b      	ldr	r3, [r7, #4]
 8106898:	681b      	ldr	r3, [r3, #0]
 810689a:	4a5e      	ldr	r2, [pc, #376]	; (8106a14 <UART_SetConfig+0x668>)
 810689c:	4293      	cmp	r3, r2
 810689e:	d132      	bne.n	8106906 <UART_SetConfig+0x55a>
 81068a0:	4b5a      	ldr	r3, [pc, #360]	; (8106a0c <UART_SetConfig+0x660>)
 81068a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81068a4:	f003 0307 	and.w	r3, r3, #7
 81068a8:	2b05      	cmp	r3, #5
 81068aa:	d827      	bhi.n	81068fc <UART_SetConfig+0x550>
 81068ac:	a201      	add	r2, pc, #4	; (adr r2, 81068b4 <UART_SetConfig+0x508>)
 81068ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81068b2:	bf00      	nop
 81068b4:	081068cd 	.word	0x081068cd
 81068b8:	081068d5 	.word	0x081068d5
 81068bc:	081068dd 	.word	0x081068dd
 81068c0:	081068e5 	.word	0x081068e5
 81068c4:	081068ed 	.word	0x081068ed
 81068c8:	081068f5 	.word	0x081068f5
 81068cc:	2300      	movs	r3, #0
 81068ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81068d2:	e053      	b.n	810697c <UART_SetConfig+0x5d0>
 81068d4:	2304      	movs	r3, #4
 81068d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81068da:	e04f      	b.n	810697c <UART_SetConfig+0x5d0>
 81068dc:	2308      	movs	r3, #8
 81068de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81068e2:	e04b      	b.n	810697c <UART_SetConfig+0x5d0>
 81068e4:	2310      	movs	r3, #16
 81068e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81068ea:	e047      	b.n	810697c <UART_SetConfig+0x5d0>
 81068ec:	2320      	movs	r3, #32
 81068ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81068f2:	e043      	b.n	810697c <UART_SetConfig+0x5d0>
 81068f4:	2340      	movs	r3, #64	; 0x40
 81068f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81068fa:	e03f      	b.n	810697c <UART_SetConfig+0x5d0>
 81068fc:	2380      	movs	r3, #128	; 0x80
 81068fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106902:	bf00      	nop
 8106904:	e03a      	b.n	810697c <UART_SetConfig+0x5d0>
 8106906:	687b      	ldr	r3, [r7, #4]
 8106908:	681b      	ldr	r3, [r3, #0]
 810690a:	4a43      	ldr	r2, [pc, #268]	; (8106a18 <UART_SetConfig+0x66c>)
 810690c:	4293      	cmp	r3, r2
 810690e:	d132      	bne.n	8106976 <UART_SetConfig+0x5ca>
 8106910:	4b3e      	ldr	r3, [pc, #248]	; (8106a0c <UART_SetConfig+0x660>)
 8106912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106914:	f003 0307 	and.w	r3, r3, #7
 8106918:	2b05      	cmp	r3, #5
 810691a:	d827      	bhi.n	810696c <UART_SetConfig+0x5c0>
 810691c:	a201      	add	r2, pc, #4	; (adr r2, 8106924 <UART_SetConfig+0x578>)
 810691e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106922:	bf00      	nop
 8106924:	0810693d 	.word	0x0810693d
 8106928:	08106945 	.word	0x08106945
 810692c:	0810694d 	.word	0x0810694d
 8106930:	08106955 	.word	0x08106955
 8106934:	0810695d 	.word	0x0810695d
 8106938:	08106965 	.word	0x08106965
 810693c:	2302      	movs	r3, #2
 810693e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106942:	e01b      	b.n	810697c <UART_SetConfig+0x5d0>
 8106944:	2304      	movs	r3, #4
 8106946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810694a:	e017      	b.n	810697c <UART_SetConfig+0x5d0>
 810694c:	2308      	movs	r3, #8
 810694e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106952:	e013      	b.n	810697c <UART_SetConfig+0x5d0>
 8106954:	2310      	movs	r3, #16
 8106956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810695a:	e00f      	b.n	810697c <UART_SetConfig+0x5d0>
 810695c:	2320      	movs	r3, #32
 810695e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106962:	e00b      	b.n	810697c <UART_SetConfig+0x5d0>
 8106964:	2340      	movs	r3, #64	; 0x40
 8106966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810696a:	e007      	b.n	810697c <UART_SetConfig+0x5d0>
 810696c:	2380      	movs	r3, #128	; 0x80
 810696e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106972:	bf00      	nop
 8106974:	e002      	b.n	810697c <UART_SetConfig+0x5d0>
 8106976:	2380      	movs	r3, #128	; 0x80
 8106978:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810697c:	687b      	ldr	r3, [r7, #4]
 810697e:	681b      	ldr	r3, [r3, #0]
 8106980:	4a25      	ldr	r2, [pc, #148]	; (8106a18 <UART_SetConfig+0x66c>)
 8106982:	4293      	cmp	r3, r2
 8106984:	f040 80b8 	bne.w	8106af8 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8106988:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810698c:	2b08      	cmp	r3, #8
 810698e:	d019      	beq.n	81069c4 <UART_SetConfig+0x618>
 8106990:	2b08      	cmp	r3, #8
 8106992:	dc04      	bgt.n	810699e <UART_SetConfig+0x5f2>
 8106994:	2b02      	cmp	r3, #2
 8106996:	d009      	beq.n	81069ac <UART_SetConfig+0x600>
 8106998:	2b04      	cmp	r3, #4
 810699a:	d00b      	beq.n	81069b4 <UART_SetConfig+0x608>
 810699c:	e042      	b.n	8106a24 <UART_SetConfig+0x678>
 810699e:	2b20      	cmp	r3, #32
 81069a0:	d02b      	beq.n	81069fa <UART_SetConfig+0x64e>
 81069a2:	2b40      	cmp	r3, #64	; 0x40
 81069a4:	d02c      	beq.n	8106a00 <UART_SetConfig+0x654>
 81069a6:	2b10      	cmp	r3, #16
 81069a8:	d014      	beq.n	81069d4 <UART_SetConfig+0x628>
 81069aa:	e03b      	b.n	8106a24 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 81069ac:	f7fe fb92 	bl	81050d4 <HAL_RCCEx_GetD3PCLK1Freq>
 81069b0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81069b2:	e03d      	b.n	8106a30 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81069b4:	f107 0314 	add.w	r3, r7, #20
 81069b8:	4618      	mov	r0, r3
 81069ba:	f7fe fba1 	bl	8105100 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81069be:	69bb      	ldr	r3, [r7, #24]
 81069c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81069c2:	e035      	b.n	8106a30 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81069c4:	f107 0308 	add.w	r3, r7, #8
 81069c8:	4618      	mov	r0, r3
 81069ca:	f7fe fce5 	bl	8105398 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81069ce:	68fb      	ldr	r3, [r7, #12]
 81069d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81069d2:	e02d      	b.n	8106a30 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81069d4:	4b0d      	ldr	r3, [pc, #52]	; (8106a0c <UART_SetConfig+0x660>)
 81069d6:	681b      	ldr	r3, [r3, #0]
 81069d8:	f003 0320 	and.w	r3, r3, #32
 81069dc:	2b00      	cmp	r3, #0
 81069de:	d009      	beq.n	81069f4 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81069e0:	4b0a      	ldr	r3, [pc, #40]	; (8106a0c <UART_SetConfig+0x660>)
 81069e2:	681b      	ldr	r3, [r3, #0]
 81069e4:	08db      	lsrs	r3, r3, #3
 81069e6:	f003 0303 	and.w	r3, r3, #3
 81069ea:	4a0c      	ldr	r2, [pc, #48]	; (8106a1c <UART_SetConfig+0x670>)
 81069ec:	fa22 f303 	lsr.w	r3, r2, r3
 81069f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81069f2:	e01d      	b.n	8106a30 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 81069f4:	4b09      	ldr	r3, [pc, #36]	; (8106a1c <UART_SetConfig+0x670>)
 81069f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81069f8:	e01a      	b.n	8106a30 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81069fa:	4b09      	ldr	r3, [pc, #36]	; (8106a20 <UART_SetConfig+0x674>)
 81069fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81069fe:	e017      	b.n	8106a30 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8106a00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8106a04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106a06:	e013      	b.n	8106a30 <UART_SetConfig+0x684>
 8106a08:	40011400 	.word	0x40011400
 8106a0c:	58024400 	.word	0x58024400
 8106a10:	40007800 	.word	0x40007800
 8106a14:	40007c00 	.word	0x40007c00
 8106a18:	58000c00 	.word	0x58000c00
 8106a1c:	03d09000 	.word	0x03d09000
 8106a20:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8106a24:	2300      	movs	r3, #0
 8106a26:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8106a28:	2301      	movs	r3, #1
 8106a2a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8106a2e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8106a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106a32:	2b00      	cmp	r3, #0
 8106a34:	f000 824d 	beq.w	8106ed2 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8106a38:	687b      	ldr	r3, [r7, #4]
 8106a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106a3c:	4aad      	ldr	r2, [pc, #692]	; (8106cf4 <UART_SetConfig+0x948>)
 8106a3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8106a42:	461a      	mov	r2, r3
 8106a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106a46:	fbb3 f3f2 	udiv	r3, r3, r2
 8106a4a:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8106a4c:	687b      	ldr	r3, [r7, #4]
 8106a4e:	685a      	ldr	r2, [r3, #4]
 8106a50:	4613      	mov	r3, r2
 8106a52:	005b      	lsls	r3, r3, #1
 8106a54:	4413      	add	r3, r2
 8106a56:	6a3a      	ldr	r2, [r7, #32]
 8106a58:	429a      	cmp	r2, r3
 8106a5a:	d305      	bcc.n	8106a68 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8106a5c:	687b      	ldr	r3, [r7, #4]
 8106a5e:	685b      	ldr	r3, [r3, #4]
 8106a60:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8106a62:	6a3a      	ldr	r2, [r7, #32]
 8106a64:	429a      	cmp	r2, r3
 8106a66:	d903      	bls.n	8106a70 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8106a68:	2301      	movs	r3, #1
 8106a6a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8106a6e:	e230      	b.n	8106ed2 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8106a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106a72:	4618      	mov	r0, r3
 8106a74:	f04f 0100 	mov.w	r1, #0
 8106a78:	687b      	ldr	r3, [r7, #4]
 8106a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106a7c:	4a9d      	ldr	r2, [pc, #628]	; (8106cf4 <UART_SetConfig+0x948>)
 8106a7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8106a82:	b29b      	uxth	r3, r3
 8106a84:	f04f 0400 	mov.w	r4, #0
 8106a88:	461a      	mov	r2, r3
 8106a8a:	4623      	mov	r3, r4
 8106a8c:	f7fa f8c4 	bl	8100c18 <__aeabi_uldivmod>
 8106a90:	4603      	mov	r3, r0
 8106a92:	460c      	mov	r4, r1
 8106a94:	4619      	mov	r1, r3
 8106a96:	4622      	mov	r2, r4
 8106a98:	f04f 0300 	mov.w	r3, #0
 8106a9c:	f04f 0400 	mov.w	r4, #0
 8106aa0:	0214      	lsls	r4, r2, #8
 8106aa2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8106aa6:	020b      	lsls	r3, r1, #8
 8106aa8:	687a      	ldr	r2, [r7, #4]
 8106aaa:	6852      	ldr	r2, [r2, #4]
 8106aac:	0852      	lsrs	r2, r2, #1
 8106aae:	4611      	mov	r1, r2
 8106ab0:	f04f 0200 	mov.w	r2, #0
 8106ab4:	eb13 0b01 	adds.w	fp, r3, r1
 8106ab8:	eb44 0c02 	adc.w	ip, r4, r2
 8106abc:	4658      	mov	r0, fp
 8106abe:	4661      	mov	r1, ip
 8106ac0:	687b      	ldr	r3, [r7, #4]
 8106ac2:	685b      	ldr	r3, [r3, #4]
 8106ac4:	f04f 0400 	mov.w	r4, #0
 8106ac8:	461a      	mov	r2, r3
 8106aca:	4623      	mov	r3, r4
 8106acc:	f7fa f8a4 	bl	8100c18 <__aeabi_uldivmod>
 8106ad0:	4603      	mov	r3, r0
 8106ad2:	460c      	mov	r4, r1
 8106ad4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8106ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106ad8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8106adc:	d308      	bcc.n	8106af0 <UART_SetConfig+0x744>
 8106ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106ae0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8106ae4:	d204      	bcs.n	8106af0 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8106ae6:	687b      	ldr	r3, [r7, #4]
 8106ae8:	681b      	ldr	r3, [r3, #0]
 8106aea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8106aec:	60da      	str	r2, [r3, #12]
 8106aee:	e1f0      	b.n	8106ed2 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8106af0:	2301      	movs	r3, #1
 8106af2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8106af6:	e1ec      	b.n	8106ed2 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8106af8:	687b      	ldr	r3, [r7, #4]
 8106afa:	69db      	ldr	r3, [r3, #28]
 8106afc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8106b00:	f040 8100 	bne.w	8106d04 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8106b04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8106b08:	2b40      	cmp	r3, #64	; 0x40
 8106b0a:	f200 80b7 	bhi.w	8106c7c <UART_SetConfig+0x8d0>
 8106b0e:	a201      	add	r2, pc, #4	; (adr r2, 8106b14 <UART_SetConfig+0x768>)
 8106b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106b14:	08106c19 	.word	0x08106c19
 8106b18:	08106c21 	.word	0x08106c21
 8106b1c:	08106c7d 	.word	0x08106c7d
 8106b20:	08106c7d 	.word	0x08106c7d
 8106b24:	08106c29 	.word	0x08106c29
 8106b28:	08106c7d 	.word	0x08106c7d
 8106b2c:	08106c7d 	.word	0x08106c7d
 8106b30:	08106c7d 	.word	0x08106c7d
 8106b34:	08106c39 	.word	0x08106c39
 8106b38:	08106c7d 	.word	0x08106c7d
 8106b3c:	08106c7d 	.word	0x08106c7d
 8106b40:	08106c7d 	.word	0x08106c7d
 8106b44:	08106c7d 	.word	0x08106c7d
 8106b48:	08106c7d 	.word	0x08106c7d
 8106b4c:	08106c7d 	.word	0x08106c7d
 8106b50:	08106c7d 	.word	0x08106c7d
 8106b54:	08106c49 	.word	0x08106c49
 8106b58:	08106c7d 	.word	0x08106c7d
 8106b5c:	08106c7d 	.word	0x08106c7d
 8106b60:	08106c7d 	.word	0x08106c7d
 8106b64:	08106c7d 	.word	0x08106c7d
 8106b68:	08106c7d 	.word	0x08106c7d
 8106b6c:	08106c7d 	.word	0x08106c7d
 8106b70:	08106c7d 	.word	0x08106c7d
 8106b74:	08106c7d 	.word	0x08106c7d
 8106b78:	08106c7d 	.word	0x08106c7d
 8106b7c:	08106c7d 	.word	0x08106c7d
 8106b80:	08106c7d 	.word	0x08106c7d
 8106b84:	08106c7d 	.word	0x08106c7d
 8106b88:	08106c7d 	.word	0x08106c7d
 8106b8c:	08106c7d 	.word	0x08106c7d
 8106b90:	08106c7d 	.word	0x08106c7d
 8106b94:	08106c6f 	.word	0x08106c6f
 8106b98:	08106c7d 	.word	0x08106c7d
 8106b9c:	08106c7d 	.word	0x08106c7d
 8106ba0:	08106c7d 	.word	0x08106c7d
 8106ba4:	08106c7d 	.word	0x08106c7d
 8106ba8:	08106c7d 	.word	0x08106c7d
 8106bac:	08106c7d 	.word	0x08106c7d
 8106bb0:	08106c7d 	.word	0x08106c7d
 8106bb4:	08106c7d 	.word	0x08106c7d
 8106bb8:	08106c7d 	.word	0x08106c7d
 8106bbc:	08106c7d 	.word	0x08106c7d
 8106bc0:	08106c7d 	.word	0x08106c7d
 8106bc4:	08106c7d 	.word	0x08106c7d
 8106bc8:	08106c7d 	.word	0x08106c7d
 8106bcc:	08106c7d 	.word	0x08106c7d
 8106bd0:	08106c7d 	.word	0x08106c7d
 8106bd4:	08106c7d 	.word	0x08106c7d
 8106bd8:	08106c7d 	.word	0x08106c7d
 8106bdc:	08106c7d 	.word	0x08106c7d
 8106be0:	08106c7d 	.word	0x08106c7d
 8106be4:	08106c7d 	.word	0x08106c7d
 8106be8:	08106c7d 	.word	0x08106c7d
 8106bec:	08106c7d 	.word	0x08106c7d
 8106bf0:	08106c7d 	.word	0x08106c7d
 8106bf4:	08106c7d 	.word	0x08106c7d
 8106bf8:	08106c7d 	.word	0x08106c7d
 8106bfc:	08106c7d 	.word	0x08106c7d
 8106c00:	08106c7d 	.word	0x08106c7d
 8106c04:	08106c7d 	.word	0x08106c7d
 8106c08:	08106c7d 	.word	0x08106c7d
 8106c0c:	08106c7d 	.word	0x08106c7d
 8106c10:	08106c7d 	.word	0x08106c7d
 8106c14:	08106c75 	.word	0x08106c75
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8106c18:	f7fe f9ee 	bl	8104ff8 <HAL_RCC_GetPCLK1Freq>
 8106c1c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8106c1e:	e033      	b.n	8106c88 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8106c20:	f7fe fa00 	bl	8105024 <HAL_RCC_GetPCLK2Freq>
 8106c24:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8106c26:	e02f      	b.n	8106c88 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106c28:	f107 0314 	add.w	r3, r7, #20
 8106c2c:	4618      	mov	r0, r3
 8106c2e:	f7fe fa67 	bl	8105100 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8106c32:	69bb      	ldr	r3, [r7, #24]
 8106c34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106c36:	e027      	b.n	8106c88 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106c38:	f107 0308 	add.w	r3, r7, #8
 8106c3c:	4618      	mov	r0, r3
 8106c3e:	f7fe fbab 	bl	8105398 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8106c42:	68fb      	ldr	r3, [r7, #12]
 8106c44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106c46:	e01f      	b.n	8106c88 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106c48:	4b2b      	ldr	r3, [pc, #172]	; (8106cf8 <UART_SetConfig+0x94c>)
 8106c4a:	681b      	ldr	r3, [r3, #0]
 8106c4c:	f003 0320 	and.w	r3, r3, #32
 8106c50:	2b00      	cmp	r3, #0
 8106c52:	d009      	beq.n	8106c68 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8106c54:	4b28      	ldr	r3, [pc, #160]	; (8106cf8 <UART_SetConfig+0x94c>)
 8106c56:	681b      	ldr	r3, [r3, #0]
 8106c58:	08db      	lsrs	r3, r3, #3
 8106c5a:	f003 0303 	and.w	r3, r3, #3
 8106c5e:	4a27      	ldr	r2, [pc, #156]	; (8106cfc <UART_SetConfig+0x950>)
 8106c60:	fa22 f303 	lsr.w	r3, r2, r3
 8106c64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8106c66:	e00f      	b.n	8106c88 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8106c68:	4b24      	ldr	r3, [pc, #144]	; (8106cfc <UART_SetConfig+0x950>)
 8106c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106c6c:	e00c      	b.n	8106c88 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8106c6e:	4b24      	ldr	r3, [pc, #144]	; (8106d00 <UART_SetConfig+0x954>)
 8106c70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106c72:	e009      	b.n	8106c88 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8106c74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8106c78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106c7a:	e005      	b.n	8106c88 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8106c7c:	2300      	movs	r3, #0
 8106c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8106c80:	2301      	movs	r3, #1
 8106c82:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8106c86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8106c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106c8a:	2b00      	cmp	r3, #0
 8106c8c:	f000 8121 	beq.w	8106ed2 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8106c90:	687b      	ldr	r3, [r7, #4]
 8106c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106c94:	4a17      	ldr	r2, [pc, #92]	; (8106cf4 <UART_SetConfig+0x948>)
 8106c96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8106c9a:	461a      	mov	r2, r3
 8106c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106c9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8106ca2:	005a      	lsls	r2, r3, #1
 8106ca4:	687b      	ldr	r3, [r7, #4]
 8106ca6:	685b      	ldr	r3, [r3, #4]
 8106ca8:	085b      	lsrs	r3, r3, #1
 8106caa:	441a      	add	r2, r3
 8106cac:	687b      	ldr	r3, [r7, #4]
 8106cae:	685b      	ldr	r3, [r3, #4]
 8106cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8106cb4:	b29b      	uxth	r3, r3
 8106cb6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8106cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106cba:	2b0f      	cmp	r3, #15
 8106cbc:	d916      	bls.n	8106cec <UART_SetConfig+0x940>
 8106cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106cc4:	d212      	bcs.n	8106cec <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8106cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106cc8:	b29b      	uxth	r3, r3
 8106cca:	f023 030f 	bic.w	r3, r3, #15
 8106cce:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8106cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106cd2:	085b      	lsrs	r3, r3, #1
 8106cd4:	b29b      	uxth	r3, r3
 8106cd6:	f003 0307 	and.w	r3, r3, #7
 8106cda:	b29a      	uxth	r2, r3
 8106cdc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8106cde:	4313      	orrs	r3, r2
 8106ce0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8106ce2:	687b      	ldr	r3, [r7, #4]
 8106ce4:	681b      	ldr	r3, [r3, #0]
 8106ce6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8106ce8:	60da      	str	r2, [r3, #12]
 8106cea:	e0f2      	b.n	8106ed2 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8106cec:	2301      	movs	r3, #1
 8106cee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8106cf2:	e0ee      	b.n	8106ed2 <UART_SetConfig+0xb26>
 8106cf4:	0810bf10 	.word	0x0810bf10
 8106cf8:	58024400 	.word	0x58024400
 8106cfc:	03d09000 	.word	0x03d09000
 8106d00:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8106d04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8106d08:	2b40      	cmp	r3, #64	; 0x40
 8106d0a:	f200 80b7 	bhi.w	8106e7c <UART_SetConfig+0xad0>
 8106d0e:	a201      	add	r2, pc, #4	; (adr r2, 8106d14 <UART_SetConfig+0x968>)
 8106d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106d14:	08106e19 	.word	0x08106e19
 8106d18:	08106e21 	.word	0x08106e21
 8106d1c:	08106e7d 	.word	0x08106e7d
 8106d20:	08106e7d 	.word	0x08106e7d
 8106d24:	08106e29 	.word	0x08106e29
 8106d28:	08106e7d 	.word	0x08106e7d
 8106d2c:	08106e7d 	.word	0x08106e7d
 8106d30:	08106e7d 	.word	0x08106e7d
 8106d34:	08106e39 	.word	0x08106e39
 8106d38:	08106e7d 	.word	0x08106e7d
 8106d3c:	08106e7d 	.word	0x08106e7d
 8106d40:	08106e7d 	.word	0x08106e7d
 8106d44:	08106e7d 	.word	0x08106e7d
 8106d48:	08106e7d 	.word	0x08106e7d
 8106d4c:	08106e7d 	.word	0x08106e7d
 8106d50:	08106e7d 	.word	0x08106e7d
 8106d54:	08106e49 	.word	0x08106e49
 8106d58:	08106e7d 	.word	0x08106e7d
 8106d5c:	08106e7d 	.word	0x08106e7d
 8106d60:	08106e7d 	.word	0x08106e7d
 8106d64:	08106e7d 	.word	0x08106e7d
 8106d68:	08106e7d 	.word	0x08106e7d
 8106d6c:	08106e7d 	.word	0x08106e7d
 8106d70:	08106e7d 	.word	0x08106e7d
 8106d74:	08106e7d 	.word	0x08106e7d
 8106d78:	08106e7d 	.word	0x08106e7d
 8106d7c:	08106e7d 	.word	0x08106e7d
 8106d80:	08106e7d 	.word	0x08106e7d
 8106d84:	08106e7d 	.word	0x08106e7d
 8106d88:	08106e7d 	.word	0x08106e7d
 8106d8c:	08106e7d 	.word	0x08106e7d
 8106d90:	08106e7d 	.word	0x08106e7d
 8106d94:	08106e6f 	.word	0x08106e6f
 8106d98:	08106e7d 	.word	0x08106e7d
 8106d9c:	08106e7d 	.word	0x08106e7d
 8106da0:	08106e7d 	.word	0x08106e7d
 8106da4:	08106e7d 	.word	0x08106e7d
 8106da8:	08106e7d 	.word	0x08106e7d
 8106dac:	08106e7d 	.word	0x08106e7d
 8106db0:	08106e7d 	.word	0x08106e7d
 8106db4:	08106e7d 	.word	0x08106e7d
 8106db8:	08106e7d 	.word	0x08106e7d
 8106dbc:	08106e7d 	.word	0x08106e7d
 8106dc0:	08106e7d 	.word	0x08106e7d
 8106dc4:	08106e7d 	.word	0x08106e7d
 8106dc8:	08106e7d 	.word	0x08106e7d
 8106dcc:	08106e7d 	.word	0x08106e7d
 8106dd0:	08106e7d 	.word	0x08106e7d
 8106dd4:	08106e7d 	.word	0x08106e7d
 8106dd8:	08106e7d 	.word	0x08106e7d
 8106ddc:	08106e7d 	.word	0x08106e7d
 8106de0:	08106e7d 	.word	0x08106e7d
 8106de4:	08106e7d 	.word	0x08106e7d
 8106de8:	08106e7d 	.word	0x08106e7d
 8106dec:	08106e7d 	.word	0x08106e7d
 8106df0:	08106e7d 	.word	0x08106e7d
 8106df4:	08106e7d 	.word	0x08106e7d
 8106df8:	08106e7d 	.word	0x08106e7d
 8106dfc:	08106e7d 	.word	0x08106e7d
 8106e00:	08106e7d 	.word	0x08106e7d
 8106e04:	08106e7d 	.word	0x08106e7d
 8106e08:	08106e7d 	.word	0x08106e7d
 8106e0c:	08106e7d 	.word	0x08106e7d
 8106e10:	08106e7d 	.word	0x08106e7d
 8106e14:	08106e75 	.word	0x08106e75
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8106e18:	f7fe f8ee 	bl	8104ff8 <HAL_RCC_GetPCLK1Freq>
 8106e1c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8106e1e:	e033      	b.n	8106e88 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8106e20:	f7fe f900 	bl	8105024 <HAL_RCC_GetPCLK2Freq>
 8106e24:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8106e26:	e02f      	b.n	8106e88 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106e28:	f107 0314 	add.w	r3, r7, #20
 8106e2c:	4618      	mov	r0, r3
 8106e2e:	f7fe f967 	bl	8105100 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8106e32:	69bb      	ldr	r3, [r7, #24]
 8106e34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106e36:	e027      	b.n	8106e88 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106e38:	f107 0308 	add.w	r3, r7, #8
 8106e3c:	4618      	mov	r0, r3
 8106e3e:	f7fe faab 	bl	8105398 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8106e42:	68fb      	ldr	r3, [r7, #12]
 8106e44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106e46:	e01f      	b.n	8106e88 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106e48:	4b2c      	ldr	r3, [pc, #176]	; (8106efc <UART_SetConfig+0xb50>)
 8106e4a:	681b      	ldr	r3, [r3, #0]
 8106e4c:	f003 0320 	and.w	r3, r3, #32
 8106e50:	2b00      	cmp	r3, #0
 8106e52:	d009      	beq.n	8106e68 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8106e54:	4b29      	ldr	r3, [pc, #164]	; (8106efc <UART_SetConfig+0xb50>)
 8106e56:	681b      	ldr	r3, [r3, #0]
 8106e58:	08db      	lsrs	r3, r3, #3
 8106e5a:	f003 0303 	and.w	r3, r3, #3
 8106e5e:	4a28      	ldr	r2, [pc, #160]	; (8106f00 <UART_SetConfig+0xb54>)
 8106e60:	fa22 f303 	lsr.w	r3, r2, r3
 8106e64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8106e66:	e00f      	b.n	8106e88 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8106e68:	4b25      	ldr	r3, [pc, #148]	; (8106f00 <UART_SetConfig+0xb54>)
 8106e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106e6c:	e00c      	b.n	8106e88 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8106e6e:	4b25      	ldr	r3, [pc, #148]	; (8106f04 <UART_SetConfig+0xb58>)
 8106e70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106e72:	e009      	b.n	8106e88 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8106e74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8106e78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106e7a:	e005      	b.n	8106e88 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8106e7c:	2300      	movs	r3, #0
 8106e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8106e80:	2301      	movs	r3, #1
 8106e82:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8106e86:	bf00      	nop
    }

    if (pclk != 0U)
 8106e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106e8a:	2b00      	cmp	r3, #0
 8106e8c:	d021      	beq.n	8106ed2 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8106e8e:	687b      	ldr	r3, [r7, #4]
 8106e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106e92:	4a1d      	ldr	r2, [pc, #116]	; (8106f08 <UART_SetConfig+0xb5c>)
 8106e94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8106e98:	461a      	mov	r2, r3
 8106e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106e9c:	fbb3 f2f2 	udiv	r2, r3, r2
 8106ea0:	687b      	ldr	r3, [r7, #4]
 8106ea2:	685b      	ldr	r3, [r3, #4]
 8106ea4:	085b      	lsrs	r3, r3, #1
 8106ea6:	441a      	add	r2, r3
 8106ea8:	687b      	ldr	r3, [r7, #4]
 8106eaa:	685b      	ldr	r3, [r3, #4]
 8106eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8106eb0:	b29b      	uxth	r3, r3
 8106eb2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8106eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106eb6:	2b0f      	cmp	r3, #15
 8106eb8:	d908      	bls.n	8106ecc <UART_SetConfig+0xb20>
 8106eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106ec0:	d204      	bcs.n	8106ecc <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8106ec2:	687b      	ldr	r3, [r7, #4]
 8106ec4:	681b      	ldr	r3, [r3, #0]
 8106ec6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8106ec8:	60da      	str	r2, [r3, #12]
 8106eca:	e002      	b.n	8106ed2 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8106ecc:	2301      	movs	r3, #1
 8106ece:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8106ed2:	687b      	ldr	r3, [r7, #4]
 8106ed4:	2201      	movs	r2, #1
 8106ed6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8106eda:	687b      	ldr	r3, [r7, #4]
 8106edc:	2201      	movs	r2, #1
 8106ede:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8106ee2:	687b      	ldr	r3, [r7, #4]
 8106ee4:	2200      	movs	r2, #0
 8106ee6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8106ee8:	687b      	ldr	r3, [r7, #4]
 8106eea:	2200      	movs	r2, #0
 8106eec:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8106eee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8106ef2:	4618      	mov	r0, r3
 8106ef4:	3738      	adds	r7, #56	; 0x38
 8106ef6:	46bd      	mov	sp, r7
 8106ef8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8106efc:	58024400 	.word	0x58024400
 8106f00:	03d09000 	.word	0x03d09000
 8106f04:	003d0900 	.word	0x003d0900
 8106f08:	0810bf10 	.word	0x0810bf10

08106f0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8106f0c:	b480      	push	{r7}
 8106f0e:	b083      	sub	sp, #12
 8106f10:	af00      	add	r7, sp, #0
 8106f12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8106f14:	687b      	ldr	r3, [r7, #4]
 8106f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106f18:	f003 0301 	and.w	r3, r3, #1
 8106f1c:	2b00      	cmp	r3, #0
 8106f1e:	d00a      	beq.n	8106f36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8106f20:	687b      	ldr	r3, [r7, #4]
 8106f22:	681b      	ldr	r3, [r3, #0]
 8106f24:	685b      	ldr	r3, [r3, #4]
 8106f26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8106f2a:	687b      	ldr	r3, [r7, #4]
 8106f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8106f2e:	687b      	ldr	r3, [r7, #4]
 8106f30:	681b      	ldr	r3, [r3, #0]
 8106f32:	430a      	orrs	r2, r1
 8106f34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8106f36:	687b      	ldr	r3, [r7, #4]
 8106f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106f3a:	f003 0302 	and.w	r3, r3, #2
 8106f3e:	2b00      	cmp	r3, #0
 8106f40:	d00a      	beq.n	8106f58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8106f42:	687b      	ldr	r3, [r7, #4]
 8106f44:	681b      	ldr	r3, [r3, #0]
 8106f46:	685b      	ldr	r3, [r3, #4]
 8106f48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8106f4c:	687b      	ldr	r3, [r7, #4]
 8106f4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8106f50:	687b      	ldr	r3, [r7, #4]
 8106f52:	681b      	ldr	r3, [r3, #0]
 8106f54:	430a      	orrs	r2, r1
 8106f56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8106f58:	687b      	ldr	r3, [r7, #4]
 8106f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106f5c:	f003 0304 	and.w	r3, r3, #4
 8106f60:	2b00      	cmp	r3, #0
 8106f62:	d00a      	beq.n	8106f7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8106f64:	687b      	ldr	r3, [r7, #4]
 8106f66:	681b      	ldr	r3, [r3, #0]
 8106f68:	685b      	ldr	r3, [r3, #4]
 8106f6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8106f6e:	687b      	ldr	r3, [r7, #4]
 8106f70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8106f72:	687b      	ldr	r3, [r7, #4]
 8106f74:	681b      	ldr	r3, [r3, #0]
 8106f76:	430a      	orrs	r2, r1
 8106f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8106f7a:	687b      	ldr	r3, [r7, #4]
 8106f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106f7e:	f003 0308 	and.w	r3, r3, #8
 8106f82:	2b00      	cmp	r3, #0
 8106f84:	d00a      	beq.n	8106f9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8106f86:	687b      	ldr	r3, [r7, #4]
 8106f88:	681b      	ldr	r3, [r3, #0]
 8106f8a:	685b      	ldr	r3, [r3, #4]
 8106f8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8106f90:	687b      	ldr	r3, [r7, #4]
 8106f92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8106f94:	687b      	ldr	r3, [r7, #4]
 8106f96:	681b      	ldr	r3, [r3, #0]
 8106f98:	430a      	orrs	r2, r1
 8106f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8106f9c:	687b      	ldr	r3, [r7, #4]
 8106f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106fa0:	f003 0310 	and.w	r3, r3, #16
 8106fa4:	2b00      	cmp	r3, #0
 8106fa6:	d00a      	beq.n	8106fbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8106fa8:	687b      	ldr	r3, [r7, #4]
 8106faa:	681b      	ldr	r3, [r3, #0]
 8106fac:	689b      	ldr	r3, [r3, #8]
 8106fae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8106fb2:	687b      	ldr	r3, [r7, #4]
 8106fb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8106fb6:	687b      	ldr	r3, [r7, #4]
 8106fb8:	681b      	ldr	r3, [r3, #0]
 8106fba:	430a      	orrs	r2, r1
 8106fbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8106fbe:	687b      	ldr	r3, [r7, #4]
 8106fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106fc2:	f003 0320 	and.w	r3, r3, #32
 8106fc6:	2b00      	cmp	r3, #0
 8106fc8:	d00a      	beq.n	8106fe0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8106fca:	687b      	ldr	r3, [r7, #4]
 8106fcc:	681b      	ldr	r3, [r3, #0]
 8106fce:	689b      	ldr	r3, [r3, #8]
 8106fd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8106fd4:	687b      	ldr	r3, [r7, #4]
 8106fd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8106fd8:	687b      	ldr	r3, [r7, #4]
 8106fda:	681b      	ldr	r3, [r3, #0]
 8106fdc:	430a      	orrs	r2, r1
 8106fde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8106fe0:	687b      	ldr	r3, [r7, #4]
 8106fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106fe8:	2b00      	cmp	r3, #0
 8106fea:	d01a      	beq.n	8107022 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8106fec:	687b      	ldr	r3, [r7, #4]
 8106fee:	681b      	ldr	r3, [r3, #0]
 8106ff0:	685b      	ldr	r3, [r3, #4]
 8106ff2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8106ff6:	687b      	ldr	r3, [r7, #4]
 8106ff8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8106ffa:	687b      	ldr	r3, [r7, #4]
 8106ffc:	681b      	ldr	r3, [r3, #0]
 8106ffe:	430a      	orrs	r2, r1
 8107000:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8107002:	687b      	ldr	r3, [r7, #4]
 8107004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107006:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810700a:	d10a      	bne.n	8107022 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810700c:	687b      	ldr	r3, [r7, #4]
 810700e:	681b      	ldr	r3, [r3, #0]
 8107010:	685b      	ldr	r3, [r3, #4]
 8107012:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8107016:	687b      	ldr	r3, [r7, #4]
 8107018:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810701a:	687b      	ldr	r3, [r7, #4]
 810701c:	681b      	ldr	r3, [r3, #0]
 810701e:	430a      	orrs	r2, r1
 8107020:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8107022:	687b      	ldr	r3, [r7, #4]
 8107024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810702a:	2b00      	cmp	r3, #0
 810702c:	d00a      	beq.n	8107044 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810702e:	687b      	ldr	r3, [r7, #4]
 8107030:	681b      	ldr	r3, [r3, #0]
 8107032:	685b      	ldr	r3, [r3, #4]
 8107034:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8107038:	687b      	ldr	r3, [r7, #4]
 810703a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810703c:	687b      	ldr	r3, [r7, #4]
 810703e:	681b      	ldr	r3, [r3, #0]
 8107040:	430a      	orrs	r2, r1
 8107042:	605a      	str	r2, [r3, #4]
  }
}
 8107044:	bf00      	nop
 8107046:	370c      	adds	r7, #12
 8107048:	46bd      	mov	sp, r7
 810704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810704e:	4770      	bx	lr

08107050 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8107050:	b580      	push	{r7, lr}
 8107052:	b086      	sub	sp, #24
 8107054:	af02      	add	r7, sp, #8
 8107056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107058:	687b      	ldr	r3, [r7, #4]
 810705a:	2200      	movs	r2, #0
 810705c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8107060:	f7fa feca 	bl	8101df8 <HAL_GetTick>
 8107064:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8107066:	687b      	ldr	r3, [r7, #4]
 8107068:	681b      	ldr	r3, [r3, #0]
 810706a:	681b      	ldr	r3, [r3, #0]
 810706c:	f003 0308 	and.w	r3, r3, #8
 8107070:	2b08      	cmp	r3, #8
 8107072:	d10e      	bne.n	8107092 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8107074:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8107078:	9300      	str	r3, [sp, #0]
 810707a:	68fb      	ldr	r3, [r7, #12]
 810707c:	2200      	movs	r2, #0
 810707e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8107082:	6878      	ldr	r0, [r7, #4]
 8107084:	f000 f82c 	bl	81070e0 <UART_WaitOnFlagUntilTimeout>
 8107088:	4603      	mov	r3, r0
 810708a:	2b00      	cmp	r3, #0
 810708c:	d001      	beq.n	8107092 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810708e:	2303      	movs	r3, #3
 8107090:	e022      	b.n	81070d8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8107092:	687b      	ldr	r3, [r7, #4]
 8107094:	681b      	ldr	r3, [r3, #0]
 8107096:	681b      	ldr	r3, [r3, #0]
 8107098:	f003 0304 	and.w	r3, r3, #4
 810709c:	2b04      	cmp	r3, #4
 810709e:	d10e      	bne.n	81070be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81070a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 81070a4:	9300      	str	r3, [sp, #0]
 81070a6:	68fb      	ldr	r3, [r7, #12]
 81070a8:	2200      	movs	r2, #0
 81070aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 81070ae:	6878      	ldr	r0, [r7, #4]
 81070b0:	f000 f816 	bl	81070e0 <UART_WaitOnFlagUntilTimeout>
 81070b4:	4603      	mov	r3, r0
 81070b6:	2b00      	cmp	r3, #0
 81070b8:	d001      	beq.n	81070be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 81070ba:	2303      	movs	r3, #3
 81070bc:	e00c      	b.n	81070d8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 81070be:	687b      	ldr	r3, [r7, #4]
 81070c0:	2220      	movs	r2, #32
 81070c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 81070c6:	687b      	ldr	r3, [r7, #4]
 81070c8:	2220      	movs	r2, #32
 81070ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 81070ce:	687b      	ldr	r3, [r7, #4]
 81070d0:	2200      	movs	r2, #0
 81070d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 81070d6:	2300      	movs	r3, #0
}
 81070d8:	4618      	mov	r0, r3
 81070da:	3710      	adds	r7, #16
 81070dc:	46bd      	mov	sp, r7
 81070de:	bd80      	pop	{r7, pc}

081070e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 81070e0:	b580      	push	{r7, lr}
 81070e2:	b084      	sub	sp, #16
 81070e4:	af00      	add	r7, sp, #0
 81070e6:	60f8      	str	r0, [r7, #12]
 81070e8:	60b9      	str	r1, [r7, #8]
 81070ea:	603b      	str	r3, [r7, #0]
 81070ec:	4613      	mov	r3, r2
 81070ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81070f0:	e062      	b.n	81071b8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81070f2:	69bb      	ldr	r3, [r7, #24]
 81070f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81070f8:	d05e      	beq.n	81071b8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81070fa:	f7fa fe7d 	bl	8101df8 <HAL_GetTick>
 81070fe:	4602      	mov	r2, r0
 8107100:	683b      	ldr	r3, [r7, #0]
 8107102:	1ad3      	subs	r3, r2, r3
 8107104:	69ba      	ldr	r2, [r7, #24]
 8107106:	429a      	cmp	r2, r3
 8107108:	d302      	bcc.n	8107110 <UART_WaitOnFlagUntilTimeout+0x30>
 810710a:	69bb      	ldr	r3, [r7, #24]
 810710c:	2b00      	cmp	r3, #0
 810710e:	d11d      	bne.n	810714c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8107110:	68fb      	ldr	r3, [r7, #12]
 8107112:	681b      	ldr	r3, [r3, #0]
 8107114:	681a      	ldr	r2, [r3, #0]
 8107116:	68fb      	ldr	r3, [r7, #12]
 8107118:	681b      	ldr	r3, [r3, #0]
 810711a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 810711e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8107120:	68fb      	ldr	r3, [r7, #12]
 8107122:	681b      	ldr	r3, [r3, #0]
 8107124:	689a      	ldr	r2, [r3, #8]
 8107126:	68fb      	ldr	r3, [r7, #12]
 8107128:	681b      	ldr	r3, [r3, #0]
 810712a:	f022 0201 	bic.w	r2, r2, #1
 810712e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8107130:	68fb      	ldr	r3, [r7, #12]
 8107132:	2220      	movs	r2, #32
 8107134:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8107138:	68fb      	ldr	r3, [r7, #12]
 810713a:	2220      	movs	r2, #32
 810713c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8107140:	68fb      	ldr	r3, [r7, #12]
 8107142:	2200      	movs	r2, #0
 8107144:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8107148:	2303      	movs	r3, #3
 810714a:	e045      	b.n	81071d8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 810714c:	68fb      	ldr	r3, [r7, #12]
 810714e:	681b      	ldr	r3, [r3, #0]
 8107150:	681b      	ldr	r3, [r3, #0]
 8107152:	f003 0304 	and.w	r3, r3, #4
 8107156:	2b00      	cmp	r3, #0
 8107158:	d02e      	beq.n	81071b8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810715a:	68fb      	ldr	r3, [r7, #12]
 810715c:	681b      	ldr	r3, [r3, #0]
 810715e:	69db      	ldr	r3, [r3, #28]
 8107160:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8107164:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8107168:	d126      	bne.n	81071b8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810716a:	68fb      	ldr	r3, [r7, #12]
 810716c:	681b      	ldr	r3, [r3, #0]
 810716e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8107172:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8107174:	68fb      	ldr	r3, [r7, #12]
 8107176:	681b      	ldr	r3, [r3, #0]
 8107178:	681a      	ldr	r2, [r3, #0]
 810717a:	68fb      	ldr	r3, [r7, #12]
 810717c:	681b      	ldr	r3, [r3, #0]
 810717e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8107182:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8107184:	68fb      	ldr	r3, [r7, #12]
 8107186:	681b      	ldr	r3, [r3, #0]
 8107188:	689a      	ldr	r2, [r3, #8]
 810718a:	68fb      	ldr	r3, [r7, #12]
 810718c:	681b      	ldr	r3, [r3, #0]
 810718e:	f022 0201 	bic.w	r2, r2, #1
 8107192:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8107194:	68fb      	ldr	r3, [r7, #12]
 8107196:	2220      	movs	r2, #32
 8107198:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 810719c:	68fb      	ldr	r3, [r7, #12]
 810719e:	2220      	movs	r2, #32
 81071a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 81071a4:	68fb      	ldr	r3, [r7, #12]
 81071a6:	2220      	movs	r2, #32
 81071a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 81071ac:	68fb      	ldr	r3, [r7, #12]
 81071ae:	2200      	movs	r2, #0
 81071b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 81071b4:	2303      	movs	r3, #3
 81071b6:	e00f      	b.n	81071d8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81071b8:	68fb      	ldr	r3, [r7, #12]
 81071ba:	681b      	ldr	r3, [r3, #0]
 81071bc:	69da      	ldr	r2, [r3, #28]
 81071be:	68bb      	ldr	r3, [r7, #8]
 81071c0:	4013      	ands	r3, r2
 81071c2:	68ba      	ldr	r2, [r7, #8]
 81071c4:	429a      	cmp	r2, r3
 81071c6:	bf0c      	ite	eq
 81071c8:	2301      	moveq	r3, #1
 81071ca:	2300      	movne	r3, #0
 81071cc:	b2db      	uxtb	r3, r3
 81071ce:	461a      	mov	r2, r3
 81071d0:	79fb      	ldrb	r3, [r7, #7]
 81071d2:	429a      	cmp	r2, r3
 81071d4:	d08d      	beq.n	81070f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 81071d6:	2300      	movs	r3, #0
}
 81071d8:	4618      	mov	r0, r3
 81071da:	3710      	adds	r7, #16
 81071dc:	46bd      	mov	sp, r7
 81071de:	bd80      	pop	{r7, pc}

081071e0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 81071e0:	b480      	push	{r7}
 81071e2:	b085      	sub	sp, #20
 81071e4:	af00      	add	r7, sp, #0
 81071e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 81071e8:	687b      	ldr	r3, [r7, #4]
 81071ea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 81071ee:	2b01      	cmp	r3, #1
 81071f0:	d101      	bne.n	81071f6 <HAL_UARTEx_DisableFifoMode+0x16>
 81071f2:	2302      	movs	r3, #2
 81071f4:	e027      	b.n	8107246 <HAL_UARTEx_DisableFifoMode+0x66>
 81071f6:	687b      	ldr	r3, [r7, #4]
 81071f8:	2201      	movs	r2, #1
 81071fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 81071fe:	687b      	ldr	r3, [r7, #4]
 8107200:	2224      	movs	r2, #36	; 0x24
 8107202:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8107206:	687b      	ldr	r3, [r7, #4]
 8107208:	681b      	ldr	r3, [r3, #0]
 810720a:	681b      	ldr	r3, [r3, #0]
 810720c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810720e:	687b      	ldr	r3, [r7, #4]
 8107210:	681b      	ldr	r3, [r3, #0]
 8107212:	681a      	ldr	r2, [r3, #0]
 8107214:	687b      	ldr	r3, [r7, #4]
 8107216:	681b      	ldr	r3, [r3, #0]
 8107218:	f022 0201 	bic.w	r2, r2, #1
 810721c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810721e:	68fb      	ldr	r3, [r7, #12]
 8107220:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8107224:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8107226:	687b      	ldr	r3, [r7, #4]
 8107228:	2200      	movs	r2, #0
 810722a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810722c:	687b      	ldr	r3, [r7, #4]
 810722e:	681b      	ldr	r3, [r3, #0]
 8107230:	68fa      	ldr	r2, [r7, #12]
 8107232:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8107234:	687b      	ldr	r3, [r7, #4]
 8107236:	2220      	movs	r2, #32
 8107238:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810723c:	687b      	ldr	r3, [r7, #4]
 810723e:	2200      	movs	r2, #0
 8107240:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8107244:	2300      	movs	r3, #0
}
 8107246:	4618      	mov	r0, r3
 8107248:	3714      	adds	r7, #20
 810724a:	46bd      	mov	sp, r7
 810724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107250:	4770      	bx	lr

08107252 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8107252:	b580      	push	{r7, lr}
 8107254:	b084      	sub	sp, #16
 8107256:	af00      	add	r7, sp, #0
 8107258:	6078      	str	r0, [r7, #4]
 810725a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810725c:	687b      	ldr	r3, [r7, #4]
 810725e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8107262:	2b01      	cmp	r3, #1
 8107264:	d101      	bne.n	810726a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8107266:	2302      	movs	r3, #2
 8107268:	e02d      	b.n	81072c6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810726a:	687b      	ldr	r3, [r7, #4]
 810726c:	2201      	movs	r2, #1
 810726e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8107272:	687b      	ldr	r3, [r7, #4]
 8107274:	2224      	movs	r2, #36	; 0x24
 8107276:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810727a:	687b      	ldr	r3, [r7, #4]
 810727c:	681b      	ldr	r3, [r3, #0]
 810727e:	681b      	ldr	r3, [r3, #0]
 8107280:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8107282:	687b      	ldr	r3, [r7, #4]
 8107284:	681b      	ldr	r3, [r3, #0]
 8107286:	681a      	ldr	r2, [r3, #0]
 8107288:	687b      	ldr	r3, [r7, #4]
 810728a:	681b      	ldr	r3, [r3, #0]
 810728c:	f022 0201 	bic.w	r2, r2, #1
 8107290:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8107292:	687b      	ldr	r3, [r7, #4]
 8107294:	681b      	ldr	r3, [r3, #0]
 8107296:	689b      	ldr	r3, [r3, #8]
 8107298:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810729c:	687b      	ldr	r3, [r7, #4]
 810729e:	681b      	ldr	r3, [r3, #0]
 81072a0:	683a      	ldr	r2, [r7, #0]
 81072a2:	430a      	orrs	r2, r1
 81072a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81072a6:	6878      	ldr	r0, [r7, #4]
 81072a8:	f000 f850 	bl	810734c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81072ac:	687b      	ldr	r3, [r7, #4]
 81072ae:	681b      	ldr	r3, [r3, #0]
 81072b0:	68fa      	ldr	r2, [r7, #12]
 81072b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81072b4:	687b      	ldr	r3, [r7, #4]
 81072b6:	2220      	movs	r2, #32
 81072b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81072bc:	687b      	ldr	r3, [r7, #4]
 81072be:	2200      	movs	r2, #0
 81072c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 81072c4:	2300      	movs	r3, #0
}
 81072c6:	4618      	mov	r0, r3
 81072c8:	3710      	adds	r7, #16
 81072ca:	46bd      	mov	sp, r7
 81072cc:	bd80      	pop	{r7, pc}

081072ce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 81072ce:	b580      	push	{r7, lr}
 81072d0:	b084      	sub	sp, #16
 81072d2:	af00      	add	r7, sp, #0
 81072d4:	6078      	str	r0, [r7, #4]
 81072d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 81072d8:	687b      	ldr	r3, [r7, #4]
 81072da:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 81072de:	2b01      	cmp	r3, #1
 81072e0:	d101      	bne.n	81072e6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 81072e2:	2302      	movs	r3, #2
 81072e4:	e02d      	b.n	8107342 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 81072e6:	687b      	ldr	r3, [r7, #4]
 81072e8:	2201      	movs	r2, #1
 81072ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 81072ee:	687b      	ldr	r3, [r7, #4]
 81072f0:	2224      	movs	r2, #36	; 0x24
 81072f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81072f6:	687b      	ldr	r3, [r7, #4]
 81072f8:	681b      	ldr	r3, [r3, #0]
 81072fa:	681b      	ldr	r3, [r3, #0]
 81072fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81072fe:	687b      	ldr	r3, [r7, #4]
 8107300:	681b      	ldr	r3, [r3, #0]
 8107302:	681a      	ldr	r2, [r3, #0]
 8107304:	687b      	ldr	r3, [r7, #4]
 8107306:	681b      	ldr	r3, [r3, #0]
 8107308:	f022 0201 	bic.w	r2, r2, #1
 810730c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810730e:	687b      	ldr	r3, [r7, #4]
 8107310:	681b      	ldr	r3, [r3, #0]
 8107312:	689b      	ldr	r3, [r3, #8]
 8107314:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8107318:	687b      	ldr	r3, [r7, #4]
 810731a:	681b      	ldr	r3, [r3, #0]
 810731c:	683a      	ldr	r2, [r7, #0]
 810731e:	430a      	orrs	r2, r1
 8107320:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8107322:	6878      	ldr	r0, [r7, #4]
 8107324:	f000 f812 	bl	810734c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8107328:	687b      	ldr	r3, [r7, #4]
 810732a:	681b      	ldr	r3, [r3, #0]
 810732c:	68fa      	ldr	r2, [r7, #12]
 810732e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8107330:	687b      	ldr	r3, [r7, #4]
 8107332:	2220      	movs	r2, #32
 8107334:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8107338:	687b      	ldr	r3, [r7, #4]
 810733a:	2200      	movs	r2, #0
 810733c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8107340:	2300      	movs	r3, #0
}
 8107342:	4618      	mov	r0, r3
 8107344:	3710      	adds	r7, #16
 8107346:	46bd      	mov	sp, r7
 8107348:	bd80      	pop	{r7, pc}
	...

0810734c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810734c:	b480      	push	{r7}
 810734e:	b089      	sub	sp, #36	; 0x24
 8107350:	af00      	add	r7, sp, #0
 8107352:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8107354:	4a2f      	ldr	r2, [pc, #188]	; (8107414 <UARTEx_SetNbDataToProcess+0xc8>)
 8107356:	f107 0314 	add.w	r3, r7, #20
 810735a:	e892 0003 	ldmia.w	r2, {r0, r1}
 810735e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8107362:	4a2d      	ldr	r2, [pc, #180]	; (8107418 <UARTEx_SetNbDataToProcess+0xcc>)
 8107364:	f107 030c 	add.w	r3, r7, #12
 8107368:	e892 0003 	ldmia.w	r2, {r0, r1}
 810736c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8107370:	687b      	ldr	r3, [r7, #4]
 8107372:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107374:	2b00      	cmp	r3, #0
 8107376:	d108      	bne.n	810738a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8107378:	687b      	ldr	r3, [r7, #4]
 810737a:	2201      	movs	r2, #1
 810737c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8107380:	687b      	ldr	r3, [r7, #4]
 8107382:	2201      	movs	r2, #1
 8107384:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8107388:	e03d      	b.n	8107406 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810738a:	2310      	movs	r3, #16
 810738c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810738e:	2310      	movs	r3, #16
 8107390:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8107392:	687b      	ldr	r3, [r7, #4]
 8107394:	681b      	ldr	r3, [r3, #0]
 8107396:	689b      	ldr	r3, [r3, #8]
 8107398:	0e5b      	lsrs	r3, r3, #25
 810739a:	b2db      	uxtb	r3, r3
 810739c:	f003 0307 	and.w	r3, r3, #7
 81073a0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 81073a2:	687b      	ldr	r3, [r7, #4]
 81073a4:	681b      	ldr	r3, [r3, #0]
 81073a6:	689b      	ldr	r3, [r3, #8]
 81073a8:	0f5b      	lsrs	r3, r3, #29
 81073aa:	b2db      	uxtb	r3, r3
 81073ac:	f003 0307 	and.w	r3, r3, #7
 81073b0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 81073b2:	7fbb      	ldrb	r3, [r7, #30]
 81073b4:	7f3a      	ldrb	r2, [r7, #28]
 81073b6:	f107 0120 	add.w	r1, r7, #32
 81073ba:	440a      	add	r2, r1
 81073bc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 81073c0:	fb02 f303 	mul.w	r3, r2, r3
 81073c4:	7f3a      	ldrb	r2, [r7, #28]
 81073c6:	f107 0120 	add.w	r1, r7, #32
 81073ca:	440a      	add	r2, r1
 81073cc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 81073d0:	fb93 f3f2 	sdiv	r3, r3, r2
 81073d4:	b29a      	uxth	r2, r3
 81073d6:	687b      	ldr	r3, [r7, #4]
 81073d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 81073dc:	7ffb      	ldrb	r3, [r7, #31]
 81073de:	7f7a      	ldrb	r2, [r7, #29]
 81073e0:	f107 0120 	add.w	r1, r7, #32
 81073e4:	440a      	add	r2, r1
 81073e6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 81073ea:	fb02 f303 	mul.w	r3, r2, r3
 81073ee:	7f7a      	ldrb	r2, [r7, #29]
 81073f0:	f107 0120 	add.w	r1, r7, #32
 81073f4:	440a      	add	r2, r1
 81073f6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 81073fa:	fb93 f3f2 	sdiv	r3, r3, r2
 81073fe:	b29a      	uxth	r2, r3
 8107400:	687b      	ldr	r3, [r7, #4]
 8107402:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8107406:	bf00      	nop
 8107408:	3724      	adds	r7, #36	; 0x24
 810740a:	46bd      	mov	sp, r7
 810740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107410:	4770      	bx	lr
 8107412:	bf00      	nop
 8107414:	0810bec4 	.word	0x0810bec4
 8107418:	0810becc 	.word	0x0810becc

0810741c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 810741c:	b580      	push	{r7, lr}
 810741e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8107420:	4904      	ldr	r1, [pc, #16]	; (8107434 <MX_FATFS_Init+0x18>)
 8107422:	4805      	ldr	r0, [pc, #20]	; (8107438 <MX_FATFS_Init+0x1c>)
 8107424:	f000 f8b0 	bl	8107588 <FATFS_LinkDriver>
 8107428:	4603      	mov	r3, r0
 810742a:	461a      	mov	r2, r3
 810742c:	4b03      	ldr	r3, [pc, #12]	; (810743c <MX_FATFS_Init+0x20>)
 810742e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8107430:	bf00      	nop
 8107432:	bd80      	pop	{r7, pc}
 8107434:	10005110 	.word	0x10005110
 8107438:	10000010 	.word	0x10000010
 810743c:	10005114 	.word	0x10005114

08107440 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8107440:	b480      	push	{r7}
 8107442:	b083      	sub	sp, #12
 8107444:	af00      	add	r7, sp, #0
 8107446:	4603      	mov	r3, r0
 8107448:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 810744a:	4b06      	ldr	r3, [pc, #24]	; (8107464 <USER_initialize+0x24>)
 810744c:	2201      	movs	r2, #1
 810744e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8107450:	4b04      	ldr	r3, [pc, #16]	; (8107464 <USER_initialize+0x24>)
 8107452:	781b      	ldrb	r3, [r3, #0]
 8107454:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8107456:	4618      	mov	r0, r3
 8107458:	370c      	adds	r7, #12
 810745a:	46bd      	mov	sp, r7
 810745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107460:	4770      	bx	lr
 8107462:	bf00      	nop
 8107464:	1000000d 	.word	0x1000000d

08107468 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8107468:	b480      	push	{r7}
 810746a:	b083      	sub	sp, #12
 810746c:	af00      	add	r7, sp, #0
 810746e:	4603      	mov	r3, r0
 8107470:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8107472:	4b06      	ldr	r3, [pc, #24]	; (810748c <USER_status+0x24>)
 8107474:	2201      	movs	r2, #1
 8107476:	701a      	strb	r2, [r3, #0]
    return Stat;
 8107478:	4b04      	ldr	r3, [pc, #16]	; (810748c <USER_status+0x24>)
 810747a:	781b      	ldrb	r3, [r3, #0]
 810747c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 810747e:	4618      	mov	r0, r3
 8107480:	370c      	adds	r7, #12
 8107482:	46bd      	mov	sp, r7
 8107484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107488:	4770      	bx	lr
 810748a:	bf00      	nop
 810748c:	1000000d 	.word	0x1000000d

08107490 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8107490:	b480      	push	{r7}
 8107492:	b085      	sub	sp, #20
 8107494:	af00      	add	r7, sp, #0
 8107496:	60b9      	str	r1, [r7, #8]
 8107498:	607a      	str	r2, [r7, #4]
 810749a:	603b      	str	r3, [r7, #0]
 810749c:	4603      	mov	r3, r0
 810749e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 81074a0:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 81074a2:	4618      	mov	r0, r3
 81074a4:	3714      	adds	r7, #20
 81074a6:	46bd      	mov	sp, r7
 81074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81074ac:	4770      	bx	lr

081074ae <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 81074ae:	b480      	push	{r7}
 81074b0:	b085      	sub	sp, #20
 81074b2:	af00      	add	r7, sp, #0
 81074b4:	60b9      	str	r1, [r7, #8]
 81074b6:	607a      	str	r2, [r7, #4]
 81074b8:	603b      	str	r3, [r7, #0]
 81074ba:	4603      	mov	r3, r0
 81074bc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 81074be:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 81074c0:	4618      	mov	r0, r3
 81074c2:	3714      	adds	r7, #20
 81074c4:	46bd      	mov	sp, r7
 81074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81074ca:	4770      	bx	lr

081074cc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 81074cc:	b480      	push	{r7}
 81074ce:	b085      	sub	sp, #20
 81074d0:	af00      	add	r7, sp, #0
 81074d2:	4603      	mov	r3, r0
 81074d4:	603a      	str	r2, [r7, #0]
 81074d6:	71fb      	strb	r3, [r7, #7]
 81074d8:	460b      	mov	r3, r1
 81074da:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 81074dc:	2301      	movs	r3, #1
 81074de:	73fb      	strb	r3, [r7, #15]
    return res;
 81074e0:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 81074e2:	4618      	mov	r0, r3
 81074e4:	3714      	adds	r7, #20
 81074e6:	46bd      	mov	sp, r7
 81074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81074ec:	4770      	bx	lr
	...

081074f0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 81074f0:	b480      	push	{r7}
 81074f2:	b087      	sub	sp, #28
 81074f4:	af00      	add	r7, sp, #0
 81074f6:	60f8      	str	r0, [r7, #12]
 81074f8:	60b9      	str	r1, [r7, #8]
 81074fa:	4613      	mov	r3, r2
 81074fc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 81074fe:	2301      	movs	r3, #1
 8107500:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8107502:	2300      	movs	r3, #0
 8107504:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8107506:	4b1f      	ldr	r3, [pc, #124]	; (8107584 <FATFS_LinkDriverEx+0x94>)
 8107508:	7a5b      	ldrb	r3, [r3, #9]
 810750a:	b2db      	uxtb	r3, r3
 810750c:	2b00      	cmp	r3, #0
 810750e:	d131      	bne.n	8107574 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8107510:	4b1c      	ldr	r3, [pc, #112]	; (8107584 <FATFS_LinkDriverEx+0x94>)
 8107512:	7a5b      	ldrb	r3, [r3, #9]
 8107514:	b2db      	uxtb	r3, r3
 8107516:	461a      	mov	r2, r3
 8107518:	4b1a      	ldr	r3, [pc, #104]	; (8107584 <FATFS_LinkDriverEx+0x94>)
 810751a:	2100      	movs	r1, #0
 810751c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 810751e:	4b19      	ldr	r3, [pc, #100]	; (8107584 <FATFS_LinkDriverEx+0x94>)
 8107520:	7a5b      	ldrb	r3, [r3, #9]
 8107522:	b2db      	uxtb	r3, r3
 8107524:	4a17      	ldr	r2, [pc, #92]	; (8107584 <FATFS_LinkDriverEx+0x94>)
 8107526:	009b      	lsls	r3, r3, #2
 8107528:	4413      	add	r3, r2
 810752a:	68fa      	ldr	r2, [r7, #12]
 810752c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 810752e:	4b15      	ldr	r3, [pc, #84]	; (8107584 <FATFS_LinkDriverEx+0x94>)
 8107530:	7a5b      	ldrb	r3, [r3, #9]
 8107532:	b2db      	uxtb	r3, r3
 8107534:	461a      	mov	r2, r3
 8107536:	4b13      	ldr	r3, [pc, #76]	; (8107584 <FATFS_LinkDriverEx+0x94>)
 8107538:	4413      	add	r3, r2
 810753a:	79fa      	ldrb	r2, [r7, #7]
 810753c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 810753e:	4b11      	ldr	r3, [pc, #68]	; (8107584 <FATFS_LinkDriverEx+0x94>)
 8107540:	7a5b      	ldrb	r3, [r3, #9]
 8107542:	b2db      	uxtb	r3, r3
 8107544:	1c5a      	adds	r2, r3, #1
 8107546:	b2d1      	uxtb	r1, r2
 8107548:	4a0e      	ldr	r2, [pc, #56]	; (8107584 <FATFS_LinkDriverEx+0x94>)
 810754a:	7251      	strb	r1, [r2, #9]
 810754c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 810754e:	7dbb      	ldrb	r3, [r7, #22]
 8107550:	3330      	adds	r3, #48	; 0x30
 8107552:	b2da      	uxtb	r2, r3
 8107554:	68bb      	ldr	r3, [r7, #8]
 8107556:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8107558:	68bb      	ldr	r3, [r7, #8]
 810755a:	3301      	adds	r3, #1
 810755c:	223a      	movs	r2, #58	; 0x3a
 810755e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8107560:	68bb      	ldr	r3, [r7, #8]
 8107562:	3302      	adds	r3, #2
 8107564:	222f      	movs	r2, #47	; 0x2f
 8107566:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8107568:	68bb      	ldr	r3, [r7, #8]
 810756a:	3303      	adds	r3, #3
 810756c:	2200      	movs	r2, #0
 810756e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8107570:	2300      	movs	r3, #0
 8107572:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8107574:	7dfb      	ldrb	r3, [r7, #23]
}
 8107576:	4618      	mov	r0, r3
 8107578:	371c      	adds	r7, #28
 810757a:	46bd      	mov	sp, r7
 810757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107580:	4770      	bx	lr
 8107582:	bf00      	nop
 8107584:	1000021c 	.word	0x1000021c

08107588 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8107588:	b580      	push	{r7, lr}
 810758a:	b082      	sub	sp, #8
 810758c:	af00      	add	r7, sp, #0
 810758e:	6078      	str	r0, [r7, #4]
 8107590:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8107592:	2200      	movs	r2, #0
 8107594:	6839      	ldr	r1, [r7, #0]
 8107596:	6878      	ldr	r0, [r7, #4]
 8107598:	f7ff ffaa 	bl	81074f0 <FATFS_LinkDriverEx>
 810759c:	4603      	mov	r3, r0
}
 810759e:	4618      	mov	r0, r3
 81075a0:	3708      	adds	r7, #8
 81075a2:	46bd      	mov	sp, r7
 81075a4:	bd80      	pop	{r7, pc}

081075a6 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 81075a6:	b480      	push	{r7}
 81075a8:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 81075aa:	bf00      	nop
 81075ac:	46bd      	mov	sp, r7
 81075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81075b2:	4770      	bx	lr

081075b4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 81075b4:	b480      	push	{r7}
 81075b6:	b085      	sub	sp, #20
 81075b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81075ba:	f3ef 8305 	mrs	r3, IPSR
 81075be:	60bb      	str	r3, [r7, #8]
  return(result);
 81075c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 81075c2:	2b00      	cmp	r3, #0
 81075c4:	d10f      	bne.n	81075e6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 81075c6:	f3ef 8310 	mrs	r3, PRIMASK
 81075ca:	607b      	str	r3, [r7, #4]
  return(result);
 81075cc:	687b      	ldr	r3, [r7, #4]
 81075ce:	2b00      	cmp	r3, #0
 81075d0:	d105      	bne.n	81075de <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 81075d2:	f3ef 8311 	mrs	r3, BASEPRI
 81075d6:	603b      	str	r3, [r7, #0]
  return(result);
 81075d8:	683b      	ldr	r3, [r7, #0]
 81075da:	2b00      	cmp	r3, #0
 81075dc:	d007      	beq.n	81075ee <osKernelInitialize+0x3a>
 81075de:	4b0e      	ldr	r3, [pc, #56]	; (8107618 <osKernelInitialize+0x64>)
 81075e0:	681b      	ldr	r3, [r3, #0]
 81075e2:	2b02      	cmp	r3, #2
 81075e4:	d103      	bne.n	81075ee <osKernelInitialize+0x3a>
    stat = osErrorISR;
 81075e6:	f06f 0305 	mvn.w	r3, #5
 81075ea:	60fb      	str	r3, [r7, #12]
 81075ec:	e00c      	b.n	8107608 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 81075ee:	4b0a      	ldr	r3, [pc, #40]	; (8107618 <osKernelInitialize+0x64>)
 81075f0:	681b      	ldr	r3, [r3, #0]
 81075f2:	2b00      	cmp	r3, #0
 81075f4:	d105      	bne.n	8107602 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 81075f6:	4b08      	ldr	r3, [pc, #32]	; (8107618 <osKernelInitialize+0x64>)
 81075f8:	2201      	movs	r2, #1
 81075fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 81075fc:	2300      	movs	r3, #0
 81075fe:	60fb      	str	r3, [r7, #12]
 8107600:	e002      	b.n	8107608 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8107602:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8107606:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8107608:	68fb      	ldr	r3, [r7, #12]
}
 810760a:	4618      	mov	r0, r3
 810760c:	3714      	adds	r7, #20
 810760e:	46bd      	mov	sp, r7
 8107610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107614:	4770      	bx	lr
 8107616:	bf00      	nop
 8107618:	10000228 	.word	0x10000228

0810761c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 810761c:	b580      	push	{r7, lr}
 810761e:	b084      	sub	sp, #16
 8107620:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8107622:	f3ef 8305 	mrs	r3, IPSR
 8107626:	60bb      	str	r3, [r7, #8]
  return(result);
 8107628:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 810762a:	2b00      	cmp	r3, #0
 810762c:	d10f      	bne.n	810764e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 810762e:	f3ef 8310 	mrs	r3, PRIMASK
 8107632:	607b      	str	r3, [r7, #4]
  return(result);
 8107634:	687b      	ldr	r3, [r7, #4]
 8107636:	2b00      	cmp	r3, #0
 8107638:	d105      	bne.n	8107646 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 810763a:	f3ef 8311 	mrs	r3, BASEPRI
 810763e:	603b      	str	r3, [r7, #0]
  return(result);
 8107640:	683b      	ldr	r3, [r7, #0]
 8107642:	2b00      	cmp	r3, #0
 8107644:	d007      	beq.n	8107656 <osKernelStart+0x3a>
 8107646:	4b0f      	ldr	r3, [pc, #60]	; (8107684 <osKernelStart+0x68>)
 8107648:	681b      	ldr	r3, [r3, #0]
 810764a:	2b02      	cmp	r3, #2
 810764c:	d103      	bne.n	8107656 <osKernelStart+0x3a>
    stat = osErrorISR;
 810764e:	f06f 0305 	mvn.w	r3, #5
 8107652:	60fb      	str	r3, [r7, #12]
 8107654:	e010      	b.n	8107678 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8107656:	4b0b      	ldr	r3, [pc, #44]	; (8107684 <osKernelStart+0x68>)
 8107658:	681b      	ldr	r3, [r3, #0]
 810765a:	2b01      	cmp	r3, #1
 810765c:	d109      	bne.n	8107672 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 810765e:	f7ff ffa2 	bl	81075a6 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8107662:	4b08      	ldr	r3, [pc, #32]	; (8107684 <osKernelStart+0x68>)
 8107664:	2202      	movs	r2, #2
 8107666:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8107668:	f001 f870 	bl	810874c <vTaskStartScheduler>
      stat = osOK;
 810766c:	2300      	movs	r3, #0
 810766e:	60fb      	str	r3, [r7, #12]
 8107670:	e002      	b.n	8107678 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8107672:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8107676:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8107678:	68fb      	ldr	r3, [r7, #12]
}
 810767a:	4618      	mov	r0, r3
 810767c:	3710      	adds	r7, #16
 810767e:	46bd      	mov	sp, r7
 8107680:	bd80      	pop	{r7, pc}
 8107682:	bf00      	nop
 8107684:	10000228 	.word	0x10000228

08107688 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8107688:	b580      	push	{r7, lr}
 810768a:	b090      	sub	sp, #64	; 0x40
 810768c:	af04      	add	r7, sp, #16
 810768e:	60f8      	str	r0, [r7, #12]
 8107690:	60b9      	str	r1, [r7, #8]
 8107692:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8107694:	2300      	movs	r3, #0
 8107696:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8107698:	f3ef 8305 	mrs	r3, IPSR
 810769c:	61fb      	str	r3, [r7, #28]
  return(result);
 810769e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 81076a0:	2b00      	cmp	r3, #0
 81076a2:	f040 808f 	bne.w	81077c4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 81076a6:	f3ef 8310 	mrs	r3, PRIMASK
 81076aa:	61bb      	str	r3, [r7, #24]
  return(result);
 81076ac:	69bb      	ldr	r3, [r7, #24]
 81076ae:	2b00      	cmp	r3, #0
 81076b0:	d105      	bne.n	81076be <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 81076b2:	f3ef 8311 	mrs	r3, BASEPRI
 81076b6:	617b      	str	r3, [r7, #20]
  return(result);
 81076b8:	697b      	ldr	r3, [r7, #20]
 81076ba:	2b00      	cmp	r3, #0
 81076bc:	d003      	beq.n	81076c6 <osThreadNew+0x3e>
 81076be:	4b44      	ldr	r3, [pc, #272]	; (81077d0 <osThreadNew+0x148>)
 81076c0:	681b      	ldr	r3, [r3, #0]
 81076c2:	2b02      	cmp	r3, #2
 81076c4:	d07e      	beq.n	81077c4 <osThreadNew+0x13c>
 81076c6:	68fb      	ldr	r3, [r7, #12]
 81076c8:	2b00      	cmp	r3, #0
 81076ca:	d07b      	beq.n	81077c4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 81076cc:	2380      	movs	r3, #128	; 0x80
 81076ce:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 81076d0:	2318      	movs	r3, #24
 81076d2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 81076d4:	2300      	movs	r3, #0
 81076d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 81076d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 81076dc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 81076de:	687b      	ldr	r3, [r7, #4]
 81076e0:	2b00      	cmp	r3, #0
 81076e2:	d045      	beq.n	8107770 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 81076e4:	687b      	ldr	r3, [r7, #4]
 81076e6:	681b      	ldr	r3, [r3, #0]
 81076e8:	2b00      	cmp	r3, #0
 81076ea:	d002      	beq.n	81076f2 <osThreadNew+0x6a>
        name = attr->name;
 81076ec:	687b      	ldr	r3, [r7, #4]
 81076ee:	681b      	ldr	r3, [r3, #0]
 81076f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 81076f2:	687b      	ldr	r3, [r7, #4]
 81076f4:	699b      	ldr	r3, [r3, #24]
 81076f6:	2b00      	cmp	r3, #0
 81076f8:	d002      	beq.n	8107700 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 81076fa:	687b      	ldr	r3, [r7, #4]
 81076fc:	699b      	ldr	r3, [r3, #24]
 81076fe:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8107700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107702:	2b00      	cmp	r3, #0
 8107704:	d008      	beq.n	8107718 <osThreadNew+0x90>
 8107706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107708:	2b38      	cmp	r3, #56	; 0x38
 810770a:	d805      	bhi.n	8107718 <osThreadNew+0x90>
 810770c:	687b      	ldr	r3, [r7, #4]
 810770e:	685b      	ldr	r3, [r3, #4]
 8107710:	f003 0301 	and.w	r3, r3, #1
 8107714:	2b00      	cmp	r3, #0
 8107716:	d001      	beq.n	810771c <osThreadNew+0x94>
        return (NULL);
 8107718:	2300      	movs	r3, #0
 810771a:	e054      	b.n	81077c6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 810771c:	687b      	ldr	r3, [r7, #4]
 810771e:	695b      	ldr	r3, [r3, #20]
 8107720:	2b00      	cmp	r3, #0
 8107722:	d003      	beq.n	810772c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8107724:	687b      	ldr	r3, [r7, #4]
 8107726:	695b      	ldr	r3, [r3, #20]
 8107728:	089b      	lsrs	r3, r3, #2
 810772a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 810772c:	687b      	ldr	r3, [r7, #4]
 810772e:	689b      	ldr	r3, [r3, #8]
 8107730:	2b00      	cmp	r3, #0
 8107732:	d00e      	beq.n	8107752 <osThreadNew+0xca>
 8107734:	687b      	ldr	r3, [r7, #4]
 8107736:	68db      	ldr	r3, [r3, #12]
 8107738:	2b5b      	cmp	r3, #91	; 0x5b
 810773a:	d90a      	bls.n	8107752 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810773c:	687b      	ldr	r3, [r7, #4]
 810773e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8107740:	2b00      	cmp	r3, #0
 8107742:	d006      	beq.n	8107752 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8107744:	687b      	ldr	r3, [r7, #4]
 8107746:	695b      	ldr	r3, [r3, #20]
 8107748:	2b00      	cmp	r3, #0
 810774a:	d002      	beq.n	8107752 <osThreadNew+0xca>
        mem = 1;
 810774c:	2301      	movs	r3, #1
 810774e:	623b      	str	r3, [r7, #32]
 8107750:	e010      	b.n	8107774 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8107752:	687b      	ldr	r3, [r7, #4]
 8107754:	689b      	ldr	r3, [r3, #8]
 8107756:	2b00      	cmp	r3, #0
 8107758:	d10c      	bne.n	8107774 <osThreadNew+0xec>
 810775a:	687b      	ldr	r3, [r7, #4]
 810775c:	68db      	ldr	r3, [r3, #12]
 810775e:	2b00      	cmp	r3, #0
 8107760:	d108      	bne.n	8107774 <osThreadNew+0xec>
 8107762:	687b      	ldr	r3, [r7, #4]
 8107764:	691b      	ldr	r3, [r3, #16]
 8107766:	2b00      	cmp	r3, #0
 8107768:	d104      	bne.n	8107774 <osThreadNew+0xec>
          mem = 0;
 810776a:	2300      	movs	r3, #0
 810776c:	623b      	str	r3, [r7, #32]
 810776e:	e001      	b.n	8107774 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8107770:	2300      	movs	r3, #0
 8107772:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8107774:	6a3b      	ldr	r3, [r7, #32]
 8107776:	2b01      	cmp	r3, #1
 8107778:	d110      	bne.n	810779c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810777a:	687b      	ldr	r3, [r7, #4]
 810777c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 810777e:	687a      	ldr	r2, [r7, #4]
 8107780:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8107782:	9202      	str	r2, [sp, #8]
 8107784:	9301      	str	r3, [sp, #4]
 8107786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107788:	9300      	str	r3, [sp, #0]
 810778a:	68bb      	ldr	r3, [r7, #8]
 810778c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810778e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8107790:	68f8      	ldr	r0, [r7, #12]
 8107792:	f000 fe09 	bl	81083a8 <xTaskCreateStatic>
 8107796:	4603      	mov	r3, r0
 8107798:	613b      	str	r3, [r7, #16]
 810779a:	e013      	b.n	81077c4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 810779c:	6a3b      	ldr	r3, [r7, #32]
 810779e:	2b00      	cmp	r3, #0
 81077a0:	d110      	bne.n	81077c4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 81077a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81077a4:	b29a      	uxth	r2, r3
 81077a6:	f107 0310 	add.w	r3, r7, #16
 81077aa:	9301      	str	r3, [sp, #4]
 81077ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81077ae:	9300      	str	r3, [sp, #0]
 81077b0:	68bb      	ldr	r3, [r7, #8]
 81077b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 81077b4:	68f8      	ldr	r0, [r7, #12]
 81077b6:	f000 fe51 	bl	810845c <xTaskCreate>
 81077ba:	4603      	mov	r3, r0
 81077bc:	2b01      	cmp	r3, #1
 81077be:	d001      	beq.n	81077c4 <osThreadNew+0x13c>
          hTask = NULL;
 81077c0:	2300      	movs	r3, #0
 81077c2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 81077c4:	693b      	ldr	r3, [r7, #16]
}
 81077c6:	4618      	mov	r0, r3
 81077c8:	3730      	adds	r7, #48	; 0x30
 81077ca:	46bd      	mov	sp, r7
 81077cc:	bd80      	pop	{r7, pc}
 81077ce:	bf00      	nop
 81077d0:	10000228 	.word	0x10000228

081077d4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 81077d4:	b580      	push	{r7, lr}
 81077d6:	b086      	sub	sp, #24
 81077d8:	af00      	add	r7, sp, #0
 81077da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81077dc:	f3ef 8305 	mrs	r3, IPSR
 81077e0:	613b      	str	r3, [r7, #16]
  return(result);
 81077e2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 81077e4:	2b00      	cmp	r3, #0
 81077e6:	d10f      	bne.n	8107808 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 81077e8:	f3ef 8310 	mrs	r3, PRIMASK
 81077ec:	60fb      	str	r3, [r7, #12]
  return(result);
 81077ee:	68fb      	ldr	r3, [r7, #12]
 81077f0:	2b00      	cmp	r3, #0
 81077f2:	d105      	bne.n	8107800 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 81077f4:	f3ef 8311 	mrs	r3, BASEPRI
 81077f8:	60bb      	str	r3, [r7, #8]
  return(result);
 81077fa:	68bb      	ldr	r3, [r7, #8]
 81077fc:	2b00      	cmp	r3, #0
 81077fe:	d007      	beq.n	8107810 <osDelay+0x3c>
 8107800:	4b0a      	ldr	r3, [pc, #40]	; (810782c <osDelay+0x58>)
 8107802:	681b      	ldr	r3, [r3, #0]
 8107804:	2b02      	cmp	r3, #2
 8107806:	d103      	bne.n	8107810 <osDelay+0x3c>
    stat = osErrorISR;
 8107808:	f06f 0305 	mvn.w	r3, #5
 810780c:	617b      	str	r3, [r7, #20]
 810780e:	e007      	b.n	8107820 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8107810:	2300      	movs	r3, #0
 8107812:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8107814:	687b      	ldr	r3, [r7, #4]
 8107816:	2b00      	cmp	r3, #0
 8107818:	d002      	beq.n	8107820 <osDelay+0x4c>
      vTaskDelay(ticks);
 810781a:	6878      	ldr	r0, [r7, #4]
 810781c:	f000 ff62 	bl	81086e4 <vTaskDelay>
    }
  }

  return (stat);
 8107820:	697b      	ldr	r3, [r7, #20]
}
 8107822:	4618      	mov	r0, r3
 8107824:	3718      	adds	r7, #24
 8107826:	46bd      	mov	sp, r7
 8107828:	bd80      	pop	{r7, pc}
 810782a:	bf00      	nop
 810782c:	10000228 	.word	0x10000228

08107830 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8107830:	b480      	push	{r7}
 8107832:	b085      	sub	sp, #20
 8107834:	af00      	add	r7, sp, #0
 8107836:	60f8      	str	r0, [r7, #12]
 8107838:	60b9      	str	r1, [r7, #8]
 810783a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 810783c:	68fb      	ldr	r3, [r7, #12]
 810783e:	4a07      	ldr	r2, [pc, #28]	; (810785c <vApplicationGetIdleTaskMemory+0x2c>)
 8107840:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8107842:	68bb      	ldr	r3, [r7, #8]
 8107844:	4a06      	ldr	r2, [pc, #24]	; (8107860 <vApplicationGetIdleTaskMemory+0x30>)
 8107846:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8107848:	687b      	ldr	r3, [r7, #4]
 810784a:	2280      	movs	r2, #128	; 0x80
 810784c:	601a      	str	r2, [r3, #0]
}
 810784e:	bf00      	nop
 8107850:	3714      	adds	r7, #20
 8107852:	46bd      	mov	sp, r7
 8107854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107858:	4770      	bx	lr
 810785a:	bf00      	nop
 810785c:	1000022c 	.word	0x1000022c
 8107860:	10000288 	.word	0x10000288

08107864 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8107864:	b480      	push	{r7}
 8107866:	b085      	sub	sp, #20
 8107868:	af00      	add	r7, sp, #0
 810786a:	60f8      	str	r0, [r7, #12]
 810786c:	60b9      	str	r1, [r7, #8]
 810786e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8107870:	68fb      	ldr	r3, [r7, #12]
 8107872:	4a07      	ldr	r2, [pc, #28]	; (8107890 <vApplicationGetTimerTaskMemory+0x2c>)
 8107874:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8107876:	68bb      	ldr	r3, [r7, #8]
 8107878:	4a06      	ldr	r2, [pc, #24]	; (8107894 <vApplicationGetTimerTaskMemory+0x30>)
 810787a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 810787c:	687b      	ldr	r3, [r7, #4]
 810787e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8107882:	601a      	str	r2, [r3, #0]
}
 8107884:	bf00      	nop
 8107886:	3714      	adds	r7, #20
 8107888:	46bd      	mov	sp, r7
 810788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810788e:	4770      	bx	lr
 8107890:	10000488 	.word	0x10000488
 8107894:	100004e4 	.word	0x100004e4

08107898 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8107898:	b480      	push	{r7}
 810789a:	b083      	sub	sp, #12
 810789c:	af00      	add	r7, sp, #0
 810789e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 81078a0:	687b      	ldr	r3, [r7, #4]
 81078a2:	f103 0208 	add.w	r2, r3, #8
 81078a6:	687b      	ldr	r3, [r7, #4]
 81078a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 81078aa:	687b      	ldr	r3, [r7, #4]
 81078ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 81078b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 81078b2:	687b      	ldr	r3, [r7, #4]
 81078b4:	f103 0208 	add.w	r2, r3, #8
 81078b8:	687b      	ldr	r3, [r7, #4]
 81078ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 81078bc:	687b      	ldr	r3, [r7, #4]
 81078be:	f103 0208 	add.w	r2, r3, #8
 81078c2:	687b      	ldr	r3, [r7, #4]
 81078c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 81078c6:	687b      	ldr	r3, [r7, #4]
 81078c8:	2200      	movs	r2, #0
 81078ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 81078cc:	bf00      	nop
 81078ce:	370c      	adds	r7, #12
 81078d0:	46bd      	mov	sp, r7
 81078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81078d6:	4770      	bx	lr

081078d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 81078d8:	b480      	push	{r7}
 81078da:	b083      	sub	sp, #12
 81078dc:	af00      	add	r7, sp, #0
 81078de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 81078e0:	687b      	ldr	r3, [r7, #4]
 81078e2:	2200      	movs	r2, #0
 81078e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 81078e6:	bf00      	nop
 81078e8:	370c      	adds	r7, #12
 81078ea:	46bd      	mov	sp, r7
 81078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81078f0:	4770      	bx	lr

081078f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 81078f2:	b480      	push	{r7}
 81078f4:	b085      	sub	sp, #20
 81078f6:	af00      	add	r7, sp, #0
 81078f8:	6078      	str	r0, [r7, #4]
 81078fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 81078fc:	687b      	ldr	r3, [r7, #4]
 81078fe:	685b      	ldr	r3, [r3, #4]
 8107900:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8107902:	683b      	ldr	r3, [r7, #0]
 8107904:	68fa      	ldr	r2, [r7, #12]
 8107906:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8107908:	68fb      	ldr	r3, [r7, #12]
 810790a:	689a      	ldr	r2, [r3, #8]
 810790c:	683b      	ldr	r3, [r7, #0]
 810790e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8107910:	68fb      	ldr	r3, [r7, #12]
 8107912:	689b      	ldr	r3, [r3, #8]
 8107914:	683a      	ldr	r2, [r7, #0]
 8107916:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8107918:	68fb      	ldr	r3, [r7, #12]
 810791a:	683a      	ldr	r2, [r7, #0]
 810791c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 810791e:	683b      	ldr	r3, [r7, #0]
 8107920:	687a      	ldr	r2, [r7, #4]
 8107922:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8107924:	687b      	ldr	r3, [r7, #4]
 8107926:	681b      	ldr	r3, [r3, #0]
 8107928:	1c5a      	adds	r2, r3, #1
 810792a:	687b      	ldr	r3, [r7, #4]
 810792c:	601a      	str	r2, [r3, #0]
}
 810792e:	bf00      	nop
 8107930:	3714      	adds	r7, #20
 8107932:	46bd      	mov	sp, r7
 8107934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107938:	4770      	bx	lr

0810793a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810793a:	b480      	push	{r7}
 810793c:	b085      	sub	sp, #20
 810793e:	af00      	add	r7, sp, #0
 8107940:	6078      	str	r0, [r7, #4]
 8107942:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8107944:	683b      	ldr	r3, [r7, #0]
 8107946:	681b      	ldr	r3, [r3, #0]
 8107948:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 810794a:	68bb      	ldr	r3, [r7, #8]
 810794c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8107950:	d103      	bne.n	810795a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8107952:	687b      	ldr	r3, [r7, #4]
 8107954:	691b      	ldr	r3, [r3, #16]
 8107956:	60fb      	str	r3, [r7, #12]
 8107958:	e00c      	b.n	8107974 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 810795a:	687b      	ldr	r3, [r7, #4]
 810795c:	3308      	adds	r3, #8
 810795e:	60fb      	str	r3, [r7, #12]
 8107960:	e002      	b.n	8107968 <vListInsert+0x2e>
 8107962:	68fb      	ldr	r3, [r7, #12]
 8107964:	685b      	ldr	r3, [r3, #4]
 8107966:	60fb      	str	r3, [r7, #12]
 8107968:	68fb      	ldr	r3, [r7, #12]
 810796a:	685b      	ldr	r3, [r3, #4]
 810796c:	681b      	ldr	r3, [r3, #0]
 810796e:	68ba      	ldr	r2, [r7, #8]
 8107970:	429a      	cmp	r2, r3
 8107972:	d2f6      	bcs.n	8107962 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8107974:	68fb      	ldr	r3, [r7, #12]
 8107976:	685a      	ldr	r2, [r3, #4]
 8107978:	683b      	ldr	r3, [r7, #0]
 810797a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 810797c:	683b      	ldr	r3, [r7, #0]
 810797e:	685b      	ldr	r3, [r3, #4]
 8107980:	683a      	ldr	r2, [r7, #0]
 8107982:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8107984:	683b      	ldr	r3, [r7, #0]
 8107986:	68fa      	ldr	r2, [r7, #12]
 8107988:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 810798a:	68fb      	ldr	r3, [r7, #12]
 810798c:	683a      	ldr	r2, [r7, #0]
 810798e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8107990:	683b      	ldr	r3, [r7, #0]
 8107992:	687a      	ldr	r2, [r7, #4]
 8107994:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8107996:	687b      	ldr	r3, [r7, #4]
 8107998:	681b      	ldr	r3, [r3, #0]
 810799a:	1c5a      	adds	r2, r3, #1
 810799c:	687b      	ldr	r3, [r7, #4]
 810799e:	601a      	str	r2, [r3, #0]
}
 81079a0:	bf00      	nop
 81079a2:	3714      	adds	r7, #20
 81079a4:	46bd      	mov	sp, r7
 81079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81079aa:	4770      	bx	lr

081079ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 81079ac:	b480      	push	{r7}
 81079ae:	b085      	sub	sp, #20
 81079b0:	af00      	add	r7, sp, #0
 81079b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 81079b4:	687b      	ldr	r3, [r7, #4]
 81079b6:	691b      	ldr	r3, [r3, #16]
 81079b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 81079ba:	687b      	ldr	r3, [r7, #4]
 81079bc:	685b      	ldr	r3, [r3, #4]
 81079be:	687a      	ldr	r2, [r7, #4]
 81079c0:	6892      	ldr	r2, [r2, #8]
 81079c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 81079c4:	687b      	ldr	r3, [r7, #4]
 81079c6:	689b      	ldr	r3, [r3, #8]
 81079c8:	687a      	ldr	r2, [r7, #4]
 81079ca:	6852      	ldr	r2, [r2, #4]
 81079cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 81079ce:	68fb      	ldr	r3, [r7, #12]
 81079d0:	685b      	ldr	r3, [r3, #4]
 81079d2:	687a      	ldr	r2, [r7, #4]
 81079d4:	429a      	cmp	r2, r3
 81079d6:	d103      	bne.n	81079e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 81079d8:	687b      	ldr	r3, [r7, #4]
 81079da:	689a      	ldr	r2, [r3, #8]
 81079dc:	68fb      	ldr	r3, [r7, #12]
 81079de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 81079e0:	687b      	ldr	r3, [r7, #4]
 81079e2:	2200      	movs	r2, #0
 81079e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 81079e6:	68fb      	ldr	r3, [r7, #12]
 81079e8:	681b      	ldr	r3, [r3, #0]
 81079ea:	1e5a      	subs	r2, r3, #1
 81079ec:	68fb      	ldr	r3, [r7, #12]
 81079ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 81079f0:	68fb      	ldr	r3, [r7, #12]
 81079f2:	681b      	ldr	r3, [r3, #0]
}
 81079f4:	4618      	mov	r0, r3
 81079f6:	3714      	adds	r7, #20
 81079f8:	46bd      	mov	sp, r7
 81079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81079fe:	4770      	bx	lr

08107a00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8107a00:	b580      	push	{r7, lr}
 8107a02:	b084      	sub	sp, #16
 8107a04:	af00      	add	r7, sp, #0
 8107a06:	6078      	str	r0, [r7, #4]
 8107a08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8107a0a:	687b      	ldr	r3, [r7, #4]
 8107a0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8107a0e:	68fb      	ldr	r3, [r7, #12]
 8107a10:	2b00      	cmp	r3, #0
 8107a12:	d109      	bne.n	8107a28 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8107a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107a18:	f383 8811 	msr	BASEPRI, r3
 8107a1c:	f3bf 8f6f 	isb	sy
 8107a20:	f3bf 8f4f 	dsb	sy
 8107a24:	60bb      	str	r3, [r7, #8]
 8107a26:	e7fe      	b.n	8107a26 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8107a28:	f002 f810 	bl	8109a4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8107a2c:	68fb      	ldr	r3, [r7, #12]
 8107a2e:	681a      	ldr	r2, [r3, #0]
 8107a30:	68fb      	ldr	r3, [r7, #12]
 8107a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107a34:	68f9      	ldr	r1, [r7, #12]
 8107a36:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8107a38:	fb01 f303 	mul.w	r3, r1, r3
 8107a3c:	441a      	add	r2, r3
 8107a3e:	68fb      	ldr	r3, [r7, #12]
 8107a40:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8107a42:	68fb      	ldr	r3, [r7, #12]
 8107a44:	2200      	movs	r2, #0
 8107a46:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8107a48:	68fb      	ldr	r3, [r7, #12]
 8107a4a:	681a      	ldr	r2, [r3, #0]
 8107a4c:	68fb      	ldr	r3, [r7, #12]
 8107a4e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8107a50:	68fb      	ldr	r3, [r7, #12]
 8107a52:	681a      	ldr	r2, [r3, #0]
 8107a54:	68fb      	ldr	r3, [r7, #12]
 8107a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107a58:	3b01      	subs	r3, #1
 8107a5a:	68f9      	ldr	r1, [r7, #12]
 8107a5c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8107a5e:	fb01 f303 	mul.w	r3, r1, r3
 8107a62:	441a      	add	r2, r3
 8107a64:	68fb      	ldr	r3, [r7, #12]
 8107a66:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8107a68:	68fb      	ldr	r3, [r7, #12]
 8107a6a:	22ff      	movs	r2, #255	; 0xff
 8107a6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8107a70:	68fb      	ldr	r3, [r7, #12]
 8107a72:	22ff      	movs	r2, #255	; 0xff
 8107a74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8107a78:	683b      	ldr	r3, [r7, #0]
 8107a7a:	2b00      	cmp	r3, #0
 8107a7c:	d114      	bne.n	8107aa8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8107a7e:	68fb      	ldr	r3, [r7, #12]
 8107a80:	691b      	ldr	r3, [r3, #16]
 8107a82:	2b00      	cmp	r3, #0
 8107a84:	d01a      	beq.n	8107abc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8107a86:	68fb      	ldr	r3, [r7, #12]
 8107a88:	3310      	adds	r3, #16
 8107a8a:	4618      	mov	r0, r3
 8107a8c:	f001 f8de 	bl	8108c4c <xTaskRemoveFromEventList>
 8107a90:	4603      	mov	r3, r0
 8107a92:	2b00      	cmp	r3, #0
 8107a94:	d012      	beq.n	8107abc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8107a96:	4b0d      	ldr	r3, [pc, #52]	; (8107acc <xQueueGenericReset+0xcc>)
 8107a98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8107a9c:	601a      	str	r2, [r3, #0]
 8107a9e:	f3bf 8f4f 	dsb	sy
 8107aa2:	f3bf 8f6f 	isb	sy
 8107aa6:	e009      	b.n	8107abc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8107aa8:	68fb      	ldr	r3, [r7, #12]
 8107aaa:	3310      	adds	r3, #16
 8107aac:	4618      	mov	r0, r3
 8107aae:	f7ff fef3 	bl	8107898 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8107ab2:	68fb      	ldr	r3, [r7, #12]
 8107ab4:	3324      	adds	r3, #36	; 0x24
 8107ab6:	4618      	mov	r0, r3
 8107ab8:	f7ff feee 	bl	8107898 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8107abc:	f001 fff4 	bl	8109aa8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8107ac0:	2301      	movs	r3, #1
}
 8107ac2:	4618      	mov	r0, r3
 8107ac4:	3710      	adds	r7, #16
 8107ac6:	46bd      	mov	sp, r7
 8107ac8:	bd80      	pop	{r7, pc}
 8107aca:	bf00      	nop
 8107acc:	e000ed04 	.word	0xe000ed04

08107ad0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8107ad0:	b580      	push	{r7, lr}
 8107ad2:	b08e      	sub	sp, #56	; 0x38
 8107ad4:	af02      	add	r7, sp, #8
 8107ad6:	60f8      	str	r0, [r7, #12]
 8107ad8:	60b9      	str	r1, [r7, #8]
 8107ada:	607a      	str	r2, [r7, #4]
 8107adc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8107ade:	68fb      	ldr	r3, [r7, #12]
 8107ae0:	2b00      	cmp	r3, #0
 8107ae2:	d109      	bne.n	8107af8 <xQueueGenericCreateStatic+0x28>
 8107ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107ae8:	f383 8811 	msr	BASEPRI, r3
 8107aec:	f3bf 8f6f 	isb	sy
 8107af0:	f3bf 8f4f 	dsb	sy
 8107af4:	62bb      	str	r3, [r7, #40]	; 0x28
 8107af6:	e7fe      	b.n	8107af6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8107af8:	683b      	ldr	r3, [r7, #0]
 8107afa:	2b00      	cmp	r3, #0
 8107afc:	d109      	bne.n	8107b12 <xQueueGenericCreateStatic+0x42>
 8107afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107b02:	f383 8811 	msr	BASEPRI, r3
 8107b06:	f3bf 8f6f 	isb	sy
 8107b0a:	f3bf 8f4f 	dsb	sy
 8107b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8107b10:	e7fe      	b.n	8107b10 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8107b12:	687b      	ldr	r3, [r7, #4]
 8107b14:	2b00      	cmp	r3, #0
 8107b16:	d002      	beq.n	8107b1e <xQueueGenericCreateStatic+0x4e>
 8107b18:	68bb      	ldr	r3, [r7, #8]
 8107b1a:	2b00      	cmp	r3, #0
 8107b1c:	d001      	beq.n	8107b22 <xQueueGenericCreateStatic+0x52>
 8107b1e:	2301      	movs	r3, #1
 8107b20:	e000      	b.n	8107b24 <xQueueGenericCreateStatic+0x54>
 8107b22:	2300      	movs	r3, #0
 8107b24:	2b00      	cmp	r3, #0
 8107b26:	d109      	bne.n	8107b3c <xQueueGenericCreateStatic+0x6c>
 8107b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107b2c:	f383 8811 	msr	BASEPRI, r3
 8107b30:	f3bf 8f6f 	isb	sy
 8107b34:	f3bf 8f4f 	dsb	sy
 8107b38:	623b      	str	r3, [r7, #32]
 8107b3a:	e7fe      	b.n	8107b3a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8107b3c:	687b      	ldr	r3, [r7, #4]
 8107b3e:	2b00      	cmp	r3, #0
 8107b40:	d102      	bne.n	8107b48 <xQueueGenericCreateStatic+0x78>
 8107b42:	68bb      	ldr	r3, [r7, #8]
 8107b44:	2b00      	cmp	r3, #0
 8107b46:	d101      	bne.n	8107b4c <xQueueGenericCreateStatic+0x7c>
 8107b48:	2301      	movs	r3, #1
 8107b4a:	e000      	b.n	8107b4e <xQueueGenericCreateStatic+0x7e>
 8107b4c:	2300      	movs	r3, #0
 8107b4e:	2b00      	cmp	r3, #0
 8107b50:	d109      	bne.n	8107b66 <xQueueGenericCreateStatic+0x96>
 8107b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107b56:	f383 8811 	msr	BASEPRI, r3
 8107b5a:	f3bf 8f6f 	isb	sy
 8107b5e:	f3bf 8f4f 	dsb	sy
 8107b62:	61fb      	str	r3, [r7, #28]
 8107b64:	e7fe      	b.n	8107b64 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8107b66:	2350      	movs	r3, #80	; 0x50
 8107b68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8107b6a:	697b      	ldr	r3, [r7, #20]
 8107b6c:	2b50      	cmp	r3, #80	; 0x50
 8107b6e:	d009      	beq.n	8107b84 <xQueueGenericCreateStatic+0xb4>
 8107b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107b74:	f383 8811 	msr	BASEPRI, r3
 8107b78:	f3bf 8f6f 	isb	sy
 8107b7c:	f3bf 8f4f 	dsb	sy
 8107b80:	61bb      	str	r3, [r7, #24]
 8107b82:	e7fe      	b.n	8107b82 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8107b84:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8107b86:	683b      	ldr	r3, [r7, #0]
 8107b88:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8107b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107b8c:	2b00      	cmp	r3, #0
 8107b8e:	d00d      	beq.n	8107bac <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8107b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107b92:	2201      	movs	r2, #1
 8107b94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8107b98:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8107b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107b9e:	9300      	str	r3, [sp, #0]
 8107ba0:	4613      	mov	r3, r2
 8107ba2:	687a      	ldr	r2, [r7, #4]
 8107ba4:	68b9      	ldr	r1, [r7, #8]
 8107ba6:	68f8      	ldr	r0, [r7, #12]
 8107ba8:	f000 f805 	bl	8107bb6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8107bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8107bae:	4618      	mov	r0, r3
 8107bb0:	3730      	adds	r7, #48	; 0x30
 8107bb2:	46bd      	mov	sp, r7
 8107bb4:	bd80      	pop	{r7, pc}

08107bb6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8107bb6:	b580      	push	{r7, lr}
 8107bb8:	b084      	sub	sp, #16
 8107bba:	af00      	add	r7, sp, #0
 8107bbc:	60f8      	str	r0, [r7, #12]
 8107bbe:	60b9      	str	r1, [r7, #8]
 8107bc0:	607a      	str	r2, [r7, #4]
 8107bc2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8107bc4:	68bb      	ldr	r3, [r7, #8]
 8107bc6:	2b00      	cmp	r3, #0
 8107bc8:	d103      	bne.n	8107bd2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8107bca:	69bb      	ldr	r3, [r7, #24]
 8107bcc:	69ba      	ldr	r2, [r7, #24]
 8107bce:	601a      	str	r2, [r3, #0]
 8107bd0:	e002      	b.n	8107bd8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8107bd2:	69bb      	ldr	r3, [r7, #24]
 8107bd4:	687a      	ldr	r2, [r7, #4]
 8107bd6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8107bd8:	69bb      	ldr	r3, [r7, #24]
 8107bda:	68fa      	ldr	r2, [r7, #12]
 8107bdc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8107bde:	69bb      	ldr	r3, [r7, #24]
 8107be0:	68ba      	ldr	r2, [r7, #8]
 8107be2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8107be4:	2101      	movs	r1, #1
 8107be6:	69b8      	ldr	r0, [r7, #24]
 8107be8:	f7ff ff0a 	bl	8107a00 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8107bec:	69bb      	ldr	r3, [r7, #24]
 8107bee:	78fa      	ldrb	r2, [r7, #3]
 8107bf0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8107bf4:	bf00      	nop
 8107bf6:	3710      	adds	r7, #16
 8107bf8:	46bd      	mov	sp, r7
 8107bfa:	bd80      	pop	{r7, pc}

08107bfc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8107bfc:	b580      	push	{r7, lr}
 8107bfe:	b08e      	sub	sp, #56	; 0x38
 8107c00:	af00      	add	r7, sp, #0
 8107c02:	60f8      	str	r0, [r7, #12]
 8107c04:	60b9      	str	r1, [r7, #8]
 8107c06:	607a      	str	r2, [r7, #4]
 8107c08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8107c0a:	2300      	movs	r3, #0
 8107c0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8107c0e:	68fb      	ldr	r3, [r7, #12]
 8107c10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8107c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107c14:	2b00      	cmp	r3, #0
 8107c16:	d109      	bne.n	8107c2c <xQueueGenericSend+0x30>
 8107c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107c1c:	f383 8811 	msr	BASEPRI, r3
 8107c20:	f3bf 8f6f 	isb	sy
 8107c24:	f3bf 8f4f 	dsb	sy
 8107c28:	62bb      	str	r3, [r7, #40]	; 0x28
 8107c2a:	e7fe      	b.n	8107c2a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8107c2c:	68bb      	ldr	r3, [r7, #8]
 8107c2e:	2b00      	cmp	r3, #0
 8107c30:	d103      	bne.n	8107c3a <xQueueGenericSend+0x3e>
 8107c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107c36:	2b00      	cmp	r3, #0
 8107c38:	d101      	bne.n	8107c3e <xQueueGenericSend+0x42>
 8107c3a:	2301      	movs	r3, #1
 8107c3c:	e000      	b.n	8107c40 <xQueueGenericSend+0x44>
 8107c3e:	2300      	movs	r3, #0
 8107c40:	2b00      	cmp	r3, #0
 8107c42:	d109      	bne.n	8107c58 <xQueueGenericSend+0x5c>
 8107c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107c48:	f383 8811 	msr	BASEPRI, r3
 8107c4c:	f3bf 8f6f 	isb	sy
 8107c50:	f3bf 8f4f 	dsb	sy
 8107c54:	627b      	str	r3, [r7, #36]	; 0x24
 8107c56:	e7fe      	b.n	8107c56 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8107c58:	683b      	ldr	r3, [r7, #0]
 8107c5a:	2b02      	cmp	r3, #2
 8107c5c:	d103      	bne.n	8107c66 <xQueueGenericSend+0x6a>
 8107c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107c62:	2b01      	cmp	r3, #1
 8107c64:	d101      	bne.n	8107c6a <xQueueGenericSend+0x6e>
 8107c66:	2301      	movs	r3, #1
 8107c68:	e000      	b.n	8107c6c <xQueueGenericSend+0x70>
 8107c6a:	2300      	movs	r3, #0
 8107c6c:	2b00      	cmp	r3, #0
 8107c6e:	d109      	bne.n	8107c84 <xQueueGenericSend+0x88>
 8107c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107c74:	f383 8811 	msr	BASEPRI, r3
 8107c78:	f3bf 8f6f 	isb	sy
 8107c7c:	f3bf 8f4f 	dsb	sy
 8107c80:	623b      	str	r3, [r7, #32]
 8107c82:	e7fe      	b.n	8107c82 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8107c84:	f001 f998 	bl	8108fb8 <xTaskGetSchedulerState>
 8107c88:	4603      	mov	r3, r0
 8107c8a:	2b00      	cmp	r3, #0
 8107c8c:	d102      	bne.n	8107c94 <xQueueGenericSend+0x98>
 8107c8e:	687b      	ldr	r3, [r7, #4]
 8107c90:	2b00      	cmp	r3, #0
 8107c92:	d101      	bne.n	8107c98 <xQueueGenericSend+0x9c>
 8107c94:	2301      	movs	r3, #1
 8107c96:	e000      	b.n	8107c9a <xQueueGenericSend+0x9e>
 8107c98:	2300      	movs	r3, #0
 8107c9a:	2b00      	cmp	r3, #0
 8107c9c:	d109      	bne.n	8107cb2 <xQueueGenericSend+0xb6>
 8107c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107ca2:	f383 8811 	msr	BASEPRI, r3
 8107ca6:	f3bf 8f6f 	isb	sy
 8107caa:	f3bf 8f4f 	dsb	sy
 8107cae:	61fb      	str	r3, [r7, #28]
 8107cb0:	e7fe      	b.n	8107cb0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8107cb2:	f001 fecb 	bl	8109a4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8107cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107cb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8107cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107cbe:	429a      	cmp	r2, r3
 8107cc0:	d302      	bcc.n	8107cc8 <xQueueGenericSend+0xcc>
 8107cc2:	683b      	ldr	r3, [r7, #0]
 8107cc4:	2b02      	cmp	r3, #2
 8107cc6:	d129      	bne.n	8107d1c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8107cc8:	683a      	ldr	r2, [r7, #0]
 8107cca:	68b9      	ldr	r1, [r7, #8]
 8107ccc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8107cce:	f000 f9ff 	bl	81080d0 <prvCopyDataToQueue>
 8107cd2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8107cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107cd8:	2b00      	cmp	r3, #0
 8107cda:	d010      	beq.n	8107cfe <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8107cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107cde:	3324      	adds	r3, #36	; 0x24
 8107ce0:	4618      	mov	r0, r3
 8107ce2:	f000 ffb3 	bl	8108c4c <xTaskRemoveFromEventList>
 8107ce6:	4603      	mov	r3, r0
 8107ce8:	2b00      	cmp	r3, #0
 8107cea:	d013      	beq.n	8107d14 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8107cec:	4b3f      	ldr	r3, [pc, #252]	; (8107dec <xQueueGenericSend+0x1f0>)
 8107cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8107cf2:	601a      	str	r2, [r3, #0]
 8107cf4:	f3bf 8f4f 	dsb	sy
 8107cf8:	f3bf 8f6f 	isb	sy
 8107cfc:	e00a      	b.n	8107d14 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8107cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107d00:	2b00      	cmp	r3, #0
 8107d02:	d007      	beq.n	8107d14 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8107d04:	4b39      	ldr	r3, [pc, #228]	; (8107dec <xQueueGenericSend+0x1f0>)
 8107d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8107d0a:	601a      	str	r2, [r3, #0]
 8107d0c:	f3bf 8f4f 	dsb	sy
 8107d10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8107d14:	f001 fec8 	bl	8109aa8 <vPortExitCritical>
				return pdPASS;
 8107d18:	2301      	movs	r3, #1
 8107d1a:	e063      	b.n	8107de4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8107d1c:	687b      	ldr	r3, [r7, #4]
 8107d1e:	2b00      	cmp	r3, #0
 8107d20:	d103      	bne.n	8107d2a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8107d22:	f001 fec1 	bl	8109aa8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8107d26:	2300      	movs	r3, #0
 8107d28:	e05c      	b.n	8107de4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8107d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107d2c:	2b00      	cmp	r3, #0
 8107d2e:	d106      	bne.n	8107d3e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8107d30:	f107 0314 	add.w	r3, r7, #20
 8107d34:	4618      	mov	r0, r3
 8107d36:	f000 ffeb 	bl	8108d10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8107d3a:	2301      	movs	r3, #1
 8107d3c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8107d3e:	f001 feb3 	bl	8109aa8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8107d42:	f000 fd67 	bl	8108814 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8107d46:	f001 fe81 	bl	8109a4c <vPortEnterCritical>
 8107d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107d4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8107d50:	b25b      	sxtb	r3, r3
 8107d52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8107d56:	d103      	bne.n	8107d60 <xQueueGenericSend+0x164>
 8107d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107d5a:	2200      	movs	r2, #0
 8107d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8107d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107d62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8107d66:	b25b      	sxtb	r3, r3
 8107d68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8107d6c:	d103      	bne.n	8107d76 <xQueueGenericSend+0x17a>
 8107d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107d70:	2200      	movs	r2, #0
 8107d72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8107d76:	f001 fe97 	bl	8109aa8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8107d7a:	1d3a      	adds	r2, r7, #4
 8107d7c:	f107 0314 	add.w	r3, r7, #20
 8107d80:	4611      	mov	r1, r2
 8107d82:	4618      	mov	r0, r3
 8107d84:	f000 ffda 	bl	8108d3c <xTaskCheckForTimeOut>
 8107d88:	4603      	mov	r3, r0
 8107d8a:	2b00      	cmp	r3, #0
 8107d8c:	d124      	bne.n	8107dd8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8107d8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8107d90:	f000 fa96 	bl	81082c0 <prvIsQueueFull>
 8107d94:	4603      	mov	r3, r0
 8107d96:	2b00      	cmp	r3, #0
 8107d98:	d018      	beq.n	8107dcc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8107d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107d9c:	3310      	adds	r3, #16
 8107d9e:	687a      	ldr	r2, [r7, #4]
 8107da0:	4611      	mov	r1, r2
 8107da2:	4618      	mov	r0, r3
 8107da4:	f000 ff04 	bl	8108bb0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8107da8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8107daa:	f000 fa21 	bl	81081f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8107dae:	f000 fd3f 	bl	8108830 <xTaskResumeAll>
 8107db2:	4603      	mov	r3, r0
 8107db4:	2b00      	cmp	r3, #0
 8107db6:	f47f af7c 	bne.w	8107cb2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8107dba:	4b0c      	ldr	r3, [pc, #48]	; (8107dec <xQueueGenericSend+0x1f0>)
 8107dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8107dc0:	601a      	str	r2, [r3, #0]
 8107dc2:	f3bf 8f4f 	dsb	sy
 8107dc6:	f3bf 8f6f 	isb	sy
 8107dca:	e772      	b.n	8107cb2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8107dcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8107dce:	f000 fa0f 	bl	81081f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8107dd2:	f000 fd2d 	bl	8108830 <xTaskResumeAll>
 8107dd6:	e76c      	b.n	8107cb2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8107dd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8107dda:	f000 fa09 	bl	81081f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8107dde:	f000 fd27 	bl	8108830 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8107de2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8107de4:	4618      	mov	r0, r3
 8107de6:	3738      	adds	r7, #56	; 0x38
 8107de8:	46bd      	mov	sp, r7
 8107dea:	bd80      	pop	{r7, pc}
 8107dec:	e000ed04 	.word	0xe000ed04

08107df0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8107df0:	b580      	push	{r7, lr}
 8107df2:	b08e      	sub	sp, #56	; 0x38
 8107df4:	af00      	add	r7, sp, #0
 8107df6:	60f8      	str	r0, [r7, #12]
 8107df8:	60b9      	str	r1, [r7, #8]
 8107dfa:	607a      	str	r2, [r7, #4]
 8107dfc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8107dfe:	68fb      	ldr	r3, [r7, #12]
 8107e00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8107e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107e04:	2b00      	cmp	r3, #0
 8107e06:	d109      	bne.n	8107e1c <xQueueGenericSendFromISR+0x2c>
 8107e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107e0c:	f383 8811 	msr	BASEPRI, r3
 8107e10:	f3bf 8f6f 	isb	sy
 8107e14:	f3bf 8f4f 	dsb	sy
 8107e18:	627b      	str	r3, [r7, #36]	; 0x24
 8107e1a:	e7fe      	b.n	8107e1a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8107e1c:	68bb      	ldr	r3, [r7, #8]
 8107e1e:	2b00      	cmp	r3, #0
 8107e20:	d103      	bne.n	8107e2a <xQueueGenericSendFromISR+0x3a>
 8107e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107e26:	2b00      	cmp	r3, #0
 8107e28:	d101      	bne.n	8107e2e <xQueueGenericSendFromISR+0x3e>
 8107e2a:	2301      	movs	r3, #1
 8107e2c:	e000      	b.n	8107e30 <xQueueGenericSendFromISR+0x40>
 8107e2e:	2300      	movs	r3, #0
 8107e30:	2b00      	cmp	r3, #0
 8107e32:	d109      	bne.n	8107e48 <xQueueGenericSendFromISR+0x58>
 8107e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107e38:	f383 8811 	msr	BASEPRI, r3
 8107e3c:	f3bf 8f6f 	isb	sy
 8107e40:	f3bf 8f4f 	dsb	sy
 8107e44:	623b      	str	r3, [r7, #32]
 8107e46:	e7fe      	b.n	8107e46 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8107e48:	683b      	ldr	r3, [r7, #0]
 8107e4a:	2b02      	cmp	r3, #2
 8107e4c:	d103      	bne.n	8107e56 <xQueueGenericSendFromISR+0x66>
 8107e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107e52:	2b01      	cmp	r3, #1
 8107e54:	d101      	bne.n	8107e5a <xQueueGenericSendFromISR+0x6a>
 8107e56:	2301      	movs	r3, #1
 8107e58:	e000      	b.n	8107e5c <xQueueGenericSendFromISR+0x6c>
 8107e5a:	2300      	movs	r3, #0
 8107e5c:	2b00      	cmp	r3, #0
 8107e5e:	d109      	bne.n	8107e74 <xQueueGenericSendFromISR+0x84>
 8107e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107e64:	f383 8811 	msr	BASEPRI, r3
 8107e68:	f3bf 8f6f 	isb	sy
 8107e6c:	f3bf 8f4f 	dsb	sy
 8107e70:	61fb      	str	r3, [r7, #28]
 8107e72:	e7fe      	b.n	8107e72 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8107e74:	f001 fec6 	bl	8109c04 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8107e78:	f3ef 8211 	mrs	r2, BASEPRI
 8107e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107e80:	f383 8811 	msr	BASEPRI, r3
 8107e84:	f3bf 8f6f 	isb	sy
 8107e88:	f3bf 8f4f 	dsb	sy
 8107e8c:	61ba      	str	r2, [r7, #24]
 8107e8e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8107e90:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8107e92:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8107e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107e96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8107e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107e9c:	429a      	cmp	r2, r3
 8107e9e:	d302      	bcc.n	8107ea6 <xQueueGenericSendFromISR+0xb6>
 8107ea0:	683b      	ldr	r3, [r7, #0]
 8107ea2:	2b02      	cmp	r3, #2
 8107ea4:	d12c      	bne.n	8107f00 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8107ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107ea8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8107eac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8107eb0:	683a      	ldr	r2, [r7, #0]
 8107eb2:	68b9      	ldr	r1, [r7, #8]
 8107eb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8107eb6:	f000 f90b 	bl	81080d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8107eba:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8107ebe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8107ec2:	d112      	bne.n	8107eea <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8107ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107ec8:	2b00      	cmp	r3, #0
 8107eca:	d016      	beq.n	8107efa <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8107ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107ece:	3324      	adds	r3, #36	; 0x24
 8107ed0:	4618      	mov	r0, r3
 8107ed2:	f000 febb 	bl	8108c4c <xTaskRemoveFromEventList>
 8107ed6:	4603      	mov	r3, r0
 8107ed8:	2b00      	cmp	r3, #0
 8107eda:	d00e      	beq.n	8107efa <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8107edc:	687b      	ldr	r3, [r7, #4]
 8107ede:	2b00      	cmp	r3, #0
 8107ee0:	d00b      	beq.n	8107efa <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8107ee2:	687b      	ldr	r3, [r7, #4]
 8107ee4:	2201      	movs	r2, #1
 8107ee6:	601a      	str	r2, [r3, #0]
 8107ee8:	e007      	b.n	8107efa <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8107eea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8107eee:	3301      	adds	r3, #1
 8107ef0:	b2db      	uxtb	r3, r3
 8107ef2:	b25a      	sxtb	r2, r3
 8107ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107ef6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8107efa:	2301      	movs	r3, #1
 8107efc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8107efe:	e001      	b.n	8107f04 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8107f00:	2300      	movs	r3, #0
 8107f02:	637b      	str	r3, [r7, #52]	; 0x34
 8107f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107f06:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8107f08:	693b      	ldr	r3, [r7, #16]
 8107f0a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8107f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8107f10:	4618      	mov	r0, r3
 8107f12:	3738      	adds	r7, #56	; 0x38
 8107f14:	46bd      	mov	sp, r7
 8107f16:	bd80      	pop	{r7, pc}

08107f18 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8107f18:	b580      	push	{r7, lr}
 8107f1a:	b08c      	sub	sp, #48	; 0x30
 8107f1c:	af00      	add	r7, sp, #0
 8107f1e:	60f8      	str	r0, [r7, #12]
 8107f20:	60b9      	str	r1, [r7, #8]
 8107f22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8107f24:	2300      	movs	r3, #0
 8107f26:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8107f28:	68fb      	ldr	r3, [r7, #12]
 8107f2a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8107f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107f2e:	2b00      	cmp	r3, #0
 8107f30:	d109      	bne.n	8107f46 <xQueueReceive+0x2e>
	__asm volatile
 8107f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107f36:	f383 8811 	msr	BASEPRI, r3
 8107f3a:	f3bf 8f6f 	isb	sy
 8107f3e:	f3bf 8f4f 	dsb	sy
 8107f42:	623b      	str	r3, [r7, #32]
 8107f44:	e7fe      	b.n	8107f44 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8107f46:	68bb      	ldr	r3, [r7, #8]
 8107f48:	2b00      	cmp	r3, #0
 8107f4a:	d103      	bne.n	8107f54 <xQueueReceive+0x3c>
 8107f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107f50:	2b00      	cmp	r3, #0
 8107f52:	d101      	bne.n	8107f58 <xQueueReceive+0x40>
 8107f54:	2301      	movs	r3, #1
 8107f56:	e000      	b.n	8107f5a <xQueueReceive+0x42>
 8107f58:	2300      	movs	r3, #0
 8107f5a:	2b00      	cmp	r3, #0
 8107f5c:	d109      	bne.n	8107f72 <xQueueReceive+0x5a>
 8107f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107f62:	f383 8811 	msr	BASEPRI, r3
 8107f66:	f3bf 8f6f 	isb	sy
 8107f6a:	f3bf 8f4f 	dsb	sy
 8107f6e:	61fb      	str	r3, [r7, #28]
 8107f70:	e7fe      	b.n	8107f70 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8107f72:	f001 f821 	bl	8108fb8 <xTaskGetSchedulerState>
 8107f76:	4603      	mov	r3, r0
 8107f78:	2b00      	cmp	r3, #0
 8107f7a:	d102      	bne.n	8107f82 <xQueueReceive+0x6a>
 8107f7c:	687b      	ldr	r3, [r7, #4]
 8107f7e:	2b00      	cmp	r3, #0
 8107f80:	d101      	bne.n	8107f86 <xQueueReceive+0x6e>
 8107f82:	2301      	movs	r3, #1
 8107f84:	e000      	b.n	8107f88 <xQueueReceive+0x70>
 8107f86:	2300      	movs	r3, #0
 8107f88:	2b00      	cmp	r3, #0
 8107f8a:	d109      	bne.n	8107fa0 <xQueueReceive+0x88>
 8107f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107f90:	f383 8811 	msr	BASEPRI, r3
 8107f94:	f3bf 8f6f 	isb	sy
 8107f98:	f3bf 8f4f 	dsb	sy
 8107f9c:	61bb      	str	r3, [r7, #24]
 8107f9e:	e7fe      	b.n	8107f9e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8107fa0:	f001 fd54 	bl	8109a4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8107fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107fa8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8107faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107fac:	2b00      	cmp	r3, #0
 8107fae:	d01f      	beq.n	8107ff0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8107fb0:	68b9      	ldr	r1, [r7, #8]
 8107fb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8107fb4:	f000 f8f6 	bl	81081a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8107fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107fba:	1e5a      	subs	r2, r3, #1
 8107fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107fbe:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8107fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107fc2:	691b      	ldr	r3, [r3, #16]
 8107fc4:	2b00      	cmp	r3, #0
 8107fc6:	d00f      	beq.n	8107fe8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8107fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107fca:	3310      	adds	r3, #16
 8107fcc:	4618      	mov	r0, r3
 8107fce:	f000 fe3d 	bl	8108c4c <xTaskRemoveFromEventList>
 8107fd2:	4603      	mov	r3, r0
 8107fd4:	2b00      	cmp	r3, #0
 8107fd6:	d007      	beq.n	8107fe8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8107fd8:	4b3c      	ldr	r3, [pc, #240]	; (81080cc <xQueueReceive+0x1b4>)
 8107fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8107fde:	601a      	str	r2, [r3, #0]
 8107fe0:	f3bf 8f4f 	dsb	sy
 8107fe4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8107fe8:	f001 fd5e 	bl	8109aa8 <vPortExitCritical>
				return pdPASS;
 8107fec:	2301      	movs	r3, #1
 8107fee:	e069      	b.n	81080c4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8107ff0:	687b      	ldr	r3, [r7, #4]
 8107ff2:	2b00      	cmp	r3, #0
 8107ff4:	d103      	bne.n	8107ffe <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8107ff6:	f001 fd57 	bl	8109aa8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8107ffa:	2300      	movs	r3, #0
 8107ffc:	e062      	b.n	81080c4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8107ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108000:	2b00      	cmp	r3, #0
 8108002:	d106      	bne.n	8108012 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8108004:	f107 0310 	add.w	r3, r7, #16
 8108008:	4618      	mov	r0, r3
 810800a:	f000 fe81 	bl	8108d10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810800e:	2301      	movs	r3, #1
 8108010:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8108012:	f001 fd49 	bl	8109aa8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8108016:	f000 fbfd 	bl	8108814 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810801a:	f001 fd17 	bl	8109a4c <vPortEnterCritical>
 810801e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108020:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8108024:	b25b      	sxtb	r3, r3
 8108026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810802a:	d103      	bne.n	8108034 <xQueueReceive+0x11c>
 810802c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810802e:	2200      	movs	r2, #0
 8108030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8108034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108036:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810803a:	b25b      	sxtb	r3, r3
 810803c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8108040:	d103      	bne.n	810804a <xQueueReceive+0x132>
 8108042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108044:	2200      	movs	r2, #0
 8108046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810804a:	f001 fd2d 	bl	8109aa8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810804e:	1d3a      	adds	r2, r7, #4
 8108050:	f107 0310 	add.w	r3, r7, #16
 8108054:	4611      	mov	r1, r2
 8108056:	4618      	mov	r0, r3
 8108058:	f000 fe70 	bl	8108d3c <xTaskCheckForTimeOut>
 810805c:	4603      	mov	r3, r0
 810805e:	2b00      	cmp	r3, #0
 8108060:	d123      	bne.n	81080aa <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8108062:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8108064:	f000 f916 	bl	8108294 <prvIsQueueEmpty>
 8108068:	4603      	mov	r3, r0
 810806a:	2b00      	cmp	r3, #0
 810806c:	d017      	beq.n	810809e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 810806e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108070:	3324      	adds	r3, #36	; 0x24
 8108072:	687a      	ldr	r2, [r7, #4]
 8108074:	4611      	mov	r1, r2
 8108076:	4618      	mov	r0, r3
 8108078:	f000 fd9a 	bl	8108bb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 810807c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810807e:	f000 f8b7 	bl	81081f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8108082:	f000 fbd5 	bl	8108830 <xTaskResumeAll>
 8108086:	4603      	mov	r3, r0
 8108088:	2b00      	cmp	r3, #0
 810808a:	d189      	bne.n	8107fa0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 810808c:	4b0f      	ldr	r3, [pc, #60]	; (81080cc <xQueueReceive+0x1b4>)
 810808e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8108092:	601a      	str	r2, [r3, #0]
 8108094:	f3bf 8f4f 	dsb	sy
 8108098:	f3bf 8f6f 	isb	sy
 810809c:	e780      	b.n	8107fa0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 810809e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81080a0:	f000 f8a6 	bl	81081f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 81080a4:	f000 fbc4 	bl	8108830 <xTaskResumeAll>
 81080a8:	e77a      	b.n	8107fa0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 81080aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81080ac:	f000 f8a0 	bl	81081f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 81080b0:	f000 fbbe 	bl	8108830 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 81080b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81080b6:	f000 f8ed 	bl	8108294 <prvIsQueueEmpty>
 81080ba:	4603      	mov	r3, r0
 81080bc:	2b00      	cmp	r3, #0
 81080be:	f43f af6f 	beq.w	8107fa0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 81080c2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 81080c4:	4618      	mov	r0, r3
 81080c6:	3730      	adds	r7, #48	; 0x30
 81080c8:	46bd      	mov	sp, r7
 81080ca:	bd80      	pop	{r7, pc}
 81080cc:	e000ed04 	.word	0xe000ed04

081080d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 81080d0:	b580      	push	{r7, lr}
 81080d2:	b086      	sub	sp, #24
 81080d4:	af00      	add	r7, sp, #0
 81080d6:	60f8      	str	r0, [r7, #12]
 81080d8:	60b9      	str	r1, [r7, #8]
 81080da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 81080dc:	2300      	movs	r3, #0
 81080de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 81080e0:	68fb      	ldr	r3, [r7, #12]
 81080e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81080e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 81080e6:	68fb      	ldr	r3, [r7, #12]
 81080e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81080ea:	2b00      	cmp	r3, #0
 81080ec:	d10d      	bne.n	810810a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 81080ee:	68fb      	ldr	r3, [r7, #12]
 81080f0:	681b      	ldr	r3, [r3, #0]
 81080f2:	2b00      	cmp	r3, #0
 81080f4:	d14d      	bne.n	8108192 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 81080f6:	68fb      	ldr	r3, [r7, #12]
 81080f8:	689b      	ldr	r3, [r3, #8]
 81080fa:	4618      	mov	r0, r3
 81080fc:	f000 ff7a 	bl	8108ff4 <xTaskPriorityDisinherit>
 8108100:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8108102:	68fb      	ldr	r3, [r7, #12]
 8108104:	2200      	movs	r2, #0
 8108106:	609a      	str	r2, [r3, #8]
 8108108:	e043      	b.n	8108192 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 810810a:	687b      	ldr	r3, [r7, #4]
 810810c:	2b00      	cmp	r3, #0
 810810e:	d119      	bne.n	8108144 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8108110:	68fb      	ldr	r3, [r7, #12]
 8108112:	6858      	ldr	r0, [r3, #4]
 8108114:	68fb      	ldr	r3, [r7, #12]
 8108116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8108118:	461a      	mov	r2, r3
 810811a:	68b9      	ldr	r1, [r7, #8]
 810811c:	f002 f8c8 	bl	810a2b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8108120:	68fb      	ldr	r3, [r7, #12]
 8108122:	685a      	ldr	r2, [r3, #4]
 8108124:	68fb      	ldr	r3, [r7, #12]
 8108126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8108128:	441a      	add	r2, r3
 810812a:	68fb      	ldr	r3, [r7, #12]
 810812c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810812e:	68fb      	ldr	r3, [r7, #12]
 8108130:	685a      	ldr	r2, [r3, #4]
 8108132:	68fb      	ldr	r3, [r7, #12]
 8108134:	689b      	ldr	r3, [r3, #8]
 8108136:	429a      	cmp	r2, r3
 8108138:	d32b      	bcc.n	8108192 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 810813a:	68fb      	ldr	r3, [r7, #12]
 810813c:	681a      	ldr	r2, [r3, #0]
 810813e:	68fb      	ldr	r3, [r7, #12]
 8108140:	605a      	str	r2, [r3, #4]
 8108142:	e026      	b.n	8108192 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8108144:	68fb      	ldr	r3, [r7, #12]
 8108146:	68d8      	ldr	r0, [r3, #12]
 8108148:	68fb      	ldr	r3, [r7, #12]
 810814a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810814c:	461a      	mov	r2, r3
 810814e:	68b9      	ldr	r1, [r7, #8]
 8108150:	f002 f8ae 	bl	810a2b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8108154:	68fb      	ldr	r3, [r7, #12]
 8108156:	68da      	ldr	r2, [r3, #12]
 8108158:	68fb      	ldr	r3, [r7, #12]
 810815a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810815c:	425b      	negs	r3, r3
 810815e:	441a      	add	r2, r3
 8108160:	68fb      	ldr	r3, [r7, #12]
 8108162:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8108164:	68fb      	ldr	r3, [r7, #12]
 8108166:	68da      	ldr	r2, [r3, #12]
 8108168:	68fb      	ldr	r3, [r7, #12]
 810816a:	681b      	ldr	r3, [r3, #0]
 810816c:	429a      	cmp	r2, r3
 810816e:	d207      	bcs.n	8108180 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8108170:	68fb      	ldr	r3, [r7, #12]
 8108172:	689a      	ldr	r2, [r3, #8]
 8108174:	68fb      	ldr	r3, [r7, #12]
 8108176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8108178:	425b      	negs	r3, r3
 810817a:	441a      	add	r2, r3
 810817c:	68fb      	ldr	r3, [r7, #12]
 810817e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8108180:	687b      	ldr	r3, [r7, #4]
 8108182:	2b02      	cmp	r3, #2
 8108184:	d105      	bne.n	8108192 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8108186:	693b      	ldr	r3, [r7, #16]
 8108188:	2b00      	cmp	r3, #0
 810818a:	d002      	beq.n	8108192 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 810818c:	693b      	ldr	r3, [r7, #16]
 810818e:	3b01      	subs	r3, #1
 8108190:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8108192:	693b      	ldr	r3, [r7, #16]
 8108194:	1c5a      	adds	r2, r3, #1
 8108196:	68fb      	ldr	r3, [r7, #12]
 8108198:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 810819a:	697b      	ldr	r3, [r7, #20]
}
 810819c:	4618      	mov	r0, r3
 810819e:	3718      	adds	r7, #24
 81081a0:	46bd      	mov	sp, r7
 81081a2:	bd80      	pop	{r7, pc}

081081a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 81081a4:	b580      	push	{r7, lr}
 81081a6:	b082      	sub	sp, #8
 81081a8:	af00      	add	r7, sp, #0
 81081aa:	6078      	str	r0, [r7, #4]
 81081ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 81081ae:	687b      	ldr	r3, [r7, #4]
 81081b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81081b2:	2b00      	cmp	r3, #0
 81081b4:	d018      	beq.n	81081e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 81081b6:	687b      	ldr	r3, [r7, #4]
 81081b8:	68da      	ldr	r2, [r3, #12]
 81081ba:	687b      	ldr	r3, [r7, #4]
 81081bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81081be:	441a      	add	r2, r3
 81081c0:	687b      	ldr	r3, [r7, #4]
 81081c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 81081c4:	687b      	ldr	r3, [r7, #4]
 81081c6:	68da      	ldr	r2, [r3, #12]
 81081c8:	687b      	ldr	r3, [r7, #4]
 81081ca:	689b      	ldr	r3, [r3, #8]
 81081cc:	429a      	cmp	r2, r3
 81081ce:	d303      	bcc.n	81081d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 81081d0:	687b      	ldr	r3, [r7, #4]
 81081d2:	681a      	ldr	r2, [r3, #0]
 81081d4:	687b      	ldr	r3, [r7, #4]
 81081d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 81081d8:	687b      	ldr	r3, [r7, #4]
 81081da:	68d9      	ldr	r1, [r3, #12]
 81081dc:	687b      	ldr	r3, [r7, #4]
 81081de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81081e0:	461a      	mov	r2, r3
 81081e2:	6838      	ldr	r0, [r7, #0]
 81081e4:	f002 f864 	bl	810a2b0 <memcpy>
	}
}
 81081e8:	bf00      	nop
 81081ea:	3708      	adds	r7, #8
 81081ec:	46bd      	mov	sp, r7
 81081ee:	bd80      	pop	{r7, pc}

081081f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 81081f0:	b580      	push	{r7, lr}
 81081f2:	b084      	sub	sp, #16
 81081f4:	af00      	add	r7, sp, #0
 81081f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 81081f8:	f001 fc28 	bl	8109a4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 81081fc:	687b      	ldr	r3, [r7, #4]
 81081fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8108202:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8108204:	e011      	b.n	810822a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8108206:	687b      	ldr	r3, [r7, #4]
 8108208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810820a:	2b00      	cmp	r3, #0
 810820c:	d012      	beq.n	8108234 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810820e:	687b      	ldr	r3, [r7, #4]
 8108210:	3324      	adds	r3, #36	; 0x24
 8108212:	4618      	mov	r0, r3
 8108214:	f000 fd1a 	bl	8108c4c <xTaskRemoveFromEventList>
 8108218:	4603      	mov	r3, r0
 810821a:	2b00      	cmp	r3, #0
 810821c:	d001      	beq.n	8108222 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 810821e:	f000 fded 	bl	8108dfc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8108222:	7bfb      	ldrb	r3, [r7, #15]
 8108224:	3b01      	subs	r3, #1
 8108226:	b2db      	uxtb	r3, r3
 8108228:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810822a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810822e:	2b00      	cmp	r3, #0
 8108230:	dce9      	bgt.n	8108206 <prvUnlockQueue+0x16>
 8108232:	e000      	b.n	8108236 <prvUnlockQueue+0x46>
					break;
 8108234:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8108236:	687b      	ldr	r3, [r7, #4]
 8108238:	22ff      	movs	r2, #255	; 0xff
 810823a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 810823e:	f001 fc33 	bl	8109aa8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8108242:	f001 fc03 	bl	8109a4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8108246:	687b      	ldr	r3, [r7, #4]
 8108248:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810824c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 810824e:	e011      	b.n	8108274 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8108250:	687b      	ldr	r3, [r7, #4]
 8108252:	691b      	ldr	r3, [r3, #16]
 8108254:	2b00      	cmp	r3, #0
 8108256:	d012      	beq.n	810827e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8108258:	687b      	ldr	r3, [r7, #4]
 810825a:	3310      	adds	r3, #16
 810825c:	4618      	mov	r0, r3
 810825e:	f000 fcf5 	bl	8108c4c <xTaskRemoveFromEventList>
 8108262:	4603      	mov	r3, r0
 8108264:	2b00      	cmp	r3, #0
 8108266:	d001      	beq.n	810826c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8108268:	f000 fdc8 	bl	8108dfc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 810826c:	7bbb      	ldrb	r3, [r7, #14]
 810826e:	3b01      	subs	r3, #1
 8108270:	b2db      	uxtb	r3, r3
 8108272:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8108274:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8108278:	2b00      	cmp	r3, #0
 810827a:	dce9      	bgt.n	8108250 <prvUnlockQueue+0x60>
 810827c:	e000      	b.n	8108280 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 810827e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8108280:	687b      	ldr	r3, [r7, #4]
 8108282:	22ff      	movs	r2, #255	; 0xff
 8108284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8108288:	f001 fc0e 	bl	8109aa8 <vPortExitCritical>
}
 810828c:	bf00      	nop
 810828e:	3710      	adds	r7, #16
 8108290:	46bd      	mov	sp, r7
 8108292:	bd80      	pop	{r7, pc}

08108294 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8108294:	b580      	push	{r7, lr}
 8108296:	b084      	sub	sp, #16
 8108298:	af00      	add	r7, sp, #0
 810829a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810829c:	f001 fbd6 	bl	8109a4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 81082a0:	687b      	ldr	r3, [r7, #4]
 81082a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81082a4:	2b00      	cmp	r3, #0
 81082a6:	d102      	bne.n	81082ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 81082a8:	2301      	movs	r3, #1
 81082aa:	60fb      	str	r3, [r7, #12]
 81082ac:	e001      	b.n	81082b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 81082ae:	2300      	movs	r3, #0
 81082b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 81082b2:	f001 fbf9 	bl	8109aa8 <vPortExitCritical>

	return xReturn;
 81082b6:	68fb      	ldr	r3, [r7, #12]
}
 81082b8:	4618      	mov	r0, r3
 81082ba:	3710      	adds	r7, #16
 81082bc:	46bd      	mov	sp, r7
 81082be:	bd80      	pop	{r7, pc}

081082c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 81082c0:	b580      	push	{r7, lr}
 81082c2:	b084      	sub	sp, #16
 81082c4:	af00      	add	r7, sp, #0
 81082c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 81082c8:	f001 fbc0 	bl	8109a4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 81082cc:	687b      	ldr	r3, [r7, #4]
 81082ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 81082d0:	687b      	ldr	r3, [r7, #4]
 81082d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81082d4:	429a      	cmp	r2, r3
 81082d6:	d102      	bne.n	81082de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 81082d8:	2301      	movs	r3, #1
 81082da:	60fb      	str	r3, [r7, #12]
 81082dc:	e001      	b.n	81082e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 81082de:	2300      	movs	r3, #0
 81082e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 81082e2:	f001 fbe1 	bl	8109aa8 <vPortExitCritical>

	return xReturn;
 81082e6:	68fb      	ldr	r3, [r7, #12]
}
 81082e8:	4618      	mov	r0, r3
 81082ea:	3710      	adds	r7, #16
 81082ec:	46bd      	mov	sp, r7
 81082ee:	bd80      	pop	{r7, pc}

081082f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 81082f0:	b480      	push	{r7}
 81082f2:	b085      	sub	sp, #20
 81082f4:	af00      	add	r7, sp, #0
 81082f6:	6078      	str	r0, [r7, #4]
 81082f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 81082fa:	2300      	movs	r3, #0
 81082fc:	60fb      	str	r3, [r7, #12]
 81082fe:	e014      	b.n	810832a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8108300:	4a0e      	ldr	r2, [pc, #56]	; (810833c <vQueueAddToRegistry+0x4c>)
 8108302:	68fb      	ldr	r3, [r7, #12]
 8108304:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8108308:	2b00      	cmp	r3, #0
 810830a:	d10b      	bne.n	8108324 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 810830c:	490b      	ldr	r1, [pc, #44]	; (810833c <vQueueAddToRegistry+0x4c>)
 810830e:	68fb      	ldr	r3, [r7, #12]
 8108310:	683a      	ldr	r2, [r7, #0]
 8108312:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8108316:	4a09      	ldr	r2, [pc, #36]	; (810833c <vQueueAddToRegistry+0x4c>)
 8108318:	68fb      	ldr	r3, [r7, #12]
 810831a:	00db      	lsls	r3, r3, #3
 810831c:	4413      	add	r3, r2
 810831e:	687a      	ldr	r2, [r7, #4]
 8108320:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8108322:	e005      	b.n	8108330 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8108324:	68fb      	ldr	r3, [r7, #12]
 8108326:	3301      	adds	r3, #1
 8108328:	60fb      	str	r3, [r7, #12]
 810832a:	68fb      	ldr	r3, [r7, #12]
 810832c:	2b07      	cmp	r3, #7
 810832e:	d9e7      	bls.n	8108300 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8108330:	bf00      	nop
 8108332:	3714      	adds	r7, #20
 8108334:	46bd      	mov	sp, r7
 8108336:	f85d 7b04 	ldr.w	r7, [sp], #4
 810833a:	4770      	bx	lr
 810833c:	1000557c 	.word	0x1000557c

08108340 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8108340:	b580      	push	{r7, lr}
 8108342:	b086      	sub	sp, #24
 8108344:	af00      	add	r7, sp, #0
 8108346:	60f8      	str	r0, [r7, #12]
 8108348:	60b9      	str	r1, [r7, #8]
 810834a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 810834c:	68fb      	ldr	r3, [r7, #12]
 810834e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8108350:	f001 fb7c 	bl	8109a4c <vPortEnterCritical>
 8108354:	697b      	ldr	r3, [r7, #20]
 8108356:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810835a:	b25b      	sxtb	r3, r3
 810835c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8108360:	d103      	bne.n	810836a <vQueueWaitForMessageRestricted+0x2a>
 8108362:	697b      	ldr	r3, [r7, #20]
 8108364:	2200      	movs	r2, #0
 8108366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810836a:	697b      	ldr	r3, [r7, #20]
 810836c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8108370:	b25b      	sxtb	r3, r3
 8108372:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8108376:	d103      	bne.n	8108380 <vQueueWaitForMessageRestricted+0x40>
 8108378:	697b      	ldr	r3, [r7, #20]
 810837a:	2200      	movs	r2, #0
 810837c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8108380:	f001 fb92 	bl	8109aa8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8108384:	697b      	ldr	r3, [r7, #20]
 8108386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108388:	2b00      	cmp	r3, #0
 810838a:	d106      	bne.n	810839a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 810838c:	697b      	ldr	r3, [r7, #20]
 810838e:	3324      	adds	r3, #36	; 0x24
 8108390:	687a      	ldr	r2, [r7, #4]
 8108392:	68b9      	ldr	r1, [r7, #8]
 8108394:	4618      	mov	r0, r3
 8108396:	f000 fc2f 	bl	8108bf8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 810839a:	6978      	ldr	r0, [r7, #20]
 810839c:	f7ff ff28 	bl	81081f0 <prvUnlockQueue>
	}
 81083a0:	bf00      	nop
 81083a2:	3718      	adds	r7, #24
 81083a4:	46bd      	mov	sp, r7
 81083a6:	bd80      	pop	{r7, pc}

081083a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 81083a8:	b580      	push	{r7, lr}
 81083aa:	b08e      	sub	sp, #56	; 0x38
 81083ac:	af04      	add	r7, sp, #16
 81083ae:	60f8      	str	r0, [r7, #12]
 81083b0:	60b9      	str	r1, [r7, #8]
 81083b2:	607a      	str	r2, [r7, #4]
 81083b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 81083b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81083b8:	2b00      	cmp	r3, #0
 81083ba:	d109      	bne.n	81083d0 <xTaskCreateStatic+0x28>
 81083bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 81083c0:	f383 8811 	msr	BASEPRI, r3
 81083c4:	f3bf 8f6f 	isb	sy
 81083c8:	f3bf 8f4f 	dsb	sy
 81083cc:	623b      	str	r3, [r7, #32]
 81083ce:	e7fe      	b.n	81083ce <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 81083d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81083d2:	2b00      	cmp	r3, #0
 81083d4:	d109      	bne.n	81083ea <xTaskCreateStatic+0x42>
 81083d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 81083da:	f383 8811 	msr	BASEPRI, r3
 81083de:	f3bf 8f6f 	isb	sy
 81083e2:	f3bf 8f4f 	dsb	sy
 81083e6:	61fb      	str	r3, [r7, #28]
 81083e8:	e7fe      	b.n	81083e8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 81083ea:	235c      	movs	r3, #92	; 0x5c
 81083ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 81083ee:	693b      	ldr	r3, [r7, #16]
 81083f0:	2b5c      	cmp	r3, #92	; 0x5c
 81083f2:	d009      	beq.n	8108408 <xTaskCreateStatic+0x60>
 81083f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81083f8:	f383 8811 	msr	BASEPRI, r3
 81083fc:	f3bf 8f6f 	isb	sy
 8108400:	f3bf 8f4f 	dsb	sy
 8108404:	61bb      	str	r3, [r7, #24]
 8108406:	e7fe      	b.n	8108406 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8108408:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 810840a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810840c:	2b00      	cmp	r3, #0
 810840e:	d01e      	beq.n	810844e <xTaskCreateStatic+0xa6>
 8108410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108412:	2b00      	cmp	r3, #0
 8108414:	d01b      	beq.n	810844e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8108416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108418:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 810841a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810841c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810841e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8108420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108422:	2202      	movs	r2, #2
 8108424:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8108428:	2300      	movs	r3, #0
 810842a:	9303      	str	r3, [sp, #12]
 810842c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810842e:	9302      	str	r3, [sp, #8]
 8108430:	f107 0314 	add.w	r3, r7, #20
 8108434:	9301      	str	r3, [sp, #4]
 8108436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108438:	9300      	str	r3, [sp, #0]
 810843a:	683b      	ldr	r3, [r7, #0]
 810843c:	687a      	ldr	r2, [r7, #4]
 810843e:	68b9      	ldr	r1, [r7, #8]
 8108440:	68f8      	ldr	r0, [r7, #12]
 8108442:	f000 f850 	bl	81084e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8108446:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8108448:	f000 f8dc 	bl	8108604 <prvAddNewTaskToReadyList>
 810844c:	e001      	b.n	8108452 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 810844e:	2300      	movs	r3, #0
 8108450:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8108452:	697b      	ldr	r3, [r7, #20]
	}
 8108454:	4618      	mov	r0, r3
 8108456:	3728      	adds	r7, #40	; 0x28
 8108458:	46bd      	mov	sp, r7
 810845a:	bd80      	pop	{r7, pc}

0810845c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 810845c:	b580      	push	{r7, lr}
 810845e:	b08c      	sub	sp, #48	; 0x30
 8108460:	af04      	add	r7, sp, #16
 8108462:	60f8      	str	r0, [r7, #12]
 8108464:	60b9      	str	r1, [r7, #8]
 8108466:	603b      	str	r3, [r7, #0]
 8108468:	4613      	mov	r3, r2
 810846a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 810846c:	88fb      	ldrh	r3, [r7, #6]
 810846e:	009b      	lsls	r3, r3, #2
 8108470:	4618      	mov	r0, r3
 8108472:	f001 fc05 	bl	8109c80 <pvPortMalloc>
 8108476:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8108478:	697b      	ldr	r3, [r7, #20]
 810847a:	2b00      	cmp	r3, #0
 810847c:	d00e      	beq.n	810849c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 810847e:	205c      	movs	r0, #92	; 0x5c
 8108480:	f001 fbfe 	bl	8109c80 <pvPortMalloc>
 8108484:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8108486:	69fb      	ldr	r3, [r7, #28]
 8108488:	2b00      	cmp	r3, #0
 810848a:	d003      	beq.n	8108494 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 810848c:	69fb      	ldr	r3, [r7, #28]
 810848e:	697a      	ldr	r2, [r7, #20]
 8108490:	631a      	str	r2, [r3, #48]	; 0x30
 8108492:	e005      	b.n	81084a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8108494:	6978      	ldr	r0, [r7, #20]
 8108496:	f001 fcb5 	bl	8109e04 <vPortFree>
 810849a:	e001      	b.n	81084a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 810849c:	2300      	movs	r3, #0
 810849e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 81084a0:	69fb      	ldr	r3, [r7, #28]
 81084a2:	2b00      	cmp	r3, #0
 81084a4:	d017      	beq.n	81084d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 81084a6:	69fb      	ldr	r3, [r7, #28]
 81084a8:	2200      	movs	r2, #0
 81084aa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 81084ae:	88fa      	ldrh	r2, [r7, #6]
 81084b0:	2300      	movs	r3, #0
 81084b2:	9303      	str	r3, [sp, #12]
 81084b4:	69fb      	ldr	r3, [r7, #28]
 81084b6:	9302      	str	r3, [sp, #8]
 81084b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81084ba:	9301      	str	r3, [sp, #4]
 81084bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81084be:	9300      	str	r3, [sp, #0]
 81084c0:	683b      	ldr	r3, [r7, #0]
 81084c2:	68b9      	ldr	r1, [r7, #8]
 81084c4:	68f8      	ldr	r0, [r7, #12]
 81084c6:	f000 f80e 	bl	81084e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 81084ca:	69f8      	ldr	r0, [r7, #28]
 81084cc:	f000 f89a 	bl	8108604 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 81084d0:	2301      	movs	r3, #1
 81084d2:	61bb      	str	r3, [r7, #24]
 81084d4:	e002      	b.n	81084dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 81084d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 81084da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 81084dc:	69bb      	ldr	r3, [r7, #24]
	}
 81084de:	4618      	mov	r0, r3
 81084e0:	3720      	adds	r7, #32
 81084e2:	46bd      	mov	sp, r7
 81084e4:	bd80      	pop	{r7, pc}

081084e6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 81084e6:	b580      	push	{r7, lr}
 81084e8:	b088      	sub	sp, #32
 81084ea:	af00      	add	r7, sp, #0
 81084ec:	60f8      	str	r0, [r7, #12]
 81084ee:	60b9      	str	r1, [r7, #8]
 81084f0:	607a      	str	r2, [r7, #4]
 81084f2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 81084f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81084f6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 81084f8:	687b      	ldr	r3, [r7, #4]
 81084fa:	009b      	lsls	r3, r3, #2
 81084fc:	461a      	mov	r2, r3
 81084fe:	21a5      	movs	r1, #165	; 0xa5
 8108500:	f001 fee1 	bl	810a2c6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8108504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108506:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8108508:	687b      	ldr	r3, [r7, #4]
 810850a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 810850e:	3b01      	subs	r3, #1
 8108510:	009b      	lsls	r3, r3, #2
 8108512:	4413      	add	r3, r2
 8108514:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8108516:	69bb      	ldr	r3, [r7, #24]
 8108518:	f023 0307 	bic.w	r3, r3, #7
 810851c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 810851e:	69bb      	ldr	r3, [r7, #24]
 8108520:	f003 0307 	and.w	r3, r3, #7
 8108524:	2b00      	cmp	r3, #0
 8108526:	d009      	beq.n	810853c <prvInitialiseNewTask+0x56>
 8108528:	f04f 0350 	mov.w	r3, #80	; 0x50
 810852c:	f383 8811 	msr	BASEPRI, r3
 8108530:	f3bf 8f6f 	isb	sy
 8108534:	f3bf 8f4f 	dsb	sy
 8108538:	617b      	str	r3, [r7, #20]
 810853a:	e7fe      	b.n	810853a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 810853c:	68bb      	ldr	r3, [r7, #8]
 810853e:	2b00      	cmp	r3, #0
 8108540:	d01f      	beq.n	8108582 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8108542:	2300      	movs	r3, #0
 8108544:	61fb      	str	r3, [r7, #28]
 8108546:	e012      	b.n	810856e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8108548:	68ba      	ldr	r2, [r7, #8]
 810854a:	69fb      	ldr	r3, [r7, #28]
 810854c:	4413      	add	r3, r2
 810854e:	7819      	ldrb	r1, [r3, #0]
 8108550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8108552:	69fb      	ldr	r3, [r7, #28]
 8108554:	4413      	add	r3, r2
 8108556:	3334      	adds	r3, #52	; 0x34
 8108558:	460a      	mov	r2, r1
 810855a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 810855c:	68ba      	ldr	r2, [r7, #8]
 810855e:	69fb      	ldr	r3, [r7, #28]
 8108560:	4413      	add	r3, r2
 8108562:	781b      	ldrb	r3, [r3, #0]
 8108564:	2b00      	cmp	r3, #0
 8108566:	d006      	beq.n	8108576 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8108568:	69fb      	ldr	r3, [r7, #28]
 810856a:	3301      	adds	r3, #1
 810856c:	61fb      	str	r3, [r7, #28]
 810856e:	69fb      	ldr	r3, [r7, #28]
 8108570:	2b0f      	cmp	r3, #15
 8108572:	d9e9      	bls.n	8108548 <prvInitialiseNewTask+0x62>
 8108574:	e000      	b.n	8108578 <prvInitialiseNewTask+0x92>
			{
				break;
 8108576:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8108578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810857a:	2200      	movs	r2, #0
 810857c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8108580:	e003      	b.n	810858a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8108582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108584:	2200      	movs	r2, #0
 8108586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 810858a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810858c:	2b37      	cmp	r3, #55	; 0x37
 810858e:	d901      	bls.n	8108594 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8108590:	2337      	movs	r3, #55	; 0x37
 8108592:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8108594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108596:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8108598:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 810859a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810859c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810859e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 81085a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81085a2:	2200      	movs	r2, #0
 81085a4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 81085a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81085a8:	3304      	adds	r3, #4
 81085aa:	4618      	mov	r0, r3
 81085ac:	f7ff f994 	bl	81078d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 81085b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81085b2:	3318      	adds	r3, #24
 81085b4:	4618      	mov	r0, r3
 81085b6:	f7ff f98f 	bl	81078d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 81085ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81085bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81085be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81085c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81085c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 81085c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81085c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 81085ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81085cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81085ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 81085d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81085d2:	2200      	movs	r2, #0
 81085d4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 81085d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81085d8:	2200      	movs	r2, #0
 81085da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 81085de:	683a      	ldr	r2, [r7, #0]
 81085e0:	68f9      	ldr	r1, [r7, #12]
 81085e2:	69b8      	ldr	r0, [r7, #24]
 81085e4:	f001 f90c 	bl	8109800 <pxPortInitialiseStack>
 81085e8:	4602      	mov	r2, r0
 81085ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81085ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 81085ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81085f0:	2b00      	cmp	r3, #0
 81085f2:	d002      	beq.n	81085fa <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 81085f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81085f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81085f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 81085fa:	bf00      	nop
 81085fc:	3720      	adds	r7, #32
 81085fe:	46bd      	mov	sp, r7
 8108600:	bd80      	pop	{r7, pc}
	...

08108604 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8108604:	b580      	push	{r7, lr}
 8108606:	b082      	sub	sp, #8
 8108608:	af00      	add	r7, sp, #0
 810860a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 810860c:	f001 fa1e 	bl	8109a4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8108610:	4b2d      	ldr	r3, [pc, #180]	; (81086c8 <prvAddNewTaskToReadyList+0xc4>)
 8108612:	681b      	ldr	r3, [r3, #0]
 8108614:	3301      	adds	r3, #1
 8108616:	4a2c      	ldr	r2, [pc, #176]	; (81086c8 <prvAddNewTaskToReadyList+0xc4>)
 8108618:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 810861a:	4b2c      	ldr	r3, [pc, #176]	; (81086cc <prvAddNewTaskToReadyList+0xc8>)
 810861c:	681b      	ldr	r3, [r3, #0]
 810861e:	2b00      	cmp	r3, #0
 8108620:	d109      	bne.n	8108636 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8108622:	4a2a      	ldr	r2, [pc, #168]	; (81086cc <prvAddNewTaskToReadyList+0xc8>)
 8108624:	687b      	ldr	r3, [r7, #4]
 8108626:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8108628:	4b27      	ldr	r3, [pc, #156]	; (81086c8 <prvAddNewTaskToReadyList+0xc4>)
 810862a:	681b      	ldr	r3, [r3, #0]
 810862c:	2b01      	cmp	r3, #1
 810862e:	d110      	bne.n	8108652 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8108630:	f000 fc08 	bl	8108e44 <prvInitialiseTaskLists>
 8108634:	e00d      	b.n	8108652 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8108636:	4b26      	ldr	r3, [pc, #152]	; (81086d0 <prvAddNewTaskToReadyList+0xcc>)
 8108638:	681b      	ldr	r3, [r3, #0]
 810863a:	2b00      	cmp	r3, #0
 810863c:	d109      	bne.n	8108652 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 810863e:	4b23      	ldr	r3, [pc, #140]	; (81086cc <prvAddNewTaskToReadyList+0xc8>)
 8108640:	681b      	ldr	r3, [r3, #0]
 8108642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8108644:	687b      	ldr	r3, [r7, #4]
 8108646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108648:	429a      	cmp	r2, r3
 810864a:	d802      	bhi.n	8108652 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 810864c:	4a1f      	ldr	r2, [pc, #124]	; (81086cc <prvAddNewTaskToReadyList+0xc8>)
 810864e:	687b      	ldr	r3, [r7, #4]
 8108650:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8108652:	4b20      	ldr	r3, [pc, #128]	; (81086d4 <prvAddNewTaskToReadyList+0xd0>)
 8108654:	681b      	ldr	r3, [r3, #0]
 8108656:	3301      	adds	r3, #1
 8108658:	4a1e      	ldr	r2, [pc, #120]	; (81086d4 <prvAddNewTaskToReadyList+0xd0>)
 810865a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 810865c:	4b1d      	ldr	r3, [pc, #116]	; (81086d4 <prvAddNewTaskToReadyList+0xd0>)
 810865e:	681a      	ldr	r2, [r3, #0]
 8108660:	687b      	ldr	r3, [r7, #4]
 8108662:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8108664:	687b      	ldr	r3, [r7, #4]
 8108666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8108668:	4b1b      	ldr	r3, [pc, #108]	; (81086d8 <prvAddNewTaskToReadyList+0xd4>)
 810866a:	681b      	ldr	r3, [r3, #0]
 810866c:	429a      	cmp	r2, r3
 810866e:	d903      	bls.n	8108678 <prvAddNewTaskToReadyList+0x74>
 8108670:	687b      	ldr	r3, [r7, #4]
 8108672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108674:	4a18      	ldr	r2, [pc, #96]	; (81086d8 <prvAddNewTaskToReadyList+0xd4>)
 8108676:	6013      	str	r3, [r2, #0]
 8108678:	687b      	ldr	r3, [r7, #4]
 810867a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810867c:	4613      	mov	r3, r2
 810867e:	009b      	lsls	r3, r3, #2
 8108680:	4413      	add	r3, r2
 8108682:	009b      	lsls	r3, r3, #2
 8108684:	4a15      	ldr	r2, [pc, #84]	; (81086dc <prvAddNewTaskToReadyList+0xd8>)
 8108686:	441a      	add	r2, r3
 8108688:	687b      	ldr	r3, [r7, #4]
 810868a:	3304      	adds	r3, #4
 810868c:	4619      	mov	r1, r3
 810868e:	4610      	mov	r0, r2
 8108690:	f7ff f92f 	bl	81078f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8108694:	f001 fa08 	bl	8109aa8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8108698:	4b0d      	ldr	r3, [pc, #52]	; (81086d0 <prvAddNewTaskToReadyList+0xcc>)
 810869a:	681b      	ldr	r3, [r3, #0]
 810869c:	2b00      	cmp	r3, #0
 810869e:	d00e      	beq.n	81086be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 81086a0:	4b0a      	ldr	r3, [pc, #40]	; (81086cc <prvAddNewTaskToReadyList+0xc8>)
 81086a2:	681b      	ldr	r3, [r3, #0]
 81086a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81086a6:	687b      	ldr	r3, [r7, #4]
 81086a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81086aa:	429a      	cmp	r2, r3
 81086ac:	d207      	bcs.n	81086be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 81086ae:	4b0c      	ldr	r3, [pc, #48]	; (81086e0 <prvAddNewTaskToReadyList+0xdc>)
 81086b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81086b4:	601a      	str	r2, [r3, #0]
 81086b6:	f3bf 8f4f 	dsb	sy
 81086ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 81086be:	bf00      	nop
 81086c0:	3708      	adds	r7, #8
 81086c2:	46bd      	mov	sp, r7
 81086c4:	bd80      	pop	{r7, pc}
 81086c6:	bf00      	nop
 81086c8:	10000db8 	.word	0x10000db8
 81086cc:	100008e4 	.word	0x100008e4
 81086d0:	10000dc4 	.word	0x10000dc4
 81086d4:	10000dd4 	.word	0x10000dd4
 81086d8:	10000dc0 	.word	0x10000dc0
 81086dc:	100008e8 	.word	0x100008e8
 81086e0:	e000ed04 	.word	0xe000ed04

081086e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 81086e4:	b580      	push	{r7, lr}
 81086e6:	b084      	sub	sp, #16
 81086e8:	af00      	add	r7, sp, #0
 81086ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 81086ec:	2300      	movs	r3, #0
 81086ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 81086f0:	687b      	ldr	r3, [r7, #4]
 81086f2:	2b00      	cmp	r3, #0
 81086f4:	d016      	beq.n	8108724 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 81086f6:	4b13      	ldr	r3, [pc, #76]	; (8108744 <vTaskDelay+0x60>)
 81086f8:	681b      	ldr	r3, [r3, #0]
 81086fa:	2b00      	cmp	r3, #0
 81086fc:	d009      	beq.n	8108712 <vTaskDelay+0x2e>
 81086fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108702:	f383 8811 	msr	BASEPRI, r3
 8108706:	f3bf 8f6f 	isb	sy
 810870a:	f3bf 8f4f 	dsb	sy
 810870e:	60bb      	str	r3, [r7, #8]
 8108710:	e7fe      	b.n	8108710 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8108712:	f000 f87f 	bl	8108814 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8108716:	2100      	movs	r1, #0
 8108718:	6878      	ldr	r0, [r7, #4]
 810871a:	f000 fcd7 	bl	81090cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 810871e:	f000 f887 	bl	8108830 <xTaskResumeAll>
 8108722:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8108724:	68fb      	ldr	r3, [r7, #12]
 8108726:	2b00      	cmp	r3, #0
 8108728:	d107      	bne.n	810873a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 810872a:	4b07      	ldr	r3, [pc, #28]	; (8108748 <vTaskDelay+0x64>)
 810872c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8108730:	601a      	str	r2, [r3, #0]
 8108732:	f3bf 8f4f 	dsb	sy
 8108736:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810873a:	bf00      	nop
 810873c:	3710      	adds	r7, #16
 810873e:	46bd      	mov	sp, r7
 8108740:	bd80      	pop	{r7, pc}
 8108742:	bf00      	nop
 8108744:	10000de0 	.word	0x10000de0
 8108748:	e000ed04 	.word	0xe000ed04

0810874c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 810874c:	b580      	push	{r7, lr}
 810874e:	b08a      	sub	sp, #40	; 0x28
 8108750:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8108752:	2300      	movs	r3, #0
 8108754:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8108756:	2300      	movs	r3, #0
 8108758:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 810875a:	463a      	mov	r2, r7
 810875c:	1d39      	adds	r1, r7, #4
 810875e:	f107 0308 	add.w	r3, r7, #8
 8108762:	4618      	mov	r0, r3
 8108764:	f7ff f864 	bl	8107830 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8108768:	6839      	ldr	r1, [r7, #0]
 810876a:	687b      	ldr	r3, [r7, #4]
 810876c:	68ba      	ldr	r2, [r7, #8]
 810876e:	9202      	str	r2, [sp, #8]
 8108770:	9301      	str	r3, [sp, #4]
 8108772:	2300      	movs	r3, #0
 8108774:	9300      	str	r3, [sp, #0]
 8108776:	2300      	movs	r3, #0
 8108778:	460a      	mov	r2, r1
 810877a:	4920      	ldr	r1, [pc, #128]	; (81087fc <vTaskStartScheduler+0xb0>)
 810877c:	4820      	ldr	r0, [pc, #128]	; (8108800 <vTaskStartScheduler+0xb4>)
 810877e:	f7ff fe13 	bl	81083a8 <xTaskCreateStatic>
 8108782:	4602      	mov	r2, r0
 8108784:	4b1f      	ldr	r3, [pc, #124]	; (8108804 <vTaskStartScheduler+0xb8>)
 8108786:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8108788:	4b1e      	ldr	r3, [pc, #120]	; (8108804 <vTaskStartScheduler+0xb8>)
 810878a:	681b      	ldr	r3, [r3, #0]
 810878c:	2b00      	cmp	r3, #0
 810878e:	d002      	beq.n	8108796 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8108790:	2301      	movs	r3, #1
 8108792:	617b      	str	r3, [r7, #20]
 8108794:	e001      	b.n	810879a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8108796:	2300      	movs	r3, #0
 8108798:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 810879a:	697b      	ldr	r3, [r7, #20]
 810879c:	2b01      	cmp	r3, #1
 810879e:	d102      	bne.n	81087a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 81087a0:	f000 fce8 	bl	8109174 <xTimerCreateTimerTask>
 81087a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 81087a6:	697b      	ldr	r3, [r7, #20]
 81087a8:	2b01      	cmp	r3, #1
 81087aa:	d115      	bne.n	81087d8 <vTaskStartScheduler+0x8c>
 81087ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 81087b0:	f383 8811 	msr	BASEPRI, r3
 81087b4:	f3bf 8f6f 	isb	sy
 81087b8:	f3bf 8f4f 	dsb	sy
 81087bc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 81087be:	4b12      	ldr	r3, [pc, #72]	; (8108808 <vTaskStartScheduler+0xbc>)
 81087c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 81087c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 81087c6:	4b11      	ldr	r3, [pc, #68]	; (810880c <vTaskStartScheduler+0xc0>)
 81087c8:	2201      	movs	r2, #1
 81087ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 81087cc:	4b10      	ldr	r3, [pc, #64]	; (8108810 <vTaskStartScheduler+0xc4>)
 81087ce:	2200      	movs	r2, #0
 81087d0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 81087d2:	f001 f89d 	bl	8109910 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 81087d6:	e00d      	b.n	81087f4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 81087d8:	697b      	ldr	r3, [r7, #20]
 81087da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81087de:	d109      	bne.n	81087f4 <vTaskStartScheduler+0xa8>
 81087e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81087e4:	f383 8811 	msr	BASEPRI, r3
 81087e8:	f3bf 8f6f 	isb	sy
 81087ec:	f3bf 8f4f 	dsb	sy
 81087f0:	60fb      	str	r3, [r7, #12]
 81087f2:	e7fe      	b.n	81087f2 <vTaskStartScheduler+0xa6>
}
 81087f4:	bf00      	nop
 81087f6:	3718      	adds	r7, #24
 81087f8:	46bd      	mov	sp, r7
 81087fa:	bd80      	pop	{r7, pc}
 81087fc:	0810bed4 	.word	0x0810bed4
 8108800:	08108e15 	.word	0x08108e15
 8108804:	10000ddc 	.word	0x10000ddc
 8108808:	10000dd8 	.word	0x10000dd8
 810880c:	10000dc4 	.word	0x10000dc4
 8108810:	10000dbc 	.word	0x10000dbc

08108814 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8108814:	b480      	push	{r7}
 8108816:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8108818:	4b04      	ldr	r3, [pc, #16]	; (810882c <vTaskSuspendAll+0x18>)
 810881a:	681b      	ldr	r3, [r3, #0]
 810881c:	3301      	adds	r3, #1
 810881e:	4a03      	ldr	r2, [pc, #12]	; (810882c <vTaskSuspendAll+0x18>)
 8108820:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8108822:	bf00      	nop
 8108824:	46bd      	mov	sp, r7
 8108826:	f85d 7b04 	ldr.w	r7, [sp], #4
 810882a:	4770      	bx	lr
 810882c:	10000de0 	.word	0x10000de0

08108830 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8108830:	b580      	push	{r7, lr}
 8108832:	b084      	sub	sp, #16
 8108834:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8108836:	2300      	movs	r3, #0
 8108838:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 810883a:	2300      	movs	r3, #0
 810883c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 810883e:	4b41      	ldr	r3, [pc, #260]	; (8108944 <xTaskResumeAll+0x114>)
 8108840:	681b      	ldr	r3, [r3, #0]
 8108842:	2b00      	cmp	r3, #0
 8108844:	d109      	bne.n	810885a <xTaskResumeAll+0x2a>
 8108846:	f04f 0350 	mov.w	r3, #80	; 0x50
 810884a:	f383 8811 	msr	BASEPRI, r3
 810884e:	f3bf 8f6f 	isb	sy
 8108852:	f3bf 8f4f 	dsb	sy
 8108856:	603b      	str	r3, [r7, #0]
 8108858:	e7fe      	b.n	8108858 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 810885a:	f001 f8f7 	bl	8109a4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 810885e:	4b39      	ldr	r3, [pc, #228]	; (8108944 <xTaskResumeAll+0x114>)
 8108860:	681b      	ldr	r3, [r3, #0]
 8108862:	3b01      	subs	r3, #1
 8108864:	4a37      	ldr	r2, [pc, #220]	; (8108944 <xTaskResumeAll+0x114>)
 8108866:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8108868:	4b36      	ldr	r3, [pc, #216]	; (8108944 <xTaskResumeAll+0x114>)
 810886a:	681b      	ldr	r3, [r3, #0]
 810886c:	2b00      	cmp	r3, #0
 810886e:	d162      	bne.n	8108936 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8108870:	4b35      	ldr	r3, [pc, #212]	; (8108948 <xTaskResumeAll+0x118>)
 8108872:	681b      	ldr	r3, [r3, #0]
 8108874:	2b00      	cmp	r3, #0
 8108876:	d05e      	beq.n	8108936 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8108878:	e02f      	b.n	81088da <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810887a:	4b34      	ldr	r3, [pc, #208]	; (810894c <xTaskResumeAll+0x11c>)
 810887c:	68db      	ldr	r3, [r3, #12]
 810887e:	68db      	ldr	r3, [r3, #12]
 8108880:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8108882:	68fb      	ldr	r3, [r7, #12]
 8108884:	3318      	adds	r3, #24
 8108886:	4618      	mov	r0, r3
 8108888:	f7ff f890 	bl	81079ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810888c:	68fb      	ldr	r3, [r7, #12]
 810888e:	3304      	adds	r3, #4
 8108890:	4618      	mov	r0, r3
 8108892:	f7ff f88b 	bl	81079ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8108896:	68fb      	ldr	r3, [r7, #12]
 8108898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810889a:	4b2d      	ldr	r3, [pc, #180]	; (8108950 <xTaskResumeAll+0x120>)
 810889c:	681b      	ldr	r3, [r3, #0]
 810889e:	429a      	cmp	r2, r3
 81088a0:	d903      	bls.n	81088aa <xTaskResumeAll+0x7a>
 81088a2:	68fb      	ldr	r3, [r7, #12]
 81088a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81088a6:	4a2a      	ldr	r2, [pc, #168]	; (8108950 <xTaskResumeAll+0x120>)
 81088a8:	6013      	str	r3, [r2, #0]
 81088aa:	68fb      	ldr	r3, [r7, #12]
 81088ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81088ae:	4613      	mov	r3, r2
 81088b0:	009b      	lsls	r3, r3, #2
 81088b2:	4413      	add	r3, r2
 81088b4:	009b      	lsls	r3, r3, #2
 81088b6:	4a27      	ldr	r2, [pc, #156]	; (8108954 <xTaskResumeAll+0x124>)
 81088b8:	441a      	add	r2, r3
 81088ba:	68fb      	ldr	r3, [r7, #12]
 81088bc:	3304      	adds	r3, #4
 81088be:	4619      	mov	r1, r3
 81088c0:	4610      	mov	r0, r2
 81088c2:	f7ff f816 	bl	81078f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 81088c6:	68fb      	ldr	r3, [r7, #12]
 81088c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81088ca:	4b23      	ldr	r3, [pc, #140]	; (8108958 <xTaskResumeAll+0x128>)
 81088cc:	681b      	ldr	r3, [r3, #0]
 81088ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81088d0:	429a      	cmp	r2, r3
 81088d2:	d302      	bcc.n	81088da <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 81088d4:	4b21      	ldr	r3, [pc, #132]	; (810895c <xTaskResumeAll+0x12c>)
 81088d6:	2201      	movs	r2, #1
 81088d8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 81088da:	4b1c      	ldr	r3, [pc, #112]	; (810894c <xTaskResumeAll+0x11c>)
 81088dc:	681b      	ldr	r3, [r3, #0]
 81088de:	2b00      	cmp	r3, #0
 81088e0:	d1cb      	bne.n	810887a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 81088e2:	68fb      	ldr	r3, [r7, #12]
 81088e4:	2b00      	cmp	r3, #0
 81088e6:	d001      	beq.n	81088ec <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 81088e8:	f000 fb46 	bl	8108f78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 81088ec:	4b1c      	ldr	r3, [pc, #112]	; (8108960 <xTaskResumeAll+0x130>)
 81088ee:	681b      	ldr	r3, [r3, #0]
 81088f0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 81088f2:	687b      	ldr	r3, [r7, #4]
 81088f4:	2b00      	cmp	r3, #0
 81088f6:	d010      	beq.n	810891a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 81088f8:	f000 f846 	bl	8108988 <xTaskIncrementTick>
 81088fc:	4603      	mov	r3, r0
 81088fe:	2b00      	cmp	r3, #0
 8108900:	d002      	beq.n	8108908 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8108902:	4b16      	ldr	r3, [pc, #88]	; (810895c <xTaskResumeAll+0x12c>)
 8108904:	2201      	movs	r2, #1
 8108906:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8108908:	687b      	ldr	r3, [r7, #4]
 810890a:	3b01      	subs	r3, #1
 810890c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 810890e:	687b      	ldr	r3, [r7, #4]
 8108910:	2b00      	cmp	r3, #0
 8108912:	d1f1      	bne.n	81088f8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8108914:	4b12      	ldr	r3, [pc, #72]	; (8108960 <xTaskResumeAll+0x130>)
 8108916:	2200      	movs	r2, #0
 8108918:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 810891a:	4b10      	ldr	r3, [pc, #64]	; (810895c <xTaskResumeAll+0x12c>)
 810891c:	681b      	ldr	r3, [r3, #0]
 810891e:	2b00      	cmp	r3, #0
 8108920:	d009      	beq.n	8108936 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8108922:	2301      	movs	r3, #1
 8108924:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8108926:	4b0f      	ldr	r3, [pc, #60]	; (8108964 <xTaskResumeAll+0x134>)
 8108928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810892c:	601a      	str	r2, [r3, #0]
 810892e:	f3bf 8f4f 	dsb	sy
 8108932:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8108936:	f001 f8b7 	bl	8109aa8 <vPortExitCritical>

	return xAlreadyYielded;
 810893a:	68bb      	ldr	r3, [r7, #8]
}
 810893c:	4618      	mov	r0, r3
 810893e:	3710      	adds	r7, #16
 8108940:	46bd      	mov	sp, r7
 8108942:	bd80      	pop	{r7, pc}
 8108944:	10000de0 	.word	0x10000de0
 8108948:	10000db8 	.word	0x10000db8
 810894c:	10000d78 	.word	0x10000d78
 8108950:	10000dc0 	.word	0x10000dc0
 8108954:	100008e8 	.word	0x100008e8
 8108958:	100008e4 	.word	0x100008e4
 810895c:	10000dcc 	.word	0x10000dcc
 8108960:	10000dc8 	.word	0x10000dc8
 8108964:	e000ed04 	.word	0xe000ed04

08108968 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8108968:	b480      	push	{r7}
 810896a:	b083      	sub	sp, #12
 810896c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 810896e:	4b05      	ldr	r3, [pc, #20]	; (8108984 <xTaskGetTickCount+0x1c>)
 8108970:	681b      	ldr	r3, [r3, #0]
 8108972:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8108974:	687b      	ldr	r3, [r7, #4]
}
 8108976:	4618      	mov	r0, r3
 8108978:	370c      	adds	r7, #12
 810897a:	46bd      	mov	sp, r7
 810897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108980:	4770      	bx	lr
 8108982:	bf00      	nop
 8108984:	10000dbc 	.word	0x10000dbc

08108988 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8108988:	b580      	push	{r7, lr}
 810898a:	b086      	sub	sp, #24
 810898c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 810898e:	2300      	movs	r3, #0
 8108990:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8108992:	4b4e      	ldr	r3, [pc, #312]	; (8108acc <xTaskIncrementTick+0x144>)
 8108994:	681b      	ldr	r3, [r3, #0]
 8108996:	2b00      	cmp	r3, #0
 8108998:	f040 8088 	bne.w	8108aac <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 810899c:	4b4c      	ldr	r3, [pc, #304]	; (8108ad0 <xTaskIncrementTick+0x148>)
 810899e:	681b      	ldr	r3, [r3, #0]
 81089a0:	3301      	adds	r3, #1
 81089a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 81089a4:	4a4a      	ldr	r2, [pc, #296]	; (8108ad0 <xTaskIncrementTick+0x148>)
 81089a6:	693b      	ldr	r3, [r7, #16]
 81089a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 81089aa:	693b      	ldr	r3, [r7, #16]
 81089ac:	2b00      	cmp	r3, #0
 81089ae:	d11f      	bne.n	81089f0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 81089b0:	4b48      	ldr	r3, [pc, #288]	; (8108ad4 <xTaskIncrementTick+0x14c>)
 81089b2:	681b      	ldr	r3, [r3, #0]
 81089b4:	681b      	ldr	r3, [r3, #0]
 81089b6:	2b00      	cmp	r3, #0
 81089b8:	d009      	beq.n	81089ce <xTaskIncrementTick+0x46>
 81089ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 81089be:	f383 8811 	msr	BASEPRI, r3
 81089c2:	f3bf 8f6f 	isb	sy
 81089c6:	f3bf 8f4f 	dsb	sy
 81089ca:	603b      	str	r3, [r7, #0]
 81089cc:	e7fe      	b.n	81089cc <xTaskIncrementTick+0x44>
 81089ce:	4b41      	ldr	r3, [pc, #260]	; (8108ad4 <xTaskIncrementTick+0x14c>)
 81089d0:	681b      	ldr	r3, [r3, #0]
 81089d2:	60fb      	str	r3, [r7, #12]
 81089d4:	4b40      	ldr	r3, [pc, #256]	; (8108ad8 <xTaskIncrementTick+0x150>)
 81089d6:	681b      	ldr	r3, [r3, #0]
 81089d8:	4a3e      	ldr	r2, [pc, #248]	; (8108ad4 <xTaskIncrementTick+0x14c>)
 81089da:	6013      	str	r3, [r2, #0]
 81089dc:	4a3e      	ldr	r2, [pc, #248]	; (8108ad8 <xTaskIncrementTick+0x150>)
 81089de:	68fb      	ldr	r3, [r7, #12]
 81089e0:	6013      	str	r3, [r2, #0]
 81089e2:	4b3e      	ldr	r3, [pc, #248]	; (8108adc <xTaskIncrementTick+0x154>)
 81089e4:	681b      	ldr	r3, [r3, #0]
 81089e6:	3301      	adds	r3, #1
 81089e8:	4a3c      	ldr	r2, [pc, #240]	; (8108adc <xTaskIncrementTick+0x154>)
 81089ea:	6013      	str	r3, [r2, #0]
 81089ec:	f000 fac4 	bl	8108f78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 81089f0:	4b3b      	ldr	r3, [pc, #236]	; (8108ae0 <xTaskIncrementTick+0x158>)
 81089f2:	681b      	ldr	r3, [r3, #0]
 81089f4:	693a      	ldr	r2, [r7, #16]
 81089f6:	429a      	cmp	r2, r3
 81089f8:	d349      	bcc.n	8108a8e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 81089fa:	4b36      	ldr	r3, [pc, #216]	; (8108ad4 <xTaskIncrementTick+0x14c>)
 81089fc:	681b      	ldr	r3, [r3, #0]
 81089fe:	681b      	ldr	r3, [r3, #0]
 8108a00:	2b00      	cmp	r3, #0
 8108a02:	d104      	bne.n	8108a0e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8108a04:	4b36      	ldr	r3, [pc, #216]	; (8108ae0 <xTaskIncrementTick+0x158>)
 8108a06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8108a0a:	601a      	str	r2, [r3, #0]
					break;
 8108a0c:	e03f      	b.n	8108a8e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8108a0e:	4b31      	ldr	r3, [pc, #196]	; (8108ad4 <xTaskIncrementTick+0x14c>)
 8108a10:	681b      	ldr	r3, [r3, #0]
 8108a12:	68db      	ldr	r3, [r3, #12]
 8108a14:	68db      	ldr	r3, [r3, #12]
 8108a16:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8108a18:	68bb      	ldr	r3, [r7, #8]
 8108a1a:	685b      	ldr	r3, [r3, #4]
 8108a1c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8108a1e:	693a      	ldr	r2, [r7, #16]
 8108a20:	687b      	ldr	r3, [r7, #4]
 8108a22:	429a      	cmp	r2, r3
 8108a24:	d203      	bcs.n	8108a2e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8108a26:	4a2e      	ldr	r2, [pc, #184]	; (8108ae0 <xTaskIncrementTick+0x158>)
 8108a28:	687b      	ldr	r3, [r7, #4]
 8108a2a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8108a2c:	e02f      	b.n	8108a8e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8108a2e:	68bb      	ldr	r3, [r7, #8]
 8108a30:	3304      	adds	r3, #4
 8108a32:	4618      	mov	r0, r3
 8108a34:	f7fe ffba 	bl	81079ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8108a38:	68bb      	ldr	r3, [r7, #8]
 8108a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108a3c:	2b00      	cmp	r3, #0
 8108a3e:	d004      	beq.n	8108a4a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8108a40:	68bb      	ldr	r3, [r7, #8]
 8108a42:	3318      	adds	r3, #24
 8108a44:	4618      	mov	r0, r3
 8108a46:	f7fe ffb1 	bl	81079ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8108a4a:	68bb      	ldr	r3, [r7, #8]
 8108a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8108a4e:	4b25      	ldr	r3, [pc, #148]	; (8108ae4 <xTaskIncrementTick+0x15c>)
 8108a50:	681b      	ldr	r3, [r3, #0]
 8108a52:	429a      	cmp	r2, r3
 8108a54:	d903      	bls.n	8108a5e <xTaskIncrementTick+0xd6>
 8108a56:	68bb      	ldr	r3, [r7, #8]
 8108a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108a5a:	4a22      	ldr	r2, [pc, #136]	; (8108ae4 <xTaskIncrementTick+0x15c>)
 8108a5c:	6013      	str	r3, [r2, #0]
 8108a5e:	68bb      	ldr	r3, [r7, #8]
 8108a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8108a62:	4613      	mov	r3, r2
 8108a64:	009b      	lsls	r3, r3, #2
 8108a66:	4413      	add	r3, r2
 8108a68:	009b      	lsls	r3, r3, #2
 8108a6a:	4a1f      	ldr	r2, [pc, #124]	; (8108ae8 <xTaskIncrementTick+0x160>)
 8108a6c:	441a      	add	r2, r3
 8108a6e:	68bb      	ldr	r3, [r7, #8]
 8108a70:	3304      	adds	r3, #4
 8108a72:	4619      	mov	r1, r3
 8108a74:	4610      	mov	r0, r2
 8108a76:	f7fe ff3c 	bl	81078f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8108a7a:	68bb      	ldr	r3, [r7, #8]
 8108a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8108a7e:	4b1b      	ldr	r3, [pc, #108]	; (8108aec <xTaskIncrementTick+0x164>)
 8108a80:	681b      	ldr	r3, [r3, #0]
 8108a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108a84:	429a      	cmp	r2, r3
 8108a86:	d3b8      	bcc.n	81089fa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8108a88:	2301      	movs	r3, #1
 8108a8a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8108a8c:	e7b5      	b.n	81089fa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8108a8e:	4b17      	ldr	r3, [pc, #92]	; (8108aec <xTaskIncrementTick+0x164>)
 8108a90:	681b      	ldr	r3, [r3, #0]
 8108a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8108a94:	4914      	ldr	r1, [pc, #80]	; (8108ae8 <xTaskIncrementTick+0x160>)
 8108a96:	4613      	mov	r3, r2
 8108a98:	009b      	lsls	r3, r3, #2
 8108a9a:	4413      	add	r3, r2
 8108a9c:	009b      	lsls	r3, r3, #2
 8108a9e:	440b      	add	r3, r1
 8108aa0:	681b      	ldr	r3, [r3, #0]
 8108aa2:	2b01      	cmp	r3, #1
 8108aa4:	d907      	bls.n	8108ab6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8108aa6:	2301      	movs	r3, #1
 8108aa8:	617b      	str	r3, [r7, #20]
 8108aaa:	e004      	b.n	8108ab6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8108aac:	4b10      	ldr	r3, [pc, #64]	; (8108af0 <xTaskIncrementTick+0x168>)
 8108aae:	681b      	ldr	r3, [r3, #0]
 8108ab0:	3301      	adds	r3, #1
 8108ab2:	4a0f      	ldr	r2, [pc, #60]	; (8108af0 <xTaskIncrementTick+0x168>)
 8108ab4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8108ab6:	4b0f      	ldr	r3, [pc, #60]	; (8108af4 <xTaskIncrementTick+0x16c>)
 8108ab8:	681b      	ldr	r3, [r3, #0]
 8108aba:	2b00      	cmp	r3, #0
 8108abc:	d001      	beq.n	8108ac2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8108abe:	2301      	movs	r3, #1
 8108ac0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8108ac2:	697b      	ldr	r3, [r7, #20]
}
 8108ac4:	4618      	mov	r0, r3
 8108ac6:	3718      	adds	r7, #24
 8108ac8:	46bd      	mov	sp, r7
 8108aca:	bd80      	pop	{r7, pc}
 8108acc:	10000de0 	.word	0x10000de0
 8108ad0:	10000dbc 	.word	0x10000dbc
 8108ad4:	10000d70 	.word	0x10000d70
 8108ad8:	10000d74 	.word	0x10000d74
 8108adc:	10000dd0 	.word	0x10000dd0
 8108ae0:	10000dd8 	.word	0x10000dd8
 8108ae4:	10000dc0 	.word	0x10000dc0
 8108ae8:	100008e8 	.word	0x100008e8
 8108aec:	100008e4 	.word	0x100008e4
 8108af0:	10000dc8 	.word	0x10000dc8
 8108af4:	10000dcc 	.word	0x10000dcc

08108af8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8108af8:	b480      	push	{r7}
 8108afa:	b085      	sub	sp, #20
 8108afc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8108afe:	4b27      	ldr	r3, [pc, #156]	; (8108b9c <vTaskSwitchContext+0xa4>)
 8108b00:	681b      	ldr	r3, [r3, #0]
 8108b02:	2b00      	cmp	r3, #0
 8108b04:	d003      	beq.n	8108b0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8108b06:	4b26      	ldr	r3, [pc, #152]	; (8108ba0 <vTaskSwitchContext+0xa8>)
 8108b08:	2201      	movs	r2, #1
 8108b0a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8108b0c:	e040      	b.n	8108b90 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8108b0e:	4b24      	ldr	r3, [pc, #144]	; (8108ba0 <vTaskSwitchContext+0xa8>)
 8108b10:	2200      	movs	r2, #0
 8108b12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8108b14:	4b23      	ldr	r3, [pc, #140]	; (8108ba4 <vTaskSwitchContext+0xac>)
 8108b16:	681b      	ldr	r3, [r3, #0]
 8108b18:	60fb      	str	r3, [r7, #12]
 8108b1a:	e00f      	b.n	8108b3c <vTaskSwitchContext+0x44>
 8108b1c:	68fb      	ldr	r3, [r7, #12]
 8108b1e:	2b00      	cmp	r3, #0
 8108b20:	d109      	bne.n	8108b36 <vTaskSwitchContext+0x3e>
 8108b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108b26:	f383 8811 	msr	BASEPRI, r3
 8108b2a:	f3bf 8f6f 	isb	sy
 8108b2e:	f3bf 8f4f 	dsb	sy
 8108b32:	607b      	str	r3, [r7, #4]
 8108b34:	e7fe      	b.n	8108b34 <vTaskSwitchContext+0x3c>
 8108b36:	68fb      	ldr	r3, [r7, #12]
 8108b38:	3b01      	subs	r3, #1
 8108b3a:	60fb      	str	r3, [r7, #12]
 8108b3c:	491a      	ldr	r1, [pc, #104]	; (8108ba8 <vTaskSwitchContext+0xb0>)
 8108b3e:	68fa      	ldr	r2, [r7, #12]
 8108b40:	4613      	mov	r3, r2
 8108b42:	009b      	lsls	r3, r3, #2
 8108b44:	4413      	add	r3, r2
 8108b46:	009b      	lsls	r3, r3, #2
 8108b48:	440b      	add	r3, r1
 8108b4a:	681b      	ldr	r3, [r3, #0]
 8108b4c:	2b00      	cmp	r3, #0
 8108b4e:	d0e5      	beq.n	8108b1c <vTaskSwitchContext+0x24>
 8108b50:	68fa      	ldr	r2, [r7, #12]
 8108b52:	4613      	mov	r3, r2
 8108b54:	009b      	lsls	r3, r3, #2
 8108b56:	4413      	add	r3, r2
 8108b58:	009b      	lsls	r3, r3, #2
 8108b5a:	4a13      	ldr	r2, [pc, #76]	; (8108ba8 <vTaskSwitchContext+0xb0>)
 8108b5c:	4413      	add	r3, r2
 8108b5e:	60bb      	str	r3, [r7, #8]
 8108b60:	68bb      	ldr	r3, [r7, #8]
 8108b62:	685b      	ldr	r3, [r3, #4]
 8108b64:	685a      	ldr	r2, [r3, #4]
 8108b66:	68bb      	ldr	r3, [r7, #8]
 8108b68:	605a      	str	r2, [r3, #4]
 8108b6a:	68bb      	ldr	r3, [r7, #8]
 8108b6c:	685a      	ldr	r2, [r3, #4]
 8108b6e:	68bb      	ldr	r3, [r7, #8]
 8108b70:	3308      	adds	r3, #8
 8108b72:	429a      	cmp	r2, r3
 8108b74:	d104      	bne.n	8108b80 <vTaskSwitchContext+0x88>
 8108b76:	68bb      	ldr	r3, [r7, #8]
 8108b78:	685b      	ldr	r3, [r3, #4]
 8108b7a:	685a      	ldr	r2, [r3, #4]
 8108b7c:	68bb      	ldr	r3, [r7, #8]
 8108b7e:	605a      	str	r2, [r3, #4]
 8108b80:	68bb      	ldr	r3, [r7, #8]
 8108b82:	685b      	ldr	r3, [r3, #4]
 8108b84:	68db      	ldr	r3, [r3, #12]
 8108b86:	4a09      	ldr	r2, [pc, #36]	; (8108bac <vTaskSwitchContext+0xb4>)
 8108b88:	6013      	str	r3, [r2, #0]
 8108b8a:	4a06      	ldr	r2, [pc, #24]	; (8108ba4 <vTaskSwitchContext+0xac>)
 8108b8c:	68fb      	ldr	r3, [r7, #12]
 8108b8e:	6013      	str	r3, [r2, #0]
}
 8108b90:	bf00      	nop
 8108b92:	3714      	adds	r7, #20
 8108b94:	46bd      	mov	sp, r7
 8108b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108b9a:	4770      	bx	lr
 8108b9c:	10000de0 	.word	0x10000de0
 8108ba0:	10000dcc 	.word	0x10000dcc
 8108ba4:	10000dc0 	.word	0x10000dc0
 8108ba8:	100008e8 	.word	0x100008e8
 8108bac:	100008e4 	.word	0x100008e4

08108bb0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8108bb0:	b580      	push	{r7, lr}
 8108bb2:	b084      	sub	sp, #16
 8108bb4:	af00      	add	r7, sp, #0
 8108bb6:	6078      	str	r0, [r7, #4]
 8108bb8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8108bba:	687b      	ldr	r3, [r7, #4]
 8108bbc:	2b00      	cmp	r3, #0
 8108bbe:	d109      	bne.n	8108bd4 <vTaskPlaceOnEventList+0x24>
 8108bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108bc4:	f383 8811 	msr	BASEPRI, r3
 8108bc8:	f3bf 8f6f 	isb	sy
 8108bcc:	f3bf 8f4f 	dsb	sy
 8108bd0:	60fb      	str	r3, [r7, #12]
 8108bd2:	e7fe      	b.n	8108bd2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8108bd4:	4b07      	ldr	r3, [pc, #28]	; (8108bf4 <vTaskPlaceOnEventList+0x44>)
 8108bd6:	681b      	ldr	r3, [r3, #0]
 8108bd8:	3318      	adds	r3, #24
 8108bda:	4619      	mov	r1, r3
 8108bdc:	6878      	ldr	r0, [r7, #4]
 8108bde:	f7fe feac 	bl	810793a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8108be2:	2101      	movs	r1, #1
 8108be4:	6838      	ldr	r0, [r7, #0]
 8108be6:	f000 fa71 	bl	81090cc <prvAddCurrentTaskToDelayedList>
}
 8108bea:	bf00      	nop
 8108bec:	3710      	adds	r7, #16
 8108bee:	46bd      	mov	sp, r7
 8108bf0:	bd80      	pop	{r7, pc}
 8108bf2:	bf00      	nop
 8108bf4:	100008e4 	.word	0x100008e4

08108bf8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8108bf8:	b580      	push	{r7, lr}
 8108bfa:	b086      	sub	sp, #24
 8108bfc:	af00      	add	r7, sp, #0
 8108bfe:	60f8      	str	r0, [r7, #12]
 8108c00:	60b9      	str	r1, [r7, #8]
 8108c02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8108c04:	68fb      	ldr	r3, [r7, #12]
 8108c06:	2b00      	cmp	r3, #0
 8108c08:	d109      	bne.n	8108c1e <vTaskPlaceOnEventListRestricted+0x26>
 8108c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108c0e:	f383 8811 	msr	BASEPRI, r3
 8108c12:	f3bf 8f6f 	isb	sy
 8108c16:	f3bf 8f4f 	dsb	sy
 8108c1a:	617b      	str	r3, [r7, #20]
 8108c1c:	e7fe      	b.n	8108c1c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8108c1e:	4b0a      	ldr	r3, [pc, #40]	; (8108c48 <vTaskPlaceOnEventListRestricted+0x50>)
 8108c20:	681b      	ldr	r3, [r3, #0]
 8108c22:	3318      	adds	r3, #24
 8108c24:	4619      	mov	r1, r3
 8108c26:	68f8      	ldr	r0, [r7, #12]
 8108c28:	f7fe fe63 	bl	81078f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8108c2c:	687b      	ldr	r3, [r7, #4]
 8108c2e:	2b00      	cmp	r3, #0
 8108c30:	d002      	beq.n	8108c38 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8108c32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8108c36:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8108c38:	6879      	ldr	r1, [r7, #4]
 8108c3a:	68b8      	ldr	r0, [r7, #8]
 8108c3c:	f000 fa46 	bl	81090cc <prvAddCurrentTaskToDelayedList>
	}
 8108c40:	bf00      	nop
 8108c42:	3718      	adds	r7, #24
 8108c44:	46bd      	mov	sp, r7
 8108c46:	bd80      	pop	{r7, pc}
 8108c48:	100008e4 	.word	0x100008e4

08108c4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8108c4c:	b580      	push	{r7, lr}
 8108c4e:	b086      	sub	sp, #24
 8108c50:	af00      	add	r7, sp, #0
 8108c52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8108c54:	687b      	ldr	r3, [r7, #4]
 8108c56:	68db      	ldr	r3, [r3, #12]
 8108c58:	68db      	ldr	r3, [r3, #12]
 8108c5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8108c5c:	693b      	ldr	r3, [r7, #16]
 8108c5e:	2b00      	cmp	r3, #0
 8108c60:	d109      	bne.n	8108c76 <xTaskRemoveFromEventList+0x2a>
 8108c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108c66:	f383 8811 	msr	BASEPRI, r3
 8108c6a:	f3bf 8f6f 	isb	sy
 8108c6e:	f3bf 8f4f 	dsb	sy
 8108c72:	60fb      	str	r3, [r7, #12]
 8108c74:	e7fe      	b.n	8108c74 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8108c76:	693b      	ldr	r3, [r7, #16]
 8108c78:	3318      	adds	r3, #24
 8108c7a:	4618      	mov	r0, r3
 8108c7c:	f7fe fe96 	bl	81079ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8108c80:	4b1d      	ldr	r3, [pc, #116]	; (8108cf8 <xTaskRemoveFromEventList+0xac>)
 8108c82:	681b      	ldr	r3, [r3, #0]
 8108c84:	2b00      	cmp	r3, #0
 8108c86:	d11d      	bne.n	8108cc4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8108c88:	693b      	ldr	r3, [r7, #16]
 8108c8a:	3304      	adds	r3, #4
 8108c8c:	4618      	mov	r0, r3
 8108c8e:	f7fe fe8d 	bl	81079ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8108c92:	693b      	ldr	r3, [r7, #16]
 8108c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8108c96:	4b19      	ldr	r3, [pc, #100]	; (8108cfc <xTaskRemoveFromEventList+0xb0>)
 8108c98:	681b      	ldr	r3, [r3, #0]
 8108c9a:	429a      	cmp	r2, r3
 8108c9c:	d903      	bls.n	8108ca6 <xTaskRemoveFromEventList+0x5a>
 8108c9e:	693b      	ldr	r3, [r7, #16]
 8108ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108ca2:	4a16      	ldr	r2, [pc, #88]	; (8108cfc <xTaskRemoveFromEventList+0xb0>)
 8108ca4:	6013      	str	r3, [r2, #0]
 8108ca6:	693b      	ldr	r3, [r7, #16]
 8108ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8108caa:	4613      	mov	r3, r2
 8108cac:	009b      	lsls	r3, r3, #2
 8108cae:	4413      	add	r3, r2
 8108cb0:	009b      	lsls	r3, r3, #2
 8108cb2:	4a13      	ldr	r2, [pc, #76]	; (8108d00 <xTaskRemoveFromEventList+0xb4>)
 8108cb4:	441a      	add	r2, r3
 8108cb6:	693b      	ldr	r3, [r7, #16]
 8108cb8:	3304      	adds	r3, #4
 8108cba:	4619      	mov	r1, r3
 8108cbc:	4610      	mov	r0, r2
 8108cbe:	f7fe fe18 	bl	81078f2 <vListInsertEnd>
 8108cc2:	e005      	b.n	8108cd0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8108cc4:	693b      	ldr	r3, [r7, #16]
 8108cc6:	3318      	adds	r3, #24
 8108cc8:	4619      	mov	r1, r3
 8108cca:	480e      	ldr	r0, [pc, #56]	; (8108d04 <xTaskRemoveFromEventList+0xb8>)
 8108ccc:	f7fe fe11 	bl	81078f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8108cd0:	693b      	ldr	r3, [r7, #16]
 8108cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8108cd4:	4b0c      	ldr	r3, [pc, #48]	; (8108d08 <xTaskRemoveFromEventList+0xbc>)
 8108cd6:	681b      	ldr	r3, [r3, #0]
 8108cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108cda:	429a      	cmp	r2, r3
 8108cdc:	d905      	bls.n	8108cea <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8108cde:	2301      	movs	r3, #1
 8108ce0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8108ce2:	4b0a      	ldr	r3, [pc, #40]	; (8108d0c <xTaskRemoveFromEventList+0xc0>)
 8108ce4:	2201      	movs	r2, #1
 8108ce6:	601a      	str	r2, [r3, #0]
 8108ce8:	e001      	b.n	8108cee <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8108cea:	2300      	movs	r3, #0
 8108cec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8108cee:	697b      	ldr	r3, [r7, #20]
}
 8108cf0:	4618      	mov	r0, r3
 8108cf2:	3718      	adds	r7, #24
 8108cf4:	46bd      	mov	sp, r7
 8108cf6:	bd80      	pop	{r7, pc}
 8108cf8:	10000de0 	.word	0x10000de0
 8108cfc:	10000dc0 	.word	0x10000dc0
 8108d00:	100008e8 	.word	0x100008e8
 8108d04:	10000d78 	.word	0x10000d78
 8108d08:	100008e4 	.word	0x100008e4
 8108d0c:	10000dcc 	.word	0x10000dcc

08108d10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8108d10:	b480      	push	{r7}
 8108d12:	b083      	sub	sp, #12
 8108d14:	af00      	add	r7, sp, #0
 8108d16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8108d18:	4b06      	ldr	r3, [pc, #24]	; (8108d34 <vTaskInternalSetTimeOutState+0x24>)
 8108d1a:	681a      	ldr	r2, [r3, #0]
 8108d1c:	687b      	ldr	r3, [r7, #4]
 8108d1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8108d20:	4b05      	ldr	r3, [pc, #20]	; (8108d38 <vTaskInternalSetTimeOutState+0x28>)
 8108d22:	681a      	ldr	r2, [r3, #0]
 8108d24:	687b      	ldr	r3, [r7, #4]
 8108d26:	605a      	str	r2, [r3, #4]
}
 8108d28:	bf00      	nop
 8108d2a:	370c      	adds	r7, #12
 8108d2c:	46bd      	mov	sp, r7
 8108d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d32:	4770      	bx	lr
 8108d34:	10000dd0 	.word	0x10000dd0
 8108d38:	10000dbc 	.word	0x10000dbc

08108d3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8108d3c:	b580      	push	{r7, lr}
 8108d3e:	b088      	sub	sp, #32
 8108d40:	af00      	add	r7, sp, #0
 8108d42:	6078      	str	r0, [r7, #4]
 8108d44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8108d46:	687b      	ldr	r3, [r7, #4]
 8108d48:	2b00      	cmp	r3, #0
 8108d4a:	d109      	bne.n	8108d60 <xTaskCheckForTimeOut+0x24>
 8108d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108d50:	f383 8811 	msr	BASEPRI, r3
 8108d54:	f3bf 8f6f 	isb	sy
 8108d58:	f3bf 8f4f 	dsb	sy
 8108d5c:	613b      	str	r3, [r7, #16]
 8108d5e:	e7fe      	b.n	8108d5e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8108d60:	683b      	ldr	r3, [r7, #0]
 8108d62:	2b00      	cmp	r3, #0
 8108d64:	d109      	bne.n	8108d7a <xTaskCheckForTimeOut+0x3e>
 8108d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108d6a:	f383 8811 	msr	BASEPRI, r3
 8108d6e:	f3bf 8f6f 	isb	sy
 8108d72:	f3bf 8f4f 	dsb	sy
 8108d76:	60fb      	str	r3, [r7, #12]
 8108d78:	e7fe      	b.n	8108d78 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8108d7a:	f000 fe67 	bl	8109a4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8108d7e:	4b1d      	ldr	r3, [pc, #116]	; (8108df4 <xTaskCheckForTimeOut+0xb8>)
 8108d80:	681b      	ldr	r3, [r3, #0]
 8108d82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8108d84:	687b      	ldr	r3, [r7, #4]
 8108d86:	685b      	ldr	r3, [r3, #4]
 8108d88:	69ba      	ldr	r2, [r7, #24]
 8108d8a:	1ad3      	subs	r3, r2, r3
 8108d8c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8108d8e:	683b      	ldr	r3, [r7, #0]
 8108d90:	681b      	ldr	r3, [r3, #0]
 8108d92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8108d96:	d102      	bne.n	8108d9e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8108d98:	2300      	movs	r3, #0
 8108d9a:	61fb      	str	r3, [r7, #28]
 8108d9c:	e023      	b.n	8108de6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8108d9e:	687b      	ldr	r3, [r7, #4]
 8108da0:	681a      	ldr	r2, [r3, #0]
 8108da2:	4b15      	ldr	r3, [pc, #84]	; (8108df8 <xTaskCheckForTimeOut+0xbc>)
 8108da4:	681b      	ldr	r3, [r3, #0]
 8108da6:	429a      	cmp	r2, r3
 8108da8:	d007      	beq.n	8108dba <xTaskCheckForTimeOut+0x7e>
 8108daa:	687b      	ldr	r3, [r7, #4]
 8108dac:	685b      	ldr	r3, [r3, #4]
 8108dae:	69ba      	ldr	r2, [r7, #24]
 8108db0:	429a      	cmp	r2, r3
 8108db2:	d302      	bcc.n	8108dba <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8108db4:	2301      	movs	r3, #1
 8108db6:	61fb      	str	r3, [r7, #28]
 8108db8:	e015      	b.n	8108de6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8108dba:	683b      	ldr	r3, [r7, #0]
 8108dbc:	681b      	ldr	r3, [r3, #0]
 8108dbe:	697a      	ldr	r2, [r7, #20]
 8108dc0:	429a      	cmp	r2, r3
 8108dc2:	d20b      	bcs.n	8108ddc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8108dc4:	683b      	ldr	r3, [r7, #0]
 8108dc6:	681a      	ldr	r2, [r3, #0]
 8108dc8:	697b      	ldr	r3, [r7, #20]
 8108dca:	1ad2      	subs	r2, r2, r3
 8108dcc:	683b      	ldr	r3, [r7, #0]
 8108dce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8108dd0:	6878      	ldr	r0, [r7, #4]
 8108dd2:	f7ff ff9d 	bl	8108d10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8108dd6:	2300      	movs	r3, #0
 8108dd8:	61fb      	str	r3, [r7, #28]
 8108dda:	e004      	b.n	8108de6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8108ddc:	683b      	ldr	r3, [r7, #0]
 8108dde:	2200      	movs	r2, #0
 8108de0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8108de2:	2301      	movs	r3, #1
 8108de4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8108de6:	f000 fe5f 	bl	8109aa8 <vPortExitCritical>

	return xReturn;
 8108dea:	69fb      	ldr	r3, [r7, #28]
}
 8108dec:	4618      	mov	r0, r3
 8108dee:	3720      	adds	r7, #32
 8108df0:	46bd      	mov	sp, r7
 8108df2:	bd80      	pop	{r7, pc}
 8108df4:	10000dbc 	.word	0x10000dbc
 8108df8:	10000dd0 	.word	0x10000dd0

08108dfc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8108dfc:	b480      	push	{r7}
 8108dfe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8108e00:	4b03      	ldr	r3, [pc, #12]	; (8108e10 <vTaskMissedYield+0x14>)
 8108e02:	2201      	movs	r2, #1
 8108e04:	601a      	str	r2, [r3, #0]
}
 8108e06:	bf00      	nop
 8108e08:	46bd      	mov	sp, r7
 8108e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e0e:	4770      	bx	lr
 8108e10:	10000dcc 	.word	0x10000dcc

08108e14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8108e14:	b580      	push	{r7, lr}
 8108e16:	b082      	sub	sp, #8
 8108e18:	af00      	add	r7, sp, #0
 8108e1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8108e1c:	f000 f852 	bl	8108ec4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8108e20:	4b06      	ldr	r3, [pc, #24]	; (8108e3c <prvIdleTask+0x28>)
 8108e22:	681b      	ldr	r3, [r3, #0]
 8108e24:	2b01      	cmp	r3, #1
 8108e26:	d9f9      	bls.n	8108e1c <prvIdleTask+0x8>
			{
				taskYIELD();
 8108e28:	4b05      	ldr	r3, [pc, #20]	; (8108e40 <prvIdleTask+0x2c>)
 8108e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8108e2e:	601a      	str	r2, [r3, #0]
 8108e30:	f3bf 8f4f 	dsb	sy
 8108e34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8108e38:	e7f0      	b.n	8108e1c <prvIdleTask+0x8>
 8108e3a:	bf00      	nop
 8108e3c:	100008e8 	.word	0x100008e8
 8108e40:	e000ed04 	.word	0xe000ed04

08108e44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8108e44:	b580      	push	{r7, lr}
 8108e46:	b082      	sub	sp, #8
 8108e48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8108e4a:	2300      	movs	r3, #0
 8108e4c:	607b      	str	r3, [r7, #4]
 8108e4e:	e00c      	b.n	8108e6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8108e50:	687a      	ldr	r2, [r7, #4]
 8108e52:	4613      	mov	r3, r2
 8108e54:	009b      	lsls	r3, r3, #2
 8108e56:	4413      	add	r3, r2
 8108e58:	009b      	lsls	r3, r3, #2
 8108e5a:	4a12      	ldr	r2, [pc, #72]	; (8108ea4 <prvInitialiseTaskLists+0x60>)
 8108e5c:	4413      	add	r3, r2
 8108e5e:	4618      	mov	r0, r3
 8108e60:	f7fe fd1a 	bl	8107898 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8108e64:	687b      	ldr	r3, [r7, #4]
 8108e66:	3301      	adds	r3, #1
 8108e68:	607b      	str	r3, [r7, #4]
 8108e6a:	687b      	ldr	r3, [r7, #4]
 8108e6c:	2b37      	cmp	r3, #55	; 0x37
 8108e6e:	d9ef      	bls.n	8108e50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8108e70:	480d      	ldr	r0, [pc, #52]	; (8108ea8 <prvInitialiseTaskLists+0x64>)
 8108e72:	f7fe fd11 	bl	8107898 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8108e76:	480d      	ldr	r0, [pc, #52]	; (8108eac <prvInitialiseTaskLists+0x68>)
 8108e78:	f7fe fd0e 	bl	8107898 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8108e7c:	480c      	ldr	r0, [pc, #48]	; (8108eb0 <prvInitialiseTaskLists+0x6c>)
 8108e7e:	f7fe fd0b 	bl	8107898 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8108e82:	480c      	ldr	r0, [pc, #48]	; (8108eb4 <prvInitialiseTaskLists+0x70>)
 8108e84:	f7fe fd08 	bl	8107898 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8108e88:	480b      	ldr	r0, [pc, #44]	; (8108eb8 <prvInitialiseTaskLists+0x74>)
 8108e8a:	f7fe fd05 	bl	8107898 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8108e8e:	4b0b      	ldr	r3, [pc, #44]	; (8108ebc <prvInitialiseTaskLists+0x78>)
 8108e90:	4a05      	ldr	r2, [pc, #20]	; (8108ea8 <prvInitialiseTaskLists+0x64>)
 8108e92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8108e94:	4b0a      	ldr	r3, [pc, #40]	; (8108ec0 <prvInitialiseTaskLists+0x7c>)
 8108e96:	4a05      	ldr	r2, [pc, #20]	; (8108eac <prvInitialiseTaskLists+0x68>)
 8108e98:	601a      	str	r2, [r3, #0]
}
 8108e9a:	bf00      	nop
 8108e9c:	3708      	adds	r7, #8
 8108e9e:	46bd      	mov	sp, r7
 8108ea0:	bd80      	pop	{r7, pc}
 8108ea2:	bf00      	nop
 8108ea4:	100008e8 	.word	0x100008e8
 8108ea8:	10000d48 	.word	0x10000d48
 8108eac:	10000d5c 	.word	0x10000d5c
 8108eb0:	10000d78 	.word	0x10000d78
 8108eb4:	10000d8c 	.word	0x10000d8c
 8108eb8:	10000da4 	.word	0x10000da4
 8108ebc:	10000d70 	.word	0x10000d70
 8108ec0:	10000d74 	.word	0x10000d74

08108ec4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8108ec4:	b580      	push	{r7, lr}
 8108ec6:	b082      	sub	sp, #8
 8108ec8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8108eca:	e019      	b.n	8108f00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8108ecc:	f000 fdbe 	bl	8109a4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8108ed0:	4b0f      	ldr	r3, [pc, #60]	; (8108f10 <prvCheckTasksWaitingTermination+0x4c>)
 8108ed2:	68db      	ldr	r3, [r3, #12]
 8108ed4:	68db      	ldr	r3, [r3, #12]
 8108ed6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8108ed8:	687b      	ldr	r3, [r7, #4]
 8108eda:	3304      	adds	r3, #4
 8108edc:	4618      	mov	r0, r3
 8108ede:	f7fe fd65 	bl	81079ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8108ee2:	4b0c      	ldr	r3, [pc, #48]	; (8108f14 <prvCheckTasksWaitingTermination+0x50>)
 8108ee4:	681b      	ldr	r3, [r3, #0]
 8108ee6:	3b01      	subs	r3, #1
 8108ee8:	4a0a      	ldr	r2, [pc, #40]	; (8108f14 <prvCheckTasksWaitingTermination+0x50>)
 8108eea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8108eec:	4b0a      	ldr	r3, [pc, #40]	; (8108f18 <prvCheckTasksWaitingTermination+0x54>)
 8108eee:	681b      	ldr	r3, [r3, #0]
 8108ef0:	3b01      	subs	r3, #1
 8108ef2:	4a09      	ldr	r2, [pc, #36]	; (8108f18 <prvCheckTasksWaitingTermination+0x54>)
 8108ef4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8108ef6:	f000 fdd7 	bl	8109aa8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8108efa:	6878      	ldr	r0, [r7, #4]
 8108efc:	f000 f80e 	bl	8108f1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8108f00:	4b05      	ldr	r3, [pc, #20]	; (8108f18 <prvCheckTasksWaitingTermination+0x54>)
 8108f02:	681b      	ldr	r3, [r3, #0]
 8108f04:	2b00      	cmp	r3, #0
 8108f06:	d1e1      	bne.n	8108ecc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8108f08:	bf00      	nop
 8108f0a:	3708      	adds	r7, #8
 8108f0c:	46bd      	mov	sp, r7
 8108f0e:	bd80      	pop	{r7, pc}
 8108f10:	10000d8c 	.word	0x10000d8c
 8108f14:	10000db8 	.word	0x10000db8
 8108f18:	10000da0 	.word	0x10000da0

08108f1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8108f1c:	b580      	push	{r7, lr}
 8108f1e:	b084      	sub	sp, #16
 8108f20:	af00      	add	r7, sp, #0
 8108f22:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8108f24:	687b      	ldr	r3, [r7, #4]
 8108f26:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8108f2a:	2b00      	cmp	r3, #0
 8108f2c:	d108      	bne.n	8108f40 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8108f2e:	687b      	ldr	r3, [r7, #4]
 8108f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108f32:	4618      	mov	r0, r3
 8108f34:	f000 ff66 	bl	8109e04 <vPortFree>
				vPortFree( pxTCB );
 8108f38:	6878      	ldr	r0, [r7, #4]
 8108f3a:	f000 ff63 	bl	8109e04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8108f3e:	e017      	b.n	8108f70 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8108f40:	687b      	ldr	r3, [r7, #4]
 8108f42:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8108f46:	2b01      	cmp	r3, #1
 8108f48:	d103      	bne.n	8108f52 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8108f4a:	6878      	ldr	r0, [r7, #4]
 8108f4c:	f000 ff5a 	bl	8109e04 <vPortFree>
	}
 8108f50:	e00e      	b.n	8108f70 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8108f52:	687b      	ldr	r3, [r7, #4]
 8108f54:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8108f58:	2b02      	cmp	r3, #2
 8108f5a:	d009      	beq.n	8108f70 <prvDeleteTCB+0x54>
 8108f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108f60:	f383 8811 	msr	BASEPRI, r3
 8108f64:	f3bf 8f6f 	isb	sy
 8108f68:	f3bf 8f4f 	dsb	sy
 8108f6c:	60fb      	str	r3, [r7, #12]
 8108f6e:	e7fe      	b.n	8108f6e <prvDeleteTCB+0x52>
	}
 8108f70:	bf00      	nop
 8108f72:	3710      	adds	r7, #16
 8108f74:	46bd      	mov	sp, r7
 8108f76:	bd80      	pop	{r7, pc}

08108f78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8108f78:	b480      	push	{r7}
 8108f7a:	b083      	sub	sp, #12
 8108f7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8108f7e:	4b0c      	ldr	r3, [pc, #48]	; (8108fb0 <prvResetNextTaskUnblockTime+0x38>)
 8108f80:	681b      	ldr	r3, [r3, #0]
 8108f82:	681b      	ldr	r3, [r3, #0]
 8108f84:	2b00      	cmp	r3, #0
 8108f86:	d104      	bne.n	8108f92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8108f88:	4b0a      	ldr	r3, [pc, #40]	; (8108fb4 <prvResetNextTaskUnblockTime+0x3c>)
 8108f8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8108f8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8108f90:	e008      	b.n	8108fa4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8108f92:	4b07      	ldr	r3, [pc, #28]	; (8108fb0 <prvResetNextTaskUnblockTime+0x38>)
 8108f94:	681b      	ldr	r3, [r3, #0]
 8108f96:	68db      	ldr	r3, [r3, #12]
 8108f98:	68db      	ldr	r3, [r3, #12]
 8108f9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8108f9c:	687b      	ldr	r3, [r7, #4]
 8108f9e:	685b      	ldr	r3, [r3, #4]
 8108fa0:	4a04      	ldr	r2, [pc, #16]	; (8108fb4 <prvResetNextTaskUnblockTime+0x3c>)
 8108fa2:	6013      	str	r3, [r2, #0]
}
 8108fa4:	bf00      	nop
 8108fa6:	370c      	adds	r7, #12
 8108fa8:	46bd      	mov	sp, r7
 8108faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108fae:	4770      	bx	lr
 8108fb0:	10000d70 	.word	0x10000d70
 8108fb4:	10000dd8 	.word	0x10000dd8

08108fb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8108fb8:	b480      	push	{r7}
 8108fba:	b083      	sub	sp, #12
 8108fbc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8108fbe:	4b0b      	ldr	r3, [pc, #44]	; (8108fec <xTaskGetSchedulerState+0x34>)
 8108fc0:	681b      	ldr	r3, [r3, #0]
 8108fc2:	2b00      	cmp	r3, #0
 8108fc4:	d102      	bne.n	8108fcc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8108fc6:	2301      	movs	r3, #1
 8108fc8:	607b      	str	r3, [r7, #4]
 8108fca:	e008      	b.n	8108fde <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8108fcc:	4b08      	ldr	r3, [pc, #32]	; (8108ff0 <xTaskGetSchedulerState+0x38>)
 8108fce:	681b      	ldr	r3, [r3, #0]
 8108fd0:	2b00      	cmp	r3, #0
 8108fd2:	d102      	bne.n	8108fda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8108fd4:	2302      	movs	r3, #2
 8108fd6:	607b      	str	r3, [r7, #4]
 8108fd8:	e001      	b.n	8108fde <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8108fda:	2300      	movs	r3, #0
 8108fdc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8108fde:	687b      	ldr	r3, [r7, #4]
	}
 8108fe0:	4618      	mov	r0, r3
 8108fe2:	370c      	adds	r7, #12
 8108fe4:	46bd      	mov	sp, r7
 8108fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108fea:	4770      	bx	lr
 8108fec:	10000dc4 	.word	0x10000dc4
 8108ff0:	10000de0 	.word	0x10000de0

08108ff4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8108ff4:	b580      	push	{r7, lr}
 8108ff6:	b086      	sub	sp, #24
 8108ff8:	af00      	add	r7, sp, #0
 8108ffa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8108ffc:	687b      	ldr	r3, [r7, #4]
 8108ffe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8109000:	2300      	movs	r3, #0
 8109002:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8109004:	687b      	ldr	r3, [r7, #4]
 8109006:	2b00      	cmp	r3, #0
 8109008:	d054      	beq.n	81090b4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 810900a:	4b2d      	ldr	r3, [pc, #180]	; (81090c0 <xTaskPriorityDisinherit+0xcc>)
 810900c:	681b      	ldr	r3, [r3, #0]
 810900e:	693a      	ldr	r2, [r7, #16]
 8109010:	429a      	cmp	r2, r3
 8109012:	d009      	beq.n	8109028 <xTaskPriorityDisinherit+0x34>
 8109014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109018:	f383 8811 	msr	BASEPRI, r3
 810901c:	f3bf 8f6f 	isb	sy
 8109020:	f3bf 8f4f 	dsb	sy
 8109024:	60fb      	str	r3, [r7, #12]
 8109026:	e7fe      	b.n	8109026 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8109028:	693b      	ldr	r3, [r7, #16]
 810902a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810902c:	2b00      	cmp	r3, #0
 810902e:	d109      	bne.n	8109044 <xTaskPriorityDisinherit+0x50>
 8109030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109034:	f383 8811 	msr	BASEPRI, r3
 8109038:	f3bf 8f6f 	isb	sy
 810903c:	f3bf 8f4f 	dsb	sy
 8109040:	60bb      	str	r3, [r7, #8]
 8109042:	e7fe      	b.n	8109042 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8109044:	693b      	ldr	r3, [r7, #16]
 8109046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109048:	1e5a      	subs	r2, r3, #1
 810904a:	693b      	ldr	r3, [r7, #16]
 810904c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 810904e:	693b      	ldr	r3, [r7, #16]
 8109050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109052:	693b      	ldr	r3, [r7, #16]
 8109054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8109056:	429a      	cmp	r2, r3
 8109058:	d02c      	beq.n	81090b4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 810905a:	693b      	ldr	r3, [r7, #16]
 810905c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810905e:	2b00      	cmp	r3, #0
 8109060:	d128      	bne.n	81090b4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8109062:	693b      	ldr	r3, [r7, #16]
 8109064:	3304      	adds	r3, #4
 8109066:	4618      	mov	r0, r3
 8109068:	f7fe fca0 	bl	81079ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 810906c:	693b      	ldr	r3, [r7, #16]
 810906e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8109070:	693b      	ldr	r3, [r7, #16]
 8109072:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8109074:	693b      	ldr	r3, [r7, #16]
 8109076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109078:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 810907c:	693b      	ldr	r3, [r7, #16]
 810907e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8109080:	693b      	ldr	r3, [r7, #16]
 8109082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109084:	4b0f      	ldr	r3, [pc, #60]	; (81090c4 <xTaskPriorityDisinherit+0xd0>)
 8109086:	681b      	ldr	r3, [r3, #0]
 8109088:	429a      	cmp	r2, r3
 810908a:	d903      	bls.n	8109094 <xTaskPriorityDisinherit+0xa0>
 810908c:	693b      	ldr	r3, [r7, #16]
 810908e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109090:	4a0c      	ldr	r2, [pc, #48]	; (81090c4 <xTaskPriorityDisinherit+0xd0>)
 8109092:	6013      	str	r3, [r2, #0]
 8109094:	693b      	ldr	r3, [r7, #16]
 8109096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109098:	4613      	mov	r3, r2
 810909a:	009b      	lsls	r3, r3, #2
 810909c:	4413      	add	r3, r2
 810909e:	009b      	lsls	r3, r3, #2
 81090a0:	4a09      	ldr	r2, [pc, #36]	; (81090c8 <xTaskPriorityDisinherit+0xd4>)
 81090a2:	441a      	add	r2, r3
 81090a4:	693b      	ldr	r3, [r7, #16]
 81090a6:	3304      	adds	r3, #4
 81090a8:	4619      	mov	r1, r3
 81090aa:	4610      	mov	r0, r2
 81090ac:	f7fe fc21 	bl	81078f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 81090b0:	2301      	movs	r3, #1
 81090b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 81090b4:	697b      	ldr	r3, [r7, #20]
	}
 81090b6:	4618      	mov	r0, r3
 81090b8:	3718      	adds	r7, #24
 81090ba:	46bd      	mov	sp, r7
 81090bc:	bd80      	pop	{r7, pc}
 81090be:	bf00      	nop
 81090c0:	100008e4 	.word	0x100008e4
 81090c4:	10000dc0 	.word	0x10000dc0
 81090c8:	100008e8 	.word	0x100008e8

081090cc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 81090cc:	b580      	push	{r7, lr}
 81090ce:	b084      	sub	sp, #16
 81090d0:	af00      	add	r7, sp, #0
 81090d2:	6078      	str	r0, [r7, #4]
 81090d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 81090d6:	4b21      	ldr	r3, [pc, #132]	; (810915c <prvAddCurrentTaskToDelayedList+0x90>)
 81090d8:	681b      	ldr	r3, [r3, #0]
 81090da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 81090dc:	4b20      	ldr	r3, [pc, #128]	; (8109160 <prvAddCurrentTaskToDelayedList+0x94>)
 81090de:	681b      	ldr	r3, [r3, #0]
 81090e0:	3304      	adds	r3, #4
 81090e2:	4618      	mov	r0, r3
 81090e4:	f7fe fc62 	bl	81079ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 81090e8:	687b      	ldr	r3, [r7, #4]
 81090ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81090ee:	d10a      	bne.n	8109106 <prvAddCurrentTaskToDelayedList+0x3a>
 81090f0:	683b      	ldr	r3, [r7, #0]
 81090f2:	2b00      	cmp	r3, #0
 81090f4:	d007      	beq.n	8109106 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81090f6:	4b1a      	ldr	r3, [pc, #104]	; (8109160 <prvAddCurrentTaskToDelayedList+0x94>)
 81090f8:	681b      	ldr	r3, [r3, #0]
 81090fa:	3304      	adds	r3, #4
 81090fc:	4619      	mov	r1, r3
 81090fe:	4819      	ldr	r0, [pc, #100]	; (8109164 <prvAddCurrentTaskToDelayedList+0x98>)
 8109100:	f7fe fbf7 	bl	81078f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8109104:	e026      	b.n	8109154 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8109106:	68fa      	ldr	r2, [r7, #12]
 8109108:	687b      	ldr	r3, [r7, #4]
 810910a:	4413      	add	r3, r2
 810910c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 810910e:	4b14      	ldr	r3, [pc, #80]	; (8109160 <prvAddCurrentTaskToDelayedList+0x94>)
 8109110:	681b      	ldr	r3, [r3, #0]
 8109112:	68ba      	ldr	r2, [r7, #8]
 8109114:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8109116:	68ba      	ldr	r2, [r7, #8]
 8109118:	68fb      	ldr	r3, [r7, #12]
 810911a:	429a      	cmp	r2, r3
 810911c:	d209      	bcs.n	8109132 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810911e:	4b12      	ldr	r3, [pc, #72]	; (8109168 <prvAddCurrentTaskToDelayedList+0x9c>)
 8109120:	681a      	ldr	r2, [r3, #0]
 8109122:	4b0f      	ldr	r3, [pc, #60]	; (8109160 <prvAddCurrentTaskToDelayedList+0x94>)
 8109124:	681b      	ldr	r3, [r3, #0]
 8109126:	3304      	adds	r3, #4
 8109128:	4619      	mov	r1, r3
 810912a:	4610      	mov	r0, r2
 810912c:	f7fe fc05 	bl	810793a <vListInsert>
}
 8109130:	e010      	b.n	8109154 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8109132:	4b0e      	ldr	r3, [pc, #56]	; (810916c <prvAddCurrentTaskToDelayedList+0xa0>)
 8109134:	681a      	ldr	r2, [r3, #0]
 8109136:	4b0a      	ldr	r3, [pc, #40]	; (8109160 <prvAddCurrentTaskToDelayedList+0x94>)
 8109138:	681b      	ldr	r3, [r3, #0]
 810913a:	3304      	adds	r3, #4
 810913c:	4619      	mov	r1, r3
 810913e:	4610      	mov	r0, r2
 8109140:	f7fe fbfb 	bl	810793a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8109144:	4b0a      	ldr	r3, [pc, #40]	; (8109170 <prvAddCurrentTaskToDelayedList+0xa4>)
 8109146:	681b      	ldr	r3, [r3, #0]
 8109148:	68ba      	ldr	r2, [r7, #8]
 810914a:	429a      	cmp	r2, r3
 810914c:	d202      	bcs.n	8109154 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 810914e:	4a08      	ldr	r2, [pc, #32]	; (8109170 <prvAddCurrentTaskToDelayedList+0xa4>)
 8109150:	68bb      	ldr	r3, [r7, #8]
 8109152:	6013      	str	r3, [r2, #0]
}
 8109154:	bf00      	nop
 8109156:	3710      	adds	r7, #16
 8109158:	46bd      	mov	sp, r7
 810915a:	bd80      	pop	{r7, pc}
 810915c:	10000dbc 	.word	0x10000dbc
 8109160:	100008e4 	.word	0x100008e4
 8109164:	10000da4 	.word	0x10000da4
 8109168:	10000d74 	.word	0x10000d74
 810916c:	10000d70 	.word	0x10000d70
 8109170:	10000dd8 	.word	0x10000dd8

08109174 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8109174:	b580      	push	{r7, lr}
 8109176:	b08a      	sub	sp, #40	; 0x28
 8109178:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 810917a:	2300      	movs	r3, #0
 810917c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 810917e:	f000 faff 	bl	8109780 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8109182:	4b1c      	ldr	r3, [pc, #112]	; (81091f4 <xTimerCreateTimerTask+0x80>)
 8109184:	681b      	ldr	r3, [r3, #0]
 8109186:	2b00      	cmp	r3, #0
 8109188:	d021      	beq.n	81091ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 810918a:	2300      	movs	r3, #0
 810918c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 810918e:	2300      	movs	r3, #0
 8109190:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8109192:	1d3a      	adds	r2, r7, #4
 8109194:	f107 0108 	add.w	r1, r7, #8
 8109198:	f107 030c 	add.w	r3, r7, #12
 810919c:	4618      	mov	r0, r3
 810919e:	f7fe fb61 	bl	8107864 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 81091a2:	6879      	ldr	r1, [r7, #4]
 81091a4:	68bb      	ldr	r3, [r7, #8]
 81091a6:	68fa      	ldr	r2, [r7, #12]
 81091a8:	9202      	str	r2, [sp, #8]
 81091aa:	9301      	str	r3, [sp, #4]
 81091ac:	2302      	movs	r3, #2
 81091ae:	9300      	str	r3, [sp, #0]
 81091b0:	2300      	movs	r3, #0
 81091b2:	460a      	mov	r2, r1
 81091b4:	4910      	ldr	r1, [pc, #64]	; (81091f8 <xTimerCreateTimerTask+0x84>)
 81091b6:	4811      	ldr	r0, [pc, #68]	; (81091fc <xTimerCreateTimerTask+0x88>)
 81091b8:	f7ff f8f6 	bl	81083a8 <xTaskCreateStatic>
 81091bc:	4602      	mov	r2, r0
 81091be:	4b10      	ldr	r3, [pc, #64]	; (8109200 <xTimerCreateTimerTask+0x8c>)
 81091c0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 81091c2:	4b0f      	ldr	r3, [pc, #60]	; (8109200 <xTimerCreateTimerTask+0x8c>)
 81091c4:	681b      	ldr	r3, [r3, #0]
 81091c6:	2b00      	cmp	r3, #0
 81091c8:	d001      	beq.n	81091ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 81091ca:	2301      	movs	r3, #1
 81091cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 81091ce:	697b      	ldr	r3, [r7, #20]
 81091d0:	2b00      	cmp	r3, #0
 81091d2:	d109      	bne.n	81091e8 <xTimerCreateTimerTask+0x74>
 81091d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81091d8:	f383 8811 	msr	BASEPRI, r3
 81091dc:	f3bf 8f6f 	isb	sy
 81091e0:	f3bf 8f4f 	dsb	sy
 81091e4:	613b      	str	r3, [r7, #16]
 81091e6:	e7fe      	b.n	81091e6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 81091e8:	697b      	ldr	r3, [r7, #20]
}
 81091ea:	4618      	mov	r0, r3
 81091ec:	3718      	adds	r7, #24
 81091ee:	46bd      	mov	sp, r7
 81091f0:	bd80      	pop	{r7, pc}
 81091f2:	bf00      	nop
 81091f4:	10000e14 	.word	0x10000e14
 81091f8:	0810bedc 	.word	0x0810bedc
 81091fc:	08109335 	.word	0x08109335
 8109200:	10000e18 	.word	0x10000e18

08109204 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8109204:	b580      	push	{r7, lr}
 8109206:	b08a      	sub	sp, #40	; 0x28
 8109208:	af00      	add	r7, sp, #0
 810920a:	60f8      	str	r0, [r7, #12]
 810920c:	60b9      	str	r1, [r7, #8]
 810920e:	607a      	str	r2, [r7, #4]
 8109210:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8109212:	2300      	movs	r3, #0
 8109214:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8109216:	68fb      	ldr	r3, [r7, #12]
 8109218:	2b00      	cmp	r3, #0
 810921a:	d109      	bne.n	8109230 <xTimerGenericCommand+0x2c>
 810921c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109220:	f383 8811 	msr	BASEPRI, r3
 8109224:	f3bf 8f6f 	isb	sy
 8109228:	f3bf 8f4f 	dsb	sy
 810922c:	623b      	str	r3, [r7, #32]
 810922e:	e7fe      	b.n	810922e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8109230:	4b19      	ldr	r3, [pc, #100]	; (8109298 <xTimerGenericCommand+0x94>)
 8109232:	681b      	ldr	r3, [r3, #0]
 8109234:	2b00      	cmp	r3, #0
 8109236:	d02a      	beq.n	810928e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8109238:	68bb      	ldr	r3, [r7, #8]
 810923a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 810923c:	687b      	ldr	r3, [r7, #4]
 810923e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8109240:	68fb      	ldr	r3, [r7, #12]
 8109242:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8109244:	68bb      	ldr	r3, [r7, #8]
 8109246:	2b05      	cmp	r3, #5
 8109248:	dc18      	bgt.n	810927c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 810924a:	f7ff feb5 	bl	8108fb8 <xTaskGetSchedulerState>
 810924e:	4603      	mov	r3, r0
 8109250:	2b02      	cmp	r3, #2
 8109252:	d109      	bne.n	8109268 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8109254:	4b10      	ldr	r3, [pc, #64]	; (8109298 <xTimerGenericCommand+0x94>)
 8109256:	6818      	ldr	r0, [r3, #0]
 8109258:	f107 0110 	add.w	r1, r7, #16
 810925c:	2300      	movs	r3, #0
 810925e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8109260:	f7fe fccc 	bl	8107bfc <xQueueGenericSend>
 8109264:	6278      	str	r0, [r7, #36]	; 0x24
 8109266:	e012      	b.n	810928e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8109268:	4b0b      	ldr	r3, [pc, #44]	; (8109298 <xTimerGenericCommand+0x94>)
 810926a:	6818      	ldr	r0, [r3, #0]
 810926c:	f107 0110 	add.w	r1, r7, #16
 8109270:	2300      	movs	r3, #0
 8109272:	2200      	movs	r2, #0
 8109274:	f7fe fcc2 	bl	8107bfc <xQueueGenericSend>
 8109278:	6278      	str	r0, [r7, #36]	; 0x24
 810927a:	e008      	b.n	810928e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 810927c:	4b06      	ldr	r3, [pc, #24]	; (8109298 <xTimerGenericCommand+0x94>)
 810927e:	6818      	ldr	r0, [r3, #0]
 8109280:	f107 0110 	add.w	r1, r7, #16
 8109284:	2300      	movs	r3, #0
 8109286:	683a      	ldr	r2, [r7, #0]
 8109288:	f7fe fdb2 	bl	8107df0 <xQueueGenericSendFromISR>
 810928c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 810928e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8109290:	4618      	mov	r0, r3
 8109292:	3728      	adds	r7, #40	; 0x28
 8109294:	46bd      	mov	sp, r7
 8109296:	bd80      	pop	{r7, pc}
 8109298:	10000e14 	.word	0x10000e14

0810929c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 810929c:	b580      	push	{r7, lr}
 810929e:	b088      	sub	sp, #32
 81092a0:	af02      	add	r7, sp, #8
 81092a2:	6078      	str	r0, [r7, #4]
 81092a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81092a6:	4b22      	ldr	r3, [pc, #136]	; (8109330 <prvProcessExpiredTimer+0x94>)
 81092a8:	681b      	ldr	r3, [r3, #0]
 81092aa:	68db      	ldr	r3, [r3, #12]
 81092ac:	68db      	ldr	r3, [r3, #12]
 81092ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 81092b0:	697b      	ldr	r3, [r7, #20]
 81092b2:	3304      	adds	r3, #4
 81092b4:	4618      	mov	r0, r3
 81092b6:	f7fe fb79 	bl	81079ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81092ba:	697b      	ldr	r3, [r7, #20]
 81092bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81092c0:	f003 0304 	and.w	r3, r3, #4
 81092c4:	2b00      	cmp	r3, #0
 81092c6:	d021      	beq.n	810930c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 81092c8:	697b      	ldr	r3, [r7, #20]
 81092ca:	699a      	ldr	r2, [r3, #24]
 81092cc:	687b      	ldr	r3, [r7, #4]
 81092ce:	18d1      	adds	r1, r2, r3
 81092d0:	687b      	ldr	r3, [r7, #4]
 81092d2:	683a      	ldr	r2, [r7, #0]
 81092d4:	6978      	ldr	r0, [r7, #20]
 81092d6:	f000 f8d1 	bl	810947c <prvInsertTimerInActiveList>
 81092da:	4603      	mov	r3, r0
 81092dc:	2b00      	cmp	r3, #0
 81092de:	d01e      	beq.n	810931e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 81092e0:	2300      	movs	r3, #0
 81092e2:	9300      	str	r3, [sp, #0]
 81092e4:	2300      	movs	r3, #0
 81092e6:	687a      	ldr	r2, [r7, #4]
 81092e8:	2100      	movs	r1, #0
 81092ea:	6978      	ldr	r0, [r7, #20]
 81092ec:	f7ff ff8a 	bl	8109204 <xTimerGenericCommand>
 81092f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 81092f2:	693b      	ldr	r3, [r7, #16]
 81092f4:	2b00      	cmp	r3, #0
 81092f6:	d112      	bne.n	810931e <prvProcessExpiredTimer+0x82>
 81092f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81092fc:	f383 8811 	msr	BASEPRI, r3
 8109300:	f3bf 8f6f 	isb	sy
 8109304:	f3bf 8f4f 	dsb	sy
 8109308:	60fb      	str	r3, [r7, #12]
 810930a:	e7fe      	b.n	810930a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810930c:	697b      	ldr	r3, [r7, #20]
 810930e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8109312:	f023 0301 	bic.w	r3, r3, #1
 8109316:	b2da      	uxtb	r2, r3
 8109318:	697b      	ldr	r3, [r7, #20]
 810931a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810931e:	697b      	ldr	r3, [r7, #20]
 8109320:	6a1b      	ldr	r3, [r3, #32]
 8109322:	6978      	ldr	r0, [r7, #20]
 8109324:	4798      	blx	r3
}
 8109326:	bf00      	nop
 8109328:	3718      	adds	r7, #24
 810932a:	46bd      	mov	sp, r7
 810932c:	bd80      	pop	{r7, pc}
 810932e:	bf00      	nop
 8109330:	10000e0c 	.word	0x10000e0c

08109334 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8109334:	b580      	push	{r7, lr}
 8109336:	b084      	sub	sp, #16
 8109338:	af00      	add	r7, sp, #0
 810933a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810933c:	f107 0308 	add.w	r3, r7, #8
 8109340:	4618      	mov	r0, r3
 8109342:	f000 f857 	bl	81093f4 <prvGetNextExpireTime>
 8109346:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8109348:	68bb      	ldr	r3, [r7, #8]
 810934a:	4619      	mov	r1, r3
 810934c:	68f8      	ldr	r0, [r7, #12]
 810934e:	f000 f803 	bl	8109358 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8109352:	f000 f8d5 	bl	8109500 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8109356:	e7f1      	b.n	810933c <prvTimerTask+0x8>

08109358 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8109358:	b580      	push	{r7, lr}
 810935a:	b084      	sub	sp, #16
 810935c:	af00      	add	r7, sp, #0
 810935e:	6078      	str	r0, [r7, #4]
 8109360:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8109362:	f7ff fa57 	bl	8108814 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8109366:	f107 0308 	add.w	r3, r7, #8
 810936a:	4618      	mov	r0, r3
 810936c:	f000 f866 	bl	810943c <prvSampleTimeNow>
 8109370:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8109372:	68bb      	ldr	r3, [r7, #8]
 8109374:	2b00      	cmp	r3, #0
 8109376:	d130      	bne.n	81093da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8109378:	683b      	ldr	r3, [r7, #0]
 810937a:	2b00      	cmp	r3, #0
 810937c:	d10a      	bne.n	8109394 <prvProcessTimerOrBlockTask+0x3c>
 810937e:	687a      	ldr	r2, [r7, #4]
 8109380:	68fb      	ldr	r3, [r7, #12]
 8109382:	429a      	cmp	r2, r3
 8109384:	d806      	bhi.n	8109394 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8109386:	f7ff fa53 	bl	8108830 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 810938a:	68f9      	ldr	r1, [r7, #12]
 810938c:	6878      	ldr	r0, [r7, #4]
 810938e:	f7ff ff85 	bl	810929c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8109392:	e024      	b.n	81093de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8109394:	683b      	ldr	r3, [r7, #0]
 8109396:	2b00      	cmp	r3, #0
 8109398:	d008      	beq.n	81093ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 810939a:	4b13      	ldr	r3, [pc, #76]	; (81093e8 <prvProcessTimerOrBlockTask+0x90>)
 810939c:	681b      	ldr	r3, [r3, #0]
 810939e:	681b      	ldr	r3, [r3, #0]
 81093a0:	2b00      	cmp	r3, #0
 81093a2:	d101      	bne.n	81093a8 <prvProcessTimerOrBlockTask+0x50>
 81093a4:	2301      	movs	r3, #1
 81093a6:	e000      	b.n	81093aa <prvProcessTimerOrBlockTask+0x52>
 81093a8:	2300      	movs	r3, #0
 81093aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 81093ac:	4b0f      	ldr	r3, [pc, #60]	; (81093ec <prvProcessTimerOrBlockTask+0x94>)
 81093ae:	6818      	ldr	r0, [r3, #0]
 81093b0:	687a      	ldr	r2, [r7, #4]
 81093b2:	68fb      	ldr	r3, [r7, #12]
 81093b4:	1ad3      	subs	r3, r2, r3
 81093b6:	683a      	ldr	r2, [r7, #0]
 81093b8:	4619      	mov	r1, r3
 81093ba:	f7fe ffc1 	bl	8108340 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 81093be:	f7ff fa37 	bl	8108830 <xTaskResumeAll>
 81093c2:	4603      	mov	r3, r0
 81093c4:	2b00      	cmp	r3, #0
 81093c6:	d10a      	bne.n	81093de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 81093c8:	4b09      	ldr	r3, [pc, #36]	; (81093f0 <prvProcessTimerOrBlockTask+0x98>)
 81093ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81093ce:	601a      	str	r2, [r3, #0]
 81093d0:	f3bf 8f4f 	dsb	sy
 81093d4:	f3bf 8f6f 	isb	sy
}
 81093d8:	e001      	b.n	81093de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 81093da:	f7ff fa29 	bl	8108830 <xTaskResumeAll>
}
 81093de:	bf00      	nop
 81093e0:	3710      	adds	r7, #16
 81093e2:	46bd      	mov	sp, r7
 81093e4:	bd80      	pop	{r7, pc}
 81093e6:	bf00      	nop
 81093e8:	10000e10 	.word	0x10000e10
 81093ec:	10000e14 	.word	0x10000e14
 81093f0:	e000ed04 	.word	0xe000ed04

081093f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 81093f4:	b480      	push	{r7}
 81093f6:	b085      	sub	sp, #20
 81093f8:	af00      	add	r7, sp, #0
 81093fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 81093fc:	4b0e      	ldr	r3, [pc, #56]	; (8109438 <prvGetNextExpireTime+0x44>)
 81093fe:	681b      	ldr	r3, [r3, #0]
 8109400:	681b      	ldr	r3, [r3, #0]
 8109402:	2b00      	cmp	r3, #0
 8109404:	d101      	bne.n	810940a <prvGetNextExpireTime+0x16>
 8109406:	2201      	movs	r2, #1
 8109408:	e000      	b.n	810940c <prvGetNextExpireTime+0x18>
 810940a:	2200      	movs	r2, #0
 810940c:	687b      	ldr	r3, [r7, #4]
 810940e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8109410:	687b      	ldr	r3, [r7, #4]
 8109412:	681b      	ldr	r3, [r3, #0]
 8109414:	2b00      	cmp	r3, #0
 8109416:	d105      	bne.n	8109424 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8109418:	4b07      	ldr	r3, [pc, #28]	; (8109438 <prvGetNextExpireTime+0x44>)
 810941a:	681b      	ldr	r3, [r3, #0]
 810941c:	68db      	ldr	r3, [r3, #12]
 810941e:	681b      	ldr	r3, [r3, #0]
 8109420:	60fb      	str	r3, [r7, #12]
 8109422:	e001      	b.n	8109428 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8109424:	2300      	movs	r3, #0
 8109426:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8109428:	68fb      	ldr	r3, [r7, #12]
}
 810942a:	4618      	mov	r0, r3
 810942c:	3714      	adds	r7, #20
 810942e:	46bd      	mov	sp, r7
 8109430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109434:	4770      	bx	lr
 8109436:	bf00      	nop
 8109438:	10000e0c 	.word	0x10000e0c

0810943c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 810943c:	b580      	push	{r7, lr}
 810943e:	b084      	sub	sp, #16
 8109440:	af00      	add	r7, sp, #0
 8109442:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8109444:	f7ff fa90 	bl	8108968 <xTaskGetTickCount>
 8109448:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 810944a:	4b0b      	ldr	r3, [pc, #44]	; (8109478 <prvSampleTimeNow+0x3c>)
 810944c:	681b      	ldr	r3, [r3, #0]
 810944e:	68fa      	ldr	r2, [r7, #12]
 8109450:	429a      	cmp	r2, r3
 8109452:	d205      	bcs.n	8109460 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8109454:	f000 f930 	bl	81096b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8109458:	687b      	ldr	r3, [r7, #4]
 810945a:	2201      	movs	r2, #1
 810945c:	601a      	str	r2, [r3, #0]
 810945e:	e002      	b.n	8109466 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8109460:	687b      	ldr	r3, [r7, #4]
 8109462:	2200      	movs	r2, #0
 8109464:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8109466:	4a04      	ldr	r2, [pc, #16]	; (8109478 <prvSampleTimeNow+0x3c>)
 8109468:	68fb      	ldr	r3, [r7, #12]
 810946a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 810946c:	68fb      	ldr	r3, [r7, #12]
}
 810946e:	4618      	mov	r0, r3
 8109470:	3710      	adds	r7, #16
 8109472:	46bd      	mov	sp, r7
 8109474:	bd80      	pop	{r7, pc}
 8109476:	bf00      	nop
 8109478:	10000e1c 	.word	0x10000e1c

0810947c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 810947c:	b580      	push	{r7, lr}
 810947e:	b086      	sub	sp, #24
 8109480:	af00      	add	r7, sp, #0
 8109482:	60f8      	str	r0, [r7, #12]
 8109484:	60b9      	str	r1, [r7, #8]
 8109486:	607a      	str	r2, [r7, #4]
 8109488:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 810948a:	2300      	movs	r3, #0
 810948c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 810948e:	68fb      	ldr	r3, [r7, #12]
 8109490:	68ba      	ldr	r2, [r7, #8]
 8109492:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8109494:	68fb      	ldr	r3, [r7, #12]
 8109496:	68fa      	ldr	r2, [r7, #12]
 8109498:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 810949a:	68ba      	ldr	r2, [r7, #8]
 810949c:	687b      	ldr	r3, [r7, #4]
 810949e:	429a      	cmp	r2, r3
 81094a0:	d812      	bhi.n	81094c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81094a2:	687a      	ldr	r2, [r7, #4]
 81094a4:	683b      	ldr	r3, [r7, #0]
 81094a6:	1ad2      	subs	r2, r2, r3
 81094a8:	68fb      	ldr	r3, [r7, #12]
 81094aa:	699b      	ldr	r3, [r3, #24]
 81094ac:	429a      	cmp	r2, r3
 81094ae:	d302      	bcc.n	81094b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 81094b0:	2301      	movs	r3, #1
 81094b2:	617b      	str	r3, [r7, #20]
 81094b4:	e01b      	b.n	81094ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 81094b6:	4b10      	ldr	r3, [pc, #64]	; (81094f8 <prvInsertTimerInActiveList+0x7c>)
 81094b8:	681a      	ldr	r2, [r3, #0]
 81094ba:	68fb      	ldr	r3, [r7, #12]
 81094bc:	3304      	adds	r3, #4
 81094be:	4619      	mov	r1, r3
 81094c0:	4610      	mov	r0, r2
 81094c2:	f7fe fa3a 	bl	810793a <vListInsert>
 81094c6:	e012      	b.n	81094ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 81094c8:	687a      	ldr	r2, [r7, #4]
 81094ca:	683b      	ldr	r3, [r7, #0]
 81094cc:	429a      	cmp	r2, r3
 81094ce:	d206      	bcs.n	81094de <prvInsertTimerInActiveList+0x62>
 81094d0:	68ba      	ldr	r2, [r7, #8]
 81094d2:	683b      	ldr	r3, [r7, #0]
 81094d4:	429a      	cmp	r2, r3
 81094d6:	d302      	bcc.n	81094de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 81094d8:	2301      	movs	r3, #1
 81094da:	617b      	str	r3, [r7, #20]
 81094dc:	e007      	b.n	81094ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 81094de:	4b07      	ldr	r3, [pc, #28]	; (81094fc <prvInsertTimerInActiveList+0x80>)
 81094e0:	681a      	ldr	r2, [r3, #0]
 81094e2:	68fb      	ldr	r3, [r7, #12]
 81094e4:	3304      	adds	r3, #4
 81094e6:	4619      	mov	r1, r3
 81094e8:	4610      	mov	r0, r2
 81094ea:	f7fe fa26 	bl	810793a <vListInsert>
		}
	}

	return xProcessTimerNow;
 81094ee:	697b      	ldr	r3, [r7, #20]
}
 81094f0:	4618      	mov	r0, r3
 81094f2:	3718      	adds	r7, #24
 81094f4:	46bd      	mov	sp, r7
 81094f6:	bd80      	pop	{r7, pc}
 81094f8:	10000e10 	.word	0x10000e10
 81094fc:	10000e0c 	.word	0x10000e0c

08109500 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8109500:	b580      	push	{r7, lr}
 8109502:	b08e      	sub	sp, #56	; 0x38
 8109504:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8109506:	e0c6      	b.n	8109696 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8109508:	687b      	ldr	r3, [r7, #4]
 810950a:	2b00      	cmp	r3, #0
 810950c:	da17      	bge.n	810953e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 810950e:	1d3b      	adds	r3, r7, #4
 8109510:	3304      	adds	r3, #4
 8109512:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8109514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109516:	2b00      	cmp	r3, #0
 8109518:	d109      	bne.n	810952e <prvProcessReceivedCommands+0x2e>
 810951a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810951e:	f383 8811 	msr	BASEPRI, r3
 8109522:	f3bf 8f6f 	isb	sy
 8109526:	f3bf 8f4f 	dsb	sy
 810952a:	61fb      	str	r3, [r7, #28]
 810952c:	e7fe      	b.n	810952c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 810952e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109530:	681b      	ldr	r3, [r3, #0]
 8109532:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8109534:	6850      	ldr	r0, [r2, #4]
 8109536:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8109538:	6892      	ldr	r2, [r2, #8]
 810953a:	4611      	mov	r1, r2
 810953c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 810953e:	687b      	ldr	r3, [r7, #4]
 8109540:	2b00      	cmp	r3, #0
 8109542:	f2c0 80a7 	blt.w	8109694 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8109546:	68fb      	ldr	r3, [r7, #12]
 8109548:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 810954a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810954c:	695b      	ldr	r3, [r3, #20]
 810954e:	2b00      	cmp	r3, #0
 8109550:	d004      	beq.n	810955c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8109552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109554:	3304      	adds	r3, #4
 8109556:	4618      	mov	r0, r3
 8109558:	f7fe fa28 	bl	81079ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810955c:	463b      	mov	r3, r7
 810955e:	4618      	mov	r0, r3
 8109560:	f7ff ff6c 	bl	810943c <prvSampleTimeNow>
 8109564:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8109566:	687b      	ldr	r3, [r7, #4]
 8109568:	2b09      	cmp	r3, #9
 810956a:	f200 8094 	bhi.w	8109696 <prvProcessReceivedCommands+0x196>
 810956e:	a201      	add	r2, pc, #4	; (adr r2, 8109574 <prvProcessReceivedCommands+0x74>)
 8109570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109574:	0810959d 	.word	0x0810959d
 8109578:	0810959d 	.word	0x0810959d
 810957c:	0810959d 	.word	0x0810959d
 8109580:	0810960f 	.word	0x0810960f
 8109584:	08109623 	.word	0x08109623
 8109588:	0810966b 	.word	0x0810966b
 810958c:	0810959d 	.word	0x0810959d
 8109590:	0810959d 	.word	0x0810959d
 8109594:	0810960f 	.word	0x0810960f
 8109598:	08109623 	.word	0x08109623
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810959c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810959e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81095a2:	f043 0301 	orr.w	r3, r3, #1
 81095a6:	b2da      	uxtb	r2, r3
 81095a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81095aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 81095ae:	68ba      	ldr	r2, [r7, #8]
 81095b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81095b2:	699b      	ldr	r3, [r3, #24]
 81095b4:	18d1      	adds	r1, r2, r3
 81095b6:	68bb      	ldr	r3, [r7, #8]
 81095b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81095ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81095bc:	f7ff ff5e 	bl	810947c <prvInsertTimerInActiveList>
 81095c0:	4603      	mov	r3, r0
 81095c2:	2b00      	cmp	r3, #0
 81095c4:	d067      	beq.n	8109696 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 81095c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81095c8:	6a1b      	ldr	r3, [r3, #32]
 81095ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81095cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81095ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81095d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81095d4:	f003 0304 	and.w	r3, r3, #4
 81095d8:	2b00      	cmp	r3, #0
 81095da:	d05c      	beq.n	8109696 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 81095dc:	68ba      	ldr	r2, [r7, #8]
 81095de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81095e0:	699b      	ldr	r3, [r3, #24]
 81095e2:	441a      	add	r2, r3
 81095e4:	2300      	movs	r3, #0
 81095e6:	9300      	str	r3, [sp, #0]
 81095e8:	2300      	movs	r3, #0
 81095ea:	2100      	movs	r1, #0
 81095ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81095ee:	f7ff fe09 	bl	8109204 <xTimerGenericCommand>
 81095f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 81095f4:	6a3b      	ldr	r3, [r7, #32]
 81095f6:	2b00      	cmp	r3, #0
 81095f8:	d14d      	bne.n	8109696 <prvProcessReceivedCommands+0x196>
 81095fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 81095fe:	f383 8811 	msr	BASEPRI, r3
 8109602:	f3bf 8f6f 	isb	sy
 8109606:	f3bf 8f4f 	dsb	sy
 810960a:	61bb      	str	r3, [r7, #24]
 810960c:	e7fe      	b.n	810960c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810960e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109610:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8109614:	f023 0301 	bic.w	r3, r3, #1
 8109618:	b2da      	uxtb	r2, r3
 810961a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810961c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8109620:	e039      	b.n	8109696 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8109622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109624:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8109628:	f043 0301 	orr.w	r3, r3, #1
 810962c:	b2da      	uxtb	r2, r3
 810962e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109630:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8109634:	68ba      	ldr	r2, [r7, #8]
 8109636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109638:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 810963a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810963c:	699b      	ldr	r3, [r3, #24]
 810963e:	2b00      	cmp	r3, #0
 8109640:	d109      	bne.n	8109656 <prvProcessReceivedCommands+0x156>
 8109642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109646:	f383 8811 	msr	BASEPRI, r3
 810964a:	f3bf 8f6f 	isb	sy
 810964e:	f3bf 8f4f 	dsb	sy
 8109652:	617b      	str	r3, [r7, #20]
 8109654:	e7fe      	b.n	8109654 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8109656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109658:	699a      	ldr	r2, [r3, #24]
 810965a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810965c:	18d1      	adds	r1, r2, r3
 810965e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8109662:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8109664:	f7ff ff0a 	bl	810947c <prvInsertTimerInActiveList>
					break;
 8109668:	e015      	b.n	8109696 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 810966a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810966c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8109670:	f003 0302 	and.w	r3, r3, #2
 8109674:	2b00      	cmp	r3, #0
 8109676:	d103      	bne.n	8109680 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8109678:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810967a:	f000 fbc3 	bl	8109e04 <vPortFree>
 810967e:	e00a      	b.n	8109696 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8109680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109682:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8109686:	f023 0301 	bic.w	r3, r3, #1
 810968a:	b2da      	uxtb	r2, r3
 810968c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810968e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8109692:	e000      	b.n	8109696 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8109694:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8109696:	4b07      	ldr	r3, [pc, #28]	; (81096b4 <prvProcessReceivedCommands+0x1b4>)
 8109698:	681b      	ldr	r3, [r3, #0]
 810969a:	1d39      	adds	r1, r7, #4
 810969c:	2200      	movs	r2, #0
 810969e:	4618      	mov	r0, r3
 81096a0:	f7fe fc3a 	bl	8107f18 <xQueueReceive>
 81096a4:	4603      	mov	r3, r0
 81096a6:	2b00      	cmp	r3, #0
 81096a8:	f47f af2e 	bne.w	8109508 <prvProcessReceivedCommands+0x8>
	}
}
 81096ac:	bf00      	nop
 81096ae:	3730      	adds	r7, #48	; 0x30
 81096b0:	46bd      	mov	sp, r7
 81096b2:	bd80      	pop	{r7, pc}
 81096b4:	10000e14 	.word	0x10000e14

081096b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 81096b8:	b580      	push	{r7, lr}
 81096ba:	b088      	sub	sp, #32
 81096bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 81096be:	e047      	b.n	8109750 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 81096c0:	4b2d      	ldr	r3, [pc, #180]	; (8109778 <prvSwitchTimerLists+0xc0>)
 81096c2:	681b      	ldr	r3, [r3, #0]
 81096c4:	68db      	ldr	r3, [r3, #12]
 81096c6:	681b      	ldr	r3, [r3, #0]
 81096c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81096ca:	4b2b      	ldr	r3, [pc, #172]	; (8109778 <prvSwitchTimerLists+0xc0>)
 81096cc:	681b      	ldr	r3, [r3, #0]
 81096ce:	68db      	ldr	r3, [r3, #12]
 81096d0:	68db      	ldr	r3, [r3, #12]
 81096d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 81096d4:	68fb      	ldr	r3, [r7, #12]
 81096d6:	3304      	adds	r3, #4
 81096d8:	4618      	mov	r0, r3
 81096da:	f7fe f967 	bl	81079ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 81096de:	68fb      	ldr	r3, [r7, #12]
 81096e0:	6a1b      	ldr	r3, [r3, #32]
 81096e2:	68f8      	ldr	r0, [r7, #12]
 81096e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81096e6:	68fb      	ldr	r3, [r7, #12]
 81096e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81096ec:	f003 0304 	and.w	r3, r3, #4
 81096f0:	2b00      	cmp	r3, #0
 81096f2:	d02d      	beq.n	8109750 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 81096f4:	68fb      	ldr	r3, [r7, #12]
 81096f6:	699b      	ldr	r3, [r3, #24]
 81096f8:	693a      	ldr	r2, [r7, #16]
 81096fa:	4413      	add	r3, r2
 81096fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 81096fe:	68ba      	ldr	r2, [r7, #8]
 8109700:	693b      	ldr	r3, [r7, #16]
 8109702:	429a      	cmp	r2, r3
 8109704:	d90e      	bls.n	8109724 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8109706:	68fb      	ldr	r3, [r7, #12]
 8109708:	68ba      	ldr	r2, [r7, #8]
 810970a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 810970c:	68fb      	ldr	r3, [r7, #12]
 810970e:	68fa      	ldr	r2, [r7, #12]
 8109710:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8109712:	4b19      	ldr	r3, [pc, #100]	; (8109778 <prvSwitchTimerLists+0xc0>)
 8109714:	681a      	ldr	r2, [r3, #0]
 8109716:	68fb      	ldr	r3, [r7, #12]
 8109718:	3304      	adds	r3, #4
 810971a:	4619      	mov	r1, r3
 810971c:	4610      	mov	r0, r2
 810971e:	f7fe f90c 	bl	810793a <vListInsert>
 8109722:	e015      	b.n	8109750 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8109724:	2300      	movs	r3, #0
 8109726:	9300      	str	r3, [sp, #0]
 8109728:	2300      	movs	r3, #0
 810972a:	693a      	ldr	r2, [r7, #16]
 810972c:	2100      	movs	r1, #0
 810972e:	68f8      	ldr	r0, [r7, #12]
 8109730:	f7ff fd68 	bl	8109204 <xTimerGenericCommand>
 8109734:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8109736:	687b      	ldr	r3, [r7, #4]
 8109738:	2b00      	cmp	r3, #0
 810973a:	d109      	bne.n	8109750 <prvSwitchTimerLists+0x98>
 810973c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109740:	f383 8811 	msr	BASEPRI, r3
 8109744:	f3bf 8f6f 	isb	sy
 8109748:	f3bf 8f4f 	dsb	sy
 810974c:	603b      	str	r3, [r7, #0]
 810974e:	e7fe      	b.n	810974e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8109750:	4b09      	ldr	r3, [pc, #36]	; (8109778 <prvSwitchTimerLists+0xc0>)
 8109752:	681b      	ldr	r3, [r3, #0]
 8109754:	681b      	ldr	r3, [r3, #0]
 8109756:	2b00      	cmp	r3, #0
 8109758:	d1b2      	bne.n	81096c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 810975a:	4b07      	ldr	r3, [pc, #28]	; (8109778 <prvSwitchTimerLists+0xc0>)
 810975c:	681b      	ldr	r3, [r3, #0]
 810975e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8109760:	4b06      	ldr	r3, [pc, #24]	; (810977c <prvSwitchTimerLists+0xc4>)
 8109762:	681b      	ldr	r3, [r3, #0]
 8109764:	4a04      	ldr	r2, [pc, #16]	; (8109778 <prvSwitchTimerLists+0xc0>)
 8109766:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8109768:	4a04      	ldr	r2, [pc, #16]	; (810977c <prvSwitchTimerLists+0xc4>)
 810976a:	697b      	ldr	r3, [r7, #20]
 810976c:	6013      	str	r3, [r2, #0]
}
 810976e:	bf00      	nop
 8109770:	3718      	adds	r7, #24
 8109772:	46bd      	mov	sp, r7
 8109774:	bd80      	pop	{r7, pc}
 8109776:	bf00      	nop
 8109778:	10000e0c 	.word	0x10000e0c
 810977c:	10000e10 	.word	0x10000e10

08109780 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8109780:	b580      	push	{r7, lr}
 8109782:	b082      	sub	sp, #8
 8109784:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8109786:	f000 f961 	bl	8109a4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 810978a:	4b15      	ldr	r3, [pc, #84]	; (81097e0 <prvCheckForValidListAndQueue+0x60>)
 810978c:	681b      	ldr	r3, [r3, #0]
 810978e:	2b00      	cmp	r3, #0
 8109790:	d120      	bne.n	81097d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8109792:	4814      	ldr	r0, [pc, #80]	; (81097e4 <prvCheckForValidListAndQueue+0x64>)
 8109794:	f7fe f880 	bl	8107898 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8109798:	4813      	ldr	r0, [pc, #76]	; (81097e8 <prvCheckForValidListAndQueue+0x68>)
 810979a:	f7fe f87d 	bl	8107898 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 810979e:	4b13      	ldr	r3, [pc, #76]	; (81097ec <prvCheckForValidListAndQueue+0x6c>)
 81097a0:	4a10      	ldr	r2, [pc, #64]	; (81097e4 <prvCheckForValidListAndQueue+0x64>)
 81097a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 81097a4:	4b12      	ldr	r3, [pc, #72]	; (81097f0 <prvCheckForValidListAndQueue+0x70>)
 81097a6:	4a10      	ldr	r2, [pc, #64]	; (81097e8 <prvCheckForValidListAndQueue+0x68>)
 81097a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 81097aa:	2300      	movs	r3, #0
 81097ac:	9300      	str	r3, [sp, #0]
 81097ae:	4b11      	ldr	r3, [pc, #68]	; (81097f4 <prvCheckForValidListAndQueue+0x74>)
 81097b0:	4a11      	ldr	r2, [pc, #68]	; (81097f8 <prvCheckForValidListAndQueue+0x78>)
 81097b2:	2110      	movs	r1, #16
 81097b4:	200a      	movs	r0, #10
 81097b6:	f7fe f98b 	bl	8107ad0 <xQueueGenericCreateStatic>
 81097ba:	4602      	mov	r2, r0
 81097bc:	4b08      	ldr	r3, [pc, #32]	; (81097e0 <prvCheckForValidListAndQueue+0x60>)
 81097be:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 81097c0:	4b07      	ldr	r3, [pc, #28]	; (81097e0 <prvCheckForValidListAndQueue+0x60>)
 81097c2:	681b      	ldr	r3, [r3, #0]
 81097c4:	2b00      	cmp	r3, #0
 81097c6:	d005      	beq.n	81097d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 81097c8:	4b05      	ldr	r3, [pc, #20]	; (81097e0 <prvCheckForValidListAndQueue+0x60>)
 81097ca:	681b      	ldr	r3, [r3, #0]
 81097cc:	490b      	ldr	r1, [pc, #44]	; (81097fc <prvCheckForValidListAndQueue+0x7c>)
 81097ce:	4618      	mov	r0, r3
 81097d0:	f7fe fd8e 	bl	81082f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 81097d4:	f000 f968 	bl	8109aa8 <vPortExitCritical>
}
 81097d8:	bf00      	nop
 81097da:	46bd      	mov	sp, r7
 81097dc:	bd80      	pop	{r7, pc}
 81097de:	bf00      	nop
 81097e0:	10000e14 	.word	0x10000e14
 81097e4:	10000de4 	.word	0x10000de4
 81097e8:	10000df8 	.word	0x10000df8
 81097ec:	10000e0c 	.word	0x10000e0c
 81097f0:	10000e10 	.word	0x10000e10
 81097f4:	10000ec0 	.word	0x10000ec0
 81097f8:	10000e20 	.word	0x10000e20
 81097fc:	0810bee4 	.word	0x0810bee4

08109800 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8109800:	b480      	push	{r7}
 8109802:	b085      	sub	sp, #20
 8109804:	af00      	add	r7, sp, #0
 8109806:	60f8      	str	r0, [r7, #12]
 8109808:	60b9      	str	r1, [r7, #8]
 810980a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 810980c:	68fb      	ldr	r3, [r7, #12]
 810980e:	3b04      	subs	r3, #4
 8109810:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8109812:	68fb      	ldr	r3, [r7, #12]
 8109814:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8109818:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810981a:	68fb      	ldr	r3, [r7, #12]
 810981c:	3b04      	subs	r3, #4
 810981e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8109820:	68bb      	ldr	r3, [r7, #8]
 8109822:	f023 0201 	bic.w	r2, r3, #1
 8109826:	68fb      	ldr	r3, [r7, #12]
 8109828:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810982a:	68fb      	ldr	r3, [r7, #12]
 810982c:	3b04      	subs	r3, #4
 810982e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8109830:	4a0c      	ldr	r2, [pc, #48]	; (8109864 <pxPortInitialiseStack+0x64>)
 8109832:	68fb      	ldr	r3, [r7, #12]
 8109834:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8109836:	68fb      	ldr	r3, [r7, #12]
 8109838:	3b14      	subs	r3, #20
 810983a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 810983c:	687a      	ldr	r2, [r7, #4]
 810983e:	68fb      	ldr	r3, [r7, #12]
 8109840:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8109842:	68fb      	ldr	r3, [r7, #12]
 8109844:	3b04      	subs	r3, #4
 8109846:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8109848:	68fb      	ldr	r3, [r7, #12]
 810984a:	f06f 0202 	mvn.w	r2, #2
 810984e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8109850:	68fb      	ldr	r3, [r7, #12]
 8109852:	3b20      	subs	r3, #32
 8109854:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8109856:	68fb      	ldr	r3, [r7, #12]
}
 8109858:	4618      	mov	r0, r3
 810985a:	3714      	adds	r7, #20
 810985c:	46bd      	mov	sp, r7
 810985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109862:	4770      	bx	lr
 8109864:	08109869 	.word	0x08109869

08109868 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8109868:	b480      	push	{r7}
 810986a:	b085      	sub	sp, #20
 810986c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 810986e:	2300      	movs	r3, #0
 8109870:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8109872:	4b11      	ldr	r3, [pc, #68]	; (81098b8 <prvTaskExitError+0x50>)
 8109874:	681b      	ldr	r3, [r3, #0]
 8109876:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810987a:	d009      	beq.n	8109890 <prvTaskExitError+0x28>
 810987c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109880:	f383 8811 	msr	BASEPRI, r3
 8109884:	f3bf 8f6f 	isb	sy
 8109888:	f3bf 8f4f 	dsb	sy
 810988c:	60fb      	str	r3, [r7, #12]
 810988e:	e7fe      	b.n	810988e <prvTaskExitError+0x26>
 8109890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109894:	f383 8811 	msr	BASEPRI, r3
 8109898:	f3bf 8f6f 	isb	sy
 810989c:	f3bf 8f4f 	dsb	sy
 81098a0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 81098a2:	bf00      	nop
 81098a4:	687b      	ldr	r3, [r7, #4]
 81098a6:	2b00      	cmp	r3, #0
 81098a8:	d0fc      	beq.n	81098a4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 81098aa:	bf00      	nop
 81098ac:	3714      	adds	r7, #20
 81098ae:	46bd      	mov	sp, r7
 81098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81098b4:	4770      	bx	lr
 81098b6:	bf00      	nop
 81098b8:	10000024 	.word	0x10000024
 81098bc:	00000000 	.word	0x00000000

081098c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 81098c0:	4b07      	ldr	r3, [pc, #28]	; (81098e0 <pxCurrentTCBConst2>)
 81098c2:	6819      	ldr	r1, [r3, #0]
 81098c4:	6808      	ldr	r0, [r1, #0]
 81098c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81098ca:	f380 8809 	msr	PSP, r0
 81098ce:	f3bf 8f6f 	isb	sy
 81098d2:	f04f 0000 	mov.w	r0, #0
 81098d6:	f380 8811 	msr	BASEPRI, r0
 81098da:	4770      	bx	lr
 81098dc:	f3af 8000 	nop.w

081098e0 <pxCurrentTCBConst2>:
 81098e0:	100008e4 	.word	0x100008e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 81098e4:	bf00      	nop
 81098e6:	bf00      	nop

081098e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 81098e8:	4808      	ldr	r0, [pc, #32]	; (810990c <prvPortStartFirstTask+0x24>)
 81098ea:	6800      	ldr	r0, [r0, #0]
 81098ec:	6800      	ldr	r0, [r0, #0]
 81098ee:	f380 8808 	msr	MSP, r0
 81098f2:	f04f 0000 	mov.w	r0, #0
 81098f6:	f380 8814 	msr	CONTROL, r0
 81098fa:	b662      	cpsie	i
 81098fc:	b661      	cpsie	f
 81098fe:	f3bf 8f4f 	dsb	sy
 8109902:	f3bf 8f6f 	isb	sy
 8109906:	df00      	svc	0
 8109908:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 810990a:	bf00      	nop
 810990c:	e000ed08 	.word	0xe000ed08

08109910 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8109910:	b580      	push	{r7, lr}
 8109912:	b086      	sub	sp, #24
 8109914:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8109916:	4b44      	ldr	r3, [pc, #272]	; (8109a28 <xPortStartScheduler+0x118>)
 8109918:	681b      	ldr	r3, [r3, #0]
 810991a:	4a44      	ldr	r2, [pc, #272]	; (8109a2c <xPortStartScheduler+0x11c>)
 810991c:	4293      	cmp	r3, r2
 810991e:	d109      	bne.n	8109934 <xPortStartScheduler+0x24>
 8109920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109924:	f383 8811 	msr	BASEPRI, r3
 8109928:	f3bf 8f6f 	isb	sy
 810992c:	f3bf 8f4f 	dsb	sy
 8109930:	613b      	str	r3, [r7, #16]
 8109932:	e7fe      	b.n	8109932 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8109934:	4b3c      	ldr	r3, [pc, #240]	; (8109a28 <xPortStartScheduler+0x118>)
 8109936:	681b      	ldr	r3, [r3, #0]
 8109938:	4a3d      	ldr	r2, [pc, #244]	; (8109a30 <xPortStartScheduler+0x120>)
 810993a:	4293      	cmp	r3, r2
 810993c:	d109      	bne.n	8109952 <xPortStartScheduler+0x42>
 810993e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109942:	f383 8811 	msr	BASEPRI, r3
 8109946:	f3bf 8f6f 	isb	sy
 810994a:	f3bf 8f4f 	dsb	sy
 810994e:	60fb      	str	r3, [r7, #12]
 8109950:	e7fe      	b.n	8109950 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8109952:	4b38      	ldr	r3, [pc, #224]	; (8109a34 <xPortStartScheduler+0x124>)
 8109954:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8109956:	697b      	ldr	r3, [r7, #20]
 8109958:	781b      	ldrb	r3, [r3, #0]
 810995a:	b2db      	uxtb	r3, r3
 810995c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 810995e:	697b      	ldr	r3, [r7, #20]
 8109960:	22ff      	movs	r2, #255	; 0xff
 8109962:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8109964:	697b      	ldr	r3, [r7, #20]
 8109966:	781b      	ldrb	r3, [r3, #0]
 8109968:	b2db      	uxtb	r3, r3
 810996a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 810996c:	78fb      	ldrb	r3, [r7, #3]
 810996e:	b2db      	uxtb	r3, r3
 8109970:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8109974:	b2da      	uxtb	r2, r3
 8109976:	4b30      	ldr	r3, [pc, #192]	; (8109a38 <xPortStartScheduler+0x128>)
 8109978:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 810997a:	4b30      	ldr	r3, [pc, #192]	; (8109a3c <xPortStartScheduler+0x12c>)
 810997c:	2207      	movs	r2, #7
 810997e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8109980:	e009      	b.n	8109996 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8109982:	4b2e      	ldr	r3, [pc, #184]	; (8109a3c <xPortStartScheduler+0x12c>)
 8109984:	681b      	ldr	r3, [r3, #0]
 8109986:	3b01      	subs	r3, #1
 8109988:	4a2c      	ldr	r2, [pc, #176]	; (8109a3c <xPortStartScheduler+0x12c>)
 810998a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 810998c:	78fb      	ldrb	r3, [r7, #3]
 810998e:	b2db      	uxtb	r3, r3
 8109990:	005b      	lsls	r3, r3, #1
 8109992:	b2db      	uxtb	r3, r3
 8109994:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8109996:	78fb      	ldrb	r3, [r7, #3]
 8109998:	b2db      	uxtb	r3, r3
 810999a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810999e:	2b80      	cmp	r3, #128	; 0x80
 81099a0:	d0ef      	beq.n	8109982 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 81099a2:	4b26      	ldr	r3, [pc, #152]	; (8109a3c <xPortStartScheduler+0x12c>)
 81099a4:	681b      	ldr	r3, [r3, #0]
 81099a6:	f1c3 0307 	rsb	r3, r3, #7
 81099aa:	2b04      	cmp	r3, #4
 81099ac:	d009      	beq.n	81099c2 <xPortStartScheduler+0xb2>
 81099ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 81099b2:	f383 8811 	msr	BASEPRI, r3
 81099b6:	f3bf 8f6f 	isb	sy
 81099ba:	f3bf 8f4f 	dsb	sy
 81099be:	60bb      	str	r3, [r7, #8]
 81099c0:	e7fe      	b.n	81099c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 81099c2:	4b1e      	ldr	r3, [pc, #120]	; (8109a3c <xPortStartScheduler+0x12c>)
 81099c4:	681b      	ldr	r3, [r3, #0]
 81099c6:	021b      	lsls	r3, r3, #8
 81099c8:	4a1c      	ldr	r2, [pc, #112]	; (8109a3c <xPortStartScheduler+0x12c>)
 81099ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 81099cc:	4b1b      	ldr	r3, [pc, #108]	; (8109a3c <xPortStartScheduler+0x12c>)
 81099ce:	681b      	ldr	r3, [r3, #0]
 81099d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 81099d4:	4a19      	ldr	r2, [pc, #100]	; (8109a3c <xPortStartScheduler+0x12c>)
 81099d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 81099d8:	687b      	ldr	r3, [r7, #4]
 81099da:	b2da      	uxtb	r2, r3
 81099dc:	697b      	ldr	r3, [r7, #20]
 81099de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 81099e0:	4b17      	ldr	r3, [pc, #92]	; (8109a40 <xPortStartScheduler+0x130>)
 81099e2:	681b      	ldr	r3, [r3, #0]
 81099e4:	4a16      	ldr	r2, [pc, #88]	; (8109a40 <xPortStartScheduler+0x130>)
 81099e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81099ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 81099ec:	4b14      	ldr	r3, [pc, #80]	; (8109a40 <xPortStartScheduler+0x130>)
 81099ee:	681b      	ldr	r3, [r3, #0]
 81099f0:	4a13      	ldr	r2, [pc, #76]	; (8109a40 <xPortStartScheduler+0x130>)
 81099f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 81099f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 81099f8:	f000 f8d6 	bl	8109ba8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 81099fc:	4b11      	ldr	r3, [pc, #68]	; (8109a44 <xPortStartScheduler+0x134>)
 81099fe:	2200      	movs	r2, #0
 8109a00:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8109a02:	f000 f8f5 	bl	8109bf0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8109a06:	4b10      	ldr	r3, [pc, #64]	; (8109a48 <xPortStartScheduler+0x138>)
 8109a08:	681b      	ldr	r3, [r3, #0]
 8109a0a:	4a0f      	ldr	r2, [pc, #60]	; (8109a48 <xPortStartScheduler+0x138>)
 8109a0c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8109a10:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8109a12:	f7ff ff69 	bl	81098e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8109a16:	f7ff f86f 	bl	8108af8 <vTaskSwitchContext>
	prvTaskExitError();
 8109a1a:	f7ff ff25 	bl	8109868 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8109a1e:	2300      	movs	r3, #0
}
 8109a20:	4618      	mov	r0, r3
 8109a22:	3718      	adds	r7, #24
 8109a24:	46bd      	mov	sp, r7
 8109a26:	bd80      	pop	{r7, pc}
 8109a28:	e000ed00 	.word	0xe000ed00
 8109a2c:	410fc271 	.word	0x410fc271
 8109a30:	410fc270 	.word	0x410fc270
 8109a34:	e000e400 	.word	0xe000e400
 8109a38:	10000f10 	.word	0x10000f10
 8109a3c:	10000f14 	.word	0x10000f14
 8109a40:	e000ed20 	.word	0xe000ed20
 8109a44:	10000024 	.word	0x10000024
 8109a48:	e000ef34 	.word	0xe000ef34

08109a4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8109a4c:	b480      	push	{r7}
 8109a4e:	b083      	sub	sp, #12
 8109a50:	af00      	add	r7, sp, #0
 8109a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109a56:	f383 8811 	msr	BASEPRI, r3
 8109a5a:	f3bf 8f6f 	isb	sy
 8109a5e:	f3bf 8f4f 	dsb	sy
 8109a62:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8109a64:	4b0e      	ldr	r3, [pc, #56]	; (8109aa0 <vPortEnterCritical+0x54>)
 8109a66:	681b      	ldr	r3, [r3, #0]
 8109a68:	3301      	adds	r3, #1
 8109a6a:	4a0d      	ldr	r2, [pc, #52]	; (8109aa0 <vPortEnterCritical+0x54>)
 8109a6c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8109a6e:	4b0c      	ldr	r3, [pc, #48]	; (8109aa0 <vPortEnterCritical+0x54>)
 8109a70:	681b      	ldr	r3, [r3, #0]
 8109a72:	2b01      	cmp	r3, #1
 8109a74:	d10e      	bne.n	8109a94 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8109a76:	4b0b      	ldr	r3, [pc, #44]	; (8109aa4 <vPortEnterCritical+0x58>)
 8109a78:	681b      	ldr	r3, [r3, #0]
 8109a7a:	b2db      	uxtb	r3, r3
 8109a7c:	2b00      	cmp	r3, #0
 8109a7e:	d009      	beq.n	8109a94 <vPortEnterCritical+0x48>
 8109a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109a84:	f383 8811 	msr	BASEPRI, r3
 8109a88:	f3bf 8f6f 	isb	sy
 8109a8c:	f3bf 8f4f 	dsb	sy
 8109a90:	603b      	str	r3, [r7, #0]
 8109a92:	e7fe      	b.n	8109a92 <vPortEnterCritical+0x46>
	}
}
 8109a94:	bf00      	nop
 8109a96:	370c      	adds	r7, #12
 8109a98:	46bd      	mov	sp, r7
 8109a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a9e:	4770      	bx	lr
 8109aa0:	10000024 	.word	0x10000024
 8109aa4:	e000ed04 	.word	0xe000ed04

08109aa8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8109aa8:	b480      	push	{r7}
 8109aaa:	b083      	sub	sp, #12
 8109aac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8109aae:	4b11      	ldr	r3, [pc, #68]	; (8109af4 <vPortExitCritical+0x4c>)
 8109ab0:	681b      	ldr	r3, [r3, #0]
 8109ab2:	2b00      	cmp	r3, #0
 8109ab4:	d109      	bne.n	8109aca <vPortExitCritical+0x22>
 8109ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109aba:	f383 8811 	msr	BASEPRI, r3
 8109abe:	f3bf 8f6f 	isb	sy
 8109ac2:	f3bf 8f4f 	dsb	sy
 8109ac6:	607b      	str	r3, [r7, #4]
 8109ac8:	e7fe      	b.n	8109ac8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8109aca:	4b0a      	ldr	r3, [pc, #40]	; (8109af4 <vPortExitCritical+0x4c>)
 8109acc:	681b      	ldr	r3, [r3, #0]
 8109ace:	3b01      	subs	r3, #1
 8109ad0:	4a08      	ldr	r2, [pc, #32]	; (8109af4 <vPortExitCritical+0x4c>)
 8109ad2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8109ad4:	4b07      	ldr	r3, [pc, #28]	; (8109af4 <vPortExitCritical+0x4c>)
 8109ad6:	681b      	ldr	r3, [r3, #0]
 8109ad8:	2b00      	cmp	r3, #0
 8109ada:	d104      	bne.n	8109ae6 <vPortExitCritical+0x3e>
 8109adc:	2300      	movs	r3, #0
 8109ade:	603b      	str	r3, [r7, #0]
	__asm volatile
 8109ae0:	683b      	ldr	r3, [r7, #0]
 8109ae2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8109ae6:	bf00      	nop
 8109ae8:	370c      	adds	r7, #12
 8109aea:	46bd      	mov	sp, r7
 8109aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109af0:	4770      	bx	lr
 8109af2:	bf00      	nop
 8109af4:	10000024 	.word	0x10000024
	...

08109b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8109b00:	f3ef 8009 	mrs	r0, PSP
 8109b04:	f3bf 8f6f 	isb	sy
 8109b08:	4b15      	ldr	r3, [pc, #84]	; (8109b60 <pxCurrentTCBConst>)
 8109b0a:	681a      	ldr	r2, [r3, #0]
 8109b0c:	f01e 0f10 	tst.w	lr, #16
 8109b10:	bf08      	it	eq
 8109b12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8109b16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109b1a:	6010      	str	r0, [r2, #0]
 8109b1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8109b20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8109b24:	f380 8811 	msr	BASEPRI, r0
 8109b28:	f3bf 8f4f 	dsb	sy
 8109b2c:	f3bf 8f6f 	isb	sy
 8109b30:	f7fe ffe2 	bl	8108af8 <vTaskSwitchContext>
 8109b34:	f04f 0000 	mov.w	r0, #0
 8109b38:	f380 8811 	msr	BASEPRI, r0
 8109b3c:	bc09      	pop	{r0, r3}
 8109b3e:	6819      	ldr	r1, [r3, #0]
 8109b40:	6808      	ldr	r0, [r1, #0]
 8109b42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109b46:	f01e 0f10 	tst.w	lr, #16
 8109b4a:	bf08      	it	eq
 8109b4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8109b50:	f380 8809 	msr	PSP, r0
 8109b54:	f3bf 8f6f 	isb	sy
 8109b58:	4770      	bx	lr
 8109b5a:	bf00      	nop
 8109b5c:	f3af 8000 	nop.w

08109b60 <pxCurrentTCBConst>:
 8109b60:	100008e4 	.word	0x100008e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8109b64:	bf00      	nop
 8109b66:	bf00      	nop

08109b68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8109b68:	b580      	push	{r7, lr}
 8109b6a:	b082      	sub	sp, #8
 8109b6c:	af00      	add	r7, sp, #0
	__asm volatile
 8109b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109b72:	f383 8811 	msr	BASEPRI, r3
 8109b76:	f3bf 8f6f 	isb	sy
 8109b7a:	f3bf 8f4f 	dsb	sy
 8109b7e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8109b80:	f7fe ff02 	bl	8108988 <xTaskIncrementTick>
 8109b84:	4603      	mov	r3, r0
 8109b86:	2b00      	cmp	r3, #0
 8109b88:	d003      	beq.n	8109b92 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8109b8a:	4b06      	ldr	r3, [pc, #24]	; (8109ba4 <SysTick_Handler+0x3c>)
 8109b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8109b90:	601a      	str	r2, [r3, #0]
 8109b92:	2300      	movs	r3, #0
 8109b94:	603b      	str	r3, [r7, #0]
	__asm volatile
 8109b96:	683b      	ldr	r3, [r7, #0]
 8109b98:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8109b9c:	bf00      	nop
 8109b9e:	3708      	adds	r7, #8
 8109ba0:	46bd      	mov	sp, r7
 8109ba2:	bd80      	pop	{r7, pc}
 8109ba4:	e000ed04 	.word	0xe000ed04

08109ba8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8109ba8:	b480      	push	{r7}
 8109baa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8109bac:	4b0b      	ldr	r3, [pc, #44]	; (8109bdc <vPortSetupTimerInterrupt+0x34>)
 8109bae:	2200      	movs	r2, #0
 8109bb0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8109bb2:	4b0b      	ldr	r3, [pc, #44]	; (8109be0 <vPortSetupTimerInterrupt+0x38>)
 8109bb4:	2200      	movs	r2, #0
 8109bb6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8109bb8:	4b0a      	ldr	r3, [pc, #40]	; (8109be4 <vPortSetupTimerInterrupt+0x3c>)
 8109bba:	681b      	ldr	r3, [r3, #0]
 8109bbc:	4a0a      	ldr	r2, [pc, #40]	; (8109be8 <vPortSetupTimerInterrupt+0x40>)
 8109bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8109bc2:	099b      	lsrs	r3, r3, #6
 8109bc4:	4a09      	ldr	r2, [pc, #36]	; (8109bec <vPortSetupTimerInterrupt+0x44>)
 8109bc6:	3b01      	subs	r3, #1
 8109bc8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8109bca:	4b04      	ldr	r3, [pc, #16]	; (8109bdc <vPortSetupTimerInterrupt+0x34>)
 8109bcc:	2207      	movs	r2, #7
 8109bce:	601a      	str	r2, [r3, #0]
}
 8109bd0:	bf00      	nop
 8109bd2:	46bd      	mov	sp, r7
 8109bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109bd8:	4770      	bx	lr
 8109bda:	bf00      	nop
 8109bdc:	e000e010 	.word	0xe000e010
 8109be0:	e000e018 	.word	0xe000e018
 8109be4:	10000004 	.word	0x10000004
 8109be8:	10624dd3 	.word	0x10624dd3
 8109bec:	e000e014 	.word	0xe000e014

08109bf0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8109bf0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8109c00 <vPortEnableVFP+0x10>
 8109bf4:	6801      	ldr	r1, [r0, #0]
 8109bf6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8109bfa:	6001      	str	r1, [r0, #0]
 8109bfc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8109bfe:	bf00      	nop
 8109c00:	e000ed88 	.word	0xe000ed88

08109c04 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8109c04:	b480      	push	{r7}
 8109c06:	b085      	sub	sp, #20
 8109c08:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8109c0a:	f3ef 8305 	mrs	r3, IPSR
 8109c0e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8109c10:	68fb      	ldr	r3, [r7, #12]
 8109c12:	2b0f      	cmp	r3, #15
 8109c14:	d913      	bls.n	8109c3e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8109c16:	4a16      	ldr	r2, [pc, #88]	; (8109c70 <vPortValidateInterruptPriority+0x6c>)
 8109c18:	68fb      	ldr	r3, [r7, #12]
 8109c1a:	4413      	add	r3, r2
 8109c1c:	781b      	ldrb	r3, [r3, #0]
 8109c1e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8109c20:	4b14      	ldr	r3, [pc, #80]	; (8109c74 <vPortValidateInterruptPriority+0x70>)
 8109c22:	781b      	ldrb	r3, [r3, #0]
 8109c24:	7afa      	ldrb	r2, [r7, #11]
 8109c26:	429a      	cmp	r2, r3
 8109c28:	d209      	bcs.n	8109c3e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8109c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109c2e:	f383 8811 	msr	BASEPRI, r3
 8109c32:	f3bf 8f6f 	isb	sy
 8109c36:	f3bf 8f4f 	dsb	sy
 8109c3a:	607b      	str	r3, [r7, #4]
 8109c3c:	e7fe      	b.n	8109c3c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8109c3e:	4b0e      	ldr	r3, [pc, #56]	; (8109c78 <vPortValidateInterruptPriority+0x74>)
 8109c40:	681b      	ldr	r3, [r3, #0]
 8109c42:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8109c46:	4b0d      	ldr	r3, [pc, #52]	; (8109c7c <vPortValidateInterruptPriority+0x78>)
 8109c48:	681b      	ldr	r3, [r3, #0]
 8109c4a:	429a      	cmp	r2, r3
 8109c4c:	d909      	bls.n	8109c62 <vPortValidateInterruptPriority+0x5e>
 8109c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109c52:	f383 8811 	msr	BASEPRI, r3
 8109c56:	f3bf 8f6f 	isb	sy
 8109c5a:	f3bf 8f4f 	dsb	sy
 8109c5e:	603b      	str	r3, [r7, #0]
 8109c60:	e7fe      	b.n	8109c60 <vPortValidateInterruptPriority+0x5c>
	}
 8109c62:	bf00      	nop
 8109c64:	3714      	adds	r7, #20
 8109c66:	46bd      	mov	sp, r7
 8109c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109c6c:	4770      	bx	lr
 8109c6e:	bf00      	nop
 8109c70:	e000e3f0 	.word	0xe000e3f0
 8109c74:	10000f10 	.word	0x10000f10
 8109c78:	e000ed0c 	.word	0xe000ed0c
 8109c7c:	10000f14 	.word	0x10000f14

08109c80 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8109c80:	b580      	push	{r7, lr}
 8109c82:	b08a      	sub	sp, #40	; 0x28
 8109c84:	af00      	add	r7, sp, #0
 8109c86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8109c88:	2300      	movs	r3, #0
 8109c8a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8109c8c:	f7fe fdc2 	bl	8108814 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8109c90:	4b57      	ldr	r3, [pc, #348]	; (8109df0 <pvPortMalloc+0x170>)
 8109c92:	681b      	ldr	r3, [r3, #0]
 8109c94:	2b00      	cmp	r3, #0
 8109c96:	d101      	bne.n	8109c9c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8109c98:	f000 f90c 	bl	8109eb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8109c9c:	4b55      	ldr	r3, [pc, #340]	; (8109df4 <pvPortMalloc+0x174>)
 8109c9e:	681a      	ldr	r2, [r3, #0]
 8109ca0:	687b      	ldr	r3, [r7, #4]
 8109ca2:	4013      	ands	r3, r2
 8109ca4:	2b00      	cmp	r3, #0
 8109ca6:	f040 808c 	bne.w	8109dc2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8109caa:	687b      	ldr	r3, [r7, #4]
 8109cac:	2b00      	cmp	r3, #0
 8109cae:	d01c      	beq.n	8109cea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8109cb0:	2208      	movs	r2, #8
 8109cb2:	687b      	ldr	r3, [r7, #4]
 8109cb4:	4413      	add	r3, r2
 8109cb6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8109cb8:	687b      	ldr	r3, [r7, #4]
 8109cba:	f003 0307 	and.w	r3, r3, #7
 8109cbe:	2b00      	cmp	r3, #0
 8109cc0:	d013      	beq.n	8109cea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8109cc2:	687b      	ldr	r3, [r7, #4]
 8109cc4:	f023 0307 	bic.w	r3, r3, #7
 8109cc8:	3308      	adds	r3, #8
 8109cca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8109ccc:	687b      	ldr	r3, [r7, #4]
 8109cce:	f003 0307 	and.w	r3, r3, #7
 8109cd2:	2b00      	cmp	r3, #0
 8109cd4:	d009      	beq.n	8109cea <pvPortMalloc+0x6a>
 8109cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109cda:	f383 8811 	msr	BASEPRI, r3
 8109cde:	f3bf 8f6f 	isb	sy
 8109ce2:	f3bf 8f4f 	dsb	sy
 8109ce6:	617b      	str	r3, [r7, #20]
 8109ce8:	e7fe      	b.n	8109ce8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8109cea:	687b      	ldr	r3, [r7, #4]
 8109cec:	2b00      	cmp	r3, #0
 8109cee:	d068      	beq.n	8109dc2 <pvPortMalloc+0x142>
 8109cf0:	4b41      	ldr	r3, [pc, #260]	; (8109df8 <pvPortMalloc+0x178>)
 8109cf2:	681b      	ldr	r3, [r3, #0]
 8109cf4:	687a      	ldr	r2, [r7, #4]
 8109cf6:	429a      	cmp	r2, r3
 8109cf8:	d863      	bhi.n	8109dc2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8109cfa:	4b40      	ldr	r3, [pc, #256]	; (8109dfc <pvPortMalloc+0x17c>)
 8109cfc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8109cfe:	4b3f      	ldr	r3, [pc, #252]	; (8109dfc <pvPortMalloc+0x17c>)
 8109d00:	681b      	ldr	r3, [r3, #0]
 8109d02:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8109d04:	e004      	b.n	8109d10 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8109d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109d08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8109d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109d0c:	681b      	ldr	r3, [r3, #0]
 8109d0e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8109d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109d12:	685b      	ldr	r3, [r3, #4]
 8109d14:	687a      	ldr	r2, [r7, #4]
 8109d16:	429a      	cmp	r2, r3
 8109d18:	d903      	bls.n	8109d22 <pvPortMalloc+0xa2>
 8109d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109d1c:	681b      	ldr	r3, [r3, #0]
 8109d1e:	2b00      	cmp	r3, #0
 8109d20:	d1f1      	bne.n	8109d06 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8109d22:	4b33      	ldr	r3, [pc, #204]	; (8109df0 <pvPortMalloc+0x170>)
 8109d24:	681b      	ldr	r3, [r3, #0]
 8109d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8109d28:	429a      	cmp	r2, r3
 8109d2a:	d04a      	beq.n	8109dc2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8109d2c:	6a3b      	ldr	r3, [r7, #32]
 8109d2e:	681b      	ldr	r3, [r3, #0]
 8109d30:	2208      	movs	r2, #8
 8109d32:	4413      	add	r3, r2
 8109d34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8109d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109d38:	681a      	ldr	r2, [r3, #0]
 8109d3a:	6a3b      	ldr	r3, [r7, #32]
 8109d3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8109d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109d40:	685a      	ldr	r2, [r3, #4]
 8109d42:	687b      	ldr	r3, [r7, #4]
 8109d44:	1ad2      	subs	r2, r2, r3
 8109d46:	2308      	movs	r3, #8
 8109d48:	005b      	lsls	r3, r3, #1
 8109d4a:	429a      	cmp	r2, r3
 8109d4c:	d91e      	bls.n	8109d8c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8109d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8109d50:	687b      	ldr	r3, [r7, #4]
 8109d52:	4413      	add	r3, r2
 8109d54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8109d56:	69bb      	ldr	r3, [r7, #24]
 8109d58:	f003 0307 	and.w	r3, r3, #7
 8109d5c:	2b00      	cmp	r3, #0
 8109d5e:	d009      	beq.n	8109d74 <pvPortMalloc+0xf4>
 8109d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109d64:	f383 8811 	msr	BASEPRI, r3
 8109d68:	f3bf 8f6f 	isb	sy
 8109d6c:	f3bf 8f4f 	dsb	sy
 8109d70:	613b      	str	r3, [r7, #16]
 8109d72:	e7fe      	b.n	8109d72 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8109d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109d76:	685a      	ldr	r2, [r3, #4]
 8109d78:	687b      	ldr	r3, [r7, #4]
 8109d7a:	1ad2      	subs	r2, r2, r3
 8109d7c:	69bb      	ldr	r3, [r7, #24]
 8109d7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8109d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109d82:	687a      	ldr	r2, [r7, #4]
 8109d84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8109d86:	69b8      	ldr	r0, [r7, #24]
 8109d88:	f000 f8f6 	bl	8109f78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8109d8c:	4b1a      	ldr	r3, [pc, #104]	; (8109df8 <pvPortMalloc+0x178>)
 8109d8e:	681a      	ldr	r2, [r3, #0]
 8109d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109d92:	685b      	ldr	r3, [r3, #4]
 8109d94:	1ad3      	subs	r3, r2, r3
 8109d96:	4a18      	ldr	r2, [pc, #96]	; (8109df8 <pvPortMalloc+0x178>)
 8109d98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8109d9a:	4b17      	ldr	r3, [pc, #92]	; (8109df8 <pvPortMalloc+0x178>)
 8109d9c:	681a      	ldr	r2, [r3, #0]
 8109d9e:	4b18      	ldr	r3, [pc, #96]	; (8109e00 <pvPortMalloc+0x180>)
 8109da0:	681b      	ldr	r3, [r3, #0]
 8109da2:	429a      	cmp	r2, r3
 8109da4:	d203      	bcs.n	8109dae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8109da6:	4b14      	ldr	r3, [pc, #80]	; (8109df8 <pvPortMalloc+0x178>)
 8109da8:	681b      	ldr	r3, [r3, #0]
 8109daa:	4a15      	ldr	r2, [pc, #84]	; (8109e00 <pvPortMalloc+0x180>)
 8109dac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8109dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109db0:	685a      	ldr	r2, [r3, #4]
 8109db2:	4b10      	ldr	r3, [pc, #64]	; (8109df4 <pvPortMalloc+0x174>)
 8109db4:	681b      	ldr	r3, [r3, #0]
 8109db6:	431a      	orrs	r2, r3
 8109db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109dba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8109dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109dbe:	2200      	movs	r2, #0
 8109dc0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8109dc2:	f7fe fd35 	bl	8108830 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8109dc6:	69fb      	ldr	r3, [r7, #28]
 8109dc8:	f003 0307 	and.w	r3, r3, #7
 8109dcc:	2b00      	cmp	r3, #0
 8109dce:	d009      	beq.n	8109de4 <pvPortMalloc+0x164>
 8109dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109dd4:	f383 8811 	msr	BASEPRI, r3
 8109dd8:	f3bf 8f6f 	isb	sy
 8109ddc:	f3bf 8f4f 	dsb	sy
 8109de0:	60fb      	str	r3, [r7, #12]
 8109de2:	e7fe      	b.n	8109de2 <pvPortMalloc+0x162>
	return pvReturn;
 8109de4:	69fb      	ldr	r3, [r7, #28]
}
 8109de6:	4618      	mov	r0, r3
 8109de8:	3728      	adds	r7, #40	; 0x28
 8109dea:	46bd      	mov	sp, r7
 8109dec:	bd80      	pop	{r7, pc}
 8109dee:	bf00      	nop
 8109df0:	10004b20 	.word	0x10004b20
 8109df4:	10004b2c 	.word	0x10004b2c
 8109df8:	10004b24 	.word	0x10004b24
 8109dfc:	10004b18 	.word	0x10004b18
 8109e00:	10004b28 	.word	0x10004b28

08109e04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8109e04:	b580      	push	{r7, lr}
 8109e06:	b086      	sub	sp, #24
 8109e08:	af00      	add	r7, sp, #0
 8109e0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8109e0c:	687b      	ldr	r3, [r7, #4]
 8109e0e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8109e10:	687b      	ldr	r3, [r7, #4]
 8109e12:	2b00      	cmp	r3, #0
 8109e14:	d046      	beq.n	8109ea4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8109e16:	2308      	movs	r3, #8
 8109e18:	425b      	negs	r3, r3
 8109e1a:	697a      	ldr	r2, [r7, #20]
 8109e1c:	4413      	add	r3, r2
 8109e1e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8109e20:	697b      	ldr	r3, [r7, #20]
 8109e22:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8109e24:	693b      	ldr	r3, [r7, #16]
 8109e26:	685a      	ldr	r2, [r3, #4]
 8109e28:	4b20      	ldr	r3, [pc, #128]	; (8109eac <vPortFree+0xa8>)
 8109e2a:	681b      	ldr	r3, [r3, #0]
 8109e2c:	4013      	ands	r3, r2
 8109e2e:	2b00      	cmp	r3, #0
 8109e30:	d109      	bne.n	8109e46 <vPortFree+0x42>
 8109e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109e36:	f383 8811 	msr	BASEPRI, r3
 8109e3a:	f3bf 8f6f 	isb	sy
 8109e3e:	f3bf 8f4f 	dsb	sy
 8109e42:	60fb      	str	r3, [r7, #12]
 8109e44:	e7fe      	b.n	8109e44 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8109e46:	693b      	ldr	r3, [r7, #16]
 8109e48:	681b      	ldr	r3, [r3, #0]
 8109e4a:	2b00      	cmp	r3, #0
 8109e4c:	d009      	beq.n	8109e62 <vPortFree+0x5e>
 8109e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109e52:	f383 8811 	msr	BASEPRI, r3
 8109e56:	f3bf 8f6f 	isb	sy
 8109e5a:	f3bf 8f4f 	dsb	sy
 8109e5e:	60bb      	str	r3, [r7, #8]
 8109e60:	e7fe      	b.n	8109e60 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8109e62:	693b      	ldr	r3, [r7, #16]
 8109e64:	685a      	ldr	r2, [r3, #4]
 8109e66:	4b11      	ldr	r3, [pc, #68]	; (8109eac <vPortFree+0xa8>)
 8109e68:	681b      	ldr	r3, [r3, #0]
 8109e6a:	4013      	ands	r3, r2
 8109e6c:	2b00      	cmp	r3, #0
 8109e6e:	d019      	beq.n	8109ea4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8109e70:	693b      	ldr	r3, [r7, #16]
 8109e72:	681b      	ldr	r3, [r3, #0]
 8109e74:	2b00      	cmp	r3, #0
 8109e76:	d115      	bne.n	8109ea4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8109e78:	693b      	ldr	r3, [r7, #16]
 8109e7a:	685a      	ldr	r2, [r3, #4]
 8109e7c:	4b0b      	ldr	r3, [pc, #44]	; (8109eac <vPortFree+0xa8>)
 8109e7e:	681b      	ldr	r3, [r3, #0]
 8109e80:	43db      	mvns	r3, r3
 8109e82:	401a      	ands	r2, r3
 8109e84:	693b      	ldr	r3, [r7, #16]
 8109e86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8109e88:	f7fe fcc4 	bl	8108814 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8109e8c:	693b      	ldr	r3, [r7, #16]
 8109e8e:	685a      	ldr	r2, [r3, #4]
 8109e90:	4b07      	ldr	r3, [pc, #28]	; (8109eb0 <vPortFree+0xac>)
 8109e92:	681b      	ldr	r3, [r3, #0]
 8109e94:	4413      	add	r3, r2
 8109e96:	4a06      	ldr	r2, [pc, #24]	; (8109eb0 <vPortFree+0xac>)
 8109e98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8109e9a:	6938      	ldr	r0, [r7, #16]
 8109e9c:	f000 f86c 	bl	8109f78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8109ea0:	f7fe fcc6 	bl	8108830 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8109ea4:	bf00      	nop
 8109ea6:	3718      	adds	r7, #24
 8109ea8:	46bd      	mov	sp, r7
 8109eaa:	bd80      	pop	{r7, pc}
 8109eac:	10004b2c 	.word	0x10004b2c
 8109eb0:	10004b24 	.word	0x10004b24

08109eb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8109eb4:	b480      	push	{r7}
 8109eb6:	b085      	sub	sp, #20
 8109eb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8109eba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8109ebe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8109ec0:	4b27      	ldr	r3, [pc, #156]	; (8109f60 <prvHeapInit+0xac>)
 8109ec2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8109ec4:	68fb      	ldr	r3, [r7, #12]
 8109ec6:	f003 0307 	and.w	r3, r3, #7
 8109eca:	2b00      	cmp	r3, #0
 8109ecc:	d00c      	beq.n	8109ee8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8109ece:	68fb      	ldr	r3, [r7, #12]
 8109ed0:	3307      	adds	r3, #7
 8109ed2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8109ed4:	68fb      	ldr	r3, [r7, #12]
 8109ed6:	f023 0307 	bic.w	r3, r3, #7
 8109eda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8109edc:	68ba      	ldr	r2, [r7, #8]
 8109ede:	68fb      	ldr	r3, [r7, #12]
 8109ee0:	1ad3      	subs	r3, r2, r3
 8109ee2:	4a1f      	ldr	r2, [pc, #124]	; (8109f60 <prvHeapInit+0xac>)
 8109ee4:	4413      	add	r3, r2
 8109ee6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8109ee8:	68fb      	ldr	r3, [r7, #12]
 8109eea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8109eec:	4a1d      	ldr	r2, [pc, #116]	; (8109f64 <prvHeapInit+0xb0>)
 8109eee:	687b      	ldr	r3, [r7, #4]
 8109ef0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8109ef2:	4b1c      	ldr	r3, [pc, #112]	; (8109f64 <prvHeapInit+0xb0>)
 8109ef4:	2200      	movs	r2, #0
 8109ef6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8109ef8:	687b      	ldr	r3, [r7, #4]
 8109efa:	68ba      	ldr	r2, [r7, #8]
 8109efc:	4413      	add	r3, r2
 8109efe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8109f00:	2208      	movs	r2, #8
 8109f02:	68fb      	ldr	r3, [r7, #12]
 8109f04:	1a9b      	subs	r3, r3, r2
 8109f06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8109f08:	68fb      	ldr	r3, [r7, #12]
 8109f0a:	f023 0307 	bic.w	r3, r3, #7
 8109f0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8109f10:	68fb      	ldr	r3, [r7, #12]
 8109f12:	4a15      	ldr	r2, [pc, #84]	; (8109f68 <prvHeapInit+0xb4>)
 8109f14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8109f16:	4b14      	ldr	r3, [pc, #80]	; (8109f68 <prvHeapInit+0xb4>)
 8109f18:	681b      	ldr	r3, [r3, #0]
 8109f1a:	2200      	movs	r2, #0
 8109f1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8109f1e:	4b12      	ldr	r3, [pc, #72]	; (8109f68 <prvHeapInit+0xb4>)
 8109f20:	681b      	ldr	r3, [r3, #0]
 8109f22:	2200      	movs	r2, #0
 8109f24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8109f26:	687b      	ldr	r3, [r7, #4]
 8109f28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8109f2a:	683b      	ldr	r3, [r7, #0]
 8109f2c:	68fa      	ldr	r2, [r7, #12]
 8109f2e:	1ad2      	subs	r2, r2, r3
 8109f30:	683b      	ldr	r3, [r7, #0]
 8109f32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8109f34:	4b0c      	ldr	r3, [pc, #48]	; (8109f68 <prvHeapInit+0xb4>)
 8109f36:	681a      	ldr	r2, [r3, #0]
 8109f38:	683b      	ldr	r3, [r7, #0]
 8109f3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8109f3c:	683b      	ldr	r3, [r7, #0]
 8109f3e:	685b      	ldr	r3, [r3, #4]
 8109f40:	4a0a      	ldr	r2, [pc, #40]	; (8109f6c <prvHeapInit+0xb8>)
 8109f42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8109f44:	683b      	ldr	r3, [r7, #0]
 8109f46:	685b      	ldr	r3, [r3, #4]
 8109f48:	4a09      	ldr	r2, [pc, #36]	; (8109f70 <prvHeapInit+0xbc>)
 8109f4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8109f4c:	4b09      	ldr	r3, [pc, #36]	; (8109f74 <prvHeapInit+0xc0>)
 8109f4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8109f52:	601a      	str	r2, [r3, #0]
}
 8109f54:	bf00      	nop
 8109f56:	3714      	adds	r7, #20
 8109f58:	46bd      	mov	sp, r7
 8109f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109f5e:	4770      	bx	lr
 8109f60:	10000f18 	.word	0x10000f18
 8109f64:	10004b18 	.word	0x10004b18
 8109f68:	10004b20 	.word	0x10004b20
 8109f6c:	10004b28 	.word	0x10004b28
 8109f70:	10004b24 	.word	0x10004b24
 8109f74:	10004b2c 	.word	0x10004b2c

08109f78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8109f78:	b480      	push	{r7}
 8109f7a:	b085      	sub	sp, #20
 8109f7c:	af00      	add	r7, sp, #0
 8109f7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8109f80:	4b28      	ldr	r3, [pc, #160]	; (810a024 <prvInsertBlockIntoFreeList+0xac>)
 8109f82:	60fb      	str	r3, [r7, #12]
 8109f84:	e002      	b.n	8109f8c <prvInsertBlockIntoFreeList+0x14>
 8109f86:	68fb      	ldr	r3, [r7, #12]
 8109f88:	681b      	ldr	r3, [r3, #0]
 8109f8a:	60fb      	str	r3, [r7, #12]
 8109f8c:	68fb      	ldr	r3, [r7, #12]
 8109f8e:	681b      	ldr	r3, [r3, #0]
 8109f90:	687a      	ldr	r2, [r7, #4]
 8109f92:	429a      	cmp	r2, r3
 8109f94:	d8f7      	bhi.n	8109f86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8109f96:	68fb      	ldr	r3, [r7, #12]
 8109f98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8109f9a:	68fb      	ldr	r3, [r7, #12]
 8109f9c:	685b      	ldr	r3, [r3, #4]
 8109f9e:	68ba      	ldr	r2, [r7, #8]
 8109fa0:	4413      	add	r3, r2
 8109fa2:	687a      	ldr	r2, [r7, #4]
 8109fa4:	429a      	cmp	r2, r3
 8109fa6:	d108      	bne.n	8109fba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8109fa8:	68fb      	ldr	r3, [r7, #12]
 8109faa:	685a      	ldr	r2, [r3, #4]
 8109fac:	687b      	ldr	r3, [r7, #4]
 8109fae:	685b      	ldr	r3, [r3, #4]
 8109fb0:	441a      	add	r2, r3
 8109fb2:	68fb      	ldr	r3, [r7, #12]
 8109fb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8109fb6:	68fb      	ldr	r3, [r7, #12]
 8109fb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8109fba:	687b      	ldr	r3, [r7, #4]
 8109fbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8109fbe:	687b      	ldr	r3, [r7, #4]
 8109fc0:	685b      	ldr	r3, [r3, #4]
 8109fc2:	68ba      	ldr	r2, [r7, #8]
 8109fc4:	441a      	add	r2, r3
 8109fc6:	68fb      	ldr	r3, [r7, #12]
 8109fc8:	681b      	ldr	r3, [r3, #0]
 8109fca:	429a      	cmp	r2, r3
 8109fcc:	d118      	bne.n	810a000 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8109fce:	68fb      	ldr	r3, [r7, #12]
 8109fd0:	681a      	ldr	r2, [r3, #0]
 8109fd2:	4b15      	ldr	r3, [pc, #84]	; (810a028 <prvInsertBlockIntoFreeList+0xb0>)
 8109fd4:	681b      	ldr	r3, [r3, #0]
 8109fd6:	429a      	cmp	r2, r3
 8109fd8:	d00d      	beq.n	8109ff6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8109fda:	687b      	ldr	r3, [r7, #4]
 8109fdc:	685a      	ldr	r2, [r3, #4]
 8109fde:	68fb      	ldr	r3, [r7, #12]
 8109fe0:	681b      	ldr	r3, [r3, #0]
 8109fe2:	685b      	ldr	r3, [r3, #4]
 8109fe4:	441a      	add	r2, r3
 8109fe6:	687b      	ldr	r3, [r7, #4]
 8109fe8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8109fea:	68fb      	ldr	r3, [r7, #12]
 8109fec:	681b      	ldr	r3, [r3, #0]
 8109fee:	681a      	ldr	r2, [r3, #0]
 8109ff0:	687b      	ldr	r3, [r7, #4]
 8109ff2:	601a      	str	r2, [r3, #0]
 8109ff4:	e008      	b.n	810a008 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8109ff6:	4b0c      	ldr	r3, [pc, #48]	; (810a028 <prvInsertBlockIntoFreeList+0xb0>)
 8109ff8:	681a      	ldr	r2, [r3, #0]
 8109ffa:	687b      	ldr	r3, [r7, #4]
 8109ffc:	601a      	str	r2, [r3, #0]
 8109ffe:	e003      	b.n	810a008 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 810a000:	68fb      	ldr	r3, [r7, #12]
 810a002:	681a      	ldr	r2, [r3, #0]
 810a004:	687b      	ldr	r3, [r7, #4]
 810a006:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 810a008:	68fa      	ldr	r2, [r7, #12]
 810a00a:	687b      	ldr	r3, [r7, #4]
 810a00c:	429a      	cmp	r2, r3
 810a00e:	d002      	beq.n	810a016 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 810a010:	68fb      	ldr	r3, [r7, #12]
 810a012:	687a      	ldr	r2, [r7, #4]
 810a014:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810a016:	bf00      	nop
 810a018:	3714      	adds	r7, #20
 810a01a:	46bd      	mov	sp, r7
 810a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a020:	4770      	bx	lr
 810a022:	bf00      	nop
 810a024:	10004b18 	.word	0x10004b18
 810a028:	10004b20 	.word	0x10004b20

0810a02c <_ZN14WatchdogThread4initEv>:
#include <string.h>
#include "iwdg.h"

#include "usart.h"

void WatchdogThread::init() {
 810a02c:	b480      	push	{r7}
 810a02e:	b083      	sub	sp, #12
 810a030:	af00      	add	r7, sp, #0
 810a032:	6078      	str	r0, [r7, #4]

}
 810a034:	bf00      	nop
 810a036:	370c      	adds	r7, #12
 810a038:	46bd      	mov	sp, r7
 810a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a03e:	4770      	bx	lr

0810a040 <_ZN14WatchdogThread4loopEv>:

uint8_t i = 0;

void WatchdogThread::loop() {
 810a040:	b580      	push	{r7, lr}
 810a042:	b082      	sub	sp, #8
 810a044:	af00      	add	r7, sp, #0
 810a046:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Refresh(watchdog_handle);
 810a048:	687b      	ldr	r3, [r7, #4]
 810a04a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a04c:	4618      	mov	r0, r3
 810a04e:	f7fa fd9b 	bl	8104b88 <HAL_IWDG_Refresh>
	#ifdef CORE_CM7
	i++;
	HAL_UART_Transmit(&huart3, &i, 1, 1000);
#endif
	osDelay(100);
 810a052:	2064      	movs	r0, #100	; 0x64
 810a054:	f7fd fbbe 	bl	81077d4 <osDelay>
}
 810a058:	bf00      	nop
 810a05a:	3708      	adds	r7, #8
 810a05c:	46bd      	mov	sp, r7
 810a05e:	bd80      	pop	{r7, pc}

0810a060 <_ZN6ThreadD1Ev>:
public:
	Thread(const char* name);
	Thread(const char* name, osPriority_t priority);
	Thread(const char* name, uint32_t stackSize);
	Thread(const char* name, osPriority_t priority, uint32_t stackSize);
	~Thread() {};
 810a060:	b480      	push	{r7}
 810a062:	b083      	sub	sp, #12
 810a064:	af00      	add	r7, sp, #0
 810a066:	6078      	str	r0, [r7, #4]
 810a068:	4a04      	ldr	r2, [pc, #16]	; (810a07c <_ZN6ThreadD1Ev+0x1c>)
 810a06a:	687b      	ldr	r3, [r7, #4]
 810a06c:	601a      	str	r2, [r3, #0]
 810a06e:	687b      	ldr	r3, [r7, #4]
 810a070:	4618      	mov	r0, r3
 810a072:	370c      	adds	r7, #12
 810a074:	46bd      	mov	sp, r7
 810a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a07a:	4770      	bx	lr
 810a07c:	0810bf40 	.word	0x0810bf40

0810a080 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef>:

#include "../Thread.h"

class WatchdogThread : Thread {
public:
	WatchdogThread(IWDG_HandleTypeDef* hiwdg) : Thread("Watchdog"), watchdog_handle(hiwdg) {}
 810a080:	b580      	push	{r7, lr}
 810a082:	b082      	sub	sp, #8
 810a084:	af00      	add	r7, sp, #0
 810a086:	6078      	str	r0, [r7, #4]
 810a088:	6039      	str	r1, [r7, #0]
 810a08a:	687b      	ldr	r3, [r7, #4]
 810a08c:	4907      	ldr	r1, [pc, #28]	; (810a0ac <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef+0x2c>)
 810a08e:	4618      	mov	r0, r3
 810a090:	f000 f86c 	bl	810a16c <_ZN6ThreadC1EPKc>
 810a094:	4a06      	ldr	r2, [pc, #24]	; (810a0b0 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef+0x30>)
 810a096:	687b      	ldr	r3, [r7, #4]
 810a098:	601a      	str	r2, [r3, #0]
 810a09a:	687b      	ldr	r3, [r7, #4]
 810a09c:	683a      	ldr	r2, [r7, #0]
 810a09e:	62da      	str	r2, [r3, #44]	; 0x2c
 810a0a0:	687b      	ldr	r3, [r7, #4]
 810a0a2:	4618      	mov	r0, r3
 810a0a4:	3708      	adds	r7, #8
 810a0a6:	46bd      	mov	sp, r7
 810a0a8:	bd80      	pop	{r7, pc}
 810a0aa:	bf00      	nop
 810a0ac:	0810beec 	.word	0x0810beec
 810a0b0:	0810bf30 	.word	0x0810bf30

0810a0b4 <_ZN14WatchdogThreadD1Ev>:
class WatchdogThread : Thread {
 810a0b4:	b580      	push	{r7, lr}
 810a0b6:	b082      	sub	sp, #8
 810a0b8:	af00      	add	r7, sp, #0
 810a0ba:	6078      	str	r0, [r7, #4]
 810a0bc:	4a05      	ldr	r2, [pc, #20]	; (810a0d4 <_ZN14WatchdogThreadD1Ev+0x20>)
 810a0be:	687b      	ldr	r3, [r7, #4]
 810a0c0:	601a      	str	r2, [r3, #0]
 810a0c2:	687b      	ldr	r3, [r7, #4]
 810a0c4:	4618      	mov	r0, r3
 810a0c6:	f7ff ffcb 	bl	810a060 <_ZN6ThreadD1Ev>
 810a0ca:	687b      	ldr	r3, [r7, #4]
 810a0cc:	4618      	mov	r0, r3
 810a0ce:	3708      	adds	r7, #8
 810a0d0:	46bd      	mov	sp, r7
 810a0d2:	bd80      	pop	{r7, pc}
 810a0d4:	0810bf30 	.word	0x0810bf30

0810a0d8 <__tcf_0>:
#include "Sensors/Barometer.h"
#include "Sensors/IMU.h"

#ifdef CORE_CM4
void initCortexM4() {
	static WatchdogThread watchdog(&hiwdg2);
 810a0d8:	b580      	push	{r7, lr}
 810a0da:	af00      	add	r7, sp, #0
 810a0dc:	4801      	ldr	r0, [pc, #4]	; (810a0e4 <__tcf_0+0xc>)
 810a0de:	f7ff ffe9 	bl	810a0b4 <_ZN14WatchdogThreadD1Ev>
 810a0e2:	bd80      	pop	{r7, pc}
 810a0e4:	10004b30 	.word	0x10004b30

0810a0e8 <initCortexM4>:
void initCortexM4() {
 810a0e8:	b580      	push	{r7, lr}
 810a0ea:	af00      	add	r7, sp, #0
	static WatchdogThread watchdog(&hiwdg2);
 810a0ec:	4b12      	ldr	r3, [pc, #72]	; (810a138 <initCortexM4+0x50>)
 810a0ee:	781b      	ldrb	r3, [r3, #0]
 810a0f0:	f3bf 8f5b 	dmb	ish
 810a0f4:	b2db      	uxtb	r3, r3
 810a0f6:	f003 0301 	and.w	r3, r3, #1
 810a0fa:	2b00      	cmp	r3, #0
 810a0fc:	bf0c      	ite	eq
 810a0fe:	2301      	moveq	r3, #1
 810a100:	2300      	movne	r3, #0
 810a102:	b2db      	uxtb	r3, r3
 810a104:	2b00      	cmp	r3, #0
 810a106:	d014      	beq.n	810a132 <initCortexM4+0x4a>
 810a108:	480b      	ldr	r0, [pc, #44]	; (810a138 <initCortexM4+0x50>)
 810a10a:	f000 f877 	bl	810a1fc <__cxa_guard_acquire>
 810a10e:	4603      	mov	r3, r0
 810a110:	2b00      	cmp	r3, #0
 810a112:	bf14      	ite	ne
 810a114:	2301      	movne	r3, #1
 810a116:	2300      	moveq	r3, #0
 810a118:	b2db      	uxtb	r3, r3
 810a11a:	2b00      	cmp	r3, #0
 810a11c:	d009      	beq.n	810a132 <initCortexM4+0x4a>
 810a11e:	4907      	ldr	r1, [pc, #28]	; (810a13c <initCortexM4+0x54>)
 810a120:	4807      	ldr	r0, [pc, #28]	; (810a140 <initCortexM4+0x58>)
 810a122:	f7ff ffad 	bl	810a080 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef>
 810a126:	4804      	ldr	r0, [pc, #16]	; (810a138 <initCortexM4+0x50>)
 810a128:	f000 f874 	bl	810a214 <__cxa_guard_release>
 810a12c:	4805      	ldr	r0, [pc, #20]	; (810a144 <initCortexM4+0x5c>)
 810a12e:	f000 f88f 	bl	810a250 <atexit>
	/*IMUThread imu(&hi2c1, &huart3);
	BarometerThread barometer(&hi2c1, &huart3);*/
}
 810a132:	bf00      	nop
 810a134:	bd80      	pop	{r7, pc}
 810a136:	bf00      	nop
 810a138:	10004b60 	.word	0x10004b60
 810a13c:	10004d34 	.word	0x10004d34
 810a140:	10004b30 	.word	0x10004b30
 810a144:	0810a0d9 	.word	0x0810a0d9

0810a148 <_Z10__task_runPv>:

#include "usart.h"
#define DEFAULT_STACK_SIZE (512)


void __task_run(void* arg) {
 810a148:	b580      	push	{r7, lr}
 810a14a:	b084      	sub	sp, #16
 810a14c:	af00      	add	r7, sp, #0
 810a14e:	6078      	str	r0, [r7, #4]
	Thread* thread = (Thread*) arg;
 810a150:	687b      	ldr	r3, [r7, #4]
 810a152:	60fb      	str	r3, [r7, #12]

	thread->init();
 810a154:	68fb      	ldr	r3, [r7, #12]
 810a156:	681b      	ldr	r3, [r3, #0]
 810a158:	681b      	ldr	r3, [r3, #0]
 810a15a:	68f8      	ldr	r0, [r7, #12]
 810a15c:	4798      	blx	r3

	while(true) {
		thread->loop();
 810a15e:	68fb      	ldr	r3, [r7, #12]
 810a160:	681b      	ldr	r3, [r3, #0]
 810a162:	3304      	adds	r3, #4
 810a164:	681b      	ldr	r3, [r3, #0]
 810a166:	68f8      	ldr	r0, [r7, #12]
 810a168:	4798      	blx	r3
 810a16a:	e7f8      	b.n	810a15e <_Z10__task_runPv+0x16>

0810a16c <_ZN6ThreadC1EPKc>:
	}
}

Thread::Thread(const char* name) : Thread(name, (osPriority_t) osPriorityNormal) {
 810a16c:	b580      	push	{r7, lr}
 810a16e:	b082      	sub	sp, #8
 810a170:	af00      	add	r7, sp, #0
 810a172:	6078      	str	r0, [r7, #4]
 810a174:	6039      	str	r1, [r7, #0]
 810a176:	2218      	movs	r2, #24
 810a178:	6839      	ldr	r1, [r7, #0]
 810a17a:	6878      	ldr	r0, [r7, #4]
 810a17c:	f000 f805 	bl	810a18a <_ZN6ThreadC1EPKc12osPriority_t>
	;
}
 810a180:	687b      	ldr	r3, [r7, #4]
 810a182:	4618      	mov	r0, r3
 810a184:	3708      	adds	r7, #8
 810a186:	46bd      	mov	sp, r7
 810a188:	bd80      	pop	{r7, pc}

0810a18a <_ZN6ThreadC1EPKc12osPriority_t>:

Thread::Thread(const char* name, osPriority_t priority) : Thread(name, priority, DEFAULT_STACK_SIZE) {
 810a18a:	b580      	push	{r7, lr}
 810a18c:	b084      	sub	sp, #16
 810a18e:	af00      	add	r7, sp, #0
 810a190:	60f8      	str	r0, [r7, #12]
 810a192:	60b9      	str	r1, [r7, #8]
 810a194:	607a      	str	r2, [r7, #4]
 810a196:	f44f 7300 	mov.w	r3, #512	; 0x200
 810a19a:	687a      	ldr	r2, [r7, #4]
 810a19c:	68b9      	ldr	r1, [r7, #8]
 810a19e:	68f8      	ldr	r0, [r7, #12]
 810a1a0:	f000 f806 	bl	810a1b0 <_ZN6ThreadC1EPKc12osPriority_tm>
	;
}
 810a1a4:	68fb      	ldr	r3, [r7, #12]
 810a1a6:	4618      	mov	r0, r3
 810a1a8:	3710      	adds	r7, #16
 810a1aa:	46bd      	mov	sp, r7
 810a1ac:	bd80      	pop	{r7, pc}
	...

0810a1b0 <_ZN6ThreadC1EPKc12osPriority_tm>:

Thread::Thread(const char* name, uint32_t stackSize) : Thread(name, (osPriority_t) osPriorityNormal, stackSize) {
	;
}

Thread::Thread(const char* name, osPriority_t priority, uint32_t stackSize) {
 810a1b0:	b580      	push	{r7, lr}
 810a1b2:	b084      	sub	sp, #16
 810a1b4:	af00      	add	r7, sp, #0
 810a1b6:	60f8      	str	r0, [r7, #12]
 810a1b8:	60b9      	str	r1, [r7, #8]
 810a1ba:	607a      	str	r2, [r7, #4]
 810a1bc:	603b      	str	r3, [r7, #0]
 810a1be:	4a0d      	ldr	r2, [pc, #52]	; (810a1f4 <_ZN6ThreadC1EPKc12osPriority_tm+0x44>)
 810a1c0:	68fb      	ldr	r3, [r7, #12]
 810a1c2:	601a      	str	r2, [r3, #0]
	attributes.name = name;
 810a1c4:	68fb      	ldr	r3, [r7, #12]
 810a1c6:	68ba      	ldr	r2, [r7, #8]
 810a1c8:	605a      	str	r2, [r3, #4]
	attributes.priority = priority;
 810a1ca:	68fb      	ldr	r3, [r7, #12]
 810a1cc:	687a      	ldr	r2, [r7, #4]
 810a1ce:	61da      	str	r2, [r3, #28]
	attributes.stack_size = stackSize;
 810a1d0:	68fb      	ldr	r3, [r7, #12]
 810a1d2:	683a      	ldr	r2, [r7, #0]
 810a1d4:	619a      	str	r2, [r3, #24]

	this->handle = osThreadNew(__task_run, this, &attributes);
 810a1d6:	68fb      	ldr	r3, [r7, #12]
 810a1d8:	3304      	adds	r3, #4
 810a1da:	461a      	mov	r2, r3
 810a1dc:	68f9      	ldr	r1, [r7, #12]
 810a1de:	4806      	ldr	r0, [pc, #24]	; (810a1f8 <_ZN6ThreadC1EPKc12osPriority_tm+0x48>)
 810a1e0:	f7fd fa52 	bl	8107688 <osThreadNew>
 810a1e4:	4602      	mov	r2, r0
 810a1e6:	68fb      	ldr	r3, [r7, #12]
 810a1e8:	629a      	str	r2, [r3, #40]	; 0x28
}
 810a1ea:	68fb      	ldr	r3, [r7, #12]
 810a1ec:	4618      	mov	r0, r3
 810a1ee:	3710      	adds	r7, #16
 810a1f0:	46bd      	mov	sp, r7
 810a1f2:	bd80      	pop	{r7, pc}
 810a1f4:	0810bf40 	.word	0x0810bf40
 810a1f8:	0810a149 	.word	0x0810a149

0810a1fc <__cxa_guard_acquire>:
 810a1fc:	6803      	ldr	r3, [r0, #0]
 810a1fe:	07db      	lsls	r3, r3, #31
 810a200:	d406      	bmi.n	810a210 <__cxa_guard_acquire+0x14>
 810a202:	7843      	ldrb	r3, [r0, #1]
 810a204:	b103      	cbz	r3, 810a208 <__cxa_guard_acquire+0xc>
 810a206:	deff      	udf	#255	; 0xff
 810a208:	2301      	movs	r3, #1
 810a20a:	7043      	strb	r3, [r0, #1]
 810a20c:	4618      	mov	r0, r3
 810a20e:	4770      	bx	lr
 810a210:	2000      	movs	r0, #0
 810a212:	4770      	bx	lr

0810a214 <__cxa_guard_release>:
 810a214:	2301      	movs	r3, #1
 810a216:	6003      	str	r3, [r0, #0]
 810a218:	4770      	bx	lr

0810a21a <__cxa_pure_virtual>:
 810a21a:	b508      	push	{r3, lr}
 810a21c:	f000 f80c 	bl	810a238 <_ZSt9terminatev>

0810a220 <_ZN10__cxxabiv111__terminateEPFvvE>:
 810a220:	b508      	push	{r3, lr}
 810a222:	4780      	blx	r0
 810a224:	f000 f80d 	bl	810a242 <abort>

0810a228 <_ZSt13get_terminatev>:
 810a228:	4b02      	ldr	r3, [pc, #8]	; (810a234 <_ZSt13get_terminatev+0xc>)
 810a22a:	6818      	ldr	r0, [r3, #0]
 810a22c:	f3bf 8f5b 	dmb	ish
 810a230:	4770      	bx	lr
 810a232:	bf00      	nop
 810a234:	10000028 	.word	0x10000028

0810a238 <_ZSt9terminatev>:
 810a238:	b508      	push	{r3, lr}
 810a23a:	f7ff fff5 	bl	810a228 <_ZSt13get_terminatev>
 810a23e:	f7ff ffef 	bl	810a220 <_ZN10__cxxabiv111__terminateEPFvvE>

0810a242 <abort>:
 810a242:	b508      	push	{r3, lr}
 810a244:	2006      	movs	r0, #6
 810a246:	f000 fbb9 	bl	810a9bc <raise>
 810a24a:	2001      	movs	r0, #1
 810a24c:	f7f7 fbfc 	bl	8101a48 <_exit>

0810a250 <atexit>:
 810a250:	2300      	movs	r3, #0
 810a252:	4601      	mov	r1, r0
 810a254:	461a      	mov	r2, r3
 810a256:	4618      	mov	r0, r3
 810a258:	f000 bbcc 	b.w	810a9f4 <__register_exitproc>

0810a25c <__errno>:
 810a25c:	4b01      	ldr	r3, [pc, #4]	; (810a264 <__errno+0x8>)
 810a25e:	6818      	ldr	r0, [r3, #0]
 810a260:	4770      	bx	lr
 810a262:	bf00      	nop
 810a264:	1000002c 	.word	0x1000002c

0810a268 <__libc_init_array>:
 810a268:	b570      	push	{r4, r5, r6, lr}
 810a26a:	4e0d      	ldr	r6, [pc, #52]	; (810a2a0 <__libc_init_array+0x38>)
 810a26c:	4c0d      	ldr	r4, [pc, #52]	; (810a2a4 <__libc_init_array+0x3c>)
 810a26e:	1ba4      	subs	r4, r4, r6
 810a270:	10a4      	asrs	r4, r4, #2
 810a272:	2500      	movs	r5, #0
 810a274:	42a5      	cmp	r5, r4
 810a276:	d109      	bne.n	810a28c <__libc_init_array+0x24>
 810a278:	4e0b      	ldr	r6, [pc, #44]	; (810a2a8 <__libc_init_array+0x40>)
 810a27a:	4c0c      	ldr	r4, [pc, #48]	; (810a2ac <__libc_init_array+0x44>)
 810a27c:	f001 fdf0 	bl	810be60 <_init>
 810a280:	1ba4      	subs	r4, r4, r6
 810a282:	10a4      	asrs	r4, r4, #2
 810a284:	2500      	movs	r5, #0
 810a286:	42a5      	cmp	r5, r4
 810a288:	d105      	bne.n	810a296 <__libc_init_array+0x2e>
 810a28a:	bd70      	pop	{r4, r5, r6, pc}
 810a28c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 810a290:	4798      	blx	r3
 810a292:	3501      	adds	r5, #1
 810a294:	e7ee      	b.n	810a274 <__libc_init_array+0xc>
 810a296:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 810a29a:	4798      	blx	r3
 810a29c:	3501      	adds	r5, #1
 810a29e:	e7f2      	b.n	810a286 <__libc_init_array+0x1e>
 810a2a0:	0810c1d8 	.word	0x0810c1d8
 810a2a4:	0810c1d8 	.word	0x0810c1d8
 810a2a8:	0810c1d8 	.word	0x0810c1d8
 810a2ac:	0810c1dc 	.word	0x0810c1dc

0810a2b0 <memcpy>:
 810a2b0:	b510      	push	{r4, lr}
 810a2b2:	1e43      	subs	r3, r0, #1
 810a2b4:	440a      	add	r2, r1
 810a2b6:	4291      	cmp	r1, r2
 810a2b8:	d100      	bne.n	810a2bc <memcpy+0xc>
 810a2ba:	bd10      	pop	{r4, pc}
 810a2bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 810a2c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 810a2c4:	e7f7      	b.n	810a2b6 <memcpy+0x6>

0810a2c6 <memset>:
 810a2c6:	4402      	add	r2, r0
 810a2c8:	4603      	mov	r3, r0
 810a2ca:	4293      	cmp	r3, r2
 810a2cc:	d100      	bne.n	810a2d0 <memset+0xa>
 810a2ce:	4770      	bx	lr
 810a2d0:	f803 1b01 	strb.w	r1, [r3], #1
 810a2d4:	e7f9      	b.n	810a2ca <memset+0x4>

0810a2d6 <__cvt>:
 810a2d6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810a2da:	ec55 4b10 	vmov	r4, r5, d0
 810a2de:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 810a2e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 810a2e4:	2d00      	cmp	r5, #0
 810a2e6:	460e      	mov	r6, r1
 810a2e8:	4691      	mov	r9, r2
 810a2ea:	4619      	mov	r1, r3
 810a2ec:	bfb8      	it	lt
 810a2ee:	4622      	movlt	r2, r4
 810a2f0:	462b      	mov	r3, r5
 810a2f2:	f027 0720 	bic.w	r7, r7, #32
 810a2f6:	bfbb      	ittet	lt
 810a2f8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 810a2fc:	461d      	movlt	r5, r3
 810a2fe:	2300      	movge	r3, #0
 810a300:	232d      	movlt	r3, #45	; 0x2d
 810a302:	bfb8      	it	lt
 810a304:	4614      	movlt	r4, r2
 810a306:	2f46      	cmp	r7, #70	; 0x46
 810a308:	700b      	strb	r3, [r1, #0]
 810a30a:	d004      	beq.n	810a316 <__cvt+0x40>
 810a30c:	2f45      	cmp	r7, #69	; 0x45
 810a30e:	d100      	bne.n	810a312 <__cvt+0x3c>
 810a310:	3601      	adds	r6, #1
 810a312:	2102      	movs	r1, #2
 810a314:	e000      	b.n	810a318 <__cvt+0x42>
 810a316:	2103      	movs	r1, #3
 810a318:	ab03      	add	r3, sp, #12
 810a31a:	9301      	str	r3, [sp, #4]
 810a31c:	ab02      	add	r3, sp, #8
 810a31e:	9300      	str	r3, [sp, #0]
 810a320:	4632      	mov	r2, r6
 810a322:	4653      	mov	r3, sl
 810a324:	ec45 4b10 	vmov	d0, r4, r5
 810a328:	f000 fc56 	bl	810abd8 <_dtoa_r>
 810a32c:	2f47      	cmp	r7, #71	; 0x47
 810a32e:	4680      	mov	r8, r0
 810a330:	d102      	bne.n	810a338 <__cvt+0x62>
 810a332:	f019 0f01 	tst.w	r9, #1
 810a336:	d026      	beq.n	810a386 <__cvt+0xb0>
 810a338:	2f46      	cmp	r7, #70	; 0x46
 810a33a:	eb08 0906 	add.w	r9, r8, r6
 810a33e:	d111      	bne.n	810a364 <__cvt+0x8e>
 810a340:	f898 3000 	ldrb.w	r3, [r8]
 810a344:	2b30      	cmp	r3, #48	; 0x30
 810a346:	d10a      	bne.n	810a35e <__cvt+0x88>
 810a348:	2200      	movs	r2, #0
 810a34a:	2300      	movs	r3, #0
 810a34c:	4620      	mov	r0, r4
 810a34e:	4629      	mov	r1, r5
 810a350:	f7f6 fbf2 	bl	8100b38 <__aeabi_dcmpeq>
 810a354:	b918      	cbnz	r0, 810a35e <__cvt+0x88>
 810a356:	f1c6 0601 	rsb	r6, r6, #1
 810a35a:	f8ca 6000 	str.w	r6, [sl]
 810a35e:	f8da 3000 	ldr.w	r3, [sl]
 810a362:	4499      	add	r9, r3
 810a364:	2200      	movs	r2, #0
 810a366:	2300      	movs	r3, #0
 810a368:	4620      	mov	r0, r4
 810a36a:	4629      	mov	r1, r5
 810a36c:	f7f6 fbe4 	bl	8100b38 <__aeabi_dcmpeq>
 810a370:	b938      	cbnz	r0, 810a382 <__cvt+0xac>
 810a372:	2230      	movs	r2, #48	; 0x30
 810a374:	9b03      	ldr	r3, [sp, #12]
 810a376:	454b      	cmp	r3, r9
 810a378:	d205      	bcs.n	810a386 <__cvt+0xb0>
 810a37a:	1c59      	adds	r1, r3, #1
 810a37c:	9103      	str	r1, [sp, #12]
 810a37e:	701a      	strb	r2, [r3, #0]
 810a380:	e7f8      	b.n	810a374 <__cvt+0x9e>
 810a382:	f8cd 900c 	str.w	r9, [sp, #12]
 810a386:	9b03      	ldr	r3, [sp, #12]
 810a388:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810a38a:	eba3 0308 	sub.w	r3, r3, r8
 810a38e:	4640      	mov	r0, r8
 810a390:	6013      	str	r3, [r2, #0]
 810a392:	b004      	add	sp, #16
 810a394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0810a398 <__exponent>:
 810a398:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810a39a:	2900      	cmp	r1, #0
 810a39c:	4604      	mov	r4, r0
 810a39e:	bfba      	itte	lt
 810a3a0:	4249      	neglt	r1, r1
 810a3a2:	232d      	movlt	r3, #45	; 0x2d
 810a3a4:	232b      	movge	r3, #43	; 0x2b
 810a3a6:	2909      	cmp	r1, #9
 810a3a8:	f804 2b02 	strb.w	r2, [r4], #2
 810a3ac:	7043      	strb	r3, [r0, #1]
 810a3ae:	dd20      	ble.n	810a3f2 <__exponent+0x5a>
 810a3b0:	f10d 0307 	add.w	r3, sp, #7
 810a3b4:	461f      	mov	r7, r3
 810a3b6:	260a      	movs	r6, #10
 810a3b8:	fb91 f5f6 	sdiv	r5, r1, r6
 810a3bc:	fb06 1115 	mls	r1, r6, r5, r1
 810a3c0:	3130      	adds	r1, #48	; 0x30
 810a3c2:	2d09      	cmp	r5, #9
 810a3c4:	f803 1c01 	strb.w	r1, [r3, #-1]
 810a3c8:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 810a3cc:	4629      	mov	r1, r5
 810a3ce:	dc09      	bgt.n	810a3e4 <__exponent+0x4c>
 810a3d0:	3130      	adds	r1, #48	; 0x30
 810a3d2:	3b02      	subs	r3, #2
 810a3d4:	f802 1c01 	strb.w	r1, [r2, #-1]
 810a3d8:	42bb      	cmp	r3, r7
 810a3da:	4622      	mov	r2, r4
 810a3dc:	d304      	bcc.n	810a3e8 <__exponent+0x50>
 810a3de:	1a10      	subs	r0, r2, r0
 810a3e0:	b003      	add	sp, #12
 810a3e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810a3e4:	4613      	mov	r3, r2
 810a3e6:	e7e7      	b.n	810a3b8 <__exponent+0x20>
 810a3e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 810a3ec:	f804 2b01 	strb.w	r2, [r4], #1
 810a3f0:	e7f2      	b.n	810a3d8 <__exponent+0x40>
 810a3f2:	2330      	movs	r3, #48	; 0x30
 810a3f4:	4419      	add	r1, r3
 810a3f6:	7083      	strb	r3, [r0, #2]
 810a3f8:	1d02      	adds	r2, r0, #4
 810a3fa:	70c1      	strb	r1, [r0, #3]
 810a3fc:	e7ef      	b.n	810a3de <__exponent+0x46>
	...

0810a400 <_printf_float>:
 810a400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a404:	b08d      	sub	sp, #52	; 0x34
 810a406:	460c      	mov	r4, r1
 810a408:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 810a40c:	4616      	mov	r6, r2
 810a40e:	461f      	mov	r7, r3
 810a410:	4605      	mov	r5, r0
 810a412:	f001 f999 	bl	810b748 <_localeconv_r>
 810a416:	6803      	ldr	r3, [r0, #0]
 810a418:	9304      	str	r3, [sp, #16]
 810a41a:	4618      	mov	r0, r3
 810a41c:	f7f5 ff60 	bl	81002e0 <strlen>
 810a420:	2300      	movs	r3, #0
 810a422:	930a      	str	r3, [sp, #40]	; 0x28
 810a424:	f8d8 3000 	ldr.w	r3, [r8]
 810a428:	9005      	str	r0, [sp, #20]
 810a42a:	3307      	adds	r3, #7
 810a42c:	f023 0307 	bic.w	r3, r3, #7
 810a430:	f103 0208 	add.w	r2, r3, #8
 810a434:	f894 a018 	ldrb.w	sl, [r4, #24]
 810a438:	f8d4 b000 	ldr.w	fp, [r4]
 810a43c:	f8c8 2000 	str.w	r2, [r8]
 810a440:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a444:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 810a448:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 810a44c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810a450:	9307      	str	r3, [sp, #28]
 810a452:	f8cd 8018 	str.w	r8, [sp, #24]
 810a456:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810a45a:	4ba7      	ldr	r3, [pc, #668]	; (810a6f8 <_printf_float+0x2f8>)
 810a45c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810a460:	f7f6 fb9c 	bl	8100b9c <__aeabi_dcmpun>
 810a464:	bb70      	cbnz	r0, 810a4c4 <_printf_float+0xc4>
 810a466:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810a46a:	4ba3      	ldr	r3, [pc, #652]	; (810a6f8 <_printf_float+0x2f8>)
 810a46c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810a470:	f7f6 fb76 	bl	8100b60 <__aeabi_dcmple>
 810a474:	bb30      	cbnz	r0, 810a4c4 <_printf_float+0xc4>
 810a476:	2200      	movs	r2, #0
 810a478:	2300      	movs	r3, #0
 810a47a:	4640      	mov	r0, r8
 810a47c:	4649      	mov	r1, r9
 810a47e:	f7f6 fb65 	bl	8100b4c <__aeabi_dcmplt>
 810a482:	b110      	cbz	r0, 810a48a <_printf_float+0x8a>
 810a484:	232d      	movs	r3, #45	; 0x2d
 810a486:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810a48a:	4a9c      	ldr	r2, [pc, #624]	; (810a6fc <_printf_float+0x2fc>)
 810a48c:	4b9c      	ldr	r3, [pc, #624]	; (810a700 <_printf_float+0x300>)
 810a48e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 810a492:	bf8c      	ite	hi
 810a494:	4690      	movhi	r8, r2
 810a496:	4698      	movls	r8, r3
 810a498:	2303      	movs	r3, #3
 810a49a:	f02b 0204 	bic.w	r2, fp, #4
 810a49e:	6123      	str	r3, [r4, #16]
 810a4a0:	6022      	str	r2, [r4, #0]
 810a4a2:	f04f 0900 	mov.w	r9, #0
 810a4a6:	9700      	str	r7, [sp, #0]
 810a4a8:	4633      	mov	r3, r6
 810a4aa:	aa0b      	add	r2, sp, #44	; 0x2c
 810a4ac:	4621      	mov	r1, r4
 810a4ae:	4628      	mov	r0, r5
 810a4b0:	f000 f9e6 	bl	810a880 <_printf_common>
 810a4b4:	3001      	adds	r0, #1
 810a4b6:	f040 808d 	bne.w	810a5d4 <_printf_float+0x1d4>
 810a4ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810a4be:	b00d      	add	sp, #52	; 0x34
 810a4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a4c4:	4642      	mov	r2, r8
 810a4c6:	464b      	mov	r3, r9
 810a4c8:	4640      	mov	r0, r8
 810a4ca:	4649      	mov	r1, r9
 810a4cc:	f7f6 fb66 	bl	8100b9c <__aeabi_dcmpun>
 810a4d0:	b110      	cbz	r0, 810a4d8 <_printf_float+0xd8>
 810a4d2:	4a8c      	ldr	r2, [pc, #560]	; (810a704 <_printf_float+0x304>)
 810a4d4:	4b8c      	ldr	r3, [pc, #560]	; (810a708 <_printf_float+0x308>)
 810a4d6:	e7da      	b.n	810a48e <_printf_float+0x8e>
 810a4d8:	6861      	ldr	r1, [r4, #4]
 810a4da:	1c4b      	adds	r3, r1, #1
 810a4dc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 810a4e0:	a80a      	add	r0, sp, #40	; 0x28
 810a4e2:	d13e      	bne.n	810a562 <_printf_float+0x162>
 810a4e4:	2306      	movs	r3, #6
 810a4e6:	6063      	str	r3, [r4, #4]
 810a4e8:	2300      	movs	r3, #0
 810a4ea:	e9cd 0302 	strd	r0, r3, [sp, #8]
 810a4ee:	ab09      	add	r3, sp, #36	; 0x24
 810a4f0:	9300      	str	r3, [sp, #0]
 810a4f2:	ec49 8b10 	vmov	d0, r8, r9
 810a4f6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 810a4fa:	6022      	str	r2, [r4, #0]
 810a4fc:	f8cd a004 	str.w	sl, [sp, #4]
 810a500:	6861      	ldr	r1, [r4, #4]
 810a502:	4628      	mov	r0, r5
 810a504:	f7ff fee7 	bl	810a2d6 <__cvt>
 810a508:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 810a50c:	2b47      	cmp	r3, #71	; 0x47
 810a50e:	4680      	mov	r8, r0
 810a510:	d109      	bne.n	810a526 <_printf_float+0x126>
 810a512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a514:	1cd8      	adds	r0, r3, #3
 810a516:	db02      	blt.n	810a51e <_printf_float+0x11e>
 810a518:	6862      	ldr	r2, [r4, #4]
 810a51a:	4293      	cmp	r3, r2
 810a51c:	dd47      	ble.n	810a5ae <_printf_float+0x1ae>
 810a51e:	f1aa 0a02 	sub.w	sl, sl, #2
 810a522:	fa5f fa8a 	uxtb.w	sl, sl
 810a526:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 810a52a:	9909      	ldr	r1, [sp, #36]	; 0x24
 810a52c:	d824      	bhi.n	810a578 <_printf_float+0x178>
 810a52e:	3901      	subs	r1, #1
 810a530:	4652      	mov	r2, sl
 810a532:	f104 0050 	add.w	r0, r4, #80	; 0x50
 810a536:	9109      	str	r1, [sp, #36]	; 0x24
 810a538:	f7ff ff2e 	bl	810a398 <__exponent>
 810a53c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810a53e:	1813      	adds	r3, r2, r0
 810a540:	2a01      	cmp	r2, #1
 810a542:	4681      	mov	r9, r0
 810a544:	6123      	str	r3, [r4, #16]
 810a546:	dc02      	bgt.n	810a54e <_printf_float+0x14e>
 810a548:	6822      	ldr	r2, [r4, #0]
 810a54a:	07d1      	lsls	r1, r2, #31
 810a54c:	d501      	bpl.n	810a552 <_printf_float+0x152>
 810a54e:	3301      	adds	r3, #1
 810a550:	6123      	str	r3, [r4, #16]
 810a552:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 810a556:	2b00      	cmp	r3, #0
 810a558:	d0a5      	beq.n	810a4a6 <_printf_float+0xa6>
 810a55a:	232d      	movs	r3, #45	; 0x2d
 810a55c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810a560:	e7a1      	b.n	810a4a6 <_printf_float+0xa6>
 810a562:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 810a566:	f000 8177 	beq.w	810a858 <_printf_float+0x458>
 810a56a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 810a56e:	d1bb      	bne.n	810a4e8 <_printf_float+0xe8>
 810a570:	2900      	cmp	r1, #0
 810a572:	d1b9      	bne.n	810a4e8 <_printf_float+0xe8>
 810a574:	2301      	movs	r3, #1
 810a576:	e7b6      	b.n	810a4e6 <_printf_float+0xe6>
 810a578:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 810a57c:	d119      	bne.n	810a5b2 <_printf_float+0x1b2>
 810a57e:	2900      	cmp	r1, #0
 810a580:	6863      	ldr	r3, [r4, #4]
 810a582:	dd0c      	ble.n	810a59e <_printf_float+0x19e>
 810a584:	6121      	str	r1, [r4, #16]
 810a586:	b913      	cbnz	r3, 810a58e <_printf_float+0x18e>
 810a588:	6822      	ldr	r2, [r4, #0]
 810a58a:	07d2      	lsls	r2, r2, #31
 810a58c:	d502      	bpl.n	810a594 <_printf_float+0x194>
 810a58e:	3301      	adds	r3, #1
 810a590:	440b      	add	r3, r1
 810a592:	6123      	str	r3, [r4, #16]
 810a594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a596:	65a3      	str	r3, [r4, #88]	; 0x58
 810a598:	f04f 0900 	mov.w	r9, #0
 810a59c:	e7d9      	b.n	810a552 <_printf_float+0x152>
 810a59e:	b913      	cbnz	r3, 810a5a6 <_printf_float+0x1a6>
 810a5a0:	6822      	ldr	r2, [r4, #0]
 810a5a2:	07d0      	lsls	r0, r2, #31
 810a5a4:	d501      	bpl.n	810a5aa <_printf_float+0x1aa>
 810a5a6:	3302      	adds	r3, #2
 810a5a8:	e7f3      	b.n	810a592 <_printf_float+0x192>
 810a5aa:	2301      	movs	r3, #1
 810a5ac:	e7f1      	b.n	810a592 <_printf_float+0x192>
 810a5ae:	f04f 0a67 	mov.w	sl, #103	; 0x67
 810a5b2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 810a5b6:	4293      	cmp	r3, r2
 810a5b8:	db05      	blt.n	810a5c6 <_printf_float+0x1c6>
 810a5ba:	6822      	ldr	r2, [r4, #0]
 810a5bc:	6123      	str	r3, [r4, #16]
 810a5be:	07d1      	lsls	r1, r2, #31
 810a5c0:	d5e8      	bpl.n	810a594 <_printf_float+0x194>
 810a5c2:	3301      	adds	r3, #1
 810a5c4:	e7e5      	b.n	810a592 <_printf_float+0x192>
 810a5c6:	2b00      	cmp	r3, #0
 810a5c8:	bfd4      	ite	le
 810a5ca:	f1c3 0302 	rsble	r3, r3, #2
 810a5ce:	2301      	movgt	r3, #1
 810a5d0:	4413      	add	r3, r2
 810a5d2:	e7de      	b.n	810a592 <_printf_float+0x192>
 810a5d4:	6823      	ldr	r3, [r4, #0]
 810a5d6:	055a      	lsls	r2, r3, #21
 810a5d8:	d407      	bmi.n	810a5ea <_printf_float+0x1ea>
 810a5da:	6923      	ldr	r3, [r4, #16]
 810a5dc:	4642      	mov	r2, r8
 810a5de:	4631      	mov	r1, r6
 810a5e0:	4628      	mov	r0, r5
 810a5e2:	47b8      	blx	r7
 810a5e4:	3001      	adds	r0, #1
 810a5e6:	d12b      	bne.n	810a640 <_printf_float+0x240>
 810a5e8:	e767      	b.n	810a4ba <_printf_float+0xba>
 810a5ea:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 810a5ee:	f240 80dc 	bls.w	810a7aa <_printf_float+0x3aa>
 810a5f2:	2200      	movs	r2, #0
 810a5f4:	2300      	movs	r3, #0
 810a5f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810a5fa:	f7f6 fa9d 	bl	8100b38 <__aeabi_dcmpeq>
 810a5fe:	2800      	cmp	r0, #0
 810a600:	d033      	beq.n	810a66a <_printf_float+0x26a>
 810a602:	2301      	movs	r3, #1
 810a604:	4a41      	ldr	r2, [pc, #260]	; (810a70c <_printf_float+0x30c>)
 810a606:	4631      	mov	r1, r6
 810a608:	4628      	mov	r0, r5
 810a60a:	47b8      	blx	r7
 810a60c:	3001      	adds	r0, #1
 810a60e:	f43f af54 	beq.w	810a4ba <_printf_float+0xba>
 810a612:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810a616:	429a      	cmp	r2, r3
 810a618:	db02      	blt.n	810a620 <_printf_float+0x220>
 810a61a:	6823      	ldr	r3, [r4, #0]
 810a61c:	07d8      	lsls	r0, r3, #31
 810a61e:	d50f      	bpl.n	810a640 <_printf_float+0x240>
 810a620:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810a624:	4631      	mov	r1, r6
 810a626:	4628      	mov	r0, r5
 810a628:	47b8      	blx	r7
 810a62a:	3001      	adds	r0, #1
 810a62c:	f43f af45 	beq.w	810a4ba <_printf_float+0xba>
 810a630:	f04f 0800 	mov.w	r8, #0
 810a634:	f104 091a 	add.w	r9, r4, #26
 810a638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810a63a:	3b01      	subs	r3, #1
 810a63c:	4543      	cmp	r3, r8
 810a63e:	dc09      	bgt.n	810a654 <_printf_float+0x254>
 810a640:	6823      	ldr	r3, [r4, #0]
 810a642:	079b      	lsls	r3, r3, #30
 810a644:	f100 8103 	bmi.w	810a84e <_printf_float+0x44e>
 810a648:	68e0      	ldr	r0, [r4, #12]
 810a64a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a64c:	4298      	cmp	r0, r3
 810a64e:	bfb8      	it	lt
 810a650:	4618      	movlt	r0, r3
 810a652:	e734      	b.n	810a4be <_printf_float+0xbe>
 810a654:	2301      	movs	r3, #1
 810a656:	464a      	mov	r2, r9
 810a658:	4631      	mov	r1, r6
 810a65a:	4628      	mov	r0, r5
 810a65c:	47b8      	blx	r7
 810a65e:	3001      	adds	r0, #1
 810a660:	f43f af2b 	beq.w	810a4ba <_printf_float+0xba>
 810a664:	f108 0801 	add.w	r8, r8, #1
 810a668:	e7e6      	b.n	810a638 <_printf_float+0x238>
 810a66a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a66c:	2b00      	cmp	r3, #0
 810a66e:	dc2b      	bgt.n	810a6c8 <_printf_float+0x2c8>
 810a670:	2301      	movs	r3, #1
 810a672:	4a26      	ldr	r2, [pc, #152]	; (810a70c <_printf_float+0x30c>)
 810a674:	4631      	mov	r1, r6
 810a676:	4628      	mov	r0, r5
 810a678:	47b8      	blx	r7
 810a67a:	3001      	adds	r0, #1
 810a67c:	f43f af1d 	beq.w	810a4ba <_printf_float+0xba>
 810a680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a682:	b923      	cbnz	r3, 810a68e <_printf_float+0x28e>
 810a684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810a686:	b913      	cbnz	r3, 810a68e <_printf_float+0x28e>
 810a688:	6823      	ldr	r3, [r4, #0]
 810a68a:	07d9      	lsls	r1, r3, #31
 810a68c:	d5d8      	bpl.n	810a640 <_printf_float+0x240>
 810a68e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810a692:	4631      	mov	r1, r6
 810a694:	4628      	mov	r0, r5
 810a696:	47b8      	blx	r7
 810a698:	3001      	adds	r0, #1
 810a69a:	f43f af0e 	beq.w	810a4ba <_printf_float+0xba>
 810a69e:	f04f 0900 	mov.w	r9, #0
 810a6a2:	f104 0a1a 	add.w	sl, r4, #26
 810a6a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a6a8:	425b      	negs	r3, r3
 810a6aa:	454b      	cmp	r3, r9
 810a6ac:	dc01      	bgt.n	810a6b2 <_printf_float+0x2b2>
 810a6ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810a6b0:	e794      	b.n	810a5dc <_printf_float+0x1dc>
 810a6b2:	2301      	movs	r3, #1
 810a6b4:	4652      	mov	r2, sl
 810a6b6:	4631      	mov	r1, r6
 810a6b8:	4628      	mov	r0, r5
 810a6ba:	47b8      	blx	r7
 810a6bc:	3001      	adds	r0, #1
 810a6be:	f43f aefc 	beq.w	810a4ba <_printf_float+0xba>
 810a6c2:	f109 0901 	add.w	r9, r9, #1
 810a6c6:	e7ee      	b.n	810a6a6 <_printf_float+0x2a6>
 810a6c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810a6ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 810a6cc:	429a      	cmp	r2, r3
 810a6ce:	bfa8      	it	ge
 810a6d0:	461a      	movge	r2, r3
 810a6d2:	2a00      	cmp	r2, #0
 810a6d4:	4691      	mov	r9, r2
 810a6d6:	dd07      	ble.n	810a6e8 <_printf_float+0x2e8>
 810a6d8:	4613      	mov	r3, r2
 810a6da:	4631      	mov	r1, r6
 810a6dc:	4642      	mov	r2, r8
 810a6de:	4628      	mov	r0, r5
 810a6e0:	47b8      	blx	r7
 810a6e2:	3001      	adds	r0, #1
 810a6e4:	f43f aee9 	beq.w	810a4ba <_printf_float+0xba>
 810a6e8:	f104 031a 	add.w	r3, r4, #26
 810a6ec:	f04f 0b00 	mov.w	fp, #0
 810a6f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810a6f4:	9306      	str	r3, [sp, #24]
 810a6f6:	e015      	b.n	810a724 <_printf_float+0x324>
 810a6f8:	7fefffff 	.word	0x7fefffff
 810a6fc:	0810bf4c 	.word	0x0810bf4c
 810a700:	0810bf48 	.word	0x0810bf48
 810a704:	0810bf54 	.word	0x0810bf54
 810a708:	0810bf50 	.word	0x0810bf50
 810a70c:	0810bf58 	.word	0x0810bf58
 810a710:	2301      	movs	r3, #1
 810a712:	9a06      	ldr	r2, [sp, #24]
 810a714:	4631      	mov	r1, r6
 810a716:	4628      	mov	r0, r5
 810a718:	47b8      	blx	r7
 810a71a:	3001      	adds	r0, #1
 810a71c:	f43f aecd 	beq.w	810a4ba <_printf_float+0xba>
 810a720:	f10b 0b01 	add.w	fp, fp, #1
 810a724:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 810a728:	ebaa 0309 	sub.w	r3, sl, r9
 810a72c:	455b      	cmp	r3, fp
 810a72e:	dcef      	bgt.n	810a710 <_printf_float+0x310>
 810a730:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810a734:	429a      	cmp	r2, r3
 810a736:	44d0      	add	r8, sl
 810a738:	db15      	blt.n	810a766 <_printf_float+0x366>
 810a73a:	6823      	ldr	r3, [r4, #0]
 810a73c:	07da      	lsls	r2, r3, #31
 810a73e:	d412      	bmi.n	810a766 <_printf_float+0x366>
 810a740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810a742:	9909      	ldr	r1, [sp, #36]	; 0x24
 810a744:	eba3 020a 	sub.w	r2, r3, sl
 810a748:	eba3 0a01 	sub.w	sl, r3, r1
 810a74c:	4592      	cmp	sl, r2
 810a74e:	bfa8      	it	ge
 810a750:	4692      	movge	sl, r2
 810a752:	f1ba 0f00 	cmp.w	sl, #0
 810a756:	dc0e      	bgt.n	810a776 <_printf_float+0x376>
 810a758:	f04f 0800 	mov.w	r8, #0
 810a75c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810a760:	f104 091a 	add.w	r9, r4, #26
 810a764:	e019      	b.n	810a79a <_printf_float+0x39a>
 810a766:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810a76a:	4631      	mov	r1, r6
 810a76c:	4628      	mov	r0, r5
 810a76e:	47b8      	blx	r7
 810a770:	3001      	adds	r0, #1
 810a772:	d1e5      	bne.n	810a740 <_printf_float+0x340>
 810a774:	e6a1      	b.n	810a4ba <_printf_float+0xba>
 810a776:	4653      	mov	r3, sl
 810a778:	4642      	mov	r2, r8
 810a77a:	4631      	mov	r1, r6
 810a77c:	4628      	mov	r0, r5
 810a77e:	47b8      	blx	r7
 810a780:	3001      	adds	r0, #1
 810a782:	d1e9      	bne.n	810a758 <_printf_float+0x358>
 810a784:	e699      	b.n	810a4ba <_printf_float+0xba>
 810a786:	2301      	movs	r3, #1
 810a788:	464a      	mov	r2, r9
 810a78a:	4631      	mov	r1, r6
 810a78c:	4628      	mov	r0, r5
 810a78e:	47b8      	blx	r7
 810a790:	3001      	adds	r0, #1
 810a792:	f43f ae92 	beq.w	810a4ba <_printf_float+0xba>
 810a796:	f108 0801 	add.w	r8, r8, #1
 810a79a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810a79e:	1a9b      	subs	r3, r3, r2
 810a7a0:	eba3 030a 	sub.w	r3, r3, sl
 810a7a4:	4543      	cmp	r3, r8
 810a7a6:	dcee      	bgt.n	810a786 <_printf_float+0x386>
 810a7a8:	e74a      	b.n	810a640 <_printf_float+0x240>
 810a7aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810a7ac:	2a01      	cmp	r2, #1
 810a7ae:	dc01      	bgt.n	810a7b4 <_printf_float+0x3b4>
 810a7b0:	07db      	lsls	r3, r3, #31
 810a7b2:	d53a      	bpl.n	810a82a <_printf_float+0x42a>
 810a7b4:	2301      	movs	r3, #1
 810a7b6:	4642      	mov	r2, r8
 810a7b8:	4631      	mov	r1, r6
 810a7ba:	4628      	mov	r0, r5
 810a7bc:	47b8      	blx	r7
 810a7be:	3001      	adds	r0, #1
 810a7c0:	f43f ae7b 	beq.w	810a4ba <_printf_float+0xba>
 810a7c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810a7c8:	4631      	mov	r1, r6
 810a7ca:	4628      	mov	r0, r5
 810a7cc:	47b8      	blx	r7
 810a7ce:	3001      	adds	r0, #1
 810a7d0:	f108 0801 	add.w	r8, r8, #1
 810a7d4:	f43f ae71 	beq.w	810a4ba <_printf_float+0xba>
 810a7d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810a7da:	2200      	movs	r2, #0
 810a7dc:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 810a7e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810a7e4:	2300      	movs	r3, #0
 810a7e6:	f7f6 f9a7 	bl	8100b38 <__aeabi_dcmpeq>
 810a7ea:	b9c8      	cbnz	r0, 810a820 <_printf_float+0x420>
 810a7ec:	4653      	mov	r3, sl
 810a7ee:	4642      	mov	r2, r8
 810a7f0:	4631      	mov	r1, r6
 810a7f2:	4628      	mov	r0, r5
 810a7f4:	47b8      	blx	r7
 810a7f6:	3001      	adds	r0, #1
 810a7f8:	d10e      	bne.n	810a818 <_printf_float+0x418>
 810a7fa:	e65e      	b.n	810a4ba <_printf_float+0xba>
 810a7fc:	2301      	movs	r3, #1
 810a7fe:	4652      	mov	r2, sl
 810a800:	4631      	mov	r1, r6
 810a802:	4628      	mov	r0, r5
 810a804:	47b8      	blx	r7
 810a806:	3001      	adds	r0, #1
 810a808:	f43f ae57 	beq.w	810a4ba <_printf_float+0xba>
 810a80c:	f108 0801 	add.w	r8, r8, #1
 810a810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810a812:	3b01      	subs	r3, #1
 810a814:	4543      	cmp	r3, r8
 810a816:	dcf1      	bgt.n	810a7fc <_printf_float+0x3fc>
 810a818:	464b      	mov	r3, r9
 810a81a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 810a81e:	e6de      	b.n	810a5de <_printf_float+0x1de>
 810a820:	f04f 0800 	mov.w	r8, #0
 810a824:	f104 0a1a 	add.w	sl, r4, #26
 810a828:	e7f2      	b.n	810a810 <_printf_float+0x410>
 810a82a:	2301      	movs	r3, #1
 810a82c:	e7df      	b.n	810a7ee <_printf_float+0x3ee>
 810a82e:	2301      	movs	r3, #1
 810a830:	464a      	mov	r2, r9
 810a832:	4631      	mov	r1, r6
 810a834:	4628      	mov	r0, r5
 810a836:	47b8      	blx	r7
 810a838:	3001      	adds	r0, #1
 810a83a:	f43f ae3e 	beq.w	810a4ba <_printf_float+0xba>
 810a83e:	f108 0801 	add.w	r8, r8, #1
 810a842:	68e3      	ldr	r3, [r4, #12]
 810a844:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810a846:	1a9b      	subs	r3, r3, r2
 810a848:	4543      	cmp	r3, r8
 810a84a:	dcf0      	bgt.n	810a82e <_printf_float+0x42e>
 810a84c:	e6fc      	b.n	810a648 <_printf_float+0x248>
 810a84e:	f04f 0800 	mov.w	r8, #0
 810a852:	f104 0919 	add.w	r9, r4, #25
 810a856:	e7f4      	b.n	810a842 <_printf_float+0x442>
 810a858:	2900      	cmp	r1, #0
 810a85a:	f43f ae8b 	beq.w	810a574 <_printf_float+0x174>
 810a85e:	2300      	movs	r3, #0
 810a860:	e9cd 0302 	strd	r0, r3, [sp, #8]
 810a864:	ab09      	add	r3, sp, #36	; 0x24
 810a866:	9300      	str	r3, [sp, #0]
 810a868:	ec49 8b10 	vmov	d0, r8, r9
 810a86c:	6022      	str	r2, [r4, #0]
 810a86e:	f8cd a004 	str.w	sl, [sp, #4]
 810a872:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 810a876:	4628      	mov	r0, r5
 810a878:	f7ff fd2d 	bl	810a2d6 <__cvt>
 810a87c:	4680      	mov	r8, r0
 810a87e:	e648      	b.n	810a512 <_printf_float+0x112>

0810a880 <_printf_common>:
 810a880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810a884:	4691      	mov	r9, r2
 810a886:	461f      	mov	r7, r3
 810a888:	688a      	ldr	r2, [r1, #8]
 810a88a:	690b      	ldr	r3, [r1, #16]
 810a88c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 810a890:	4293      	cmp	r3, r2
 810a892:	bfb8      	it	lt
 810a894:	4613      	movlt	r3, r2
 810a896:	f8c9 3000 	str.w	r3, [r9]
 810a89a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 810a89e:	4606      	mov	r6, r0
 810a8a0:	460c      	mov	r4, r1
 810a8a2:	b112      	cbz	r2, 810a8aa <_printf_common+0x2a>
 810a8a4:	3301      	adds	r3, #1
 810a8a6:	f8c9 3000 	str.w	r3, [r9]
 810a8aa:	6823      	ldr	r3, [r4, #0]
 810a8ac:	0699      	lsls	r1, r3, #26
 810a8ae:	bf42      	ittt	mi
 810a8b0:	f8d9 3000 	ldrmi.w	r3, [r9]
 810a8b4:	3302      	addmi	r3, #2
 810a8b6:	f8c9 3000 	strmi.w	r3, [r9]
 810a8ba:	6825      	ldr	r5, [r4, #0]
 810a8bc:	f015 0506 	ands.w	r5, r5, #6
 810a8c0:	d107      	bne.n	810a8d2 <_printf_common+0x52>
 810a8c2:	f104 0a19 	add.w	sl, r4, #25
 810a8c6:	68e3      	ldr	r3, [r4, #12]
 810a8c8:	f8d9 2000 	ldr.w	r2, [r9]
 810a8cc:	1a9b      	subs	r3, r3, r2
 810a8ce:	42ab      	cmp	r3, r5
 810a8d0:	dc28      	bgt.n	810a924 <_printf_common+0xa4>
 810a8d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 810a8d6:	6822      	ldr	r2, [r4, #0]
 810a8d8:	3300      	adds	r3, #0
 810a8da:	bf18      	it	ne
 810a8dc:	2301      	movne	r3, #1
 810a8de:	0692      	lsls	r2, r2, #26
 810a8e0:	d42d      	bmi.n	810a93e <_printf_common+0xbe>
 810a8e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 810a8e6:	4639      	mov	r1, r7
 810a8e8:	4630      	mov	r0, r6
 810a8ea:	47c0      	blx	r8
 810a8ec:	3001      	adds	r0, #1
 810a8ee:	d020      	beq.n	810a932 <_printf_common+0xb2>
 810a8f0:	6823      	ldr	r3, [r4, #0]
 810a8f2:	68e5      	ldr	r5, [r4, #12]
 810a8f4:	f8d9 2000 	ldr.w	r2, [r9]
 810a8f8:	f003 0306 	and.w	r3, r3, #6
 810a8fc:	2b04      	cmp	r3, #4
 810a8fe:	bf08      	it	eq
 810a900:	1aad      	subeq	r5, r5, r2
 810a902:	68a3      	ldr	r3, [r4, #8]
 810a904:	6922      	ldr	r2, [r4, #16]
 810a906:	bf0c      	ite	eq
 810a908:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810a90c:	2500      	movne	r5, #0
 810a90e:	4293      	cmp	r3, r2
 810a910:	bfc4      	itt	gt
 810a912:	1a9b      	subgt	r3, r3, r2
 810a914:	18ed      	addgt	r5, r5, r3
 810a916:	f04f 0900 	mov.w	r9, #0
 810a91a:	341a      	adds	r4, #26
 810a91c:	454d      	cmp	r5, r9
 810a91e:	d11a      	bne.n	810a956 <_printf_common+0xd6>
 810a920:	2000      	movs	r0, #0
 810a922:	e008      	b.n	810a936 <_printf_common+0xb6>
 810a924:	2301      	movs	r3, #1
 810a926:	4652      	mov	r2, sl
 810a928:	4639      	mov	r1, r7
 810a92a:	4630      	mov	r0, r6
 810a92c:	47c0      	blx	r8
 810a92e:	3001      	adds	r0, #1
 810a930:	d103      	bne.n	810a93a <_printf_common+0xba>
 810a932:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810a936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a93a:	3501      	adds	r5, #1
 810a93c:	e7c3      	b.n	810a8c6 <_printf_common+0x46>
 810a93e:	18e1      	adds	r1, r4, r3
 810a940:	1c5a      	adds	r2, r3, #1
 810a942:	2030      	movs	r0, #48	; 0x30
 810a944:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 810a948:	4422      	add	r2, r4
 810a94a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 810a94e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 810a952:	3302      	adds	r3, #2
 810a954:	e7c5      	b.n	810a8e2 <_printf_common+0x62>
 810a956:	2301      	movs	r3, #1
 810a958:	4622      	mov	r2, r4
 810a95a:	4639      	mov	r1, r7
 810a95c:	4630      	mov	r0, r6
 810a95e:	47c0      	blx	r8
 810a960:	3001      	adds	r0, #1
 810a962:	d0e6      	beq.n	810a932 <_printf_common+0xb2>
 810a964:	f109 0901 	add.w	r9, r9, #1
 810a968:	e7d8      	b.n	810a91c <_printf_common+0x9c>

0810a96a <_raise_r>:
 810a96a:	291f      	cmp	r1, #31
 810a96c:	b538      	push	{r3, r4, r5, lr}
 810a96e:	4604      	mov	r4, r0
 810a970:	460d      	mov	r5, r1
 810a972:	d904      	bls.n	810a97e <_raise_r+0x14>
 810a974:	2316      	movs	r3, #22
 810a976:	6003      	str	r3, [r0, #0]
 810a978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810a97c:	bd38      	pop	{r3, r4, r5, pc}
 810a97e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810a980:	b112      	cbz	r2, 810a988 <_raise_r+0x1e>
 810a982:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810a986:	b94b      	cbnz	r3, 810a99c <_raise_r+0x32>
 810a988:	4620      	mov	r0, r4
 810a98a:	f000 f831 	bl	810a9f0 <_getpid_r>
 810a98e:	462a      	mov	r2, r5
 810a990:	4601      	mov	r1, r0
 810a992:	4620      	mov	r0, r4
 810a994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810a998:	f000 b818 	b.w	810a9cc <_kill_r>
 810a99c:	2b01      	cmp	r3, #1
 810a99e:	d00a      	beq.n	810a9b6 <_raise_r+0x4c>
 810a9a0:	1c59      	adds	r1, r3, #1
 810a9a2:	d103      	bne.n	810a9ac <_raise_r+0x42>
 810a9a4:	2316      	movs	r3, #22
 810a9a6:	6003      	str	r3, [r0, #0]
 810a9a8:	2001      	movs	r0, #1
 810a9aa:	e7e7      	b.n	810a97c <_raise_r+0x12>
 810a9ac:	2400      	movs	r4, #0
 810a9ae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810a9b2:	4628      	mov	r0, r5
 810a9b4:	4798      	blx	r3
 810a9b6:	2000      	movs	r0, #0
 810a9b8:	e7e0      	b.n	810a97c <_raise_r+0x12>
	...

0810a9bc <raise>:
 810a9bc:	4b02      	ldr	r3, [pc, #8]	; (810a9c8 <raise+0xc>)
 810a9be:	4601      	mov	r1, r0
 810a9c0:	6818      	ldr	r0, [r3, #0]
 810a9c2:	f7ff bfd2 	b.w	810a96a <_raise_r>
 810a9c6:	bf00      	nop
 810a9c8:	1000002c 	.word	0x1000002c

0810a9cc <_kill_r>:
 810a9cc:	b538      	push	{r3, r4, r5, lr}
 810a9ce:	4c07      	ldr	r4, [pc, #28]	; (810a9ec <_kill_r+0x20>)
 810a9d0:	2300      	movs	r3, #0
 810a9d2:	4605      	mov	r5, r0
 810a9d4:	4608      	mov	r0, r1
 810a9d6:	4611      	mov	r1, r2
 810a9d8:	6023      	str	r3, [r4, #0]
 810a9da:	f7f7 f825 	bl	8101a28 <_kill>
 810a9de:	1c43      	adds	r3, r0, #1
 810a9e0:	d102      	bne.n	810a9e8 <_kill_r+0x1c>
 810a9e2:	6823      	ldr	r3, [r4, #0]
 810a9e4:	b103      	cbz	r3, 810a9e8 <_kill_r+0x1c>
 810a9e6:	602b      	str	r3, [r5, #0]
 810a9e8:	bd38      	pop	{r3, r4, r5, pc}
 810a9ea:	bf00      	nop
 810a9ec:	100055bc 	.word	0x100055bc

0810a9f0 <_getpid_r>:
 810a9f0:	f7f7 b812 	b.w	8101a18 <_getpid>

0810a9f4 <__register_exitproc>:
 810a9f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810a9f8:	4d2c      	ldr	r5, [pc, #176]	; (810aaac <__register_exitproc+0xb8>)
 810a9fa:	682c      	ldr	r4, [r5, #0]
 810a9fc:	4607      	mov	r7, r0
 810a9fe:	460e      	mov	r6, r1
 810aa00:	4691      	mov	r9, r2
 810aa02:	4698      	mov	r8, r3
 810aa04:	b934      	cbnz	r4, 810aa14 <__register_exitproc+0x20>
 810aa06:	4b2a      	ldr	r3, [pc, #168]	; (810aab0 <__register_exitproc+0xbc>)
 810aa08:	4c2a      	ldr	r4, [pc, #168]	; (810aab4 <__register_exitproc+0xc0>)
 810aa0a:	602c      	str	r4, [r5, #0]
 810aa0c:	b113      	cbz	r3, 810aa14 <__register_exitproc+0x20>
 810aa0e:	681b      	ldr	r3, [r3, #0]
 810aa10:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 810aa14:	6863      	ldr	r3, [r4, #4]
 810aa16:	2b1f      	cmp	r3, #31
 810aa18:	dd3d      	ble.n	810aa96 <__register_exitproc+0xa2>
 810aa1a:	4b27      	ldr	r3, [pc, #156]	; (810aab8 <__register_exitproc+0xc4>)
 810aa1c:	b91b      	cbnz	r3, 810aa26 <__register_exitproc+0x32>
 810aa1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810aa22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810aa26:	208c      	movs	r0, #140	; 0x8c
 810aa28:	f000 fe9c 	bl	810b764 <malloc>
 810aa2c:	4604      	mov	r4, r0
 810aa2e:	2800      	cmp	r0, #0
 810aa30:	d0f5      	beq.n	810aa1e <__register_exitproc+0x2a>
 810aa32:	2300      	movs	r3, #0
 810aa34:	682a      	ldr	r2, [r5, #0]
 810aa36:	6002      	str	r2, [r0, #0]
 810aa38:	6043      	str	r3, [r0, #4]
 810aa3a:	6028      	str	r0, [r5, #0]
 810aa3c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 810aa40:	b30f      	cbz	r7, 810aa86 <__register_exitproc+0x92>
 810aa42:	f44f 7084 	mov.w	r0, #264	; 0x108
 810aa46:	f000 fe8d 	bl	810b764 <malloc>
 810aa4a:	2800      	cmp	r0, #0
 810aa4c:	d0e7      	beq.n	810aa1e <__register_exitproc+0x2a>
 810aa4e:	2300      	movs	r3, #0
 810aa50:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 810aa54:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 810aa58:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 810aa5c:	6862      	ldr	r2, [r4, #4]
 810aa5e:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 810aa62:	2301      	movs	r3, #1
 810aa64:	4093      	lsls	r3, r2
 810aa66:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 810aa6a:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 810aa6e:	431a      	orrs	r2, r3
 810aa70:	2f02      	cmp	r7, #2
 810aa72:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 810aa76:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 810aa7a:	bf02      	ittt	eq
 810aa7c:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 810aa80:	4313      	orreq	r3, r2
 810aa82:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 810aa86:	6863      	ldr	r3, [r4, #4]
 810aa88:	1c5a      	adds	r2, r3, #1
 810aa8a:	3302      	adds	r3, #2
 810aa8c:	6062      	str	r2, [r4, #4]
 810aa8e:	2000      	movs	r0, #0
 810aa90:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 810aa94:	e7c5      	b.n	810aa22 <__register_exitproc+0x2e>
 810aa96:	2f00      	cmp	r7, #0
 810aa98:	d0f5      	beq.n	810aa86 <__register_exitproc+0x92>
 810aa9a:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 810aa9e:	2800      	cmp	r0, #0
 810aaa0:	d1dc      	bne.n	810aa5c <__register_exitproc+0x68>
 810aaa2:	4b05      	ldr	r3, [pc, #20]	; (810aab8 <__register_exitproc+0xc4>)
 810aaa4:	2b00      	cmp	r3, #0
 810aaa6:	d0ba      	beq.n	810aa1e <__register_exitproc+0x2a>
 810aaa8:	e7cb      	b.n	810aa42 <__register_exitproc+0x4e>
 810aaaa:	bf00      	nop
 810aaac:	10004bf0 	.word	0x10004bf0
 810aab0:	00000000 	.word	0x00000000
 810aab4:	10004b64 	.word	0x10004b64
 810aab8:	0810b765 	.word	0x0810b765

0810aabc <quorem>:
 810aabc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810aac0:	6903      	ldr	r3, [r0, #16]
 810aac2:	690c      	ldr	r4, [r1, #16]
 810aac4:	42a3      	cmp	r3, r4
 810aac6:	4680      	mov	r8, r0
 810aac8:	f2c0 8082 	blt.w	810abd0 <quorem+0x114>
 810aacc:	3c01      	subs	r4, #1
 810aace:	f101 0714 	add.w	r7, r1, #20
 810aad2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 810aad6:	f100 0614 	add.w	r6, r0, #20
 810aada:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 810aade:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 810aae2:	eb06 030c 	add.w	r3, r6, ip
 810aae6:	3501      	adds	r5, #1
 810aae8:	eb07 090c 	add.w	r9, r7, ip
 810aaec:	9301      	str	r3, [sp, #4]
 810aaee:	fbb0 f5f5 	udiv	r5, r0, r5
 810aaf2:	b395      	cbz	r5, 810ab5a <quorem+0x9e>
 810aaf4:	f04f 0a00 	mov.w	sl, #0
 810aaf8:	4638      	mov	r0, r7
 810aafa:	46b6      	mov	lr, r6
 810aafc:	46d3      	mov	fp, sl
 810aafe:	f850 2b04 	ldr.w	r2, [r0], #4
 810ab02:	b293      	uxth	r3, r2
 810ab04:	fb05 a303 	mla	r3, r5, r3, sl
 810ab08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 810ab0c:	b29b      	uxth	r3, r3
 810ab0e:	ebab 0303 	sub.w	r3, fp, r3
 810ab12:	0c12      	lsrs	r2, r2, #16
 810ab14:	f8de b000 	ldr.w	fp, [lr]
 810ab18:	fb05 a202 	mla	r2, r5, r2, sl
 810ab1c:	fa13 f38b 	uxtah	r3, r3, fp
 810ab20:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 810ab24:	fa1f fb82 	uxth.w	fp, r2
 810ab28:	f8de 2000 	ldr.w	r2, [lr]
 810ab2c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 810ab30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810ab34:	b29b      	uxth	r3, r3
 810ab36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810ab3a:	4581      	cmp	r9, r0
 810ab3c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 810ab40:	f84e 3b04 	str.w	r3, [lr], #4
 810ab44:	d2db      	bcs.n	810aafe <quorem+0x42>
 810ab46:	f856 300c 	ldr.w	r3, [r6, ip]
 810ab4a:	b933      	cbnz	r3, 810ab5a <quorem+0x9e>
 810ab4c:	9b01      	ldr	r3, [sp, #4]
 810ab4e:	3b04      	subs	r3, #4
 810ab50:	429e      	cmp	r6, r3
 810ab52:	461a      	mov	r2, r3
 810ab54:	d330      	bcc.n	810abb8 <quorem+0xfc>
 810ab56:	f8c8 4010 	str.w	r4, [r8, #16]
 810ab5a:	4640      	mov	r0, r8
 810ab5c:	f001 f820 	bl	810bba0 <__mcmp>
 810ab60:	2800      	cmp	r0, #0
 810ab62:	db25      	blt.n	810abb0 <quorem+0xf4>
 810ab64:	3501      	adds	r5, #1
 810ab66:	4630      	mov	r0, r6
 810ab68:	f04f 0c00 	mov.w	ip, #0
 810ab6c:	f857 2b04 	ldr.w	r2, [r7], #4
 810ab70:	f8d0 e000 	ldr.w	lr, [r0]
 810ab74:	b293      	uxth	r3, r2
 810ab76:	ebac 0303 	sub.w	r3, ip, r3
 810ab7a:	0c12      	lsrs	r2, r2, #16
 810ab7c:	fa13 f38e 	uxtah	r3, r3, lr
 810ab80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 810ab84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810ab88:	b29b      	uxth	r3, r3
 810ab8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810ab8e:	45b9      	cmp	r9, r7
 810ab90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 810ab94:	f840 3b04 	str.w	r3, [r0], #4
 810ab98:	d2e8      	bcs.n	810ab6c <quorem+0xb0>
 810ab9a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 810ab9e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 810aba2:	b92a      	cbnz	r2, 810abb0 <quorem+0xf4>
 810aba4:	3b04      	subs	r3, #4
 810aba6:	429e      	cmp	r6, r3
 810aba8:	461a      	mov	r2, r3
 810abaa:	d30b      	bcc.n	810abc4 <quorem+0x108>
 810abac:	f8c8 4010 	str.w	r4, [r8, #16]
 810abb0:	4628      	mov	r0, r5
 810abb2:	b003      	add	sp, #12
 810abb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810abb8:	6812      	ldr	r2, [r2, #0]
 810abba:	3b04      	subs	r3, #4
 810abbc:	2a00      	cmp	r2, #0
 810abbe:	d1ca      	bne.n	810ab56 <quorem+0x9a>
 810abc0:	3c01      	subs	r4, #1
 810abc2:	e7c5      	b.n	810ab50 <quorem+0x94>
 810abc4:	6812      	ldr	r2, [r2, #0]
 810abc6:	3b04      	subs	r3, #4
 810abc8:	2a00      	cmp	r2, #0
 810abca:	d1ef      	bne.n	810abac <quorem+0xf0>
 810abcc:	3c01      	subs	r4, #1
 810abce:	e7ea      	b.n	810aba6 <quorem+0xea>
 810abd0:	2000      	movs	r0, #0
 810abd2:	e7ee      	b.n	810abb2 <quorem+0xf6>
 810abd4:	0000      	movs	r0, r0
	...

0810abd8 <_dtoa_r>:
 810abd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810abdc:	ec57 6b10 	vmov	r6, r7, d0
 810abe0:	b097      	sub	sp, #92	; 0x5c
 810abe2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 810abe4:	9106      	str	r1, [sp, #24]
 810abe6:	4604      	mov	r4, r0
 810abe8:	920b      	str	r2, [sp, #44]	; 0x2c
 810abea:	9312      	str	r3, [sp, #72]	; 0x48
 810abec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 810abf0:	e9cd 6700 	strd	r6, r7, [sp]
 810abf4:	b93d      	cbnz	r5, 810ac06 <_dtoa_r+0x2e>
 810abf6:	2010      	movs	r0, #16
 810abf8:	f000 fdb4 	bl	810b764 <malloc>
 810abfc:	6260      	str	r0, [r4, #36]	; 0x24
 810abfe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 810ac02:	6005      	str	r5, [r0, #0]
 810ac04:	60c5      	str	r5, [r0, #12]
 810ac06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810ac08:	6819      	ldr	r1, [r3, #0]
 810ac0a:	b151      	cbz	r1, 810ac22 <_dtoa_r+0x4a>
 810ac0c:	685a      	ldr	r2, [r3, #4]
 810ac0e:	604a      	str	r2, [r1, #4]
 810ac10:	2301      	movs	r3, #1
 810ac12:	4093      	lsls	r3, r2
 810ac14:	608b      	str	r3, [r1, #8]
 810ac16:	4620      	mov	r0, r4
 810ac18:	f000 fde0 	bl	810b7dc <_Bfree>
 810ac1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810ac1e:	2200      	movs	r2, #0
 810ac20:	601a      	str	r2, [r3, #0]
 810ac22:	1e3b      	subs	r3, r7, #0
 810ac24:	bfbb      	ittet	lt
 810ac26:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 810ac2a:	9301      	strlt	r3, [sp, #4]
 810ac2c:	2300      	movge	r3, #0
 810ac2e:	2201      	movlt	r2, #1
 810ac30:	bfac      	ite	ge
 810ac32:	f8c8 3000 	strge.w	r3, [r8]
 810ac36:	f8c8 2000 	strlt.w	r2, [r8]
 810ac3a:	4baf      	ldr	r3, [pc, #700]	; (810aef8 <_dtoa_r+0x320>)
 810ac3c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 810ac40:	ea33 0308 	bics.w	r3, r3, r8
 810ac44:	d114      	bne.n	810ac70 <_dtoa_r+0x98>
 810ac46:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810ac48:	f242 730f 	movw	r3, #9999	; 0x270f
 810ac4c:	6013      	str	r3, [r2, #0]
 810ac4e:	9b00      	ldr	r3, [sp, #0]
 810ac50:	b923      	cbnz	r3, 810ac5c <_dtoa_r+0x84>
 810ac52:	f3c8 0013 	ubfx	r0, r8, #0, #20
 810ac56:	2800      	cmp	r0, #0
 810ac58:	f000 8542 	beq.w	810b6e0 <_dtoa_r+0xb08>
 810ac5c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810ac5e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 810af0c <_dtoa_r+0x334>
 810ac62:	2b00      	cmp	r3, #0
 810ac64:	f000 8544 	beq.w	810b6f0 <_dtoa_r+0xb18>
 810ac68:	f10b 0303 	add.w	r3, fp, #3
 810ac6c:	f000 bd3e 	b.w	810b6ec <_dtoa_r+0xb14>
 810ac70:	e9dd 6700 	ldrd	r6, r7, [sp]
 810ac74:	2200      	movs	r2, #0
 810ac76:	2300      	movs	r3, #0
 810ac78:	4630      	mov	r0, r6
 810ac7a:	4639      	mov	r1, r7
 810ac7c:	f7f5 ff5c 	bl	8100b38 <__aeabi_dcmpeq>
 810ac80:	4681      	mov	r9, r0
 810ac82:	b168      	cbz	r0, 810aca0 <_dtoa_r+0xc8>
 810ac84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810ac86:	2301      	movs	r3, #1
 810ac88:	6013      	str	r3, [r2, #0]
 810ac8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810ac8c:	2b00      	cmp	r3, #0
 810ac8e:	f000 8524 	beq.w	810b6da <_dtoa_r+0xb02>
 810ac92:	4b9a      	ldr	r3, [pc, #616]	; (810aefc <_dtoa_r+0x324>)
 810ac94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810ac96:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 810ac9a:	6013      	str	r3, [r2, #0]
 810ac9c:	f000 bd28 	b.w	810b6f0 <_dtoa_r+0xb18>
 810aca0:	aa14      	add	r2, sp, #80	; 0x50
 810aca2:	a915      	add	r1, sp, #84	; 0x54
 810aca4:	ec47 6b10 	vmov	d0, r6, r7
 810aca8:	4620      	mov	r0, r4
 810acaa:	f000 fff0 	bl	810bc8e <__d2b>
 810acae:	f3c8 550a 	ubfx	r5, r8, #20, #11
 810acb2:	9004      	str	r0, [sp, #16]
 810acb4:	2d00      	cmp	r5, #0
 810acb6:	d07c      	beq.n	810adb2 <_dtoa_r+0x1da>
 810acb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810acbc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 810acc0:	46b2      	mov	sl, r6
 810acc2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 810acc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 810acca:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 810acce:	2200      	movs	r2, #0
 810acd0:	4b8b      	ldr	r3, [pc, #556]	; (810af00 <_dtoa_r+0x328>)
 810acd2:	4650      	mov	r0, sl
 810acd4:	4659      	mov	r1, fp
 810acd6:	f7f5 fb0f 	bl	81002f8 <__aeabi_dsub>
 810acda:	a381      	add	r3, pc, #516	; (adr r3, 810aee0 <_dtoa_r+0x308>)
 810acdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ace0:	f7f5 fcc2 	bl	8100668 <__aeabi_dmul>
 810ace4:	a380      	add	r3, pc, #512	; (adr r3, 810aee8 <_dtoa_r+0x310>)
 810ace6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810acea:	f7f5 fb07 	bl	81002fc <__adddf3>
 810acee:	4606      	mov	r6, r0
 810acf0:	4628      	mov	r0, r5
 810acf2:	460f      	mov	r7, r1
 810acf4:	f7f5 fc4e 	bl	8100594 <__aeabi_i2d>
 810acf8:	a37d      	add	r3, pc, #500	; (adr r3, 810aef0 <_dtoa_r+0x318>)
 810acfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 810acfe:	f7f5 fcb3 	bl	8100668 <__aeabi_dmul>
 810ad02:	4602      	mov	r2, r0
 810ad04:	460b      	mov	r3, r1
 810ad06:	4630      	mov	r0, r6
 810ad08:	4639      	mov	r1, r7
 810ad0a:	f7f5 faf7 	bl	81002fc <__adddf3>
 810ad0e:	4606      	mov	r6, r0
 810ad10:	460f      	mov	r7, r1
 810ad12:	f7f5 ff59 	bl	8100bc8 <__aeabi_d2iz>
 810ad16:	2200      	movs	r2, #0
 810ad18:	4682      	mov	sl, r0
 810ad1a:	2300      	movs	r3, #0
 810ad1c:	4630      	mov	r0, r6
 810ad1e:	4639      	mov	r1, r7
 810ad20:	f7f5 ff14 	bl	8100b4c <__aeabi_dcmplt>
 810ad24:	b148      	cbz	r0, 810ad3a <_dtoa_r+0x162>
 810ad26:	4650      	mov	r0, sl
 810ad28:	f7f5 fc34 	bl	8100594 <__aeabi_i2d>
 810ad2c:	4632      	mov	r2, r6
 810ad2e:	463b      	mov	r3, r7
 810ad30:	f7f5 ff02 	bl	8100b38 <__aeabi_dcmpeq>
 810ad34:	b908      	cbnz	r0, 810ad3a <_dtoa_r+0x162>
 810ad36:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 810ad3a:	f1ba 0f16 	cmp.w	sl, #22
 810ad3e:	d859      	bhi.n	810adf4 <_dtoa_r+0x21c>
 810ad40:	4970      	ldr	r1, [pc, #448]	; (810af04 <_dtoa_r+0x32c>)
 810ad42:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 810ad46:	e9dd 2300 	ldrd	r2, r3, [sp]
 810ad4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 810ad4e:	f7f5 ff1b 	bl	8100b88 <__aeabi_dcmpgt>
 810ad52:	2800      	cmp	r0, #0
 810ad54:	d050      	beq.n	810adf8 <_dtoa_r+0x220>
 810ad56:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 810ad5a:	2300      	movs	r3, #0
 810ad5c:	930f      	str	r3, [sp, #60]	; 0x3c
 810ad5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810ad60:	1b5d      	subs	r5, r3, r5
 810ad62:	f1b5 0801 	subs.w	r8, r5, #1
 810ad66:	bf49      	itett	mi
 810ad68:	f1c5 0301 	rsbmi	r3, r5, #1
 810ad6c:	2300      	movpl	r3, #0
 810ad6e:	9305      	strmi	r3, [sp, #20]
 810ad70:	f04f 0800 	movmi.w	r8, #0
 810ad74:	bf58      	it	pl
 810ad76:	9305      	strpl	r3, [sp, #20]
 810ad78:	f1ba 0f00 	cmp.w	sl, #0
 810ad7c:	db3e      	blt.n	810adfc <_dtoa_r+0x224>
 810ad7e:	2300      	movs	r3, #0
 810ad80:	44d0      	add	r8, sl
 810ad82:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 810ad86:	9307      	str	r3, [sp, #28]
 810ad88:	9b06      	ldr	r3, [sp, #24]
 810ad8a:	2b09      	cmp	r3, #9
 810ad8c:	f200 8090 	bhi.w	810aeb0 <_dtoa_r+0x2d8>
 810ad90:	2b05      	cmp	r3, #5
 810ad92:	bfc4      	itt	gt
 810ad94:	3b04      	subgt	r3, #4
 810ad96:	9306      	strgt	r3, [sp, #24]
 810ad98:	9b06      	ldr	r3, [sp, #24]
 810ad9a:	f1a3 0302 	sub.w	r3, r3, #2
 810ad9e:	bfcc      	ite	gt
 810ada0:	2500      	movgt	r5, #0
 810ada2:	2501      	movle	r5, #1
 810ada4:	2b03      	cmp	r3, #3
 810ada6:	f200 808f 	bhi.w	810aec8 <_dtoa_r+0x2f0>
 810adaa:	e8df f003 	tbb	[pc, r3]
 810adae:	7f7d      	.short	0x7f7d
 810adb0:	7131      	.short	0x7131
 810adb2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 810adb6:	441d      	add	r5, r3
 810adb8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 810adbc:	2820      	cmp	r0, #32
 810adbe:	dd13      	ble.n	810ade8 <_dtoa_r+0x210>
 810adc0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 810adc4:	9b00      	ldr	r3, [sp, #0]
 810adc6:	fa08 f800 	lsl.w	r8, r8, r0
 810adca:	f205 4012 	addw	r0, r5, #1042	; 0x412
 810adce:	fa23 f000 	lsr.w	r0, r3, r0
 810add2:	ea48 0000 	orr.w	r0, r8, r0
 810add6:	f7f5 fbcd 	bl	8100574 <__aeabi_ui2d>
 810adda:	2301      	movs	r3, #1
 810addc:	4682      	mov	sl, r0
 810adde:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 810ade2:	3d01      	subs	r5, #1
 810ade4:	9313      	str	r3, [sp, #76]	; 0x4c
 810ade6:	e772      	b.n	810acce <_dtoa_r+0xf6>
 810ade8:	9b00      	ldr	r3, [sp, #0]
 810adea:	f1c0 0020 	rsb	r0, r0, #32
 810adee:	fa03 f000 	lsl.w	r0, r3, r0
 810adf2:	e7f0      	b.n	810add6 <_dtoa_r+0x1fe>
 810adf4:	2301      	movs	r3, #1
 810adf6:	e7b1      	b.n	810ad5c <_dtoa_r+0x184>
 810adf8:	900f      	str	r0, [sp, #60]	; 0x3c
 810adfa:	e7b0      	b.n	810ad5e <_dtoa_r+0x186>
 810adfc:	9b05      	ldr	r3, [sp, #20]
 810adfe:	eba3 030a 	sub.w	r3, r3, sl
 810ae02:	9305      	str	r3, [sp, #20]
 810ae04:	f1ca 0300 	rsb	r3, sl, #0
 810ae08:	9307      	str	r3, [sp, #28]
 810ae0a:	2300      	movs	r3, #0
 810ae0c:	930e      	str	r3, [sp, #56]	; 0x38
 810ae0e:	e7bb      	b.n	810ad88 <_dtoa_r+0x1b0>
 810ae10:	2301      	movs	r3, #1
 810ae12:	930a      	str	r3, [sp, #40]	; 0x28
 810ae14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810ae16:	2b00      	cmp	r3, #0
 810ae18:	dd59      	ble.n	810aece <_dtoa_r+0x2f6>
 810ae1a:	9302      	str	r3, [sp, #8]
 810ae1c:	4699      	mov	r9, r3
 810ae1e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 810ae20:	2200      	movs	r2, #0
 810ae22:	6072      	str	r2, [r6, #4]
 810ae24:	2204      	movs	r2, #4
 810ae26:	f102 0014 	add.w	r0, r2, #20
 810ae2a:	4298      	cmp	r0, r3
 810ae2c:	6871      	ldr	r1, [r6, #4]
 810ae2e:	d953      	bls.n	810aed8 <_dtoa_r+0x300>
 810ae30:	4620      	mov	r0, r4
 810ae32:	f000 fc9f 	bl	810b774 <_Balloc>
 810ae36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810ae38:	6030      	str	r0, [r6, #0]
 810ae3a:	f1b9 0f0e 	cmp.w	r9, #14
 810ae3e:	f8d3 b000 	ldr.w	fp, [r3]
 810ae42:	f200 80e6 	bhi.w	810b012 <_dtoa_r+0x43a>
 810ae46:	2d00      	cmp	r5, #0
 810ae48:	f000 80e3 	beq.w	810b012 <_dtoa_r+0x43a>
 810ae4c:	ed9d 7b00 	vldr	d7, [sp]
 810ae50:	f1ba 0f00 	cmp.w	sl, #0
 810ae54:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 810ae58:	dd74      	ble.n	810af44 <_dtoa_r+0x36c>
 810ae5a:	4a2a      	ldr	r2, [pc, #168]	; (810af04 <_dtoa_r+0x32c>)
 810ae5c:	f00a 030f 	and.w	r3, sl, #15
 810ae60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 810ae64:	ed93 7b00 	vldr	d7, [r3]
 810ae68:	ea4f 162a 	mov.w	r6, sl, asr #4
 810ae6c:	06f0      	lsls	r0, r6, #27
 810ae6e:	ed8d 7b08 	vstr	d7, [sp, #32]
 810ae72:	d565      	bpl.n	810af40 <_dtoa_r+0x368>
 810ae74:	4b24      	ldr	r3, [pc, #144]	; (810af08 <_dtoa_r+0x330>)
 810ae76:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 810ae7a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810ae7e:	f7f5 fd1d 	bl	81008bc <__aeabi_ddiv>
 810ae82:	e9cd 0100 	strd	r0, r1, [sp]
 810ae86:	f006 060f 	and.w	r6, r6, #15
 810ae8a:	2503      	movs	r5, #3
 810ae8c:	4f1e      	ldr	r7, [pc, #120]	; (810af08 <_dtoa_r+0x330>)
 810ae8e:	e04c      	b.n	810af2a <_dtoa_r+0x352>
 810ae90:	2301      	movs	r3, #1
 810ae92:	930a      	str	r3, [sp, #40]	; 0x28
 810ae94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810ae96:	4453      	add	r3, sl
 810ae98:	f103 0901 	add.w	r9, r3, #1
 810ae9c:	9302      	str	r3, [sp, #8]
 810ae9e:	464b      	mov	r3, r9
 810aea0:	2b01      	cmp	r3, #1
 810aea2:	bfb8      	it	lt
 810aea4:	2301      	movlt	r3, #1
 810aea6:	e7ba      	b.n	810ae1e <_dtoa_r+0x246>
 810aea8:	2300      	movs	r3, #0
 810aeaa:	e7b2      	b.n	810ae12 <_dtoa_r+0x23a>
 810aeac:	2300      	movs	r3, #0
 810aeae:	e7f0      	b.n	810ae92 <_dtoa_r+0x2ba>
 810aeb0:	2501      	movs	r5, #1
 810aeb2:	2300      	movs	r3, #0
 810aeb4:	9306      	str	r3, [sp, #24]
 810aeb6:	950a      	str	r5, [sp, #40]	; 0x28
 810aeb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810aebc:	9302      	str	r3, [sp, #8]
 810aebe:	4699      	mov	r9, r3
 810aec0:	2200      	movs	r2, #0
 810aec2:	2312      	movs	r3, #18
 810aec4:	920b      	str	r2, [sp, #44]	; 0x2c
 810aec6:	e7aa      	b.n	810ae1e <_dtoa_r+0x246>
 810aec8:	2301      	movs	r3, #1
 810aeca:	930a      	str	r3, [sp, #40]	; 0x28
 810aecc:	e7f4      	b.n	810aeb8 <_dtoa_r+0x2e0>
 810aece:	2301      	movs	r3, #1
 810aed0:	9302      	str	r3, [sp, #8]
 810aed2:	4699      	mov	r9, r3
 810aed4:	461a      	mov	r2, r3
 810aed6:	e7f5      	b.n	810aec4 <_dtoa_r+0x2ec>
 810aed8:	3101      	adds	r1, #1
 810aeda:	6071      	str	r1, [r6, #4]
 810aedc:	0052      	lsls	r2, r2, #1
 810aede:	e7a2      	b.n	810ae26 <_dtoa_r+0x24e>
 810aee0:	636f4361 	.word	0x636f4361
 810aee4:	3fd287a7 	.word	0x3fd287a7
 810aee8:	8b60c8b3 	.word	0x8b60c8b3
 810aeec:	3fc68a28 	.word	0x3fc68a28
 810aef0:	509f79fb 	.word	0x509f79fb
 810aef4:	3fd34413 	.word	0x3fd34413
 810aef8:	7ff00000 	.word	0x7ff00000
 810aefc:	0810bf59 	.word	0x0810bf59
 810af00:	3ff80000 	.word	0x3ff80000
 810af04:	0810bff0 	.word	0x0810bff0
 810af08:	0810bfc8 	.word	0x0810bfc8
 810af0c:	0810bf63 	.word	0x0810bf63
 810af10:	07f1      	lsls	r1, r6, #31
 810af12:	d508      	bpl.n	810af26 <_dtoa_r+0x34e>
 810af14:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810af18:	e9d7 2300 	ldrd	r2, r3, [r7]
 810af1c:	f7f5 fba4 	bl	8100668 <__aeabi_dmul>
 810af20:	e9cd 0108 	strd	r0, r1, [sp, #32]
 810af24:	3501      	adds	r5, #1
 810af26:	1076      	asrs	r6, r6, #1
 810af28:	3708      	adds	r7, #8
 810af2a:	2e00      	cmp	r6, #0
 810af2c:	d1f0      	bne.n	810af10 <_dtoa_r+0x338>
 810af2e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 810af32:	e9dd 0100 	ldrd	r0, r1, [sp]
 810af36:	f7f5 fcc1 	bl	81008bc <__aeabi_ddiv>
 810af3a:	e9cd 0100 	strd	r0, r1, [sp]
 810af3e:	e01a      	b.n	810af76 <_dtoa_r+0x39e>
 810af40:	2502      	movs	r5, #2
 810af42:	e7a3      	b.n	810ae8c <_dtoa_r+0x2b4>
 810af44:	f000 80a0 	beq.w	810b088 <_dtoa_r+0x4b0>
 810af48:	f1ca 0600 	rsb	r6, sl, #0
 810af4c:	4b9f      	ldr	r3, [pc, #636]	; (810b1cc <_dtoa_r+0x5f4>)
 810af4e:	4fa0      	ldr	r7, [pc, #640]	; (810b1d0 <_dtoa_r+0x5f8>)
 810af50:	f006 020f 	and.w	r2, r6, #15
 810af54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810af58:	e9d3 2300 	ldrd	r2, r3, [r3]
 810af5c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 810af60:	f7f5 fb82 	bl	8100668 <__aeabi_dmul>
 810af64:	e9cd 0100 	strd	r0, r1, [sp]
 810af68:	1136      	asrs	r6, r6, #4
 810af6a:	2300      	movs	r3, #0
 810af6c:	2502      	movs	r5, #2
 810af6e:	2e00      	cmp	r6, #0
 810af70:	d17f      	bne.n	810b072 <_dtoa_r+0x49a>
 810af72:	2b00      	cmp	r3, #0
 810af74:	d1e1      	bne.n	810af3a <_dtoa_r+0x362>
 810af76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810af78:	2b00      	cmp	r3, #0
 810af7a:	f000 8087 	beq.w	810b08c <_dtoa_r+0x4b4>
 810af7e:	e9dd 6700 	ldrd	r6, r7, [sp]
 810af82:	2200      	movs	r2, #0
 810af84:	4b93      	ldr	r3, [pc, #588]	; (810b1d4 <_dtoa_r+0x5fc>)
 810af86:	4630      	mov	r0, r6
 810af88:	4639      	mov	r1, r7
 810af8a:	f7f5 fddf 	bl	8100b4c <__aeabi_dcmplt>
 810af8e:	2800      	cmp	r0, #0
 810af90:	d07c      	beq.n	810b08c <_dtoa_r+0x4b4>
 810af92:	f1b9 0f00 	cmp.w	r9, #0
 810af96:	d079      	beq.n	810b08c <_dtoa_r+0x4b4>
 810af98:	9b02      	ldr	r3, [sp, #8]
 810af9a:	2b00      	cmp	r3, #0
 810af9c:	dd35      	ble.n	810b00a <_dtoa_r+0x432>
 810af9e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 810afa2:	9308      	str	r3, [sp, #32]
 810afa4:	4639      	mov	r1, r7
 810afa6:	2200      	movs	r2, #0
 810afa8:	4b8b      	ldr	r3, [pc, #556]	; (810b1d8 <_dtoa_r+0x600>)
 810afaa:	4630      	mov	r0, r6
 810afac:	f7f5 fb5c 	bl	8100668 <__aeabi_dmul>
 810afb0:	e9cd 0100 	strd	r0, r1, [sp]
 810afb4:	9f02      	ldr	r7, [sp, #8]
 810afb6:	3501      	adds	r5, #1
 810afb8:	4628      	mov	r0, r5
 810afba:	f7f5 faeb 	bl	8100594 <__aeabi_i2d>
 810afbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 810afc2:	f7f5 fb51 	bl	8100668 <__aeabi_dmul>
 810afc6:	2200      	movs	r2, #0
 810afc8:	4b84      	ldr	r3, [pc, #528]	; (810b1dc <_dtoa_r+0x604>)
 810afca:	f7f5 f997 	bl	81002fc <__adddf3>
 810afce:	4605      	mov	r5, r0
 810afd0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 810afd4:	2f00      	cmp	r7, #0
 810afd6:	d15d      	bne.n	810b094 <_dtoa_r+0x4bc>
 810afd8:	2200      	movs	r2, #0
 810afda:	4b81      	ldr	r3, [pc, #516]	; (810b1e0 <_dtoa_r+0x608>)
 810afdc:	e9dd 0100 	ldrd	r0, r1, [sp]
 810afe0:	f7f5 f98a 	bl	81002f8 <__aeabi_dsub>
 810afe4:	462a      	mov	r2, r5
 810afe6:	4633      	mov	r3, r6
 810afe8:	e9cd 0100 	strd	r0, r1, [sp]
 810afec:	f7f5 fdcc 	bl	8100b88 <__aeabi_dcmpgt>
 810aff0:	2800      	cmp	r0, #0
 810aff2:	f040 8288 	bne.w	810b506 <_dtoa_r+0x92e>
 810aff6:	462a      	mov	r2, r5
 810aff8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 810affc:	e9dd 0100 	ldrd	r0, r1, [sp]
 810b000:	f7f5 fda4 	bl	8100b4c <__aeabi_dcmplt>
 810b004:	2800      	cmp	r0, #0
 810b006:	f040 827c 	bne.w	810b502 <_dtoa_r+0x92a>
 810b00a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 810b00e:	e9cd 2300 	strd	r2, r3, [sp]
 810b012:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810b014:	2b00      	cmp	r3, #0
 810b016:	f2c0 8150 	blt.w	810b2ba <_dtoa_r+0x6e2>
 810b01a:	f1ba 0f0e 	cmp.w	sl, #14
 810b01e:	f300 814c 	bgt.w	810b2ba <_dtoa_r+0x6e2>
 810b022:	4b6a      	ldr	r3, [pc, #424]	; (810b1cc <_dtoa_r+0x5f4>)
 810b024:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 810b028:	ed93 7b00 	vldr	d7, [r3]
 810b02c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810b02e:	2b00      	cmp	r3, #0
 810b030:	ed8d 7b02 	vstr	d7, [sp, #8]
 810b034:	f280 80d8 	bge.w	810b1e8 <_dtoa_r+0x610>
 810b038:	f1b9 0f00 	cmp.w	r9, #0
 810b03c:	f300 80d4 	bgt.w	810b1e8 <_dtoa_r+0x610>
 810b040:	f040 825e 	bne.w	810b500 <_dtoa_r+0x928>
 810b044:	2200      	movs	r2, #0
 810b046:	4b66      	ldr	r3, [pc, #408]	; (810b1e0 <_dtoa_r+0x608>)
 810b048:	ec51 0b17 	vmov	r0, r1, d7
 810b04c:	f7f5 fb0c 	bl	8100668 <__aeabi_dmul>
 810b050:	e9dd 2300 	ldrd	r2, r3, [sp]
 810b054:	f7f5 fd8e 	bl	8100b74 <__aeabi_dcmpge>
 810b058:	464f      	mov	r7, r9
 810b05a:	464e      	mov	r6, r9
 810b05c:	2800      	cmp	r0, #0
 810b05e:	f040 8234 	bne.w	810b4ca <_dtoa_r+0x8f2>
 810b062:	2331      	movs	r3, #49	; 0x31
 810b064:	f10b 0501 	add.w	r5, fp, #1
 810b068:	f88b 3000 	strb.w	r3, [fp]
 810b06c:	f10a 0a01 	add.w	sl, sl, #1
 810b070:	e22f      	b.n	810b4d2 <_dtoa_r+0x8fa>
 810b072:	07f2      	lsls	r2, r6, #31
 810b074:	d505      	bpl.n	810b082 <_dtoa_r+0x4aa>
 810b076:	e9d7 2300 	ldrd	r2, r3, [r7]
 810b07a:	f7f5 faf5 	bl	8100668 <__aeabi_dmul>
 810b07e:	3501      	adds	r5, #1
 810b080:	2301      	movs	r3, #1
 810b082:	1076      	asrs	r6, r6, #1
 810b084:	3708      	adds	r7, #8
 810b086:	e772      	b.n	810af6e <_dtoa_r+0x396>
 810b088:	2502      	movs	r5, #2
 810b08a:	e774      	b.n	810af76 <_dtoa_r+0x39e>
 810b08c:	f8cd a020 	str.w	sl, [sp, #32]
 810b090:	464f      	mov	r7, r9
 810b092:	e791      	b.n	810afb8 <_dtoa_r+0x3e0>
 810b094:	4b4d      	ldr	r3, [pc, #308]	; (810b1cc <_dtoa_r+0x5f4>)
 810b096:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 810b09a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 810b09e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b0a0:	2b00      	cmp	r3, #0
 810b0a2:	d047      	beq.n	810b134 <_dtoa_r+0x55c>
 810b0a4:	4602      	mov	r2, r0
 810b0a6:	460b      	mov	r3, r1
 810b0a8:	2000      	movs	r0, #0
 810b0aa:	494e      	ldr	r1, [pc, #312]	; (810b1e4 <_dtoa_r+0x60c>)
 810b0ac:	f7f5 fc06 	bl	81008bc <__aeabi_ddiv>
 810b0b0:	462a      	mov	r2, r5
 810b0b2:	4633      	mov	r3, r6
 810b0b4:	f7f5 f920 	bl	81002f8 <__aeabi_dsub>
 810b0b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 810b0bc:	465d      	mov	r5, fp
 810b0be:	e9dd 0100 	ldrd	r0, r1, [sp]
 810b0c2:	f7f5 fd81 	bl	8100bc8 <__aeabi_d2iz>
 810b0c6:	4606      	mov	r6, r0
 810b0c8:	f7f5 fa64 	bl	8100594 <__aeabi_i2d>
 810b0cc:	4602      	mov	r2, r0
 810b0ce:	460b      	mov	r3, r1
 810b0d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 810b0d4:	f7f5 f910 	bl	81002f8 <__aeabi_dsub>
 810b0d8:	3630      	adds	r6, #48	; 0x30
 810b0da:	f805 6b01 	strb.w	r6, [r5], #1
 810b0de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 810b0e2:	e9cd 0100 	strd	r0, r1, [sp]
 810b0e6:	f7f5 fd31 	bl	8100b4c <__aeabi_dcmplt>
 810b0ea:	2800      	cmp	r0, #0
 810b0ec:	d163      	bne.n	810b1b6 <_dtoa_r+0x5de>
 810b0ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 810b0f2:	2000      	movs	r0, #0
 810b0f4:	4937      	ldr	r1, [pc, #220]	; (810b1d4 <_dtoa_r+0x5fc>)
 810b0f6:	f7f5 f8ff 	bl	81002f8 <__aeabi_dsub>
 810b0fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 810b0fe:	f7f5 fd25 	bl	8100b4c <__aeabi_dcmplt>
 810b102:	2800      	cmp	r0, #0
 810b104:	f040 80b7 	bne.w	810b276 <_dtoa_r+0x69e>
 810b108:	eba5 030b 	sub.w	r3, r5, fp
 810b10c:	429f      	cmp	r7, r3
 810b10e:	f77f af7c 	ble.w	810b00a <_dtoa_r+0x432>
 810b112:	2200      	movs	r2, #0
 810b114:	4b30      	ldr	r3, [pc, #192]	; (810b1d8 <_dtoa_r+0x600>)
 810b116:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 810b11a:	f7f5 faa5 	bl	8100668 <__aeabi_dmul>
 810b11e:	2200      	movs	r2, #0
 810b120:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 810b124:	4b2c      	ldr	r3, [pc, #176]	; (810b1d8 <_dtoa_r+0x600>)
 810b126:	e9dd 0100 	ldrd	r0, r1, [sp]
 810b12a:	f7f5 fa9d 	bl	8100668 <__aeabi_dmul>
 810b12e:	e9cd 0100 	strd	r0, r1, [sp]
 810b132:	e7c4      	b.n	810b0be <_dtoa_r+0x4e6>
 810b134:	462a      	mov	r2, r5
 810b136:	4633      	mov	r3, r6
 810b138:	f7f5 fa96 	bl	8100668 <__aeabi_dmul>
 810b13c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 810b140:	eb0b 0507 	add.w	r5, fp, r7
 810b144:	465e      	mov	r6, fp
 810b146:	e9dd 0100 	ldrd	r0, r1, [sp]
 810b14a:	f7f5 fd3d 	bl	8100bc8 <__aeabi_d2iz>
 810b14e:	4607      	mov	r7, r0
 810b150:	f7f5 fa20 	bl	8100594 <__aeabi_i2d>
 810b154:	3730      	adds	r7, #48	; 0x30
 810b156:	4602      	mov	r2, r0
 810b158:	460b      	mov	r3, r1
 810b15a:	e9dd 0100 	ldrd	r0, r1, [sp]
 810b15e:	f7f5 f8cb 	bl	81002f8 <__aeabi_dsub>
 810b162:	f806 7b01 	strb.w	r7, [r6], #1
 810b166:	42ae      	cmp	r6, r5
 810b168:	e9cd 0100 	strd	r0, r1, [sp]
 810b16c:	f04f 0200 	mov.w	r2, #0
 810b170:	d126      	bne.n	810b1c0 <_dtoa_r+0x5e8>
 810b172:	4b1c      	ldr	r3, [pc, #112]	; (810b1e4 <_dtoa_r+0x60c>)
 810b174:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 810b178:	f7f5 f8c0 	bl	81002fc <__adddf3>
 810b17c:	4602      	mov	r2, r0
 810b17e:	460b      	mov	r3, r1
 810b180:	e9dd 0100 	ldrd	r0, r1, [sp]
 810b184:	f7f5 fd00 	bl	8100b88 <__aeabi_dcmpgt>
 810b188:	2800      	cmp	r0, #0
 810b18a:	d174      	bne.n	810b276 <_dtoa_r+0x69e>
 810b18c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 810b190:	2000      	movs	r0, #0
 810b192:	4914      	ldr	r1, [pc, #80]	; (810b1e4 <_dtoa_r+0x60c>)
 810b194:	f7f5 f8b0 	bl	81002f8 <__aeabi_dsub>
 810b198:	4602      	mov	r2, r0
 810b19a:	460b      	mov	r3, r1
 810b19c:	e9dd 0100 	ldrd	r0, r1, [sp]
 810b1a0:	f7f5 fcd4 	bl	8100b4c <__aeabi_dcmplt>
 810b1a4:	2800      	cmp	r0, #0
 810b1a6:	f43f af30 	beq.w	810b00a <_dtoa_r+0x432>
 810b1aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810b1ae:	2b30      	cmp	r3, #48	; 0x30
 810b1b0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 810b1b4:	d002      	beq.n	810b1bc <_dtoa_r+0x5e4>
 810b1b6:	f8dd a020 	ldr.w	sl, [sp, #32]
 810b1ba:	e04a      	b.n	810b252 <_dtoa_r+0x67a>
 810b1bc:	4615      	mov	r5, r2
 810b1be:	e7f4      	b.n	810b1aa <_dtoa_r+0x5d2>
 810b1c0:	4b05      	ldr	r3, [pc, #20]	; (810b1d8 <_dtoa_r+0x600>)
 810b1c2:	f7f5 fa51 	bl	8100668 <__aeabi_dmul>
 810b1c6:	e9cd 0100 	strd	r0, r1, [sp]
 810b1ca:	e7bc      	b.n	810b146 <_dtoa_r+0x56e>
 810b1cc:	0810bff0 	.word	0x0810bff0
 810b1d0:	0810bfc8 	.word	0x0810bfc8
 810b1d4:	3ff00000 	.word	0x3ff00000
 810b1d8:	40240000 	.word	0x40240000
 810b1dc:	401c0000 	.word	0x401c0000
 810b1e0:	40140000 	.word	0x40140000
 810b1e4:	3fe00000 	.word	0x3fe00000
 810b1e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 810b1ec:	465d      	mov	r5, fp
 810b1ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810b1f2:	4630      	mov	r0, r6
 810b1f4:	4639      	mov	r1, r7
 810b1f6:	f7f5 fb61 	bl	81008bc <__aeabi_ddiv>
 810b1fa:	f7f5 fce5 	bl	8100bc8 <__aeabi_d2iz>
 810b1fe:	4680      	mov	r8, r0
 810b200:	f7f5 f9c8 	bl	8100594 <__aeabi_i2d>
 810b204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810b208:	f7f5 fa2e 	bl	8100668 <__aeabi_dmul>
 810b20c:	4602      	mov	r2, r0
 810b20e:	460b      	mov	r3, r1
 810b210:	4630      	mov	r0, r6
 810b212:	4639      	mov	r1, r7
 810b214:	f108 0630 	add.w	r6, r8, #48	; 0x30
 810b218:	f7f5 f86e 	bl	81002f8 <__aeabi_dsub>
 810b21c:	f805 6b01 	strb.w	r6, [r5], #1
 810b220:	eba5 060b 	sub.w	r6, r5, fp
 810b224:	45b1      	cmp	r9, r6
 810b226:	4602      	mov	r2, r0
 810b228:	460b      	mov	r3, r1
 810b22a:	d139      	bne.n	810b2a0 <_dtoa_r+0x6c8>
 810b22c:	f7f5 f866 	bl	81002fc <__adddf3>
 810b230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810b234:	4606      	mov	r6, r0
 810b236:	460f      	mov	r7, r1
 810b238:	f7f5 fca6 	bl	8100b88 <__aeabi_dcmpgt>
 810b23c:	b9c8      	cbnz	r0, 810b272 <_dtoa_r+0x69a>
 810b23e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810b242:	4630      	mov	r0, r6
 810b244:	4639      	mov	r1, r7
 810b246:	f7f5 fc77 	bl	8100b38 <__aeabi_dcmpeq>
 810b24a:	b110      	cbz	r0, 810b252 <_dtoa_r+0x67a>
 810b24c:	f018 0f01 	tst.w	r8, #1
 810b250:	d10f      	bne.n	810b272 <_dtoa_r+0x69a>
 810b252:	9904      	ldr	r1, [sp, #16]
 810b254:	4620      	mov	r0, r4
 810b256:	f000 fac1 	bl	810b7dc <_Bfree>
 810b25a:	2300      	movs	r3, #0
 810b25c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810b25e:	702b      	strb	r3, [r5, #0]
 810b260:	f10a 0301 	add.w	r3, sl, #1
 810b264:	6013      	str	r3, [r2, #0]
 810b266:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810b268:	2b00      	cmp	r3, #0
 810b26a:	f000 8241 	beq.w	810b6f0 <_dtoa_r+0xb18>
 810b26e:	601d      	str	r5, [r3, #0]
 810b270:	e23e      	b.n	810b6f0 <_dtoa_r+0xb18>
 810b272:	f8cd a020 	str.w	sl, [sp, #32]
 810b276:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810b27a:	2a39      	cmp	r2, #57	; 0x39
 810b27c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 810b280:	d108      	bne.n	810b294 <_dtoa_r+0x6bc>
 810b282:	459b      	cmp	fp, r3
 810b284:	d10a      	bne.n	810b29c <_dtoa_r+0x6c4>
 810b286:	9b08      	ldr	r3, [sp, #32]
 810b288:	3301      	adds	r3, #1
 810b28a:	9308      	str	r3, [sp, #32]
 810b28c:	2330      	movs	r3, #48	; 0x30
 810b28e:	f88b 3000 	strb.w	r3, [fp]
 810b292:	465b      	mov	r3, fp
 810b294:	781a      	ldrb	r2, [r3, #0]
 810b296:	3201      	adds	r2, #1
 810b298:	701a      	strb	r2, [r3, #0]
 810b29a:	e78c      	b.n	810b1b6 <_dtoa_r+0x5de>
 810b29c:	461d      	mov	r5, r3
 810b29e:	e7ea      	b.n	810b276 <_dtoa_r+0x69e>
 810b2a0:	2200      	movs	r2, #0
 810b2a2:	4b9b      	ldr	r3, [pc, #620]	; (810b510 <_dtoa_r+0x938>)
 810b2a4:	f7f5 f9e0 	bl	8100668 <__aeabi_dmul>
 810b2a8:	2200      	movs	r2, #0
 810b2aa:	2300      	movs	r3, #0
 810b2ac:	4606      	mov	r6, r0
 810b2ae:	460f      	mov	r7, r1
 810b2b0:	f7f5 fc42 	bl	8100b38 <__aeabi_dcmpeq>
 810b2b4:	2800      	cmp	r0, #0
 810b2b6:	d09a      	beq.n	810b1ee <_dtoa_r+0x616>
 810b2b8:	e7cb      	b.n	810b252 <_dtoa_r+0x67a>
 810b2ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810b2bc:	2a00      	cmp	r2, #0
 810b2be:	f000 808b 	beq.w	810b3d8 <_dtoa_r+0x800>
 810b2c2:	9a06      	ldr	r2, [sp, #24]
 810b2c4:	2a01      	cmp	r2, #1
 810b2c6:	dc6e      	bgt.n	810b3a6 <_dtoa_r+0x7ce>
 810b2c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 810b2ca:	2a00      	cmp	r2, #0
 810b2cc:	d067      	beq.n	810b39e <_dtoa_r+0x7c6>
 810b2ce:	f203 4333 	addw	r3, r3, #1075	; 0x433
 810b2d2:	9f07      	ldr	r7, [sp, #28]
 810b2d4:	9d05      	ldr	r5, [sp, #20]
 810b2d6:	9a05      	ldr	r2, [sp, #20]
 810b2d8:	2101      	movs	r1, #1
 810b2da:	441a      	add	r2, r3
 810b2dc:	4620      	mov	r0, r4
 810b2de:	9205      	str	r2, [sp, #20]
 810b2e0:	4498      	add	r8, r3
 810b2e2:	f000 fb1b 	bl	810b91c <__i2b>
 810b2e6:	4606      	mov	r6, r0
 810b2e8:	2d00      	cmp	r5, #0
 810b2ea:	dd0c      	ble.n	810b306 <_dtoa_r+0x72e>
 810b2ec:	f1b8 0f00 	cmp.w	r8, #0
 810b2f0:	dd09      	ble.n	810b306 <_dtoa_r+0x72e>
 810b2f2:	4545      	cmp	r5, r8
 810b2f4:	9a05      	ldr	r2, [sp, #20]
 810b2f6:	462b      	mov	r3, r5
 810b2f8:	bfa8      	it	ge
 810b2fa:	4643      	movge	r3, r8
 810b2fc:	1ad2      	subs	r2, r2, r3
 810b2fe:	9205      	str	r2, [sp, #20]
 810b300:	1aed      	subs	r5, r5, r3
 810b302:	eba8 0803 	sub.w	r8, r8, r3
 810b306:	9b07      	ldr	r3, [sp, #28]
 810b308:	b1eb      	cbz	r3, 810b346 <_dtoa_r+0x76e>
 810b30a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b30c:	2b00      	cmp	r3, #0
 810b30e:	d067      	beq.n	810b3e0 <_dtoa_r+0x808>
 810b310:	b18f      	cbz	r7, 810b336 <_dtoa_r+0x75e>
 810b312:	4631      	mov	r1, r6
 810b314:	463a      	mov	r2, r7
 810b316:	4620      	mov	r0, r4
 810b318:	f000 fba0 	bl	810ba5c <__pow5mult>
 810b31c:	9a04      	ldr	r2, [sp, #16]
 810b31e:	4601      	mov	r1, r0
 810b320:	4606      	mov	r6, r0
 810b322:	4620      	mov	r0, r4
 810b324:	f000 fb03 	bl	810b92e <__multiply>
 810b328:	9904      	ldr	r1, [sp, #16]
 810b32a:	9008      	str	r0, [sp, #32]
 810b32c:	4620      	mov	r0, r4
 810b32e:	f000 fa55 	bl	810b7dc <_Bfree>
 810b332:	9b08      	ldr	r3, [sp, #32]
 810b334:	9304      	str	r3, [sp, #16]
 810b336:	9b07      	ldr	r3, [sp, #28]
 810b338:	1bda      	subs	r2, r3, r7
 810b33a:	d004      	beq.n	810b346 <_dtoa_r+0x76e>
 810b33c:	9904      	ldr	r1, [sp, #16]
 810b33e:	4620      	mov	r0, r4
 810b340:	f000 fb8c 	bl	810ba5c <__pow5mult>
 810b344:	9004      	str	r0, [sp, #16]
 810b346:	2101      	movs	r1, #1
 810b348:	4620      	mov	r0, r4
 810b34a:	f000 fae7 	bl	810b91c <__i2b>
 810b34e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810b350:	4607      	mov	r7, r0
 810b352:	2b00      	cmp	r3, #0
 810b354:	f000 81d0 	beq.w	810b6f8 <_dtoa_r+0xb20>
 810b358:	461a      	mov	r2, r3
 810b35a:	4601      	mov	r1, r0
 810b35c:	4620      	mov	r0, r4
 810b35e:	f000 fb7d 	bl	810ba5c <__pow5mult>
 810b362:	9b06      	ldr	r3, [sp, #24]
 810b364:	2b01      	cmp	r3, #1
 810b366:	4607      	mov	r7, r0
 810b368:	dc40      	bgt.n	810b3ec <_dtoa_r+0x814>
 810b36a:	9b00      	ldr	r3, [sp, #0]
 810b36c:	2b00      	cmp	r3, #0
 810b36e:	d139      	bne.n	810b3e4 <_dtoa_r+0x80c>
 810b370:	9b01      	ldr	r3, [sp, #4]
 810b372:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810b376:	2b00      	cmp	r3, #0
 810b378:	d136      	bne.n	810b3e8 <_dtoa_r+0x810>
 810b37a:	9b01      	ldr	r3, [sp, #4]
 810b37c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810b380:	0d1b      	lsrs	r3, r3, #20
 810b382:	051b      	lsls	r3, r3, #20
 810b384:	b12b      	cbz	r3, 810b392 <_dtoa_r+0x7ba>
 810b386:	9b05      	ldr	r3, [sp, #20]
 810b388:	3301      	adds	r3, #1
 810b38a:	9305      	str	r3, [sp, #20]
 810b38c:	f108 0801 	add.w	r8, r8, #1
 810b390:	2301      	movs	r3, #1
 810b392:	9307      	str	r3, [sp, #28]
 810b394:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810b396:	2b00      	cmp	r3, #0
 810b398:	d12a      	bne.n	810b3f0 <_dtoa_r+0x818>
 810b39a:	2001      	movs	r0, #1
 810b39c:	e030      	b.n	810b400 <_dtoa_r+0x828>
 810b39e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810b3a0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 810b3a4:	e795      	b.n	810b2d2 <_dtoa_r+0x6fa>
 810b3a6:	9b07      	ldr	r3, [sp, #28]
 810b3a8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 810b3ac:	42bb      	cmp	r3, r7
 810b3ae:	bfbf      	itttt	lt
 810b3b0:	9b07      	ldrlt	r3, [sp, #28]
 810b3b2:	9707      	strlt	r7, [sp, #28]
 810b3b4:	1afa      	sublt	r2, r7, r3
 810b3b6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 810b3b8:	bfbb      	ittet	lt
 810b3ba:	189b      	addlt	r3, r3, r2
 810b3bc:	930e      	strlt	r3, [sp, #56]	; 0x38
 810b3be:	1bdf      	subge	r7, r3, r7
 810b3c0:	2700      	movlt	r7, #0
 810b3c2:	f1b9 0f00 	cmp.w	r9, #0
 810b3c6:	bfb5      	itete	lt
 810b3c8:	9b05      	ldrlt	r3, [sp, #20]
 810b3ca:	9d05      	ldrge	r5, [sp, #20]
 810b3cc:	eba3 0509 	sublt.w	r5, r3, r9
 810b3d0:	464b      	movge	r3, r9
 810b3d2:	bfb8      	it	lt
 810b3d4:	2300      	movlt	r3, #0
 810b3d6:	e77e      	b.n	810b2d6 <_dtoa_r+0x6fe>
 810b3d8:	9f07      	ldr	r7, [sp, #28]
 810b3da:	9d05      	ldr	r5, [sp, #20]
 810b3dc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 810b3de:	e783      	b.n	810b2e8 <_dtoa_r+0x710>
 810b3e0:	9a07      	ldr	r2, [sp, #28]
 810b3e2:	e7ab      	b.n	810b33c <_dtoa_r+0x764>
 810b3e4:	2300      	movs	r3, #0
 810b3e6:	e7d4      	b.n	810b392 <_dtoa_r+0x7ba>
 810b3e8:	9b00      	ldr	r3, [sp, #0]
 810b3ea:	e7d2      	b.n	810b392 <_dtoa_r+0x7ba>
 810b3ec:	2300      	movs	r3, #0
 810b3ee:	9307      	str	r3, [sp, #28]
 810b3f0:	693b      	ldr	r3, [r7, #16]
 810b3f2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 810b3f6:	6918      	ldr	r0, [r3, #16]
 810b3f8:	f000 fa42 	bl	810b880 <__hi0bits>
 810b3fc:	f1c0 0020 	rsb	r0, r0, #32
 810b400:	4440      	add	r0, r8
 810b402:	f010 001f 	ands.w	r0, r0, #31
 810b406:	d047      	beq.n	810b498 <_dtoa_r+0x8c0>
 810b408:	f1c0 0320 	rsb	r3, r0, #32
 810b40c:	2b04      	cmp	r3, #4
 810b40e:	dd3b      	ble.n	810b488 <_dtoa_r+0x8b0>
 810b410:	9b05      	ldr	r3, [sp, #20]
 810b412:	f1c0 001c 	rsb	r0, r0, #28
 810b416:	4403      	add	r3, r0
 810b418:	9305      	str	r3, [sp, #20]
 810b41a:	4405      	add	r5, r0
 810b41c:	4480      	add	r8, r0
 810b41e:	9b05      	ldr	r3, [sp, #20]
 810b420:	2b00      	cmp	r3, #0
 810b422:	dd05      	ble.n	810b430 <_dtoa_r+0x858>
 810b424:	461a      	mov	r2, r3
 810b426:	9904      	ldr	r1, [sp, #16]
 810b428:	4620      	mov	r0, r4
 810b42a:	f000 fb65 	bl	810baf8 <__lshift>
 810b42e:	9004      	str	r0, [sp, #16]
 810b430:	f1b8 0f00 	cmp.w	r8, #0
 810b434:	dd05      	ble.n	810b442 <_dtoa_r+0x86a>
 810b436:	4639      	mov	r1, r7
 810b438:	4642      	mov	r2, r8
 810b43a:	4620      	mov	r0, r4
 810b43c:	f000 fb5c 	bl	810baf8 <__lshift>
 810b440:	4607      	mov	r7, r0
 810b442:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810b444:	b353      	cbz	r3, 810b49c <_dtoa_r+0x8c4>
 810b446:	4639      	mov	r1, r7
 810b448:	9804      	ldr	r0, [sp, #16]
 810b44a:	f000 fba9 	bl	810bba0 <__mcmp>
 810b44e:	2800      	cmp	r0, #0
 810b450:	da24      	bge.n	810b49c <_dtoa_r+0x8c4>
 810b452:	2300      	movs	r3, #0
 810b454:	220a      	movs	r2, #10
 810b456:	9904      	ldr	r1, [sp, #16]
 810b458:	4620      	mov	r0, r4
 810b45a:	f000 f9d6 	bl	810b80a <__multadd>
 810b45e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b460:	9004      	str	r0, [sp, #16]
 810b462:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 810b466:	2b00      	cmp	r3, #0
 810b468:	f000 814d 	beq.w	810b706 <_dtoa_r+0xb2e>
 810b46c:	2300      	movs	r3, #0
 810b46e:	4631      	mov	r1, r6
 810b470:	220a      	movs	r2, #10
 810b472:	4620      	mov	r0, r4
 810b474:	f000 f9c9 	bl	810b80a <__multadd>
 810b478:	9b02      	ldr	r3, [sp, #8]
 810b47a:	2b00      	cmp	r3, #0
 810b47c:	4606      	mov	r6, r0
 810b47e:	dc4f      	bgt.n	810b520 <_dtoa_r+0x948>
 810b480:	9b06      	ldr	r3, [sp, #24]
 810b482:	2b02      	cmp	r3, #2
 810b484:	dd4c      	ble.n	810b520 <_dtoa_r+0x948>
 810b486:	e011      	b.n	810b4ac <_dtoa_r+0x8d4>
 810b488:	d0c9      	beq.n	810b41e <_dtoa_r+0x846>
 810b48a:	9a05      	ldr	r2, [sp, #20]
 810b48c:	331c      	adds	r3, #28
 810b48e:	441a      	add	r2, r3
 810b490:	9205      	str	r2, [sp, #20]
 810b492:	441d      	add	r5, r3
 810b494:	4498      	add	r8, r3
 810b496:	e7c2      	b.n	810b41e <_dtoa_r+0x846>
 810b498:	4603      	mov	r3, r0
 810b49a:	e7f6      	b.n	810b48a <_dtoa_r+0x8b2>
 810b49c:	f1b9 0f00 	cmp.w	r9, #0
 810b4a0:	dc38      	bgt.n	810b514 <_dtoa_r+0x93c>
 810b4a2:	9b06      	ldr	r3, [sp, #24]
 810b4a4:	2b02      	cmp	r3, #2
 810b4a6:	dd35      	ble.n	810b514 <_dtoa_r+0x93c>
 810b4a8:	f8cd 9008 	str.w	r9, [sp, #8]
 810b4ac:	9b02      	ldr	r3, [sp, #8]
 810b4ae:	b963      	cbnz	r3, 810b4ca <_dtoa_r+0x8f2>
 810b4b0:	4639      	mov	r1, r7
 810b4b2:	2205      	movs	r2, #5
 810b4b4:	4620      	mov	r0, r4
 810b4b6:	f000 f9a8 	bl	810b80a <__multadd>
 810b4ba:	4601      	mov	r1, r0
 810b4bc:	4607      	mov	r7, r0
 810b4be:	9804      	ldr	r0, [sp, #16]
 810b4c0:	f000 fb6e 	bl	810bba0 <__mcmp>
 810b4c4:	2800      	cmp	r0, #0
 810b4c6:	f73f adcc 	bgt.w	810b062 <_dtoa_r+0x48a>
 810b4ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810b4cc:	465d      	mov	r5, fp
 810b4ce:	ea6f 0a03 	mvn.w	sl, r3
 810b4d2:	f04f 0900 	mov.w	r9, #0
 810b4d6:	4639      	mov	r1, r7
 810b4d8:	4620      	mov	r0, r4
 810b4da:	f000 f97f 	bl	810b7dc <_Bfree>
 810b4de:	2e00      	cmp	r6, #0
 810b4e0:	f43f aeb7 	beq.w	810b252 <_dtoa_r+0x67a>
 810b4e4:	f1b9 0f00 	cmp.w	r9, #0
 810b4e8:	d005      	beq.n	810b4f6 <_dtoa_r+0x91e>
 810b4ea:	45b1      	cmp	r9, r6
 810b4ec:	d003      	beq.n	810b4f6 <_dtoa_r+0x91e>
 810b4ee:	4649      	mov	r1, r9
 810b4f0:	4620      	mov	r0, r4
 810b4f2:	f000 f973 	bl	810b7dc <_Bfree>
 810b4f6:	4631      	mov	r1, r6
 810b4f8:	4620      	mov	r0, r4
 810b4fa:	f000 f96f 	bl	810b7dc <_Bfree>
 810b4fe:	e6a8      	b.n	810b252 <_dtoa_r+0x67a>
 810b500:	2700      	movs	r7, #0
 810b502:	463e      	mov	r6, r7
 810b504:	e7e1      	b.n	810b4ca <_dtoa_r+0x8f2>
 810b506:	f8dd a020 	ldr.w	sl, [sp, #32]
 810b50a:	463e      	mov	r6, r7
 810b50c:	e5a9      	b.n	810b062 <_dtoa_r+0x48a>
 810b50e:	bf00      	nop
 810b510:	40240000 	.word	0x40240000
 810b514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b516:	f8cd 9008 	str.w	r9, [sp, #8]
 810b51a:	2b00      	cmp	r3, #0
 810b51c:	f000 80fa 	beq.w	810b714 <_dtoa_r+0xb3c>
 810b520:	2d00      	cmp	r5, #0
 810b522:	dd05      	ble.n	810b530 <_dtoa_r+0x958>
 810b524:	4631      	mov	r1, r6
 810b526:	462a      	mov	r2, r5
 810b528:	4620      	mov	r0, r4
 810b52a:	f000 fae5 	bl	810baf8 <__lshift>
 810b52e:	4606      	mov	r6, r0
 810b530:	9b07      	ldr	r3, [sp, #28]
 810b532:	2b00      	cmp	r3, #0
 810b534:	d04c      	beq.n	810b5d0 <_dtoa_r+0x9f8>
 810b536:	6871      	ldr	r1, [r6, #4]
 810b538:	4620      	mov	r0, r4
 810b53a:	f000 f91b 	bl	810b774 <_Balloc>
 810b53e:	6932      	ldr	r2, [r6, #16]
 810b540:	3202      	adds	r2, #2
 810b542:	4605      	mov	r5, r0
 810b544:	0092      	lsls	r2, r2, #2
 810b546:	f106 010c 	add.w	r1, r6, #12
 810b54a:	300c      	adds	r0, #12
 810b54c:	f7fe feb0 	bl	810a2b0 <memcpy>
 810b550:	2201      	movs	r2, #1
 810b552:	4629      	mov	r1, r5
 810b554:	4620      	mov	r0, r4
 810b556:	f000 facf 	bl	810baf8 <__lshift>
 810b55a:	9b00      	ldr	r3, [sp, #0]
 810b55c:	f8cd b014 	str.w	fp, [sp, #20]
 810b560:	f003 0301 	and.w	r3, r3, #1
 810b564:	46b1      	mov	r9, r6
 810b566:	9307      	str	r3, [sp, #28]
 810b568:	4606      	mov	r6, r0
 810b56a:	4639      	mov	r1, r7
 810b56c:	9804      	ldr	r0, [sp, #16]
 810b56e:	f7ff faa5 	bl	810aabc <quorem>
 810b572:	4649      	mov	r1, r9
 810b574:	4605      	mov	r5, r0
 810b576:	f100 0830 	add.w	r8, r0, #48	; 0x30
 810b57a:	9804      	ldr	r0, [sp, #16]
 810b57c:	f000 fb10 	bl	810bba0 <__mcmp>
 810b580:	4632      	mov	r2, r6
 810b582:	9000      	str	r0, [sp, #0]
 810b584:	4639      	mov	r1, r7
 810b586:	4620      	mov	r0, r4
 810b588:	f000 fb24 	bl	810bbd4 <__mdiff>
 810b58c:	68c3      	ldr	r3, [r0, #12]
 810b58e:	4602      	mov	r2, r0
 810b590:	bb03      	cbnz	r3, 810b5d4 <_dtoa_r+0x9fc>
 810b592:	4601      	mov	r1, r0
 810b594:	9008      	str	r0, [sp, #32]
 810b596:	9804      	ldr	r0, [sp, #16]
 810b598:	f000 fb02 	bl	810bba0 <__mcmp>
 810b59c:	9a08      	ldr	r2, [sp, #32]
 810b59e:	4603      	mov	r3, r0
 810b5a0:	4611      	mov	r1, r2
 810b5a2:	4620      	mov	r0, r4
 810b5a4:	9308      	str	r3, [sp, #32]
 810b5a6:	f000 f919 	bl	810b7dc <_Bfree>
 810b5aa:	9b08      	ldr	r3, [sp, #32]
 810b5ac:	b9a3      	cbnz	r3, 810b5d8 <_dtoa_r+0xa00>
 810b5ae:	9a06      	ldr	r2, [sp, #24]
 810b5b0:	b992      	cbnz	r2, 810b5d8 <_dtoa_r+0xa00>
 810b5b2:	9a07      	ldr	r2, [sp, #28]
 810b5b4:	b982      	cbnz	r2, 810b5d8 <_dtoa_r+0xa00>
 810b5b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 810b5ba:	d029      	beq.n	810b610 <_dtoa_r+0xa38>
 810b5bc:	9b00      	ldr	r3, [sp, #0]
 810b5be:	2b00      	cmp	r3, #0
 810b5c0:	dd01      	ble.n	810b5c6 <_dtoa_r+0x9ee>
 810b5c2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 810b5c6:	9b05      	ldr	r3, [sp, #20]
 810b5c8:	1c5d      	adds	r5, r3, #1
 810b5ca:	f883 8000 	strb.w	r8, [r3]
 810b5ce:	e782      	b.n	810b4d6 <_dtoa_r+0x8fe>
 810b5d0:	4630      	mov	r0, r6
 810b5d2:	e7c2      	b.n	810b55a <_dtoa_r+0x982>
 810b5d4:	2301      	movs	r3, #1
 810b5d6:	e7e3      	b.n	810b5a0 <_dtoa_r+0x9c8>
 810b5d8:	9a00      	ldr	r2, [sp, #0]
 810b5da:	2a00      	cmp	r2, #0
 810b5dc:	db04      	blt.n	810b5e8 <_dtoa_r+0xa10>
 810b5de:	d125      	bne.n	810b62c <_dtoa_r+0xa54>
 810b5e0:	9a06      	ldr	r2, [sp, #24]
 810b5e2:	bb1a      	cbnz	r2, 810b62c <_dtoa_r+0xa54>
 810b5e4:	9a07      	ldr	r2, [sp, #28]
 810b5e6:	bb0a      	cbnz	r2, 810b62c <_dtoa_r+0xa54>
 810b5e8:	2b00      	cmp	r3, #0
 810b5ea:	ddec      	ble.n	810b5c6 <_dtoa_r+0x9ee>
 810b5ec:	2201      	movs	r2, #1
 810b5ee:	9904      	ldr	r1, [sp, #16]
 810b5f0:	4620      	mov	r0, r4
 810b5f2:	f000 fa81 	bl	810baf8 <__lshift>
 810b5f6:	4639      	mov	r1, r7
 810b5f8:	9004      	str	r0, [sp, #16]
 810b5fa:	f000 fad1 	bl	810bba0 <__mcmp>
 810b5fe:	2800      	cmp	r0, #0
 810b600:	dc03      	bgt.n	810b60a <_dtoa_r+0xa32>
 810b602:	d1e0      	bne.n	810b5c6 <_dtoa_r+0x9ee>
 810b604:	f018 0f01 	tst.w	r8, #1
 810b608:	d0dd      	beq.n	810b5c6 <_dtoa_r+0x9ee>
 810b60a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 810b60e:	d1d8      	bne.n	810b5c2 <_dtoa_r+0x9ea>
 810b610:	9b05      	ldr	r3, [sp, #20]
 810b612:	9a05      	ldr	r2, [sp, #20]
 810b614:	1c5d      	adds	r5, r3, #1
 810b616:	2339      	movs	r3, #57	; 0x39
 810b618:	7013      	strb	r3, [r2, #0]
 810b61a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810b61e:	2b39      	cmp	r3, #57	; 0x39
 810b620:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 810b624:	d04f      	beq.n	810b6c6 <_dtoa_r+0xaee>
 810b626:	3301      	adds	r3, #1
 810b628:	7013      	strb	r3, [r2, #0]
 810b62a:	e754      	b.n	810b4d6 <_dtoa_r+0x8fe>
 810b62c:	9a05      	ldr	r2, [sp, #20]
 810b62e:	2b00      	cmp	r3, #0
 810b630:	f102 0501 	add.w	r5, r2, #1
 810b634:	dd06      	ble.n	810b644 <_dtoa_r+0xa6c>
 810b636:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 810b63a:	d0e9      	beq.n	810b610 <_dtoa_r+0xa38>
 810b63c:	f108 0801 	add.w	r8, r8, #1
 810b640:	9b05      	ldr	r3, [sp, #20]
 810b642:	e7c2      	b.n	810b5ca <_dtoa_r+0x9f2>
 810b644:	9a02      	ldr	r2, [sp, #8]
 810b646:	f805 8c01 	strb.w	r8, [r5, #-1]
 810b64a:	eba5 030b 	sub.w	r3, r5, fp
 810b64e:	4293      	cmp	r3, r2
 810b650:	d021      	beq.n	810b696 <_dtoa_r+0xabe>
 810b652:	2300      	movs	r3, #0
 810b654:	220a      	movs	r2, #10
 810b656:	9904      	ldr	r1, [sp, #16]
 810b658:	4620      	mov	r0, r4
 810b65a:	f000 f8d6 	bl	810b80a <__multadd>
 810b65e:	45b1      	cmp	r9, r6
 810b660:	9004      	str	r0, [sp, #16]
 810b662:	f04f 0300 	mov.w	r3, #0
 810b666:	f04f 020a 	mov.w	r2, #10
 810b66a:	4649      	mov	r1, r9
 810b66c:	4620      	mov	r0, r4
 810b66e:	d105      	bne.n	810b67c <_dtoa_r+0xaa4>
 810b670:	f000 f8cb 	bl	810b80a <__multadd>
 810b674:	4681      	mov	r9, r0
 810b676:	4606      	mov	r6, r0
 810b678:	9505      	str	r5, [sp, #20]
 810b67a:	e776      	b.n	810b56a <_dtoa_r+0x992>
 810b67c:	f000 f8c5 	bl	810b80a <__multadd>
 810b680:	4631      	mov	r1, r6
 810b682:	4681      	mov	r9, r0
 810b684:	2300      	movs	r3, #0
 810b686:	220a      	movs	r2, #10
 810b688:	4620      	mov	r0, r4
 810b68a:	f000 f8be 	bl	810b80a <__multadd>
 810b68e:	4606      	mov	r6, r0
 810b690:	e7f2      	b.n	810b678 <_dtoa_r+0xaa0>
 810b692:	f04f 0900 	mov.w	r9, #0
 810b696:	2201      	movs	r2, #1
 810b698:	9904      	ldr	r1, [sp, #16]
 810b69a:	4620      	mov	r0, r4
 810b69c:	f000 fa2c 	bl	810baf8 <__lshift>
 810b6a0:	4639      	mov	r1, r7
 810b6a2:	9004      	str	r0, [sp, #16]
 810b6a4:	f000 fa7c 	bl	810bba0 <__mcmp>
 810b6a8:	2800      	cmp	r0, #0
 810b6aa:	dcb6      	bgt.n	810b61a <_dtoa_r+0xa42>
 810b6ac:	d102      	bne.n	810b6b4 <_dtoa_r+0xadc>
 810b6ae:	f018 0f01 	tst.w	r8, #1
 810b6b2:	d1b2      	bne.n	810b61a <_dtoa_r+0xa42>
 810b6b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810b6b8:	2b30      	cmp	r3, #48	; 0x30
 810b6ba:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 810b6be:	f47f af0a 	bne.w	810b4d6 <_dtoa_r+0x8fe>
 810b6c2:	4615      	mov	r5, r2
 810b6c4:	e7f6      	b.n	810b6b4 <_dtoa_r+0xadc>
 810b6c6:	4593      	cmp	fp, r2
 810b6c8:	d105      	bne.n	810b6d6 <_dtoa_r+0xafe>
 810b6ca:	2331      	movs	r3, #49	; 0x31
 810b6cc:	f10a 0a01 	add.w	sl, sl, #1
 810b6d0:	f88b 3000 	strb.w	r3, [fp]
 810b6d4:	e6ff      	b.n	810b4d6 <_dtoa_r+0x8fe>
 810b6d6:	4615      	mov	r5, r2
 810b6d8:	e79f      	b.n	810b61a <_dtoa_r+0xa42>
 810b6da:	f8df b064 	ldr.w	fp, [pc, #100]	; 810b740 <_dtoa_r+0xb68>
 810b6de:	e007      	b.n	810b6f0 <_dtoa_r+0xb18>
 810b6e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810b6e2:	f8df b060 	ldr.w	fp, [pc, #96]	; 810b744 <_dtoa_r+0xb6c>
 810b6e6:	b11b      	cbz	r3, 810b6f0 <_dtoa_r+0xb18>
 810b6e8:	f10b 0308 	add.w	r3, fp, #8
 810b6ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810b6ee:	6013      	str	r3, [r2, #0]
 810b6f0:	4658      	mov	r0, fp
 810b6f2:	b017      	add	sp, #92	; 0x5c
 810b6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b6f8:	9b06      	ldr	r3, [sp, #24]
 810b6fa:	2b01      	cmp	r3, #1
 810b6fc:	f77f ae35 	ble.w	810b36a <_dtoa_r+0x792>
 810b700:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810b702:	9307      	str	r3, [sp, #28]
 810b704:	e649      	b.n	810b39a <_dtoa_r+0x7c2>
 810b706:	9b02      	ldr	r3, [sp, #8]
 810b708:	2b00      	cmp	r3, #0
 810b70a:	dc03      	bgt.n	810b714 <_dtoa_r+0xb3c>
 810b70c:	9b06      	ldr	r3, [sp, #24]
 810b70e:	2b02      	cmp	r3, #2
 810b710:	f73f aecc 	bgt.w	810b4ac <_dtoa_r+0x8d4>
 810b714:	465d      	mov	r5, fp
 810b716:	4639      	mov	r1, r7
 810b718:	9804      	ldr	r0, [sp, #16]
 810b71a:	f7ff f9cf 	bl	810aabc <quorem>
 810b71e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 810b722:	f805 8b01 	strb.w	r8, [r5], #1
 810b726:	9a02      	ldr	r2, [sp, #8]
 810b728:	eba5 030b 	sub.w	r3, r5, fp
 810b72c:	429a      	cmp	r2, r3
 810b72e:	ddb0      	ble.n	810b692 <_dtoa_r+0xaba>
 810b730:	2300      	movs	r3, #0
 810b732:	220a      	movs	r2, #10
 810b734:	9904      	ldr	r1, [sp, #16]
 810b736:	4620      	mov	r0, r4
 810b738:	f000 f867 	bl	810b80a <__multadd>
 810b73c:	9004      	str	r0, [sp, #16]
 810b73e:	e7ea      	b.n	810b716 <_dtoa_r+0xb3e>
 810b740:	0810bf58 	.word	0x0810bf58
 810b744:	0810bf5a 	.word	0x0810bf5a

0810b748 <_localeconv_r>:
 810b748:	4b04      	ldr	r3, [pc, #16]	; (810b75c <_localeconv_r+0x14>)
 810b74a:	681b      	ldr	r3, [r3, #0]
 810b74c:	6a18      	ldr	r0, [r3, #32]
 810b74e:	4b04      	ldr	r3, [pc, #16]	; (810b760 <_localeconv_r+0x18>)
 810b750:	2800      	cmp	r0, #0
 810b752:	bf08      	it	eq
 810b754:	4618      	moveq	r0, r3
 810b756:	30f0      	adds	r0, #240	; 0xf0
 810b758:	4770      	bx	lr
 810b75a:	bf00      	nop
 810b75c:	1000002c 	.word	0x1000002c
 810b760:	10000090 	.word	0x10000090

0810b764 <malloc>:
 810b764:	4b02      	ldr	r3, [pc, #8]	; (810b770 <malloc+0xc>)
 810b766:	4601      	mov	r1, r0
 810b768:	6818      	ldr	r0, [r3, #0]
 810b76a:	f000 baed 	b.w	810bd48 <_malloc_r>
 810b76e:	bf00      	nop
 810b770:	1000002c 	.word	0x1000002c

0810b774 <_Balloc>:
 810b774:	b570      	push	{r4, r5, r6, lr}
 810b776:	6a45      	ldr	r5, [r0, #36]	; 0x24
 810b778:	4604      	mov	r4, r0
 810b77a:	460e      	mov	r6, r1
 810b77c:	b93d      	cbnz	r5, 810b78e <_Balloc+0x1a>
 810b77e:	2010      	movs	r0, #16
 810b780:	f7ff fff0 	bl	810b764 <malloc>
 810b784:	6260      	str	r0, [r4, #36]	; 0x24
 810b786:	e9c0 5501 	strd	r5, r5, [r0, #4]
 810b78a:	6005      	str	r5, [r0, #0]
 810b78c:	60c5      	str	r5, [r0, #12]
 810b78e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 810b790:	68eb      	ldr	r3, [r5, #12]
 810b792:	b183      	cbz	r3, 810b7b6 <_Balloc+0x42>
 810b794:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810b796:	68db      	ldr	r3, [r3, #12]
 810b798:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 810b79c:	b9b8      	cbnz	r0, 810b7ce <_Balloc+0x5a>
 810b79e:	2101      	movs	r1, #1
 810b7a0:	fa01 f506 	lsl.w	r5, r1, r6
 810b7a4:	1d6a      	adds	r2, r5, #5
 810b7a6:	0092      	lsls	r2, r2, #2
 810b7a8:	4620      	mov	r0, r4
 810b7aa:	f000 fabf 	bl	810bd2c <_calloc_r>
 810b7ae:	b160      	cbz	r0, 810b7ca <_Balloc+0x56>
 810b7b0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 810b7b4:	e00e      	b.n	810b7d4 <_Balloc+0x60>
 810b7b6:	2221      	movs	r2, #33	; 0x21
 810b7b8:	2104      	movs	r1, #4
 810b7ba:	4620      	mov	r0, r4
 810b7bc:	f000 fab6 	bl	810bd2c <_calloc_r>
 810b7c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810b7c2:	60e8      	str	r0, [r5, #12]
 810b7c4:	68db      	ldr	r3, [r3, #12]
 810b7c6:	2b00      	cmp	r3, #0
 810b7c8:	d1e4      	bne.n	810b794 <_Balloc+0x20>
 810b7ca:	2000      	movs	r0, #0
 810b7cc:	bd70      	pop	{r4, r5, r6, pc}
 810b7ce:	6802      	ldr	r2, [r0, #0]
 810b7d0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 810b7d4:	2300      	movs	r3, #0
 810b7d6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810b7da:	e7f7      	b.n	810b7cc <_Balloc+0x58>

0810b7dc <_Bfree>:
 810b7dc:	b570      	push	{r4, r5, r6, lr}
 810b7de:	6a44      	ldr	r4, [r0, #36]	; 0x24
 810b7e0:	4606      	mov	r6, r0
 810b7e2:	460d      	mov	r5, r1
 810b7e4:	b93c      	cbnz	r4, 810b7f6 <_Bfree+0x1a>
 810b7e6:	2010      	movs	r0, #16
 810b7e8:	f7ff ffbc 	bl	810b764 <malloc>
 810b7ec:	6270      	str	r0, [r6, #36]	; 0x24
 810b7ee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810b7f2:	6004      	str	r4, [r0, #0]
 810b7f4:	60c4      	str	r4, [r0, #12]
 810b7f6:	b13d      	cbz	r5, 810b808 <_Bfree+0x2c>
 810b7f8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 810b7fa:	686a      	ldr	r2, [r5, #4]
 810b7fc:	68db      	ldr	r3, [r3, #12]
 810b7fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810b802:	6029      	str	r1, [r5, #0]
 810b804:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 810b808:	bd70      	pop	{r4, r5, r6, pc}

0810b80a <__multadd>:
 810b80a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810b80e:	690d      	ldr	r5, [r1, #16]
 810b810:	461f      	mov	r7, r3
 810b812:	4606      	mov	r6, r0
 810b814:	460c      	mov	r4, r1
 810b816:	f101 0c14 	add.w	ip, r1, #20
 810b81a:	2300      	movs	r3, #0
 810b81c:	f8dc 0000 	ldr.w	r0, [ip]
 810b820:	b281      	uxth	r1, r0
 810b822:	fb02 7101 	mla	r1, r2, r1, r7
 810b826:	0c0f      	lsrs	r7, r1, #16
 810b828:	0c00      	lsrs	r0, r0, #16
 810b82a:	fb02 7000 	mla	r0, r2, r0, r7
 810b82e:	b289      	uxth	r1, r1
 810b830:	3301      	adds	r3, #1
 810b832:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 810b836:	429d      	cmp	r5, r3
 810b838:	ea4f 4710 	mov.w	r7, r0, lsr #16
 810b83c:	f84c 1b04 	str.w	r1, [ip], #4
 810b840:	dcec      	bgt.n	810b81c <__multadd+0x12>
 810b842:	b1d7      	cbz	r7, 810b87a <__multadd+0x70>
 810b844:	68a3      	ldr	r3, [r4, #8]
 810b846:	42ab      	cmp	r3, r5
 810b848:	dc12      	bgt.n	810b870 <__multadd+0x66>
 810b84a:	6861      	ldr	r1, [r4, #4]
 810b84c:	4630      	mov	r0, r6
 810b84e:	3101      	adds	r1, #1
 810b850:	f7ff ff90 	bl	810b774 <_Balloc>
 810b854:	6922      	ldr	r2, [r4, #16]
 810b856:	3202      	adds	r2, #2
 810b858:	f104 010c 	add.w	r1, r4, #12
 810b85c:	4680      	mov	r8, r0
 810b85e:	0092      	lsls	r2, r2, #2
 810b860:	300c      	adds	r0, #12
 810b862:	f7fe fd25 	bl	810a2b0 <memcpy>
 810b866:	4621      	mov	r1, r4
 810b868:	4630      	mov	r0, r6
 810b86a:	f7ff ffb7 	bl	810b7dc <_Bfree>
 810b86e:	4644      	mov	r4, r8
 810b870:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810b874:	3501      	adds	r5, #1
 810b876:	615f      	str	r7, [r3, #20]
 810b878:	6125      	str	r5, [r4, #16]
 810b87a:	4620      	mov	r0, r4
 810b87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810b880 <__hi0bits>:
 810b880:	0c02      	lsrs	r2, r0, #16
 810b882:	0412      	lsls	r2, r2, #16
 810b884:	4603      	mov	r3, r0
 810b886:	b9b2      	cbnz	r2, 810b8b6 <__hi0bits+0x36>
 810b888:	0403      	lsls	r3, r0, #16
 810b88a:	2010      	movs	r0, #16
 810b88c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 810b890:	bf04      	itt	eq
 810b892:	021b      	lsleq	r3, r3, #8
 810b894:	3008      	addeq	r0, #8
 810b896:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 810b89a:	bf04      	itt	eq
 810b89c:	011b      	lsleq	r3, r3, #4
 810b89e:	3004      	addeq	r0, #4
 810b8a0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 810b8a4:	bf04      	itt	eq
 810b8a6:	009b      	lsleq	r3, r3, #2
 810b8a8:	3002      	addeq	r0, #2
 810b8aa:	2b00      	cmp	r3, #0
 810b8ac:	db06      	blt.n	810b8bc <__hi0bits+0x3c>
 810b8ae:	005b      	lsls	r3, r3, #1
 810b8b0:	d503      	bpl.n	810b8ba <__hi0bits+0x3a>
 810b8b2:	3001      	adds	r0, #1
 810b8b4:	4770      	bx	lr
 810b8b6:	2000      	movs	r0, #0
 810b8b8:	e7e8      	b.n	810b88c <__hi0bits+0xc>
 810b8ba:	2020      	movs	r0, #32
 810b8bc:	4770      	bx	lr

0810b8be <__lo0bits>:
 810b8be:	6803      	ldr	r3, [r0, #0]
 810b8c0:	f013 0207 	ands.w	r2, r3, #7
 810b8c4:	4601      	mov	r1, r0
 810b8c6:	d00b      	beq.n	810b8e0 <__lo0bits+0x22>
 810b8c8:	07da      	lsls	r2, r3, #31
 810b8ca:	d423      	bmi.n	810b914 <__lo0bits+0x56>
 810b8cc:	0798      	lsls	r0, r3, #30
 810b8ce:	bf49      	itett	mi
 810b8d0:	085b      	lsrmi	r3, r3, #1
 810b8d2:	089b      	lsrpl	r3, r3, #2
 810b8d4:	2001      	movmi	r0, #1
 810b8d6:	600b      	strmi	r3, [r1, #0]
 810b8d8:	bf5c      	itt	pl
 810b8da:	600b      	strpl	r3, [r1, #0]
 810b8dc:	2002      	movpl	r0, #2
 810b8de:	4770      	bx	lr
 810b8e0:	b298      	uxth	r0, r3
 810b8e2:	b9a8      	cbnz	r0, 810b910 <__lo0bits+0x52>
 810b8e4:	0c1b      	lsrs	r3, r3, #16
 810b8e6:	2010      	movs	r0, #16
 810b8e8:	f013 0fff 	tst.w	r3, #255	; 0xff
 810b8ec:	bf04      	itt	eq
 810b8ee:	0a1b      	lsreq	r3, r3, #8
 810b8f0:	3008      	addeq	r0, #8
 810b8f2:	071a      	lsls	r2, r3, #28
 810b8f4:	bf04      	itt	eq
 810b8f6:	091b      	lsreq	r3, r3, #4
 810b8f8:	3004      	addeq	r0, #4
 810b8fa:	079a      	lsls	r2, r3, #30
 810b8fc:	bf04      	itt	eq
 810b8fe:	089b      	lsreq	r3, r3, #2
 810b900:	3002      	addeq	r0, #2
 810b902:	07da      	lsls	r2, r3, #31
 810b904:	d402      	bmi.n	810b90c <__lo0bits+0x4e>
 810b906:	085b      	lsrs	r3, r3, #1
 810b908:	d006      	beq.n	810b918 <__lo0bits+0x5a>
 810b90a:	3001      	adds	r0, #1
 810b90c:	600b      	str	r3, [r1, #0]
 810b90e:	4770      	bx	lr
 810b910:	4610      	mov	r0, r2
 810b912:	e7e9      	b.n	810b8e8 <__lo0bits+0x2a>
 810b914:	2000      	movs	r0, #0
 810b916:	4770      	bx	lr
 810b918:	2020      	movs	r0, #32
 810b91a:	4770      	bx	lr

0810b91c <__i2b>:
 810b91c:	b510      	push	{r4, lr}
 810b91e:	460c      	mov	r4, r1
 810b920:	2101      	movs	r1, #1
 810b922:	f7ff ff27 	bl	810b774 <_Balloc>
 810b926:	2201      	movs	r2, #1
 810b928:	6144      	str	r4, [r0, #20]
 810b92a:	6102      	str	r2, [r0, #16]
 810b92c:	bd10      	pop	{r4, pc}

0810b92e <__multiply>:
 810b92e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b932:	4614      	mov	r4, r2
 810b934:	690a      	ldr	r2, [r1, #16]
 810b936:	6923      	ldr	r3, [r4, #16]
 810b938:	429a      	cmp	r2, r3
 810b93a:	bfb8      	it	lt
 810b93c:	460b      	movlt	r3, r1
 810b93e:	4688      	mov	r8, r1
 810b940:	bfbc      	itt	lt
 810b942:	46a0      	movlt	r8, r4
 810b944:	461c      	movlt	r4, r3
 810b946:	f8d8 7010 	ldr.w	r7, [r8, #16]
 810b94a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 810b94e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810b952:	f8d8 1004 	ldr.w	r1, [r8, #4]
 810b956:	eb07 0609 	add.w	r6, r7, r9
 810b95a:	42b3      	cmp	r3, r6
 810b95c:	bfb8      	it	lt
 810b95e:	3101      	addlt	r1, #1
 810b960:	f7ff ff08 	bl	810b774 <_Balloc>
 810b964:	f100 0514 	add.w	r5, r0, #20
 810b968:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 810b96c:	462b      	mov	r3, r5
 810b96e:	2200      	movs	r2, #0
 810b970:	4573      	cmp	r3, lr
 810b972:	d316      	bcc.n	810b9a2 <__multiply+0x74>
 810b974:	f104 0214 	add.w	r2, r4, #20
 810b978:	f108 0114 	add.w	r1, r8, #20
 810b97c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 810b980:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 810b984:	9300      	str	r3, [sp, #0]
 810b986:	9b00      	ldr	r3, [sp, #0]
 810b988:	9201      	str	r2, [sp, #4]
 810b98a:	4293      	cmp	r3, r2
 810b98c:	d80c      	bhi.n	810b9a8 <__multiply+0x7a>
 810b98e:	2e00      	cmp	r6, #0
 810b990:	dd03      	ble.n	810b99a <__multiply+0x6c>
 810b992:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 810b996:	2b00      	cmp	r3, #0
 810b998:	d05d      	beq.n	810ba56 <__multiply+0x128>
 810b99a:	6106      	str	r6, [r0, #16]
 810b99c:	b003      	add	sp, #12
 810b99e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b9a2:	f843 2b04 	str.w	r2, [r3], #4
 810b9a6:	e7e3      	b.n	810b970 <__multiply+0x42>
 810b9a8:	f8b2 b000 	ldrh.w	fp, [r2]
 810b9ac:	f1bb 0f00 	cmp.w	fp, #0
 810b9b0:	d023      	beq.n	810b9fa <__multiply+0xcc>
 810b9b2:	4689      	mov	r9, r1
 810b9b4:	46ac      	mov	ip, r5
 810b9b6:	f04f 0800 	mov.w	r8, #0
 810b9ba:	f859 4b04 	ldr.w	r4, [r9], #4
 810b9be:	f8dc a000 	ldr.w	sl, [ip]
 810b9c2:	b2a3      	uxth	r3, r4
 810b9c4:	fa1f fa8a 	uxth.w	sl, sl
 810b9c8:	fb0b a303 	mla	r3, fp, r3, sl
 810b9cc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 810b9d0:	f8dc 4000 	ldr.w	r4, [ip]
 810b9d4:	4443      	add	r3, r8
 810b9d6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 810b9da:	fb0b 840a 	mla	r4, fp, sl, r8
 810b9de:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 810b9e2:	46e2      	mov	sl, ip
 810b9e4:	b29b      	uxth	r3, r3
 810b9e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 810b9ea:	454f      	cmp	r7, r9
 810b9ec:	ea4f 4814 	mov.w	r8, r4, lsr #16
 810b9f0:	f84a 3b04 	str.w	r3, [sl], #4
 810b9f4:	d82b      	bhi.n	810ba4e <__multiply+0x120>
 810b9f6:	f8cc 8004 	str.w	r8, [ip, #4]
 810b9fa:	9b01      	ldr	r3, [sp, #4]
 810b9fc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 810ba00:	3204      	adds	r2, #4
 810ba02:	f1ba 0f00 	cmp.w	sl, #0
 810ba06:	d020      	beq.n	810ba4a <__multiply+0x11c>
 810ba08:	682b      	ldr	r3, [r5, #0]
 810ba0a:	4689      	mov	r9, r1
 810ba0c:	46a8      	mov	r8, r5
 810ba0e:	f04f 0b00 	mov.w	fp, #0
 810ba12:	f8b9 c000 	ldrh.w	ip, [r9]
 810ba16:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 810ba1a:	fb0a 440c 	mla	r4, sl, ip, r4
 810ba1e:	445c      	add	r4, fp
 810ba20:	46c4      	mov	ip, r8
 810ba22:	b29b      	uxth	r3, r3
 810ba24:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 810ba28:	f84c 3b04 	str.w	r3, [ip], #4
 810ba2c:	f859 3b04 	ldr.w	r3, [r9], #4
 810ba30:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 810ba34:	0c1b      	lsrs	r3, r3, #16
 810ba36:	fb0a b303 	mla	r3, sl, r3, fp
 810ba3a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 810ba3e:	454f      	cmp	r7, r9
 810ba40:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 810ba44:	d805      	bhi.n	810ba52 <__multiply+0x124>
 810ba46:	f8c8 3004 	str.w	r3, [r8, #4]
 810ba4a:	3504      	adds	r5, #4
 810ba4c:	e79b      	b.n	810b986 <__multiply+0x58>
 810ba4e:	46d4      	mov	ip, sl
 810ba50:	e7b3      	b.n	810b9ba <__multiply+0x8c>
 810ba52:	46e0      	mov	r8, ip
 810ba54:	e7dd      	b.n	810ba12 <__multiply+0xe4>
 810ba56:	3e01      	subs	r6, #1
 810ba58:	e799      	b.n	810b98e <__multiply+0x60>
	...

0810ba5c <__pow5mult>:
 810ba5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810ba60:	4615      	mov	r5, r2
 810ba62:	f012 0203 	ands.w	r2, r2, #3
 810ba66:	4606      	mov	r6, r0
 810ba68:	460f      	mov	r7, r1
 810ba6a:	d007      	beq.n	810ba7c <__pow5mult+0x20>
 810ba6c:	3a01      	subs	r2, #1
 810ba6e:	4c21      	ldr	r4, [pc, #132]	; (810baf4 <__pow5mult+0x98>)
 810ba70:	2300      	movs	r3, #0
 810ba72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810ba76:	f7ff fec8 	bl	810b80a <__multadd>
 810ba7a:	4607      	mov	r7, r0
 810ba7c:	10ad      	asrs	r5, r5, #2
 810ba7e:	d035      	beq.n	810baec <__pow5mult+0x90>
 810ba80:	6a74      	ldr	r4, [r6, #36]	; 0x24
 810ba82:	b93c      	cbnz	r4, 810ba94 <__pow5mult+0x38>
 810ba84:	2010      	movs	r0, #16
 810ba86:	f7ff fe6d 	bl	810b764 <malloc>
 810ba8a:	6270      	str	r0, [r6, #36]	; 0x24
 810ba8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810ba90:	6004      	str	r4, [r0, #0]
 810ba92:	60c4      	str	r4, [r0, #12]
 810ba94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 810ba98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810ba9c:	b94c      	cbnz	r4, 810bab2 <__pow5mult+0x56>
 810ba9e:	f240 2171 	movw	r1, #625	; 0x271
 810baa2:	4630      	mov	r0, r6
 810baa4:	f7ff ff3a 	bl	810b91c <__i2b>
 810baa8:	2300      	movs	r3, #0
 810baaa:	f8c8 0008 	str.w	r0, [r8, #8]
 810baae:	4604      	mov	r4, r0
 810bab0:	6003      	str	r3, [r0, #0]
 810bab2:	f04f 0800 	mov.w	r8, #0
 810bab6:	07eb      	lsls	r3, r5, #31
 810bab8:	d50a      	bpl.n	810bad0 <__pow5mult+0x74>
 810baba:	4639      	mov	r1, r7
 810babc:	4622      	mov	r2, r4
 810babe:	4630      	mov	r0, r6
 810bac0:	f7ff ff35 	bl	810b92e <__multiply>
 810bac4:	4639      	mov	r1, r7
 810bac6:	4681      	mov	r9, r0
 810bac8:	4630      	mov	r0, r6
 810baca:	f7ff fe87 	bl	810b7dc <_Bfree>
 810bace:	464f      	mov	r7, r9
 810bad0:	106d      	asrs	r5, r5, #1
 810bad2:	d00b      	beq.n	810baec <__pow5mult+0x90>
 810bad4:	6820      	ldr	r0, [r4, #0]
 810bad6:	b938      	cbnz	r0, 810bae8 <__pow5mult+0x8c>
 810bad8:	4622      	mov	r2, r4
 810bada:	4621      	mov	r1, r4
 810badc:	4630      	mov	r0, r6
 810bade:	f7ff ff26 	bl	810b92e <__multiply>
 810bae2:	6020      	str	r0, [r4, #0]
 810bae4:	f8c0 8000 	str.w	r8, [r0]
 810bae8:	4604      	mov	r4, r0
 810baea:	e7e4      	b.n	810bab6 <__pow5mult+0x5a>
 810baec:	4638      	mov	r0, r7
 810baee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810baf2:	bf00      	nop
 810baf4:	0810c0b8 	.word	0x0810c0b8

0810baf8 <__lshift>:
 810baf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810bafc:	460c      	mov	r4, r1
 810bafe:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810bb02:	6923      	ldr	r3, [r4, #16]
 810bb04:	6849      	ldr	r1, [r1, #4]
 810bb06:	eb0a 0903 	add.w	r9, sl, r3
 810bb0a:	68a3      	ldr	r3, [r4, #8]
 810bb0c:	4607      	mov	r7, r0
 810bb0e:	4616      	mov	r6, r2
 810bb10:	f109 0501 	add.w	r5, r9, #1
 810bb14:	42ab      	cmp	r3, r5
 810bb16:	db32      	blt.n	810bb7e <__lshift+0x86>
 810bb18:	4638      	mov	r0, r7
 810bb1a:	f7ff fe2b 	bl	810b774 <_Balloc>
 810bb1e:	2300      	movs	r3, #0
 810bb20:	4680      	mov	r8, r0
 810bb22:	f100 0114 	add.w	r1, r0, #20
 810bb26:	461a      	mov	r2, r3
 810bb28:	4553      	cmp	r3, sl
 810bb2a:	db2b      	blt.n	810bb84 <__lshift+0x8c>
 810bb2c:	6920      	ldr	r0, [r4, #16]
 810bb2e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810bb32:	f104 0314 	add.w	r3, r4, #20
 810bb36:	f016 021f 	ands.w	r2, r6, #31
 810bb3a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810bb3e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810bb42:	d025      	beq.n	810bb90 <__lshift+0x98>
 810bb44:	f1c2 0e20 	rsb	lr, r2, #32
 810bb48:	2000      	movs	r0, #0
 810bb4a:	681e      	ldr	r6, [r3, #0]
 810bb4c:	468a      	mov	sl, r1
 810bb4e:	4096      	lsls	r6, r2
 810bb50:	4330      	orrs	r0, r6
 810bb52:	f84a 0b04 	str.w	r0, [sl], #4
 810bb56:	f853 0b04 	ldr.w	r0, [r3], #4
 810bb5a:	459c      	cmp	ip, r3
 810bb5c:	fa20 f00e 	lsr.w	r0, r0, lr
 810bb60:	d814      	bhi.n	810bb8c <__lshift+0x94>
 810bb62:	6048      	str	r0, [r1, #4]
 810bb64:	b108      	cbz	r0, 810bb6a <__lshift+0x72>
 810bb66:	f109 0502 	add.w	r5, r9, #2
 810bb6a:	3d01      	subs	r5, #1
 810bb6c:	4638      	mov	r0, r7
 810bb6e:	f8c8 5010 	str.w	r5, [r8, #16]
 810bb72:	4621      	mov	r1, r4
 810bb74:	f7ff fe32 	bl	810b7dc <_Bfree>
 810bb78:	4640      	mov	r0, r8
 810bb7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810bb7e:	3101      	adds	r1, #1
 810bb80:	005b      	lsls	r3, r3, #1
 810bb82:	e7c7      	b.n	810bb14 <__lshift+0x1c>
 810bb84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 810bb88:	3301      	adds	r3, #1
 810bb8a:	e7cd      	b.n	810bb28 <__lshift+0x30>
 810bb8c:	4651      	mov	r1, sl
 810bb8e:	e7dc      	b.n	810bb4a <__lshift+0x52>
 810bb90:	3904      	subs	r1, #4
 810bb92:	f853 2b04 	ldr.w	r2, [r3], #4
 810bb96:	f841 2f04 	str.w	r2, [r1, #4]!
 810bb9a:	459c      	cmp	ip, r3
 810bb9c:	d8f9      	bhi.n	810bb92 <__lshift+0x9a>
 810bb9e:	e7e4      	b.n	810bb6a <__lshift+0x72>

0810bba0 <__mcmp>:
 810bba0:	6903      	ldr	r3, [r0, #16]
 810bba2:	690a      	ldr	r2, [r1, #16]
 810bba4:	1a9b      	subs	r3, r3, r2
 810bba6:	b530      	push	{r4, r5, lr}
 810bba8:	d10c      	bne.n	810bbc4 <__mcmp+0x24>
 810bbaa:	0092      	lsls	r2, r2, #2
 810bbac:	3014      	adds	r0, #20
 810bbae:	3114      	adds	r1, #20
 810bbb0:	1884      	adds	r4, r0, r2
 810bbb2:	4411      	add	r1, r2
 810bbb4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 810bbb8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 810bbbc:	4295      	cmp	r5, r2
 810bbbe:	d003      	beq.n	810bbc8 <__mcmp+0x28>
 810bbc0:	d305      	bcc.n	810bbce <__mcmp+0x2e>
 810bbc2:	2301      	movs	r3, #1
 810bbc4:	4618      	mov	r0, r3
 810bbc6:	bd30      	pop	{r4, r5, pc}
 810bbc8:	42a0      	cmp	r0, r4
 810bbca:	d3f3      	bcc.n	810bbb4 <__mcmp+0x14>
 810bbcc:	e7fa      	b.n	810bbc4 <__mcmp+0x24>
 810bbce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810bbd2:	e7f7      	b.n	810bbc4 <__mcmp+0x24>

0810bbd4 <__mdiff>:
 810bbd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810bbd8:	460d      	mov	r5, r1
 810bbda:	4607      	mov	r7, r0
 810bbdc:	4611      	mov	r1, r2
 810bbde:	4628      	mov	r0, r5
 810bbe0:	4614      	mov	r4, r2
 810bbe2:	f7ff ffdd 	bl	810bba0 <__mcmp>
 810bbe6:	1e06      	subs	r6, r0, #0
 810bbe8:	d108      	bne.n	810bbfc <__mdiff+0x28>
 810bbea:	4631      	mov	r1, r6
 810bbec:	4638      	mov	r0, r7
 810bbee:	f7ff fdc1 	bl	810b774 <_Balloc>
 810bbf2:	2301      	movs	r3, #1
 810bbf4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 810bbf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810bbfc:	bfa4      	itt	ge
 810bbfe:	4623      	movge	r3, r4
 810bc00:	462c      	movge	r4, r5
 810bc02:	4638      	mov	r0, r7
 810bc04:	6861      	ldr	r1, [r4, #4]
 810bc06:	bfa6      	itte	ge
 810bc08:	461d      	movge	r5, r3
 810bc0a:	2600      	movge	r6, #0
 810bc0c:	2601      	movlt	r6, #1
 810bc0e:	f7ff fdb1 	bl	810b774 <_Balloc>
 810bc12:	692b      	ldr	r3, [r5, #16]
 810bc14:	60c6      	str	r6, [r0, #12]
 810bc16:	6926      	ldr	r6, [r4, #16]
 810bc18:	f105 0914 	add.w	r9, r5, #20
 810bc1c:	f104 0214 	add.w	r2, r4, #20
 810bc20:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 810bc24:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 810bc28:	f100 0514 	add.w	r5, r0, #20
 810bc2c:	f04f 0e00 	mov.w	lr, #0
 810bc30:	f852 ab04 	ldr.w	sl, [r2], #4
 810bc34:	f859 4b04 	ldr.w	r4, [r9], #4
 810bc38:	fa1e f18a 	uxtah	r1, lr, sl
 810bc3c:	b2a3      	uxth	r3, r4
 810bc3e:	1ac9      	subs	r1, r1, r3
 810bc40:	0c23      	lsrs	r3, r4, #16
 810bc42:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 810bc46:	eb03 4321 	add.w	r3, r3, r1, asr #16
 810bc4a:	b289      	uxth	r1, r1
 810bc4c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 810bc50:	45c8      	cmp	r8, r9
 810bc52:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 810bc56:	4694      	mov	ip, r2
 810bc58:	f845 3b04 	str.w	r3, [r5], #4
 810bc5c:	d8e8      	bhi.n	810bc30 <__mdiff+0x5c>
 810bc5e:	45bc      	cmp	ip, r7
 810bc60:	d304      	bcc.n	810bc6c <__mdiff+0x98>
 810bc62:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 810bc66:	b183      	cbz	r3, 810bc8a <__mdiff+0xb6>
 810bc68:	6106      	str	r6, [r0, #16]
 810bc6a:	e7c5      	b.n	810bbf8 <__mdiff+0x24>
 810bc6c:	f85c 1b04 	ldr.w	r1, [ip], #4
 810bc70:	fa1e f381 	uxtah	r3, lr, r1
 810bc74:	141a      	asrs	r2, r3, #16
 810bc76:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 810bc7a:	b29b      	uxth	r3, r3
 810bc7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810bc80:	ea4f 4e22 	mov.w	lr, r2, asr #16
 810bc84:	f845 3b04 	str.w	r3, [r5], #4
 810bc88:	e7e9      	b.n	810bc5e <__mdiff+0x8a>
 810bc8a:	3e01      	subs	r6, #1
 810bc8c:	e7e9      	b.n	810bc62 <__mdiff+0x8e>

0810bc8e <__d2b>:
 810bc8e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810bc92:	460e      	mov	r6, r1
 810bc94:	2101      	movs	r1, #1
 810bc96:	ec59 8b10 	vmov	r8, r9, d0
 810bc9a:	4615      	mov	r5, r2
 810bc9c:	f7ff fd6a 	bl	810b774 <_Balloc>
 810bca0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 810bca4:	4607      	mov	r7, r0
 810bca6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810bcaa:	bb34      	cbnz	r4, 810bcfa <__d2b+0x6c>
 810bcac:	9301      	str	r3, [sp, #4]
 810bcae:	f1b8 0300 	subs.w	r3, r8, #0
 810bcb2:	d027      	beq.n	810bd04 <__d2b+0x76>
 810bcb4:	a802      	add	r0, sp, #8
 810bcb6:	f840 3d08 	str.w	r3, [r0, #-8]!
 810bcba:	f7ff fe00 	bl	810b8be <__lo0bits>
 810bcbe:	9900      	ldr	r1, [sp, #0]
 810bcc0:	b1f0      	cbz	r0, 810bd00 <__d2b+0x72>
 810bcc2:	9a01      	ldr	r2, [sp, #4]
 810bcc4:	f1c0 0320 	rsb	r3, r0, #32
 810bcc8:	fa02 f303 	lsl.w	r3, r2, r3
 810bccc:	430b      	orrs	r3, r1
 810bcce:	40c2      	lsrs	r2, r0
 810bcd0:	617b      	str	r3, [r7, #20]
 810bcd2:	9201      	str	r2, [sp, #4]
 810bcd4:	9b01      	ldr	r3, [sp, #4]
 810bcd6:	61bb      	str	r3, [r7, #24]
 810bcd8:	2b00      	cmp	r3, #0
 810bcda:	bf14      	ite	ne
 810bcdc:	2102      	movne	r1, #2
 810bcde:	2101      	moveq	r1, #1
 810bce0:	6139      	str	r1, [r7, #16]
 810bce2:	b1c4      	cbz	r4, 810bd16 <__d2b+0x88>
 810bce4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 810bce8:	4404      	add	r4, r0
 810bcea:	6034      	str	r4, [r6, #0]
 810bcec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810bcf0:	6028      	str	r0, [r5, #0]
 810bcf2:	4638      	mov	r0, r7
 810bcf4:	b003      	add	sp, #12
 810bcf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810bcfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810bcfe:	e7d5      	b.n	810bcac <__d2b+0x1e>
 810bd00:	6179      	str	r1, [r7, #20]
 810bd02:	e7e7      	b.n	810bcd4 <__d2b+0x46>
 810bd04:	a801      	add	r0, sp, #4
 810bd06:	f7ff fdda 	bl	810b8be <__lo0bits>
 810bd0a:	9b01      	ldr	r3, [sp, #4]
 810bd0c:	617b      	str	r3, [r7, #20]
 810bd0e:	2101      	movs	r1, #1
 810bd10:	6139      	str	r1, [r7, #16]
 810bd12:	3020      	adds	r0, #32
 810bd14:	e7e5      	b.n	810bce2 <__d2b+0x54>
 810bd16:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 810bd1a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810bd1e:	6030      	str	r0, [r6, #0]
 810bd20:	6918      	ldr	r0, [r3, #16]
 810bd22:	f7ff fdad 	bl	810b880 <__hi0bits>
 810bd26:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 810bd2a:	e7e1      	b.n	810bcf0 <__d2b+0x62>

0810bd2c <_calloc_r>:
 810bd2c:	b538      	push	{r3, r4, r5, lr}
 810bd2e:	fb02 f401 	mul.w	r4, r2, r1
 810bd32:	4621      	mov	r1, r4
 810bd34:	f000 f808 	bl	810bd48 <_malloc_r>
 810bd38:	4605      	mov	r5, r0
 810bd3a:	b118      	cbz	r0, 810bd44 <_calloc_r+0x18>
 810bd3c:	4622      	mov	r2, r4
 810bd3e:	2100      	movs	r1, #0
 810bd40:	f7fe fac1 	bl	810a2c6 <memset>
 810bd44:	4628      	mov	r0, r5
 810bd46:	bd38      	pop	{r3, r4, r5, pc}

0810bd48 <_malloc_r>:
 810bd48:	b570      	push	{r4, r5, r6, lr}
 810bd4a:	1ccd      	adds	r5, r1, #3
 810bd4c:	f025 0503 	bic.w	r5, r5, #3
 810bd50:	3508      	adds	r5, #8
 810bd52:	2d0c      	cmp	r5, #12
 810bd54:	bf38      	it	cc
 810bd56:	250c      	movcc	r5, #12
 810bd58:	2d00      	cmp	r5, #0
 810bd5a:	4606      	mov	r6, r0
 810bd5c:	db01      	blt.n	810bd62 <_malloc_r+0x1a>
 810bd5e:	42a9      	cmp	r1, r5
 810bd60:	d903      	bls.n	810bd6a <_malloc_r+0x22>
 810bd62:	230c      	movs	r3, #12
 810bd64:	6033      	str	r3, [r6, #0]
 810bd66:	2000      	movs	r0, #0
 810bd68:	bd70      	pop	{r4, r5, r6, pc}
 810bd6a:	f000 f869 	bl	810be40 <__malloc_lock>
 810bd6e:	4a21      	ldr	r2, [pc, #132]	; (810bdf4 <_malloc_r+0xac>)
 810bd70:	6814      	ldr	r4, [r2, #0]
 810bd72:	4621      	mov	r1, r4
 810bd74:	b991      	cbnz	r1, 810bd9c <_malloc_r+0x54>
 810bd76:	4c20      	ldr	r4, [pc, #128]	; (810bdf8 <_malloc_r+0xb0>)
 810bd78:	6823      	ldr	r3, [r4, #0]
 810bd7a:	b91b      	cbnz	r3, 810bd84 <_malloc_r+0x3c>
 810bd7c:	4630      	mov	r0, r6
 810bd7e:	f000 f83d 	bl	810bdfc <_sbrk_r>
 810bd82:	6020      	str	r0, [r4, #0]
 810bd84:	4629      	mov	r1, r5
 810bd86:	4630      	mov	r0, r6
 810bd88:	f000 f838 	bl	810bdfc <_sbrk_r>
 810bd8c:	1c43      	adds	r3, r0, #1
 810bd8e:	d124      	bne.n	810bdda <_malloc_r+0x92>
 810bd90:	230c      	movs	r3, #12
 810bd92:	6033      	str	r3, [r6, #0]
 810bd94:	4630      	mov	r0, r6
 810bd96:	f000 f854 	bl	810be42 <__malloc_unlock>
 810bd9a:	e7e4      	b.n	810bd66 <_malloc_r+0x1e>
 810bd9c:	680b      	ldr	r3, [r1, #0]
 810bd9e:	1b5b      	subs	r3, r3, r5
 810bda0:	d418      	bmi.n	810bdd4 <_malloc_r+0x8c>
 810bda2:	2b0b      	cmp	r3, #11
 810bda4:	d90f      	bls.n	810bdc6 <_malloc_r+0x7e>
 810bda6:	600b      	str	r3, [r1, #0]
 810bda8:	50cd      	str	r5, [r1, r3]
 810bdaa:	18cc      	adds	r4, r1, r3
 810bdac:	4630      	mov	r0, r6
 810bdae:	f000 f848 	bl	810be42 <__malloc_unlock>
 810bdb2:	f104 000b 	add.w	r0, r4, #11
 810bdb6:	1d23      	adds	r3, r4, #4
 810bdb8:	f020 0007 	bic.w	r0, r0, #7
 810bdbc:	1ac3      	subs	r3, r0, r3
 810bdbe:	d0d3      	beq.n	810bd68 <_malloc_r+0x20>
 810bdc0:	425a      	negs	r2, r3
 810bdc2:	50e2      	str	r2, [r4, r3]
 810bdc4:	e7d0      	b.n	810bd68 <_malloc_r+0x20>
 810bdc6:	428c      	cmp	r4, r1
 810bdc8:	684b      	ldr	r3, [r1, #4]
 810bdca:	bf16      	itet	ne
 810bdcc:	6063      	strne	r3, [r4, #4]
 810bdce:	6013      	streq	r3, [r2, #0]
 810bdd0:	460c      	movne	r4, r1
 810bdd2:	e7eb      	b.n	810bdac <_malloc_r+0x64>
 810bdd4:	460c      	mov	r4, r1
 810bdd6:	6849      	ldr	r1, [r1, #4]
 810bdd8:	e7cc      	b.n	810bd74 <_malloc_r+0x2c>
 810bdda:	1cc4      	adds	r4, r0, #3
 810bddc:	f024 0403 	bic.w	r4, r4, #3
 810bde0:	42a0      	cmp	r0, r4
 810bde2:	d005      	beq.n	810bdf0 <_malloc_r+0xa8>
 810bde4:	1a21      	subs	r1, r4, r0
 810bde6:	4630      	mov	r0, r6
 810bde8:	f000 f808 	bl	810bdfc <_sbrk_r>
 810bdec:	3001      	adds	r0, #1
 810bdee:	d0cf      	beq.n	810bd90 <_malloc_r+0x48>
 810bdf0:	6025      	str	r5, [r4, #0]
 810bdf2:	e7db      	b.n	810bdac <_malloc_r+0x64>
 810bdf4:	10004bf4 	.word	0x10004bf4
 810bdf8:	10004bf8 	.word	0x10004bf8

0810bdfc <_sbrk_r>:
 810bdfc:	b538      	push	{r3, r4, r5, lr}
 810bdfe:	4c06      	ldr	r4, [pc, #24]	; (810be18 <_sbrk_r+0x1c>)
 810be00:	2300      	movs	r3, #0
 810be02:	4605      	mov	r5, r0
 810be04:	4608      	mov	r0, r1
 810be06:	6023      	str	r3, [r4, #0]
 810be08:	f7f5 fe28 	bl	8101a5c <_sbrk>
 810be0c:	1c43      	adds	r3, r0, #1
 810be0e:	d102      	bne.n	810be16 <_sbrk_r+0x1a>
 810be10:	6823      	ldr	r3, [r4, #0]
 810be12:	b103      	cbz	r3, 810be16 <_sbrk_r+0x1a>
 810be14:	602b      	str	r3, [r5, #0]
 810be16:	bd38      	pop	{r3, r4, r5, pc}
 810be18:	100055bc 	.word	0x100055bc

0810be1c <__ascii_mbtowc>:
 810be1c:	b082      	sub	sp, #8
 810be1e:	b901      	cbnz	r1, 810be22 <__ascii_mbtowc+0x6>
 810be20:	a901      	add	r1, sp, #4
 810be22:	b142      	cbz	r2, 810be36 <__ascii_mbtowc+0x1a>
 810be24:	b14b      	cbz	r3, 810be3a <__ascii_mbtowc+0x1e>
 810be26:	7813      	ldrb	r3, [r2, #0]
 810be28:	600b      	str	r3, [r1, #0]
 810be2a:	7812      	ldrb	r2, [r2, #0]
 810be2c:	1c10      	adds	r0, r2, #0
 810be2e:	bf18      	it	ne
 810be30:	2001      	movne	r0, #1
 810be32:	b002      	add	sp, #8
 810be34:	4770      	bx	lr
 810be36:	4610      	mov	r0, r2
 810be38:	e7fb      	b.n	810be32 <__ascii_mbtowc+0x16>
 810be3a:	f06f 0001 	mvn.w	r0, #1
 810be3e:	e7f8      	b.n	810be32 <__ascii_mbtowc+0x16>

0810be40 <__malloc_lock>:
 810be40:	4770      	bx	lr

0810be42 <__malloc_unlock>:
 810be42:	4770      	bx	lr

0810be44 <__ascii_wctomb>:
 810be44:	b149      	cbz	r1, 810be5a <__ascii_wctomb+0x16>
 810be46:	2aff      	cmp	r2, #255	; 0xff
 810be48:	bf85      	ittet	hi
 810be4a:	238a      	movhi	r3, #138	; 0x8a
 810be4c:	6003      	strhi	r3, [r0, #0]
 810be4e:	700a      	strbls	r2, [r1, #0]
 810be50:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 810be54:	bf98      	it	ls
 810be56:	2001      	movls	r0, #1
 810be58:	4770      	bx	lr
 810be5a:	4608      	mov	r0, r1
 810be5c:	4770      	bx	lr
	...

0810be60 <_init>:
 810be60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810be62:	bf00      	nop
 810be64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810be66:	bc08      	pop	{r3}
 810be68:	469e      	mov	lr, r3
 810be6a:	4770      	bx	lr

0810be6c <_fini>:
 810be6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810be6e:	bf00      	nop
 810be70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810be72:	bc08      	pop	{r3}
 810be74:	469e      	mov	lr, r3
 810be76:	4770      	bx	lr
