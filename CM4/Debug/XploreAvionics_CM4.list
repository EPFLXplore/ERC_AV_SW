
XploreAvionics_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec08  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f8  0810eea8  0810eea8  0001eea8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810f4a0  0810f4a0  0001f4a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810f4a8  0810f4a8  0001f4a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810f4ac  0810f4ac  0001f4ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000020c  10000000  0810f4b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005304  1000020c  0810f6bc  0002020c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  10005510  0810f6bc  00025510  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0004f584  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000083a7  00000000  00000000  0006f7c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002620  00000000  00000000  00077b68  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000022e8  00000000  00000000  0007a188  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00049128  00000000  00000000  0007c470  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002f228  00000000  00000000  000c5598  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001aa642  00000000  00000000  000f47c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  0029ee02  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000aeb8  00000000  00000000  0029ee80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	1000020c 	.word	0x1000020c
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810ee90 	.word	0x0810ee90

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000210 	.word	0x10000210
 81002dc:	0810ee90 	.word	0x0810ee90

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81004ce:	f1a4 0401 	sub.w	r4, r4, #1
 81004d2:	d1e9      	bne.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_ldivmod>:
 8100cb8:	b97b      	cbnz	r3, 8100cda <__aeabi_ldivmod+0x22>
 8100cba:	b972      	cbnz	r2, 8100cda <__aeabi_ldivmod+0x22>
 8100cbc:	2900      	cmp	r1, #0
 8100cbe:	bfbe      	ittt	lt
 8100cc0:	2000      	movlt	r0, #0
 8100cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8100cc6:	e006      	blt.n	8100cd6 <__aeabi_ldivmod+0x1e>
 8100cc8:	bf08      	it	eq
 8100cca:	2800      	cmpeq	r0, #0
 8100ccc:	bf1c      	itt	ne
 8100cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8100cd2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8100cd6:	f000 b9bd 	b.w	8101054 <__aeabi_idiv0>
 8100cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8100cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100ce2:	2900      	cmp	r1, #0
 8100ce4:	db09      	blt.n	8100cfa <__aeabi_ldivmod+0x42>
 8100ce6:	2b00      	cmp	r3, #0
 8100ce8:	db1a      	blt.n	8100d20 <__aeabi_ldivmod+0x68>
 8100cea:	f000 f84d 	bl	8100d88 <__udivmoddi4>
 8100cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100cf6:	b004      	add	sp, #16
 8100cf8:	4770      	bx	lr
 8100cfa:	4240      	negs	r0, r0
 8100cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100d00:	2b00      	cmp	r3, #0
 8100d02:	db1b      	blt.n	8100d3c <__aeabi_ldivmod+0x84>
 8100d04:	f000 f840 	bl	8100d88 <__udivmoddi4>
 8100d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100d10:	b004      	add	sp, #16
 8100d12:	4240      	negs	r0, r0
 8100d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100d18:	4252      	negs	r2, r2
 8100d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100d1e:	4770      	bx	lr
 8100d20:	4252      	negs	r2, r2
 8100d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100d26:	f000 f82f 	bl	8100d88 <__udivmoddi4>
 8100d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100d32:	b004      	add	sp, #16
 8100d34:	4240      	negs	r0, r0
 8100d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100d3a:	4770      	bx	lr
 8100d3c:	4252      	negs	r2, r2
 8100d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100d42:	f000 f821 	bl	8100d88 <__udivmoddi4>
 8100d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100d4e:	b004      	add	sp, #16
 8100d50:	4252      	negs	r2, r2
 8100d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100d56:	4770      	bx	lr

08100d58 <__aeabi_uldivmod>:
 8100d58:	b953      	cbnz	r3, 8100d70 <__aeabi_uldivmod+0x18>
 8100d5a:	b94a      	cbnz	r2, 8100d70 <__aeabi_uldivmod+0x18>
 8100d5c:	2900      	cmp	r1, #0
 8100d5e:	bf08      	it	eq
 8100d60:	2800      	cmpeq	r0, #0
 8100d62:	bf1c      	itt	ne
 8100d64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8100d68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8100d6c:	f000 b972 	b.w	8101054 <__aeabi_idiv0>
 8100d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8100d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100d78:	f000 f806 	bl	8100d88 <__udivmoddi4>
 8100d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100d84:	b004      	add	sp, #16
 8100d86:	4770      	bx	lr

08100d88 <__udivmoddi4>:
 8100d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100d8c:	9e08      	ldr	r6, [sp, #32]
 8100d8e:	4604      	mov	r4, r0
 8100d90:	4688      	mov	r8, r1
 8100d92:	2b00      	cmp	r3, #0
 8100d94:	d14b      	bne.n	8100e2e <__udivmoddi4+0xa6>
 8100d96:	428a      	cmp	r2, r1
 8100d98:	4615      	mov	r5, r2
 8100d9a:	d967      	bls.n	8100e6c <__udivmoddi4+0xe4>
 8100d9c:	fab2 f282 	clz	r2, r2
 8100da0:	b14a      	cbz	r2, 8100db6 <__udivmoddi4+0x2e>
 8100da2:	f1c2 0720 	rsb	r7, r2, #32
 8100da6:	fa01 f302 	lsl.w	r3, r1, r2
 8100daa:	fa20 f707 	lsr.w	r7, r0, r7
 8100dae:	4095      	lsls	r5, r2
 8100db0:	ea47 0803 	orr.w	r8, r7, r3
 8100db4:	4094      	lsls	r4, r2
 8100db6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8100dba:	0c23      	lsrs	r3, r4, #16
 8100dbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8100dc0:	fa1f fc85 	uxth.w	ip, r5
 8100dc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8100dc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8100dcc:	fb07 f10c 	mul.w	r1, r7, ip
 8100dd0:	4299      	cmp	r1, r3
 8100dd2:	d909      	bls.n	8100de8 <__udivmoddi4+0x60>
 8100dd4:	18eb      	adds	r3, r5, r3
 8100dd6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8100dda:	f080 811b 	bcs.w	8101014 <__udivmoddi4+0x28c>
 8100dde:	4299      	cmp	r1, r3
 8100de0:	f240 8118 	bls.w	8101014 <__udivmoddi4+0x28c>
 8100de4:	3f02      	subs	r7, #2
 8100de6:	442b      	add	r3, r5
 8100de8:	1a5b      	subs	r3, r3, r1
 8100dea:	b2a4      	uxth	r4, r4
 8100dec:	fbb3 f0fe 	udiv	r0, r3, lr
 8100df0:	fb0e 3310 	mls	r3, lr, r0, r3
 8100df4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100df8:	fb00 fc0c 	mul.w	ip, r0, ip
 8100dfc:	45a4      	cmp	ip, r4
 8100dfe:	d909      	bls.n	8100e14 <__udivmoddi4+0x8c>
 8100e00:	192c      	adds	r4, r5, r4
 8100e02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8100e06:	f080 8107 	bcs.w	8101018 <__udivmoddi4+0x290>
 8100e0a:	45a4      	cmp	ip, r4
 8100e0c:	f240 8104 	bls.w	8101018 <__udivmoddi4+0x290>
 8100e10:	3802      	subs	r0, #2
 8100e12:	442c      	add	r4, r5
 8100e14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8100e18:	eba4 040c 	sub.w	r4, r4, ip
 8100e1c:	2700      	movs	r7, #0
 8100e1e:	b11e      	cbz	r6, 8100e28 <__udivmoddi4+0xa0>
 8100e20:	40d4      	lsrs	r4, r2
 8100e22:	2300      	movs	r3, #0
 8100e24:	e9c6 4300 	strd	r4, r3, [r6]
 8100e28:	4639      	mov	r1, r7
 8100e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100e2e:	428b      	cmp	r3, r1
 8100e30:	d909      	bls.n	8100e46 <__udivmoddi4+0xbe>
 8100e32:	2e00      	cmp	r6, #0
 8100e34:	f000 80eb 	beq.w	810100e <__udivmoddi4+0x286>
 8100e38:	2700      	movs	r7, #0
 8100e3a:	e9c6 0100 	strd	r0, r1, [r6]
 8100e3e:	4638      	mov	r0, r7
 8100e40:	4639      	mov	r1, r7
 8100e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100e46:	fab3 f783 	clz	r7, r3
 8100e4a:	2f00      	cmp	r7, #0
 8100e4c:	d147      	bne.n	8100ede <__udivmoddi4+0x156>
 8100e4e:	428b      	cmp	r3, r1
 8100e50:	d302      	bcc.n	8100e58 <__udivmoddi4+0xd0>
 8100e52:	4282      	cmp	r2, r0
 8100e54:	f200 80fa 	bhi.w	810104c <__udivmoddi4+0x2c4>
 8100e58:	1a84      	subs	r4, r0, r2
 8100e5a:	eb61 0303 	sbc.w	r3, r1, r3
 8100e5e:	2001      	movs	r0, #1
 8100e60:	4698      	mov	r8, r3
 8100e62:	2e00      	cmp	r6, #0
 8100e64:	d0e0      	beq.n	8100e28 <__udivmoddi4+0xa0>
 8100e66:	e9c6 4800 	strd	r4, r8, [r6]
 8100e6a:	e7dd      	b.n	8100e28 <__udivmoddi4+0xa0>
 8100e6c:	b902      	cbnz	r2, 8100e70 <__udivmoddi4+0xe8>
 8100e6e:	deff      	udf	#255	; 0xff
 8100e70:	fab2 f282 	clz	r2, r2
 8100e74:	2a00      	cmp	r2, #0
 8100e76:	f040 808f 	bne.w	8100f98 <__udivmoddi4+0x210>
 8100e7a:	1b49      	subs	r1, r1, r5
 8100e7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8100e80:	fa1f f885 	uxth.w	r8, r5
 8100e84:	2701      	movs	r7, #1
 8100e86:	fbb1 fcfe 	udiv	ip, r1, lr
 8100e8a:	0c23      	lsrs	r3, r4, #16
 8100e8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8100e90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100e94:	fb08 f10c 	mul.w	r1, r8, ip
 8100e98:	4299      	cmp	r1, r3
 8100e9a:	d907      	bls.n	8100eac <__udivmoddi4+0x124>
 8100e9c:	18eb      	adds	r3, r5, r3
 8100e9e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8100ea2:	d202      	bcs.n	8100eaa <__udivmoddi4+0x122>
 8100ea4:	4299      	cmp	r1, r3
 8100ea6:	f200 80cd 	bhi.w	8101044 <__udivmoddi4+0x2bc>
 8100eaa:	4684      	mov	ip, r0
 8100eac:	1a59      	subs	r1, r3, r1
 8100eae:	b2a3      	uxth	r3, r4
 8100eb0:	fbb1 f0fe 	udiv	r0, r1, lr
 8100eb4:	fb0e 1410 	mls	r4, lr, r0, r1
 8100eb8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8100ebc:	fb08 f800 	mul.w	r8, r8, r0
 8100ec0:	45a0      	cmp	r8, r4
 8100ec2:	d907      	bls.n	8100ed4 <__udivmoddi4+0x14c>
 8100ec4:	192c      	adds	r4, r5, r4
 8100ec6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8100eca:	d202      	bcs.n	8100ed2 <__udivmoddi4+0x14a>
 8100ecc:	45a0      	cmp	r8, r4
 8100ece:	f200 80b6 	bhi.w	810103e <__udivmoddi4+0x2b6>
 8100ed2:	4618      	mov	r0, r3
 8100ed4:	eba4 0408 	sub.w	r4, r4, r8
 8100ed8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8100edc:	e79f      	b.n	8100e1e <__udivmoddi4+0x96>
 8100ede:	f1c7 0c20 	rsb	ip, r7, #32
 8100ee2:	40bb      	lsls	r3, r7
 8100ee4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8100ee8:	ea4e 0e03 	orr.w	lr, lr, r3
 8100eec:	fa01 f407 	lsl.w	r4, r1, r7
 8100ef0:	fa20 f50c 	lsr.w	r5, r0, ip
 8100ef4:	fa21 f30c 	lsr.w	r3, r1, ip
 8100ef8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8100efc:	4325      	orrs	r5, r4
 8100efe:	fbb3 f9f8 	udiv	r9, r3, r8
 8100f02:	0c2c      	lsrs	r4, r5, #16
 8100f04:	fb08 3319 	mls	r3, r8, r9, r3
 8100f08:	fa1f fa8e 	uxth.w	sl, lr
 8100f0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8100f10:	fb09 f40a 	mul.w	r4, r9, sl
 8100f14:	429c      	cmp	r4, r3
 8100f16:	fa02 f207 	lsl.w	r2, r2, r7
 8100f1a:	fa00 f107 	lsl.w	r1, r0, r7
 8100f1e:	d90b      	bls.n	8100f38 <__udivmoddi4+0x1b0>
 8100f20:	eb1e 0303 	adds.w	r3, lr, r3
 8100f24:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8100f28:	f080 8087 	bcs.w	810103a <__udivmoddi4+0x2b2>
 8100f2c:	429c      	cmp	r4, r3
 8100f2e:	f240 8084 	bls.w	810103a <__udivmoddi4+0x2b2>
 8100f32:	f1a9 0902 	sub.w	r9, r9, #2
 8100f36:	4473      	add	r3, lr
 8100f38:	1b1b      	subs	r3, r3, r4
 8100f3a:	b2ad      	uxth	r5, r5
 8100f3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8100f40:	fb08 3310 	mls	r3, r8, r0, r3
 8100f44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8100f48:	fb00 fa0a 	mul.w	sl, r0, sl
 8100f4c:	45a2      	cmp	sl, r4
 8100f4e:	d908      	bls.n	8100f62 <__udivmoddi4+0x1da>
 8100f50:	eb1e 0404 	adds.w	r4, lr, r4
 8100f54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8100f58:	d26b      	bcs.n	8101032 <__udivmoddi4+0x2aa>
 8100f5a:	45a2      	cmp	sl, r4
 8100f5c:	d969      	bls.n	8101032 <__udivmoddi4+0x2aa>
 8100f5e:	3802      	subs	r0, #2
 8100f60:	4474      	add	r4, lr
 8100f62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8100f66:	fba0 8902 	umull	r8, r9, r0, r2
 8100f6a:	eba4 040a 	sub.w	r4, r4, sl
 8100f6e:	454c      	cmp	r4, r9
 8100f70:	46c2      	mov	sl, r8
 8100f72:	464b      	mov	r3, r9
 8100f74:	d354      	bcc.n	8101020 <__udivmoddi4+0x298>
 8100f76:	d051      	beq.n	810101c <__udivmoddi4+0x294>
 8100f78:	2e00      	cmp	r6, #0
 8100f7a:	d069      	beq.n	8101050 <__udivmoddi4+0x2c8>
 8100f7c:	ebb1 050a 	subs.w	r5, r1, sl
 8100f80:	eb64 0403 	sbc.w	r4, r4, r3
 8100f84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8100f88:	40fd      	lsrs	r5, r7
 8100f8a:	40fc      	lsrs	r4, r7
 8100f8c:	ea4c 0505 	orr.w	r5, ip, r5
 8100f90:	e9c6 5400 	strd	r5, r4, [r6]
 8100f94:	2700      	movs	r7, #0
 8100f96:	e747      	b.n	8100e28 <__udivmoddi4+0xa0>
 8100f98:	f1c2 0320 	rsb	r3, r2, #32
 8100f9c:	fa20 f703 	lsr.w	r7, r0, r3
 8100fa0:	4095      	lsls	r5, r2
 8100fa2:	fa01 f002 	lsl.w	r0, r1, r2
 8100fa6:	fa21 f303 	lsr.w	r3, r1, r3
 8100faa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8100fae:	4338      	orrs	r0, r7
 8100fb0:	0c01      	lsrs	r1, r0, #16
 8100fb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8100fb6:	fa1f f885 	uxth.w	r8, r5
 8100fba:	fb0e 3317 	mls	r3, lr, r7, r3
 8100fbe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100fc2:	fb07 f308 	mul.w	r3, r7, r8
 8100fc6:	428b      	cmp	r3, r1
 8100fc8:	fa04 f402 	lsl.w	r4, r4, r2
 8100fcc:	d907      	bls.n	8100fde <__udivmoddi4+0x256>
 8100fce:	1869      	adds	r1, r5, r1
 8100fd0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8100fd4:	d22f      	bcs.n	8101036 <__udivmoddi4+0x2ae>
 8100fd6:	428b      	cmp	r3, r1
 8100fd8:	d92d      	bls.n	8101036 <__udivmoddi4+0x2ae>
 8100fda:	3f02      	subs	r7, #2
 8100fdc:	4429      	add	r1, r5
 8100fde:	1acb      	subs	r3, r1, r3
 8100fe0:	b281      	uxth	r1, r0
 8100fe2:	fbb3 f0fe 	udiv	r0, r3, lr
 8100fe6:	fb0e 3310 	mls	r3, lr, r0, r3
 8100fea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100fee:	fb00 f308 	mul.w	r3, r0, r8
 8100ff2:	428b      	cmp	r3, r1
 8100ff4:	d907      	bls.n	8101006 <__udivmoddi4+0x27e>
 8100ff6:	1869      	adds	r1, r5, r1
 8100ff8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8100ffc:	d217      	bcs.n	810102e <__udivmoddi4+0x2a6>
 8100ffe:	428b      	cmp	r3, r1
 8101000:	d915      	bls.n	810102e <__udivmoddi4+0x2a6>
 8101002:	3802      	subs	r0, #2
 8101004:	4429      	add	r1, r5
 8101006:	1ac9      	subs	r1, r1, r3
 8101008:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 810100c:	e73b      	b.n	8100e86 <__udivmoddi4+0xfe>
 810100e:	4637      	mov	r7, r6
 8101010:	4630      	mov	r0, r6
 8101012:	e709      	b.n	8100e28 <__udivmoddi4+0xa0>
 8101014:	4607      	mov	r7, r0
 8101016:	e6e7      	b.n	8100de8 <__udivmoddi4+0x60>
 8101018:	4618      	mov	r0, r3
 810101a:	e6fb      	b.n	8100e14 <__udivmoddi4+0x8c>
 810101c:	4541      	cmp	r1, r8
 810101e:	d2ab      	bcs.n	8100f78 <__udivmoddi4+0x1f0>
 8101020:	ebb8 0a02 	subs.w	sl, r8, r2
 8101024:	eb69 020e 	sbc.w	r2, r9, lr
 8101028:	3801      	subs	r0, #1
 810102a:	4613      	mov	r3, r2
 810102c:	e7a4      	b.n	8100f78 <__udivmoddi4+0x1f0>
 810102e:	4660      	mov	r0, ip
 8101030:	e7e9      	b.n	8101006 <__udivmoddi4+0x27e>
 8101032:	4618      	mov	r0, r3
 8101034:	e795      	b.n	8100f62 <__udivmoddi4+0x1da>
 8101036:	4667      	mov	r7, ip
 8101038:	e7d1      	b.n	8100fde <__udivmoddi4+0x256>
 810103a:	4681      	mov	r9, r0
 810103c:	e77c      	b.n	8100f38 <__udivmoddi4+0x1b0>
 810103e:	3802      	subs	r0, #2
 8101040:	442c      	add	r4, r5
 8101042:	e747      	b.n	8100ed4 <__udivmoddi4+0x14c>
 8101044:	f1ac 0c02 	sub.w	ip, ip, #2
 8101048:	442b      	add	r3, r5
 810104a:	e72f      	b.n	8100eac <__udivmoddi4+0x124>
 810104c:	4638      	mov	r0, r7
 810104e:	e708      	b.n	8100e62 <__udivmoddi4+0xda>
 8101050:	4637      	mov	r7, r6
 8101052:	e6e9      	b.n	8100e28 <__udivmoddi4+0xa0>

08101054 <__aeabi_idiv0>:
 8101054:	4770      	bx	lr
 8101056:	bf00      	nop

08101058 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101058:	b480      	push	{r7}
 810105a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 810105c:	4b0b      	ldr	r3, [pc, #44]	; (810108c <SystemInit+0x34>)
 810105e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8101062:	4a0a      	ldr	r2, [pc, #40]	; (810108c <SystemInit+0x34>)
 8101064:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101068:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810106c:	4b07      	ldr	r3, [pc, #28]	; (810108c <SystemInit+0x34>)
 810106e:	691b      	ldr	r3, [r3, #16]
 8101070:	4a06      	ldr	r2, [pc, #24]	; (810108c <SystemInit+0x34>)
 8101072:	f043 0310 	orr.w	r3, r3, #16
 8101076:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8101078:	4b04      	ldr	r3, [pc, #16]	; (810108c <SystemInit+0x34>)
 810107a:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 810107e:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8101080:	bf00      	nop
 8101082:	46bd      	mov	sp, r7
 8101084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101088:	4770      	bx	lr
 810108a:	bf00      	nop
 810108c:	e000ed00 	.word	0xe000ed00

08101090 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8101090:	b580      	push	{r7, lr}
 8101092:	b082      	sub	sp, #8
 8101094:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8101096:	4b21      	ldr	r3, [pc, #132]	; (810111c <MX_DMA_Init+0x8c>)
 8101098:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810109c:	4a1f      	ldr	r2, [pc, #124]	; (810111c <MX_DMA_Init+0x8c>)
 810109e:	f043 0301 	orr.w	r3, r3, #1
 81010a2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81010a6:	4b1d      	ldr	r3, [pc, #116]	; (810111c <MX_DMA_Init+0x8c>)
 81010a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81010ac:	f003 0301 	and.w	r3, r3, #1
 81010b0:	607b      	str	r3, [r7, #4]
 81010b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 81010b4:	4b19      	ldr	r3, [pc, #100]	; (810111c <MX_DMA_Init+0x8c>)
 81010b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81010ba:	4a18      	ldr	r2, [pc, #96]	; (810111c <MX_DMA_Init+0x8c>)
 81010bc:	f043 0302 	orr.w	r3, r3, #2
 81010c0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81010c4:	4b15      	ldr	r3, [pc, #84]	; (810111c <MX_DMA_Init+0x8c>)
 81010c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81010ca:	f003 0302 	and.w	r3, r3, #2
 81010ce:	603b      	str	r3, [r7, #0]
 81010d0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 81010d2:	2200      	movs	r2, #0
 81010d4:	2105      	movs	r1, #5
 81010d6:	200b      	movs	r0, #11
 81010d8:	f001 f860 	bl	810219c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 81010dc:	200b      	movs	r0, #11
 81010de:	f001 f877 	bl	81021d0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 81010e2:	2200      	movs	r2, #0
 81010e4:	2105      	movs	r1, #5
 81010e6:	200c      	movs	r0, #12
 81010e8:	f001 f858 	bl	810219c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 81010ec:	200c      	movs	r0, #12
 81010ee:	f001 f86f 	bl	81021d0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 81010f2:	2200      	movs	r2, #0
 81010f4:	2105      	movs	r1, #5
 81010f6:	203a      	movs	r0, #58	; 0x3a
 81010f8:	f001 f850 	bl	810219c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 81010fc:	203a      	movs	r0, #58	; 0x3a
 81010fe:	f001 f867 	bl	81021d0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8101102:	2200      	movs	r2, #0
 8101104:	2105      	movs	r1, #5
 8101106:	203b      	movs	r0, #59	; 0x3b
 8101108:	f001 f848 	bl	810219c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 810110c:	203b      	movs	r0, #59	; 0x3b
 810110e:	f001 f85f 	bl	81021d0 <HAL_NVIC_EnableIRQ>

}
 8101112:	bf00      	nop
 8101114:	3708      	adds	r7, #8
 8101116:	46bd      	mov	sp, r7
 8101118:	bd80      	pop	{r7, pc}
 810111a:	bf00      	nop
 810111c:	58024400 	.word	0x58024400

08101120 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8101120:	b580      	push	{r7, lr}
 8101122:	af00      	add	r7, sp, #0

  hfdcan1.Instance = FDCAN1;
 8101124:	4b2e      	ldr	r3, [pc, #184]	; (81011e0 <MX_FDCAN1_Init+0xc0>)
 8101126:	4a2f      	ldr	r2, [pc, #188]	; (81011e4 <MX_FDCAN1_Init+0xc4>)
 8101128:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 810112a:	4b2d      	ldr	r3, [pc, #180]	; (81011e0 <MX_FDCAN1_Init+0xc0>)
 810112c:	2200      	movs	r2, #0
 810112e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8101130:	4b2b      	ldr	r3, [pc, #172]	; (81011e0 <MX_FDCAN1_Init+0xc0>)
 8101132:	2200      	movs	r2, #0
 8101134:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8101136:	4b2a      	ldr	r3, [pc, #168]	; (81011e0 <MX_FDCAN1_Init+0xc0>)
 8101138:	2200      	movs	r2, #0
 810113a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 810113c:	4b28      	ldr	r3, [pc, #160]	; (81011e0 <MX_FDCAN1_Init+0xc0>)
 810113e:	2200      	movs	r2, #0
 8101140:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8101142:	4b27      	ldr	r3, [pc, #156]	; (81011e0 <MX_FDCAN1_Init+0xc0>)
 8101144:	2200      	movs	r2, #0
 8101146:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8101148:	4b25      	ldr	r3, [pc, #148]	; (81011e0 <MX_FDCAN1_Init+0xc0>)
 810114a:	2201      	movs	r2, #1
 810114c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 810114e:	4b24      	ldr	r3, [pc, #144]	; (81011e0 <MX_FDCAN1_Init+0xc0>)
 8101150:	2201      	movs	r2, #1
 8101152:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8101154:	4b22      	ldr	r3, [pc, #136]	; (81011e0 <MX_FDCAN1_Init+0xc0>)
 8101156:	2202      	movs	r2, #2
 8101158:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 810115a:	4b21      	ldr	r3, [pc, #132]	; (81011e0 <MX_FDCAN1_Init+0xc0>)
 810115c:	2202      	movs	r2, #2
 810115e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8101160:	4b1f      	ldr	r3, [pc, #124]	; (81011e0 <MX_FDCAN1_Init+0xc0>)
 8101162:	2201      	movs	r2, #1
 8101164:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8101166:	4b1e      	ldr	r3, [pc, #120]	; (81011e0 <MX_FDCAN1_Init+0xc0>)
 8101168:	2201      	movs	r2, #1
 810116a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 810116c:	4b1c      	ldr	r3, [pc, #112]	; (81011e0 <MX_FDCAN1_Init+0xc0>)
 810116e:	2201      	movs	r2, #1
 8101170:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8101172:	4b1b      	ldr	r3, [pc, #108]	; (81011e0 <MX_FDCAN1_Init+0xc0>)
 8101174:	2201      	movs	r2, #1
 8101176:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8101178:	4b19      	ldr	r3, [pc, #100]	; (81011e0 <MX_FDCAN1_Init+0xc0>)
 810117a:	2200      	movs	r2, #0
 810117c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 810117e:	4b18      	ldr	r3, [pc, #96]	; (81011e0 <MX_FDCAN1_Init+0xc0>)
 8101180:	2200      	movs	r2, #0
 8101182:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8101184:	4b16      	ldr	r3, [pc, #88]	; (81011e0 <MX_FDCAN1_Init+0xc0>)
 8101186:	2200      	movs	r2, #0
 8101188:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 810118a:	4b15      	ldr	r3, [pc, #84]	; (81011e0 <MX_FDCAN1_Init+0xc0>)
 810118c:	2200      	movs	r2, #0
 810118e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8101190:	4b13      	ldr	r3, [pc, #76]	; (81011e0 <MX_FDCAN1_Init+0xc0>)
 8101192:	2204      	movs	r2, #4
 8101194:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8101196:	4b12      	ldr	r3, [pc, #72]	; (81011e0 <MX_FDCAN1_Init+0xc0>)
 8101198:	2200      	movs	r2, #0
 810119a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 810119c:	4b10      	ldr	r3, [pc, #64]	; (81011e0 <MX_FDCAN1_Init+0xc0>)
 810119e:	2204      	movs	r2, #4
 81011a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 81011a2:	4b0f      	ldr	r3, [pc, #60]	; (81011e0 <MX_FDCAN1_Init+0xc0>)
 81011a4:	2200      	movs	r2, #0
 81011a6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 81011a8:	4b0d      	ldr	r3, [pc, #52]	; (81011e0 <MX_FDCAN1_Init+0xc0>)
 81011aa:	2204      	movs	r2, #4
 81011ac:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 81011ae:	4b0c      	ldr	r3, [pc, #48]	; (81011e0 <MX_FDCAN1_Init+0xc0>)
 81011b0:	2200      	movs	r2, #0
 81011b2:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 81011b4:	4b0a      	ldr	r3, [pc, #40]	; (81011e0 <MX_FDCAN1_Init+0xc0>)
 81011b6:	2200      	movs	r2, #0
 81011b8:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 81011ba:	4b09      	ldr	r3, [pc, #36]	; (81011e0 <MX_FDCAN1_Init+0xc0>)
 81011bc:	2200      	movs	r2, #0
 81011be:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 81011c0:	4b07      	ldr	r3, [pc, #28]	; (81011e0 <MX_FDCAN1_Init+0xc0>)
 81011c2:	2200      	movs	r2, #0
 81011c4:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 81011c6:	4b06      	ldr	r3, [pc, #24]	; (81011e0 <MX_FDCAN1_Init+0xc0>)
 81011c8:	2204      	movs	r2, #4
 81011ca:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 81011cc:	4804      	ldr	r0, [pc, #16]	; (81011e0 <MX_FDCAN1_Init+0xc0>)
 81011ce:	f002 ff25 	bl	810401c <HAL_FDCAN_Init>
 81011d2:	4603      	mov	r3, r0
 81011d4:	2b00      	cmp	r3, #0
 81011d6:	d001      	beq.n	81011dc <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 81011d8:	f000 fa2c 	bl	8101634 <Error_Handler>
  }

}
 81011dc:	bf00      	nop
 81011de:	bd80      	pop	{r7, pc}
 81011e0:	10004b48 	.word	0x10004b48
 81011e4:	4000a000 	.word	0x4000a000

081011e8 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 81011e8:	b580      	push	{r7, lr}
 81011ea:	b08a      	sub	sp, #40	; 0x28
 81011ec:	af00      	add	r7, sp, #0
 81011ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81011f0:	f107 0314 	add.w	r3, r7, #20
 81011f4:	2200      	movs	r2, #0
 81011f6:	601a      	str	r2, [r3, #0]
 81011f8:	605a      	str	r2, [r3, #4]
 81011fa:	609a      	str	r2, [r3, #8]
 81011fc:	60da      	str	r2, [r3, #12]
 81011fe:	611a      	str	r2, [r3, #16]
  if(fdcanHandle->Instance==FDCAN1)
 8101200:	687b      	ldr	r3, [r7, #4]
 8101202:	681b      	ldr	r3, [r3, #0]
 8101204:	4a1a      	ldr	r2, [pc, #104]	; (8101270 <HAL_FDCAN_MspInit+0x88>)
 8101206:	4293      	cmp	r3, r2
 8101208:	d12e      	bne.n	8101268 <HAL_FDCAN_MspInit+0x80>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 810120a:	4b1a      	ldr	r3, [pc, #104]	; (8101274 <HAL_FDCAN_MspInit+0x8c>)
 810120c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8101210:	4a18      	ldr	r2, [pc, #96]	; (8101274 <HAL_FDCAN_MspInit+0x8c>)
 8101212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8101216:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 810121a:	4b16      	ldr	r3, [pc, #88]	; (8101274 <HAL_FDCAN_MspInit+0x8c>)
 810121c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8101220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8101224:	613b      	str	r3, [r7, #16]
 8101226:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101228:	4b12      	ldr	r3, [pc, #72]	; (8101274 <HAL_FDCAN_MspInit+0x8c>)
 810122a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810122e:	4a11      	ldr	r2, [pc, #68]	; (8101274 <HAL_FDCAN_MspInit+0x8c>)
 8101230:	f043 0301 	orr.w	r3, r3, #1
 8101234:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101238:	4b0e      	ldr	r3, [pc, #56]	; (8101274 <HAL_FDCAN_MspInit+0x8c>)
 810123a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810123e:	f003 0301 	and.w	r3, r3, #1
 8101242:	60fb      	str	r3, [r7, #12]
 8101244:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8101246:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 810124a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810124c:	2302      	movs	r3, #2
 810124e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101250:	2300      	movs	r3, #0
 8101252:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101254:	2303      	movs	r3, #3
 8101256:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8101258:	2309      	movs	r3, #9
 810125a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810125c:	f107 0314 	add.w	r3, r7, #20
 8101260:	4619      	mov	r1, r3
 8101262:	4805      	ldr	r0, [pc, #20]	; (8101278 <HAL_FDCAN_MspInit+0x90>)
 8101264:	f003 fa4c 	bl	8104700 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8101268:	bf00      	nop
 810126a:	3728      	adds	r7, #40	; 0x28
 810126c:	46bd      	mov	sp, r7
 810126e:	bd80      	pop	{r7, pc}
 8101270:	4000a000 	.word	0x4000a000
 8101274:	58024400 	.word	0x58024400
 8101278:	58020000 	.word	0x58020000

0810127c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 810127c:	b580      	push	{r7, lr}
 810127e:	af00      	add	r7, sp, #0

  /* Create the thread(s) */
  /* creation of watchdog */

  /* USER CODE BEGIN RTOS_THREADS */
	initCortexM4();
 8101280:	f00b f96e 	bl	810c560 <initCortexM4>
  /* USER CODE END RTOS_THREADS */

}
 8101284:	bf00      	nop
 8101286:	bd80      	pop	{r7, pc}

08101288 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8101288:	b480      	push	{r7}
 810128a:	b085      	sub	sp, #20
 810128c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 810128e:	4b21      	ldr	r3, [pc, #132]	; (8101314 <MX_GPIO_Init+0x8c>)
 8101290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101294:	4a1f      	ldr	r2, [pc, #124]	; (8101314 <MX_GPIO_Init+0x8c>)
 8101296:	f043 0320 	orr.w	r3, r3, #32
 810129a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810129e:	4b1d      	ldr	r3, [pc, #116]	; (8101314 <MX_GPIO_Init+0x8c>)
 81012a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012a4:	f003 0320 	and.w	r3, r3, #32
 81012a8:	60fb      	str	r3, [r7, #12]
 81012aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81012ac:	4b19      	ldr	r3, [pc, #100]	; (8101314 <MX_GPIO_Init+0x8c>)
 81012ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012b2:	4a18      	ldr	r2, [pc, #96]	; (8101314 <MX_GPIO_Init+0x8c>)
 81012b4:	f043 0301 	orr.w	r3, r3, #1
 81012b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012bc:	4b15      	ldr	r3, [pc, #84]	; (8101314 <MX_GPIO_Init+0x8c>)
 81012be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012c2:	f003 0301 	and.w	r3, r3, #1
 81012c6:	60bb      	str	r3, [r7, #8]
 81012c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81012ca:	4b12      	ldr	r3, [pc, #72]	; (8101314 <MX_GPIO_Init+0x8c>)
 81012cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012d0:	4a10      	ldr	r2, [pc, #64]	; (8101314 <MX_GPIO_Init+0x8c>)
 81012d2:	f043 0308 	orr.w	r3, r3, #8
 81012d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012da:	4b0e      	ldr	r3, [pc, #56]	; (8101314 <MX_GPIO_Init+0x8c>)
 81012dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012e0:	f003 0308 	and.w	r3, r3, #8
 81012e4:	607b      	str	r3, [r7, #4]
 81012e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81012e8:	4b0a      	ldr	r3, [pc, #40]	; (8101314 <MX_GPIO_Init+0x8c>)
 81012ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012ee:	4a09      	ldr	r2, [pc, #36]	; (8101314 <MX_GPIO_Init+0x8c>)
 81012f0:	f043 0302 	orr.w	r3, r3, #2
 81012f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012f8:	4b06      	ldr	r3, [pc, #24]	; (8101314 <MX_GPIO_Init+0x8c>)
 81012fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012fe:	f003 0302 	and.w	r3, r3, #2
 8101302:	603b      	str	r3, [r7, #0]
 8101304:	683b      	ldr	r3, [r7, #0]

}
 8101306:	bf00      	nop
 8101308:	3714      	adds	r7, #20
 810130a:	46bd      	mov	sp, r7
 810130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101310:	4770      	bx	lr
 8101312:	bf00      	nop
 8101314:	58024400 	.word	0x58024400

08101318 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8101318:	b580      	push	{r7, lr}
 810131a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 810131c:	4b1c      	ldr	r3, [pc, #112]	; (8101390 <MX_I2C1_Init+0x78>)
 810131e:	4a1d      	ldr	r2, [pc, #116]	; (8101394 <MX_I2C1_Init+0x7c>)
 8101320:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401242;
 8101322:	4b1b      	ldr	r3, [pc, #108]	; (8101390 <MX_I2C1_Init+0x78>)
 8101324:	4a1c      	ldr	r2, [pc, #112]	; (8101398 <MX_I2C1_Init+0x80>)
 8101326:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8101328:	4b19      	ldr	r3, [pc, #100]	; (8101390 <MX_I2C1_Init+0x78>)
 810132a:	2200      	movs	r2, #0
 810132c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 810132e:	4b18      	ldr	r3, [pc, #96]	; (8101390 <MX_I2C1_Init+0x78>)
 8101330:	2201      	movs	r2, #1
 8101332:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8101334:	4b16      	ldr	r3, [pc, #88]	; (8101390 <MX_I2C1_Init+0x78>)
 8101336:	2200      	movs	r2, #0
 8101338:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 810133a:	4b15      	ldr	r3, [pc, #84]	; (8101390 <MX_I2C1_Init+0x78>)
 810133c:	2200      	movs	r2, #0
 810133e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8101340:	4b13      	ldr	r3, [pc, #76]	; (8101390 <MX_I2C1_Init+0x78>)
 8101342:	2200      	movs	r2, #0
 8101344:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8101346:	4b12      	ldr	r3, [pc, #72]	; (8101390 <MX_I2C1_Init+0x78>)
 8101348:	2200      	movs	r2, #0
 810134a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 810134c:	4b10      	ldr	r3, [pc, #64]	; (8101390 <MX_I2C1_Init+0x78>)
 810134e:	2200      	movs	r2, #0
 8101350:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8101352:	480f      	ldr	r0, [pc, #60]	; (8101390 <MX_I2C1_Init+0x78>)
 8101354:	f003 fb96 	bl	8104a84 <HAL_I2C_Init>
 8101358:	4603      	mov	r3, r0
 810135a:	2b00      	cmp	r3, #0
 810135c:	d001      	beq.n	8101362 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 810135e:	f000 f969 	bl	8101634 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8101362:	2100      	movs	r1, #0
 8101364:	480a      	ldr	r0, [pc, #40]	; (8101390 <MX_I2C1_Init+0x78>)
 8101366:	f004 fad7 	bl	8105918 <HAL_I2CEx_ConfigAnalogFilter>
 810136a:	4603      	mov	r3, r0
 810136c:	2b00      	cmp	r3, #0
 810136e:	d001      	beq.n	8101374 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8101370:	f000 f960 	bl	8101634 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8101374:	2100      	movs	r1, #0
 8101376:	4806      	ldr	r0, [pc, #24]	; (8101390 <MX_I2C1_Init+0x78>)
 8101378:	f004 fb19 	bl	81059ae <HAL_I2CEx_ConfigDigitalFilter>
 810137c:	4603      	mov	r3, r0
 810137e:	2b00      	cmp	r3, #0
 8101380:	d001      	beq.n	8101386 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8101382:	f000 f957 	bl	8101634 <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8101386:	2001      	movs	r0, #1
 8101388:	f004 fb5e 	bl	8105a48 <HAL_I2CEx_EnableFastModePlus>

}
 810138c:	bf00      	nop
 810138e:	bd80      	pop	{r7, pc}
 8101390:	10004c34 	.word	0x10004c34
 8101394:	40005400 	.word	0x40005400
 8101398:	00401242 	.word	0x00401242

0810139c <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 810139c:	b580      	push	{r7, lr}
 810139e:	af00      	add	r7, sp, #0

  hi2c4.Instance = I2C4;
 81013a0:	4b1b      	ldr	r3, [pc, #108]	; (8101410 <MX_I2C4_Init+0x74>)
 81013a2:	4a1c      	ldr	r2, [pc, #112]	; (8101414 <MX_I2C4_Init+0x78>)
 81013a4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10C0ECFF;
 81013a6:	4b1a      	ldr	r3, [pc, #104]	; (8101410 <MX_I2C4_Init+0x74>)
 81013a8:	4a1b      	ldr	r2, [pc, #108]	; (8101418 <MX_I2C4_Init+0x7c>)
 81013aa:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 81013ac:	4b18      	ldr	r3, [pc, #96]	; (8101410 <MX_I2C4_Init+0x74>)
 81013ae:	2200      	movs	r2, #0
 81013b0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 81013b2:	4b17      	ldr	r3, [pc, #92]	; (8101410 <MX_I2C4_Init+0x74>)
 81013b4:	2201      	movs	r2, #1
 81013b6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 81013b8:	4b15      	ldr	r3, [pc, #84]	; (8101410 <MX_I2C4_Init+0x74>)
 81013ba:	2200      	movs	r2, #0
 81013bc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 81013be:	4b14      	ldr	r3, [pc, #80]	; (8101410 <MX_I2C4_Init+0x74>)
 81013c0:	2200      	movs	r2, #0
 81013c2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 81013c4:	4b12      	ldr	r3, [pc, #72]	; (8101410 <MX_I2C4_Init+0x74>)
 81013c6:	2200      	movs	r2, #0
 81013c8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 81013ca:	4b11      	ldr	r3, [pc, #68]	; (8101410 <MX_I2C4_Init+0x74>)
 81013cc:	2200      	movs	r2, #0
 81013ce:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81013d0:	4b0f      	ldr	r3, [pc, #60]	; (8101410 <MX_I2C4_Init+0x74>)
 81013d2:	2200      	movs	r2, #0
 81013d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 81013d6:	480e      	ldr	r0, [pc, #56]	; (8101410 <MX_I2C4_Init+0x74>)
 81013d8:	f003 fb54 	bl	8104a84 <HAL_I2C_Init>
 81013dc:	4603      	mov	r3, r0
 81013de:	2b00      	cmp	r3, #0
 81013e0:	d001      	beq.n	81013e6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 81013e2:	f000 f927 	bl	8101634 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 81013e6:	2100      	movs	r1, #0
 81013e8:	4809      	ldr	r0, [pc, #36]	; (8101410 <MX_I2C4_Init+0x74>)
 81013ea:	f004 fa95 	bl	8105918 <HAL_I2CEx_ConfigAnalogFilter>
 81013ee:	4603      	mov	r3, r0
 81013f0:	2b00      	cmp	r3, #0
 81013f2:	d001      	beq.n	81013f8 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 81013f4:	f000 f91e 	bl	8101634 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 81013f8:	2100      	movs	r1, #0
 81013fa:	4805      	ldr	r0, [pc, #20]	; (8101410 <MX_I2C4_Init+0x74>)
 81013fc:	f004 fad7 	bl	81059ae <HAL_I2CEx_ConfigDigitalFilter>
 8101400:	4603      	mov	r3, r0
 8101402:	2b00      	cmp	r3, #0
 8101404:	d001      	beq.n	810140a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8101406:	f000 f915 	bl	8101634 <Error_Handler>
  }

}
 810140a:	bf00      	nop
 810140c:	bd80      	pop	{r7, pc}
 810140e:	bf00      	nop
 8101410:	10004be8 	.word	0x10004be8
 8101414:	58001c00 	.word	0x58001c00
 8101418:	10c0ecff 	.word	0x10c0ecff

0810141c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 810141c:	b580      	push	{r7, lr}
 810141e:	b08c      	sub	sp, #48	; 0x30
 8101420:	af00      	add	r7, sp, #0
 8101422:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101424:	f107 031c 	add.w	r3, r7, #28
 8101428:	2200      	movs	r2, #0
 810142a:	601a      	str	r2, [r3, #0]
 810142c:	605a      	str	r2, [r3, #4]
 810142e:	609a      	str	r2, [r3, #8]
 8101430:	60da      	str	r2, [r3, #12]
 8101432:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8101434:	687b      	ldr	r3, [r7, #4]
 8101436:	681b      	ldr	r3, [r3, #0]
 8101438:	4a35      	ldr	r2, [pc, #212]	; (8101510 <HAL_I2C_MspInit+0xf4>)
 810143a:	4293      	cmp	r3, r2
 810143c:	d12f      	bne.n	810149e <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 810143e:	4b35      	ldr	r3, [pc, #212]	; (8101514 <HAL_I2C_MspInit+0xf8>)
 8101440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101444:	4a33      	ldr	r2, [pc, #204]	; (8101514 <HAL_I2C_MspInit+0xf8>)
 8101446:	f043 0302 	orr.w	r3, r3, #2
 810144a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810144e:	4b31      	ldr	r3, [pc, #196]	; (8101514 <HAL_I2C_MspInit+0xf8>)
 8101450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101454:	f003 0302 	and.w	r3, r3, #2
 8101458:	61bb      	str	r3, [r7, #24]
 810145a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 810145c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8101460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101462:	2312      	movs	r3, #18
 8101464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101466:	2300      	movs	r3, #0
 8101468:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810146a:	2300      	movs	r3, #0
 810146c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 810146e:	2304      	movs	r3, #4
 8101470:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101472:	f107 031c 	add.w	r3, r7, #28
 8101476:	4619      	mov	r1, r3
 8101478:	4827      	ldr	r0, [pc, #156]	; (8101518 <HAL_I2C_MspInit+0xfc>)
 810147a:	f003 f941 	bl	8104700 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 810147e:	4b25      	ldr	r3, [pc, #148]	; (8101514 <HAL_I2C_MspInit+0xf8>)
 8101480:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101484:	4a23      	ldr	r2, [pc, #140]	; (8101514 <HAL_I2C_MspInit+0xf8>)
 8101486:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 810148a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810148e:	4b21      	ldr	r3, [pc, #132]	; (8101514 <HAL_I2C_MspInit+0xf8>)
 8101490:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101498:	617b      	str	r3, [r7, #20]
 810149a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 810149c:	e033      	b.n	8101506 <HAL_I2C_MspInit+0xea>
  else if(i2cHandle->Instance==I2C4)
 810149e:	687b      	ldr	r3, [r7, #4]
 81014a0:	681b      	ldr	r3, [r3, #0]
 81014a2:	4a1e      	ldr	r2, [pc, #120]	; (810151c <HAL_I2C_MspInit+0x100>)
 81014a4:	4293      	cmp	r3, r2
 81014a6:	d12e      	bne.n	8101506 <HAL_I2C_MspInit+0xea>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 81014a8:	4b1a      	ldr	r3, [pc, #104]	; (8101514 <HAL_I2C_MspInit+0xf8>)
 81014aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014ae:	4a19      	ldr	r2, [pc, #100]	; (8101514 <HAL_I2C_MspInit+0xf8>)
 81014b0:	f043 0320 	orr.w	r3, r3, #32
 81014b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81014b8:	4b16      	ldr	r3, [pc, #88]	; (8101514 <HAL_I2C_MspInit+0xf8>)
 81014ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014be:	f003 0320 	and.w	r3, r3, #32
 81014c2:	613b      	str	r3, [r7, #16]
 81014c4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 81014c6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 81014ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81014cc:	2312      	movs	r3, #18
 81014ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81014d0:	2300      	movs	r3, #0
 81014d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81014d4:	2300      	movs	r3, #0
 81014d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 81014d8:	2304      	movs	r3, #4
 81014da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 81014dc:	f107 031c 	add.w	r3, r7, #28
 81014e0:	4619      	mov	r1, r3
 81014e2:	480f      	ldr	r0, [pc, #60]	; (8101520 <HAL_I2C_MspInit+0x104>)
 81014e4:	f003 f90c 	bl	8104700 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 81014e8:	4b0a      	ldr	r3, [pc, #40]	; (8101514 <HAL_I2C_MspInit+0xf8>)
 81014ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81014ee:	4a09      	ldr	r2, [pc, #36]	; (8101514 <HAL_I2C_MspInit+0xf8>)
 81014f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 81014f4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81014f8:	4b06      	ldr	r3, [pc, #24]	; (8101514 <HAL_I2C_MspInit+0xf8>)
 81014fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81014fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101502:	60fb      	str	r3, [r7, #12]
 8101504:	68fb      	ldr	r3, [r7, #12]
}
 8101506:	bf00      	nop
 8101508:	3730      	adds	r7, #48	; 0x30
 810150a:	46bd      	mov	sp, r7
 810150c:	bd80      	pop	{r7, pc}
 810150e:	bf00      	nop
 8101510:	40005400 	.word	0x40005400
 8101514:	58024400 	.word	0x58024400
 8101518:	58020400 	.word	0x58020400
 810151c:	58001c00 	.word	0x58001c00
 8101520:	58021400 	.word	0x58021400

08101524 <MX_IWDG2_Init>:

IWDG_HandleTypeDef hiwdg2;

/* IWDG2 init function */
void MX_IWDG2_Init(void)
{
 8101524:	b580      	push	{r7, lr}
 8101526:	af00      	add	r7, sp, #0

  hiwdg2.Instance = IWDG2;
 8101528:	4b0b      	ldr	r3, [pc, #44]	; (8101558 <MX_IWDG2_Init+0x34>)
 810152a:	4a0c      	ldr	r2, [pc, #48]	; (810155c <MX_IWDG2_Init+0x38>)
 810152c:	601a      	str	r2, [r3, #0]
  hiwdg2.Init.Prescaler = IWDG_PRESCALER_4;
 810152e:	4b0a      	ldr	r3, [pc, #40]	; (8101558 <MX_IWDG2_Init+0x34>)
 8101530:	2200      	movs	r2, #0
 8101532:	605a      	str	r2, [r3, #4]
  hiwdg2.Init.Window = 4095;
 8101534:	4b08      	ldr	r3, [pc, #32]	; (8101558 <MX_IWDG2_Init+0x34>)
 8101536:	f640 72ff 	movw	r2, #4095	; 0xfff
 810153a:	60da      	str	r2, [r3, #12]
  hiwdg2.Init.Reload = 4095;
 810153c:	4b06      	ldr	r3, [pc, #24]	; (8101558 <MX_IWDG2_Init+0x34>)
 810153e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8101542:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg2) != HAL_OK)
 8101544:	4804      	ldr	r0, [pc, #16]	; (8101558 <MX_IWDG2_Init+0x34>)
 8101546:	f004 faa3 	bl	8105a90 <HAL_IWDG_Init>
 810154a:	4603      	mov	r3, r0
 810154c:	2b00      	cmp	r3, #0
 810154e:	d001      	beq.n	8101554 <MX_IWDG2_Init+0x30>
  {
    Error_Handler();
 8101550:	f000 f870 	bl	8101634 <Error_Handler>
  }

}
 8101554:	bf00      	nop
 8101556:	bd80      	pop	{r7, pc}
 8101558:	10004c80 	.word	0x10004c80
 810155c:	58004c00 	.word	0x58004c00

08101560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101560:	b580      	push	{r7, lr}
 8101562:	b082      	sub	sp, #8
 8101564:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101566:	4b27      	ldr	r3, [pc, #156]	; (8101604 <main+0xa4>)
 8101568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810156c:	4a25      	ldr	r2, [pc, #148]	; (8101604 <main+0xa4>)
 810156e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101572:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101576:	4b23      	ldr	r3, [pc, #140]	; (8101604 <main+0xa4>)
 8101578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810157c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101580:	607b      	str	r3, [r7, #4]
 8101582:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101584:	2001      	movs	r0, #1
 8101586:	f003 fa6b 	bl	8104a60 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810158a:	f004 fb4d 	bl	8105c28 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810158e:	2201      	movs	r2, #1
 8101590:	2102      	movs	r1, #2
 8101592:	2000      	movs	r0, #0
 8101594:	f004 fad2 	bl	8105b3c <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101598:	4b1b      	ldr	r3, [pc, #108]	; (8101608 <main+0xa8>)
 810159a:	681b      	ldr	r3, [r3, #0]
 810159c:	091b      	lsrs	r3, r3, #4
 810159e:	f003 030f 	and.w	r3, r3, #15
 81015a2:	2b07      	cmp	r3, #7
 81015a4:	d108      	bne.n	81015b8 <main+0x58>
 81015a6:	4b19      	ldr	r3, [pc, #100]	; (810160c <main+0xac>)
 81015a8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 81015ac:	4a17      	ldr	r2, [pc, #92]	; (810160c <main+0xac>)
 81015ae:	f043 0301 	orr.w	r3, r3, #1
 81015b2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81015b6:	e007      	b.n	81015c8 <main+0x68>
 81015b8:	4b14      	ldr	r3, [pc, #80]	; (810160c <main+0xac>)
 81015ba:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 81015be:	4a13      	ldr	r2, [pc, #76]	; (810160c <main+0xac>)
 81015c0:	f043 0301 	orr.w	r3, r3, #1
 81015c4:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81015c8:	f000 fcb2 	bl	8101f30 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81015cc:	f7ff fe5c 	bl	8101288 <MX_GPIO_Init>
  MX_DMA_Init();
 81015d0:	f7ff fd5e 	bl	8101090 <MX_DMA_Init>
  MX_FDCAN1_Init();
 81015d4:	f7ff fda4 	bl	8101120 <MX_FDCAN1_Init>
  MX_IWDG2_Init();
 81015d8:	f7ff ffa4 	bl	8101524 <MX_IWDG2_Init>
  MX_SPI5_Init();
 81015dc:	f000 f884 	bl	81016e8 <MX_SPI5_Init>
  MX_FATFS_Init();
 81015e0:	f006 ff7c 	bl	81084dc <MX_FATFS_Init>
  MX_I2C1_Init();
 81015e4:	f7ff fe98 	bl	8101318 <MX_I2C1_Init>
  MX_I2C4_Init();
 81015e8:	f7ff fed8 	bl	810139c <MX_I2C4_Init>
  MX_SPI1_Init();
 81015ec:	f000 f826 	bl	810163c <MX_SPI1_Init>
  MX_USART3_UART_Init();
 81015f0:	f000 fb78 	bl	8101ce4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 81015f4:	f007 f83e 	bl	8108674 <osKernelInitialize>
  MX_FREERTOS_Init();
 81015f8:	f7ff fe40 	bl	810127c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 81015fc:	f007 f86e 	bl	81086dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8101600:	e7fe      	b.n	8101600 <main+0xa0>
 8101602:	bf00      	nop
 8101604:	58024400 	.word	0x58024400
 8101608:	e000ed00 	.word	0xe000ed00
 810160c:	58026400 	.word	0x58026400

08101610 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8101610:	b580      	push	{r7, lr}
 8101612:	b082      	sub	sp, #8
 8101614:	af00      	add	r7, sp, #0
 8101616:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM8) {
 8101618:	687b      	ldr	r3, [r7, #4]
 810161a:	681b      	ldr	r3, [r3, #0]
 810161c:	4a04      	ldr	r2, [pc, #16]	; (8101630 <HAL_TIM_PeriodElapsedCallback+0x20>)
 810161e:	4293      	cmp	r3, r2
 8101620:	d101      	bne.n	8101626 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8101622:	f000 fce3 	bl	8101fec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8101626:	bf00      	nop
 8101628:	3708      	adds	r7, #8
 810162a:	46bd      	mov	sp, r7
 810162c:	bd80      	pop	{r7, pc}
 810162e:	bf00      	nop
 8101630:	40010400 	.word	0x40010400

08101634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101634:	b480      	push	{r7}
 8101636:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101638:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 810163a:	e7fe      	b.n	810163a <Error_Handler+0x6>

0810163c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 810163c:	b580      	push	{r7, lr}
 810163e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8101640:	4b27      	ldr	r3, [pc, #156]	; (81016e0 <MX_SPI1_Init+0xa4>)
 8101642:	4a28      	ldr	r2, [pc, #160]	; (81016e4 <MX_SPI1_Init+0xa8>)
 8101644:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8101646:	4b26      	ldr	r3, [pc, #152]	; (81016e0 <MX_SPI1_Init+0xa4>)
 8101648:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 810164c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 810164e:	4b24      	ldr	r3, [pc, #144]	; (81016e0 <MX_SPI1_Init+0xa4>)
 8101650:	2200      	movs	r2, #0
 8101652:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8101654:	4b22      	ldr	r3, [pc, #136]	; (81016e0 <MX_SPI1_Init+0xa4>)
 8101656:	2203      	movs	r2, #3
 8101658:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 810165a:	4b21      	ldr	r3, [pc, #132]	; (81016e0 <MX_SPI1_Init+0xa4>)
 810165c:	2200      	movs	r2, #0
 810165e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8101660:	4b1f      	ldr	r3, [pc, #124]	; (81016e0 <MX_SPI1_Init+0xa4>)
 8101662:	2200      	movs	r2, #0
 8101664:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8101666:	4b1e      	ldr	r3, [pc, #120]	; (81016e0 <MX_SPI1_Init+0xa4>)
 8101668:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 810166c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 810166e:	4b1c      	ldr	r3, [pc, #112]	; (81016e0 <MX_SPI1_Init+0xa4>)
 8101670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8101674:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8101676:	4b1a      	ldr	r3, [pc, #104]	; (81016e0 <MX_SPI1_Init+0xa4>)
 8101678:	2200      	movs	r2, #0
 810167a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 810167c:	4b18      	ldr	r3, [pc, #96]	; (81016e0 <MX_SPI1_Init+0xa4>)
 810167e:	2200      	movs	r2, #0
 8101680:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8101682:	4b17      	ldr	r3, [pc, #92]	; (81016e0 <MX_SPI1_Init+0xa4>)
 8101684:	2200      	movs	r2, #0
 8101686:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8101688:	4b15      	ldr	r3, [pc, #84]	; (81016e0 <MX_SPI1_Init+0xa4>)
 810168a:	2200      	movs	r2, #0
 810168c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 810168e:	4b14      	ldr	r3, [pc, #80]	; (81016e0 <MX_SPI1_Init+0xa4>)
 8101690:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8101694:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8101696:	4b12      	ldr	r3, [pc, #72]	; (81016e0 <MX_SPI1_Init+0xa4>)
 8101698:	2200      	movs	r2, #0
 810169a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 810169c:	4b10      	ldr	r3, [pc, #64]	; (81016e0 <MX_SPI1_Init+0xa4>)
 810169e:	2200      	movs	r2, #0
 81016a0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 81016a2:	4b0f      	ldr	r3, [pc, #60]	; (81016e0 <MX_SPI1_Init+0xa4>)
 81016a4:	2200      	movs	r2, #0
 81016a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 81016a8:	4b0d      	ldr	r3, [pc, #52]	; (81016e0 <MX_SPI1_Init+0xa4>)
 81016aa:	2200      	movs	r2, #0
 81016ac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 81016ae:	4b0c      	ldr	r3, [pc, #48]	; (81016e0 <MX_SPI1_Init+0xa4>)
 81016b0:	2200      	movs	r2, #0
 81016b2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 81016b4:	4b0a      	ldr	r3, [pc, #40]	; (81016e0 <MX_SPI1_Init+0xa4>)
 81016b6:	2200      	movs	r2, #0
 81016b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 81016ba:	4b09      	ldr	r3, [pc, #36]	; (81016e0 <MX_SPI1_Init+0xa4>)
 81016bc:	2200      	movs	r2, #0
 81016be:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 81016c0:	4b07      	ldr	r3, [pc, #28]	; (81016e0 <MX_SPI1_Init+0xa4>)
 81016c2:	2200      	movs	r2, #0
 81016c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 81016c6:	4b06      	ldr	r3, [pc, #24]	; (81016e0 <MX_SPI1_Init+0xa4>)
 81016c8:	2200      	movs	r2, #0
 81016ca:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 81016cc:	4804      	ldr	r0, [pc, #16]	; (81016e0 <MX_SPI1_Init+0xa4>)
 81016ce:	f004 ff79 	bl	81065c4 <HAL_SPI_Init>
 81016d2:	4603      	mov	r3, r0
 81016d4:	2b00      	cmp	r3, #0
 81016d6:	d001      	beq.n	81016dc <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 81016d8:	f7ff ffac 	bl	8101634 <Error_Handler>
  }

}
 81016dc:	bf00      	nop
 81016de:	bd80      	pop	{r7, pc}
 81016e0:	10004d18 	.word	0x10004d18
 81016e4:	40013000 	.word	0x40013000

081016e8 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 81016e8:	b580      	push	{r7, lr}
 81016ea:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 81016ec:	4b27      	ldr	r3, [pc, #156]	; (810178c <MX_SPI5_Init+0xa4>)
 81016ee:	4a28      	ldr	r2, [pc, #160]	; (8101790 <MX_SPI5_Init+0xa8>)
 81016f0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 81016f2:	4b26      	ldr	r3, [pc, #152]	; (810178c <MX_SPI5_Init+0xa4>)
 81016f4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 81016f8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 81016fa:	4b24      	ldr	r3, [pc, #144]	; (810178c <MX_SPI5_Init+0xa4>)
 81016fc:	2200      	movs	r2, #0
 81016fe:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8101700:	4b22      	ldr	r3, [pc, #136]	; (810178c <MX_SPI5_Init+0xa4>)
 8101702:	2203      	movs	r2, #3
 8101704:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8101706:	4b21      	ldr	r3, [pc, #132]	; (810178c <MX_SPI5_Init+0xa4>)
 8101708:	2200      	movs	r2, #0
 810170a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 810170c:	4b1f      	ldr	r3, [pc, #124]	; (810178c <MX_SPI5_Init+0xa4>)
 810170e:	2200      	movs	r2, #0
 8101710:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8101712:	4b1e      	ldr	r3, [pc, #120]	; (810178c <MX_SPI5_Init+0xa4>)
 8101714:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8101718:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 810171a:	4b1c      	ldr	r3, [pc, #112]	; (810178c <MX_SPI5_Init+0xa4>)
 810171c:	2200      	movs	r2, #0
 810171e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8101720:	4b1a      	ldr	r3, [pc, #104]	; (810178c <MX_SPI5_Init+0xa4>)
 8101722:	2200      	movs	r2, #0
 8101724:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8101726:	4b19      	ldr	r3, [pc, #100]	; (810178c <MX_SPI5_Init+0xa4>)
 8101728:	2200      	movs	r2, #0
 810172a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810172c:	4b17      	ldr	r3, [pc, #92]	; (810178c <MX_SPI5_Init+0xa4>)
 810172e:	2200      	movs	r2, #0
 8101730:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8101732:	4b16      	ldr	r3, [pc, #88]	; (810178c <MX_SPI5_Init+0xa4>)
 8101734:	2200      	movs	r2, #0
 8101736:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8101738:	4b14      	ldr	r3, [pc, #80]	; (810178c <MX_SPI5_Init+0xa4>)
 810173a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 810173e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8101740:	4b12      	ldr	r3, [pc, #72]	; (810178c <MX_SPI5_Init+0xa4>)
 8101742:	2200      	movs	r2, #0
 8101744:	639a      	str	r2, [r3, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8101746:	4b11      	ldr	r3, [pc, #68]	; (810178c <MX_SPI5_Init+0xa4>)
 8101748:	2200      	movs	r2, #0
 810174a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 810174c:	4b0f      	ldr	r3, [pc, #60]	; (810178c <MX_SPI5_Init+0xa4>)
 810174e:	2200      	movs	r2, #0
 8101750:	641a      	str	r2, [r3, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101752:	4b0e      	ldr	r3, [pc, #56]	; (810178c <MX_SPI5_Init+0xa4>)
 8101754:	2200      	movs	r2, #0
 8101756:	645a      	str	r2, [r3, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8101758:	4b0c      	ldr	r3, [pc, #48]	; (810178c <MX_SPI5_Init+0xa4>)
 810175a:	2200      	movs	r2, #0
 810175c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 810175e:	4b0b      	ldr	r3, [pc, #44]	; (810178c <MX_SPI5_Init+0xa4>)
 8101760:	2200      	movs	r2, #0
 8101762:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8101764:	4b09      	ldr	r3, [pc, #36]	; (810178c <MX_SPI5_Init+0xa4>)
 8101766:	2200      	movs	r2, #0
 8101768:	651a      	str	r2, [r3, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 810176a:	4b08      	ldr	r3, [pc, #32]	; (810178c <MX_SPI5_Init+0xa4>)
 810176c:	2200      	movs	r2, #0
 810176e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8101770:	4b06      	ldr	r3, [pc, #24]	; (810178c <MX_SPI5_Init+0xa4>)
 8101772:	2200      	movs	r2, #0
 8101774:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8101776:	4805      	ldr	r0, [pc, #20]	; (810178c <MX_SPI5_Init+0xa4>)
 8101778:	f004 ff24 	bl	81065c4 <HAL_SPI_Init>
 810177c:	4603      	mov	r3, r0
 810177e:	2b00      	cmp	r3, #0
 8101780:	d001      	beq.n	8101786 <MX_SPI5_Init+0x9e>
  {
    Error_Handler();
 8101782:	f7ff ff57 	bl	8101634 <Error_Handler>
  }

}
 8101786:	bf00      	nop
 8101788:	bd80      	pop	{r7, pc}
 810178a:	bf00      	nop
 810178c:	10004c90 	.word	0x10004c90
 8101790:	40015000 	.word	0x40015000

08101794 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8101794:	b580      	push	{r7, lr}
 8101796:	b08c      	sub	sp, #48	; 0x30
 8101798:	af00      	add	r7, sp, #0
 810179a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810179c:	f107 031c 	add.w	r3, r7, #28
 81017a0:	2200      	movs	r2, #0
 81017a2:	601a      	str	r2, [r3, #0]
 81017a4:	605a      	str	r2, [r3, #4]
 81017a6:	609a      	str	r2, [r3, #8]
 81017a8:	60da      	str	r2, [r3, #12]
 81017aa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 81017ac:	687b      	ldr	r3, [r7, #4]
 81017ae:	681b      	ldr	r3, [r3, #0]
 81017b0:	4a76      	ldr	r2, [pc, #472]	; (810198c <HAL_SPI_MspInit+0x1f8>)
 81017b2:	4293      	cmp	r3, r2
 81017b4:	f040 80b2 	bne.w	810191c <HAL_SPI_MspInit+0x188>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 81017b8:	4b75      	ldr	r3, [pc, #468]	; (8101990 <HAL_SPI_MspInit+0x1fc>)
 81017ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81017be:	4a74      	ldr	r2, [pc, #464]	; (8101990 <HAL_SPI_MspInit+0x1fc>)
 81017c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 81017c4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 81017c8:	4b71      	ldr	r3, [pc, #452]	; (8101990 <HAL_SPI_MspInit+0x1fc>)
 81017ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81017ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81017d2:	61bb      	str	r3, [r7, #24]
 81017d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 81017d6:	4b6e      	ldr	r3, [pc, #440]	; (8101990 <HAL_SPI_MspInit+0x1fc>)
 81017d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81017dc:	4a6c      	ldr	r2, [pc, #432]	; (8101990 <HAL_SPI_MspInit+0x1fc>)
 81017de:	f043 0301 	orr.w	r3, r3, #1
 81017e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81017e6:	4b6a      	ldr	r3, [pc, #424]	; (8101990 <HAL_SPI_MspInit+0x1fc>)
 81017e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81017ec:	f003 0301 	and.w	r3, r3, #1
 81017f0:	617b      	str	r3, [r7, #20]
 81017f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 81017f4:	4b66      	ldr	r3, [pc, #408]	; (8101990 <HAL_SPI_MspInit+0x1fc>)
 81017f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81017fa:	4a65      	ldr	r2, [pc, #404]	; (8101990 <HAL_SPI_MspInit+0x1fc>)
 81017fc:	f043 0308 	orr.w	r3, r3, #8
 8101800:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101804:	4b62      	ldr	r3, [pc, #392]	; (8101990 <HAL_SPI_MspInit+0x1fc>)
 8101806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810180a:	f003 0308 	and.w	r3, r3, #8
 810180e:	613b      	str	r3, [r7, #16]
 8101810:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8101812:	2360      	movs	r3, #96	; 0x60
 8101814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101816:	2302      	movs	r3, #2
 8101818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810181a:	2300      	movs	r3, #0
 810181c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810181e:	2300      	movs	r3, #0
 8101820:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8101822:	2305      	movs	r3, #5
 8101824:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101826:	f107 031c 	add.w	r3, r7, #28
 810182a:	4619      	mov	r1, r3
 810182c:	4859      	ldr	r0, [pc, #356]	; (8101994 <HAL_SPI_MspInit+0x200>)
 810182e:	f002 ff67 	bl	8104700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8101832:	2380      	movs	r3, #128	; 0x80
 8101834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101836:	2302      	movs	r3, #2
 8101838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810183a:	2300      	movs	r3, #0
 810183c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810183e:	2300      	movs	r3, #0
 8101840:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8101842:	2305      	movs	r3, #5
 8101844:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101846:	f107 031c 	add.w	r3, r7, #28
 810184a:	4619      	mov	r1, r3
 810184c:	4852      	ldr	r0, [pc, #328]	; (8101998 <HAL_SPI_MspInit+0x204>)
 810184e:	f002 ff57 	bl	8104700 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8101852:	4b52      	ldr	r3, [pc, #328]	; (810199c <HAL_SPI_MspInit+0x208>)
 8101854:	4a52      	ldr	r2, [pc, #328]	; (81019a0 <HAL_SPI_MspInit+0x20c>)
 8101856:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8101858:	4b50      	ldr	r3, [pc, #320]	; (810199c <HAL_SPI_MspInit+0x208>)
 810185a:	2225      	movs	r2, #37	; 0x25
 810185c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 810185e:	4b4f      	ldr	r3, [pc, #316]	; (810199c <HAL_SPI_MspInit+0x208>)
 8101860:	2200      	movs	r2, #0
 8101862:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101864:	4b4d      	ldr	r3, [pc, #308]	; (810199c <HAL_SPI_MspInit+0x208>)
 8101866:	2200      	movs	r2, #0
 8101868:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 810186a:	4b4c      	ldr	r3, [pc, #304]	; (810199c <HAL_SPI_MspInit+0x208>)
 810186c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101870:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101872:	4b4a      	ldr	r3, [pc, #296]	; (810199c <HAL_SPI_MspInit+0x208>)
 8101874:	2200      	movs	r2, #0
 8101876:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101878:	4b48      	ldr	r3, [pc, #288]	; (810199c <HAL_SPI_MspInit+0x208>)
 810187a:	2200      	movs	r2, #0
 810187c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 810187e:	4b47      	ldr	r3, [pc, #284]	; (810199c <HAL_SPI_MspInit+0x208>)
 8101880:	2200      	movs	r2, #0
 8101882:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8101884:	4b45      	ldr	r3, [pc, #276]	; (810199c <HAL_SPI_MspInit+0x208>)
 8101886:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 810188a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 810188c:	4b43      	ldr	r3, [pc, #268]	; (810199c <HAL_SPI_MspInit+0x208>)
 810188e:	2200      	movs	r2, #0
 8101890:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8101892:	4842      	ldr	r0, [pc, #264]	; (810199c <HAL_SPI_MspInit+0x208>)
 8101894:	f000 fcbe 	bl	8102214 <HAL_DMA_Init>
 8101898:	4603      	mov	r3, r0
 810189a:	2b00      	cmp	r3, #0
 810189c:	d001      	beq.n	81018a2 <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 810189e:	f7ff fec9 	bl	8101634 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 81018a2:	687b      	ldr	r3, [r7, #4]
 81018a4:	4a3d      	ldr	r2, [pc, #244]	; (810199c <HAL_SPI_MspInit+0x208>)
 81018a6:	67da      	str	r2, [r3, #124]	; 0x7c
 81018a8:	4a3c      	ldr	r2, [pc, #240]	; (810199c <HAL_SPI_MspInit+0x208>)
 81018aa:	687b      	ldr	r3, [r7, #4]
 81018ac:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 81018ae:	4b3d      	ldr	r3, [pc, #244]	; (81019a4 <HAL_SPI_MspInit+0x210>)
 81018b0:	4a3d      	ldr	r2, [pc, #244]	; (81019a8 <HAL_SPI_MspInit+0x214>)
 81018b2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 81018b4:	4b3b      	ldr	r3, [pc, #236]	; (81019a4 <HAL_SPI_MspInit+0x210>)
 81018b6:	2226      	movs	r2, #38	; 0x26
 81018b8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 81018ba:	4b3a      	ldr	r3, [pc, #232]	; (81019a4 <HAL_SPI_MspInit+0x210>)
 81018bc:	2240      	movs	r2, #64	; 0x40
 81018be:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 81018c0:	4b38      	ldr	r3, [pc, #224]	; (81019a4 <HAL_SPI_MspInit+0x210>)
 81018c2:	2200      	movs	r2, #0
 81018c4:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 81018c6:	4b37      	ldr	r3, [pc, #220]	; (81019a4 <HAL_SPI_MspInit+0x210>)
 81018c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81018cc:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 81018ce:	4b35      	ldr	r3, [pc, #212]	; (81019a4 <HAL_SPI_MspInit+0x210>)
 81018d0:	2200      	movs	r2, #0
 81018d2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 81018d4:	4b33      	ldr	r3, [pc, #204]	; (81019a4 <HAL_SPI_MspInit+0x210>)
 81018d6:	2200      	movs	r2, #0
 81018d8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 81018da:	4b32      	ldr	r3, [pc, #200]	; (81019a4 <HAL_SPI_MspInit+0x210>)
 81018dc:	2200      	movs	r2, #0
 81018de:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 81018e0:	4b30      	ldr	r3, [pc, #192]	; (81019a4 <HAL_SPI_MspInit+0x210>)
 81018e2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 81018e6:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81018e8:	4b2e      	ldr	r3, [pc, #184]	; (81019a4 <HAL_SPI_MspInit+0x210>)
 81018ea:	2200      	movs	r2, #0
 81018ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 81018ee:	482d      	ldr	r0, [pc, #180]	; (81019a4 <HAL_SPI_MspInit+0x210>)
 81018f0:	f000 fc90 	bl	8102214 <HAL_DMA_Init>
 81018f4:	4603      	mov	r3, r0
 81018f6:	2b00      	cmp	r3, #0
 81018f8:	d001      	beq.n	81018fe <HAL_SPI_MspInit+0x16a>
    {
      Error_Handler();
 81018fa:	f7ff fe9b 	bl	8101634 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 81018fe:	687b      	ldr	r3, [r7, #4]
 8101900:	4a28      	ldr	r2, [pc, #160]	; (81019a4 <HAL_SPI_MspInit+0x210>)
 8101902:	679a      	str	r2, [r3, #120]	; 0x78
 8101904:	4a27      	ldr	r2, [pc, #156]	; (81019a4 <HAL_SPI_MspInit+0x210>)
 8101906:	687b      	ldr	r3, [r7, #4]
 8101908:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 810190a:	2200      	movs	r2, #0
 810190c:	2105      	movs	r1, #5
 810190e:	2023      	movs	r0, #35	; 0x23
 8101910:	f000 fc44 	bl	810219c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8101914:	2023      	movs	r0, #35	; 0x23
 8101916:	f000 fc5b 	bl	81021d0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 810191a:	e033      	b.n	8101984 <HAL_SPI_MspInit+0x1f0>
  else if(spiHandle->Instance==SPI5)
 810191c:	687b      	ldr	r3, [r7, #4]
 810191e:	681b      	ldr	r3, [r3, #0]
 8101920:	4a22      	ldr	r2, [pc, #136]	; (81019ac <HAL_SPI_MspInit+0x218>)
 8101922:	4293      	cmp	r3, r2
 8101924:	d12e      	bne.n	8101984 <HAL_SPI_MspInit+0x1f0>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8101926:	4b1a      	ldr	r3, [pc, #104]	; (8101990 <HAL_SPI_MspInit+0x1fc>)
 8101928:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810192c:	4a18      	ldr	r2, [pc, #96]	; (8101990 <HAL_SPI_MspInit+0x1fc>)
 810192e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8101932:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101936:	4b16      	ldr	r3, [pc, #88]	; (8101990 <HAL_SPI_MspInit+0x1fc>)
 8101938:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810193c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8101940:	60fb      	str	r3, [r7, #12]
 8101942:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8101944:	4b12      	ldr	r3, [pc, #72]	; (8101990 <HAL_SPI_MspInit+0x1fc>)
 8101946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810194a:	4a11      	ldr	r2, [pc, #68]	; (8101990 <HAL_SPI_MspInit+0x1fc>)
 810194c:	f043 0320 	orr.w	r3, r3, #32
 8101950:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101954:	4b0e      	ldr	r3, [pc, #56]	; (8101990 <HAL_SPI_MspInit+0x1fc>)
 8101956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810195a:	f003 0320 	and.w	r3, r3, #32
 810195e:	60bb      	str	r3, [r7, #8]
 8101960:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11;
 8101962:	f44f 6318 	mov.w	r3, #2432	; 0x980
 8101966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101968:	2302      	movs	r3, #2
 810196a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810196c:	2300      	movs	r3, #0
 810196e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101970:	2300      	movs	r3, #0
 8101972:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8101974:	2305      	movs	r3, #5
 8101976:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8101978:	f107 031c 	add.w	r3, r7, #28
 810197c:	4619      	mov	r1, r3
 810197e:	480c      	ldr	r0, [pc, #48]	; (81019b0 <HAL_SPI_MspInit+0x21c>)
 8101980:	f002 febe 	bl	8104700 <HAL_GPIO_Init>
}
 8101984:	bf00      	nop
 8101986:	3730      	adds	r7, #48	; 0x30
 8101988:	46bd      	mov	sp, r7
 810198a:	bd80      	pop	{r7, pc}
 810198c:	40013000 	.word	0x40013000
 8101990:	58024400 	.word	0x58024400
 8101994:	58020000 	.word	0x58020000
 8101998:	58020c00 	.word	0x58020c00
 810199c:	10004da0 	.word	0x10004da0
 81019a0:	40020010 	.word	0x40020010
 81019a4:	10004e18 	.word	0x10004e18
 81019a8:	40020028 	.word	0x40020028
 81019ac:	40015000 	.word	0x40015000
 81019b0:	58021400 	.word	0x58021400

081019b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81019b4:	b580      	push	{r7, lr}
 81019b6:	b082      	sub	sp, #8
 81019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81019ba:	4b0c      	ldr	r3, [pc, #48]	; (81019ec <HAL_MspInit+0x38>)
 81019bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81019c0:	4a0a      	ldr	r2, [pc, #40]	; (81019ec <HAL_MspInit+0x38>)
 81019c2:	f043 0302 	orr.w	r3, r3, #2
 81019c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81019ca:	4b08      	ldr	r3, [pc, #32]	; (81019ec <HAL_MspInit+0x38>)
 81019cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81019d0:	f003 0302 	and.w	r3, r3, #2
 81019d4:	607b      	str	r3, [r7, #4]
 81019d6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 81019d8:	2200      	movs	r2, #0
 81019da:	210f      	movs	r1, #15
 81019dc:	f06f 0001 	mvn.w	r0, #1
 81019e0:	f000 fbdc 	bl	810219c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81019e4:	bf00      	nop
 81019e6:	3708      	adds	r7, #8
 81019e8:	46bd      	mov	sp, r7
 81019ea:	bd80      	pop	{r7, pc}
 81019ec:	58024400 	.word	0x58024400

081019f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81019f0:	b580      	push	{r7, lr}
 81019f2:	b08e      	sub	sp, #56	; 0x38
 81019f4:	af00      	add	r7, sp, #0
 81019f6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM8 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81019f8:	687b      	ldr	r3, [r7, #4]
 81019fa:	2b0f      	cmp	r3, #15
 81019fc:	d844      	bhi.n	8101a88 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0U);
 81019fe:	2200      	movs	r2, #0
 8101a00:	6879      	ldr	r1, [r7, #4]
 8101a02:	202c      	movs	r0, #44	; 0x2c
 8101a04:	f000 fbca 	bl	810219c <HAL_NVIC_SetPriority>

  /* Enable the TIM8 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8101a08:	202c      	movs	r0, #44	; 0x2c
 8101a0a:	f000 fbe1 	bl	81021d0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8101a0e:	4a24      	ldr	r2, [pc, #144]	; (8101aa0 <HAL_InitTick+0xb0>)
 8101a10:	687b      	ldr	r3, [r7, #4]
 8101a12:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 8101a14:	4b23      	ldr	r3, [pc, #140]	; (8101aa4 <HAL_InitTick+0xb4>)
 8101a16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101a1a:	4a22      	ldr	r2, [pc, #136]	; (8101aa4 <HAL_InitTick+0xb4>)
 8101a1c:	f043 0302 	orr.w	r3, r3, #2
 8101a20:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101a24:	4b1f      	ldr	r3, [pc, #124]	; (8101aa4 <HAL_InitTick+0xb4>)
 8101a26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101a2a:	f003 0302 	and.w	r3, r3, #2
 8101a2e:	60bb      	str	r3, [r7, #8]
 8101a30:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8101a32:	f107 020c 	add.w	r2, r7, #12
 8101a36:	f107 0310 	add.w	r3, r7, #16
 8101a3a:	4611      	mov	r1, r2
 8101a3c:	4618      	mov	r0, r3
 8101a3e:	f004 fad1 	bl	8105fe4 <HAL_RCC_GetClockConfig>

  /* Compute TIM8 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8101a42:	f004 fab9 	bl	8105fb8 <HAL_RCC_GetPCLK2Freq>
 8101a46:	4603      	mov	r3, r0
 8101a48:	005b      	lsls	r3, r3, #1
 8101a4a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8101a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101a4e:	4a16      	ldr	r2, [pc, #88]	; (8101aa8 <HAL_InitTick+0xb8>)
 8101a50:	fba2 2303 	umull	r2, r3, r2, r3
 8101a54:	0c9b      	lsrs	r3, r3, #18
 8101a56:	3b01      	subs	r3, #1
 8101a58:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 8101a5a:	4b14      	ldr	r3, [pc, #80]	; (8101aac <HAL_InitTick+0xbc>)
 8101a5c:	4a14      	ldr	r2, [pc, #80]	; (8101ab0 <HAL_InitTick+0xc0>)
 8101a5e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (1000000U / 1000U) - 1U;
 8101a60:	4b12      	ldr	r3, [pc, #72]	; (8101aac <HAL_InitTick+0xbc>)
 8101a62:	f240 32e7 	movw	r2, #999	; 0x3e7
 8101a66:	60da      	str	r2, [r3, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 8101a68:	4a10      	ldr	r2, [pc, #64]	; (8101aac <HAL_InitTick+0xbc>)
 8101a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101a6c:	6053      	str	r3, [r2, #4]
  htim8.Init.ClockDivision = 0;
 8101a6e:	4b0f      	ldr	r3, [pc, #60]	; (8101aac <HAL_InitTick+0xbc>)
 8101a70:	2200      	movs	r2, #0
 8101a72:	611a      	str	r2, [r3, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101a74:	4b0d      	ldr	r3, [pc, #52]	; (8101aac <HAL_InitTick+0xbc>)
 8101a76:	2200      	movs	r2, #0
 8101a78:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim8) == HAL_OK)
 8101a7a:	480c      	ldr	r0, [pc, #48]	; (8101aac <HAL_InitTick+0xbc>)
 8101a7c:	f005 f979 	bl	8106d72 <HAL_TIM_Base_Init>
 8101a80:	4603      	mov	r3, r0
 8101a82:	2b00      	cmp	r3, #0
 8101a84:	d107      	bne.n	8101a96 <HAL_InitTick+0xa6>
 8101a86:	e001      	b.n	8101a8c <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8101a88:	2301      	movs	r3, #1
 8101a8a:	e005      	b.n	8101a98 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim8);
 8101a8c:	4807      	ldr	r0, [pc, #28]	; (8101aac <HAL_InitTick+0xbc>)
 8101a8e:	f005 f9d1 	bl	8106e34 <HAL_TIM_Base_Start_IT>
 8101a92:	4603      	mov	r3, r0
 8101a94:	e000      	b.n	8101a98 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8101a96:	2301      	movs	r3, #1
}
 8101a98:	4618      	mov	r0, r3
 8101a9a:	3738      	adds	r7, #56	; 0x38
 8101a9c:	46bd      	mov	sp, r7
 8101a9e:	bd80      	pop	{r7, pc}
 8101aa0:	10000008 	.word	0x10000008
 8101aa4:	58024400 	.word	0x58024400
 8101aa8:	431bde83 	.word	0x431bde83
 8101aac:	10004e90 	.word	0x10004e90
 8101ab0:	40010400 	.word	0x40010400

08101ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101ab4:	b480      	push	{r7}
 8101ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101ab8:	e7fe      	b.n	8101ab8 <NMI_Handler+0x4>

08101aba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101aba:	b480      	push	{r7}
 8101abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101abe:	e7fe      	b.n	8101abe <HardFault_Handler+0x4>

08101ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101ac0:	b480      	push	{r7}
 8101ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101ac4:	e7fe      	b.n	8101ac4 <MemManage_Handler+0x4>

08101ac6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101ac6:	b480      	push	{r7}
 8101ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101aca:	e7fe      	b.n	8101aca <BusFault_Handler+0x4>

08101acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101acc:	b480      	push	{r7}
 8101ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101ad0:	e7fe      	b.n	8101ad0 <UsageFault_Handler+0x4>

08101ad2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101ad2:	b480      	push	{r7}
 8101ad4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101ad6:	bf00      	nop
 8101ad8:	46bd      	mov	sp, r7
 8101ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ade:	4770      	bx	lr

08101ae0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8101ae0:	b580      	push	{r7, lr}
 8101ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8101ae4:	4802      	ldr	r0, [pc, #8]	; (8101af0 <DMA1_Stream0_IRQHandler+0x10>)
 8101ae6:	f001 f933 	bl	8102d50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8101aea:	bf00      	nop
 8101aec:	bd80      	pop	{r7, pc}
 8101aee:	bf00      	nop
 8101af0:	10004da0 	.word	0x10004da0

08101af4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8101af4:	b580      	push	{r7, lr}
 8101af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8101af8:	4802      	ldr	r0, [pc, #8]	; (8101b04 <DMA1_Stream1_IRQHandler+0x10>)
 8101afa:	f001 f929 	bl	8102d50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8101afe:	bf00      	nop
 8101b00:	bd80      	pop	{r7, pc}
 8101b02:	bf00      	nop
 8101b04:	10004e18 	.word	0x10004e18

08101b08 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8101b08:	b580      	push	{r7, lr}
 8101b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8101b0c:	4802      	ldr	r0, [pc, #8]	; (8101b18 <SPI1_IRQHandler+0x10>)
 8101b0e:	f004 fe51 	bl	81067b4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8101b12:	bf00      	nop
 8101b14:	bd80      	pop	{r7, pc}
 8101b16:	bf00      	nop
 8101b18:	10004d18 	.word	0x10004d18

08101b1c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8101b1c:	b580      	push	{r7, lr}
 8101b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8101b20:	4802      	ldr	r0, [pc, #8]	; (8101b2c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8101b22:	f005 f9bd 	bl	8106ea0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8101b26:	bf00      	nop
 8101b28:	bd80      	pop	{r7, pc}
 8101b2a:	bf00      	nop
 8101b2c:	10004e90 	.word	0x10004e90

08101b30 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8101b30:	b580      	push	{r7, lr}
 8101b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8101b34:	4802      	ldr	r0, [pc, #8]	; (8101b40 <DMA2_Stream2_IRQHandler+0x10>)
 8101b36:	f001 f90b 	bl	8102d50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8101b3a:	bf00      	nop
 8101b3c:	bd80      	pop	{r7, pc}
 8101b3e:	bf00      	nop
 8101b40:	10004edc 	.word	0x10004edc

08101b44 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8101b44:	b580      	push	{r7, lr}
 8101b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8101b48:	4802      	ldr	r0, [pc, #8]	; (8101b54 <DMA2_Stream3_IRQHandler+0x10>)
 8101b4a:	f001 f901 	bl	8102d50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8101b4e:	bf00      	nop
 8101b50:	bd80      	pop	{r7, pc}
 8101b52:	bf00      	nop
 8101b54:	10004fe0 	.word	0x10004fe0

08101b58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8101b58:	b480      	push	{r7}
 8101b5a:	af00      	add	r7, sp, #0
	return 1;
 8101b5c:	2301      	movs	r3, #1
}
 8101b5e:	4618      	mov	r0, r3
 8101b60:	46bd      	mov	sp, r7
 8101b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b66:	4770      	bx	lr

08101b68 <_kill>:

int _kill(int pid, int sig)
{
 8101b68:	b580      	push	{r7, lr}
 8101b6a:	b082      	sub	sp, #8
 8101b6c:	af00      	add	r7, sp, #0
 8101b6e:	6078      	str	r0, [r7, #4]
 8101b70:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8101b72:	f00a fd8b 	bl	810c68c <__errno>
 8101b76:	4602      	mov	r2, r0
 8101b78:	2316      	movs	r3, #22
 8101b7a:	6013      	str	r3, [r2, #0]
	return -1;
 8101b7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8101b80:	4618      	mov	r0, r3
 8101b82:	3708      	adds	r7, #8
 8101b84:	46bd      	mov	sp, r7
 8101b86:	bd80      	pop	{r7, pc}

08101b88 <_exit>:

void _exit (int status)
{
 8101b88:	b580      	push	{r7, lr}
 8101b8a:	b082      	sub	sp, #8
 8101b8c:	af00      	add	r7, sp, #0
 8101b8e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8101b90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8101b94:	6878      	ldr	r0, [r7, #4]
 8101b96:	f7ff ffe7 	bl	8101b68 <_kill>
	while (1) {}		/* Make sure we hang here */
 8101b9a:	e7fe      	b.n	8101b9a <_exit+0x12>

08101b9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8101b9c:	b580      	push	{r7, lr}
 8101b9e:	b086      	sub	sp, #24
 8101ba0:	af00      	add	r7, sp, #0
 8101ba2:	60f8      	str	r0, [r7, #12]
 8101ba4:	60b9      	str	r1, [r7, #8]
 8101ba6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101ba8:	2300      	movs	r3, #0
 8101baa:	617b      	str	r3, [r7, #20]
 8101bac:	e00a      	b.n	8101bc4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8101bae:	f3af 8000 	nop.w
 8101bb2:	4601      	mov	r1, r0
 8101bb4:	68bb      	ldr	r3, [r7, #8]
 8101bb6:	1c5a      	adds	r2, r3, #1
 8101bb8:	60ba      	str	r2, [r7, #8]
 8101bba:	b2ca      	uxtb	r2, r1
 8101bbc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101bbe:	697b      	ldr	r3, [r7, #20]
 8101bc0:	3301      	adds	r3, #1
 8101bc2:	617b      	str	r3, [r7, #20]
 8101bc4:	697a      	ldr	r2, [r7, #20]
 8101bc6:	687b      	ldr	r3, [r7, #4]
 8101bc8:	429a      	cmp	r2, r3
 8101bca:	dbf0      	blt.n	8101bae <_read+0x12>
	}

return len;
 8101bcc:	687b      	ldr	r3, [r7, #4]
}
 8101bce:	4618      	mov	r0, r3
 8101bd0:	3718      	adds	r7, #24
 8101bd2:	46bd      	mov	sp, r7
 8101bd4:	bd80      	pop	{r7, pc}

08101bd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8101bd6:	b580      	push	{r7, lr}
 8101bd8:	b086      	sub	sp, #24
 8101bda:	af00      	add	r7, sp, #0
 8101bdc:	60f8      	str	r0, [r7, #12]
 8101bde:	60b9      	str	r1, [r7, #8]
 8101be0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101be2:	2300      	movs	r3, #0
 8101be4:	617b      	str	r3, [r7, #20]
 8101be6:	e009      	b.n	8101bfc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8101be8:	68bb      	ldr	r3, [r7, #8]
 8101bea:	1c5a      	adds	r2, r3, #1
 8101bec:	60ba      	str	r2, [r7, #8]
 8101bee:	781b      	ldrb	r3, [r3, #0]
 8101bf0:	4618      	mov	r0, r3
 8101bf2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101bf6:	697b      	ldr	r3, [r7, #20]
 8101bf8:	3301      	adds	r3, #1
 8101bfa:	617b      	str	r3, [r7, #20]
 8101bfc:	697a      	ldr	r2, [r7, #20]
 8101bfe:	687b      	ldr	r3, [r7, #4]
 8101c00:	429a      	cmp	r2, r3
 8101c02:	dbf1      	blt.n	8101be8 <_write+0x12>
	}
	return len;
 8101c04:	687b      	ldr	r3, [r7, #4]
}
 8101c06:	4618      	mov	r0, r3
 8101c08:	3718      	adds	r7, #24
 8101c0a:	46bd      	mov	sp, r7
 8101c0c:	bd80      	pop	{r7, pc}

08101c0e <_close>:

int _close(int file)
{
 8101c0e:	b480      	push	{r7}
 8101c10:	b083      	sub	sp, #12
 8101c12:	af00      	add	r7, sp, #0
 8101c14:	6078      	str	r0, [r7, #4]
	return -1;
 8101c16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8101c1a:	4618      	mov	r0, r3
 8101c1c:	370c      	adds	r7, #12
 8101c1e:	46bd      	mov	sp, r7
 8101c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c24:	4770      	bx	lr

08101c26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8101c26:	b480      	push	{r7}
 8101c28:	b083      	sub	sp, #12
 8101c2a:	af00      	add	r7, sp, #0
 8101c2c:	6078      	str	r0, [r7, #4]
 8101c2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8101c30:	683b      	ldr	r3, [r7, #0]
 8101c32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8101c36:	605a      	str	r2, [r3, #4]
	return 0;
 8101c38:	2300      	movs	r3, #0
}
 8101c3a:	4618      	mov	r0, r3
 8101c3c:	370c      	adds	r7, #12
 8101c3e:	46bd      	mov	sp, r7
 8101c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c44:	4770      	bx	lr

08101c46 <_isatty>:

int _isatty(int file)
{
 8101c46:	b480      	push	{r7}
 8101c48:	b083      	sub	sp, #12
 8101c4a:	af00      	add	r7, sp, #0
 8101c4c:	6078      	str	r0, [r7, #4]
	return 1;
 8101c4e:	2301      	movs	r3, #1
}
 8101c50:	4618      	mov	r0, r3
 8101c52:	370c      	adds	r7, #12
 8101c54:	46bd      	mov	sp, r7
 8101c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c5a:	4770      	bx	lr

08101c5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8101c5c:	b480      	push	{r7}
 8101c5e:	b085      	sub	sp, #20
 8101c60:	af00      	add	r7, sp, #0
 8101c62:	60f8      	str	r0, [r7, #12]
 8101c64:	60b9      	str	r1, [r7, #8]
 8101c66:	607a      	str	r2, [r7, #4]
	return 0;
 8101c68:	2300      	movs	r3, #0
}
 8101c6a:	4618      	mov	r0, r3
 8101c6c:	3714      	adds	r7, #20
 8101c6e:	46bd      	mov	sp, r7
 8101c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c74:	4770      	bx	lr
	...

08101c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101c78:	b580      	push	{r7, lr}
 8101c7a:	b086      	sub	sp, #24
 8101c7c:	af00      	add	r7, sp, #0
 8101c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101c80:	4a14      	ldr	r2, [pc, #80]	; (8101cd4 <_sbrk+0x5c>)
 8101c82:	4b15      	ldr	r3, [pc, #84]	; (8101cd8 <_sbrk+0x60>)
 8101c84:	1ad3      	subs	r3, r2, r3
 8101c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101c88:	697b      	ldr	r3, [r7, #20]
 8101c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101c8c:	4b13      	ldr	r3, [pc, #76]	; (8101cdc <_sbrk+0x64>)
 8101c8e:	681b      	ldr	r3, [r3, #0]
 8101c90:	2b00      	cmp	r3, #0
 8101c92:	d102      	bne.n	8101c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101c94:	4b11      	ldr	r3, [pc, #68]	; (8101cdc <_sbrk+0x64>)
 8101c96:	4a12      	ldr	r2, [pc, #72]	; (8101ce0 <_sbrk+0x68>)
 8101c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8101c9a:	4b10      	ldr	r3, [pc, #64]	; (8101cdc <_sbrk+0x64>)
 8101c9c:	681a      	ldr	r2, [r3, #0]
 8101c9e:	687b      	ldr	r3, [r7, #4]
 8101ca0:	4413      	add	r3, r2
 8101ca2:	693a      	ldr	r2, [r7, #16]
 8101ca4:	429a      	cmp	r2, r3
 8101ca6:	d207      	bcs.n	8101cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101ca8:	f00a fcf0 	bl	810c68c <__errno>
 8101cac:	4602      	mov	r2, r0
 8101cae:	230c      	movs	r3, #12
 8101cb0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8101cb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8101cb6:	e009      	b.n	8101ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101cb8:	4b08      	ldr	r3, [pc, #32]	; (8101cdc <_sbrk+0x64>)
 8101cba:	681b      	ldr	r3, [r3, #0]
 8101cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101cbe:	4b07      	ldr	r3, [pc, #28]	; (8101cdc <_sbrk+0x64>)
 8101cc0:	681a      	ldr	r2, [r3, #0]
 8101cc2:	687b      	ldr	r3, [r7, #4]
 8101cc4:	4413      	add	r3, r2
 8101cc6:	4a05      	ldr	r2, [pc, #20]	; (8101cdc <_sbrk+0x64>)
 8101cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101cca:	68fb      	ldr	r3, [r7, #12]
}
 8101ccc:	4618      	mov	r0, r3
 8101cce:	3718      	adds	r7, #24
 8101cd0:	46bd      	mov	sp, r7
 8101cd2:	bd80      	pop	{r7, pc}
 8101cd4:	10048000 	.word	0x10048000
 8101cd8:	00000400 	.word	0x00000400
 8101cdc:	10000228 	.word	0x10000228
 8101ce0:	10005510 	.word	0x10005510

08101ce4 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8101ce4:	b580      	push	{r7, lr}
 8101ce6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8101ce8:	4b22      	ldr	r3, [pc, #136]	; (8101d74 <MX_USART3_UART_Init+0x90>)
 8101cea:	4a23      	ldr	r2, [pc, #140]	; (8101d78 <MX_USART3_UART_Init+0x94>)
 8101cec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8101cee:	4b21      	ldr	r3, [pc, #132]	; (8101d74 <MX_USART3_UART_Init+0x90>)
 8101cf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8101cf4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8101cf6:	4b1f      	ldr	r3, [pc, #124]	; (8101d74 <MX_USART3_UART_Init+0x90>)
 8101cf8:	2200      	movs	r2, #0
 8101cfa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8101cfc:	4b1d      	ldr	r3, [pc, #116]	; (8101d74 <MX_USART3_UART_Init+0x90>)
 8101cfe:	2200      	movs	r2, #0
 8101d00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8101d02:	4b1c      	ldr	r3, [pc, #112]	; (8101d74 <MX_USART3_UART_Init+0x90>)
 8101d04:	2200      	movs	r2, #0
 8101d06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8101d08:	4b1a      	ldr	r3, [pc, #104]	; (8101d74 <MX_USART3_UART_Init+0x90>)
 8101d0a:	220c      	movs	r2, #12
 8101d0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8101d0e:	4b19      	ldr	r3, [pc, #100]	; (8101d74 <MX_USART3_UART_Init+0x90>)
 8101d10:	2200      	movs	r2, #0
 8101d12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8101d14:	4b17      	ldr	r3, [pc, #92]	; (8101d74 <MX_USART3_UART_Init+0x90>)
 8101d16:	2200      	movs	r2, #0
 8101d18:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8101d1a:	4b16      	ldr	r3, [pc, #88]	; (8101d74 <MX_USART3_UART_Init+0x90>)
 8101d1c:	2200      	movs	r2, #0
 8101d1e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101d20:	4b14      	ldr	r3, [pc, #80]	; (8101d74 <MX_USART3_UART_Init+0x90>)
 8101d22:	2200      	movs	r2, #0
 8101d24:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8101d26:	4b13      	ldr	r3, [pc, #76]	; (8101d74 <MX_USART3_UART_Init+0x90>)
 8101d28:	2200      	movs	r2, #0
 8101d2a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8101d2c:	4811      	ldr	r0, [pc, #68]	; (8101d74 <MX_USART3_UART_Init+0x90>)
 8101d2e:	f005 fab7 	bl	81072a0 <HAL_UART_Init>
 8101d32:	4603      	mov	r3, r0
 8101d34:	2b00      	cmp	r3, #0
 8101d36:	d001      	beq.n	8101d3c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8101d38:	f7ff fc7c 	bl	8101634 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101d3c:	2100      	movs	r1, #0
 8101d3e:	480d      	ldr	r0, [pc, #52]	; (8101d74 <MX_USART3_UART_Init+0x90>)
 8101d40:	f006 fae7 	bl	8108312 <HAL_UARTEx_SetTxFifoThreshold>
 8101d44:	4603      	mov	r3, r0
 8101d46:	2b00      	cmp	r3, #0
 8101d48:	d001      	beq.n	8101d4e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8101d4a:	f7ff fc73 	bl	8101634 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101d4e:	2100      	movs	r1, #0
 8101d50:	4808      	ldr	r0, [pc, #32]	; (8101d74 <MX_USART3_UART_Init+0x90>)
 8101d52:	f006 fb1c 	bl	810838e <HAL_UARTEx_SetRxFifoThreshold>
 8101d56:	4603      	mov	r3, r0
 8101d58:	2b00      	cmp	r3, #0
 8101d5a:	d001      	beq.n	8101d60 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8101d5c:	f7ff fc6a 	bl	8101634 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8101d60:	4804      	ldr	r0, [pc, #16]	; (8101d74 <MX_USART3_UART_Init+0x90>)
 8101d62:	f006 fa9d 	bl	81082a0 <HAL_UARTEx_DisableFifoMode>
 8101d66:	4603      	mov	r3, r0
 8101d68:	2b00      	cmp	r3, #0
 8101d6a:	d001      	beq.n	8101d70 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8101d6c:	f7ff fc62 	bl	8101634 <Error_Handler>
  }

}
 8101d70:	bf00      	nop
 8101d72:	bd80      	pop	{r7, pc}
 8101d74:	10004f54 	.word	0x10004f54
 8101d78:	40004800 	.word	0x40004800

08101d7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8101d7c:	b580      	push	{r7, lr}
 8101d7e:	b08a      	sub	sp, #40	; 0x28
 8101d80:	af00      	add	r7, sp, #0
 8101d82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101d84:	f107 0314 	add.w	r3, r7, #20
 8101d88:	2200      	movs	r2, #0
 8101d8a:	601a      	str	r2, [r3, #0]
 8101d8c:	605a      	str	r2, [r3, #4]
 8101d8e:	609a      	str	r2, [r3, #8]
 8101d90:	60da      	str	r2, [r3, #12]
 8101d92:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8101d94:	687b      	ldr	r3, [r7, #4]
 8101d96:	681b      	ldr	r3, [r3, #0]
 8101d98:	4a49      	ldr	r2, [pc, #292]	; (8101ec0 <HAL_UART_MspInit+0x144>)
 8101d9a:	4293      	cmp	r3, r2
 8101d9c:	f040 808b 	bne.w	8101eb6 <HAL_UART_MspInit+0x13a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8101da0:	4b48      	ldr	r3, [pc, #288]	; (8101ec4 <HAL_UART_MspInit+0x148>)
 8101da2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101da6:	4a47      	ldr	r2, [pc, #284]	; (8101ec4 <HAL_UART_MspInit+0x148>)
 8101da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8101dac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101db0:	4b44      	ldr	r3, [pc, #272]	; (8101ec4 <HAL_UART_MspInit+0x148>)
 8101db2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101db6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8101dba:	613b      	str	r3, [r7, #16]
 8101dbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101dbe:	4b41      	ldr	r3, [pc, #260]	; (8101ec4 <HAL_UART_MspInit+0x148>)
 8101dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101dc4:	4a3f      	ldr	r2, [pc, #252]	; (8101ec4 <HAL_UART_MspInit+0x148>)
 8101dc6:	f043 0308 	orr.w	r3, r3, #8
 8101dca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101dce:	4b3d      	ldr	r3, [pc, #244]	; (8101ec4 <HAL_UART_MspInit+0x148>)
 8101dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101dd4:	f003 0308 	and.w	r3, r3, #8
 8101dd8:	60fb      	str	r3, [r7, #12]
 8101dda:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8101ddc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101de2:	2302      	movs	r3, #2
 8101de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101de6:	2300      	movs	r3, #0
 8101de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101dea:	2300      	movs	r3, #0
 8101dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8101dee:	2307      	movs	r3, #7
 8101df0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101df2:	f107 0314 	add.w	r3, r7, #20
 8101df6:	4619      	mov	r1, r3
 8101df8:	4833      	ldr	r0, [pc, #204]	; (8101ec8 <HAL_UART_MspInit+0x14c>)
 8101dfa:	f002 fc81 	bl	8104700 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA2_Stream2;
 8101dfe:	4b33      	ldr	r3, [pc, #204]	; (8101ecc <HAL_UART_MspInit+0x150>)
 8101e00:	4a33      	ldr	r2, [pc, #204]	; (8101ed0 <HAL_UART_MspInit+0x154>)
 8101e02:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8101e04:	4b31      	ldr	r3, [pc, #196]	; (8101ecc <HAL_UART_MspInit+0x150>)
 8101e06:	222d      	movs	r2, #45	; 0x2d
 8101e08:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8101e0a:	4b30      	ldr	r3, [pc, #192]	; (8101ecc <HAL_UART_MspInit+0x150>)
 8101e0c:	2200      	movs	r2, #0
 8101e0e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101e10:	4b2e      	ldr	r3, [pc, #184]	; (8101ecc <HAL_UART_MspInit+0x150>)
 8101e12:	2200      	movs	r2, #0
 8101e14:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8101e16:	4b2d      	ldr	r3, [pc, #180]	; (8101ecc <HAL_UART_MspInit+0x150>)
 8101e18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101e1c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101e1e:	4b2b      	ldr	r3, [pc, #172]	; (8101ecc <HAL_UART_MspInit+0x150>)
 8101e20:	2200      	movs	r2, #0
 8101e22:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101e24:	4b29      	ldr	r3, [pc, #164]	; (8101ecc <HAL_UART_MspInit+0x150>)
 8101e26:	2200      	movs	r2, #0
 8101e28:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8101e2a:	4b28      	ldr	r3, [pc, #160]	; (8101ecc <HAL_UART_MspInit+0x150>)
 8101e2c:	2200      	movs	r2, #0
 8101e2e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8101e30:	4b26      	ldr	r3, [pc, #152]	; (8101ecc <HAL_UART_MspInit+0x150>)
 8101e32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8101e36:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101e38:	4b24      	ldr	r3, [pc, #144]	; (8101ecc <HAL_UART_MspInit+0x150>)
 8101e3a:	2200      	movs	r2, #0
 8101e3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8101e3e:	4823      	ldr	r0, [pc, #140]	; (8101ecc <HAL_UART_MspInit+0x150>)
 8101e40:	f000 f9e8 	bl	8102214 <HAL_DMA_Init>
 8101e44:	4603      	mov	r3, r0
 8101e46:	2b00      	cmp	r3, #0
 8101e48:	d001      	beq.n	8101e4e <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8101e4a:	f7ff fbf3 	bl	8101634 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8101e4e:	687b      	ldr	r3, [r7, #4]
 8101e50:	4a1e      	ldr	r2, [pc, #120]	; (8101ecc <HAL_UART_MspInit+0x150>)
 8101e52:	679a      	str	r2, [r3, #120]	; 0x78
 8101e54:	4a1d      	ldr	r2, [pc, #116]	; (8101ecc <HAL_UART_MspInit+0x150>)
 8101e56:	687b      	ldr	r3, [r7, #4]
 8101e58:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA2_Stream3;
 8101e5a:	4b1e      	ldr	r3, [pc, #120]	; (8101ed4 <HAL_UART_MspInit+0x158>)
 8101e5c:	4a1e      	ldr	r2, [pc, #120]	; (8101ed8 <HAL_UART_MspInit+0x15c>)
 8101e5e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8101e60:	4b1c      	ldr	r3, [pc, #112]	; (8101ed4 <HAL_UART_MspInit+0x158>)
 8101e62:	222e      	movs	r2, #46	; 0x2e
 8101e64:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8101e66:	4b1b      	ldr	r3, [pc, #108]	; (8101ed4 <HAL_UART_MspInit+0x158>)
 8101e68:	2240      	movs	r2, #64	; 0x40
 8101e6a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101e6c:	4b19      	ldr	r3, [pc, #100]	; (8101ed4 <HAL_UART_MspInit+0x158>)
 8101e6e:	2200      	movs	r2, #0
 8101e70:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8101e72:	4b18      	ldr	r3, [pc, #96]	; (8101ed4 <HAL_UART_MspInit+0x158>)
 8101e74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101e78:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101e7a:	4b16      	ldr	r3, [pc, #88]	; (8101ed4 <HAL_UART_MspInit+0x158>)
 8101e7c:	2200      	movs	r2, #0
 8101e7e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101e80:	4b14      	ldr	r3, [pc, #80]	; (8101ed4 <HAL_UART_MspInit+0x158>)
 8101e82:	2200      	movs	r2, #0
 8101e84:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8101e86:	4b13      	ldr	r3, [pc, #76]	; (8101ed4 <HAL_UART_MspInit+0x158>)
 8101e88:	2200      	movs	r2, #0
 8101e8a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8101e8c:	4b11      	ldr	r3, [pc, #68]	; (8101ed4 <HAL_UART_MspInit+0x158>)
 8101e8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8101e92:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101e94:	4b0f      	ldr	r3, [pc, #60]	; (8101ed4 <HAL_UART_MspInit+0x158>)
 8101e96:	2200      	movs	r2, #0
 8101e98:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8101e9a:	480e      	ldr	r0, [pc, #56]	; (8101ed4 <HAL_UART_MspInit+0x158>)
 8101e9c:	f000 f9ba 	bl	8102214 <HAL_DMA_Init>
 8101ea0:	4603      	mov	r3, r0
 8101ea2:	2b00      	cmp	r3, #0
 8101ea4:	d001      	beq.n	8101eaa <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8101ea6:	f7ff fbc5 	bl	8101634 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8101eaa:	687b      	ldr	r3, [r7, #4]
 8101eac:	4a09      	ldr	r2, [pc, #36]	; (8101ed4 <HAL_UART_MspInit+0x158>)
 8101eae:	675a      	str	r2, [r3, #116]	; 0x74
 8101eb0:	4a08      	ldr	r2, [pc, #32]	; (8101ed4 <HAL_UART_MspInit+0x158>)
 8101eb2:	687b      	ldr	r3, [r7, #4]
 8101eb4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8101eb6:	bf00      	nop
 8101eb8:	3728      	adds	r7, #40	; 0x28
 8101eba:	46bd      	mov	sp, r7
 8101ebc:	bd80      	pop	{r7, pc}
 8101ebe:	bf00      	nop
 8101ec0:	40004800 	.word	0x40004800
 8101ec4:	58024400 	.word	0x58024400
 8101ec8:	58020c00 	.word	0x58020c00
 8101ecc:	10004edc 	.word	0x10004edc
 8101ed0:	40020440 	.word	0x40020440
 8101ed4:	10004fe0 	.word	0x10004fe0
 8101ed8:	40020458 	.word	0x40020458

08101edc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8101edc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101f14 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8101ee0:	f7ff f8ba 	bl	8101058 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8101ee4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8101ee6:	e003      	b.n	8101ef0 <LoopCopyDataInit>

08101ee8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8101ee8:	4b0b      	ldr	r3, [pc, #44]	; (8101f18 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8101eea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8101eec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8101eee:	3104      	adds	r1, #4

08101ef0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8101ef0:	480a      	ldr	r0, [pc, #40]	; (8101f1c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8101ef2:	4b0b      	ldr	r3, [pc, #44]	; (8101f20 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8101ef4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8101ef6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8101ef8:	d3f6      	bcc.n	8101ee8 <CopyDataInit>
  ldr  r2, =_sbss
 8101efa:	4a0a      	ldr	r2, [pc, #40]	; (8101f24 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8101efc:	e002      	b.n	8101f04 <LoopFillZerobss>

08101efe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8101efe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8101f00:	f842 3b04 	str.w	r3, [r2], #4

08101f04 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8101f04:	4b08      	ldr	r3, [pc, #32]	; (8101f28 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8101f06:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8101f08:	d3f9      	bcc.n	8101efe <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 8101f0a:	f00a fbc5 	bl	810c698 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101f0e:	f7ff fb27 	bl	8101560 <main>
  bx  lr    
 8101f12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101f14:	10048000 	.word	0x10048000
  ldr  r3, =_sidata
 8101f18:	0810f4b0 	.word	0x0810f4b0
  ldr  r0, =_sdata
 8101f1c:	10000000 	.word	0x10000000
  ldr  r3, =_edata
 8101f20:	1000020c 	.word	0x1000020c
  ldr  r2, =_sbss
 8101f24:	1000020c 	.word	0x1000020c
  ldr  r3, = _ebss
 8101f28:	10005510 	.word	0x10005510

08101f2c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101f2c:	e7fe      	b.n	8101f2c <ADC3_IRQHandler>
	...

08101f30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101f30:	b580      	push	{r7, lr}
 8101f32:	b082      	sub	sp, #8
 8101f34:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101f36:	4b28      	ldr	r3, [pc, #160]	; (8101fd8 <HAL_Init+0xa8>)
 8101f38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101f3c:	4a26      	ldr	r2, [pc, #152]	; (8101fd8 <HAL_Init+0xa8>)
 8101f3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101f42:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101f46:	4b24      	ldr	r3, [pc, #144]	; (8101fd8 <HAL_Init+0xa8>)
 8101f48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101f4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101f50:	603b      	str	r3, [r7, #0]
 8101f52:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101f54:	4b21      	ldr	r3, [pc, #132]	; (8101fdc <HAL_Init+0xac>)
 8101f56:	681b      	ldr	r3, [r3, #0]
 8101f58:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101f5c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101f60:	4a1e      	ldr	r2, [pc, #120]	; (8101fdc <HAL_Init+0xac>)
 8101f62:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8101f66:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101f68:	4b1c      	ldr	r3, [pc, #112]	; (8101fdc <HAL_Init+0xac>)
 8101f6a:	681b      	ldr	r3, [r3, #0]
 8101f6c:	4a1b      	ldr	r2, [pc, #108]	; (8101fdc <HAL_Init+0xac>)
 8101f6e:	f043 0301 	orr.w	r3, r3, #1
 8101f72:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101f74:	2003      	movs	r0, #3
 8101f76:	f000 f906 	bl	8102186 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101f7a:	f003 fe63 	bl	8105c44 <HAL_RCC_GetSysClockFreq>
 8101f7e:	4601      	mov	r1, r0
 8101f80:	4b15      	ldr	r3, [pc, #84]	; (8101fd8 <HAL_Init+0xa8>)
 8101f82:	699b      	ldr	r3, [r3, #24]
 8101f84:	0a1b      	lsrs	r3, r3, #8
 8101f86:	f003 030f 	and.w	r3, r3, #15
 8101f8a:	4a15      	ldr	r2, [pc, #84]	; (8101fe0 <HAL_Init+0xb0>)
 8101f8c:	5cd3      	ldrb	r3, [r2, r3]
 8101f8e:	f003 031f 	and.w	r3, r3, #31
 8101f92:	fa21 f303 	lsr.w	r3, r1, r3
 8101f96:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101f98:	4b0f      	ldr	r3, [pc, #60]	; (8101fd8 <HAL_Init+0xa8>)
 8101f9a:	699b      	ldr	r3, [r3, #24]
 8101f9c:	f003 030f 	and.w	r3, r3, #15
 8101fa0:	4a0f      	ldr	r2, [pc, #60]	; (8101fe0 <HAL_Init+0xb0>)
 8101fa2:	5cd3      	ldrb	r3, [r2, r3]
 8101fa4:	f003 031f 	and.w	r3, r3, #31
 8101fa8:	687a      	ldr	r2, [r7, #4]
 8101faa:	fa22 f303 	lsr.w	r3, r2, r3
 8101fae:	4a0d      	ldr	r2, [pc, #52]	; (8101fe4 <HAL_Init+0xb4>)
 8101fb0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101fb2:	4b0c      	ldr	r3, [pc, #48]	; (8101fe4 <HAL_Init+0xb4>)
 8101fb4:	681b      	ldr	r3, [r3, #0]
 8101fb6:	4a0c      	ldr	r2, [pc, #48]	; (8101fe8 <HAL_Init+0xb8>)
 8101fb8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101fba:	2000      	movs	r0, #0
 8101fbc:	f7ff fd18 	bl	81019f0 <HAL_InitTick>
 8101fc0:	4603      	mov	r3, r0
 8101fc2:	2b00      	cmp	r3, #0
 8101fc4:	d001      	beq.n	8101fca <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101fc6:	2301      	movs	r3, #1
 8101fc8:	e002      	b.n	8101fd0 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101fca:	f7ff fcf3 	bl	81019b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101fce:	2300      	movs	r3, #0
}
 8101fd0:	4618      	mov	r0, r3
 8101fd2:	3708      	adds	r7, #8
 8101fd4:	46bd      	mov	sp, r7
 8101fd6:	bd80      	pop	{r7, pc}
 8101fd8:	58024400 	.word	0x58024400
 8101fdc:	40024400 	.word	0x40024400
 8101fe0:	0810f16c 	.word	0x0810f16c
 8101fe4:	10000004 	.word	0x10000004
 8101fe8:	10000000 	.word	0x10000000

08101fec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101fec:	b480      	push	{r7}
 8101fee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101ff0:	4b06      	ldr	r3, [pc, #24]	; (810200c <HAL_IncTick+0x20>)
 8101ff2:	781b      	ldrb	r3, [r3, #0]
 8101ff4:	461a      	mov	r2, r3
 8101ff6:	4b06      	ldr	r3, [pc, #24]	; (8102010 <HAL_IncTick+0x24>)
 8101ff8:	681b      	ldr	r3, [r3, #0]
 8101ffa:	4413      	add	r3, r2
 8101ffc:	4a04      	ldr	r2, [pc, #16]	; (8102010 <HAL_IncTick+0x24>)
 8101ffe:	6013      	str	r3, [r2, #0]
}
 8102000:	bf00      	nop
 8102002:	46bd      	mov	sp, r7
 8102004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102008:	4770      	bx	lr
 810200a:	bf00      	nop
 810200c:	1000000c 	.word	0x1000000c
 8102010:	10005058 	.word	0x10005058

08102014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8102014:	b480      	push	{r7}
 8102016:	af00      	add	r7, sp, #0
  return uwTick;
 8102018:	4b03      	ldr	r3, [pc, #12]	; (8102028 <HAL_GetTick+0x14>)
 810201a:	681b      	ldr	r3, [r3, #0]
}
 810201c:	4618      	mov	r0, r3
 810201e:	46bd      	mov	sp, r7
 8102020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102024:	4770      	bx	lr
 8102026:	bf00      	nop
 8102028:	10005058 	.word	0x10005058

0810202c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810202c:	b480      	push	{r7}
 810202e:	b085      	sub	sp, #20
 8102030:	af00      	add	r7, sp, #0
 8102032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8102034:	687b      	ldr	r3, [r7, #4]
 8102036:	f003 0307 	and.w	r3, r3, #7
 810203a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 810203c:	4b0c      	ldr	r3, [pc, #48]	; (8102070 <__NVIC_SetPriorityGrouping+0x44>)
 810203e:	68db      	ldr	r3, [r3, #12]
 8102040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8102042:	68ba      	ldr	r2, [r7, #8]
 8102044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8102048:	4013      	ands	r3, r2
 810204a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 810204c:	68fb      	ldr	r3, [r7, #12]
 810204e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8102050:	68bb      	ldr	r3, [r7, #8]
 8102052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8102054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8102058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810205c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810205e:	4a04      	ldr	r2, [pc, #16]	; (8102070 <__NVIC_SetPriorityGrouping+0x44>)
 8102060:	68bb      	ldr	r3, [r7, #8]
 8102062:	60d3      	str	r3, [r2, #12]
}
 8102064:	bf00      	nop
 8102066:	3714      	adds	r7, #20
 8102068:	46bd      	mov	sp, r7
 810206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810206e:	4770      	bx	lr
 8102070:	e000ed00 	.word	0xe000ed00

08102074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8102074:	b480      	push	{r7}
 8102076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8102078:	4b04      	ldr	r3, [pc, #16]	; (810208c <__NVIC_GetPriorityGrouping+0x18>)
 810207a:	68db      	ldr	r3, [r3, #12]
 810207c:	0a1b      	lsrs	r3, r3, #8
 810207e:	f003 0307 	and.w	r3, r3, #7
}
 8102082:	4618      	mov	r0, r3
 8102084:	46bd      	mov	sp, r7
 8102086:	f85d 7b04 	ldr.w	r7, [sp], #4
 810208a:	4770      	bx	lr
 810208c:	e000ed00 	.word	0xe000ed00

08102090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102090:	b480      	push	{r7}
 8102092:	b083      	sub	sp, #12
 8102094:	af00      	add	r7, sp, #0
 8102096:	4603      	mov	r3, r0
 8102098:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810209a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810209e:	2b00      	cmp	r3, #0
 81020a0:	db0b      	blt.n	81020ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81020a2:	88fb      	ldrh	r3, [r7, #6]
 81020a4:	f003 021f 	and.w	r2, r3, #31
 81020a8:	4907      	ldr	r1, [pc, #28]	; (81020c8 <__NVIC_EnableIRQ+0x38>)
 81020aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81020ae:	095b      	lsrs	r3, r3, #5
 81020b0:	2001      	movs	r0, #1
 81020b2:	fa00 f202 	lsl.w	r2, r0, r2
 81020b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 81020ba:	bf00      	nop
 81020bc:	370c      	adds	r7, #12
 81020be:	46bd      	mov	sp, r7
 81020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020c4:	4770      	bx	lr
 81020c6:	bf00      	nop
 81020c8:	e000e100 	.word	0xe000e100

081020cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81020cc:	b480      	push	{r7}
 81020ce:	b083      	sub	sp, #12
 81020d0:	af00      	add	r7, sp, #0
 81020d2:	4603      	mov	r3, r0
 81020d4:	6039      	str	r1, [r7, #0]
 81020d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81020d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81020dc:	2b00      	cmp	r3, #0
 81020de:	db0a      	blt.n	81020f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81020e0:	683b      	ldr	r3, [r7, #0]
 81020e2:	b2da      	uxtb	r2, r3
 81020e4:	490c      	ldr	r1, [pc, #48]	; (8102118 <__NVIC_SetPriority+0x4c>)
 81020e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81020ea:	0112      	lsls	r2, r2, #4
 81020ec:	b2d2      	uxtb	r2, r2
 81020ee:	440b      	add	r3, r1
 81020f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81020f4:	e00a      	b.n	810210c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81020f6:	683b      	ldr	r3, [r7, #0]
 81020f8:	b2da      	uxtb	r2, r3
 81020fa:	4908      	ldr	r1, [pc, #32]	; (810211c <__NVIC_SetPriority+0x50>)
 81020fc:	88fb      	ldrh	r3, [r7, #6]
 81020fe:	f003 030f 	and.w	r3, r3, #15
 8102102:	3b04      	subs	r3, #4
 8102104:	0112      	lsls	r2, r2, #4
 8102106:	b2d2      	uxtb	r2, r2
 8102108:	440b      	add	r3, r1
 810210a:	761a      	strb	r2, [r3, #24]
}
 810210c:	bf00      	nop
 810210e:	370c      	adds	r7, #12
 8102110:	46bd      	mov	sp, r7
 8102112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102116:	4770      	bx	lr
 8102118:	e000e100 	.word	0xe000e100
 810211c:	e000ed00 	.word	0xe000ed00

08102120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102120:	b480      	push	{r7}
 8102122:	b089      	sub	sp, #36	; 0x24
 8102124:	af00      	add	r7, sp, #0
 8102126:	60f8      	str	r0, [r7, #12]
 8102128:	60b9      	str	r1, [r7, #8]
 810212a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 810212c:	68fb      	ldr	r3, [r7, #12]
 810212e:	f003 0307 	and.w	r3, r3, #7
 8102132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8102134:	69fb      	ldr	r3, [r7, #28]
 8102136:	f1c3 0307 	rsb	r3, r3, #7
 810213a:	2b04      	cmp	r3, #4
 810213c:	bf28      	it	cs
 810213e:	2304      	movcs	r3, #4
 8102140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8102142:	69fb      	ldr	r3, [r7, #28]
 8102144:	3304      	adds	r3, #4
 8102146:	2b06      	cmp	r3, #6
 8102148:	d902      	bls.n	8102150 <NVIC_EncodePriority+0x30>
 810214a:	69fb      	ldr	r3, [r7, #28]
 810214c:	3b03      	subs	r3, #3
 810214e:	e000      	b.n	8102152 <NVIC_EncodePriority+0x32>
 8102150:	2300      	movs	r3, #0
 8102152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102154:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8102158:	69bb      	ldr	r3, [r7, #24]
 810215a:	fa02 f303 	lsl.w	r3, r2, r3
 810215e:	43da      	mvns	r2, r3
 8102160:	68bb      	ldr	r3, [r7, #8]
 8102162:	401a      	ands	r2, r3
 8102164:	697b      	ldr	r3, [r7, #20]
 8102166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8102168:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 810216c:	697b      	ldr	r3, [r7, #20]
 810216e:	fa01 f303 	lsl.w	r3, r1, r3
 8102172:	43d9      	mvns	r1, r3
 8102174:	687b      	ldr	r3, [r7, #4]
 8102176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102178:	4313      	orrs	r3, r2
         );
}
 810217a:	4618      	mov	r0, r3
 810217c:	3724      	adds	r7, #36	; 0x24
 810217e:	46bd      	mov	sp, r7
 8102180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102184:	4770      	bx	lr

08102186 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102186:	b580      	push	{r7, lr}
 8102188:	b082      	sub	sp, #8
 810218a:	af00      	add	r7, sp, #0
 810218c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810218e:	6878      	ldr	r0, [r7, #4]
 8102190:	f7ff ff4c 	bl	810202c <__NVIC_SetPriorityGrouping>
}
 8102194:	bf00      	nop
 8102196:	3708      	adds	r7, #8
 8102198:	46bd      	mov	sp, r7
 810219a:	bd80      	pop	{r7, pc}

0810219c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810219c:	b580      	push	{r7, lr}
 810219e:	b086      	sub	sp, #24
 81021a0:	af00      	add	r7, sp, #0
 81021a2:	4603      	mov	r3, r0
 81021a4:	60b9      	str	r1, [r7, #8]
 81021a6:	607a      	str	r2, [r7, #4]
 81021a8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81021aa:	f7ff ff63 	bl	8102074 <__NVIC_GetPriorityGrouping>
 81021ae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81021b0:	687a      	ldr	r2, [r7, #4]
 81021b2:	68b9      	ldr	r1, [r7, #8]
 81021b4:	6978      	ldr	r0, [r7, #20]
 81021b6:	f7ff ffb3 	bl	8102120 <NVIC_EncodePriority>
 81021ba:	4602      	mov	r2, r0
 81021bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81021c0:	4611      	mov	r1, r2
 81021c2:	4618      	mov	r0, r3
 81021c4:	f7ff ff82 	bl	81020cc <__NVIC_SetPriority>
}
 81021c8:	bf00      	nop
 81021ca:	3718      	adds	r7, #24
 81021cc:	46bd      	mov	sp, r7
 81021ce:	bd80      	pop	{r7, pc}

081021d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81021d0:	b580      	push	{r7, lr}
 81021d2:	b082      	sub	sp, #8
 81021d4:	af00      	add	r7, sp, #0
 81021d6:	4603      	mov	r3, r0
 81021d8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81021da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81021de:	4618      	mov	r0, r3
 81021e0:	f7ff ff56 	bl	8102090 <__NVIC_EnableIRQ>
}
 81021e4:	bf00      	nop
 81021e6:	3708      	adds	r7, #8
 81021e8:	46bd      	mov	sp, r7
 81021ea:	bd80      	pop	{r7, pc}

081021ec <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81021ec:	b480      	push	{r7}
 81021ee:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81021f0:	4b07      	ldr	r3, [pc, #28]	; (8102210 <HAL_GetCurrentCPUID+0x24>)
 81021f2:	681b      	ldr	r3, [r3, #0]
 81021f4:	091b      	lsrs	r3, r3, #4
 81021f6:	f003 030f 	and.w	r3, r3, #15
 81021fa:	2b07      	cmp	r3, #7
 81021fc:	d101      	bne.n	8102202 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81021fe:	2303      	movs	r3, #3
 8102200:	e000      	b.n	8102204 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8102202:	2301      	movs	r3, #1
  }
}
 8102204:	4618      	mov	r0, r3
 8102206:	46bd      	mov	sp, r7
 8102208:	f85d 7b04 	ldr.w	r7, [sp], #4
 810220c:	4770      	bx	lr
 810220e:	bf00      	nop
 8102210:	e000ed00 	.word	0xe000ed00

08102214 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8102214:	b580      	push	{r7, lr}
 8102216:	b086      	sub	sp, #24
 8102218:	af00      	add	r7, sp, #0
 810221a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 810221c:	f7ff fefa 	bl	8102014 <HAL_GetTick>
 8102220:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8102222:	687b      	ldr	r3, [r7, #4]
 8102224:	2b00      	cmp	r3, #0
 8102226:	d101      	bne.n	810222c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8102228:	2301      	movs	r3, #1
 810222a:	e314      	b.n	8102856 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810222c:	687b      	ldr	r3, [r7, #4]
 810222e:	681b      	ldr	r3, [r3, #0]
 8102230:	4a66      	ldr	r2, [pc, #408]	; (81023cc <HAL_DMA_Init+0x1b8>)
 8102232:	4293      	cmp	r3, r2
 8102234:	d04a      	beq.n	81022cc <HAL_DMA_Init+0xb8>
 8102236:	687b      	ldr	r3, [r7, #4]
 8102238:	681b      	ldr	r3, [r3, #0]
 810223a:	4a65      	ldr	r2, [pc, #404]	; (81023d0 <HAL_DMA_Init+0x1bc>)
 810223c:	4293      	cmp	r3, r2
 810223e:	d045      	beq.n	81022cc <HAL_DMA_Init+0xb8>
 8102240:	687b      	ldr	r3, [r7, #4]
 8102242:	681b      	ldr	r3, [r3, #0]
 8102244:	4a63      	ldr	r2, [pc, #396]	; (81023d4 <HAL_DMA_Init+0x1c0>)
 8102246:	4293      	cmp	r3, r2
 8102248:	d040      	beq.n	81022cc <HAL_DMA_Init+0xb8>
 810224a:	687b      	ldr	r3, [r7, #4]
 810224c:	681b      	ldr	r3, [r3, #0]
 810224e:	4a62      	ldr	r2, [pc, #392]	; (81023d8 <HAL_DMA_Init+0x1c4>)
 8102250:	4293      	cmp	r3, r2
 8102252:	d03b      	beq.n	81022cc <HAL_DMA_Init+0xb8>
 8102254:	687b      	ldr	r3, [r7, #4]
 8102256:	681b      	ldr	r3, [r3, #0]
 8102258:	4a60      	ldr	r2, [pc, #384]	; (81023dc <HAL_DMA_Init+0x1c8>)
 810225a:	4293      	cmp	r3, r2
 810225c:	d036      	beq.n	81022cc <HAL_DMA_Init+0xb8>
 810225e:	687b      	ldr	r3, [r7, #4]
 8102260:	681b      	ldr	r3, [r3, #0]
 8102262:	4a5f      	ldr	r2, [pc, #380]	; (81023e0 <HAL_DMA_Init+0x1cc>)
 8102264:	4293      	cmp	r3, r2
 8102266:	d031      	beq.n	81022cc <HAL_DMA_Init+0xb8>
 8102268:	687b      	ldr	r3, [r7, #4]
 810226a:	681b      	ldr	r3, [r3, #0]
 810226c:	4a5d      	ldr	r2, [pc, #372]	; (81023e4 <HAL_DMA_Init+0x1d0>)
 810226e:	4293      	cmp	r3, r2
 8102270:	d02c      	beq.n	81022cc <HAL_DMA_Init+0xb8>
 8102272:	687b      	ldr	r3, [r7, #4]
 8102274:	681b      	ldr	r3, [r3, #0]
 8102276:	4a5c      	ldr	r2, [pc, #368]	; (81023e8 <HAL_DMA_Init+0x1d4>)
 8102278:	4293      	cmp	r3, r2
 810227a:	d027      	beq.n	81022cc <HAL_DMA_Init+0xb8>
 810227c:	687b      	ldr	r3, [r7, #4]
 810227e:	681b      	ldr	r3, [r3, #0]
 8102280:	4a5a      	ldr	r2, [pc, #360]	; (81023ec <HAL_DMA_Init+0x1d8>)
 8102282:	4293      	cmp	r3, r2
 8102284:	d022      	beq.n	81022cc <HAL_DMA_Init+0xb8>
 8102286:	687b      	ldr	r3, [r7, #4]
 8102288:	681b      	ldr	r3, [r3, #0]
 810228a:	4a59      	ldr	r2, [pc, #356]	; (81023f0 <HAL_DMA_Init+0x1dc>)
 810228c:	4293      	cmp	r3, r2
 810228e:	d01d      	beq.n	81022cc <HAL_DMA_Init+0xb8>
 8102290:	687b      	ldr	r3, [r7, #4]
 8102292:	681b      	ldr	r3, [r3, #0]
 8102294:	4a57      	ldr	r2, [pc, #348]	; (81023f4 <HAL_DMA_Init+0x1e0>)
 8102296:	4293      	cmp	r3, r2
 8102298:	d018      	beq.n	81022cc <HAL_DMA_Init+0xb8>
 810229a:	687b      	ldr	r3, [r7, #4]
 810229c:	681b      	ldr	r3, [r3, #0]
 810229e:	4a56      	ldr	r2, [pc, #344]	; (81023f8 <HAL_DMA_Init+0x1e4>)
 81022a0:	4293      	cmp	r3, r2
 81022a2:	d013      	beq.n	81022cc <HAL_DMA_Init+0xb8>
 81022a4:	687b      	ldr	r3, [r7, #4]
 81022a6:	681b      	ldr	r3, [r3, #0]
 81022a8:	4a54      	ldr	r2, [pc, #336]	; (81023fc <HAL_DMA_Init+0x1e8>)
 81022aa:	4293      	cmp	r3, r2
 81022ac:	d00e      	beq.n	81022cc <HAL_DMA_Init+0xb8>
 81022ae:	687b      	ldr	r3, [r7, #4]
 81022b0:	681b      	ldr	r3, [r3, #0]
 81022b2:	4a53      	ldr	r2, [pc, #332]	; (8102400 <HAL_DMA_Init+0x1ec>)
 81022b4:	4293      	cmp	r3, r2
 81022b6:	d009      	beq.n	81022cc <HAL_DMA_Init+0xb8>
 81022b8:	687b      	ldr	r3, [r7, #4]
 81022ba:	681b      	ldr	r3, [r3, #0]
 81022bc:	4a51      	ldr	r2, [pc, #324]	; (8102404 <HAL_DMA_Init+0x1f0>)
 81022be:	4293      	cmp	r3, r2
 81022c0:	d004      	beq.n	81022cc <HAL_DMA_Init+0xb8>
 81022c2:	687b      	ldr	r3, [r7, #4]
 81022c4:	681b      	ldr	r3, [r3, #0]
 81022c6:	4a50      	ldr	r2, [pc, #320]	; (8102408 <HAL_DMA_Init+0x1f4>)
 81022c8:	4293      	cmp	r3, r2
 81022ca:	d101      	bne.n	81022d0 <HAL_DMA_Init+0xbc>
 81022cc:	2301      	movs	r3, #1
 81022ce:	e000      	b.n	81022d2 <HAL_DMA_Init+0xbe>
 81022d0:	2300      	movs	r3, #0
 81022d2:	2b00      	cmp	r3, #0
 81022d4:	f000 813b 	beq.w	810254e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 81022d8:	687b      	ldr	r3, [r7, #4]
 81022da:	2200      	movs	r2, #0
 81022dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 81022e0:	687b      	ldr	r3, [r7, #4]
 81022e2:	2202      	movs	r2, #2
 81022e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 81022e8:	687b      	ldr	r3, [r7, #4]
 81022ea:	681b      	ldr	r3, [r3, #0]
 81022ec:	4a37      	ldr	r2, [pc, #220]	; (81023cc <HAL_DMA_Init+0x1b8>)
 81022ee:	4293      	cmp	r3, r2
 81022f0:	d04a      	beq.n	8102388 <HAL_DMA_Init+0x174>
 81022f2:	687b      	ldr	r3, [r7, #4]
 81022f4:	681b      	ldr	r3, [r3, #0]
 81022f6:	4a36      	ldr	r2, [pc, #216]	; (81023d0 <HAL_DMA_Init+0x1bc>)
 81022f8:	4293      	cmp	r3, r2
 81022fa:	d045      	beq.n	8102388 <HAL_DMA_Init+0x174>
 81022fc:	687b      	ldr	r3, [r7, #4]
 81022fe:	681b      	ldr	r3, [r3, #0]
 8102300:	4a34      	ldr	r2, [pc, #208]	; (81023d4 <HAL_DMA_Init+0x1c0>)
 8102302:	4293      	cmp	r3, r2
 8102304:	d040      	beq.n	8102388 <HAL_DMA_Init+0x174>
 8102306:	687b      	ldr	r3, [r7, #4]
 8102308:	681b      	ldr	r3, [r3, #0]
 810230a:	4a33      	ldr	r2, [pc, #204]	; (81023d8 <HAL_DMA_Init+0x1c4>)
 810230c:	4293      	cmp	r3, r2
 810230e:	d03b      	beq.n	8102388 <HAL_DMA_Init+0x174>
 8102310:	687b      	ldr	r3, [r7, #4]
 8102312:	681b      	ldr	r3, [r3, #0]
 8102314:	4a31      	ldr	r2, [pc, #196]	; (81023dc <HAL_DMA_Init+0x1c8>)
 8102316:	4293      	cmp	r3, r2
 8102318:	d036      	beq.n	8102388 <HAL_DMA_Init+0x174>
 810231a:	687b      	ldr	r3, [r7, #4]
 810231c:	681b      	ldr	r3, [r3, #0]
 810231e:	4a30      	ldr	r2, [pc, #192]	; (81023e0 <HAL_DMA_Init+0x1cc>)
 8102320:	4293      	cmp	r3, r2
 8102322:	d031      	beq.n	8102388 <HAL_DMA_Init+0x174>
 8102324:	687b      	ldr	r3, [r7, #4]
 8102326:	681b      	ldr	r3, [r3, #0]
 8102328:	4a2e      	ldr	r2, [pc, #184]	; (81023e4 <HAL_DMA_Init+0x1d0>)
 810232a:	4293      	cmp	r3, r2
 810232c:	d02c      	beq.n	8102388 <HAL_DMA_Init+0x174>
 810232e:	687b      	ldr	r3, [r7, #4]
 8102330:	681b      	ldr	r3, [r3, #0]
 8102332:	4a2d      	ldr	r2, [pc, #180]	; (81023e8 <HAL_DMA_Init+0x1d4>)
 8102334:	4293      	cmp	r3, r2
 8102336:	d027      	beq.n	8102388 <HAL_DMA_Init+0x174>
 8102338:	687b      	ldr	r3, [r7, #4]
 810233a:	681b      	ldr	r3, [r3, #0]
 810233c:	4a2b      	ldr	r2, [pc, #172]	; (81023ec <HAL_DMA_Init+0x1d8>)
 810233e:	4293      	cmp	r3, r2
 8102340:	d022      	beq.n	8102388 <HAL_DMA_Init+0x174>
 8102342:	687b      	ldr	r3, [r7, #4]
 8102344:	681b      	ldr	r3, [r3, #0]
 8102346:	4a2a      	ldr	r2, [pc, #168]	; (81023f0 <HAL_DMA_Init+0x1dc>)
 8102348:	4293      	cmp	r3, r2
 810234a:	d01d      	beq.n	8102388 <HAL_DMA_Init+0x174>
 810234c:	687b      	ldr	r3, [r7, #4]
 810234e:	681b      	ldr	r3, [r3, #0]
 8102350:	4a28      	ldr	r2, [pc, #160]	; (81023f4 <HAL_DMA_Init+0x1e0>)
 8102352:	4293      	cmp	r3, r2
 8102354:	d018      	beq.n	8102388 <HAL_DMA_Init+0x174>
 8102356:	687b      	ldr	r3, [r7, #4]
 8102358:	681b      	ldr	r3, [r3, #0]
 810235a:	4a27      	ldr	r2, [pc, #156]	; (81023f8 <HAL_DMA_Init+0x1e4>)
 810235c:	4293      	cmp	r3, r2
 810235e:	d013      	beq.n	8102388 <HAL_DMA_Init+0x174>
 8102360:	687b      	ldr	r3, [r7, #4]
 8102362:	681b      	ldr	r3, [r3, #0]
 8102364:	4a25      	ldr	r2, [pc, #148]	; (81023fc <HAL_DMA_Init+0x1e8>)
 8102366:	4293      	cmp	r3, r2
 8102368:	d00e      	beq.n	8102388 <HAL_DMA_Init+0x174>
 810236a:	687b      	ldr	r3, [r7, #4]
 810236c:	681b      	ldr	r3, [r3, #0]
 810236e:	4a24      	ldr	r2, [pc, #144]	; (8102400 <HAL_DMA_Init+0x1ec>)
 8102370:	4293      	cmp	r3, r2
 8102372:	d009      	beq.n	8102388 <HAL_DMA_Init+0x174>
 8102374:	687b      	ldr	r3, [r7, #4]
 8102376:	681b      	ldr	r3, [r3, #0]
 8102378:	4a22      	ldr	r2, [pc, #136]	; (8102404 <HAL_DMA_Init+0x1f0>)
 810237a:	4293      	cmp	r3, r2
 810237c:	d004      	beq.n	8102388 <HAL_DMA_Init+0x174>
 810237e:	687b      	ldr	r3, [r7, #4]
 8102380:	681b      	ldr	r3, [r3, #0]
 8102382:	4a21      	ldr	r2, [pc, #132]	; (8102408 <HAL_DMA_Init+0x1f4>)
 8102384:	4293      	cmp	r3, r2
 8102386:	d108      	bne.n	810239a <HAL_DMA_Init+0x186>
 8102388:	687b      	ldr	r3, [r7, #4]
 810238a:	681b      	ldr	r3, [r3, #0]
 810238c:	681a      	ldr	r2, [r3, #0]
 810238e:	687b      	ldr	r3, [r7, #4]
 8102390:	681b      	ldr	r3, [r3, #0]
 8102392:	f022 0201 	bic.w	r2, r2, #1
 8102396:	601a      	str	r2, [r3, #0]
 8102398:	e007      	b.n	81023aa <HAL_DMA_Init+0x196>
 810239a:	687b      	ldr	r3, [r7, #4]
 810239c:	681b      	ldr	r3, [r3, #0]
 810239e:	681a      	ldr	r2, [r3, #0]
 81023a0:	687b      	ldr	r3, [r7, #4]
 81023a2:	681b      	ldr	r3, [r3, #0]
 81023a4:	f022 0201 	bic.w	r2, r2, #1
 81023a8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81023aa:	e02f      	b.n	810240c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 81023ac:	f7ff fe32 	bl	8102014 <HAL_GetTick>
 81023b0:	4602      	mov	r2, r0
 81023b2:	693b      	ldr	r3, [r7, #16]
 81023b4:	1ad3      	subs	r3, r2, r3
 81023b6:	2b05      	cmp	r3, #5
 81023b8:	d928      	bls.n	810240c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 81023ba:	687b      	ldr	r3, [r7, #4]
 81023bc:	2220      	movs	r2, #32
 81023be:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 81023c0:	687b      	ldr	r3, [r7, #4]
 81023c2:	2203      	movs	r2, #3
 81023c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 81023c8:	2301      	movs	r3, #1
 81023ca:	e244      	b.n	8102856 <HAL_DMA_Init+0x642>
 81023cc:	40020010 	.word	0x40020010
 81023d0:	40020028 	.word	0x40020028
 81023d4:	40020040 	.word	0x40020040
 81023d8:	40020058 	.word	0x40020058
 81023dc:	40020070 	.word	0x40020070
 81023e0:	40020088 	.word	0x40020088
 81023e4:	400200a0 	.word	0x400200a0
 81023e8:	400200b8 	.word	0x400200b8
 81023ec:	40020410 	.word	0x40020410
 81023f0:	40020428 	.word	0x40020428
 81023f4:	40020440 	.word	0x40020440
 81023f8:	40020458 	.word	0x40020458
 81023fc:	40020470 	.word	0x40020470
 8102400:	40020488 	.word	0x40020488
 8102404:	400204a0 	.word	0x400204a0
 8102408:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 810240c:	687b      	ldr	r3, [r7, #4]
 810240e:	681b      	ldr	r3, [r3, #0]
 8102410:	681b      	ldr	r3, [r3, #0]
 8102412:	f003 0301 	and.w	r3, r3, #1
 8102416:	2b00      	cmp	r3, #0
 8102418:	d1c8      	bne.n	81023ac <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 810241a:	687b      	ldr	r3, [r7, #4]
 810241c:	681b      	ldr	r3, [r3, #0]
 810241e:	681b      	ldr	r3, [r3, #0]
 8102420:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8102422:	697a      	ldr	r2, [r7, #20]
 8102424:	4b84      	ldr	r3, [pc, #528]	; (8102638 <HAL_DMA_Init+0x424>)
 8102426:	4013      	ands	r3, r2
 8102428:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 810242a:	687b      	ldr	r3, [r7, #4]
 810242c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 810242e:	687b      	ldr	r3, [r7, #4]
 8102430:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8102432:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8102434:	687b      	ldr	r3, [r7, #4]
 8102436:	691b      	ldr	r3, [r3, #16]
 8102438:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 810243a:	687b      	ldr	r3, [r7, #4]
 810243c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 810243e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8102440:	687b      	ldr	r3, [r7, #4]
 8102442:	699b      	ldr	r3, [r3, #24]
 8102444:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8102446:	687b      	ldr	r3, [r7, #4]
 8102448:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 810244a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 810244c:	687b      	ldr	r3, [r7, #4]
 810244e:	6a1b      	ldr	r3, [r3, #32]
 8102450:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8102452:	697a      	ldr	r2, [r7, #20]
 8102454:	4313      	orrs	r3, r2
 8102456:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8102458:	687b      	ldr	r3, [r7, #4]
 810245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810245c:	2b04      	cmp	r3, #4
 810245e:	d107      	bne.n	8102470 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8102460:	687b      	ldr	r3, [r7, #4]
 8102462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8102464:	687b      	ldr	r3, [r7, #4]
 8102466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102468:	4313      	orrs	r3, r2
 810246a:	697a      	ldr	r2, [r7, #20]
 810246c:	4313      	orrs	r3, r2
 810246e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8102470:	4b72      	ldr	r3, [pc, #456]	; (810263c <HAL_DMA_Init+0x428>)
 8102472:	681b      	ldr	r3, [r3, #0]
 8102474:	0c1b      	lsrs	r3, r3, #16
 8102476:	041b      	lsls	r3, r3, #16
 8102478:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810247c:	d328      	bcc.n	81024d0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 810247e:	687b      	ldr	r3, [r7, #4]
 8102480:	685b      	ldr	r3, [r3, #4]
 8102482:	2b28      	cmp	r3, #40	; 0x28
 8102484:	d903      	bls.n	810248e <HAL_DMA_Init+0x27a>
 8102486:	687b      	ldr	r3, [r7, #4]
 8102488:	685b      	ldr	r3, [r3, #4]
 810248a:	2b2e      	cmp	r3, #46	; 0x2e
 810248c:	d917      	bls.n	81024be <HAL_DMA_Init+0x2aa>
 810248e:	687b      	ldr	r3, [r7, #4]
 8102490:	685b      	ldr	r3, [r3, #4]
 8102492:	2b3e      	cmp	r3, #62	; 0x3e
 8102494:	d903      	bls.n	810249e <HAL_DMA_Init+0x28a>
 8102496:	687b      	ldr	r3, [r7, #4]
 8102498:	685b      	ldr	r3, [r3, #4]
 810249a:	2b42      	cmp	r3, #66	; 0x42
 810249c:	d90f      	bls.n	81024be <HAL_DMA_Init+0x2aa>
 810249e:	687b      	ldr	r3, [r7, #4]
 81024a0:	685b      	ldr	r3, [r3, #4]
 81024a2:	2b46      	cmp	r3, #70	; 0x46
 81024a4:	d903      	bls.n	81024ae <HAL_DMA_Init+0x29a>
 81024a6:	687b      	ldr	r3, [r7, #4]
 81024a8:	685b      	ldr	r3, [r3, #4]
 81024aa:	2b48      	cmp	r3, #72	; 0x48
 81024ac:	d907      	bls.n	81024be <HAL_DMA_Init+0x2aa>
 81024ae:	687b      	ldr	r3, [r7, #4]
 81024b0:	685b      	ldr	r3, [r3, #4]
 81024b2:	2b4e      	cmp	r3, #78	; 0x4e
 81024b4:	d905      	bls.n	81024c2 <HAL_DMA_Init+0x2ae>
 81024b6:	687b      	ldr	r3, [r7, #4]
 81024b8:	685b      	ldr	r3, [r3, #4]
 81024ba:	2b52      	cmp	r3, #82	; 0x52
 81024bc:	d801      	bhi.n	81024c2 <HAL_DMA_Init+0x2ae>
 81024be:	2301      	movs	r3, #1
 81024c0:	e000      	b.n	81024c4 <HAL_DMA_Init+0x2b0>
 81024c2:	2300      	movs	r3, #0
 81024c4:	2b00      	cmp	r3, #0
 81024c6:	d003      	beq.n	81024d0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 81024c8:	697b      	ldr	r3, [r7, #20]
 81024ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81024ce:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 81024d0:	687b      	ldr	r3, [r7, #4]
 81024d2:	681b      	ldr	r3, [r3, #0]
 81024d4:	697a      	ldr	r2, [r7, #20]
 81024d6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 81024d8:	687b      	ldr	r3, [r7, #4]
 81024da:	681b      	ldr	r3, [r3, #0]
 81024dc:	695b      	ldr	r3, [r3, #20]
 81024de:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 81024e0:	697b      	ldr	r3, [r7, #20]
 81024e2:	f023 0307 	bic.w	r3, r3, #7
 81024e6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 81024e8:	687b      	ldr	r3, [r7, #4]
 81024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81024ec:	697a      	ldr	r2, [r7, #20]
 81024ee:	4313      	orrs	r3, r2
 81024f0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 81024f2:	687b      	ldr	r3, [r7, #4]
 81024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81024f6:	2b04      	cmp	r3, #4
 81024f8:	d117      	bne.n	810252a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 81024fa:	687b      	ldr	r3, [r7, #4]
 81024fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81024fe:	697a      	ldr	r2, [r7, #20]
 8102500:	4313      	orrs	r3, r2
 8102502:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8102504:	687b      	ldr	r3, [r7, #4]
 8102506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102508:	2b00      	cmp	r3, #0
 810250a:	d00e      	beq.n	810252a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 810250c:	6878      	ldr	r0, [r7, #4]
 810250e:	f001 fbfb 	bl	8103d08 <DMA_CheckFifoParam>
 8102512:	4603      	mov	r3, r0
 8102514:	2b00      	cmp	r3, #0
 8102516:	d008      	beq.n	810252a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8102518:	687b      	ldr	r3, [r7, #4]
 810251a:	2240      	movs	r2, #64	; 0x40
 810251c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 810251e:	687b      	ldr	r3, [r7, #4]
 8102520:	2201      	movs	r2, #1
 8102522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8102526:	2301      	movs	r3, #1
 8102528:	e195      	b.n	8102856 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 810252a:	687b      	ldr	r3, [r7, #4]
 810252c:	681b      	ldr	r3, [r3, #0]
 810252e:	697a      	ldr	r2, [r7, #20]
 8102530:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8102532:	6878      	ldr	r0, [r7, #4]
 8102534:	f001 fb36 	bl	8103ba4 <DMA_CalcBaseAndBitshift>
 8102538:	4603      	mov	r3, r0
 810253a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 810253c:	687b      	ldr	r3, [r7, #4]
 810253e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102540:	f003 031f 	and.w	r3, r3, #31
 8102544:	223f      	movs	r2, #63	; 0x3f
 8102546:	409a      	lsls	r2, r3
 8102548:	68bb      	ldr	r3, [r7, #8]
 810254a:	609a      	str	r2, [r3, #8]
 810254c:	e0cb      	b.n	81026e6 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 810254e:	687b      	ldr	r3, [r7, #4]
 8102550:	681b      	ldr	r3, [r3, #0]
 8102552:	4a3b      	ldr	r2, [pc, #236]	; (8102640 <HAL_DMA_Init+0x42c>)
 8102554:	4293      	cmp	r3, r2
 8102556:	d022      	beq.n	810259e <HAL_DMA_Init+0x38a>
 8102558:	687b      	ldr	r3, [r7, #4]
 810255a:	681b      	ldr	r3, [r3, #0]
 810255c:	4a39      	ldr	r2, [pc, #228]	; (8102644 <HAL_DMA_Init+0x430>)
 810255e:	4293      	cmp	r3, r2
 8102560:	d01d      	beq.n	810259e <HAL_DMA_Init+0x38a>
 8102562:	687b      	ldr	r3, [r7, #4]
 8102564:	681b      	ldr	r3, [r3, #0]
 8102566:	4a38      	ldr	r2, [pc, #224]	; (8102648 <HAL_DMA_Init+0x434>)
 8102568:	4293      	cmp	r3, r2
 810256a:	d018      	beq.n	810259e <HAL_DMA_Init+0x38a>
 810256c:	687b      	ldr	r3, [r7, #4]
 810256e:	681b      	ldr	r3, [r3, #0]
 8102570:	4a36      	ldr	r2, [pc, #216]	; (810264c <HAL_DMA_Init+0x438>)
 8102572:	4293      	cmp	r3, r2
 8102574:	d013      	beq.n	810259e <HAL_DMA_Init+0x38a>
 8102576:	687b      	ldr	r3, [r7, #4]
 8102578:	681b      	ldr	r3, [r3, #0]
 810257a:	4a35      	ldr	r2, [pc, #212]	; (8102650 <HAL_DMA_Init+0x43c>)
 810257c:	4293      	cmp	r3, r2
 810257e:	d00e      	beq.n	810259e <HAL_DMA_Init+0x38a>
 8102580:	687b      	ldr	r3, [r7, #4]
 8102582:	681b      	ldr	r3, [r3, #0]
 8102584:	4a33      	ldr	r2, [pc, #204]	; (8102654 <HAL_DMA_Init+0x440>)
 8102586:	4293      	cmp	r3, r2
 8102588:	d009      	beq.n	810259e <HAL_DMA_Init+0x38a>
 810258a:	687b      	ldr	r3, [r7, #4]
 810258c:	681b      	ldr	r3, [r3, #0]
 810258e:	4a32      	ldr	r2, [pc, #200]	; (8102658 <HAL_DMA_Init+0x444>)
 8102590:	4293      	cmp	r3, r2
 8102592:	d004      	beq.n	810259e <HAL_DMA_Init+0x38a>
 8102594:	687b      	ldr	r3, [r7, #4]
 8102596:	681b      	ldr	r3, [r3, #0]
 8102598:	4a30      	ldr	r2, [pc, #192]	; (810265c <HAL_DMA_Init+0x448>)
 810259a:	4293      	cmp	r3, r2
 810259c:	d101      	bne.n	81025a2 <HAL_DMA_Init+0x38e>
 810259e:	2301      	movs	r3, #1
 81025a0:	e000      	b.n	81025a4 <HAL_DMA_Init+0x390>
 81025a2:	2300      	movs	r3, #0
 81025a4:	2b00      	cmp	r3, #0
 81025a6:	f000 8095 	beq.w	81026d4 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81025aa:	687b      	ldr	r3, [r7, #4]
 81025ac:	681b      	ldr	r3, [r3, #0]
 81025ae:	4a24      	ldr	r2, [pc, #144]	; (8102640 <HAL_DMA_Init+0x42c>)
 81025b0:	4293      	cmp	r3, r2
 81025b2:	d021      	beq.n	81025f8 <HAL_DMA_Init+0x3e4>
 81025b4:	687b      	ldr	r3, [r7, #4]
 81025b6:	681b      	ldr	r3, [r3, #0]
 81025b8:	4a22      	ldr	r2, [pc, #136]	; (8102644 <HAL_DMA_Init+0x430>)
 81025ba:	4293      	cmp	r3, r2
 81025bc:	d01c      	beq.n	81025f8 <HAL_DMA_Init+0x3e4>
 81025be:	687b      	ldr	r3, [r7, #4]
 81025c0:	681b      	ldr	r3, [r3, #0]
 81025c2:	4a21      	ldr	r2, [pc, #132]	; (8102648 <HAL_DMA_Init+0x434>)
 81025c4:	4293      	cmp	r3, r2
 81025c6:	d017      	beq.n	81025f8 <HAL_DMA_Init+0x3e4>
 81025c8:	687b      	ldr	r3, [r7, #4]
 81025ca:	681b      	ldr	r3, [r3, #0]
 81025cc:	4a1f      	ldr	r2, [pc, #124]	; (810264c <HAL_DMA_Init+0x438>)
 81025ce:	4293      	cmp	r3, r2
 81025d0:	d012      	beq.n	81025f8 <HAL_DMA_Init+0x3e4>
 81025d2:	687b      	ldr	r3, [r7, #4]
 81025d4:	681b      	ldr	r3, [r3, #0]
 81025d6:	4a1e      	ldr	r2, [pc, #120]	; (8102650 <HAL_DMA_Init+0x43c>)
 81025d8:	4293      	cmp	r3, r2
 81025da:	d00d      	beq.n	81025f8 <HAL_DMA_Init+0x3e4>
 81025dc:	687b      	ldr	r3, [r7, #4]
 81025de:	681b      	ldr	r3, [r3, #0]
 81025e0:	4a1c      	ldr	r2, [pc, #112]	; (8102654 <HAL_DMA_Init+0x440>)
 81025e2:	4293      	cmp	r3, r2
 81025e4:	d008      	beq.n	81025f8 <HAL_DMA_Init+0x3e4>
 81025e6:	687b      	ldr	r3, [r7, #4]
 81025e8:	681b      	ldr	r3, [r3, #0]
 81025ea:	4a1b      	ldr	r2, [pc, #108]	; (8102658 <HAL_DMA_Init+0x444>)
 81025ec:	4293      	cmp	r3, r2
 81025ee:	d003      	beq.n	81025f8 <HAL_DMA_Init+0x3e4>
 81025f0:	687b      	ldr	r3, [r7, #4]
 81025f2:	681b      	ldr	r3, [r3, #0]
 81025f4:	4a19      	ldr	r2, [pc, #100]	; (810265c <HAL_DMA_Init+0x448>)
 81025f6:	4293      	cmp	r3, r2
 81025f8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 81025fa:	687b      	ldr	r3, [r7, #4]
 81025fc:	2200      	movs	r2, #0
 81025fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8102602:	687b      	ldr	r3, [r7, #4]
 8102604:	2202      	movs	r2, #2
 8102606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 810260a:	687b      	ldr	r3, [r7, #4]
 810260c:	681b      	ldr	r3, [r3, #0]
 810260e:	681b      	ldr	r3, [r3, #0]
 8102610:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8102612:	697b      	ldr	r3, [r7, #20]
 8102614:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8102618:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 810261c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 810261e:	687b      	ldr	r3, [r7, #4]
 8102620:	689b      	ldr	r3, [r3, #8]
 8102622:	2b40      	cmp	r3, #64	; 0x40
 8102624:	d01c      	beq.n	8102660 <HAL_DMA_Init+0x44c>
 8102626:	687b      	ldr	r3, [r7, #4]
 8102628:	689b      	ldr	r3, [r3, #8]
 810262a:	2b80      	cmp	r3, #128	; 0x80
 810262c:	d102      	bne.n	8102634 <HAL_DMA_Init+0x420>
 810262e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8102632:	e016      	b.n	8102662 <HAL_DMA_Init+0x44e>
 8102634:	2300      	movs	r3, #0
 8102636:	e014      	b.n	8102662 <HAL_DMA_Init+0x44e>
 8102638:	fe10803f 	.word	0xfe10803f
 810263c:	5c001000 	.word	0x5c001000
 8102640:	58025408 	.word	0x58025408
 8102644:	5802541c 	.word	0x5802541c
 8102648:	58025430 	.word	0x58025430
 810264c:	58025444 	.word	0x58025444
 8102650:	58025458 	.word	0x58025458
 8102654:	5802546c 	.word	0x5802546c
 8102658:	58025480 	.word	0x58025480
 810265c:	58025494 	.word	0x58025494
 8102660:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8102662:	687a      	ldr	r2, [r7, #4]
 8102664:	68d2      	ldr	r2, [r2, #12]
 8102666:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8102668:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 810266a:	687b      	ldr	r3, [r7, #4]
 810266c:	691b      	ldr	r3, [r3, #16]
 810266e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8102670:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8102672:	687b      	ldr	r3, [r7, #4]
 8102674:	695b      	ldr	r3, [r3, #20]
 8102676:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8102678:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 810267a:	687b      	ldr	r3, [r7, #4]
 810267c:	699b      	ldr	r3, [r3, #24]
 810267e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8102680:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8102682:	687b      	ldr	r3, [r7, #4]
 8102684:	69db      	ldr	r3, [r3, #28]
 8102686:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8102688:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 810268a:	687b      	ldr	r3, [r7, #4]
 810268c:	6a1b      	ldr	r3, [r3, #32]
 810268e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8102690:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8102692:	697a      	ldr	r2, [r7, #20]
 8102694:	4313      	orrs	r3, r2
 8102696:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8102698:	687b      	ldr	r3, [r7, #4]
 810269a:	681b      	ldr	r3, [r3, #0]
 810269c:	697a      	ldr	r2, [r7, #20]
 810269e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 81026a0:	687b      	ldr	r3, [r7, #4]
 81026a2:	681b      	ldr	r3, [r3, #0]
 81026a4:	461a      	mov	r2, r3
 81026a6:	4b6e      	ldr	r3, [pc, #440]	; (8102860 <HAL_DMA_Init+0x64c>)
 81026a8:	4413      	add	r3, r2
 81026aa:	4a6e      	ldr	r2, [pc, #440]	; (8102864 <HAL_DMA_Init+0x650>)
 81026ac:	fba2 2303 	umull	r2, r3, r2, r3
 81026b0:	091b      	lsrs	r3, r3, #4
 81026b2:	009a      	lsls	r2, r3, #2
 81026b4:	687b      	ldr	r3, [r7, #4]
 81026b6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 81026b8:	6878      	ldr	r0, [r7, #4]
 81026ba:	f001 fa73 	bl	8103ba4 <DMA_CalcBaseAndBitshift>
 81026be:	4603      	mov	r3, r0
 81026c0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81026c2:	687b      	ldr	r3, [r7, #4]
 81026c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81026c6:	f003 031f 	and.w	r3, r3, #31
 81026ca:	2201      	movs	r2, #1
 81026cc:	409a      	lsls	r2, r3
 81026ce:	68fb      	ldr	r3, [r7, #12]
 81026d0:	605a      	str	r2, [r3, #4]
 81026d2:	e008      	b.n	81026e6 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 81026d4:	687b      	ldr	r3, [r7, #4]
 81026d6:	2240      	movs	r2, #64	; 0x40
 81026d8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 81026da:	687b      	ldr	r3, [r7, #4]
 81026dc:	2203      	movs	r2, #3
 81026de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 81026e2:	2301      	movs	r3, #1
 81026e4:	e0b7      	b.n	8102856 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81026e6:	687b      	ldr	r3, [r7, #4]
 81026e8:	681b      	ldr	r3, [r3, #0]
 81026ea:	4a5f      	ldr	r2, [pc, #380]	; (8102868 <HAL_DMA_Init+0x654>)
 81026ec:	4293      	cmp	r3, r2
 81026ee:	d072      	beq.n	81027d6 <HAL_DMA_Init+0x5c2>
 81026f0:	687b      	ldr	r3, [r7, #4]
 81026f2:	681b      	ldr	r3, [r3, #0]
 81026f4:	4a5d      	ldr	r2, [pc, #372]	; (810286c <HAL_DMA_Init+0x658>)
 81026f6:	4293      	cmp	r3, r2
 81026f8:	d06d      	beq.n	81027d6 <HAL_DMA_Init+0x5c2>
 81026fa:	687b      	ldr	r3, [r7, #4]
 81026fc:	681b      	ldr	r3, [r3, #0]
 81026fe:	4a5c      	ldr	r2, [pc, #368]	; (8102870 <HAL_DMA_Init+0x65c>)
 8102700:	4293      	cmp	r3, r2
 8102702:	d068      	beq.n	81027d6 <HAL_DMA_Init+0x5c2>
 8102704:	687b      	ldr	r3, [r7, #4]
 8102706:	681b      	ldr	r3, [r3, #0]
 8102708:	4a5a      	ldr	r2, [pc, #360]	; (8102874 <HAL_DMA_Init+0x660>)
 810270a:	4293      	cmp	r3, r2
 810270c:	d063      	beq.n	81027d6 <HAL_DMA_Init+0x5c2>
 810270e:	687b      	ldr	r3, [r7, #4]
 8102710:	681b      	ldr	r3, [r3, #0]
 8102712:	4a59      	ldr	r2, [pc, #356]	; (8102878 <HAL_DMA_Init+0x664>)
 8102714:	4293      	cmp	r3, r2
 8102716:	d05e      	beq.n	81027d6 <HAL_DMA_Init+0x5c2>
 8102718:	687b      	ldr	r3, [r7, #4]
 810271a:	681b      	ldr	r3, [r3, #0]
 810271c:	4a57      	ldr	r2, [pc, #348]	; (810287c <HAL_DMA_Init+0x668>)
 810271e:	4293      	cmp	r3, r2
 8102720:	d059      	beq.n	81027d6 <HAL_DMA_Init+0x5c2>
 8102722:	687b      	ldr	r3, [r7, #4]
 8102724:	681b      	ldr	r3, [r3, #0]
 8102726:	4a56      	ldr	r2, [pc, #344]	; (8102880 <HAL_DMA_Init+0x66c>)
 8102728:	4293      	cmp	r3, r2
 810272a:	d054      	beq.n	81027d6 <HAL_DMA_Init+0x5c2>
 810272c:	687b      	ldr	r3, [r7, #4]
 810272e:	681b      	ldr	r3, [r3, #0]
 8102730:	4a54      	ldr	r2, [pc, #336]	; (8102884 <HAL_DMA_Init+0x670>)
 8102732:	4293      	cmp	r3, r2
 8102734:	d04f      	beq.n	81027d6 <HAL_DMA_Init+0x5c2>
 8102736:	687b      	ldr	r3, [r7, #4]
 8102738:	681b      	ldr	r3, [r3, #0]
 810273a:	4a53      	ldr	r2, [pc, #332]	; (8102888 <HAL_DMA_Init+0x674>)
 810273c:	4293      	cmp	r3, r2
 810273e:	d04a      	beq.n	81027d6 <HAL_DMA_Init+0x5c2>
 8102740:	687b      	ldr	r3, [r7, #4]
 8102742:	681b      	ldr	r3, [r3, #0]
 8102744:	4a51      	ldr	r2, [pc, #324]	; (810288c <HAL_DMA_Init+0x678>)
 8102746:	4293      	cmp	r3, r2
 8102748:	d045      	beq.n	81027d6 <HAL_DMA_Init+0x5c2>
 810274a:	687b      	ldr	r3, [r7, #4]
 810274c:	681b      	ldr	r3, [r3, #0]
 810274e:	4a50      	ldr	r2, [pc, #320]	; (8102890 <HAL_DMA_Init+0x67c>)
 8102750:	4293      	cmp	r3, r2
 8102752:	d040      	beq.n	81027d6 <HAL_DMA_Init+0x5c2>
 8102754:	687b      	ldr	r3, [r7, #4]
 8102756:	681b      	ldr	r3, [r3, #0]
 8102758:	4a4e      	ldr	r2, [pc, #312]	; (8102894 <HAL_DMA_Init+0x680>)
 810275a:	4293      	cmp	r3, r2
 810275c:	d03b      	beq.n	81027d6 <HAL_DMA_Init+0x5c2>
 810275e:	687b      	ldr	r3, [r7, #4]
 8102760:	681b      	ldr	r3, [r3, #0]
 8102762:	4a4d      	ldr	r2, [pc, #308]	; (8102898 <HAL_DMA_Init+0x684>)
 8102764:	4293      	cmp	r3, r2
 8102766:	d036      	beq.n	81027d6 <HAL_DMA_Init+0x5c2>
 8102768:	687b      	ldr	r3, [r7, #4]
 810276a:	681b      	ldr	r3, [r3, #0]
 810276c:	4a4b      	ldr	r2, [pc, #300]	; (810289c <HAL_DMA_Init+0x688>)
 810276e:	4293      	cmp	r3, r2
 8102770:	d031      	beq.n	81027d6 <HAL_DMA_Init+0x5c2>
 8102772:	687b      	ldr	r3, [r7, #4]
 8102774:	681b      	ldr	r3, [r3, #0]
 8102776:	4a4a      	ldr	r2, [pc, #296]	; (81028a0 <HAL_DMA_Init+0x68c>)
 8102778:	4293      	cmp	r3, r2
 810277a:	d02c      	beq.n	81027d6 <HAL_DMA_Init+0x5c2>
 810277c:	687b      	ldr	r3, [r7, #4]
 810277e:	681b      	ldr	r3, [r3, #0]
 8102780:	4a48      	ldr	r2, [pc, #288]	; (81028a4 <HAL_DMA_Init+0x690>)
 8102782:	4293      	cmp	r3, r2
 8102784:	d027      	beq.n	81027d6 <HAL_DMA_Init+0x5c2>
 8102786:	687b      	ldr	r3, [r7, #4]
 8102788:	681b      	ldr	r3, [r3, #0]
 810278a:	4a47      	ldr	r2, [pc, #284]	; (81028a8 <HAL_DMA_Init+0x694>)
 810278c:	4293      	cmp	r3, r2
 810278e:	d022      	beq.n	81027d6 <HAL_DMA_Init+0x5c2>
 8102790:	687b      	ldr	r3, [r7, #4]
 8102792:	681b      	ldr	r3, [r3, #0]
 8102794:	4a45      	ldr	r2, [pc, #276]	; (81028ac <HAL_DMA_Init+0x698>)
 8102796:	4293      	cmp	r3, r2
 8102798:	d01d      	beq.n	81027d6 <HAL_DMA_Init+0x5c2>
 810279a:	687b      	ldr	r3, [r7, #4]
 810279c:	681b      	ldr	r3, [r3, #0]
 810279e:	4a44      	ldr	r2, [pc, #272]	; (81028b0 <HAL_DMA_Init+0x69c>)
 81027a0:	4293      	cmp	r3, r2
 81027a2:	d018      	beq.n	81027d6 <HAL_DMA_Init+0x5c2>
 81027a4:	687b      	ldr	r3, [r7, #4]
 81027a6:	681b      	ldr	r3, [r3, #0]
 81027a8:	4a42      	ldr	r2, [pc, #264]	; (81028b4 <HAL_DMA_Init+0x6a0>)
 81027aa:	4293      	cmp	r3, r2
 81027ac:	d013      	beq.n	81027d6 <HAL_DMA_Init+0x5c2>
 81027ae:	687b      	ldr	r3, [r7, #4]
 81027b0:	681b      	ldr	r3, [r3, #0]
 81027b2:	4a41      	ldr	r2, [pc, #260]	; (81028b8 <HAL_DMA_Init+0x6a4>)
 81027b4:	4293      	cmp	r3, r2
 81027b6:	d00e      	beq.n	81027d6 <HAL_DMA_Init+0x5c2>
 81027b8:	687b      	ldr	r3, [r7, #4]
 81027ba:	681b      	ldr	r3, [r3, #0]
 81027bc:	4a3f      	ldr	r2, [pc, #252]	; (81028bc <HAL_DMA_Init+0x6a8>)
 81027be:	4293      	cmp	r3, r2
 81027c0:	d009      	beq.n	81027d6 <HAL_DMA_Init+0x5c2>
 81027c2:	687b      	ldr	r3, [r7, #4]
 81027c4:	681b      	ldr	r3, [r3, #0]
 81027c6:	4a3e      	ldr	r2, [pc, #248]	; (81028c0 <HAL_DMA_Init+0x6ac>)
 81027c8:	4293      	cmp	r3, r2
 81027ca:	d004      	beq.n	81027d6 <HAL_DMA_Init+0x5c2>
 81027cc:	687b      	ldr	r3, [r7, #4]
 81027ce:	681b      	ldr	r3, [r3, #0]
 81027d0:	4a3c      	ldr	r2, [pc, #240]	; (81028c4 <HAL_DMA_Init+0x6b0>)
 81027d2:	4293      	cmp	r3, r2
 81027d4:	d101      	bne.n	81027da <HAL_DMA_Init+0x5c6>
 81027d6:	2301      	movs	r3, #1
 81027d8:	e000      	b.n	81027dc <HAL_DMA_Init+0x5c8>
 81027da:	2300      	movs	r3, #0
 81027dc:	2b00      	cmp	r3, #0
 81027de:	d032      	beq.n	8102846 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 81027e0:	6878      	ldr	r0, [r7, #4]
 81027e2:	f001 fb0d 	bl	8103e00 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 81027e6:	687b      	ldr	r3, [r7, #4]
 81027e8:	689b      	ldr	r3, [r3, #8]
 81027ea:	2b80      	cmp	r3, #128	; 0x80
 81027ec:	d102      	bne.n	81027f4 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 81027ee:	687b      	ldr	r3, [r7, #4]
 81027f0:	2200      	movs	r2, #0
 81027f2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 81027f4:	687b      	ldr	r3, [r7, #4]
 81027f6:	685a      	ldr	r2, [r3, #4]
 81027f8:	687b      	ldr	r3, [r7, #4]
 81027fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81027fc:	b2d2      	uxtb	r2, r2
 81027fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8102800:	687b      	ldr	r3, [r7, #4]
 8102802:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102804:	687a      	ldr	r2, [r7, #4]
 8102806:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8102808:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 810280a:	687b      	ldr	r3, [r7, #4]
 810280c:	685b      	ldr	r3, [r3, #4]
 810280e:	2b00      	cmp	r3, #0
 8102810:	d010      	beq.n	8102834 <HAL_DMA_Init+0x620>
 8102812:	687b      	ldr	r3, [r7, #4]
 8102814:	685b      	ldr	r3, [r3, #4]
 8102816:	2b08      	cmp	r3, #8
 8102818:	d80c      	bhi.n	8102834 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 810281a:	6878      	ldr	r0, [r7, #4]
 810281c:	f001 fb8a 	bl	8103f34 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8102820:	687b      	ldr	r3, [r7, #4]
 8102822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102824:	2200      	movs	r2, #0
 8102826:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8102828:	687b      	ldr	r3, [r7, #4]
 810282a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810282c:	687a      	ldr	r2, [r7, #4]
 810282e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8102830:	605a      	str	r2, [r3, #4]
 8102832:	e008      	b.n	8102846 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8102834:	687b      	ldr	r3, [r7, #4]
 8102836:	2200      	movs	r2, #0
 8102838:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 810283a:	687b      	ldr	r3, [r7, #4]
 810283c:	2200      	movs	r2, #0
 810283e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8102840:	687b      	ldr	r3, [r7, #4]
 8102842:	2200      	movs	r2, #0
 8102844:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8102846:	687b      	ldr	r3, [r7, #4]
 8102848:	2200      	movs	r2, #0
 810284a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 810284c:	687b      	ldr	r3, [r7, #4]
 810284e:	2201      	movs	r2, #1
 8102850:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8102854:	2300      	movs	r3, #0
}
 8102856:	4618      	mov	r0, r3
 8102858:	3718      	adds	r7, #24
 810285a:	46bd      	mov	sp, r7
 810285c:	bd80      	pop	{r7, pc}
 810285e:	bf00      	nop
 8102860:	a7fdabf8 	.word	0xa7fdabf8
 8102864:	cccccccd 	.word	0xcccccccd
 8102868:	40020010 	.word	0x40020010
 810286c:	40020028 	.word	0x40020028
 8102870:	40020040 	.word	0x40020040
 8102874:	40020058 	.word	0x40020058
 8102878:	40020070 	.word	0x40020070
 810287c:	40020088 	.word	0x40020088
 8102880:	400200a0 	.word	0x400200a0
 8102884:	400200b8 	.word	0x400200b8
 8102888:	40020410 	.word	0x40020410
 810288c:	40020428 	.word	0x40020428
 8102890:	40020440 	.word	0x40020440
 8102894:	40020458 	.word	0x40020458
 8102898:	40020470 	.word	0x40020470
 810289c:	40020488 	.word	0x40020488
 81028a0:	400204a0 	.word	0x400204a0
 81028a4:	400204b8 	.word	0x400204b8
 81028a8:	58025408 	.word	0x58025408
 81028ac:	5802541c 	.word	0x5802541c
 81028b0:	58025430 	.word	0x58025430
 81028b4:	58025444 	.word	0x58025444
 81028b8:	58025458 	.word	0x58025458
 81028bc:	5802546c 	.word	0x5802546c
 81028c0:	58025480 	.word	0x58025480
 81028c4:	58025494 	.word	0x58025494

081028c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 81028c8:	b580      	push	{r7, lr}
 81028ca:	b084      	sub	sp, #16
 81028cc:	af00      	add	r7, sp, #0
 81028ce:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81028d0:	687b      	ldr	r3, [r7, #4]
 81028d2:	2b00      	cmp	r3, #0
 81028d4:	d101      	bne.n	81028da <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 81028d6:	2301      	movs	r3, #1
 81028d8:	e205      	b.n	8102ce6 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 81028da:	687b      	ldr	r3, [r7, #4]
 81028dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81028e0:	b2db      	uxtb	r3, r3
 81028e2:	2b02      	cmp	r3, #2
 81028e4:	d004      	beq.n	81028f0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 81028e6:	687b      	ldr	r3, [r7, #4]
 81028e8:	2280      	movs	r2, #128	; 0x80
 81028ea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 81028ec:	2301      	movs	r3, #1
 81028ee:	e1fa      	b.n	8102ce6 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81028f0:	687b      	ldr	r3, [r7, #4]
 81028f2:	681b      	ldr	r3, [r3, #0]
 81028f4:	4a8c      	ldr	r2, [pc, #560]	; (8102b28 <HAL_DMA_Abort_IT+0x260>)
 81028f6:	4293      	cmp	r3, r2
 81028f8:	d04a      	beq.n	8102990 <HAL_DMA_Abort_IT+0xc8>
 81028fa:	687b      	ldr	r3, [r7, #4]
 81028fc:	681b      	ldr	r3, [r3, #0]
 81028fe:	4a8b      	ldr	r2, [pc, #556]	; (8102b2c <HAL_DMA_Abort_IT+0x264>)
 8102900:	4293      	cmp	r3, r2
 8102902:	d045      	beq.n	8102990 <HAL_DMA_Abort_IT+0xc8>
 8102904:	687b      	ldr	r3, [r7, #4]
 8102906:	681b      	ldr	r3, [r3, #0]
 8102908:	4a89      	ldr	r2, [pc, #548]	; (8102b30 <HAL_DMA_Abort_IT+0x268>)
 810290a:	4293      	cmp	r3, r2
 810290c:	d040      	beq.n	8102990 <HAL_DMA_Abort_IT+0xc8>
 810290e:	687b      	ldr	r3, [r7, #4]
 8102910:	681b      	ldr	r3, [r3, #0]
 8102912:	4a88      	ldr	r2, [pc, #544]	; (8102b34 <HAL_DMA_Abort_IT+0x26c>)
 8102914:	4293      	cmp	r3, r2
 8102916:	d03b      	beq.n	8102990 <HAL_DMA_Abort_IT+0xc8>
 8102918:	687b      	ldr	r3, [r7, #4]
 810291a:	681b      	ldr	r3, [r3, #0]
 810291c:	4a86      	ldr	r2, [pc, #536]	; (8102b38 <HAL_DMA_Abort_IT+0x270>)
 810291e:	4293      	cmp	r3, r2
 8102920:	d036      	beq.n	8102990 <HAL_DMA_Abort_IT+0xc8>
 8102922:	687b      	ldr	r3, [r7, #4]
 8102924:	681b      	ldr	r3, [r3, #0]
 8102926:	4a85      	ldr	r2, [pc, #532]	; (8102b3c <HAL_DMA_Abort_IT+0x274>)
 8102928:	4293      	cmp	r3, r2
 810292a:	d031      	beq.n	8102990 <HAL_DMA_Abort_IT+0xc8>
 810292c:	687b      	ldr	r3, [r7, #4]
 810292e:	681b      	ldr	r3, [r3, #0]
 8102930:	4a83      	ldr	r2, [pc, #524]	; (8102b40 <HAL_DMA_Abort_IT+0x278>)
 8102932:	4293      	cmp	r3, r2
 8102934:	d02c      	beq.n	8102990 <HAL_DMA_Abort_IT+0xc8>
 8102936:	687b      	ldr	r3, [r7, #4]
 8102938:	681b      	ldr	r3, [r3, #0]
 810293a:	4a82      	ldr	r2, [pc, #520]	; (8102b44 <HAL_DMA_Abort_IT+0x27c>)
 810293c:	4293      	cmp	r3, r2
 810293e:	d027      	beq.n	8102990 <HAL_DMA_Abort_IT+0xc8>
 8102940:	687b      	ldr	r3, [r7, #4]
 8102942:	681b      	ldr	r3, [r3, #0]
 8102944:	4a80      	ldr	r2, [pc, #512]	; (8102b48 <HAL_DMA_Abort_IT+0x280>)
 8102946:	4293      	cmp	r3, r2
 8102948:	d022      	beq.n	8102990 <HAL_DMA_Abort_IT+0xc8>
 810294a:	687b      	ldr	r3, [r7, #4]
 810294c:	681b      	ldr	r3, [r3, #0]
 810294e:	4a7f      	ldr	r2, [pc, #508]	; (8102b4c <HAL_DMA_Abort_IT+0x284>)
 8102950:	4293      	cmp	r3, r2
 8102952:	d01d      	beq.n	8102990 <HAL_DMA_Abort_IT+0xc8>
 8102954:	687b      	ldr	r3, [r7, #4]
 8102956:	681b      	ldr	r3, [r3, #0]
 8102958:	4a7d      	ldr	r2, [pc, #500]	; (8102b50 <HAL_DMA_Abort_IT+0x288>)
 810295a:	4293      	cmp	r3, r2
 810295c:	d018      	beq.n	8102990 <HAL_DMA_Abort_IT+0xc8>
 810295e:	687b      	ldr	r3, [r7, #4]
 8102960:	681b      	ldr	r3, [r3, #0]
 8102962:	4a7c      	ldr	r2, [pc, #496]	; (8102b54 <HAL_DMA_Abort_IT+0x28c>)
 8102964:	4293      	cmp	r3, r2
 8102966:	d013      	beq.n	8102990 <HAL_DMA_Abort_IT+0xc8>
 8102968:	687b      	ldr	r3, [r7, #4]
 810296a:	681b      	ldr	r3, [r3, #0]
 810296c:	4a7a      	ldr	r2, [pc, #488]	; (8102b58 <HAL_DMA_Abort_IT+0x290>)
 810296e:	4293      	cmp	r3, r2
 8102970:	d00e      	beq.n	8102990 <HAL_DMA_Abort_IT+0xc8>
 8102972:	687b      	ldr	r3, [r7, #4]
 8102974:	681b      	ldr	r3, [r3, #0]
 8102976:	4a79      	ldr	r2, [pc, #484]	; (8102b5c <HAL_DMA_Abort_IT+0x294>)
 8102978:	4293      	cmp	r3, r2
 810297a:	d009      	beq.n	8102990 <HAL_DMA_Abort_IT+0xc8>
 810297c:	687b      	ldr	r3, [r7, #4]
 810297e:	681b      	ldr	r3, [r3, #0]
 8102980:	4a77      	ldr	r2, [pc, #476]	; (8102b60 <HAL_DMA_Abort_IT+0x298>)
 8102982:	4293      	cmp	r3, r2
 8102984:	d004      	beq.n	8102990 <HAL_DMA_Abort_IT+0xc8>
 8102986:	687b      	ldr	r3, [r7, #4]
 8102988:	681b      	ldr	r3, [r3, #0]
 810298a:	4a76      	ldr	r2, [pc, #472]	; (8102b64 <HAL_DMA_Abort_IT+0x29c>)
 810298c:	4293      	cmp	r3, r2
 810298e:	d101      	bne.n	8102994 <HAL_DMA_Abort_IT+0xcc>
 8102990:	2301      	movs	r3, #1
 8102992:	e000      	b.n	8102996 <HAL_DMA_Abort_IT+0xce>
 8102994:	2300      	movs	r3, #0
 8102996:	2b00      	cmp	r3, #0
 8102998:	d065      	beq.n	8102a66 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 810299a:	687b      	ldr	r3, [r7, #4]
 810299c:	2204      	movs	r2, #4
 810299e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 81029a2:	687b      	ldr	r3, [r7, #4]
 81029a4:	681b      	ldr	r3, [r3, #0]
 81029a6:	4a60      	ldr	r2, [pc, #384]	; (8102b28 <HAL_DMA_Abort_IT+0x260>)
 81029a8:	4293      	cmp	r3, r2
 81029aa:	d04a      	beq.n	8102a42 <HAL_DMA_Abort_IT+0x17a>
 81029ac:	687b      	ldr	r3, [r7, #4]
 81029ae:	681b      	ldr	r3, [r3, #0]
 81029b0:	4a5e      	ldr	r2, [pc, #376]	; (8102b2c <HAL_DMA_Abort_IT+0x264>)
 81029b2:	4293      	cmp	r3, r2
 81029b4:	d045      	beq.n	8102a42 <HAL_DMA_Abort_IT+0x17a>
 81029b6:	687b      	ldr	r3, [r7, #4]
 81029b8:	681b      	ldr	r3, [r3, #0]
 81029ba:	4a5d      	ldr	r2, [pc, #372]	; (8102b30 <HAL_DMA_Abort_IT+0x268>)
 81029bc:	4293      	cmp	r3, r2
 81029be:	d040      	beq.n	8102a42 <HAL_DMA_Abort_IT+0x17a>
 81029c0:	687b      	ldr	r3, [r7, #4]
 81029c2:	681b      	ldr	r3, [r3, #0]
 81029c4:	4a5b      	ldr	r2, [pc, #364]	; (8102b34 <HAL_DMA_Abort_IT+0x26c>)
 81029c6:	4293      	cmp	r3, r2
 81029c8:	d03b      	beq.n	8102a42 <HAL_DMA_Abort_IT+0x17a>
 81029ca:	687b      	ldr	r3, [r7, #4]
 81029cc:	681b      	ldr	r3, [r3, #0]
 81029ce:	4a5a      	ldr	r2, [pc, #360]	; (8102b38 <HAL_DMA_Abort_IT+0x270>)
 81029d0:	4293      	cmp	r3, r2
 81029d2:	d036      	beq.n	8102a42 <HAL_DMA_Abort_IT+0x17a>
 81029d4:	687b      	ldr	r3, [r7, #4]
 81029d6:	681b      	ldr	r3, [r3, #0]
 81029d8:	4a58      	ldr	r2, [pc, #352]	; (8102b3c <HAL_DMA_Abort_IT+0x274>)
 81029da:	4293      	cmp	r3, r2
 81029dc:	d031      	beq.n	8102a42 <HAL_DMA_Abort_IT+0x17a>
 81029de:	687b      	ldr	r3, [r7, #4]
 81029e0:	681b      	ldr	r3, [r3, #0]
 81029e2:	4a57      	ldr	r2, [pc, #348]	; (8102b40 <HAL_DMA_Abort_IT+0x278>)
 81029e4:	4293      	cmp	r3, r2
 81029e6:	d02c      	beq.n	8102a42 <HAL_DMA_Abort_IT+0x17a>
 81029e8:	687b      	ldr	r3, [r7, #4]
 81029ea:	681b      	ldr	r3, [r3, #0]
 81029ec:	4a55      	ldr	r2, [pc, #340]	; (8102b44 <HAL_DMA_Abort_IT+0x27c>)
 81029ee:	4293      	cmp	r3, r2
 81029f0:	d027      	beq.n	8102a42 <HAL_DMA_Abort_IT+0x17a>
 81029f2:	687b      	ldr	r3, [r7, #4]
 81029f4:	681b      	ldr	r3, [r3, #0]
 81029f6:	4a54      	ldr	r2, [pc, #336]	; (8102b48 <HAL_DMA_Abort_IT+0x280>)
 81029f8:	4293      	cmp	r3, r2
 81029fa:	d022      	beq.n	8102a42 <HAL_DMA_Abort_IT+0x17a>
 81029fc:	687b      	ldr	r3, [r7, #4]
 81029fe:	681b      	ldr	r3, [r3, #0]
 8102a00:	4a52      	ldr	r2, [pc, #328]	; (8102b4c <HAL_DMA_Abort_IT+0x284>)
 8102a02:	4293      	cmp	r3, r2
 8102a04:	d01d      	beq.n	8102a42 <HAL_DMA_Abort_IT+0x17a>
 8102a06:	687b      	ldr	r3, [r7, #4]
 8102a08:	681b      	ldr	r3, [r3, #0]
 8102a0a:	4a51      	ldr	r2, [pc, #324]	; (8102b50 <HAL_DMA_Abort_IT+0x288>)
 8102a0c:	4293      	cmp	r3, r2
 8102a0e:	d018      	beq.n	8102a42 <HAL_DMA_Abort_IT+0x17a>
 8102a10:	687b      	ldr	r3, [r7, #4]
 8102a12:	681b      	ldr	r3, [r3, #0]
 8102a14:	4a4f      	ldr	r2, [pc, #316]	; (8102b54 <HAL_DMA_Abort_IT+0x28c>)
 8102a16:	4293      	cmp	r3, r2
 8102a18:	d013      	beq.n	8102a42 <HAL_DMA_Abort_IT+0x17a>
 8102a1a:	687b      	ldr	r3, [r7, #4]
 8102a1c:	681b      	ldr	r3, [r3, #0]
 8102a1e:	4a4e      	ldr	r2, [pc, #312]	; (8102b58 <HAL_DMA_Abort_IT+0x290>)
 8102a20:	4293      	cmp	r3, r2
 8102a22:	d00e      	beq.n	8102a42 <HAL_DMA_Abort_IT+0x17a>
 8102a24:	687b      	ldr	r3, [r7, #4]
 8102a26:	681b      	ldr	r3, [r3, #0]
 8102a28:	4a4c      	ldr	r2, [pc, #304]	; (8102b5c <HAL_DMA_Abort_IT+0x294>)
 8102a2a:	4293      	cmp	r3, r2
 8102a2c:	d009      	beq.n	8102a42 <HAL_DMA_Abort_IT+0x17a>
 8102a2e:	687b      	ldr	r3, [r7, #4]
 8102a30:	681b      	ldr	r3, [r3, #0]
 8102a32:	4a4b      	ldr	r2, [pc, #300]	; (8102b60 <HAL_DMA_Abort_IT+0x298>)
 8102a34:	4293      	cmp	r3, r2
 8102a36:	d004      	beq.n	8102a42 <HAL_DMA_Abort_IT+0x17a>
 8102a38:	687b      	ldr	r3, [r7, #4]
 8102a3a:	681b      	ldr	r3, [r3, #0]
 8102a3c:	4a49      	ldr	r2, [pc, #292]	; (8102b64 <HAL_DMA_Abort_IT+0x29c>)
 8102a3e:	4293      	cmp	r3, r2
 8102a40:	d108      	bne.n	8102a54 <HAL_DMA_Abort_IT+0x18c>
 8102a42:	687b      	ldr	r3, [r7, #4]
 8102a44:	681b      	ldr	r3, [r3, #0]
 8102a46:	681a      	ldr	r2, [r3, #0]
 8102a48:	687b      	ldr	r3, [r7, #4]
 8102a4a:	681b      	ldr	r3, [r3, #0]
 8102a4c:	f022 0201 	bic.w	r2, r2, #1
 8102a50:	601a      	str	r2, [r3, #0]
 8102a52:	e147      	b.n	8102ce4 <HAL_DMA_Abort_IT+0x41c>
 8102a54:	687b      	ldr	r3, [r7, #4]
 8102a56:	681b      	ldr	r3, [r3, #0]
 8102a58:	681a      	ldr	r2, [r3, #0]
 8102a5a:	687b      	ldr	r3, [r7, #4]
 8102a5c:	681b      	ldr	r3, [r3, #0]
 8102a5e:	f022 0201 	bic.w	r2, r2, #1
 8102a62:	601a      	str	r2, [r3, #0]
 8102a64:	e13e      	b.n	8102ce4 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8102a66:	687b      	ldr	r3, [r7, #4]
 8102a68:	681b      	ldr	r3, [r3, #0]
 8102a6a:	681a      	ldr	r2, [r3, #0]
 8102a6c:	687b      	ldr	r3, [r7, #4]
 8102a6e:	681b      	ldr	r3, [r3, #0]
 8102a70:	f022 020e 	bic.w	r2, r2, #14
 8102a74:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8102a76:	687b      	ldr	r3, [r7, #4]
 8102a78:	681b      	ldr	r3, [r3, #0]
 8102a7a:	4a2b      	ldr	r2, [pc, #172]	; (8102b28 <HAL_DMA_Abort_IT+0x260>)
 8102a7c:	4293      	cmp	r3, r2
 8102a7e:	d04a      	beq.n	8102b16 <HAL_DMA_Abort_IT+0x24e>
 8102a80:	687b      	ldr	r3, [r7, #4]
 8102a82:	681b      	ldr	r3, [r3, #0]
 8102a84:	4a29      	ldr	r2, [pc, #164]	; (8102b2c <HAL_DMA_Abort_IT+0x264>)
 8102a86:	4293      	cmp	r3, r2
 8102a88:	d045      	beq.n	8102b16 <HAL_DMA_Abort_IT+0x24e>
 8102a8a:	687b      	ldr	r3, [r7, #4]
 8102a8c:	681b      	ldr	r3, [r3, #0]
 8102a8e:	4a28      	ldr	r2, [pc, #160]	; (8102b30 <HAL_DMA_Abort_IT+0x268>)
 8102a90:	4293      	cmp	r3, r2
 8102a92:	d040      	beq.n	8102b16 <HAL_DMA_Abort_IT+0x24e>
 8102a94:	687b      	ldr	r3, [r7, #4]
 8102a96:	681b      	ldr	r3, [r3, #0]
 8102a98:	4a26      	ldr	r2, [pc, #152]	; (8102b34 <HAL_DMA_Abort_IT+0x26c>)
 8102a9a:	4293      	cmp	r3, r2
 8102a9c:	d03b      	beq.n	8102b16 <HAL_DMA_Abort_IT+0x24e>
 8102a9e:	687b      	ldr	r3, [r7, #4]
 8102aa0:	681b      	ldr	r3, [r3, #0]
 8102aa2:	4a25      	ldr	r2, [pc, #148]	; (8102b38 <HAL_DMA_Abort_IT+0x270>)
 8102aa4:	4293      	cmp	r3, r2
 8102aa6:	d036      	beq.n	8102b16 <HAL_DMA_Abort_IT+0x24e>
 8102aa8:	687b      	ldr	r3, [r7, #4]
 8102aaa:	681b      	ldr	r3, [r3, #0]
 8102aac:	4a23      	ldr	r2, [pc, #140]	; (8102b3c <HAL_DMA_Abort_IT+0x274>)
 8102aae:	4293      	cmp	r3, r2
 8102ab0:	d031      	beq.n	8102b16 <HAL_DMA_Abort_IT+0x24e>
 8102ab2:	687b      	ldr	r3, [r7, #4]
 8102ab4:	681b      	ldr	r3, [r3, #0]
 8102ab6:	4a22      	ldr	r2, [pc, #136]	; (8102b40 <HAL_DMA_Abort_IT+0x278>)
 8102ab8:	4293      	cmp	r3, r2
 8102aba:	d02c      	beq.n	8102b16 <HAL_DMA_Abort_IT+0x24e>
 8102abc:	687b      	ldr	r3, [r7, #4]
 8102abe:	681b      	ldr	r3, [r3, #0]
 8102ac0:	4a20      	ldr	r2, [pc, #128]	; (8102b44 <HAL_DMA_Abort_IT+0x27c>)
 8102ac2:	4293      	cmp	r3, r2
 8102ac4:	d027      	beq.n	8102b16 <HAL_DMA_Abort_IT+0x24e>
 8102ac6:	687b      	ldr	r3, [r7, #4]
 8102ac8:	681b      	ldr	r3, [r3, #0]
 8102aca:	4a1f      	ldr	r2, [pc, #124]	; (8102b48 <HAL_DMA_Abort_IT+0x280>)
 8102acc:	4293      	cmp	r3, r2
 8102ace:	d022      	beq.n	8102b16 <HAL_DMA_Abort_IT+0x24e>
 8102ad0:	687b      	ldr	r3, [r7, #4]
 8102ad2:	681b      	ldr	r3, [r3, #0]
 8102ad4:	4a1d      	ldr	r2, [pc, #116]	; (8102b4c <HAL_DMA_Abort_IT+0x284>)
 8102ad6:	4293      	cmp	r3, r2
 8102ad8:	d01d      	beq.n	8102b16 <HAL_DMA_Abort_IT+0x24e>
 8102ada:	687b      	ldr	r3, [r7, #4]
 8102adc:	681b      	ldr	r3, [r3, #0]
 8102ade:	4a1c      	ldr	r2, [pc, #112]	; (8102b50 <HAL_DMA_Abort_IT+0x288>)
 8102ae0:	4293      	cmp	r3, r2
 8102ae2:	d018      	beq.n	8102b16 <HAL_DMA_Abort_IT+0x24e>
 8102ae4:	687b      	ldr	r3, [r7, #4]
 8102ae6:	681b      	ldr	r3, [r3, #0]
 8102ae8:	4a1a      	ldr	r2, [pc, #104]	; (8102b54 <HAL_DMA_Abort_IT+0x28c>)
 8102aea:	4293      	cmp	r3, r2
 8102aec:	d013      	beq.n	8102b16 <HAL_DMA_Abort_IT+0x24e>
 8102aee:	687b      	ldr	r3, [r7, #4]
 8102af0:	681b      	ldr	r3, [r3, #0]
 8102af2:	4a19      	ldr	r2, [pc, #100]	; (8102b58 <HAL_DMA_Abort_IT+0x290>)
 8102af4:	4293      	cmp	r3, r2
 8102af6:	d00e      	beq.n	8102b16 <HAL_DMA_Abort_IT+0x24e>
 8102af8:	687b      	ldr	r3, [r7, #4]
 8102afa:	681b      	ldr	r3, [r3, #0]
 8102afc:	4a17      	ldr	r2, [pc, #92]	; (8102b5c <HAL_DMA_Abort_IT+0x294>)
 8102afe:	4293      	cmp	r3, r2
 8102b00:	d009      	beq.n	8102b16 <HAL_DMA_Abort_IT+0x24e>
 8102b02:	687b      	ldr	r3, [r7, #4]
 8102b04:	681b      	ldr	r3, [r3, #0]
 8102b06:	4a16      	ldr	r2, [pc, #88]	; (8102b60 <HAL_DMA_Abort_IT+0x298>)
 8102b08:	4293      	cmp	r3, r2
 8102b0a:	d004      	beq.n	8102b16 <HAL_DMA_Abort_IT+0x24e>
 8102b0c:	687b      	ldr	r3, [r7, #4]
 8102b0e:	681b      	ldr	r3, [r3, #0]
 8102b10:	4a14      	ldr	r2, [pc, #80]	; (8102b64 <HAL_DMA_Abort_IT+0x29c>)
 8102b12:	4293      	cmp	r3, r2
 8102b14:	d128      	bne.n	8102b68 <HAL_DMA_Abort_IT+0x2a0>
 8102b16:	687b      	ldr	r3, [r7, #4]
 8102b18:	681b      	ldr	r3, [r3, #0]
 8102b1a:	681a      	ldr	r2, [r3, #0]
 8102b1c:	687b      	ldr	r3, [r7, #4]
 8102b1e:	681b      	ldr	r3, [r3, #0]
 8102b20:	f022 0201 	bic.w	r2, r2, #1
 8102b24:	601a      	str	r2, [r3, #0]
 8102b26:	e027      	b.n	8102b78 <HAL_DMA_Abort_IT+0x2b0>
 8102b28:	40020010 	.word	0x40020010
 8102b2c:	40020028 	.word	0x40020028
 8102b30:	40020040 	.word	0x40020040
 8102b34:	40020058 	.word	0x40020058
 8102b38:	40020070 	.word	0x40020070
 8102b3c:	40020088 	.word	0x40020088
 8102b40:	400200a0 	.word	0x400200a0
 8102b44:	400200b8 	.word	0x400200b8
 8102b48:	40020410 	.word	0x40020410
 8102b4c:	40020428 	.word	0x40020428
 8102b50:	40020440 	.word	0x40020440
 8102b54:	40020458 	.word	0x40020458
 8102b58:	40020470 	.word	0x40020470
 8102b5c:	40020488 	.word	0x40020488
 8102b60:	400204a0 	.word	0x400204a0
 8102b64:	400204b8 	.word	0x400204b8
 8102b68:	687b      	ldr	r3, [r7, #4]
 8102b6a:	681b      	ldr	r3, [r3, #0]
 8102b6c:	681a      	ldr	r2, [r3, #0]
 8102b6e:	687b      	ldr	r3, [r7, #4]
 8102b70:	681b      	ldr	r3, [r3, #0]
 8102b72:	f022 0201 	bic.w	r2, r2, #1
 8102b76:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102b78:	687b      	ldr	r3, [r7, #4]
 8102b7a:	681b      	ldr	r3, [r3, #0]
 8102b7c:	4a5c      	ldr	r2, [pc, #368]	; (8102cf0 <HAL_DMA_Abort_IT+0x428>)
 8102b7e:	4293      	cmp	r3, r2
 8102b80:	d072      	beq.n	8102c68 <HAL_DMA_Abort_IT+0x3a0>
 8102b82:	687b      	ldr	r3, [r7, #4]
 8102b84:	681b      	ldr	r3, [r3, #0]
 8102b86:	4a5b      	ldr	r2, [pc, #364]	; (8102cf4 <HAL_DMA_Abort_IT+0x42c>)
 8102b88:	4293      	cmp	r3, r2
 8102b8a:	d06d      	beq.n	8102c68 <HAL_DMA_Abort_IT+0x3a0>
 8102b8c:	687b      	ldr	r3, [r7, #4]
 8102b8e:	681b      	ldr	r3, [r3, #0]
 8102b90:	4a59      	ldr	r2, [pc, #356]	; (8102cf8 <HAL_DMA_Abort_IT+0x430>)
 8102b92:	4293      	cmp	r3, r2
 8102b94:	d068      	beq.n	8102c68 <HAL_DMA_Abort_IT+0x3a0>
 8102b96:	687b      	ldr	r3, [r7, #4]
 8102b98:	681b      	ldr	r3, [r3, #0]
 8102b9a:	4a58      	ldr	r2, [pc, #352]	; (8102cfc <HAL_DMA_Abort_IT+0x434>)
 8102b9c:	4293      	cmp	r3, r2
 8102b9e:	d063      	beq.n	8102c68 <HAL_DMA_Abort_IT+0x3a0>
 8102ba0:	687b      	ldr	r3, [r7, #4]
 8102ba2:	681b      	ldr	r3, [r3, #0]
 8102ba4:	4a56      	ldr	r2, [pc, #344]	; (8102d00 <HAL_DMA_Abort_IT+0x438>)
 8102ba6:	4293      	cmp	r3, r2
 8102ba8:	d05e      	beq.n	8102c68 <HAL_DMA_Abort_IT+0x3a0>
 8102baa:	687b      	ldr	r3, [r7, #4]
 8102bac:	681b      	ldr	r3, [r3, #0]
 8102bae:	4a55      	ldr	r2, [pc, #340]	; (8102d04 <HAL_DMA_Abort_IT+0x43c>)
 8102bb0:	4293      	cmp	r3, r2
 8102bb2:	d059      	beq.n	8102c68 <HAL_DMA_Abort_IT+0x3a0>
 8102bb4:	687b      	ldr	r3, [r7, #4]
 8102bb6:	681b      	ldr	r3, [r3, #0]
 8102bb8:	4a53      	ldr	r2, [pc, #332]	; (8102d08 <HAL_DMA_Abort_IT+0x440>)
 8102bba:	4293      	cmp	r3, r2
 8102bbc:	d054      	beq.n	8102c68 <HAL_DMA_Abort_IT+0x3a0>
 8102bbe:	687b      	ldr	r3, [r7, #4]
 8102bc0:	681b      	ldr	r3, [r3, #0]
 8102bc2:	4a52      	ldr	r2, [pc, #328]	; (8102d0c <HAL_DMA_Abort_IT+0x444>)
 8102bc4:	4293      	cmp	r3, r2
 8102bc6:	d04f      	beq.n	8102c68 <HAL_DMA_Abort_IT+0x3a0>
 8102bc8:	687b      	ldr	r3, [r7, #4]
 8102bca:	681b      	ldr	r3, [r3, #0]
 8102bcc:	4a50      	ldr	r2, [pc, #320]	; (8102d10 <HAL_DMA_Abort_IT+0x448>)
 8102bce:	4293      	cmp	r3, r2
 8102bd0:	d04a      	beq.n	8102c68 <HAL_DMA_Abort_IT+0x3a0>
 8102bd2:	687b      	ldr	r3, [r7, #4]
 8102bd4:	681b      	ldr	r3, [r3, #0]
 8102bd6:	4a4f      	ldr	r2, [pc, #316]	; (8102d14 <HAL_DMA_Abort_IT+0x44c>)
 8102bd8:	4293      	cmp	r3, r2
 8102bda:	d045      	beq.n	8102c68 <HAL_DMA_Abort_IT+0x3a0>
 8102bdc:	687b      	ldr	r3, [r7, #4]
 8102bde:	681b      	ldr	r3, [r3, #0]
 8102be0:	4a4d      	ldr	r2, [pc, #308]	; (8102d18 <HAL_DMA_Abort_IT+0x450>)
 8102be2:	4293      	cmp	r3, r2
 8102be4:	d040      	beq.n	8102c68 <HAL_DMA_Abort_IT+0x3a0>
 8102be6:	687b      	ldr	r3, [r7, #4]
 8102be8:	681b      	ldr	r3, [r3, #0]
 8102bea:	4a4c      	ldr	r2, [pc, #304]	; (8102d1c <HAL_DMA_Abort_IT+0x454>)
 8102bec:	4293      	cmp	r3, r2
 8102bee:	d03b      	beq.n	8102c68 <HAL_DMA_Abort_IT+0x3a0>
 8102bf0:	687b      	ldr	r3, [r7, #4]
 8102bf2:	681b      	ldr	r3, [r3, #0]
 8102bf4:	4a4a      	ldr	r2, [pc, #296]	; (8102d20 <HAL_DMA_Abort_IT+0x458>)
 8102bf6:	4293      	cmp	r3, r2
 8102bf8:	d036      	beq.n	8102c68 <HAL_DMA_Abort_IT+0x3a0>
 8102bfa:	687b      	ldr	r3, [r7, #4]
 8102bfc:	681b      	ldr	r3, [r3, #0]
 8102bfe:	4a49      	ldr	r2, [pc, #292]	; (8102d24 <HAL_DMA_Abort_IT+0x45c>)
 8102c00:	4293      	cmp	r3, r2
 8102c02:	d031      	beq.n	8102c68 <HAL_DMA_Abort_IT+0x3a0>
 8102c04:	687b      	ldr	r3, [r7, #4]
 8102c06:	681b      	ldr	r3, [r3, #0]
 8102c08:	4a47      	ldr	r2, [pc, #284]	; (8102d28 <HAL_DMA_Abort_IT+0x460>)
 8102c0a:	4293      	cmp	r3, r2
 8102c0c:	d02c      	beq.n	8102c68 <HAL_DMA_Abort_IT+0x3a0>
 8102c0e:	687b      	ldr	r3, [r7, #4]
 8102c10:	681b      	ldr	r3, [r3, #0]
 8102c12:	4a46      	ldr	r2, [pc, #280]	; (8102d2c <HAL_DMA_Abort_IT+0x464>)
 8102c14:	4293      	cmp	r3, r2
 8102c16:	d027      	beq.n	8102c68 <HAL_DMA_Abort_IT+0x3a0>
 8102c18:	687b      	ldr	r3, [r7, #4]
 8102c1a:	681b      	ldr	r3, [r3, #0]
 8102c1c:	4a44      	ldr	r2, [pc, #272]	; (8102d30 <HAL_DMA_Abort_IT+0x468>)
 8102c1e:	4293      	cmp	r3, r2
 8102c20:	d022      	beq.n	8102c68 <HAL_DMA_Abort_IT+0x3a0>
 8102c22:	687b      	ldr	r3, [r7, #4]
 8102c24:	681b      	ldr	r3, [r3, #0]
 8102c26:	4a43      	ldr	r2, [pc, #268]	; (8102d34 <HAL_DMA_Abort_IT+0x46c>)
 8102c28:	4293      	cmp	r3, r2
 8102c2a:	d01d      	beq.n	8102c68 <HAL_DMA_Abort_IT+0x3a0>
 8102c2c:	687b      	ldr	r3, [r7, #4]
 8102c2e:	681b      	ldr	r3, [r3, #0]
 8102c30:	4a41      	ldr	r2, [pc, #260]	; (8102d38 <HAL_DMA_Abort_IT+0x470>)
 8102c32:	4293      	cmp	r3, r2
 8102c34:	d018      	beq.n	8102c68 <HAL_DMA_Abort_IT+0x3a0>
 8102c36:	687b      	ldr	r3, [r7, #4]
 8102c38:	681b      	ldr	r3, [r3, #0]
 8102c3a:	4a40      	ldr	r2, [pc, #256]	; (8102d3c <HAL_DMA_Abort_IT+0x474>)
 8102c3c:	4293      	cmp	r3, r2
 8102c3e:	d013      	beq.n	8102c68 <HAL_DMA_Abort_IT+0x3a0>
 8102c40:	687b      	ldr	r3, [r7, #4]
 8102c42:	681b      	ldr	r3, [r3, #0]
 8102c44:	4a3e      	ldr	r2, [pc, #248]	; (8102d40 <HAL_DMA_Abort_IT+0x478>)
 8102c46:	4293      	cmp	r3, r2
 8102c48:	d00e      	beq.n	8102c68 <HAL_DMA_Abort_IT+0x3a0>
 8102c4a:	687b      	ldr	r3, [r7, #4]
 8102c4c:	681b      	ldr	r3, [r3, #0]
 8102c4e:	4a3d      	ldr	r2, [pc, #244]	; (8102d44 <HAL_DMA_Abort_IT+0x47c>)
 8102c50:	4293      	cmp	r3, r2
 8102c52:	d009      	beq.n	8102c68 <HAL_DMA_Abort_IT+0x3a0>
 8102c54:	687b      	ldr	r3, [r7, #4]
 8102c56:	681b      	ldr	r3, [r3, #0]
 8102c58:	4a3b      	ldr	r2, [pc, #236]	; (8102d48 <HAL_DMA_Abort_IT+0x480>)
 8102c5a:	4293      	cmp	r3, r2
 8102c5c:	d004      	beq.n	8102c68 <HAL_DMA_Abort_IT+0x3a0>
 8102c5e:	687b      	ldr	r3, [r7, #4]
 8102c60:	681b      	ldr	r3, [r3, #0]
 8102c62:	4a3a      	ldr	r2, [pc, #232]	; (8102d4c <HAL_DMA_Abort_IT+0x484>)
 8102c64:	4293      	cmp	r3, r2
 8102c66:	d101      	bne.n	8102c6c <HAL_DMA_Abort_IT+0x3a4>
 8102c68:	2301      	movs	r3, #1
 8102c6a:	e000      	b.n	8102c6e <HAL_DMA_Abort_IT+0x3a6>
 8102c6c:	2300      	movs	r3, #0
 8102c6e:	2b00      	cmp	r3, #0
 8102c70:	d028      	beq.n	8102cc4 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8102c72:	687b      	ldr	r3, [r7, #4]
 8102c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102c76:	681a      	ldr	r2, [r3, #0]
 8102c78:	687b      	ldr	r3, [r7, #4]
 8102c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102c7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8102c80:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8102c82:	687b      	ldr	r3, [r7, #4]
 8102c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102c86:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8102c88:	687b      	ldr	r3, [r7, #4]
 8102c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102c8c:	f003 031f 	and.w	r3, r3, #31
 8102c90:	2201      	movs	r2, #1
 8102c92:	409a      	lsls	r2, r3
 8102c94:	68fb      	ldr	r3, [r7, #12]
 8102c96:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8102c98:	687b      	ldr	r3, [r7, #4]
 8102c9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102c9c:	687a      	ldr	r2, [r7, #4]
 8102c9e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8102ca0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8102ca2:	687b      	ldr	r3, [r7, #4]
 8102ca4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102ca6:	2b00      	cmp	r3, #0
 8102ca8:	d00c      	beq.n	8102cc4 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8102caa:	687b      	ldr	r3, [r7, #4]
 8102cac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102cae:	681a      	ldr	r2, [r3, #0]
 8102cb0:	687b      	ldr	r3, [r7, #4]
 8102cb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102cb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8102cb8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8102cba:	687b      	ldr	r3, [r7, #4]
 8102cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102cbe:	687a      	ldr	r2, [r7, #4]
 8102cc0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8102cc2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8102cc4:	687b      	ldr	r3, [r7, #4]
 8102cc6:	2200      	movs	r2, #0
 8102cc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8102ccc:	687b      	ldr	r3, [r7, #4]
 8102cce:	2201      	movs	r2, #1
 8102cd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8102cd4:	687b      	ldr	r3, [r7, #4]
 8102cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102cd8:	2b00      	cmp	r3, #0
 8102cda:	d003      	beq.n	8102ce4 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8102cdc:	687b      	ldr	r3, [r7, #4]
 8102cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102ce0:	6878      	ldr	r0, [r7, #4]
 8102ce2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8102ce4:	2300      	movs	r3, #0
}
 8102ce6:	4618      	mov	r0, r3
 8102ce8:	3710      	adds	r7, #16
 8102cea:	46bd      	mov	sp, r7
 8102cec:	bd80      	pop	{r7, pc}
 8102cee:	bf00      	nop
 8102cf0:	40020010 	.word	0x40020010
 8102cf4:	40020028 	.word	0x40020028
 8102cf8:	40020040 	.word	0x40020040
 8102cfc:	40020058 	.word	0x40020058
 8102d00:	40020070 	.word	0x40020070
 8102d04:	40020088 	.word	0x40020088
 8102d08:	400200a0 	.word	0x400200a0
 8102d0c:	400200b8 	.word	0x400200b8
 8102d10:	40020410 	.word	0x40020410
 8102d14:	40020428 	.word	0x40020428
 8102d18:	40020440 	.word	0x40020440
 8102d1c:	40020458 	.word	0x40020458
 8102d20:	40020470 	.word	0x40020470
 8102d24:	40020488 	.word	0x40020488
 8102d28:	400204a0 	.word	0x400204a0
 8102d2c:	400204b8 	.word	0x400204b8
 8102d30:	58025408 	.word	0x58025408
 8102d34:	5802541c 	.word	0x5802541c
 8102d38:	58025430 	.word	0x58025430
 8102d3c:	58025444 	.word	0x58025444
 8102d40:	58025458 	.word	0x58025458
 8102d44:	5802546c 	.word	0x5802546c
 8102d48:	58025480 	.word	0x58025480
 8102d4c:	58025494 	.word	0x58025494

08102d50 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8102d50:	b580      	push	{r7, lr}
 8102d52:	b08a      	sub	sp, #40	; 0x28
 8102d54:	af00      	add	r7, sp, #0
 8102d56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8102d58:	2300      	movs	r3, #0
 8102d5a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8102d5c:	4b67      	ldr	r3, [pc, #412]	; (8102efc <HAL_DMA_IRQHandler+0x1ac>)
 8102d5e:	681b      	ldr	r3, [r3, #0]
 8102d60:	4a67      	ldr	r2, [pc, #412]	; (8102f00 <HAL_DMA_IRQHandler+0x1b0>)
 8102d62:	fba2 2303 	umull	r2, r3, r2, r3
 8102d66:	0a9b      	lsrs	r3, r3, #10
 8102d68:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8102d6a:	687b      	ldr	r3, [r7, #4]
 8102d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102d6e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8102d70:	687b      	ldr	r3, [r7, #4]
 8102d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102d74:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8102d76:	6a3b      	ldr	r3, [r7, #32]
 8102d78:	681b      	ldr	r3, [r3, #0]
 8102d7a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8102d7c:	69fb      	ldr	r3, [r7, #28]
 8102d7e:	681b      	ldr	r3, [r3, #0]
 8102d80:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8102d82:	687b      	ldr	r3, [r7, #4]
 8102d84:	681b      	ldr	r3, [r3, #0]
 8102d86:	4a5f      	ldr	r2, [pc, #380]	; (8102f04 <HAL_DMA_IRQHandler+0x1b4>)
 8102d88:	4293      	cmp	r3, r2
 8102d8a:	d04a      	beq.n	8102e22 <HAL_DMA_IRQHandler+0xd2>
 8102d8c:	687b      	ldr	r3, [r7, #4]
 8102d8e:	681b      	ldr	r3, [r3, #0]
 8102d90:	4a5d      	ldr	r2, [pc, #372]	; (8102f08 <HAL_DMA_IRQHandler+0x1b8>)
 8102d92:	4293      	cmp	r3, r2
 8102d94:	d045      	beq.n	8102e22 <HAL_DMA_IRQHandler+0xd2>
 8102d96:	687b      	ldr	r3, [r7, #4]
 8102d98:	681b      	ldr	r3, [r3, #0]
 8102d9a:	4a5c      	ldr	r2, [pc, #368]	; (8102f0c <HAL_DMA_IRQHandler+0x1bc>)
 8102d9c:	4293      	cmp	r3, r2
 8102d9e:	d040      	beq.n	8102e22 <HAL_DMA_IRQHandler+0xd2>
 8102da0:	687b      	ldr	r3, [r7, #4]
 8102da2:	681b      	ldr	r3, [r3, #0]
 8102da4:	4a5a      	ldr	r2, [pc, #360]	; (8102f10 <HAL_DMA_IRQHandler+0x1c0>)
 8102da6:	4293      	cmp	r3, r2
 8102da8:	d03b      	beq.n	8102e22 <HAL_DMA_IRQHandler+0xd2>
 8102daa:	687b      	ldr	r3, [r7, #4]
 8102dac:	681b      	ldr	r3, [r3, #0]
 8102dae:	4a59      	ldr	r2, [pc, #356]	; (8102f14 <HAL_DMA_IRQHandler+0x1c4>)
 8102db0:	4293      	cmp	r3, r2
 8102db2:	d036      	beq.n	8102e22 <HAL_DMA_IRQHandler+0xd2>
 8102db4:	687b      	ldr	r3, [r7, #4]
 8102db6:	681b      	ldr	r3, [r3, #0]
 8102db8:	4a57      	ldr	r2, [pc, #348]	; (8102f18 <HAL_DMA_IRQHandler+0x1c8>)
 8102dba:	4293      	cmp	r3, r2
 8102dbc:	d031      	beq.n	8102e22 <HAL_DMA_IRQHandler+0xd2>
 8102dbe:	687b      	ldr	r3, [r7, #4]
 8102dc0:	681b      	ldr	r3, [r3, #0]
 8102dc2:	4a56      	ldr	r2, [pc, #344]	; (8102f1c <HAL_DMA_IRQHandler+0x1cc>)
 8102dc4:	4293      	cmp	r3, r2
 8102dc6:	d02c      	beq.n	8102e22 <HAL_DMA_IRQHandler+0xd2>
 8102dc8:	687b      	ldr	r3, [r7, #4]
 8102dca:	681b      	ldr	r3, [r3, #0]
 8102dcc:	4a54      	ldr	r2, [pc, #336]	; (8102f20 <HAL_DMA_IRQHandler+0x1d0>)
 8102dce:	4293      	cmp	r3, r2
 8102dd0:	d027      	beq.n	8102e22 <HAL_DMA_IRQHandler+0xd2>
 8102dd2:	687b      	ldr	r3, [r7, #4]
 8102dd4:	681b      	ldr	r3, [r3, #0]
 8102dd6:	4a53      	ldr	r2, [pc, #332]	; (8102f24 <HAL_DMA_IRQHandler+0x1d4>)
 8102dd8:	4293      	cmp	r3, r2
 8102dda:	d022      	beq.n	8102e22 <HAL_DMA_IRQHandler+0xd2>
 8102ddc:	687b      	ldr	r3, [r7, #4]
 8102dde:	681b      	ldr	r3, [r3, #0]
 8102de0:	4a51      	ldr	r2, [pc, #324]	; (8102f28 <HAL_DMA_IRQHandler+0x1d8>)
 8102de2:	4293      	cmp	r3, r2
 8102de4:	d01d      	beq.n	8102e22 <HAL_DMA_IRQHandler+0xd2>
 8102de6:	687b      	ldr	r3, [r7, #4]
 8102de8:	681b      	ldr	r3, [r3, #0]
 8102dea:	4a50      	ldr	r2, [pc, #320]	; (8102f2c <HAL_DMA_IRQHandler+0x1dc>)
 8102dec:	4293      	cmp	r3, r2
 8102dee:	d018      	beq.n	8102e22 <HAL_DMA_IRQHandler+0xd2>
 8102df0:	687b      	ldr	r3, [r7, #4]
 8102df2:	681b      	ldr	r3, [r3, #0]
 8102df4:	4a4e      	ldr	r2, [pc, #312]	; (8102f30 <HAL_DMA_IRQHandler+0x1e0>)
 8102df6:	4293      	cmp	r3, r2
 8102df8:	d013      	beq.n	8102e22 <HAL_DMA_IRQHandler+0xd2>
 8102dfa:	687b      	ldr	r3, [r7, #4]
 8102dfc:	681b      	ldr	r3, [r3, #0]
 8102dfe:	4a4d      	ldr	r2, [pc, #308]	; (8102f34 <HAL_DMA_IRQHandler+0x1e4>)
 8102e00:	4293      	cmp	r3, r2
 8102e02:	d00e      	beq.n	8102e22 <HAL_DMA_IRQHandler+0xd2>
 8102e04:	687b      	ldr	r3, [r7, #4]
 8102e06:	681b      	ldr	r3, [r3, #0]
 8102e08:	4a4b      	ldr	r2, [pc, #300]	; (8102f38 <HAL_DMA_IRQHandler+0x1e8>)
 8102e0a:	4293      	cmp	r3, r2
 8102e0c:	d009      	beq.n	8102e22 <HAL_DMA_IRQHandler+0xd2>
 8102e0e:	687b      	ldr	r3, [r7, #4]
 8102e10:	681b      	ldr	r3, [r3, #0]
 8102e12:	4a4a      	ldr	r2, [pc, #296]	; (8102f3c <HAL_DMA_IRQHandler+0x1ec>)
 8102e14:	4293      	cmp	r3, r2
 8102e16:	d004      	beq.n	8102e22 <HAL_DMA_IRQHandler+0xd2>
 8102e18:	687b      	ldr	r3, [r7, #4]
 8102e1a:	681b      	ldr	r3, [r3, #0]
 8102e1c:	4a48      	ldr	r2, [pc, #288]	; (8102f40 <HAL_DMA_IRQHandler+0x1f0>)
 8102e1e:	4293      	cmp	r3, r2
 8102e20:	d101      	bne.n	8102e26 <HAL_DMA_IRQHandler+0xd6>
 8102e22:	2301      	movs	r3, #1
 8102e24:	e000      	b.n	8102e28 <HAL_DMA_IRQHandler+0xd8>
 8102e26:	2300      	movs	r3, #0
 8102e28:	2b00      	cmp	r3, #0
 8102e2a:	f000 842b 	beq.w	8103684 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8102e2e:	687b      	ldr	r3, [r7, #4]
 8102e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102e32:	f003 031f 	and.w	r3, r3, #31
 8102e36:	2208      	movs	r2, #8
 8102e38:	409a      	lsls	r2, r3
 8102e3a:	69bb      	ldr	r3, [r7, #24]
 8102e3c:	4013      	ands	r3, r2
 8102e3e:	2b00      	cmp	r3, #0
 8102e40:	f000 80a2 	beq.w	8102f88 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8102e44:	687b      	ldr	r3, [r7, #4]
 8102e46:	681b      	ldr	r3, [r3, #0]
 8102e48:	4a2e      	ldr	r2, [pc, #184]	; (8102f04 <HAL_DMA_IRQHandler+0x1b4>)
 8102e4a:	4293      	cmp	r3, r2
 8102e4c:	d04a      	beq.n	8102ee4 <HAL_DMA_IRQHandler+0x194>
 8102e4e:	687b      	ldr	r3, [r7, #4]
 8102e50:	681b      	ldr	r3, [r3, #0]
 8102e52:	4a2d      	ldr	r2, [pc, #180]	; (8102f08 <HAL_DMA_IRQHandler+0x1b8>)
 8102e54:	4293      	cmp	r3, r2
 8102e56:	d045      	beq.n	8102ee4 <HAL_DMA_IRQHandler+0x194>
 8102e58:	687b      	ldr	r3, [r7, #4]
 8102e5a:	681b      	ldr	r3, [r3, #0]
 8102e5c:	4a2b      	ldr	r2, [pc, #172]	; (8102f0c <HAL_DMA_IRQHandler+0x1bc>)
 8102e5e:	4293      	cmp	r3, r2
 8102e60:	d040      	beq.n	8102ee4 <HAL_DMA_IRQHandler+0x194>
 8102e62:	687b      	ldr	r3, [r7, #4]
 8102e64:	681b      	ldr	r3, [r3, #0]
 8102e66:	4a2a      	ldr	r2, [pc, #168]	; (8102f10 <HAL_DMA_IRQHandler+0x1c0>)
 8102e68:	4293      	cmp	r3, r2
 8102e6a:	d03b      	beq.n	8102ee4 <HAL_DMA_IRQHandler+0x194>
 8102e6c:	687b      	ldr	r3, [r7, #4]
 8102e6e:	681b      	ldr	r3, [r3, #0]
 8102e70:	4a28      	ldr	r2, [pc, #160]	; (8102f14 <HAL_DMA_IRQHandler+0x1c4>)
 8102e72:	4293      	cmp	r3, r2
 8102e74:	d036      	beq.n	8102ee4 <HAL_DMA_IRQHandler+0x194>
 8102e76:	687b      	ldr	r3, [r7, #4]
 8102e78:	681b      	ldr	r3, [r3, #0]
 8102e7a:	4a27      	ldr	r2, [pc, #156]	; (8102f18 <HAL_DMA_IRQHandler+0x1c8>)
 8102e7c:	4293      	cmp	r3, r2
 8102e7e:	d031      	beq.n	8102ee4 <HAL_DMA_IRQHandler+0x194>
 8102e80:	687b      	ldr	r3, [r7, #4]
 8102e82:	681b      	ldr	r3, [r3, #0]
 8102e84:	4a25      	ldr	r2, [pc, #148]	; (8102f1c <HAL_DMA_IRQHandler+0x1cc>)
 8102e86:	4293      	cmp	r3, r2
 8102e88:	d02c      	beq.n	8102ee4 <HAL_DMA_IRQHandler+0x194>
 8102e8a:	687b      	ldr	r3, [r7, #4]
 8102e8c:	681b      	ldr	r3, [r3, #0]
 8102e8e:	4a24      	ldr	r2, [pc, #144]	; (8102f20 <HAL_DMA_IRQHandler+0x1d0>)
 8102e90:	4293      	cmp	r3, r2
 8102e92:	d027      	beq.n	8102ee4 <HAL_DMA_IRQHandler+0x194>
 8102e94:	687b      	ldr	r3, [r7, #4]
 8102e96:	681b      	ldr	r3, [r3, #0]
 8102e98:	4a22      	ldr	r2, [pc, #136]	; (8102f24 <HAL_DMA_IRQHandler+0x1d4>)
 8102e9a:	4293      	cmp	r3, r2
 8102e9c:	d022      	beq.n	8102ee4 <HAL_DMA_IRQHandler+0x194>
 8102e9e:	687b      	ldr	r3, [r7, #4]
 8102ea0:	681b      	ldr	r3, [r3, #0]
 8102ea2:	4a21      	ldr	r2, [pc, #132]	; (8102f28 <HAL_DMA_IRQHandler+0x1d8>)
 8102ea4:	4293      	cmp	r3, r2
 8102ea6:	d01d      	beq.n	8102ee4 <HAL_DMA_IRQHandler+0x194>
 8102ea8:	687b      	ldr	r3, [r7, #4]
 8102eaa:	681b      	ldr	r3, [r3, #0]
 8102eac:	4a1f      	ldr	r2, [pc, #124]	; (8102f2c <HAL_DMA_IRQHandler+0x1dc>)
 8102eae:	4293      	cmp	r3, r2
 8102eb0:	d018      	beq.n	8102ee4 <HAL_DMA_IRQHandler+0x194>
 8102eb2:	687b      	ldr	r3, [r7, #4]
 8102eb4:	681b      	ldr	r3, [r3, #0]
 8102eb6:	4a1e      	ldr	r2, [pc, #120]	; (8102f30 <HAL_DMA_IRQHandler+0x1e0>)
 8102eb8:	4293      	cmp	r3, r2
 8102eba:	d013      	beq.n	8102ee4 <HAL_DMA_IRQHandler+0x194>
 8102ebc:	687b      	ldr	r3, [r7, #4]
 8102ebe:	681b      	ldr	r3, [r3, #0]
 8102ec0:	4a1c      	ldr	r2, [pc, #112]	; (8102f34 <HAL_DMA_IRQHandler+0x1e4>)
 8102ec2:	4293      	cmp	r3, r2
 8102ec4:	d00e      	beq.n	8102ee4 <HAL_DMA_IRQHandler+0x194>
 8102ec6:	687b      	ldr	r3, [r7, #4]
 8102ec8:	681b      	ldr	r3, [r3, #0]
 8102eca:	4a1b      	ldr	r2, [pc, #108]	; (8102f38 <HAL_DMA_IRQHandler+0x1e8>)
 8102ecc:	4293      	cmp	r3, r2
 8102ece:	d009      	beq.n	8102ee4 <HAL_DMA_IRQHandler+0x194>
 8102ed0:	687b      	ldr	r3, [r7, #4]
 8102ed2:	681b      	ldr	r3, [r3, #0]
 8102ed4:	4a19      	ldr	r2, [pc, #100]	; (8102f3c <HAL_DMA_IRQHandler+0x1ec>)
 8102ed6:	4293      	cmp	r3, r2
 8102ed8:	d004      	beq.n	8102ee4 <HAL_DMA_IRQHandler+0x194>
 8102eda:	687b      	ldr	r3, [r7, #4]
 8102edc:	681b      	ldr	r3, [r3, #0]
 8102ede:	4a18      	ldr	r2, [pc, #96]	; (8102f40 <HAL_DMA_IRQHandler+0x1f0>)
 8102ee0:	4293      	cmp	r3, r2
 8102ee2:	d12f      	bne.n	8102f44 <HAL_DMA_IRQHandler+0x1f4>
 8102ee4:	687b      	ldr	r3, [r7, #4]
 8102ee6:	681b      	ldr	r3, [r3, #0]
 8102ee8:	681b      	ldr	r3, [r3, #0]
 8102eea:	f003 0304 	and.w	r3, r3, #4
 8102eee:	2b00      	cmp	r3, #0
 8102ef0:	bf14      	ite	ne
 8102ef2:	2301      	movne	r3, #1
 8102ef4:	2300      	moveq	r3, #0
 8102ef6:	b2db      	uxtb	r3, r3
 8102ef8:	e02e      	b.n	8102f58 <HAL_DMA_IRQHandler+0x208>
 8102efa:	bf00      	nop
 8102efc:	10000000 	.word	0x10000000
 8102f00:	1b4e81b5 	.word	0x1b4e81b5
 8102f04:	40020010 	.word	0x40020010
 8102f08:	40020028 	.word	0x40020028
 8102f0c:	40020040 	.word	0x40020040
 8102f10:	40020058 	.word	0x40020058
 8102f14:	40020070 	.word	0x40020070
 8102f18:	40020088 	.word	0x40020088
 8102f1c:	400200a0 	.word	0x400200a0
 8102f20:	400200b8 	.word	0x400200b8
 8102f24:	40020410 	.word	0x40020410
 8102f28:	40020428 	.word	0x40020428
 8102f2c:	40020440 	.word	0x40020440
 8102f30:	40020458 	.word	0x40020458
 8102f34:	40020470 	.word	0x40020470
 8102f38:	40020488 	.word	0x40020488
 8102f3c:	400204a0 	.word	0x400204a0
 8102f40:	400204b8 	.word	0x400204b8
 8102f44:	687b      	ldr	r3, [r7, #4]
 8102f46:	681b      	ldr	r3, [r3, #0]
 8102f48:	681b      	ldr	r3, [r3, #0]
 8102f4a:	f003 0308 	and.w	r3, r3, #8
 8102f4e:	2b00      	cmp	r3, #0
 8102f50:	bf14      	ite	ne
 8102f52:	2301      	movne	r3, #1
 8102f54:	2300      	moveq	r3, #0
 8102f56:	b2db      	uxtb	r3, r3
 8102f58:	2b00      	cmp	r3, #0
 8102f5a:	d015      	beq.n	8102f88 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8102f5c:	687b      	ldr	r3, [r7, #4]
 8102f5e:	681b      	ldr	r3, [r3, #0]
 8102f60:	681a      	ldr	r2, [r3, #0]
 8102f62:	687b      	ldr	r3, [r7, #4]
 8102f64:	681b      	ldr	r3, [r3, #0]
 8102f66:	f022 0204 	bic.w	r2, r2, #4
 8102f6a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8102f6c:	687b      	ldr	r3, [r7, #4]
 8102f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102f70:	f003 031f 	and.w	r3, r3, #31
 8102f74:	2208      	movs	r2, #8
 8102f76:	409a      	lsls	r2, r3
 8102f78:	6a3b      	ldr	r3, [r7, #32]
 8102f7a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8102f7c:	687b      	ldr	r3, [r7, #4]
 8102f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102f80:	f043 0201 	orr.w	r2, r3, #1
 8102f84:	687b      	ldr	r3, [r7, #4]
 8102f86:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8102f88:	687b      	ldr	r3, [r7, #4]
 8102f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102f8c:	f003 031f 	and.w	r3, r3, #31
 8102f90:	69ba      	ldr	r2, [r7, #24]
 8102f92:	fa22 f303 	lsr.w	r3, r2, r3
 8102f96:	f003 0301 	and.w	r3, r3, #1
 8102f9a:	2b00      	cmp	r3, #0
 8102f9c:	d06e      	beq.n	810307c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8102f9e:	687b      	ldr	r3, [r7, #4]
 8102fa0:	681b      	ldr	r3, [r3, #0]
 8102fa2:	4a69      	ldr	r2, [pc, #420]	; (8103148 <HAL_DMA_IRQHandler+0x3f8>)
 8102fa4:	4293      	cmp	r3, r2
 8102fa6:	d04a      	beq.n	810303e <HAL_DMA_IRQHandler+0x2ee>
 8102fa8:	687b      	ldr	r3, [r7, #4]
 8102faa:	681b      	ldr	r3, [r3, #0]
 8102fac:	4a67      	ldr	r2, [pc, #412]	; (810314c <HAL_DMA_IRQHandler+0x3fc>)
 8102fae:	4293      	cmp	r3, r2
 8102fb0:	d045      	beq.n	810303e <HAL_DMA_IRQHandler+0x2ee>
 8102fb2:	687b      	ldr	r3, [r7, #4]
 8102fb4:	681b      	ldr	r3, [r3, #0]
 8102fb6:	4a66      	ldr	r2, [pc, #408]	; (8103150 <HAL_DMA_IRQHandler+0x400>)
 8102fb8:	4293      	cmp	r3, r2
 8102fba:	d040      	beq.n	810303e <HAL_DMA_IRQHandler+0x2ee>
 8102fbc:	687b      	ldr	r3, [r7, #4]
 8102fbe:	681b      	ldr	r3, [r3, #0]
 8102fc0:	4a64      	ldr	r2, [pc, #400]	; (8103154 <HAL_DMA_IRQHandler+0x404>)
 8102fc2:	4293      	cmp	r3, r2
 8102fc4:	d03b      	beq.n	810303e <HAL_DMA_IRQHandler+0x2ee>
 8102fc6:	687b      	ldr	r3, [r7, #4]
 8102fc8:	681b      	ldr	r3, [r3, #0]
 8102fca:	4a63      	ldr	r2, [pc, #396]	; (8103158 <HAL_DMA_IRQHandler+0x408>)
 8102fcc:	4293      	cmp	r3, r2
 8102fce:	d036      	beq.n	810303e <HAL_DMA_IRQHandler+0x2ee>
 8102fd0:	687b      	ldr	r3, [r7, #4]
 8102fd2:	681b      	ldr	r3, [r3, #0]
 8102fd4:	4a61      	ldr	r2, [pc, #388]	; (810315c <HAL_DMA_IRQHandler+0x40c>)
 8102fd6:	4293      	cmp	r3, r2
 8102fd8:	d031      	beq.n	810303e <HAL_DMA_IRQHandler+0x2ee>
 8102fda:	687b      	ldr	r3, [r7, #4]
 8102fdc:	681b      	ldr	r3, [r3, #0]
 8102fde:	4a60      	ldr	r2, [pc, #384]	; (8103160 <HAL_DMA_IRQHandler+0x410>)
 8102fe0:	4293      	cmp	r3, r2
 8102fe2:	d02c      	beq.n	810303e <HAL_DMA_IRQHandler+0x2ee>
 8102fe4:	687b      	ldr	r3, [r7, #4]
 8102fe6:	681b      	ldr	r3, [r3, #0]
 8102fe8:	4a5e      	ldr	r2, [pc, #376]	; (8103164 <HAL_DMA_IRQHandler+0x414>)
 8102fea:	4293      	cmp	r3, r2
 8102fec:	d027      	beq.n	810303e <HAL_DMA_IRQHandler+0x2ee>
 8102fee:	687b      	ldr	r3, [r7, #4]
 8102ff0:	681b      	ldr	r3, [r3, #0]
 8102ff2:	4a5d      	ldr	r2, [pc, #372]	; (8103168 <HAL_DMA_IRQHandler+0x418>)
 8102ff4:	4293      	cmp	r3, r2
 8102ff6:	d022      	beq.n	810303e <HAL_DMA_IRQHandler+0x2ee>
 8102ff8:	687b      	ldr	r3, [r7, #4]
 8102ffa:	681b      	ldr	r3, [r3, #0]
 8102ffc:	4a5b      	ldr	r2, [pc, #364]	; (810316c <HAL_DMA_IRQHandler+0x41c>)
 8102ffe:	4293      	cmp	r3, r2
 8103000:	d01d      	beq.n	810303e <HAL_DMA_IRQHandler+0x2ee>
 8103002:	687b      	ldr	r3, [r7, #4]
 8103004:	681b      	ldr	r3, [r3, #0]
 8103006:	4a5a      	ldr	r2, [pc, #360]	; (8103170 <HAL_DMA_IRQHandler+0x420>)
 8103008:	4293      	cmp	r3, r2
 810300a:	d018      	beq.n	810303e <HAL_DMA_IRQHandler+0x2ee>
 810300c:	687b      	ldr	r3, [r7, #4]
 810300e:	681b      	ldr	r3, [r3, #0]
 8103010:	4a58      	ldr	r2, [pc, #352]	; (8103174 <HAL_DMA_IRQHandler+0x424>)
 8103012:	4293      	cmp	r3, r2
 8103014:	d013      	beq.n	810303e <HAL_DMA_IRQHandler+0x2ee>
 8103016:	687b      	ldr	r3, [r7, #4]
 8103018:	681b      	ldr	r3, [r3, #0]
 810301a:	4a57      	ldr	r2, [pc, #348]	; (8103178 <HAL_DMA_IRQHandler+0x428>)
 810301c:	4293      	cmp	r3, r2
 810301e:	d00e      	beq.n	810303e <HAL_DMA_IRQHandler+0x2ee>
 8103020:	687b      	ldr	r3, [r7, #4]
 8103022:	681b      	ldr	r3, [r3, #0]
 8103024:	4a55      	ldr	r2, [pc, #340]	; (810317c <HAL_DMA_IRQHandler+0x42c>)
 8103026:	4293      	cmp	r3, r2
 8103028:	d009      	beq.n	810303e <HAL_DMA_IRQHandler+0x2ee>
 810302a:	687b      	ldr	r3, [r7, #4]
 810302c:	681b      	ldr	r3, [r3, #0]
 810302e:	4a54      	ldr	r2, [pc, #336]	; (8103180 <HAL_DMA_IRQHandler+0x430>)
 8103030:	4293      	cmp	r3, r2
 8103032:	d004      	beq.n	810303e <HAL_DMA_IRQHandler+0x2ee>
 8103034:	687b      	ldr	r3, [r7, #4]
 8103036:	681b      	ldr	r3, [r3, #0]
 8103038:	4a52      	ldr	r2, [pc, #328]	; (8103184 <HAL_DMA_IRQHandler+0x434>)
 810303a:	4293      	cmp	r3, r2
 810303c:	d10a      	bne.n	8103054 <HAL_DMA_IRQHandler+0x304>
 810303e:	687b      	ldr	r3, [r7, #4]
 8103040:	681b      	ldr	r3, [r3, #0]
 8103042:	695b      	ldr	r3, [r3, #20]
 8103044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103048:	2b00      	cmp	r3, #0
 810304a:	bf14      	ite	ne
 810304c:	2301      	movne	r3, #1
 810304e:	2300      	moveq	r3, #0
 8103050:	b2db      	uxtb	r3, r3
 8103052:	e003      	b.n	810305c <HAL_DMA_IRQHandler+0x30c>
 8103054:	687b      	ldr	r3, [r7, #4]
 8103056:	681b      	ldr	r3, [r3, #0]
 8103058:	681b      	ldr	r3, [r3, #0]
 810305a:	2300      	movs	r3, #0
 810305c:	2b00      	cmp	r3, #0
 810305e:	d00d      	beq.n	810307c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103060:	687b      	ldr	r3, [r7, #4]
 8103062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103064:	f003 031f 	and.w	r3, r3, #31
 8103068:	2201      	movs	r2, #1
 810306a:	409a      	lsls	r2, r3
 810306c:	6a3b      	ldr	r3, [r7, #32]
 810306e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8103070:	687b      	ldr	r3, [r7, #4]
 8103072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103074:	f043 0202 	orr.w	r2, r3, #2
 8103078:	687b      	ldr	r3, [r7, #4]
 810307a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 810307c:	687b      	ldr	r3, [r7, #4]
 810307e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103080:	f003 031f 	and.w	r3, r3, #31
 8103084:	2204      	movs	r2, #4
 8103086:	409a      	lsls	r2, r3
 8103088:	69bb      	ldr	r3, [r7, #24]
 810308a:	4013      	ands	r3, r2
 810308c:	2b00      	cmp	r3, #0
 810308e:	f000 808f 	beq.w	81031b0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8103092:	687b      	ldr	r3, [r7, #4]
 8103094:	681b      	ldr	r3, [r3, #0]
 8103096:	4a2c      	ldr	r2, [pc, #176]	; (8103148 <HAL_DMA_IRQHandler+0x3f8>)
 8103098:	4293      	cmp	r3, r2
 810309a:	d04a      	beq.n	8103132 <HAL_DMA_IRQHandler+0x3e2>
 810309c:	687b      	ldr	r3, [r7, #4]
 810309e:	681b      	ldr	r3, [r3, #0]
 81030a0:	4a2a      	ldr	r2, [pc, #168]	; (810314c <HAL_DMA_IRQHandler+0x3fc>)
 81030a2:	4293      	cmp	r3, r2
 81030a4:	d045      	beq.n	8103132 <HAL_DMA_IRQHandler+0x3e2>
 81030a6:	687b      	ldr	r3, [r7, #4]
 81030a8:	681b      	ldr	r3, [r3, #0]
 81030aa:	4a29      	ldr	r2, [pc, #164]	; (8103150 <HAL_DMA_IRQHandler+0x400>)
 81030ac:	4293      	cmp	r3, r2
 81030ae:	d040      	beq.n	8103132 <HAL_DMA_IRQHandler+0x3e2>
 81030b0:	687b      	ldr	r3, [r7, #4]
 81030b2:	681b      	ldr	r3, [r3, #0]
 81030b4:	4a27      	ldr	r2, [pc, #156]	; (8103154 <HAL_DMA_IRQHandler+0x404>)
 81030b6:	4293      	cmp	r3, r2
 81030b8:	d03b      	beq.n	8103132 <HAL_DMA_IRQHandler+0x3e2>
 81030ba:	687b      	ldr	r3, [r7, #4]
 81030bc:	681b      	ldr	r3, [r3, #0]
 81030be:	4a26      	ldr	r2, [pc, #152]	; (8103158 <HAL_DMA_IRQHandler+0x408>)
 81030c0:	4293      	cmp	r3, r2
 81030c2:	d036      	beq.n	8103132 <HAL_DMA_IRQHandler+0x3e2>
 81030c4:	687b      	ldr	r3, [r7, #4]
 81030c6:	681b      	ldr	r3, [r3, #0]
 81030c8:	4a24      	ldr	r2, [pc, #144]	; (810315c <HAL_DMA_IRQHandler+0x40c>)
 81030ca:	4293      	cmp	r3, r2
 81030cc:	d031      	beq.n	8103132 <HAL_DMA_IRQHandler+0x3e2>
 81030ce:	687b      	ldr	r3, [r7, #4]
 81030d0:	681b      	ldr	r3, [r3, #0]
 81030d2:	4a23      	ldr	r2, [pc, #140]	; (8103160 <HAL_DMA_IRQHandler+0x410>)
 81030d4:	4293      	cmp	r3, r2
 81030d6:	d02c      	beq.n	8103132 <HAL_DMA_IRQHandler+0x3e2>
 81030d8:	687b      	ldr	r3, [r7, #4]
 81030da:	681b      	ldr	r3, [r3, #0]
 81030dc:	4a21      	ldr	r2, [pc, #132]	; (8103164 <HAL_DMA_IRQHandler+0x414>)
 81030de:	4293      	cmp	r3, r2
 81030e0:	d027      	beq.n	8103132 <HAL_DMA_IRQHandler+0x3e2>
 81030e2:	687b      	ldr	r3, [r7, #4]
 81030e4:	681b      	ldr	r3, [r3, #0]
 81030e6:	4a20      	ldr	r2, [pc, #128]	; (8103168 <HAL_DMA_IRQHandler+0x418>)
 81030e8:	4293      	cmp	r3, r2
 81030ea:	d022      	beq.n	8103132 <HAL_DMA_IRQHandler+0x3e2>
 81030ec:	687b      	ldr	r3, [r7, #4]
 81030ee:	681b      	ldr	r3, [r3, #0]
 81030f0:	4a1e      	ldr	r2, [pc, #120]	; (810316c <HAL_DMA_IRQHandler+0x41c>)
 81030f2:	4293      	cmp	r3, r2
 81030f4:	d01d      	beq.n	8103132 <HAL_DMA_IRQHandler+0x3e2>
 81030f6:	687b      	ldr	r3, [r7, #4]
 81030f8:	681b      	ldr	r3, [r3, #0]
 81030fa:	4a1d      	ldr	r2, [pc, #116]	; (8103170 <HAL_DMA_IRQHandler+0x420>)
 81030fc:	4293      	cmp	r3, r2
 81030fe:	d018      	beq.n	8103132 <HAL_DMA_IRQHandler+0x3e2>
 8103100:	687b      	ldr	r3, [r7, #4]
 8103102:	681b      	ldr	r3, [r3, #0]
 8103104:	4a1b      	ldr	r2, [pc, #108]	; (8103174 <HAL_DMA_IRQHandler+0x424>)
 8103106:	4293      	cmp	r3, r2
 8103108:	d013      	beq.n	8103132 <HAL_DMA_IRQHandler+0x3e2>
 810310a:	687b      	ldr	r3, [r7, #4]
 810310c:	681b      	ldr	r3, [r3, #0]
 810310e:	4a1a      	ldr	r2, [pc, #104]	; (8103178 <HAL_DMA_IRQHandler+0x428>)
 8103110:	4293      	cmp	r3, r2
 8103112:	d00e      	beq.n	8103132 <HAL_DMA_IRQHandler+0x3e2>
 8103114:	687b      	ldr	r3, [r7, #4]
 8103116:	681b      	ldr	r3, [r3, #0]
 8103118:	4a18      	ldr	r2, [pc, #96]	; (810317c <HAL_DMA_IRQHandler+0x42c>)
 810311a:	4293      	cmp	r3, r2
 810311c:	d009      	beq.n	8103132 <HAL_DMA_IRQHandler+0x3e2>
 810311e:	687b      	ldr	r3, [r7, #4]
 8103120:	681b      	ldr	r3, [r3, #0]
 8103122:	4a17      	ldr	r2, [pc, #92]	; (8103180 <HAL_DMA_IRQHandler+0x430>)
 8103124:	4293      	cmp	r3, r2
 8103126:	d004      	beq.n	8103132 <HAL_DMA_IRQHandler+0x3e2>
 8103128:	687b      	ldr	r3, [r7, #4]
 810312a:	681b      	ldr	r3, [r3, #0]
 810312c:	4a15      	ldr	r2, [pc, #84]	; (8103184 <HAL_DMA_IRQHandler+0x434>)
 810312e:	4293      	cmp	r3, r2
 8103130:	d12a      	bne.n	8103188 <HAL_DMA_IRQHandler+0x438>
 8103132:	687b      	ldr	r3, [r7, #4]
 8103134:	681b      	ldr	r3, [r3, #0]
 8103136:	681b      	ldr	r3, [r3, #0]
 8103138:	f003 0302 	and.w	r3, r3, #2
 810313c:	2b00      	cmp	r3, #0
 810313e:	bf14      	ite	ne
 8103140:	2301      	movne	r3, #1
 8103142:	2300      	moveq	r3, #0
 8103144:	b2db      	uxtb	r3, r3
 8103146:	e023      	b.n	8103190 <HAL_DMA_IRQHandler+0x440>
 8103148:	40020010 	.word	0x40020010
 810314c:	40020028 	.word	0x40020028
 8103150:	40020040 	.word	0x40020040
 8103154:	40020058 	.word	0x40020058
 8103158:	40020070 	.word	0x40020070
 810315c:	40020088 	.word	0x40020088
 8103160:	400200a0 	.word	0x400200a0
 8103164:	400200b8 	.word	0x400200b8
 8103168:	40020410 	.word	0x40020410
 810316c:	40020428 	.word	0x40020428
 8103170:	40020440 	.word	0x40020440
 8103174:	40020458 	.word	0x40020458
 8103178:	40020470 	.word	0x40020470
 810317c:	40020488 	.word	0x40020488
 8103180:	400204a0 	.word	0x400204a0
 8103184:	400204b8 	.word	0x400204b8
 8103188:	687b      	ldr	r3, [r7, #4]
 810318a:	681b      	ldr	r3, [r3, #0]
 810318c:	681b      	ldr	r3, [r3, #0]
 810318e:	2300      	movs	r3, #0
 8103190:	2b00      	cmp	r3, #0
 8103192:	d00d      	beq.n	81031b0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103194:	687b      	ldr	r3, [r7, #4]
 8103196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103198:	f003 031f 	and.w	r3, r3, #31
 810319c:	2204      	movs	r2, #4
 810319e:	409a      	lsls	r2, r3
 81031a0:	6a3b      	ldr	r3, [r7, #32]
 81031a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 81031a4:	687b      	ldr	r3, [r7, #4]
 81031a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81031a8:	f043 0204 	orr.w	r2, r3, #4
 81031ac:	687b      	ldr	r3, [r7, #4]
 81031ae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81031b0:	687b      	ldr	r3, [r7, #4]
 81031b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81031b4:	f003 031f 	and.w	r3, r3, #31
 81031b8:	2210      	movs	r2, #16
 81031ba:	409a      	lsls	r2, r3
 81031bc:	69bb      	ldr	r3, [r7, #24]
 81031be:	4013      	ands	r3, r2
 81031c0:	2b00      	cmp	r3, #0
 81031c2:	f000 80a6 	beq.w	8103312 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 81031c6:	687b      	ldr	r3, [r7, #4]
 81031c8:	681b      	ldr	r3, [r3, #0]
 81031ca:	4a85      	ldr	r2, [pc, #532]	; (81033e0 <HAL_DMA_IRQHandler+0x690>)
 81031cc:	4293      	cmp	r3, r2
 81031ce:	d04a      	beq.n	8103266 <HAL_DMA_IRQHandler+0x516>
 81031d0:	687b      	ldr	r3, [r7, #4]
 81031d2:	681b      	ldr	r3, [r3, #0]
 81031d4:	4a83      	ldr	r2, [pc, #524]	; (81033e4 <HAL_DMA_IRQHandler+0x694>)
 81031d6:	4293      	cmp	r3, r2
 81031d8:	d045      	beq.n	8103266 <HAL_DMA_IRQHandler+0x516>
 81031da:	687b      	ldr	r3, [r7, #4]
 81031dc:	681b      	ldr	r3, [r3, #0]
 81031de:	4a82      	ldr	r2, [pc, #520]	; (81033e8 <HAL_DMA_IRQHandler+0x698>)
 81031e0:	4293      	cmp	r3, r2
 81031e2:	d040      	beq.n	8103266 <HAL_DMA_IRQHandler+0x516>
 81031e4:	687b      	ldr	r3, [r7, #4]
 81031e6:	681b      	ldr	r3, [r3, #0]
 81031e8:	4a80      	ldr	r2, [pc, #512]	; (81033ec <HAL_DMA_IRQHandler+0x69c>)
 81031ea:	4293      	cmp	r3, r2
 81031ec:	d03b      	beq.n	8103266 <HAL_DMA_IRQHandler+0x516>
 81031ee:	687b      	ldr	r3, [r7, #4]
 81031f0:	681b      	ldr	r3, [r3, #0]
 81031f2:	4a7f      	ldr	r2, [pc, #508]	; (81033f0 <HAL_DMA_IRQHandler+0x6a0>)
 81031f4:	4293      	cmp	r3, r2
 81031f6:	d036      	beq.n	8103266 <HAL_DMA_IRQHandler+0x516>
 81031f8:	687b      	ldr	r3, [r7, #4]
 81031fa:	681b      	ldr	r3, [r3, #0]
 81031fc:	4a7d      	ldr	r2, [pc, #500]	; (81033f4 <HAL_DMA_IRQHandler+0x6a4>)
 81031fe:	4293      	cmp	r3, r2
 8103200:	d031      	beq.n	8103266 <HAL_DMA_IRQHandler+0x516>
 8103202:	687b      	ldr	r3, [r7, #4]
 8103204:	681b      	ldr	r3, [r3, #0]
 8103206:	4a7c      	ldr	r2, [pc, #496]	; (81033f8 <HAL_DMA_IRQHandler+0x6a8>)
 8103208:	4293      	cmp	r3, r2
 810320a:	d02c      	beq.n	8103266 <HAL_DMA_IRQHandler+0x516>
 810320c:	687b      	ldr	r3, [r7, #4]
 810320e:	681b      	ldr	r3, [r3, #0]
 8103210:	4a7a      	ldr	r2, [pc, #488]	; (81033fc <HAL_DMA_IRQHandler+0x6ac>)
 8103212:	4293      	cmp	r3, r2
 8103214:	d027      	beq.n	8103266 <HAL_DMA_IRQHandler+0x516>
 8103216:	687b      	ldr	r3, [r7, #4]
 8103218:	681b      	ldr	r3, [r3, #0]
 810321a:	4a79      	ldr	r2, [pc, #484]	; (8103400 <HAL_DMA_IRQHandler+0x6b0>)
 810321c:	4293      	cmp	r3, r2
 810321e:	d022      	beq.n	8103266 <HAL_DMA_IRQHandler+0x516>
 8103220:	687b      	ldr	r3, [r7, #4]
 8103222:	681b      	ldr	r3, [r3, #0]
 8103224:	4a77      	ldr	r2, [pc, #476]	; (8103404 <HAL_DMA_IRQHandler+0x6b4>)
 8103226:	4293      	cmp	r3, r2
 8103228:	d01d      	beq.n	8103266 <HAL_DMA_IRQHandler+0x516>
 810322a:	687b      	ldr	r3, [r7, #4]
 810322c:	681b      	ldr	r3, [r3, #0]
 810322e:	4a76      	ldr	r2, [pc, #472]	; (8103408 <HAL_DMA_IRQHandler+0x6b8>)
 8103230:	4293      	cmp	r3, r2
 8103232:	d018      	beq.n	8103266 <HAL_DMA_IRQHandler+0x516>
 8103234:	687b      	ldr	r3, [r7, #4]
 8103236:	681b      	ldr	r3, [r3, #0]
 8103238:	4a74      	ldr	r2, [pc, #464]	; (810340c <HAL_DMA_IRQHandler+0x6bc>)
 810323a:	4293      	cmp	r3, r2
 810323c:	d013      	beq.n	8103266 <HAL_DMA_IRQHandler+0x516>
 810323e:	687b      	ldr	r3, [r7, #4]
 8103240:	681b      	ldr	r3, [r3, #0]
 8103242:	4a73      	ldr	r2, [pc, #460]	; (8103410 <HAL_DMA_IRQHandler+0x6c0>)
 8103244:	4293      	cmp	r3, r2
 8103246:	d00e      	beq.n	8103266 <HAL_DMA_IRQHandler+0x516>
 8103248:	687b      	ldr	r3, [r7, #4]
 810324a:	681b      	ldr	r3, [r3, #0]
 810324c:	4a71      	ldr	r2, [pc, #452]	; (8103414 <HAL_DMA_IRQHandler+0x6c4>)
 810324e:	4293      	cmp	r3, r2
 8103250:	d009      	beq.n	8103266 <HAL_DMA_IRQHandler+0x516>
 8103252:	687b      	ldr	r3, [r7, #4]
 8103254:	681b      	ldr	r3, [r3, #0]
 8103256:	4a70      	ldr	r2, [pc, #448]	; (8103418 <HAL_DMA_IRQHandler+0x6c8>)
 8103258:	4293      	cmp	r3, r2
 810325a:	d004      	beq.n	8103266 <HAL_DMA_IRQHandler+0x516>
 810325c:	687b      	ldr	r3, [r7, #4]
 810325e:	681b      	ldr	r3, [r3, #0]
 8103260:	4a6e      	ldr	r2, [pc, #440]	; (810341c <HAL_DMA_IRQHandler+0x6cc>)
 8103262:	4293      	cmp	r3, r2
 8103264:	d10a      	bne.n	810327c <HAL_DMA_IRQHandler+0x52c>
 8103266:	687b      	ldr	r3, [r7, #4]
 8103268:	681b      	ldr	r3, [r3, #0]
 810326a:	681b      	ldr	r3, [r3, #0]
 810326c:	f003 0308 	and.w	r3, r3, #8
 8103270:	2b00      	cmp	r3, #0
 8103272:	bf14      	ite	ne
 8103274:	2301      	movne	r3, #1
 8103276:	2300      	moveq	r3, #0
 8103278:	b2db      	uxtb	r3, r3
 810327a:	e009      	b.n	8103290 <HAL_DMA_IRQHandler+0x540>
 810327c:	687b      	ldr	r3, [r7, #4]
 810327e:	681b      	ldr	r3, [r3, #0]
 8103280:	681b      	ldr	r3, [r3, #0]
 8103282:	f003 0304 	and.w	r3, r3, #4
 8103286:	2b00      	cmp	r3, #0
 8103288:	bf14      	ite	ne
 810328a:	2301      	movne	r3, #1
 810328c:	2300      	moveq	r3, #0
 810328e:	b2db      	uxtb	r3, r3
 8103290:	2b00      	cmp	r3, #0
 8103292:	d03e      	beq.n	8103312 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103294:	687b      	ldr	r3, [r7, #4]
 8103296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103298:	f003 031f 	and.w	r3, r3, #31
 810329c:	2210      	movs	r2, #16
 810329e:	409a      	lsls	r2, r3
 81032a0:	6a3b      	ldr	r3, [r7, #32]
 81032a2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 81032a4:	687b      	ldr	r3, [r7, #4]
 81032a6:	681b      	ldr	r3, [r3, #0]
 81032a8:	681b      	ldr	r3, [r3, #0]
 81032aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81032ae:	2b00      	cmp	r3, #0
 81032b0:	d018      	beq.n	81032e4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 81032b2:	687b      	ldr	r3, [r7, #4]
 81032b4:	681b      	ldr	r3, [r3, #0]
 81032b6:	681b      	ldr	r3, [r3, #0]
 81032b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81032bc:	2b00      	cmp	r3, #0
 81032be:	d108      	bne.n	81032d2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 81032c0:	687b      	ldr	r3, [r7, #4]
 81032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81032c4:	2b00      	cmp	r3, #0
 81032c6:	d024      	beq.n	8103312 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 81032c8:	687b      	ldr	r3, [r7, #4]
 81032ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81032cc:	6878      	ldr	r0, [r7, #4]
 81032ce:	4798      	blx	r3
 81032d0:	e01f      	b.n	8103312 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 81032d2:	687b      	ldr	r3, [r7, #4]
 81032d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81032d6:	2b00      	cmp	r3, #0
 81032d8:	d01b      	beq.n	8103312 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 81032da:	687b      	ldr	r3, [r7, #4]
 81032dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81032de:	6878      	ldr	r0, [r7, #4]
 81032e0:	4798      	blx	r3
 81032e2:	e016      	b.n	8103312 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 81032e4:	687b      	ldr	r3, [r7, #4]
 81032e6:	681b      	ldr	r3, [r3, #0]
 81032e8:	681b      	ldr	r3, [r3, #0]
 81032ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81032ee:	2b00      	cmp	r3, #0
 81032f0:	d107      	bne.n	8103302 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 81032f2:	687b      	ldr	r3, [r7, #4]
 81032f4:	681b      	ldr	r3, [r3, #0]
 81032f6:	681a      	ldr	r2, [r3, #0]
 81032f8:	687b      	ldr	r3, [r7, #4]
 81032fa:	681b      	ldr	r3, [r3, #0]
 81032fc:	f022 0208 	bic.w	r2, r2, #8
 8103300:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8103302:	687b      	ldr	r3, [r7, #4]
 8103304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103306:	2b00      	cmp	r3, #0
 8103308:	d003      	beq.n	8103312 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 810330a:	687b      	ldr	r3, [r7, #4]
 810330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810330e:	6878      	ldr	r0, [r7, #4]
 8103310:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103312:	687b      	ldr	r3, [r7, #4]
 8103314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103316:	f003 031f 	and.w	r3, r3, #31
 810331a:	2220      	movs	r2, #32
 810331c:	409a      	lsls	r2, r3
 810331e:	69bb      	ldr	r3, [r7, #24]
 8103320:	4013      	ands	r3, r2
 8103322:	2b00      	cmp	r3, #0
 8103324:	f000 8110 	beq.w	8103548 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8103328:	687b      	ldr	r3, [r7, #4]
 810332a:	681b      	ldr	r3, [r3, #0]
 810332c:	4a2c      	ldr	r2, [pc, #176]	; (81033e0 <HAL_DMA_IRQHandler+0x690>)
 810332e:	4293      	cmp	r3, r2
 8103330:	d04a      	beq.n	81033c8 <HAL_DMA_IRQHandler+0x678>
 8103332:	687b      	ldr	r3, [r7, #4]
 8103334:	681b      	ldr	r3, [r3, #0]
 8103336:	4a2b      	ldr	r2, [pc, #172]	; (81033e4 <HAL_DMA_IRQHandler+0x694>)
 8103338:	4293      	cmp	r3, r2
 810333a:	d045      	beq.n	81033c8 <HAL_DMA_IRQHandler+0x678>
 810333c:	687b      	ldr	r3, [r7, #4]
 810333e:	681b      	ldr	r3, [r3, #0]
 8103340:	4a29      	ldr	r2, [pc, #164]	; (81033e8 <HAL_DMA_IRQHandler+0x698>)
 8103342:	4293      	cmp	r3, r2
 8103344:	d040      	beq.n	81033c8 <HAL_DMA_IRQHandler+0x678>
 8103346:	687b      	ldr	r3, [r7, #4]
 8103348:	681b      	ldr	r3, [r3, #0]
 810334a:	4a28      	ldr	r2, [pc, #160]	; (81033ec <HAL_DMA_IRQHandler+0x69c>)
 810334c:	4293      	cmp	r3, r2
 810334e:	d03b      	beq.n	81033c8 <HAL_DMA_IRQHandler+0x678>
 8103350:	687b      	ldr	r3, [r7, #4]
 8103352:	681b      	ldr	r3, [r3, #0]
 8103354:	4a26      	ldr	r2, [pc, #152]	; (81033f0 <HAL_DMA_IRQHandler+0x6a0>)
 8103356:	4293      	cmp	r3, r2
 8103358:	d036      	beq.n	81033c8 <HAL_DMA_IRQHandler+0x678>
 810335a:	687b      	ldr	r3, [r7, #4]
 810335c:	681b      	ldr	r3, [r3, #0]
 810335e:	4a25      	ldr	r2, [pc, #148]	; (81033f4 <HAL_DMA_IRQHandler+0x6a4>)
 8103360:	4293      	cmp	r3, r2
 8103362:	d031      	beq.n	81033c8 <HAL_DMA_IRQHandler+0x678>
 8103364:	687b      	ldr	r3, [r7, #4]
 8103366:	681b      	ldr	r3, [r3, #0]
 8103368:	4a23      	ldr	r2, [pc, #140]	; (81033f8 <HAL_DMA_IRQHandler+0x6a8>)
 810336a:	4293      	cmp	r3, r2
 810336c:	d02c      	beq.n	81033c8 <HAL_DMA_IRQHandler+0x678>
 810336e:	687b      	ldr	r3, [r7, #4]
 8103370:	681b      	ldr	r3, [r3, #0]
 8103372:	4a22      	ldr	r2, [pc, #136]	; (81033fc <HAL_DMA_IRQHandler+0x6ac>)
 8103374:	4293      	cmp	r3, r2
 8103376:	d027      	beq.n	81033c8 <HAL_DMA_IRQHandler+0x678>
 8103378:	687b      	ldr	r3, [r7, #4]
 810337a:	681b      	ldr	r3, [r3, #0]
 810337c:	4a20      	ldr	r2, [pc, #128]	; (8103400 <HAL_DMA_IRQHandler+0x6b0>)
 810337e:	4293      	cmp	r3, r2
 8103380:	d022      	beq.n	81033c8 <HAL_DMA_IRQHandler+0x678>
 8103382:	687b      	ldr	r3, [r7, #4]
 8103384:	681b      	ldr	r3, [r3, #0]
 8103386:	4a1f      	ldr	r2, [pc, #124]	; (8103404 <HAL_DMA_IRQHandler+0x6b4>)
 8103388:	4293      	cmp	r3, r2
 810338a:	d01d      	beq.n	81033c8 <HAL_DMA_IRQHandler+0x678>
 810338c:	687b      	ldr	r3, [r7, #4]
 810338e:	681b      	ldr	r3, [r3, #0]
 8103390:	4a1d      	ldr	r2, [pc, #116]	; (8103408 <HAL_DMA_IRQHandler+0x6b8>)
 8103392:	4293      	cmp	r3, r2
 8103394:	d018      	beq.n	81033c8 <HAL_DMA_IRQHandler+0x678>
 8103396:	687b      	ldr	r3, [r7, #4]
 8103398:	681b      	ldr	r3, [r3, #0]
 810339a:	4a1c      	ldr	r2, [pc, #112]	; (810340c <HAL_DMA_IRQHandler+0x6bc>)
 810339c:	4293      	cmp	r3, r2
 810339e:	d013      	beq.n	81033c8 <HAL_DMA_IRQHandler+0x678>
 81033a0:	687b      	ldr	r3, [r7, #4]
 81033a2:	681b      	ldr	r3, [r3, #0]
 81033a4:	4a1a      	ldr	r2, [pc, #104]	; (8103410 <HAL_DMA_IRQHandler+0x6c0>)
 81033a6:	4293      	cmp	r3, r2
 81033a8:	d00e      	beq.n	81033c8 <HAL_DMA_IRQHandler+0x678>
 81033aa:	687b      	ldr	r3, [r7, #4]
 81033ac:	681b      	ldr	r3, [r3, #0]
 81033ae:	4a19      	ldr	r2, [pc, #100]	; (8103414 <HAL_DMA_IRQHandler+0x6c4>)
 81033b0:	4293      	cmp	r3, r2
 81033b2:	d009      	beq.n	81033c8 <HAL_DMA_IRQHandler+0x678>
 81033b4:	687b      	ldr	r3, [r7, #4]
 81033b6:	681b      	ldr	r3, [r3, #0]
 81033b8:	4a17      	ldr	r2, [pc, #92]	; (8103418 <HAL_DMA_IRQHandler+0x6c8>)
 81033ba:	4293      	cmp	r3, r2
 81033bc:	d004      	beq.n	81033c8 <HAL_DMA_IRQHandler+0x678>
 81033be:	687b      	ldr	r3, [r7, #4]
 81033c0:	681b      	ldr	r3, [r3, #0]
 81033c2:	4a16      	ldr	r2, [pc, #88]	; (810341c <HAL_DMA_IRQHandler+0x6cc>)
 81033c4:	4293      	cmp	r3, r2
 81033c6:	d12b      	bne.n	8103420 <HAL_DMA_IRQHandler+0x6d0>
 81033c8:	687b      	ldr	r3, [r7, #4]
 81033ca:	681b      	ldr	r3, [r3, #0]
 81033cc:	681b      	ldr	r3, [r3, #0]
 81033ce:	f003 0310 	and.w	r3, r3, #16
 81033d2:	2b00      	cmp	r3, #0
 81033d4:	bf14      	ite	ne
 81033d6:	2301      	movne	r3, #1
 81033d8:	2300      	moveq	r3, #0
 81033da:	b2db      	uxtb	r3, r3
 81033dc:	e02a      	b.n	8103434 <HAL_DMA_IRQHandler+0x6e4>
 81033de:	bf00      	nop
 81033e0:	40020010 	.word	0x40020010
 81033e4:	40020028 	.word	0x40020028
 81033e8:	40020040 	.word	0x40020040
 81033ec:	40020058 	.word	0x40020058
 81033f0:	40020070 	.word	0x40020070
 81033f4:	40020088 	.word	0x40020088
 81033f8:	400200a0 	.word	0x400200a0
 81033fc:	400200b8 	.word	0x400200b8
 8103400:	40020410 	.word	0x40020410
 8103404:	40020428 	.word	0x40020428
 8103408:	40020440 	.word	0x40020440
 810340c:	40020458 	.word	0x40020458
 8103410:	40020470 	.word	0x40020470
 8103414:	40020488 	.word	0x40020488
 8103418:	400204a0 	.word	0x400204a0
 810341c:	400204b8 	.word	0x400204b8
 8103420:	687b      	ldr	r3, [r7, #4]
 8103422:	681b      	ldr	r3, [r3, #0]
 8103424:	681b      	ldr	r3, [r3, #0]
 8103426:	f003 0302 	and.w	r3, r3, #2
 810342a:	2b00      	cmp	r3, #0
 810342c:	bf14      	ite	ne
 810342e:	2301      	movne	r3, #1
 8103430:	2300      	moveq	r3, #0
 8103432:	b2db      	uxtb	r3, r3
 8103434:	2b00      	cmp	r3, #0
 8103436:	f000 8087 	beq.w	8103548 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 810343a:	687b      	ldr	r3, [r7, #4]
 810343c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810343e:	f003 031f 	and.w	r3, r3, #31
 8103442:	2220      	movs	r2, #32
 8103444:	409a      	lsls	r2, r3
 8103446:	6a3b      	ldr	r3, [r7, #32]
 8103448:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 810344a:	687b      	ldr	r3, [r7, #4]
 810344c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8103450:	b2db      	uxtb	r3, r3
 8103452:	2b04      	cmp	r3, #4
 8103454:	d139      	bne.n	81034ca <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8103456:	687b      	ldr	r3, [r7, #4]
 8103458:	681b      	ldr	r3, [r3, #0]
 810345a:	681a      	ldr	r2, [r3, #0]
 810345c:	687b      	ldr	r3, [r7, #4]
 810345e:	681b      	ldr	r3, [r3, #0]
 8103460:	f022 0216 	bic.w	r2, r2, #22
 8103464:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8103466:	687b      	ldr	r3, [r7, #4]
 8103468:	681b      	ldr	r3, [r3, #0]
 810346a:	695a      	ldr	r2, [r3, #20]
 810346c:	687b      	ldr	r3, [r7, #4]
 810346e:	681b      	ldr	r3, [r3, #0]
 8103470:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8103474:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8103476:	687b      	ldr	r3, [r7, #4]
 8103478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810347a:	2b00      	cmp	r3, #0
 810347c:	d103      	bne.n	8103486 <HAL_DMA_IRQHandler+0x736>
 810347e:	687b      	ldr	r3, [r7, #4]
 8103480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103482:	2b00      	cmp	r3, #0
 8103484:	d007      	beq.n	8103496 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8103486:	687b      	ldr	r3, [r7, #4]
 8103488:	681b      	ldr	r3, [r3, #0]
 810348a:	681a      	ldr	r2, [r3, #0]
 810348c:	687b      	ldr	r3, [r7, #4]
 810348e:	681b      	ldr	r3, [r3, #0]
 8103490:	f022 0208 	bic.w	r2, r2, #8
 8103494:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8103496:	687b      	ldr	r3, [r7, #4]
 8103498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810349a:	f003 031f 	and.w	r3, r3, #31
 810349e:	223f      	movs	r2, #63	; 0x3f
 81034a0:	409a      	lsls	r2, r3
 81034a2:	6a3b      	ldr	r3, [r7, #32]
 81034a4:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 81034a6:	687b      	ldr	r3, [r7, #4]
 81034a8:	2200      	movs	r2, #0
 81034aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81034ae:	687b      	ldr	r3, [r7, #4]
 81034b0:	2201      	movs	r2, #1
 81034b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 81034b6:	687b      	ldr	r3, [r7, #4]
 81034b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81034ba:	2b00      	cmp	r3, #0
 81034bc:	f000 834a 	beq.w	8103b54 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 81034c0:	687b      	ldr	r3, [r7, #4]
 81034c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81034c4:	6878      	ldr	r0, [r7, #4]
 81034c6:	4798      	blx	r3
          }
          return;
 81034c8:	e344      	b.n	8103b54 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 81034ca:	687b      	ldr	r3, [r7, #4]
 81034cc:	681b      	ldr	r3, [r3, #0]
 81034ce:	681b      	ldr	r3, [r3, #0]
 81034d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81034d4:	2b00      	cmp	r3, #0
 81034d6:	d018      	beq.n	810350a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 81034d8:	687b      	ldr	r3, [r7, #4]
 81034da:	681b      	ldr	r3, [r3, #0]
 81034dc:	681b      	ldr	r3, [r3, #0]
 81034de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81034e2:	2b00      	cmp	r3, #0
 81034e4:	d108      	bne.n	81034f8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 81034e6:	687b      	ldr	r3, [r7, #4]
 81034e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81034ea:	2b00      	cmp	r3, #0
 81034ec:	d02c      	beq.n	8103548 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 81034ee:	687b      	ldr	r3, [r7, #4]
 81034f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81034f2:	6878      	ldr	r0, [r7, #4]
 81034f4:	4798      	blx	r3
 81034f6:	e027      	b.n	8103548 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 81034f8:	687b      	ldr	r3, [r7, #4]
 81034fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81034fc:	2b00      	cmp	r3, #0
 81034fe:	d023      	beq.n	8103548 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8103500:	687b      	ldr	r3, [r7, #4]
 8103502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103504:	6878      	ldr	r0, [r7, #4]
 8103506:	4798      	blx	r3
 8103508:	e01e      	b.n	8103548 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 810350a:	687b      	ldr	r3, [r7, #4]
 810350c:	681b      	ldr	r3, [r3, #0]
 810350e:	681b      	ldr	r3, [r3, #0]
 8103510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103514:	2b00      	cmp	r3, #0
 8103516:	d10f      	bne.n	8103538 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8103518:	687b      	ldr	r3, [r7, #4]
 810351a:	681b      	ldr	r3, [r3, #0]
 810351c:	681a      	ldr	r2, [r3, #0]
 810351e:	687b      	ldr	r3, [r7, #4]
 8103520:	681b      	ldr	r3, [r3, #0]
 8103522:	f022 0210 	bic.w	r2, r2, #16
 8103526:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8103528:	687b      	ldr	r3, [r7, #4]
 810352a:	2200      	movs	r2, #0
 810352c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8103530:	687b      	ldr	r3, [r7, #4]
 8103532:	2201      	movs	r2, #1
 8103534:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8103538:	687b      	ldr	r3, [r7, #4]
 810353a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810353c:	2b00      	cmp	r3, #0
 810353e:	d003      	beq.n	8103548 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8103540:	687b      	ldr	r3, [r7, #4]
 8103542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103544:	6878      	ldr	r0, [r7, #4]
 8103546:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8103548:	687b      	ldr	r3, [r7, #4]
 810354a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810354c:	2b00      	cmp	r3, #0
 810354e:	f000 8306 	beq.w	8103b5e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8103552:	687b      	ldr	r3, [r7, #4]
 8103554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103556:	f003 0301 	and.w	r3, r3, #1
 810355a:	2b00      	cmp	r3, #0
 810355c:	f000 8088 	beq.w	8103670 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8103560:	687b      	ldr	r3, [r7, #4]
 8103562:	2204      	movs	r2, #4
 8103564:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8103568:	687b      	ldr	r3, [r7, #4]
 810356a:	681b      	ldr	r3, [r3, #0]
 810356c:	4a7a      	ldr	r2, [pc, #488]	; (8103758 <HAL_DMA_IRQHandler+0xa08>)
 810356e:	4293      	cmp	r3, r2
 8103570:	d04a      	beq.n	8103608 <HAL_DMA_IRQHandler+0x8b8>
 8103572:	687b      	ldr	r3, [r7, #4]
 8103574:	681b      	ldr	r3, [r3, #0]
 8103576:	4a79      	ldr	r2, [pc, #484]	; (810375c <HAL_DMA_IRQHandler+0xa0c>)
 8103578:	4293      	cmp	r3, r2
 810357a:	d045      	beq.n	8103608 <HAL_DMA_IRQHandler+0x8b8>
 810357c:	687b      	ldr	r3, [r7, #4]
 810357e:	681b      	ldr	r3, [r3, #0]
 8103580:	4a77      	ldr	r2, [pc, #476]	; (8103760 <HAL_DMA_IRQHandler+0xa10>)
 8103582:	4293      	cmp	r3, r2
 8103584:	d040      	beq.n	8103608 <HAL_DMA_IRQHandler+0x8b8>
 8103586:	687b      	ldr	r3, [r7, #4]
 8103588:	681b      	ldr	r3, [r3, #0]
 810358a:	4a76      	ldr	r2, [pc, #472]	; (8103764 <HAL_DMA_IRQHandler+0xa14>)
 810358c:	4293      	cmp	r3, r2
 810358e:	d03b      	beq.n	8103608 <HAL_DMA_IRQHandler+0x8b8>
 8103590:	687b      	ldr	r3, [r7, #4]
 8103592:	681b      	ldr	r3, [r3, #0]
 8103594:	4a74      	ldr	r2, [pc, #464]	; (8103768 <HAL_DMA_IRQHandler+0xa18>)
 8103596:	4293      	cmp	r3, r2
 8103598:	d036      	beq.n	8103608 <HAL_DMA_IRQHandler+0x8b8>
 810359a:	687b      	ldr	r3, [r7, #4]
 810359c:	681b      	ldr	r3, [r3, #0]
 810359e:	4a73      	ldr	r2, [pc, #460]	; (810376c <HAL_DMA_IRQHandler+0xa1c>)
 81035a0:	4293      	cmp	r3, r2
 81035a2:	d031      	beq.n	8103608 <HAL_DMA_IRQHandler+0x8b8>
 81035a4:	687b      	ldr	r3, [r7, #4]
 81035a6:	681b      	ldr	r3, [r3, #0]
 81035a8:	4a71      	ldr	r2, [pc, #452]	; (8103770 <HAL_DMA_IRQHandler+0xa20>)
 81035aa:	4293      	cmp	r3, r2
 81035ac:	d02c      	beq.n	8103608 <HAL_DMA_IRQHandler+0x8b8>
 81035ae:	687b      	ldr	r3, [r7, #4]
 81035b0:	681b      	ldr	r3, [r3, #0]
 81035b2:	4a70      	ldr	r2, [pc, #448]	; (8103774 <HAL_DMA_IRQHandler+0xa24>)
 81035b4:	4293      	cmp	r3, r2
 81035b6:	d027      	beq.n	8103608 <HAL_DMA_IRQHandler+0x8b8>
 81035b8:	687b      	ldr	r3, [r7, #4]
 81035ba:	681b      	ldr	r3, [r3, #0]
 81035bc:	4a6e      	ldr	r2, [pc, #440]	; (8103778 <HAL_DMA_IRQHandler+0xa28>)
 81035be:	4293      	cmp	r3, r2
 81035c0:	d022      	beq.n	8103608 <HAL_DMA_IRQHandler+0x8b8>
 81035c2:	687b      	ldr	r3, [r7, #4]
 81035c4:	681b      	ldr	r3, [r3, #0]
 81035c6:	4a6d      	ldr	r2, [pc, #436]	; (810377c <HAL_DMA_IRQHandler+0xa2c>)
 81035c8:	4293      	cmp	r3, r2
 81035ca:	d01d      	beq.n	8103608 <HAL_DMA_IRQHandler+0x8b8>
 81035cc:	687b      	ldr	r3, [r7, #4]
 81035ce:	681b      	ldr	r3, [r3, #0]
 81035d0:	4a6b      	ldr	r2, [pc, #428]	; (8103780 <HAL_DMA_IRQHandler+0xa30>)
 81035d2:	4293      	cmp	r3, r2
 81035d4:	d018      	beq.n	8103608 <HAL_DMA_IRQHandler+0x8b8>
 81035d6:	687b      	ldr	r3, [r7, #4]
 81035d8:	681b      	ldr	r3, [r3, #0]
 81035da:	4a6a      	ldr	r2, [pc, #424]	; (8103784 <HAL_DMA_IRQHandler+0xa34>)
 81035dc:	4293      	cmp	r3, r2
 81035de:	d013      	beq.n	8103608 <HAL_DMA_IRQHandler+0x8b8>
 81035e0:	687b      	ldr	r3, [r7, #4]
 81035e2:	681b      	ldr	r3, [r3, #0]
 81035e4:	4a68      	ldr	r2, [pc, #416]	; (8103788 <HAL_DMA_IRQHandler+0xa38>)
 81035e6:	4293      	cmp	r3, r2
 81035e8:	d00e      	beq.n	8103608 <HAL_DMA_IRQHandler+0x8b8>
 81035ea:	687b      	ldr	r3, [r7, #4]
 81035ec:	681b      	ldr	r3, [r3, #0]
 81035ee:	4a67      	ldr	r2, [pc, #412]	; (810378c <HAL_DMA_IRQHandler+0xa3c>)
 81035f0:	4293      	cmp	r3, r2
 81035f2:	d009      	beq.n	8103608 <HAL_DMA_IRQHandler+0x8b8>
 81035f4:	687b      	ldr	r3, [r7, #4]
 81035f6:	681b      	ldr	r3, [r3, #0]
 81035f8:	4a65      	ldr	r2, [pc, #404]	; (8103790 <HAL_DMA_IRQHandler+0xa40>)
 81035fa:	4293      	cmp	r3, r2
 81035fc:	d004      	beq.n	8103608 <HAL_DMA_IRQHandler+0x8b8>
 81035fe:	687b      	ldr	r3, [r7, #4]
 8103600:	681b      	ldr	r3, [r3, #0]
 8103602:	4a64      	ldr	r2, [pc, #400]	; (8103794 <HAL_DMA_IRQHandler+0xa44>)
 8103604:	4293      	cmp	r3, r2
 8103606:	d108      	bne.n	810361a <HAL_DMA_IRQHandler+0x8ca>
 8103608:	687b      	ldr	r3, [r7, #4]
 810360a:	681b      	ldr	r3, [r3, #0]
 810360c:	681a      	ldr	r2, [r3, #0]
 810360e:	687b      	ldr	r3, [r7, #4]
 8103610:	681b      	ldr	r3, [r3, #0]
 8103612:	f022 0201 	bic.w	r2, r2, #1
 8103616:	601a      	str	r2, [r3, #0]
 8103618:	e007      	b.n	810362a <HAL_DMA_IRQHandler+0x8da>
 810361a:	687b      	ldr	r3, [r7, #4]
 810361c:	681b      	ldr	r3, [r3, #0]
 810361e:	681a      	ldr	r2, [r3, #0]
 8103620:	687b      	ldr	r3, [r7, #4]
 8103622:	681b      	ldr	r3, [r3, #0]
 8103624:	f022 0201 	bic.w	r2, r2, #1
 8103628:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 810362a:	68fb      	ldr	r3, [r7, #12]
 810362c:	3301      	adds	r3, #1
 810362e:	60fb      	str	r3, [r7, #12]
 8103630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103632:	429a      	cmp	r2, r3
 8103634:	d307      	bcc.n	8103646 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8103636:	687b      	ldr	r3, [r7, #4]
 8103638:	681b      	ldr	r3, [r3, #0]
 810363a:	681b      	ldr	r3, [r3, #0]
 810363c:	f003 0301 	and.w	r3, r3, #1
 8103640:	2b00      	cmp	r3, #0
 8103642:	d1f2      	bne.n	810362a <HAL_DMA_IRQHandler+0x8da>
 8103644:	e000      	b.n	8103648 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8103646:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8103648:	687b      	ldr	r3, [r7, #4]
 810364a:	2200      	movs	r2, #0
 810364c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8103650:	687b      	ldr	r3, [r7, #4]
 8103652:	681b      	ldr	r3, [r3, #0]
 8103654:	681b      	ldr	r3, [r3, #0]
 8103656:	f003 0301 	and.w	r3, r3, #1
 810365a:	2b00      	cmp	r3, #0
 810365c:	d004      	beq.n	8103668 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 810365e:	687b      	ldr	r3, [r7, #4]
 8103660:	2203      	movs	r2, #3
 8103662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8103666:	e003      	b.n	8103670 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8103668:	687b      	ldr	r3, [r7, #4]
 810366a:	2201      	movs	r2, #1
 810366c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8103670:	687b      	ldr	r3, [r7, #4]
 8103672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103674:	2b00      	cmp	r3, #0
 8103676:	f000 8272 	beq.w	8103b5e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 810367a:	687b      	ldr	r3, [r7, #4]
 810367c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810367e:	6878      	ldr	r0, [r7, #4]
 8103680:	4798      	blx	r3
 8103682:	e26c      	b.n	8103b5e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8103684:	687b      	ldr	r3, [r7, #4]
 8103686:	681b      	ldr	r3, [r3, #0]
 8103688:	4a43      	ldr	r2, [pc, #268]	; (8103798 <HAL_DMA_IRQHandler+0xa48>)
 810368a:	4293      	cmp	r3, r2
 810368c:	d022      	beq.n	81036d4 <HAL_DMA_IRQHandler+0x984>
 810368e:	687b      	ldr	r3, [r7, #4]
 8103690:	681b      	ldr	r3, [r3, #0]
 8103692:	4a42      	ldr	r2, [pc, #264]	; (810379c <HAL_DMA_IRQHandler+0xa4c>)
 8103694:	4293      	cmp	r3, r2
 8103696:	d01d      	beq.n	81036d4 <HAL_DMA_IRQHandler+0x984>
 8103698:	687b      	ldr	r3, [r7, #4]
 810369a:	681b      	ldr	r3, [r3, #0]
 810369c:	4a40      	ldr	r2, [pc, #256]	; (81037a0 <HAL_DMA_IRQHandler+0xa50>)
 810369e:	4293      	cmp	r3, r2
 81036a0:	d018      	beq.n	81036d4 <HAL_DMA_IRQHandler+0x984>
 81036a2:	687b      	ldr	r3, [r7, #4]
 81036a4:	681b      	ldr	r3, [r3, #0]
 81036a6:	4a3f      	ldr	r2, [pc, #252]	; (81037a4 <HAL_DMA_IRQHandler+0xa54>)
 81036a8:	4293      	cmp	r3, r2
 81036aa:	d013      	beq.n	81036d4 <HAL_DMA_IRQHandler+0x984>
 81036ac:	687b      	ldr	r3, [r7, #4]
 81036ae:	681b      	ldr	r3, [r3, #0]
 81036b0:	4a3d      	ldr	r2, [pc, #244]	; (81037a8 <HAL_DMA_IRQHandler+0xa58>)
 81036b2:	4293      	cmp	r3, r2
 81036b4:	d00e      	beq.n	81036d4 <HAL_DMA_IRQHandler+0x984>
 81036b6:	687b      	ldr	r3, [r7, #4]
 81036b8:	681b      	ldr	r3, [r3, #0]
 81036ba:	4a3c      	ldr	r2, [pc, #240]	; (81037ac <HAL_DMA_IRQHandler+0xa5c>)
 81036bc:	4293      	cmp	r3, r2
 81036be:	d009      	beq.n	81036d4 <HAL_DMA_IRQHandler+0x984>
 81036c0:	687b      	ldr	r3, [r7, #4]
 81036c2:	681b      	ldr	r3, [r3, #0]
 81036c4:	4a3a      	ldr	r2, [pc, #232]	; (81037b0 <HAL_DMA_IRQHandler+0xa60>)
 81036c6:	4293      	cmp	r3, r2
 81036c8:	d004      	beq.n	81036d4 <HAL_DMA_IRQHandler+0x984>
 81036ca:	687b      	ldr	r3, [r7, #4]
 81036cc:	681b      	ldr	r3, [r3, #0]
 81036ce:	4a39      	ldr	r2, [pc, #228]	; (81037b4 <HAL_DMA_IRQHandler+0xa64>)
 81036d0:	4293      	cmp	r3, r2
 81036d2:	d101      	bne.n	81036d8 <HAL_DMA_IRQHandler+0x988>
 81036d4:	2301      	movs	r3, #1
 81036d6:	e000      	b.n	81036da <HAL_DMA_IRQHandler+0x98a>
 81036d8:	2300      	movs	r3, #0
 81036da:	2b00      	cmp	r3, #0
 81036dc:	f000 823f 	beq.w	8103b5e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 81036e0:	687b      	ldr	r3, [r7, #4]
 81036e2:	681b      	ldr	r3, [r3, #0]
 81036e4:	681b      	ldr	r3, [r3, #0]
 81036e6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 81036e8:	687b      	ldr	r3, [r7, #4]
 81036ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81036ec:	f003 031f 	and.w	r3, r3, #31
 81036f0:	2204      	movs	r2, #4
 81036f2:	409a      	lsls	r2, r3
 81036f4:	697b      	ldr	r3, [r7, #20]
 81036f6:	4013      	ands	r3, r2
 81036f8:	2b00      	cmp	r3, #0
 81036fa:	f000 80cd 	beq.w	8103898 <HAL_DMA_IRQHandler+0xb48>
 81036fe:	693b      	ldr	r3, [r7, #16]
 8103700:	f003 0304 	and.w	r3, r3, #4
 8103704:	2b00      	cmp	r3, #0
 8103706:	f000 80c7 	beq.w	8103898 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 810370a:	687b      	ldr	r3, [r7, #4]
 810370c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810370e:	f003 031f 	and.w	r3, r3, #31
 8103712:	2204      	movs	r2, #4
 8103714:	409a      	lsls	r2, r3
 8103716:	69fb      	ldr	r3, [r7, #28]
 8103718:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810371a:	693b      	ldr	r3, [r7, #16]
 810371c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103720:	2b00      	cmp	r3, #0
 8103722:	d049      	beq.n	81037b8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8103724:	693b      	ldr	r3, [r7, #16]
 8103726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810372a:	2b00      	cmp	r3, #0
 810372c:	d109      	bne.n	8103742 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 810372e:	687b      	ldr	r3, [r7, #4]
 8103730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103732:	2b00      	cmp	r3, #0
 8103734:	f000 8210 	beq.w	8103b58 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8103738:	687b      	ldr	r3, [r7, #4]
 810373a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810373c:	6878      	ldr	r0, [r7, #4]
 810373e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103740:	e20a      	b.n	8103b58 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8103742:	687b      	ldr	r3, [r7, #4]
 8103744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103746:	2b00      	cmp	r3, #0
 8103748:	f000 8206 	beq.w	8103b58 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 810374c:	687b      	ldr	r3, [r7, #4]
 810374e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103750:	6878      	ldr	r0, [r7, #4]
 8103752:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103754:	e200      	b.n	8103b58 <HAL_DMA_IRQHandler+0xe08>
 8103756:	bf00      	nop
 8103758:	40020010 	.word	0x40020010
 810375c:	40020028 	.word	0x40020028
 8103760:	40020040 	.word	0x40020040
 8103764:	40020058 	.word	0x40020058
 8103768:	40020070 	.word	0x40020070
 810376c:	40020088 	.word	0x40020088
 8103770:	400200a0 	.word	0x400200a0
 8103774:	400200b8 	.word	0x400200b8
 8103778:	40020410 	.word	0x40020410
 810377c:	40020428 	.word	0x40020428
 8103780:	40020440 	.word	0x40020440
 8103784:	40020458 	.word	0x40020458
 8103788:	40020470 	.word	0x40020470
 810378c:	40020488 	.word	0x40020488
 8103790:	400204a0 	.word	0x400204a0
 8103794:	400204b8 	.word	0x400204b8
 8103798:	58025408 	.word	0x58025408
 810379c:	5802541c 	.word	0x5802541c
 81037a0:	58025430 	.word	0x58025430
 81037a4:	58025444 	.word	0x58025444
 81037a8:	58025458 	.word	0x58025458
 81037ac:	5802546c 	.word	0x5802546c
 81037b0:	58025480 	.word	0x58025480
 81037b4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 81037b8:	693b      	ldr	r3, [r7, #16]
 81037ba:	f003 0320 	and.w	r3, r3, #32
 81037be:	2b00      	cmp	r3, #0
 81037c0:	d160      	bne.n	8103884 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 81037c2:	687b      	ldr	r3, [r7, #4]
 81037c4:	681b      	ldr	r3, [r3, #0]
 81037c6:	4a8c      	ldr	r2, [pc, #560]	; (81039f8 <HAL_DMA_IRQHandler+0xca8>)
 81037c8:	4293      	cmp	r3, r2
 81037ca:	d04a      	beq.n	8103862 <HAL_DMA_IRQHandler+0xb12>
 81037cc:	687b      	ldr	r3, [r7, #4]
 81037ce:	681b      	ldr	r3, [r3, #0]
 81037d0:	4a8a      	ldr	r2, [pc, #552]	; (81039fc <HAL_DMA_IRQHandler+0xcac>)
 81037d2:	4293      	cmp	r3, r2
 81037d4:	d045      	beq.n	8103862 <HAL_DMA_IRQHandler+0xb12>
 81037d6:	687b      	ldr	r3, [r7, #4]
 81037d8:	681b      	ldr	r3, [r3, #0]
 81037da:	4a89      	ldr	r2, [pc, #548]	; (8103a00 <HAL_DMA_IRQHandler+0xcb0>)
 81037dc:	4293      	cmp	r3, r2
 81037de:	d040      	beq.n	8103862 <HAL_DMA_IRQHandler+0xb12>
 81037e0:	687b      	ldr	r3, [r7, #4]
 81037e2:	681b      	ldr	r3, [r3, #0]
 81037e4:	4a87      	ldr	r2, [pc, #540]	; (8103a04 <HAL_DMA_IRQHandler+0xcb4>)
 81037e6:	4293      	cmp	r3, r2
 81037e8:	d03b      	beq.n	8103862 <HAL_DMA_IRQHandler+0xb12>
 81037ea:	687b      	ldr	r3, [r7, #4]
 81037ec:	681b      	ldr	r3, [r3, #0]
 81037ee:	4a86      	ldr	r2, [pc, #536]	; (8103a08 <HAL_DMA_IRQHandler+0xcb8>)
 81037f0:	4293      	cmp	r3, r2
 81037f2:	d036      	beq.n	8103862 <HAL_DMA_IRQHandler+0xb12>
 81037f4:	687b      	ldr	r3, [r7, #4]
 81037f6:	681b      	ldr	r3, [r3, #0]
 81037f8:	4a84      	ldr	r2, [pc, #528]	; (8103a0c <HAL_DMA_IRQHandler+0xcbc>)
 81037fa:	4293      	cmp	r3, r2
 81037fc:	d031      	beq.n	8103862 <HAL_DMA_IRQHandler+0xb12>
 81037fe:	687b      	ldr	r3, [r7, #4]
 8103800:	681b      	ldr	r3, [r3, #0]
 8103802:	4a83      	ldr	r2, [pc, #524]	; (8103a10 <HAL_DMA_IRQHandler+0xcc0>)
 8103804:	4293      	cmp	r3, r2
 8103806:	d02c      	beq.n	8103862 <HAL_DMA_IRQHandler+0xb12>
 8103808:	687b      	ldr	r3, [r7, #4]
 810380a:	681b      	ldr	r3, [r3, #0]
 810380c:	4a81      	ldr	r2, [pc, #516]	; (8103a14 <HAL_DMA_IRQHandler+0xcc4>)
 810380e:	4293      	cmp	r3, r2
 8103810:	d027      	beq.n	8103862 <HAL_DMA_IRQHandler+0xb12>
 8103812:	687b      	ldr	r3, [r7, #4]
 8103814:	681b      	ldr	r3, [r3, #0]
 8103816:	4a80      	ldr	r2, [pc, #512]	; (8103a18 <HAL_DMA_IRQHandler+0xcc8>)
 8103818:	4293      	cmp	r3, r2
 810381a:	d022      	beq.n	8103862 <HAL_DMA_IRQHandler+0xb12>
 810381c:	687b      	ldr	r3, [r7, #4]
 810381e:	681b      	ldr	r3, [r3, #0]
 8103820:	4a7e      	ldr	r2, [pc, #504]	; (8103a1c <HAL_DMA_IRQHandler+0xccc>)
 8103822:	4293      	cmp	r3, r2
 8103824:	d01d      	beq.n	8103862 <HAL_DMA_IRQHandler+0xb12>
 8103826:	687b      	ldr	r3, [r7, #4]
 8103828:	681b      	ldr	r3, [r3, #0]
 810382a:	4a7d      	ldr	r2, [pc, #500]	; (8103a20 <HAL_DMA_IRQHandler+0xcd0>)
 810382c:	4293      	cmp	r3, r2
 810382e:	d018      	beq.n	8103862 <HAL_DMA_IRQHandler+0xb12>
 8103830:	687b      	ldr	r3, [r7, #4]
 8103832:	681b      	ldr	r3, [r3, #0]
 8103834:	4a7b      	ldr	r2, [pc, #492]	; (8103a24 <HAL_DMA_IRQHandler+0xcd4>)
 8103836:	4293      	cmp	r3, r2
 8103838:	d013      	beq.n	8103862 <HAL_DMA_IRQHandler+0xb12>
 810383a:	687b      	ldr	r3, [r7, #4]
 810383c:	681b      	ldr	r3, [r3, #0]
 810383e:	4a7a      	ldr	r2, [pc, #488]	; (8103a28 <HAL_DMA_IRQHandler+0xcd8>)
 8103840:	4293      	cmp	r3, r2
 8103842:	d00e      	beq.n	8103862 <HAL_DMA_IRQHandler+0xb12>
 8103844:	687b      	ldr	r3, [r7, #4]
 8103846:	681b      	ldr	r3, [r3, #0]
 8103848:	4a78      	ldr	r2, [pc, #480]	; (8103a2c <HAL_DMA_IRQHandler+0xcdc>)
 810384a:	4293      	cmp	r3, r2
 810384c:	d009      	beq.n	8103862 <HAL_DMA_IRQHandler+0xb12>
 810384e:	687b      	ldr	r3, [r7, #4]
 8103850:	681b      	ldr	r3, [r3, #0]
 8103852:	4a77      	ldr	r2, [pc, #476]	; (8103a30 <HAL_DMA_IRQHandler+0xce0>)
 8103854:	4293      	cmp	r3, r2
 8103856:	d004      	beq.n	8103862 <HAL_DMA_IRQHandler+0xb12>
 8103858:	687b      	ldr	r3, [r7, #4]
 810385a:	681b      	ldr	r3, [r3, #0]
 810385c:	4a75      	ldr	r2, [pc, #468]	; (8103a34 <HAL_DMA_IRQHandler+0xce4>)
 810385e:	4293      	cmp	r3, r2
 8103860:	d108      	bne.n	8103874 <HAL_DMA_IRQHandler+0xb24>
 8103862:	687b      	ldr	r3, [r7, #4]
 8103864:	681b      	ldr	r3, [r3, #0]
 8103866:	681a      	ldr	r2, [r3, #0]
 8103868:	687b      	ldr	r3, [r7, #4]
 810386a:	681b      	ldr	r3, [r3, #0]
 810386c:	f022 0208 	bic.w	r2, r2, #8
 8103870:	601a      	str	r2, [r3, #0]
 8103872:	e007      	b.n	8103884 <HAL_DMA_IRQHandler+0xb34>
 8103874:	687b      	ldr	r3, [r7, #4]
 8103876:	681b      	ldr	r3, [r3, #0]
 8103878:	681a      	ldr	r2, [r3, #0]
 810387a:	687b      	ldr	r3, [r7, #4]
 810387c:	681b      	ldr	r3, [r3, #0]
 810387e:	f022 0204 	bic.w	r2, r2, #4
 8103882:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8103884:	687b      	ldr	r3, [r7, #4]
 8103886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103888:	2b00      	cmp	r3, #0
 810388a:	f000 8165 	beq.w	8103b58 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 810388e:	687b      	ldr	r3, [r7, #4]
 8103890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103892:	6878      	ldr	r0, [r7, #4]
 8103894:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103896:	e15f      	b.n	8103b58 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8103898:	687b      	ldr	r3, [r7, #4]
 810389a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810389c:	f003 031f 	and.w	r3, r3, #31
 81038a0:	2202      	movs	r2, #2
 81038a2:	409a      	lsls	r2, r3
 81038a4:	697b      	ldr	r3, [r7, #20]
 81038a6:	4013      	ands	r3, r2
 81038a8:	2b00      	cmp	r3, #0
 81038aa:	f000 80c5 	beq.w	8103a38 <HAL_DMA_IRQHandler+0xce8>
 81038ae:	693b      	ldr	r3, [r7, #16]
 81038b0:	f003 0302 	and.w	r3, r3, #2
 81038b4:	2b00      	cmp	r3, #0
 81038b6:	f000 80bf 	beq.w	8103a38 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 81038ba:	687b      	ldr	r3, [r7, #4]
 81038bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81038be:	f003 031f 	and.w	r3, r3, #31
 81038c2:	2202      	movs	r2, #2
 81038c4:	409a      	lsls	r2, r3
 81038c6:	69fb      	ldr	r3, [r7, #28]
 81038c8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81038ca:	693b      	ldr	r3, [r7, #16]
 81038cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81038d0:	2b00      	cmp	r3, #0
 81038d2:	d018      	beq.n	8103906 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 81038d4:	693b      	ldr	r3, [r7, #16]
 81038d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81038da:	2b00      	cmp	r3, #0
 81038dc:	d109      	bne.n	81038f2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 81038de:	687b      	ldr	r3, [r7, #4]
 81038e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81038e2:	2b00      	cmp	r3, #0
 81038e4:	f000 813a 	beq.w	8103b5c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 81038e8:	687b      	ldr	r3, [r7, #4]
 81038ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81038ec:	6878      	ldr	r0, [r7, #4]
 81038ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81038f0:	e134      	b.n	8103b5c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 81038f2:	687b      	ldr	r3, [r7, #4]
 81038f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81038f6:	2b00      	cmp	r3, #0
 81038f8:	f000 8130 	beq.w	8103b5c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 81038fc:	687b      	ldr	r3, [r7, #4]
 81038fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103900:	6878      	ldr	r0, [r7, #4]
 8103902:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103904:	e12a      	b.n	8103b5c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8103906:	693b      	ldr	r3, [r7, #16]
 8103908:	f003 0320 	and.w	r3, r3, #32
 810390c:	2b00      	cmp	r3, #0
 810390e:	d168      	bne.n	81039e2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8103910:	687b      	ldr	r3, [r7, #4]
 8103912:	681b      	ldr	r3, [r3, #0]
 8103914:	4a38      	ldr	r2, [pc, #224]	; (81039f8 <HAL_DMA_IRQHandler+0xca8>)
 8103916:	4293      	cmp	r3, r2
 8103918:	d04a      	beq.n	81039b0 <HAL_DMA_IRQHandler+0xc60>
 810391a:	687b      	ldr	r3, [r7, #4]
 810391c:	681b      	ldr	r3, [r3, #0]
 810391e:	4a37      	ldr	r2, [pc, #220]	; (81039fc <HAL_DMA_IRQHandler+0xcac>)
 8103920:	4293      	cmp	r3, r2
 8103922:	d045      	beq.n	81039b0 <HAL_DMA_IRQHandler+0xc60>
 8103924:	687b      	ldr	r3, [r7, #4]
 8103926:	681b      	ldr	r3, [r3, #0]
 8103928:	4a35      	ldr	r2, [pc, #212]	; (8103a00 <HAL_DMA_IRQHandler+0xcb0>)
 810392a:	4293      	cmp	r3, r2
 810392c:	d040      	beq.n	81039b0 <HAL_DMA_IRQHandler+0xc60>
 810392e:	687b      	ldr	r3, [r7, #4]
 8103930:	681b      	ldr	r3, [r3, #0]
 8103932:	4a34      	ldr	r2, [pc, #208]	; (8103a04 <HAL_DMA_IRQHandler+0xcb4>)
 8103934:	4293      	cmp	r3, r2
 8103936:	d03b      	beq.n	81039b0 <HAL_DMA_IRQHandler+0xc60>
 8103938:	687b      	ldr	r3, [r7, #4]
 810393a:	681b      	ldr	r3, [r3, #0]
 810393c:	4a32      	ldr	r2, [pc, #200]	; (8103a08 <HAL_DMA_IRQHandler+0xcb8>)
 810393e:	4293      	cmp	r3, r2
 8103940:	d036      	beq.n	81039b0 <HAL_DMA_IRQHandler+0xc60>
 8103942:	687b      	ldr	r3, [r7, #4]
 8103944:	681b      	ldr	r3, [r3, #0]
 8103946:	4a31      	ldr	r2, [pc, #196]	; (8103a0c <HAL_DMA_IRQHandler+0xcbc>)
 8103948:	4293      	cmp	r3, r2
 810394a:	d031      	beq.n	81039b0 <HAL_DMA_IRQHandler+0xc60>
 810394c:	687b      	ldr	r3, [r7, #4]
 810394e:	681b      	ldr	r3, [r3, #0]
 8103950:	4a2f      	ldr	r2, [pc, #188]	; (8103a10 <HAL_DMA_IRQHandler+0xcc0>)
 8103952:	4293      	cmp	r3, r2
 8103954:	d02c      	beq.n	81039b0 <HAL_DMA_IRQHandler+0xc60>
 8103956:	687b      	ldr	r3, [r7, #4]
 8103958:	681b      	ldr	r3, [r3, #0]
 810395a:	4a2e      	ldr	r2, [pc, #184]	; (8103a14 <HAL_DMA_IRQHandler+0xcc4>)
 810395c:	4293      	cmp	r3, r2
 810395e:	d027      	beq.n	81039b0 <HAL_DMA_IRQHandler+0xc60>
 8103960:	687b      	ldr	r3, [r7, #4]
 8103962:	681b      	ldr	r3, [r3, #0]
 8103964:	4a2c      	ldr	r2, [pc, #176]	; (8103a18 <HAL_DMA_IRQHandler+0xcc8>)
 8103966:	4293      	cmp	r3, r2
 8103968:	d022      	beq.n	81039b0 <HAL_DMA_IRQHandler+0xc60>
 810396a:	687b      	ldr	r3, [r7, #4]
 810396c:	681b      	ldr	r3, [r3, #0]
 810396e:	4a2b      	ldr	r2, [pc, #172]	; (8103a1c <HAL_DMA_IRQHandler+0xccc>)
 8103970:	4293      	cmp	r3, r2
 8103972:	d01d      	beq.n	81039b0 <HAL_DMA_IRQHandler+0xc60>
 8103974:	687b      	ldr	r3, [r7, #4]
 8103976:	681b      	ldr	r3, [r3, #0]
 8103978:	4a29      	ldr	r2, [pc, #164]	; (8103a20 <HAL_DMA_IRQHandler+0xcd0>)
 810397a:	4293      	cmp	r3, r2
 810397c:	d018      	beq.n	81039b0 <HAL_DMA_IRQHandler+0xc60>
 810397e:	687b      	ldr	r3, [r7, #4]
 8103980:	681b      	ldr	r3, [r3, #0]
 8103982:	4a28      	ldr	r2, [pc, #160]	; (8103a24 <HAL_DMA_IRQHandler+0xcd4>)
 8103984:	4293      	cmp	r3, r2
 8103986:	d013      	beq.n	81039b0 <HAL_DMA_IRQHandler+0xc60>
 8103988:	687b      	ldr	r3, [r7, #4]
 810398a:	681b      	ldr	r3, [r3, #0]
 810398c:	4a26      	ldr	r2, [pc, #152]	; (8103a28 <HAL_DMA_IRQHandler+0xcd8>)
 810398e:	4293      	cmp	r3, r2
 8103990:	d00e      	beq.n	81039b0 <HAL_DMA_IRQHandler+0xc60>
 8103992:	687b      	ldr	r3, [r7, #4]
 8103994:	681b      	ldr	r3, [r3, #0]
 8103996:	4a25      	ldr	r2, [pc, #148]	; (8103a2c <HAL_DMA_IRQHandler+0xcdc>)
 8103998:	4293      	cmp	r3, r2
 810399a:	d009      	beq.n	81039b0 <HAL_DMA_IRQHandler+0xc60>
 810399c:	687b      	ldr	r3, [r7, #4]
 810399e:	681b      	ldr	r3, [r3, #0]
 81039a0:	4a23      	ldr	r2, [pc, #140]	; (8103a30 <HAL_DMA_IRQHandler+0xce0>)
 81039a2:	4293      	cmp	r3, r2
 81039a4:	d004      	beq.n	81039b0 <HAL_DMA_IRQHandler+0xc60>
 81039a6:	687b      	ldr	r3, [r7, #4]
 81039a8:	681b      	ldr	r3, [r3, #0]
 81039aa:	4a22      	ldr	r2, [pc, #136]	; (8103a34 <HAL_DMA_IRQHandler+0xce4>)
 81039ac:	4293      	cmp	r3, r2
 81039ae:	d108      	bne.n	81039c2 <HAL_DMA_IRQHandler+0xc72>
 81039b0:	687b      	ldr	r3, [r7, #4]
 81039b2:	681b      	ldr	r3, [r3, #0]
 81039b4:	681a      	ldr	r2, [r3, #0]
 81039b6:	687b      	ldr	r3, [r7, #4]
 81039b8:	681b      	ldr	r3, [r3, #0]
 81039ba:	f022 0214 	bic.w	r2, r2, #20
 81039be:	601a      	str	r2, [r3, #0]
 81039c0:	e007      	b.n	81039d2 <HAL_DMA_IRQHandler+0xc82>
 81039c2:	687b      	ldr	r3, [r7, #4]
 81039c4:	681b      	ldr	r3, [r3, #0]
 81039c6:	681a      	ldr	r2, [r3, #0]
 81039c8:	687b      	ldr	r3, [r7, #4]
 81039ca:	681b      	ldr	r3, [r3, #0]
 81039cc:	f022 020a 	bic.w	r2, r2, #10
 81039d0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 81039d2:	687b      	ldr	r3, [r7, #4]
 81039d4:	2200      	movs	r2, #0
 81039d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81039da:	687b      	ldr	r3, [r7, #4]
 81039dc:	2201      	movs	r2, #1
 81039de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 81039e2:	687b      	ldr	r3, [r7, #4]
 81039e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81039e6:	2b00      	cmp	r3, #0
 81039e8:	f000 80b8 	beq.w	8103b5c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 81039ec:	687b      	ldr	r3, [r7, #4]
 81039ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81039f0:	6878      	ldr	r0, [r7, #4]
 81039f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81039f4:	e0b2      	b.n	8103b5c <HAL_DMA_IRQHandler+0xe0c>
 81039f6:	bf00      	nop
 81039f8:	40020010 	.word	0x40020010
 81039fc:	40020028 	.word	0x40020028
 8103a00:	40020040 	.word	0x40020040
 8103a04:	40020058 	.word	0x40020058
 8103a08:	40020070 	.word	0x40020070
 8103a0c:	40020088 	.word	0x40020088
 8103a10:	400200a0 	.word	0x400200a0
 8103a14:	400200b8 	.word	0x400200b8
 8103a18:	40020410 	.word	0x40020410
 8103a1c:	40020428 	.word	0x40020428
 8103a20:	40020440 	.word	0x40020440
 8103a24:	40020458 	.word	0x40020458
 8103a28:	40020470 	.word	0x40020470
 8103a2c:	40020488 	.word	0x40020488
 8103a30:	400204a0 	.word	0x400204a0
 8103a34:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8103a38:	687b      	ldr	r3, [r7, #4]
 8103a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103a3c:	f003 031f 	and.w	r3, r3, #31
 8103a40:	2208      	movs	r2, #8
 8103a42:	409a      	lsls	r2, r3
 8103a44:	697b      	ldr	r3, [r7, #20]
 8103a46:	4013      	ands	r3, r2
 8103a48:	2b00      	cmp	r3, #0
 8103a4a:	f000 8088 	beq.w	8103b5e <HAL_DMA_IRQHandler+0xe0e>
 8103a4e:	693b      	ldr	r3, [r7, #16]
 8103a50:	f003 0308 	and.w	r3, r3, #8
 8103a54:	2b00      	cmp	r3, #0
 8103a56:	f000 8082 	beq.w	8103b5e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8103a5a:	687b      	ldr	r3, [r7, #4]
 8103a5c:	681b      	ldr	r3, [r3, #0]
 8103a5e:	4a41      	ldr	r2, [pc, #260]	; (8103b64 <HAL_DMA_IRQHandler+0xe14>)
 8103a60:	4293      	cmp	r3, r2
 8103a62:	d04a      	beq.n	8103afa <HAL_DMA_IRQHandler+0xdaa>
 8103a64:	687b      	ldr	r3, [r7, #4]
 8103a66:	681b      	ldr	r3, [r3, #0]
 8103a68:	4a3f      	ldr	r2, [pc, #252]	; (8103b68 <HAL_DMA_IRQHandler+0xe18>)
 8103a6a:	4293      	cmp	r3, r2
 8103a6c:	d045      	beq.n	8103afa <HAL_DMA_IRQHandler+0xdaa>
 8103a6e:	687b      	ldr	r3, [r7, #4]
 8103a70:	681b      	ldr	r3, [r3, #0]
 8103a72:	4a3e      	ldr	r2, [pc, #248]	; (8103b6c <HAL_DMA_IRQHandler+0xe1c>)
 8103a74:	4293      	cmp	r3, r2
 8103a76:	d040      	beq.n	8103afa <HAL_DMA_IRQHandler+0xdaa>
 8103a78:	687b      	ldr	r3, [r7, #4]
 8103a7a:	681b      	ldr	r3, [r3, #0]
 8103a7c:	4a3c      	ldr	r2, [pc, #240]	; (8103b70 <HAL_DMA_IRQHandler+0xe20>)
 8103a7e:	4293      	cmp	r3, r2
 8103a80:	d03b      	beq.n	8103afa <HAL_DMA_IRQHandler+0xdaa>
 8103a82:	687b      	ldr	r3, [r7, #4]
 8103a84:	681b      	ldr	r3, [r3, #0]
 8103a86:	4a3b      	ldr	r2, [pc, #236]	; (8103b74 <HAL_DMA_IRQHandler+0xe24>)
 8103a88:	4293      	cmp	r3, r2
 8103a8a:	d036      	beq.n	8103afa <HAL_DMA_IRQHandler+0xdaa>
 8103a8c:	687b      	ldr	r3, [r7, #4]
 8103a8e:	681b      	ldr	r3, [r3, #0]
 8103a90:	4a39      	ldr	r2, [pc, #228]	; (8103b78 <HAL_DMA_IRQHandler+0xe28>)
 8103a92:	4293      	cmp	r3, r2
 8103a94:	d031      	beq.n	8103afa <HAL_DMA_IRQHandler+0xdaa>
 8103a96:	687b      	ldr	r3, [r7, #4]
 8103a98:	681b      	ldr	r3, [r3, #0]
 8103a9a:	4a38      	ldr	r2, [pc, #224]	; (8103b7c <HAL_DMA_IRQHandler+0xe2c>)
 8103a9c:	4293      	cmp	r3, r2
 8103a9e:	d02c      	beq.n	8103afa <HAL_DMA_IRQHandler+0xdaa>
 8103aa0:	687b      	ldr	r3, [r7, #4]
 8103aa2:	681b      	ldr	r3, [r3, #0]
 8103aa4:	4a36      	ldr	r2, [pc, #216]	; (8103b80 <HAL_DMA_IRQHandler+0xe30>)
 8103aa6:	4293      	cmp	r3, r2
 8103aa8:	d027      	beq.n	8103afa <HAL_DMA_IRQHandler+0xdaa>
 8103aaa:	687b      	ldr	r3, [r7, #4]
 8103aac:	681b      	ldr	r3, [r3, #0]
 8103aae:	4a35      	ldr	r2, [pc, #212]	; (8103b84 <HAL_DMA_IRQHandler+0xe34>)
 8103ab0:	4293      	cmp	r3, r2
 8103ab2:	d022      	beq.n	8103afa <HAL_DMA_IRQHandler+0xdaa>
 8103ab4:	687b      	ldr	r3, [r7, #4]
 8103ab6:	681b      	ldr	r3, [r3, #0]
 8103ab8:	4a33      	ldr	r2, [pc, #204]	; (8103b88 <HAL_DMA_IRQHandler+0xe38>)
 8103aba:	4293      	cmp	r3, r2
 8103abc:	d01d      	beq.n	8103afa <HAL_DMA_IRQHandler+0xdaa>
 8103abe:	687b      	ldr	r3, [r7, #4]
 8103ac0:	681b      	ldr	r3, [r3, #0]
 8103ac2:	4a32      	ldr	r2, [pc, #200]	; (8103b8c <HAL_DMA_IRQHandler+0xe3c>)
 8103ac4:	4293      	cmp	r3, r2
 8103ac6:	d018      	beq.n	8103afa <HAL_DMA_IRQHandler+0xdaa>
 8103ac8:	687b      	ldr	r3, [r7, #4]
 8103aca:	681b      	ldr	r3, [r3, #0]
 8103acc:	4a30      	ldr	r2, [pc, #192]	; (8103b90 <HAL_DMA_IRQHandler+0xe40>)
 8103ace:	4293      	cmp	r3, r2
 8103ad0:	d013      	beq.n	8103afa <HAL_DMA_IRQHandler+0xdaa>
 8103ad2:	687b      	ldr	r3, [r7, #4]
 8103ad4:	681b      	ldr	r3, [r3, #0]
 8103ad6:	4a2f      	ldr	r2, [pc, #188]	; (8103b94 <HAL_DMA_IRQHandler+0xe44>)
 8103ad8:	4293      	cmp	r3, r2
 8103ada:	d00e      	beq.n	8103afa <HAL_DMA_IRQHandler+0xdaa>
 8103adc:	687b      	ldr	r3, [r7, #4]
 8103ade:	681b      	ldr	r3, [r3, #0]
 8103ae0:	4a2d      	ldr	r2, [pc, #180]	; (8103b98 <HAL_DMA_IRQHandler+0xe48>)
 8103ae2:	4293      	cmp	r3, r2
 8103ae4:	d009      	beq.n	8103afa <HAL_DMA_IRQHandler+0xdaa>
 8103ae6:	687b      	ldr	r3, [r7, #4]
 8103ae8:	681b      	ldr	r3, [r3, #0]
 8103aea:	4a2c      	ldr	r2, [pc, #176]	; (8103b9c <HAL_DMA_IRQHandler+0xe4c>)
 8103aec:	4293      	cmp	r3, r2
 8103aee:	d004      	beq.n	8103afa <HAL_DMA_IRQHandler+0xdaa>
 8103af0:	687b      	ldr	r3, [r7, #4]
 8103af2:	681b      	ldr	r3, [r3, #0]
 8103af4:	4a2a      	ldr	r2, [pc, #168]	; (8103ba0 <HAL_DMA_IRQHandler+0xe50>)
 8103af6:	4293      	cmp	r3, r2
 8103af8:	d108      	bne.n	8103b0c <HAL_DMA_IRQHandler+0xdbc>
 8103afa:	687b      	ldr	r3, [r7, #4]
 8103afc:	681b      	ldr	r3, [r3, #0]
 8103afe:	681a      	ldr	r2, [r3, #0]
 8103b00:	687b      	ldr	r3, [r7, #4]
 8103b02:	681b      	ldr	r3, [r3, #0]
 8103b04:	f022 021c 	bic.w	r2, r2, #28
 8103b08:	601a      	str	r2, [r3, #0]
 8103b0a:	e007      	b.n	8103b1c <HAL_DMA_IRQHandler+0xdcc>
 8103b0c:	687b      	ldr	r3, [r7, #4]
 8103b0e:	681b      	ldr	r3, [r3, #0]
 8103b10:	681a      	ldr	r2, [r3, #0]
 8103b12:	687b      	ldr	r3, [r7, #4]
 8103b14:	681b      	ldr	r3, [r3, #0]
 8103b16:	f022 020e 	bic.w	r2, r2, #14
 8103b1a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8103b1c:	687b      	ldr	r3, [r7, #4]
 8103b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103b20:	f003 031f 	and.w	r3, r3, #31
 8103b24:	2201      	movs	r2, #1
 8103b26:	409a      	lsls	r2, r3
 8103b28:	69fb      	ldr	r3, [r7, #28]
 8103b2a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8103b2c:	687b      	ldr	r3, [r7, #4]
 8103b2e:	2201      	movs	r2, #1
 8103b30:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8103b32:	687b      	ldr	r3, [r7, #4]
 8103b34:	2200      	movs	r2, #0
 8103b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8103b3a:	687b      	ldr	r3, [r7, #4]
 8103b3c:	2201      	movs	r2, #1
 8103b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8103b42:	687b      	ldr	r3, [r7, #4]
 8103b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103b46:	2b00      	cmp	r3, #0
 8103b48:	d009      	beq.n	8103b5e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8103b4a:	687b      	ldr	r3, [r7, #4]
 8103b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103b4e:	6878      	ldr	r0, [r7, #4]
 8103b50:	4798      	blx	r3
 8103b52:	e004      	b.n	8103b5e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8103b54:	bf00      	nop
 8103b56:	e002      	b.n	8103b5e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103b58:	bf00      	nop
 8103b5a:	e000      	b.n	8103b5e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103b5c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8103b5e:	3728      	adds	r7, #40	; 0x28
 8103b60:	46bd      	mov	sp, r7
 8103b62:	bd80      	pop	{r7, pc}
 8103b64:	40020010 	.word	0x40020010
 8103b68:	40020028 	.word	0x40020028
 8103b6c:	40020040 	.word	0x40020040
 8103b70:	40020058 	.word	0x40020058
 8103b74:	40020070 	.word	0x40020070
 8103b78:	40020088 	.word	0x40020088
 8103b7c:	400200a0 	.word	0x400200a0
 8103b80:	400200b8 	.word	0x400200b8
 8103b84:	40020410 	.word	0x40020410
 8103b88:	40020428 	.word	0x40020428
 8103b8c:	40020440 	.word	0x40020440
 8103b90:	40020458 	.word	0x40020458
 8103b94:	40020470 	.word	0x40020470
 8103b98:	40020488 	.word	0x40020488
 8103b9c:	400204a0 	.word	0x400204a0
 8103ba0:	400204b8 	.word	0x400204b8

08103ba4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8103ba4:	b480      	push	{r7}
 8103ba6:	b085      	sub	sp, #20
 8103ba8:	af00      	add	r7, sp, #0
 8103baa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103bac:	687b      	ldr	r3, [r7, #4]
 8103bae:	681b      	ldr	r3, [r3, #0]
 8103bb0:	4a43      	ldr	r2, [pc, #268]	; (8103cc0 <DMA_CalcBaseAndBitshift+0x11c>)
 8103bb2:	4293      	cmp	r3, r2
 8103bb4:	d04a      	beq.n	8103c4c <DMA_CalcBaseAndBitshift+0xa8>
 8103bb6:	687b      	ldr	r3, [r7, #4]
 8103bb8:	681b      	ldr	r3, [r3, #0]
 8103bba:	4a42      	ldr	r2, [pc, #264]	; (8103cc4 <DMA_CalcBaseAndBitshift+0x120>)
 8103bbc:	4293      	cmp	r3, r2
 8103bbe:	d045      	beq.n	8103c4c <DMA_CalcBaseAndBitshift+0xa8>
 8103bc0:	687b      	ldr	r3, [r7, #4]
 8103bc2:	681b      	ldr	r3, [r3, #0]
 8103bc4:	4a40      	ldr	r2, [pc, #256]	; (8103cc8 <DMA_CalcBaseAndBitshift+0x124>)
 8103bc6:	4293      	cmp	r3, r2
 8103bc8:	d040      	beq.n	8103c4c <DMA_CalcBaseAndBitshift+0xa8>
 8103bca:	687b      	ldr	r3, [r7, #4]
 8103bcc:	681b      	ldr	r3, [r3, #0]
 8103bce:	4a3f      	ldr	r2, [pc, #252]	; (8103ccc <DMA_CalcBaseAndBitshift+0x128>)
 8103bd0:	4293      	cmp	r3, r2
 8103bd2:	d03b      	beq.n	8103c4c <DMA_CalcBaseAndBitshift+0xa8>
 8103bd4:	687b      	ldr	r3, [r7, #4]
 8103bd6:	681b      	ldr	r3, [r3, #0]
 8103bd8:	4a3d      	ldr	r2, [pc, #244]	; (8103cd0 <DMA_CalcBaseAndBitshift+0x12c>)
 8103bda:	4293      	cmp	r3, r2
 8103bdc:	d036      	beq.n	8103c4c <DMA_CalcBaseAndBitshift+0xa8>
 8103bde:	687b      	ldr	r3, [r7, #4]
 8103be0:	681b      	ldr	r3, [r3, #0]
 8103be2:	4a3c      	ldr	r2, [pc, #240]	; (8103cd4 <DMA_CalcBaseAndBitshift+0x130>)
 8103be4:	4293      	cmp	r3, r2
 8103be6:	d031      	beq.n	8103c4c <DMA_CalcBaseAndBitshift+0xa8>
 8103be8:	687b      	ldr	r3, [r7, #4]
 8103bea:	681b      	ldr	r3, [r3, #0]
 8103bec:	4a3a      	ldr	r2, [pc, #232]	; (8103cd8 <DMA_CalcBaseAndBitshift+0x134>)
 8103bee:	4293      	cmp	r3, r2
 8103bf0:	d02c      	beq.n	8103c4c <DMA_CalcBaseAndBitshift+0xa8>
 8103bf2:	687b      	ldr	r3, [r7, #4]
 8103bf4:	681b      	ldr	r3, [r3, #0]
 8103bf6:	4a39      	ldr	r2, [pc, #228]	; (8103cdc <DMA_CalcBaseAndBitshift+0x138>)
 8103bf8:	4293      	cmp	r3, r2
 8103bfa:	d027      	beq.n	8103c4c <DMA_CalcBaseAndBitshift+0xa8>
 8103bfc:	687b      	ldr	r3, [r7, #4]
 8103bfe:	681b      	ldr	r3, [r3, #0]
 8103c00:	4a37      	ldr	r2, [pc, #220]	; (8103ce0 <DMA_CalcBaseAndBitshift+0x13c>)
 8103c02:	4293      	cmp	r3, r2
 8103c04:	d022      	beq.n	8103c4c <DMA_CalcBaseAndBitshift+0xa8>
 8103c06:	687b      	ldr	r3, [r7, #4]
 8103c08:	681b      	ldr	r3, [r3, #0]
 8103c0a:	4a36      	ldr	r2, [pc, #216]	; (8103ce4 <DMA_CalcBaseAndBitshift+0x140>)
 8103c0c:	4293      	cmp	r3, r2
 8103c0e:	d01d      	beq.n	8103c4c <DMA_CalcBaseAndBitshift+0xa8>
 8103c10:	687b      	ldr	r3, [r7, #4]
 8103c12:	681b      	ldr	r3, [r3, #0]
 8103c14:	4a34      	ldr	r2, [pc, #208]	; (8103ce8 <DMA_CalcBaseAndBitshift+0x144>)
 8103c16:	4293      	cmp	r3, r2
 8103c18:	d018      	beq.n	8103c4c <DMA_CalcBaseAndBitshift+0xa8>
 8103c1a:	687b      	ldr	r3, [r7, #4]
 8103c1c:	681b      	ldr	r3, [r3, #0]
 8103c1e:	4a33      	ldr	r2, [pc, #204]	; (8103cec <DMA_CalcBaseAndBitshift+0x148>)
 8103c20:	4293      	cmp	r3, r2
 8103c22:	d013      	beq.n	8103c4c <DMA_CalcBaseAndBitshift+0xa8>
 8103c24:	687b      	ldr	r3, [r7, #4]
 8103c26:	681b      	ldr	r3, [r3, #0]
 8103c28:	4a31      	ldr	r2, [pc, #196]	; (8103cf0 <DMA_CalcBaseAndBitshift+0x14c>)
 8103c2a:	4293      	cmp	r3, r2
 8103c2c:	d00e      	beq.n	8103c4c <DMA_CalcBaseAndBitshift+0xa8>
 8103c2e:	687b      	ldr	r3, [r7, #4]
 8103c30:	681b      	ldr	r3, [r3, #0]
 8103c32:	4a30      	ldr	r2, [pc, #192]	; (8103cf4 <DMA_CalcBaseAndBitshift+0x150>)
 8103c34:	4293      	cmp	r3, r2
 8103c36:	d009      	beq.n	8103c4c <DMA_CalcBaseAndBitshift+0xa8>
 8103c38:	687b      	ldr	r3, [r7, #4]
 8103c3a:	681b      	ldr	r3, [r3, #0]
 8103c3c:	4a2e      	ldr	r2, [pc, #184]	; (8103cf8 <DMA_CalcBaseAndBitshift+0x154>)
 8103c3e:	4293      	cmp	r3, r2
 8103c40:	d004      	beq.n	8103c4c <DMA_CalcBaseAndBitshift+0xa8>
 8103c42:	687b      	ldr	r3, [r7, #4]
 8103c44:	681b      	ldr	r3, [r3, #0]
 8103c46:	4a2d      	ldr	r2, [pc, #180]	; (8103cfc <DMA_CalcBaseAndBitshift+0x158>)
 8103c48:	4293      	cmp	r3, r2
 8103c4a:	d101      	bne.n	8103c50 <DMA_CalcBaseAndBitshift+0xac>
 8103c4c:	2301      	movs	r3, #1
 8103c4e:	e000      	b.n	8103c52 <DMA_CalcBaseAndBitshift+0xae>
 8103c50:	2300      	movs	r3, #0
 8103c52:	2b00      	cmp	r3, #0
 8103c54:	d026      	beq.n	8103ca4 <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8103c56:	687b      	ldr	r3, [r7, #4]
 8103c58:	681b      	ldr	r3, [r3, #0]
 8103c5a:	b2db      	uxtb	r3, r3
 8103c5c:	3b10      	subs	r3, #16
 8103c5e:	4a28      	ldr	r2, [pc, #160]	; (8103d00 <DMA_CalcBaseAndBitshift+0x15c>)
 8103c60:	fba2 2303 	umull	r2, r3, r2, r3
 8103c64:	091b      	lsrs	r3, r3, #4
 8103c66:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8103c68:	68fb      	ldr	r3, [r7, #12]
 8103c6a:	f003 0307 	and.w	r3, r3, #7
 8103c6e:	4a25      	ldr	r2, [pc, #148]	; (8103d04 <DMA_CalcBaseAndBitshift+0x160>)
 8103c70:	5cd3      	ldrb	r3, [r2, r3]
 8103c72:	461a      	mov	r2, r3
 8103c74:	687b      	ldr	r3, [r7, #4]
 8103c76:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8103c78:	68fb      	ldr	r3, [r7, #12]
 8103c7a:	2b03      	cmp	r3, #3
 8103c7c:	d909      	bls.n	8103c92 <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8103c7e:	687b      	ldr	r3, [r7, #4]
 8103c80:	681b      	ldr	r3, [r3, #0]
 8103c82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8103c86:	f023 0303 	bic.w	r3, r3, #3
 8103c8a:	1d1a      	adds	r2, r3, #4
 8103c8c:	687b      	ldr	r3, [r7, #4]
 8103c8e:	659a      	str	r2, [r3, #88]	; 0x58
 8103c90:	e00e      	b.n	8103cb0 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8103c92:	687b      	ldr	r3, [r7, #4]
 8103c94:	681b      	ldr	r3, [r3, #0]
 8103c96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8103c9a:	f023 0303 	bic.w	r3, r3, #3
 8103c9e:	687a      	ldr	r2, [r7, #4]
 8103ca0:	6593      	str	r3, [r2, #88]	; 0x58
 8103ca2:	e005      	b.n	8103cb0 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8103ca4:	687b      	ldr	r3, [r7, #4]
 8103ca6:	681b      	ldr	r3, [r3, #0]
 8103ca8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8103cac:	687b      	ldr	r3, [r7, #4]
 8103cae:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8103cb0:	687b      	ldr	r3, [r7, #4]
 8103cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8103cb4:	4618      	mov	r0, r3
 8103cb6:	3714      	adds	r7, #20
 8103cb8:	46bd      	mov	sp, r7
 8103cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103cbe:	4770      	bx	lr
 8103cc0:	40020010 	.word	0x40020010
 8103cc4:	40020028 	.word	0x40020028
 8103cc8:	40020040 	.word	0x40020040
 8103ccc:	40020058 	.word	0x40020058
 8103cd0:	40020070 	.word	0x40020070
 8103cd4:	40020088 	.word	0x40020088
 8103cd8:	400200a0 	.word	0x400200a0
 8103cdc:	400200b8 	.word	0x400200b8
 8103ce0:	40020410 	.word	0x40020410
 8103ce4:	40020428 	.word	0x40020428
 8103ce8:	40020440 	.word	0x40020440
 8103cec:	40020458 	.word	0x40020458
 8103cf0:	40020470 	.word	0x40020470
 8103cf4:	40020488 	.word	0x40020488
 8103cf8:	400204a0 	.word	0x400204a0
 8103cfc:	400204b8 	.word	0x400204b8
 8103d00:	aaaaaaab 	.word	0xaaaaaaab
 8103d04:	0810f17c 	.word	0x0810f17c

08103d08 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8103d08:	b480      	push	{r7}
 8103d0a:	b085      	sub	sp, #20
 8103d0c:	af00      	add	r7, sp, #0
 8103d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8103d10:	2300      	movs	r3, #0
 8103d12:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8103d14:	687b      	ldr	r3, [r7, #4]
 8103d16:	699b      	ldr	r3, [r3, #24]
 8103d18:	2b00      	cmp	r3, #0
 8103d1a:	d120      	bne.n	8103d5e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8103d1c:	687b      	ldr	r3, [r7, #4]
 8103d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103d20:	2b03      	cmp	r3, #3
 8103d22:	d858      	bhi.n	8103dd6 <DMA_CheckFifoParam+0xce>
 8103d24:	a201      	add	r2, pc, #4	; (adr r2, 8103d2c <DMA_CheckFifoParam+0x24>)
 8103d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103d2a:	bf00      	nop
 8103d2c:	08103d3d 	.word	0x08103d3d
 8103d30:	08103d4f 	.word	0x08103d4f
 8103d34:	08103d3d 	.word	0x08103d3d
 8103d38:	08103dd7 	.word	0x08103dd7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8103d3c:	687b      	ldr	r3, [r7, #4]
 8103d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103d40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103d44:	2b00      	cmp	r3, #0
 8103d46:	d048      	beq.n	8103dda <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8103d48:	2301      	movs	r3, #1
 8103d4a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8103d4c:	e045      	b.n	8103dda <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8103d4e:	687b      	ldr	r3, [r7, #4]
 8103d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103d52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8103d56:	d142      	bne.n	8103dde <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8103d58:	2301      	movs	r3, #1
 8103d5a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8103d5c:	e03f      	b.n	8103dde <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8103d5e:	687b      	ldr	r3, [r7, #4]
 8103d60:	699b      	ldr	r3, [r3, #24]
 8103d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103d66:	d123      	bne.n	8103db0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8103d68:	687b      	ldr	r3, [r7, #4]
 8103d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103d6c:	2b03      	cmp	r3, #3
 8103d6e:	d838      	bhi.n	8103de2 <DMA_CheckFifoParam+0xda>
 8103d70:	a201      	add	r2, pc, #4	; (adr r2, 8103d78 <DMA_CheckFifoParam+0x70>)
 8103d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103d76:	bf00      	nop
 8103d78:	08103d89 	.word	0x08103d89
 8103d7c:	08103d8f 	.word	0x08103d8f
 8103d80:	08103d89 	.word	0x08103d89
 8103d84:	08103da1 	.word	0x08103da1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8103d88:	2301      	movs	r3, #1
 8103d8a:	73fb      	strb	r3, [r7, #15]
        break;
 8103d8c:	e030      	b.n	8103df0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8103d8e:	687b      	ldr	r3, [r7, #4]
 8103d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103d92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103d96:	2b00      	cmp	r3, #0
 8103d98:	d025      	beq.n	8103de6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8103d9a:	2301      	movs	r3, #1
 8103d9c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8103d9e:	e022      	b.n	8103de6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8103da0:	687b      	ldr	r3, [r7, #4]
 8103da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103da4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8103da8:	d11f      	bne.n	8103dea <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8103daa:	2301      	movs	r3, #1
 8103dac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8103dae:	e01c      	b.n	8103dea <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8103db0:	687b      	ldr	r3, [r7, #4]
 8103db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103db4:	2b02      	cmp	r3, #2
 8103db6:	d902      	bls.n	8103dbe <DMA_CheckFifoParam+0xb6>
 8103db8:	2b03      	cmp	r3, #3
 8103dba:	d003      	beq.n	8103dc4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8103dbc:	e018      	b.n	8103df0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8103dbe:	2301      	movs	r3, #1
 8103dc0:	73fb      	strb	r3, [r7, #15]
        break;
 8103dc2:	e015      	b.n	8103df0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8103dc4:	687b      	ldr	r3, [r7, #4]
 8103dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103dc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103dcc:	2b00      	cmp	r3, #0
 8103dce:	d00e      	beq.n	8103dee <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8103dd0:	2301      	movs	r3, #1
 8103dd2:	73fb      	strb	r3, [r7, #15]
    break;
 8103dd4:	e00b      	b.n	8103dee <DMA_CheckFifoParam+0xe6>
        break;
 8103dd6:	bf00      	nop
 8103dd8:	e00a      	b.n	8103df0 <DMA_CheckFifoParam+0xe8>
        break;
 8103dda:	bf00      	nop
 8103ddc:	e008      	b.n	8103df0 <DMA_CheckFifoParam+0xe8>
        break;
 8103dde:	bf00      	nop
 8103de0:	e006      	b.n	8103df0 <DMA_CheckFifoParam+0xe8>
        break;
 8103de2:	bf00      	nop
 8103de4:	e004      	b.n	8103df0 <DMA_CheckFifoParam+0xe8>
        break;
 8103de6:	bf00      	nop
 8103de8:	e002      	b.n	8103df0 <DMA_CheckFifoParam+0xe8>
        break;
 8103dea:	bf00      	nop
 8103dec:	e000      	b.n	8103df0 <DMA_CheckFifoParam+0xe8>
    break;
 8103dee:	bf00      	nop
    }
  }

  return status;
 8103df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8103df2:	4618      	mov	r0, r3
 8103df4:	3714      	adds	r7, #20
 8103df6:	46bd      	mov	sp, r7
 8103df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103dfc:	4770      	bx	lr
 8103dfe:	bf00      	nop

08103e00 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8103e00:	b480      	push	{r7}
 8103e02:	b085      	sub	sp, #20
 8103e04:	af00      	add	r7, sp, #0
 8103e06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8103e08:	687b      	ldr	r3, [r7, #4]
 8103e0a:	681b      	ldr	r3, [r3, #0]
 8103e0c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8103e0e:	687b      	ldr	r3, [r7, #4]
 8103e10:	681b      	ldr	r3, [r3, #0]
 8103e12:	4a3a      	ldr	r2, [pc, #232]	; (8103efc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8103e14:	4293      	cmp	r3, r2
 8103e16:	d022      	beq.n	8103e5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103e18:	687b      	ldr	r3, [r7, #4]
 8103e1a:	681b      	ldr	r3, [r3, #0]
 8103e1c:	4a38      	ldr	r2, [pc, #224]	; (8103f00 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8103e1e:	4293      	cmp	r3, r2
 8103e20:	d01d      	beq.n	8103e5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103e22:	687b      	ldr	r3, [r7, #4]
 8103e24:	681b      	ldr	r3, [r3, #0]
 8103e26:	4a37      	ldr	r2, [pc, #220]	; (8103f04 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8103e28:	4293      	cmp	r3, r2
 8103e2a:	d018      	beq.n	8103e5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103e2c:	687b      	ldr	r3, [r7, #4]
 8103e2e:	681b      	ldr	r3, [r3, #0]
 8103e30:	4a35      	ldr	r2, [pc, #212]	; (8103f08 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8103e32:	4293      	cmp	r3, r2
 8103e34:	d013      	beq.n	8103e5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103e36:	687b      	ldr	r3, [r7, #4]
 8103e38:	681b      	ldr	r3, [r3, #0]
 8103e3a:	4a34      	ldr	r2, [pc, #208]	; (8103f0c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8103e3c:	4293      	cmp	r3, r2
 8103e3e:	d00e      	beq.n	8103e5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103e40:	687b      	ldr	r3, [r7, #4]
 8103e42:	681b      	ldr	r3, [r3, #0]
 8103e44:	4a32      	ldr	r2, [pc, #200]	; (8103f10 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8103e46:	4293      	cmp	r3, r2
 8103e48:	d009      	beq.n	8103e5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103e4a:	687b      	ldr	r3, [r7, #4]
 8103e4c:	681b      	ldr	r3, [r3, #0]
 8103e4e:	4a31      	ldr	r2, [pc, #196]	; (8103f14 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8103e50:	4293      	cmp	r3, r2
 8103e52:	d004      	beq.n	8103e5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103e54:	687b      	ldr	r3, [r7, #4]
 8103e56:	681b      	ldr	r3, [r3, #0]
 8103e58:	4a2f      	ldr	r2, [pc, #188]	; (8103f18 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8103e5a:	4293      	cmp	r3, r2
 8103e5c:	d101      	bne.n	8103e62 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8103e5e:	2301      	movs	r3, #1
 8103e60:	e000      	b.n	8103e64 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8103e62:	2300      	movs	r3, #0
 8103e64:	2b00      	cmp	r3, #0
 8103e66:	d01c      	beq.n	8103ea2 <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8103e68:	687b      	ldr	r3, [r7, #4]
 8103e6a:	681b      	ldr	r3, [r3, #0]
 8103e6c:	b2db      	uxtb	r3, r3
 8103e6e:	3b08      	subs	r3, #8
 8103e70:	4a2a      	ldr	r2, [pc, #168]	; (8103f1c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8103e72:	fba2 2303 	umull	r2, r3, r2, r3
 8103e76:	091b      	lsrs	r3, r3, #4
 8103e78:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8103e7a:	68fb      	ldr	r3, [r7, #12]
 8103e7c:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 8103e80:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 8103e84:	009b      	lsls	r3, r3, #2
 8103e86:	461a      	mov	r2, r3
 8103e88:	687b      	ldr	r3, [r7, #4]
 8103e8a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8103e8c:	687b      	ldr	r3, [r7, #4]
 8103e8e:	4a24      	ldr	r2, [pc, #144]	; (8103f20 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8103e90:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8103e92:	68fb      	ldr	r3, [r7, #12]
 8103e94:	f003 031f 	and.w	r3, r3, #31
 8103e98:	2201      	movs	r2, #1
 8103e9a:	409a      	lsls	r2, r3
 8103e9c:	687b      	ldr	r3, [r7, #4]
 8103e9e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8103ea0:	e026      	b.n	8103ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8103ea2:	687b      	ldr	r3, [r7, #4]
 8103ea4:	681b      	ldr	r3, [r3, #0]
 8103ea6:	b2db      	uxtb	r3, r3
 8103ea8:	3b10      	subs	r3, #16
 8103eaa:	4a1e      	ldr	r2, [pc, #120]	; (8103f24 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8103eac:	fba2 2303 	umull	r2, r3, r2, r3
 8103eb0:	091b      	lsrs	r3, r3, #4
 8103eb2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8103eb4:	68bb      	ldr	r3, [r7, #8]
 8103eb6:	4a1c      	ldr	r2, [pc, #112]	; (8103f28 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8103eb8:	4293      	cmp	r3, r2
 8103eba:	d806      	bhi.n	8103eca <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 8103ebc:	68bb      	ldr	r3, [r7, #8]
 8103ebe:	4a1b      	ldr	r2, [pc, #108]	; (8103f2c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8103ec0:	4293      	cmp	r3, r2
 8103ec2:	d902      	bls.n	8103eca <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 8103ec4:	68fb      	ldr	r3, [r7, #12]
 8103ec6:	3308      	adds	r3, #8
 8103ec8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8103eca:	68fb      	ldr	r3, [r7, #12]
 8103ecc:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8103ed0:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8103ed4:	009b      	lsls	r3, r3, #2
 8103ed6:	461a      	mov	r2, r3
 8103ed8:	687b      	ldr	r3, [r7, #4]
 8103eda:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8103edc:	687b      	ldr	r3, [r7, #4]
 8103ede:	4a14      	ldr	r2, [pc, #80]	; (8103f30 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8103ee0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8103ee2:	68fb      	ldr	r3, [r7, #12]
 8103ee4:	f003 031f 	and.w	r3, r3, #31
 8103ee8:	2201      	movs	r2, #1
 8103eea:	409a      	lsls	r2, r3
 8103eec:	687b      	ldr	r3, [r7, #4]
 8103eee:	669a      	str	r2, [r3, #104]	; 0x68
}
 8103ef0:	bf00      	nop
 8103ef2:	3714      	adds	r7, #20
 8103ef4:	46bd      	mov	sp, r7
 8103ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103efa:	4770      	bx	lr
 8103efc:	58025408 	.word	0x58025408
 8103f00:	5802541c 	.word	0x5802541c
 8103f04:	58025430 	.word	0x58025430
 8103f08:	58025444 	.word	0x58025444
 8103f0c:	58025458 	.word	0x58025458
 8103f10:	5802546c 	.word	0x5802546c
 8103f14:	58025480 	.word	0x58025480
 8103f18:	58025494 	.word	0x58025494
 8103f1c:	cccccccd 	.word	0xcccccccd
 8103f20:	58025880 	.word	0x58025880
 8103f24:	aaaaaaab 	.word	0xaaaaaaab
 8103f28:	400204b8 	.word	0x400204b8
 8103f2c:	4002040f 	.word	0x4002040f
 8103f30:	40020880 	.word	0x40020880

08103f34 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8103f34:	b480      	push	{r7}
 8103f36:	b085      	sub	sp, #20
 8103f38:	af00      	add	r7, sp, #0
 8103f3a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8103f3c:	687b      	ldr	r3, [r7, #4]
 8103f3e:	685b      	ldr	r3, [r3, #4]
 8103f40:	b2db      	uxtb	r3, r3
 8103f42:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8103f44:	68fb      	ldr	r3, [r7, #12]
 8103f46:	2b00      	cmp	r3, #0
 8103f48:	d04a      	beq.n	8103fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8103f4a:	68fb      	ldr	r3, [r7, #12]
 8103f4c:	2b08      	cmp	r3, #8
 8103f4e:	d847      	bhi.n	8103fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8103f50:	687b      	ldr	r3, [r7, #4]
 8103f52:	681b      	ldr	r3, [r3, #0]
 8103f54:	4a25      	ldr	r2, [pc, #148]	; (8103fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8103f56:	4293      	cmp	r3, r2
 8103f58:	d022      	beq.n	8103fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8103f5a:	687b      	ldr	r3, [r7, #4]
 8103f5c:	681b      	ldr	r3, [r3, #0]
 8103f5e:	4a24      	ldr	r2, [pc, #144]	; (8103ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8103f60:	4293      	cmp	r3, r2
 8103f62:	d01d      	beq.n	8103fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8103f64:	687b      	ldr	r3, [r7, #4]
 8103f66:	681b      	ldr	r3, [r3, #0]
 8103f68:	4a22      	ldr	r2, [pc, #136]	; (8103ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8103f6a:	4293      	cmp	r3, r2
 8103f6c:	d018      	beq.n	8103fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8103f6e:	687b      	ldr	r3, [r7, #4]
 8103f70:	681b      	ldr	r3, [r3, #0]
 8103f72:	4a21      	ldr	r2, [pc, #132]	; (8103ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8103f74:	4293      	cmp	r3, r2
 8103f76:	d013      	beq.n	8103fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8103f78:	687b      	ldr	r3, [r7, #4]
 8103f7a:	681b      	ldr	r3, [r3, #0]
 8103f7c:	4a1f      	ldr	r2, [pc, #124]	; (8103ffc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8103f7e:	4293      	cmp	r3, r2
 8103f80:	d00e      	beq.n	8103fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8103f82:	687b      	ldr	r3, [r7, #4]
 8103f84:	681b      	ldr	r3, [r3, #0]
 8103f86:	4a1e      	ldr	r2, [pc, #120]	; (8104000 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8103f88:	4293      	cmp	r3, r2
 8103f8a:	d009      	beq.n	8103fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8103f8c:	687b      	ldr	r3, [r7, #4]
 8103f8e:	681b      	ldr	r3, [r3, #0]
 8103f90:	4a1c      	ldr	r2, [pc, #112]	; (8104004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8103f92:	4293      	cmp	r3, r2
 8103f94:	d004      	beq.n	8103fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8103f96:	687b      	ldr	r3, [r7, #4]
 8103f98:	681b      	ldr	r3, [r3, #0]
 8103f9a:	4a1b      	ldr	r2, [pc, #108]	; (8104008 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8103f9c:	4293      	cmp	r3, r2
 8103f9e:	d101      	bne.n	8103fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8103fa0:	2301      	movs	r3, #1
 8103fa2:	e000      	b.n	8103fa6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8103fa4:	2300      	movs	r3, #0
 8103fa6:	2b00      	cmp	r3, #0
 8103fa8:	d00a      	beq.n	8103fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8103faa:	68fa      	ldr	r2, [r7, #12]
 8103fac:	4b17      	ldr	r3, [pc, #92]	; (810400c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8103fae:	4413      	add	r3, r2
 8103fb0:	009b      	lsls	r3, r3, #2
 8103fb2:	461a      	mov	r2, r3
 8103fb4:	687b      	ldr	r3, [r7, #4]
 8103fb6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8103fb8:	687b      	ldr	r3, [r7, #4]
 8103fba:	4a15      	ldr	r2, [pc, #84]	; (8104010 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8103fbc:	671a      	str	r2, [r3, #112]	; 0x70
 8103fbe:	e009      	b.n	8103fd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8103fc0:	68fa      	ldr	r2, [r7, #12]
 8103fc2:	4b14      	ldr	r3, [pc, #80]	; (8104014 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8103fc4:	4413      	add	r3, r2
 8103fc6:	009b      	lsls	r3, r3, #2
 8103fc8:	461a      	mov	r2, r3
 8103fca:	687b      	ldr	r3, [r7, #4]
 8103fcc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8103fce:	687b      	ldr	r3, [r7, #4]
 8103fd0:	4a11      	ldr	r2, [pc, #68]	; (8104018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8103fd2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8103fd4:	68fb      	ldr	r3, [r7, #12]
 8103fd6:	3b01      	subs	r3, #1
 8103fd8:	2201      	movs	r2, #1
 8103fda:	409a      	lsls	r2, r3
 8103fdc:	687b      	ldr	r3, [r7, #4]
 8103fde:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8103fe0:	bf00      	nop
 8103fe2:	3714      	adds	r7, #20
 8103fe4:	46bd      	mov	sp, r7
 8103fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fea:	4770      	bx	lr
 8103fec:	58025408 	.word	0x58025408
 8103ff0:	5802541c 	.word	0x5802541c
 8103ff4:	58025430 	.word	0x58025430
 8103ff8:	58025444 	.word	0x58025444
 8103ffc:	58025458 	.word	0x58025458
 8104000:	5802546c 	.word	0x5802546c
 8104004:	58025480 	.word	0x58025480
 8104008:	58025494 	.word	0x58025494
 810400c:	1600963f 	.word	0x1600963f
 8104010:	58025940 	.word	0x58025940
 8104014:	1000823f 	.word	0x1000823f
 8104018:	40020940 	.word	0x40020940

0810401c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 810401c:	b580      	push	{r7, lr}
 810401e:	b098      	sub	sp, #96	; 0x60
 8104020:	af00      	add	r7, sp, #0
 8104022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8104024:	4a84      	ldr	r2, [pc, #528]	; (8104238 <HAL_FDCAN_Init+0x21c>)
 8104026:	f107 030c 	add.w	r3, r7, #12
 810402a:	4611      	mov	r1, r2
 810402c:	224c      	movs	r2, #76	; 0x4c
 810402e:	4618      	mov	r0, r3
 8104030:	f008 fb56 	bl	810c6e0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8104034:	687b      	ldr	r3, [r7, #4]
 8104036:	2b00      	cmp	r3, #0
 8104038:	d101      	bne.n	810403e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 810403a:	2301      	movs	r3, #1
 810403c:	e1ca      	b.n	81043d4 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 810403e:	687b      	ldr	r3, [r7, #4]
 8104040:	681b      	ldr	r3, [r3, #0]
 8104042:	4a7e      	ldr	r2, [pc, #504]	; (810423c <HAL_FDCAN_Init+0x220>)
 8104044:	4293      	cmp	r3, r2
 8104046:	d106      	bne.n	8104056 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8104048:	687b      	ldr	r3, [r7, #4]
 810404a:	681b      	ldr	r3, [r3, #0]
 810404c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8104050:	461a      	mov	r2, r3
 8104052:	687b      	ldr	r3, [r7, #4]
 8104054:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8104056:	687b      	ldr	r3, [r7, #4]
 8104058:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 810405c:	b2db      	uxtb	r3, r3
 810405e:	2b00      	cmp	r3, #0
 8104060:	d106      	bne.n	8104070 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8104062:	687b      	ldr	r3, [r7, #4]
 8104064:	2200      	movs	r2, #0
 8104066:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 810406a:	6878      	ldr	r0, [r7, #4]
 810406c:	f7fd f8bc 	bl	81011e8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8104070:	687b      	ldr	r3, [r7, #4]
 8104072:	681b      	ldr	r3, [r3, #0]
 8104074:	699a      	ldr	r2, [r3, #24]
 8104076:	687b      	ldr	r3, [r7, #4]
 8104078:	681b      	ldr	r3, [r3, #0]
 810407a:	f022 0210 	bic.w	r2, r2, #16
 810407e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8104080:	f7fd ffc8 	bl	8102014 <HAL_GetTick>
 8104084:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8104086:	e014      	b.n	81040b2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8104088:	f7fd ffc4 	bl	8102014 <HAL_GetTick>
 810408c:	4602      	mov	r2, r0
 810408e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8104090:	1ad3      	subs	r3, r2, r3
 8104092:	2b0a      	cmp	r3, #10
 8104094:	d90d      	bls.n	81040b2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8104096:	687b      	ldr	r3, [r7, #4]
 8104098:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810409c:	f043 0201 	orr.w	r2, r3, #1
 81040a0:	687b      	ldr	r3, [r7, #4]
 81040a2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 81040a6:	687b      	ldr	r3, [r7, #4]
 81040a8:	2203      	movs	r2, #3
 81040aa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 81040ae:	2301      	movs	r3, #1
 81040b0:	e190      	b.n	81043d4 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 81040b2:	687b      	ldr	r3, [r7, #4]
 81040b4:	681b      	ldr	r3, [r3, #0]
 81040b6:	699b      	ldr	r3, [r3, #24]
 81040b8:	f003 0308 	and.w	r3, r3, #8
 81040bc:	2b08      	cmp	r3, #8
 81040be:	d0e3      	beq.n	8104088 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 81040c0:	687b      	ldr	r3, [r7, #4]
 81040c2:	681b      	ldr	r3, [r3, #0]
 81040c4:	699a      	ldr	r2, [r3, #24]
 81040c6:	687b      	ldr	r3, [r7, #4]
 81040c8:	681b      	ldr	r3, [r3, #0]
 81040ca:	f042 0201 	orr.w	r2, r2, #1
 81040ce:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 81040d0:	f7fd ffa0 	bl	8102014 <HAL_GetTick>
 81040d4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 81040d6:	e014      	b.n	8104102 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 81040d8:	f7fd ff9c 	bl	8102014 <HAL_GetTick>
 81040dc:	4602      	mov	r2, r0
 81040de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 81040e0:	1ad3      	subs	r3, r2, r3
 81040e2:	2b0a      	cmp	r3, #10
 81040e4:	d90d      	bls.n	8104102 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 81040e6:	687b      	ldr	r3, [r7, #4]
 81040e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81040ec:	f043 0201 	orr.w	r2, r3, #1
 81040f0:	687b      	ldr	r3, [r7, #4]
 81040f2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 81040f6:	687b      	ldr	r3, [r7, #4]
 81040f8:	2203      	movs	r2, #3
 81040fa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 81040fe:	2301      	movs	r3, #1
 8104100:	e168      	b.n	81043d4 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8104102:	687b      	ldr	r3, [r7, #4]
 8104104:	681b      	ldr	r3, [r3, #0]
 8104106:	699b      	ldr	r3, [r3, #24]
 8104108:	f003 0301 	and.w	r3, r3, #1
 810410c:	2b00      	cmp	r3, #0
 810410e:	d0e3      	beq.n	81040d8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8104110:	687b      	ldr	r3, [r7, #4]
 8104112:	681b      	ldr	r3, [r3, #0]
 8104114:	699a      	ldr	r2, [r3, #24]
 8104116:	687b      	ldr	r3, [r7, #4]
 8104118:	681b      	ldr	r3, [r3, #0]
 810411a:	f042 0202 	orr.w	r2, r2, #2
 810411e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8104120:	687b      	ldr	r3, [r7, #4]
 8104122:	7c1b      	ldrb	r3, [r3, #16]
 8104124:	2b01      	cmp	r3, #1
 8104126:	d108      	bne.n	810413a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8104128:	687b      	ldr	r3, [r7, #4]
 810412a:	681b      	ldr	r3, [r3, #0]
 810412c:	699a      	ldr	r2, [r3, #24]
 810412e:	687b      	ldr	r3, [r7, #4]
 8104130:	681b      	ldr	r3, [r3, #0]
 8104132:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8104136:	619a      	str	r2, [r3, #24]
 8104138:	e007      	b.n	810414a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 810413a:	687b      	ldr	r3, [r7, #4]
 810413c:	681b      	ldr	r3, [r3, #0]
 810413e:	699a      	ldr	r2, [r3, #24]
 8104140:	687b      	ldr	r3, [r7, #4]
 8104142:	681b      	ldr	r3, [r3, #0]
 8104144:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8104148:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 810414a:	687b      	ldr	r3, [r7, #4]
 810414c:	7c5b      	ldrb	r3, [r3, #17]
 810414e:	2b01      	cmp	r3, #1
 8104150:	d108      	bne.n	8104164 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8104152:	687b      	ldr	r3, [r7, #4]
 8104154:	681b      	ldr	r3, [r3, #0]
 8104156:	699a      	ldr	r2, [r3, #24]
 8104158:	687b      	ldr	r3, [r7, #4]
 810415a:	681b      	ldr	r3, [r3, #0]
 810415c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8104160:	619a      	str	r2, [r3, #24]
 8104162:	e007      	b.n	8104174 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8104164:	687b      	ldr	r3, [r7, #4]
 8104166:	681b      	ldr	r3, [r3, #0]
 8104168:	699a      	ldr	r2, [r3, #24]
 810416a:	687b      	ldr	r3, [r7, #4]
 810416c:	681b      	ldr	r3, [r3, #0]
 810416e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8104172:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8104174:	687b      	ldr	r3, [r7, #4]
 8104176:	7c9b      	ldrb	r3, [r3, #18]
 8104178:	2b01      	cmp	r3, #1
 810417a:	d108      	bne.n	810418e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 810417c:	687b      	ldr	r3, [r7, #4]
 810417e:	681b      	ldr	r3, [r3, #0]
 8104180:	699a      	ldr	r2, [r3, #24]
 8104182:	687b      	ldr	r3, [r7, #4]
 8104184:	681b      	ldr	r3, [r3, #0]
 8104186:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 810418a:	619a      	str	r2, [r3, #24]
 810418c:	e007      	b.n	810419e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 810418e:	687b      	ldr	r3, [r7, #4]
 8104190:	681b      	ldr	r3, [r3, #0]
 8104192:	699a      	ldr	r2, [r3, #24]
 8104194:	687b      	ldr	r3, [r7, #4]
 8104196:	681b      	ldr	r3, [r3, #0]
 8104198:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 810419c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 810419e:	687b      	ldr	r3, [r7, #4]
 81041a0:	681b      	ldr	r3, [r3, #0]
 81041a2:	699b      	ldr	r3, [r3, #24]
 81041a4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 81041a8:	687b      	ldr	r3, [r7, #4]
 81041aa:	689a      	ldr	r2, [r3, #8]
 81041ac:	687b      	ldr	r3, [r7, #4]
 81041ae:	681b      	ldr	r3, [r3, #0]
 81041b0:	430a      	orrs	r2, r1
 81041b2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 81041b4:	687b      	ldr	r3, [r7, #4]
 81041b6:	681b      	ldr	r3, [r3, #0]
 81041b8:	699a      	ldr	r2, [r3, #24]
 81041ba:	687b      	ldr	r3, [r7, #4]
 81041bc:	681b      	ldr	r3, [r3, #0]
 81041be:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 81041c2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 81041c4:	687b      	ldr	r3, [r7, #4]
 81041c6:	681b      	ldr	r3, [r3, #0]
 81041c8:	691a      	ldr	r2, [r3, #16]
 81041ca:	687b      	ldr	r3, [r7, #4]
 81041cc:	681b      	ldr	r3, [r3, #0]
 81041ce:	f022 0210 	bic.w	r2, r2, #16
 81041d2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 81041d4:	687b      	ldr	r3, [r7, #4]
 81041d6:	68db      	ldr	r3, [r3, #12]
 81041d8:	2b01      	cmp	r3, #1
 81041da:	d108      	bne.n	81041ee <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 81041dc:	687b      	ldr	r3, [r7, #4]
 81041de:	681b      	ldr	r3, [r3, #0]
 81041e0:	699a      	ldr	r2, [r3, #24]
 81041e2:	687b      	ldr	r3, [r7, #4]
 81041e4:	681b      	ldr	r3, [r3, #0]
 81041e6:	f042 0204 	orr.w	r2, r2, #4
 81041ea:	619a      	str	r2, [r3, #24]
 81041ec:	e030      	b.n	8104250 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 81041ee:	687b      	ldr	r3, [r7, #4]
 81041f0:	68db      	ldr	r3, [r3, #12]
 81041f2:	2b00      	cmp	r3, #0
 81041f4:	d02c      	beq.n	8104250 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 81041f6:	687b      	ldr	r3, [r7, #4]
 81041f8:	68db      	ldr	r3, [r3, #12]
 81041fa:	2b02      	cmp	r3, #2
 81041fc:	d020      	beq.n	8104240 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 81041fe:	687b      	ldr	r3, [r7, #4]
 8104200:	681b      	ldr	r3, [r3, #0]
 8104202:	699a      	ldr	r2, [r3, #24]
 8104204:	687b      	ldr	r3, [r7, #4]
 8104206:	681b      	ldr	r3, [r3, #0]
 8104208:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 810420c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 810420e:	687b      	ldr	r3, [r7, #4]
 8104210:	681b      	ldr	r3, [r3, #0]
 8104212:	691a      	ldr	r2, [r3, #16]
 8104214:	687b      	ldr	r3, [r7, #4]
 8104216:	681b      	ldr	r3, [r3, #0]
 8104218:	f042 0210 	orr.w	r2, r2, #16
 810421c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 810421e:	687b      	ldr	r3, [r7, #4]
 8104220:	68db      	ldr	r3, [r3, #12]
 8104222:	2b03      	cmp	r3, #3
 8104224:	d114      	bne.n	8104250 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8104226:	687b      	ldr	r3, [r7, #4]
 8104228:	681b      	ldr	r3, [r3, #0]
 810422a:	699a      	ldr	r2, [r3, #24]
 810422c:	687b      	ldr	r3, [r7, #4]
 810422e:	681b      	ldr	r3, [r3, #0]
 8104230:	f042 0220 	orr.w	r2, r2, #32
 8104234:	619a      	str	r2, [r3, #24]
 8104236:	e00b      	b.n	8104250 <HAL_FDCAN_Init+0x234>
 8104238:	0810eea8 	.word	0x0810eea8
 810423c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8104240:	687b      	ldr	r3, [r7, #4]
 8104242:	681b      	ldr	r3, [r3, #0]
 8104244:	699a      	ldr	r2, [r3, #24]
 8104246:	687b      	ldr	r3, [r7, #4]
 8104248:	681b      	ldr	r3, [r3, #0]
 810424a:	f042 0220 	orr.w	r2, r2, #32
 810424e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8104250:	687b      	ldr	r3, [r7, #4]
 8104252:	699b      	ldr	r3, [r3, #24]
 8104254:	3b01      	subs	r3, #1
 8104256:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8104258:	687b      	ldr	r3, [r7, #4]
 810425a:	69db      	ldr	r3, [r3, #28]
 810425c:	3b01      	subs	r3, #1
 810425e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8104260:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8104262:	687b      	ldr	r3, [r7, #4]
 8104264:	6a1b      	ldr	r3, [r3, #32]
 8104266:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8104268:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 810426c:	687b      	ldr	r3, [r7, #4]
 810426e:	695b      	ldr	r3, [r3, #20]
 8104270:	3b01      	subs	r3, #1
 8104272:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8104274:	687b      	ldr	r3, [r7, #4]
 8104276:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8104278:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 810427a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 810427c:	687b      	ldr	r3, [r7, #4]
 810427e:	689b      	ldr	r3, [r3, #8]
 8104280:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104284:	d115      	bne.n	81042b2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8104286:	687b      	ldr	r3, [r7, #4]
 8104288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810428a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 810428c:	687b      	ldr	r3, [r7, #4]
 810428e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104290:	3b01      	subs	r3, #1
 8104292:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8104294:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8104296:	687b      	ldr	r3, [r7, #4]
 8104298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810429a:	3b01      	subs	r3, #1
 810429c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 810429e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 81042a2:	687b      	ldr	r3, [r7, #4]
 81042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81042a6:	3b01      	subs	r3, #1
 81042a8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 81042aa:	687b      	ldr	r3, [r7, #4]
 81042ac:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 81042ae:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 81042b0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 81042b2:	687b      	ldr	r3, [r7, #4]
 81042b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81042b6:	2b00      	cmp	r3, #0
 81042b8:	d00a      	beq.n	81042d0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 81042ba:	687b      	ldr	r3, [r7, #4]
 81042bc:	681b      	ldr	r3, [r3, #0]
 81042be:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 81042c2:	687b      	ldr	r3, [r7, #4]
 81042c4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 81042c6:	687b      	ldr	r3, [r7, #4]
 81042c8:	681b      	ldr	r3, [r3, #0]
 81042ca:	430a      	orrs	r2, r1
 81042cc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 81042d0:	687b      	ldr	r3, [r7, #4]
 81042d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 81042d4:	687b      	ldr	r3, [r7, #4]
 81042d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81042d8:	4413      	add	r3, r2
 81042da:	2b00      	cmp	r3, #0
 81042dc:	d012      	beq.n	8104304 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 81042de:	687b      	ldr	r3, [r7, #4]
 81042e0:	681b      	ldr	r3, [r3, #0]
 81042e2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 81042e6:	f023 0107 	bic.w	r1, r3, #7
 81042ea:	687b      	ldr	r3, [r7, #4]
 81042ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81042ee:	009b      	lsls	r3, r3, #2
 81042f0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 81042f4:	4413      	add	r3, r2
 81042f6:	f853 2c54 	ldr.w	r2, [r3, #-84]
 81042fa:	687b      	ldr	r3, [r7, #4]
 81042fc:	681b      	ldr	r3, [r3, #0]
 81042fe:	430a      	orrs	r2, r1
 8104300:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8104304:	687b      	ldr	r3, [r7, #4]
 8104306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104308:	2b00      	cmp	r3, #0
 810430a:	d012      	beq.n	8104332 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 810430c:	687b      	ldr	r3, [r7, #4]
 810430e:	681b      	ldr	r3, [r3, #0]
 8104310:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8104314:	f023 0107 	bic.w	r1, r3, #7
 8104318:	687b      	ldr	r3, [r7, #4]
 810431a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810431c:	009b      	lsls	r3, r3, #2
 810431e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8104322:	4413      	add	r3, r2
 8104324:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8104328:	687b      	ldr	r3, [r7, #4]
 810432a:	681b      	ldr	r3, [r3, #0]
 810432c:	430a      	orrs	r2, r1
 810432e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8104332:	687b      	ldr	r3, [r7, #4]
 8104334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104336:	2b00      	cmp	r3, #0
 8104338:	d013      	beq.n	8104362 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 810433a:	687b      	ldr	r3, [r7, #4]
 810433c:	681b      	ldr	r3, [r3, #0]
 810433e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8104342:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8104346:	687b      	ldr	r3, [r7, #4]
 8104348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810434a:	009b      	lsls	r3, r3, #2
 810434c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8104350:	4413      	add	r3, r2
 8104352:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8104356:	011a      	lsls	r2, r3, #4
 8104358:	687b      	ldr	r3, [r7, #4]
 810435a:	681b      	ldr	r3, [r3, #0]
 810435c:	430a      	orrs	r2, r1
 810435e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8104362:	687b      	ldr	r3, [r7, #4]
 8104364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104366:	2b00      	cmp	r3, #0
 8104368:	d013      	beq.n	8104392 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 810436a:	687b      	ldr	r3, [r7, #4]
 810436c:	681b      	ldr	r3, [r3, #0]
 810436e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8104372:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8104376:	687b      	ldr	r3, [r7, #4]
 8104378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810437a:	009b      	lsls	r3, r3, #2
 810437c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8104380:	4413      	add	r3, r2
 8104382:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8104386:	021a      	lsls	r2, r3, #8
 8104388:	687b      	ldr	r3, [r7, #4]
 810438a:	681b      	ldr	r3, [r3, #0]
 810438c:	430a      	orrs	r2, r1
 810438e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8104392:	687b      	ldr	r3, [r7, #4]
 8104394:	681b      	ldr	r3, [r3, #0]
 8104396:	4a11      	ldr	r2, [pc, #68]	; (81043dc <HAL_FDCAN_Init+0x3c0>)
 8104398:	4293      	cmp	r3, r2
 810439a:	d107      	bne.n	81043ac <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 810439c:	687b      	ldr	r3, [r7, #4]
 810439e:	685b      	ldr	r3, [r3, #4]
 81043a0:	689a      	ldr	r2, [r3, #8]
 81043a2:	687b      	ldr	r3, [r7, #4]
 81043a4:	685b      	ldr	r3, [r3, #4]
 81043a6:	f022 0203 	bic.w	r2, r2, #3
 81043aa:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 81043ac:	687b      	ldr	r3, [r7, #4]
 81043ae:	2200      	movs	r2, #0
 81043b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 81043b4:	687b      	ldr	r3, [r7, #4]
 81043b6:	2200      	movs	r2, #0
 81043b8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 81043bc:	687b      	ldr	r3, [r7, #4]
 81043be:	2201      	movs	r2, #1
 81043c0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 81043c4:	6878      	ldr	r0, [r7, #4]
 81043c6:	f000 f80b 	bl	81043e0 <FDCAN_CalcultateRamBlockAddresses>
 81043ca:	4603      	mov	r3, r0
 81043cc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 81043d0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 81043d4:	4618      	mov	r0, r3
 81043d6:	3760      	adds	r7, #96	; 0x60
 81043d8:	46bd      	mov	sp, r7
 81043da:	bd80      	pop	{r7, pc}
 81043dc:	4000a000 	.word	0x4000a000

081043e0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 81043e0:	b480      	push	{r7}
 81043e2:	b085      	sub	sp, #20
 81043e4:	af00      	add	r7, sp, #0
 81043e6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 81043e8:	687b      	ldr	r3, [r7, #4]
 81043ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81043ec:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 81043ee:	687b      	ldr	r3, [r7, #4]
 81043f0:	681b      	ldr	r3, [r3, #0]
 81043f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81043f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81043fa:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 81043fe:	68ba      	ldr	r2, [r7, #8]
 8104400:	0091      	lsls	r1, r2, #2
 8104402:	687a      	ldr	r2, [r7, #4]
 8104404:	6812      	ldr	r2, [r2, #0]
 8104406:	430b      	orrs	r3, r1
 8104408:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 810440c:	687b      	ldr	r3, [r7, #4]
 810440e:	681b      	ldr	r3, [r3, #0]
 8104410:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104414:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8104418:	687b      	ldr	r3, [r7, #4]
 810441a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810441c:	041a      	lsls	r2, r3, #16
 810441e:	687b      	ldr	r3, [r7, #4]
 8104420:	681b      	ldr	r3, [r3, #0]
 8104422:	430a      	orrs	r2, r1
 8104424:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8104428:	687b      	ldr	r3, [r7, #4]
 810442a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810442c:	68ba      	ldr	r2, [r7, #8]
 810442e:	4413      	add	r3, r2
 8104430:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8104432:	687b      	ldr	r3, [r7, #4]
 8104434:	681b      	ldr	r3, [r3, #0]
 8104436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810443a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810443e:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8104442:	68ba      	ldr	r2, [r7, #8]
 8104444:	0091      	lsls	r1, r2, #2
 8104446:	687a      	ldr	r2, [r7, #4]
 8104448:	6812      	ldr	r2, [r2, #0]
 810444a:	430b      	orrs	r3, r1
 810444c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8104450:	687b      	ldr	r3, [r7, #4]
 8104452:	681b      	ldr	r3, [r3, #0]
 8104454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8104458:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 810445c:	687b      	ldr	r3, [r7, #4]
 810445e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104460:	041a      	lsls	r2, r3, #16
 8104462:	687b      	ldr	r3, [r7, #4]
 8104464:	681b      	ldr	r3, [r3, #0]
 8104466:	430a      	orrs	r2, r1
 8104468:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 810446c:	687b      	ldr	r3, [r7, #4]
 810446e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104470:	005b      	lsls	r3, r3, #1
 8104472:	68ba      	ldr	r2, [r7, #8]
 8104474:	4413      	add	r3, r2
 8104476:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8104478:	687b      	ldr	r3, [r7, #4]
 810447a:	681b      	ldr	r3, [r3, #0]
 810447c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8104480:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104484:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8104488:	68ba      	ldr	r2, [r7, #8]
 810448a:	0091      	lsls	r1, r2, #2
 810448c:	687a      	ldr	r2, [r7, #4]
 810448e:	6812      	ldr	r2, [r2, #0]
 8104490:	430b      	orrs	r3, r1
 8104492:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8104496:	687b      	ldr	r3, [r7, #4]
 8104498:	681b      	ldr	r3, [r3, #0]
 810449a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810449e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 81044a2:	687b      	ldr	r3, [r7, #4]
 81044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81044a6:	041a      	lsls	r2, r3, #16
 81044a8:	687b      	ldr	r3, [r7, #4]
 81044aa:	681b      	ldr	r3, [r3, #0]
 81044ac:	430a      	orrs	r2, r1
 81044ae:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 81044b2:	687b      	ldr	r3, [r7, #4]
 81044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81044b6:	687a      	ldr	r2, [r7, #4]
 81044b8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 81044ba:	fb02 f303 	mul.w	r3, r2, r3
 81044be:	68ba      	ldr	r2, [r7, #8]
 81044c0:	4413      	add	r3, r2
 81044c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 81044c4:	687b      	ldr	r3, [r7, #4]
 81044c6:	681b      	ldr	r3, [r3, #0]
 81044c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81044cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81044d0:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 81044d4:	68ba      	ldr	r2, [r7, #8]
 81044d6:	0091      	lsls	r1, r2, #2
 81044d8:	687a      	ldr	r2, [r7, #4]
 81044da:	6812      	ldr	r2, [r2, #0]
 81044dc:	430b      	orrs	r3, r1
 81044de:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 81044e2:	687b      	ldr	r3, [r7, #4]
 81044e4:	681b      	ldr	r3, [r3, #0]
 81044e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81044ea:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 81044ee:	687b      	ldr	r3, [r7, #4]
 81044f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81044f2:	041a      	lsls	r2, r3, #16
 81044f4:	687b      	ldr	r3, [r7, #4]
 81044f6:	681b      	ldr	r3, [r3, #0]
 81044f8:	430a      	orrs	r2, r1
 81044fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 81044fe:	687b      	ldr	r3, [r7, #4]
 8104500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104502:	687a      	ldr	r2, [r7, #4]
 8104504:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8104506:	fb02 f303 	mul.w	r3, r2, r3
 810450a:	68ba      	ldr	r2, [r7, #8]
 810450c:	4413      	add	r3, r2
 810450e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8104510:	687b      	ldr	r3, [r7, #4]
 8104512:	681b      	ldr	r3, [r3, #0]
 8104514:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8104518:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810451c:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8104520:	68ba      	ldr	r2, [r7, #8]
 8104522:	0091      	lsls	r1, r2, #2
 8104524:	687a      	ldr	r2, [r7, #4]
 8104526:	6812      	ldr	r2, [r2, #0]
 8104528:	430b      	orrs	r3, r1
 810452a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 810452e:	687b      	ldr	r3, [r7, #4]
 8104530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104532:	687a      	ldr	r2, [r7, #4]
 8104534:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8104536:	fb02 f303 	mul.w	r3, r2, r3
 810453a:	68ba      	ldr	r2, [r7, #8]
 810453c:	4413      	add	r3, r2
 810453e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8104540:	687b      	ldr	r3, [r7, #4]
 8104542:	681b      	ldr	r3, [r3, #0]
 8104544:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8104548:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810454c:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8104550:	68ba      	ldr	r2, [r7, #8]
 8104552:	0091      	lsls	r1, r2, #2
 8104554:	687a      	ldr	r2, [r7, #4]
 8104556:	6812      	ldr	r2, [r2, #0]
 8104558:	430b      	orrs	r3, r1
 810455a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 810455e:	687b      	ldr	r3, [r7, #4]
 8104560:	681b      	ldr	r3, [r3, #0]
 8104562:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8104566:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 810456a:	687b      	ldr	r3, [r7, #4]
 810456c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810456e:	041a      	lsls	r2, r3, #16
 8104570:	687b      	ldr	r3, [r7, #4]
 8104572:	681b      	ldr	r3, [r3, #0]
 8104574:	430a      	orrs	r2, r1
 8104576:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 810457a:	687b      	ldr	r3, [r7, #4]
 810457c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810457e:	005b      	lsls	r3, r3, #1
 8104580:	68ba      	ldr	r2, [r7, #8]
 8104582:	4413      	add	r3, r2
 8104584:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8104586:	687b      	ldr	r3, [r7, #4]
 8104588:	681b      	ldr	r3, [r3, #0]
 810458a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 810458e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104592:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8104596:	68ba      	ldr	r2, [r7, #8]
 8104598:	0091      	lsls	r1, r2, #2
 810459a:	687a      	ldr	r2, [r7, #4]
 810459c:	6812      	ldr	r2, [r2, #0]
 810459e:	430b      	orrs	r3, r1
 81045a0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 81045a4:	687b      	ldr	r3, [r7, #4]
 81045a6:	681b      	ldr	r3, [r3, #0]
 81045a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 81045ac:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 81045b0:	687b      	ldr	r3, [r7, #4]
 81045b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81045b4:	041a      	lsls	r2, r3, #16
 81045b6:	687b      	ldr	r3, [r7, #4]
 81045b8:	681b      	ldr	r3, [r3, #0]
 81045ba:	430a      	orrs	r2, r1
 81045bc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 81045c0:	687b      	ldr	r3, [r7, #4]
 81045c2:	681b      	ldr	r3, [r3, #0]
 81045c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 81045c8:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 81045cc:	687b      	ldr	r3, [r7, #4]
 81045ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81045d0:	061a      	lsls	r2, r3, #24
 81045d2:	687b      	ldr	r3, [r7, #4]
 81045d4:	681b      	ldr	r3, [r3, #0]
 81045d6:	430a      	orrs	r2, r1
 81045d8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 81045dc:	687b      	ldr	r3, [r7, #4]
 81045de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81045e0:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 81045e4:	f503 532c 	add.w	r3, r3, #11008	; 0x2b00
 81045e8:	009a      	lsls	r2, r3, #2
 81045ea:	687b      	ldr	r3, [r7, #4]
 81045ec:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 81045ee:	687b      	ldr	r3, [r7, #4]
 81045f0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 81045f2:	687b      	ldr	r3, [r7, #4]
 81045f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81045f6:	009b      	lsls	r3, r3, #2
 81045f8:	441a      	add	r2, r3
 81045fa:	687b      	ldr	r3, [r7, #4]
 81045fc:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 81045fe:	687b      	ldr	r3, [r7, #4]
 8104600:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8104602:	687b      	ldr	r3, [r7, #4]
 8104604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104606:	00db      	lsls	r3, r3, #3
 8104608:	441a      	add	r2, r3
 810460a:	687b      	ldr	r3, [r7, #4]
 810460c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 810460e:	687b      	ldr	r3, [r7, #4]
 8104610:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8104612:	687b      	ldr	r3, [r7, #4]
 8104614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104616:	6879      	ldr	r1, [r7, #4]
 8104618:	6c49      	ldr	r1, [r1, #68]	; 0x44
 810461a:	fb01 f303 	mul.w	r3, r1, r3
 810461e:	009b      	lsls	r3, r3, #2
 8104620:	441a      	add	r2, r3
 8104622:	687b      	ldr	r3, [r7, #4]
 8104624:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8104626:	687b      	ldr	r3, [r7, #4]
 8104628:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 810462a:	687b      	ldr	r3, [r7, #4]
 810462c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810462e:	6879      	ldr	r1, [r7, #4]
 8104630:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8104632:	fb01 f303 	mul.w	r3, r1, r3
 8104636:	009b      	lsls	r3, r3, #2
 8104638:	441a      	add	r2, r3
 810463a:	687b      	ldr	r3, [r7, #4]
 810463c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 810463e:	687b      	ldr	r3, [r7, #4]
 8104640:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8104642:	687b      	ldr	r3, [r7, #4]
 8104644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104646:	6879      	ldr	r1, [r7, #4]
 8104648:	6d49      	ldr	r1, [r1, #84]	; 0x54
 810464a:	fb01 f303 	mul.w	r3, r1, r3
 810464e:	009b      	lsls	r3, r3, #2
 8104650:	441a      	add	r2, r3
 8104652:	687b      	ldr	r3, [r7, #4]
 8104654:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8104658:	687b      	ldr	r3, [r7, #4]
 810465a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 810465e:	687b      	ldr	r3, [r7, #4]
 8104660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104662:	00db      	lsls	r3, r3, #3
 8104664:	441a      	add	r2, r3
 8104666:	687b      	ldr	r3, [r7, #4]
 8104668:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 810466c:	687b      	ldr	r3, [r7, #4]
 810466e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8104672:	687b      	ldr	r3, [r7, #4]
 8104674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104676:	6879      	ldr	r1, [r7, #4]
 8104678:	6e89      	ldr	r1, [r1, #104]	; 0x68
 810467a:	fb01 f303 	mul.w	r3, r1, r3
 810467e:	009b      	lsls	r3, r3, #2
 8104680:	441a      	add	r2, r3
 8104682:	687b      	ldr	r3, [r7, #4]
 8104684:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8104688:	687b      	ldr	r3, [r7, #4]
 810468a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 810468e:	687b      	ldr	r3, [r7, #4]
 8104690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104692:	6879      	ldr	r1, [r7, #4]
 8104694:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8104696:	fb01 f303 	mul.w	r3, r1, r3
 810469a:	009b      	lsls	r3, r3, #2
 810469c:	441a      	add	r2, r3
 810469e:	687b      	ldr	r3, [r7, #4]
 81046a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 81046a4:	687b      	ldr	r3, [r7, #4]
 81046a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81046aa:	4a14      	ldr	r2, [pc, #80]	; (81046fc <FDCAN_CalcultateRamBlockAddresses+0x31c>)
 81046ac:	4293      	cmp	r3, r2
 81046ae:	d90d      	bls.n	81046cc <FDCAN_CalcultateRamBlockAddresses+0x2ec>
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 81046b0:	687b      	ldr	r3, [r7, #4]
 81046b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81046b6:	f043 0220 	orr.w	r2, r3, #32
 81046ba:	687b      	ldr	r3, [r7, #4]
 81046bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 81046c0:	687b      	ldr	r3, [r7, #4]
 81046c2:	2203      	movs	r2, #3
 81046c4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 81046c8:	2301      	movs	r3, #1
 81046ca:	e010      	b.n	81046ee <FDCAN_CalcultateRamBlockAddresses+0x30e>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 81046cc:	687b      	ldr	r3, [r7, #4]
 81046ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81046d0:	60fb      	str	r3, [r7, #12]
 81046d2:	e005      	b.n	81046e0 <FDCAN_CalcultateRamBlockAddresses+0x300>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 81046d4:	68fb      	ldr	r3, [r7, #12]
 81046d6:	2200      	movs	r2, #0
 81046d8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 81046da:	68fb      	ldr	r3, [r7, #12]
 81046dc:	3304      	adds	r3, #4
 81046de:	60fb      	str	r3, [r7, #12]
 81046e0:	687b      	ldr	r3, [r7, #4]
 81046e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81046e6:	68fa      	ldr	r2, [r7, #12]
 81046e8:	429a      	cmp	r2, r3
 81046ea:	d3f3      	bcc.n	81046d4 <FDCAN_CalcultateRamBlockAddresses+0x2f4>
    }
  }

  /* Return function status */
  return HAL_OK;
 81046ec:	2300      	movs	r3, #0
}
 81046ee:	4618      	mov	r0, r3
 81046f0:	3714      	adds	r7, #20
 81046f2:	46bd      	mov	sp, r7
 81046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81046f8:	4770      	bx	lr
 81046fa:	bf00      	nop
 81046fc:	4000d3fc 	.word	0x4000d3fc

08104700 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8104700:	b480      	push	{r7}
 8104702:	b089      	sub	sp, #36	; 0x24
 8104704:	af00      	add	r7, sp, #0
 8104706:	6078      	str	r0, [r7, #4]
 8104708:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810470a:	2300      	movs	r3, #0
 810470c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810470e:	4b89      	ldr	r3, [pc, #548]	; (8104934 <HAL_GPIO_Init+0x234>)
 8104710:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104712:	e194      	b.n	8104a3e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8104714:	683b      	ldr	r3, [r7, #0]
 8104716:	681a      	ldr	r2, [r3, #0]
 8104718:	2101      	movs	r1, #1
 810471a:	69fb      	ldr	r3, [r7, #28]
 810471c:	fa01 f303 	lsl.w	r3, r1, r3
 8104720:	4013      	ands	r3, r2
 8104722:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8104724:	693b      	ldr	r3, [r7, #16]
 8104726:	2b00      	cmp	r3, #0
 8104728:	f000 8186 	beq.w	8104a38 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 810472c:	683b      	ldr	r3, [r7, #0]
 810472e:	685b      	ldr	r3, [r3, #4]
 8104730:	2b01      	cmp	r3, #1
 8104732:	d00b      	beq.n	810474c <HAL_GPIO_Init+0x4c>
 8104734:	683b      	ldr	r3, [r7, #0]
 8104736:	685b      	ldr	r3, [r3, #4]
 8104738:	2b02      	cmp	r3, #2
 810473a:	d007      	beq.n	810474c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 810473c:	683b      	ldr	r3, [r7, #0]
 810473e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8104740:	2b11      	cmp	r3, #17
 8104742:	d003      	beq.n	810474c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8104744:	683b      	ldr	r3, [r7, #0]
 8104746:	685b      	ldr	r3, [r3, #4]
 8104748:	2b12      	cmp	r3, #18
 810474a:	d130      	bne.n	81047ae <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 810474c:	687b      	ldr	r3, [r7, #4]
 810474e:	689b      	ldr	r3, [r3, #8]
 8104750:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8104752:	69fb      	ldr	r3, [r7, #28]
 8104754:	005b      	lsls	r3, r3, #1
 8104756:	2203      	movs	r2, #3
 8104758:	fa02 f303 	lsl.w	r3, r2, r3
 810475c:	43db      	mvns	r3, r3
 810475e:	69ba      	ldr	r2, [r7, #24]
 8104760:	4013      	ands	r3, r2
 8104762:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8104764:	683b      	ldr	r3, [r7, #0]
 8104766:	68da      	ldr	r2, [r3, #12]
 8104768:	69fb      	ldr	r3, [r7, #28]
 810476a:	005b      	lsls	r3, r3, #1
 810476c:	fa02 f303 	lsl.w	r3, r2, r3
 8104770:	69ba      	ldr	r2, [r7, #24]
 8104772:	4313      	orrs	r3, r2
 8104774:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8104776:	687b      	ldr	r3, [r7, #4]
 8104778:	69ba      	ldr	r2, [r7, #24]
 810477a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 810477c:	687b      	ldr	r3, [r7, #4]
 810477e:	685b      	ldr	r3, [r3, #4]
 8104780:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8104782:	2201      	movs	r2, #1
 8104784:	69fb      	ldr	r3, [r7, #28]
 8104786:	fa02 f303 	lsl.w	r3, r2, r3
 810478a:	43db      	mvns	r3, r3
 810478c:	69ba      	ldr	r2, [r7, #24]
 810478e:	4013      	ands	r3, r2
 8104790:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8104792:	683b      	ldr	r3, [r7, #0]
 8104794:	685b      	ldr	r3, [r3, #4]
 8104796:	091b      	lsrs	r3, r3, #4
 8104798:	f003 0201 	and.w	r2, r3, #1
 810479c:	69fb      	ldr	r3, [r7, #28]
 810479e:	fa02 f303 	lsl.w	r3, r2, r3
 81047a2:	69ba      	ldr	r2, [r7, #24]
 81047a4:	4313      	orrs	r3, r2
 81047a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81047a8:	687b      	ldr	r3, [r7, #4]
 81047aa:	69ba      	ldr	r2, [r7, #24]
 81047ac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81047ae:	687b      	ldr	r3, [r7, #4]
 81047b0:	68db      	ldr	r3, [r3, #12]
 81047b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81047b4:	69fb      	ldr	r3, [r7, #28]
 81047b6:	005b      	lsls	r3, r3, #1
 81047b8:	2203      	movs	r2, #3
 81047ba:	fa02 f303 	lsl.w	r3, r2, r3
 81047be:	43db      	mvns	r3, r3
 81047c0:	69ba      	ldr	r2, [r7, #24]
 81047c2:	4013      	ands	r3, r2
 81047c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81047c6:	683b      	ldr	r3, [r7, #0]
 81047c8:	689a      	ldr	r2, [r3, #8]
 81047ca:	69fb      	ldr	r3, [r7, #28]
 81047cc:	005b      	lsls	r3, r3, #1
 81047ce:	fa02 f303 	lsl.w	r3, r2, r3
 81047d2:	69ba      	ldr	r2, [r7, #24]
 81047d4:	4313      	orrs	r3, r2
 81047d6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81047d8:	687b      	ldr	r3, [r7, #4]
 81047da:	69ba      	ldr	r2, [r7, #24]
 81047dc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 81047de:	683b      	ldr	r3, [r7, #0]
 81047e0:	685b      	ldr	r3, [r3, #4]
 81047e2:	2b02      	cmp	r3, #2
 81047e4:	d003      	beq.n	81047ee <HAL_GPIO_Init+0xee>
 81047e6:	683b      	ldr	r3, [r7, #0]
 81047e8:	685b      	ldr	r3, [r3, #4]
 81047ea:	2b12      	cmp	r3, #18
 81047ec:	d123      	bne.n	8104836 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81047ee:	69fb      	ldr	r3, [r7, #28]
 81047f0:	08da      	lsrs	r2, r3, #3
 81047f2:	687b      	ldr	r3, [r7, #4]
 81047f4:	3208      	adds	r2, #8
 81047f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81047fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81047fc:	69fb      	ldr	r3, [r7, #28]
 81047fe:	f003 0307 	and.w	r3, r3, #7
 8104802:	009b      	lsls	r3, r3, #2
 8104804:	220f      	movs	r2, #15
 8104806:	fa02 f303 	lsl.w	r3, r2, r3
 810480a:	43db      	mvns	r3, r3
 810480c:	69ba      	ldr	r2, [r7, #24]
 810480e:	4013      	ands	r3, r2
 8104810:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8104812:	683b      	ldr	r3, [r7, #0]
 8104814:	691a      	ldr	r2, [r3, #16]
 8104816:	69fb      	ldr	r3, [r7, #28]
 8104818:	f003 0307 	and.w	r3, r3, #7
 810481c:	009b      	lsls	r3, r3, #2
 810481e:	fa02 f303 	lsl.w	r3, r2, r3
 8104822:	69ba      	ldr	r2, [r7, #24]
 8104824:	4313      	orrs	r3, r2
 8104826:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8104828:	69fb      	ldr	r3, [r7, #28]
 810482a:	08da      	lsrs	r2, r3, #3
 810482c:	687b      	ldr	r3, [r7, #4]
 810482e:	3208      	adds	r2, #8
 8104830:	69b9      	ldr	r1, [r7, #24]
 8104832:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8104836:	687b      	ldr	r3, [r7, #4]
 8104838:	681b      	ldr	r3, [r3, #0]
 810483a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 810483c:	69fb      	ldr	r3, [r7, #28]
 810483e:	005b      	lsls	r3, r3, #1
 8104840:	2203      	movs	r2, #3
 8104842:	fa02 f303 	lsl.w	r3, r2, r3
 8104846:	43db      	mvns	r3, r3
 8104848:	69ba      	ldr	r2, [r7, #24]
 810484a:	4013      	ands	r3, r2
 810484c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810484e:	683b      	ldr	r3, [r7, #0]
 8104850:	685b      	ldr	r3, [r3, #4]
 8104852:	f003 0203 	and.w	r2, r3, #3
 8104856:	69fb      	ldr	r3, [r7, #28]
 8104858:	005b      	lsls	r3, r3, #1
 810485a:	fa02 f303 	lsl.w	r3, r2, r3
 810485e:	69ba      	ldr	r2, [r7, #24]
 8104860:	4313      	orrs	r3, r2
 8104862:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8104864:	687b      	ldr	r3, [r7, #4]
 8104866:	69ba      	ldr	r2, [r7, #24]
 8104868:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 810486a:	683b      	ldr	r3, [r7, #0]
 810486c:	685b      	ldr	r3, [r3, #4]
 810486e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8104872:	2b00      	cmp	r3, #0
 8104874:	f000 80e0 	beq.w	8104a38 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8104878:	4b2f      	ldr	r3, [pc, #188]	; (8104938 <HAL_GPIO_Init+0x238>)
 810487a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810487e:	4a2e      	ldr	r2, [pc, #184]	; (8104938 <HAL_GPIO_Init+0x238>)
 8104880:	f043 0302 	orr.w	r3, r3, #2
 8104884:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8104888:	4b2b      	ldr	r3, [pc, #172]	; (8104938 <HAL_GPIO_Init+0x238>)
 810488a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810488e:	f003 0302 	and.w	r3, r3, #2
 8104892:	60fb      	str	r3, [r7, #12]
 8104894:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8104896:	4a29      	ldr	r2, [pc, #164]	; (810493c <HAL_GPIO_Init+0x23c>)
 8104898:	69fb      	ldr	r3, [r7, #28]
 810489a:	089b      	lsrs	r3, r3, #2
 810489c:	3302      	adds	r3, #2
 810489e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81048a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81048a4:	69fb      	ldr	r3, [r7, #28]
 81048a6:	f003 0303 	and.w	r3, r3, #3
 81048aa:	009b      	lsls	r3, r3, #2
 81048ac:	220f      	movs	r2, #15
 81048ae:	fa02 f303 	lsl.w	r3, r2, r3
 81048b2:	43db      	mvns	r3, r3
 81048b4:	69ba      	ldr	r2, [r7, #24]
 81048b6:	4013      	ands	r3, r2
 81048b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81048ba:	687b      	ldr	r3, [r7, #4]
 81048bc:	4a20      	ldr	r2, [pc, #128]	; (8104940 <HAL_GPIO_Init+0x240>)
 81048be:	4293      	cmp	r3, r2
 81048c0:	d052      	beq.n	8104968 <HAL_GPIO_Init+0x268>
 81048c2:	687b      	ldr	r3, [r7, #4]
 81048c4:	4a1f      	ldr	r2, [pc, #124]	; (8104944 <HAL_GPIO_Init+0x244>)
 81048c6:	4293      	cmp	r3, r2
 81048c8:	d031      	beq.n	810492e <HAL_GPIO_Init+0x22e>
 81048ca:	687b      	ldr	r3, [r7, #4]
 81048cc:	4a1e      	ldr	r2, [pc, #120]	; (8104948 <HAL_GPIO_Init+0x248>)
 81048ce:	4293      	cmp	r3, r2
 81048d0:	d02b      	beq.n	810492a <HAL_GPIO_Init+0x22a>
 81048d2:	687b      	ldr	r3, [r7, #4]
 81048d4:	4a1d      	ldr	r2, [pc, #116]	; (810494c <HAL_GPIO_Init+0x24c>)
 81048d6:	4293      	cmp	r3, r2
 81048d8:	d025      	beq.n	8104926 <HAL_GPIO_Init+0x226>
 81048da:	687b      	ldr	r3, [r7, #4]
 81048dc:	4a1c      	ldr	r2, [pc, #112]	; (8104950 <HAL_GPIO_Init+0x250>)
 81048de:	4293      	cmp	r3, r2
 81048e0:	d01f      	beq.n	8104922 <HAL_GPIO_Init+0x222>
 81048e2:	687b      	ldr	r3, [r7, #4]
 81048e4:	4a1b      	ldr	r2, [pc, #108]	; (8104954 <HAL_GPIO_Init+0x254>)
 81048e6:	4293      	cmp	r3, r2
 81048e8:	d019      	beq.n	810491e <HAL_GPIO_Init+0x21e>
 81048ea:	687b      	ldr	r3, [r7, #4]
 81048ec:	4a1a      	ldr	r2, [pc, #104]	; (8104958 <HAL_GPIO_Init+0x258>)
 81048ee:	4293      	cmp	r3, r2
 81048f0:	d013      	beq.n	810491a <HAL_GPIO_Init+0x21a>
 81048f2:	687b      	ldr	r3, [r7, #4]
 81048f4:	4a19      	ldr	r2, [pc, #100]	; (810495c <HAL_GPIO_Init+0x25c>)
 81048f6:	4293      	cmp	r3, r2
 81048f8:	d00d      	beq.n	8104916 <HAL_GPIO_Init+0x216>
 81048fa:	687b      	ldr	r3, [r7, #4]
 81048fc:	4a18      	ldr	r2, [pc, #96]	; (8104960 <HAL_GPIO_Init+0x260>)
 81048fe:	4293      	cmp	r3, r2
 8104900:	d007      	beq.n	8104912 <HAL_GPIO_Init+0x212>
 8104902:	687b      	ldr	r3, [r7, #4]
 8104904:	4a17      	ldr	r2, [pc, #92]	; (8104964 <HAL_GPIO_Init+0x264>)
 8104906:	4293      	cmp	r3, r2
 8104908:	d101      	bne.n	810490e <HAL_GPIO_Init+0x20e>
 810490a:	2309      	movs	r3, #9
 810490c:	e02d      	b.n	810496a <HAL_GPIO_Init+0x26a>
 810490e:	230a      	movs	r3, #10
 8104910:	e02b      	b.n	810496a <HAL_GPIO_Init+0x26a>
 8104912:	2308      	movs	r3, #8
 8104914:	e029      	b.n	810496a <HAL_GPIO_Init+0x26a>
 8104916:	2307      	movs	r3, #7
 8104918:	e027      	b.n	810496a <HAL_GPIO_Init+0x26a>
 810491a:	2306      	movs	r3, #6
 810491c:	e025      	b.n	810496a <HAL_GPIO_Init+0x26a>
 810491e:	2305      	movs	r3, #5
 8104920:	e023      	b.n	810496a <HAL_GPIO_Init+0x26a>
 8104922:	2304      	movs	r3, #4
 8104924:	e021      	b.n	810496a <HAL_GPIO_Init+0x26a>
 8104926:	2303      	movs	r3, #3
 8104928:	e01f      	b.n	810496a <HAL_GPIO_Init+0x26a>
 810492a:	2302      	movs	r3, #2
 810492c:	e01d      	b.n	810496a <HAL_GPIO_Init+0x26a>
 810492e:	2301      	movs	r3, #1
 8104930:	e01b      	b.n	810496a <HAL_GPIO_Init+0x26a>
 8104932:	bf00      	nop
 8104934:	580000c0 	.word	0x580000c0
 8104938:	58024400 	.word	0x58024400
 810493c:	58000400 	.word	0x58000400
 8104940:	58020000 	.word	0x58020000
 8104944:	58020400 	.word	0x58020400
 8104948:	58020800 	.word	0x58020800
 810494c:	58020c00 	.word	0x58020c00
 8104950:	58021000 	.word	0x58021000
 8104954:	58021400 	.word	0x58021400
 8104958:	58021800 	.word	0x58021800
 810495c:	58021c00 	.word	0x58021c00
 8104960:	58022000 	.word	0x58022000
 8104964:	58022400 	.word	0x58022400
 8104968:	2300      	movs	r3, #0
 810496a:	69fa      	ldr	r2, [r7, #28]
 810496c:	f002 0203 	and.w	r2, r2, #3
 8104970:	0092      	lsls	r2, r2, #2
 8104972:	4093      	lsls	r3, r2
 8104974:	69ba      	ldr	r2, [r7, #24]
 8104976:	4313      	orrs	r3, r2
 8104978:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810497a:	4938      	ldr	r1, [pc, #224]	; (8104a5c <HAL_GPIO_Init+0x35c>)
 810497c:	69fb      	ldr	r3, [r7, #28]
 810497e:	089b      	lsrs	r3, r3, #2
 8104980:	3302      	adds	r3, #2
 8104982:	69ba      	ldr	r2, [r7, #24]
 8104984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8104988:	697b      	ldr	r3, [r7, #20]
 810498a:	681b      	ldr	r3, [r3, #0]
 810498c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810498e:	693b      	ldr	r3, [r7, #16]
 8104990:	43db      	mvns	r3, r3
 8104992:	69ba      	ldr	r2, [r7, #24]
 8104994:	4013      	ands	r3, r2
 8104996:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8104998:	683b      	ldr	r3, [r7, #0]
 810499a:	685b      	ldr	r3, [r3, #4]
 810499c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81049a0:	2b00      	cmp	r3, #0
 81049a2:	d003      	beq.n	81049ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 81049a4:	69ba      	ldr	r2, [r7, #24]
 81049a6:	693b      	ldr	r3, [r7, #16]
 81049a8:	4313      	orrs	r3, r2
 81049aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81049ac:	697b      	ldr	r3, [r7, #20]
 81049ae:	69ba      	ldr	r2, [r7, #24]
 81049b0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 81049b2:	697b      	ldr	r3, [r7, #20]
 81049b4:	685b      	ldr	r3, [r3, #4]
 81049b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81049b8:	693b      	ldr	r3, [r7, #16]
 81049ba:	43db      	mvns	r3, r3
 81049bc:	69ba      	ldr	r2, [r7, #24]
 81049be:	4013      	ands	r3, r2
 81049c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 81049c2:	683b      	ldr	r3, [r7, #0]
 81049c4:	685b      	ldr	r3, [r3, #4]
 81049c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81049ca:	2b00      	cmp	r3, #0
 81049cc:	d003      	beq.n	81049d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 81049ce:	69ba      	ldr	r2, [r7, #24]
 81049d0:	693b      	ldr	r3, [r7, #16]
 81049d2:	4313      	orrs	r3, r2
 81049d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81049d6:	697b      	ldr	r3, [r7, #20]
 81049d8:	69ba      	ldr	r2, [r7, #24]
 81049da:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81049dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81049e0:	681b      	ldr	r3, [r3, #0]
 81049e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81049e4:	693b      	ldr	r3, [r7, #16]
 81049e6:	43db      	mvns	r3, r3
 81049e8:	69ba      	ldr	r2, [r7, #24]
 81049ea:	4013      	ands	r3, r2
 81049ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 81049ee:	683b      	ldr	r3, [r7, #0]
 81049f0:	685b      	ldr	r3, [r3, #4]
 81049f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81049f6:	2b00      	cmp	r3, #0
 81049f8:	d003      	beq.n	8104a02 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 81049fa:	69ba      	ldr	r2, [r7, #24]
 81049fc:	693b      	ldr	r3, [r7, #16]
 81049fe:	4313      	orrs	r3, r2
 8104a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8104a02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8104a06:	69bb      	ldr	r3, [r7, #24]
 8104a08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8104a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8104a0e:	685b      	ldr	r3, [r3, #4]
 8104a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104a12:	693b      	ldr	r3, [r7, #16]
 8104a14:	43db      	mvns	r3, r3
 8104a16:	69ba      	ldr	r2, [r7, #24]
 8104a18:	4013      	ands	r3, r2
 8104a1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8104a1c:	683b      	ldr	r3, [r7, #0]
 8104a1e:	685b      	ldr	r3, [r3, #4]
 8104a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8104a24:	2b00      	cmp	r3, #0
 8104a26:	d003      	beq.n	8104a30 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8104a28:	69ba      	ldr	r2, [r7, #24]
 8104a2a:	693b      	ldr	r3, [r7, #16]
 8104a2c:	4313      	orrs	r3, r2
 8104a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8104a30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8104a34:	69bb      	ldr	r3, [r7, #24]
 8104a36:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8104a38:	69fb      	ldr	r3, [r7, #28]
 8104a3a:	3301      	adds	r3, #1
 8104a3c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104a3e:	683b      	ldr	r3, [r7, #0]
 8104a40:	681a      	ldr	r2, [r3, #0]
 8104a42:	69fb      	ldr	r3, [r7, #28]
 8104a44:	fa22 f303 	lsr.w	r3, r2, r3
 8104a48:	2b00      	cmp	r3, #0
 8104a4a:	f47f ae63 	bne.w	8104714 <HAL_GPIO_Init+0x14>
  }
}
 8104a4e:	bf00      	nop
 8104a50:	3724      	adds	r7, #36	; 0x24
 8104a52:	46bd      	mov	sp, r7
 8104a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a58:	4770      	bx	lr
 8104a5a:	bf00      	nop
 8104a5c:	58000400 	.word	0x58000400

08104a60 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8104a60:	b480      	push	{r7}
 8104a62:	b083      	sub	sp, #12
 8104a64:	af00      	add	r7, sp, #0
 8104a66:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8104a68:	4b05      	ldr	r3, [pc, #20]	; (8104a80 <HAL_HSEM_ActivateNotification+0x20>)
 8104a6a:	681a      	ldr	r2, [r3, #0]
 8104a6c:	4904      	ldr	r1, [pc, #16]	; (8104a80 <HAL_HSEM_ActivateNotification+0x20>)
 8104a6e:	687b      	ldr	r3, [r7, #4]
 8104a70:	4313      	orrs	r3, r2
 8104a72:	600b      	str	r3, [r1, #0]
#endif
}
 8104a74:	bf00      	nop
 8104a76:	370c      	adds	r7, #12
 8104a78:	46bd      	mov	sp, r7
 8104a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a7e:	4770      	bx	lr
 8104a80:	58026510 	.word	0x58026510

08104a84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8104a84:	b580      	push	{r7, lr}
 8104a86:	b082      	sub	sp, #8
 8104a88:	af00      	add	r7, sp, #0
 8104a8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8104a8c:	687b      	ldr	r3, [r7, #4]
 8104a8e:	2b00      	cmp	r3, #0
 8104a90:	d101      	bne.n	8104a96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8104a92:	2301      	movs	r3, #1
 8104a94:	e081      	b.n	8104b9a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8104a96:	687b      	ldr	r3, [r7, #4]
 8104a98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104a9c:	b2db      	uxtb	r3, r3
 8104a9e:	2b00      	cmp	r3, #0
 8104aa0:	d106      	bne.n	8104ab0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8104aa2:	687b      	ldr	r3, [r7, #4]
 8104aa4:	2200      	movs	r2, #0
 8104aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8104aaa:	6878      	ldr	r0, [r7, #4]
 8104aac:	f7fc fcb6 	bl	810141c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8104ab0:	687b      	ldr	r3, [r7, #4]
 8104ab2:	2224      	movs	r2, #36	; 0x24
 8104ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8104ab8:	687b      	ldr	r3, [r7, #4]
 8104aba:	681b      	ldr	r3, [r3, #0]
 8104abc:	681a      	ldr	r2, [r3, #0]
 8104abe:	687b      	ldr	r3, [r7, #4]
 8104ac0:	681b      	ldr	r3, [r3, #0]
 8104ac2:	f022 0201 	bic.w	r2, r2, #1
 8104ac6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8104ac8:	687b      	ldr	r3, [r7, #4]
 8104aca:	685a      	ldr	r2, [r3, #4]
 8104acc:	687b      	ldr	r3, [r7, #4]
 8104ace:	681b      	ldr	r3, [r3, #0]
 8104ad0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8104ad4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8104ad6:	687b      	ldr	r3, [r7, #4]
 8104ad8:	681b      	ldr	r3, [r3, #0]
 8104ada:	689a      	ldr	r2, [r3, #8]
 8104adc:	687b      	ldr	r3, [r7, #4]
 8104ade:	681b      	ldr	r3, [r3, #0]
 8104ae0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8104ae4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8104ae6:	687b      	ldr	r3, [r7, #4]
 8104ae8:	68db      	ldr	r3, [r3, #12]
 8104aea:	2b01      	cmp	r3, #1
 8104aec:	d107      	bne.n	8104afe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8104aee:	687b      	ldr	r3, [r7, #4]
 8104af0:	689a      	ldr	r2, [r3, #8]
 8104af2:	687b      	ldr	r3, [r7, #4]
 8104af4:	681b      	ldr	r3, [r3, #0]
 8104af6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8104afa:	609a      	str	r2, [r3, #8]
 8104afc:	e006      	b.n	8104b0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8104afe:	687b      	ldr	r3, [r7, #4]
 8104b00:	689a      	ldr	r2, [r3, #8]
 8104b02:	687b      	ldr	r3, [r7, #4]
 8104b04:	681b      	ldr	r3, [r3, #0]
 8104b06:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8104b0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8104b0c:	687b      	ldr	r3, [r7, #4]
 8104b0e:	68db      	ldr	r3, [r3, #12]
 8104b10:	2b02      	cmp	r3, #2
 8104b12:	d104      	bne.n	8104b1e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8104b14:	687b      	ldr	r3, [r7, #4]
 8104b16:	681b      	ldr	r3, [r3, #0]
 8104b18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8104b1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8104b1e:	687b      	ldr	r3, [r7, #4]
 8104b20:	681b      	ldr	r3, [r3, #0]
 8104b22:	685b      	ldr	r3, [r3, #4]
 8104b24:	687a      	ldr	r2, [r7, #4]
 8104b26:	6812      	ldr	r2, [r2, #0]
 8104b28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8104b2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8104b30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8104b32:	687b      	ldr	r3, [r7, #4]
 8104b34:	681b      	ldr	r3, [r3, #0]
 8104b36:	68da      	ldr	r2, [r3, #12]
 8104b38:	687b      	ldr	r3, [r7, #4]
 8104b3a:	681b      	ldr	r3, [r3, #0]
 8104b3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8104b40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8104b42:	687b      	ldr	r3, [r7, #4]
 8104b44:	691a      	ldr	r2, [r3, #16]
 8104b46:	687b      	ldr	r3, [r7, #4]
 8104b48:	695b      	ldr	r3, [r3, #20]
 8104b4a:	ea42 0103 	orr.w	r1, r2, r3
 8104b4e:	687b      	ldr	r3, [r7, #4]
 8104b50:	699b      	ldr	r3, [r3, #24]
 8104b52:	021a      	lsls	r2, r3, #8
 8104b54:	687b      	ldr	r3, [r7, #4]
 8104b56:	681b      	ldr	r3, [r3, #0]
 8104b58:	430a      	orrs	r2, r1
 8104b5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8104b5c:	687b      	ldr	r3, [r7, #4]
 8104b5e:	69d9      	ldr	r1, [r3, #28]
 8104b60:	687b      	ldr	r3, [r7, #4]
 8104b62:	6a1a      	ldr	r2, [r3, #32]
 8104b64:	687b      	ldr	r3, [r7, #4]
 8104b66:	681b      	ldr	r3, [r3, #0]
 8104b68:	430a      	orrs	r2, r1
 8104b6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8104b6c:	687b      	ldr	r3, [r7, #4]
 8104b6e:	681b      	ldr	r3, [r3, #0]
 8104b70:	681a      	ldr	r2, [r3, #0]
 8104b72:	687b      	ldr	r3, [r7, #4]
 8104b74:	681b      	ldr	r3, [r3, #0]
 8104b76:	f042 0201 	orr.w	r2, r2, #1
 8104b7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8104b7c:	687b      	ldr	r3, [r7, #4]
 8104b7e:	2200      	movs	r2, #0
 8104b80:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8104b82:	687b      	ldr	r3, [r7, #4]
 8104b84:	2220      	movs	r2, #32
 8104b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8104b8a:	687b      	ldr	r3, [r7, #4]
 8104b8c:	2200      	movs	r2, #0
 8104b8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8104b90:	687b      	ldr	r3, [r7, #4]
 8104b92:	2200      	movs	r2, #0
 8104b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8104b98:	2300      	movs	r3, #0
}
 8104b9a:	4618      	mov	r0, r3
 8104b9c:	3708      	adds	r7, #8
 8104b9e:	46bd      	mov	sp, r7
 8104ba0:	bd80      	pop	{r7, pc}
	...

08104ba4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8104ba4:	b580      	push	{r7, lr}
 8104ba6:	b088      	sub	sp, #32
 8104ba8:	af02      	add	r7, sp, #8
 8104baa:	60f8      	str	r0, [r7, #12]
 8104bac:	607a      	str	r2, [r7, #4]
 8104bae:	461a      	mov	r2, r3
 8104bb0:	460b      	mov	r3, r1
 8104bb2:	817b      	strh	r3, [r7, #10]
 8104bb4:	4613      	mov	r3, r2
 8104bb6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104bb8:	68fb      	ldr	r3, [r7, #12]
 8104bba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104bbe:	b2db      	uxtb	r3, r3
 8104bc0:	2b20      	cmp	r3, #32
 8104bc2:	f040 80da 	bne.w	8104d7a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104bc6:	68fb      	ldr	r3, [r7, #12]
 8104bc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104bcc:	2b01      	cmp	r3, #1
 8104bce:	d101      	bne.n	8104bd4 <HAL_I2C_Master_Transmit+0x30>
 8104bd0:	2302      	movs	r3, #2
 8104bd2:	e0d3      	b.n	8104d7c <HAL_I2C_Master_Transmit+0x1d8>
 8104bd4:	68fb      	ldr	r3, [r7, #12]
 8104bd6:	2201      	movs	r2, #1
 8104bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8104bdc:	f7fd fa1a 	bl	8102014 <HAL_GetTick>
 8104be0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8104be2:	697b      	ldr	r3, [r7, #20]
 8104be4:	9300      	str	r3, [sp, #0]
 8104be6:	2319      	movs	r3, #25
 8104be8:	2201      	movs	r2, #1
 8104bea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8104bee:	68f8      	ldr	r0, [r7, #12]
 8104bf0:	f000 fcd6 	bl	81055a0 <I2C_WaitOnFlagUntilTimeout>
 8104bf4:	4603      	mov	r3, r0
 8104bf6:	2b00      	cmp	r3, #0
 8104bf8:	d001      	beq.n	8104bfe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8104bfa:	2301      	movs	r3, #1
 8104bfc:	e0be      	b.n	8104d7c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8104bfe:	68fb      	ldr	r3, [r7, #12]
 8104c00:	2221      	movs	r2, #33	; 0x21
 8104c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8104c06:	68fb      	ldr	r3, [r7, #12]
 8104c08:	2210      	movs	r2, #16
 8104c0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8104c0e:	68fb      	ldr	r3, [r7, #12]
 8104c10:	2200      	movs	r2, #0
 8104c12:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8104c14:	68fb      	ldr	r3, [r7, #12]
 8104c16:	687a      	ldr	r2, [r7, #4]
 8104c18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8104c1a:	68fb      	ldr	r3, [r7, #12]
 8104c1c:	893a      	ldrh	r2, [r7, #8]
 8104c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8104c20:	68fb      	ldr	r3, [r7, #12]
 8104c22:	2200      	movs	r2, #0
 8104c24:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104c26:	68fb      	ldr	r3, [r7, #12]
 8104c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104c2a:	b29b      	uxth	r3, r3
 8104c2c:	2bff      	cmp	r3, #255	; 0xff
 8104c2e:	d90e      	bls.n	8104c4e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8104c30:	68fb      	ldr	r3, [r7, #12]
 8104c32:	22ff      	movs	r2, #255	; 0xff
 8104c34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8104c36:	68fb      	ldr	r3, [r7, #12]
 8104c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104c3a:	b2da      	uxtb	r2, r3
 8104c3c:	8979      	ldrh	r1, [r7, #10]
 8104c3e:	4b51      	ldr	r3, [pc, #324]	; (8104d84 <HAL_I2C_Master_Transmit+0x1e0>)
 8104c40:	9300      	str	r3, [sp, #0]
 8104c42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104c46:	68f8      	ldr	r0, [r7, #12]
 8104c48:	f000 fe38 	bl	81058bc <I2C_TransferConfig>
 8104c4c:	e06c      	b.n	8104d28 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8104c4e:	68fb      	ldr	r3, [r7, #12]
 8104c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104c52:	b29a      	uxth	r2, r3
 8104c54:	68fb      	ldr	r3, [r7, #12]
 8104c56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8104c58:	68fb      	ldr	r3, [r7, #12]
 8104c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104c5c:	b2da      	uxtb	r2, r3
 8104c5e:	8979      	ldrh	r1, [r7, #10]
 8104c60:	4b48      	ldr	r3, [pc, #288]	; (8104d84 <HAL_I2C_Master_Transmit+0x1e0>)
 8104c62:	9300      	str	r3, [sp, #0]
 8104c64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8104c68:	68f8      	ldr	r0, [r7, #12]
 8104c6a:	f000 fe27 	bl	81058bc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8104c6e:	e05b      	b.n	8104d28 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8104c70:	697a      	ldr	r2, [r7, #20]
 8104c72:	6a39      	ldr	r1, [r7, #32]
 8104c74:	68f8      	ldr	r0, [r7, #12]
 8104c76:	f000 fcd3 	bl	8105620 <I2C_WaitOnTXISFlagUntilTimeout>
 8104c7a:	4603      	mov	r3, r0
 8104c7c:	2b00      	cmp	r3, #0
 8104c7e:	d001      	beq.n	8104c84 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8104c80:	2301      	movs	r3, #1
 8104c82:	e07b      	b.n	8104d7c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8104c84:	68fb      	ldr	r3, [r7, #12]
 8104c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104c88:	781a      	ldrb	r2, [r3, #0]
 8104c8a:	68fb      	ldr	r3, [r7, #12]
 8104c8c:	681b      	ldr	r3, [r3, #0]
 8104c8e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8104c90:	68fb      	ldr	r3, [r7, #12]
 8104c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104c94:	1c5a      	adds	r2, r3, #1
 8104c96:	68fb      	ldr	r3, [r7, #12]
 8104c98:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8104c9a:	68fb      	ldr	r3, [r7, #12]
 8104c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104c9e:	b29b      	uxth	r3, r3
 8104ca0:	3b01      	subs	r3, #1
 8104ca2:	b29a      	uxth	r2, r3
 8104ca4:	68fb      	ldr	r3, [r7, #12]
 8104ca6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8104ca8:	68fb      	ldr	r3, [r7, #12]
 8104caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104cac:	3b01      	subs	r3, #1
 8104cae:	b29a      	uxth	r2, r3
 8104cb0:	68fb      	ldr	r3, [r7, #12]
 8104cb2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8104cb4:	68fb      	ldr	r3, [r7, #12]
 8104cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104cb8:	b29b      	uxth	r3, r3
 8104cba:	2b00      	cmp	r3, #0
 8104cbc:	d034      	beq.n	8104d28 <HAL_I2C_Master_Transmit+0x184>
 8104cbe:	68fb      	ldr	r3, [r7, #12]
 8104cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104cc2:	2b00      	cmp	r3, #0
 8104cc4:	d130      	bne.n	8104d28 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8104cc6:	697b      	ldr	r3, [r7, #20]
 8104cc8:	9300      	str	r3, [sp, #0]
 8104cca:	6a3b      	ldr	r3, [r7, #32]
 8104ccc:	2200      	movs	r2, #0
 8104cce:	2180      	movs	r1, #128	; 0x80
 8104cd0:	68f8      	ldr	r0, [r7, #12]
 8104cd2:	f000 fc65 	bl	81055a0 <I2C_WaitOnFlagUntilTimeout>
 8104cd6:	4603      	mov	r3, r0
 8104cd8:	2b00      	cmp	r3, #0
 8104cda:	d001      	beq.n	8104ce0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8104cdc:	2301      	movs	r3, #1
 8104cde:	e04d      	b.n	8104d7c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104ce0:	68fb      	ldr	r3, [r7, #12]
 8104ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104ce4:	b29b      	uxth	r3, r3
 8104ce6:	2bff      	cmp	r3, #255	; 0xff
 8104ce8:	d90e      	bls.n	8104d08 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8104cea:	68fb      	ldr	r3, [r7, #12]
 8104cec:	22ff      	movs	r2, #255	; 0xff
 8104cee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8104cf0:	68fb      	ldr	r3, [r7, #12]
 8104cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104cf4:	b2da      	uxtb	r2, r3
 8104cf6:	8979      	ldrh	r1, [r7, #10]
 8104cf8:	2300      	movs	r3, #0
 8104cfa:	9300      	str	r3, [sp, #0]
 8104cfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104d00:	68f8      	ldr	r0, [r7, #12]
 8104d02:	f000 fddb 	bl	81058bc <I2C_TransferConfig>
 8104d06:	e00f      	b.n	8104d28 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8104d08:	68fb      	ldr	r3, [r7, #12]
 8104d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104d0c:	b29a      	uxth	r2, r3
 8104d0e:	68fb      	ldr	r3, [r7, #12]
 8104d10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8104d12:	68fb      	ldr	r3, [r7, #12]
 8104d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104d16:	b2da      	uxtb	r2, r3
 8104d18:	8979      	ldrh	r1, [r7, #10]
 8104d1a:	2300      	movs	r3, #0
 8104d1c:	9300      	str	r3, [sp, #0]
 8104d1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8104d22:	68f8      	ldr	r0, [r7, #12]
 8104d24:	f000 fdca 	bl	81058bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8104d28:	68fb      	ldr	r3, [r7, #12]
 8104d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104d2c:	b29b      	uxth	r3, r3
 8104d2e:	2b00      	cmp	r3, #0
 8104d30:	d19e      	bne.n	8104c70 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8104d32:	697a      	ldr	r2, [r7, #20]
 8104d34:	6a39      	ldr	r1, [r7, #32]
 8104d36:	68f8      	ldr	r0, [r7, #12]
 8104d38:	f000 fcb2 	bl	81056a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8104d3c:	4603      	mov	r3, r0
 8104d3e:	2b00      	cmp	r3, #0
 8104d40:	d001      	beq.n	8104d46 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8104d42:	2301      	movs	r3, #1
 8104d44:	e01a      	b.n	8104d7c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104d46:	68fb      	ldr	r3, [r7, #12]
 8104d48:	681b      	ldr	r3, [r3, #0]
 8104d4a:	2220      	movs	r2, #32
 8104d4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8104d4e:	68fb      	ldr	r3, [r7, #12]
 8104d50:	681b      	ldr	r3, [r3, #0]
 8104d52:	6859      	ldr	r1, [r3, #4]
 8104d54:	68fb      	ldr	r3, [r7, #12]
 8104d56:	681a      	ldr	r2, [r3, #0]
 8104d58:	4b0b      	ldr	r3, [pc, #44]	; (8104d88 <HAL_I2C_Master_Transmit+0x1e4>)
 8104d5a:	400b      	ands	r3, r1
 8104d5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8104d5e:	68fb      	ldr	r3, [r7, #12]
 8104d60:	2220      	movs	r2, #32
 8104d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8104d66:	68fb      	ldr	r3, [r7, #12]
 8104d68:	2200      	movs	r2, #0
 8104d6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104d6e:	68fb      	ldr	r3, [r7, #12]
 8104d70:	2200      	movs	r2, #0
 8104d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8104d76:	2300      	movs	r3, #0
 8104d78:	e000      	b.n	8104d7c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8104d7a:	2302      	movs	r3, #2
  }
}
 8104d7c:	4618      	mov	r0, r3
 8104d7e:	3718      	adds	r7, #24
 8104d80:	46bd      	mov	sp, r7
 8104d82:	bd80      	pop	{r7, pc}
 8104d84:	80002000 	.word	0x80002000
 8104d88:	fe00e800 	.word	0xfe00e800

08104d8c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8104d8c:	b580      	push	{r7, lr}
 8104d8e:	b088      	sub	sp, #32
 8104d90:	af02      	add	r7, sp, #8
 8104d92:	60f8      	str	r0, [r7, #12]
 8104d94:	607a      	str	r2, [r7, #4]
 8104d96:	461a      	mov	r2, r3
 8104d98:	460b      	mov	r3, r1
 8104d9a:	817b      	strh	r3, [r7, #10]
 8104d9c:	4613      	mov	r3, r2
 8104d9e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104da0:	68fb      	ldr	r3, [r7, #12]
 8104da2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104da6:	b2db      	uxtb	r3, r3
 8104da8:	2b20      	cmp	r3, #32
 8104daa:	f040 80db 	bne.w	8104f64 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104dae:	68fb      	ldr	r3, [r7, #12]
 8104db0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104db4:	2b01      	cmp	r3, #1
 8104db6:	d101      	bne.n	8104dbc <HAL_I2C_Master_Receive+0x30>
 8104db8:	2302      	movs	r3, #2
 8104dba:	e0d4      	b.n	8104f66 <HAL_I2C_Master_Receive+0x1da>
 8104dbc:	68fb      	ldr	r3, [r7, #12]
 8104dbe:	2201      	movs	r2, #1
 8104dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8104dc4:	f7fd f926 	bl	8102014 <HAL_GetTick>
 8104dc8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8104dca:	697b      	ldr	r3, [r7, #20]
 8104dcc:	9300      	str	r3, [sp, #0]
 8104dce:	2319      	movs	r3, #25
 8104dd0:	2201      	movs	r2, #1
 8104dd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8104dd6:	68f8      	ldr	r0, [r7, #12]
 8104dd8:	f000 fbe2 	bl	81055a0 <I2C_WaitOnFlagUntilTimeout>
 8104ddc:	4603      	mov	r3, r0
 8104dde:	2b00      	cmp	r3, #0
 8104de0:	d001      	beq.n	8104de6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8104de2:	2301      	movs	r3, #1
 8104de4:	e0bf      	b.n	8104f66 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8104de6:	68fb      	ldr	r3, [r7, #12]
 8104de8:	2222      	movs	r2, #34	; 0x22
 8104dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8104dee:	68fb      	ldr	r3, [r7, #12]
 8104df0:	2210      	movs	r2, #16
 8104df2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8104df6:	68fb      	ldr	r3, [r7, #12]
 8104df8:	2200      	movs	r2, #0
 8104dfa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8104dfc:	68fb      	ldr	r3, [r7, #12]
 8104dfe:	687a      	ldr	r2, [r7, #4]
 8104e00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8104e02:	68fb      	ldr	r3, [r7, #12]
 8104e04:	893a      	ldrh	r2, [r7, #8]
 8104e06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8104e08:	68fb      	ldr	r3, [r7, #12]
 8104e0a:	2200      	movs	r2, #0
 8104e0c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104e0e:	68fb      	ldr	r3, [r7, #12]
 8104e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104e12:	b29b      	uxth	r3, r3
 8104e14:	2bff      	cmp	r3, #255	; 0xff
 8104e16:	d90e      	bls.n	8104e36 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8104e18:	68fb      	ldr	r3, [r7, #12]
 8104e1a:	22ff      	movs	r2, #255	; 0xff
 8104e1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8104e1e:	68fb      	ldr	r3, [r7, #12]
 8104e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104e22:	b2da      	uxtb	r2, r3
 8104e24:	8979      	ldrh	r1, [r7, #10]
 8104e26:	4b52      	ldr	r3, [pc, #328]	; (8104f70 <HAL_I2C_Master_Receive+0x1e4>)
 8104e28:	9300      	str	r3, [sp, #0]
 8104e2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104e2e:	68f8      	ldr	r0, [r7, #12]
 8104e30:	f000 fd44 	bl	81058bc <I2C_TransferConfig>
 8104e34:	e06d      	b.n	8104f12 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8104e36:	68fb      	ldr	r3, [r7, #12]
 8104e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104e3a:	b29a      	uxth	r2, r3
 8104e3c:	68fb      	ldr	r3, [r7, #12]
 8104e3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8104e40:	68fb      	ldr	r3, [r7, #12]
 8104e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104e44:	b2da      	uxtb	r2, r3
 8104e46:	8979      	ldrh	r1, [r7, #10]
 8104e48:	4b49      	ldr	r3, [pc, #292]	; (8104f70 <HAL_I2C_Master_Receive+0x1e4>)
 8104e4a:	9300      	str	r3, [sp, #0]
 8104e4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8104e50:	68f8      	ldr	r0, [r7, #12]
 8104e52:	f000 fd33 	bl	81058bc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8104e56:	e05c      	b.n	8104f12 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8104e58:	697a      	ldr	r2, [r7, #20]
 8104e5a:	6a39      	ldr	r1, [r7, #32]
 8104e5c:	68f8      	ldr	r0, [r7, #12]
 8104e5e:	f000 fc5b 	bl	8105718 <I2C_WaitOnRXNEFlagUntilTimeout>
 8104e62:	4603      	mov	r3, r0
 8104e64:	2b00      	cmp	r3, #0
 8104e66:	d001      	beq.n	8104e6c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8104e68:	2301      	movs	r3, #1
 8104e6a:	e07c      	b.n	8104f66 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8104e6c:	68fb      	ldr	r3, [r7, #12]
 8104e6e:	681b      	ldr	r3, [r3, #0]
 8104e70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8104e72:	68fb      	ldr	r3, [r7, #12]
 8104e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104e76:	b2d2      	uxtb	r2, r2
 8104e78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8104e7a:	68fb      	ldr	r3, [r7, #12]
 8104e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104e7e:	1c5a      	adds	r2, r3, #1
 8104e80:	68fb      	ldr	r3, [r7, #12]
 8104e82:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8104e84:	68fb      	ldr	r3, [r7, #12]
 8104e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104e88:	3b01      	subs	r3, #1
 8104e8a:	b29a      	uxth	r2, r3
 8104e8c:	68fb      	ldr	r3, [r7, #12]
 8104e8e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8104e90:	68fb      	ldr	r3, [r7, #12]
 8104e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104e94:	b29b      	uxth	r3, r3
 8104e96:	3b01      	subs	r3, #1
 8104e98:	b29a      	uxth	r2, r3
 8104e9a:	68fb      	ldr	r3, [r7, #12]
 8104e9c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8104e9e:	68fb      	ldr	r3, [r7, #12]
 8104ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104ea2:	b29b      	uxth	r3, r3
 8104ea4:	2b00      	cmp	r3, #0
 8104ea6:	d034      	beq.n	8104f12 <HAL_I2C_Master_Receive+0x186>
 8104ea8:	68fb      	ldr	r3, [r7, #12]
 8104eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104eac:	2b00      	cmp	r3, #0
 8104eae:	d130      	bne.n	8104f12 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8104eb0:	697b      	ldr	r3, [r7, #20]
 8104eb2:	9300      	str	r3, [sp, #0]
 8104eb4:	6a3b      	ldr	r3, [r7, #32]
 8104eb6:	2200      	movs	r2, #0
 8104eb8:	2180      	movs	r1, #128	; 0x80
 8104eba:	68f8      	ldr	r0, [r7, #12]
 8104ebc:	f000 fb70 	bl	81055a0 <I2C_WaitOnFlagUntilTimeout>
 8104ec0:	4603      	mov	r3, r0
 8104ec2:	2b00      	cmp	r3, #0
 8104ec4:	d001      	beq.n	8104eca <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8104ec6:	2301      	movs	r3, #1
 8104ec8:	e04d      	b.n	8104f66 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104eca:	68fb      	ldr	r3, [r7, #12]
 8104ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104ece:	b29b      	uxth	r3, r3
 8104ed0:	2bff      	cmp	r3, #255	; 0xff
 8104ed2:	d90e      	bls.n	8104ef2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8104ed4:	68fb      	ldr	r3, [r7, #12]
 8104ed6:	22ff      	movs	r2, #255	; 0xff
 8104ed8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8104eda:	68fb      	ldr	r3, [r7, #12]
 8104edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104ede:	b2da      	uxtb	r2, r3
 8104ee0:	8979      	ldrh	r1, [r7, #10]
 8104ee2:	2300      	movs	r3, #0
 8104ee4:	9300      	str	r3, [sp, #0]
 8104ee6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104eea:	68f8      	ldr	r0, [r7, #12]
 8104eec:	f000 fce6 	bl	81058bc <I2C_TransferConfig>
 8104ef0:	e00f      	b.n	8104f12 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8104ef2:	68fb      	ldr	r3, [r7, #12]
 8104ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104ef6:	b29a      	uxth	r2, r3
 8104ef8:	68fb      	ldr	r3, [r7, #12]
 8104efa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8104efc:	68fb      	ldr	r3, [r7, #12]
 8104efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104f00:	b2da      	uxtb	r2, r3
 8104f02:	8979      	ldrh	r1, [r7, #10]
 8104f04:	2300      	movs	r3, #0
 8104f06:	9300      	str	r3, [sp, #0]
 8104f08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8104f0c:	68f8      	ldr	r0, [r7, #12]
 8104f0e:	f000 fcd5 	bl	81058bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8104f12:	68fb      	ldr	r3, [r7, #12]
 8104f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104f16:	b29b      	uxth	r3, r3
 8104f18:	2b00      	cmp	r3, #0
 8104f1a:	d19d      	bne.n	8104e58 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8104f1c:	697a      	ldr	r2, [r7, #20]
 8104f1e:	6a39      	ldr	r1, [r7, #32]
 8104f20:	68f8      	ldr	r0, [r7, #12]
 8104f22:	f000 fbbd 	bl	81056a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8104f26:	4603      	mov	r3, r0
 8104f28:	2b00      	cmp	r3, #0
 8104f2a:	d001      	beq.n	8104f30 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8104f2c:	2301      	movs	r3, #1
 8104f2e:	e01a      	b.n	8104f66 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104f30:	68fb      	ldr	r3, [r7, #12]
 8104f32:	681b      	ldr	r3, [r3, #0]
 8104f34:	2220      	movs	r2, #32
 8104f36:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8104f38:	68fb      	ldr	r3, [r7, #12]
 8104f3a:	681b      	ldr	r3, [r3, #0]
 8104f3c:	6859      	ldr	r1, [r3, #4]
 8104f3e:	68fb      	ldr	r3, [r7, #12]
 8104f40:	681a      	ldr	r2, [r3, #0]
 8104f42:	4b0c      	ldr	r3, [pc, #48]	; (8104f74 <HAL_I2C_Master_Receive+0x1e8>)
 8104f44:	400b      	ands	r3, r1
 8104f46:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8104f48:	68fb      	ldr	r3, [r7, #12]
 8104f4a:	2220      	movs	r2, #32
 8104f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8104f50:	68fb      	ldr	r3, [r7, #12]
 8104f52:	2200      	movs	r2, #0
 8104f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104f58:	68fb      	ldr	r3, [r7, #12]
 8104f5a:	2200      	movs	r2, #0
 8104f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8104f60:	2300      	movs	r3, #0
 8104f62:	e000      	b.n	8104f66 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8104f64:	2302      	movs	r3, #2
  }
}
 8104f66:	4618      	mov	r0, r3
 8104f68:	3718      	adds	r7, #24
 8104f6a:	46bd      	mov	sp, r7
 8104f6c:	bd80      	pop	{r7, pc}
 8104f6e:	bf00      	nop
 8104f70:	80002400 	.word	0x80002400
 8104f74:	fe00e800 	.word	0xfe00e800

08104f78 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8104f78:	b580      	push	{r7, lr}
 8104f7a:	b088      	sub	sp, #32
 8104f7c:	af02      	add	r7, sp, #8
 8104f7e:	60f8      	str	r0, [r7, #12]
 8104f80:	4608      	mov	r0, r1
 8104f82:	4611      	mov	r1, r2
 8104f84:	461a      	mov	r2, r3
 8104f86:	4603      	mov	r3, r0
 8104f88:	817b      	strh	r3, [r7, #10]
 8104f8a:	460b      	mov	r3, r1
 8104f8c:	813b      	strh	r3, [r7, #8]
 8104f8e:	4613      	mov	r3, r2
 8104f90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104f92:	68fb      	ldr	r3, [r7, #12]
 8104f94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104f98:	b2db      	uxtb	r3, r3
 8104f9a:	2b20      	cmp	r3, #32
 8104f9c:	f040 80f9 	bne.w	8105192 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8104fa0:	6a3b      	ldr	r3, [r7, #32]
 8104fa2:	2b00      	cmp	r3, #0
 8104fa4:	d002      	beq.n	8104fac <HAL_I2C_Mem_Write+0x34>
 8104fa6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8104fa8:	2b00      	cmp	r3, #0
 8104faa:	d105      	bne.n	8104fb8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8104fac:	68fb      	ldr	r3, [r7, #12]
 8104fae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8104fb2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8104fb4:	2301      	movs	r3, #1
 8104fb6:	e0ed      	b.n	8105194 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104fb8:	68fb      	ldr	r3, [r7, #12]
 8104fba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104fbe:	2b01      	cmp	r3, #1
 8104fc0:	d101      	bne.n	8104fc6 <HAL_I2C_Mem_Write+0x4e>
 8104fc2:	2302      	movs	r3, #2
 8104fc4:	e0e6      	b.n	8105194 <HAL_I2C_Mem_Write+0x21c>
 8104fc6:	68fb      	ldr	r3, [r7, #12]
 8104fc8:	2201      	movs	r2, #1
 8104fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8104fce:	f7fd f821 	bl	8102014 <HAL_GetTick>
 8104fd2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8104fd4:	697b      	ldr	r3, [r7, #20]
 8104fd6:	9300      	str	r3, [sp, #0]
 8104fd8:	2319      	movs	r3, #25
 8104fda:	2201      	movs	r2, #1
 8104fdc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8104fe0:	68f8      	ldr	r0, [r7, #12]
 8104fe2:	f000 fadd 	bl	81055a0 <I2C_WaitOnFlagUntilTimeout>
 8104fe6:	4603      	mov	r3, r0
 8104fe8:	2b00      	cmp	r3, #0
 8104fea:	d001      	beq.n	8104ff0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8104fec:	2301      	movs	r3, #1
 8104fee:	e0d1      	b.n	8105194 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8104ff0:	68fb      	ldr	r3, [r7, #12]
 8104ff2:	2221      	movs	r2, #33	; 0x21
 8104ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8104ff8:	68fb      	ldr	r3, [r7, #12]
 8104ffa:	2240      	movs	r2, #64	; 0x40
 8104ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8105000:	68fb      	ldr	r3, [r7, #12]
 8105002:	2200      	movs	r2, #0
 8105004:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8105006:	68fb      	ldr	r3, [r7, #12]
 8105008:	6a3a      	ldr	r2, [r7, #32]
 810500a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 810500c:	68fb      	ldr	r3, [r7, #12]
 810500e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8105010:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8105012:	68fb      	ldr	r3, [r7, #12]
 8105014:	2200      	movs	r2, #0
 8105016:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8105018:	88f8      	ldrh	r0, [r7, #6]
 810501a:	893a      	ldrh	r2, [r7, #8]
 810501c:	8979      	ldrh	r1, [r7, #10]
 810501e:	697b      	ldr	r3, [r7, #20]
 8105020:	9301      	str	r3, [sp, #4]
 8105022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105024:	9300      	str	r3, [sp, #0]
 8105026:	4603      	mov	r3, r0
 8105028:	68f8      	ldr	r0, [r7, #12]
 810502a:	f000 f9ed 	bl	8105408 <I2C_RequestMemoryWrite>
 810502e:	4603      	mov	r3, r0
 8105030:	2b00      	cmp	r3, #0
 8105032:	d005      	beq.n	8105040 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8105034:	68fb      	ldr	r3, [r7, #12]
 8105036:	2200      	movs	r2, #0
 8105038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 810503c:	2301      	movs	r3, #1
 810503e:	e0a9      	b.n	8105194 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105040:	68fb      	ldr	r3, [r7, #12]
 8105042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105044:	b29b      	uxth	r3, r3
 8105046:	2bff      	cmp	r3, #255	; 0xff
 8105048:	d90e      	bls.n	8105068 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 810504a:	68fb      	ldr	r3, [r7, #12]
 810504c:	22ff      	movs	r2, #255	; 0xff
 810504e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8105050:	68fb      	ldr	r3, [r7, #12]
 8105052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105054:	b2da      	uxtb	r2, r3
 8105056:	8979      	ldrh	r1, [r7, #10]
 8105058:	2300      	movs	r3, #0
 810505a:	9300      	str	r3, [sp, #0]
 810505c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8105060:	68f8      	ldr	r0, [r7, #12]
 8105062:	f000 fc2b 	bl	81058bc <I2C_TransferConfig>
 8105066:	e00f      	b.n	8105088 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8105068:	68fb      	ldr	r3, [r7, #12]
 810506a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810506c:	b29a      	uxth	r2, r3
 810506e:	68fb      	ldr	r3, [r7, #12]
 8105070:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8105072:	68fb      	ldr	r3, [r7, #12]
 8105074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105076:	b2da      	uxtb	r2, r3
 8105078:	8979      	ldrh	r1, [r7, #10]
 810507a:	2300      	movs	r3, #0
 810507c:	9300      	str	r3, [sp, #0]
 810507e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8105082:	68f8      	ldr	r0, [r7, #12]
 8105084:	f000 fc1a 	bl	81058bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8105088:	697a      	ldr	r2, [r7, #20]
 810508a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810508c:	68f8      	ldr	r0, [r7, #12]
 810508e:	f000 fac7 	bl	8105620 <I2C_WaitOnTXISFlagUntilTimeout>
 8105092:	4603      	mov	r3, r0
 8105094:	2b00      	cmp	r3, #0
 8105096:	d001      	beq.n	810509c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8105098:	2301      	movs	r3, #1
 810509a:	e07b      	b.n	8105194 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 810509c:	68fb      	ldr	r3, [r7, #12]
 810509e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81050a0:	781a      	ldrb	r2, [r3, #0]
 81050a2:	68fb      	ldr	r3, [r7, #12]
 81050a4:	681b      	ldr	r3, [r3, #0]
 81050a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81050a8:	68fb      	ldr	r3, [r7, #12]
 81050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81050ac:	1c5a      	adds	r2, r3, #1
 81050ae:	68fb      	ldr	r3, [r7, #12]
 81050b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 81050b2:	68fb      	ldr	r3, [r7, #12]
 81050b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81050b6:	b29b      	uxth	r3, r3
 81050b8:	3b01      	subs	r3, #1
 81050ba:	b29a      	uxth	r2, r3
 81050bc:	68fb      	ldr	r3, [r7, #12]
 81050be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 81050c0:	68fb      	ldr	r3, [r7, #12]
 81050c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81050c4:	3b01      	subs	r3, #1
 81050c6:	b29a      	uxth	r2, r3
 81050c8:	68fb      	ldr	r3, [r7, #12]
 81050ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81050cc:	68fb      	ldr	r3, [r7, #12]
 81050ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81050d0:	b29b      	uxth	r3, r3
 81050d2:	2b00      	cmp	r3, #0
 81050d4:	d034      	beq.n	8105140 <HAL_I2C_Mem_Write+0x1c8>
 81050d6:	68fb      	ldr	r3, [r7, #12]
 81050d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81050da:	2b00      	cmp	r3, #0
 81050dc:	d130      	bne.n	8105140 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81050de:	697b      	ldr	r3, [r7, #20]
 81050e0:	9300      	str	r3, [sp, #0]
 81050e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81050e4:	2200      	movs	r2, #0
 81050e6:	2180      	movs	r1, #128	; 0x80
 81050e8:	68f8      	ldr	r0, [r7, #12]
 81050ea:	f000 fa59 	bl	81055a0 <I2C_WaitOnFlagUntilTimeout>
 81050ee:	4603      	mov	r3, r0
 81050f0:	2b00      	cmp	r3, #0
 81050f2:	d001      	beq.n	81050f8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 81050f4:	2301      	movs	r3, #1
 81050f6:	e04d      	b.n	8105194 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81050f8:	68fb      	ldr	r3, [r7, #12]
 81050fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81050fc:	b29b      	uxth	r3, r3
 81050fe:	2bff      	cmp	r3, #255	; 0xff
 8105100:	d90e      	bls.n	8105120 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8105102:	68fb      	ldr	r3, [r7, #12]
 8105104:	22ff      	movs	r2, #255	; 0xff
 8105106:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8105108:	68fb      	ldr	r3, [r7, #12]
 810510a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810510c:	b2da      	uxtb	r2, r3
 810510e:	8979      	ldrh	r1, [r7, #10]
 8105110:	2300      	movs	r3, #0
 8105112:	9300      	str	r3, [sp, #0]
 8105114:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8105118:	68f8      	ldr	r0, [r7, #12]
 810511a:	f000 fbcf 	bl	81058bc <I2C_TransferConfig>
 810511e:	e00f      	b.n	8105140 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8105120:	68fb      	ldr	r3, [r7, #12]
 8105122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105124:	b29a      	uxth	r2, r3
 8105126:	68fb      	ldr	r3, [r7, #12]
 8105128:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 810512a:	68fb      	ldr	r3, [r7, #12]
 810512c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810512e:	b2da      	uxtb	r2, r3
 8105130:	8979      	ldrh	r1, [r7, #10]
 8105132:	2300      	movs	r3, #0
 8105134:	9300      	str	r3, [sp, #0]
 8105136:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810513a:	68f8      	ldr	r0, [r7, #12]
 810513c:	f000 fbbe 	bl	81058bc <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8105140:	68fb      	ldr	r3, [r7, #12]
 8105142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105144:	b29b      	uxth	r3, r3
 8105146:	2b00      	cmp	r3, #0
 8105148:	d19e      	bne.n	8105088 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810514a:	697a      	ldr	r2, [r7, #20]
 810514c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810514e:	68f8      	ldr	r0, [r7, #12]
 8105150:	f000 faa6 	bl	81056a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8105154:	4603      	mov	r3, r0
 8105156:	2b00      	cmp	r3, #0
 8105158:	d001      	beq.n	810515e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 810515a:	2301      	movs	r3, #1
 810515c:	e01a      	b.n	8105194 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810515e:	68fb      	ldr	r3, [r7, #12]
 8105160:	681b      	ldr	r3, [r3, #0]
 8105162:	2220      	movs	r2, #32
 8105164:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8105166:	68fb      	ldr	r3, [r7, #12]
 8105168:	681b      	ldr	r3, [r3, #0]
 810516a:	6859      	ldr	r1, [r3, #4]
 810516c:	68fb      	ldr	r3, [r7, #12]
 810516e:	681a      	ldr	r2, [r3, #0]
 8105170:	4b0a      	ldr	r3, [pc, #40]	; (810519c <HAL_I2C_Mem_Write+0x224>)
 8105172:	400b      	ands	r3, r1
 8105174:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8105176:	68fb      	ldr	r3, [r7, #12]
 8105178:	2220      	movs	r2, #32
 810517a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 810517e:	68fb      	ldr	r3, [r7, #12]
 8105180:	2200      	movs	r2, #0
 8105182:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105186:	68fb      	ldr	r3, [r7, #12]
 8105188:	2200      	movs	r2, #0
 810518a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810518e:	2300      	movs	r3, #0
 8105190:	e000      	b.n	8105194 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8105192:	2302      	movs	r3, #2
  }
}
 8105194:	4618      	mov	r0, r3
 8105196:	3718      	adds	r7, #24
 8105198:	46bd      	mov	sp, r7
 810519a:	bd80      	pop	{r7, pc}
 810519c:	fe00e800 	.word	0xfe00e800

081051a0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81051a0:	b580      	push	{r7, lr}
 81051a2:	b088      	sub	sp, #32
 81051a4:	af02      	add	r7, sp, #8
 81051a6:	60f8      	str	r0, [r7, #12]
 81051a8:	4608      	mov	r0, r1
 81051aa:	4611      	mov	r1, r2
 81051ac:	461a      	mov	r2, r3
 81051ae:	4603      	mov	r3, r0
 81051b0:	817b      	strh	r3, [r7, #10]
 81051b2:	460b      	mov	r3, r1
 81051b4:	813b      	strh	r3, [r7, #8]
 81051b6:	4613      	mov	r3, r2
 81051b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81051ba:	68fb      	ldr	r3, [r7, #12]
 81051bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81051c0:	b2db      	uxtb	r3, r3
 81051c2:	2b20      	cmp	r3, #32
 81051c4:	f040 80fd 	bne.w	81053c2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 81051c8:	6a3b      	ldr	r3, [r7, #32]
 81051ca:	2b00      	cmp	r3, #0
 81051cc:	d002      	beq.n	81051d4 <HAL_I2C_Mem_Read+0x34>
 81051ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 81051d0:	2b00      	cmp	r3, #0
 81051d2:	d105      	bne.n	81051e0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 81051d4:	68fb      	ldr	r3, [r7, #12]
 81051d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 81051da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 81051dc:	2301      	movs	r3, #1
 81051de:	e0f1      	b.n	81053c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 81051e0:	68fb      	ldr	r3, [r7, #12]
 81051e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81051e6:	2b01      	cmp	r3, #1
 81051e8:	d101      	bne.n	81051ee <HAL_I2C_Mem_Read+0x4e>
 81051ea:	2302      	movs	r3, #2
 81051ec:	e0ea      	b.n	81053c4 <HAL_I2C_Mem_Read+0x224>
 81051ee:	68fb      	ldr	r3, [r7, #12]
 81051f0:	2201      	movs	r2, #1
 81051f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81051f6:	f7fc ff0d 	bl	8102014 <HAL_GetTick>
 81051fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81051fc:	697b      	ldr	r3, [r7, #20]
 81051fe:	9300      	str	r3, [sp, #0]
 8105200:	2319      	movs	r3, #25
 8105202:	2201      	movs	r2, #1
 8105204:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8105208:	68f8      	ldr	r0, [r7, #12]
 810520a:	f000 f9c9 	bl	81055a0 <I2C_WaitOnFlagUntilTimeout>
 810520e:	4603      	mov	r3, r0
 8105210:	2b00      	cmp	r3, #0
 8105212:	d001      	beq.n	8105218 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8105214:	2301      	movs	r3, #1
 8105216:	e0d5      	b.n	81053c4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8105218:	68fb      	ldr	r3, [r7, #12]
 810521a:	2222      	movs	r2, #34	; 0x22
 810521c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8105220:	68fb      	ldr	r3, [r7, #12]
 8105222:	2240      	movs	r2, #64	; 0x40
 8105224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8105228:	68fb      	ldr	r3, [r7, #12]
 810522a:	2200      	movs	r2, #0
 810522c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 810522e:	68fb      	ldr	r3, [r7, #12]
 8105230:	6a3a      	ldr	r2, [r7, #32]
 8105232:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8105234:	68fb      	ldr	r3, [r7, #12]
 8105236:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8105238:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 810523a:	68fb      	ldr	r3, [r7, #12]
 810523c:	2200      	movs	r2, #0
 810523e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8105240:	88f8      	ldrh	r0, [r7, #6]
 8105242:	893a      	ldrh	r2, [r7, #8]
 8105244:	8979      	ldrh	r1, [r7, #10]
 8105246:	697b      	ldr	r3, [r7, #20]
 8105248:	9301      	str	r3, [sp, #4]
 810524a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810524c:	9300      	str	r3, [sp, #0]
 810524e:	4603      	mov	r3, r0
 8105250:	68f8      	ldr	r0, [r7, #12]
 8105252:	f000 f92d 	bl	81054b0 <I2C_RequestMemoryRead>
 8105256:	4603      	mov	r3, r0
 8105258:	2b00      	cmp	r3, #0
 810525a:	d005      	beq.n	8105268 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 810525c:	68fb      	ldr	r3, [r7, #12]
 810525e:	2200      	movs	r2, #0
 8105260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8105264:	2301      	movs	r3, #1
 8105266:	e0ad      	b.n	81053c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105268:	68fb      	ldr	r3, [r7, #12]
 810526a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810526c:	b29b      	uxth	r3, r3
 810526e:	2bff      	cmp	r3, #255	; 0xff
 8105270:	d90e      	bls.n	8105290 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8105272:	68fb      	ldr	r3, [r7, #12]
 8105274:	22ff      	movs	r2, #255	; 0xff
 8105276:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8105278:	68fb      	ldr	r3, [r7, #12]
 810527a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810527c:	b2da      	uxtb	r2, r3
 810527e:	8979      	ldrh	r1, [r7, #10]
 8105280:	4b52      	ldr	r3, [pc, #328]	; (81053cc <HAL_I2C_Mem_Read+0x22c>)
 8105282:	9300      	str	r3, [sp, #0]
 8105284:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8105288:	68f8      	ldr	r0, [r7, #12]
 810528a:	f000 fb17 	bl	81058bc <I2C_TransferConfig>
 810528e:	e00f      	b.n	81052b0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8105290:	68fb      	ldr	r3, [r7, #12]
 8105292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105294:	b29a      	uxth	r2, r3
 8105296:	68fb      	ldr	r3, [r7, #12]
 8105298:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 810529a:	68fb      	ldr	r3, [r7, #12]
 810529c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810529e:	b2da      	uxtb	r2, r3
 81052a0:	8979      	ldrh	r1, [r7, #10]
 81052a2:	4b4a      	ldr	r3, [pc, #296]	; (81053cc <HAL_I2C_Mem_Read+0x22c>)
 81052a4:	9300      	str	r3, [sp, #0]
 81052a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81052aa:	68f8      	ldr	r0, [r7, #12]
 81052ac:	f000 fb06 	bl	81058bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 81052b0:	697b      	ldr	r3, [r7, #20]
 81052b2:	9300      	str	r3, [sp, #0]
 81052b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81052b6:	2200      	movs	r2, #0
 81052b8:	2104      	movs	r1, #4
 81052ba:	68f8      	ldr	r0, [r7, #12]
 81052bc:	f000 f970 	bl	81055a0 <I2C_WaitOnFlagUntilTimeout>
 81052c0:	4603      	mov	r3, r0
 81052c2:	2b00      	cmp	r3, #0
 81052c4:	d001      	beq.n	81052ca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 81052c6:	2301      	movs	r3, #1
 81052c8:	e07c      	b.n	81053c4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 81052ca:	68fb      	ldr	r3, [r7, #12]
 81052cc:	681b      	ldr	r3, [r3, #0]
 81052ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81052d0:	68fb      	ldr	r3, [r7, #12]
 81052d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81052d4:	b2d2      	uxtb	r2, r2
 81052d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81052d8:	68fb      	ldr	r3, [r7, #12]
 81052da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81052dc:	1c5a      	adds	r2, r3, #1
 81052de:	68fb      	ldr	r3, [r7, #12]
 81052e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 81052e2:	68fb      	ldr	r3, [r7, #12]
 81052e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81052e6:	3b01      	subs	r3, #1
 81052e8:	b29a      	uxth	r2, r3
 81052ea:	68fb      	ldr	r3, [r7, #12]
 81052ec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 81052ee:	68fb      	ldr	r3, [r7, #12]
 81052f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81052f2:	b29b      	uxth	r3, r3
 81052f4:	3b01      	subs	r3, #1
 81052f6:	b29a      	uxth	r2, r3
 81052f8:	68fb      	ldr	r3, [r7, #12]
 81052fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81052fc:	68fb      	ldr	r3, [r7, #12]
 81052fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105300:	b29b      	uxth	r3, r3
 8105302:	2b00      	cmp	r3, #0
 8105304:	d034      	beq.n	8105370 <HAL_I2C_Mem_Read+0x1d0>
 8105306:	68fb      	ldr	r3, [r7, #12]
 8105308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810530a:	2b00      	cmp	r3, #0
 810530c:	d130      	bne.n	8105370 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 810530e:	697b      	ldr	r3, [r7, #20]
 8105310:	9300      	str	r3, [sp, #0]
 8105312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105314:	2200      	movs	r2, #0
 8105316:	2180      	movs	r1, #128	; 0x80
 8105318:	68f8      	ldr	r0, [r7, #12]
 810531a:	f000 f941 	bl	81055a0 <I2C_WaitOnFlagUntilTimeout>
 810531e:	4603      	mov	r3, r0
 8105320:	2b00      	cmp	r3, #0
 8105322:	d001      	beq.n	8105328 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8105324:	2301      	movs	r3, #1
 8105326:	e04d      	b.n	81053c4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105328:	68fb      	ldr	r3, [r7, #12]
 810532a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810532c:	b29b      	uxth	r3, r3
 810532e:	2bff      	cmp	r3, #255	; 0xff
 8105330:	d90e      	bls.n	8105350 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8105332:	68fb      	ldr	r3, [r7, #12]
 8105334:	22ff      	movs	r2, #255	; 0xff
 8105336:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8105338:	68fb      	ldr	r3, [r7, #12]
 810533a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810533c:	b2da      	uxtb	r2, r3
 810533e:	8979      	ldrh	r1, [r7, #10]
 8105340:	2300      	movs	r3, #0
 8105342:	9300      	str	r3, [sp, #0]
 8105344:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8105348:	68f8      	ldr	r0, [r7, #12]
 810534a:	f000 fab7 	bl	81058bc <I2C_TransferConfig>
 810534e:	e00f      	b.n	8105370 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8105350:	68fb      	ldr	r3, [r7, #12]
 8105352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105354:	b29a      	uxth	r2, r3
 8105356:	68fb      	ldr	r3, [r7, #12]
 8105358:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 810535a:	68fb      	ldr	r3, [r7, #12]
 810535c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810535e:	b2da      	uxtb	r2, r3
 8105360:	8979      	ldrh	r1, [r7, #10]
 8105362:	2300      	movs	r3, #0
 8105364:	9300      	str	r3, [sp, #0]
 8105366:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810536a:	68f8      	ldr	r0, [r7, #12]
 810536c:	f000 faa6 	bl	81058bc <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8105370:	68fb      	ldr	r3, [r7, #12]
 8105372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105374:	b29b      	uxth	r3, r3
 8105376:	2b00      	cmp	r3, #0
 8105378:	d19a      	bne.n	81052b0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810537a:	697a      	ldr	r2, [r7, #20]
 810537c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810537e:	68f8      	ldr	r0, [r7, #12]
 8105380:	f000 f98e 	bl	81056a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8105384:	4603      	mov	r3, r0
 8105386:	2b00      	cmp	r3, #0
 8105388:	d001      	beq.n	810538e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 810538a:	2301      	movs	r3, #1
 810538c:	e01a      	b.n	81053c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810538e:	68fb      	ldr	r3, [r7, #12]
 8105390:	681b      	ldr	r3, [r3, #0]
 8105392:	2220      	movs	r2, #32
 8105394:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8105396:	68fb      	ldr	r3, [r7, #12]
 8105398:	681b      	ldr	r3, [r3, #0]
 810539a:	6859      	ldr	r1, [r3, #4]
 810539c:	68fb      	ldr	r3, [r7, #12]
 810539e:	681a      	ldr	r2, [r3, #0]
 81053a0:	4b0b      	ldr	r3, [pc, #44]	; (81053d0 <HAL_I2C_Mem_Read+0x230>)
 81053a2:	400b      	ands	r3, r1
 81053a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 81053a6:	68fb      	ldr	r3, [r7, #12]
 81053a8:	2220      	movs	r2, #32
 81053aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 81053ae:	68fb      	ldr	r3, [r7, #12]
 81053b0:	2200      	movs	r2, #0
 81053b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81053b6:	68fb      	ldr	r3, [r7, #12]
 81053b8:	2200      	movs	r2, #0
 81053ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81053be:	2300      	movs	r3, #0
 81053c0:	e000      	b.n	81053c4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 81053c2:	2302      	movs	r3, #2
  }
}
 81053c4:	4618      	mov	r0, r3
 81053c6:	3718      	adds	r7, #24
 81053c8:	46bd      	mov	sp, r7
 81053ca:	bd80      	pop	{r7, pc}
 81053cc:	80002400 	.word	0x80002400
 81053d0:	fe00e800 	.word	0xfe00e800

081053d4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 81053d4:	b480      	push	{r7}
 81053d6:	b083      	sub	sp, #12
 81053d8:	af00      	add	r7, sp, #0
 81053da:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 81053dc:	687b      	ldr	r3, [r7, #4]
 81053de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81053e2:	b2db      	uxtb	r3, r3
}
 81053e4:	4618      	mov	r0, r3
 81053e6:	370c      	adds	r7, #12
 81053e8:	46bd      	mov	sp, r7
 81053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81053ee:	4770      	bx	lr

081053f0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
* @retval I2C Error Code
*/
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 81053f0:	b480      	push	{r7}
 81053f2:	b083      	sub	sp, #12
 81053f4:	af00      	add	r7, sp, #0
 81053f6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 81053f8:	687b      	ldr	r3, [r7, #4]
 81053fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 81053fc:	4618      	mov	r0, r3
 81053fe:	370c      	adds	r7, #12
 8105400:	46bd      	mov	sp, r7
 8105402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105406:	4770      	bx	lr

08105408 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8105408:	b580      	push	{r7, lr}
 810540a:	b086      	sub	sp, #24
 810540c:	af02      	add	r7, sp, #8
 810540e:	60f8      	str	r0, [r7, #12]
 8105410:	4608      	mov	r0, r1
 8105412:	4611      	mov	r1, r2
 8105414:	461a      	mov	r2, r3
 8105416:	4603      	mov	r3, r0
 8105418:	817b      	strh	r3, [r7, #10]
 810541a:	460b      	mov	r3, r1
 810541c:	813b      	strh	r3, [r7, #8]
 810541e:	4613      	mov	r3, r2
 8105420:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8105422:	88fb      	ldrh	r3, [r7, #6]
 8105424:	b2da      	uxtb	r2, r3
 8105426:	8979      	ldrh	r1, [r7, #10]
 8105428:	4b20      	ldr	r3, [pc, #128]	; (81054ac <I2C_RequestMemoryWrite+0xa4>)
 810542a:	9300      	str	r3, [sp, #0]
 810542c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8105430:	68f8      	ldr	r0, [r7, #12]
 8105432:	f000 fa43 	bl	81058bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8105436:	69fa      	ldr	r2, [r7, #28]
 8105438:	69b9      	ldr	r1, [r7, #24]
 810543a:	68f8      	ldr	r0, [r7, #12]
 810543c:	f000 f8f0 	bl	8105620 <I2C_WaitOnTXISFlagUntilTimeout>
 8105440:	4603      	mov	r3, r0
 8105442:	2b00      	cmp	r3, #0
 8105444:	d001      	beq.n	810544a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8105446:	2301      	movs	r3, #1
 8105448:	e02c      	b.n	81054a4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 810544a:	88fb      	ldrh	r3, [r7, #6]
 810544c:	2b01      	cmp	r3, #1
 810544e:	d105      	bne.n	810545c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8105450:	893b      	ldrh	r3, [r7, #8]
 8105452:	b2da      	uxtb	r2, r3
 8105454:	68fb      	ldr	r3, [r7, #12]
 8105456:	681b      	ldr	r3, [r3, #0]
 8105458:	629a      	str	r2, [r3, #40]	; 0x28
 810545a:	e015      	b.n	8105488 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 810545c:	893b      	ldrh	r3, [r7, #8]
 810545e:	0a1b      	lsrs	r3, r3, #8
 8105460:	b29b      	uxth	r3, r3
 8105462:	b2da      	uxtb	r2, r3
 8105464:	68fb      	ldr	r3, [r7, #12]
 8105466:	681b      	ldr	r3, [r3, #0]
 8105468:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810546a:	69fa      	ldr	r2, [r7, #28]
 810546c:	69b9      	ldr	r1, [r7, #24]
 810546e:	68f8      	ldr	r0, [r7, #12]
 8105470:	f000 f8d6 	bl	8105620 <I2C_WaitOnTXISFlagUntilTimeout>
 8105474:	4603      	mov	r3, r0
 8105476:	2b00      	cmp	r3, #0
 8105478:	d001      	beq.n	810547e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 810547a:	2301      	movs	r3, #1
 810547c:	e012      	b.n	81054a4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810547e:	893b      	ldrh	r3, [r7, #8]
 8105480:	b2da      	uxtb	r2, r3
 8105482:	68fb      	ldr	r3, [r7, #12]
 8105484:	681b      	ldr	r3, [r3, #0]
 8105486:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8105488:	69fb      	ldr	r3, [r7, #28]
 810548a:	9300      	str	r3, [sp, #0]
 810548c:	69bb      	ldr	r3, [r7, #24]
 810548e:	2200      	movs	r2, #0
 8105490:	2180      	movs	r1, #128	; 0x80
 8105492:	68f8      	ldr	r0, [r7, #12]
 8105494:	f000 f884 	bl	81055a0 <I2C_WaitOnFlagUntilTimeout>
 8105498:	4603      	mov	r3, r0
 810549a:	2b00      	cmp	r3, #0
 810549c:	d001      	beq.n	81054a2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 810549e:	2301      	movs	r3, #1
 81054a0:	e000      	b.n	81054a4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 81054a2:	2300      	movs	r3, #0
}
 81054a4:	4618      	mov	r0, r3
 81054a6:	3710      	adds	r7, #16
 81054a8:	46bd      	mov	sp, r7
 81054aa:	bd80      	pop	{r7, pc}
 81054ac:	80002000 	.word	0x80002000

081054b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 81054b0:	b580      	push	{r7, lr}
 81054b2:	b086      	sub	sp, #24
 81054b4:	af02      	add	r7, sp, #8
 81054b6:	60f8      	str	r0, [r7, #12]
 81054b8:	4608      	mov	r0, r1
 81054ba:	4611      	mov	r1, r2
 81054bc:	461a      	mov	r2, r3
 81054be:	4603      	mov	r3, r0
 81054c0:	817b      	strh	r3, [r7, #10]
 81054c2:	460b      	mov	r3, r1
 81054c4:	813b      	strh	r3, [r7, #8]
 81054c6:	4613      	mov	r3, r2
 81054c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 81054ca:	88fb      	ldrh	r3, [r7, #6]
 81054cc:	b2da      	uxtb	r2, r3
 81054ce:	8979      	ldrh	r1, [r7, #10]
 81054d0:	4b20      	ldr	r3, [pc, #128]	; (8105554 <I2C_RequestMemoryRead+0xa4>)
 81054d2:	9300      	str	r3, [sp, #0]
 81054d4:	2300      	movs	r3, #0
 81054d6:	68f8      	ldr	r0, [r7, #12]
 81054d8:	f000 f9f0 	bl	81058bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81054dc:	69fa      	ldr	r2, [r7, #28]
 81054de:	69b9      	ldr	r1, [r7, #24]
 81054e0:	68f8      	ldr	r0, [r7, #12]
 81054e2:	f000 f89d 	bl	8105620 <I2C_WaitOnTXISFlagUntilTimeout>
 81054e6:	4603      	mov	r3, r0
 81054e8:	2b00      	cmp	r3, #0
 81054ea:	d001      	beq.n	81054f0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 81054ec:	2301      	movs	r3, #1
 81054ee:	e02c      	b.n	810554a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 81054f0:	88fb      	ldrh	r3, [r7, #6]
 81054f2:	2b01      	cmp	r3, #1
 81054f4:	d105      	bne.n	8105502 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81054f6:	893b      	ldrh	r3, [r7, #8]
 81054f8:	b2da      	uxtb	r2, r3
 81054fa:	68fb      	ldr	r3, [r7, #12]
 81054fc:	681b      	ldr	r3, [r3, #0]
 81054fe:	629a      	str	r2, [r3, #40]	; 0x28
 8105500:	e015      	b.n	810552e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8105502:	893b      	ldrh	r3, [r7, #8]
 8105504:	0a1b      	lsrs	r3, r3, #8
 8105506:	b29b      	uxth	r3, r3
 8105508:	b2da      	uxtb	r2, r3
 810550a:	68fb      	ldr	r3, [r7, #12]
 810550c:	681b      	ldr	r3, [r3, #0]
 810550e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8105510:	69fa      	ldr	r2, [r7, #28]
 8105512:	69b9      	ldr	r1, [r7, #24]
 8105514:	68f8      	ldr	r0, [r7, #12]
 8105516:	f000 f883 	bl	8105620 <I2C_WaitOnTXISFlagUntilTimeout>
 810551a:	4603      	mov	r3, r0
 810551c:	2b00      	cmp	r3, #0
 810551e:	d001      	beq.n	8105524 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8105520:	2301      	movs	r3, #1
 8105522:	e012      	b.n	810554a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8105524:	893b      	ldrh	r3, [r7, #8]
 8105526:	b2da      	uxtb	r2, r3
 8105528:	68fb      	ldr	r3, [r7, #12]
 810552a:	681b      	ldr	r3, [r3, #0]
 810552c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 810552e:	69fb      	ldr	r3, [r7, #28]
 8105530:	9300      	str	r3, [sp, #0]
 8105532:	69bb      	ldr	r3, [r7, #24]
 8105534:	2200      	movs	r2, #0
 8105536:	2140      	movs	r1, #64	; 0x40
 8105538:	68f8      	ldr	r0, [r7, #12]
 810553a:	f000 f831 	bl	81055a0 <I2C_WaitOnFlagUntilTimeout>
 810553e:	4603      	mov	r3, r0
 8105540:	2b00      	cmp	r3, #0
 8105542:	d001      	beq.n	8105548 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8105544:	2301      	movs	r3, #1
 8105546:	e000      	b.n	810554a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8105548:	2300      	movs	r3, #0
}
 810554a:	4618      	mov	r0, r3
 810554c:	3710      	adds	r7, #16
 810554e:	46bd      	mov	sp, r7
 8105550:	bd80      	pop	{r7, pc}
 8105552:	bf00      	nop
 8105554:	80002000 	.word	0x80002000

08105558 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8105558:	b480      	push	{r7}
 810555a:	b083      	sub	sp, #12
 810555c:	af00      	add	r7, sp, #0
 810555e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8105560:	687b      	ldr	r3, [r7, #4]
 8105562:	681b      	ldr	r3, [r3, #0]
 8105564:	699b      	ldr	r3, [r3, #24]
 8105566:	f003 0302 	and.w	r3, r3, #2
 810556a:	2b02      	cmp	r3, #2
 810556c:	d103      	bne.n	8105576 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 810556e:	687b      	ldr	r3, [r7, #4]
 8105570:	681b      	ldr	r3, [r3, #0]
 8105572:	2200      	movs	r2, #0
 8105574:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8105576:	687b      	ldr	r3, [r7, #4]
 8105578:	681b      	ldr	r3, [r3, #0]
 810557a:	699b      	ldr	r3, [r3, #24]
 810557c:	f003 0301 	and.w	r3, r3, #1
 8105580:	2b01      	cmp	r3, #1
 8105582:	d007      	beq.n	8105594 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8105584:	687b      	ldr	r3, [r7, #4]
 8105586:	681b      	ldr	r3, [r3, #0]
 8105588:	699a      	ldr	r2, [r3, #24]
 810558a:	687b      	ldr	r3, [r7, #4]
 810558c:	681b      	ldr	r3, [r3, #0]
 810558e:	f042 0201 	orr.w	r2, r2, #1
 8105592:	619a      	str	r2, [r3, #24]
  }
}
 8105594:	bf00      	nop
 8105596:	370c      	adds	r7, #12
 8105598:	46bd      	mov	sp, r7
 810559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810559e:	4770      	bx	lr

081055a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 81055a0:	b580      	push	{r7, lr}
 81055a2:	b084      	sub	sp, #16
 81055a4:	af00      	add	r7, sp, #0
 81055a6:	60f8      	str	r0, [r7, #12]
 81055a8:	60b9      	str	r1, [r7, #8]
 81055aa:	603b      	str	r3, [r7, #0]
 81055ac:	4613      	mov	r3, r2
 81055ae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81055b0:	e022      	b.n	81055f8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81055b2:	683b      	ldr	r3, [r7, #0]
 81055b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81055b8:	d01e      	beq.n	81055f8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81055ba:	f7fc fd2b 	bl	8102014 <HAL_GetTick>
 81055be:	4602      	mov	r2, r0
 81055c0:	69bb      	ldr	r3, [r7, #24]
 81055c2:	1ad3      	subs	r3, r2, r3
 81055c4:	683a      	ldr	r2, [r7, #0]
 81055c6:	429a      	cmp	r2, r3
 81055c8:	d302      	bcc.n	81055d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 81055ca:	683b      	ldr	r3, [r7, #0]
 81055cc:	2b00      	cmp	r3, #0
 81055ce:	d113      	bne.n	81055f8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81055d0:	68fb      	ldr	r3, [r7, #12]
 81055d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81055d4:	f043 0220 	orr.w	r2, r3, #32
 81055d8:	68fb      	ldr	r3, [r7, #12]
 81055da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 81055dc:	68fb      	ldr	r3, [r7, #12]
 81055de:	2220      	movs	r2, #32
 81055e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 81055e4:	68fb      	ldr	r3, [r7, #12]
 81055e6:	2200      	movs	r2, #0
 81055e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81055ec:	68fb      	ldr	r3, [r7, #12]
 81055ee:	2200      	movs	r2, #0
 81055f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 81055f4:	2301      	movs	r3, #1
 81055f6:	e00f      	b.n	8105618 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81055f8:	68fb      	ldr	r3, [r7, #12]
 81055fa:	681b      	ldr	r3, [r3, #0]
 81055fc:	699a      	ldr	r2, [r3, #24]
 81055fe:	68bb      	ldr	r3, [r7, #8]
 8105600:	4013      	ands	r3, r2
 8105602:	68ba      	ldr	r2, [r7, #8]
 8105604:	429a      	cmp	r2, r3
 8105606:	bf0c      	ite	eq
 8105608:	2301      	moveq	r3, #1
 810560a:	2300      	movne	r3, #0
 810560c:	b2db      	uxtb	r3, r3
 810560e:	461a      	mov	r2, r3
 8105610:	79fb      	ldrb	r3, [r7, #7]
 8105612:	429a      	cmp	r2, r3
 8105614:	d0cd      	beq.n	81055b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8105616:	2300      	movs	r3, #0
}
 8105618:	4618      	mov	r0, r3
 810561a:	3710      	adds	r7, #16
 810561c:	46bd      	mov	sp, r7
 810561e:	bd80      	pop	{r7, pc}

08105620 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8105620:	b580      	push	{r7, lr}
 8105622:	b084      	sub	sp, #16
 8105624:	af00      	add	r7, sp, #0
 8105626:	60f8      	str	r0, [r7, #12]
 8105628:	60b9      	str	r1, [r7, #8]
 810562a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 810562c:	e02c      	b.n	8105688 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 810562e:	687a      	ldr	r2, [r7, #4]
 8105630:	68b9      	ldr	r1, [r7, #8]
 8105632:	68f8      	ldr	r0, [r7, #12]
 8105634:	f000 f8dc 	bl	81057f0 <I2C_IsAcknowledgeFailed>
 8105638:	4603      	mov	r3, r0
 810563a:	2b00      	cmp	r3, #0
 810563c:	d001      	beq.n	8105642 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810563e:	2301      	movs	r3, #1
 8105640:	e02a      	b.n	8105698 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8105642:	68bb      	ldr	r3, [r7, #8]
 8105644:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8105648:	d01e      	beq.n	8105688 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810564a:	f7fc fce3 	bl	8102014 <HAL_GetTick>
 810564e:	4602      	mov	r2, r0
 8105650:	687b      	ldr	r3, [r7, #4]
 8105652:	1ad3      	subs	r3, r2, r3
 8105654:	68ba      	ldr	r2, [r7, #8]
 8105656:	429a      	cmp	r2, r3
 8105658:	d302      	bcc.n	8105660 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 810565a:	68bb      	ldr	r3, [r7, #8]
 810565c:	2b00      	cmp	r3, #0
 810565e:	d113      	bne.n	8105688 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105660:	68fb      	ldr	r3, [r7, #12]
 8105662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105664:	f043 0220 	orr.w	r2, r3, #32
 8105668:	68fb      	ldr	r3, [r7, #12]
 810566a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 810566c:	68fb      	ldr	r3, [r7, #12]
 810566e:	2220      	movs	r2, #32
 8105670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8105674:	68fb      	ldr	r3, [r7, #12]
 8105676:	2200      	movs	r2, #0
 8105678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 810567c:	68fb      	ldr	r3, [r7, #12]
 810567e:	2200      	movs	r2, #0
 8105680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8105684:	2301      	movs	r3, #1
 8105686:	e007      	b.n	8105698 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8105688:	68fb      	ldr	r3, [r7, #12]
 810568a:	681b      	ldr	r3, [r3, #0]
 810568c:	699b      	ldr	r3, [r3, #24]
 810568e:	f003 0302 	and.w	r3, r3, #2
 8105692:	2b02      	cmp	r3, #2
 8105694:	d1cb      	bne.n	810562e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8105696:	2300      	movs	r3, #0
}
 8105698:	4618      	mov	r0, r3
 810569a:	3710      	adds	r7, #16
 810569c:	46bd      	mov	sp, r7
 810569e:	bd80      	pop	{r7, pc}

081056a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81056a0:	b580      	push	{r7, lr}
 81056a2:	b084      	sub	sp, #16
 81056a4:	af00      	add	r7, sp, #0
 81056a6:	60f8      	str	r0, [r7, #12]
 81056a8:	60b9      	str	r1, [r7, #8]
 81056aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81056ac:	e028      	b.n	8105700 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 81056ae:	687a      	ldr	r2, [r7, #4]
 81056b0:	68b9      	ldr	r1, [r7, #8]
 81056b2:	68f8      	ldr	r0, [r7, #12]
 81056b4:	f000 f89c 	bl	81057f0 <I2C_IsAcknowledgeFailed>
 81056b8:	4603      	mov	r3, r0
 81056ba:	2b00      	cmp	r3, #0
 81056bc:	d001      	beq.n	81056c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 81056be:	2301      	movs	r3, #1
 81056c0:	e026      	b.n	8105710 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81056c2:	f7fc fca7 	bl	8102014 <HAL_GetTick>
 81056c6:	4602      	mov	r2, r0
 81056c8:	687b      	ldr	r3, [r7, #4]
 81056ca:	1ad3      	subs	r3, r2, r3
 81056cc:	68ba      	ldr	r2, [r7, #8]
 81056ce:	429a      	cmp	r2, r3
 81056d0:	d302      	bcc.n	81056d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 81056d2:	68bb      	ldr	r3, [r7, #8]
 81056d4:	2b00      	cmp	r3, #0
 81056d6:	d113      	bne.n	8105700 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81056d8:	68fb      	ldr	r3, [r7, #12]
 81056da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81056dc:	f043 0220 	orr.w	r2, r3, #32
 81056e0:	68fb      	ldr	r3, [r7, #12]
 81056e2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 81056e4:	68fb      	ldr	r3, [r7, #12]
 81056e6:	2220      	movs	r2, #32
 81056e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 81056ec:	68fb      	ldr	r3, [r7, #12]
 81056ee:	2200      	movs	r2, #0
 81056f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81056f4:	68fb      	ldr	r3, [r7, #12]
 81056f6:	2200      	movs	r2, #0
 81056f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 81056fc:	2301      	movs	r3, #1
 81056fe:	e007      	b.n	8105710 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8105700:	68fb      	ldr	r3, [r7, #12]
 8105702:	681b      	ldr	r3, [r3, #0]
 8105704:	699b      	ldr	r3, [r3, #24]
 8105706:	f003 0320 	and.w	r3, r3, #32
 810570a:	2b20      	cmp	r3, #32
 810570c:	d1cf      	bne.n	81056ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 810570e:	2300      	movs	r3, #0
}
 8105710:	4618      	mov	r0, r3
 8105712:	3710      	adds	r7, #16
 8105714:	46bd      	mov	sp, r7
 8105716:	bd80      	pop	{r7, pc}

08105718 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8105718:	b580      	push	{r7, lr}
 810571a:	b084      	sub	sp, #16
 810571c:	af00      	add	r7, sp, #0
 810571e:	60f8      	str	r0, [r7, #12]
 8105720:	60b9      	str	r1, [r7, #8]
 8105722:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8105724:	e055      	b.n	81057d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8105726:	687a      	ldr	r2, [r7, #4]
 8105728:	68b9      	ldr	r1, [r7, #8]
 810572a:	68f8      	ldr	r0, [r7, #12]
 810572c:	f000 f860 	bl	81057f0 <I2C_IsAcknowledgeFailed>
 8105730:	4603      	mov	r3, r0
 8105732:	2b00      	cmp	r3, #0
 8105734:	d001      	beq.n	810573a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8105736:	2301      	movs	r3, #1
 8105738:	e053      	b.n	81057e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 810573a:	68fb      	ldr	r3, [r7, #12]
 810573c:	681b      	ldr	r3, [r3, #0]
 810573e:	699b      	ldr	r3, [r3, #24]
 8105740:	f003 0320 	and.w	r3, r3, #32
 8105744:	2b20      	cmp	r3, #32
 8105746:	d129      	bne.n	810579c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8105748:	68fb      	ldr	r3, [r7, #12]
 810574a:	681b      	ldr	r3, [r3, #0]
 810574c:	699b      	ldr	r3, [r3, #24]
 810574e:	f003 0304 	and.w	r3, r3, #4
 8105752:	2b04      	cmp	r3, #4
 8105754:	d105      	bne.n	8105762 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8105756:	68fb      	ldr	r3, [r7, #12]
 8105758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810575a:	2b00      	cmp	r3, #0
 810575c:	d001      	beq.n	8105762 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 810575e:	2300      	movs	r3, #0
 8105760:	e03f      	b.n	81057e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8105762:	68fb      	ldr	r3, [r7, #12]
 8105764:	681b      	ldr	r3, [r3, #0]
 8105766:	2220      	movs	r2, #32
 8105768:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 810576a:	68fb      	ldr	r3, [r7, #12]
 810576c:	681b      	ldr	r3, [r3, #0]
 810576e:	6859      	ldr	r1, [r3, #4]
 8105770:	68fb      	ldr	r3, [r7, #12]
 8105772:	681a      	ldr	r2, [r3, #0]
 8105774:	4b1d      	ldr	r3, [pc, #116]	; (81057ec <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8105776:	400b      	ands	r3, r1
 8105778:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810577a:	68fb      	ldr	r3, [r7, #12]
 810577c:	2200      	movs	r2, #0
 810577e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8105780:	68fb      	ldr	r3, [r7, #12]
 8105782:	2220      	movs	r2, #32
 8105784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8105788:	68fb      	ldr	r3, [r7, #12]
 810578a:	2200      	movs	r2, #0
 810578c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8105790:	68fb      	ldr	r3, [r7, #12]
 8105792:	2200      	movs	r2, #0
 8105794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8105798:	2301      	movs	r3, #1
 810579a:	e022      	b.n	81057e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810579c:	f7fc fc3a 	bl	8102014 <HAL_GetTick>
 81057a0:	4602      	mov	r2, r0
 81057a2:	687b      	ldr	r3, [r7, #4]
 81057a4:	1ad3      	subs	r3, r2, r3
 81057a6:	68ba      	ldr	r2, [r7, #8]
 81057a8:	429a      	cmp	r2, r3
 81057aa:	d302      	bcc.n	81057b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 81057ac:	68bb      	ldr	r3, [r7, #8]
 81057ae:	2b00      	cmp	r3, #0
 81057b0:	d10f      	bne.n	81057d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81057b2:	68fb      	ldr	r3, [r7, #12]
 81057b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81057b6:	f043 0220 	orr.w	r2, r3, #32
 81057ba:	68fb      	ldr	r3, [r7, #12]
 81057bc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 81057be:	68fb      	ldr	r3, [r7, #12]
 81057c0:	2220      	movs	r2, #32
 81057c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81057c6:	68fb      	ldr	r3, [r7, #12]
 81057c8:	2200      	movs	r2, #0
 81057ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 81057ce:	2301      	movs	r3, #1
 81057d0:	e007      	b.n	81057e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 81057d2:	68fb      	ldr	r3, [r7, #12]
 81057d4:	681b      	ldr	r3, [r3, #0]
 81057d6:	699b      	ldr	r3, [r3, #24]
 81057d8:	f003 0304 	and.w	r3, r3, #4
 81057dc:	2b04      	cmp	r3, #4
 81057de:	d1a2      	bne.n	8105726 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 81057e0:	2300      	movs	r3, #0
}
 81057e2:	4618      	mov	r0, r3
 81057e4:	3710      	adds	r7, #16
 81057e6:	46bd      	mov	sp, r7
 81057e8:	bd80      	pop	{r7, pc}
 81057ea:	bf00      	nop
 81057ec:	fe00e800 	.word	0xfe00e800

081057f0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81057f0:	b580      	push	{r7, lr}
 81057f2:	b084      	sub	sp, #16
 81057f4:	af00      	add	r7, sp, #0
 81057f6:	60f8      	str	r0, [r7, #12]
 81057f8:	60b9      	str	r1, [r7, #8]
 81057fa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 81057fc:	68fb      	ldr	r3, [r7, #12]
 81057fe:	681b      	ldr	r3, [r3, #0]
 8105800:	699b      	ldr	r3, [r3, #24]
 8105802:	f003 0310 	and.w	r3, r3, #16
 8105806:	2b10      	cmp	r3, #16
 8105808:	d151      	bne.n	81058ae <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810580a:	e022      	b.n	8105852 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 810580c:	68bb      	ldr	r3, [r7, #8]
 810580e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8105812:	d01e      	beq.n	8105852 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105814:	f7fc fbfe 	bl	8102014 <HAL_GetTick>
 8105818:	4602      	mov	r2, r0
 810581a:	687b      	ldr	r3, [r7, #4]
 810581c:	1ad3      	subs	r3, r2, r3
 810581e:	68ba      	ldr	r2, [r7, #8]
 8105820:	429a      	cmp	r2, r3
 8105822:	d302      	bcc.n	810582a <I2C_IsAcknowledgeFailed+0x3a>
 8105824:	68bb      	ldr	r3, [r7, #8]
 8105826:	2b00      	cmp	r3, #0
 8105828:	d113      	bne.n	8105852 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810582a:	68fb      	ldr	r3, [r7, #12]
 810582c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810582e:	f043 0220 	orr.w	r2, r3, #32
 8105832:	68fb      	ldr	r3, [r7, #12]
 8105834:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8105836:	68fb      	ldr	r3, [r7, #12]
 8105838:	2220      	movs	r2, #32
 810583a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 810583e:	68fb      	ldr	r3, [r7, #12]
 8105840:	2200      	movs	r2, #0
 8105842:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8105846:	68fb      	ldr	r3, [r7, #12]
 8105848:	2200      	movs	r2, #0
 810584a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 810584e:	2301      	movs	r3, #1
 8105850:	e02e      	b.n	81058b0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8105852:	68fb      	ldr	r3, [r7, #12]
 8105854:	681b      	ldr	r3, [r3, #0]
 8105856:	699b      	ldr	r3, [r3, #24]
 8105858:	f003 0320 	and.w	r3, r3, #32
 810585c:	2b20      	cmp	r3, #32
 810585e:	d1d5      	bne.n	810580c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8105860:	68fb      	ldr	r3, [r7, #12]
 8105862:	681b      	ldr	r3, [r3, #0]
 8105864:	2210      	movs	r2, #16
 8105866:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8105868:	68fb      	ldr	r3, [r7, #12]
 810586a:	681b      	ldr	r3, [r3, #0]
 810586c:	2220      	movs	r2, #32
 810586e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8105870:	68f8      	ldr	r0, [r7, #12]
 8105872:	f7ff fe71 	bl	8105558 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8105876:	68fb      	ldr	r3, [r7, #12]
 8105878:	681b      	ldr	r3, [r3, #0]
 810587a:	6859      	ldr	r1, [r3, #4]
 810587c:	68fb      	ldr	r3, [r7, #12]
 810587e:	681a      	ldr	r2, [r3, #0]
 8105880:	4b0d      	ldr	r3, [pc, #52]	; (81058b8 <I2C_IsAcknowledgeFailed+0xc8>)
 8105882:	400b      	ands	r3, r1
 8105884:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8105886:	68fb      	ldr	r3, [r7, #12]
 8105888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810588a:	f043 0204 	orr.w	r2, r3, #4
 810588e:	68fb      	ldr	r3, [r7, #12]
 8105890:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8105892:	68fb      	ldr	r3, [r7, #12]
 8105894:	2220      	movs	r2, #32
 8105896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 810589a:	68fb      	ldr	r3, [r7, #12]
 810589c:	2200      	movs	r2, #0
 810589e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81058a2:	68fb      	ldr	r3, [r7, #12]
 81058a4:	2200      	movs	r2, #0
 81058a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 81058aa:	2301      	movs	r3, #1
 81058ac:	e000      	b.n	81058b0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 81058ae:	2300      	movs	r3, #0
}
 81058b0:	4618      	mov	r0, r3
 81058b2:	3710      	adds	r7, #16
 81058b4:	46bd      	mov	sp, r7
 81058b6:	bd80      	pop	{r7, pc}
 81058b8:	fe00e800 	.word	0xfe00e800

081058bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 81058bc:	b480      	push	{r7}
 81058be:	b085      	sub	sp, #20
 81058c0:	af00      	add	r7, sp, #0
 81058c2:	60f8      	str	r0, [r7, #12]
 81058c4:	607b      	str	r3, [r7, #4]
 81058c6:	460b      	mov	r3, r1
 81058c8:	817b      	strh	r3, [r7, #10]
 81058ca:	4613      	mov	r3, r2
 81058cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 81058ce:	68fb      	ldr	r3, [r7, #12]
 81058d0:	681b      	ldr	r3, [r3, #0]
 81058d2:	685a      	ldr	r2, [r3, #4]
 81058d4:	69bb      	ldr	r3, [r7, #24]
 81058d6:	0d5b      	lsrs	r3, r3, #21
 81058d8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 81058dc:	4b0d      	ldr	r3, [pc, #52]	; (8105914 <I2C_TransferConfig+0x58>)
 81058de:	430b      	orrs	r3, r1
 81058e0:	43db      	mvns	r3, r3
 81058e2:	ea02 0103 	and.w	r1, r2, r3
 81058e6:	897b      	ldrh	r3, [r7, #10]
 81058e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 81058ec:	7a7b      	ldrb	r3, [r7, #9]
 81058ee:	041b      	lsls	r3, r3, #16
 81058f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 81058f4:	431a      	orrs	r2, r3
 81058f6:	687b      	ldr	r3, [r7, #4]
 81058f8:	431a      	orrs	r2, r3
 81058fa:	69bb      	ldr	r3, [r7, #24]
 81058fc:	431a      	orrs	r2, r3
 81058fe:	68fb      	ldr	r3, [r7, #12]
 8105900:	681b      	ldr	r3, [r3, #0]
 8105902:	430a      	orrs	r2, r1
 8105904:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8105906:	bf00      	nop
 8105908:	3714      	adds	r7, #20
 810590a:	46bd      	mov	sp, r7
 810590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105910:	4770      	bx	lr
 8105912:	bf00      	nop
 8105914:	03ff63ff 	.word	0x03ff63ff

08105918 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8105918:	b480      	push	{r7}
 810591a:	b083      	sub	sp, #12
 810591c:	af00      	add	r7, sp, #0
 810591e:	6078      	str	r0, [r7, #4]
 8105920:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8105922:	687b      	ldr	r3, [r7, #4]
 8105924:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105928:	b2db      	uxtb	r3, r3
 810592a:	2b20      	cmp	r3, #32
 810592c:	d138      	bne.n	81059a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810592e:	687b      	ldr	r3, [r7, #4]
 8105930:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8105934:	2b01      	cmp	r3, #1
 8105936:	d101      	bne.n	810593c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8105938:	2302      	movs	r3, #2
 810593a:	e032      	b.n	81059a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 810593c:	687b      	ldr	r3, [r7, #4]
 810593e:	2201      	movs	r2, #1
 8105940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8105944:	687b      	ldr	r3, [r7, #4]
 8105946:	2224      	movs	r2, #36	; 0x24
 8105948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810594c:	687b      	ldr	r3, [r7, #4]
 810594e:	681b      	ldr	r3, [r3, #0]
 8105950:	681a      	ldr	r2, [r3, #0]
 8105952:	687b      	ldr	r3, [r7, #4]
 8105954:	681b      	ldr	r3, [r3, #0]
 8105956:	f022 0201 	bic.w	r2, r2, #1
 810595a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 810595c:	687b      	ldr	r3, [r7, #4]
 810595e:	681b      	ldr	r3, [r3, #0]
 8105960:	681a      	ldr	r2, [r3, #0]
 8105962:	687b      	ldr	r3, [r7, #4]
 8105964:	681b      	ldr	r3, [r3, #0]
 8105966:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 810596a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 810596c:	687b      	ldr	r3, [r7, #4]
 810596e:	681b      	ldr	r3, [r3, #0]
 8105970:	6819      	ldr	r1, [r3, #0]
 8105972:	687b      	ldr	r3, [r7, #4]
 8105974:	681b      	ldr	r3, [r3, #0]
 8105976:	683a      	ldr	r2, [r7, #0]
 8105978:	430a      	orrs	r2, r1
 810597a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 810597c:	687b      	ldr	r3, [r7, #4]
 810597e:	681b      	ldr	r3, [r3, #0]
 8105980:	681a      	ldr	r2, [r3, #0]
 8105982:	687b      	ldr	r3, [r7, #4]
 8105984:	681b      	ldr	r3, [r3, #0]
 8105986:	f042 0201 	orr.w	r2, r2, #1
 810598a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 810598c:	687b      	ldr	r3, [r7, #4]
 810598e:	2220      	movs	r2, #32
 8105990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105994:	687b      	ldr	r3, [r7, #4]
 8105996:	2200      	movs	r2, #0
 8105998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810599c:	2300      	movs	r3, #0
 810599e:	e000      	b.n	81059a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 81059a0:	2302      	movs	r3, #2
  }
}
 81059a2:	4618      	mov	r0, r3
 81059a4:	370c      	adds	r7, #12
 81059a6:	46bd      	mov	sp, r7
 81059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81059ac:	4770      	bx	lr

081059ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 81059ae:	b480      	push	{r7}
 81059b0:	b085      	sub	sp, #20
 81059b2:	af00      	add	r7, sp, #0
 81059b4:	6078      	str	r0, [r7, #4]
 81059b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81059b8:	687b      	ldr	r3, [r7, #4]
 81059ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81059be:	b2db      	uxtb	r3, r3
 81059c0:	2b20      	cmp	r3, #32
 81059c2:	d139      	bne.n	8105a38 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81059c4:	687b      	ldr	r3, [r7, #4]
 81059c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81059ca:	2b01      	cmp	r3, #1
 81059cc:	d101      	bne.n	81059d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 81059ce:	2302      	movs	r3, #2
 81059d0:	e033      	b.n	8105a3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 81059d2:	687b      	ldr	r3, [r7, #4]
 81059d4:	2201      	movs	r2, #1
 81059d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81059da:	687b      	ldr	r3, [r7, #4]
 81059dc:	2224      	movs	r2, #36	; 0x24
 81059de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81059e2:	687b      	ldr	r3, [r7, #4]
 81059e4:	681b      	ldr	r3, [r3, #0]
 81059e6:	681a      	ldr	r2, [r3, #0]
 81059e8:	687b      	ldr	r3, [r7, #4]
 81059ea:	681b      	ldr	r3, [r3, #0]
 81059ec:	f022 0201 	bic.w	r2, r2, #1
 81059f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 81059f2:	687b      	ldr	r3, [r7, #4]
 81059f4:	681b      	ldr	r3, [r3, #0]
 81059f6:	681b      	ldr	r3, [r3, #0]
 81059f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 81059fa:	68fb      	ldr	r3, [r7, #12]
 81059fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8105a00:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8105a02:	683b      	ldr	r3, [r7, #0]
 8105a04:	021b      	lsls	r3, r3, #8
 8105a06:	68fa      	ldr	r2, [r7, #12]
 8105a08:	4313      	orrs	r3, r2
 8105a0a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8105a0c:	687b      	ldr	r3, [r7, #4]
 8105a0e:	681b      	ldr	r3, [r3, #0]
 8105a10:	68fa      	ldr	r2, [r7, #12]
 8105a12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8105a14:	687b      	ldr	r3, [r7, #4]
 8105a16:	681b      	ldr	r3, [r3, #0]
 8105a18:	681a      	ldr	r2, [r3, #0]
 8105a1a:	687b      	ldr	r3, [r7, #4]
 8105a1c:	681b      	ldr	r3, [r3, #0]
 8105a1e:	f042 0201 	orr.w	r2, r2, #1
 8105a22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8105a24:	687b      	ldr	r3, [r7, #4]
 8105a26:	2220      	movs	r2, #32
 8105a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105a2c:	687b      	ldr	r3, [r7, #4]
 8105a2e:	2200      	movs	r2, #0
 8105a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8105a34:	2300      	movs	r3, #0
 8105a36:	e000      	b.n	8105a3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8105a38:	2302      	movs	r3, #2
  }
}
 8105a3a:	4618      	mov	r0, r3
 8105a3c:	3714      	adds	r7, #20
 8105a3e:	46bd      	mov	sp, r7
 8105a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a44:	4770      	bx	lr
	...

08105a48 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8105a48:	b480      	push	{r7}
 8105a4a:	b085      	sub	sp, #20
 8105a4c:	af00      	add	r7, sp, #0
 8105a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8105a50:	4b0d      	ldr	r3, [pc, #52]	; (8105a88 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8105a52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8105a56:	4a0c      	ldr	r2, [pc, #48]	; (8105a88 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8105a58:	f043 0302 	orr.w	r3, r3, #2
 8105a5c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8105a60:	4b09      	ldr	r3, [pc, #36]	; (8105a88 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8105a62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8105a66:	f003 0302 	and.w	r3, r3, #2
 8105a6a:	60fb      	str	r3, [r7, #12]
 8105a6c:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8105a6e:	4b07      	ldr	r3, [pc, #28]	; (8105a8c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8105a70:	685a      	ldr	r2, [r3, #4]
 8105a72:	4906      	ldr	r1, [pc, #24]	; (8105a8c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8105a74:	687b      	ldr	r3, [r7, #4]
 8105a76:	4313      	orrs	r3, r2
 8105a78:	604b      	str	r3, [r1, #4]
}
 8105a7a:	bf00      	nop
 8105a7c:	3714      	adds	r7, #20
 8105a7e:	46bd      	mov	sp, r7
 8105a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a84:	4770      	bx	lr
 8105a86:	bf00      	nop
 8105a88:	58024400 	.word	0x58024400
 8105a8c:	58000400 	.word	0x58000400

08105a90 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8105a90:	b580      	push	{r7, lr}
 8105a92:	b084      	sub	sp, #16
 8105a94:	af00      	add	r7, sp, #0
 8105a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8105a98:	687b      	ldr	r3, [r7, #4]
 8105a9a:	2b00      	cmp	r3, #0
 8105a9c:	d101      	bne.n	8105aa2 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8105a9e:	2301      	movs	r3, #1
 8105aa0:	e038      	b.n	8105b14 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8105aa2:	687b      	ldr	r3, [r7, #4]
 8105aa4:	681b      	ldr	r3, [r3, #0]
 8105aa6:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8105aaa:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8105aac:	687b      	ldr	r3, [r7, #4]
 8105aae:	681b      	ldr	r3, [r3, #0]
 8105ab0:	f245 5255 	movw	r2, #21845	; 0x5555
 8105ab4:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8105ab6:	687b      	ldr	r3, [r7, #4]
 8105ab8:	681b      	ldr	r3, [r3, #0]
 8105aba:	687a      	ldr	r2, [r7, #4]
 8105abc:	6852      	ldr	r2, [r2, #4]
 8105abe:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8105ac0:	687b      	ldr	r3, [r7, #4]
 8105ac2:	681b      	ldr	r3, [r3, #0]
 8105ac4:	687a      	ldr	r2, [r7, #4]
 8105ac6:	6892      	ldr	r2, [r2, #8]
 8105ac8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8105aca:	f7fc faa3 	bl	8102014 <HAL_GetTick>
 8105ace:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8105ad0:	e008      	b.n	8105ae4 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8105ad2:	f7fc fa9f 	bl	8102014 <HAL_GetTick>
 8105ad6:	4602      	mov	r2, r0
 8105ad8:	68fb      	ldr	r3, [r7, #12]
 8105ada:	1ad3      	subs	r3, r2, r3
 8105adc:	2b30      	cmp	r3, #48	; 0x30
 8105ade:	d901      	bls.n	8105ae4 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8105ae0:	2303      	movs	r3, #3
 8105ae2:	e017      	b.n	8105b14 <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 8105ae4:	687b      	ldr	r3, [r7, #4]
 8105ae6:	681b      	ldr	r3, [r3, #0]
 8105ae8:	68db      	ldr	r3, [r3, #12]
 8105aea:	2b00      	cmp	r3, #0
 8105aec:	d1f1      	bne.n	8105ad2 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8105aee:	687b      	ldr	r3, [r7, #4]
 8105af0:	681b      	ldr	r3, [r3, #0]
 8105af2:	691a      	ldr	r2, [r3, #16]
 8105af4:	687b      	ldr	r3, [r7, #4]
 8105af6:	68db      	ldr	r3, [r3, #12]
 8105af8:	429a      	cmp	r2, r3
 8105afa:	d005      	beq.n	8105b08 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8105afc:	687b      	ldr	r3, [r7, #4]
 8105afe:	681b      	ldr	r3, [r3, #0]
 8105b00:	687a      	ldr	r2, [r7, #4]
 8105b02:	68d2      	ldr	r2, [r2, #12]
 8105b04:	611a      	str	r2, [r3, #16]
 8105b06:	e004      	b.n	8105b12 <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8105b08:	687b      	ldr	r3, [r7, #4]
 8105b0a:	681b      	ldr	r3, [r3, #0]
 8105b0c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8105b10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8105b12:	2300      	movs	r3, #0
}
 8105b14:	4618      	mov	r0, r3
 8105b16:	3710      	adds	r7, #16
 8105b18:	46bd      	mov	sp, r7
 8105b1a:	bd80      	pop	{r7, pc}

08105b1c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8105b1c:	b480      	push	{r7}
 8105b1e:	b083      	sub	sp, #12
 8105b20:	af00      	add	r7, sp, #0
 8105b22:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8105b24:	687b      	ldr	r3, [r7, #4]
 8105b26:	681b      	ldr	r3, [r3, #0]
 8105b28:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8105b2c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8105b2e:	2300      	movs	r3, #0
}
 8105b30:	4618      	mov	r0, r3
 8105b32:	370c      	adds	r7, #12
 8105b34:	46bd      	mov	sp, r7
 8105b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105b3a:	4770      	bx	lr

08105b3c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8105b3c:	b580      	push	{r7, lr}
 8105b3e:	b084      	sub	sp, #16
 8105b40:	af00      	add	r7, sp, #0
 8105b42:	60f8      	str	r0, [r7, #12]
 8105b44:	460b      	mov	r3, r1
 8105b46:	607a      	str	r2, [r7, #4]
 8105b48:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8105b4a:	4b35      	ldr	r3, [pc, #212]	; (8105c20 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8105b4c:	681b      	ldr	r3, [r3, #0]
 8105b4e:	f023 0201 	bic.w	r2, r3, #1
 8105b52:	4933      	ldr	r1, [pc, #204]	; (8105c20 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8105b54:	68fb      	ldr	r3, [r7, #12]
 8105b56:	4313      	orrs	r3, r2
 8105b58:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8105b5a:	687b      	ldr	r3, [r7, #4]
 8105b5c:	2b00      	cmp	r3, #0
 8105b5e:	d121      	bne.n	8105ba4 <HAL_PWREx_EnterSTOPMode+0x68>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8105b60:	f7fc fb44 	bl	81021ec <HAL_GetCurrentCPUID>
 8105b64:	4603      	mov	r3, r0
 8105b66:	2b03      	cmp	r3, #3
 8105b68:	d154      	bne.n	8105c14 <HAL_PWREx_EnterSTOPMode+0xd8>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8105b6a:	4b2d      	ldr	r3, [pc, #180]	; (8105c20 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8105b6c:	691b      	ldr	r3, [r3, #16]
 8105b6e:	4a2c      	ldr	r2, [pc, #176]	; (8105c20 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8105b70:	f023 0301 	bic.w	r3, r3, #1
 8105b74:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105b76:	4b2b      	ldr	r3, [pc, #172]	; (8105c24 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8105b78:	691b      	ldr	r3, [r3, #16]
 8105b7a:	4a2a      	ldr	r2, [pc, #168]	; (8105c24 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8105b7c:	f043 0304 	orr.w	r3, r3, #4
 8105b80:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8105b82:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8105b86:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8105b8a:	7afb      	ldrb	r3, [r7, #11]
 8105b8c:	2b01      	cmp	r3, #1
 8105b8e:	d101      	bne.n	8105b94 <HAL_PWREx_EnterSTOPMode+0x58>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8105b90:	bf30      	wfi
 8105b92:	e000      	b.n	8105b96 <HAL_PWREx_EnterSTOPMode+0x5a>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8105b94:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105b96:	4b23      	ldr	r3, [pc, #140]	; (8105c24 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8105b98:	691b      	ldr	r3, [r3, #16]
 8105b9a:	4a22      	ldr	r2, [pc, #136]	; (8105c24 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8105b9c:	f023 0304 	bic.w	r3, r3, #4
 8105ba0:	6113      	str	r3, [r2, #16]
 8105ba2:	e03a      	b.n	8105c1a <HAL_PWREx_EnterSTOPMode+0xde>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8105ba4:	687b      	ldr	r3, [r7, #4]
 8105ba6:	2b01      	cmp	r3, #1
 8105ba8:	d121      	bne.n	8105bee <HAL_PWREx_EnterSTOPMode+0xb2>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8105baa:	f7fc fb1f 	bl	81021ec <HAL_GetCurrentCPUID>
 8105bae:	4603      	mov	r3, r0
 8105bb0:	2b01      	cmp	r3, #1
 8105bb2:	d131      	bne.n	8105c18 <HAL_PWREx_EnterSTOPMode+0xdc>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8105bb4:	4b1a      	ldr	r3, [pc, #104]	; (8105c20 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8105bb6:	695b      	ldr	r3, [r3, #20]
 8105bb8:	4a19      	ldr	r2, [pc, #100]	; (8105c20 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8105bba:	f023 0302 	bic.w	r3, r3, #2
 8105bbe:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105bc0:	4b18      	ldr	r3, [pc, #96]	; (8105c24 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8105bc2:	691b      	ldr	r3, [r3, #16]
 8105bc4:	4a17      	ldr	r2, [pc, #92]	; (8105c24 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8105bc6:	f043 0304 	orr.w	r3, r3, #4
 8105bca:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8105bcc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8105bd0:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8105bd4:	7afb      	ldrb	r3, [r7, #11]
 8105bd6:	2b01      	cmp	r3, #1
 8105bd8:	d101      	bne.n	8105bde <HAL_PWREx_EnterSTOPMode+0xa2>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8105bda:	bf30      	wfi
 8105bdc:	e000      	b.n	8105be0 <HAL_PWREx_EnterSTOPMode+0xa4>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8105bde:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105be0:	4b10      	ldr	r3, [pc, #64]	; (8105c24 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8105be2:	691b      	ldr	r3, [r3, #16]
 8105be4:	4a0f      	ldr	r2, [pc, #60]	; (8105c24 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8105be6:	f023 0304 	bic.w	r3, r3, #4
 8105bea:	6113      	str	r3, [r2, #16]
 8105bec:	e015      	b.n	8105c1a <HAL_PWREx_EnterSTOPMode+0xde>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8105bee:	f7fc fafd 	bl	81021ec <HAL_GetCurrentCPUID>
 8105bf2:	4603      	mov	r3, r0
 8105bf4:	2b03      	cmp	r3, #3
 8105bf6:	d106      	bne.n	8105c06 <HAL_PWREx_EnterSTOPMode+0xca>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8105bf8:	4b09      	ldr	r3, [pc, #36]	; (8105c20 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8105bfa:	691b      	ldr	r3, [r3, #16]
 8105bfc:	4a08      	ldr	r2, [pc, #32]	; (8105c20 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8105bfe:	f023 0304 	bic.w	r3, r3, #4
 8105c02:	6113      	str	r3, [r2, #16]
 8105c04:	e009      	b.n	8105c1a <HAL_PWREx_EnterSTOPMode+0xde>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8105c06:	4b06      	ldr	r3, [pc, #24]	; (8105c20 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8105c08:	695b      	ldr	r3, [r3, #20]
 8105c0a:	4a05      	ldr	r2, [pc, #20]	; (8105c20 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8105c0c:	f023 0304 	bic.w	r3, r3, #4
 8105c10:	6153      	str	r3, [r2, #20]
 8105c12:	e002      	b.n	8105c1a <HAL_PWREx_EnterSTOPMode+0xde>
      return;
 8105c14:	bf00      	nop
 8105c16:	e000      	b.n	8105c1a <HAL_PWREx_EnterSTOPMode+0xde>
      return;
 8105c18:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8105c1a:	3710      	adds	r7, #16
 8105c1c:	46bd      	mov	sp, r7
 8105c1e:	bd80      	pop	{r7, pc}
 8105c20:	58024800 	.word	0x58024800
 8105c24:	e000ed00 	.word	0xe000ed00

08105c28 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8105c28:	b580      	push	{r7, lr}
 8105c2a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8105c2c:	f7fc fade 	bl	81021ec <HAL_GetCurrentCPUID>
 8105c30:	4603      	mov	r3, r0
 8105c32:	2b03      	cmp	r3, #3
 8105c34:	d101      	bne.n	8105c3a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8105c36:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8105c38:	e001      	b.n	8105c3e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8105c3a:	bf40      	sev
    __WFE ();
 8105c3c:	bf20      	wfe
}
 8105c3e:	bf00      	nop
 8105c40:	bd80      	pop	{r7, pc}
	...

08105c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8105c44:	b480      	push	{r7}
 8105c46:	b089      	sub	sp, #36	; 0x24
 8105c48:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8105c4a:	4baf      	ldr	r3, [pc, #700]	; (8105f08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8105c4c:	691b      	ldr	r3, [r3, #16]
 8105c4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8105c52:	2b18      	cmp	r3, #24
 8105c54:	f200 814e 	bhi.w	8105ef4 <HAL_RCC_GetSysClockFreq+0x2b0>
 8105c58:	a201      	add	r2, pc, #4	; (adr r2, 8105c60 <HAL_RCC_GetSysClockFreq+0x1c>)
 8105c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105c5e:	bf00      	nop
 8105c60:	08105cc5 	.word	0x08105cc5
 8105c64:	08105ef5 	.word	0x08105ef5
 8105c68:	08105ef5 	.word	0x08105ef5
 8105c6c:	08105ef5 	.word	0x08105ef5
 8105c70:	08105ef5 	.word	0x08105ef5
 8105c74:	08105ef5 	.word	0x08105ef5
 8105c78:	08105ef5 	.word	0x08105ef5
 8105c7c:	08105ef5 	.word	0x08105ef5
 8105c80:	08105ceb 	.word	0x08105ceb
 8105c84:	08105ef5 	.word	0x08105ef5
 8105c88:	08105ef5 	.word	0x08105ef5
 8105c8c:	08105ef5 	.word	0x08105ef5
 8105c90:	08105ef5 	.word	0x08105ef5
 8105c94:	08105ef5 	.word	0x08105ef5
 8105c98:	08105ef5 	.word	0x08105ef5
 8105c9c:	08105ef5 	.word	0x08105ef5
 8105ca0:	08105cf1 	.word	0x08105cf1
 8105ca4:	08105ef5 	.word	0x08105ef5
 8105ca8:	08105ef5 	.word	0x08105ef5
 8105cac:	08105ef5 	.word	0x08105ef5
 8105cb0:	08105ef5 	.word	0x08105ef5
 8105cb4:	08105ef5 	.word	0x08105ef5
 8105cb8:	08105ef5 	.word	0x08105ef5
 8105cbc:	08105ef5 	.word	0x08105ef5
 8105cc0:	08105cf7 	.word	0x08105cf7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105cc4:	4b90      	ldr	r3, [pc, #576]	; (8105f08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8105cc6:	681b      	ldr	r3, [r3, #0]
 8105cc8:	f003 0320 	and.w	r3, r3, #32
 8105ccc:	2b00      	cmp	r3, #0
 8105cce:	d009      	beq.n	8105ce4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105cd0:	4b8d      	ldr	r3, [pc, #564]	; (8105f08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8105cd2:	681b      	ldr	r3, [r3, #0]
 8105cd4:	08db      	lsrs	r3, r3, #3
 8105cd6:	f003 0303 	and.w	r3, r3, #3
 8105cda:	4a8c      	ldr	r2, [pc, #560]	; (8105f0c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8105cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8105ce0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8105ce2:	e10a      	b.n	8105efa <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8105ce4:	4b89      	ldr	r3, [pc, #548]	; (8105f0c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8105ce6:	61bb      	str	r3, [r7, #24]
    break;
 8105ce8:	e107      	b.n	8105efa <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8105cea:	4b89      	ldr	r3, [pc, #548]	; (8105f10 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8105cec:	61bb      	str	r3, [r7, #24]
    break;
 8105cee:	e104      	b.n	8105efa <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8105cf0:	4b88      	ldr	r3, [pc, #544]	; (8105f14 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8105cf2:	61bb      	str	r3, [r7, #24]
    break;
 8105cf4:	e101      	b.n	8105efa <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105cf6:	4b84      	ldr	r3, [pc, #528]	; (8105f08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8105cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105cfa:	f003 0303 	and.w	r3, r3, #3
 8105cfe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8105d00:	4b81      	ldr	r3, [pc, #516]	; (8105f08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8105d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105d04:	091b      	lsrs	r3, r3, #4
 8105d06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8105d0a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8105d0c:	4b7e      	ldr	r3, [pc, #504]	; (8105f08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8105d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105d10:	f003 0301 	and.w	r3, r3, #1
 8105d14:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8105d16:	4b7c      	ldr	r3, [pc, #496]	; (8105f08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8105d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8105d1a:	08db      	lsrs	r3, r3, #3
 8105d1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105d20:	68fa      	ldr	r2, [r7, #12]
 8105d22:	fb02 f303 	mul.w	r3, r2, r3
 8105d26:	ee07 3a90 	vmov	s15, r3
 8105d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105d2e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8105d32:	693b      	ldr	r3, [r7, #16]
 8105d34:	2b00      	cmp	r3, #0
 8105d36:	f000 80da 	beq.w	8105eee <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8105d3a:	697b      	ldr	r3, [r7, #20]
 8105d3c:	2b01      	cmp	r3, #1
 8105d3e:	d05a      	beq.n	8105df6 <HAL_RCC_GetSysClockFreq+0x1b2>
 8105d40:	2b01      	cmp	r3, #1
 8105d42:	d302      	bcc.n	8105d4a <HAL_RCC_GetSysClockFreq+0x106>
 8105d44:	2b02      	cmp	r3, #2
 8105d46:	d078      	beq.n	8105e3a <HAL_RCC_GetSysClockFreq+0x1f6>
 8105d48:	e099      	b.n	8105e7e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105d4a:	4b6f      	ldr	r3, [pc, #444]	; (8105f08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8105d4c:	681b      	ldr	r3, [r3, #0]
 8105d4e:	f003 0320 	and.w	r3, r3, #32
 8105d52:	2b00      	cmp	r3, #0
 8105d54:	d02d      	beq.n	8105db2 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105d56:	4b6c      	ldr	r3, [pc, #432]	; (8105f08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8105d58:	681b      	ldr	r3, [r3, #0]
 8105d5a:	08db      	lsrs	r3, r3, #3
 8105d5c:	f003 0303 	and.w	r3, r3, #3
 8105d60:	4a6a      	ldr	r2, [pc, #424]	; (8105f0c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8105d62:	fa22 f303 	lsr.w	r3, r2, r3
 8105d66:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105d68:	687b      	ldr	r3, [r7, #4]
 8105d6a:	ee07 3a90 	vmov	s15, r3
 8105d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105d72:	693b      	ldr	r3, [r7, #16]
 8105d74:	ee07 3a90 	vmov	s15, r3
 8105d78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105d7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105d80:	4b61      	ldr	r3, [pc, #388]	; (8105f08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8105d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105d88:	ee07 3a90 	vmov	s15, r3
 8105d8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105d90:	ed97 6a02 	vldr	s12, [r7, #8]
 8105d94:	eddf 5a60 	vldr	s11, [pc, #384]	; 8105f18 <HAL_RCC_GetSysClockFreq+0x2d4>
 8105d98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105d9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105da0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105da4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105da8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105dac:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8105db0:	e087      	b.n	8105ec2 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105db2:	693b      	ldr	r3, [r7, #16]
 8105db4:	ee07 3a90 	vmov	s15, r3
 8105db8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105dbc:	eddf 6a57 	vldr	s13, [pc, #348]	; 8105f1c <HAL_RCC_GetSysClockFreq+0x2d8>
 8105dc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105dc4:	4b50      	ldr	r3, [pc, #320]	; (8105f08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8105dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105dc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105dcc:	ee07 3a90 	vmov	s15, r3
 8105dd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105dd4:	ed97 6a02 	vldr	s12, [r7, #8]
 8105dd8:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8105f18 <HAL_RCC_GetSysClockFreq+0x2d4>
 8105ddc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105de0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105de4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105de8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105dec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105df0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105df4:	e065      	b.n	8105ec2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105df6:	693b      	ldr	r3, [r7, #16]
 8105df8:	ee07 3a90 	vmov	s15, r3
 8105dfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105e00:	eddf 6a47 	vldr	s13, [pc, #284]	; 8105f20 <HAL_RCC_GetSysClockFreq+0x2dc>
 8105e04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105e08:	4b3f      	ldr	r3, [pc, #252]	; (8105f08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8105e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105e0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105e10:	ee07 3a90 	vmov	s15, r3
 8105e14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105e18:	ed97 6a02 	vldr	s12, [r7, #8]
 8105e1c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8105f18 <HAL_RCC_GetSysClockFreq+0x2d4>
 8105e20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105e24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105e28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105e2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105e30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105e34:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105e38:	e043      	b.n	8105ec2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105e3a:	693b      	ldr	r3, [r7, #16]
 8105e3c:	ee07 3a90 	vmov	s15, r3
 8105e40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105e44:	eddf 6a37 	vldr	s13, [pc, #220]	; 8105f24 <HAL_RCC_GetSysClockFreq+0x2e0>
 8105e48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105e4c:	4b2e      	ldr	r3, [pc, #184]	; (8105f08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8105e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105e50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105e54:	ee07 3a90 	vmov	s15, r3
 8105e58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105e5c:	ed97 6a02 	vldr	s12, [r7, #8]
 8105e60:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8105f18 <HAL_RCC_GetSysClockFreq+0x2d4>
 8105e64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105e68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105e6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105e70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105e74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105e78:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105e7c:	e021      	b.n	8105ec2 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105e7e:	693b      	ldr	r3, [r7, #16]
 8105e80:	ee07 3a90 	vmov	s15, r3
 8105e84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105e88:	eddf 6a25 	vldr	s13, [pc, #148]	; 8105f20 <HAL_RCC_GetSysClockFreq+0x2dc>
 8105e8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105e90:	4b1d      	ldr	r3, [pc, #116]	; (8105f08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8105e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105e98:	ee07 3a90 	vmov	s15, r3
 8105e9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105ea0:	ed97 6a02 	vldr	s12, [r7, #8]
 8105ea4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8105f18 <HAL_RCC_GetSysClockFreq+0x2d4>
 8105ea8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105eac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105eb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105eb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105eb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105ebc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105ec0:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8105ec2:	4b11      	ldr	r3, [pc, #68]	; (8105f08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8105ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105ec6:	0a5b      	lsrs	r3, r3, #9
 8105ec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105ecc:	3301      	adds	r3, #1
 8105ece:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8105ed0:	683b      	ldr	r3, [r7, #0]
 8105ed2:	ee07 3a90 	vmov	s15, r3
 8105ed6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8105eda:	edd7 6a07 	vldr	s13, [r7, #28]
 8105ede:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105ee2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105ee6:	ee17 3a90 	vmov	r3, s15
 8105eea:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8105eec:	e005      	b.n	8105efa <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8105eee:	2300      	movs	r3, #0
 8105ef0:	61bb      	str	r3, [r7, #24]
    break;
 8105ef2:	e002      	b.n	8105efa <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8105ef4:	4b06      	ldr	r3, [pc, #24]	; (8105f10 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8105ef6:	61bb      	str	r3, [r7, #24]
    break;
 8105ef8:	bf00      	nop
  }

  return sysclockfreq;
 8105efa:	69bb      	ldr	r3, [r7, #24]
}
 8105efc:	4618      	mov	r0, r3
 8105efe:	3724      	adds	r7, #36	; 0x24
 8105f00:	46bd      	mov	sp, r7
 8105f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f06:	4770      	bx	lr
 8105f08:	58024400 	.word	0x58024400
 8105f0c:	03d09000 	.word	0x03d09000
 8105f10:	003d0900 	.word	0x003d0900
 8105f14:	017d7840 	.word	0x017d7840
 8105f18:	46000000 	.word	0x46000000
 8105f1c:	4c742400 	.word	0x4c742400
 8105f20:	4a742400 	.word	0x4a742400
 8105f24:	4bbebc20 	.word	0x4bbebc20

08105f28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8105f28:	b580      	push	{r7, lr}
 8105f2a:	b082      	sub	sp, #8
 8105f2c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8105f2e:	f7ff fe89 	bl	8105c44 <HAL_RCC_GetSysClockFreq>
 8105f32:	4601      	mov	r1, r0
 8105f34:	4b11      	ldr	r3, [pc, #68]	; (8105f7c <HAL_RCC_GetHCLKFreq+0x54>)
 8105f36:	699b      	ldr	r3, [r3, #24]
 8105f38:	0a1b      	lsrs	r3, r3, #8
 8105f3a:	f003 030f 	and.w	r3, r3, #15
 8105f3e:	4a10      	ldr	r2, [pc, #64]	; (8105f80 <HAL_RCC_GetHCLKFreq+0x58>)
 8105f40:	5cd3      	ldrb	r3, [r2, r3]
 8105f42:	f003 031f 	and.w	r3, r3, #31
 8105f46:	fa21 f303 	lsr.w	r3, r1, r3
 8105f4a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8105f4c:	4b0b      	ldr	r3, [pc, #44]	; (8105f7c <HAL_RCC_GetHCLKFreq+0x54>)
 8105f4e:	699b      	ldr	r3, [r3, #24]
 8105f50:	f003 030f 	and.w	r3, r3, #15
 8105f54:	4a0a      	ldr	r2, [pc, #40]	; (8105f80 <HAL_RCC_GetHCLKFreq+0x58>)
 8105f56:	5cd3      	ldrb	r3, [r2, r3]
 8105f58:	f003 031f 	and.w	r3, r3, #31
 8105f5c:	687a      	ldr	r2, [r7, #4]
 8105f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8105f62:	4a08      	ldr	r2, [pc, #32]	; (8105f84 <HAL_RCC_GetHCLKFreq+0x5c>)
 8105f64:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8105f66:	4b07      	ldr	r3, [pc, #28]	; (8105f84 <HAL_RCC_GetHCLKFreq+0x5c>)
 8105f68:	681b      	ldr	r3, [r3, #0]
 8105f6a:	4a07      	ldr	r2, [pc, #28]	; (8105f88 <HAL_RCC_GetHCLKFreq+0x60>)
 8105f6c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8105f6e:	4b05      	ldr	r3, [pc, #20]	; (8105f84 <HAL_RCC_GetHCLKFreq+0x5c>)
 8105f70:	681b      	ldr	r3, [r3, #0]
}
 8105f72:	4618      	mov	r0, r3
 8105f74:	3708      	adds	r7, #8
 8105f76:	46bd      	mov	sp, r7
 8105f78:	bd80      	pop	{r7, pc}
 8105f7a:	bf00      	nop
 8105f7c:	58024400 	.word	0x58024400
 8105f80:	0810f16c 	.word	0x0810f16c
 8105f84:	10000004 	.word	0x10000004
 8105f88:	10000000 	.word	0x10000000

08105f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8105f8c:	b580      	push	{r7, lr}
 8105f8e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8105f90:	f7ff ffca 	bl	8105f28 <HAL_RCC_GetHCLKFreq>
 8105f94:	4601      	mov	r1, r0
 8105f96:	4b06      	ldr	r3, [pc, #24]	; (8105fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8105f98:	69db      	ldr	r3, [r3, #28]
 8105f9a:	091b      	lsrs	r3, r3, #4
 8105f9c:	f003 0307 	and.w	r3, r3, #7
 8105fa0:	4a04      	ldr	r2, [pc, #16]	; (8105fb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8105fa2:	5cd3      	ldrb	r3, [r2, r3]
 8105fa4:	f003 031f 	and.w	r3, r3, #31
 8105fa8:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8105fac:	4618      	mov	r0, r3
 8105fae:	bd80      	pop	{r7, pc}
 8105fb0:	58024400 	.word	0x58024400
 8105fb4:	0810f16c 	.word	0x0810f16c

08105fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8105fb8:	b580      	push	{r7, lr}
 8105fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8105fbc:	f7ff ffb4 	bl	8105f28 <HAL_RCC_GetHCLKFreq>
 8105fc0:	4601      	mov	r1, r0
 8105fc2:	4b06      	ldr	r3, [pc, #24]	; (8105fdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8105fc4:	69db      	ldr	r3, [r3, #28]
 8105fc6:	0a1b      	lsrs	r3, r3, #8
 8105fc8:	f003 0307 	and.w	r3, r3, #7
 8105fcc:	4a04      	ldr	r2, [pc, #16]	; (8105fe0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8105fce:	5cd3      	ldrb	r3, [r2, r3]
 8105fd0:	f003 031f 	and.w	r3, r3, #31
 8105fd4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8105fd8:	4618      	mov	r0, r3
 8105fda:	bd80      	pop	{r7, pc}
 8105fdc:	58024400 	.word	0x58024400
 8105fe0:	0810f16c 	.word	0x0810f16c

08105fe4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8105fe4:	b480      	push	{r7}
 8105fe6:	b083      	sub	sp, #12
 8105fe8:	af00      	add	r7, sp, #0
 8105fea:	6078      	str	r0, [r7, #4]
 8105fec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8105fee:	687b      	ldr	r3, [r7, #4]
 8105ff0:	223f      	movs	r2, #63	; 0x3f
 8105ff2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8105ff4:	4b1a      	ldr	r3, [pc, #104]	; (8106060 <HAL_RCC_GetClockConfig+0x7c>)
 8105ff6:	691b      	ldr	r3, [r3, #16]
 8105ff8:	f003 0207 	and.w	r2, r3, #7
 8105ffc:	687b      	ldr	r3, [r7, #4]
 8105ffe:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8106000:	4b17      	ldr	r3, [pc, #92]	; (8106060 <HAL_RCC_GetClockConfig+0x7c>)
 8106002:	699b      	ldr	r3, [r3, #24]
 8106004:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8106008:	687b      	ldr	r3, [r7, #4]
 810600a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 810600c:	4b14      	ldr	r3, [pc, #80]	; (8106060 <HAL_RCC_GetClockConfig+0x7c>)
 810600e:	699b      	ldr	r3, [r3, #24]
 8106010:	f003 020f 	and.w	r2, r3, #15
 8106014:	687b      	ldr	r3, [r7, #4]
 8106016:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8106018:	4b11      	ldr	r3, [pc, #68]	; (8106060 <HAL_RCC_GetClockConfig+0x7c>)
 810601a:	699b      	ldr	r3, [r3, #24]
 810601c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8106020:	687b      	ldr	r3, [r7, #4]
 8106022:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8106024:	4b0e      	ldr	r3, [pc, #56]	; (8106060 <HAL_RCC_GetClockConfig+0x7c>)
 8106026:	69db      	ldr	r3, [r3, #28]
 8106028:	f003 0270 	and.w	r2, r3, #112	; 0x70
 810602c:	687b      	ldr	r3, [r7, #4]
 810602e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8106030:	4b0b      	ldr	r3, [pc, #44]	; (8106060 <HAL_RCC_GetClockConfig+0x7c>)
 8106032:	69db      	ldr	r3, [r3, #28]
 8106034:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8106038:	687b      	ldr	r3, [r7, #4]
 810603a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 810603c:	4b08      	ldr	r3, [pc, #32]	; (8106060 <HAL_RCC_GetClockConfig+0x7c>)
 810603e:	6a1b      	ldr	r3, [r3, #32]
 8106040:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8106044:	687b      	ldr	r3, [r7, #4]
 8106046:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8106048:	4b06      	ldr	r3, [pc, #24]	; (8106064 <HAL_RCC_GetClockConfig+0x80>)
 810604a:	681b      	ldr	r3, [r3, #0]
 810604c:	f003 020f 	and.w	r2, r3, #15
 8106050:	683b      	ldr	r3, [r7, #0]
 8106052:	601a      	str	r2, [r3, #0]
}
 8106054:	bf00      	nop
 8106056:	370c      	adds	r7, #12
 8106058:	46bd      	mov	sp, r7
 810605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810605e:	4770      	bx	lr
 8106060:	58024400 	.word	0x58024400
 8106064:	52002000 	.word	0x52002000

08106068 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8106068:	b580      	push	{r7, lr}
 810606a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 810606c:	f7ff ff5c 	bl	8105f28 <HAL_RCC_GetHCLKFreq>
 8106070:	4601      	mov	r1, r0
 8106072:	4b06      	ldr	r3, [pc, #24]	; (810608c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8106074:	6a1b      	ldr	r3, [r3, #32]
 8106076:	091b      	lsrs	r3, r3, #4
 8106078:	f003 0307 	and.w	r3, r3, #7
 810607c:	4a04      	ldr	r2, [pc, #16]	; (8106090 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810607e:	5cd3      	ldrb	r3, [r2, r3]
 8106080:	f003 031f 	and.w	r3, r3, #31
 8106084:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8106088:	4618      	mov	r0, r3
 810608a:	bd80      	pop	{r7, pc}
 810608c:	58024400 	.word	0x58024400
 8106090:	0810f16c 	.word	0x0810f16c

08106094 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8106094:	b480      	push	{r7}
 8106096:	b089      	sub	sp, #36	; 0x24
 8106098:	af00      	add	r7, sp, #0
 810609a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810609c:	4b9d      	ldr	r3, [pc, #628]	; (8106314 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810609e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81060a0:	f003 0303 	and.w	r3, r3, #3
 81060a4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 81060a6:	4b9b      	ldr	r3, [pc, #620]	; (8106314 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81060a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81060aa:	0b1b      	lsrs	r3, r3, #12
 81060ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81060b0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81060b2:	4b98      	ldr	r3, [pc, #608]	; (8106314 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81060b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81060b6:	091b      	lsrs	r3, r3, #4
 81060b8:	f003 0301 	and.w	r3, r3, #1
 81060bc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 81060be:	4b95      	ldr	r3, [pc, #596]	; (8106314 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81060c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81060c2:	08db      	lsrs	r3, r3, #3
 81060c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81060c8:	693a      	ldr	r2, [r7, #16]
 81060ca:	fb02 f303 	mul.w	r3, r2, r3
 81060ce:	ee07 3a90 	vmov	s15, r3
 81060d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81060d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 81060da:	697b      	ldr	r3, [r7, #20]
 81060dc:	2b00      	cmp	r3, #0
 81060de:	f000 810a 	beq.w	81062f6 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 81060e2:	69bb      	ldr	r3, [r7, #24]
 81060e4:	2b01      	cmp	r3, #1
 81060e6:	d05a      	beq.n	810619e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 81060e8:	2b01      	cmp	r3, #1
 81060ea:	d302      	bcc.n	81060f2 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 81060ec:	2b02      	cmp	r3, #2
 81060ee:	d078      	beq.n	81061e2 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 81060f0:	e099      	b.n	8106226 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81060f2:	4b88      	ldr	r3, [pc, #544]	; (8106314 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81060f4:	681b      	ldr	r3, [r3, #0]
 81060f6:	f003 0320 	and.w	r3, r3, #32
 81060fa:	2b00      	cmp	r3, #0
 81060fc:	d02d      	beq.n	810615a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81060fe:	4b85      	ldr	r3, [pc, #532]	; (8106314 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106100:	681b      	ldr	r3, [r3, #0]
 8106102:	08db      	lsrs	r3, r3, #3
 8106104:	f003 0303 	and.w	r3, r3, #3
 8106108:	4a83      	ldr	r2, [pc, #524]	; (8106318 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 810610a:	fa22 f303 	lsr.w	r3, r2, r3
 810610e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8106110:	68bb      	ldr	r3, [r7, #8]
 8106112:	ee07 3a90 	vmov	s15, r3
 8106116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810611a:	697b      	ldr	r3, [r7, #20]
 810611c:	ee07 3a90 	vmov	s15, r3
 8106120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106124:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106128:	4b7a      	ldr	r3, [pc, #488]	; (8106314 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810612a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810612c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106130:	ee07 3a90 	vmov	s15, r3
 8106134:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106138:	ed97 6a03 	vldr	s12, [r7, #12]
 810613c:	eddf 5a77 	vldr	s11, [pc, #476]	; 810631c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8106140:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106144:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106148:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810614c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106150:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106154:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8106158:	e087      	b.n	810626a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810615a:	697b      	ldr	r3, [r7, #20]
 810615c:	ee07 3a90 	vmov	s15, r3
 8106160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106164:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8106320 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8106168:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810616c:	4b69      	ldr	r3, [pc, #420]	; (8106314 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810616e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106174:	ee07 3a90 	vmov	s15, r3
 8106178:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810617c:	ed97 6a03 	vldr	s12, [r7, #12]
 8106180:	eddf 5a66 	vldr	s11, [pc, #408]	; 810631c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8106184:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106188:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810618c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106190:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106194:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106198:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810619c:	e065      	b.n	810626a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810619e:	697b      	ldr	r3, [r7, #20]
 81061a0:	ee07 3a90 	vmov	s15, r3
 81061a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81061a8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8106324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 81061ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81061b0:	4b58      	ldr	r3, [pc, #352]	; (8106314 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81061b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81061b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81061b8:	ee07 3a90 	vmov	s15, r3
 81061bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81061c0:	ed97 6a03 	vldr	s12, [r7, #12]
 81061c4:	eddf 5a55 	vldr	s11, [pc, #340]	; 810631c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 81061c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81061cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81061d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81061d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81061d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81061dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81061e0:	e043      	b.n	810626a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81061e2:	697b      	ldr	r3, [r7, #20]
 81061e4:	ee07 3a90 	vmov	s15, r3
 81061e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81061ec:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8106328 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 81061f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81061f4:	4b47      	ldr	r3, [pc, #284]	; (8106314 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81061f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81061f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81061fc:	ee07 3a90 	vmov	s15, r3
 8106200:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106204:	ed97 6a03 	vldr	s12, [r7, #12]
 8106208:	eddf 5a44 	vldr	s11, [pc, #272]	; 810631c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 810620c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106210:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106214:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106218:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810621c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106220:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106224:	e021      	b.n	810626a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8106226:	697b      	ldr	r3, [r7, #20]
 8106228:	ee07 3a90 	vmov	s15, r3
 810622c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106230:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8106324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8106234:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106238:	4b36      	ldr	r3, [pc, #216]	; (8106314 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810623a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810623c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106240:	ee07 3a90 	vmov	s15, r3
 8106244:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106248:	ed97 6a03 	vldr	s12, [r7, #12]
 810624c:	eddf 5a33 	vldr	s11, [pc, #204]	; 810631c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8106250:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106254:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106258:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810625c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106264:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106268:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 810626a:	4b2a      	ldr	r3, [pc, #168]	; (8106314 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810626c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810626e:	0a5b      	lsrs	r3, r3, #9
 8106270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106274:	ee07 3a90 	vmov	s15, r3
 8106278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810627c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106280:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106284:	edd7 6a07 	vldr	s13, [r7, #28]
 8106288:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810628c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106290:	ee17 2a90 	vmov	r2, s15
 8106294:	687b      	ldr	r3, [r7, #4]
 8106296:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8106298:	4b1e      	ldr	r3, [pc, #120]	; (8106314 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810629a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810629c:	0c1b      	lsrs	r3, r3, #16
 810629e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81062a2:	ee07 3a90 	vmov	s15, r3
 81062a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81062aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81062ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 81062b2:	edd7 6a07 	vldr	s13, [r7, #28]
 81062b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81062ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81062be:	ee17 2a90 	vmov	r2, s15
 81062c2:	687b      	ldr	r3, [r7, #4]
 81062c4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 81062c6:	4b13      	ldr	r3, [pc, #76]	; (8106314 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81062c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81062ca:	0e1b      	lsrs	r3, r3, #24
 81062cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81062d0:	ee07 3a90 	vmov	s15, r3
 81062d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81062d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81062dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 81062e0:	edd7 6a07 	vldr	s13, [r7, #28]
 81062e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81062e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81062ec:	ee17 2a90 	vmov	r2, s15
 81062f0:	687b      	ldr	r3, [r7, #4]
 81062f2:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 81062f4:	e008      	b.n	8106308 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 81062f6:	687b      	ldr	r3, [r7, #4]
 81062f8:	2200      	movs	r2, #0
 81062fa:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 81062fc:	687b      	ldr	r3, [r7, #4]
 81062fe:	2200      	movs	r2, #0
 8106300:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8106302:	687b      	ldr	r3, [r7, #4]
 8106304:	2200      	movs	r2, #0
 8106306:	609a      	str	r2, [r3, #8]
}
 8106308:	bf00      	nop
 810630a:	3724      	adds	r7, #36	; 0x24
 810630c:	46bd      	mov	sp, r7
 810630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106312:	4770      	bx	lr
 8106314:	58024400 	.word	0x58024400
 8106318:	03d09000 	.word	0x03d09000
 810631c:	46000000 	.word	0x46000000
 8106320:	4c742400 	.word	0x4c742400
 8106324:	4a742400 	.word	0x4a742400
 8106328:	4bbebc20 	.word	0x4bbebc20

0810632c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 810632c:	b480      	push	{r7}
 810632e:	b089      	sub	sp, #36	; 0x24
 8106330:	af00      	add	r7, sp, #0
 8106332:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106334:	4b9d      	ldr	r3, [pc, #628]	; (81065ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106338:	f003 0303 	and.w	r3, r3, #3
 810633c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 810633e:	4b9b      	ldr	r3, [pc, #620]	; (81065ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106342:	0d1b      	lsrs	r3, r3, #20
 8106344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8106348:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810634a:	4b98      	ldr	r3, [pc, #608]	; (81065ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810634c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810634e:	0a1b      	lsrs	r3, r3, #8
 8106350:	f003 0301 	and.w	r3, r3, #1
 8106354:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8106356:	4b95      	ldr	r3, [pc, #596]	; (81065ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810635a:	08db      	lsrs	r3, r3, #3
 810635c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106360:	693a      	ldr	r2, [r7, #16]
 8106362:	fb02 f303 	mul.w	r3, r2, r3
 8106366:	ee07 3a90 	vmov	s15, r3
 810636a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810636e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8106372:	697b      	ldr	r3, [r7, #20]
 8106374:	2b00      	cmp	r3, #0
 8106376:	f000 810a 	beq.w	810658e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 810637a:	69bb      	ldr	r3, [r7, #24]
 810637c:	2b01      	cmp	r3, #1
 810637e:	d05a      	beq.n	8106436 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8106380:	2b01      	cmp	r3, #1
 8106382:	d302      	bcc.n	810638a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8106384:	2b02      	cmp	r3, #2
 8106386:	d078      	beq.n	810647a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8106388:	e099      	b.n	81064be <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810638a:	4b88      	ldr	r3, [pc, #544]	; (81065ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810638c:	681b      	ldr	r3, [r3, #0]
 810638e:	f003 0320 	and.w	r3, r3, #32
 8106392:	2b00      	cmp	r3, #0
 8106394:	d02d      	beq.n	81063f2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106396:	4b85      	ldr	r3, [pc, #532]	; (81065ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106398:	681b      	ldr	r3, [r3, #0]
 810639a:	08db      	lsrs	r3, r3, #3
 810639c:	f003 0303 	and.w	r3, r3, #3
 81063a0:	4a83      	ldr	r2, [pc, #524]	; (81065b0 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 81063a2:	fa22 f303 	lsr.w	r3, r2, r3
 81063a6:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81063a8:	68bb      	ldr	r3, [r7, #8]
 81063aa:	ee07 3a90 	vmov	s15, r3
 81063ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81063b2:	697b      	ldr	r3, [r7, #20]
 81063b4:	ee07 3a90 	vmov	s15, r3
 81063b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81063bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81063c0:	4b7a      	ldr	r3, [pc, #488]	; (81065ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81063c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81063c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81063c8:	ee07 3a90 	vmov	s15, r3
 81063cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81063d0:	ed97 6a03 	vldr	s12, [r7, #12]
 81063d4:	eddf 5a77 	vldr	s11, [pc, #476]	; 81065b4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 81063d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81063dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81063e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81063e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81063e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81063ec:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81063f0:	e087      	b.n	8106502 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81063f2:	697b      	ldr	r3, [r7, #20]
 81063f4:	ee07 3a90 	vmov	s15, r3
 81063f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81063fc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 81065b8 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8106400:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106404:	4b69      	ldr	r3, [pc, #420]	; (81065ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810640c:	ee07 3a90 	vmov	s15, r3
 8106410:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106414:	ed97 6a03 	vldr	s12, [r7, #12]
 8106418:	eddf 5a66 	vldr	s11, [pc, #408]	; 81065b4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 810641c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106420:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106424:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106428:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810642c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106430:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106434:	e065      	b.n	8106502 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8106436:	697b      	ldr	r3, [r7, #20]
 8106438:	ee07 3a90 	vmov	s15, r3
 810643c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106440:	eddf 6a5e 	vldr	s13, [pc, #376]	; 81065bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8106444:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106448:	4b58      	ldr	r3, [pc, #352]	; (81065ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810644a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810644c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106450:	ee07 3a90 	vmov	s15, r3
 8106454:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106458:	ed97 6a03 	vldr	s12, [r7, #12]
 810645c:	eddf 5a55 	vldr	s11, [pc, #340]	; 81065b4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8106460:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106464:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106468:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810646c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106470:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106474:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106478:	e043      	b.n	8106502 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810647a:	697b      	ldr	r3, [r7, #20]
 810647c:	ee07 3a90 	vmov	s15, r3
 8106480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106484:	eddf 6a4e 	vldr	s13, [pc, #312]	; 81065c0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8106488:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810648c:	4b47      	ldr	r3, [pc, #284]	; (81065ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810648e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106494:	ee07 3a90 	vmov	s15, r3
 8106498:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810649c:	ed97 6a03 	vldr	s12, [r7, #12]
 81064a0:	eddf 5a44 	vldr	s11, [pc, #272]	; 81065b4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 81064a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81064a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81064ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81064b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81064b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 81064b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81064bc:	e021      	b.n	8106502 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81064be:	697b      	ldr	r3, [r7, #20]
 81064c0:	ee07 3a90 	vmov	s15, r3
 81064c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81064c8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 81065bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 81064cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81064d0:	4b36      	ldr	r3, [pc, #216]	; (81065ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81064d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81064d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81064d8:	ee07 3a90 	vmov	s15, r3
 81064dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81064e0:	ed97 6a03 	vldr	s12, [r7, #12]
 81064e4:	eddf 5a33 	vldr	s11, [pc, #204]	; 81065b4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 81064e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81064ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81064f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81064f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81064f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81064fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106500:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8106502:	4b2a      	ldr	r3, [pc, #168]	; (81065ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106506:	0a5b      	lsrs	r3, r3, #9
 8106508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810650c:	ee07 3a90 	vmov	s15, r3
 8106510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106514:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106518:	ee37 7a87 	vadd.f32	s14, s15, s14
 810651c:	edd7 6a07 	vldr	s13, [r7, #28]
 8106520:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106524:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106528:	ee17 2a90 	vmov	r2, s15
 810652c:	687b      	ldr	r3, [r7, #4]
 810652e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8106530:	4b1e      	ldr	r3, [pc, #120]	; (81065ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106534:	0c1b      	lsrs	r3, r3, #16
 8106536:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810653a:	ee07 3a90 	vmov	s15, r3
 810653e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106542:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106546:	ee37 7a87 	vadd.f32	s14, s15, s14
 810654a:	edd7 6a07 	vldr	s13, [r7, #28]
 810654e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106552:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106556:	ee17 2a90 	vmov	r2, s15
 810655a:	687b      	ldr	r3, [r7, #4]
 810655c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 810655e:	4b13      	ldr	r3, [pc, #76]	; (81065ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106562:	0e1b      	lsrs	r3, r3, #24
 8106564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106568:	ee07 3a90 	vmov	s15, r3
 810656c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106570:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106574:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106578:	edd7 6a07 	vldr	s13, [r7, #28]
 810657c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106580:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106584:	ee17 2a90 	vmov	r2, s15
 8106588:	687b      	ldr	r3, [r7, #4]
 810658a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810658c:	e008      	b.n	81065a0 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 810658e:	687b      	ldr	r3, [r7, #4]
 8106590:	2200      	movs	r2, #0
 8106592:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8106594:	687b      	ldr	r3, [r7, #4]
 8106596:	2200      	movs	r2, #0
 8106598:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 810659a:	687b      	ldr	r3, [r7, #4]
 810659c:	2200      	movs	r2, #0
 810659e:	609a      	str	r2, [r3, #8]
}
 81065a0:	bf00      	nop
 81065a2:	3724      	adds	r7, #36	; 0x24
 81065a4:	46bd      	mov	sp, r7
 81065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81065aa:	4770      	bx	lr
 81065ac:	58024400 	.word	0x58024400
 81065b0:	03d09000 	.word	0x03d09000
 81065b4:	46000000 	.word	0x46000000
 81065b8:	4c742400 	.word	0x4c742400
 81065bc:	4a742400 	.word	0x4a742400
 81065c0:	4bbebc20 	.word	0x4bbebc20

081065c4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 81065c4:	b580      	push	{r7, lr}
 81065c6:	b084      	sub	sp, #16
 81065c8:	af00      	add	r7, sp, #0
 81065ca:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 81065cc:	2300      	movs	r3, #0
 81065ce:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 81065d0:	687b      	ldr	r3, [r7, #4]
 81065d2:	2b00      	cmp	r3, #0
 81065d4:	d101      	bne.n	81065da <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 81065d6:	2301      	movs	r3, #1
 81065d8:	e0e2      	b.n	81067a0 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 81065da:	687b      	ldr	r3, [r7, #4]
 81065dc:	2200      	movs	r2, #0
 81065de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 81065e0:	687b      	ldr	r3, [r7, #4]
 81065e2:	681b      	ldr	r3, [r3, #0]
 81065e4:	4a70      	ldr	r2, [pc, #448]	; (81067a8 <HAL_SPI_Init+0x1e4>)
 81065e6:	4293      	cmp	r3, r2
 81065e8:	d00f      	beq.n	810660a <HAL_SPI_Init+0x46>
 81065ea:	687b      	ldr	r3, [r7, #4]
 81065ec:	681b      	ldr	r3, [r3, #0]
 81065ee:	4a6f      	ldr	r2, [pc, #444]	; (81067ac <HAL_SPI_Init+0x1e8>)
 81065f0:	4293      	cmp	r3, r2
 81065f2:	d00a      	beq.n	810660a <HAL_SPI_Init+0x46>
 81065f4:	687b      	ldr	r3, [r7, #4]
 81065f6:	681b      	ldr	r3, [r3, #0]
 81065f8:	4a6d      	ldr	r2, [pc, #436]	; (81067b0 <HAL_SPI_Init+0x1ec>)
 81065fa:	4293      	cmp	r3, r2
 81065fc:	d005      	beq.n	810660a <HAL_SPI_Init+0x46>
 81065fe:	687b      	ldr	r3, [r7, #4]
 8106600:	68db      	ldr	r3, [r3, #12]
 8106602:	2b0f      	cmp	r3, #15
 8106604:	d901      	bls.n	810660a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8106606:	2301      	movs	r3, #1
 8106608:	e0ca      	b.n	81067a0 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 810660a:	6878      	ldr	r0, [r7, #4]
 810660c:	f000 fb96 	bl	8106d3c <SPI_GetPacketSize>
 8106610:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8106612:	687b      	ldr	r3, [r7, #4]
 8106614:	681b      	ldr	r3, [r3, #0]
 8106616:	4a64      	ldr	r2, [pc, #400]	; (81067a8 <HAL_SPI_Init+0x1e4>)
 8106618:	4293      	cmp	r3, r2
 810661a:	d00c      	beq.n	8106636 <HAL_SPI_Init+0x72>
 810661c:	687b      	ldr	r3, [r7, #4]
 810661e:	681b      	ldr	r3, [r3, #0]
 8106620:	4a62      	ldr	r2, [pc, #392]	; (81067ac <HAL_SPI_Init+0x1e8>)
 8106622:	4293      	cmp	r3, r2
 8106624:	d007      	beq.n	8106636 <HAL_SPI_Init+0x72>
 8106626:	687b      	ldr	r3, [r7, #4]
 8106628:	681b      	ldr	r3, [r3, #0]
 810662a:	4a61      	ldr	r2, [pc, #388]	; (81067b0 <HAL_SPI_Init+0x1ec>)
 810662c:	4293      	cmp	r3, r2
 810662e:	d002      	beq.n	8106636 <HAL_SPI_Init+0x72>
 8106630:	68bb      	ldr	r3, [r7, #8]
 8106632:	2b08      	cmp	r3, #8
 8106634:	d811      	bhi.n	810665a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8106636:	687b      	ldr	r3, [r7, #4]
 8106638:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810663a:	4a5b      	ldr	r2, [pc, #364]	; (81067a8 <HAL_SPI_Init+0x1e4>)
 810663c:	4293      	cmp	r3, r2
 810663e:	d009      	beq.n	8106654 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8106640:	687b      	ldr	r3, [r7, #4]
 8106642:	681b      	ldr	r3, [r3, #0]
 8106644:	4a59      	ldr	r2, [pc, #356]	; (81067ac <HAL_SPI_Init+0x1e8>)
 8106646:	4293      	cmp	r3, r2
 8106648:	d004      	beq.n	8106654 <HAL_SPI_Init+0x90>
 810664a:	687b      	ldr	r3, [r7, #4]
 810664c:	681b      	ldr	r3, [r3, #0]
 810664e:	4a58      	ldr	r2, [pc, #352]	; (81067b0 <HAL_SPI_Init+0x1ec>)
 8106650:	4293      	cmp	r3, r2
 8106652:	d104      	bne.n	810665e <HAL_SPI_Init+0x9a>
 8106654:	68bb      	ldr	r3, [r7, #8]
 8106656:	2b10      	cmp	r3, #16
 8106658:	d901      	bls.n	810665e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 810665a:	2301      	movs	r3, #1
 810665c:	e0a0      	b.n	81067a0 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 810665e:	687b      	ldr	r3, [r7, #4]
 8106660:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8106664:	b2db      	uxtb	r3, r3
 8106666:	2b00      	cmp	r3, #0
 8106668:	d106      	bne.n	8106678 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 810666a:	687b      	ldr	r3, [r7, #4]
 810666c:	2200      	movs	r2, #0
 810666e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8106672:	6878      	ldr	r0, [r7, #4]
 8106674:	f7fb f88e 	bl	8101794 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8106678:	687b      	ldr	r3, [r7, #4]
 810667a:	2202      	movs	r2, #2
 810667c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8106680:	687b      	ldr	r3, [r7, #4]
 8106682:	681b      	ldr	r3, [r3, #0]
 8106684:	681a      	ldr	r2, [r3, #0]
 8106686:	687b      	ldr	r3, [r7, #4]
 8106688:	681b      	ldr	r3, [r3, #0]
 810668a:	f022 0201 	bic.w	r2, r2, #1
 810668e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8106690:	687b      	ldr	r3, [r7, #4]
 8106692:	699b      	ldr	r3, [r3, #24]
 8106694:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8106698:	d110      	bne.n	81066bc <HAL_SPI_Init+0xf8>
 810669a:	687b      	ldr	r3, [r7, #4]
 810669c:	685b      	ldr	r3, [r3, #4]
 810669e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81066a2:	d10b      	bne.n	81066bc <HAL_SPI_Init+0xf8>
 81066a4:	687b      	ldr	r3, [r7, #4]
 81066a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81066a8:	2b00      	cmp	r3, #0
 81066aa:	d107      	bne.n	81066bc <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 81066ac:	687b      	ldr	r3, [r7, #4]
 81066ae:	681b      	ldr	r3, [r3, #0]
 81066b0:	681a      	ldr	r2, [r3, #0]
 81066b2:	687b      	ldr	r3, [r7, #4]
 81066b4:	681b      	ldr	r3, [r3, #0]
 81066b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 81066ba:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 81066bc:	687b      	ldr	r3, [r7, #4]
 81066be:	69da      	ldr	r2, [r3, #28]
 81066c0:	687b      	ldr	r3, [r7, #4]
 81066c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81066c4:	431a      	orrs	r2, r3
 81066c6:	68fb      	ldr	r3, [r7, #12]
 81066c8:	431a      	orrs	r2, r3
 81066ca:	687b      	ldr	r3, [r7, #4]
 81066cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81066ce:	ea42 0103 	orr.w	r1, r2, r3
 81066d2:	687b      	ldr	r3, [r7, #4]
 81066d4:	68da      	ldr	r2, [r3, #12]
 81066d6:	687b      	ldr	r3, [r7, #4]
 81066d8:	681b      	ldr	r3, [r3, #0]
 81066da:	430a      	orrs	r2, r1
 81066dc:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 81066de:	687b      	ldr	r3, [r7, #4]
 81066e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81066e2:	687b      	ldr	r3, [r7, #4]
 81066e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81066e6:	431a      	orrs	r2, r3
 81066e8:	687b      	ldr	r3, [r7, #4]
 81066ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81066ec:	431a      	orrs	r2, r3
 81066ee:	687b      	ldr	r3, [r7, #4]
 81066f0:	699b      	ldr	r3, [r3, #24]
 81066f2:	431a      	orrs	r2, r3
 81066f4:	687b      	ldr	r3, [r7, #4]
 81066f6:	691b      	ldr	r3, [r3, #16]
 81066f8:	431a      	orrs	r2, r3
 81066fa:	687b      	ldr	r3, [r7, #4]
 81066fc:	695b      	ldr	r3, [r3, #20]
 81066fe:	431a      	orrs	r2, r3
 8106700:	687b      	ldr	r3, [r7, #4]
 8106702:	6a1b      	ldr	r3, [r3, #32]
 8106704:	431a      	orrs	r2, r3
 8106706:	687b      	ldr	r3, [r7, #4]
 8106708:	685b      	ldr	r3, [r3, #4]
 810670a:	431a      	orrs	r2, r3
 810670c:	687b      	ldr	r3, [r7, #4]
 810670e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106710:	431a      	orrs	r2, r3
 8106712:	687b      	ldr	r3, [r7, #4]
 8106714:	689b      	ldr	r3, [r3, #8]
 8106716:	431a      	orrs	r2, r3
 8106718:	687b      	ldr	r3, [r7, #4]
 810671a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810671c:	ea42 0103 	orr.w	r1, r2, r3
 8106720:	687b      	ldr	r3, [r7, #4]
 8106722:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8106724:	687b      	ldr	r3, [r7, #4]
 8106726:	681b      	ldr	r3, [r3, #0]
 8106728:	430a      	orrs	r2, r1
 810672a:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 810672c:	687b      	ldr	r3, [r7, #4]
 810672e:	685b      	ldr	r3, [r3, #4]
 8106730:	2b00      	cmp	r3, #0
 8106732:	d113      	bne.n	810675c <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8106734:	687b      	ldr	r3, [r7, #4]
 8106736:	681b      	ldr	r3, [r3, #0]
 8106738:	689b      	ldr	r3, [r3, #8]
 810673a:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 810673e:	687b      	ldr	r3, [r7, #4]
 8106740:	681b      	ldr	r3, [r3, #0]
 8106742:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8106746:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8106748:	687b      	ldr	r3, [r7, #4]
 810674a:	681b      	ldr	r3, [r3, #0]
 810674c:	689b      	ldr	r3, [r3, #8]
 810674e:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8106752:	687b      	ldr	r3, [r7, #4]
 8106754:	681b      	ldr	r3, [r3, #0]
 8106756:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 810675a:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 810675c:	687b      	ldr	r3, [r7, #4]
 810675e:	681b      	ldr	r3, [r3, #0]
 8106760:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8106762:	687b      	ldr	r3, [r7, #4]
 8106764:	681b      	ldr	r3, [r3, #0]
 8106766:	f022 0201 	bic.w	r2, r2, #1
 810676a:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 810676c:	687b      	ldr	r3, [r7, #4]
 810676e:	685b      	ldr	r3, [r3, #4]
 8106770:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8106774:	2b00      	cmp	r3, #0
 8106776:	d00a      	beq.n	810678e <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8106778:	687b      	ldr	r3, [r7, #4]
 810677a:	681b      	ldr	r3, [r3, #0]
 810677c:	68db      	ldr	r3, [r3, #12]
 810677e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8106782:	687b      	ldr	r3, [r7, #4]
 8106784:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8106786:	687b      	ldr	r3, [r7, #4]
 8106788:	681b      	ldr	r3, [r3, #0]
 810678a:	430a      	orrs	r2, r1
 810678c:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 810678e:	687b      	ldr	r3, [r7, #4]
 8106790:	2200      	movs	r2, #0
 8106792:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8106796:	687b      	ldr	r3, [r7, #4]
 8106798:	2201      	movs	r2, #1
 810679a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 810679e:	2300      	movs	r3, #0
}
 81067a0:	4618      	mov	r0, r3
 81067a2:	3710      	adds	r7, #16
 81067a4:	46bd      	mov	sp, r7
 81067a6:	bd80      	pop	{r7, pc}
 81067a8:	40013000 	.word	0x40013000
 81067ac:	40003800 	.word	0x40003800
 81067b0:	40003c00 	.word	0x40003c00

081067b4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 81067b4:	b580      	push	{r7, lr}
 81067b6:	b08a      	sub	sp, #40	; 0x28
 81067b8:	af00      	add	r7, sp, #0
 81067ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 81067bc:	687b      	ldr	r3, [r7, #4]
 81067be:	681b      	ldr	r3, [r3, #0]
 81067c0:	691b      	ldr	r3, [r3, #16]
 81067c2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 81067c4:	687b      	ldr	r3, [r7, #4]
 81067c6:	681b      	ldr	r3, [r3, #0]
 81067c8:	695b      	ldr	r3, [r3, #20]
 81067ca:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 81067cc:	6a3a      	ldr	r2, [r7, #32]
 81067ce:	69fb      	ldr	r3, [r7, #28]
 81067d0:	4013      	ands	r3, r2
 81067d2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 81067d4:	687b      	ldr	r3, [r7, #4]
 81067d6:	681b      	ldr	r3, [r3, #0]
 81067d8:	689b      	ldr	r3, [r3, #8]
 81067da:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 81067dc:	2300      	movs	r3, #0
 81067de:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 81067e0:	687b      	ldr	r3, [r7, #4]
 81067e2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81067e6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 81067e8:	687b      	ldr	r3, [r7, #4]
 81067ea:	681b      	ldr	r3, [r3, #0]
 81067ec:	3330      	adds	r3, #48	; 0x30
 81067ee:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 81067f0:	69bb      	ldr	r3, [r7, #24]
 81067f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81067f6:	2b00      	cmp	r3, #0
 81067f8:	d113      	bne.n	8106822 <HAL_SPI_IRQHandler+0x6e>
 81067fa:	69bb      	ldr	r3, [r7, #24]
 81067fc:	f003 0320 	and.w	r3, r3, #32
 8106800:	2b00      	cmp	r3, #0
 8106802:	d10e      	bne.n	8106822 <HAL_SPI_IRQHandler+0x6e>
 8106804:	69bb      	ldr	r3, [r7, #24]
 8106806:	f003 0304 	and.w	r3, r3, #4
 810680a:	2b00      	cmp	r3, #0
 810680c:	d009      	beq.n	8106822 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 810680e:	687b      	ldr	r3, [r7, #4]
 8106810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8106812:	6878      	ldr	r0, [r7, #4]
 8106814:	4798      	blx	r3
    hspi->RxISR(hspi);
 8106816:	687b      	ldr	r3, [r7, #4]
 8106818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810681a:	6878      	ldr	r0, [r7, #4]
 810681c:	4798      	blx	r3
    handled = 1UL;
 810681e:	2301      	movs	r3, #1
 8106820:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8106822:	69bb      	ldr	r3, [r7, #24]
 8106824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106828:	2b00      	cmp	r3, #0
 810682a:	d10f      	bne.n	810684c <HAL_SPI_IRQHandler+0x98>
 810682c:	69bb      	ldr	r3, [r7, #24]
 810682e:	f003 0301 	and.w	r3, r3, #1
 8106832:	2b00      	cmp	r3, #0
 8106834:	d00a      	beq.n	810684c <HAL_SPI_IRQHandler+0x98>
 8106836:	69bb      	ldr	r3, [r7, #24]
 8106838:	f003 0304 	and.w	r3, r3, #4
 810683c:	2b00      	cmp	r3, #0
 810683e:	d105      	bne.n	810684c <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8106840:	687b      	ldr	r3, [r7, #4]
 8106842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106844:	6878      	ldr	r0, [r7, #4]
 8106846:	4798      	blx	r3
    handled = 1UL;
 8106848:	2301      	movs	r3, #1
 810684a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 810684c:	69bb      	ldr	r3, [r7, #24]
 810684e:	f003 0320 	and.w	r3, r3, #32
 8106852:	2b00      	cmp	r3, #0
 8106854:	d10f      	bne.n	8106876 <HAL_SPI_IRQHandler+0xc2>
 8106856:	69bb      	ldr	r3, [r7, #24]
 8106858:	f003 0302 	and.w	r3, r3, #2
 810685c:	2b00      	cmp	r3, #0
 810685e:	d00a      	beq.n	8106876 <HAL_SPI_IRQHandler+0xc2>
 8106860:	69bb      	ldr	r3, [r7, #24]
 8106862:	f003 0304 	and.w	r3, r3, #4
 8106866:	2b00      	cmp	r3, #0
 8106868:	d105      	bne.n	8106876 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 810686a:	687b      	ldr	r3, [r7, #4]
 810686c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810686e:	6878      	ldr	r0, [r7, #4]
 8106870:	4798      	blx	r3
    handled = 1UL;
 8106872:	2301      	movs	r3, #1
 8106874:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8106876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106878:	2b00      	cmp	r3, #0
 810687a:	f040 8172 	bne.w	8106b62 <HAL_SPI_IRQHandler+0x3ae>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 810687e:	69bb      	ldr	r3, [r7, #24]
 8106880:	f003 0308 	and.w	r3, r3, #8
 8106884:	2b00      	cmp	r3, #0
 8106886:	f000 80a0 	beq.w	81069ca <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 810688a:	687b      	ldr	r3, [r7, #4]
 810688c:	681b      	ldr	r3, [r3, #0]
 810688e:	699a      	ldr	r2, [r3, #24]
 8106890:	687b      	ldr	r3, [r7, #4]
 8106892:	681b      	ldr	r3, [r3, #0]
 8106894:	f042 0208 	orr.w	r2, r2, #8
 8106898:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 810689a:	687b      	ldr	r3, [r7, #4]
 810689c:	681b      	ldr	r3, [r3, #0]
 810689e:	699a      	ldr	r2, [r3, #24]
 81068a0:	687b      	ldr	r3, [r7, #4]
 81068a2:	681b      	ldr	r3, [r3, #0]
 81068a4:	f042 0210 	orr.w	r2, r2, #16
 81068a8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 81068aa:	687b      	ldr	r3, [r7, #4]
 81068ac:	681b      	ldr	r3, [r3, #0]
 81068ae:	699a      	ldr	r2, [r3, #24]
 81068b0:	687b      	ldr	r3, [r7, #4]
 81068b2:	681b      	ldr	r3, [r3, #0]
 81068b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81068b8:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 81068ba:	687b      	ldr	r3, [r7, #4]
 81068bc:	681b      	ldr	r3, [r3, #0]
 81068be:	691a      	ldr	r2, [r3, #16]
 81068c0:	687b      	ldr	r3, [r7, #4]
 81068c2:	681b      	ldr	r3, [r3, #0]
 81068c4:	f022 0208 	bic.w	r2, r2, #8
 81068c8:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 81068ca:	697b      	ldr	r3, [r7, #20]
 81068cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 81068d0:	2b00      	cmp	r3, #0
 81068d2:	d00f      	beq.n	81068f4 <HAL_SPI_IRQHandler+0x140>
 81068d4:	7cfb      	ldrb	r3, [r7, #19]
 81068d6:	2b04      	cmp	r3, #4
 81068d8:	d004      	beq.n	81068e4 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 81068da:	687b      	ldr	r3, [r7, #4]
 81068dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81068de:	69db      	ldr	r3, [r3, #28]
 81068e0:	2b00      	cmp	r3, #0
 81068e2:	d007      	beq.n	81068f4 <HAL_SPI_IRQHandler+0x140>
 81068e4:	7cfb      	ldrb	r3, [r7, #19]
 81068e6:	2b03      	cmp	r3, #3
 81068e8:	d059      	beq.n	810699e <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 81068ea:	687b      	ldr	r3, [r7, #4]
 81068ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81068ee:	69db      	ldr	r3, [r3, #28]
 81068f0:	2b00      	cmp	r3, #0
 81068f2:	d154      	bne.n	810699e <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 81068f4:	687b      	ldr	r3, [r7, #4]
 81068f6:	681b      	ldr	r3, [r3, #0]
 81068f8:	689b      	ldr	r3, [r3, #8]
 81068fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 81068fe:	2b00      	cmp	r3, #0
 8106900:	d13d      	bne.n	810697e <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8106902:	e036      	b.n	8106972 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8106904:	687b      	ldr	r3, [r7, #4]
 8106906:	68db      	ldr	r3, [r3, #12]
 8106908:	2b0f      	cmp	r3, #15
 810690a:	d90b      	bls.n	8106924 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810690c:	687b      	ldr	r3, [r7, #4]
 810690e:	681a      	ldr	r2, [r3, #0]
 8106910:	687b      	ldr	r3, [r7, #4]
 8106912:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106914:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8106916:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8106918:	687b      	ldr	r3, [r7, #4]
 810691a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810691c:	1d1a      	adds	r2, r3, #4
 810691e:	687b      	ldr	r3, [r7, #4]
 8106920:	665a      	str	r2, [r3, #100]	; 0x64
 8106922:	e01d      	b.n	8106960 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8106924:	687b      	ldr	r3, [r7, #4]
 8106926:	68db      	ldr	r3, [r3, #12]
 8106928:	2b07      	cmp	r3, #7
 810692a:	d90b      	bls.n	8106944 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810692c:	687b      	ldr	r3, [r7, #4]
 810692e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106930:	68fa      	ldr	r2, [r7, #12]
 8106932:	8812      	ldrh	r2, [r2, #0]
 8106934:	b292      	uxth	r2, r2
 8106936:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8106938:	687b      	ldr	r3, [r7, #4]
 810693a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810693c:	1c9a      	adds	r2, r3, #2
 810693e:	687b      	ldr	r3, [r7, #4]
 8106940:	665a      	str	r2, [r3, #100]	; 0x64
 8106942:	e00d      	b.n	8106960 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8106944:	687b      	ldr	r3, [r7, #4]
 8106946:	681b      	ldr	r3, [r3, #0]
 8106948:	f103 0230 	add.w	r2, r3, #48	; 0x30
 810694c:	687b      	ldr	r3, [r7, #4]
 810694e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106950:	7812      	ldrb	r2, [r2, #0]
 8106952:	b2d2      	uxtb	r2, r2
 8106954:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8106956:	687b      	ldr	r3, [r7, #4]
 8106958:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810695a:	1c5a      	adds	r2, r3, #1
 810695c:	687b      	ldr	r3, [r7, #4]
 810695e:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8106960:	687b      	ldr	r3, [r7, #4]
 8106962:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8106966:	b29b      	uxth	r3, r3
 8106968:	3b01      	subs	r3, #1
 810696a:	b29a      	uxth	r2, r3
 810696c:	687b      	ldr	r3, [r7, #4]
 810696e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8106972:	687b      	ldr	r3, [r7, #4]
 8106974:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8106978:	b29b      	uxth	r3, r3
 810697a:	2b00      	cmp	r3, #0
 810697c:	d1c2      	bne.n	8106904 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 810697e:	6878      	ldr	r0, [r7, #4]
 8106980:	f000 f93c 	bl	8106bfc <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8106984:	687b      	ldr	r3, [r7, #4]
 8106986:	2201      	movs	r2, #1
 8106988:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810698c:	687b      	ldr	r3, [r7, #4]
 810698e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106992:	2b00      	cmp	r3, #0
 8106994:	d003      	beq.n	810699e <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8106996:	6878      	ldr	r0, [r7, #4]
 8106998:	f000 f90c 	bl	8106bb4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 810699c:	e0e6      	b.n	8106b6c <HAL_SPI_IRQHandler+0x3b8>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 810699e:	7cfb      	ldrb	r3, [r7, #19]
 81069a0:	2b05      	cmp	r3, #5
 81069a2:	d103      	bne.n	81069ac <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 81069a4:	6878      	ldr	r0, [r7, #4]
 81069a6:	f000 f8fb 	bl	8106ba0 <HAL_SPI_TxRxCpltCallback>
    {
      /* end of the appropriate call */
    }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

    return;
 81069aa:	e0dc      	b.n	8106b66 <HAL_SPI_IRQHandler+0x3b2>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 81069ac:	7cfb      	ldrb	r3, [r7, #19]
 81069ae:	2b04      	cmp	r3, #4
 81069b0:	d103      	bne.n	81069ba <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 81069b2:	6878      	ldr	r0, [r7, #4]
 81069b4:	f000 f8ea 	bl	8106b8c <HAL_SPI_RxCpltCallback>
    return;
 81069b8:	e0d5      	b.n	8106b66 <HAL_SPI_IRQHandler+0x3b2>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 81069ba:	7cfb      	ldrb	r3, [r7, #19]
 81069bc:	2b03      	cmp	r3, #3
 81069be:	f040 80d2 	bne.w	8106b66 <HAL_SPI_IRQHandler+0x3b2>
      HAL_SPI_TxCpltCallback(hspi);
 81069c2:	6878      	ldr	r0, [r7, #4]
 81069c4:	f000 f8d8 	bl	8106b78 <HAL_SPI_TxCpltCallback>
    return;
 81069c8:	e0cd      	b.n	8106b66 <HAL_SPI_IRQHandler+0x3b2>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 81069ca:	69fb      	ldr	r3, [r7, #28]
 81069cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81069d0:	2b00      	cmp	r3, #0
 81069d2:	d00d      	beq.n	81069f0 <HAL_SPI_IRQHandler+0x23c>
 81069d4:	6a3b      	ldr	r3, [r7, #32]
 81069d6:	f003 0308 	and.w	r3, r3, #8
 81069da:	2b00      	cmp	r3, #0
 81069dc:	d008      	beq.n	81069f0 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 81069de:	687b      	ldr	r3, [r7, #4]
 81069e0:	681b      	ldr	r3, [r3, #0]
 81069e2:	699a      	ldr	r2, [r3, #24]
 81069e4:	687b      	ldr	r3, [r7, #4]
 81069e6:	681b      	ldr	r3, [r3, #0]
 81069e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81069ec:	619a      	str	r2, [r3, #24]

    return;
 81069ee:	e0bd      	b.n	8106b6c <HAL_SPI_IRQHandler+0x3b8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 81069f0:	69bb      	ldr	r3, [r7, #24]
 81069f2:	f403 7358 	and.w	r3, r3, #864	; 0x360
 81069f6:	2b00      	cmp	r3, #0
 81069f8:	f000 80b8 	beq.w	8106b6c <HAL_SPI_IRQHandler+0x3b8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 81069fc:	69bb      	ldr	r3, [r7, #24]
 81069fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106a02:	2b00      	cmp	r3, #0
 8106a04:	d00f      	beq.n	8106a26 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8106a06:	687b      	ldr	r3, [r7, #4]
 8106a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106a0c:	f043 0204 	orr.w	r2, r3, #4
 8106a10:	687b      	ldr	r3, [r7, #4]
 8106a12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8106a16:	687b      	ldr	r3, [r7, #4]
 8106a18:	681b      	ldr	r3, [r3, #0]
 8106a1a:	699a      	ldr	r2, [r3, #24]
 8106a1c:	687b      	ldr	r3, [r7, #4]
 8106a1e:	681b      	ldr	r3, [r3, #0]
 8106a20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8106a24:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8106a26:	69bb      	ldr	r3, [r7, #24]
 8106a28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8106a2c:	2b00      	cmp	r3, #0
 8106a2e:	d00f      	beq.n	8106a50 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8106a30:	687b      	ldr	r3, [r7, #4]
 8106a32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106a36:	f043 0201 	orr.w	r2, r3, #1
 8106a3a:	687b      	ldr	r3, [r7, #4]
 8106a3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8106a40:	687b      	ldr	r3, [r7, #4]
 8106a42:	681b      	ldr	r3, [r3, #0]
 8106a44:	699a      	ldr	r2, [r3, #24]
 8106a46:	687b      	ldr	r3, [r7, #4]
 8106a48:	681b      	ldr	r3, [r3, #0]
 8106a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8106a4e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8106a50:	69bb      	ldr	r3, [r7, #24]
 8106a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106a56:	2b00      	cmp	r3, #0
 8106a58:	d00f      	beq.n	8106a7a <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8106a5a:	687b      	ldr	r3, [r7, #4]
 8106a5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106a60:	f043 0208 	orr.w	r2, r3, #8
 8106a64:	687b      	ldr	r3, [r7, #4]
 8106a66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8106a6a:	687b      	ldr	r3, [r7, #4]
 8106a6c:	681b      	ldr	r3, [r3, #0]
 8106a6e:	699a      	ldr	r2, [r3, #24]
 8106a70:	687b      	ldr	r3, [r7, #4]
 8106a72:	681b      	ldr	r3, [r3, #0]
 8106a74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8106a78:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8106a7a:	69bb      	ldr	r3, [r7, #24]
 8106a7c:	f003 0320 	and.w	r3, r3, #32
 8106a80:	2b00      	cmp	r3, #0
 8106a82:	d00f      	beq.n	8106aa4 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8106a84:	687b      	ldr	r3, [r7, #4]
 8106a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106a8a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8106a8e:	687b      	ldr	r3, [r7, #4]
 8106a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8106a94:	687b      	ldr	r3, [r7, #4]
 8106a96:	681b      	ldr	r3, [r3, #0]
 8106a98:	699a      	ldr	r2, [r3, #24]
 8106a9a:	687b      	ldr	r3, [r7, #4]
 8106a9c:	681b      	ldr	r3, [r3, #0]
 8106a9e:	f042 0220 	orr.w	r2, r2, #32
 8106aa2:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8106aa4:	687b      	ldr	r3, [r7, #4]
 8106aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106aaa:	2b00      	cmp	r3, #0
 8106aac:	d05d      	beq.n	8106b6a <HAL_SPI_IRQHandler+0x3b6>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8106aae:	687b      	ldr	r3, [r7, #4]
 8106ab0:	681b      	ldr	r3, [r3, #0]
 8106ab2:	681a      	ldr	r2, [r3, #0]
 8106ab4:	687b      	ldr	r3, [r7, #4]
 8106ab6:	681b      	ldr	r3, [r3, #0]
 8106ab8:	f022 0201 	bic.w	r2, r2, #1
 8106abc:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8106abe:	687b      	ldr	r3, [r7, #4]
 8106ac0:	681b      	ldr	r3, [r3, #0]
 8106ac2:	691b      	ldr	r3, [r3, #16]
 8106ac4:	687a      	ldr	r2, [r7, #4]
 8106ac6:	6812      	ldr	r2, [r2, #0]
 8106ac8:	f423 735a 	bic.w	r3, r3, #872	; 0x368
 8106acc:	f023 0303 	bic.w	r3, r3, #3
 8106ad0:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8106ad2:	697b      	ldr	r3, [r7, #20]
 8106ad4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8106ad8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8106adc:	d138      	bne.n	8106b50 <HAL_SPI_IRQHandler+0x39c>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8106ade:	687b      	ldr	r3, [r7, #4]
 8106ae0:	681b      	ldr	r3, [r3, #0]
 8106ae2:	689a      	ldr	r2, [r3, #8]
 8106ae4:	687b      	ldr	r3, [r7, #4]
 8106ae6:	681b      	ldr	r3, [r3, #0]
 8106ae8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8106aec:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8106aee:	687b      	ldr	r3, [r7, #4]
 8106af0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106af2:	2b00      	cmp	r3, #0
 8106af4:	d013      	beq.n	8106b1e <HAL_SPI_IRQHandler+0x36a>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8106af6:	687b      	ldr	r3, [r7, #4]
 8106af8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106afa:	4a1e      	ldr	r2, [pc, #120]	; (8106b74 <HAL_SPI_IRQHandler+0x3c0>)
 8106afc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8106afe:	687b      	ldr	r3, [r7, #4]
 8106b00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106b02:	4618      	mov	r0, r3
 8106b04:	f7fb fee0 	bl	81028c8 <HAL_DMA_Abort_IT>
 8106b08:	4603      	mov	r3, r0
 8106b0a:	2b00      	cmp	r3, #0
 8106b0c:	d007      	beq.n	8106b1e <HAL_SPI_IRQHandler+0x36a>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8106b0e:	687b      	ldr	r3, [r7, #4]
 8106b10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106b14:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8106b18:	687b      	ldr	r3, [r7, #4]
 8106b1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8106b1e:	687b      	ldr	r3, [r7, #4]
 8106b20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106b22:	2b00      	cmp	r3, #0
 8106b24:	d021      	beq.n	8106b6a <HAL_SPI_IRQHandler+0x3b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8106b26:	687b      	ldr	r3, [r7, #4]
 8106b28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106b2a:	4a12      	ldr	r2, [pc, #72]	; (8106b74 <HAL_SPI_IRQHandler+0x3c0>)
 8106b2c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8106b2e:	687b      	ldr	r3, [r7, #4]
 8106b30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106b32:	4618      	mov	r0, r3
 8106b34:	f7fb fec8 	bl	81028c8 <HAL_DMA_Abort_IT>
 8106b38:	4603      	mov	r3, r0
 8106b3a:	2b00      	cmp	r3, #0
 8106b3c:	d015      	beq.n	8106b6a <HAL_SPI_IRQHandler+0x3b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8106b3e:	687b      	ldr	r3, [r7, #4]
 8106b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106b44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8106b48:	687b      	ldr	r3, [r7, #4]
 8106b4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8106b4e:	e00c      	b.n	8106b6a <HAL_SPI_IRQHandler+0x3b6>
        hspi->State = HAL_SPI_STATE_READY;
 8106b50:	687b      	ldr	r3, [r7, #4]
 8106b52:	2201      	movs	r2, #1
 8106b54:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8106b58:	6878      	ldr	r0, [r7, #4]
 8106b5a:	f000 f82b 	bl	8106bb4 <HAL_SPI_ErrorCallback>
    return;
 8106b5e:	bf00      	nop
 8106b60:	e003      	b.n	8106b6a <HAL_SPI_IRQHandler+0x3b6>
    return;
 8106b62:	bf00      	nop
 8106b64:	e002      	b.n	8106b6c <HAL_SPI_IRQHandler+0x3b8>
    return;
 8106b66:	bf00      	nop
 8106b68:	e000      	b.n	8106b6c <HAL_SPI_IRQHandler+0x3b8>
    return;
 8106b6a:	bf00      	nop
  }
}
 8106b6c:	3728      	adds	r7, #40	; 0x28
 8106b6e:	46bd      	mov	sp, r7
 8106b70:	bd80      	pop	{r7, pc}
 8106b72:	bf00      	nop
 8106b74:	08106bc9 	.word	0x08106bc9

08106b78 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8106b78:	b480      	push	{r7}
 8106b7a:	b083      	sub	sp, #12
 8106b7c:	af00      	add	r7, sp, #0
 8106b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8106b80:	bf00      	nop
 8106b82:	370c      	adds	r7, #12
 8106b84:	46bd      	mov	sp, r7
 8106b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b8a:	4770      	bx	lr

08106b8c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8106b8c:	b480      	push	{r7}
 8106b8e:	b083      	sub	sp, #12
 8106b90:	af00      	add	r7, sp, #0
 8106b92:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8106b94:	bf00      	nop
 8106b96:	370c      	adds	r7, #12
 8106b98:	46bd      	mov	sp, r7
 8106b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b9e:	4770      	bx	lr

08106ba0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8106ba0:	b480      	push	{r7}
 8106ba2:	b083      	sub	sp, #12
 8106ba4:	af00      	add	r7, sp, #0
 8106ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8106ba8:	bf00      	nop
 8106baa:	370c      	adds	r7, #12
 8106bac:	46bd      	mov	sp, r7
 8106bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106bb2:	4770      	bx	lr

08106bb4 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8106bb4:	b480      	push	{r7}
 8106bb6:	b083      	sub	sp, #12
 8106bb8:	af00      	add	r7, sp, #0
 8106bba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8106bbc:	bf00      	nop
 8106bbe:	370c      	adds	r7, #12
 8106bc0:	46bd      	mov	sp, r7
 8106bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106bc6:	4770      	bx	lr

08106bc8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8106bc8:	b580      	push	{r7, lr}
 8106bca:	b084      	sub	sp, #16
 8106bcc:	af00      	add	r7, sp, #0
 8106bce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8106bd0:	687b      	ldr	r3, [r7, #4]
 8106bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106bd4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8106bd6:	68fb      	ldr	r3, [r7, #12]
 8106bd8:	2200      	movs	r2, #0
 8106bda:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8106bde:	68fb      	ldr	r3, [r7, #12]
 8106be0:	2200      	movs	r2, #0
 8106be2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8106be6:	68fb      	ldr	r3, [r7, #12]
 8106be8:	2201      	movs	r2, #1
 8106bea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8106bee:	68f8      	ldr	r0, [r7, #12]
 8106bf0:	f7ff ffe0 	bl	8106bb4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8106bf4:	bf00      	nop
 8106bf6:	3710      	adds	r7, #16
 8106bf8:	46bd      	mov	sp, r7
 8106bfa:	bd80      	pop	{r7, pc}

08106bfc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8106bfc:	b480      	push	{r7}
 8106bfe:	b085      	sub	sp, #20
 8106c00:	af00      	add	r7, sp, #0
 8106c02:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8106c04:	687b      	ldr	r3, [r7, #4]
 8106c06:	681b      	ldr	r3, [r3, #0]
 8106c08:	695b      	ldr	r3, [r3, #20]
 8106c0a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8106c0c:	687b      	ldr	r3, [r7, #4]
 8106c0e:	681b      	ldr	r3, [r3, #0]
 8106c10:	699a      	ldr	r2, [r3, #24]
 8106c12:	687b      	ldr	r3, [r7, #4]
 8106c14:	681b      	ldr	r3, [r3, #0]
 8106c16:	f042 0208 	orr.w	r2, r2, #8
 8106c1a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8106c1c:	687b      	ldr	r3, [r7, #4]
 8106c1e:	681b      	ldr	r3, [r3, #0]
 8106c20:	699a      	ldr	r2, [r3, #24]
 8106c22:	687b      	ldr	r3, [r7, #4]
 8106c24:	681b      	ldr	r3, [r3, #0]
 8106c26:	f042 0210 	orr.w	r2, r2, #16
 8106c2a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8106c2c:	687b      	ldr	r3, [r7, #4]
 8106c2e:	681b      	ldr	r3, [r3, #0]
 8106c30:	681a      	ldr	r2, [r3, #0]
 8106c32:	687b      	ldr	r3, [r7, #4]
 8106c34:	681b      	ldr	r3, [r3, #0]
 8106c36:	f022 0201 	bic.w	r2, r2, #1
 8106c3a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8106c3c:	687b      	ldr	r3, [r7, #4]
 8106c3e:	681b      	ldr	r3, [r3, #0]
 8106c40:	691b      	ldr	r3, [r3, #16]
 8106c42:	687a      	ldr	r2, [r7, #4]
 8106c44:	6812      	ldr	r2, [r2, #0]
 8106c46:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8106c4a:	f023 0303 	bic.w	r3, r3, #3
 8106c4e:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8106c50:	687b      	ldr	r3, [r7, #4]
 8106c52:	681b      	ldr	r3, [r3, #0]
 8106c54:	689a      	ldr	r2, [r3, #8]
 8106c56:	687b      	ldr	r3, [r7, #4]
 8106c58:	681b      	ldr	r3, [r3, #0]
 8106c5a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8106c5e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8106c60:	687b      	ldr	r3, [r7, #4]
 8106c62:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8106c66:	b2db      	uxtb	r3, r3
 8106c68:	2b04      	cmp	r3, #4
 8106c6a:	d014      	beq.n	8106c96 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8106c6c:	68fb      	ldr	r3, [r7, #12]
 8106c6e:	f003 0320 	and.w	r3, r3, #32
 8106c72:	2b00      	cmp	r3, #0
 8106c74:	d00f      	beq.n	8106c96 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8106c76:	687b      	ldr	r3, [r7, #4]
 8106c78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106c7c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8106c80:	687b      	ldr	r3, [r7, #4]
 8106c82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8106c86:	687b      	ldr	r3, [r7, #4]
 8106c88:	681b      	ldr	r3, [r3, #0]
 8106c8a:	699a      	ldr	r2, [r3, #24]
 8106c8c:	687b      	ldr	r3, [r7, #4]
 8106c8e:	681b      	ldr	r3, [r3, #0]
 8106c90:	f042 0220 	orr.w	r2, r2, #32
 8106c94:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8106c96:	687b      	ldr	r3, [r7, #4]
 8106c98:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8106c9c:	b2db      	uxtb	r3, r3
 8106c9e:	2b03      	cmp	r3, #3
 8106ca0:	d014      	beq.n	8106ccc <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8106ca2:	68fb      	ldr	r3, [r7, #12]
 8106ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106ca8:	2b00      	cmp	r3, #0
 8106caa:	d00f      	beq.n	8106ccc <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8106cac:	687b      	ldr	r3, [r7, #4]
 8106cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106cb2:	f043 0204 	orr.w	r2, r3, #4
 8106cb6:	687b      	ldr	r3, [r7, #4]
 8106cb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8106cbc:	687b      	ldr	r3, [r7, #4]
 8106cbe:	681b      	ldr	r3, [r3, #0]
 8106cc0:	699a      	ldr	r2, [r3, #24]
 8106cc2:	687b      	ldr	r3, [r7, #4]
 8106cc4:	681b      	ldr	r3, [r3, #0]
 8106cc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8106cca:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8106ccc:	68fb      	ldr	r3, [r7, #12]
 8106cce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8106cd2:	2b00      	cmp	r3, #0
 8106cd4:	d00f      	beq.n	8106cf6 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8106cd6:	687b      	ldr	r3, [r7, #4]
 8106cd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106cdc:	f043 0201 	orr.w	r2, r3, #1
 8106ce0:	687b      	ldr	r3, [r7, #4]
 8106ce2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8106ce6:	687b      	ldr	r3, [r7, #4]
 8106ce8:	681b      	ldr	r3, [r3, #0]
 8106cea:	699a      	ldr	r2, [r3, #24]
 8106cec:	687b      	ldr	r3, [r7, #4]
 8106cee:	681b      	ldr	r3, [r3, #0]
 8106cf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8106cf4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8106cf6:	68fb      	ldr	r3, [r7, #12]
 8106cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106cfc:	2b00      	cmp	r3, #0
 8106cfe:	d00f      	beq.n	8106d20 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8106d00:	687b      	ldr	r3, [r7, #4]
 8106d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106d06:	f043 0208 	orr.w	r2, r3, #8
 8106d0a:	687b      	ldr	r3, [r7, #4]
 8106d0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8106d10:	687b      	ldr	r3, [r7, #4]
 8106d12:	681b      	ldr	r3, [r3, #0]
 8106d14:	699a      	ldr	r2, [r3, #24]
 8106d16:	687b      	ldr	r3, [r7, #4]
 8106d18:	681b      	ldr	r3, [r3, #0]
 8106d1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8106d1e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8106d20:	687b      	ldr	r3, [r7, #4]
 8106d22:	2200      	movs	r2, #0
 8106d24:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8106d28:	687b      	ldr	r3, [r7, #4]
 8106d2a:	2200      	movs	r2, #0
 8106d2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8106d30:	bf00      	nop
 8106d32:	3714      	adds	r7, #20
 8106d34:	46bd      	mov	sp, r7
 8106d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d3a:	4770      	bx	lr

08106d3c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8106d3c:	b480      	push	{r7}
 8106d3e:	b085      	sub	sp, #20
 8106d40:	af00      	add	r7, sp, #0
 8106d42:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8106d44:	687b      	ldr	r3, [r7, #4]
 8106d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106d48:	095b      	lsrs	r3, r3, #5
 8106d4a:	3301      	adds	r3, #1
 8106d4c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8106d4e:	687b      	ldr	r3, [r7, #4]
 8106d50:	68db      	ldr	r3, [r3, #12]
 8106d52:	3301      	adds	r3, #1
 8106d54:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8106d56:	68bb      	ldr	r3, [r7, #8]
 8106d58:	3307      	adds	r3, #7
 8106d5a:	08db      	lsrs	r3, r3, #3
 8106d5c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8106d5e:	68bb      	ldr	r3, [r7, #8]
 8106d60:	68fa      	ldr	r2, [r7, #12]
 8106d62:	fb02 f303 	mul.w	r3, r2, r3
}
 8106d66:	4618      	mov	r0, r3
 8106d68:	3714      	adds	r7, #20
 8106d6a:	46bd      	mov	sp, r7
 8106d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d70:	4770      	bx	lr

08106d72 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8106d72:	b580      	push	{r7, lr}
 8106d74:	b082      	sub	sp, #8
 8106d76:	af00      	add	r7, sp, #0
 8106d78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8106d7a:	687b      	ldr	r3, [r7, #4]
 8106d7c:	2b00      	cmp	r3, #0
 8106d7e:	d101      	bne.n	8106d84 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8106d80:	2301      	movs	r3, #1
 8106d82:	e049      	b.n	8106e18 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8106d84:	687b      	ldr	r3, [r7, #4]
 8106d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8106d8a:	b2db      	uxtb	r3, r3
 8106d8c:	2b00      	cmp	r3, #0
 8106d8e:	d106      	bne.n	8106d9e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8106d90:	687b      	ldr	r3, [r7, #4]
 8106d92:	2200      	movs	r2, #0
 8106d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8106d98:	6878      	ldr	r0, [r7, #4]
 8106d9a:	f000 f841 	bl	8106e20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106d9e:	687b      	ldr	r3, [r7, #4]
 8106da0:	2202      	movs	r2, #2
 8106da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8106da6:	687b      	ldr	r3, [r7, #4]
 8106da8:	681a      	ldr	r2, [r3, #0]
 8106daa:	687b      	ldr	r3, [r7, #4]
 8106dac:	3304      	adds	r3, #4
 8106dae:	4619      	mov	r1, r3
 8106db0:	4610      	mov	r0, r2
 8106db2:	f000 f9bd 	bl	8107130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8106db6:	687b      	ldr	r3, [r7, #4]
 8106db8:	2201      	movs	r2, #1
 8106dba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106dbe:	687b      	ldr	r3, [r7, #4]
 8106dc0:	2201      	movs	r2, #1
 8106dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8106dc6:	687b      	ldr	r3, [r7, #4]
 8106dc8:	2201      	movs	r2, #1
 8106dca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8106dce:	687b      	ldr	r3, [r7, #4]
 8106dd0:	2201      	movs	r2, #1
 8106dd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8106dd6:	687b      	ldr	r3, [r7, #4]
 8106dd8:	2201      	movs	r2, #1
 8106dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8106dde:	687b      	ldr	r3, [r7, #4]
 8106de0:	2201      	movs	r2, #1
 8106de2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8106de6:	687b      	ldr	r3, [r7, #4]
 8106de8:	2201      	movs	r2, #1
 8106dea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106dee:	687b      	ldr	r3, [r7, #4]
 8106df0:	2201      	movs	r2, #1
 8106df2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8106df6:	687b      	ldr	r3, [r7, #4]
 8106df8:	2201      	movs	r2, #1
 8106dfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8106dfe:	687b      	ldr	r3, [r7, #4]
 8106e00:	2201      	movs	r2, #1
 8106e02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8106e06:	687b      	ldr	r3, [r7, #4]
 8106e08:	2201      	movs	r2, #1
 8106e0a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8106e0e:	687b      	ldr	r3, [r7, #4]
 8106e10:	2201      	movs	r2, #1
 8106e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8106e16:	2300      	movs	r3, #0
}
 8106e18:	4618      	mov	r0, r3
 8106e1a:	3708      	adds	r7, #8
 8106e1c:	46bd      	mov	sp, r7
 8106e1e:	bd80      	pop	{r7, pc}

08106e20 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8106e20:	b480      	push	{r7}
 8106e22:	b083      	sub	sp, #12
 8106e24:	af00      	add	r7, sp, #0
 8106e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8106e28:	bf00      	nop
 8106e2a:	370c      	adds	r7, #12
 8106e2c:	46bd      	mov	sp, r7
 8106e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106e32:	4770      	bx	lr

08106e34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8106e34:	b480      	push	{r7}
 8106e36:	b085      	sub	sp, #20
 8106e38:	af00      	add	r7, sp, #0
 8106e3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8106e3c:	687b      	ldr	r3, [r7, #4]
 8106e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8106e42:	b2db      	uxtb	r3, r3
 8106e44:	2b01      	cmp	r3, #1
 8106e46:	d001      	beq.n	8106e4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8106e48:	2301      	movs	r3, #1
 8106e4a:	e021      	b.n	8106e90 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106e4c:	687b      	ldr	r3, [r7, #4]
 8106e4e:	2202      	movs	r2, #2
 8106e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8106e54:	687b      	ldr	r3, [r7, #4]
 8106e56:	681b      	ldr	r3, [r3, #0]
 8106e58:	68da      	ldr	r2, [r3, #12]
 8106e5a:	687b      	ldr	r3, [r7, #4]
 8106e5c:	681b      	ldr	r3, [r3, #0]
 8106e5e:	f042 0201 	orr.w	r2, r2, #1
 8106e62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8106e64:	687b      	ldr	r3, [r7, #4]
 8106e66:	681b      	ldr	r3, [r3, #0]
 8106e68:	689a      	ldr	r2, [r3, #8]
 8106e6a:	4b0c      	ldr	r3, [pc, #48]	; (8106e9c <HAL_TIM_Base_Start_IT+0x68>)
 8106e6c:	4013      	ands	r3, r2
 8106e6e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106e70:	68fb      	ldr	r3, [r7, #12]
 8106e72:	2b06      	cmp	r3, #6
 8106e74:	d00b      	beq.n	8106e8e <HAL_TIM_Base_Start_IT+0x5a>
 8106e76:	68fb      	ldr	r3, [r7, #12]
 8106e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106e7c:	d007      	beq.n	8106e8e <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8106e7e:	687b      	ldr	r3, [r7, #4]
 8106e80:	681b      	ldr	r3, [r3, #0]
 8106e82:	681a      	ldr	r2, [r3, #0]
 8106e84:	687b      	ldr	r3, [r7, #4]
 8106e86:	681b      	ldr	r3, [r3, #0]
 8106e88:	f042 0201 	orr.w	r2, r2, #1
 8106e8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8106e8e:	2300      	movs	r3, #0
}
 8106e90:	4618      	mov	r0, r3
 8106e92:	3714      	adds	r7, #20
 8106e94:	46bd      	mov	sp, r7
 8106e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106e9a:	4770      	bx	lr
 8106e9c:	00010007 	.word	0x00010007

08106ea0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8106ea0:	b580      	push	{r7, lr}
 8106ea2:	b082      	sub	sp, #8
 8106ea4:	af00      	add	r7, sp, #0
 8106ea6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8106ea8:	687b      	ldr	r3, [r7, #4]
 8106eaa:	681b      	ldr	r3, [r3, #0]
 8106eac:	691b      	ldr	r3, [r3, #16]
 8106eae:	f003 0302 	and.w	r3, r3, #2
 8106eb2:	2b02      	cmp	r3, #2
 8106eb4:	d122      	bne.n	8106efc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8106eb6:	687b      	ldr	r3, [r7, #4]
 8106eb8:	681b      	ldr	r3, [r3, #0]
 8106eba:	68db      	ldr	r3, [r3, #12]
 8106ebc:	f003 0302 	and.w	r3, r3, #2
 8106ec0:	2b02      	cmp	r3, #2
 8106ec2:	d11b      	bne.n	8106efc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8106ec4:	687b      	ldr	r3, [r7, #4]
 8106ec6:	681b      	ldr	r3, [r3, #0]
 8106ec8:	f06f 0202 	mvn.w	r2, #2
 8106ecc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8106ece:	687b      	ldr	r3, [r7, #4]
 8106ed0:	2201      	movs	r2, #1
 8106ed2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8106ed4:	687b      	ldr	r3, [r7, #4]
 8106ed6:	681b      	ldr	r3, [r3, #0]
 8106ed8:	699b      	ldr	r3, [r3, #24]
 8106eda:	f003 0303 	and.w	r3, r3, #3
 8106ede:	2b00      	cmp	r3, #0
 8106ee0:	d003      	beq.n	8106eea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8106ee2:	6878      	ldr	r0, [r7, #4]
 8106ee4:	f000 f905 	bl	81070f2 <HAL_TIM_IC_CaptureCallback>
 8106ee8:	e005      	b.n	8106ef6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8106eea:	6878      	ldr	r0, [r7, #4]
 8106eec:	f000 f8f7 	bl	81070de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106ef0:	6878      	ldr	r0, [r7, #4]
 8106ef2:	f000 f908 	bl	8107106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106ef6:	687b      	ldr	r3, [r7, #4]
 8106ef8:	2200      	movs	r2, #0
 8106efa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8106efc:	687b      	ldr	r3, [r7, #4]
 8106efe:	681b      	ldr	r3, [r3, #0]
 8106f00:	691b      	ldr	r3, [r3, #16]
 8106f02:	f003 0304 	and.w	r3, r3, #4
 8106f06:	2b04      	cmp	r3, #4
 8106f08:	d122      	bne.n	8106f50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8106f0a:	687b      	ldr	r3, [r7, #4]
 8106f0c:	681b      	ldr	r3, [r3, #0]
 8106f0e:	68db      	ldr	r3, [r3, #12]
 8106f10:	f003 0304 	and.w	r3, r3, #4
 8106f14:	2b04      	cmp	r3, #4
 8106f16:	d11b      	bne.n	8106f50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8106f18:	687b      	ldr	r3, [r7, #4]
 8106f1a:	681b      	ldr	r3, [r3, #0]
 8106f1c:	f06f 0204 	mvn.w	r2, #4
 8106f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8106f22:	687b      	ldr	r3, [r7, #4]
 8106f24:	2202      	movs	r2, #2
 8106f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8106f28:	687b      	ldr	r3, [r7, #4]
 8106f2a:	681b      	ldr	r3, [r3, #0]
 8106f2c:	699b      	ldr	r3, [r3, #24]
 8106f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8106f32:	2b00      	cmp	r3, #0
 8106f34:	d003      	beq.n	8106f3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8106f36:	6878      	ldr	r0, [r7, #4]
 8106f38:	f000 f8db 	bl	81070f2 <HAL_TIM_IC_CaptureCallback>
 8106f3c:	e005      	b.n	8106f4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8106f3e:	6878      	ldr	r0, [r7, #4]
 8106f40:	f000 f8cd 	bl	81070de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106f44:	6878      	ldr	r0, [r7, #4]
 8106f46:	f000 f8de 	bl	8107106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106f4a:	687b      	ldr	r3, [r7, #4]
 8106f4c:	2200      	movs	r2, #0
 8106f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8106f50:	687b      	ldr	r3, [r7, #4]
 8106f52:	681b      	ldr	r3, [r3, #0]
 8106f54:	691b      	ldr	r3, [r3, #16]
 8106f56:	f003 0308 	and.w	r3, r3, #8
 8106f5a:	2b08      	cmp	r3, #8
 8106f5c:	d122      	bne.n	8106fa4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8106f5e:	687b      	ldr	r3, [r7, #4]
 8106f60:	681b      	ldr	r3, [r3, #0]
 8106f62:	68db      	ldr	r3, [r3, #12]
 8106f64:	f003 0308 	and.w	r3, r3, #8
 8106f68:	2b08      	cmp	r3, #8
 8106f6a:	d11b      	bne.n	8106fa4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8106f6c:	687b      	ldr	r3, [r7, #4]
 8106f6e:	681b      	ldr	r3, [r3, #0]
 8106f70:	f06f 0208 	mvn.w	r2, #8
 8106f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8106f76:	687b      	ldr	r3, [r7, #4]
 8106f78:	2204      	movs	r2, #4
 8106f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8106f7c:	687b      	ldr	r3, [r7, #4]
 8106f7e:	681b      	ldr	r3, [r3, #0]
 8106f80:	69db      	ldr	r3, [r3, #28]
 8106f82:	f003 0303 	and.w	r3, r3, #3
 8106f86:	2b00      	cmp	r3, #0
 8106f88:	d003      	beq.n	8106f92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8106f8a:	6878      	ldr	r0, [r7, #4]
 8106f8c:	f000 f8b1 	bl	81070f2 <HAL_TIM_IC_CaptureCallback>
 8106f90:	e005      	b.n	8106f9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8106f92:	6878      	ldr	r0, [r7, #4]
 8106f94:	f000 f8a3 	bl	81070de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106f98:	6878      	ldr	r0, [r7, #4]
 8106f9a:	f000 f8b4 	bl	8107106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106f9e:	687b      	ldr	r3, [r7, #4]
 8106fa0:	2200      	movs	r2, #0
 8106fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8106fa4:	687b      	ldr	r3, [r7, #4]
 8106fa6:	681b      	ldr	r3, [r3, #0]
 8106fa8:	691b      	ldr	r3, [r3, #16]
 8106faa:	f003 0310 	and.w	r3, r3, #16
 8106fae:	2b10      	cmp	r3, #16
 8106fb0:	d122      	bne.n	8106ff8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8106fb2:	687b      	ldr	r3, [r7, #4]
 8106fb4:	681b      	ldr	r3, [r3, #0]
 8106fb6:	68db      	ldr	r3, [r3, #12]
 8106fb8:	f003 0310 	and.w	r3, r3, #16
 8106fbc:	2b10      	cmp	r3, #16
 8106fbe:	d11b      	bne.n	8106ff8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8106fc0:	687b      	ldr	r3, [r7, #4]
 8106fc2:	681b      	ldr	r3, [r3, #0]
 8106fc4:	f06f 0210 	mvn.w	r2, #16
 8106fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8106fca:	687b      	ldr	r3, [r7, #4]
 8106fcc:	2208      	movs	r2, #8
 8106fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8106fd0:	687b      	ldr	r3, [r7, #4]
 8106fd2:	681b      	ldr	r3, [r3, #0]
 8106fd4:	69db      	ldr	r3, [r3, #28]
 8106fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8106fda:	2b00      	cmp	r3, #0
 8106fdc:	d003      	beq.n	8106fe6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8106fde:	6878      	ldr	r0, [r7, #4]
 8106fe0:	f000 f887 	bl	81070f2 <HAL_TIM_IC_CaptureCallback>
 8106fe4:	e005      	b.n	8106ff2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8106fe6:	6878      	ldr	r0, [r7, #4]
 8106fe8:	f000 f879 	bl	81070de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106fec:	6878      	ldr	r0, [r7, #4]
 8106fee:	f000 f88a 	bl	8107106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106ff2:	687b      	ldr	r3, [r7, #4]
 8106ff4:	2200      	movs	r2, #0
 8106ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8106ff8:	687b      	ldr	r3, [r7, #4]
 8106ffa:	681b      	ldr	r3, [r3, #0]
 8106ffc:	691b      	ldr	r3, [r3, #16]
 8106ffe:	f003 0301 	and.w	r3, r3, #1
 8107002:	2b01      	cmp	r3, #1
 8107004:	d10e      	bne.n	8107024 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8107006:	687b      	ldr	r3, [r7, #4]
 8107008:	681b      	ldr	r3, [r3, #0]
 810700a:	68db      	ldr	r3, [r3, #12]
 810700c:	f003 0301 	and.w	r3, r3, #1
 8107010:	2b01      	cmp	r3, #1
 8107012:	d107      	bne.n	8107024 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8107014:	687b      	ldr	r3, [r7, #4]
 8107016:	681b      	ldr	r3, [r3, #0]
 8107018:	f06f 0201 	mvn.w	r2, #1
 810701c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810701e:	6878      	ldr	r0, [r7, #4]
 8107020:	f7fa faf6 	bl	8101610 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8107024:	687b      	ldr	r3, [r7, #4]
 8107026:	681b      	ldr	r3, [r3, #0]
 8107028:	691b      	ldr	r3, [r3, #16]
 810702a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810702e:	2b80      	cmp	r3, #128	; 0x80
 8107030:	d10e      	bne.n	8107050 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8107032:	687b      	ldr	r3, [r7, #4]
 8107034:	681b      	ldr	r3, [r3, #0]
 8107036:	68db      	ldr	r3, [r3, #12]
 8107038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810703c:	2b80      	cmp	r3, #128	; 0x80
 810703e:	d107      	bne.n	8107050 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8107040:	687b      	ldr	r3, [r7, #4]
 8107042:	681b      	ldr	r3, [r3, #0]
 8107044:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8107048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 810704a:	6878      	ldr	r0, [r7, #4]
 810704c:	f000 f914 	bl	8107278 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8107050:	687b      	ldr	r3, [r7, #4]
 8107052:	681b      	ldr	r3, [r3, #0]
 8107054:	691b      	ldr	r3, [r3, #16]
 8107056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810705a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810705e:	d10e      	bne.n	810707e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8107060:	687b      	ldr	r3, [r7, #4]
 8107062:	681b      	ldr	r3, [r3, #0]
 8107064:	68db      	ldr	r3, [r3, #12]
 8107066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810706a:	2b80      	cmp	r3, #128	; 0x80
 810706c:	d107      	bne.n	810707e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 810706e:	687b      	ldr	r3, [r7, #4]
 8107070:	681b      	ldr	r3, [r3, #0]
 8107072:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8107076:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8107078:	6878      	ldr	r0, [r7, #4]
 810707a:	f000 f907 	bl	810728c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 810707e:	687b      	ldr	r3, [r7, #4]
 8107080:	681b      	ldr	r3, [r3, #0]
 8107082:	691b      	ldr	r3, [r3, #16]
 8107084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107088:	2b40      	cmp	r3, #64	; 0x40
 810708a:	d10e      	bne.n	81070aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 810708c:	687b      	ldr	r3, [r7, #4]
 810708e:	681b      	ldr	r3, [r3, #0]
 8107090:	68db      	ldr	r3, [r3, #12]
 8107092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107096:	2b40      	cmp	r3, #64	; 0x40
 8107098:	d107      	bne.n	81070aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 810709a:	687b      	ldr	r3, [r7, #4]
 810709c:	681b      	ldr	r3, [r3, #0]
 810709e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 81070a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 81070a4:	6878      	ldr	r0, [r7, #4]
 81070a6:	f000 f838 	bl	810711a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 81070aa:	687b      	ldr	r3, [r7, #4]
 81070ac:	681b      	ldr	r3, [r3, #0]
 81070ae:	691b      	ldr	r3, [r3, #16]
 81070b0:	f003 0320 	and.w	r3, r3, #32
 81070b4:	2b20      	cmp	r3, #32
 81070b6:	d10e      	bne.n	81070d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 81070b8:	687b      	ldr	r3, [r7, #4]
 81070ba:	681b      	ldr	r3, [r3, #0]
 81070bc:	68db      	ldr	r3, [r3, #12]
 81070be:	f003 0320 	and.w	r3, r3, #32
 81070c2:	2b20      	cmp	r3, #32
 81070c4:	d107      	bne.n	81070d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 81070c6:	687b      	ldr	r3, [r7, #4]
 81070c8:	681b      	ldr	r3, [r3, #0]
 81070ca:	f06f 0220 	mvn.w	r2, #32
 81070ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 81070d0:	6878      	ldr	r0, [r7, #4]
 81070d2:	f000 f8c7 	bl	8107264 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 81070d6:	bf00      	nop
 81070d8:	3708      	adds	r7, #8
 81070da:	46bd      	mov	sp, r7
 81070dc:	bd80      	pop	{r7, pc}

081070de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 81070de:	b480      	push	{r7}
 81070e0:	b083      	sub	sp, #12
 81070e2:	af00      	add	r7, sp, #0
 81070e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 81070e6:	bf00      	nop
 81070e8:	370c      	adds	r7, #12
 81070ea:	46bd      	mov	sp, r7
 81070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81070f0:	4770      	bx	lr

081070f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 81070f2:	b480      	push	{r7}
 81070f4:	b083      	sub	sp, #12
 81070f6:	af00      	add	r7, sp, #0
 81070f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 81070fa:	bf00      	nop
 81070fc:	370c      	adds	r7, #12
 81070fe:	46bd      	mov	sp, r7
 8107100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107104:	4770      	bx	lr

08107106 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8107106:	b480      	push	{r7}
 8107108:	b083      	sub	sp, #12
 810710a:	af00      	add	r7, sp, #0
 810710c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 810710e:	bf00      	nop
 8107110:	370c      	adds	r7, #12
 8107112:	46bd      	mov	sp, r7
 8107114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107118:	4770      	bx	lr

0810711a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 810711a:	b480      	push	{r7}
 810711c:	b083      	sub	sp, #12
 810711e:	af00      	add	r7, sp, #0
 8107120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8107122:	bf00      	nop
 8107124:	370c      	adds	r7, #12
 8107126:	46bd      	mov	sp, r7
 8107128:	f85d 7b04 	ldr.w	r7, [sp], #4
 810712c:	4770      	bx	lr
	...

08107130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8107130:	b480      	push	{r7}
 8107132:	b085      	sub	sp, #20
 8107134:	af00      	add	r7, sp, #0
 8107136:	6078      	str	r0, [r7, #4]
 8107138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810713a:	687b      	ldr	r3, [r7, #4]
 810713c:	681b      	ldr	r3, [r3, #0]
 810713e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8107140:	687b      	ldr	r3, [r7, #4]
 8107142:	4a40      	ldr	r2, [pc, #256]	; (8107244 <TIM_Base_SetConfig+0x114>)
 8107144:	4293      	cmp	r3, r2
 8107146:	d013      	beq.n	8107170 <TIM_Base_SetConfig+0x40>
 8107148:	687b      	ldr	r3, [r7, #4]
 810714a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810714e:	d00f      	beq.n	8107170 <TIM_Base_SetConfig+0x40>
 8107150:	687b      	ldr	r3, [r7, #4]
 8107152:	4a3d      	ldr	r2, [pc, #244]	; (8107248 <TIM_Base_SetConfig+0x118>)
 8107154:	4293      	cmp	r3, r2
 8107156:	d00b      	beq.n	8107170 <TIM_Base_SetConfig+0x40>
 8107158:	687b      	ldr	r3, [r7, #4]
 810715a:	4a3c      	ldr	r2, [pc, #240]	; (810724c <TIM_Base_SetConfig+0x11c>)
 810715c:	4293      	cmp	r3, r2
 810715e:	d007      	beq.n	8107170 <TIM_Base_SetConfig+0x40>
 8107160:	687b      	ldr	r3, [r7, #4]
 8107162:	4a3b      	ldr	r2, [pc, #236]	; (8107250 <TIM_Base_SetConfig+0x120>)
 8107164:	4293      	cmp	r3, r2
 8107166:	d003      	beq.n	8107170 <TIM_Base_SetConfig+0x40>
 8107168:	687b      	ldr	r3, [r7, #4]
 810716a:	4a3a      	ldr	r2, [pc, #232]	; (8107254 <TIM_Base_SetConfig+0x124>)
 810716c:	4293      	cmp	r3, r2
 810716e:	d108      	bne.n	8107182 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8107170:	68fb      	ldr	r3, [r7, #12]
 8107172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107176:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8107178:	683b      	ldr	r3, [r7, #0]
 810717a:	685b      	ldr	r3, [r3, #4]
 810717c:	68fa      	ldr	r2, [r7, #12]
 810717e:	4313      	orrs	r3, r2
 8107180:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8107182:	687b      	ldr	r3, [r7, #4]
 8107184:	4a2f      	ldr	r2, [pc, #188]	; (8107244 <TIM_Base_SetConfig+0x114>)
 8107186:	4293      	cmp	r3, r2
 8107188:	d01f      	beq.n	81071ca <TIM_Base_SetConfig+0x9a>
 810718a:	687b      	ldr	r3, [r7, #4]
 810718c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107190:	d01b      	beq.n	81071ca <TIM_Base_SetConfig+0x9a>
 8107192:	687b      	ldr	r3, [r7, #4]
 8107194:	4a2c      	ldr	r2, [pc, #176]	; (8107248 <TIM_Base_SetConfig+0x118>)
 8107196:	4293      	cmp	r3, r2
 8107198:	d017      	beq.n	81071ca <TIM_Base_SetConfig+0x9a>
 810719a:	687b      	ldr	r3, [r7, #4]
 810719c:	4a2b      	ldr	r2, [pc, #172]	; (810724c <TIM_Base_SetConfig+0x11c>)
 810719e:	4293      	cmp	r3, r2
 81071a0:	d013      	beq.n	81071ca <TIM_Base_SetConfig+0x9a>
 81071a2:	687b      	ldr	r3, [r7, #4]
 81071a4:	4a2a      	ldr	r2, [pc, #168]	; (8107250 <TIM_Base_SetConfig+0x120>)
 81071a6:	4293      	cmp	r3, r2
 81071a8:	d00f      	beq.n	81071ca <TIM_Base_SetConfig+0x9a>
 81071aa:	687b      	ldr	r3, [r7, #4]
 81071ac:	4a29      	ldr	r2, [pc, #164]	; (8107254 <TIM_Base_SetConfig+0x124>)
 81071ae:	4293      	cmp	r3, r2
 81071b0:	d00b      	beq.n	81071ca <TIM_Base_SetConfig+0x9a>
 81071b2:	687b      	ldr	r3, [r7, #4]
 81071b4:	4a28      	ldr	r2, [pc, #160]	; (8107258 <TIM_Base_SetConfig+0x128>)
 81071b6:	4293      	cmp	r3, r2
 81071b8:	d007      	beq.n	81071ca <TIM_Base_SetConfig+0x9a>
 81071ba:	687b      	ldr	r3, [r7, #4]
 81071bc:	4a27      	ldr	r2, [pc, #156]	; (810725c <TIM_Base_SetConfig+0x12c>)
 81071be:	4293      	cmp	r3, r2
 81071c0:	d003      	beq.n	81071ca <TIM_Base_SetConfig+0x9a>
 81071c2:	687b      	ldr	r3, [r7, #4]
 81071c4:	4a26      	ldr	r2, [pc, #152]	; (8107260 <TIM_Base_SetConfig+0x130>)
 81071c6:	4293      	cmp	r3, r2
 81071c8:	d108      	bne.n	81071dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 81071ca:	68fb      	ldr	r3, [r7, #12]
 81071cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81071d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 81071d2:	683b      	ldr	r3, [r7, #0]
 81071d4:	68db      	ldr	r3, [r3, #12]
 81071d6:	68fa      	ldr	r2, [r7, #12]
 81071d8:	4313      	orrs	r3, r2
 81071da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 81071dc:	68fb      	ldr	r3, [r7, #12]
 81071de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 81071e2:	683b      	ldr	r3, [r7, #0]
 81071e4:	695b      	ldr	r3, [r3, #20]
 81071e6:	4313      	orrs	r3, r2
 81071e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 81071ea:	687b      	ldr	r3, [r7, #4]
 81071ec:	68fa      	ldr	r2, [r7, #12]
 81071ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 81071f0:	683b      	ldr	r3, [r7, #0]
 81071f2:	689a      	ldr	r2, [r3, #8]
 81071f4:	687b      	ldr	r3, [r7, #4]
 81071f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 81071f8:	683b      	ldr	r3, [r7, #0]
 81071fa:	681a      	ldr	r2, [r3, #0]
 81071fc:	687b      	ldr	r3, [r7, #4]
 81071fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8107200:	687b      	ldr	r3, [r7, #4]
 8107202:	4a10      	ldr	r2, [pc, #64]	; (8107244 <TIM_Base_SetConfig+0x114>)
 8107204:	4293      	cmp	r3, r2
 8107206:	d00f      	beq.n	8107228 <TIM_Base_SetConfig+0xf8>
 8107208:	687b      	ldr	r3, [r7, #4]
 810720a:	4a12      	ldr	r2, [pc, #72]	; (8107254 <TIM_Base_SetConfig+0x124>)
 810720c:	4293      	cmp	r3, r2
 810720e:	d00b      	beq.n	8107228 <TIM_Base_SetConfig+0xf8>
 8107210:	687b      	ldr	r3, [r7, #4]
 8107212:	4a11      	ldr	r2, [pc, #68]	; (8107258 <TIM_Base_SetConfig+0x128>)
 8107214:	4293      	cmp	r3, r2
 8107216:	d007      	beq.n	8107228 <TIM_Base_SetConfig+0xf8>
 8107218:	687b      	ldr	r3, [r7, #4]
 810721a:	4a10      	ldr	r2, [pc, #64]	; (810725c <TIM_Base_SetConfig+0x12c>)
 810721c:	4293      	cmp	r3, r2
 810721e:	d003      	beq.n	8107228 <TIM_Base_SetConfig+0xf8>
 8107220:	687b      	ldr	r3, [r7, #4]
 8107222:	4a0f      	ldr	r2, [pc, #60]	; (8107260 <TIM_Base_SetConfig+0x130>)
 8107224:	4293      	cmp	r3, r2
 8107226:	d103      	bne.n	8107230 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8107228:	683b      	ldr	r3, [r7, #0]
 810722a:	691a      	ldr	r2, [r3, #16]
 810722c:	687b      	ldr	r3, [r7, #4]
 810722e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8107230:	687b      	ldr	r3, [r7, #4]
 8107232:	2201      	movs	r2, #1
 8107234:	615a      	str	r2, [r3, #20]
}
 8107236:	bf00      	nop
 8107238:	3714      	adds	r7, #20
 810723a:	46bd      	mov	sp, r7
 810723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107240:	4770      	bx	lr
 8107242:	bf00      	nop
 8107244:	40010000 	.word	0x40010000
 8107248:	40000400 	.word	0x40000400
 810724c:	40000800 	.word	0x40000800
 8107250:	40000c00 	.word	0x40000c00
 8107254:	40010400 	.word	0x40010400
 8107258:	40014000 	.word	0x40014000
 810725c:	40014400 	.word	0x40014400
 8107260:	40014800 	.word	0x40014800

08107264 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8107264:	b480      	push	{r7}
 8107266:	b083      	sub	sp, #12
 8107268:	af00      	add	r7, sp, #0
 810726a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 810726c:	bf00      	nop
 810726e:	370c      	adds	r7, #12
 8107270:	46bd      	mov	sp, r7
 8107272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107276:	4770      	bx	lr

08107278 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8107278:	b480      	push	{r7}
 810727a:	b083      	sub	sp, #12
 810727c:	af00      	add	r7, sp, #0
 810727e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8107280:	bf00      	nop
 8107282:	370c      	adds	r7, #12
 8107284:	46bd      	mov	sp, r7
 8107286:	f85d 7b04 	ldr.w	r7, [sp], #4
 810728a:	4770      	bx	lr

0810728c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 810728c:	b480      	push	{r7}
 810728e:	b083      	sub	sp, #12
 8107290:	af00      	add	r7, sp, #0
 8107292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8107294:	bf00      	nop
 8107296:	370c      	adds	r7, #12
 8107298:	46bd      	mov	sp, r7
 810729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810729e:	4770      	bx	lr

081072a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 81072a0:	b580      	push	{r7, lr}
 81072a2:	b082      	sub	sp, #8
 81072a4:	af00      	add	r7, sp, #0
 81072a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 81072a8:	687b      	ldr	r3, [r7, #4]
 81072aa:	2b00      	cmp	r3, #0
 81072ac:	d101      	bne.n	81072b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 81072ae:	2301      	movs	r3, #1
 81072b0:	e042      	b.n	8107338 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 81072b2:	687b      	ldr	r3, [r7, #4]
 81072b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81072b8:	2b00      	cmp	r3, #0
 81072ba:	d106      	bne.n	81072ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 81072bc:	687b      	ldr	r3, [r7, #4]
 81072be:	2200      	movs	r2, #0
 81072c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 81072c4:	6878      	ldr	r0, [r7, #4]
 81072c6:	f7fa fd59 	bl	8101d7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 81072ca:	687b      	ldr	r3, [r7, #4]
 81072cc:	2224      	movs	r2, #36	; 0x24
 81072ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 81072d2:	687b      	ldr	r3, [r7, #4]
 81072d4:	681b      	ldr	r3, [r3, #0]
 81072d6:	681a      	ldr	r2, [r3, #0]
 81072d8:	687b      	ldr	r3, [r7, #4]
 81072da:	681b      	ldr	r3, [r3, #0]
 81072dc:	f022 0201 	bic.w	r2, r2, #1
 81072e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 81072e2:	6878      	ldr	r0, [r7, #4]
 81072e4:	f000 f8c2 	bl	810746c <UART_SetConfig>
 81072e8:	4603      	mov	r3, r0
 81072ea:	2b01      	cmp	r3, #1
 81072ec:	d101      	bne.n	81072f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 81072ee:	2301      	movs	r3, #1
 81072f0:	e022      	b.n	8107338 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 81072f2:	687b      	ldr	r3, [r7, #4]
 81072f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81072f6:	2b00      	cmp	r3, #0
 81072f8:	d002      	beq.n	8107300 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 81072fa:	6878      	ldr	r0, [r7, #4]
 81072fc:	f000 fe66 	bl	8107fcc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8107300:	687b      	ldr	r3, [r7, #4]
 8107302:	681b      	ldr	r3, [r3, #0]
 8107304:	685a      	ldr	r2, [r3, #4]
 8107306:	687b      	ldr	r3, [r7, #4]
 8107308:	681b      	ldr	r3, [r3, #0]
 810730a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 810730e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8107310:	687b      	ldr	r3, [r7, #4]
 8107312:	681b      	ldr	r3, [r3, #0]
 8107314:	689a      	ldr	r2, [r3, #8]
 8107316:	687b      	ldr	r3, [r7, #4]
 8107318:	681b      	ldr	r3, [r3, #0]
 810731a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 810731e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8107320:	687b      	ldr	r3, [r7, #4]
 8107322:	681b      	ldr	r3, [r3, #0]
 8107324:	681a      	ldr	r2, [r3, #0]
 8107326:	687b      	ldr	r3, [r7, #4]
 8107328:	681b      	ldr	r3, [r3, #0]
 810732a:	f042 0201 	orr.w	r2, r2, #1
 810732e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8107330:	6878      	ldr	r0, [r7, #4]
 8107332:	f000 feed 	bl	8108110 <UART_CheckIdleState>
 8107336:	4603      	mov	r3, r0
}
 8107338:	4618      	mov	r0, r3
 810733a:	3708      	adds	r7, #8
 810733c:	46bd      	mov	sp, r7
 810733e:	bd80      	pop	{r7, pc}

08107340 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8107340:	b580      	push	{r7, lr}
 8107342:	b08a      	sub	sp, #40	; 0x28
 8107344:	af02      	add	r7, sp, #8
 8107346:	60f8      	str	r0, [r7, #12]
 8107348:	60b9      	str	r1, [r7, #8]
 810734a:	603b      	str	r3, [r7, #0]
 810734c:	4613      	mov	r3, r2
 810734e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8107350:	68fb      	ldr	r3, [r7, #12]
 8107352:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8107356:	2b20      	cmp	r3, #32
 8107358:	f040 8083 	bne.w	8107462 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 810735c:	68bb      	ldr	r3, [r7, #8]
 810735e:	2b00      	cmp	r3, #0
 8107360:	d002      	beq.n	8107368 <HAL_UART_Transmit+0x28>
 8107362:	88fb      	ldrh	r3, [r7, #6]
 8107364:	2b00      	cmp	r3, #0
 8107366:	d101      	bne.n	810736c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8107368:	2301      	movs	r3, #1
 810736a:	e07b      	b.n	8107464 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 810736c:	68fb      	ldr	r3, [r7, #12]
 810736e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8107372:	2b01      	cmp	r3, #1
 8107374:	d101      	bne.n	810737a <HAL_UART_Transmit+0x3a>
 8107376:	2302      	movs	r3, #2
 8107378:	e074      	b.n	8107464 <HAL_UART_Transmit+0x124>
 810737a:	68fb      	ldr	r3, [r7, #12]
 810737c:	2201      	movs	r2, #1
 810737e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107382:	68fb      	ldr	r3, [r7, #12]
 8107384:	2200      	movs	r2, #0
 8107386:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810738a:	68fb      	ldr	r3, [r7, #12]
 810738c:	2221      	movs	r2, #33	; 0x21
 810738e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8107392:	f7fa fe3f 	bl	8102014 <HAL_GetTick>
 8107396:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8107398:	68fb      	ldr	r3, [r7, #12]
 810739a:	88fa      	ldrh	r2, [r7, #6]
 810739c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 81073a0:	68fb      	ldr	r3, [r7, #12]
 81073a2:	88fa      	ldrh	r2, [r7, #6]
 81073a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 81073a8:	68fb      	ldr	r3, [r7, #12]
 81073aa:	689b      	ldr	r3, [r3, #8]
 81073ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81073b0:	d108      	bne.n	81073c4 <HAL_UART_Transmit+0x84>
 81073b2:	68fb      	ldr	r3, [r7, #12]
 81073b4:	691b      	ldr	r3, [r3, #16]
 81073b6:	2b00      	cmp	r3, #0
 81073b8:	d104      	bne.n	81073c4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 81073ba:	2300      	movs	r3, #0
 81073bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 81073be:	68bb      	ldr	r3, [r7, #8]
 81073c0:	61bb      	str	r3, [r7, #24]
 81073c2:	e003      	b.n	81073cc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 81073c4:	68bb      	ldr	r3, [r7, #8]
 81073c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 81073c8:	2300      	movs	r3, #0
 81073ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 81073cc:	68fb      	ldr	r3, [r7, #12]
 81073ce:	2200      	movs	r2, #0
 81073d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 81073d4:	e02c      	b.n	8107430 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 81073d6:	683b      	ldr	r3, [r7, #0]
 81073d8:	9300      	str	r3, [sp, #0]
 81073da:	697b      	ldr	r3, [r7, #20]
 81073dc:	2200      	movs	r2, #0
 81073de:	2180      	movs	r1, #128	; 0x80
 81073e0:	68f8      	ldr	r0, [r7, #12]
 81073e2:	f000 fedd 	bl	81081a0 <UART_WaitOnFlagUntilTimeout>
 81073e6:	4603      	mov	r3, r0
 81073e8:	2b00      	cmp	r3, #0
 81073ea:	d001      	beq.n	81073f0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 81073ec:	2303      	movs	r3, #3
 81073ee:	e039      	b.n	8107464 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 81073f0:	69fb      	ldr	r3, [r7, #28]
 81073f2:	2b00      	cmp	r3, #0
 81073f4:	d10b      	bne.n	810740e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 81073f6:	69bb      	ldr	r3, [r7, #24]
 81073f8:	881b      	ldrh	r3, [r3, #0]
 81073fa:	461a      	mov	r2, r3
 81073fc:	68fb      	ldr	r3, [r7, #12]
 81073fe:	681b      	ldr	r3, [r3, #0]
 8107400:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8107404:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8107406:	69bb      	ldr	r3, [r7, #24]
 8107408:	3302      	adds	r3, #2
 810740a:	61bb      	str	r3, [r7, #24]
 810740c:	e007      	b.n	810741e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 810740e:	69fb      	ldr	r3, [r7, #28]
 8107410:	781a      	ldrb	r2, [r3, #0]
 8107412:	68fb      	ldr	r3, [r7, #12]
 8107414:	681b      	ldr	r3, [r3, #0]
 8107416:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8107418:	69fb      	ldr	r3, [r7, #28]
 810741a:	3301      	adds	r3, #1
 810741c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 810741e:	68fb      	ldr	r3, [r7, #12]
 8107420:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8107424:	b29b      	uxth	r3, r3
 8107426:	3b01      	subs	r3, #1
 8107428:	b29a      	uxth	r2, r3
 810742a:	68fb      	ldr	r3, [r7, #12]
 810742c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8107430:	68fb      	ldr	r3, [r7, #12]
 8107432:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8107436:	b29b      	uxth	r3, r3
 8107438:	2b00      	cmp	r3, #0
 810743a:	d1cc      	bne.n	81073d6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 810743c:	683b      	ldr	r3, [r7, #0]
 810743e:	9300      	str	r3, [sp, #0]
 8107440:	697b      	ldr	r3, [r7, #20]
 8107442:	2200      	movs	r2, #0
 8107444:	2140      	movs	r1, #64	; 0x40
 8107446:	68f8      	ldr	r0, [r7, #12]
 8107448:	f000 feaa 	bl	81081a0 <UART_WaitOnFlagUntilTimeout>
 810744c:	4603      	mov	r3, r0
 810744e:	2b00      	cmp	r3, #0
 8107450:	d001      	beq.n	8107456 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8107452:	2303      	movs	r3, #3
 8107454:	e006      	b.n	8107464 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8107456:	68fb      	ldr	r3, [r7, #12]
 8107458:	2220      	movs	r2, #32
 810745a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 810745e:	2300      	movs	r3, #0
 8107460:	e000      	b.n	8107464 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8107462:	2302      	movs	r3, #2
  }
}
 8107464:	4618      	mov	r0, r3
 8107466:	3720      	adds	r7, #32
 8107468:	46bd      	mov	sp, r7
 810746a:	bd80      	pop	{r7, pc}

0810746c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810746c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8107470:	b08e      	sub	sp, #56	; 0x38
 8107472:	af00      	add	r7, sp, #0
 8107474:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8107476:	2300      	movs	r3, #0
 8107478:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810747c:	687b      	ldr	r3, [r7, #4]
 810747e:	689a      	ldr	r2, [r3, #8]
 8107480:	687b      	ldr	r3, [r7, #4]
 8107482:	691b      	ldr	r3, [r3, #16]
 8107484:	431a      	orrs	r2, r3
 8107486:	687b      	ldr	r3, [r7, #4]
 8107488:	695b      	ldr	r3, [r3, #20]
 810748a:	431a      	orrs	r2, r3
 810748c:	687b      	ldr	r3, [r7, #4]
 810748e:	69db      	ldr	r3, [r3, #28]
 8107490:	4313      	orrs	r3, r2
 8107492:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8107494:	687b      	ldr	r3, [r7, #4]
 8107496:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107498:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810749a:	4313      	orrs	r3, r2
 810749c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810749e:	687b      	ldr	r3, [r7, #4]
 81074a0:	681b      	ldr	r3, [r3, #0]
 81074a2:	681a      	ldr	r2, [r3, #0]
 81074a4:	4bc2      	ldr	r3, [pc, #776]	; (81077b0 <UART_SetConfig+0x344>)
 81074a6:	4013      	ands	r3, r2
 81074a8:	687a      	ldr	r2, [r7, #4]
 81074aa:	6812      	ldr	r2, [r2, #0]
 81074ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 81074ae:	430b      	orrs	r3, r1
 81074b0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 81074b2:	687b      	ldr	r3, [r7, #4]
 81074b4:	681b      	ldr	r3, [r3, #0]
 81074b6:	685b      	ldr	r3, [r3, #4]
 81074b8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 81074bc:	687b      	ldr	r3, [r7, #4]
 81074be:	68da      	ldr	r2, [r3, #12]
 81074c0:	687b      	ldr	r3, [r7, #4]
 81074c2:	681b      	ldr	r3, [r3, #0]
 81074c4:	430a      	orrs	r2, r1
 81074c6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 81074c8:	687b      	ldr	r3, [r7, #4]
 81074ca:	699b      	ldr	r3, [r3, #24]
 81074cc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 81074ce:	687b      	ldr	r3, [r7, #4]
 81074d0:	681b      	ldr	r3, [r3, #0]
 81074d2:	4ab8      	ldr	r2, [pc, #736]	; (81077b4 <UART_SetConfig+0x348>)
 81074d4:	4293      	cmp	r3, r2
 81074d6:	d004      	beq.n	81074e2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 81074d8:	687b      	ldr	r3, [r7, #4]
 81074da:	6a1b      	ldr	r3, [r3, #32]
 81074dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81074de:	4313      	orrs	r3, r2
 81074e0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 81074e2:	687b      	ldr	r3, [r7, #4]
 81074e4:	681b      	ldr	r3, [r3, #0]
 81074e6:	689b      	ldr	r3, [r3, #8]
 81074e8:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 81074ec:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 81074f0:	687a      	ldr	r2, [r7, #4]
 81074f2:	6812      	ldr	r2, [r2, #0]
 81074f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 81074f6:	430b      	orrs	r3, r1
 81074f8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 81074fa:	687b      	ldr	r3, [r7, #4]
 81074fc:	681b      	ldr	r3, [r3, #0]
 81074fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107500:	f023 010f 	bic.w	r1, r3, #15
 8107504:	687b      	ldr	r3, [r7, #4]
 8107506:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8107508:	687b      	ldr	r3, [r7, #4]
 810750a:	681b      	ldr	r3, [r3, #0]
 810750c:	430a      	orrs	r2, r1
 810750e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8107510:	687b      	ldr	r3, [r7, #4]
 8107512:	681b      	ldr	r3, [r3, #0]
 8107514:	4aa8      	ldr	r2, [pc, #672]	; (81077b8 <UART_SetConfig+0x34c>)
 8107516:	4293      	cmp	r3, r2
 8107518:	d177      	bne.n	810760a <UART_SetConfig+0x19e>
 810751a:	4ba8      	ldr	r3, [pc, #672]	; (81077bc <UART_SetConfig+0x350>)
 810751c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810751e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8107522:	2b28      	cmp	r3, #40	; 0x28
 8107524:	d86c      	bhi.n	8107600 <UART_SetConfig+0x194>
 8107526:	a201      	add	r2, pc, #4	; (adr r2, 810752c <UART_SetConfig+0xc0>)
 8107528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810752c:	081075d1 	.word	0x081075d1
 8107530:	08107601 	.word	0x08107601
 8107534:	08107601 	.word	0x08107601
 8107538:	08107601 	.word	0x08107601
 810753c:	08107601 	.word	0x08107601
 8107540:	08107601 	.word	0x08107601
 8107544:	08107601 	.word	0x08107601
 8107548:	08107601 	.word	0x08107601
 810754c:	081075d9 	.word	0x081075d9
 8107550:	08107601 	.word	0x08107601
 8107554:	08107601 	.word	0x08107601
 8107558:	08107601 	.word	0x08107601
 810755c:	08107601 	.word	0x08107601
 8107560:	08107601 	.word	0x08107601
 8107564:	08107601 	.word	0x08107601
 8107568:	08107601 	.word	0x08107601
 810756c:	081075e1 	.word	0x081075e1
 8107570:	08107601 	.word	0x08107601
 8107574:	08107601 	.word	0x08107601
 8107578:	08107601 	.word	0x08107601
 810757c:	08107601 	.word	0x08107601
 8107580:	08107601 	.word	0x08107601
 8107584:	08107601 	.word	0x08107601
 8107588:	08107601 	.word	0x08107601
 810758c:	081075e9 	.word	0x081075e9
 8107590:	08107601 	.word	0x08107601
 8107594:	08107601 	.word	0x08107601
 8107598:	08107601 	.word	0x08107601
 810759c:	08107601 	.word	0x08107601
 81075a0:	08107601 	.word	0x08107601
 81075a4:	08107601 	.word	0x08107601
 81075a8:	08107601 	.word	0x08107601
 81075ac:	081075f1 	.word	0x081075f1
 81075b0:	08107601 	.word	0x08107601
 81075b4:	08107601 	.word	0x08107601
 81075b8:	08107601 	.word	0x08107601
 81075bc:	08107601 	.word	0x08107601
 81075c0:	08107601 	.word	0x08107601
 81075c4:	08107601 	.word	0x08107601
 81075c8:	08107601 	.word	0x08107601
 81075cc:	081075f9 	.word	0x081075f9
 81075d0:	2301      	movs	r3, #1
 81075d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81075d6:	e231      	b.n	8107a3c <UART_SetConfig+0x5d0>
 81075d8:	2304      	movs	r3, #4
 81075da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81075de:	e22d      	b.n	8107a3c <UART_SetConfig+0x5d0>
 81075e0:	2308      	movs	r3, #8
 81075e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81075e6:	e229      	b.n	8107a3c <UART_SetConfig+0x5d0>
 81075e8:	2310      	movs	r3, #16
 81075ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81075ee:	e225      	b.n	8107a3c <UART_SetConfig+0x5d0>
 81075f0:	2320      	movs	r3, #32
 81075f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81075f6:	e221      	b.n	8107a3c <UART_SetConfig+0x5d0>
 81075f8:	2340      	movs	r3, #64	; 0x40
 81075fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81075fe:	e21d      	b.n	8107a3c <UART_SetConfig+0x5d0>
 8107600:	2380      	movs	r3, #128	; 0x80
 8107602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107606:	bf00      	nop
 8107608:	e218      	b.n	8107a3c <UART_SetConfig+0x5d0>
 810760a:	687b      	ldr	r3, [r7, #4]
 810760c:	681b      	ldr	r3, [r3, #0]
 810760e:	4a6c      	ldr	r2, [pc, #432]	; (81077c0 <UART_SetConfig+0x354>)
 8107610:	4293      	cmp	r3, r2
 8107612:	d132      	bne.n	810767a <UART_SetConfig+0x20e>
 8107614:	4b69      	ldr	r3, [pc, #420]	; (81077bc <UART_SetConfig+0x350>)
 8107616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107618:	f003 0307 	and.w	r3, r3, #7
 810761c:	2b05      	cmp	r3, #5
 810761e:	d827      	bhi.n	8107670 <UART_SetConfig+0x204>
 8107620:	a201      	add	r2, pc, #4	; (adr r2, 8107628 <UART_SetConfig+0x1bc>)
 8107622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107626:	bf00      	nop
 8107628:	08107641 	.word	0x08107641
 810762c:	08107649 	.word	0x08107649
 8107630:	08107651 	.word	0x08107651
 8107634:	08107659 	.word	0x08107659
 8107638:	08107661 	.word	0x08107661
 810763c:	08107669 	.word	0x08107669
 8107640:	2300      	movs	r3, #0
 8107642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107646:	e1f9      	b.n	8107a3c <UART_SetConfig+0x5d0>
 8107648:	2304      	movs	r3, #4
 810764a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810764e:	e1f5      	b.n	8107a3c <UART_SetConfig+0x5d0>
 8107650:	2308      	movs	r3, #8
 8107652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107656:	e1f1      	b.n	8107a3c <UART_SetConfig+0x5d0>
 8107658:	2310      	movs	r3, #16
 810765a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810765e:	e1ed      	b.n	8107a3c <UART_SetConfig+0x5d0>
 8107660:	2320      	movs	r3, #32
 8107662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107666:	e1e9      	b.n	8107a3c <UART_SetConfig+0x5d0>
 8107668:	2340      	movs	r3, #64	; 0x40
 810766a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810766e:	e1e5      	b.n	8107a3c <UART_SetConfig+0x5d0>
 8107670:	2380      	movs	r3, #128	; 0x80
 8107672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107676:	bf00      	nop
 8107678:	e1e0      	b.n	8107a3c <UART_SetConfig+0x5d0>
 810767a:	687b      	ldr	r3, [r7, #4]
 810767c:	681b      	ldr	r3, [r3, #0]
 810767e:	4a51      	ldr	r2, [pc, #324]	; (81077c4 <UART_SetConfig+0x358>)
 8107680:	4293      	cmp	r3, r2
 8107682:	d132      	bne.n	81076ea <UART_SetConfig+0x27e>
 8107684:	4b4d      	ldr	r3, [pc, #308]	; (81077bc <UART_SetConfig+0x350>)
 8107686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107688:	f003 0307 	and.w	r3, r3, #7
 810768c:	2b05      	cmp	r3, #5
 810768e:	d827      	bhi.n	81076e0 <UART_SetConfig+0x274>
 8107690:	a201      	add	r2, pc, #4	; (adr r2, 8107698 <UART_SetConfig+0x22c>)
 8107692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107696:	bf00      	nop
 8107698:	081076b1 	.word	0x081076b1
 810769c:	081076b9 	.word	0x081076b9
 81076a0:	081076c1 	.word	0x081076c1
 81076a4:	081076c9 	.word	0x081076c9
 81076a8:	081076d1 	.word	0x081076d1
 81076ac:	081076d9 	.word	0x081076d9
 81076b0:	2300      	movs	r3, #0
 81076b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81076b6:	e1c1      	b.n	8107a3c <UART_SetConfig+0x5d0>
 81076b8:	2304      	movs	r3, #4
 81076ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81076be:	e1bd      	b.n	8107a3c <UART_SetConfig+0x5d0>
 81076c0:	2308      	movs	r3, #8
 81076c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81076c6:	e1b9      	b.n	8107a3c <UART_SetConfig+0x5d0>
 81076c8:	2310      	movs	r3, #16
 81076ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81076ce:	e1b5      	b.n	8107a3c <UART_SetConfig+0x5d0>
 81076d0:	2320      	movs	r3, #32
 81076d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81076d6:	e1b1      	b.n	8107a3c <UART_SetConfig+0x5d0>
 81076d8:	2340      	movs	r3, #64	; 0x40
 81076da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81076de:	e1ad      	b.n	8107a3c <UART_SetConfig+0x5d0>
 81076e0:	2380      	movs	r3, #128	; 0x80
 81076e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81076e6:	bf00      	nop
 81076e8:	e1a8      	b.n	8107a3c <UART_SetConfig+0x5d0>
 81076ea:	687b      	ldr	r3, [r7, #4]
 81076ec:	681b      	ldr	r3, [r3, #0]
 81076ee:	4a36      	ldr	r2, [pc, #216]	; (81077c8 <UART_SetConfig+0x35c>)
 81076f0:	4293      	cmp	r3, r2
 81076f2:	d132      	bne.n	810775a <UART_SetConfig+0x2ee>
 81076f4:	4b31      	ldr	r3, [pc, #196]	; (81077bc <UART_SetConfig+0x350>)
 81076f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81076f8:	f003 0307 	and.w	r3, r3, #7
 81076fc:	2b05      	cmp	r3, #5
 81076fe:	d827      	bhi.n	8107750 <UART_SetConfig+0x2e4>
 8107700:	a201      	add	r2, pc, #4	; (adr r2, 8107708 <UART_SetConfig+0x29c>)
 8107702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107706:	bf00      	nop
 8107708:	08107721 	.word	0x08107721
 810770c:	08107729 	.word	0x08107729
 8107710:	08107731 	.word	0x08107731
 8107714:	08107739 	.word	0x08107739
 8107718:	08107741 	.word	0x08107741
 810771c:	08107749 	.word	0x08107749
 8107720:	2300      	movs	r3, #0
 8107722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107726:	e189      	b.n	8107a3c <UART_SetConfig+0x5d0>
 8107728:	2304      	movs	r3, #4
 810772a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810772e:	e185      	b.n	8107a3c <UART_SetConfig+0x5d0>
 8107730:	2308      	movs	r3, #8
 8107732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107736:	e181      	b.n	8107a3c <UART_SetConfig+0x5d0>
 8107738:	2310      	movs	r3, #16
 810773a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810773e:	e17d      	b.n	8107a3c <UART_SetConfig+0x5d0>
 8107740:	2320      	movs	r3, #32
 8107742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107746:	e179      	b.n	8107a3c <UART_SetConfig+0x5d0>
 8107748:	2340      	movs	r3, #64	; 0x40
 810774a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810774e:	e175      	b.n	8107a3c <UART_SetConfig+0x5d0>
 8107750:	2380      	movs	r3, #128	; 0x80
 8107752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107756:	bf00      	nop
 8107758:	e170      	b.n	8107a3c <UART_SetConfig+0x5d0>
 810775a:	687b      	ldr	r3, [r7, #4]
 810775c:	681b      	ldr	r3, [r3, #0]
 810775e:	4a1b      	ldr	r2, [pc, #108]	; (81077cc <UART_SetConfig+0x360>)
 8107760:	4293      	cmp	r3, r2
 8107762:	d142      	bne.n	81077ea <UART_SetConfig+0x37e>
 8107764:	4b15      	ldr	r3, [pc, #84]	; (81077bc <UART_SetConfig+0x350>)
 8107766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107768:	f003 0307 	and.w	r3, r3, #7
 810776c:	2b05      	cmp	r3, #5
 810776e:	d837      	bhi.n	81077e0 <UART_SetConfig+0x374>
 8107770:	a201      	add	r2, pc, #4	; (adr r2, 8107778 <UART_SetConfig+0x30c>)
 8107772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107776:	bf00      	nop
 8107778:	08107791 	.word	0x08107791
 810777c:	08107799 	.word	0x08107799
 8107780:	081077a1 	.word	0x081077a1
 8107784:	081077a9 	.word	0x081077a9
 8107788:	081077d1 	.word	0x081077d1
 810778c:	081077d9 	.word	0x081077d9
 8107790:	2300      	movs	r3, #0
 8107792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107796:	e151      	b.n	8107a3c <UART_SetConfig+0x5d0>
 8107798:	2304      	movs	r3, #4
 810779a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810779e:	e14d      	b.n	8107a3c <UART_SetConfig+0x5d0>
 81077a0:	2308      	movs	r3, #8
 81077a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81077a6:	e149      	b.n	8107a3c <UART_SetConfig+0x5d0>
 81077a8:	2310      	movs	r3, #16
 81077aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81077ae:	e145      	b.n	8107a3c <UART_SetConfig+0x5d0>
 81077b0:	cfff69f3 	.word	0xcfff69f3
 81077b4:	58000c00 	.word	0x58000c00
 81077b8:	40011000 	.word	0x40011000
 81077bc:	58024400 	.word	0x58024400
 81077c0:	40004400 	.word	0x40004400
 81077c4:	40004800 	.word	0x40004800
 81077c8:	40004c00 	.word	0x40004c00
 81077cc:	40005000 	.word	0x40005000
 81077d0:	2320      	movs	r3, #32
 81077d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81077d6:	e131      	b.n	8107a3c <UART_SetConfig+0x5d0>
 81077d8:	2340      	movs	r3, #64	; 0x40
 81077da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81077de:	e12d      	b.n	8107a3c <UART_SetConfig+0x5d0>
 81077e0:	2380      	movs	r3, #128	; 0x80
 81077e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81077e6:	bf00      	nop
 81077e8:	e128      	b.n	8107a3c <UART_SetConfig+0x5d0>
 81077ea:	687b      	ldr	r3, [r7, #4]
 81077ec:	681b      	ldr	r3, [r3, #0]
 81077ee:	4ab6      	ldr	r2, [pc, #728]	; (8107ac8 <UART_SetConfig+0x65c>)
 81077f0:	4293      	cmp	r3, r2
 81077f2:	d178      	bne.n	81078e6 <UART_SetConfig+0x47a>
 81077f4:	4bb5      	ldr	r3, [pc, #724]	; (8107acc <UART_SetConfig+0x660>)
 81077f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81077f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81077fc:	2b28      	cmp	r3, #40	; 0x28
 81077fe:	d86d      	bhi.n	81078dc <UART_SetConfig+0x470>
 8107800:	a201      	add	r2, pc, #4	; (adr r2, 8107808 <UART_SetConfig+0x39c>)
 8107802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107806:	bf00      	nop
 8107808:	081078ad 	.word	0x081078ad
 810780c:	081078dd 	.word	0x081078dd
 8107810:	081078dd 	.word	0x081078dd
 8107814:	081078dd 	.word	0x081078dd
 8107818:	081078dd 	.word	0x081078dd
 810781c:	081078dd 	.word	0x081078dd
 8107820:	081078dd 	.word	0x081078dd
 8107824:	081078dd 	.word	0x081078dd
 8107828:	081078b5 	.word	0x081078b5
 810782c:	081078dd 	.word	0x081078dd
 8107830:	081078dd 	.word	0x081078dd
 8107834:	081078dd 	.word	0x081078dd
 8107838:	081078dd 	.word	0x081078dd
 810783c:	081078dd 	.word	0x081078dd
 8107840:	081078dd 	.word	0x081078dd
 8107844:	081078dd 	.word	0x081078dd
 8107848:	081078bd 	.word	0x081078bd
 810784c:	081078dd 	.word	0x081078dd
 8107850:	081078dd 	.word	0x081078dd
 8107854:	081078dd 	.word	0x081078dd
 8107858:	081078dd 	.word	0x081078dd
 810785c:	081078dd 	.word	0x081078dd
 8107860:	081078dd 	.word	0x081078dd
 8107864:	081078dd 	.word	0x081078dd
 8107868:	081078c5 	.word	0x081078c5
 810786c:	081078dd 	.word	0x081078dd
 8107870:	081078dd 	.word	0x081078dd
 8107874:	081078dd 	.word	0x081078dd
 8107878:	081078dd 	.word	0x081078dd
 810787c:	081078dd 	.word	0x081078dd
 8107880:	081078dd 	.word	0x081078dd
 8107884:	081078dd 	.word	0x081078dd
 8107888:	081078cd 	.word	0x081078cd
 810788c:	081078dd 	.word	0x081078dd
 8107890:	081078dd 	.word	0x081078dd
 8107894:	081078dd 	.word	0x081078dd
 8107898:	081078dd 	.word	0x081078dd
 810789c:	081078dd 	.word	0x081078dd
 81078a0:	081078dd 	.word	0x081078dd
 81078a4:	081078dd 	.word	0x081078dd
 81078a8:	081078d5 	.word	0x081078d5
 81078ac:	2301      	movs	r3, #1
 81078ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81078b2:	e0c3      	b.n	8107a3c <UART_SetConfig+0x5d0>
 81078b4:	2304      	movs	r3, #4
 81078b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81078ba:	e0bf      	b.n	8107a3c <UART_SetConfig+0x5d0>
 81078bc:	2308      	movs	r3, #8
 81078be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81078c2:	e0bb      	b.n	8107a3c <UART_SetConfig+0x5d0>
 81078c4:	2310      	movs	r3, #16
 81078c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81078ca:	e0b7      	b.n	8107a3c <UART_SetConfig+0x5d0>
 81078cc:	2320      	movs	r3, #32
 81078ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81078d2:	e0b3      	b.n	8107a3c <UART_SetConfig+0x5d0>
 81078d4:	2340      	movs	r3, #64	; 0x40
 81078d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81078da:	e0af      	b.n	8107a3c <UART_SetConfig+0x5d0>
 81078dc:	2380      	movs	r3, #128	; 0x80
 81078de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81078e2:	bf00      	nop
 81078e4:	e0aa      	b.n	8107a3c <UART_SetConfig+0x5d0>
 81078e6:	687b      	ldr	r3, [r7, #4]
 81078e8:	681b      	ldr	r3, [r3, #0]
 81078ea:	4a79      	ldr	r2, [pc, #484]	; (8107ad0 <UART_SetConfig+0x664>)
 81078ec:	4293      	cmp	r3, r2
 81078ee:	d132      	bne.n	8107956 <UART_SetConfig+0x4ea>
 81078f0:	4b76      	ldr	r3, [pc, #472]	; (8107acc <UART_SetConfig+0x660>)
 81078f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81078f4:	f003 0307 	and.w	r3, r3, #7
 81078f8:	2b05      	cmp	r3, #5
 81078fa:	d827      	bhi.n	810794c <UART_SetConfig+0x4e0>
 81078fc:	a201      	add	r2, pc, #4	; (adr r2, 8107904 <UART_SetConfig+0x498>)
 81078fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107902:	bf00      	nop
 8107904:	0810791d 	.word	0x0810791d
 8107908:	08107925 	.word	0x08107925
 810790c:	0810792d 	.word	0x0810792d
 8107910:	08107935 	.word	0x08107935
 8107914:	0810793d 	.word	0x0810793d
 8107918:	08107945 	.word	0x08107945
 810791c:	2300      	movs	r3, #0
 810791e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107922:	e08b      	b.n	8107a3c <UART_SetConfig+0x5d0>
 8107924:	2304      	movs	r3, #4
 8107926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810792a:	e087      	b.n	8107a3c <UART_SetConfig+0x5d0>
 810792c:	2308      	movs	r3, #8
 810792e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107932:	e083      	b.n	8107a3c <UART_SetConfig+0x5d0>
 8107934:	2310      	movs	r3, #16
 8107936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810793a:	e07f      	b.n	8107a3c <UART_SetConfig+0x5d0>
 810793c:	2320      	movs	r3, #32
 810793e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107942:	e07b      	b.n	8107a3c <UART_SetConfig+0x5d0>
 8107944:	2340      	movs	r3, #64	; 0x40
 8107946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810794a:	e077      	b.n	8107a3c <UART_SetConfig+0x5d0>
 810794c:	2380      	movs	r3, #128	; 0x80
 810794e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107952:	bf00      	nop
 8107954:	e072      	b.n	8107a3c <UART_SetConfig+0x5d0>
 8107956:	687b      	ldr	r3, [r7, #4]
 8107958:	681b      	ldr	r3, [r3, #0]
 810795a:	4a5e      	ldr	r2, [pc, #376]	; (8107ad4 <UART_SetConfig+0x668>)
 810795c:	4293      	cmp	r3, r2
 810795e:	d132      	bne.n	81079c6 <UART_SetConfig+0x55a>
 8107960:	4b5a      	ldr	r3, [pc, #360]	; (8107acc <UART_SetConfig+0x660>)
 8107962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107964:	f003 0307 	and.w	r3, r3, #7
 8107968:	2b05      	cmp	r3, #5
 810796a:	d827      	bhi.n	81079bc <UART_SetConfig+0x550>
 810796c:	a201      	add	r2, pc, #4	; (adr r2, 8107974 <UART_SetConfig+0x508>)
 810796e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107972:	bf00      	nop
 8107974:	0810798d 	.word	0x0810798d
 8107978:	08107995 	.word	0x08107995
 810797c:	0810799d 	.word	0x0810799d
 8107980:	081079a5 	.word	0x081079a5
 8107984:	081079ad 	.word	0x081079ad
 8107988:	081079b5 	.word	0x081079b5
 810798c:	2300      	movs	r3, #0
 810798e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107992:	e053      	b.n	8107a3c <UART_SetConfig+0x5d0>
 8107994:	2304      	movs	r3, #4
 8107996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810799a:	e04f      	b.n	8107a3c <UART_SetConfig+0x5d0>
 810799c:	2308      	movs	r3, #8
 810799e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81079a2:	e04b      	b.n	8107a3c <UART_SetConfig+0x5d0>
 81079a4:	2310      	movs	r3, #16
 81079a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81079aa:	e047      	b.n	8107a3c <UART_SetConfig+0x5d0>
 81079ac:	2320      	movs	r3, #32
 81079ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81079b2:	e043      	b.n	8107a3c <UART_SetConfig+0x5d0>
 81079b4:	2340      	movs	r3, #64	; 0x40
 81079b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81079ba:	e03f      	b.n	8107a3c <UART_SetConfig+0x5d0>
 81079bc:	2380      	movs	r3, #128	; 0x80
 81079be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81079c2:	bf00      	nop
 81079c4:	e03a      	b.n	8107a3c <UART_SetConfig+0x5d0>
 81079c6:	687b      	ldr	r3, [r7, #4]
 81079c8:	681b      	ldr	r3, [r3, #0]
 81079ca:	4a43      	ldr	r2, [pc, #268]	; (8107ad8 <UART_SetConfig+0x66c>)
 81079cc:	4293      	cmp	r3, r2
 81079ce:	d132      	bne.n	8107a36 <UART_SetConfig+0x5ca>
 81079d0:	4b3e      	ldr	r3, [pc, #248]	; (8107acc <UART_SetConfig+0x660>)
 81079d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81079d4:	f003 0307 	and.w	r3, r3, #7
 81079d8:	2b05      	cmp	r3, #5
 81079da:	d827      	bhi.n	8107a2c <UART_SetConfig+0x5c0>
 81079dc:	a201      	add	r2, pc, #4	; (adr r2, 81079e4 <UART_SetConfig+0x578>)
 81079de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81079e2:	bf00      	nop
 81079e4:	081079fd 	.word	0x081079fd
 81079e8:	08107a05 	.word	0x08107a05
 81079ec:	08107a0d 	.word	0x08107a0d
 81079f0:	08107a15 	.word	0x08107a15
 81079f4:	08107a1d 	.word	0x08107a1d
 81079f8:	08107a25 	.word	0x08107a25
 81079fc:	2302      	movs	r3, #2
 81079fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107a02:	e01b      	b.n	8107a3c <UART_SetConfig+0x5d0>
 8107a04:	2304      	movs	r3, #4
 8107a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107a0a:	e017      	b.n	8107a3c <UART_SetConfig+0x5d0>
 8107a0c:	2308      	movs	r3, #8
 8107a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107a12:	e013      	b.n	8107a3c <UART_SetConfig+0x5d0>
 8107a14:	2310      	movs	r3, #16
 8107a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107a1a:	e00f      	b.n	8107a3c <UART_SetConfig+0x5d0>
 8107a1c:	2320      	movs	r3, #32
 8107a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107a22:	e00b      	b.n	8107a3c <UART_SetConfig+0x5d0>
 8107a24:	2340      	movs	r3, #64	; 0x40
 8107a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107a2a:	e007      	b.n	8107a3c <UART_SetConfig+0x5d0>
 8107a2c:	2380      	movs	r3, #128	; 0x80
 8107a2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107a32:	bf00      	nop
 8107a34:	e002      	b.n	8107a3c <UART_SetConfig+0x5d0>
 8107a36:	2380      	movs	r3, #128	; 0x80
 8107a38:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8107a3c:	687b      	ldr	r3, [r7, #4]
 8107a3e:	681b      	ldr	r3, [r3, #0]
 8107a40:	4a25      	ldr	r2, [pc, #148]	; (8107ad8 <UART_SetConfig+0x66c>)
 8107a42:	4293      	cmp	r3, r2
 8107a44:	f040 80b8 	bne.w	8107bb8 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8107a48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8107a4c:	2b08      	cmp	r3, #8
 8107a4e:	d019      	beq.n	8107a84 <UART_SetConfig+0x618>
 8107a50:	2b08      	cmp	r3, #8
 8107a52:	dc04      	bgt.n	8107a5e <UART_SetConfig+0x5f2>
 8107a54:	2b02      	cmp	r3, #2
 8107a56:	d009      	beq.n	8107a6c <UART_SetConfig+0x600>
 8107a58:	2b04      	cmp	r3, #4
 8107a5a:	d00b      	beq.n	8107a74 <UART_SetConfig+0x608>
 8107a5c:	e042      	b.n	8107ae4 <UART_SetConfig+0x678>
 8107a5e:	2b20      	cmp	r3, #32
 8107a60:	d02b      	beq.n	8107aba <UART_SetConfig+0x64e>
 8107a62:	2b40      	cmp	r3, #64	; 0x40
 8107a64:	d02c      	beq.n	8107ac0 <UART_SetConfig+0x654>
 8107a66:	2b10      	cmp	r3, #16
 8107a68:	d014      	beq.n	8107a94 <UART_SetConfig+0x628>
 8107a6a:	e03b      	b.n	8107ae4 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8107a6c:	f7fe fafc 	bl	8106068 <HAL_RCCEx_GetD3PCLK1Freq>
 8107a70:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8107a72:	e03d      	b.n	8107af0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107a74:	f107 0314 	add.w	r3, r7, #20
 8107a78:	4618      	mov	r0, r3
 8107a7a:	f7fe fb0b 	bl	8106094 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8107a7e:	69bb      	ldr	r3, [r7, #24]
 8107a80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107a82:	e035      	b.n	8107af0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107a84:	f107 0308 	add.w	r3, r7, #8
 8107a88:	4618      	mov	r0, r3
 8107a8a:	f7fe fc4f 	bl	810632c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8107a8e:	68fb      	ldr	r3, [r7, #12]
 8107a90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107a92:	e02d      	b.n	8107af0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107a94:	4b0d      	ldr	r3, [pc, #52]	; (8107acc <UART_SetConfig+0x660>)
 8107a96:	681b      	ldr	r3, [r3, #0]
 8107a98:	f003 0320 	and.w	r3, r3, #32
 8107a9c:	2b00      	cmp	r3, #0
 8107a9e:	d009      	beq.n	8107ab4 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8107aa0:	4b0a      	ldr	r3, [pc, #40]	; (8107acc <UART_SetConfig+0x660>)
 8107aa2:	681b      	ldr	r3, [r3, #0]
 8107aa4:	08db      	lsrs	r3, r3, #3
 8107aa6:	f003 0303 	and.w	r3, r3, #3
 8107aaa:	4a0c      	ldr	r2, [pc, #48]	; (8107adc <UART_SetConfig+0x670>)
 8107aac:	fa22 f303 	lsr.w	r3, r2, r3
 8107ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8107ab2:	e01d      	b.n	8107af0 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8107ab4:	4b09      	ldr	r3, [pc, #36]	; (8107adc <UART_SetConfig+0x670>)
 8107ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107ab8:	e01a      	b.n	8107af0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8107aba:	4b09      	ldr	r3, [pc, #36]	; (8107ae0 <UART_SetConfig+0x674>)
 8107abc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107abe:	e017      	b.n	8107af0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8107ac0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8107ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107ac6:	e013      	b.n	8107af0 <UART_SetConfig+0x684>
 8107ac8:	40011400 	.word	0x40011400
 8107acc:	58024400 	.word	0x58024400
 8107ad0:	40007800 	.word	0x40007800
 8107ad4:	40007c00 	.word	0x40007c00
 8107ad8:	58000c00 	.word	0x58000c00
 8107adc:	03d09000 	.word	0x03d09000
 8107ae0:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8107ae4:	2300      	movs	r3, #0
 8107ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8107ae8:	2301      	movs	r3, #1
 8107aea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8107aee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8107af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107af2:	2b00      	cmp	r3, #0
 8107af4:	f000 824d 	beq.w	8107f92 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8107af8:	687b      	ldr	r3, [r7, #4]
 8107afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107afc:	4aad      	ldr	r2, [pc, #692]	; (8107db4 <UART_SetConfig+0x948>)
 8107afe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107b02:	461a      	mov	r2, r3
 8107b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107b06:	fbb3 f3f2 	udiv	r3, r3, r2
 8107b0a:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8107b0c:	687b      	ldr	r3, [r7, #4]
 8107b0e:	685a      	ldr	r2, [r3, #4]
 8107b10:	4613      	mov	r3, r2
 8107b12:	005b      	lsls	r3, r3, #1
 8107b14:	4413      	add	r3, r2
 8107b16:	6a3a      	ldr	r2, [r7, #32]
 8107b18:	429a      	cmp	r2, r3
 8107b1a:	d305      	bcc.n	8107b28 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8107b1c:	687b      	ldr	r3, [r7, #4]
 8107b1e:	685b      	ldr	r3, [r3, #4]
 8107b20:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8107b22:	6a3a      	ldr	r2, [r7, #32]
 8107b24:	429a      	cmp	r2, r3
 8107b26:	d903      	bls.n	8107b30 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8107b28:	2301      	movs	r3, #1
 8107b2a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8107b2e:	e230      	b.n	8107f92 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8107b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107b32:	4618      	mov	r0, r3
 8107b34:	f04f 0100 	mov.w	r1, #0
 8107b38:	687b      	ldr	r3, [r7, #4]
 8107b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107b3c:	4a9d      	ldr	r2, [pc, #628]	; (8107db4 <UART_SetConfig+0x948>)
 8107b3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107b42:	b29b      	uxth	r3, r3
 8107b44:	f04f 0400 	mov.w	r4, #0
 8107b48:	461a      	mov	r2, r3
 8107b4a:	4623      	mov	r3, r4
 8107b4c:	f7f9 f904 	bl	8100d58 <__aeabi_uldivmod>
 8107b50:	4603      	mov	r3, r0
 8107b52:	460c      	mov	r4, r1
 8107b54:	4619      	mov	r1, r3
 8107b56:	4622      	mov	r2, r4
 8107b58:	f04f 0300 	mov.w	r3, #0
 8107b5c:	f04f 0400 	mov.w	r4, #0
 8107b60:	0214      	lsls	r4, r2, #8
 8107b62:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8107b66:	020b      	lsls	r3, r1, #8
 8107b68:	687a      	ldr	r2, [r7, #4]
 8107b6a:	6852      	ldr	r2, [r2, #4]
 8107b6c:	0852      	lsrs	r2, r2, #1
 8107b6e:	4611      	mov	r1, r2
 8107b70:	f04f 0200 	mov.w	r2, #0
 8107b74:	eb13 0b01 	adds.w	fp, r3, r1
 8107b78:	eb44 0c02 	adc.w	ip, r4, r2
 8107b7c:	4658      	mov	r0, fp
 8107b7e:	4661      	mov	r1, ip
 8107b80:	687b      	ldr	r3, [r7, #4]
 8107b82:	685b      	ldr	r3, [r3, #4]
 8107b84:	f04f 0400 	mov.w	r4, #0
 8107b88:	461a      	mov	r2, r3
 8107b8a:	4623      	mov	r3, r4
 8107b8c:	f7f9 f8e4 	bl	8100d58 <__aeabi_uldivmod>
 8107b90:	4603      	mov	r3, r0
 8107b92:	460c      	mov	r4, r1
 8107b94:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8107b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107b98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8107b9c:	d308      	bcc.n	8107bb0 <UART_SetConfig+0x744>
 8107b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107ba0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8107ba4:	d204      	bcs.n	8107bb0 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8107ba6:	687b      	ldr	r3, [r7, #4]
 8107ba8:	681b      	ldr	r3, [r3, #0]
 8107baa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8107bac:	60da      	str	r2, [r3, #12]
 8107bae:	e1f0      	b.n	8107f92 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8107bb0:	2301      	movs	r3, #1
 8107bb2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8107bb6:	e1ec      	b.n	8107f92 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8107bb8:	687b      	ldr	r3, [r7, #4]
 8107bba:	69db      	ldr	r3, [r3, #28]
 8107bbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8107bc0:	f040 8100 	bne.w	8107dc4 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8107bc4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8107bc8:	2b40      	cmp	r3, #64	; 0x40
 8107bca:	f200 80b7 	bhi.w	8107d3c <UART_SetConfig+0x8d0>
 8107bce:	a201      	add	r2, pc, #4	; (adr r2, 8107bd4 <UART_SetConfig+0x768>)
 8107bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107bd4:	08107cd9 	.word	0x08107cd9
 8107bd8:	08107ce1 	.word	0x08107ce1
 8107bdc:	08107d3d 	.word	0x08107d3d
 8107be0:	08107d3d 	.word	0x08107d3d
 8107be4:	08107ce9 	.word	0x08107ce9
 8107be8:	08107d3d 	.word	0x08107d3d
 8107bec:	08107d3d 	.word	0x08107d3d
 8107bf0:	08107d3d 	.word	0x08107d3d
 8107bf4:	08107cf9 	.word	0x08107cf9
 8107bf8:	08107d3d 	.word	0x08107d3d
 8107bfc:	08107d3d 	.word	0x08107d3d
 8107c00:	08107d3d 	.word	0x08107d3d
 8107c04:	08107d3d 	.word	0x08107d3d
 8107c08:	08107d3d 	.word	0x08107d3d
 8107c0c:	08107d3d 	.word	0x08107d3d
 8107c10:	08107d3d 	.word	0x08107d3d
 8107c14:	08107d09 	.word	0x08107d09
 8107c18:	08107d3d 	.word	0x08107d3d
 8107c1c:	08107d3d 	.word	0x08107d3d
 8107c20:	08107d3d 	.word	0x08107d3d
 8107c24:	08107d3d 	.word	0x08107d3d
 8107c28:	08107d3d 	.word	0x08107d3d
 8107c2c:	08107d3d 	.word	0x08107d3d
 8107c30:	08107d3d 	.word	0x08107d3d
 8107c34:	08107d3d 	.word	0x08107d3d
 8107c38:	08107d3d 	.word	0x08107d3d
 8107c3c:	08107d3d 	.word	0x08107d3d
 8107c40:	08107d3d 	.word	0x08107d3d
 8107c44:	08107d3d 	.word	0x08107d3d
 8107c48:	08107d3d 	.word	0x08107d3d
 8107c4c:	08107d3d 	.word	0x08107d3d
 8107c50:	08107d3d 	.word	0x08107d3d
 8107c54:	08107d2f 	.word	0x08107d2f
 8107c58:	08107d3d 	.word	0x08107d3d
 8107c5c:	08107d3d 	.word	0x08107d3d
 8107c60:	08107d3d 	.word	0x08107d3d
 8107c64:	08107d3d 	.word	0x08107d3d
 8107c68:	08107d3d 	.word	0x08107d3d
 8107c6c:	08107d3d 	.word	0x08107d3d
 8107c70:	08107d3d 	.word	0x08107d3d
 8107c74:	08107d3d 	.word	0x08107d3d
 8107c78:	08107d3d 	.word	0x08107d3d
 8107c7c:	08107d3d 	.word	0x08107d3d
 8107c80:	08107d3d 	.word	0x08107d3d
 8107c84:	08107d3d 	.word	0x08107d3d
 8107c88:	08107d3d 	.word	0x08107d3d
 8107c8c:	08107d3d 	.word	0x08107d3d
 8107c90:	08107d3d 	.word	0x08107d3d
 8107c94:	08107d3d 	.word	0x08107d3d
 8107c98:	08107d3d 	.word	0x08107d3d
 8107c9c:	08107d3d 	.word	0x08107d3d
 8107ca0:	08107d3d 	.word	0x08107d3d
 8107ca4:	08107d3d 	.word	0x08107d3d
 8107ca8:	08107d3d 	.word	0x08107d3d
 8107cac:	08107d3d 	.word	0x08107d3d
 8107cb0:	08107d3d 	.word	0x08107d3d
 8107cb4:	08107d3d 	.word	0x08107d3d
 8107cb8:	08107d3d 	.word	0x08107d3d
 8107cbc:	08107d3d 	.word	0x08107d3d
 8107cc0:	08107d3d 	.word	0x08107d3d
 8107cc4:	08107d3d 	.word	0x08107d3d
 8107cc8:	08107d3d 	.word	0x08107d3d
 8107ccc:	08107d3d 	.word	0x08107d3d
 8107cd0:	08107d3d 	.word	0x08107d3d
 8107cd4:	08107d35 	.word	0x08107d35
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8107cd8:	f7fe f958 	bl	8105f8c <HAL_RCC_GetPCLK1Freq>
 8107cdc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8107cde:	e033      	b.n	8107d48 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8107ce0:	f7fe f96a 	bl	8105fb8 <HAL_RCC_GetPCLK2Freq>
 8107ce4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8107ce6:	e02f      	b.n	8107d48 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107ce8:	f107 0314 	add.w	r3, r7, #20
 8107cec:	4618      	mov	r0, r3
 8107cee:	f7fe f9d1 	bl	8106094 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8107cf2:	69bb      	ldr	r3, [r7, #24]
 8107cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107cf6:	e027      	b.n	8107d48 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107cf8:	f107 0308 	add.w	r3, r7, #8
 8107cfc:	4618      	mov	r0, r3
 8107cfe:	f7fe fb15 	bl	810632c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8107d02:	68fb      	ldr	r3, [r7, #12]
 8107d04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107d06:	e01f      	b.n	8107d48 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107d08:	4b2b      	ldr	r3, [pc, #172]	; (8107db8 <UART_SetConfig+0x94c>)
 8107d0a:	681b      	ldr	r3, [r3, #0]
 8107d0c:	f003 0320 	and.w	r3, r3, #32
 8107d10:	2b00      	cmp	r3, #0
 8107d12:	d009      	beq.n	8107d28 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8107d14:	4b28      	ldr	r3, [pc, #160]	; (8107db8 <UART_SetConfig+0x94c>)
 8107d16:	681b      	ldr	r3, [r3, #0]
 8107d18:	08db      	lsrs	r3, r3, #3
 8107d1a:	f003 0303 	and.w	r3, r3, #3
 8107d1e:	4a27      	ldr	r2, [pc, #156]	; (8107dbc <UART_SetConfig+0x950>)
 8107d20:	fa22 f303 	lsr.w	r3, r2, r3
 8107d24:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8107d26:	e00f      	b.n	8107d48 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8107d28:	4b24      	ldr	r3, [pc, #144]	; (8107dbc <UART_SetConfig+0x950>)
 8107d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107d2c:	e00c      	b.n	8107d48 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8107d2e:	4b24      	ldr	r3, [pc, #144]	; (8107dc0 <UART_SetConfig+0x954>)
 8107d30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107d32:	e009      	b.n	8107d48 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8107d34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8107d38:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107d3a:	e005      	b.n	8107d48 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8107d3c:	2300      	movs	r3, #0
 8107d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8107d40:	2301      	movs	r3, #1
 8107d42:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8107d46:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8107d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107d4a:	2b00      	cmp	r3, #0
 8107d4c:	f000 8121 	beq.w	8107f92 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8107d50:	687b      	ldr	r3, [r7, #4]
 8107d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107d54:	4a17      	ldr	r2, [pc, #92]	; (8107db4 <UART_SetConfig+0x948>)
 8107d56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107d5a:	461a      	mov	r2, r3
 8107d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107d5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8107d62:	005a      	lsls	r2, r3, #1
 8107d64:	687b      	ldr	r3, [r7, #4]
 8107d66:	685b      	ldr	r3, [r3, #4]
 8107d68:	085b      	lsrs	r3, r3, #1
 8107d6a:	441a      	add	r2, r3
 8107d6c:	687b      	ldr	r3, [r7, #4]
 8107d6e:	685b      	ldr	r3, [r3, #4]
 8107d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8107d74:	b29b      	uxth	r3, r3
 8107d76:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8107d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107d7a:	2b0f      	cmp	r3, #15
 8107d7c:	d916      	bls.n	8107dac <UART_SetConfig+0x940>
 8107d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107d84:	d212      	bcs.n	8107dac <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8107d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107d88:	b29b      	uxth	r3, r3
 8107d8a:	f023 030f 	bic.w	r3, r3, #15
 8107d8e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8107d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107d92:	085b      	lsrs	r3, r3, #1
 8107d94:	b29b      	uxth	r3, r3
 8107d96:	f003 0307 	and.w	r3, r3, #7
 8107d9a:	b29a      	uxth	r2, r3
 8107d9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8107d9e:	4313      	orrs	r3, r2
 8107da0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8107da2:	687b      	ldr	r3, [r7, #4]
 8107da4:	681b      	ldr	r3, [r3, #0]
 8107da6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8107da8:	60da      	str	r2, [r3, #12]
 8107daa:	e0f2      	b.n	8107f92 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8107dac:	2301      	movs	r3, #1
 8107dae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8107db2:	e0ee      	b.n	8107f92 <UART_SetConfig+0xb26>
 8107db4:	0810f184 	.word	0x0810f184
 8107db8:	58024400 	.word	0x58024400
 8107dbc:	03d09000 	.word	0x03d09000
 8107dc0:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8107dc4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8107dc8:	2b40      	cmp	r3, #64	; 0x40
 8107dca:	f200 80b7 	bhi.w	8107f3c <UART_SetConfig+0xad0>
 8107dce:	a201      	add	r2, pc, #4	; (adr r2, 8107dd4 <UART_SetConfig+0x968>)
 8107dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107dd4:	08107ed9 	.word	0x08107ed9
 8107dd8:	08107ee1 	.word	0x08107ee1
 8107ddc:	08107f3d 	.word	0x08107f3d
 8107de0:	08107f3d 	.word	0x08107f3d
 8107de4:	08107ee9 	.word	0x08107ee9
 8107de8:	08107f3d 	.word	0x08107f3d
 8107dec:	08107f3d 	.word	0x08107f3d
 8107df0:	08107f3d 	.word	0x08107f3d
 8107df4:	08107ef9 	.word	0x08107ef9
 8107df8:	08107f3d 	.word	0x08107f3d
 8107dfc:	08107f3d 	.word	0x08107f3d
 8107e00:	08107f3d 	.word	0x08107f3d
 8107e04:	08107f3d 	.word	0x08107f3d
 8107e08:	08107f3d 	.word	0x08107f3d
 8107e0c:	08107f3d 	.word	0x08107f3d
 8107e10:	08107f3d 	.word	0x08107f3d
 8107e14:	08107f09 	.word	0x08107f09
 8107e18:	08107f3d 	.word	0x08107f3d
 8107e1c:	08107f3d 	.word	0x08107f3d
 8107e20:	08107f3d 	.word	0x08107f3d
 8107e24:	08107f3d 	.word	0x08107f3d
 8107e28:	08107f3d 	.word	0x08107f3d
 8107e2c:	08107f3d 	.word	0x08107f3d
 8107e30:	08107f3d 	.word	0x08107f3d
 8107e34:	08107f3d 	.word	0x08107f3d
 8107e38:	08107f3d 	.word	0x08107f3d
 8107e3c:	08107f3d 	.word	0x08107f3d
 8107e40:	08107f3d 	.word	0x08107f3d
 8107e44:	08107f3d 	.word	0x08107f3d
 8107e48:	08107f3d 	.word	0x08107f3d
 8107e4c:	08107f3d 	.word	0x08107f3d
 8107e50:	08107f3d 	.word	0x08107f3d
 8107e54:	08107f2f 	.word	0x08107f2f
 8107e58:	08107f3d 	.word	0x08107f3d
 8107e5c:	08107f3d 	.word	0x08107f3d
 8107e60:	08107f3d 	.word	0x08107f3d
 8107e64:	08107f3d 	.word	0x08107f3d
 8107e68:	08107f3d 	.word	0x08107f3d
 8107e6c:	08107f3d 	.word	0x08107f3d
 8107e70:	08107f3d 	.word	0x08107f3d
 8107e74:	08107f3d 	.word	0x08107f3d
 8107e78:	08107f3d 	.word	0x08107f3d
 8107e7c:	08107f3d 	.word	0x08107f3d
 8107e80:	08107f3d 	.word	0x08107f3d
 8107e84:	08107f3d 	.word	0x08107f3d
 8107e88:	08107f3d 	.word	0x08107f3d
 8107e8c:	08107f3d 	.word	0x08107f3d
 8107e90:	08107f3d 	.word	0x08107f3d
 8107e94:	08107f3d 	.word	0x08107f3d
 8107e98:	08107f3d 	.word	0x08107f3d
 8107e9c:	08107f3d 	.word	0x08107f3d
 8107ea0:	08107f3d 	.word	0x08107f3d
 8107ea4:	08107f3d 	.word	0x08107f3d
 8107ea8:	08107f3d 	.word	0x08107f3d
 8107eac:	08107f3d 	.word	0x08107f3d
 8107eb0:	08107f3d 	.word	0x08107f3d
 8107eb4:	08107f3d 	.word	0x08107f3d
 8107eb8:	08107f3d 	.word	0x08107f3d
 8107ebc:	08107f3d 	.word	0x08107f3d
 8107ec0:	08107f3d 	.word	0x08107f3d
 8107ec4:	08107f3d 	.word	0x08107f3d
 8107ec8:	08107f3d 	.word	0x08107f3d
 8107ecc:	08107f3d 	.word	0x08107f3d
 8107ed0:	08107f3d 	.word	0x08107f3d
 8107ed4:	08107f35 	.word	0x08107f35
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8107ed8:	f7fe f858 	bl	8105f8c <HAL_RCC_GetPCLK1Freq>
 8107edc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8107ede:	e033      	b.n	8107f48 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8107ee0:	f7fe f86a 	bl	8105fb8 <HAL_RCC_GetPCLK2Freq>
 8107ee4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8107ee6:	e02f      	b.n	8107f48 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107ee8:	f107 0314 	add.w	r3, r7, #20
 8107eec:	4618      	mov	r0, r3
 8107eee:	f7fe f8d1 	bl	8106094 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8107ef2:	69bb      	ldr	r3, [r7, #24]
 8107ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107ef6:	e027      	b.n	8107f48 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107ef8:	f107 0308 	add.w	r3, r7, #8
 8107efc:	4618      	mov	r0, r3
 8107efe:	f7fe fa15 	bl	810632c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8107f02:	68fb      	ldr	r3, [r7, #12]
 8107f04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107f06:	e01f      	b.n	8107f48 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107f08:	4b2c      	ldr	r3, [pc, #176]	; (8107fbc <UART_SetConfig+0xb50>)
 8107f0a:	681b      	ldr	r3, [r3, #0]
 8107f0c:	f003 0320 	and.w	r3, r3, #32
 8107f10:	2b00      	cmp	r3, #0
 8107f12:	d009      	beq.n	8107f28 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8107f14:	4b29      	ldr	r3, [pc, #164]	; (8107fbc <UART_SetConfig+0xb50>)
 8107f16:	681b      	ldr	r3, [r3, #0]
 8107f18:	08db      	lsrs	r3, r3, #3
 8107f1a:	f003 0303 	and.w	r3, r3, #3
 8107f1e:	4a28      	ldr	r2, [pc, #160]	; (8107fc0 <UART_SetConfig+0xb54>)
 8107f20:	fa22 f303 	lsr.w	r3, r2, r3
 8107f24:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8107f26:	e00f      	b.n	8107f48 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8107f28:	4b25      	ldr	r3, [pc, #148]	; (8107fc0 <UART_SetConfig+0xb54>)
 8107f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107f2c:	e00c      	b.n	8107f48 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8107f2e:	4b25      	ldr	r3, [pc, #148]	; (8107fc4 <UART_SetConfig+0xb58>)
 8107f30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107f32:	e009      	b.n	8107f48 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8107f34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8107f38:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107f3a:	e005      	b.n	8107f48 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8107f3c:	2300      	movs	r3, #0
 8107f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8107f40:	2301      	movs	r3, #1
 8107f42:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8107f46:	bf00      	nop
    }

    if (pclk != 0U)
 8107f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107f4a:	2b00      	cmp	r3, #0
 8107f4c:	d021      	beq.n	8107f92 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8107f4e:	687b      	ldr	r3, [r7, #4]
 8107f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107f52:	4a1d      	ldr	r2, [pc, #116]	; (8107fc8 <UART_SetConfig+0xb5c>)
 8107f54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107f58:	461a      	mov	r2, r3
 8107f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107f5c:	fbb3 f2f2 	udiv	r2, r3, r2
 8107f60:	687b      	ldr	r3, [r7, #4]
 8107f62:	685b      	ldr	r3, [r3, #4]
 8107f64:	085b      	lsrs	r3, r3, #1
 8107f66:	441a      	add	r2, r3
 8107f68:	687b      	ldr	r3, [r7, #4]
 8107f6a:	685b      	ldr	r3, [r3, #4]
 8107f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8107f70:	b29b      	uxth	r3, r3
 8107f72:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8107f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107f76:	2b0f      	cmp	r3, #15
 8107f78:	d908      	bls.n	8107f8c <UART_SetConfig+0xb20>
 8107f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107f80:	d204      	bcs.n	8107f8c <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8107f82:	687b      	ldr	r3, [r7, #4]
 8107f84:	681b      	ldr	r3, [r3, #0]
 8107f86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8107f88:	60da      	str	r2, [r3, #12]
 8107f8a:	e002      	b.n	8107f92 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8107f8c:	2301      	movs	r3, #1
 8107f8e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8107f92:	687b      	ldr	r3, [r7, #4]
 8107f94:	2201      	movs	r2, #1
 8107f96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8107f9a:	687b      	ldr	r3, [r7, #4]
 8107f9c:	2201      	movs	r2, #1
 8107f9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8107fa2:	687b      	ldr	r3, [r7, #4]
 8107fa4:	2200      	movs	r2, #0
 8107fa6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8107fa8:	687b      	ldr	r3, [r7, #4]
 8107faa:	2200      	movs	r2, #0
 8107fac:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8107fae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8107fb2:	4618      	mov	r0, r3
 8107fb4:	3738      	adds	r7, #56	; 0x38
 8107fb6:	46bd      	mov	sp, r7
 8107fb8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8107fbc:	58024400 	.word	0x58024400
 8107fc0:	03d09000 	.word	0x03d09000
 8107fc4:	003d0900 	.word	0x003d0900
 8107fc8:	0810f184 	.word	0x0810f184

08107fcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8107fcc:	b480      	push	{r7}
 8107fce:	b083      	sub	sp, #12
 8107fd0:	af00      	add	r7, sp, #0
 8107fd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8107fd4:	687b      	ldr	r3, [r7, #4]
 8107fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107fd8:	f003 0301 	and.w	r3, r3, #1
 8107fdc:	2b00      	cmp	r3, #0
 8107fde:	d00a      	beq.n	8107ff6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8107fe0:	687b      	ldr	r3, [r7, #4]
 8107fe2:	681b      	ldr	r3, [r3, #0]
 8107fe4:	685b      	ldr	r3, [r3, #4]
 8107fe6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8107fea:	687b      	ldr	r3, [r7, #4]
 8107fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107fee:	687b      	ldr	r3, [r7, #4]
 8107ff0:	681b      	ldr	r3, [r3, #0]
 8107ff2:	430a      	orrs	r2, r1
 8107ff4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8107ff6:	687b      	ldr	r3, [r7, #4]
 8107ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107ffa:	f003 0302 	and.w	r3, r3, #2
 8107ffe:	2b00      	cmp	r3, #0
 8108000:	d00a      	beq.n	8108018 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8108002:	687b      	ldr	r3, [r7, #4]
 8108004:	681b      	ldr	r3, [r3, #0]
 8108006:	685b      	ldr	r3, [r3, #4]
 8108008:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 810800c:	687b      	ldr	r3, [r7, #4]
 810800e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8108010:	687b      	ldr	r3, [r7, #4]
 8108012:	681b      	ldr	r3, [r3, #0]
 8108014:	430a      	orrs	r2, r1
 8108016:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8108018:	687b      	ldr	r3, [r7, #4]
 810801a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810801c:	f003 0304 	and.w	r3, r3, #4
 8108020:	2b00      	cmp	r3, #0
 8108022:	d00a      	beq.n	810803a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8108024:	687b      	ldr	r3, [r7, #4]
 8108026:	681b      	ldr	r3, [r3, #0]
 8108028:	685b      	ldr	r3, [r3, #4]
 810802a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 810802e:	687b      	ldr	r3, [r7, #4]
 8108030:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8108032:	687b      	ldr	r3, [r7, #4]
 8108034:	681b      	ldr	r3, [r3, #0]
 8108036:	430a      	orrs	r2, r1
 8108038:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810803a:	687b      	ldr	r3, [r7, #4]
 810803c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810803e:	f003 0308 	and.w	r3, r3, #8
 8108042:	2b00      	cmp	r3, #0
 8108044:	d00a      	beq.n	810805c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8108046:	687b      	ldr	r3, [r7, #4]
 8108048:	681b      	ldr	r3, [r3, #0]
 810804a:	685b      	ldr	r3, [r3, #4]
 810804c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8108050:	687b      	ldr	r3, [r7, #4]
 8108052:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8108054:	687b      	ldr	r3, [r7, #4]
 8108056:	681b      	ldr	r3, [r3, #0]
 8108058:	430a      	orrs	r2, r1
 810805a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810805c:	687b      	ldr	r3, [r7, #4]
 810805e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108060:	f003 0310 	and.w	r3, r3, #16
 8108064:	2b00      	cmp	r3, #0
 8108066:	d00a      	beq.n	810807e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8108068:	687b      	ldr	r3, [r7, #4]
 810806a:	681b      	ldr	r3, [r3, #0]
 810806c:	689b      	ldr	r3, [r3, #8]
 810806e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8108072:	687b      	ldr	r3, [r7, #4]
 8108074:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8108076:	687b      	ldr	r3, [r7, #4]
 8108078:	681b      	ldr	r3, [r3, #0]
 810807a:	430a      	orrs	r2, r1
 810807c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810807e:	687b      	ldr	r3, [r7, #4]
 8108080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108082:	f003 0320 	and.w	r3, r3, #32
 8108086:	2b00      	cmp	r3, #0
 8108088:	d00a      	beq.n	81080a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810808a:	687b      	ldr	r3, [r7, #4]
 810808c:	681b      	ldr	r3, [r3, #0]
 810808e:	689b      	ldr	r3, [r3, #8]
 8108090:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8108094:	687b      	ldr	r3, [r7, #4]
 8108096:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8108098:	687b      	ldr	r3, [r7, #4]
 810809a:	681b      	ldr	r3, [r3, #0]
 810809c:	430a      	orrs	r2, r1
 810809e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 81080a0:	687b      	ldr	r3, [r7, #4]
 81080a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81080a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81080a8:	2b00      	cmp	r3, #0
 81080aa:	d01a      	beq.n	81080e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 81080ac:	687b      	ldr	r3, [r7, #4]
 81080ae:	681b      	ldr	r3, [r3, #0]
 81080b0:	685b      	ldr	r3, [r3, #4]
 81080b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 81080b6:	687b      	ldr	r3, [r7, #4]
 81080b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 81080ba:	687b      	ldr	r3, [r7, #4]
 81080bc:	681b      	ldr	r3, [r3, #0]
 81080be:	430a      	orrs	r2, r1
 81080c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 81080c2:	687b      	ldr	r3, [r7, #4]
 81080c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81080c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81080ca:	d10a      	bne.n	81080e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 81080cc:	687b      	ldr	r3, [r7, #4]
 81080ce:	681b      	ldr	r3, [r3, #0]
 81080d0:	685b      	ldr	r3, [r3, #4]
 81080d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 81080d6:	687b      	ldr	r3, [r7, #4]
 81080d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 81080da:	687b      	ldr	r3, [r7, #4]
 81080dc:	681b      	ldr	r3, [r3, #0]
 81080de:	430a      	orrs	r2, r1
 81080e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 81080e2:	687b      	ldr	r3, [r7, #4]
 81080e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81080e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81080ea:	2b00      	cmp	r3, #0
 81080ec:	d00a      	beq.n	8108104 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 81080ee:	687b      	ldr	r3, [r7, #4]
 81080f0:	681b      	ldr	r3, [r3, #0]
 81080f2:	685b      	ldr	r3, [r3, #4]
 81080f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 81080f8:	687b      	ldr	r3, [r7, #4]
 81080fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 81080fc:	687b      	ldr	r3, [r7, #4]
 81080fe:	681b      	ldr	r3, [r3, #0]
 8108100:	430a      	orrs	r2, r1
 8108102:	605a      	str	r2, [r3, #4]
  }
}
 8108104:	bf00      	nop
 8108106:	370c      	adds	r7, #12
 8108108:	46bd      	mov	sp, r7
 810810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810810e:	4770      	bx	lr

08108110 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8108110:	b580      	push	{r7, lr}
 8108112:	b086      	sub	sp, #24
 8108114:	af02      	add	r7, sp, #8
 8108116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8108118:	687b      	ldr	r3, [r7, #4]
 810811a:	2200      	movs	r2, #0
 810811c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8108120:	f7f9 ff78 	bl	8102014 <HAL_GetTick>
 8108124:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8108126:	687b      	ldr	r3, [r7, #4]
 8108128:	681b      	ldr	r3, [r3, #0]
 810812a:	681b      	ldr	r3, [r3, #0]
 810812c:	f003 0308 	and.w	r3, r3, #8
 8108130:	2b08      	cmp	r3, #8
 8108132:	d10e      	bne.n	8108152 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8108134:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8108138:	9300      	str	r3, [sp, #0]
 810813a:	68fb      	ldr	r3, [r7, #12]
 810813c:	2200      	movs	r2, #0
 810813e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8108142:	6878      	ldr	r0, [r7, #4]
 8108144:	f000 f82c 	bl	81081a0 <UART_WaitOnFlagUntilTimeout>
 8108148:	4603      	mov	r3, r0
 810814a:	2b00      	cmp	r3, #0
 810814c:	d001      	beq.n	8108152 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810814e:	2303      	movs	r3, #3
 8108150:	e022      	b.n	8108198 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8108152:	687b      	ldr	r3, [r7, #4]
 8108154:	681b      	ldr	r3, [r3, #0]
 8108156:	681b      	ldr	r3, [r3, #0]
 8108158:	f003 0304 	and.w	r3, r3, #4
 810815c:	2b04      	cmp	r3, #4
 810815e:	d10e      	bne.n	810817e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8108160:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8108164:	9300      	str	r3, [sp, #0]
 8108166:	68fb      	ldr	r3, [r7, #12]
 8108168:	2200      	movs	r2, #0
 810816a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 810816e:	6878      	ldr	r0, [r7, #4]
 8108170:	f000 f816 	bl	81081a0 <UART_WaitOnFlagUntilTimeout>
 8108174:	4603      	mov	r3, r0
 8108176:	2b00      	cmp	r3, #0
 8108178:	d001      	beq.n	810817e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810817a:	2303      	movs	r3, #3
 810817c:	e00c      	b.n	8108198 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810817e:	687b      	ldr	r3, [r7, #4]
 8108180:	2220      	movs	r2, #32
 8108182:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8108186:	687b      	ldr	r3, [r7, #4]
 8108188:	2220      	movs	r2, #32
 810818a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 810818e:	687b      	ldr	r3, [r7, #4]
 8108190:	2200      	movs	r2, #0
 8108192:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8108196:	2300      	movs	r3, #0
}
 8108198:	4618      	mov	r0, r3
 810819a:	3710      	adds	r7, #16
 810819c:	46bd      	mov	sp, r7
 810819e:	bd80      	pop	{r7, pc}

081081a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 81081a0:	b580      	push	{r7, lr}
 81081a2:	b084      	sub	sp, #16
 81081a4:	af00      	add	r7, sp, #0
 81081a6:	60f8      	str	r0, [r7, #12]
 81081a8:	60b9      	str	r1, [r7, #8]
 81081aa:	603b      	str	r3, [r7, #0]
 81081ac:	4613      	mov	r3, r2
 81081ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81081b0:	e062      	b.n	8108278 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81081b2:	69bb      	ldr	r3, [r7, #24]
 81081b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81081b8:	d05e      	beq.n	8108278 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81081ba:	f7f9 ff2b 	bl	8102014 <HAL_GetTick>
 81081be:	4602      	mov	r2, r0
 81081c0:	683b      	ldr	r3, [r7, #0]
 81081c2:	1ad3      	subs	r3, r2, r3
 81081c4:	69ba      	ldr	r2, [r7, #24]
 81081c6:	429a      	cmp	r2, r3
 81081c8:	d302      	bcc.n	81081d0 <UART_WaitOnFlagUntilTimeout+0x30>
 81081ca:	69bb      	ldr	r3, [r7, #24]
 81081cc:	2b00      	cmp	r3, #0
 81081ce:	d11d      	bne.n	810820c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 81081d0:	68fb      	ldr	r3, [r7, #12]
 81081d2:	681b      	ldr	r3, [r3, #0]
 81081d4:	681a      	ldr	r2, [r3, #0]
 81081d6:	68fb      	ldr	r3, [r7, #12]
 81081d8:	681b      	ldr	r3, [r3, #0]
 81081da:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 81081de:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81081e0:	68fb      	ldr	r3, [r7, #12]
 81081e2:	681b      	ldr	r3, [r3, #0]
 81081e4:	689a      	ldr	r2, [r3, #8]
 81081e6:	68fb      	ldr	r3, [r7, #12]
 81081e8:	681b      	ldr	r3, [r3, #0]
 81081ea:	f022 0201 	bic.w	r2, r2, #1
 81081ee:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 81081f0:	68fb      	ldr	r3, [r7, #12]
 81081f2:	2220      	movs	r2, #32
 81081f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 81081f8:	68fb      	ldr	r3, [r7, #12]
 81081fa:	2220      	movs	r2, #32
 81081fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8108200:	68fb      	ldr	r3, [r7, #12]
 8108202:	2200      	movs	r2, #0
 8108204:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8108208:	2303      	movs	r3, #3
 810820a:	e045      	b.n	8108298 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 810820c:	68fb      	ldr	r3, [r7, #12]
 810820e:	681b      	ldr	r3, [r3, #0]
 8108210:	681b      	ldr	r3, [r3, #0]
 8108212:	f003 0304 	and.w	r3, r3, #4
 8108216:	2b00      	cmp	r3, #0
 8108218:	d02e      	beq.n	8108278 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810821a:	68fb      	ldr	r3, [r7, #12]
 810821c:	681b      	ldr	r3, [r3, #0]
 810821e:	69db      	ldr	r3, [r3, #28]
 8108220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8108224:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8108228:	d126      	bne.n	8108278 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810822a:	68fb      	ldr	r3, [r7, #12]
 810822c:	681b      	ldr	r3, [r3, #0]
 810822e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8108232:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8108234:	68fb      	ldr	r3, [r7, #12]
 8108236:	681b      	ldr	r3, [r3, #0]
 8108238:	681a      	ldr	r2, [r3, #0]
 810823a:	68fb      	ldr	r3, [r7, #12]
 810823c:	681b      	ldr	r3, [r3, #0]
 810823e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8108242:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8108244:	68fb      	ldr	r3, [r7, #12]
 8108246:	681b      	ldr	r3, [r3, #0]
 8108248:	689a      	ldr	r2, [r3, #8]
 810824a:	68fb      	ldr	r3, [r7, #12]
 810824c:	681b      	ldr	r3, [r3, #0]
 810824e:	f022 0201 	bic.w	r2, r2, #1
 8108252:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8108254:	68fb      	ldr	r3, [r7, #12]
 8108256:	2220      	movs	r2, #32
 8108258:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 810825c:	68fb      	ldr	r3, [r7, #12]
 810825e:	2220      	movs	r2, #32
 8108260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8108264:	68fb      	ldr	r3, [r7, #12]
 8108266:	2220      	movs	r2, #32
 8108268:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810826c:	68fb      	ldr	r3, [r7, #12]
 810826e:	2200      	movs	r2, #0
 8108270:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8108274:	2303      	movs	r3, #3
 8108276:	e00f      	b.n	8108298 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8108278:	68fb      	ldr	r3, [r7, #12]
 810827a:	681b      	ldr	r3, [r3, #0]
 810827c:	69da      	ldr	r2, [r3, #28]
 810827e:	68bb      	ldr	r3, [r7, #8]
 8108280:	4013      	ands	r3, r2
 8108282:	68ba      	ldr	r2, [r7, #8]
 8108284:	429a      	cmp	r2, r3
 8108286:	bf0c      	ite	eq
 8108288:	2301      	moveq	r3, #1
 810828a:	2300      	movne	r3, #0
 810828c:	b2db      	uxtb	r3, r3
 810828e:	461a      	mov	r2, r3
 8108290:	79fb      	ldrb	r3, [r7, #7]
 8108292:	429a      	cmp	r2, r3
 8108294:	d08d      	beq.n	81081b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8108296:	2300      	movs	r3, #0
}
 8108298:	4618      	mov	r0, r3
 810829a:	3710      	adds	r7, #16
 810829c:	46bd      	mov	sp, r7
 810829e:	bd80      	pop	{r7, pc}

081082a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 81082a0:	b480      	push	{r7}
 81082a2:	b085      	sub	sp, #20
 81082a4:	af00      	add	r7, sp, #0
 81082a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 81082a8:	687b      	ldr	r3, [r7, #4]
 81082aa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 81082ae:	2b01      	cmp	r3, #1
 81082b0:	d101      	bne.n	81082b6 <HAL_UARTEx_DisableFifoMode+0x16>
 81082b2:	2302      	movs	r3, #2
 81082b4:	e027      	b.n	8108306 <HAL_UARTEx_DisableFifoMode+0x66>
 81082b6:	687b      	ldr	r3, [r7, #4]
 81082b8:	2201      	movs	r2, #1
 81082ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 81082be:	687b      	ldr	r3, [r7, #4]
 81082c0:	2224      	movs	r2, #36	; 0x24
 81082c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81082c6:	687b      	ldr	r3, [r7, #4]
 81082c8:	681b      	ldr	r3, [r3, #0]
 81082ca:	681b      	ldr	r3, [r3, #0]
 81082cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81082ce:	687b      	ldr	r3, [r7, #4]
 81082d0:	681b      	ldr	r3, [r3, #0]
 81082d2:	681a      	ldr	r2, [r3, #0]
 81082d4:	687b      	ldr	r3, [r7, #4]
 81082d6:	681b      	ldr	r3, [r3, #0]
 81082d8:	f022 0201 	bic.w	r2, r2, #1
 81082dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 81082de:	68fb      	ldr	r3, [r7, #12]
 81082e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 81082e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 81082e6:	687b      	ldr	r3, [r7, #4]
 81082e8:	2200      	movs	r2, #0
 81082ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81082ec:	687b      	ldr	r3, [r7, #4]
 81082ee:	681b      	ldr	r3, [r3, #0]
 81082f0:	68fa      	ldr	r2, [r7, #12]
 81082f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81082f4:	687b      	ldr	r3, [r7, #4]
 81082f6:	2220      	movs	r2, #32
 81082f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81082fc:	687b      	ldr	r3, [r7, #4]
 81082fe:	2200      	movs	r2, #0
 8108300:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8108304:	2300      	movs	r3, #0
}
 8108306:	4618      	mov	r0, r3
 8108308:	3714      	adds	r7, #20
 810830a:	46bd      	mov	sp, r7
 810830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108310:	4770      	bx	lr

08108312 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8108312:	b580      	push	{r7, lr}
 8108314:	b084      	sub	sp, #16
 8108316:	af00      	add	r7, sp, #0
 8108318:	6078      	str	r0, [r7, #4]
 810831a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810831c:	687b      	ldr	r3, [r7, #4]
 810831e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8108322:	2b01      	cmp	r3, #1
 8108324:	d101      	bne.n	810832a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8108326:	2302      	movs	r3, #2
 8108328:	e02d      	b.n	8108386 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810832a:	687b      	ldr	r3, [r7, #4]
 810832c:	2201      	movs	r2, #1
 810832e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8108332:	687b      	ldr	r3, [r7, #4]
 8108334:	2224      	movs	r2, #36	; 0x24
 8108336:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810833a:	687b      	ldr	r3, [r7, #4]
 810833c:	681b      	ldr	r3, [r3, #0]
 810833e:	681b      	ldr	r3, [r3, #0]
 8108340:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8108342:	687b      	ldr	r3, [r7, #4]
 8108344:	681b      	ldr	r3, [r3, #0]
 8108346:	681a      	ldr	r2, [r3, #0]
 8108348:	687b      	ldr	r3, [r7, #4]
 810834a:	681b      	ldr	r3, [r3, #0]
 810834c:	f022 0201 	bic.w	r2, r2, #1
 8108350:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8108352:	687b      	ldr	r3, [r7, #4]
 8108354:	681b      	ldr	r3, [r3, #0]
 8108356:	689b      	ldr	r3, [r3, #8]
 8108358:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810835c:	687b      	ldr	r3, [r7, #4]
 810835e:	681b      	ldr	r3, [r3, #0]
 8108360:	683a      	ldr	r2, [r7, #0]
 8108362:	430a      	orrs	r2, r1
 8108364:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8108366:	6878      	ldr	r0, [r7, #4]
 8108368:	f000 f850 	bl	810840c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810836c:	687b      	ldr	r3, [r7, #4]
 810836e:	681b      	ldr	r3, [r3, #0]
 8108370:	68fa      	ldr	r2, [r7, #12]
 8108372:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8108374:	687b      	ldr	r3, [r7, #4]
 8108376:	2220      	movs	r2, #32
 8108378:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810837c:	687b      	ldr	r3, [r7, #4]
 810837e:	2200      	movs	r2, #0
 8108380:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8108384:	2300      	movs	r3, #0
}
 8108386:	4618      	mov	r0, r3
 8108388:	3710      	adds	r7, #16
 810838a:	46bd      	mov	sp, r7
 810838c:	bd80      	pop	{r7, pc}

0810838e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810838e:	b580      	push	{r7, lr}
 8108390:	b084      	sub	sp, #16
 8108392:	af00      	add	r7, sp, #0
 8108394:	6078      	str	r0, [r7, #4]
 8108396:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8108398:	687b      	ldr	r3, [r7, #4]
 810839a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 810839e:	2b01      	cmp	r3, #1
 81083a0:	d101      	bne.n	81083a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 81083a2:	2302      	movs	r3, #2
 81083a4:	e02d      	b.n	8108402 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 81083a6:	687b      	ldr	r3, [r7, #4]
 81083a8:	2201      	movs	r2, #1
 81083aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 81083ae:	687b      	ldr	r3, [r7, #4]
 81083b0:	2224      	movs	r2, #36	; 0x24
 81083b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81083b6:	687b      	ldr	r3, [r7, #4]
 81083b8:	681b      	ldr	r3, [r3, #0]
 81083ba:	681b      	ldr	r3, [r3, #0]
 81083bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81083be:	687b      	ldr	r3, [r7, #4]
 81083c0:	681b      	ldr	r3, [r3, #0]
 81083c2:	681a      	ldr	r2, [r3, #0]
 81083c4:	687b      	ldr	r3, [r7, #4]
 81083c6:	681b      	ldr	r3, [r3, #0]
 81083c8:	f022 0201 	bic.w	r2, r2, #1
 81083cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 81083ce:	687b      	ldr	r3, [r7, #4]
 81083d0:	681b      	ldr	r3, [r3, #0]
 81083d2:	689b      	ldr	r3, [r3, #8]
 81083d4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 81083d8:	687b      	ldr	r3, [r7, #4]
 81083da:	681b      	ldr	r3, [r3, #0]
 81083dc:	683a      	ldr	r2, [r7, #0]
 81083de:	430a      	orrs	r2, r1
 81083e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81083e2:	6878      	ldr	r0, [r7, #4]
 81083e4:	f000 f812 	bl	810840c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81083e8:	687b      	ldr	r3, [r7, #4]
 81083ea:	681b      	ldr	r3, [r3, #0]
 81083ec:	68fa      	ldr	r2, [r7, #12]
 81083ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81083f0:	687b      	ldr	r3, [r7, #4]
 81083f2:	2220      	movs	r2, #32
 81083f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81083f8:	687b      	ldr	r3, [r7, #4]
 81083fa:	2200      	movs	r2, #0
 81083fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8108400:	2300      	movs	r3, #0
}
 8108402:	4618      	mov	r0, r3
 8108404:	3710      	adds	r7, #16
 8108406:	46bd      	mov	sp, r7
 8108408:	bd80      	pop	{r7, pc}
	...

0810840c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810840c:	b480      	push	{r7}
 810840e:	b089      	sub	sp, #36	; 0x24
 8108410:	af00      	add	r7, sp, #0
 8108412:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8108414:	4a2f      	ldr	r2, [pc, #188]	; (81084d4 <UARTEx_SetNbDataToProcess+0xc8>)
 8108416:	f107 0314 	add.w	r3, r7, #20
 810841a:	e892 0003 	ldmia.w	r2, {r0, r1}
 810841e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8108422:	4a2d      	ldr	r2, [pc, #180]	; (81084d8 <UARTEx_SetNbDataToProcess+0xcc>)
 8108424:	f107 030c 	add.w	r3, r7, #12
 8108428:	e892 0003 	ldmia.w	r2, {r0, r1}
 810842c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8108430:	687b      	ldr	r3, [r7, #4]
 8108432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108434:	2b00      	cmp	r3, #0
 8108436:	d108      	bne.n	810844a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8108438:	687b      	ldr	r3, [r7, #4]
 810843a:	2201      	movs	r2, #1
 810843c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8108440:	687b      	ldr	r3, [r7, #4]
 8108442:	2201      	movs	r2, #1
 8108444:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8108448:	e03d      	b.n	81084c6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810844a:	2310      	movs	r3, #16
 810844c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810844e:	2310      	movs	r3, #16
 8108450:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8108452:	687b      	ldr	r3, [r7, #4]
 8108454:	681b      	ldr	r3, [r3, #0]
 8108456:	689b      	ldr	r3, [r3, #8]
 8108458:	0e5b      	lsrs	r3, r3, #25
 810845a:	b2db      	uxtb	r3, r3
 810845c:	f003 0307 	and.w	r3, r3, #7
 8108460:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8108462:	687b      	ldr	r3, [r7, #4]
 8108464:	681b      	ldr	r3, [r3, #0]
 8108466:	689b      	ldr	r3, [r3, #8]
 8108468:	0f5b      	lsrs	r3, r3, #29
 810846a:	b2db      	uxtb	r3, r3
 810846c:	f003 0307 	and.w	r3, r3, #7
 8108470:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8108472:	7fbb      	ldrb	r3, [r7, #30]
 8108474:	7f3a      	ldrb	r2, [r7, #28]
 8108476:	f107 0120 	add.w	r1, r7, #32
 810847a:	440a      	add	r2, r1
 810847c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8108480:	fb02 f303 	mul.w	r3, r2, r3
 8108484:	7f3a      	ldrb	r2, [r7, #28]
 8108486:	f107 0120 	add.w	r1, r7, #32
 810848a:	440a      	add	r2, r1
 810848c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8108490:	fb93 f3f2 	sdiv	r3, r3, r2
 8108494:	b29a      	uxth	r2, r3
 8108496:	687b      	ldr	r3, [r7, #4]
 8108498:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 810849c:	7ffb      	ldrb	r3, [r7, #31]
 810849e:	7f7a      	ldrb	r2, [r7, #29]
 81084a0:	f107 0120 	add.w	r1, r7, #32
 81084a4:	440a      	add	r2, r1
 81084a6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 81084aa:	fb02 f303 	mul.w	r3, r2, r3
 81084ae:	7f7a      	ldrb	r2, [r7, #29]
 81084b0:	f107 0120 	add.w	r1, r7, #32
 81084b4:	440a      	add	r2, r1
 81084b6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 81084ba:	fb93 f3f2 	sdiv	r3, r3, r2
 81084be:	b29a      	uxth	r2, r3
 81084c0:	687b      	ldr	r3, [r7, #4]
 81084c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 81084c6:	bf00      	nop
 81084c8:	3724      	adds	r7, #36	; 0x24
 81084ca:	46bd      	mov	sp, r7
 81084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81084d0:	4770      	bx	lr
 81084d2:	bf00      	nop
 81084d4:	0810eef4 	.word	0x0810eef4
 81084d8:	0810eefc 	.word	0x0810eefc

081084dc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 81084dc:	b580      	push	{r7, lr}
 81084de:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 81084e0:	4904      	ldr	r1, [pc, #16]	; (81084f4 <MX_FATFS_Init+0x18>)
 81084e2:	4805      	ldr	r0, [pc, #20]	; (81084f8 <MX_FATFS_Init+0x1c>)
 81084e4:	f000 f8b0 	bl	8108648 <FATFS_LinkDriver>
 81084e8:	4603      	mov	r3, r0
 81084ea:	461a      	mov	r2, r3
 81084ec:	4b03      	ldr	r3, [pc, #12]	; (81084fc <MX_FATFS_Init+0x20>)
 81084ee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 81084f0:	bf00      	nop
 81084f2:	bd80      	pop	{r7, pc}
 81084f4:	1000505c 	.word	0x1000505c
 81084f8:	10000010 	.word	0x10000010
 81084fc:	10005060 	.word	0x10005060

08108500 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8108500:	b480      	push	{r7}
 8108502:	b083      	sub	sp, #12
 8108504:	af00      	add	r7, sp, #0
 8108506:	4603      	mov	r3, r0
 8108508:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 810850a:	4b06      	ldr	r3, [pc, #24]	; (8108524 <USER_initialize+0x24>)
 810850c:	2201      	movs	r2, #1
 810850e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8108510:	4b04      	ldr	r3, [pc, #16]	; (8108524 <USER_initialize+0x24>)
 8108512:	781b      	ldrb	r3, [r3, #0]
 8108514:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8108516:	4618      	mov	r0, r3
 8108518:	370c      	adds	r7, #12
 810851a:	46bd      	mov	sp, r7
 810851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108520:	4770      	bx	lr
 8108522:	bf00      	nop
 8108524:	1000000d 	.word	0x1000000d

08108528 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8108528:	b480      	push	{r7}
 810852a:	b083      	sub	sp, #12
 810852c:	af00      	add	r7, sp, #0
 810852e:	4603      	mov	r3, r0
 8108530:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8108532:	4b06      	ldr	r3, [pc, #24]	; (810854c <USER_status+0x24>)
 8108534:	2201      	movs	r2, #1
 8108536:	701a      	strb	r2, [r3, #0]
    return Stat;
 8108538:	4b04      	ldr	r3, [pc, #16]	; (810854c <USER_status+0x24>)
 810853a:	781b      	ldrb	r3, [r3, #0]
 810853c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 810853e:	4618      	mov	r0, r3
 8108540:	370c      	adds	r7, #12
 8108542:	46bd      	mov	sp, r7
 8108544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108548:	4770      	bx	lr
 810854a:	bf00      	nop
 810854c:	1000000d 	.word	0x1000000d

08108550 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8108550:	b480      	push	{r7}
 8108552:	b085      	sub	sp, #20
 8108554:	af00      	add	r7, sp, #0
 8108556:	60b9      	str	r1, [r7, #8]
 8108558:	607a      	str	r2, [r7, #4]
 810855a:	603b      	str	r3, [r7, #0]
 810855c:	4603      	mov	r3, r0
 810855e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8108560:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8108562:	4618      	mov	r0, r3
 8108564:	3714      	adds	r7, #20
 8108566:	46bd      	mov	sp, r7
 8108568:	f85d 7b04 	ldr.w	r7, [sp], #4
 810856c:	4770      	bx	lr

0810856e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 810856e:	b480      	push	{r7}
 8108570:	b085      	sub	sp, #20
 8108572:	af00      	add	r7, sp, #0
 8108574:	60b9      	str	r1, [r7, #8]
 8108576:	607a      	str	r2, [r7, #4]
 8108578:	603b      	str	r3, [r7, #0]
 810857a:	4603      	mov	r3, r0
 810857c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 810857e:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8108580:	4618      	mov	r0, r3
 8108582:	3714      	adds	r7, #20
 8108584:	46bd      	mov	sp, r7
 8108586:	f85d 7b04 	ldr.w	r7, [sp], #4
 810858a:	4770      	bx	lr

0810858c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 810858c:	b480      	push	{r7}
 810858e:	b085      	sub	sp, #20
 8108590:	af00      	add	r7, sp, #0
 8108592:	4603      	mov	r3, r0
 8108594:	603a      	str	r2, [r7, #0]
 8108596:	71fb      	strb	r3, [r7, #7]
 8108598:	460b      	mov	r3, r1
 810859a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 810859c:	2301      	movs	r3, #1
 810859e:	73fb      	strb	r3, [r7, #15]
    return res;
 81085a0:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 81085a2:	4618      	mov	r0, r3
 81085a4:	3714      	adds	r7, #20
 81085a6:	46bd      	mov	sp, r7
 81085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81085ac:	4770      	bx	lr
	...

081085b0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 81085b0:	b480      	push	{r7}
 81085b2:	b087      	sub	sp, #28
 81085b4:	af00      	add	r7, sp, #0
 81085b6:	60f8      	str	r0, [r7, #12]
 81085b8:	60b9      	str	r1, [r7, #8]
 81085ba:	4613      	mov	r3, r2
 81085bc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 81085be:	2301      	movs	r3, #1
 81085c0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 81085c2:	2300      	movs	r3, #0
 81085c4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 81085c6:	4b1f      	ldr	r3, [pc, #124]	; (8108644 <FATFS_LinkDriverEx+0x94>)
 81085c8:	7a5b      	ldrb	r3, [r3, #9]
 81085ca:	b2db      	uxtb	r3, r3
 81085cc:	2b00      	cmp	r3, #0
 81085ce:	d131      	bne.n	8108634 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 81085d0:	4b1c      	ldr	r3, [pc, #112]	; (8108644 <FATFS_LinkDriverEx+0x94>)
 81085d2:	7a5b      	ldrb	r3, [r3, #9]
 81085d4:	b2db      	uxtb	r3, r3
 81085d6:	461a      	mov	r2, r3
 81085d8:	4b1a      	ldr	r3, [pc, #104]	; (8108644 <FATFS_LinkDriverEx+0x94>)
 81085da:	2100      	movs	r1, #0
 81085dc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 81085de:	4b19      	ldr	r3, [pc, #100]	; (8108644 <FATFS_LinkDriverEx+0x94>)
 81085e0:	7a5b      	ldrb	r3, [r3, #9]
 81085e2:	b2db      	uxtb	r3, r3
 81085e4:	4a17      	ldr	r2, [pc, #92]	; (8108644 <FATFS_LinkDriverEx+0x94>)
 81085e6:	009b      	lsls	r3, r3, #2
 81085e8:	4413      	add	r3, r2
 81085ea:	68fa      	ldr	r2, [r7, #12]
 81085ec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 81085ee:	4b15      	ldr	r3, [pc, #84]	; (8108644 <FATFS_LinkDriverEx+0x94>)
 81085f0:	7a5b      	ldrb	r3, [r3, #9]
 81085f2:	b2db      	uxtb	r3, r3
 81085f4:	461a      	mov	r2, r3
 81085f6:	4b13      	ldr	r3, [pc, #76]	; (8108644 <FATFS_LinkDriverEx+0x94>)
 81085f8:	4413      	add	r3, r2
 81085fa:	79fa      	ldrb	r2, [r7, #7]
 81085fc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 81085fe:	4b11      	ldr	r3, [pc, #68]	; (8108644 <FATFS_LinkDriverEx+0x94>)
 8108600:	7a5b      	ldrb	r3, [r3, #9]
 8108602:	b2db      	uxtb	r3, r3
 8108604:	1c5a      	adds	r2, r3, #1
 8108606:	b2d1      	uxtb	r1, r2
 8108608:	4a0e      	ldr	r2, [pc, #56]	; (8108644 <FATFS_LinkDriverEx+0x94>)
 810860a:	7251      	strb	r1, [r2, #9]
 810860c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 810860e:	7dbb      	ldrb	r3, [r7, #22]
 8108610:	3330      	adds	r3, #48	; 0x30
 8108612:	b2da      	uxtb	r2, r3
 8108614:	68bb      	ldr	r3, [r7, #8]
 8108616:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8108618:	68bb      	ldr	r3, [r7, #8]
 810861a:	3301      	adds	r3, #1
 810861c:	223a      	movs	r2, #58	; 0x3a
 810861e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8108620:	68bb      	ldr	r3, [r7, #8]
 8108622:	3302      	adds	r3, #2
 8108624:	222f      	movs	r2, #47	; 0x2f
 8108626:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8108628:	68bb      	ldr	r3, [r7, #8]
 810862a:	3303      	adds	r3, #3
 810862c:	2200      	movs	r2, #0
 810862e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8108630:	2300      	movs	r3, #0
 8108632:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8108634:	7dfb      	ldrb	r3, [r7, #23]
}
 8108636:	4618      	mov	r0, r3
 8108638:	371c      	adds	r7, #28
 810863a:	46bd      	mov	sp, r7
 810863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108640:	4770      	bx	lr
 8108642:	bf00      	nop
 8108644:	1000022c 	.word	0x1000022c

08108648 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8108648:	b580      	push	{r7, lr}
 810864a:	b082      	sub	sp, #8
 810864c:	af00      	add	r7, sp, #0
 810864e:	6078      	str	r0, [r7, #4]
 8108650:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8108652:	2200      	movs	r2, #0
 8108654:	6839      	ldr	r1, [r7, #0]
 8108656:	6878      	ldr	r0, [r7, #4]
 8108658:	f7ff ffaa 	bl	81085b0 <FATFS_LinkDriverEx>
 810865c:	4603      	mov	r3, r0
}
 810865e:	4618      	mov	r0, r3
 8108660:	3708      	adds	r7, #8
 8108662:	46bd      	mov	sp, r7
 8108664:	bd80      	pop	{r7, pc}

08108666 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8108666:	b480      	push	{r7}
 8108668:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 810866a:	bf00      	nop
 810866c:	46bd      	mov	sp, r7
 810866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108672:	4770      	bx	lr

08108674 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8108674:	b480      	push	{r7}
 8108676:	b085      	sub	sp, #20
 8108678:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810867a:	f3ef 8305 	mrs	r3, IPSR
 810867e:	60bb      	str	r3, [r7, #8]
  return(result);
 8108680:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8108682:	2b00      	cmp	r3, #0
 8108684:	d10f      	bne.n	81086a6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8108686:	f3ef 8310 	mrs	r3, PRIMASK
 810868a:	607b      	str	r3, [r7, #4]
  return(result);
 810868c:	687b      	ldr	r3, [r7, #4]
 810868e:	2b00      	cmp	r3, #0
 8108690:	d105      	bne.n	810869e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8108692:	f3ef 8311 	mrs	r3, BASEPRI
 8108696:	603b      	str	r3, [r7, #0]
  return(result);
 8108698:	683b      	ldr	r3, [r7, #0]
 810869a:	2b00      	cmp	r3, #0
 810869c:	d007      	beq.n	81086ae <osKernelInitialize+0x3a>
 810869e:	4b0e      	ldr	r3, [pc, #56]	; (81086d8 <osKernelInitialize+0x64>)
 81086a0:	681b      	ldr	r3, [r3, #0]
 81086a2:	2b02      	cmp	r3, #2
 81086a4:	d103      	bne.n	81086ae <osKernelInitialize+0x3a>
    stat = osErrorISR;
 81086a6:	f06f 0305 	mvn.w	r3, #5
 81086aa:	60fb      	str	r3, [r7, #12]
 81086ac:	e00c      	b.n	81086c8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 81086ae:	4b0a      	ldr	r3, [pc, #40]	; (81086d8 <osKernelInitialize+0x64>)
 81086b0:	681b      	ldr	r3, [r3, #0]
 81086b2:	2b00      	cmp	r3, #0
 81086b4:	d105      	bne.n	81086c2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 81086b6:	4b08      	ldr	r3, [pc, #32]	; (81086d8 <osKernelInitialize+0x64>)
 81086b8:	2201      	movs	r2, #1
 81086ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 81086bc:	2300      	movs	r3, #0
 81086be:	60fb      	str	r3, [r7, #12]
 81086c0:	e002      	b.n	81086c8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 81086c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 81086c6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 81086c8:	68fb      	ldr	r3, [r7, #12]
}
 81086ca:	4618      	mov	r0, r3
 81086cc:	3714      	adds	r7, #20
 81086ce:	46bd      	mov	sp, r7
 81086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81086d4:	4770      	bx	lr
 81086d6:	bf00      	nop
 81086d8:	10000238 	.word	0x10000238

081086dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 81086dc:	b580      	push	{r7, lr}
 81086de:	b084      	sub	sp, #16
 81086e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81086e2:	f3ef 8305 	mrs	r3, IPSR
 81086e6:	60bb      	str	r3, [r7, #8]
  return(result);
 81086e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 81086ea:	2b00      	cmp	r3, #0
 81086ec:	d10f      	bne.n	810870e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 81086ee:	f3ef 8310 	mrs	r3, PRIMASK
 81086f2:	607b      	str	r3, [r7, #4]
  return(result);
 81086f4:	687b      	ldr	r3, [r7, #4]
 81086f6:	2b00      	cmp	r3, #0
 81086f8:	d105      	bne.n	8108706 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 81086fa:	f3ef 8311 	mrs	r3, BASEPRI
 81086fe:	603b      	str	r3, [r7, #0]
  return(result);
 8108700:	683b      	ldr	r3, [r7, #0]
 8108702:	2b00      	cmp	r3, #0
 8108704:	d007      	beq.n	8108716 <osKernelStart+0x3a>
 8108706:	4b0f      	ldr	r3, [pc, #60]	; (8108744 <osKernelStart+0x68>)
 8108708:	681b      	ldr	r3, [r3, #0]
 810870a:	2b02      	cmp	r3, #2
 810870c:	d103      	bne.n	8108716 <osKernelStart+0x3a>
    stat = osErrorISR;
 810870e:	f06f 0305 	mvn.w	r3, #5
 8108712:	60fb      	str	r3, [r7, #12]
 8108714:	e010      	b.n	8108738 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8108716:	4b0b      	ldr	r3, [pc, #44]	; (8108744 <osKernelStart+0x68>)
 8108718:	681b      	ldr	r3, [r3, #0]
 810871a:	2b01      	cmp	r3, #1
 810871c:	d109      	bne.n	8108732 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 810871e:	f7ff ffa2 	bl	8108666 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8108722:	4b08      	ldr	r3, [pc, #32]	; (8108744 <osKernelStart+0x68>)
 8108724:	2202      	movs	r2, #2
 8108726:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8108728:	f001 f870 	bl	810980c <vTaskStartScheduler>
      stat = osOK;
 810872c:	2300      	movs	r3, #0
 810872e:	60fb      	str	r3, [r7, #12]
 8108730:	e002      	b.n	8108738 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8108732:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8108736:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8108738:	68fb      	ldr	r3, [r7, #12]
}
 810873a:	4618      	mov	r0, r3
 810873c:	3710      	adds	r7, #16
 810873e:	46bd      	mov	sp, r7
 8108740:	bd80      	pop	{r7, pc}
 8108742:	bf00      	nop
 8108744:	10000238 	.word	0x10000238

08108748 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8108748:	b580      	push	{r7, lr}
 810874a:	b090      	sub	sp, #64	; 0x40
 810874c:	af04      	add	r7, sp, #16
 810874e:	60f8      	str	r0, [r7, #12]
 8108750:	60b9      	str	r1, [r7, #8]
 8108752:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8108754:	2300      	movs	r3, #0
 8108756:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8108758:	f3ef 8305 	mrs	r3, IPSR
 810875c:	61fb      	str	r3, [r7, #28]
  return(result);
 810875e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8108760:	2b00      	cmp	r3, #0
 8108762:	f040 808f 	bne.w	8108884 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8108766:	f3ef 8310 	mrs	r3, PRIMASK
 810876a:	61bb      	str	r3, [r7, #24]
  return(result);
 810876c:	69bb      	ldr	r3, [r7, #24]
 810876e:	2b00      	cmp	r3, #0
 8108770:	d105      	bne.n	810877e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8108772:	f3ef 8311 	mrs	r3, BASEPRI
 8108776:	617b      	str	r3, [r7, #20]
  return(result);
 8108778:	697b      	ldr	r3, [r7, #20]
 810877a:	2b00      	cmp	r3, #0
 810877c:	d003      	beq.n	8108786 <osThreadNew+0x3e>
 810877e:	4b44      	ldr	r3, [pc, #272]	; (8108890 <osThreadNew+0x148>)
 8108780:	681b      	ldr	r3, [r3, #0]
 8108782:	2b02      	cmp	r3, #2
 8108784:	d07e      	beq.n	8108884 <osThreadNew+0x13c>
 8108786:	68fb      	ldr	r3, [r7, #12]
 8108788:	2b00      	cmp	r3, #0
 810878a:	d07b      	beq.n	8108884 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 810878c:	2380      	movs	r3, #128	; 0x80
 810878e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8108790:	2318      	movs	r3, #24
 8108792:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8108794:	2300      	movs	r3, #0
 8108796:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8108798:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810879c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 810879e:	687b      	ldr	r3, [r7, #4]
 81087a0:	2b00      	cmp	r3, #0
 81087a2:	d045      	beq.n	8108830 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 81087a4:	687b      	ldr	r3, [r7, #4]
 81087a6:	681b      	ldr	r3, [r3, #0]
 81087a8:	2b00      	cmp	r3, #0
 81087aa:	d002      	beq.n	81087b2 <osThreadNew+0x6a>
        name = attr->name;
 81087ac:	687b      	ldr	r3, [r7, #4]
 81087ae:	681b      	ldr	r3, [r3, #0]
 81087b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 81087b2:	687b      	ldr	r3, [r7, #4]
 81087b4:	699b      	ldr	r3, [r3, #24]
 81087b6:	2b00      	cmp	r3, #0
 81087b8:	d002      	beq.n	81087c0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 81087ba:	687b      	ldr	r3, [r7, #4]
 81087bc:	699b      	ldr	r3, [r3, #24]
 81087be:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 81087c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81087c2:	2b00      	cmp	r3, #0
 81087c4:	d008      	beq.n	81087d8 <osThreadNew+0x90>
 81087c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81087c8:	2b38      	cmp	r3, #56	; 0x38
 81087ca:	d805      	bhi.n	81087d8 <osThreadNew+0x90>
 81087cc:	687b      	ldr	r3, [r7, #4]
 81087ce:	685b      	ldr	r3, [r3, #4]
 81087d0:	f003 0301 	and.w	r3, r3, #1
 81087d4:	2b00      	cmp	r3, #0
 81087d6:	d001      	beq.n	81087dc <osThreadNew+0x94>
        return (NULL);
 81087d8:	2300      	movs	r3, #0
 81087da:	e054      	b.n	8108886 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 81087dc:	687b      	ldr	r3, [r7, #4]
 81087de:	695b      	ldr	r3, [r3, #20]
 81087e0:	2b00      	cmp	r3, #0
 81087e2:	d003      	beq.n	81087ec <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 81087e4:	687b      	ldr	r3, [r7, #4]
 81087e6:	695b      	ldr	r3, [r3, #20]
 81087e8:	089b      	lsrs	r3, r3, #2
 81087ea:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 81087ec:	687b      	ldr	r3, [r7, #4]
 81087ee:	689b      	ldr	r3, [r3, #8]
 81087f0:	2b00      	cmp	r3, #0
 81087f2:	d00e      	beq.n	8108812 <osThreadNew+0xca>
 81087f4:	687b      	ldr	r3, [r7, #4]
 81087f6:	68db      	ldr	r3, [r3, #12]
 81087f8:	2b5b      	cmp	r3, #91	; 0x5b
 81087fa:	d90a      	bls.n	8108812 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 81087fc:	687b      	ldr	r3, [r7, #4]
 81087fe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8108800:	2b00      	cmp	r3, #0
 8108802:	d006      	beq.n	8108812 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8108804:	687b      	ldr	r3, [r7, #4]
 8108806:	695b      	ldr	r3, [r3, #20]
 8108808:	2b00      	cmp	r3, #0
 810880a:	d002      	beq.n	8108812 <osThreadNew+0xca>
        mem = 1;
 810880c:	2301      	movs	r3, #1
 810880e:	623b      	str	r3, [r7, #32]
 8108810:	e010      	b.n	8108834 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8108812:	687b      	ldr	r3, [r7, #4]
 8108814:	689b      	ldr	r3, [r3, #8]
 8108816:	2b00      	cmp	r3, #0
 8108818:	d10c      	bne.n	8108834 <osThreadNew+0xec>
 810881a:	687b      	ldr	r3, [r7, #4]
 810881c:	68db      	ldr	r3, [r3, #12]
 810881e:	2b00      	cmp	r3, #0
 8108820:	d108      	bne.n	8108834 <osThreadNew+0xec>
 8108822:	687b      	ldr	r3, [r7, #4]
 8108824:	691b      	ldr	r3, [r3, #16]
 8108826:	2b00      	cmp	r3, #0
 8108828:	d104      	bne.n	8108834 <osThreadNew+0xec>
          mem = 0;
 810882a:	2300      	movs	r3, #0
 810882c:	623b      	str	r3, [r7, #32]
 810882e:	e001      	b.n	8108834 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8108830:	2300      	movs	r3, #0
 8108832:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8108834:	6a3b      	ldr	r3, [r7, #32]
 8108836:	2b01      	cmp	r3, #1
 8108838:	d110      	bne.n	810885c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810883a:	687b      	ldr	r3, [r7, #4]
 810883c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 810883e:	687a      	ldr	r2, [r7, #4]
 8108840:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8108842:	9202      	str	r2, [sp, #8]
 8108844:	9301      	str	r3, [sp, #4]
 8108846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108848:	9300      	str	r3, [sp, #0]
 810884a:	68bb      	ldr	r3, [r7, #8]
 810884c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810884e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8108850:	68f8      	ldr	r0, [r7, #12]
 8108852:	f000 fe09 	bl	8109468 <xTaskCreateStatic>
 8108856:	4603      	mov	r3, r0
 8108858:	613b      	str	r3, [r7, #16]
 810885a:	e013      	b.n	8108884 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 810885c:	6a3b      	ldr	r3, [r7, #32]
 810885e:	2b00      	cmp	r3, #0
 8108860:	d110      	bne.n	8108884 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8108862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108864:	b29a      	uxth	r2, r3
 8108866:	f107 0310 	add.w	r3, r7, #16
 810886a:	9301      	str	r3, [sp, #4]
 810886c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810886e:	9300      	str	r3, [sp, #0]
 8108870:	68bb      	ldr	r3, [r7, #8]
 8108872:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8108874:	68f8      	ldr	r0, [r7, #12]
 8108876:	f000 fe51 	bl	810951c <xTaskCreate>
 810887a:	4603      	mov	r3, r0
 810887c:	2b01      	cmp	r3, #1
 810887e:	d001      	beq.n	8108884 <osThreadNew+0x13c>
          hTask = NULL;
 8108880:	2300      	movs	r3, #0
 8108882:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8108884:	693b      	ldr	r3, [r7, #16]
}
 8108886:	4618      	mov	r0, r3
 8108888:	3730      	adds	r7, #48	; 0x30
 810888a:	46bd      	mov	sp, r7
 810888c:	bd80      	pop	{r7, pc}
 810888e:	bf00      	nop
 8108890:	10000238 	.word	0x10000238

08108894 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8108894:	b580      	push	{r7, lr}
 8108896:	b086      	sub	sp, #24
 8108898:	af00      	add	r7, sp, #0
 810889a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810889c:	f3ef 8305 	mrs	r3, IPSR
 81088a0:	613b      	str	r3, [r7, #16]
  return(result);
 81088a2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 81088a4:	2b00      	cmp	r3, #0
 81088a6:	d10f      	bne.n	81088c8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 81088a8:	f3ef 8310 	mrs	r3, PRIMASK
 81088ac:	60fb      	str	r3, [r7, #12]
  return(result);
 81088ae:	68fb      	ldr	r3, [r7, #12]
 81088b0:	2b00      	cmp	r3, #0
 81088b2:	d105      	bne.n	81088c0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 81088b4:	f3ef 8311 	mrs	r3, BASEPRI
 81088b8:	60bb      	str	r3, [r7, #8]
  return(result);
 81088ba:	68bb      	ldr	r3, [r7, #8]
 81088bc:	2b00      	cmp	r3, #0
 81088be:	d007      	beq.n	81088d0 <osDelay+0x3c>
 81088c0:	4b0a      	ldr	r3, [pc, #40]	; (81088ec <osDelay+0x58>)
 81088c2:	681b      	ldr	r3, [r3, #0]
 81088c4:	2b02      	cmp	r3, #2
 81088c6:	d103      	bne.n	81088d0 <osDelay+0x3c>
    stat = osErrorISR;
 81088c8:	f06f 0305 	mvn.w	r3, #5
 81088cc:	617b      	str	r3, [r7, #20]
 81088ce:	e007      	b.n	81088e0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 81088d0:	2300      	movs	r3, #0
 81088d2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 81088d4:	687b      	ldr	r3, [r7, #4]
 81088d6:	2b00      	cmp	r3, #0
 81088d8:	d002      	beq.n	81088e0 <osDelay+0x4c>
      vTaskDelay(ticks);
 81088da:	6878      	ldr	r0, [r7, #4]
 81088dc:	f000 ff62 	bl	81097a4 <vTaskDelay>
    }
  }

  return (stat);
 81088e0:	697b      	ldr	r3, [r7, #20]
}
 81088e2:	4618      	mov	r0, r3
 81088e4:	3718      	adds	r7, #24
 81088e6:	46bd      	mov	sp, r7
 81088e8:	bd80      	pop	{r7, pc}
 81088ea:	bf00      	nop
 81088ec:	10000238 	.word	0x10000238

081088f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 81088f0:	b480      	push	{r7}
 81088f2:	b085      	sub	sp, #20
 81088f4:	af00      	add	r7, sp, #0
 81088f6:	60f8      	str	r0, [r7, #12]
 81088f8:	60b9      	str	r1, [r7, #8]
 81088fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 81088fc:	68fb      	ldr	r3, [r7, #12]
 81088fe:	4a07      	ldr	r2, [pc, #28]	; (810891c <vApplicationGetIdleTaskMemory+0x2c>)
 8108900:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8108902:	68bb      	ldr	r3, [r7, #8]
 8108904:	4a06      	ldr	r2, [pc, #24]	; (8108920 <vApplicationGetIdleTaskMemory+0x30>)
 8108906:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8108908:	687b      	ldr	r3, [r7, #4]
 810890a:	2280      	movs	r2, #128	; 0x80
 810890c:	601a      	str	r2, [r3, #0]
}
 810890e:	bf00      	nop
 8108910:	3714      	adds	r7, #20
 8108912:	46bd      	mov	sp, r7
 8108914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108918:	4770      	bx	lr
 810891a:	bf00      	nop
 810891c:	1000023c 	.word	0x1000023c
 8108920:	10000298 	.word	0x10000298

08108924 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8108924:	b480      	push	{r7}
 8108926:	b085      	sub	sp, #20
 8108928:	af00      	add	r7, sp, #0
 810892a:	60f8      	str	r0, [r7, #12]
 810892c:	60b9      	str	r1, [r7, #8]
 810892e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8108930:	68fb      	ldr	r3, [r7, #12]
 8108932:	4a07      	ldr	r2, [pc, #28]	; (8108950 <vApplicationGetTimerTaskMemory+0x2c>)
 8108934:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8108936:	68bb      	ldr	r3, [r7, #8]
 8108938:	4a06      	ldr	r2, [pc, #24]	; (8108954 <vApplicationGetTimerTaskMemory+0x30>)
 810893a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 810893c:	687b      	ldr	r3, [r7, #4]
 810893e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8108942:	601a      	str	r2, [r3, #0]
}
 8108944:	bf00      	nop
 8108946:	3714      	adds	r7, #20
 8108948:	46bd      	mov	sp, r7
 810894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810894e:	4770      	bx	lr
 8108950:	10000498 	.word	0x10000498
 8108954:	100004f4 	.word	0x100004f4

08108958 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8108958:	b480      	push	{r7}
 810895a:	b083      	sub	sp, #12
 810895c:	af00      	add	r7, sp, #0
 810895e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8108960:	687b      	ldr	r3, [r7, #4]
 8108962:	f103 0208 	add.w	r2, r3, #8
 8108966:	687b      	ldr	r3, [r7, #4]
 8108968:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 810896a:	687b      	ldr	r3, [r7, #4]
 810896c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8108970:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8108972:	687b      	ldr	r3, [r7, #4]
 8108974:	f103 0208 	add.w	r2, r3, #8
 8108978:	687b      	ldr	r3, [r7, #4]
 810897a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810897c:	687b      	ldr	r3, [r7, #4]
 810897e:	f103 0208 	add.w	r2, r3, #8
 8108982:	687b      	ldr	r3, [r7, #4]
 8108984:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8108986:	687b      	ldr	r3, [r7, #4]
 8108988:	2200      	movs	r2, #0
 810898a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 810898c:	bf00      	nop
 810898e:	370c      	adds	r7, #12
 8108990:	46bd      	mov	sp, r7
 8108992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108996:	4770      	bx	lr

08108998 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8108998:	b480      	push	{r7}
 810899a:	b083      	sub	sp, #12
 810899c:	af00      	add	r7, sp, #0
 810899e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 81089a0:	687b      	ldr	r3, [r7, #4]
 81089a2:	2200      	movs	r2, #0
 81089a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 81089a6:	bf00      	nop
 81089a8:	370c      	adds	r7, #12
 81089aa:	46bd      	mov	sp, r7
 81089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81089b0:	4770      	bx	lr

081089b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 81089b2:	b480      	push	{r7}
 81089b4:	b085      	sub	sp, #20
 81089b6:	af00      	add	r7, sp, #0
 81089b8:	6078      	str	r0, [r7, #4]
 81089ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 81089bc:	687b      	ldr	r3, [r7, #4]
 81089be:	685b      	ldr	r3, [r3, #4]
 81089c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 81089c2:	683b      	ldr	r3, [r7, #0]
 81089c4:	68fa      	ldr	r2, [r7, #12]
 81089c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 81089c8:	68fb      	ldr	r3, [r7, #12]
 81089ca:	689a      	ldr	r2, [r3, #8]
 81089cc:	683b      	ldr	r3, [r7, #0]
 81089ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 81089d0:	68fb      	ldr	r3, [r7, #12]
 81089d2:	689b      	ldr	r3, [r3, #8]
 81089d4:	683a      	ldr	r2, [r7, #0]
 81089d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 81089d8:	68fb      	ldr	r3, [r7, #12]
 81089da:	683a      	ldr	r2, [r7, #0]
 81089dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 81089de:	683b      	ldr	r3, [r7, #0]
 81089e0:	687a      	ldr	r2, [r7, #4]
 81089e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 81089e4:	687b      	ldr	r3, [r7, #4]
 81089e6:	681b      	ldr	r3, [r3, #0]
 81089e8:	1c5a      	adds	r2, r3, #1
 81089ea:	687b      	ldr	r3, [r7, #4]
 81089ec:	601a      	str	r2, [r3, #0]
}
 81089ee:	bf00      	nop
 81089f0:	3714      	adds	r7, #20
 81089f2:	46bd      	mov	sp, r7
 81089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81089f8:	4770      	bx	lr

081089fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 81089fa:	b480      	push	{r7}
 81089fc:	b085      	sub	sp, #20
 81089fe:	af00      	add	r7, sp, #0
 8108a00:	6078      	str	r0, [r7, #4]
 8108a02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8108a04:	683b      	ldr	r3, [r7, #0]
 8108a06:	681b      	ldr	r3, [r3, #0]
 8108a08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8108a0a:	68bb      	ldr	r3, [r7, #8]
 8108a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8108a10:	d103      	bne.n	8108a1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8108a12:	687b      	ldr	r3, [r7, #4]
 8108a14:	691b      	ldr	r3, [r3, #16]
 8108a16:	60fb      	str	r3, [r7, #12]
 8108a18:	e00c      	b.n	8108a34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8108a1a:	687b      	ldr	r3, [r7, #4]
 8108a1c:	3308      	adds	r3, #8
 8108a1e:	60fb      	str	r3, [r7, #12]
 8108a20:	e002      	b.n	8108a28 <vListInsert+0x2e>
 8108a22:	68fb      	ldr	r3, [r7, #12]
 8108a24:	685b      	ldr	r3, [r3, #4]
 8108a26:	60fb      	str	r3, [r7, #12]
 8108a28:	68fb      	ldr	r3, [r7, #12]
 8108a2a:	685b      	ldr	r3, [r3, #4]
 8108a2c:	681b      	ldr	r3, [r3, #0]
 8108a2e:	68ba      	ldr	r2, [r7, #8]
 8108a30:	429a      	cmp	r2, r3
 8108a32:	d2f6      	bcs.n	8108a22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8108a34:	68fb      	ldr	r3, [r7, #12]
 8108a36:	685a      	ldr	r2, [r3, #4]
 8108a38:	683b      	ldr	r3, [r7, #0]
 8108a3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8108a3c:	683b      	ldr	r3, [r7, #0]
 8108a3e:	685b      	ldr	r3, [r3, #4]
 8108a40:	683a      	ldr	r2, [r7, #0]
 8108a42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8108a44:	683b      	ldr	r3, [r7, #0]
 8108a46:	68fa      	ldr	r2, [r7, #12]
 8108a48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8108a4a:	68fb      	ldr	r3, [r7, #12]
 8108a4c:	683a      	ldr	r2, [r7, #0]
 8108a4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8108a50:	683b      	ldr	r3, [r7, #0]
 8108a52:	687a      	ldr	r2, [r7, #4]
 8108a54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8108a56:	687b      	ldr	r3, [r7, #4]
 8108a58:	681b      	ldr	r3, [r3, #0]
 8108a5a:	1c5a      	adds	r2, r3, #1
 8108a5c:	687b      	ldr	r3, [r7, #4]
 8108a5e:	601a      	str	r2, [r3, #0]
}
 8108a60:	bf00      	nop
 8108a62:	3714      	adds	r7, #20
 8108a64:	46bd      	mov	sp, r7
 8108a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108a6a:	4770      	bx	lr

08108a6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8108a6c:	b480      	push	{r7}
 8108a6e:	b085      	sub	sp, #20
 8108a70:	af00      	add	r7, sp, #0
 8108a72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8108a74:	687b      	ldr	r3, [r7, #4]
 8108a76:	691b      	ldr	r3, [r3, #16]
 8108a78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8108a7a:	687b      	ldr	r3, [r7, #4]
 8108a7c:	685b      	ldr	r3, [r3, #4]
 8108a7e:	687a      	ldr	r2, [r7, #4]
 8108a80:	6892      	ldr	r2, [r2, #8]
 8108a82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8108a84:	687b      	ldr	r3, [r7, #4]
 8108a86:	689b      	ldr	r3, [r3, #8]
 8108a88:	687a      	ldr	r2, [r7, #4]
 8108a8a:	6852      	ldr	r2, [r2, #4]
 8108a8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8108a8e:	68fb      	ldr	r3, [r7, #12]
 8108a90:	685b      	ldr	r3, [r3, #4]
 8108a92:	687a      	ldr	r2, [r7, #4]
 8108a94:	429a      	cmp	r2, r3
 8108a96:	d103      	bne.n	8108aa0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8108a98:	687b      	ldr	r3, [r7, #4]
 8108a9a:	689a      	ldr	r2, [r3, #8]
 8108a9c:	68fb      	ldr	r3, [r7, #12]
 8108a9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8108aa0:	687b      	ldr	r3, [r7, #4]
 8108aa2:	2200      	movs	r2, #0
 8108aa4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8108aa6:	68fb      	ldr	r3, [r7, #12]
 8108aa8:	681b      	ldr	r3, [r3, #0]
 8108aaa:	1e5a      	subs	r2, r3, #1
 8108aac:	68fb      	ldr	r3, [r7, #12]
 8108aae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8108ab0:	68fb      	ldr	r3, [r7, #12]
 8108ab2:	681b      	ldr	r3, [r3, #0]
}
 8108ab4:	4618      	mov	r0, r3
 8108ab6:	3714      	adds	r7, #20
 8108ab8:	46bd      	mov	sp, r7
 8108aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108abe:	4770      	bx	lr

08108ac0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8108ac0:	b580      	push	{r7, lr}
 8108ac2:	b084      	sub	sp, #16
 8108ac4:	af00      	add	r7, sp, #0
 8108ac6:	6078      	str	r0, [r7, #4]
 8108ac8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8108aca:	687b      	ldr	r3, [r7, #4]
 8108acc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8108ace:	68fb      	ldr	r3, [r7, #12]
 8108ad0:	2b00      	cmp	r3, #0
 8108ad2:	d109      	bne.n	8108ae8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8108ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108ad8:	f383 8811 	msr	BASEPRI, r3
 8108adc:	f3bf 8f6f 	isb	sy
 8108ae0:	f3bf 8f4f 	dsb	sy
 8108ae4:	60bb      	str	r3, [r7, #8]
 8108ae6:	e7fe      	b.n	8108ae6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8108ae8:	f002 f810 	bl	810ab0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8108aec:	68fb      	ldr	r3, [r7, #12]
 8108aee:	681a      	ldr	r2, [r3, #0]
 8108af0:	68fb      	ldr	r3, [r7, #12]
 8108af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108af4:	68f9      	ldr	r1, [r7, #12]
 8108af6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8108af8:	fb01 f303 	mul.w	r3, r1, r3
 8108afc:	441a      	add	r2, r3
 8108afe:	68fb      	ldr	r3, [r7, #12]
 8108b00:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8108b02:	68fb      	ldr	r3, [r7, #12]
 8108b04:	2200      	movs	r2, #0
 8108b06:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8108b08:	68fb      	ldr	r3, [r7, #12]
 8108b0a:	681a      	ldr	r2, [r3, #0]
 8108b0c:	68fb      	ldr	r3, [r7, #12]
 8108b0e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8108b10:	68fb      	ldr	r3, [r7, #12]
 8108b12:	681a      	ldr	r2, [r3, #0]
 8108b14:	68fb      	ldr	r3, [r7, #12]
 8108b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108b18:	3b01      	subs	r3, #1
 8108b1a:	68f9      	ldr	r1, [r7, #12]
 8108b1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8108b1e:	fb01 f303 	mul.w	r3, r1, r3
 8108b22:	441a      	add	r2, r3
 8108b24:	68fb      	ldr	r3, [r7, #12]
 8108b26:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8108b28:	68fb      	ldr	r3, [r7, #12]
 8108b2a:	22ff      	movs	r2, #255	; 0xff
 8108b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8108b30:	68fb      	ldr	r3, [r7, #12]
 8108b32:	22ff      	movs	r2, #255	; 0xff
 8108b34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8108b38:	683b      	ldr	r3, [r7, #0]
 8108b3a:	2b00      	cmp	r3, #0
 8108b3c:	d114      	bne.n	8108b68 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8108b3e:	68fb      	ldr	r3, [r7, #12]
 8108b40:	691b      	ldr	r3, [r3, #16]
 8108b42:	2b00      	cmp	r3, #0
 8108b44:	d01a      	beq.n	8108b7c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8108b46:	68fb      	ldr	r3, [r7, #12]
 8108b48:	3310      	adds	r3, #16
 8108b4a:	4618      	mov	r0, r3
 8108b4c:	f001 f8de 	bl	8109d0c <xTaskRemoveFromEventList>
 8108b50:	4603      	mov	r3, r0
 8108b52:	2b00      	cmp	r3, #0
 8108b54:	d012      	beq.n	8108b7c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8108b56:	4b0d      	ldr	r3, [pc, #52]	; (8108b8c <xQueueGenericReset+0xcc>)
 8108b58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8108b5c:	601a      	str	r2, [r3, #0]
 8108b5e:	f3bf 8f4f 	dsb	sy
 8108b62:	f3bf 8f6f 	isb	sy
 8108b66:	e009      	b.n	8108b7c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8108b68:	68fb      	ldr	r3, [r7, #12]
 8108b6a:	3310      	adds	r3, #16
 8108b6c:	4618      	mov	r0, r3
 8108b6e:	f7ff fef3 	bl	8108958 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8108b72:	68fb      	ldr	r3, [r7, #12]
 8108b74:	3324      	adds	r3, #36	; 0x24
 8108b76:	4618      	mov	r0, r3
 8108b78:	f7ff feee 	bl	8108958 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8108b7c:	f001 fff4 	bl	810ab68 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8108b80:	2301      	movs	r3, #1
}
 8108b82:	4618      	mov	r0, r3
 8108b84:	3710      	adds	r7, #16
 8108b86:	46bd      	mov	sp, r7
 8108b88:	bd80      	pop	{r7, pc}
 8108b8a:	bf00      	nop
 8108b8c:	e000ed04 	.word	0xe000ed04

08108b90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8108b90:	b580      	push	{r7, lr}
 8108b92:	b08e      	sub	sp, #56	; 0x38
 8108b94:	af02      	add	r7, sp, #8
 8108b96:	60f8      	str	r0, [r7, #12]
 8108b98:	60b9      	str	r1, [r7, #8]
 8108b9a:	607a      	str	r2, [r7, #4]
 8108b9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8108b9e:	68fb      	ldr	r3, [r7, #12]
 8108ba0:	2b00      	cmp	r3, #0
 8108ba2:	d109      	bne.n	8108bb8 <xQueueGenericCreateStatic+0x28>
 8108ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108ba8:	f383 8811 	msr	BASEPRI, r3
 8108bac:	f3bf 8f6f 	isb	sy
 8108bb0:	f3bf 8f4f 	dsb	sy
 8108bb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8108bb6:	e7fe      	b.n	8108bb6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8108bb8:	683b      	ldr	r3, [r7, #0]
 8108bba:	2b00      	cmp	r3, #0
 8108bbc:	d109      	bne.n	8108bd2 <xQueueGenericCreateStatic+0x42>
 8108bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108bc2:	f383 8811 	msr	BASEPRI, r3
 8108bc6:	f3bf 8f6f 	isb	sy
 8108bca:	f3bf 8f4f 	dsb	sy
 8108bce:	627b      	str	r3, [r7, #36]	; 0x24
 8108bd0:	e7fe      	b.n	8108bd0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8108bd2:	687b      	ldr	r3, [r7, #4]
 8108bd4:	2b00      	cmp	r3, #0
 8108bd6:	d002      	beq.n	8108bde <xQueueGenericCreateStatic+0x4e>
 8108bd8:	68bb      	ldr	r3, [r7, #8]
 8108bda:	2b00      	cmp	r3, #0
 8108bdc:	d001      	beq.n	8108be2 <xQueueGenericCreateStatic+0x52>
 8108bde:	2301      	movs	r3, #1
 8108be0:	e000      	b.n	8108be4 <xQueueGenericCreateStatic+0x54>
 8108be2:	2300      	movs	r3, #0
 8108be4:	2b00      	cmp	r3, #0
 8108be6:	d109      	bne.n	8108bfc <xQueueGenericCreateStatic+0x6c>
 8108be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108bec:	f383 8811 	msr	BASEPRI, r3
 8108bf0:	f3bf 8f6f 	isb	sy
 8108bf4:	f3bf 8f4f 	dsb	sy
 8108bf8:	623b      	str	r3, [r7, #32]
 8108bfa:	e7fe      	b.n	8108bfa <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8108bfc:	687b      	ldr	r3, [r7, #4]
 8108bfe:	2b00      	cmp	r3, #0
 8108c00:	d102      	bne.n	8108c08 <xQueueGenericCreateStatic+0x78>
 8108c02:	68bb      	ldr	r3, [r7, #8]
 8108c04:	2b00      	cmp	r3, #0
 8108c06:	d101      	bne.n	8108c0c <xQueueGenericCreateStatic+0x7c>
 8108c08:	2301      	movs	r3, #1
 8108c0a:	e000      	b.n	8108c0e <xQueueGenericCreateStatic+0x7e>
 8108c0c:	2300      	movs	r3, #0
 8108c0e:	2b00      	cmp	r3, #0
 8108c10:	d109      	bne.n	8108c26 <xQueueGenericCreateStatic+0x96>
 8108c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108c16:	f383 8811 	msr	BASEPRI, r3
 8108c1a:	f3bf 8f6f 	isb	sy
 8108c1e:	f3bf 8f4f 	dsb	sy
 8108c22:	61fb      	str	r3, [r7, #28]
 8108c24:	e7fe      	b.n	8108c24 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8108c26:	2350      	movs	r3, #80	; 0x50
 8108c28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8108c2a:	697b      	ldr	r3, [r7, #20]
 8108c2c:	2b50      	cmp	r3, #80	; 0x50
 8108c2e:	d009      	beq.n	8108c44 <xQueueGenericCreateStatic+0xb4>
 8108c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108c34:	f383 8811 	msr	BASEPRI, r3
 8108c38:	f3bf 8f6f 	isb	sy
 8108c3c:	f3bf 8f4f 	dsb	sy
 8108c40:	61bb      	str	r3, [r7, #24]
 8108c42:	e7fe      	b.n	8108c42 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8108c44:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8108c46:	683b      	ldr	r3, [r7, #0]
 8108c48:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8108c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108c4c:	2b00      	cmp	r3, #0
 8108c4e:	d00d      	beq.n	8108c6c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8108c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108c52:	2201      	movs	r2, #1
 8108c54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8108c58:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8108c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108c5e:	9300      	str	r3, [sp, #0]
 8108c60:	4613      	mov	r3, r2
 8108c62:	687a      	ldr	r2, [r7, #4]
 8108c64:	68b9      	ldr	r1, [r7, #8]
 8108c66:	68f8      	ldr	r0, [r7, #12]
 8108c68:	f000 f805 	bl	8108c76 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8108c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8108c6e:	4618      	mov	r0, r3
 8108c70:	3730      	adds	r7, #48	; 0x30
 8108c72:	46bd      	mov	sp, r7
 8108c74:	bd80      	pop	{r7, pc}

08108c76 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8108c76:	b580      	push	{r7, lr}
 8108c78:	b084      	sub	sp, #16
 8108c7a:	af00      	add	r7, sp, #0
 8108c7c:	60f8      	str	r0, [r7, #12]
 8108c7e:	60b9      	str	r1, [r7, #8]
 8108c80:	607a      	str	r2, [r7, #4]
 8108c82:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8108c84:	68bb      	ldr	r3, [r7, #8]
 8108c86:	2b00      	cmp	r3, #0
 8108c88:	d103      	bne.n	8108c92 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8108c8a:	69bb      	ldr	r3, [r7, #24]
 8108c8c:	69ba      	ldr	r2, [r7, #24]
 8108c8e:	601a      	str	r2, [r3, #0]
 8108c90:	e002      	b.n	8108c98 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8108c92:	69bb      	ldr	r3, [r7, #24]
 8108c94:	687a      	ldr	r2, [r7, #4]
 8108c96:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8108c98:	69bb      	ldr	r3, [r7, #24]
 8108c9a:	68fa      	ldr	r2, [r7, #12]
 8108c9c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8108c9e:	69bb      	ldr	r3, [r7, #24]
 8108ca0:	68ba      	ldr	r2, [r7, #8]
 8108ca2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8108ca4:	2101      	movs	r1, #1
 8108ca6:	69b8      	ldr	r0, [r7, #24]
 8108ca8:	f7ff ff0a 	bl	8108ac0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8108cac:	69bb      	ldr	r3, [r7, #24]
 8108cae:	78fa      	ldrb	r2, [r7, #3]
 8108cb0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8108cb4:	bf00      	nop
 8108cb6:	3710      	adds	r7, #16
 8108cb8:	46bd      	mov	sp, r7
 8108cba:	bd80      	pop	{r7, pc}

08108cbc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8108cbc:	b580      	push	{r7, lr}
 8108cbe:	b08e      	sub	sp, #56	; 0x38
 8108cc0:	af00      	add	r7, sp, #0
 8108cc2:	60f8      	str	r0, [r7, #12]
 8108cc4:	60b9      	str	r1, [r7, #8]
 8108cc6:	607a      	str	r2, [r7, #4]
 8108cc8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8108cca:	2300      	movs	r3, #0
 8108ccc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8108cce:	68fb      	ldr	r3, [r7, #12]
 8108cd0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8108cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108cd4:	2b00      	cmp	r3, #0
 8108cd6:	d109      	bne.n	8108cec <xQueueGenericSend+0x30>
 8108cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108cdc:	f383 8811 	msr	BASEPRI, r3
 8108ce0:	f3bf 8f6f 	isb	sy
 8108ce4:	f3bf 8f4f 	dsb	sy
 8108ce8:	62bb      	str	r3, [r7, #40]	; 0x28
 8108cea:	e7fe      	b.n	8108cea <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8108cec:	68bb      	ldr	r3, [r7, #8]
 8108cee:	2b00      	cmp	r3, #0
 8108cf0:	d103      	bne.n	8108cfa <xQueueGenericSend+0x3e>
 8108cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8108cf6:	2b00      	cmp	r3, #0
 8108cf8:	d101      	bne.n	8108cfe <xQueueGenericSend+0x42>
 8108cfa:	2301      	movs	r3, #1
 8108cfc:	e000      	b.n	8108d00 <xQueueGenericSend+0x44>
 8108cfe:	2300      	movs	r3, #0
 8108d00:	2b00      	cmp	r3, #0
 8108d02:	d109      	bne.n	8108d18 <xQueueGenericSend+0x5c>
 8108d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108d08:	f383 8811 	msr	BASEPRI, r3
 8108d0c:	f3bf 8f6f 	isb	sy
 8108d10:	f3bf 8f4f 	dsb	sy
 8108d14:	627b      	str	r3, [r7, #36]	; 0x24
 8108d16:	e7fe      	b.n	8108d16 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8108d18:	683b      	ldr	r3, [r7, #0]
 8108d1a:	2b02      	cmp	r3, #2
 8108d1c:	d103      	bne.n	8108d26 <xQueueGenericSend+0x6a>
 8108d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108d22:	2b01      	cmp	r3, #1
 8108d24:	d101      	bne.n	8108d2a <xQueueGenericSend+0x6e>
 8108d26:	2301      	movs	r3, #1
 8108d28:	e000      	b.n	8108d2c <xQueueGenericSend+0x70>
 8108d2a:	2300      	movs	r3, #0
 8108d2c:	2b00      	cmp	r3, #0
 8108d2e:	d109      	bne.n	8108d44 <xQueueGenericSend+0x88>
 8108d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108d34:	f383 8811 	msr	BASEPRI, r3
 8108d38:	f3bf 8f6f 	isb	sy
 8108d3c:	f3bf 8f4f 	dsb	sy
 8108d40:	623b      	str	r3, [r7, #32]
 8108d42:	e7fe      	b.n	8108d42 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8108d44:	f001 f998 	bl	810a078 <xTaskGetSchedulerState>
 8108d48:	4603      	mov	r3, r0
 8108d4a:	2b00      	cmp	r3, #0
 8108d4c:	d102      	bne.n	8108d54 <xQueueGenericSend+0x98>
 8108d4e:	687b      	ldr	r3, [r7, #4]
 8108d50:	2b00      	cmp	r3, #0
 8108d52:	d101      	bne.n	8108d58 <xQueueGenericSend+0x9c>
 8108d54:	2301      	movs	r3, #1
 8108d56:	e000      	b.n	8108d5a <xQueueGenericSend+0x9e>
 8108d58:	2300      	movs	r3, #0
 8108d5a:	2b00      	cmp	r3, #0
 8108d5c:	d109      	bne.n	8108d72 <xQueueGenericSend+0xb6>
 8108d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108d62:	f383 8811 	msr	BASEPRI, r3
 8108d66:	f3bf 8f6f 	isb	sy
 8108d6a:	f3bf 8f4f 	dsb	sy
 8108d6e:	61fb      	str	r3, [r7, #28]
 8108d70:	e7fe      	b.n	8108d70 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8108d72:	f001 fecb 	bl	810ab0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8108d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108d78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8108d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108d7e:	429a      	cmp	r2, r3
 8108d80:	d302      	bcc.n	8108d88 <xQueueGenericSend+0xcc>
 8108d82:	683b      	ldr	r3, [r7, #0]
 8108d84:	2b02      	cmp	r3, #2
 8108d86:	d129      	bne.n	8108ddc <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8108d88:	683a      	ldr	r2, [r7, #0]
 8108d8a:	68b9      	ldr	r1, [r7, #8]
 8108d8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8108d8e:	f000 f9ff 	bl	8109190 <prvCopyDataToQueue>
 8108d92:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8108d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108d98:	2b00      	cmp	r3, #0
 8108d9a:	d010      	beq.n	8108dbe <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8108d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108d9e:	3324      	adds	r3, #36	; 0x24
 8108da0:	4618      	mov	r0, r3
 8108da2:	f000 ffb3 	bl	8109d0c <xTaskRemoveFromEventList>
 8108da6:	4603      	mov	r3, r0
 8108da8:	2b00      	cmp	r3, #0
 8108daa:	d013      	beq.n	8108dd4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8108dac:	4b3f      	ldr	r3, [pc, #252]	; (8108eac <xQueueGenericSend+0x1f0>)
 8108dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8108db2:	601a      	str	r2, [r3, #0]
 8108db4:	f3bf 8f4f 	dsb	sy
 8108db8:	f3bf 8f6f 	isb	sy
 8108dbc:	e00a      	b.n	8108dd4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8108dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108dc0:	2b00      	cmp	r3, #0
 8108dc2:	d007      	beq.n	8108dd4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8108dc4:	4b39      	ldr	r3, [pc, #228]	; (8108eac <xQueueGenericSend+0x1f0>)
 8108dc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8108dca:	601a      	str	r2, [r3, #0]
 8108dcc:	f3bf 8f4f 	dsb	sy
 8108dd0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8108dd4:	f001 fec8 	bl	810ab68 <vPortExitCritical>
				return pdPASS;
 8108dd8:	2301      	movs	r3, #1
 8108dda:	e063      	b.n	8108ea4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8108ddc:	687b      	ldr	r3, [r7, #4]
 8108dde:	2b00      	cmp	r3, #0
 8108de0:	d103      	bne.n	8108dea <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8108de2:	f001 fec1 	bl	810ab68 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8108de6:	2300      	movs	r3, #0
 8108de8:	e05c      	b.n	8108ea4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8108dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108dec:	2b00      	cmp	r3, #0
 8108dee:	d106      	bne.n	8108dfe <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8108df0:	f107 0314 	add.w	r3, r7, #20
 8108df4:	4618      	mov	r0, r3
 8108df6:	f000 ffeb 	bl	8109dd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8108dfa:	2301      	movs	r3, #1
 8108dfc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8108dfe:	f001 feb3 	bl	810ab68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8108e02:	f000 fd67 	bl	81098d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8108e06:	f001 fe81 	bl	810ab0c <vPortEnterCritical>
 8108e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108e0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8108e10:	b25b      	sxtb	r3, r3
 8108e12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8108e16:	d103      	bne.n	8108e20 <xQueueGenericSend+0x164>
 8108e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108e1a:	2200      	movs	r2, #0
 8108e1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8108e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108e22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8108e26:	b25b      	sxtb	r3, r3
 8108e28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8108e2c:	d103      	bne.n	8108e36 <xQueueGenericSend+0x17a>
 8108e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108e30:	2200      	movs	r2, #0
 8108e32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8108e36:	f001 fe97 	bl	810ab68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8108e3a:	1d3a      	adds	r2, r7, #4
 8108e3c:	f107 0314 	add.w	r3, r7, #20
 8108e40:	4611      	mov	r1, r2
 8108e42:	4618      	mov	r0, r3
 8108e44:	f000 ffda 	bl	8109dfc <xTaskCheckForTimeOut>
 8108e48:	4603      	mov	r3, r0
 8108e4a:	2b00      	cmp	r3, #0
 8108e4c:	d124      	bne.n	8108e98 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8108e4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8108e50:	f000 fa96 	bl	8109380 <prvIsQueueFull>
 8108e54:	4603      	mov	r3, r0
 8108e56:	2b00      	cmp	r3, #0
 8108e58:	d018      	beq.n	8108e8c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8108e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108e5c:	3310      	adds	r3, #16
 8108e5e:	687a      	ldr	r2, [r7, #4]
 8108e60:	4611      	mov	r1, r2
 8108e62:	4618      	mov	r0, r3
 8108e64:	f000 ff04 	bl	8109c70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8108e68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8108e6a:	f000 fa21 	bl	81092b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8108e6e:	f000 fd3f 	bl	81098f0 <xTaskResumeAll>
 8108e72:	4603      	mov	r3, r0
 8108e74:	2b00      	cmp	r3, #0
 8108e76:	f47f af7c 	bne.w	8108d72 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8108e7a:	4b0c      	ldr	r3, [pc, #48]	; (8108eac <xQueueGenericSend+0x1f0>)
 8108e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8108e80:	601a      	str	r2, [r3, #0]
 8108e82:	f3bf 8f4f 	dsb	sy
 8108e86:	f3bf 8f6f 	isb	sy
 8108e8a:	e772      	b.n	8108d72 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8108e8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8108e8e:	f000 fa0f 	bl	81092b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8108e92:	f000 fd2d 	bl	81098f0 <xTaskResumeAll>
 8108e96:	e76c      	b.n	8108d72 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8108e98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8108e9a:	f000 fa09 	bl	81092b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8108e9e:	f000 fd27 	bl	81098f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8108ea2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8108ea4:	4618      	mov	r0, r3
 8108ea6:	3738      	adds	r7, #56	; 0x38
 8108ea8:	46bd      	mov	sp, r7
 8108eaa:	bd80      	pop	{r7, pc}
 8108eac:	e000ed04 	.word	0xe000ed04

08108eb0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8108eb0:	b580      	push	{r7, lr}
 8108eb2:	b08e      	sub	sp, #56	; 0x38
 8108eb4:	af00      	add	r7, sp, #0
 8108eb6:	60f8      	str	r0, [r7, #12]
 8108eb8:	60b9      	str	r1, [r7, #8]
 8108eba:	607a      	str	r2, [r7, #4]
 8108ebc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8108ebe:	68fb      	ldr	r3, [r7, #12]
 8108ec0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8108ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108ec4:	2b00      	cmp	r3, #0
 8108ec6:	d109      	bne.n	8108edc <xQueueGenericSendFromISR+0x2c>
 8108ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108ecc:	f383 8811 	msr	BASEPRI, r3
 8108ed0:	f3bf 8f6f 	isb	sy
 8108ed4:	f3bf 8f4f 	dsb	sy
 8108ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8108eda:	e7fe      	b.n	8108eda <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8108edc:	68bb      	ldr	r3, [r7, #8]
 8108ede:	2b00      	cmp	r3, #0
 8108ee0:	d103      	bne.n	8108eea <xQueueGenericSendFromISR+0x3a>
 8108ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8108ee6:	2b00      	cmp	r3, #0
 8108ee8:	d101      	bne.n	8108eee <xQueueGenericSendFromISR+0x3e>
 8108eea:	2301      	movs	r3, #1
 8108eec:	e000      	b.n	8108ef0 <xQueueGenericSendFromISR+0x40>
 8108eee:	2300      	movs	r3, #0
 8108ef0:	2b00      	cmp	r3, #0
 8108ef2:	d109      	bne.n	8108f08 <xQueueGenericSendFromISR+0x58>
 8108ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108ef8:	f383 8811 	msr	BASEPRI, r3
 8108efc:	f3bf 8f6f 	isb	sy
 8108f00:	f3bf 8f4f 	dsb	sy
 8108f04:	623b      	str	r3, [r7, #32]
 8108f06:	e7fe      	b.n	8108f06 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8108f08:	683b      	ldr	r3, [r7, #0]
 8108f0a:	2b02      	cmp	r3, #2
 8108f0c:	d103      	bne.n	8108f16 <xQueueGenericSendFromISR+0x66>
 8108f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108f12:	2b01      	cmp	r3, #1
 8108f14:	d101      	bne.n	8108f1a <xQueueGenericSendFromISR+0x6a>
 8108f16:	2301      	movs	r3, #1
 8108f18:	e000      	b.n	8108f1c <xQueueGenericSendFromISR+0x6c>
 8108f1a:	2300      	movs	r3, #0
 8108f1c:	2b00      	cmp	r3, #0
 8108f1e:	d109      	bne.n	8108f34 <xQueueGenericSendFromISR+0x84>
 8108f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108f24:	f383 8811 	msr	BASEPRI, r3
 8108f28:	f3bf 8f6f 	isb	sy
 8108f2c:	f3bf 8f4f 	dsb	sy
 8108f30:	61fb      	str	r3, [r7, #28]
 8108f32:	e7fe      	b.n	8108f32 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8108f34:	f001 fec6 	bl	810acc4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8108f38:	f3ef 8211 	mrs	r2, BASEPRI
 8108f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108f40:	f383 8811 	msr	BASEPRI, r3
 8108f44:	f3bf 8f6f 	isb	sy
 8108f48:	f3bf 8f4f 	dsb	sy
 8108f4c:	61ba      	str	r2, [r7, #24]
 8108f4e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8108f50:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8108f52:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8108f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108f56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8108f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108f5c:	429a      	cmp	r2, r3
 8108f5e:	d302      	bcc.n	8108f66 <xQueueGenericSendFromISR+0xb6>
 8108f60:	683b      	ldr	r3, [r7, #0]
 8108f62:	2b02      	cmp	r3, #2
 8108f64:	d12c      	bne.n	8108fc0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8108f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108f68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8108f6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8108f70:	683a      	ldr	r2, [r7, #0]
 8108f72:	68b9      	ldr	r1, [r7, #8]
 8108f74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8108f76:	f000 f90b 	bl	8109190 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8108f7a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8108f7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8108f82:	d112      	bne.n	8108faa <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8108f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108f88:	2b00      	cmp	r3, #0
 8108f8a:	d016      	beq.n	8108fba <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8108f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108f8e:	3324      	adds	r3, #36	; 0x24
 8108f90:	4618      	mov	r0, r3
 8108f92:	f000 febb 	bl	8109d0c <xTaskRemoveFromEventList>
 8108f96:	4603      	mov	r3, r0
 8108f98:	2b00      	cmp	r3, #0
 8108f9a:	d00e      	beq.n	8108fba <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8108f9c:	687b      	ldr	r3, [r7, #4]
 8108f9e:	2b00      	cmp	r3, #0
 8108fa0:	d00b      	beq.n	8108fba <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8108fa2:	687b      	ldr	r3, [r7, #4]
 8108fa4:	2201      	movs	r2, #1
 8108fa6:	601a      	str	r2, [r3, #0]
 8108fa8:	e007      	b.n	8108fba <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8108faa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8108fae:	3301      	adds	r3, #1
 8108fb0:	b2db      	uxtb	r3, r3
 8108fb2:	b25a      	sxtb	r2, r3
 8108fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108fb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8108fba:	2301      	movs	r3, #1
 8108fbc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8108fbe:	e001      	b.n	8108fc4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8108fc0:	2300      	movs	r3, #0
 8108fc2:	637b      	str	r3, [r7, #52]	; 0x34
 8108fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108fc6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8108fc8:	693b      	ldr	r3, [r7, #16]
 8108fca:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8108fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8108fd0:	4618      	mov	r0, r3
 8108fd2:	3738      	adds	r7, #56	; 0x38
 8108fd4:	46bd      	mov	sp, r7
 8108fd6:	bd80      	pop	{r7, pc}

08108fd8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8108fd8:	b580      	push	{r7, lr}
 8108fda:	b08c      	sub	sp, #48	; 0x30
 8108fdc:	af00      	add	r7, sp, #0
 8108fde:	60f8      	str	r0, [r7, #12]
 8108fe0:	60b9      	str	r1, [r7, #8]
 8108fe2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8108fe4:	2300      	movs	r3, #0
 8108fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8108fe8:	68fb      	ldr	r3, [r7, #12]
 8108fea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8108fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108fee:	2b00      	cmp	r3, #0
 8108ff0:	d109      	bne.n	8109006 <xQueueReceive+0x2e>
	__asm volatile
 8108ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108ff6:	f383 8811 	msr	BASEPRI, r3
 8108ffa:	f3bf 8f6f 	isb	sy
 8108ffe:	f3bf 8f4f 	dsb	sy
 8109002:	623b      	str	r3, [r7, #32]
 8109004:	e7fe      	b.n	8109004 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8109006:	68bb      	ldr	r3, [r7, #8]
 8109008:	2b00      	cmp	r3, #0
 810900a:	d103      	bne.n	8109014 <xQueueReceive+0x3c>
 810900c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810900e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109010:	2b00      	cmp	r3, #0
 8109012:	d101      	bne.n	8109018 <xQueueReceive+0x40>
 8109014:	2301      	movs	r3, #1
 8109016:	e000      	b.n	810901a <xQueueReceive+0x42>
 8109018:	2300      	movs	r3, #0
 810901a:	2b00      	cmp	r3, #0
 810901c:	d109      	bne.n	8109032 <xQueueReceive+0x5a>
 810901e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109022:	f383 8811 	msr	BASEPRI, r3
 8109026:	f3bf 8f6f 	isb	sy
 810902a:	f3bf 8f4f 	dsb	sy
 810902e:	61fb      	str	r3, [r7, #28]
 8109030:	e7fe      	b.n	8109030 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8109032:	f001 f821 	bl	810a078 <xTaskGetSchedulerState>
 8109036:	4603      	mov	r3, r0
 8109038:	2b00      	cmp	r3, #0
 810903a:	d102      	bne.n	8109042 <xQueueReceive+0x6a>
 810903c:	687b      	ldr	r3, [r7, #4]
 810903e:	2b00      	cmp	r3, #0
 8109040:	d101      	bne.n	8109046 <xQueueReceive+0x6e>
 8109042:	2301      	movs	r3, #1
 8109044:	e000      	b.n	8109048 <xQueueReceive+0x70>
 8109046:	2300      	movs	r3, #0
 8109048:	2b00      	cmp	r3, #0
 810904a:	d109      	bne.n	8109060 <xQueueReceive+0x88>
 810904c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109050:	f383 8811 	msr	BASEPRI, r3
 8109054:	f3bf 8f6f 	isb	sy
 8109058:	f3bf 8f4f 	dsb	sy
 810905c:	61bb      	str	r3, [r7, #24]
 810905e:	e7fe      	b.n	810905e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8109060:	f001 fd54 	bl	810ab0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8109064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109068:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810906a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810906c:	2b00      	cmp	r3, #0
 810906e:	d01f      	beq.n	81090b0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8109070:	68b9      	ldr	r1, [r7, #8]
 8109072:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8109074:	f000 f8f6 	bl	8109264 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8109078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810907a:	1e5a      	subs	r2, r3, #1
 810907c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810907e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8109080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109082:	691b      	ldr	r3, [r3, #16]
 8109084:	2b00      	cmp	r3, #0
 8109086:	d00f      	beq.n	81090a8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8109088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810908a:	3310      	adds	r3, #16
 810908c:	4618      	mov	r0, r3
 810908e:	f000 fe3d 	bl	8109d0c <xTaskRemoveFromEventList>
 8109092:	4603      	mov	r3, r0
 8109094:	2b00      	cmp	r3, #0
 8109096:	d007      	beq.n	81090a8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8109098:	4b3c      	ldr	r3, [pc, #240]	; (810918c <xQueueReceive+0x1b4>)
 810909a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810909e:	601a      	str	r2, [r3, #0]
 81090a0:	f3bf 8f4f 	dsb	sy
 81090a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 81090a8:	f001 fd5e 	bl	810ab68 <vPortExitCritical>
				return pdPASS;
 81090ac:	2301      	movs	r3, #1
 81090ae:	e069      	b.n	8109184 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 81090b0:	687b      	ldr	r3, [r7, #4]
 81090b2:	2b00      	cmp	r3, #0
 81090b4:	d103      	bne.n	81090be <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 81090b6:	f001 fd57 	bl	810ab68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 81090ba:	2300      	movs	r3, #0
 81090bc:	e062      	b.n	8109184 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 81090be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81090c0:	2b00      	cmp	r3, #0
 81090c2:	d106      	bne.n	81090d2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 81090c4:	f107 0310 	add.w	r3, r7, #16
 81090c8:	4618      	mov	r0, r3
 81090ca:	f000 fe81 	bl	8109dd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 81090ce:	2301      	movs	r3, #1
 81090d0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 81090d2:	f001 fd49 	bl	810ab68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 81090d6:	f000 fbfd 	bl	81098d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 81090da:	f001 fd17 	bl	810ab0c <vPortEnterCritical>
 81090de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81090e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 81090e4:	b25b      	sxtb	r3, r3
 81090e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81090ea:	d103      	bne.n	81090f4 <xQueueReceive+0x11c>
 81090ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81090ee:	2200      	movs	r2, #0
 81090f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81090f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81090f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 81090fa:	b25b      	sxtb	r3, r3
 81090fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8109100:	d103      	bne.n	810910a <xQueueReceive+0x132>
 8109102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109104:	2200      	movs	r2, #0
 8109106:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810910a:	f001 fd2d 	bl	810ab68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810910e:	1d3a      	adds	r2, r7, #4
 8109110:	f107 0310 	add.w	r3, r7, #16
 8109114:	4611      	mov	r1, r2
 8109116:	4618      	mov	r0, r3
 8109118:	f000 fe70 	bl	8109dfc <xTaskCheckForTimeOut>
 810911c:	4603      	mov	r3, r0
 810911e:	2b00      	cmp	r3, #0
 8109120:	d123      	bne.n	810916a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8109122:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8109124:	f000 f916 	bl	8109354 <prvIsQueueEmpty>
 8109128:	4603      	mov	r3, r0
 810912a:	2b00      	cmp	r3, #0
 810912c:	d017      	beq.n	810915e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 810912e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109130:	3324      	adds	r3, #36	; 0x24
 8109132:	687a      	ldr	r2, [r7, #4]
 8109134:	4611      	mov	r1, r2
 8109136:	4618      	mov	r0, r3
 8109138:	f000 fd9a 	bl	8109c70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 810913c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810913e:	f000 f8b7 	bl	81092b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8109142:	f000 fbd5 	bl	81098f0 <xTaskResumeAll>
 8109146:	4603      	mov	r3, r0
 8109148:	2b00      	cmp	r3, #0
 810914a:	d189      	bne.n	8109060 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 810914c:	4b0f      	ldr	r3, [pc, #60]	; (810918c <xQueueReceive+0x1b4>)
 810914e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8109152:	601a      	str	r2, [r3, #0]
 8109154:	f3bf 8f4f 	dsb	sy
 8109158:	f3bf 8f6f 	isb	sy
 810915c:	e780      	b.n	8109060 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 810915e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8109160:	f000 f8a6 	bl	81092b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8109164:	f000 fbc4 	bl	81098f0 <xTaskResumeAll>
 8109168:	e77a      	b.n	8109060 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 810916a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810916c:	f000 f8a0 	bl	81092b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8109170:	f000 fbbe 	bl	81098f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8109174:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8109176:	f000 f8ed 	bl	8109354 <prvIsQueueEmpty>
 810917a:	4603      	mov	r3, r0
 810917c:	2b00      	cmp	r3, #0
 810917e:	f43f af6f 	beq.w	8109060 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8109182:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8109184:	4618      	mov	r0, r3
 8109186:	3730      	adds	r7, #48	; 0x30
 8109188:	46bd      	mov	sp, r7
 810918a:	bd80      	pop	{r7, pc}
 810918c:	e000ed04 	.word	0xe000ed04

08109190 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8109190:	b580      	push	{r7, lr}
 8109192:	b086      	sub	sp, #24
 8109194:	af00      	add	r7, sp, #0
 8109196:	60f8      	str	r0, [r7, #12]
 8109198:	60b9      	str	r1, [r7, #8]
 810919a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 810919c:	2300      	movs	r3, #0
 810919e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 81091a0:	68fb      	ldr	r3, [r7, #12]
 81091a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81091a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 81091a6:	68fb      	ldr	r3, [r7, #12]
 81091a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81091aa:	2b00      	cmp	r3, #0
 81091ac:	d10d      	bne.n	81091ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 81091ae:	68fb      	ldr	r3, [r7, #12]
 81091b0:	681b      	ldr	r3, [r3, #0]
 81091b2:	2b00      	cmp	r3, #0
 81091b4:	d14d      	bne.n	8109252 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 81091b6:	68fb      	ldr	r3, [r7, #12]
 81091b8:	689b      	ldr	r3, [r3, #8]
 81091ba:	4618      	mov	r0, r3
 81091bc:	f000 ff7a 	bl	810a0b4 <xTaskPriorityDisinherit>
 81091c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 81091c2:	68fb      	ldr	r3, [r7, #12]
 81091c4:	2200      	movs	r2, #0
 81091c6:	609a      	str	r2, [r3, #8]
 81091c8:	e043      	b.n	8109252 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 81091ca:	687b      	ldr	r3, [r7, #4]
 81091cc:	2b00      	cmp	r3, #0
 81091ce:	d119      	bne.n	8109204 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 81091d0:	68fb      	ldr	r3, [r7, #12]
 81091d2:	6858      	ldr	r0, [r3, #4]
 81091d4:	68fb      	ldr	r3, [r7, #12]
 81091d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81091d8:	461a      	mov	r2, r3
 81091da:	68b9      	ldr	r1, [r7, #8]
 81091dc:	f003 fa80 	bl	810c6e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 81091e0:	68fb      	ldr	r3, [r7, #12]
 81091e2:	685a      	ldr	r2, [r3, #4]
 81091e4:	68fb      	ldr	r3, [r7, #12]
 81091e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81091e8:	441a      	add	r2, r3
 81091ea:	68fb      	ldr	r3, [r7, #12]
 81091ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 81091ee:	68fb      	ldr	r3, [r7, #12]
 81091f0:	685a      	ldr	r2, [r3, #4]
 81091f2:	68fb      	ldr	r3, [r7, #12]
 81091f4:	689b      	ldr	r3, [r3, #8]
 81091f6:	429a      	cmp	r2, r3
 81091f8:	d32b      	bcc.n	8109252 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 81091fa:	68fb      	ldr	r3, [r7, #12]
 81091fc:	681a      	ldr	r2, [r3, #0]
 81091fe:	68fb      	ldr	r3, [r7, #12]
 8109200:	605a      	str	r2, [r3, #4]
 8109202:	e026      	b.n	8109252 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8109204:	68fb      	ldr	r3, [r7, #12]
 8109206:	68d8      	ldr	r0, [r3, #12]
 8109208:	68fb      	ldr	r3, [r7, #12]
 810920a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810920c:	461a      	mov	r2, r3
 810920e:	68b9      	ldr	r1, [r7, #8]
 8109210:	f003 fa66 	bl	810c6e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8109214:	68fb      	ldr	r3, [r7, #12]
 8109216:	68da      	ldr	r2, [r3, #12]
 8109218:	68fb      	ldr	r3, [r7, #12]
 810921a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810921c:	425b      	negs	r3, r3
 810921e:	441a      	add	r2, r3
 8109220:	68fb      	ldr	r3, [r7, #12]
 8109222:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8109224:	68fb      	ldr	r3, [r7, #12]
 8109226:	68da      	ldr	r2, [r3, #12]
 8109228:	68fb      	ldr	r3, [r7, #12]
 810922a:	681b      	ldr	r3, [r3, #0]
 810922c:	429a      	cmp	r2, r3
 810922e:	d207      	bcs.n	8109240 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8109230:	68fb      	ldr	r3, [r7, #12]
 8109232:	689a      	ldr	r2, [r3, #8]
 8109234:	68fb      	ldr	r3, [r7, #12]
 8109236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109238:	425b      	negs	r3, r3
 810923a:	441a      	add	r2, r3
 810923c:	68fb      	ldr	r3, [r7, #12]
 810923e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8109240:	687b      	ldr	r3, [r7, #4]
 8109242:	2b02      	cmp	r3, #2
 8109244:	d105      	bne.n	8109252 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8109246:	693b      	ldr	r3, [r7, #16]
 8109248:	2b00      	cmp	r3, #0
 810924a:	d002      	beq.n	8109252 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 810924c:	693b      	ldr	r3, [r7, #16]
 810924e:	3b01      	subs	r3, #1
 8109250:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8109252:	693b      	ldr	r3, [r7, #16]
 8109254:	1c5a      	adds	r2, r3, #1
 8109256:	68fb      	ldr	r3, [r7, #12]
 8109258:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 810925a:	697b      	ldr	r3, [r7, #20]
}
 810925c:	4618      	mov	r0, r3
 810925e:	3718      	adds	r7, #24
 8109260:	46bd      	mov	sp, r7
 8109262:	bd80      	pop	{r7, pc}

08109264 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8109264:	b580      	push	{r7, lr}
 8109266:	b082      	sub	sp, #8
 8109268:	af00      	add	r7, sp, #0
 810926a:	6078      	str	r0, [r7, #4]
 810926c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 810926e:	687b      	ldr	r3, [r7, #4]
 8109270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109272:	2b00      	cmp	r3, #0
 8109274:	d018      	beq.n	81092a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8109276:	687b      	ldr	r3, [r7, #4]
 8109278:	68da      	ldr	r2, [r3, #12]
 810927a:	687b      	ldr	r3, [r7, #4]
 810927c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810927e:	441a      	add	r2, r3
 8109280:	687b      	ldr	r3, [r7, #4]
 8109282:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8109284:	687b      	ldr	r3, [r7, #4]
 8109286:	68da      	ldr	r2, [r3, #12]
 8109288:	687b      	ldr	r3, [r7, #4]
 810928a:	689b      	ldr	r3, [r3, #8]
 810928c:	429a      	cmp	r2, r3
 810928e:	d303      	bcc.n	8109298 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8109290:	687b      	ldr	r3, [r7, #4]
 8109292:	681a      	ldr	r2, [r3, #0]
 8109294:	687b      	ldr	r3, [r7, #4]
 8109296:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8109298:	687b      	ldr	r3, [r7, #4]
 810929a:	68d9      	ldr	r1, [r3, #12]
 810929c:	687b      	ldr	r3, [r7, #4]
 810929e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81092a0:	461a      	mov	r2, r3
 81092a2:	6838      	ldr	r0, [r7, #0]
 81092a4:	f003 fa1c 	bl	810c6e0 <memcpy>
	}
}
 81092a8:	bf00      	nop
 81092aa:	3708      	adds	r7, #8
 81092ac:	46bd      	mov	sp, r7
 81092ae:	bd80      	pop	{r7, pc}

081092b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 81092b0:	b580      	push	{r7, lr}
 81092b2:	b084      	sub	sp, #16
 81092b4:	af00      	add	r7, sp, #0
 81092b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 81092b8:	f001 fc28 	bl	810ab0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 81092bc:	687b      	ldr	r3, [r7, #4]
 81092be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 81092c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 81092c4:	e011      	b.n	81092ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 81092c6:	687b      	ldr	r3, [r7, #4]
 81092c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81092ca:	2b00      	cmp	r3, #0
 81092cc:	d012      	beq.n	81092f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 81092ce:	687b      	ldr	r3, [r7, #4]
 81092d0:	3324      	adds	r3, #36	; 0x24
 81092d2:	4618      	mov	r0, r3
 81092d4:	f000 fd1a 	bl	8109d0c <xTaskRemoveFromEventList>
 81092d8:	4603      	mov	r3, r0
 81092da:	2b00      	cmp	r3, #0
 81092dc:	d001      	beq.n	81092e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 81092de:	f000 fded 	bl	8109ebc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 81092e2:	7bfb      	ldrb	r3, [r7, #15]
 81092e4:	3b01      	subs	r3, #1
 81092e6:	b2db      	uxtb	r3, r3
 81092e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 81092ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81092ee:	2b00      	cmp	r3, #0
 81092f0:	dce9      	bgt.n	81092c6 <prvUnlockQueue+0x16>
 81092f2:	e000      	b.n	81092f6 <prvUnlockQueue+0x46>
					break;
 81092f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 81092f6:	687b      	ldr	r3, [r7, #4]
 81092f8:	22ff      	movs	r2, #255	; 0xff
 81092fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 81092fe:	f001 fc33 	bl	810ab68 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8109302:	f001 fc03 	bl	810ab0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8109306:	687b      	ldr	r3, [r7, #4]
 8109308:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810930c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 810930e:	e011      	b.n	8109334 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8109310:	687b      	ldr	r3, [r7, #4]
 8109312:	691b      	ldr	r3, [r3, #16]
 8109314:	2b00      	cmp	r3, #0
 8109316:	d012      	beq.n	810933e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8109318:	687b      	ldr	r3, [r7, #4]
 810931a:	3310      	adds	r3, #16
 810931c:	4618      	mov	r0, r3
 810931e:	f000 fcf5 	bl	8109d0c <xTaskRemoveFromEventList>
 8109322:	4603      	mov	r3, r0
 8109324:	2b00      	cmp	r3, #0
 8109326:	d001      	beq.n	810932c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8109328:	f000 fdc8 	bl	8109ebc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 810932c:	7bbb      	ldrb	r3, [r7, #14]
 810932e:	3b01      	subs	r3, #1
 8109330:	b2db      	uxtb	r3, r3
 8109332:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8109334:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8109338:	2b00      	cmp	r3, #0
 810933a:	dce9      	bgt.n	8109310 <prvUnlockQueue+0x60>
 810933c:	e000      	b.n	8109340 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 810933e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8109340:	687b      	ldr	r3, [r7, #4]
 8109342:	22ff      	movs	r2, #255	; 0xff
 8109344:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8109348:	f001 fc0e 	bl	810ab68 <vPortExitCritical>
}
 810934c:	bf00      	nop
 810934e:	3710      	adds	r7, #16
 8109350:	46bd      	mov	sp, r7
 8109352:	bd80      	pop	{r7, pc}

08109354 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8109354:	b580      	push	{r7, lr}
 8109356:	b084      	sub	sp, #16
 8109358:	af00      	add	r7, sp, #0
 810935a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810935c:	f001 fbd6 	bl	810ab0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8109360:	687b      	ldr	r3, [r7, #4]
 8109362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109364:	2b00      	cmp	r3, #0
 8109366:	d102      	bne.n	810936e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8109368:	2301      	movs	r3, #1
 810936a:	60fb      	str	r3, [r7, #12]
 810936c:	e001      	b.n	8109372 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 810936e:	2300      	movs	r3, #0
 8109370:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8109372:	f001 fbf9 	bl	810ab68 <vPortExitCritical>

	return xReturn;
 8109376:	68fb      	ldr	r3, [r7, #12]
}
 8109378:	4618      	mov	r0, r3
 810937a:	3710      	adds	r7, #16
 810937c:	46bd      	mov	sp, r7
 810937e:	bd80      	pop	{r7, pc}

08109380 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8109380:	b580      	push	{r7, lr}
 8109382:	b084      	sub	sp, #16
 8109384:	af00      	add	r7, sp, #0
 8109386:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8109388:	f001 fbc0 	bl	810ab0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 810938c:	687b      	ldr	r3, [r7, #4]
 810938e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8109390:	687b      	ldr	r3, [r7, #4]
 8109392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109394:	429a      	cmp	r2, r3
 8109396:	d102      	bne.n	810939e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8109398:	2301      	movs	r3, #1
 810939a:	60fb      	str	r3, [r7, #12]
 810939c:	e001      	b.n	81093a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 810939e:	2300      	movs	r3, #0
 81093a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 81093a2:	f001 fbe1 	bl	810ab68 <vPortExitCritical>

	return xReturn;
 81093a6:	68fb      	ldr	r3, [r7, #12]
}
 81093a8:	4618      	mov	r0, r3
 81093aa:	3710      	adds	r7, #16
 81093ac:	46bd      	mov	sp, r7
 81093ae:	bd80      	pop	{r7, pc}

081093b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 81093b0:	b480      	push	{r7}
 81093b2:	b085      	sub	sp, #20
 81093b4:	af00      	add	r7, sp, #0
 81093b6:	6078      	str	r0, [r7, #4]
 81093b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 81093ba:	2300      	movs	r3, #0
 81093bc:	60fb      	str	r3, [r7, #12]
 81093be:	e014      	b.n	81093ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 81093c0:	4a0e      	ldr	r2, [pc, #56]	; (81093fc <vQueueAddToRegistry+0x4c>)
 81093c2:	68fb      	ldr	r3, [r7, #12]
 81093c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 81093c8:	2b00      	cmp	r3, #0
 81093ca:	d10b      	bne.n	81093e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 81093cc:	490b      	ldr	r1, [pc, #44]	; (81093fc <vQueueAddToRegistry+0x4c>)
 81093ce:	68fb      	ldr	r3, [r7, #12]
 81093d0:	683a      	ldr	r2, [r7, #0]
 81093d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 81093d6:	4a09      	ldr	r2, [pc, #36]	; (81093fc <vQueueAddToRegistry+0x4c>)
 81093d8:	68fb      	ldr	r3, [r7, #12]
 81093da:	00db      	lsls	r3, r3, #3
 81093dc:	4413      	add	r3, r2
 81093de:	687a      	ldr	r2, [r7, #4]
 81093e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 81093e2:	e005      	b.n	81093f0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 81093e4:	68fb      	ldr	r3, [r7, #12]
 81093e6:	3301      	adds	r3, #1
 81093e8:	60fb      	str	r3, [r7, #12]
 81093ea:	68fb      	ldr	r3, [r7, #12]
 81093ec:	2b07      	cmp	r3, #7
 81093ee:	d9e7      	bls.n	81093c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 81093f0:	bf00      	nop
 81093f2:	3714      	adds	r7, #20
 81093f4:	46bd      	mov	sp, r7
 81093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81093fa:	4770      	bx	lr
 81093fc:	100054c8 	.word	0x100054c8

08109400 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8109400:	b580      	push	{r7, lr}
 8109402:	b086      	sub	sp, #24
 8109404:	af00      	add	r7, sp, #0
 8109406:	60f8      	str	r0, [r7, #12]
 8109408:	60b9      	str	r1, [r7, #8]
 810940a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 810940c:	68fb      	ldr	r3, [r7, #12]
 810940e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8109410:	f001 fb7c 	bl	810ab0c <vPortEnterCritical>
 8109414:	697b      	ldr	r3, [r7, #20]
 8109416:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810941a:	b25b      	sxtb	r3, r3
 810941c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8109420:	d103      	bne.n	810942a <vQueueWaitForMessageRestricted+0x2a>
 8109422:	697b      	ldr	r3, [r7, #20]
 8109424:	2200      	movs	r2, #0
 8109426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810942a:	697b      	ldr	r3, [r7, #20]
 810942c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8109430:	b25b      	sxtb	r3, r3
 8109432:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8109436:	d103      	bne.n	8109440 <vQueueWaitForMessageRestricted+0x40>
 8109438:	697b      	ldr	r3, [r7, #20]
 810943a:	2200      	movs	r2, #0
 810943c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8109440:	f001 fb92 	bl	810ab68 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8109444:	697b      	ldr	r3, [r7, #20]
 8109446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109448:	2b00      	cmp	r3, #0
 810944a:	d106      	bne.n	810945a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 810944c:	697b      	ldr	r3, [r7, #20]
 810944e:	3324      	adds	r3, #36	; 0x24
 8109450:	687a      	ldr	r2, [r7, #4]
 8109452:	68b9      	ldr	r1, [r7, #8]
 8109454:	4618      	mov	r0, r3
 8109456:	f000 fc2f 	bl	8109cb8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 810945a:	6978      	ldr	r0, [r7, #20]
 810945c:	f7ff ff28 	bl	81092b0 <prvUnlockQueue>
	}
 8109460:	bf00      	nop
 8109462:	3718      	adds	r7, #24
 8109464:	46bd      	mov	sp, r7
 8109466:	bd80      	pop	{r7, pc}

08109468 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8109468:	b580      	push	{r7, lr}
 810946a:	b08e      	sub	sp, #56	; 0x38
 810946c:	af04      	add	r7, sp, #16
 810946e:	60f8      	str	r0, [r7, #12]
 8109470:	60b9      	str	r1, [r7, #8]
 8109472:	607a      	str	r2, [r7, #4]
 8109474:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8109476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8109478:	2b00      	cmp	r3, #0
 810947a:	d109      	bne.n	8109490 <xTaskCreateStatic+0x28>
 810947c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109480:	f383 8811 	msr	BASEPRI, r3
 8109484:	f3bf 8f6f 	isb	sy
 8109488:	f3bf 8f4f 	dsb	sy
 810948c:	623b      	str	r3, [r7, #32]
 810948e:	e7fe      	b.n	810948e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8109490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109492:	2b00      	cmp	r3, #0
 8109494:	d109      	bne.n	81094aa <xTaskCreateStatic+0x42>
 8109496:	f04f 0350 	mov.w	r3, #80	; 0x50
 810949a:	f383 8811 	msr	BASEPRI, r3
 810949e:	f3bf 8f6f 	isb	sy
 81094a2:	f3bf 8f4f 	dsb	sy
 81094a6:	61fb      	str	r3, [r7, #28]
 81094a8:	e7fe      	b.n	81094a8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 81094aa:	235c      	movs	r3, #92	; 0x5c
 81094ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 81094ae:	693b      	ldr	r3, [r7, #16]
 81094b0:	2b5c      	cmp	r3, #92	; 0x5c
 81094b2:	d009      	beq.n	81094c8 <xTaskCreateStatic+0x60>
 81094b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81094b8:	f383 8811 	msr	BASEPRI, r3
 81094bc:	f3bf 8f6f 	isb	sy
 81094c0:	f3bf 8f4f 	dsb	sy
 81094c4:	61bb      	str	r3, [r7, #24]
 81094c6:	e7fe      	b.n	81094c6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 81094c8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 81094ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81094cc:	2b00      	cmp	r3, #0
 81094ce:	d01e      	beq.n	810950e <xTaskCreateStatic+0xa6>
 81094d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81094d2:	2b00      	cmp	r3, #0
 81094d4:	d01b      	beq.n	810950e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 81094d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81094d8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 81094da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81094dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81094de:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 81094e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81094e2:	2202      	movs	r2, #2
 81094e4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 81094e8:	2300      	movs	r3, #0
 81094ea:	9303      	str	r3, [sp, #12]
 81094ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81094ee:	9302      	str	r3, [sp, #8]
 81094f0:	f107 0314 	add.w	r3, r7, #20
 81094f4:	9301      	str	r3, [sp, #4]
 81094f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81094f8:	9300      	str	r3, [sp, #0]
 81094fa:	683b      	ldr	r3, [r7, #0]
 81094fc:	687a      	ldr	r2, [r7, #4]
 81094fe:	68b9      	ldr	r1, [r7, #8]
 8109500:	68f8      	ldr	r0, [r7, #12]
 8109502:	f000 f850 	bl	81095a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8109506:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8109508:	f000 f8dc 	bl	81096c4 <prvAddNewTaskToReadyList>
 810950c:	e001      	b.n	8109512 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 810950e:	2300      	movs	r3, #0
 8109510:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8109512:	697b      	ldr	r3, [r7, #20]
	}
 8109514:	4618      	mov	r0, r3
 8109516:	3728      	adds	r7, #40	; 0x28
 8109518:	46bd      	mov	sp, r7
 810951a:	bd80      	pop	{r7, pc}

0810951c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 810951c:	b580      	push	{r7, lr}
 810951e:	b08c      	sub	sp, #48	; 0x30
 8109520:	af04      	add	r7, sp, #16
 8109522:	60f8      	str	r0, [r7, #12]
 8109524:	60b9      	str	r1, [r7, #8]
 8109526:	603b      	str	r3, [r7, #0]
 8109528:	4613      	mov	r3, r2
 810952a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 810952c:	88fb      	ldrh	r3, [r7, #6]
 810952e:	009b      	lsls	r3, r3, #2
 8109530:	4618      	mov	r0, r3
 8109532:	f001 fc05 	bl	810ad40 <pvPortMalloc>
 8109536:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8109538:	697b      	ldr	r3, [r7, #20]
 810953a:	2b00      	cmp	r3, #0
 810953c:	d00e      	beq.n	810955c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 810953e:	205c      	movs	r0, #92	; 0x5c
 8109540:	f001 fbfe 	bl	810ad40 <pvPortMalloc>
 8109544:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8109546:	69fb      	ldr	r3, [r7, #28]
 8109548:	2b00      	cmp	r3, #0
 810954a:	d003      	beq.n	8109554 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 810954c:	69fb      	ldr	r3, [r7, #28]
 810954e:	697a      	ldr	r2, [r7, #20]
 8109550:	631a      	str	r2, [r3, #48]	; 0x30
 8109552:	e005      	b.n	8109560 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8109554:	6978      	ldr	r0, [r7, #20]
 8109556:	f001 fcb5 	bl	810aec4 <vPortFree>
 810955a:	e001      	b.n	8109560 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 810955c:	2300      	movs	r3, #0
 810955e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8109560:	69fb      	ldr	r3, [r7, #28]
 8109562:	2b00      	cmp	r3, #0
 8109564:	d017      	beq.n	8109596 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8109566:	69fb      	ldr	r3, [r7, #28]
 8109568:	2200      	movs	r2, #0
 810956a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 810956e:	88fa      	ldrh	r2, [r7, #6]
 8109570:	2300      	movs	r3, #0
 8109572:	9303      	str	r3, [sp, #12]
 8109574:	69fb      	ldr	r3, [r7, #28]
 8109576:	9302      	str	r3, [sp, #8]
 8109578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810957a:	9301      	str	r3, [sp, #4]
 810957c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810957e:	9300      	str	r3, [sp, #0]
 8109580:	683b      	ldr	r3, [r7, #0]
 8109582:	68b9      	ldr	r1, [r7, #8]
 8109584:	68f8      	ldr	r0, [r7, #12]
 8109586:	f000 f80e 	bl	81095a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810958a:	69f8      	ldr	r0, [r7, #28]
 810958c:	f000 f89a 	bl	81096c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8109590:	2301      	movs	r3, #1
 8109592:	61bb      	str	r3, [r7, #24]
 8109594:	e002      	b.n	810959c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8109596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810959a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 810959c:	69bb      	ldr	r3, [r7, #24]
	}
 810959e:	4618      	mov	r0, r3
 81095a0:	3720      	adds	r7, #32
 81095a2:	46bd      	mov	sp, r7
 81095a4:	bd80      	pop	{r7, pc}

081095a6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 81095a6:	b580      	push	{r7, lr}
 81095a8:	b088      	sub	sp, #32
 81095aa:	af00      	add	r7, sp, #0
 81095ac:	60f8      	str	r0, [r7, #12]
 81095ae:	60b9      	str	r1, [r7, #8]
 81095b0:	607a      	str	r2, [r7, #4]
 81095b2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 81095b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81095b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 81095b8:	687b      	ldr	r3, [r7, #4]
 81095ba:	009b      	lsls	r3, r3, #2
 81095bc:	461a      	mov	r2, r3
 81095be:	21a5      	movs	r1, #165	; 0xa5
 81095c0:	f003 f899 	bl	810c6f6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 81095c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81095c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 81095c8:	687b      	ldr	r3, [r7, #4]
 81095ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 81095ce:	3b01      	subs	r3, #1
 81095d0:	009b      	lsls	r3, r3, #2
 81095d2:	4413      	add	r3, r2
 81095d4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 81095d6:	69bb      	ldr	r3, [r7, #24]
 81095d8:	f023 0307 	bic.w	r3, r3, #7
 81095dc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 81095de:	69bb      	ldr	r3, [r7, #24]
 81095e0:	f003 0307 	and.w	r3, r3, #7
 81095e4:	2b00      	cmp	r3, #0
 81095e6:	d009      	beq.n	81095fc <prvInitialiseNewTask+0x56>
 81095e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81095ec:	f383 8811 	msr	BASEPRI, r3
 81095f0:	f3bf 8f6f 	isb	sy
 81095f4:	f3bf 8f4f 	dsb	sy
 81095f8:	617b      	str	r3, [r7, #20]
 81095fa:	e7fe      	b.n	81095fa <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 81095fc:	68bb      	ldr	r3, [r7, #8]
 81095fe:	2b00      	cmp	r3, #0
 8109600:	d01f      	beq.n	8109642 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8109602:	2300      	movs	r3, #0
 8109604:	61fb      	str	r3, [r7, #28]
 8109606:	e012      	b.n	810962e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8109608:	68ba      	ldr	r2, [r7, #8]
 810960a:	69fb      	ldr	r3, [r7, #28]
 810960c:	4413      	add	r3, r2
 810960e:	7819      	ldrb	r1, [r3, #0]
 8109610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8109612:	69fb      	ldr	r3, [r7, #28]
 8109614:	4413      	add	r3, r2
 8109616:	3334      	adds	r3, #52	; 0x34
 8109618:	460a      	mov	r2, r1
 810961a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 810961c:	68ba      	ldr	r2, [r7, #8]
 810961e:	69fb      	ldr	r3, [r7, #28]
 8109620:	4413      	add	r3, r2
 8109622:	781b      	ldrb	r3, [r3, #0]
 8109624:	2b00      	cmp	r3, #0
 8109626:	d006      	beq.n	8109636 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8109628:	69fb      	ldr	r3, [r7, #28]
 810962a:	3301      	adds	r3, #1
 810962c:	61fb      	str	r3, [r7, #28]
 810962e:	69fb      	ldr	r3, [r7, #28]
 8109630:	2b0f      	cmp	r3, #15
 8109632:	d9e9      	bls.n	8109608 <prvInitialiseNewTask+0x62>
 8109634:	e000      	b.n	8109638 <prvInitialiseNewTask+0x92>
			{
				break;
 8109636:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8109638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810963a:	2200      	movs	r2, #0
 810963c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8109640:	e003      	b.n	810964a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8109642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109644:	2200      	movs	r2, #0
 8109646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 810964a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810964c:	2b37      	cmp	r3, #55	; 0x37
 810964e:	d901      	bls.n	8109654 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8109650:	2337      	movs	r3, #55	; 0x37
 8109652:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8109654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109656:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8109658:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 810965a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810965c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810965e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8109660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109662:	2200      	movs	r2, #0
 8109664:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8109666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109668:	3304      	adds	r3, #4
 810966a:	4618      	mov	r0, r3
 810966c:	f7ff f994 	bl	8108998 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8109670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109672:	3318      	adds	r3, #24
 8109674:	4618      	mov	r0, r3
 8109676:	f7ff f98f 	bl	8108998 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 810967a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810967c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810967e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8109680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109682:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8109686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109688:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 810968a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810968c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810968e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8109690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109692:	2200      	movs	r2, #0
 8109694:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8109696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109698:	2200      	movs	r2, #0
 810969a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 810969e:	683a      	ldr	r2, [r7, #0]
 81096a0:	68f9      	ldr	r1, [r7, #12]
 81096a2:	69b8      	ldr	r0, [r7, #24]
 81096a4:	f001 f90c 	bl	810a8c0 <pxPortInitialiseStack>
 81096a8:	4602      	mov	r2, r0
 81096aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81096ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 81096ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81096b0:	2b00      	cmp	r3, #0
 81096b2:	d002      	beq.n	81096ba <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 81096b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81096b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81096b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 81096ba:	bf00      	nop
 81096bc:	3720      	adds	r7, #32
 81096be:	46bd      	mov	sp, r7
 81096c0:	bd80      	pop	{r7, pc}
	...

081096c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 81096c4:	b580      	push	{r7, lr}
 81096c6:	b082      	sub	sp, #8
 81096c8:	af00      	add	r7, sp, #0
 81096ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 81096cc:	f001 fa1e 	bl	810ab0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 81096d0:	4b2d      	ldr	r3, [pc, #180]	; (8109788 <prvAddNewTaskToReadyList+0xc4>)
 81096d2:	681b      	ldr	r3, [r3, #0]
 81096d4:	3301      	adds	r3, #1
 81096d6:	4a2c      	ldr	r2, [pc, #176]	; (8109788 <prvAddNewTaskToReadyList+0xc4>)
 81096d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 81096da:	4b2c      	ldr	r3, [pc, #176]	; (810978c <prvAddNewTaskToReadyList+0xc8>)
 81096dc:	681b      	ldr	r3, [r3, #0]
 81096de:	2b00      	cmp	r3, #0
 81096e0:	d109      	bne.n	81096f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 81096e2:	4a2a      	ldr	r2, [pc, #168]	; (810978c <prvAddNewTaskToReadyList+0xc8>)
 81096e4:	687b      	ldr	r3, [r7, #4]
 81096e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 81096e8:	4b27      	ldr	r3, [pc, #156]	; (8109788 <prvAddNewTaskToReadyList+0xc4>)
 81096ea:	681b      	ldr	r3, [r3, #0]
 81096ec:	2b01      	cmp	r3, #1
 81096ee:	d110      	bne.n	8109712 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 81096f0:	f000 fc08 	bl	8109f04 <prvInitialiseTaskLists>
 81096f4:	e00d      	b.n	8109712 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 81096f6:	4b26      	ldr	r3, [pc, #152]	; (8109790 <prvAddNewTaskToReadyList+0xcc>)
 81096f8:	681b      	ldr	r3, [r3, #0]
 81096fa:	2b00      	cmp	r3, #0
 81096fc:	d109      	bne.n	8109712 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 81096fe:	4b23      	ldr	r3, [pc, #140]	; (810978c <prvAddNewTaskToReadyList+0xc8>)
 8109700:	681b      	ldr	r3, [r3, #0]
 8109702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109704:	687b      	ldr	r3, [r7, #4]
 8109706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109708:	429a      	cmp	r2, r3
 810970a:	d802      	bhi.n	8109712 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 810970c:	4a1f      	ldr	r2, [pc, #124]	; (810978c <prvAddNewTaskToReadyList+0xc8>)
 810970e:	687b      	ldr	r3, [r7, #4]
 8109710:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8109712:	4b20      	ldr	r3, [pc, #128]	; (8109794 <prvAddNewTaskToReadyList+0xd0>)
 8109714:	681b      	ldr	r3, [r3, #0]
 8109716:	3301      	adds	r3, #1
 8109718:	4a1e      	ldr	r2, [pc, #120]	; (8109794 <prvAddNewTaskToReadyList+0xd0>)
 810971a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 810971c:	4b1d      	ldr	r3, [pc, #116]	; (8109794 <prvAddNewTaskToReadyList+0xd0>)
 810971e:	681a      	ldr	r2, [r3, #0]
 8109720:	687b      	ldr	r3, [r7, #4]
 8109722:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8109724:	687b      	ldr	r3, [r7, #4]
 8109726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109728:	4b1b      	ldr	r3, [pc, #108]	; (8109798 <prvAddNewTaskToReadyList+0xd4>)
 810972a:	681b      	ldr	r3, [r3, #0]
 810972c:	429a      	cmp	r2, r3
 810972e:	d903      	bls.n	8109738 <prvAddNewTaskToReadyList+0x74>
 8109730:	687b      	ldr	r3, [r7, #4]
 8109732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109734:	4a18      	ldr	r2, [pc, #96]	; (8109798 <prvAddNewTaskToReadyList+0xd4>)
 8109736:	6013      	str	r3, [r2, #0]
 8109738:	687b      	ldr	r3, [r7, #4]
 810973a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810973c:	4613      	mov	r3, r2
 810973e:	009b      	lsls	r3, r3, #2
 8109740:	4413      	add	r3, r2
 8109742:	009b      	lsls	r3, r3, #2
 8109744:	4a15      	ldr	r2, [pc, #84]	; (810979c <prvAddNewTaskToReadyList+0xd8>)
 8109746:	441a      	add	r2, r3
 8109748:	687b      	ldr	r3, [r7, #4]
 810974a:	3304      	adds	r3, #4
 810974c:	4619      	mov	r1, r3
 810974e:	4610      	mov	r0, r2
 8109750:	f7ff f92f 	bl	81089b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8109754:	f001 fa08 	bl	810ab68 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8109758:	4b0d      	ldr	r3, [pc, #52]	; (8109790 <prvAddNewTaskToReadyList+0xcc>)
 810975a:	681b      	ldr	r3, [r3, #0]
 810975c:	2b00      	cmp	r3, #0
 810975e:	d00e      	beq.n	810977e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8109760:	4b0a      	ldr	r3, [pc, #40]	; (810978c <prvAddNewTaskToReadyList+0xc8>)
 8109762:	681b      	ldr	r3, [r3, #0]
 8109764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109766:	687b      	ldr	r3, [r7, #4]
 8109768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810976a:	429a      	cmp	r2, r3
 810976c:	d207      	bcs.n	810977e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 810976e:	4b0c      	ldr	r3, [pc, #48]	; (81097a0 <prvAddNewTaskToReadyList+0xdc>)
 8109770:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8109774:	601a      	str	r2, [r3, #0]
 8109776:	f3bf 8f4f 	dsb	sy
 810977a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810977e:	bf00      	nop
 8109780:	3708      	adds	r7, #8
 8109782:	46bd      	mov	sp, r7
 8109784:	bd80      	pop	{r7, pc}
 8109786:	bf00      	nop
 8109788:	10000dc8 	.word	0x10000dc8
 810978c:	100008f4 	.word	0x100008f4
 8109790:	10000dd4 	.word	0x10000dd4
 8109794:	10000de4 	.word	0x10000de4
 8109798:	10000dd0 	.word	0x10000dd0
 810979c:	100008f8 	.word	0x100008f8
 81097a0:	e000ed04 	.word	0xe000ed04

081097a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 81097a4:	b580      	push	{r7, lr}
 81097a6:	b084      	sub	sp, #16
 81097a8:	af00      	add	r7, sp, #0
 81097aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 81097ac:	2300      	movs	r3, #0
 81097ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 81097b0:	687b      	ldr	r3, [r7, #4]
 81097b2:	2b00      	cmp	r3, #0
 81097b4:	d016      	beq.n	81097e4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 81097b6:	4b13      	ldr	r3, [pc, #76]	; (8109804 <vTaskDelay+0x60>)
 81097b8:	681b      	ldr	r3, [r3, #0]
 81097ba:	2b00      	cmp	r3, #0
 81097bc:	d009      	beq.n	81097d2 <vTaskDelay+0x2e>
 81097be:	f04f 0350 	mov.w	r3, #80	; 0x50
 81097c2:	f383 8811 	msr	BASEPRI, r3
 81097c6:	f3bf 8f6f 	isb	sy
 81097ca:	f3bf 8f4f 	dsb	sy
 81097ce:	60bb      	str	r3, [r7, #8]
 81097d0:	e7fe      	b.n	81097d0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 81097d2:	f000 f87f 	bl	81098d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 81097d6:	2100      	movs	r1, #0
 81097d8:	6878      	ldr	r0, [r7, #4]
 81097da:	f000 fcd7 	bl	810a18c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 81097de:	f000 f887 	bl	81098f0 <xTaskResumeAll>
 81097e2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 81097e4:	68fb      	ldr	r3, [r7, #12]
 81097e6:	2b00      	cmp	r3, #0
 81097e8:	d107      	bne.n	81097fa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 81097ea:	4b07      	ldr	r3, [pc, #28]	; (8109808 <vTaskDelay+0x64>)
 81097ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81097f0:	601a      	str	r2, [r3, #0]
 81097f2:	f3bf 8f4f 	dsb	sy
 81097f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 81097fa:	bf00      	nop
 81097fc:	3710      	adds	r7, #16
 81097fe:	46bd      	mov	sp, r7
 8109800:	bd80      	pop	{r7, pc}
 8109802:	bf00      	nop
 8109804:	10000df0 	.word	0x10000df0
 8109808:	e000ed04 	.word	0xe000ed04

0810980c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 810980c:	b580      	push	{r7, lr}
 810980e:	b08a      	sub	sp, #40	; 0x28
 8109810:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8109812:	2300      	movs	r3, #0
 8109814:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8109816:	2300      	movs	r3, #0
 8109818:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 810981a:	463a      	mov	r2, r7
 810981c:	1d39      	adds	r1, r7, #4
 810981e:	f107 0308 	add.w	r3, r7, #8
 8109822:	4618      	mov	r0, r3
 8109824:	f7ff f864 	bl	81088f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8109828:	6839      	ldr	r1, [r7, #0]
 810982a:	687b      	ldr	r3, [r7, #4]
 810982c:	68ba      	ldr	r2, [r7, #8]
 810982e:	9202      	str	r2, [sp, #8]
 8109830:	9301      	str	r3, [sp, #4]
 8109832:	2300      	movs	r3, #0
 8109834:	9300      	str	r3, [sp, #0]
 8109836:	2300      	movs	r3, #0
 8109838:	460a      	mov	r2, r1
 810983a:	4920      	ldr	r1, [pc, #128]	; (81098bc <vTaskStartScheduler+0xb0>)
 810983c:	4820      	ldr	r0, [pc, #128]	; (81098c0 <vTaskStartScheduler+0xb4>)
 810983e:	f7ff fe13 	bl	8109468 <xTaskCreateStatic>
 8109842:	4602      	mov	r2, r0
 8109844:	4b1f      	ldr	r3, [pc, #124]	; (81098c4 <vTaskStartScheduler+0xb8>)
 8109846:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8109848:	4b1e      	ldr	r3, [pc, #120]	; (81098c4 <vTaskStartScheduler+0xb8>)
 810984a:	681b      	ldr	r3, [r3, #0]
 810984c:	2b00      	cmp	r3, #0
 810984e:	d002      	beq.n	8109856 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8109850:	2301      	movs	r3, #1
 8109852:	617b      	str	r3, [r7, #20]
 8109854:	e001      	b.n	810985a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8109856:	2300      	movs	r3, #0
 8109858:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 810985a:	697b      	ldr	r3, [r7, #20]
 810985c:	2b01      	cmp	r3, #1
 810985e:	d102      	bne.n	8109866 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8109860:	f000 fce8 	bl	810a234 <xTimerCreateTimerTask>
 8109864:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8109866:	697b      	ldr	r3, [r7, #20]
 8109868:	2b01      	cmp	r3, #1
 810986a:	d115      	bne.n	8109898 <vTaskStartScheduler+0x8c>
 810986c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109870:	f383 8811 	msr	BASEPRI, r3
 8109874:	f3bf 8f6f 	isb	sy
 8109878:	f3bf 8f4f 	dsb	sy
 810987c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 810987e:	4b12      	ldr	r3, [pc, #72]	; (81098c8 <vTaskStartScheduler+0xbc>)
 8109880:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8109884:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8109886:	4b11      	ldr	r3, [pc, #68]	; (81098cc <vTaskStartScheduler+0xc0>)
 8109888:	2201      	movs	r2, #1
 810988a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 810988c:	4b10      	ldr	r3, [pc, #64]	; (81098d0 <vTaskStartScheduler+0xc4>)
 810988e:	2200      	movs	r2, #0
 8109890:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8109892:	f001 f89d 	bl	810a9d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8109896:	e00d      	b.n	81098b4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8109898:	697b      	ldr	r3, [r7, #20]
 810989a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810989e:	d109      	bne.n	81098b4 <vTaskStartScheduler+0xa8>
 81098a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81098a4:	f383 8811 	msr	BASEPRI, r3
 81098a8:	f3bf 8f6f 	isb	sy
 81098ac:	f3bf 8f4f 	dsb	sy
 81098b0:	60fb      	str	r3, [r7, #12]
 81098b2:	e7fe      	b.n	81098b2 <vTaskStartScheduler+0xa6>
}
 81098b4:	bf00      	nop
 81098b6:	3718      	adds	r7, #24
 81098b8:	46bd      	mov	sp, r7
 81098ba:	bd80      	pop	{r7, pc}
 81098bc:	0810ef04 	.word	0x0810ef04
 81098c0:	08109ed5 	.word	0x08109ed5
 81098c4:	10000dec 	.word	0x10000dec
 81098c8:	10000de8 	.word	0x10000de8
 81098cc:	10000dd4 	.word	0x10000dd4
 81098d0:	10000dcc 	.word	0x10000dcc

081098d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 81098d4:	b480      	push	{r7}
 81098d6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 81098d8:	4b04      	ldr	r3, [pc, #16]	; (81098ec <vTaskSuspendAll+0x18>)
 81098da:	681b      	ldr	r3, [r3, #0]
 81098dc:	3301      	adds	r3, #1
 81098de:	4a03      	ldr	r2, [pc, #12]	; (81098ec <vTaskSuspendAll+0x18>)
 81098e0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 81098e2:	bf00      	nop
 81098e4:	46bd      	mov	sp, r7
 81098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81098ea:	4770      	bx	lr
 81098ec:	10000df0 	.word	0x10000df0

081098f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 81098f0:	b580      	push	{r7, lr}
 81098f2:	b084      	sub	sp, #16
 81098f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 81098f6:	2300      	movs	r3, #0
 81098f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 81098fa:	2300      	movs	r3, #0
 81098fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 81098fe:	4b41      	ldr	r3, [pc, #260]	; (8109a04 <xTaskResumeAll+0x114>)
 8109900:	681b      	ldr	r3, [r3, #0]
 8109902:	2b00      	cmp	r3, #0
 8109904:	d109      	bne.n	810991a <xTaskResumeAll+0x2a>
 8109906:	f04f 0350 	mov.w	r3, #80	; 0x50
 810990a:	f383 8811 	msr	BASEPRI, r3
 810990e:	f3bf 8f6f 	isb	sy
 8109912:	f3bf 8f4f 	dsb	sy
 8109916:	603b      	str	r3, [r7, #0]
 8109918:	e7fe      	b.n	8109918 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 810991a:	f001 f8f7 	bl	810ab0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 810991e:	4b39      	ldr	r3, [pc, #228]	; (8109a04 <xTaskResumeAll+0x114>)
 8109920:	681b      	ldr	r3, [r3, #0]
 8109922:	3b01      	subs	r3, #1
 8109924:	4a37      	ldr	r2, [pc, #220]	; (8109a04 <xTaskResumeAll+0x114>)
 8109926:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8109928:	4b36      	ldr	r3, [pc, #216]	; (8109a04 <xTaskResumeAll+0x114>)
 810992a:	681b      	ldr	r3, [r3, #0]
 810992c:	2b00      	cmp	r3, #0
 810992e:	d162      	bne.n	81099f6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8109930:	4b35      	ldr	r3, [pc, #212]	; (8109a08 <xTaskResumeAll+0x118>)
 8109932:	681b      	ldr	r3, [r3, #0]
 8109934:	2b00      	cmp	r3, #0
 8109936:	d05e      	beq.n	81099f6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8109938:	e02f      	b.n	810999a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810993a:	4b34      	ldr	r3, [pc, #208]	; (8109a0c <xTaskResumeAll+0x11c>)
 810993c:	68db      	ldr	r3, [r3, #12]
 810993e:	68db      	ldr	r3, [r3, #12]
 8109940:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8109942:	68fb      	ldr	r3, [r7, #12]
 8109944:	3318      	adds	r3, #24
 8109946:	4618      	mov	r0, r3
 8109948:	f7ff f890 	bl	8108a6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810994c:	68fb      	ldr	r3, [r7, #12]
 810994e:	3304      	adds	r3, #4
 8109950:	4618      	mov	r0, r3
 8109952:	f7ff f88b 	bl	8108a6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8109956:	68fb      	ldr	r3, [r7, #12]
 8109958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810995a:	4b2d      	ldr	r3, [pc, #180]	; (8109a10 <xTaskResumeAll+0x120>)
 810995c:	681b      	ldr	r3, [r3, #0]
 810995e:	429a      	cmp	r2, r3
 8109960:	d903      	bls.n	810996a <xTaskResumeAll+0x7a>
 8109962:	68fb      	ldr	r3, [r7, #12]
 8109964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109966:	4a2a      	ldr	r2, [pc, #168]	; (8109a10 <xTaskResumeAll+0x120>)
 8109968:	6013      	str	r3, [r2, #0]
 810996a:	68fb      	ldr	r3, [r7, #12]
 810996c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810996e:	4613      	mov	r3, r2
 8109970:	009b      	lsls	r3, r3, #2
 8109972:	4413      	add	r3, r2
 8109974:	009b      	lsls	r3, r3, #2
 8109976:	4a27      	ldr	r2, [pc, #156]	; (8109a14 <xTaskResumeAll+0x124>)
 8109978:	441a      	add	r2, r3
 810997a:	68fb      	ldr	r3, [r7, #12]
 810997c:	3304      	adds	r3, #4
 810997e:	4619      	mov	r1, r3
 8109980:	4610      	mov	r0, r2
 8109982:	f7ff f816 	bl	81089b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8109986:	68fb      	ldr	r3, [r7, #12]
 8109988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810998a:	4b23      	ldr	r3, [pc, #140]	; (8109a18 <xTaskResumeAll+0x128>)
 810998c:	681b      	ldr	r3, [r3, #0]
 810998e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109990:	429a      	cmp	r2, r3
 8109992:	d302      	bcc.n	810999a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8109994:	4b21      	ldr	r3, [pc, #132]	; (8109a1c <xTaskResumeAll+0x12c>)
 8109996:	2201      	movs	r2, #1
 8109998:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810999a:	4b1c      	ldr	r3, [pc, #112]	; (8109a0c <xTaskResumeAll+0x11c>)
 810999c:	681b      	ldr	r3, [r3, #0]
 810999e:	2b00      	cmp	r3, #0
 81099a0:	d1cb      	bne.n	810993a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 81099a2:	68fb      	ldr	r3, [r7, #12]
 81099a4:	2b00      	cmp	r3, #0
 81099a6:	d001      	beq.n	81099ac <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 81099a8:	f000 fb46 	bl	810a038 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 81099ac:	4b1c      	ldr	r3, [pc, #112]	; (8109a20 <xTaskResumeAll+0x130>)
 81099ae:	681b      	ldr	r3, [r3, #0]
 81099b0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 81099b2:	687b      	ldr	r3, [r7, #4]
 81099b4:	2b00      	cmp	r3, #0
 81099b6:	d010      	beq.n	81099da <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 81099b8:	f000 f846 	bl	8109a48 <xTaskIncrementTick>
 81099bc:	4603      	mov	r3, r0
 81099be:	2b00      	cmp	r3, #0
 81099c0:	d002      	beq.n	81099c8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 81099c2:	4b16      	ldr	r3, [pc, #88]	; (8109a1c <xTaskResumeAll+0x12c>)
 81099c4:	2201      	movs	r2, #1
 81099c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 81099c8:	687b      	ldr	r3, [r7, #4]
 81099ca:	3b01      	subs	r3, #1
 81099cc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 81099ce:	687b      	ldr	r3, [r7, #4]
 81099d0:	2b00      	cmp	r3, #0
 81099d2:	d1f1      	bne.n	81099b8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 81099d4:	4b12      	ldr	r3, [pc, #72]	; (8109a20 <xTaskResumeAll+0x130>)
 81099d6:	2200      	movs	r2, #0
 81099d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 81099da:	4b10      	ldr	r3, [pc, #64]	; (8109a1c <xTaskResumeAll+0x12c>)
 81099dc:	681b      	ldr	r3, [r3, #0]
 81099de:	2b00      	cmp	r3, #0
 81099e0:	d009      	beq.n	81099f6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 81099e2:	2301      	movs	r3, #1
 81099e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 81099e6:	4b0f      	ldr	r3, [pc, #60]	; (8109a24 <xTaskResumeAll+0x134>)
 81099e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81099ec:	601a      	str	r2, [r3, #0]
 81099ee:	f3bf 8f4f 	dsb	sy
 81099f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 81099f6:	f001 f8b7 	bl	810ab68 <vPortExitCritical>

	return xAlreadyYielded;
 81099fa:	68bb      	ldr	r3, [r7, #8]
}
 81099fc:	4618      	mov	r0, r3
 81099fe:	3710      	adds	r7, #16
 8109a00:	46bd      	mov	sp, r7
 8109a02:	bd80      	pop	{r7, pc}
 8109a04:	10000df0 	.word	0x10000df0
 8109a08:	10000dc8 	.word	0x10000dc8
 8109a0c:	10000d88 	.word	0x10000d88
 8109a10:	10000dd0 	.word	0x10000dd0
 8109a14:	100008f8 	.word	0x100008f8
 8109a18:	100008f4 	.word	0x100008f4
 8109a1c:	10000ddc 	.word	0x10000ddc
 8109a20:	10000dd8 	.word	0x10000dd8
 8109a24:	e000ed04 	.word	0xe000ed04

08109a28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8109a28:	b480      	push	{r7}
 8109a2a:	b083      	sub	sp, #12
 8109a2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8109a2e:	4b05      	ldr	r3, [pc, #20]	; (8109a44 <xTaskGetTickCount+0x1c>)
 8109a30:	681b      	ldr	r3, [r3, #0]
 8109a32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8109a34:	687b      	ldr	r3, [r7, #4]
}
 8109a36:	4618      	mov	r0, r3
 8109a38:	370c      	adds	r7, #12
 8109a3a:	46bd      	mov	sp, r7
 8109a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a40:	4770      	bx	lr
 8109a42:	bf00      	nop
 8109a44:	10000dcc 	.word	0x10000dcc

08109a48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8109a48:	b580      	push	{r7, lr}
 8109a4a:	b086      	sub	sp, #24
 8109a4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8109a4e:	2300      	movs	r3, #0
 8109a50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8109a52:	4b4e      	ldr	r3, [pc, #312]	; (8109b8c <xTaskIncrementTick+0x144>)
 8109a54:	681b      	ldr	r3, [r3, #0]
 8109a56:	2b00      	cmp	r3, #0
 8109a58:	f040 8088 	bne.w	8109b6c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8109a5c:	4b4c      	ldr	r3, [pc, #304]	; (8109b90 <xTaskIncrementTick+0x148>)
 8109a5e:	681b      	ldr	r3, [r3, #0]
 8109a60:	3301      	adds	r3, #1
 8109a62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8109a64:	4a4a      	ldr	r2, [pc, #296]	; (8109b90 <xTaskIncrementTick+0x148>)
 8109a66:	693b      	ldr	r3, [r7, #16]
 8109a68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8109a6a:	693b      	ldr	r3, [r7, #16]
 8109a6c:	2b00      	cmp	r3, #0
 8109a6e:	d11f      	bne.n	8109ab0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8109a70:	4b48      	ldr	r3, [pc, #288]	; (8109b94 <xTaskIncrementTick+0x14c>)
 8109a72:	681b      	ldr	r3, [r3, #0]
 8109a74:	681b      	ldr	r3, [r3, #0]
 8109a76:	2b00      	cmp	r3, #0
 8109a78:	d009      	beq.n	8109a8e <xTaskIncrementTick+0x46>
 8109a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109a7e:	f383 8811 	msr	BASEPRI, r3
 8109a82:	f3bf 8f6f 	isb	sy
 8109a86:	f3bf 8f4f 	dsb	sy
 8109a8a:	603b      	str	r3, [r7, #0]
 8109a8c:	e7fe      	b.n	8109a8c <xTaskIncrementTick+0x44>
 8109a8e:	4b41      	ldr	r3, [pc, #260]	; (8109b94 <xTaskIncrementTick+0x14c>)
 8109a90:	681b      	ldr	r3, [r3, #0]
 8109a92:	60fb      	str	r3, [r7, #12]
 8109a94:	4b40      	ldr	r3, [pc, #256]	; (8109b98 <xTaskIncrementTick+0x150>)
 8109a96:	681b      	ldr	r3, [r3, #0]
 8109a98:	4a3e      	ldr	r2, [pc, #248]	; (8109b94 <xTaskIncrementTick+0x14c>)
 8109a9a:	6013      	str	r3, [r2, #0]
 8109a9c:	4a3e      	ldr	r2, [pc, #248]	; (8109b98 <xTaskIncrementTick+0x150>)
 8109a9e:	68fb      	ldr	r3, [r7, #12]
 8109aa0:	6013      	str	r3, [r2, #0]
 8109aa2:	4b3e      	ldr	r3, [pc, #248]	; (8109b9c <xTaskIncrementTick+0x154>)
 8109aa4:	681b      	ldr	r3, [r3, #0]
 8109aa6:	3301      	adds	r3, #1
 8109aa8:	4a3c      	ldr	r2, [pc, #240]	; (8109b9c <xTaskIncrementTick+0x154>)
 8109aaa:	6013      	str	r3, [r2, #0]
 8109aac:	f000 fac4 	bl	810a038 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8109ab0:	4b3b      	ldr	r3, [pc, #236]	; (8109ba0 <xTaskIncrementTick+0x158>)
 8109ab2:	681b      	ldr	r3, [r3, #0]
 8109ab4:	693a      	ldr	r2, [r7, #16]
 8109ab6:	429a      	cmp	r2, r3
 8109ab8:	d349      	bcc.n	8109b4e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8109aba:	4b36      	ldr	r3, [pc, #216]	; (8109b94 <xTaskIncrementTick+0x14c>)
 8109abc:	681b      	ldr	r3, [r3, #0]
 8109abe:	681b      	ldr	r3, [r3, #0]
 8109ac0:	2b00      	cmp	r3, #0
 8109ac2:	d104      	bne.n	8109ace <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8109ac4:	4b36      	ldr	r3, [pc, #216]	; (8109ba0 <xTaskIncrementTick+0x158>)
 8109ac6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8109aca:	601a      	str	r2, [r3, #0]
					break;
 8109acc:	e03f      	b.n	8109b4e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8109ace:	4b31      	ldr	r3, [pc, #196]	; (8109b94 <xTaskIncrementTick+0x14c>)
 8109ad0:	681b      	ldr	r3, [r3, #0]
 8109ad2:	68db      	ldr	r3, [r3, #12]
 8109ad4:	68db      	ldr	r3, [r3, #12]
 8109ad6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8109ad8:	68bb      	ldr	r3, [r7, #8]
 8109ada:	685b      	ldr	r3, [r3, #4]
 8109adc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8109ade:	693a      	ldr	r2, [r7, #16]
 8109ae0:	687b      	ldr	r3, [r7, #4]
 8109ae2:	429a      	cmp	r2, r3
 8109ae4:	d203      	bcs.n	8109aee <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8109ae6:	4a2e      	ldr	r2, [pc, #184]	; (8109ba0 <xTaskIncrementTick+0x158>)
 8109ae8:	687b      	ldr	r3, [r7, #4]
 8109aea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8109aec:	e02f      	b.n	8109b4e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8109aee:	68bb      	ldr	r3, [r7, #8]
 8109af0:	3304      	adds	r3, #4
 8109af2:	4618      	mov	r0, r3
 8109af4:	f7fe ffba 	bl	8108a6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8109af8:	68bb      	ldr	r3, [r7, #8]
 8109afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109afc:	2b00      	cmp	r3, #0
 8109afe:	d004      	beq.n	8109b0a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8109b00:	68bb      	ldr	r3, [r7, #8]
 8109b02:	3318      	adds	r3, #24
 8109b04:	4618      	mov	r0, r3
 8109b06:	f7fe ffb1 	bl	8108a6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8109b0a:	68bb      	ldr	r3, [r7, #8]
 8109b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109b0e:	4b25      	ldr	r3, [pc, #148]	; (8109ba4 <xTaskIncrementTick+0x15c>)
 8109b10:	681b      	ldr	r3, [r3, #0]
 8109b12:	429a      	cmp	r2, r3
 8109b14:	d903      	bls.n	8109b1e <xTaskIncrementTick+0xd6>
 8109b16:	68bb      	ldr	r3, [r7, #8]
 8109b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109b1a:	4a22      	ldr	r2, [pc, #136]	; (8109ba4 <xTaskIncrementTick+0x15c>)
 8109b1c:	6013      	str	r3, [r2, #0]
 8109b1e:	68bb      	ldr	r3, [r7, #8]
 8109b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109b22:	4613      	mov	r3, r2
 8109b24:	009b      	lsls	r3, r3, #2
 8109b26:	4413      	add	r3, r2
 8109b28:	009b      	lsls	r3, r3, #2
 8109b2a:	4a1f      	ldr	r2, [pc, #124]	; (8109ba8 <xTaskIncrementTick+0x160>)
 8109b2c:	441a      	add	r2, r3
 8109b2e:	68bb      	ldr	r3, [r7, #8]
 8109b30:	3304      	adds	r3, #4
 8109b32:	4619      	mov	r1, r3
 8109b34:	4610      	mov	r0, r2
 8109b36:	f7fe ff3c 	bl	81089b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8109b3a:	68bb      	ldr	r3, [r7, #8]
 8109b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109b3e:	4b1b      	ldr	r3, [pc, #108]	; (8109bac <xTaskIncrementTick+0x164>)
 8109b40:	681b      	ldr	r3, [r3, #0]
 8109b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109b44:	429a      	cmp	r2, r3
 8109b46:	d3b8      	bcc.n	8109aba <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8109b48:	2301      	movs	r3, #1
 8109b4a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8109b4c:	e7b5      	b.n	8109aba <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8109b4e:	4b17      	ldr	r3, [pc, #92]	; (8109bac <xTaskIncrementTick+0x164>)
 8109b50:	681b      	ldr	r3, [r3, #0]
 8109b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109b54:	4914      	ldr	r1, [pc, #80]	; (8109ba8 <xTaskIncrementTick+0x160>)
 8109b56:	4613      	mov	r3, r2
 8109b58:	009b      	lsls	r3, r3, #2
 8109b5a:	4413      	add	r3, r2
 8109b5c:	009b      	lsls	r3, r3, #2
 8109b5e:	440b      	add	r3, r1
 8109b60:	681b      	ldr	r3, [r3, #0]
 8109b62:	2b01      	cmp	r3, #1
 8109b64:	d907      	bls.n	8109b76 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8109b66:	2301      	movs	r3, #1
 8109b68:	617b      	str	r3, [r7, #20]
 8109b6a:	e004      	b.n	8109b76 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8109b6c:	4b10      	ldr	r3, [pc, #64]	; (8109bb0 <xTaskIncrementTick+0x168>)
 8109b6e:	681b      	ldr	r3, [r3, #0]
 8109b70:	3301      	adds	r3, #1
 8109b72:	4a0f      	ldr	r2, [pc, #60]	; (8109bb0 <xTaskIncrementTick+0x168>)
 8109b74:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8109b76:	4b0f      	ldr	r3, [pc, #60]	; (8109bb4 <xTaskIncrementTick+0x16c>)
 8109b78:	681b      	ldr	r3, [r3, #0]
 8109b7a:	2b00      	cmp	r3, #0
 8109b7c:	d001      	beq.n	8109b82 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8109b7e:	2301      	movs	r3, #1
 8109b80:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8109b82:	697b      	ldr	r3, [r7, #20]
}
 8109b84:	4618      	mov	r0, r3
 8109b86:	3718      	adds	r7, #24
 8109b88:	46bd      	mov	sp, r7
 8109b8a:	bd80      	pop	{r7, pc}
 8109b8c:	10000df0 	.word	0x10000df0
 8109b90:	10000dcc 	.word	0x10000dcc
 8109b94:	10000d80 	.word	0x10000d80
 8109b98:	10000d84 	.word	0x10000d84
 8109b9c:	10000de0 	.word	0x10000de0
 8109ba0:	10000de8 	.word	0x10000de8
 8109ba4:	10000dd0 	.word	0x10000dd0
 8109ba8:	100008f8 	.word	0x100008f8
 8109bac:	100008f4 	.word	0x100008f4
 8109bb0:	10000dd8 	.word	0x10000dd8
 8109bb4:	10000ddc 	.word	0x10000ddc

08109bb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8109bb8:	b480      	push	{r7}
 8109bba:	b085      	sub	sp, #20
 8109bbc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8109bbe:	4b27      	ldr	r3, [pc, #156]	; (8109c5c <vTaskSwitchContext+0xa4>)
 8109bc0:	681b      	ldr	r3, [r3, #0]
 8109bc2:	2b00      	cmp	r3, #0
 8109bc4:	d003      	beq.n	8109bce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8109bc6:	4b26      	ldr	r3, [pc, #152]	; (8109c60 <vTaskSwitchContext+0xa8>)
 8109bc8:	2201      	movs	r2, #1
 8109bca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8109bcc:	e040      	b.n	8109c50 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8109bce:	4b24      	ldr	r3, [pc, #144]	; (8109c60 <vTaskSwitchContext+0xa8>)
 8109bd0:	2200      	movs	r2, #0
 8109bd2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8109bd4:	4b23      	ldr	r3, [pc, #140]	; (8109c64 <vTaskSwitchContext+0xac>)
 8109bd6:	681b      	ldr	r3, [r3, #0]
 8109bd8:	60fb      	str	r3, [r7, #12]
 8109bda:	e00f      	b.n	8109bfc <vTaskSwitchContext+0x44>
 8109bdc:	68fb      	ldr	r3, [r7, #12]
 8109bde:	2b00      	cmp	r3, #0
 8109be0:	d109      	bne.n	8109bf6 <vTaskSwitchContext+0x3e>
 8109be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109be6:	f383 8811 	msr	BASEPRI, r3
 8109bea:	f3bf 8f6f 	isb	sy
 8109bee:	f3bf 8f4f 	dsb	sy
 8109bf2:	607b      	str	r3, [r7, #4]
 8109bf4:	e7fe      	b.n	8109bf4 <vTaskSwitchContext+0x3c>
 8109bf6:	68fb      	ldr	r3, [r7, #12]
 8109bf8:	3b01      	subs	r3, #1
 8109bfa:	60fb      	str	r3, [r7, #12]
 8109bfc:	491a      	ldr	r1, [pc, #104]	; (8109c68 <vTaskSwitchContext+0xb0>)
 8109bfe:	68fa      	ldr	r2, [r7, #12]
 8109c00:	4613      	mov	r3, r2
 8109c02:	009b      	lsls	r3, r3, #2
 8109c04:	4413      	add	r3, r2
 8109c06:	009b      	lsls	r3, r3, #2
 8109c08:	440b      	add	r3, r1
 8109c0a:	681b      	ldr	r3, [r3, #0]
 8109c0c:	2b00      	cmp	r3, #0
 8109c0e:	d0e5      	beq.n	8109bdc <vTaskSwitchContext+0x24>
 8109c10:	68fa      	ldr	r2, [r7, #12]
 8109c12:	4613      	mov	r3, r2
 8109c14:	009b      	lsls	r3, r3, #2
 8109c16:	4413      	add	r3, r2
 8109c18:	009b      	lsls	r3, r3, #2
 8109c1a:	4a13      	ldr	r2, [pc, #76]	; (8109c68 <vTaskSwitchContext+0xb0>)
 8109c1c:	4413      	add	r3, r2
 8109c1e:	60bb      	str	r3, [r7, #8]
 8109c20:	68bb      	ldr	r3, [r7, #8]
 8109c22:	685b      	ldr	r3, [r3, #4]
 8109c24:	685a      	ldr	r2, [r3, #4]
 8109c26:	68bb      	ldr	r3, [r7, #8]
 8109c28:	605a      	str	r2, [r3, #4]
 8109c2a:	68bb      	ldr	r3, [r7, #8]
 8109c2c:	685a      	ldr	r2, [r3, #4]
 8109c2e:	68bb      	ldr	r3, [r7, #8]
 8109c30:	3308      	adds	r3, #8
 8109c32:	429a      	cmp	r2, r3
 8109c34:	d104      	bne.n	8109c40 <vTaskSwitchContext+0x88>
 8109c36:	68bb      	ldr	r3, [r7, #8]
 8109c38:	685b      	ldr	r3, [r3, #4]
 8109c3a:	685a      	ldr	r2, [r3, #4]
 8109c3c:	68bb      	ldr	r3, [r7, #8]
 8109c3e:	605a      	str	r2, [r3, #4]
 8109c40:	68bb      	ldr	r3, [r7, #8]
 8109c42:	685b      	ldr	r3, [r3, #4]
 8109c44:	68db      	ldr	r3, [r3, #12]
 8109c46:	4a09      	ldr	r2, [pc, #36]	; (8109c6c <vTaskSwitchContext+0xb4>)
 8109c48:	6013      	str	r3, [r2, #0]
 8109c4a:	4a06      	ldr	r2, [pc, #24]	; (8109c64 <vTaskSwitchContext+0xac>)
 8109c4c:	68fb      	ldr	r3, [r7, #12]
 8109c4e:	6013      	str	r3, [r2, #0]
}
 8109c50:	bf00      	nop
 8109c52:	3714      	adds	r7, #20
 8109c54:	46bd      	mov	sp, r7
 8109c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109c5a:	4770      	bx	lr
 8109c5c:	10000df0 	.word	0x10000df0
 8109c60:	10000ddc 	.word	0x10000ddc
 8109c64:	10000dd0 	.word	0x10000dd0
 8109c68:	100008f8 	.word	0x100008f8
 8109c6c:	100008f4 	.word	0x100008f4

08109c70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8109c70:	b580      	push	{r7, lr}
 8109c72:	b084      	sub	sp, #16
 8109c74:	af00      	add	r7, sp, #0
 8109c76:	6078      	str	r0, [r7, #4]
 8109c78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8109c7a:	687b      	ldr	r3, [r7, #4]
 8109c7c:	2b00      	cmp	r3, #0
 8109c7e:	d109      	bne.n	8109c94 <vTaskPlaceOnEventList+0x24>
 8109c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109c84:	f383 8811 	msr	BASEPRI, r3
 8109c88:	f3bf 8f6f 	isb	sy
 8109c8c:	f3bf 8f4f 	dsb	sy
 8109c90:	60fb      	str	r3, [r7, #12]
 8109c92:	e7fe      	b.n	8109c92 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8109c94:	4b07      	ldr	r3, [pc, #28]	; (8109cb4 <vTaskPlaceOnEventList+0x44>)
 8109c96:	681b      	ldr	r3, [r3, #0]
 8109c98:	3318      	adds	r3, #24
 8109c9a:	4619      	mov	r1, r3
 8109c9c:	6878      	ldr	r0, [r7, #4]
 8109c9e:	f7fe feac 	bl	81089fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8109ca2:	2101      	movs	r1, #1
 8109ca4:	6838      	ldr	r0, [r7, #0]
 8109ca6:	f000 fa71 	bl	810a18c <prvAddCurrentTaskToDelayedList>
}
 8109caa:	bf00      	nop
 8109cac:	3710      	adds	r7, #16
 8109cae:	46bd      	mov	sp, r7
 8109cb0:	bd80      	pop	{r7, pc}
 8109cb2:	bf00      	nop
 8109cb4:	100008f4 	.word	0x100008f4

08109cb8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8109cb8:	b580      	push	{r7, lr}
 8109cba:	b086      	sub	sp, #24
 8109cbc:	af00      	add	r7, sp, #0
 8109cbe:	60f8      	str	r0, [r7, #12]
 8109cc0:	60b9      	str	r1, [r7, #8]
 8109cc2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8109cc4:	68fb      	ldr	r3, [r7, #12]
 8109cc6:	2b00      	cmp	r3, #0
 8109cc8:	d109      	bne.n	8109cde <vTaskPlaceOnEventListRestricted+0x26>
 8109cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109cce:	f383 8811 	msr	BASEPRI, r3
 8109cd2:	f3bf 8f6f 	isb	sy
 8109cd6:	f3bf 8f4f 	dsb	sy
 8109cda:	617b      	str	r3, [r7, #20]
 8109cdc:	e7fe      	b.n	8109cdc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8109cde:	4b0a      	ldr	r3, [pc, #40]	; (8109d08 <vTaskPlaceOnEventListRestricted+0x50>)
 8109ce0:	681b      	ldr	r3, [r3, #0]
 8109ce2:	3318      	adds	r3, #24
 8109ce4:	4619      	mov	r1, r3
 8109ce6:	68f8      	ldr	r0, [r7, #12]
 8109ce8:	f7fe fe63 	bl	81089b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8109cec:	687b      	ldr	r3, [r7, #4]
 8109cee:	2b00      	cmp	r3, #0
 8109cf0:	d002      	beq.n	8109cf8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8109cf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8109cf6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8109cf8:	6879      	ldr	r1, [r7, #4]
 8109cfa:	68b8      	ldr	r0, [r7, #8]
 8109cfc:	f000 fa46 	bl	810a18c <prvAddCurrentTaskToDelayedList>
	}
 8109d00:	bf00      	nop
 8109d02:	3718      	adds	r7, #24
 8109d04:	46bd      	mov	sp, r7
 8109d06:	bd80      	pop	{r7, pc}
 8109d08:	100008f4 	.word	0x100008f4

08109d0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8109d0c:	b580      	push	{r7, lr}
 8109d0e:	b086      	sub	sp, #24
 8109d10:	af00      	add	r7, sp, #0
 8109d12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8109d14:	687b      	ldr	r3, [r7, #4]
 8109d16:	68db      	ldr	r3, [r3, #12]
 8109d18:	68db      	ldr	r3, [r3, #12]
 8109d1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8109d1c:	693b      	ldr	r3, [r7, #16]
 8109d1e:	2b00      	cmp	r3, #0
 8109d20:	d109      	bne.n	8109d36 <xTaskRemoveFromEventList+0x2a>
 8109d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109d26:	f383 8811 	msr	BASEPRI, r3
 8109d2a:	f3bf 8f6f 	isb	sy
 8109d2e:	f3bf 8f4f 	dsb	sy
 8109d32:	60fb      	str	r3, [r7, #12]
 8109d34:	e7fe      	b.n	8109d34 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8109d36:	693b      	ldr	r3, [r7, #16]
 8109d38:	3318      	adds	r3, #24
 8109d3a:	4618      	mov	r0, r3
 8109d3c:	f7fe fe96 	bl	8108a6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8109d40:	4b1d      	ldr	r3, [pc, #116]	; (8109db8 <xTaskRemoveFromEventList+0xac>)
 8109d42:	681b      	ldr	r3, [r3, #0]
 8109d44:	2b00      	cmp	r3, #0
 8109d46:	d11d      	bne.n	8109d84 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8109d48:	693b      	ldr	r3, [r7, #16]
 8109d4a:	3304      	adds	r3, #4
 8109d4c:	4618      	mov	r0, r3
 8109d4e:	f7fe fe8d 	bl	8108a6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8109d52:	693b      	ldr	r3, [r7, #16]
 8109d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109d56:	4b19      	ldr	r3, [pc, #100]	; (8109dbc <xTaskRemoveFromEventList+0xb0>)
 8109d58:	681b      	ldr	r3, [r3, #0]
 8109d5a:	429a      	cmp	r2, r3
 8109d5c:	d903      	bls.n	8109d66 <xTaskRemoveFromEventList+0x5a>
 8109d5e:	693b      	ldr	r3, [r7, #16]
 8109d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109d62:	4a16      	ldr	r2, [pc, #88]	; (8109dbc <xTaskRemoveFromEventList+0xb0>)
 8109d64:	6013      	str	r3, [r2, #0]
 8109d66:	693b      	ldr	r3, [r7, #16]
 8109d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109d6a:	4613      	mov	r3, r2
 8109d6c:	009b      	lsls	r3, r3, #2
 8109d6e:	4413      	add	r3, r2
 8109d70:	009b      	lsls	r3, r3, #2
 8109d72:	4a13      	ldr	r2, [pc, #76]	; (8109dc0 <xTaskRemoveFromEventList+0xb4>)
 8109d74:	441a      	add	r2, r3
 8109d76:	693b      	ldr	r3, [r7, #16]
 8109d78:	3304      	adds	r3, #4
 8109d7a:	4619      	mov	r1, r3
 8109d7c:	4610      	mov	r0, r2
 8109d7e:	f7fe fe18 	bl	81089b2 <vListInsertEnd>
 8109d82:	e005      	b.n	8109d90 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8109d84:	693b      	ldr	r3, [r7, #16]
 8109d86:	3318      	adds	r3, #24
 8109d88:	4619      	mov	r1, r3
 8109d8a:	480e      	ldr	r0, [pc, #56]	; (8109dc4 <xTaskRemoveFromEventList+0xb8>)
 8109d8c:	f7fe fe11 	bl	81089b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8109d90:	693b      	ldr	r3, [r7, #16]
 8109d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109d94:	4b0c      	ldr	r3, [pc, #48]	; (8109dc8 <xTaskRemoveFromEventList+0xbc>)
 8109d96:	681b      	ldr	r3, [r3, #0]
 8109d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109d9a:	429a      	cmp	r2, r3
 8109d9c:	d905      	bls.n	8109daa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8109d9e:	2301      	movs	r3, #1
 8109da0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8109da2:	4b0a      	ldr	r3, [pc, #40]	; (8109dcc <xTaskRemoveFromEventList+0xc0>)
 8109da4:	2201      	movs	r2, #1
 8109da6:	601a      	str	r2, [r3, #0]
 8109da8:	e001      	b.n	8109dae <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8109daa:	2300      	movs	r3, #0
 8109dac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8109dae:	697b      	ldr	r3, [r7, #20]
}
 8109db0:	4618      	mov	r0, r3
 8109db2:	3718      	adds	r7, #24
 8109db4:	46bd      	mov	sp, r7
 8109db6:	bd80      	pop	{r7, pc}
 8109db8:	10000df0 	.word	0x10000df0
 8109dbc:	10000dd0 	.word	0x10000dd0
 8109dc0:	100008f8 	.word	0x100008f8
 8109dc4:	10000d88 	.word	0x10000d88
 8109dc8:	100008f4 	.word	0x100008f4
 8109dcc:	10000ddc 	.word	0x10000ddc

08109dd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8109dd0:	b480      	push	{r7}
 8109dd2:	b083      	sub	sp, #12
 8109dd4:	af00      	add	r7, sp, #0
 8109dd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8109dd8:	4b06      	ldr	r3, [pc, #24]	; (8109df4 <vTaskInternalSetTimeOutState+0x24>)
 8109dda:	681a      	ldr	r2, [r3, #0]
 8109ddc:	687b      	ldr	r3, [r7, #4]
 8109dde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8109de0:	4b05      	ldr	r3, [pc, #20]	; (8109df8 <vTaskInternalSetTimeOutState+0x28>)
 8109de2:	681a      	ldr	r2, [r3, #0]
 8109de4:	687b      	ldr	r3, [r7, #4]
 8109de6:	605a      	str	r2, [r3, #4]
}
 8109de8:	bf00      	nop
 8109dea:	370c      	adds	r7, #12
 8109dec:	46bd      	mov	sp, r7
 8109dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109df2:	4770      	bx	lr
 8109df4:	10000de0 	.word	0x10000de0
 8109df8:	10000dcc 	.word	0x10000dcc

08109dfc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8109dfc:	b580      	push	{r7, lr}
 8109dfe:	b088      	sub	sp, #32
 8109e00:	af00      	add	r7, sp, #0
 8109e02:	6078      	str	r0, [r7, #4]
 8109e04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8109e06:	687b      	ldr	r3, [r7, #4]
 8109e08:	2b00      	cmp	r3, #0
 8109e0a:	d109      	bne.n	8109e20 <xTaskCheckForTimeOut+0x24>
 8109e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109e10:	f383 8811 	msr	BASEPRI, r3
 8109e14:	f3bf 8f6f 	isb	sy
 8109e18:	f3bf 8f4f 	dsb	sy
 8109e1c:	613b      	str	r3, [r7, #16]
 8109e1e:	e7fe      	b.n	8109e1e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8109e20:	683b      	ldr	r3, [r7, #0]
 8109e22:	2b00      	cmp	r3, #0
 8109e24:	d109      	bne.n	8109e3a <xTaskCheckForTimeOut+0x3e>
 8109e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109e2a:	f383 8811 	msr	BASEPRI, r3
 8109e2e:	f3bf 8f6f 	isb	sy
 8109e32:	f3bf 8f4f 	dsb	sy
 8109e36:	60fb      	str	r3, [r7, #12]
 8109e38:	e7fe      	b.n	8109e38 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8109e3a:	f000 fe67 	bl	810ab0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8109e3e:	4b1d      	ldr	r3, [pc, #116]	; (8109eb4 <xTaskCheckForTimeOut+0xb8>)
 8109e40:	681b      	ldr	r3, [r3, #0]
 8109e42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8109e44:	687b      	ldr	r3, [r7, #4]
 8109e46:	685b      	ldr	r3, [r3, #4]
 8109e48:	69ba      	ldr	r2, [r7, #24]
 8109e4a:	1ad3      	subs	r3, r2, r3
 8109e4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8109e4e:	683b      	ldr	r3, [r7, #0]
 8109e50:	681b      	ldr	r3, [r3, #0]
 8109e52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8109e56:	d102      	bne.n	8109e5e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8109e58:	2300      	movs	r3, #0
 8109e5a:	61fb      	str	r3, [r7, #28]
 8109e5c:	e023      	b.n	8109ea6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8109e5e:	687b      	ldr	r3, [r7, #4]
 8109e60:	681a      	ldr	r2, [r3, #0]
 8109e62:	4b15      	ldr	r3, [pc, #84]	; (8109eb8 <xTaskCheckForTimeOut+0xbc>)
 8109e64:	681b      	ldr	r3, [r3, #0]
 8109e66:	429a      	cmp	r2, r3
 8109e68:	d007      	beq.n	8109e7a <xTaskCheckForTimeOut+0x7e>
 8109e6a:	687b      	ldr	r3, [r7, #4]
 8109e6c:	685b      	ldr	r3, [r3, #4]
 8109e6e:	69ba      	ldr	r2, [r7, #24]
 8109e70:	429a      	cmp	r2, r3
 8109e72:	d302      	bcc.n	8109e7a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8109e74:	2301      	movs	r3, #1
 8109e76:	61fb      	str	r3, [r7, #28]
 8109e78:	e015      	b.n	8109ea6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8109e7a:	683b      	ldr	r3, [r7, #0]
 8109e7c:	681b      	ldr	r3, [r3, #0]
 8109e7e:	697a      	ldr	r2, [r7, #20]
 8109e80:	429a      	cmp	r2, r3
 8109e82:	d20b      	bcs.n	8109e9c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8109e84:	683b      	ldr	r3, [r7, #0]
 8109e86:	681a      	ldr	r2, [r3, #0]
 8109e88:	697b      	ldr	r3, [r7, #20]
 8109e8a:	1ad2      	subs	r2, r2, r3
 8109e8c:	683b      	ldr	r3, [r7, #0]
 8109e8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8109e90:	6878      	ldr	r0, [r7, #4]
 8109e92:	f7ff ff9d 	bl	8109dd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8109e96:	2300      	movs	r3, #0
 8109e98:	61fb      	str	r3, [r7, #28]
 8109e9a:	e004      	b.n	8109ea6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8109e9c:	683b      	ldr	r3, [r7, #0]
 8109e9e:	2200      	movs	r2, #0
 8109ea0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8109ea2:	2301      	movs	r3, #1
 8109ea4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8109ea6:	f000 fe5f 	bl	810ab68 <vPortExitCritical>

	return xReturn;
 8109eaa:	69fb      	ldr	r3, [r7, #28]
}
 8109eac:	4618      	mov	r0, r3
 8109eae:	3720      	adds	r7, #32
 8109eb0:	46bd      	mov	sp, r7
 8109eb2:	bd80      	pop	{r7, pc}
 8109eb4:	10000dcc 	.word	0x10000dcc
 8109eb8:	10000de0 	.word	0x10000de0

08109ebc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8109ebc:	b480      	push	{r7}
 8109ebe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8109ec0:	4b03      	ldr	r3, [pc, #12]	; (8109ed0 <vTaskMissedYield+0x14>)
 8109ec2:	2201      	movs	r2, #1
 8109ec4:	601a      	str	r2, [r3, #0]
}
 8109ec6:	bf00      	nop
 8109ec8:	46bd      	mov	sp, r7
 8109eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109ece:	4770      	bx	lr
 8109ed0:	10000ddc 	.word	0x10000ddc

08109ed4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8109ed4:	b580      	push	{r7, lr}
 8109ed6:	b082      	sub	sp, #8
 8109ed8:	af00      	add	r7, sp, #0
 8109eda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8109edc:	f000 f852 	bl	8109f84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8109ee0:	4b06      	ldr	r3, [pc, #24]	; (8109efc <prvIdleTask+0x28>)
 8109ee2:	681b      	ldr	r3, [r3, #0]
 8109ee4:	2b01      	cmp	r3, #1
 8109ee6:	d9f9      	bls.n	8109edc <prvIdleTask+0x8>
			{
				taskYIELD();
 8109ee8:	4b05      	ldr	r3, [pc, #20]	; (8109f00 <prvIdleTask+0x2c>)
 8109eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8109eee:	601a      	str	r2, [r3, #0]
 8109ef0:	f3bf 8f4f 	dsb	sy
 8109ef4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8109ef8:	e7f0      	b.n	8109edc <prvIdleTask+0x8>
 8109efa:	bf00      	nop
 8109efc:	100008f8 	.word	0x100008f8
 8109f00:	e000ed04 	.word	0xe000ed04

08109f04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8109f04:	b580      	push	{r7, lr}
 8109f06:	b082      	sub	sp, #8
 8109f08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8109f0a:	2300      	movs	r3, #0
 8109f0c:	607b      	str	r3, [r7, #4]
 8109f0e:	e00c      	b.n	8109f2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8109f10:	687a      	ldr	r2, [r7, #4]
 8109f12:	4613      	mov	r3, r2
 8109f14:	009b      	lsls	r3, r3, #2
 8109f16:	4413      	add	r3, r2
 8109f18:	009b      	lsls	r3, r3, #2
 8109f1a:	4a12      	ldr	r2, [pc, #72]	; (8109f64 <prvInitialiseTaskLists+0x60>)
 8109f1c:	4413      	add	r3, r2
 8109f1e:	4618      	mov	r0, r3
 8109f20:	f7fe fd1a 	bl	8108958 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8109f24:	687b      	ldr	r3, [r7, #4]
 8109f26:	3301      	adds	r3, #1
 8109f28:	607b      	str	r3, [r7, #4]
 8109f2a:	687b      	ldr	r3, [r7, #4]
 8109f2c:	2b37      	cmp	r3, #55	; 0x37
 8109f2e:	d9ef      	bls.n	8109f10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8109f30:	480d      	ldr	r0, [pc, #52]	; (8109f68 <prvInitialiseTaskLists+0x64>)
 8109f32:	f7fe fd11 	bl	8108958 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8109f36:	480d      	ldr	r0, [pc, #52]	; (8109f6c <prvInitialiseTaskLists+0x68>)
 8109f38:	f7fe fd0e 	bl	8108958 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8109f3c:	480c      	ldr	r0, [pc, #48]	; (8109f70 <prvInitialiseTaskLists+0x6c>)
 8109f3e:	f7fe fd0b 	bl	8108958 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8109f42:	480c      	ldr	r0, [pc, #48]	; (8109f74 <prvInitialiseTaskLists+0x70>)
 8109f44:	f7fe fd08 	bl	8108958 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8109f48:	480b      	ldr	r0, [pc, #44]	; (8109f78 <prvInitialiseTaskLists+0x74>)
 8109f4a:	f7fe fd05 	bl	8108958 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8109f4e:	4b0b      	ldr	r3, [pc, #44]	; (8109f7c <prvInitialiseTaskLists+0x78>)
 8109f50:	4a05      	ldr	r2, [pc, #20]	; (8109f68 <prvInitialiseTaskLists+0x64>)
 8109f52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8109f54:	4b0a      	ldr	r3, [pc, #40]	; (8109f80 <prvInitialiseTaskLists+0x7c>)
 8109f56:	4a05      	ldr	r2, [pc, #20]	; (8109f6c <prvInitialiseTaskLists+0x68>)
 8109f58:	601a      	str	r2, [r3, #0]
}
 8109f5a:	bf00      	nop
 8109f5c:	3708      	adds	r7, #8
 8109f5e:	46bd      	mov	sp, r7
 8109f60:	bd80      	pop	{r7, pc}
 8109f62:	bf00      	nop
 8109f64:	100008f8 	.word	0x100008f8
 8109f68:	10000d58 	.word	0x10000d58
 8109f6c:	10000d6c 	.word	0x10000d6c
 8109f70:	10000d88 	.word	0x10000d88
 8109f74:	10000d9c 	.word	0x10000d9c
 8109f78:	10000db4 	.word	0x10000db4
 8109f7c:	10000d80 	.word	0x10000d80
 8109f80:	10000d84 	.word	0x10000d84

08109f84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8109f84:	b580      	push	{r7, lr}
 8109f86:	b082      	sub	sp, #8
 8109f88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8109f8a:	e019      	b.n	8109fc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8109f8c:	f000 fdbe 	bl	810ab0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8109f90:	4b0f      	ldr	r3, [pc, #60]	; (8109fd0 <prvCheckTasksWaitingTermination+0x4c>)
 8109f92:	68db      	ldr	r3, [r3, #12]
 8109f94:	68db      	ldr	r3, [r3, #12]
 8109f96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8109f98:	687b      	ldr	r3, [r7, #4]
 8109f9a:	3304      	adds	r3, #4
 8109f9c:	4618      	mov	r0, r3
 8109f9e:	f7fe fd65 	bl	8108a6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8109fa2:	4b0c      	ldr	r3, [pc, #48]	; (8109fd4 <prvCheckTasksWaitingTermination+0x50>)
 8109fa4:	681b      	ldr	r3, [r3, #0]
 8109fa6:	3b01      	subs	r3, #1
 8109fa8:	4a0a      	ldr	r2, [pc, #40]	; (8109fd4 <prvCheckTasksWaitingTermination+0x50>)
 8109faa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8109fac:	4b0a      	ldr	r3, [pc, #40]	; (8109fd8 <prvCheckTasksWaitingTermination+0x54>)
 8109fae:	681b      	ldr	r3, [r3, #0]
 8109fb0:	3b01      	subs	r3, #1
 8109fb2:	4a09      	ldr	r2, [pc, #36]	; (8109fd8 <prvCheckTasksWaitingTermination+0x54>)
 8109fb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8109fb6:	f000 fdd7 	bl	810ab68 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8109fba:	6878      	ldr	r0, [r7, #4]
 8109fbc:	f000 f80e 	bl	8109fdc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8109fc0:	4b05      	ldr	r3, [pc, #20]	; (8109fd8 <prvCheckTasksWaitingTermination+0x54>)
 8109fc2:	681b      	ldr	r3, [r3, #0]
 8109fc4:	2b00      	cmp	r3, #0
 8109fc6:	d1e1      	bne.n	8109f8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8109fc8:	bf00      	nop
 8109fca:	3708      	adds	r7, #8
 8109fcc:	46bd      	mov	sp, r7
 8109fce:	bd80      	pop	{r7, pc}
 8109fd0:	10000d9c 	.word	0x10000d9c
 8109fd4:	10000dc8 	.word	0x10000dc8
 8109fd8:	10000db0 	.word	0x10000db0

08109fdc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8109fdc:	b580      	push	{r7, lr}
 8109fde:	b084      	sub	sp, #16
 8109fe0:	af00      	add	r7, sp, #0
 8109fe2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8109fe4:	687b      	ldr	r3, [r7, #4]
 8109fe6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8109fea:	2b00      	cmp	r3, #0
 8109fec:	d108      	bne.n	810a000 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8109fee:	687b      	ldr	r3, [r7, #4]
 8109ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8109ff2:	4618      	mov	r0, r3
 8109ff4:	f000 ff66 	bl	810aec4 <vPortFree>
				vPortFree( pxTCB );
 8109ff8:	6878      	ldr	r0, [r7, #4]
 8109ffa:	f000 ff63 	bl	810aec4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8109ffe:	e017      	b.n	810a030 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 810a000:	687b      	ldr	r3, [r7, #4]
 810a002:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 810a006:	2b01      	cmp	r3, #1
 810a008:	d103      	bne.n	810a012 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 810a00a:	6878      	ldr	r0, [r7, #4]
 810a00c:	f000 ff5a 	bl	810aec4 <vPortFree>
	}
 810a010:	e00e      	b.n	810a030 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 810a012:	687b      	ldr	r3, [r7, #4]
 810a014:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 810a018:	2b02      	cmp	r3, #2
 810a01a:	d009      	beq.n	810a030 <prvDeleteTCB+0x54>
 810a01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a020:	f383 8811 	msr	BASEPRI, r3
 810a024:	f3bf 8f6f 	isb	sy
 810a028:	f3bf 8f4f 	dsb	sy
 810a02c:	60fb      	str	r3, [r7, #12]
 810a02e:	e7fe      	b.n	810a02e <prvDeleteTCB+0x52>
	}
 810a030:	bf00      	nop
 810a032:	3710      	adds	r7, #16
 810a034:	46bd      	mov	sp, r7
 810a036:	bd80      	pop	{r7, pc}

0810a038 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 810a038:	b480      	push	{r7}
 810a03a:	b083      	sub	sp, #12
 810a03c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810a03e:	4b0c      	ldr	r3, [pc, #48]	; (810a070 <prvResetNextTaskUnblockTime+0x38>)
 810a040:	681b      	ldr	r3, [r3, #0]
 810a042:	681b      	ldr	r3, [r3, #0]
 810a044:	2b00      	cmp	r3, #0
 810a046:	d104      	bne.n	810a052 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 810a048:	4b0a      	ldr	r3, [pc, #40]	; (810a074 <prvResetNextTaskUnblockTime+0x3c>)
 810a04a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810a04e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 810a050:	e008      	b.n	810a064 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a052:	4b07      	ldr	r3, [pc, #28]	; (810a070 <prvResetNextTaskUnblockTime+0x38>)
 810a054:	681b      	ldr	r3, [r3, #0]
 810a056:	68db      	ldr	r3, [r3, #12]
 810a058:	68db      	ldr	r3, [r3, #12]
 810a05a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 810a05c:	687b      	ldr	r3, [r7, #4]
 810a05e:	685b      	ldr	r3, [r3, #4]
 810a060:	4a04      	ldr	r2, [pc, #16]	; (810a074 <prvResetNextTaskUnblockTime+0x3c>)
 810a062:	6013      	str	r3, [r2, #0]
}
 810a064:	bf00      	nop
 810a066:	370c      	adds	r7, #12
 810a068:	46bd      	mov	sp, r7
 810a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a06e:	4770      	bx	lr
 810a070:	10000d80 	.word	0x10000d80
 810a074:	10000de8 	.word	0x10000de8

0810a078 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 810a078:	b480      	push	{r7}
 810a07a:	b083      	sub	sp, #12
 810a07c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 810a07e:	4b0b      	ldr	r3, [pc, #44]	; (810a0ac <xTaskGetSchedulerState+0x34>)
 810a080:	681b      	ldr	r3, [r3, #0]
 810a082:	2b00      	cmp	r3, #0
 810a084:	d102      	bne.n	810a08c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 810a086:	2301      	movs	r3, #1
 810a088:	607b      	str	r3, [r7, #4]
 810a08a:	e008      	b.n	810a09e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810a08c:	4b08      	ldr	r3, [pc, #32]	; (810a0b0 <xTaskGetSchedulerState+0x38>)
 810a08e:	681b      	ldr	r3, [r3, #0]
 810a090:	2b00      	cmp	r3, #0
 810a092:	d102      	bne.n	810a09a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 810a094:	2302      	movs	r3, #2
 810a096:	607b      	str	r3, [r7, #4]
 810a098:	e001      	b.n	810a09e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 810a09a:	2300      	movs	r3, #0
 810a09c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 810a09e:	687b      	ldr	r3, [r7, #4]
	}
 810a0a0:	4618      	mov	r0, r3
 810a0a2:	370c      	adds	r7, #12
 810a0a4:	46bd      	mov	sp, r7
 810a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a0aa:	4770      	bx	lr
 810a0ac:	10000dd4 	.word	0x10000dd4
 810a0b0:	10000df0 	.word	0x10000df0

0810a0b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 810a0b4:	b580      	push	{r7, lr}
 810a0b6:	b086      	sub	sp, #24
 810a0b8:	af00      	add	r7, sp, #0
 810a0ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 810a0bc:	687b      	ldr	r3, [r7, #4]
 810a0be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 810a0c0:	2300      	movs	r3, #0
 810a0c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810a0c4:	687b      	ldr	r3, [r7, #4]
 810a0c6:	2b00      	cmp	r3, #0
 810a0c8:	d054      	beq.n	810a174 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 810a0ca:	4b2d      	ldr	r3, [pc, #180]	; (810a180 <xTaskPriorityDisinherit+0xcc>)
 810a0cc:	681b      	ldr	r3, [r3, #0]
 810a0ce:	693a      	ldr	r2, [r7, #16]
 810a0d0:	429a      	cmp	r2, r3
 810a0d2:	d009      	beq.n	810a0e8 <xTaskPriorityDisinherit+0x34>
 810a0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a0d8:	f383 8811 	msr	BASEPRI, r3
 810a0dc:	f3bf 8f6f 	isb	sy
 810a0e0:	f3bf 8f4f 	dsb	sy
 810a0e4:	60fb      	str	r3, [r7, #12]
 810a0e6:	e7fe      	b.n	810a0e6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 810a0e8:	693b      	ldr	r3, [r7, #16]
 810a0ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810a0ec:	2b00      	cmp	r3, #0
 810a0ee:	d109      	bne.n	810a104 <xTaskPriorityDisinherit+0x50>
 810a0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a0f4:	f383 8811 	msr	BASEPRI, r3
 810a0f8:	f3bf 8f6f 	isb	sy
 810a0fc:	f3bf 8f4f 	dsb	sy
 810a100:	60bb      	str	r3, [r7, #8]
 810a102:	e7fe      	b.n	810a102 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 810a104:	693b      	ldr	r3, [r7, #16]
 810a106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810a108:	1e5a      	subs	r2, r3, #1
 810a10a:	693b      	ldr	r3, [r7, #16]
 810a10c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 810a10e:	693b      	ldr	r3, [r7, #16]
 810a110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a112:	693b      	ldr	r3, [r7, #16]
 810a114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810a116:	429a      	cmp	r2, r3
 810a118:	d02c      	beq.n	810a174 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 810a11a:	693b      	ldr	r3, [r7, #16]
 810a11c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810a11e:	2b00      	cmp	r3, #0
 810a120:	d128      	bne.n	810a174 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810a122:	693b      	ldr	r3, [r7, #16]
 810a124:	3304      	adds	r3, #4
 810a126:	4618      	mov	r0, r3
 810a128:	f7fe fca0 	bl	8108a6c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 810a12c:	693b      	ldr	r3, [r7, #16]
 810a12e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810a130:	693b      	ldr	r3, [r7, #16]
 810a132:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810a134:	693b      	ldr	r3, [r7, #16]
 810a136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a138:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 810a13c:	693b      	ldr	r3, [r7, #16]
 810a13e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 810a140:	693b      	ldr	r3, [r7, #16]
 810a142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a144:	4b0f      	ldr	r3, [pc, #60]	; (810a184 <xTaskPriorityDisinherit+0xd0>)
 810a146:	681b      	ldr	r3, [r3, #0]
 810a148:	429a      	cmp	r2, r3
 810a14a:	d903      	bls.n	810a154 <xTaskPriorityDisinherit+0xa0>
 810a14c:	693b      	ldr	r3, [r7, #16]
 810a14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a150:	4a0c      	ldr	r2, [pc, #48]	; (810a184 <xTaskPriorityDisinherit+0xd0>)
 810a152:	6013      	str	r3, [r2, #0]
 810a154:	693b      	ldr	r3, [r7, #16]
 810a156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a158:	4613      	mov	r3, r2
 810a15a:	009b      	lsls	r3, r3, #2
 810a15c:	4413      	add	r3, r2
 810a15e:	009b      	lsls	r3, r3, #2
 810a160:	4a09      	ldr	r2, [pc, #36]	; (810a188 <xTaskPriorityDisinherit+0xd4>)
 810a162:	441a      	add	r2, r3
 810a164:	693b      	ldr	r3, [r7, #16]
 810a166:	3304      	adds	r3, #4
 810a168:	4619      	mov	r1, r3
 810a16a:	4610      	mov	r0, r2
 810a16c:	f7fe fc21 	bl	81089b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 810a170:	2301      	movs	r3, #1
 810a172:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 810a174:	697b      	ldr	r3, [r7, #20]
	}
 810a176:	4618      	mov	r0, r3
 810a178:	3718      	adds	r7, #24
 810a17a:	46bd      	mov	sp, r7
 810a17c:	bd80      	pop	{r7, pc}
 810a17e:	bf00      	nop
 810a180:	100008f4 	.word	0x100008f4
 810a184:	10000dd0 	.word	0x10000dd0
 810a188:	100008f8 	.word	0x100008f8

0810a18c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 810a18c:	b580      	push	{r7, lr}
 810a18e:	b084      	sub	sp, #16
 810a190:	af00      	add	r7, sp, #0
 810a192:	6078      	str	r0, [r7, #4]
 810a194:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 810a196:	4b21      	ldr	r3, [pc, #132]	; (810a21c <prvAddCurrentTaskToDelayedList+0x90>)
 810a198:	681b      	ldr	r3, [r3, #0]
 810a19a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810a19c:	4b20      	ldr	r3, [pc, #128]	; (810a220 <prvAddCurrentTaskToDelayedList+0x94>)
 810a19e:	681b      	ldr	r3, [r3, #0]
 810a1a0:	3304      	adds	r3, #4
 810a1a2:	4618      	mov	r0, r3
 810a1a4:	f7fe fc62 	bl	8108a6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 810a1a8:	687b      	ldr	r3, [r7, #4]
 810a1aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810a1ae:	d10a      	bne.n	810a1c6 <prvAddCurrentTaskToDelayedList+0x3a>
 810a1b0:	683b      	ldr	r3, [r7, #0]
 810a1b2:	2b00      	cmp	r3, #0
 810a1b4:	d007      	beq.n	810a1c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810a1b6:	4b1a      	ldr	r3, [pc, #104]	; (810a220 <prvAddCurrentTaskToDelayedList+0x94>)
 810a1b8:	681b      	ldr	r3, [r3, #0]
 810a1ba:	3304      	adds	r3, #4
 810a1bc:	4619      	mov	r1, r3
 810a1be:	4819      	ldr	r0, [pc, #100]	; (810a224 <prvAddCurrentTaskToDelayedList+0x98>)
 810a1c0:	f7fe fbf7 	bl	81089b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 810a1c4:	e026      	b.n	810a214 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 810a1c6:	68fa      	ldr	r2, [r7, #12]
 810a1c8:	687b      	ldr	r3, [r7, #4]
 810a1ca:	4413      	add	r3, r2
 810a1cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 810a1ce:	4b14      	ldr	r3, [pc, #80]	; (810a220 <prvAddCurrentTaskToDelayedList+0x94>)
 810a1d0:	681b      	ldr	r3, [r3, #0]
 810a1d2:	68ba      	ldr	r2, [r7, #8]
 810a1d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 810a1d6:	68ba      	ldr	r2, [r7, #8]
 810a1d8:	68fb      	ldr	r3, [r7, #12]
 810a1da:	429a      	cmp	r2, r3
 810a1dc:	d209      	bcs.n	810a1f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810a1de:	4b12      	ldr	r3, [pc, #72]	; (810a228 <prvAddCurrentTaskToDelayedList+0x9c>)
 810a1e0:	681a      	ldr	r2, [r3, #0]
 810a1e2:	4b0f      	ldr	r3, [pc, #60]	; (810a220 <prvAddCurrentTaskToDelayedList+0x94>)
 810a1e4:	681b      	ldr	r3, [r3, #0]
 810a1e6:	3304      	adds	r3, #4
 810a1e8:	4619      	mov	r1, r3
 810a1ea:	4610      	mov	r0, r2
 810a1ec:	f7fe fc05 	bl	81089fa <vListInsert>
}
 810a1f0:	e010      	b.n	810a214 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810a1f2:	4b0e      	ldr	r3, [pc, #56]	; (810a22c <prvAddCurrentTaskToDelayedList+0xa0>)
 810a1f4:	681a      	ldr	r2, [r3, #0]
 810a1f6:	4b0a      	ldr	r3, [pc, #40]	; (810a220 <prvAddCurrentTaskToDelayedList+0x94>)
 810a1f8:	681b      	ldr	r3, [r3, #0]
 810a1fa:	3304      	adds	r3, #4
 810a1fc:	4619      	mov	r1, r3
 810a1fe:	4610      	mov	r0, r2
 810a200:	f7fe fbfb 	bl	81089fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 810a204:	4b0a      	ldr	r3, [pc, #40]	; (810a230 <prvAddCurrentTaskToDelayedList+0xa4>)
 810a206:	681b      	ldr	r3, [r3, #0]
 810a208:	68ba      	ldr	r2, [r7, #8]
 810a20a:	429a      	cmp	r2, r3
 810a20c:	d202      	bcs.n	810a214 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 810a20e:	4a08      	ldr	r2, [pc, #32]	; (810a230 <prvAddCurrentTaskToDelayedList+0xa4>)
 810a210:	68bb      	ldr	r3, [r7, #8]
 810a212:	6013      	str	r3, [r2, #0]
}
 810a214:	bf00      	nop
 810a216:	3710      	adds	r7, #16
 810a218:	46bd      	mov	sp, r7
 810a21a:	bd80      	pop	{r7, pc}
 810a21c:	10000dcc 	.word	0x10000dcc
 810a220:	100008f4 	.word	0x100008f4
 810a224:	10000db4 	.word	0x10000db4
 810a228:	10000d84 	.word	0x10000d84
 810a22c:	10000d80 	.word	0x10000d80
 810a230:	10000de8 	.word	0x10000de8

0810a234 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 810a234:	b580      	push	{r7, lr}
 810a236:	b08a      	sub	sp, #40	; 0x28
 810a238:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 810a23a:	2300      	movs	r3, #0
 810a23c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 810a23e:	f000 faff 	bl	810a840 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 810a242:	4b1c      	ldr	r3, [pc, #112]	; (810a2b4 <xTimerCreateTimerTask+0x80>)
 810a244:	681b      	ldr	r3, [r3, #0]
 810a246:	2b00      	cmp	r3, #0
 810a248:	d021      	beq.n	810a28e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 810a24a:	2300      	movs	r3, #0
 810a24c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 810a24e:	2300      	movs	r3, #0
 810a250:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 810a252:	1d3a      	adds	r2, r7, #4
 810a254:	f107 0108 	add.w	r1, r7, #8
 810a258:	f107 030c 	add.w	r3, r7, #12
 810a25c:	4618      	mov	r0, r3
 810a25e:	f7fe fb61 	bl	8108924 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 810a262:	6879      	ldr	r1, [r7, #4]
 810a264:	68bb      	ldr	r3, [r7, #8]
 810a266:	68fa      	ldr	r2, [r7, #12]
 810a268:	9202      	str	r2, [sp, #8]
 810a26a:	9301      	str	r3, [sp, #4]
 810a26c:	2302      	movs	r3, #2
 810a26e:	9300      	str	r3, [sp, #0]
 810a270:	2300      	movs	r3, #0
 810a272:	460a      	mov	r2, r1
 810a274:	4910      	ldr	r1, [pc, #64]	; (810a2b8 <xTimerCreateTimerTask+0x84>)
 810a276:	4811      	ldr	r0, [pc, #68]	; (810a2bc <xTimerCreateTimerTask+0x88>)
 810a278:	f7ff f8f6 	bl	8109468 <xTaskCreateStatic>
 810a27c:	4602      	mov	r2, r0
 810a27e:	4b10      	ldr	r3, [pc, #64]	; (810a2c0 <xTimerCreateTimerTask+0x8c>)
 810a280:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 810a282:	4b0f      	ldr	r3, [pc, #60]	; (810a2c0 <xTimerCreateTimerTask+0x8c>)
 810a284:	681b      	ldr	r3, [r3, #0]
 810a286:	2b00      	cmp	r3, #0
 810a288:	d001      	beq.n	810a28e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 810a28a:	2301      	movs	r3, #1
 810a28c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 810a28e:	697b      	ldr	r3, [r7, #20]
 810a290:	2b00      	cmp	r3, #0
 810a292:	d109      	bne.n	810a2a8 <xTimerCreateTimerTask+0x74>
 810a294:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a298:	f383 8811 	msr	BASEPRI, r3
 810a29c:	f3bf 8f6f 	isb	sy
 810a2a0:	f3bf 8f4f 	dsb	sy
 810a2a4:	613b      	str	r3, [r7, #16]
 810a2a6:	e7fe      	b.n	810a2a6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 810a2a8:	697b      	ldr	r3, [r7, #20]
}
 810a2aa:	4618      	mov	r0, r3
 810a2ac:	3718      	adds	r7, #24
 810a2ae:	46bd      	mov	sp, r7
 810a2b0:	bd80      	pop	{r7, pc}
 810a2b2:	bf00      	nop
 810a2b4:	10000e24 	.word	0x10000e24
 810a2b8:	0810ef0c 	.word	0x0810ef0c
 810a2bc:	0810a3f5 	.word	0x0810a3f5
 810a2c0:	10000e28 	.word	0x10000e28

0810a2c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 810a2c4:	b580      	push	{r7, lr}
 810a2c6:	b08a      	sub	sp, #40	; 0x28
 810a2c8:	af00      	add	r7, sp, #0
 810a2ca:	60f8      	str	r0, [r7, #12]
 810a2cc:	60b9      	str	r1, [r7, #8]
 810a2ce:	607a      	str	r2, [r7, #4]
 810a2d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 810a2d2:	2300      	movs	r3, #0
 810a2d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 810a2d6:	68fb      	ldr	r3, [r7, #12]
 810a2d8:	2b00      	cmp	r3, #0
 810a2da:	d109      	bne.n	810a2f0 <xTimerGenericCommand+0x2c>
 810a2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a2e0:	f383 8811 	msr	BASEPRI, r3
 810a2e4:	f3bf 8f6f 	isb	sy
 810a2e8:	f3bf 8f4f 	dsb	sy
 810a2ec:	623b      	str	r3, [r7, #32]
 810a2ee:	e7fe      	b.n	810a2ee <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 810a2f0:	4b19      	ldr	r3, [pc, #100]	; (810a358 <xTimerGenericCommand+0x94>)
 810a2f2:	681b      	ldr	r3, [r3, #0]
 810a2f4:	2b00      	cmp	r3, #0
 810a2f6:	d02a      	beq.n	810a34e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 810a2f8:	68bb      	ldr	r3, [r7, #8]
 810a2fa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 810a2fc:	687b      	ldr	r3, [r7, #4]
 810a2fe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 810a300:	68fb      	ldr	r3, [r7, #12]
 810a302:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 810a304:	68bb      	ldr	r3, [r7, #8]
 810a306:	2b05      	cmp	r3, #5
 810a308:	dc18      	bgt.n	810a33c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 810a30a:	f7ff feb5 	bl	810a078 <xTaskGetSchedulerState>
 810a30e:	4603      	mov	r3, r0
 810a310:	2b02      	cmp	r3, #2
 810a312:	d109      	bne.n	810a328 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 810a314:	4b10      	ldr	r3, [pc, #64]	; (810a358 <xTimerGenericCommand+0x94>)
 810a316:	6818      	ldr	r0, [r3, #0]
 810a318:	f107 0110 	add.w	r1, r7, #16
 810a31c:	2300      	movs	r3, #0
 810a31e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810a320:	f7fe fccc 	bl	8108cbc <xQueueGenericSend>
 810a324:	6278      	str	r0, [r7, #36]	; 0x24
 810a326:	e012      	b.n	810a34e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 810a328:	4b0b      	ldr	r3, [pc, #44]	; (810a358 <xTimerGenericCommand+0x94>)
 810a32a:	6818      	ldr	r0, [r3, #0]
 810a32c:	f107 0110 	add.w	r1, r7, #16
 810a330:	2300      	movs	r3, #0
 810a332:	2200      	movs	r2, #0
 810a334:	f7fe fcc2 	bl	8108cbc <xQueueGenericSend>
 810a338:	6278      	str	r0, [r7, #36]	; 0x24
 810a33a:	e008      	b.n	810a34e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 810a33c:	4b06      	ldr	r3, [pc, #24]	; (810a358 <xTimerGenericCommand+0x94>)
 810a33e:	6818      	ldr	r0, [r3, #0]
 810a340:	f107 0110 	add.w	r1, r7, #16
 810a344:	2300      	movs	r3, #0
 810a346:	683a      	ldr	r2, [r7, #0]
 810a348:	f7fe fdb2 	bl	8108eb0 <xQueueGenericSendFromISR>
 810a34c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 810a34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 810a350:	4618      	mov	r0, r3
 810a352:	3728      	adds	r7, #40	; 0x28
 810a354:	46bd      	mov	sp, r7
 810a356:	bd80      	pop	{r7, pc}
 810a358:	10000e24 	.word	0x10000e24

0810a35c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 810a35c:	b580      	push	{r7, lr}
 810a35e:	b088      	sub	sp, #32
 810a360:	af02      	add	r7, sp, #8
 810a362:	6078      	str	r0, [r7, #4]
 810a364:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a366:	4b22      	ldr	r3, [pc, #136]	; (810a3f0 <prvProcessExpiredTimer+0x94>)
 810a368:	681b      	ldr	r3, [r3, #0]
 810a36a:	68db      	ldr	r3, [r3, #12]
 810a36c:	68db      	ldr	r3, [r3, #12]
 810a36e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810a370:	697b      	ldr	r3, [r7, #20]
 810a372:	3304      	adds	r3, #4
 810a374:	4618      	mov	r0, r3
 810a376:	f7fe fb79 	bl	8108a6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810a37a:	697b      	ldr	r3, [r7, #20]
 810a37c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810a380:	f003 0304 	and.w	r3, r3, #4
 810a384:	2b00      	cmp	r3, #0
 810a386:	d021      	beq.n	810a3cc <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 810a388:	697b      	ldr	r3, [r7, #20]
 810a38a:	699a      	ldr	r2, [r3, #24]
 810a38c:	687b      	ldr	r3, [r7, #4]
 810a38e:	18d1      	adds	r1, r2, r3
 810a390:	687b      	ldr	r3, [r7, #4]
 810a392:	683a      	ldr	r2, [r7, #0]
 810a394:	6978      	ldr	r0, [r7, #20]
 810a396:	f000 f8d1 	bl	810a53c <prvInsertTimerInActiveList>
 810a39a:	4603      	mov	r3, r0
 810a39c:	2b00      	cmp	r3, #0
 810a39e:	d01e      	beq.n	810a3de <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810a3a0:	2300      	movs	r3, #0
 810a3a2:	9300      	str	r3, [sp, #0]
 810a3a4:	2300      	movs	r3, #0
 810a3a6:	687a      	ldr	r2, [r7, #4]
 810a3a8:	2100      	movs	r1, #0
 810a3aa:	6978      	ldr	r0, [r7, #20]
 810a3ac:	f7ff ff8a 	bl	810a2c4 <xTimerGenericCommand>
 810a3b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 810a3b2:	693b      	ldr	r3, [r7, #16]
 810a3b4:	2b00      	cmp	r3, #0
 810a3b6:	d112      	bne.n	810a3de <prvProcessExpiredTimer+0x82>
 810a3b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a3bc:	f383 8811 	msr	BASEPRI, r3
 810a3c0:	f3bf 8f6f 	isb	sy
 810a3c4:	f3bf 8f4f 	dsb	sy
 810a3c8:	60fb      	str	r3, [r7, #12]
 810a3ca:	e7fe      	b.n	810a3ca <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810a3cc:	697b      	ldr	r3, [r7, #20]
 810a3ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810a3d2:	f023 0301 	bic.w	r3, r3, #1
 810a3d6:	b2da      	uxtb	r2, r3
 810a3d8:	697b      	ldr	r3, [r7, #20]
 810a3da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810a3de:	697b      	ldr	r3, [r7, #20]
 810a3e0:	6a1b      	ldr	r3, [r3, #32]
 810a3e2:	6978      	ldr	r0, [r7, #20]
 810a3e4:	4798      	blx	r3
}
 810a3e6:	bf00      	nop
 810a3e8:	3718      	adds	r7, #24
 810a3ea:	46bd      	mov	sp, r7
 810a3ec:	bd80      	pop	{r7, pc}
 810a3ee:	bf00      	nop
 810a3f0:	10000e1c 	.word	0x10000e1c

0810a3f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 810a3f4:	b580      	push	{r7, lr}
 810a3f6:	b084      	sub	sp, #16
 810a3f8:	af00      	add	r7, sp, #0
 810a3fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810a3fc:	f107 0308 	add.w	r3, r7, #8
 810a400:	4618      	mov	r0, r3
 810a402:	f000 f857 	bl	810a4b4 <prvGetNextExpireTime>
 810a406:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 810a408:	68bb      	ldr	r3, [r7, #8]
 810a40a:	4619      	mov	r1, r3
 810a40c:	68f8      	ldr	r0, [r7, #12]
 810a40e:	f000 f803 	bl	810a418 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 810a412:	f000 f8d5 	bl	810a5c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810a416:	e7f1      	b.n	810a3fc <prvTimerTask+0x8>

0810a418 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 810a418:	b580      	push	{r7, lr}
 810a41a:	b084      	sub	sp, #16
 810a41c:	af00      	add	r7, sp, #0
 810a41e:	6078      	str	r0, [r7, #4]
 810a420:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 810a422:	f7ff fa57 	bl	81098d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810a426:	f107 0308 	add.w	r3, r7, #8
 810a42a:	4618      	mov	r0, r3
 810a42c:	f000 f866 	bl	810a4fc <prvSampleTimeNow>
 810a430:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 810a432:	68bb      	ldr	r3, [r7, #8]
 810a434:	2b00      	cmp	r3, #0
 810a436:	d130      	bne.n	810a49a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 810a438:	683b      	ldr	r3, [r7, #0]
 810a43a:	2b00      	cmp	r3, #0
 810a43c:	d10a      	bne.n	810a454 <prvProcessTimerOrBlockTask+0x3c>
 810a43e:	687a      	ldr	r2, [r7, #4]
 810a440:	68fb      	ldr	r3, [r7, #12]
 810a442:	429a      	cmp	r2, r3
 810a444:	d806      	bhi.n	810a454 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 810a446:	f7ff fa53 	bl	81098f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 810a44a:	68f9      	ldr	r1, [r7, #12]
 810a44c:	6878      	ldr	r0, [r7, #4]
 810a44e:	f7ff ff85 	bl	810a35c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 810a452:	e024      	b.n	810a49e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 810a454:	683b      	ldr	r3, [r7, #0]
 810a456:	2b00      	cmp	r3, #0
 810a458:	d008      	beq.n	810a46c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 810a45a:	4b13      	ldr	r3, [pc, #76]	; (810a4a8 <prvProcessTimerOrBlockTask+0x90>)
 810a45c:	681b      	ldr	r3, [r3, #0]
 810a45e:	681b      	ldr	r3, [r3, #0]
 810a460:	2b00      	cmp	r3, #0
 810a462:	d101      	bne.n	810a468 <prvProcessTimerOrBlockTask+0x50>
 810a464:	2301      	movs	r3, #1
 810a466:	e000      	b.n	810a46a <prvProcessTimerOrBlockTask+0x52>
 810a468:	2300      	movs	r3, #0
 810a46a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 810a46c:	4b0f      	ldr	r3, [pc, #60]	; (810a4ac <prvProcessTimerOrBlockTask+0x94>)
 810a46e:	6818      	ldr	r0, [r3, #0]
 810a470:	687a      	ldr	r2, [r7, #4]
 810a472:	68fb      	ldr	r3, [r7, #12]
 810a474:	1ad3      	subs	r3, r2, r3
 810a476:	683a      	ldr	r2, [r7, #0]
 810a478:	4619      	mov	r1, r3
 810a47a:	f7fe ffc1 	bl	8109400 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 810a47e:	f7ff fa37 	bl	81098f0 <xTaskResumeAll>
 810a482:	4603      	mov	r3, r0
 810a484:	2b00      	cmp	r3, #0
 810a486:	d10a      	bne.n	810a49e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 810a488:	4b09      	ldr	r3, [pc, #36]	; (810a4b0 <prvProcessTimerOrBlockTask+0x98>)
 810a48a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810a48e:	601a      	str	r2, [r3, #0]
 810a490:	f3bf 8f4f 	dsb	sy
 810a494:	f3bf 8f6f 	isb	sy
}
 810a498:	e001      	b.n	810a49e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 810a49a:	f7ff fa29 	bl	81098f0 <xTaskResumeAll>
}
 810a49e:	bf00      	nop
 810a4a0:	3710      	adds	r7, #16
 810a4a2:	46bd      	mov	sp, r7
 810a4a4:	bd80      	pop	{r7, pc}
 810a4a6:	bf00      	nop
 810a4a8:	10000e20 	.word	0x10000e20
 810a4ac:	10000e24 	.word	0x10000e24
 810a4b0:	e000ed04 	.word	0xe000ed04

0810a4b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 810a4b4:	b480      	push	{r7}
 810a4b6:	b085      	sub	sp, #20
 810a4b8:	af00      	add	r7, sp, #0
 810a4ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 810a4bc:	4b0e      	ldr	r3, [pc, #56]	; (810a4f8 <prvGetNextExpireTime+0x44>)
 810a4be:	681b      	ldr	r3, [r3, #0]
 810a4c0:	681b      	ldr	r3, [r3, #0]
 810a4c2:	2b00      	cmp	r3, #0
 810a4c4:	d101      	bne.n	810a4ca <prvGetNextExpireTime+0x16>
 810a4c6:	2201      	movs	r2, #1
 810a4c8:	e000      	b.n	810a4cc <prvGetNextExpireTime+0x18>
 810a4ca:	2200      	movs	r2, #0
 810a4cc:	687b      	ldr	r3, [r7, #4]
 810a4ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 810a4d0:	687b      	ldr	r3, [r7, #4]
 810a4d2:	681b      	ldr	r3, [r3, #0]
 810a4d4:	2b00      	cmp	r3, #0
 810a4d6:	d105      	bne.n	810a4e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810a4d8:	4b07      	ldr	r3, [pc, #28]	; (810a4f8 <prvGetNextExpireTime+0x44>)
 810a4da:	681b      	ldr	r3, [r3, #0]
 810a4dc:	68db      	ldr	r3, [r3, #12]
 810a4de:	681b      	ldr	r3, [r3, #0]
 810a4e0:	60fb      	str	r3, [r7, #12]
 810a4e2:	e001      	b.n	810a4e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 810a4e4:	2300      	movs	r3, #0
 810a4e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 810a4e8:	68fb      	ldr	r3, [r7, #12]
}
 810a4ea:	4618      	mov	r0, r3
 810a4ec:	3714      	adds	r7, #20
 810a4ee:	46bd      	mov	sp, r7
 810a4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a4f4:	4770      	bx	lr
 810a4f6:	bf00      	nop
 810a4f8:	10000e1c 	.word	0x10000e1c

0810a4fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 810a4fc:	b580      	push	{r7, lr}
 810a4fe:	b084      	sub	sp, #16
 810a500:	af00      	add	r7, sp, #0
 810a502:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 810a504:	f7ff fa90 	bl	8109a28 <xTaskGetTickCount>
 810a508:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 810a50a:	4b0b      	ldr	r3, [pc, #44]	; (810a538 <prvSampleTimeNow+0x3c>)
 810a50c:	681b      	ldr	r3, [r3, #0]
 810a50e:	68fa      	ldr	r2, [r7, #12]
 810a510:	429a      	cmp	r2, r3
 810a512:	d205      	bcs.n	810a520 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 810a514:	f000 f930 	bl	810a778 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 810a518:	687b      	ldr	r3, [r7, #4]
 810a51a:	2201      	movs	r2, #1
 810a51c:	601a      	str	r2, [r3, #0]
 810a51e:	e002      	b.n	810a526 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 810a520:	687b      	ldr	r3, [r7, #4]
 810a522:	2200      	movs	r2, #0
 810a524:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 810a526:	4a04      	ldr	r2, [pc, #16]	; (810a538 <prvSampleTimeNow+0x3c>)
 810a528:	68fb      	ldr	r3, [r7, #12]
 810a52a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 810a52c:	68fb      	ldr	r3, [r7, #12]
}
 810a52e:	4618      	mov	r0, r3
 810a530:	3710      	adds	r7, #16
 810a532:	46bd      	mov	sp, r7
 810a534:	bd80      	pop	{r7, pc}
 810a536:	bf00      	nop
 810a538:	10000e2c 	.word	0x10000e2c

0810a53c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 810a53c:	b580      	push	{r7, lr}
 810a53e:	b086      	sub	sp, #24
 810a540:	af00      	add	r7, sp, #0
 810a542:	60f8      	str	r0, [r7, #12]
 810a544:	60b9      	str	r1, [r7, #8]
 810a546:	607a      	str	r2, [r7, #4]
 810a548:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 810a54a:	2300      	movs	r3, #0
 810a54c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 810a54e:	68fb      	ldr	r3, [r7, #12]
 810a550:	68ba      	ldr	r2, [r7, #8]
 810a552:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 810a554:	68fb      	ldr	r3, [r7, #12]
 810a556:	68fa      	ldr	r2, [r7, #12]
 810a558:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 810a55a:	68ba      	ldr	r2, [r7, #8]
 810a55c:	687b      	ldr	r3, [r7, #4]
 810a55e:	429a      	cmp	r2, r3
 810a560:	d812      	bhi.n	810a588 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810a562:	687a      	ldr	r2, [r7, #4]
 810a564:	683b      	ldr	r3, [r7, #0]
 810a566:	1ad2      	subs	r2, r2, r3
 810a568:	68fb      	ldr	r3, [r7, #12]
 810a56a:	699b      	ldr	r3, [r3, #24]
 810a56c:	429a      	cmp	r2, r3
 810a56e:	d302      	bcc.n	810a576 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 810a570:	2301      	movs	r3, #1
 810a572:	617b      	str	r3, [r7, #20]
 810a574:	e01b      	b.n	810a5ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 810a576:	4b10      	ldr	r3, [pc, #64]	; (810a5b8 <prvInsertTimerInActiveList+0x7c>)
 810a578:	681a      	ldr	r2, [r3, #0]
 810a57a:	68fb      	ldr	r3, [r7, #12]
 810a57c:	3304      	adds	r3, #4
 810a57e:	4619      	mov	r1, r3
 810a580:	4610      	mov	r0, r2
 810a582:	f7fe fa3a 	bl	81089fa <vListInsert>
 810a586:	e012      	b.n	810a5ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 810a588:	687a      	ldr	r2, [r7, #4]
 810a58a:	683b      	ldr	r3, [r7, #0]
 810a58c:	429a      	cmp	r2, r3
 810a58e:	d206      	bcs.n	810a59e <prvInsertTimerInActiveList+0x62>
 810a590:	68ba      	ldr	r2, [r7, #8]
 810a592:	683b      	ldr	r3, [r7, #0]
 810a594:	429a      	cmp	r2, r3
 810a596:	d302      	bcc.n	810a59e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 810a598:	2301      	movs	r3, #1
 810a59a:	617b      	str	r3, [r7, #20]
 810a59c:	e007      	b.n	810a5ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810a59e:	4b07      	ldr	r3, [pc, #28]	; (810a5bc <prvInsertTimerInActiveList+0x80>)
 810a5a0:	681a      	ldr	r2, [r3, #0]
 810a5a2:	68fb      	ldr	r3, [r7, #12]
 810a5a4:	3304      	adds	r3, #4
 810a5a6:	4619      	mov	r1, r3
 810a5a8:	4610      	mov	r0, r2
 810a5aa:	f7fe fa26 	bl	81089fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 810a5ae:	697b      	ldr	r3, [r7, #20]
}
 810a5b0:	4618      	mov	r0, r3
 810a5b2:	3718      	adds	r7, #24
 810a5b4:	46bd      	mov	sp, r7
 810a5b6:	bd80      	pop	{r7, pc}
 810a5b8:	10000e20 	.word	0x10000e20
 810a5bc:	10000e1c 	.word	0x10000e1c

0810a5c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 810a5c0:	b580      	push	{r7, lr}
 810a5c2:	b08e      	sub	sp, #56	; 0x38
 810a5c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810a5c6:	e0c6      	b.n	810a756 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 810a5c8:	687b      	ldr	r3, [r7, #4]
 810a5ca:	2b00      	cmp	r3, #0
 810a5cc:	da17      	bge.n	810a5fe <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 810a5ce:	1d3b      	adds	r3, r7, #4
 810a5d0:	3304      	adds	r3, #4
 810a5d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 810a5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a5d6:	2b00      	cmp	r3, #0
 810a5d8:	d109      	bne.n	810a5ee <prvProcessReceivedCommands+0x2e>
 810a5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a5de:	f383 8811 	msr	BASEPRI, r3
 810a5e2:	f3bf 8f6f 	isb	sy
 810a5e6:	f3bf 8f4f 	dsb	sy
 810a5ea:	61fb      	str	r3, [r7, #28]
 810a5ec:	e7fe      	b.n	810a5ec <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 810a5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a5f0:	681b      	ldr	r3, [r3, #0]
 810a5f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810a5f4:	6850      	ldr	r0, [r2, #4]
 810a5f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810a5f8:	6892      	ldr	r2, [r2, #8]
 810a5fa:	4611      	mov	r1, r2
 810a5fc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 810a5fe:	687b      	ldr	r3, [r7, #4]
 810a600:	2b00      	cmp	r3, #0
 810a602:	f2c0 80a7 	blt.w	810a754 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 810a606:	68fb      	ldr	r3, [r7, #12]
 810a608:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 810a60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a60c:	695b      	ldr	r3, [r3, #20]
 810a60e:	2b00      	cmp	r3, #0
 810a610:	d004      	beq.n	810a61c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810a612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a614:	3304      	adds	r3, #4
 810a616:	4618      	mov	r0, r3
 810a618:	f7fe fa28 	bl	8108a6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810a61c:	463b      	mov	r3, r7
 810a61e:	4618      	mov	r0, r3
 810a620:	f7ff ff6c 	bl	810a4fc <prvSampleTimeNow>
 810a624:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 810a626:	687b      	ldr	r3, [r7, #4]
 810a628:	2b09      	cmp	r3, #9
 810a62a:	f200 8094 	bhi.w	810a756 <prvProcessReceivedCommands+0x196>
 810a62e:	a201      	add	r2, pc, #4	; (adr r2, 810a634 <prvProcessReceivedCommands+0x74>)
 810a630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a634:	0810a65d 	.word	0x0810a65d
 810a638:	0810a65d 	.word	0x0810a65d
 810a63c:	0810a65d 	.word	0x0810a65d
 810a640:	0810a6cf 	.word	0x0810a6cf
 810a644:	0810a6e3 	.word	0x0810a6e3
 810a648:	0810a72b 	.word	0x0810a72b
 810a64c:	0810a65d 	.word	0x0810a65d
 810a650:	0810a65d 	.word	0x0810a65d
 810a654:	0810a6cf 	.word	0x0810a6cf
 810a658:	0810a6e3 	.word	0x0810a6e3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810a65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a65e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810a662:	f043 0301 	orr.w	r3, r3, #1
 810a666:	b2da      	uxtb	r2, r3
 810a668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a66a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 810a66e:	68ba      	ldr	r2, [r7, #8]
 810a670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a672:	699b      	ldr	r3, [r3, #24]
 810a674:	18d1      	adds	r1, r2, r3
 810a676:	68bb      	ldr	r3, [r7, #8]
 810a678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810a67a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810a67c:	f7ff ff5e 	bl	810a53c <prvInsertTimerInActiveList>
 810a680:	4603      	mov	r3, r0
 810a682:	2b00      	cmp	r3, #0
 810a684:	d067      	beq.n	810a756 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810a686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a688:	6a1b      	ldr	r3, [r3, #32]
 810a68a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810a68c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810a68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a690:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810a694:	f003 0304 	and.w	r3, r3, #4
 810a698:	2b00      	cmp	r3, #0
 810a69a:	d05c      	beq.n	810a756 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 810a69c:	68ba      	ldr	r2, [r7, #8]
 810a69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a6a0:	699b      	ldr	r3, [r3, #24]
 810a6a2:	441a      	add	r2, r3
 810a6a4:	2300      	movs	r3, #0
 810a6a6:	9300      	str	r3, [sp, #0]
 810a6a8:	2300      	movs	r3, #0
 810a6aa:	2100      	movs	r1, #0
 810a6ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810a6ae:	f7ff fe09 	bl	810a2c4 <xTimerGenericCommand>
 810a6b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 810a6b4:	6a3b      	ldr	r3, [r7, #32]
 810a6b6:	2b00      	cmp	r3, #0
 810a6b8:	d14d      	bne.n	810a756 <prvProcessReceivedCommands+0x196>
 810a6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a6be:	f383 8811 	msr	BASEPRI, r3
 810a6c2:	f3bf 8f6f 	isb	sy
 810a6c6:	f3bf 8f4f 	dsb	sy
 810a6ca:	61bb      	str	r3, [r7, #24]
 810a6cc:	e7fe      	b.n	810a6cc <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810a6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a6d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810a6d4:	f023 0301 	bic.w	r3, r3, #1
 810a6d8:	b2da      	uxtb	r2, r3
 810a6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a6dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 810a6e0:	e039      	b.n	810a756 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810a6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a6e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810a6e8:	f043 0301 	orr.w	r3, r3, #1
 810a6ec:	b2da      	uxtb	r2, r3
 810a6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a6f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 810a6f4:	68ba      	ldr	r2, [r7, #8]
 810a6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a6f8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 810a6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a6fc:	699b      	ldr	r3, [r3, #24]
 810a6fe:	2b00      	cmp	r3, #0
 810a700:	d109      	bne.n	810a716 <prvProcessReceivedCommands+0x156>
 810a702:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a706:	f383 8811 	msr	BASEPRI, r3
 810a70a:	f3bf 8f6f 	isb	sy
 810a70e:	f3bf 8f4f 	dsb	sy
 810a712:	617b      	str	r3, [r7, #20]
 810a714:	e7fe      	b.n	810a714 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 810a716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a718:	699a      	ldr	r2, [r3, #24]
 810a71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810a71c:	18d1      	adds	r1, r2, r3
 810a71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810a720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810a722:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810a724:	f7ff ff0a 	bl	810a53c <prvInsertTimerInActiveList>
					break;
 810a728:	e015      	b.n	810a756 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 810a72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a72c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810a730:	f003 0302 	and.w	r3, r3, #2
 810a734:	2b00      	cmp	r3, #0
 810a736:	d103      	bne.n	810a740 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 810a738:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810a73a:	f000 fbc3 	bl	810aec4 <vPortFree>
 810a73e:	e00a      	b.n	810a756 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810a740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a742:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810a746:	f023 0301 	bic.w	r3, r3, #1
 810a74a:	b2da      	uxtb	r2, r3
 810a74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a74e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 810a752:	e000      	b.n	810a756 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 810a754:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810a756:	4b07      	ldr	r3, [pc, #28]	; (810a774 <prvProcessReceivedCommands+0x1b4>)
 810a758:	681b      	ldr	r3, [r3, #0]
 810a75a:	1d39      	adds	r1, r7, #4
 810a75c:	2200      	movs	r2, #0
 810a75e:	4618      	mov	r0, r3
 810a760:	f7fe fc3a 	bl	8108fd8 <xQueueReceive>
 810a764:	4603      	mov	r3, r0
 810a766:	2b00      	cmp	r3, #0
 810a768:	f47f af2e 	bne.w	810a5c8 <prvProcessReceivedCommands+0x8>
	}
}
 810a76c:	bf00      	nop
 810a76e:	3730      	adds	r7, #48	; 0x30
 810a770:	46bd      	mov	sp, r7
 810a772:	bd80      	pop	{r7, pc}
 810a774:	10000e24 	.word	0x10000e24

0810a778 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 810a778:	b580      	push	{r7, lr}
 810a77a:	b088      	sub	sp, #32
 810a77c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810a77e:	e047      	b.n	810a810 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810a780:	4b2d      	ldr	r3, [pc, #180]	; (810a838 <prvSwitchTimerLists+0xc0>)
 810a782:	681b      	ldr	r3, [r3, #0]
 810a784:	68db      	ldr	r3, [r3, #12]
 810a786:	681b      	ldr	r3, [r3, #0]
 810a788:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a78a:	4b2b      	ldr	r3, [pc, #172]	; (810a838 <prvSwitchTimerLists+0xc0>)
 810a78c:	681b      	ldr	r3, [r3, #0]
 810a78e:	68db      	ldr	r3, [r3, #12]
 810a790:	68db      	ldr	r3, [r3, #12]
 810a792:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810a794:	68fb      	ldr	r3, [r7, #12]
 810a796:	3304      	adds	r3, #4
 810a798:	4618      	mov	r0, r3
 810a79a:	f7fe f967 	bl	8108a6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810a79e:	68fb      	ldr	r3, [r7, #12]
 810a7a0:	6a1b      	ldr	r3, [r3, #32]
 810a7a2:	68f8      	ldr	r0, [r7, #12]
 810a7a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810a7a6:	68fb      	ldr	r3, [r7, #12]
 810a7a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810a7ac:	f003 0304 	and.w	r3, r3, #4
 810a7b0:	2b00      	cmp	r3, #0
 810a7b2:	d02d      	beq.n	810a810 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 810a7b4:	68fb      	ldr	r3, [r7, #12]
 810a7b6:	699b      	ldr	r3, [r3, #24]
 810a7b8:	693a      	ldr	r2, [r7, #16]
 810a7ba:	4413      	add	r3, r2
 810a7bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 810a7be:	68ba      	ldr	r2, [r7, #8]
 810a7c0:	693b      	ldr	r3, [r7, #16]
 810a7c2:	429a      	cmp	r2, r3
 810a7c4:	d90e      	bls.n	810a7e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 810a7c6:	68fb      	ldr	r3, [r7, #12]
 810a7c8:	68ba      	ldr	r2, [r7, #8]
 810a7ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 810a7cc:	68fb      	ldr	r3, [r7, #12]
 810a7ce:	68fa      	ldr	r2, [r7, #12]
 810a7d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810a7d2:	4b19      	ldr	r3, [pc, #100]	; (810a838 <prvSwitchTimerLists+0xc0>)
 810a7d4:	681a      	ldr	r2, [r3, #0]
 810a7d6:	68fb      	ldr	r3, [r7, #12]
 810a7d8:	3304      	adds	r3, #4
 810a7da:	4619      	mov	r1, r3
 810a7dc:	4610      	mov	r0, r2
 810a7de:	f7fe f90c 	bl	81089fa <vListInsert>
 810a7e2:	e015      	b.n	810a810 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810a7e4:	2300      	movs	r3, #0
 810a7e6:	9300      	str	r3, [sp, #0]
 810a7e8:	2300      	movs	r3, #0
 810a7ea:	693a      	ldr	r2, [r7, #16]
 810a7ec:	2100      	movs	r1, #0
 810a7ee:	68f8      	ldr	r0, [r7, #12]
 810a7f0:	f7ff fd68 	bl	810a2c4 <xTimerGenericCommand>
 810a7f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 810a7f6:	687b      	ldr	r3, [r7, #4]
 810a7f8:	2b00      	cmp	r3, #0
 810a7fa:	d109      	bne.n	810a810 <prvSwitchTimerLists+0x98>
 810a7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a800:	f383 8811 	msr	BASEPRI, r3
 810a804:	f3bf 8f6f 	isb	sy
 810a808:	f3bf 8f4f 	dsb	sy
 810a80c:	603b      	str	r3, [r7, #0]
 810a80e:	e7fe      	b.n	810a80e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810a810:	4b09      	ldr	r3, [pc, #36]	; (810a838 <prvSwitchTimerLists+0xc0>)
 810a812:	681b      	ldr	r3, [r3, #0]
 810a814:	681b      	ldr	r3, [r3, #0]
 810a816:	2b00      	cmp	r3, #0
 810a818:	d1b2      	bne.n	810a780 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 810a81a:	4b07      	ldr	r3, [pc, #28]	; (810a838 <prvSwitchTimerLists+0xc0>)
 810a81c:	681b      	ldr	r3, [r3, #0]
 810a81e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 810a820:	4b06      	ldr	r3, [pc, #24]	; (810a83c <prvSwitchTimerLists+0xc4>)
 810a822:	681b      	ldr	r3, [r3, #0]
 810a824:	4a04      	ldr	r2, [pc, #16]	; (810a838 <prvSwitchTimerLists+0xc0>)
 810a826:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 810a828:	4a04      	ldr	r2, [pc, #16]	; (810a83c <prvSwitchTimerLists+0xc4>)
 810a82a:	697b      	ldr	r3, [r7, #20]
 810a82c:	6013      	str	r3, [r2, #0]
}
 810a82e:	bf00      	nop
 810a830:	3718      	adds	r7, #24
 810a832:	46bd      	mov	sp, r7
 810a834:	bd80      	pop	{r7, pc}
 810a836:	bf00      	nop
 810a838:	10000e1c 	.word	0x10000e1c
 810a83c:	10000e20 	.word	0x10000e20

0810a840 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 810a840:	b580      	push	{r7, lr}
 810a842:	b082      	sub	sp, #8
 810a844:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 810a846:	f000 f961 	bl	810ab0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 810a84a:	4b15      	ldr	r3, [pc, #84]	; (810a8a0 <prvCheckForValidListAndQueue+0x60>)
 810a84c:	681b      	ldr	r3, [r3, #0]
 810a84e:	2b00      	cmp	r3, #0
 810a850:	d120      	bne.n	810a894 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 810a852:	4814      	ldr	r0, [pc, #80]	; (810a8a4 <prvCheckForValidListAndQueue+0x64>)
 810a854:	f7fe f880 	bl	8108958 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 810a858:	4813      	ldr	r0, [pc, #76]	; (810a8a8 <prvCheckForValidListAndQueue+0x68>)
 810a85a:	f7fe f87d 	bl	8108958 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 810a85e:	4b13      	ldr	r3, [pc, #76]	; (810a8ac <prvCheckForValidListAndQueue+0x6c>)
 810a860:	4a10      	ldr	r2, [pc, #64]	; (810a8a4 <prvCheckForValidListAndQueue+0x64>)
 810a862:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 810a864:	4b12      	ldr	r3, [pc, #72]	; (810a8b0 <prvCheckForValidListAndQueue+0x70>)
 810a866:	4a10      	ldr	r2, [pc, #64]	; (810a8a8 <prvCheckForValidListAndQueue+0x68>)
 810a868:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 810a86a:	2300      	movs	r3, #0
 810a86c:	9300      	str	r3, [sp, #0]
 810a86e:	4b11      	ldr	r3, [pc, #68]	; (810a8b4 <prvCheckForValidListAndQueue+0x74>)
 810a870:	4a11      	ldr	r2, [pc, #68]	; (810a8b8 <prvCheckForValidListAndQueue+0x78>)
 810a872:	2110      	movs	r1, #16
 810a874:	200a      	movs	r0, #10
 810a876:	f7fe f98b 	bl	8108b90 <xQueueGenericCreateStatic>
 810a87a:	4602      	mov	r2, r0
 810a87c:	4b08      	ldr	r3, [pc, #32]	; (810a8a0 <prvCheckForValidListAndQueue+0x60>)
 810a87e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 810a880:	4b07      	ldr	r3, [pc, #28]	; (810a8a0 <prvCheckForValidListAndQueue+0x60>)
 810a882:	681b      	ldr	r3, [r3, #0]
 810a884:	2b00      	cmp	r3, #0
 810a886:	d005      	beq.n	810a894 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 810a888:	4b05      	ldr	r3, [pc, #20]	; (810a8a0 <prvCheckForValidListAndQueue+0x60>)
 810a88a:	681b      	ldr	r3, [r3, #0]
 810a88c:	490b      	ldr	r1, [pc, #44]	; (810a8bc <prvCheckForValidListAndQueue+0x7c>)
 810a88e:	4618      	mov	r0, r3
 810a890:	f7fe fd8e 	bl	81093b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810a894:	f000 f968 	bl	810ab68 <vPortExitCritical>
}
 810a898:	bf00      	nop
 810a89a:	46bd      	mov	sp, r7
 810a89c:	bd80      	pop	{r7, pc}
 810a89e:	bf00      	nop
 810a8a0:	10000e24 	.word	0x10000e24
 810a8a4:	10000df4 	.word	0x10000df4
 810a8a8:	10000e08 	.word	0x10000e08
 810a8ac:	10000e1c 	.word	0x10000e1c
 810a8b0:	10000e20 	.word	0x10000e20
 810a8b4:	10000ed0 	.word	0x10000ed0
 810a8b8:	10000e30 	.word	0x10000e30
 810a8bc:	0810ef14 	.word	0x0810ef14

0810a8c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 810a8c0:	b480      	push	{r7}
 810a8c2:	b085      	sub	sp, #20
 810a8c4:	af00      	add	r7, sp, #0
 810a8c6:	60f8      	str	r0, [r7, #12]
 810a8c8:	60b9      	str	r1, [r7, #8]
 810a8ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 810a8cc:	68fb      	ldr	r3, [r7, #12]
 810a8ce:	3b04      	subs	r3, #4
 810a8d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 810a8d2:	68fb      	ldr	r3, [r7, #12]
 810a8d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 810a8d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810a8da:	68fb      	ldr	r3, [r7, #12]
 810a8dc:	3b04      	subs	r3, #4
 810a8de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 810a8e0:	68bb      	ldr	r3, [r7, #8]
 810a8e2:	f023 0201 	bic.w	r2, r3, #1
 810a8e6:	68fb      	ldr	r3, [r7, #12]
 810a8e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810a8ea:	68fb      	ldr	r3, [r7, #12]
 810a8ec:	3b04      	subs	r3, #4
 810a8ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 810a8f0:	4a0c      	ldr	r2, [pc, #48]	; (810a924 <pxPortInitialiseStack+0x64>)
 810a8f2:	68fb      	ldr	r3, [r7, #12]
 810a8f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 810a8f6:	68fb      	ldr	r3, [r7, #12]
 810a8f8:	3b14      	subs	r3, #20
 810a8fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 810a8fc:	687a      	ldr	r2, [r7, #4]
 810a8fe:	68fb      	ldr	r3, [r7, #12]
 810a900:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 810a902:	68fb      	ldr	r3, [r7, #12]
 810a904:	3b04      	subs	r3, #4
 810a906:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 810a908:	68fb      	ldr	r3, [r7, #12]
 810a90a:	f06f 0202 	mvn.w	r2, #2
 810a90e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 810a910:	68fb      	ldr	r3, [r7, #12]
 810a912:	3b20      	subs	r3, #32
 810a914:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 810a916:	68fb      	ldr	r3, [r7, #12]
}
 810a918:	4618      	mov	r0, r3
 810a91a:	3714      	adds	r7, #20
 810a91c:	46bd      	mov	sp, r7
 810a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a922:	4770      	bx	lr
 810a924:	0810a929 	.word	0x0810a929

0810a928 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 810a928:	b480      	push	{r7}
 810a92a:	b085      	sub	sp, #20
 810a92c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 810a92e:	2300      	movs	r3, #0
 810a930:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 810a932:	4b11      	ldr	r3, [pc, #68]	; (810a978 <prvTaskExitError+0x50>)
 810a934:	681b      	ldr	r3, [r3, #0]
 810a936:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810a93a:	d009      	beq.n	810a950 <prvTaskExitError+0x28>
 810a93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a940:	f383 8811 	msr	BASEPRI, r3
 810a944:	f3bf 8f6f 	isb	sy
 810a948:	f3bf 8f4f 	dsb	sy
 810a94c:	60fb      	str	r3, [r7, #12]
 810a94e:	e7fe      	b.n	810a94e <prvTaskExitError+0x26>
 810a950:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a954:	f383 8811 	msr	BASEPRI, r3
 810a958:	f3bf 8f6f 	isb	sy
 810a95c:	f3bf 8f4f 	dsb	sy
 810a960:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 810a962:	bf00      	nop
 810a964:	687b      	ldr	r3, [r7, #4]
 810a966:	2b00      	cmp	r3, #0
 810a968:	d0fc      	beq.n	810a964 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 810a96a:	bf00      	nop
 810a96c:	3714      	adds	r7, #20
 810a96e:	46bd      	mov	sp, r7
 810a970:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a974:	4770      	bx	lr
 810a976:	bf00      	nop
 810a978:	10000024 	.word	0x10000024
 810a97c:	00000000 	.word	0x00000000

0810a980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 810a980:	4b07      	ldr	r3, [pc, #28]	; (810a9a0 <pxCurrentTCBConst2>)
 810a982:	6819      	ldr	r1, [r3, #0]
 810a984:	6808      	ldr	r0, [r1, #0]
 810a986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a98a:	f380 8809 	msr	PSP, r0
 810a98e:	f3bf 8f6f 	isb	sy
 810a992:	f04f 0000 	mov.w	r0, #0
 810a996:	f380 8811 	msr	BASEPRI, r0
 810a99a:	4770      	bx	lr
 810a99c:	f3af 8000 	nop.w

0810a9a0 <pxCurrentTCBConst2>:
 810a9a0:	100008f4 	.word	0x100008f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 810a9a4:	bf00      	nop
 810a9a6:	bf00      	nop

0810a9a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 810a9a8:	4808      	ldr	r0, [pc, #32]	; (810a9cc <prvPortStartFirstTask+0x24>)
 810a9aa:	6800      	ldr	r0, [r0, #0]
 810a9ac:	6800      	ldr	r0, [r0, #0]
 810a9ae:	f380 8808 	msr	MSP, r0
 810a9b2:	f04f 0000 	mov.w	r0, #0
 810a9b6:	f380 8814 	msr	CONTROL, r0
 810a9ba:	b662      	cpsie	i
 810a9bc:	b661      	cpsie	f
 810a9be:	f3bf 8f4f 	dsb	sy
 810a9c2:	f3bf 8f6f 	isb	sy
 810a9c6:	df00      	svc	0
 810a9c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 810a9ca:	bf00      	nop
 810a9cc:	e000ed08 	.word	0xe000ed08

0810a9d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 810a9d0:	b580      	push	{r7, lr}
 810a9d2:	b086      	sub	sp, #24
 810a9d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 810a9d6:	4b44      	ldr	r3, [pc, #272]	; (810aae8 <xPortStartScheduler+0x118>)
 810a9d8:	681b      	ldr	r3, [r3, #0]
 810a9da:	4a44      	ldr	r2, [pc, #272]	; (810aaec <xPortStartScheduler+0x11c>)
 810a9dc:	4293      	cmp	r3, r2
 810a9de:	d109      	bne.n	810a9f4 <xPortStartScheduler+0x24>
 810a9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a9e4:	f383 8811 	msr	BASEPRI, r3
 810a9e8:	f3bf 8f6f 	isb	sy
 810a9ec:	f3bf 8f4f 	dsb	sy
 810a9f0:	613b      	str	r3, [r7, #16]
 810a9f2:	e7fe      	b.n	810a9f2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 810a9f4:	4b3c      	ldr	r3, [pc, #240]	; (810aae8 <xPortStartScheduler+0x118>)
 810a9f6:	681b      	ldr	r3, [r3, #0]
 810a9f8:	4a3d      	ldr	r2, [pc, #244]	; (810aaf0 <xPortStartScheduler+0x120>)
 810a9fa:	4293      	cmp	r3, r2
 810a9fc:	d109      	bne.n	810aa12 <xPortStartScheduler+0x42>
 810a9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 810aa02:	f383 8811 	msr	BASEPRI, r3
 810aa06:	f3bf 8f6f 	isb	sy
 810aa0a:	f3bf 8f4f 	dsb	sy
 810aa0e:	60fb      	str	r3, [r7, #12]
 810aa10:	e7fe      	b.n	810aa10 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 810aa12:	4b38      	ldr	r3, [pc, #224]	; (810aaf4 <xPortStartScheduler+0x124>)
 810aa14:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 810aa16:	697b      	ldr	r3, [r7, #20]
 810aa18:	781b      	ldrb	r3, [r3, #0]
 810aa1a:	b2db      	uxtb	r3, r3
 810aa1c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 810aa1e:	697b      	ldr	r3, [r7, #20]
 810aa20:	22ff      	movs	r2, #255	; 0xff
 810aa22:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 810aa24:	697b      	ldr	r3, [r7, #20]
 810aa26:	781b      	ldrb	r3, [r3, #0]
 810aa28:	b2db      	uxtb	r3, r3
 810aa2a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 810aa2c:	78fb      	ldrb	r3, [r7, #3]
 810aa2e:	b2db      	uxtb	r3, r3
 810aa30:	f003 0350 	and.w	r3, r3, #80	; 0x50
 810aa34:	b2da      	uxtb	r2, r3
 810aa36:	4b30      	ldr	r3, [pc, #192]	; (810aaf8 <xPortStartScheduler+0x128>)
 810aa38:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 810aa3a:	4b30      	ldr	r3, [pc, #192]	; (810aafc <xPortStartScheduler+0x12c>)
 810aa3c:	2207      	movs	r2, #7
 810aa3e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810aa40:	e009      	b.n	810aa56 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 810aa42:	4b2e      	ldr	r3, [pc, #184]	; (810aafc <xPortStartScheduler+0x12c>)
 810aa44:	681b      	ldr	r3, [r3, #0]
 810aa46:	3b01      	subs	r3, #1
 810aa48:	4a2c      	ldr	r2, [pc, #176]	; (810aafc <xPortStartScheduler+0x12c>)
 810aa4a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 810aa4c:	78fb      	ldrb	r3, [r7, #3]
 810aa4e:	b2db      	uxtb	r3, r3
 810aa50:	005b      	lsls	r3, r3, #1
 810aa52:	b2db      	uxtb	r3, r3
 810aa54:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810aa56:	78fb      	ldrb	r3, [r7, #3]
 810aa58:	b2db      	uxtb	r3, r3
 810aa5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810aa5e:	2b80      	cmp	r3, #128	; 0x80
 810aa60:	d0ef      	beq.n	810aa42 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 810aa62:	4b26      	ldr	r3, [pc, #152]	; (810aafc <xPortStartScheduler+0x12c>)
 810aa64:	681b      	ldr	r3, [r3, #0]
 810aa66:	f1c3 0307 	rsb	r3, r3, #7
 810aa6a:	2b04      	cmp	r3, #4
 810aa6c:	d009      	beq.n	810aa82 <xPortStartScheduler+0xb2>
 810aa6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810aa72:	f383 8811 	msr	BASEPRI, r3
 810aa76:	f3bf 8f6f 	isb	sy
 810aa7a:	f3bf 8f4f 	dsb	sy
 810aa7e:	60bb      	str	r3, [r7, #8]
 810aa80:	e7fe      	b.n	810aa80 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 810aa82:	4b1e      	ldr	r3, [pc, #120]	; (810aafc <xPortStartScheduler+0x12c>)
 810aa84:	681b      	ldr	r3, [r3, #0]
 810aa86:	021b      	lsls	r3, r3, #8
 810aa88:	4a1c      	ldr	r2, [pc, #112]	; (810aafc <xPortStartScheduler+0x12c>)
 810aa8a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 810aa8c:	4b1b      	ldr	r3, [pc, #108]	; (810aafc <xPortStartScheduler+0x12c>)
 810aa8e:	681b      	ldr	r3, [r3, #0]
 810aa90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 810aa94:	4a19      	ldr	r2, [pc, #100]	; (810aafc <xPortStartScheduler+0x12c>)
 810aa96:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 810aa98:	687b      	ldr	r3, [r7, #4]
 810aa9a:	b2da      	uxtb	r2, r3
 810aa9c:	697b      	ldr	r3, [r7, #20]
 810aa9e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 810aaa0:	4b17      	ldr	r3, [pc, #92]	; (810ab00 <xPortStartScheduler+0x130>)
 810aaa2:	681b      	ldr	r3, [r3, #0]
 810aaa4:	4a16      	ldr	r2, [pc, #88]	; (810ab00 <xPortStartScheduler+0x130>)
 810aaa6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 810aaaa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 810aaac:	4b14      	ldr	r3, [pc, #80]	; (810ab00 <xPortStartScheduler+0x130>)
 810aaae:	681b      	ldr	r3, [r3, #0]
 810aab0:	4a13      	ldr	r2, [pc, #76]	; (810ab00 <xPortStartScheduler+0x130>)
 810aab2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 810aab6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 810aab8:	f000 f8d6 	bl	810ac68 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 810aabc:	4b11      	ldr	r3, [pc, #68]	; (810ab04 <xPortStartScheduler+0x134>)
 810aabe:	2200      	movs	r2, #0
 810aac0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 810aac2:	f000 f8f5 	bl	810acb0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 810aac6:	4b10      	ldr	r3, [pc, #64]	; (810ab08 <xPortStartScheduler+0x138>)
 810aac8:	681b      	ldr	r3, [r3, #0]
 810aaca:	4a0f      	ldr	r2, [pc, #60]	; (810ab08 <xPortStartScheduler+0x138>)
 810aacc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 810aad0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 810aad2:	f7ff ff69 	bl	810a9a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 810aad6:	f7ff f86f 	bl	8109bb8 <vTaskSwitchContext>
	prvTaskExitError();
 810aada:	f7ff ff25 	bl	810a928 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 810aade:	2300      	movs	r3, #0
}
 810aae0:	4618      	mov	r0, r3
 810aae2:	3718      	adds	r7, #24
 810aae4:	46bd      	mov	sp, r7
 810aae6:	bd80      	pop	{r7, pc}
 810aae8:	e000ed00 	.word	0xe000ed00
 810aaec:	410fc271 	.word	0x410fc271
 810aaf0:	410fc270 	.word	0x410fc270
 810aaf4:	e000e400 	.word	0xe000e400
 810aaf8:	10000f20 	.word	0x10000f20
 810aafc:	10000f24 	.word	0x10000f24
 810ab00:	e000ed20 	.word	0xe000ed20
 810ab04:	10000024 	.word	0x10000024
 810ab08:	e000ef34 	.word	0xe000ef34

0810ab0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 810ab0c:	b480      	push	{r7}
 810ab0e:	b083      	sub	sp, #12
 810ab10:	af00      	add	r7, sp, #0
 810ab12:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ab16:	f383 8811 	msr	BASEPRI, r3
 810ab1a:	f3bf 8f6f 	isb	sy
 810ab1e:	f3bf 8f4f 	dsb	sy
 810ab22:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 810ab24:	4b0e      	ldr	r3, [pc, #56]	; (810ab60 <vPortEnterCritical+0x54>)
 810ab26:	681b      	ldr	r3, [r3, #0]
 810ab28:	3301      	adds	r3, #1
 810ab2a:	4a0d      	ldr	r2, [pc, #52]	; (810ab60 <vPortEnterCritical+0x54>)
 810ab2c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 810ab2e:	4b0c      	ldr	r3, [pc, #48]	; (810ab60 <vPortEnterCritical+0x54>)
 810ab30:	681b      	ldr	r3, [r3, #0]
 810ab32:	2b01      	cmp	r3, #1
 810ab34:	d10e      	bne.n	810ab54 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 810ab36:	4b0b      	ldr	r3, [pc, #44]	; (810ab64 <vPortEnterCritical+0x58>)
 810ab38:	681b      	ldr	r3, [r3, #0]
 810ab3a:	b2db      	uxtb	r3, r3
 810ab3c:	2b00      	cmp	r3, #0
 810ab3e:	d009      	beq.n	810ab54 <vPortEnterCritical+0x48>
 810ab40:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ab44:	f383 8811 	msr	BASEPRI, r3
 810ab48:	f3bf 8f6f 	isb	sy
 810ab4c:	f3bf 8f4f 	dsb	sy
 810ab50:	603b      	str	r3, [r7, #0]
 810ab52:	e7fe      	b.n	810ab52 <vPortEnterCritical+0x46>
	}
}
 810ab54:	bf00      	nop
 810ab56:	370c      	adds	r7, #12
 810ab58:	46bd      	mov	sp, r7
 810ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ab5e:	4770      	bx	lr
 810ab60:	10000024 	.word	0x10000024
 810ab64:	e000ed04 	.word	0xe000ed04

0810ab68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 810ab68:	b480      	push	{r7}
 810ab6a:	b083      	sub	sp, #12
 810ab6c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 810ab6e:	4b11      	ldr	r3, [pc, #68]	; (810abb4 <vPortExitCritical+0x4c>)
 810ab70:	681b      	ldr	r3, [r3, #0]
 810ab72:	2b00      	cmp	r3, #0
 810ab74:	d109      	bne.n	810ab8a <vPortExitCritical+0x22>
 810ab76:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ab7a:	f383 8811 	msr	BASEPRI, r3
 810ab7e:	f3bf 8f6f 	isb	sy
 810ab82:	f3bf 8f4f 	dsb	sy
 810ab86:	607b      	str	r3, [r7, #4]
 810ab88:	e7fe      	b.n	810ab88 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 810ab8a:	4b0a      	ldr	r3, [pc, #40]	; (810abb4 <vPortExitCritical+0x4c>)
 810ab8c:	681b      	ldr	r3, [r3, #0]
 810ab8e:	3b01      	subs	r3, #1
 810ab90:	4a08      	ldr	r2, [pc, #32]	; (810abb4 <vPortExitCritical+0x4c>)
 810ab92:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 810ab94:	4b07      	ldr	r3, [pc, #28]	; (810abb4 <vPortExitCritical+0x4c>)
 810ab96:	681b      	ldr	r3, [r3, #0]
 810ab98:	2b00      	cmp	r3, #0
 810ab9a:	d104      	bne.n	810aba6 <vPortExitCritical+0x3e>
 810ab9c:	2300      	movs	r3, #0
 810ab9e:	603b      	str	r3, [r7, #0]
	__asm volatile
 810aba0:	683b      	ldr	r3, [r7, #0]
 810aba2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 810aba6:	bf00      	nop
 810aba8:	370c      	adds	r7, #12
 810abaa:	46bd      	mov	sp, r7
 810abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 810abb0:	4770      	bx	lr
 810abb2:	bf00      	nop
 810abb4:	10000024 	.word	0x10000024
	...

0810abc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 810abc0:	f3ef 8009 	mrs	r0, PSP
 810abc4:	f3bf 8f6f 	isb	sy
 810abc8:	4b15      	ldr	r3, [pc, #84]	; (810ac20 <pxCurrentTCBConst>)
 810abca:	681a      	ldr	r2, [r3, #0]
 810abcc:	f01e 0f10 	tst.w	lr, #16
 810abd0:	bf08      	it	eq
 810abd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 810abd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810abda:	6010      	str	r0, [r2, #0]
 810abdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 810abe0:	f04f 0050 	mov.w	r0, #80	; 0x50
 810abe4:	f380 8811 	msr	BASEPRI, r0
 810abe8:	f3bf 8f4f 	dsb	sy
 810abec:	f3bf 8f6f 	isb	sy
 810abf0:	f7fe ffe2 	bl	8109bb8 <vTaskSwitchContext>
 810abf4:	f04f 0000 	mov.w	r0, #0
 810abf8:	f380 8811 	msr	BASEPRI, r0
 810abfc:	bc09      	pop	{r0, r3}
 810abfe:	6819      	ldr	r1, [r3, #0]
 810ac00:	6808      	ldr	r0, [r1, #0]
 810ac02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ac06:	f01e 0f10 	tst.w	lr, #16
 810ac0a:	bf08      	it	eq
 810ac0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 810ac10:	f380 8809 	msr	PSP, r0
 810ac14:	f3bf 8f6f 	isb	sy
 810ac18:	4770      	bx	lr
 810ac1a:	bf00      	nop
 810ac1c:	f3af 8000 	nop.w

0810ac20 <pxCurrentTCBConst>:
 810ac20:	100008f4 	.word	0x100008f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 810ac24:	bf00      	nop
 810ac26:	bf00      	nop

0810ac28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 810ac28:	b580      	push	{r7, lr}
 810ac2a:	b082      	sub	sp, #8
 810ac2c:	af00      	add	r7, sp, #0
	__asm volatile
 810ac2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ac32:	f383 8811 	msr	BASEPRI, r3
 810ac36:	f3bf 8f6f 	isb	sy
 810ac3a:	f3bf 8f4f 	dsb	sy
 810ac3e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 810ac40:	f7fe ff02 	bl	8109a48 <xTaskIncrementTick>
 810ac44:	4603      	mov	r3, r0
 810ac46:	2b00      	cmp	r3, #0
 810ac48:	d003      	beq.n	810ac52 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 810ac4a:	4b06      	ldr	r3, [pc, #24]	; (810ac64 <SysTick_Handler+0x3c>)
 810ac4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810ac50:	601a      	str	r2, [r3, #0]
 810ac52:	2300      	movs	r3, #0
 810ac54:	603b      	str	r3, [r7, #0]
	__asm volatile
 810ac56:	683b      	ldr	r3, [r7, #0]
 810ac58:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 810ac5c:	bf00      	nop
 810ac5e:	3708      	adds	r7, #8
 810ac60:	46bd      	mov	sp, r7
 810ac62:	bd80      	pop	{r7, pc}
 810ac64:	e000ed04 	.word	0xe000ed04

0810ac68 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 810ac68:	b480      	push	{r7}
 810ac6a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 810ac6c:	4b0b      	ldr	r3, [pc, #44]	; (810ac9c <vPortSetupTimerInterrupt+0x34>)
 810ac6e:	2200      	movs	r2, #0
 810ac70:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 810ac72:	4b0b      	ldr	r3, [pc, #44]	; (810aca0 <vPortSetupTimerInterrupt+0x38>)
 810ac74:	2200      	movs	r2, #0
 810ac76:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 810ac78:	4b0a      	ldr	r3, [pc, #40]	; (810aca4 <vPortSetupTimerInterrupt+0x3c>)
 810ac7a:	681b      	ldr	r3, [r3, #0]
 810ac7c:	4a0a      	ldr	r2, [pc, #40]	; (810aca8 <vPortSetupTimerInterrupt+0x40>)
 810ac7e:	fba2 2303 	umull	r2, r3, r2, r3
 810ac82:	099b      	lsrs	r3, r3, #6
 810ac84:	4a09      	ldr	r2, [pc, #36]	; (810acac <vPortSetupTimerInterrupt+0x44>)
 810ac86:	3b01      	subs	r3, #1
 810ac88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 810ac8a:	4b04      	ldr	r3, [pc, #16]	; (810ac9c <vPortSetupTimerInterrupt+0x34>)
 810ac8c:	2207      	movs	r2, #7
 810ac8e:	601a      	str	r2, [r3, #0]
}
 810ac90:	bf00      	nop
 810ac92:	46bd      	mov	sp, r7
 810ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ac98:	4770      	bx	lr
 810ac9a:	bf00      	nop
 810ac9c:	e000e010 	.word	0xe000e010
 810aca0:	e000e018 	.word	0xe000e018
 810aca4:	10000004 	.word	0x10000004
 810aca8:	10624dd3 	.word	0x10624dd3
 810acac:	e000e014 	.word	0xe000e014

0810acb0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 810acb0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 810acc0 <vPortEnableVFP+0x10>
 810acb4:	6801      	ldr	r1, [r0, #0]
 810acb6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810acba:	6001      	str	r1, [r0, #0]
 810acbc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 810acbe:	bf00      	nop
 810acc0:	e000ed88 	.word	0xe000ed88

0810acc4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 810acc4:	b480      	push	{r7}
 810acc6:	b085      	sub	sp, #20
 810acc8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 810acca:	f3ef 8305 	mrs	r3, IPSR
 810acce:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 810acd0:	68fb      	ldr	r3, [r7, #12]
 810acd2:	2b0f      	cmp	r3, #15
 810acd4:	d913      	bls.n	810acfe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 810acd6:	4a16      	ldr	r2, [pc, #88]	; (810ad30 <vPortValidateInterruptPriority+0x6c>)
 810acd8:	68fb      	ldr	r3, [r7, #12]
 810acda:	4413      	add	r3, r2
 810acdc:	781b      	ldrb	r3, [r3, #0]
 810acde:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 810ace0:	4b14      	ldr	r3, [pc, #80]	; (810ad34 <vPortValidateInterruptPriority+0x70>)
 810ace2:	781b      	ldrb	r3, [r3, #0]
 810ace4:	7afa      	ldrb	r2, [r7, #11]
 810ace6:	429a      	cmp	r2, r3
 810ace8:	d209      	bcs.n	810acfe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 810acea:	f04f 0350 	mov.w	r3, #80	; 0x50
 810acee:	f383 8811 	msr	BASEPRI, r3
 810acf2:	f3bf 8f6f 	isb	sy
 810acf6:	f3bf 8f4f 	dsb	sy
 810acfa:	607b      	str	r3, [r7, #4]
 810acfc:	e7fe      	b.n	810acfc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 810acfe:	4b0e      	ldr	r3, [pc, #56]	; (810ad38 <vPortValidateInterruptPriority+0x74>)
 810ad00:	681b      	ldr	r3, [r3, #0]
 810ad02:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 810ad06:	4b0d      	ldr	r3, [pc, #52]	; (810ad3c <vPortValidateInterruptPriority+0x78>)
 810ad08:	681b      	ldr	r3, [r3, #0]
 810ad0a:	429a      	cmp	r2, r3
 810ad0c:	d909      	bls.n	810ad22 <vPortValidateInterruptPriority+0x5e>
 810ad0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ad12:	f383 8811 	msr	BASEPRI, r3
 810ad16:	f3bf 8f6f 	isb	sy
 810ad1a:	f3bf 8f4f 	dsb	sy
 810ad1e:	603b      	str	r3, [r7, #0]
 810ad20:	e7fe      	b.n	810ad20 <vPortValidateInterruptPriority+0x5c>
	}
 810ad22:	bf00      	nop
 810ad24:	3714      	adds	r7, #20
 810ad26:	46bd      	mov	sp, r7
 810ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ad2c:	4770      	bx	lr
 810ad2e:	bf00      	nop
 810ad30:	e000e3f0 	.word	0xe000e3f0
 810ad34:	10000f20 	.word	0x10000f20
 810ad38:	e000ed0c 	.word	0xe000ed0c
 810ad3c:	10000f24 	.word	0x10000f24

0810ad40 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 810ad40:	b580      	push	{r7, lr}
 810ad42:	b08a      	sub	sp, #40	; 0x28
 810ad44:	af00      	add	r7, sp, #0
 810ad46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 810ad48:	2300      	movs	r3, #0
 810ad4a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 810ad4c:	f7fe fdc2 	bl	81098d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 810ad50:	4b57      	ldr	r3, [pc, #348]	; (810aeb0 <pvPortMalloc+0x170>)
 810ad52:	681b      	ldr	r3, [r3, #0]
 810ad54:	2b00      	cmp	r3, #0
 810ad56:	d101      	bne.n	810ad5c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 810ad58:	f000 f90c 	bl	810af74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 810ad5c:	4b55      	ldr	r3, [pc, #340]	; (810aeb4 <pvPortMalloc+0x174>)
 810ad5e:	681a      	ldr	r2, [r3, #0]
 810ad60:	687b      	ldr	r3, [r7, #4]
 810ad62:	4013      	ands	r3, r2
 810ad64:	2b00      	cmp	r3, #0
 810ad66:	f040 808c 	bne.w	810ae82 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 810ad6a:	687b      	ldr	r3, [r7, #4]
 810ad6c:	2b00      	cmp	r3, #0
 810ad6e:	d01c      	beq.n	810adaa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 810ad70:	2208      	movs	r2, #8
 810ad72:	687b      	ldr	r3, [r7, #4]
 810ad74:	4413      	add	r3, r2
 810ad76:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 810ad78:	687b      	ldr	r3, [r7, #4]
 810ad7a:	f003 0307 	and.w	r3, r3, #7
 810ad7e:	2b00      	cmp	r3, #0
 810ad80:	d013      	beq.n	810adaa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 810ad82:	687b      	ldr	r3, [r7, #4]
 810ad84:	f023 0307 	bic.w	r3, r3, #7
 810ad88:	3308      	adds	r3, #8
 810ad8a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 810ad8c:	687b      	ldr	r3, [r7, #4]
 810ad8e:	f003 0307 	and.w	r3, r3, #7
 810ad92:	2b00      	cmp	r3, #0
 810ad94:	d009      	beq.n	810adaa <pvPortMalloc+0x6a>
 810ad96:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ad9a:	f383 8811 	msr	BASEPRI, r3
 810ad9e:	f3bf 8f6f 	isb	sy
 810ada2:	f3bf 8f4f 	dsb	sy
 810ada6:	617b      	str	r3, [r7, #20]
 810ada8:	e7fe      	b.n	810ada8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 810adaa:	687b      	ldr	r3, [r7, #4]
 810adac:	2b00      	cmp	r3, #0
 810adae:	d068      	beq.n	810ae82 <pvPortMalloc+0x142>
 810adb0:	4b41      	ldr	r3, [pc, #260]	; (810aeb8 <pvPortMalloc+0x178>)
 810adb2:	681b      	ldr	r3, [r3, #0]
 810adb4:	687a      	ldr	r2, [r7, #4]
 810adb6:	429a      	cmp	r2, r3
 810adb8:	d863      	bhi.n	810ae82 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 810adba:	4b40      	ldr	r3, [pc, #256]	; (810aebc <pvPortMalloc+0x17c>)
 810adbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 810adbe:	4b3f      	ldr	r3, [pc, #252]	; (810aebc <pvPortMalloc+0x17c>)
 810adc0:	681b      	ldr	r3, [r3, #0]
 810adc2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810adc4:	e004      	b.n	810add0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 810adc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810adc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 810adca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810adcc:	681b      	ldr	r3, [r3, #0]
 810adce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810add0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810add2:	685b      	ldr	r3, [r3, #4]
 810add4:	687a      	ldr	r2, [r7, #4]
 810add6:	429a      	cmp	r2, r3
 810add8:	d903      	bls.n	810ade2 <pvPortMalloc+0xa2>
 810adda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810addc:	681b      	ldr	r3, [r3, #0]
 810adde:	2b00      	cmp	r3, #0
 810ade0:	d1f1      	bne.n	810adc6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 810ade2:	4b33      	ldr	r3, [pc, #204]	; (810aeb0 <pvPortMalloc+0x170>)
 810ade4:	681b      	ldr	r3, [r3, #0]
 810ade6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810ade8:	429a      	cmp	r2, r3
 810adea:	d04a      	beq.n	810ae82 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 810adec:	6a3b      	ldr	r3, [r7, #32]
 810adee:	681b      	ldr	r3, [r3, #0]
 810adf0:	2208      	movs	r2, #8
 810adf2:	4413      	add	r3, r2
 810adf4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 810adf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810adf8:	681a      	ldr	r2, [r3, #0]
 810adfa:	6a3b      	ldr	r3, [r7, #32]
 810adfc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 810adfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810ae00:	685a      	ldr	r2, [r3, #4]
 810ae02:	687b      	ldr	r3, [r7, #4]
 810ae04:	1ad2      	subs	r2, r2, r3
 810ae06:	2308      	movs	r3, #8
 810ae08:	005b      	lsls	r3, r3, #1
 810ae0a:	429a      	cmp	r2, r3
 810ae0c:	d91e      	bls.n	810ae4c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 810ae0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810ae10:	687b      	ldr	r3, [r7, #4]
 810ae12:	4413      	add	r3, r2
 810ae14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 810ae16:	69bb      	ldr	r3, [r7, #24]
 810ae18:	f003 0307 	and.w	r3, r3, #7
 810ae1c:	2b00      	cmp	r3, #0
 810ae1e:	d009      	beq.n	810ae34 <pvPortMalloc+0xf4>
 810ae20:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ae24:	f383 8811 	msr	BASEPRI, r3
 810ae28:	f3bf 8f6f 	isb	sy
 810ae2c:	f3bf 8f4f 	dsb	sy
 810ae30:	613b      	str	r3, [r7, #16]
 810ae32:	e7fe      	b.n	810ae32 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 810ae34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810ae36:	685a      	ldr	r2, [r3, #4]
 810ae38:	687b      	ldr	r3, [r7, #4]
 810ae3a:	1ad2      	subs	r2, r2, r3
 810ae3c:	69bb      	ldr	r3, [r7, #24]
 810ae3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 810ae40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810ae42:	687a      	ldr	r2, [r7, #4]
 810ae44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 810ae46:	69b8      	ldr	r0, [r7, #24]
 810ae48:	f000 f8f6 	bl	810b038 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 810ae4c:	4b1a      	ldr	r3, [pc, #104]	; (810aeb8 <pvPortMalloc+0x178>)
 810ae4e:	681a      	ldr	r2, [r3, #0]
 810ae50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810ae52:	685b      	ldr	r3, [r3, #4]
 810ae54:	1ad3      	subs	r3, r2, r3
 810ae56:	4a18      	ldr	r2, [pc, #96]	; (810aeb8 <pvPortMalloc+0x178>)
 810ae58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 810ae5a:	4b17      	ldr	r3, [pc, #92]	; (810aeb8 <pvPortMalloc+0x178>)
 810ae5c:	681a      	ldr	r2, [r3, #0]
 810ae5e:	4b18      	ldr	r3, [pc, #96]	; (810aec0 <pvPortMalloc+0x180>)
 810ae60:	681b      	ldr	r3, [r3, #0]
 810ae62:	429a      	cmp	r2, r3
 810ae64:	d203      	bcs.n	810ae6e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 810ae66:	4b14      	ldr	r3, [pc, #80]	; (810aeb8 <pvPortMalloc+0x178>)
 810ae68:	681b      	ldr	r3, [r3, #0]
 810ae6a:	4a15      	ldr	r2, [pc, #84]	; (810aec0 <pvPortMalloc+0x180>)
 810ae6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 810ae6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810ae70:	685a      	ldr	r2, [r3, #4]
 810ae72:	4b10      	ldr	r3, [pc, #64]	; (810aeb4 <pvPortMalloc+0x174>)
 810ae74:	681b      	ldr	r3, [r3, #0]
 810ae76:	431a      	orrs	r2, r3
 810ae78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810ae7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 810ae7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810ae7e:	2200      	movs	r2, #0
 810ae80:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 810ae82:	f7fe fd35 	bl	81098f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 810ae86:	69fb      	ldr	r3, [r7, #28]
 810ae88:	f003 0307 	and.w	r3, r3, #7
 810ae8c:	2b00      	cmp	r3, #0
 810ae8e:	d009      	beq.n	810aea4 <pvPortMalloc+0x164>
 810ae90:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ae94:	f383 8811 	msr	BASEPRI, r3
 810ae98:	f3bf 8f6f 	isb	sy
 810ae9c:	f3bf 8f4f 	dsb	sy
 810aea0:	60fb      	str	r3, [r7, #12]
 810aea2:	e7fe      	b.n	810aea2 <pvPortMalloc+0x162>
	return pvReturn;
 810aea4:	69fb      	ldr	r3, [r7, #28]
}
 810aea6:	4618      	mov	r0, r3
 810aea8:	3728      	adds	r7, #40	; 0x28
 810aeaa:	46bd      	mov	sp, r7
 810aeac:	bd80      	pop	{r7, pc}
 810aeae:	bf00      	nop
 810aeb0:	10004b30 	.word	0x10004b30
 810aeb4:	10004b3c 	.word	0x10004b3c
 810aeb8:	10004b34 	.word	0x10004b34
 810aebc:	10004b28 	.word	0x10004b28
 810aec0:	10004b38 	.word	0x10004b38

0810aec4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 810aec4:	b580      	push	{r7, lr}
 810aec6:	b086      	sub	sp, #24
 810aec8:	af00      	add	r7, sp, #0
 810aeca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 810aecc:	687b      	ldr	r3, [r7, #4]
 810aece:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 810aed0:	687b      	ldr	r3, [r7, #4]
 810aed2:	2b00      	cmp	r3, #0
 810aed4:	d046      	beq.n	810af64 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 810aed6:	2308      	movs	r3, #8
 810aed8:	425b      	negs	r3, r3
 810aeda:	697a      	ldr	r2, [r7, #20]
 810aedc:	4413      	add	r3, r2
 810aede:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 810aee0:	697b      	ldr	r3, [r7, #20]
 810aee2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 810aee4:	693b      	ldr	r3, [r7, #16]
 810aee6:	685a      	ldr	r2, [r3, #4]
 810aee8:	4b20      	ldr	r3, [pc, #128]	; (810af6c <vPortFree+0xa8>)
 810aeea:	681b      	ldr	r3, [r3, #0]
 810aeec:	4013      	ands	r3, r2
 810aeee:	2b00      	cmp	r3, #0
 810aef0:	d109      	bne.n	810af06 <vPortFree+0x42>
 810aef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 810aef6:	f383 8811 	msr	BASEPRI, r3
 810aefa:	f3bf 8f6f 	isb	sy
 810aefe:	f3bf 8f4f 	dsb	sy
 810af02:	60fb      	str	r3, [r7, #12]
 810af04:	e7fe      	b.n	810af04 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 810af06:	693b      	ldr	r3, [r7, #16]
 810af08:	681b      	ldr	r3, [r3, #0]
 810af0a:	2b00      	cmp	r3, #0
 810af0c:	d009      	beq.n	810af22 <vPortFree+0x5e>
 810af0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810af12:	f383 8811 	msr	BASEPRI, r3
 810af16:	f3bf 8f6f 	isb	sy
 810af1a:	f3bf 8f4f 	dsb	sy
 810af1e:	60bb      	str	r3, [r7, #8]
 810af20:	e7fe      	b.n	810af20 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 810af22:	693b      	ldr	r3, [r7, #16]
 810af24:	685a      	ldr	r2, [r3, #4]
 810af26:	4b11      	ldr	r3, [pc, #68]	; (810af6c <vPortFree+0xa8>)
 810af28:	681b      	ldr	r3, [r3, #0]
 810af2a:	4013      	ands	r3, r2
 810af2c:	2b00      	cmp	r3, #0
 810af2e:	d019      	beq.n	810af64 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 810af30:	693b      	ldr	r3, [r7, #16]
 810af32:	681b      	ldr	r3, [r3, #0]
 810af34:	2b00      	cmp	r3, #0
 810af36:	d115      	bne.n	810af64 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 810af38:	693b      	ldr	r3, [r7, #16]
 810af3a:	685a      	ldr	r2, [r3, #4]
 810af3c:	4b0b      	ldr	r3, [pc, #44]	; (810af6c <vPortFree+0xa8>)
 810af3e:	681b      	ldr	r3, [r3, #0]
 810af40:	43db      	mvns	r3, r3
 810af42:	401a      	ands	r2, r3
 810af44:	693b      	ldr	r3, [r7, #16]
 810af46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 810af48:	f7fe fcc4 	bl	81098d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 810af4c:	693b      	ldr	r3, [r7, #16]
 810af4e:	685a      	ldr	r2, [r3, #4]
 810af50:	4b07      	ldr	r3, [pc, #28]	; (810af70 <vPortFree+0xac>)
 810af52:	681b      	ldr	r3, [r3, #0]
 810af54:	4413      	add	r3, r2
 810af56:	4a06      	ldr	r2, [pc, #24]	; (810af70 <vPortFree+0xac>)
 810af58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 810af5a:	6938      	ldr	r0, [r7, #16]
 810af5c:	f000 f86c 	bl	810b038 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 810af60:	f7fe fcc6 	bl	81098f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 810af64:	bf00      	nop
 810af66:	3718      	adds	r7, #24
 810af68:	46bd      	mov	sp, r7
 810af6a:	bd80      	pop	{r7, pc}
 810af6c:	10004b3c 	.word	0x10004b3c
 810af70:	10004b34 	.word	0x10004b34

0810af74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 810af74:	b480      	push	{r7}
 810af76:	b085      	sub	sp, #20
 810af78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 810af7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 810af7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 810af80:	4b27      	ldr	r3, [pc, #156]	; (810b020 <prvHeapInit+0xac>)
 810af82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 810af84:	68fb      	ldr	r3, [r7, #12]
 810af86:	f003 0307 	and.w	r3, r3, #7
 810af8a:	2b00      	cmp	r3, #0
 810af8c:	d00c      	beq.n	810afa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 810af8e:	68fb      	ldr	r3, [r7, #12]
 810af90:	3307      	adds	r3, #7
 810af92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 810af94:	68fb      	ldr	r3, [r7, #12]
 810af96:	f023 0307 	bic.w	r3, r3, #7
 810af9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 810af9c:	68ba      	ldr	r2, [r7, #8]
 810af9e:	68fb      	ldr	r3, [r7, #12]
 810afa0:	1ad3      	subs	r3, r2, r3
 810afa2:	4a1f      	ldr	r2, [pc, #124]	; (810b020 <prvHeapInit+0xac>)
 810afa4:	4413      	add	r3, r2
 810afa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 810afa8:	68fb      	ldr	r3, [r7, #12]
 810afaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 810afac:	4a1d      	ldr	r2, [pc, #116]	; (810b024 <prvHeapInit+0xb0>)
 810afae:	687b      	ldr	r3, [r7, #4]
 810afb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 810afb2:	4b1c      	ldr	r3, [pc, #112]	; (810b024 <prvHeapInit+0xb0>)
 810afb4:	2200      	movs	r2, #0
 810afb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 810afb8:	687b      	ldr	r3, [r7, #4]
 810afba:	68ba      	ldr	r2, [r7, #8]
 810afbc:	4413      	add	r3, r2
 810afbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 810afc0:	2208      	movs	r2, #8
 810afc2:	68fb      	ldr	r3, [r7, #12]
 810afc4:	1a9b      	subs	r3, r3, r2
 810afc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 810afc8:	68fb      	ldr	r3, [r7, #12]
 810afca:	f023 0307 	bic.w	r3, r3, #7
 810afce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 810afd0:	68fb      	ldr	r3, [r7, #12]
 810afd2:	4a15      	ldr	r2, [pc, #84]	; (810b028 <prvHeapInit+0xb4>)
 810afd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 810afd6:	4b14      	ldr	r3, [pc, #80]	; (810b028 <prvHeapInit+0xb4>)
 810afd8:	681b      	ldr	r3, [r3, #0]
 810afda:	2200      	movs	r2, #0
 810afdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 810afde:	4b12      	ldr	r3, [pc, #72]	; (810b028 <prvHeapInit+0xb4>)
 810afe0:	681b      	ldr	r3, [r3, #0]
 810afe2:	2200      	movs	r2, #0
 810afe4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 810afe6:	687b      	ldr	r3, [r7, #4]
 810afe8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 810afea:	683b      	ldr	r3, [r7, #0]
 810afec:	68fa      	ldr	r2, [r7, #12]
 810afee:	1ad2      	subs	r2, r2, r3
 810aff0:	683b      	ldr	r3, [r7, #0]
 810aff2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 810aff4:	4b0c      	ldr	r3, [pc, #48]	; (810b028 <prvHeapInit+0xb4>)
 810aff6:	681a      	ldr	r2, [r3, #0]
 810aff8:	683b      	ldr	r3, [r7, #0]
 810affa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810affc:	683b      	ldr	r3, [r7, #0]
 810affe:	685b      	ldr	r3, [r3, #4]
 810b000:	4a0a      	ldr	r2, [pc, #40]	; (810b02c <prvHeapInit+0xb8>)
 810b002:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810b004:	683b      	ldr	r3, [r7, #0]
 810b006:	685b      	ldr	r3, [r3, #4]
 810b008:	4a09      	ldr	r2, [pc, #36]	; (810b030 <prvHeapInit+0xbc>)
 810b00a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 810b00c:	4b09      	ldr	r3, [pc, #36]	; (810b034 <prvHeapInit+0xc0>)
 810b00e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 810b012:	601a      	str	r2, [r3, #0]
}
 810b014:	bf00      	nop
 810b016:	3714      	adds	r7, #20
 810b018:	46bd      	mov	sp, r7
 810b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b01e:	4770      	bx	lr
 810b020:	10000f28 	.word	0x10000f28
 810b024:	10004b28 	.word	0x10004b28
 810b028:	10004b30 	.word	0x10004b30
 810b02c:	10004b38 	.word	0x10004b38
 810b030:	10004b34 	.word	0x10004b34
 810b034:	10004b3c 	.word	0x10004b3c

0810b038 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 810b038:	b480      	push	{r7}
 810b03a:	b085      	sub	sp, #20
 810b03c:	af00      	add	r7, sp, #0
 810b03e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 810b040:	4b28      	ldr	r3, [pc, #160]	; (810b0e4 <prvInsertBlockIntoFreeList+0xac>)
 810b042:	60fb      	str	r3, [r7, #12]
 810b044:	e002      	b.n	810b04c <prvInsertBlockIntoFreeList+0x14>
 810b046:	68fb      	ldr	r3, [r7, #12]
 810b048:	681b      	ldr	r3, [r3, #0]
 810b04a:	60fb      	str	r3, [r7, #12]
 810b04c:	68fb      	ldr	r3, [r7, #12]
 810b04e:	681b      	ldr	r3, [r3, #0]
 810b050:	687a      	ldr	r2, [r7, #4]
 810b052:	429a      	cmp	r2, r3
 810b054:	d8f7      	bhi.n	810b046 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 810b056:	68fb      	ldr	r3, [r7, #12]
 810b058:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 810b05a:	68fb      	ldr	r3, [r7, #12]
 810b05c:	685b      	ldr	r3, [r3, #4]
 810b05e:	68ba      	ldr	r2, [r7, #8]
 810b060:	4413      	add	r3, r2
 810b062:	687a      	ldr	r2, [r7, #4]
 810b064:	429a      	cmp	r2, r3
 810b066:	d108      	bne.n	810b07a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 810b068:	68fb      	ldr	r3, [r7, #12]
 810b06a:	685a      	ldr	r2, [r3, #4]
 810b06c:	687b      	ldr	r3, [r7, #4]
 810b06e:	685b      	ldr	r3, [r3, #4]
 810b070:	441a      	add	r2, r3
 810b072:	68fb      	ldr	r3, [r7, #12]
 810b074:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 810b076:	68fb      	ldr	r3, [r7, #12]
 810b078:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 810b07a:	687b      	ldr	r3, [r7, #4]
 810b07c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 810b07e:	687b      	ldr	r3, [r7, #4]
 810b080:	685b      	ldr	r3, [r3, #4]
 810b082:	68ba      	ldr	r2, [r7, #8]
 810b084:	441a      	add	r2, r3
 810b086:	68fb      	ldr	r3, [r7, #12]
 810b088:	681b      	ldr	r3, [r3, #0]
 810b08a:	429a      	cmp	r2, r3
 810b08c:	d118      	bne.n	810b0c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 810b08e:	68fb      	ldr	r3, [r7, #12]
 810b090:	681a      	ldr	r2, [r3, #0]
 810b092:	4b15      	ldr	r3, [pc, #84]	; (810b0e8 <prvInsertBlockIntoFreeList+0xb0>)
 810b094:	681b      	ldr	r3, [r3, #0]
 810b096:	429a      	cmp	r2, r3
 810b098:	d00d      	beq.n	810b0b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 810b09a:	687b      	ldr	r3, [r7, #4]
 810b09c:	685a      	ldr	r2, [r3, #4]
 810b09e:	68fb      	ldr	r3, [r7, #12]
 810b0a0:	681b      	ldr	r3, [r3, #0]
 810b0a2:	685b      	ldr	r3, [r3, #4]
 810b0a4:	441a      	add	r2, r3
 810b0a6:	687b      	ldr	r3, [r7, #4]
 810b0a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 810b0aa:	68fb      	ldr	r3, [r7, #12]
 810b0ac:	681b      	ldr	r3, [r3, #0]
 810b0ae:	681a      	ldr	r2, [r3, #0]
 810b0b0:	687b      	ldr	r3, [r7, #4]
 810b0b2:	601a      	str	r2, [r3, #0]
 810b0b4:	e008      	b.n	810b0c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 810b0b6:	4b0c      	ldr	r3, [pc, #48]	; (810b0e8 <prvInsertBlockIntoFreeList+0xb0>)
 810b0b8:	681a      	ldr	r2, [r3, #0]
 810b0ba:	687b      	ldr	r3, [r7, #4]
 810b0bc:	601a      	str	r2, [r3, #0]
 810b0be:	e003      	b.n	810b0c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 810b0c0:	68fb      	ldr	r3, [r7, #12]
 810b0c2:	681a      	ldr	r2, [r3, #0]
 810b0c4:	687b      	ldr	r3, [r7, #4]
 810b0c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 810b0c8:	68fa      	ldr	r2, [r7, #12]
 810b0ca:	687b      	ldr	r3, [r7, #4]
 810b0cc:	429a      	cmp	r2, r3
 810b0ce:	d002      	beq.n	810b0d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 810b0d0:	68fb      	ldr	r3, [r7, #12]
 810b0d2:	687a      	ldr	r2, [r7, #4]
 810b0d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810b0d6:	bf00      	nop
 810b0d8:	3714      	adds	r7, #20
 810b0da:	46bd      	mov	sp, r7
 810b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b0e0:	4770      	bx	lr
 810b0e2:	bf00      	nop
 810b0e4:	10004b28 	.word	0x10004b28
 810b0e8:	10004b30 	.word	0x10004b30

0810b0ec <_Z11printToUartP20__UART_HandleTypeDefPhi>:
#include "UartPrint.h"

void printToUart(UART_HandleTypeDef* huart, uint8_t* data, int size){
 810b0ec:	b580      	push	{r7, lr}
 810b0ee:	b084      	sub	sp, #16
 810b0f0:	af00      	add	r7, sp, #0
 810b0f2:	60f8      	str	r0, [r7, #12]
 810b0f4:	60b9      	str	r1, [r7, #8]
 810b0f6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(huart, data, size, 1000);
 810b0f8:	687b      	ldr	r3, [r7, #4]
 810b0fa:	b29a      	uxth	r2, r3
 810b0fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810b100:	68b9      	ldr	r1, [r7, #8]
 810b102:	68f8      	ldr	r0, [r7, #12]
 810b104:	f7fc f91c 	bl	8107340 <HAL_UART_Transmit>
}
 810b108:	bf00      	nop
 810b10a:	3710      	adds	r7, #16
 810b10c:	46bd      	mov	sp, r7
 810b10e:	bd80      	pop	{r7, pc}

0810b110 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 810b110:	b480      	push	{r7}
 810b112:	b083      	sub	sp, #12
 810b114:	af00      	add	r7, sp, #0
 810b116:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 810b118:	687b      	ldr	r3, [r7, #4]
 810b11a:	2203      	movs	r2, #3
 810b11c:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 810b11e:	687b      	ldr	r3, [r7, #4]
 810b120:	2200      	movs	r2, #0
 810b122:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 810b124:	687b      	ldr	r3, [r7, #4]
 810b126:	2203      	movs	r2, #3
 810b128:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 810b12a:	687b      	ldr	r3, [r7, #4]
 810b12c:	2203      	movs	r2, #3
 810b12e:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 810b130:	687b      	ldr	r3, [r7, #4]
 810b132:	2203      	movs	r2, #3
 810b134:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 810b136:	687b      	ldr	r3, [r7, #4]
 810b138:	2203      	movs	r2, #3
 810b13a:	715a      	strb	r2, [r3, #5]
}
 810b13c:	bf00      	nop
 810b13e:	370c      	adds	r7, #12
 810b140:	46bd      	mov	sp, r7
 810b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b146:	4770      	bx	lr

0810b148 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 810b148:	b580      	push	{r7, lr}
 810b14a:	b08a      	sub	sp, #40	; 0x28
 810b14c:	af04      	add	r7, sp, #16
 810b14e:	60f8      	str	r0, [r7, #12]
 810b150:	460b      	mov	r3, r1
 810b152:	607a      	str	r2, [r7, #4]
 810b154:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 810b156:	68fb      	ldr	r3, [r7, #12]
 810b158:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 810b15a:	005b      	lsls	r3, r3, #1
 810b15c:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 810b15e:	68fb      	ldr	r3, [r7, #12]
 810b160:	6a98      	ldr	r0, [r3, #40]	; 0x28
 810b162:	7afb      	ldrb	r3, [r7, #11]
 810b164:	b29a      	uxth	r2, r3
 810b166:	8af9      	ldrh	r1, [r7, #22]
 810b168:	f241 3388 	movw	r3, #5000	; 0x1388
 810b16c:	9302      	str	r3, [sp, #8]
 810b16e:	2302      	movs	r3, #2
 810b170:	9301      	str	r3, [sp, #4]
 810b172:	f107 0314 	add.w	r3, r7, #20
 810b176:	9300      	str	r3, [sp, #0]
 810b178:	2301      	movs	r3, #1
 810b17a:	f7fa f811 	bl	81051a0 <HAL_I2C_Mem_Read>
 810b17e:	4603      	mov	r3, r0
 810b180:	2b00      	cmp	r3, #0
 810b182:	d10b      	bne.n	810b19c <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 810b184:	7d7b      	ldrb	r3, [r7, #21]
 810b186:	021b      	lsls	r3, r3, #8
 810b188:	b21a      	sxth	r2, r3
 810b18a:	7d3b      	ldrb	r3, [r7, #20]
 810b18c:	b21b      	sxth	r3, r3
 810b18e:	4313      	orrs	r3, r2
 810b190:	b21b      	sxth	r3, r3
 810b192:	b29a      	uxth	r2, r3
 810b194:	687b      	ldr	r3, [r7, #4]
 810b196:	801a      	strh	r2, [r3, #0]
		return true;
 810b198:	2301      	movs	r3, #1
 810b19a:	e000      	b.n	810b19e <read_register16+0x56>
	} else
		return false;
 810b19c:	2300      	movs	r3, #0

}
 810b19e:	4618      	mov	r0, r3
 810b1a0:	3718      	adds	r7, #24
 810b1a2:	46bd      	mov	sp, r7
 810b1a4:	bd80      	pop	{r7, pc}

0810b1a6 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 810b1a6:	b590      	push	{r4, r7, lr}
 810b1a8:	b08b      	sub	sp, #44	; 0x2c
 810b1aa:	af04      	add	r7, sp, #16
 810b1ac:	60f8      	str	r0, [r7, #12]
 810b1ae:	607a      	str	r2, [r7, #4]
 810b1b0:	461a      	mov	r2, r3
 810b1b2:	460b      	mov	r3, r1
 810b1b4:	72fb      	strb	r3, [r7, #11]
 810b1b6:	4613      	mov	r3, r2
 810b1b8:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 810b1ba:	68fb      	ldr	r3, [r7, #12]
 810b1bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 810b1be:	005b      	lsls	r3, r3, #1
 810b1c0:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 810b1c2:	68fb      	ldr	r3, [r7, #12]
 810b1c4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 810b1c6:	7afb      	ldrb	r3, [r7, #11]
 810b1c8:	b29c      	uxth	r4, r3
 810b1ca:	7abb      	ldrb	r3, [r7, #10]
 810b1cc:	b29b      	uxth	r3, r3
 810b1ce:	8af9      	ldrh	r1, [r7, #22]
 810b1d0:	f241 3288 	movw	r2, #5000	; 0x1388
 810b1d4:	9202      	str	r2, [sp, #8]
 810b1d6:	9301      	str	r3, [sp, #4]
 810b1d8:	687b      	ldr	r3, [r7, #4]
 810b1da:	9300      	str	r3, [sp, #0]
 810b1dc:	2301      	movs	r3, #1
 810b1de:	4622      	mov	r2, r4
 810b1e0:	f7f9 ffde 	bl	81051a0 <HAL_I2C_Mem_Read>
 810b1e4:	4603      	mov	r3, r0
 810b1e6:	2b00      	cmp	r3, #0
 810b1e8:	d101      	bne.n	810b1ee <read_data+0x48>
		return 0;
 810b1ea:	2300      	movs	r3, #0
 810b1ec:	e000      	b.n	810b1f0 <read_data+0x4a>
	else
		return 1;
 810b1ee:	2301      	movs	r3, #1

}
 810b1f0:	4618      	mov	r0, r3
 810b1f2:	371c      	adds	r7, #28
 810b1f4:	46bd      	mov	sp, r7
 810b1f6:	bd90      	pop	{r4, r7, pc}

0810b1f8 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 810b1f8:	b580      	push	{r7, lr}
 810b1fa:	b082      	sub	sp, #8
 810b1fc:	af00      	add	r7, sp, #0
 810b1fe:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 810b200:	687b      	ldr	r3, [r7, #4]
 810b202:	461a      	mov	r2, r3
 810b204:	2188      	movs	r1, #136	; 0x88
 810b206:	6878      	ldr	r0, [r7, #4]
 810b208:	f7ff ff9e 	bl	810b148 <read_register16>
 810b20c:	4603      	mov	r3, r0
 810b20e:	2b00      	cmp	r3, #0
 810b210:	d06f      	beq.n	810b2f2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 810b212:	687b      	ldr	r3, [r7, #4]
 810b214:	3302      	adds	r3, #2
 810b216:	461a      	mov	r2, r3
 810b218:	218a      	movs	r1, #138	; 0x8a
 810b21a:	6878      	ldr	r0, [r7, #4]
 810b21c:	f7ff ff94 	bl	810b148 <read_register16>
 810b220:	4603      	mov	r3, r0
 810b222:	2b00      	cmp	r3, #0
 810b224:	d065      	beq.n	810b2f2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 810b226:	687b      	ldr	r3, [r7, #4]
 810b228:	3304      	adds	r3, #4
 810b22a:	461a      	mov	r2, r3
 810b22c:	218c      	movs	r1, #140	; 0x8c
 810b22e:	6878      	ldr	r0, [r7, #4]
 810b230:	f7ff ff8a 	bl	810b148 <read_register16>
 810b234:	4603      	mov	r3, r0
 810b236:	2b00      	cmp	r3, #0
 810b238:	d05b      	beq.n	810b2f2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 810b23a:	687b      	ldr	r3, [r7, #4]
 810b23c:	3306      	adds	r3, #6
 810b23e:	461a      	mov	r2, r3
 810b240:	218e      	movs	r1, #142	; 0x8e
 810b242:	6878      	ldr	r0, [r7, #4]
 810b244:	f7ff ff80 	bl	810b148 <read_register16>
 810b248:	4603      	mov	r3, r0
 810b24a:	2b00      	cmp	r3, #0
 810b24c:	d051      	beq.n	810b2f2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 810b24e:	687b      	ldr	r3, [r7, #4]
 810b250:	3308      	adds	r3, #8
 810b252:	461a      	mov	r2, r3
 810b254:	2190      	movs	r1, #144	; 0x90
 810b256:	6878      	ldr	r0, [r7, #4]
 810b258:	f7ff ff76 	bl	810b148 <read_register16>
 810b25c:	4603      	mov	r3, r0
 810b25e:	2b00      	cmp	r3, #0
 810b260:	d047      	beq.n	810b2f2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 810b262:	687b      	ldr	r3, [r7, #4]
 810b264:	330a      	adds	r3, #10
 810b266:	461a      	mov	r2, r3
 810b268:	2192      	movs	r1, #146	; 0x92
 810b26a:	6878      	ldr	r0, [r7, #4]
 810b26c:	f7ff ff6c 	bl	810b148 <read_register16>
 810b270:	4603      	mov	r3, r0
 810b272:	2b00      	cmp	r3, #0
 810b274:	d03d      	beq.n	810b2f2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 810b276:	687b      	ldr	r3, [r7, #4]
 810b278:	330c      	adds	r3, #12
 810b27a:	461a      	mov	r2, r3
 810b27c:	2194      	movs	r1, #148	; 0x94
 810b27e:	6878      	ldr	r0, [r7, #4]
 810b280:	f7ff ff62 	bl	810b148 <read_register16>
 810b284:	4603      	mov	r3, r0
 810b286:	2b00      	cmp	r3, #0
 810b288:	d033      	beq.n	810b2f2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 810b28a:	687b      	ldr	r3, [r7, #4]
 810b28c:	330e      	adds	r3, #14
 810b28e:	461a      	mov	r2, r3
 810b290:	2196      	movs	r1, #150	; 0x96
 810b292:	6878      	ldr	r0, [r7, #4]
 810b294:	f7ff ff58 	bl	810b148 <read_register16>
 810b298:	4603      	mov	r3, r0
 810b29a:	2b00      	cmp	r3, #0
 810b29c:	d029      	beq.n	810b2f2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 810b29e:	687b      	ldr	r3, [r7, #4]
 810b2a0:	3310      	adds	r3, #16
 810b2a2:	461a      	mov	r2, r3
 810b2a4:	2198      	movs	r1, #152	; 0x98
 810b2a6:	6878      	ldr	r0, [r7, #4]
 810b2a8:	f7ff ff4e 	bl	810b148 <read_register16>
 810b2ac:	4603      	mov	r3, r0
 810b2ae:	2b00      	cmp	r3, #0
 810b2b0:	d01f      	beq.n	810b2f2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 810b2b2:	687b      	ldr	r3, [r7, #4]
 810b2b4:	3312      	adds	r3, #18
 810b2b6:	461a      	mov	r2, r3
 810b2b8:	219a      	movs	r1, #154	; 0x9a
 810b2ba:	6878      	ldr	r0, [r7, #4]
 810b2bc:	f7ff ff44 	bl	810b148 <read_register16>
 810b2c0:	4603      	mov	r3, r0
 810b2c2:	2b00      	cmp	r3, #0
 810b2c4:	d015      	beq.n	810b2f2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 810b2c6:	687b      	ldr	r3, [r7, #4]
 810b2c8:	3314      	adds	r3, #20
 810b2ca:	461a      	mov	r2, r3
 810b2cc:	219c      	movs	r1, #156	; 0x9c
 810b2ce:	6878      	ldr	r0, [r7, #4]
 810b2d0:	f7ff ff3a 	bl	810b148 <read_register16>
 810b2d4:	4603      	mov	r3, r0
 810b2d6:	2b00      	cmp	r3, #0
 810b2d8:	d00b      	beq.n	810b2f2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 810b2da:	687b      	ldr	r3, [r7, #4]
 810b2dc:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 810b2de:	461a      	mov	r2, r3
 810b2e0:	219e      	movs	r1, #158	; 0x9e
 810b2e2:	6878      	ldr	r0, [r7, #4]
 810b2e4:	f7ff ff30 	bl	810b148 <read_register16>
 810b2e8:	4603      	mov	r3, r0
 810b2ea:	2b00      	cmp	r3, #0
 810b2ec:	d001      	beq.n	810b2f2 <read_calibration_data+0xfa>

		return true;
 810b2ee:	2301      	movs	r3, #1
 810b2f0:	e000      	b.n	810b2f4 <read_calibration_data+0xfc>
	}

	return false;
 810b2f2:	2300      	movs	r3, #0
}
 810b2f4:	4618      	mov	r0, r3
 810b2f6:	3708      	adds	r7, #8
 810b2f8:	46bd      	mov	sp, r7
 810b2fa:	bd80      	pop	{r7, pc}

0810b2fc <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 810b2fc:	b580      	push	{r7, lr}
 810b2fe:	b084      	sub	sp, #16
 810b300:	af00      	add	r7, sp, #0
 810b302:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 810b304:	687b      	ldr	r3, [r7, #4]
 810b306:	f103 0218 	add.w	r2, r3, #24
 810b30a:	2301      	movs	r3, #1
 810b30c:	21a1      	movs	r1, #161	; 0xa1
 810b30e:	6878      	ldr	r0, [r7, #4]
 810b310:	f7ff ff49 	bl	810b1a6 <read_data>
 810b314:	4603      	mov	r3, r0
 810b316:	2b00      	cmp	r3, #0
 810b318:	d14b      	bne.n	810b3b2 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 810b31a:	687b      	ldr	r3, [r7, #4]
 810b31c:	331a      	adds	r3, #26
 810b31e:	461a      	mov	r2, r3
 810b320:	21e1      	movs	r1, #225	; 0xe1
 810b322:	6878      	ldr	r0, [r7, #4]
 810b324:	f7ff ff10 	bl	810b148 <read_register16>
 810b328:	4603      	mov	r3, r0
 810b32a:	2b00      	cmp	r3, #0
 810b32c:	d041      	beq.n	810b3b2 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 810b32e:	687b      	ldr	r3, [r7, #4]
 810b330:	f103 021c 	add.w	r2, r3, #28
 810b334:	2301      	movs	r3, #1
 810b336:	21e3      	movs	r1, #227	; 0xe3
 810b338:	6878      	ldr	r0, [r7, #4]
 810b33a:	f7ff ff34 	bl	810b1a6 <read_data>
 810b33e:	4603      	mov	r3, r0
 810b340:	2b00      	cmp	r3, #0
 810b342:	d136      	bne.n	810b3b2 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 810b344:	f107 030e 	add.w	r3, r7, #14
 810b348:	461a      	mov	r2, r3
 810b34a:	21e4      	movs	r1, #228	; 0xe4
 810b34c:	6878      	ldr	r0, [r7, #4]
 810b34e:	f7ff fefb 	bl	810b148 <read_register16>
 810b352:	4603      	mov	r3, r0
 810b354:	2b00      	cmp	r3, #0
 810b356:	d02c      	beq.n	810b3b2 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 810b358:	f107 030c 	add.w	r3, r7, #12
 810b35c:	461a      	mov	r2, r3
 810b35e:	21e5      	movs	r1, #229	; 0xe5
 810b360:	6878      	ldr	r0, [r7, #4]
 810b362:	f7ff fef1 	bl	810b148 <read_register16>
 810b366:	4603      	mov	r3, r0
 810b368:	2b00      	cmp	r3, #0
 810b36a:	d022      	beq.n	810b3b2 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 810b36c:	687b      	ldr	r3, [r7, #4]
 810b36e:	f103 0222 	add.w	r2, r3, #34	; 0x22
 810b372:	2301      	movs	r3, #1
 810b374:	21e7      	movs	r1, #231	; 0xe7
 810b376:	6878      	ldr	r0, [r7, #4]
 810b378:	f7ff ff15 	bl	810b1a6 <read_data>
 810b37c:	4603      	mov	r3, r0
 810b37e:	2b00      	cmp	r3, #0
 810b380:	d117      	bne.n	810b3b2 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 810b382:	89fb      	ldrh	r3, [r7, #14]
 810b384:	011b      	lsls	r3, r3, #4
 810b386:	b21b      	sxth	r3, r3
 810b388:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 810b38c:	b21a      	sxth	r2, r3
 810b38e:	89fb      	ldrh	r3, [r7, #14]
 810b390:	121b      	asrs	r3, r3, #8
 810b392:	b21b      	sxth	r3, r3
 810b394:	f003 030f 	and.w	r3, r3, #15
 810b398:	b21b      	sxth	r3, r3
 810b39a:	4313      	orrs	r3, r2
 810b39c:	b21a      	sxth	r2, r3
 810b39e:	687b      	ldr	r3, [r7, #4]
 810b3a0:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 810b3a2:	89bb      	ldrh	r3, [r7, #12]
 810b3a4:	091b      	lsrs	r3, r3, #4
 810b3a6:	b29b      	uxth	r3, r3
 810b3a8:	b21a      	sxth	r2, r3
 810b3aa:	687b      	ldr	r3, [r7, #4]
 810b3ac:	841a      	strh	r2, [r3, #32]

		return true;
 810b3ae:	2301      	movs	r3, #1
 810b3b0:	e000      	b.n	810b3b4 <read_hum_calibration_data+0xb8>
	}

	return false;
 810b3b2:	2300      	movs	r3, #0
}
 810b3b4:	4618      	mov	r0, r3
 810b3b6:	3710      	adds	r7, #16
 810b3b8:	46bd      	mov	sp, r7
 810b3ba:	bd80      	pop	{r7, pc}

0810b3bc <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 810b3bc:	b580      	push	{r7, lr}
 810b3be:	b088      	sub	sp, #32
 810b3c0:	af04      	add	r7, sp, #16
 810b3c2:	6078      	str	r0, [r7, #4]
 810b3c4:	460b      	mov	r3, r1
 810b3c6:	70fb      	strb	r3, [r7, #3]
 810b3c8:	4613      	mov	r3, r2
 810b3ca:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 810b3cc:	687b      	ldr	r3, [r7, #4]
 810b3ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 810b3d0:	005b      	lsls	r3, r3, #1
 810b3d2:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 810b3d4:	687b      	ldr	r3, [r7, #4]
 810b3d6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 810b3d8:	78fb      	ldrb	r3, [r7, #3]
 810b3da:	b29a      	uxth	r2, r3
 810b3dc:	89f9      	ldrh	r1, [r7, #14]
 810b3de:	f242 7310 	movw	r3, #10000	; 0x2710
 810b3e2:	9302      	str	r3, [sp, #8]
 810b3e4:	2301      	movs	r3, #1
 810b3e6:	9301      	str	r3, [sp, #4]
 810b3e8:	1cbb      	adds	r3, r7, #2
 810b3ea:	9300      	str	r3, [sp, #0]
 810b3ec:	2301      	movs	r3, #1
 810b3ee:	f7f9 fdc3 	bl	8104f78 <HAL_I2C_Mem_Write>
 810b3f2:	4603      	mov	r3, r0
 810b3f4:	2b00      	cmp	r3, #0
 810b3f6:	d101      	bne.n	810b3fc <write_register8+0x40>
		return false;
 810b3f8:	2300      	movs	r3, #0
 810b3fa:	e000      	b.n	810b3fe <write_register8+0x42>
	else
		return true;
 810b3fc:	2301      	movs	r3, #1
}
 810b3fe:	4618      	mov	r0, r3
 810b400:	3710      	adds	r7, #16
 810b402:	46bd      	mov	sp, r7
 810b404:	bd80      	pop	{r7, pc}

0810b406 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 810b406:	b580      	push	{r7, lr}
 810b408:	b084      	sub	sp, #16
 810b40a:	af00      	add	r7, sp, #0
 810b40c:	6078      	str	r0, [r7, #4]
 810b40e:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 810b410:	687b      	ldr	r3, [r7, #4]
 810b412:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 810b414:	2b76      	cmp	r3, #118	; 0x76
 810b416:	d005      	beq.n	810b424 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 810b418:	687b      	ldr	r3, [r7, #4]
 810b41a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 810b41c:	2b77      	cmp	r3, #119	; 0x77
 810b41e:	d001      	beq.n	810b424 <bmp280_init+0x1e>

		return false;
 810b420:	2300      	movs	r3, #0
 810b422:	e099      	b.n	810b558 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 810b424:	687b      	ldr	r3, [r7, #4]
 810b426:	f103 0232 	add.w	r2, r3, #50	; 0x32
 810b42a:	2301      	movs	r3, #1
 810b42c:	21d0      	movs	r1, #208	; 0xd0
 810b42e:	6878      	ldr	r0, [r7, #4]
 810b430:	f7ff feb9 	bl	810b1a6 <read_data>
 810b434:	4603      	mov	r3, r0
 810b436:	2b00      	cmp	r3, #0
 810b438:	d001      	beq.n	810b43e <bmp280_init+0x38>
		return false;
 810b43a:	2300      	movs	r3, #0
 810b43c:	e08c      	b.n	810b558 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 810b43e:	687b      	ldr	r3, [r7, #4]
 810b440:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 810b444:	2b58      	cmp	r3, #88	; 0x58
 810b446:	d006      	beq.n	810b456 <bmp280_init+0x50>
 810b448:	687b      	ldr	r3, [r7, #4]
 810b44a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 810b44e:	2b60      	cmp	r3, #96	; 0x60
 810b450:	d001      	beq.n	810b456 <bmp280_init+0x50>

		return false;
 810b452:	2300      	movs	r3, #0
 810b454:	e080      	b.n	810b558 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 810b456:	22b6      	movs	r2, #182	; 0xb6
 810b458:	21e0      	movs	r1, #224	; 0xe0
 810b45a:	6878      	ldr	r0, [r7, #4]
 810b45c:	f7ff ffae 	bl	810b3bc <write_register8>
 810b460:	4603      	mov	r3, r0
 810b462:	2b00      	cmp	r3, #0
 810b464:	d001      	beq.n	810b46a <bmp280_init+0x64>
		return false;
 810b466:	2300      	movs	r3, #0
 810b468:	e076      	b.n	810b558 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 810b46a:	f107 020c 	add.w	r2, r7, #12
 810b46e:	2301      	movs	r3, #1
 810b470:	21f3      	movs	r1, #243	; 0xf3
 810b472:	6878      	ldr	r0, [r7, #4]
 810b474:	f7ff fe97 	bl	810b1a6 <read_data>
 810b478:	4603      	mov	r3, r0
 810b47a:	2b00      	cmp	r3, #0
 810b47c:	d1f5      	bne.n	810b46a <bmp280_init+0x64>
				&& (status & 1) == 0)
 810b47e:	7b3b      	ldrb	r3, [r7, #12]
 810b480:	f003 0301 	and.w	r3, r3, #1
 810b484:	2b00      	cmp	r3, #0
 810b486:	d1f0      	bne.n	810b46a <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 810b488:	6878      	ldr	r0, [r7, #4]
 810b48a:	f7ff feb5 	bl	810b1f8 <read_calibration_data>
 810b48e:	4603      	mov	r3, r0
 810b490:	f083 0301 	eor.w	r3, r3, #1
 810b494:	b2db      	uxtb	r3, r3
 810b496:	2b00      	cmp	r3, #0
 810b498:	d100      	bne.n	810b49c <bmp280_init+0x96>
 810b49a:	e001      	b.n	810b4a0 <bmp280_init+0x9a>
		return false;
 810b49c:	2300      	movs	r3, #0
 810b49e:	e05b      	b.n	810b558 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 810b4a0:	687b      	ldr	r3, [r7, #4]
 810b4a2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 810b4a6:	2b60      	cmp	r3, #96	; 0x60
 810b4a8:	d10a      	bne.n	810b4c0 <bmp280_init+0xba>
 810b4aa:	6878      	ldr	r0, [r7, #4]
 810b4ac:	f7ff ff26 	bl	810b2fc <read_hum_calibration_data>
 810b4b0:	4603      	mov	r3, r0
 810b4b2:	f083 0301 	eor.w	r3, r3, #1
 810b4b6:	b2db      	uxtb	r3, r3
 810b4b8:	2b00      	cmp	r3, #0
 810b4ba:	d001      	beq.n	810b4c0 <bmp280_init+0xba>
		return false;
 810b4bc:	2300      	movs	r3, #0
 810b4be:	e04b      	b.n	810b558 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 810b4c0:	683b      	ldr	r3, [r7, #0]
 810b4c2:	795b      	ldrb	r3, [r3, #5]
 810b4c4:	015b      	lsls	r3, r3, #5
 810b4c6:	b25a      	sxtb	r2, r3
 810b4c8:	683b      	ldr	r3, [r7, #0]
 810b4ca:	785b      	ldrb	r3, [r3, #1]
 810b4cc:	009b      	lsls	r3, r3, #2
 810b4ce:	b25b      	sxtb	r3, r3
 810b4d0:	4313      	orrs	r3, r2
 810b4d2:	b25b      	sxtb	r3, r3
 810b4d4:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 810b4d6:	7bfb      	ldrb	r3, [r7, #15]
 810b4d8:	461a      	mov	r2, r3
 810b4da:	21f5      	movs	r1, #245	; 0xf5
 810b4dc:	6878      	ldr	r0, [r7, #4]
 810b4de:	f7ff ff6d 	bl	810b3bc <write_register8>
 810b4e2:	4603      	mov	r3, r0
 810b4e4:	2b00      	cmp	r3, #0
 810b4e6:	d001      	beq.n	810b4ec <bmp280_init+0xe6>
		return false;
 810b4e8:	2300      	movs	r3, #0
 810b4ea:	e035      	b.n	810b558 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 810b4ec:	683b      	ldr	r3, [r7, #0]
 810b4ee:	781b      	ldrb	r3, [r3, #0]
 810b4f0:	2b01      	cmp	r3, #1
 810b4f2:	d102      	bne.n	810b4fa <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 810b4f4:	683b      	ldr	r3, [r7, #0]
 810b4f6:	2200      	movs	r2, #0
 810b4f8:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 810b4fa:	683b      	ldr	r3, [r7, #0]
 810b4fc:	78db      	ldrb	r3, [r3, #3]
 810b4fe:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 810b500:	b25a      	sxtb	r2, r3
 810b502:	683b      	ldr	r3, [r7, #0]
 810b504:	789b      	ldrb	r3, [r3, #2]
 810b506:	009b      	lsls	r3, r3, #2
 810b508:	b25b      	sxtb	r3, r3
 810b50a:	4313      	orrs	r3, r2
 810b50c:	b25a      	sxtb	r2, r3
 810b50e:	683b      	ldr	r3, [r7, #0]
 810b510:	781b      	ldrb	r3, [r3, #0]
 810b512:	b25b      	sxtb	r3, r3
 810b514:	4313      	orrs	r3, r2
 810b516:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 810b518:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 810b51a:	687b      	ldr	r3, [r7, #4]
 810b51c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 810b520:	2b60      	cmp	r3, #96	; 0x60
 810b522:	d10d      	bne.n	810b540 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 810b524:	683b      	ldr	r3, [r7, #0]
 810b526:	791b      	ldrb	r3, [r3, #4]
 810b528:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 810b52a:	7b7b      	ldrb	r3, [r7, #13]
 810b52c:	461a      	mov	r2, r3
 810b52e:	21f2      	movs	r1, #242	; 0xf2
 810b530:	6878      	ldr	r0, [r7, #4]
 810b532:	f7ff ff43 	bl	810b3bc <write_register8>
 810b536:	4603      	mov	r3, r0
 810b538:	2b00      	cmp	r3, #0
 810b53a:	d001      	beq.n	810b540 <bmp280_init+0x13a>
			return false;
 810b53c:	2300      	movs	r3, #0
 810b53e:	e00b      	b.n	810b558 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 810b540:	7bbb      	ldrb	r3, [r7, #14]
 810b542:	461a      	mov	r2, r3
 810b544:	21f4      	movs	r1, #244	; 0xf4
 810b546:	6878      	ldr	r0, [r7, #4]
 810b548:	f7ff ff38 	bl	810b3bc <write_register8>
 810b54c:	4603      	mov	r3, r0
 810b54e:	2b00      	cmp	r3, #0
 810b550:	d001      	beq.n	810b556 <bmp280_init+0x150>
		return false;
 810b552:	2300      	movs	r3, #0
 810b554:	e000      	b.n	810b558 <bmp280_init+0x152>
	}

	return true;
 810b556:	2301      	movs	r3, #1
}
 810b558:	4618      	mov	r0, r3
 810b55a:	3710      	adds	r7, #16
 810b55c:	46bd      	mov	sp, r7
 810b55e:	bd80      	pop	{r7, pc}

0810b560 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 810b560:	b480      	push	{r7}
 810b562:	b087      	sub	sp, #28
 810b564:	af00      	add	r7, sp, #0
 810b566:	60f8      	str	r0, [r7, #12]
 810b568:	60b9      	str	r1, [r7, #8]
 810b56a:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 810b56c:	68bb      	ldr	r3, [r7, #8]
 810b56e:	10da      	asrs	r2, r3, #3
 810b570:	68fb      	ldr	r3, [r7, #12]
 810b572:	881b      	ldrh	r3, [r3, #0]
 810b574:	005b      	lsls	r3, r3, #1
 810b576:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 810b578:	68fa      	ldr	r2, [r7, #12]
 810b57a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 810b57e:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 810b582:	12db      	asrs	r3, r3, #11
 810b584:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 810b586:	68bb      	ldr	r3, [r7, #8]
 810b588:	111b      	asrs	r3, r3, #4
 810b58a:	68fa      	ldr	r2, [r7, #12]
 810b58c:	8812      	ldrh	r2, [r2, #0]
 810b58e:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 810b590:	68ba      	ldr	r2, [r7, #8]
 810b592:	1112      	asrs	r2, r2, #4
 810b594:	68f9      	ldr	r1, [r7, #12]
 810b596:	8809      	ldrh	r1, [r1, #0]
 810b598:	1a52      	subs	r2, r2, r1
 810b59a:	fb02 f303 	mul.w	r3, r2, r3
 810b59e:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 810b5a0:	68fa      	ldr	r2, [r7, #12]
 810b5a2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 810b5a6:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 810b5aa:	139b      	asrs	r3, r3, #14
 810b5ac:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 810b5ae:	697a      	ldr	r2, [r7, #20]
 810b5b0:	693b      	ldr	r3, [r7, #16]
 810b5b2:	441a      	add	r2, r3
 810b5b4:	687b      	ldr	r3, [r7, #4]
 810b5b6:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 810b5b8:	687b      	ldr	r3, [r7, #4]
 810b5ba:	681a      	ldr	r2, [r3, #0]
 810b5bc:	4613      	mov	r3, r2
 810b5be:	009b      	lsls	r3, r3, #2
 810b5c0:	4413      	add	r3, r2
 810b5c2:	3380      	adds	r3, #128	; 0x80
 810b5c4:	121b      	asrs	r3, r3, #8
}
 810b5c6:	4618      	mov	r0, r3
 810b5c8:	371c      	adds	r7, #28
 810b5ca:	46bd      	mov	sp, r7
 810b5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b5d0:	4770      	bx	lr

0810b5d2 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 810b5d2:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 810b5d6:	b08a      	sub	sp, #40	; 0x28
 810b5d8:	af00      	add	r7, sp, #0
 810b5da:	60f8      	str	r0, [r7, #12]
 810b5dc:	60b9      	str	r1, [r7, #8]
 810b5de:	607a      	str	r2, [r7, #4]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 810b5e0:	687b      	ldr	r3, [r7, #4]
 810b5e2:	4619      	mov	r1, r3
 810b5e4:	ea4f 72e1 	mov.w	r2, r1, asr #31
 810b5e8:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 810b5ec:	f142 34ff 	adc.w	r4, r2, #4294967295	; 0xffffffff
 810b5f0:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 810b5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810b5f6:	6a3a      	ldr	r2, [r7, #32]
 810b5f8:	fb02 f203 	mul.w	r2, r2, r3
 810b5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810b5fe:	6a39      	ldr	r1, [r7, #32]
 810b600:	fb01 f303 	mul.w	r3, r1, r3
 810b604:	441a      	add	r2, r3
 810b606:	6a39      	ldr	r1, [r7, #32]
 810b608:	6a3b      	ldr	r3, [r7, #32]
 810b60a:	fba1 3403 	umull	r3, r4, r1, r3
 810b60e:	4422      	add	r2, r4
 810b610:	4614      	mov	r4, r2
 810b612:	68fa      	ldr	r2, [r7, #12]
 810b614:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 810b618:	b211      	sxth	r1, r2
 810b61a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 810b61e:	fb01 f504 	mul.w	r5, r1, r4
 810b622:	fb03 f002 	mul.w	r0, r3, r2
 810b626:	4428      	add	r0, r5
 810b628:	fba3 3401 	umull	r3, r4, r3, r1
 810b62c:	1902      	adds	r2, r0, r4
 810b62e:	4614      	mov	r4, r2
 810b630:	e9c7 3406 	strd	r3, r4, [r7, #24]
 810b634:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 810b638:	68fb      	ldr	r3, [r7, #12]
 810b63a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 810b63e:	b21b      	sxth	r3, r3
 810b640:	ea4f 74e3 	mov.w	r4, r3, asr #31
 810b644:	6a3a      	ldr	r2, [r7, #32]
 810b646:	fb04 f102 	mul.w	r1, r4, r2
 810b64a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810b64c:	fb03 f202 	mul.w	r2, r3, r2
 810b650:	1888      	adds	r0, r1, r2
 810b652:	6a3a      	ldr	r2, [r7, #32]
 810b654:	fba2 1203 	umull	r1, r2, r2, r3
 810b658:	1883      	adds	r3, r0, r2
 810b65a:	461a      	mov	r2, r3
 810b65c:	f04f 0500 	mov.w	r5, #0
 810b660:	f04f 0600 	mov.w	r6, #0
 810b664:	0456      	lsls	r6, r2, #17
 810b666:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 810b66a:	044d      	lsls	r5, r1, #17
 810b66c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 810b670:	186b      	adds	r3, r5, r1
 810b672:	eb46 0402 	adc.w	r4, r6, r2
 810b676:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 810b67a:	68fb      	ldr	r3, [r7, #12]
 810b67c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 810b680:	b219      	sxth	r1, r3
 810b682:	ea4f 72e1 	mov.w	r2, r1, asr #31
 810b686:	f04f 0500 	mov.w	r5, #0
 810b68a:	f04f 0600 	mov.w	r6, #0
 810b68e:	00ce      	lsls	r6, r1, #3
 810b690:	2500      	movs	r5, #0
 810b692:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 810b696:	186b      	adds	r3, r5, r1
 810b698:	eb46 0402 	adc.w	r4, r6, r2
 810b69c:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 810b6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810b6a2:	6a3a      	ldr	r2, [r7, #32]
 810b6a4:	fb02 f203 	mul.w	r2, r2, r3
 810b6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810b6aa:	6a39      	ldr	r1, [r7, #32]
 810b6ac:	fb01 f303 	mul.w	r3, r1, r3
 810b6b0:	441a      	add	r2, r3
 810b6b2:	6a39      	ldr	r1, [r7, #32]
 810b6b4:	6a3b      	ldr	r3, [r7, #32]
 810b6b6:	fba1 3403 	umull	r3, r4, r1, r3
 810b6ba:	4422      	add	r2, r4
 810b6bc:	4614      	mov	r4, r2
 810b6be:	68fa      	ldr	r2, [r7, #12]
 810b6c0:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 810b6c4:	b211      	sxth	r1, r2
 810b6c6:	ea4f 72e1 	mov.w	r2, r1, asr #31
 810b6ca:	fb01 f504 	mul.w	r5, r1, r4
 810b6ce:	fb03 f002 	mul.w	r0, r3, r2
 810b6d2:	4428      	add	r0, r5
 810b6d4:	fba3 3401 	umull	r3, r4, r3, r1
 810b6d8:	1902      	adds	r2, r0, r4
 810b6da:	4614      	mov	r4, r2
 810b6dc:	f04f 0100 	mov.w	r1, #0
 810b6e0:	f04f 0200 	mov.w	r2, #0
 810b6e4:	0a19      	lsrs	r1, r3, #8
 810b6e6:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 810b6ea:	1222      	asrs	r2, r4, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 810b6ec:	68fb      	ldr	r3, [r7, #12]
 810b6ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 810b6f2:	b21b      	sxth	r3, r3
 810b6f4:	ea4f 74e3 	mov.w	r4, r3, asr #31
 810b6f8:	6a38      	ldr	r0, [r7, #32]
 810b6fa:	fb04 f500 	mul.w	r5, r4, r0
 810b6fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 810b700:	fb03 f000 	mul.w	r0, r3, r0
 810b704:	4428      	add	r0, r5
 810b706:	6a3d      	ldr	r5, [r7, #32]
 810b708:	fba5 5603 	umull	r5, r6, r5, r3
 810b70c:	1983      	adds	r3, r0, r6
 810b70e:	461e      	mov	r6, r3
 810b710:	f04f 0b00 	mov.w	fp, #0
 810b714:	f04f 0c00 	mov.w	ip, #0
 810b718:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 810b71c:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 810b720:	ea4f 3b05 	mov.w	fp, r5, lsl #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 810b724:	eb1b 0301 	adds.w	r3, fp, r1
 810b728:	eb4c 0402 	adc.w	r4, ip, r2
 810b72c:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 810b730:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 810b734:	1c19      	adds	r1, r3, #0
 810b736:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 810b73a:	68fb      	ldr	r3, [r7, #12]
 810b73c:	88db      	ldrh	r3, [r3, #6]
 810b73e:	b29b      	uxth	r3, r3
 810b740:	f04f 0400 	mov.w	r4, #0
 810b744:	fb03 f502 	mul.w	r5, r3, r2
 810b748:	fb01 f004 	mul.w	r0, r1, r4
 810b74c:	4428      	add	r0, r5
 810b74e:	fba1 3403 	umull	r3, r4, r1, r3
 810b752:	1902      	adds	r2, r0, r4
 810b754:	4614      	mov	r4, r2
 810b756:	f04f 0100 	mov.w	r1, #0
 810b75a:	f04f 0200 	mov.w	r2, #0
 810b75e:	1061      	asrs	r1, r4, #1
 810b760:	17e2      	asrs	r2, r4, #31
 810b762:	e9c7 1208 	strd	r1, r2, [r7, #32]

	if (var1 == 0) {
 810b766:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 810b76a:	4323      	orrs	r3, r4
 810b76c:	d101      	bne.n	810b772 <compensate_pressure+0x1a0>
		return 0;  // avoid exception caused by division by zero
 810b76e:	2300      	movs	r3, #0
 810b770:	e0d4      	b.n	810b91c <compensate_pressure+0x34a>
	}

	p = 1048576 - adc_press;
 810b772:	68bb      	ldr	r3, [r7, #8]
 810b774:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 810b778:	ea4f 74e3 	mov.w	r4, r3, asr #31
 810b77c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = (((p << 31) - var2) * 3125) / var1;
 810b780:	693b      	ldr	r3, [r7, #16]
 810b782:	ea4f 0963 	mov.w	r9, r3, asr #1
 810b786:	693b      	ldr	r3, [r7, #16]
 810b788:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 810b78c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 810b790:	4645      	mov	r5, r8
 810b792:	464e      	mov	r6, r9
 810b794:	1aed      	subs	r5, r5, r3
 810b796:	eb66 0604 	sbc.w	r6, r6, r4
 810b79a:	46a8      	mov	r8, r5
 810b79c:	46b1      	mov	r9, r6
 810b79e:	eb18 0308 	adds.w	r3, r8, r8
 810b7a2:	eb49 0409 	adc.w	r4, r9, r9
 810b7a6:	4698      	mov	r8, r3
 810b7a8:	46a1      	mov	r9, r4
 810b7aa:	eb18 0805 	adds.w	r8, r8, r5
 810b7ae:	eb49 0906 	adc.w	r9, r9, r6
 810b7b2:	f04f 0100 	mov.w	r1, #0
 810b7b6:	f04f 0200 	mov.w	r2, #0
 810b7ba:	ea4f 1289 	mov.w	r2, r9, lsl #6
 810b7be:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 810b7c2:	ea4f 1188 	mov.w	r1, r8, lsl #6
 810b7c6:	eb18 0801 	adds.w	r8, r8, r1
 810b7ca:	eb49 0902 	adc.w	r9, r9, r2
 810b7ce:	f04f 0100 	mov.w	r1, #0
 810b7d2:	f04f 0200 	mov.w	r2, #0
 810b7d6:	ea4f 0289 	mov.w	r2, r9, lsl #2
 810b7da:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 810b7de:	ea4f 0188 	mov.w	r1, r8, lsl #2
 810b7e2:	4688      	mov	r8, r1
 810b7e4:	4691      	mov	r9, r2
 810b7e6:	eb18 0805 	adds.w	r8, r8, r5
 810b7ea:	eb49 0906 	adc.w	r9, r9, r6
 810b7ee:	f04f 0100 	mov.w	r1, #0
 810b7f2:	f04f 0200 	mov.w	r2, #0
 810b7f6:	ea4f 0289 	mov.w	r2, r9, lsl #2
 810b7fa:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 810b7fe:	ea4f 0188 	mov.w	r1, r8, lsl #2
 810b802:	4688      	mov	r8, r1
 810b804:	4691      	mov	r9, r2
 810b806:	eb18 0005 	adds.w	r0, r8, r5
 810b80a:	eb49 0106 	adc.w	r1, r9, r6
 810b80e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 810b812:	f7f5 fa51 	bl	8100cb8 <__aeabi_ldivmod>
 810b816:	4603      	mov	r3, r0
 810b818:	460c      	mov	r4, r1
 810b81a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 810b81e:	68fb      	ldr	r3, [r7, #12]
 810b820:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 810b824:	b219      	sxth	r1, r3
 810b826:	ea4f 72e1 	mov.w	r2, r1, asr #31
 810b82a:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 810b82e:	f04f 0300 	mov.w	r3, #0
 810b832:	f04f 0400 	mov.w	r4, #0
 810b836:	0b6b      	lsrs	r3, r5, #13
 810b838:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 810b83c:	1374      	asrs	r4, r6, #13
 810b83e:	fb03 f502 	mul.w	r5, r3, r2
 810b842:	fb01 f004 	mul.w	r0, r1, r4
 810b846:	4428      	add	r0, r5
 810b848:	fba1 1203 	umull	r1, r2, r1, r3
 810b84c:	1883      	adds	r3, r0, r2
 810b84e:	461a      	mov	r2, r3
 810b850:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 810b854:	f04f 0300 	mov.w	r3, #0
 810b858:	f04f 0400 	mov.w	r4, #0
 810b85c:	0b6b      	lsrs	r3, r5, #13
 810b85e:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 810b862:	1374      	asrs	r4, r6, #13
 810b864:	fb03 f502 	mul.w	r5, r3, r2
 810b868:	fb01 f004 	mul.w	r0, r1, r4
 810b86c:	4428      	add	r0, r5
 810b86e:	fba1 1203 	umull	r1, r2, r1, r3
 810b872:	1883      	adds	r3, r0, r2
 810b874:	461a      	mov	r2, r3
 810b876:	f04f 0300 	mov.w	r3, #0
 810b87a:	f04f 0400 	mov.w	r4, #0
 810b87e:	0e4b      	lsrs	r3, r1, #25
 810b880:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 810b884:	1654      	asrs	r4, r2, #25
 810b886:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 810b88a:	68fb      	ldr	r3, [r7, #12]
 810b88c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 810b890:	b21b      	sxth	r3, r3
 810b892:	ea4f 74e3 	mov.w	r4, r3, asr #31
 810b896:	693a      	ldr	r2, [r7, #16]
 810b898:	fb04 f102 	mul.w	r1, r4, r2
 810b89c:	697a      	ldr	r2, [r7, #20]
 810b89e:	fb03 f202 	mul.w	r2, r3, r2
 810b8a2:	1888      	adds	r0, r1, r2
 810b8a4:	693a      	ldr	r2, [r7, #16]
 810b8a6:	fba2 1203 	umull	r1, r2, r2, r3
 810b8aa:	1883      	adds	r3, r0, r2
 810b8ac:	461a      	mov	r2, r3
 810b8ae:	f04f 0300 	mov.w	r3, #0
 810b8b2:	f04f 0400 	mov.w	r4, #0
 810b8b6:	0ccb      	lsrs	r3, r1, #19
 810b8b8:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 810b8bc:	14d4      	asrs	r4, r2, #19
 810b8be:	e9c7 3406 	strd	r3, r4, [r7, #24]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 810b8c2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 810b8c6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 810b8ca:	eb11 0803 	adds.w	r8, r1, r3
 810b8ce:	eb42 0904 	adc.w	r9, r2, r4
 810b8d2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 810b8d6:	eb13 0508 	adds.w	r5, r3, r8
 810b8da:	eb44 0609 	adc.w	r6, r4, r9
 810b8de:	f04f 0100 	mov.w	r1, #0
 810b8e2:	f04f 0200 	mov.w	r2, #0
 810b8e6:	0a29      	lsrs	r1, r5, #8
 810b8e8:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 810b8ec:	1232      	asrs	r2, r6, #8
 810b8ee:	68fb      	ldr	r3, [r7, #12]
 810b8f0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 810b8f4:	b21d      	sxth	r5, r3
 810b8f6:	ea4f 76e5 	mov.w	r6, r5, asr #31
 810b8fa:	f04f 0800 	mov.w	r8, #0
 810b8fe:	f04f 0900 	mov.w	r9, #0
 810b902:	ea4f 1906 	mov.w	r9, r6, lsl #4
 810b906:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 810b90a:	ea4f 1805 	mov.w	r8, r5, lsl #4
 810b90e:	eb18 0301 	adds.w	r3, r8, r1
 810b912:	eb49 0402 	adc.w	r4, r9, r2
 810b916:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return p;
 810b91a:	693b      	ldr	r3, [r7, #16]
}
 810b91c:	4618      	mov	r0, r3
 810b91e:	3728      	adds	r7, #40	; 0x28
 810b920:	46bd      	mov	sp, r7
 810b922:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

0810b926 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 810b926:	b480      	push	{r7}
 810b928:	b087      	sub	sp, #28
 810b92a:	af00      	add	r7, sp, #0
 810b92c:	60f8      	str	r0, [r7, #12]
 810b92e:	60b9      	str	r1, [r7, #8]
 810b930:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 810b932:	687b      	ldr	r3, [r7, #4]
 810b934:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 810b938:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 810b93a:	68bb      	ldr	r3, [r7, #8]
 810b93c:	039a      	lsls	r2, r3, #14
 810b93e:	68fb      	ldr	r3, [r7, #12]
 810b940:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 810b944:	051b      	lsls	r3, r3, #20
 810b946:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 810b948:	68fb      	ldr	r3, [r7, #12]
 810b94a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 810b94e:	4619      	mov	r1, r3
 810b950:	697b      	ldr	r3, [r7, #20]
 810b952:	fb03 f301 	mul.w	r3, r3, r1
 810b956:	1ad3      	subs	r3, r2, r3
 810b958:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 810b95c:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 810b95e:	68fa      	ldr	r2, [r7, #12]
 810b960:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 810b964:	4611      	mov	r1, r2
 810b966:	697a      	ldr	r2, [r7, #20]
 810b968:	fb02 f201 	mul.w	r2, r2, r1
 810b96c:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 810b96e:	68f9      	ldr	r1, [r7, #12]
 810b970:	7f09      	ldrb	r1, [r1, #28]
 810b972:	4608      	mov	r0, r1
 810b974:	6979      	ldr	r1, [r7, #20]
 810b976:	fb01 f100 	mul.w	r1, r1, r0
 810b97a:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 810b97c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 810b980:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 810b984:	1292      	asrs	r2, r2, #10
 810b986:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 810b98a:	68f9      	ldr	r1, [r7, #12]
 810b98c:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 810b990:	fb01 f202 	mul.w	r2, r1, r2
 810b994:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 810b998:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 810b99a:	fb02 f303 	mul.w	r3, r2, r3
 810b99e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 810b9a0:	697b      	ldr	r3, [r7, #20]
 810b9a2:	13db      	asrs	r3, r3, #15
 810b9a4:	697a      	ldr	r2, [r7, #20]
 810b9a6:	13d2      	asrs	r2, r2, #15
 810b9a8:	fb02 f303 	mul.w	r3, r2, r3
 810b9ac:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 810b9ae:	68fa      	ldr	r2, [r7, #12]
 810b9b0:	7e12      	ldrb	r2, [r2, #24]
 810b9b2:	fb02 f303 	mul.w	r3, r2, r3
 810b9b6:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 810b9b8:	697a      	ldr	r2, [r7, #20]
 810b9ba:	1ad3      	subs	r3, r2, r3
 810b9bc:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 810b9be:	697b      	ldr	r3, [r7, #20]
 810b9c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 810b9c4:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 810b9c6:	697b      	ldr	r3, [r7, #20]
 810b9c8:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 810b9cc:	bfa8      	it	ge
 810b9ce:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 810b9d2:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 810b9d4:	697b      	ldr	r3, [r7, #20]
 810b9d6:	131b      	asrs	r3, r3, #12
}
 810b9d8:	4618      	mov	r0, r3
 810b9da:	371c      	adds	r7, #28
 810b9dc:	46bd      	mov	sp, r7
 810b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b9e2:	4770      	bx	lr

0810b9e4 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 810b9e4:	b580      	push	{r7, lr}
 810b9e6:	b08c      	sub	sp, #48	; 0x30
 810b9e8:	af00      	add	r7, sp, #0
 810b9ea:	60f8      	str	r0, [r7, #12]
 810b9ec:	60b9      	str	r1, [r7, #8]
 810b9ee:	607a      	str	r2, [r7, #4]
 810b9f0:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 810b9f2:	68fb      	ldr	r3, [r7, #12]
 810b9f4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 810b9f8:	2b60      	cmp	r3, #96	; 0x60
 810b9fa:	d007      	beq.n	810ba0c <bmp280_read_fixed+0x28>
		if (humidity)
 810b9fc:	683b      	ldr	r3, [r7, #0]
 810b9fe:	2b00      	cmp	r3, #0
 810ba00:	d002      	beq.n	810ba08 <bmp280_read_fixed+0x24>
			*humidity = 0;
 810ba02:	683b      	ldr	r3, [r7, #0]
 810ba04:	2200      	movs	r2, #0
 810ba06:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 810ba08:	2300      	movs	r3, #0
 810ba0a:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 810ba0c:	683b      	ldr	r3, [r7, #0]
 810ba0e:	2b00      	cmp	r3, #0
 810ba10:	d001      	beq.n	810ba16 <bmp280_read_fixed+0x32>
 810ba12:	2308      	movs	r3, #8
 810ba14:	e000      	b.n	810ba18 <bmp280_read_fixed+0x34>
 810ba16:	2306      	movs	r3, #6
 810ba18:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 810ba1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810ba1c:	b2db      	uxtb	r3, r3
 810ba1e:	f107 0218 	add.w	r2, r7, #24
 810ba22:	21f7      	movs	r1, #247	; 0xf7
 810ba24:	68f8      	ldr	r0, [r7, #12]
 810ba26:	f7ff fbbe 	bl	810b1a6 <read_data>
 810ba2a:	4603      	mov	r3, r0
 810ba2c:	2b00      	cmp	r3, #0
 810ba2e:	d001      	beq.n	810ba34 <bmp280_read_fixed+0x50>
		return false;
 810ba30:	2300      	movs	r3, #0
 810ba32:	e038      	b.n	810baa6 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 810ba34:	7e3b      	ldrb	r3, [r7, #24]
 810ba36:	031a      	lsls	r2, r3, #12
 810ba38:	7e7b      	ldrb	r3, [r7, #25]
 810ba3a:	011b      	lsls	r3, r3, #4
 810ba3c:	4313      	orrs	r3, r2
 810ba3e:	7eba      	ldrb	r2, [r7, #26]
 810ba40:	0912      	lsrs	r2, r2, #4
 810ba42:	b2d2      	uxtb	r2, r2
 810ba44:	4313      	orrs	r3, r2
 810ba46:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 810ba48:	7efb      	ldrb	r3, [r7, #27]
 810ba4a:	031a      	lsls	r2, r3, #12
 810ba4c:	7f3b      	ldrb	r3, [r7, #28]
 810ba4e:	011b      	lsls	r3, r3, #4
 810ba50:	4313      	orrs	r3, r2
 810ba52:	7f7a      	ldrb	r2, [r7, #29]
 810ba54:	0912      	lsrs	r2, r2, #4
 810ba56:	b2d2      	uxtb	r2, r2
 810ba58:	4313      	orrs	r3, r2
 810ba5a:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 810ba5c:	f107 0314 	add.w	r3, r7, #20
 810ba60:	461a      	mov	r2, r3
 810ba62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 810ba64:	68f8      	ldr	r0, [r7, #12]
 810ba66:	f7ff fd7b 	bl	810b560 <compensate_temperature>
 810ba6a:	4602      	mov	r2, r0
 810ba6c:	68bb      	ldr	r3, [r7, #8]
 810ba6e:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 810ba70:	697b      	ldr	r3, [r7, #20]
 810ba72:	461a      	mov	r2, r3
 810ba74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810ba76:	68f8      	ldr	r0, [r7, #12]
 810ba78:	f7ff fdab 	bl	810b5d2 <compensate_pressure>
 810ba7c:	4602      	mov	r2, r0
 810ba7e:	687b      	ldr	r3, [r7, #4]
 810ba80:	601a      	str	r2, [r3, #0]

	if (humidity) {
 810ba82:	683b      	ldr	r3, [r7, #0]
 810ba84:	2b00      	cmp	r3, #0
 810ba86:	d00d      	beq.n	810baa4 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 810ba88:	7fbb      	ldrb	r3, [r7, #30]
 810ba8a:	021b      	lsls	r3, r3, #8
 810ba8c:	7ffa      	ldrb	r2, [r7, #31]
 810ba8e:	4313      	orrs	r3, r2
 810ba90:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 810ba92:	697b      	ldr	r3, [r7, #20]
 810ba94:	461a      	mov	r2, r3
 810ba96:	6a39      	ldr	r1, [r7, #32]
 810ba98:	68f8      	ldr	r0, [r7, #12]
 810ba9a:	f7ff ff44 	bl	810b926 <compensate_humidity>
 810ba9e:	4602      	mov	r2, r0
 810baa0:	683b      	ldr	r3, [r7, #0]
 810baa2:	601a      	str	r2, [r3, #0]
	}

	return true;
 810baa4:	2301      	movs	r3, #1
}
 810baa6:	4618      	mov	r0, r3
 810baa8:	3730      	adds	r7, #48	; 0x30
 810baaa:	46bd      	mov	sp, r7
 810baac:	bd80      	pop	{r7, pc}
	...

0810bab0 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 810bab0:	b580      	push	{r7, lr}
 810bab2:	b088      	sub	sp, #32
 810bab4:	af00      	add	r7, sp, #0
 810bab6:	60f8      	str	r0, [r7, #12]
 810bab8:	60b9      	str	r1, [r7, #8]
 810baba:	607a      	str	r2, [r7, #4]
 810babc:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 810babe:	683b      	ldr	r3, [r7, #0]
 810bac0:	2b00      	cmp	r3, #0
 810bac2:	d002      	beq.n	810baca <bmp280_read_float+0x1a>
 810bac4:	f107 0314 	add.w	r3, r7, #20
 810bac8:	e000      	b.n	810bacc <bmp280_read_float+0x1c>
 810baca:	2300      	movs	r3, #0
 810bacc:	f107 0218 	add.w	r2, r7, #24
 810bad0:	f107 011c 	add.w	r1, r7, #28
 810bad4:	68f8      	ldr	r0, [r7, #12]
 810bad6:	f7ff ff85 	bl	810b9e4 <bmp280_read_fixed>
 810bada:	4603      	mov	r3, r0
 810badc:	2b00      	cmp	r3, #0
 810bade:	d028      	beq.n	810bb32 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 810bae0:	69fb      	ldr	r3, [r7, #28]
 810bae2:	ee07 3a90 	vmov	s15, r3
 810bae6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 810baea:	eddf 6a14 	vldr	s13, [pc, #80]	; 810bb3c <bmp280_read_float+0x8c>
 810baee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810baf2:	68bb      	ldr	r3, [r7, #8]
 810baf4:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 810baf8:	69bb      	ldr	r3, [r7, #24]
 810bafa:	ee07 3a90 	vmov	s15, r3
 810bafe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810bb02:	eddf 6a0f 	vldr	s13, [pc, #60]	; 810bb40 <bmp280_read_float+0x90>
 810bb06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810bb0a:	687b      	ldr	r3, [r7, #4]
 810bb0c:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 810bb10:	683b      	ldr	r3, [r7, #0]
 810bb12:	2b00      	cmp	r3, #0
 810bb14:	d00b      	beq.n	810bb2e <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 810bb16:	697b      	ldr	r3, [r7, #20]
 810bb18:	ee07 3a90 	vmov	s15, r3
 810bb1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810bb20:	eddf 6a08 	vldr	s13, [pc, #32]	; 810bb44 <bmp280_read_float+0x94>
 810bb24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810bb28:	683b      	ldr	r3, [r7, #0]
 810bb2a:	edc3 7a00 	vstr	s15, [r3]
		return true;
 810bb2e:	2301      	movs	r3, #1
 810bb30:	e000      	b.n	810bb34 <bmp280_read_float+0x84>
	}

	return false;
 810bb32:	2300      	movs	r3, #0
}
 810bb34:	4618      	mov	r0, r3
 810bb36:	3720      	adds	r7, #32
 810bb38:	46bd      	mov	sp, r7
 810bb3a:	bd80      	pop	{r7, pc}
 810bb3c:	42c80000 	.word	0x42c80000
 810bb40:	43800000 	.word	0x43800000
 810bb44:	44800000 	.word	0x44800000

0810bb48 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 810bb48:	b580      	push	{r7, lr}
 810bb4a:	b082      	sub	sp, #8
 810bb4c:	af00      	add	r7, sp, #0
 810bb4e:	4603      	mov	r3, r0
 810bb50:	71fb      	strb	r3, [r7, #7]
 810bb52:	79fb      	ldrb	r3, [r7, #7]
 810bb54:	4619      	mov	r1, r3
 810bb56:	2007      	movs	r0, #7
 810bb58:	f000 fa7e 	bl	810c058 <bno055_writeData>
 810bb5c:	bf00      	nop
 810bb5e:	3708      	adds	r7, #8
 810bb60:	46bd      	mov	sp, r7
 810bb62:	bd80      	pop	{r7, pc}

0810bb64 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 810bb64:	b580      	push	{r7, lr}
 810bb66:	b082      	sub	sp, #8
 810bb68:	af00      	add	r7, sp, #0
 810bb6a:	4603      	mov	r3, r0
 810bb6c:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 810bb6e:	79fb      	ldrb	r3, [r7, #7]
 810bb70:	4619      	mov	r1, r3
 810bb72:	203d      	movs	r0, #61	; 0x3d
 810bb74:	f000 fa70 	bl	810c058 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 810bb78:	79fb      	ldrb	r3, [r7, #7]
 810bb7a:	2b00      	cmp	r3, #0
 810bb7c:	d103      	bne.n	810bb86 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 810bb7e:	2013      	movs	r0, #19
 810bb80:	f000 fa5e 	bl	810c040 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 810bb84:	e002      	b.n	810bb8c <bno055_setOperationMode+0x28>
    bno055_delay(7);
 810bb86:	2007      	movs	r0, #7
 810bb88:	f000 fa5a 	bl	810c040 <bno055_delay>
}
 810bb8c:	bf00      	nop
 810bb8e:	3708      	adds	r7, #8
 810bb90:	46bd      	mov	sp, r7
 810bb92:	bd80      	pop	{r7, pc}

0810bb94 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 810bb94:	b580      	push	{r7, lr}
 810bb96:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 810bb98:	2000      	movs	r0, #0
 810bb9a:	f7ff ffe3 	bl	810bb64 <bno055_setOperationMode>
}
 810bb9e:	bf00      	nop
 810bba0:	bd80      	pop	{r7, pc}

0810bba2 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 810bba2:	b580      	push	{r7, lr}
 810bba4:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 810bba6:	200c      	movs	r0, #12
 810bba8:	f7ff ffdc 	bl	810bb64 <bno055_setOperationMode>
}
 810bbac:	bf00      	nop
 810bbae:	bd80      	pop	{r7, pc}

0810bbb0 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 810bbb0:	b580      	push	{r7, lr}
 810bbb2:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 810bbb4:	2120      	movs	r1, #32
 810bbb6:	203f      	movs	r0, #63	; 0x3f
 810bbb8:	f000 fa4e 	bl	810c058 <bno055_writeData>
  bno055_delay(700);
 810bbbc:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 810bbc0:	f000 fa3e 	bl	810c040 <bno055_delay>
}
 810bbc4:	bf00      	nop
 810bbc6:	bd80      	pop	{r7, pc}

0810bbc8 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 810bbc8:	b580      	push	{r7, lr}
 810bbca:	b082      	sub	sp, #8
 810bbcc:	af00      	add	r7, sp, #0
  bno055_reset();
 810bbce:	f7ff ffef 	bl	810bbb0 <bno055_reset>

  uint8_t id = 0;
 810bbd2:	2300      	movs	r3, #0
 810bbd4:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 810bbd6:	1dfb      	adds	r3, r7, #7
 810bbd8:	2201      	movs	r2, #1
 810bbda:	4619      	mov	r1, r3
 810bbdc:	2000      	movs	r0, #0
 810bbde:	f000 fb27 	bl	810c230 <bno055_readData>
  if (id != BNO055_ID) {
	  //Pas réussi :/
	  /* IMPLEMENT ME */
  }
  bno055_setPage(0);
 810bbe2:	2000      	movs	r0, #0
 810bbe4:	f7ff ffb0 	bl	810bb48 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 810bbe8:	2100      	movs	r1, #0
 810bbea:	203f      	movs	r0, #63	; 0x3f
 810bbec:	f000 fa34 	bl	810c058 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 810bbf0:	f7ff ffd0 	bl	810bb94 <bno055_setOperationModeConfig>
  bno055_delay(10);
 810bbf4:	200a      	movs	r0, #10
 810bbf6:	f000 fa23 	bl	810c040 <bno055_delay>
}
 810bbfa:	bf00      	nop
 810bbfc:	3708      	adds	r7, #8
 810bbfe:	46bd      	mov	sp, r7
 810bc00:	bd80      	pop	{r7, pc}
	...

0810bc04 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 810bc04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810bc08:	b09f      	sub	sp, #124	; 0x7c
 810bc0a:	af00      	add	r7, sp, #0
 810bc0c:	4603      	mov	r3, r0
 810bc0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 810bc12:	2000      	movs	r0, #0
 810bc14:	f7ff ff98 	bl	810bb48 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 810bc18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810bc1c:	2b20      	cmp	r3, #32
 810bc1e:	d108      	bne.n	810bc32 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 810bc20:	f107 0148 	add.w	r1, r7, #72	; 0x48
 810bc24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810bc28:	2208      	movs	r2, #8
 810bc2a:	4618      	mov	r0, r3
 810bc2c:	f000 fb00 	bl	810c230 <bno055_readData>
 810bc30:	e007      	b.n	810bc42 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 810bc32:	f107 0148 	add.w	r1, r7, #72	; 0x48
 810bc36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810bc3a:	2206      	movs	r2, #6
 810bc3c:	4618      	mov	r0, r3
 810bc3e:	f000 faf7 	bl	810c230 <bno055_readData>

  double scale = 1;
 810bc42:	f04f 0300 	mov.w	r3, #0
 810bc46:	4c8b      	ldr	r4, [pc, #556]	; (810be74 <bno055_getVector+0x270>)
 810bc48:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 810bc4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810bc50:	2b0e      	cmp	r3, #14
 810bc52:	d109      	bne.n	810bc68 <bno055_getVector+0x64>
    scale = magScale;
 810bc54:	4b88      	ldr	r3, [pc, #544]	; (810be78 <bno055_getVector+0x274>)
 810bc56:	881b      	ldrh	r3, [r3, #0]
 810bc58:	4618      	mov	r0, r3
 810bc5a:	f7f4 fcdb 	bl	8100614 <__aeabi_ui2d>
 810bc5e:	4603      	mov	r3, r0
 810bc60:	460c      	mov	r4, r1
 810bc62:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 810bc66:	e03e      	b.n	810bce6 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 810bc68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810bc6c:	2b08      	cmp	r3, #8
 810bc6e:	d007      	beq.n	810bc80 <bno055_getVector+0x7c>
 810bc70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810bc74:	2b28      	cmp	r3, #40	; 0x28
 810bc76:	d003      	beq.n	810bc80 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 810bc78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810bc7c:	2b2e      	cmp	r3, #46	; 0x2e
 810bc7e:	d109      	bne.n	810bc94 <bno055_getVector+0x90>
    scale = accelScale;
 810bc80:	4b7e      	ldr	r3, [pc, #504]	; (810be7c <bno055_getVector+0x278>)
 810bc82:	881b      	ldrh	r3, [r3, #0]
 810bc84:	4618      	mov	r0, r3
 810bc86:	f7f4 fcc5 	bl	8100614 <__aeabi_ui2d>
 810bc8a:	4603      	mov	r3, r0
 810bc8c:	460c      	mov	r4, r1
 810bc8e:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 810bc92:	e028      	b.n	810bce6 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 810bc94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810bc98:	2b14      	cmp	r3, #20
 810bc9a:	d109      	bne.n	810bcb0 <bno055_getVector+0xac>
    scale = angularRateScale;
 810bc9c:	4b78      	ldr	r3, [pc, #480]	; (810be80 <bno055_getVector+0x27c>)
 810bc9e:	881b      	ldrh	r3, [r3, #0]
 810bca0:	4618      	mov	r0, r3
 810bca2:	f7f4 fcb7 	bl	8100614 <__aeabi_ui2d>
 810bca6:	4603      	mov	r3, r0
 810bca8:	460c      	mov	r4, r1
 810bcaa:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 810bcae:	e01a      	b.n	810bce6 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 810bcb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810bcb4:	2b1a      	cmp	r3, #26
 810bcb6:	d109      	bne.n	810bccc <bno055_getVector+0xc8>
    scale = eulerScale;
 810bcb8:	4b72      	ldr	r3, [pc, #456]	; (810be84 <bno055_getVector+0x280>)
 810bcba:	881b      	ldrh	r3, [r3, #0]
 810bcbc:	4618      	mov	r0, r3
 810bcbe:	f7f4 fca9 	bl	8100614 <__aeabi_ui2d>
 810bcc2:	4603      	mov	r3, r0
 810bcc4:	460c      	mov	r4, r1
 810bcc6:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 810bcca:	e00c      	b.n	810bce6 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 810bccc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810bcd0:	2b20      	cmp	r3, #32
 810bcd2:	d108      	bne.n	810bce6 <bno055_getVector+0xe2>
    scale = quaScale;
 810bcd4:	4b6c      	ldr	r3, [pc, #432]	; (810be88 <bno055_getVector+0x284>)
 810bcd6:	881b      	ldrh	r3, [r3, #0]
 810bcd8:	4618      	mov	r0, r3
 810bcda:	f7f4 fc9b 	bl	8100614 <__aeabi_ui2d>
 810bcde:	4603      	mov	r3, r0
 810bce0:	460c      	mov	r4, r1
 810bce2:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 810bce6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 810bcea:	2220      	movs	r2, #32
 810bcec:	2100      	movs	r1, #0
 810bcee:	4618      	mov	r0, r3
 810bcf0:	f000 fd01 	bl	810c6f6 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 810bcf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810bcf8:	2b20      	cmp	r3, #32
 810bcfa:	d150      	bne.n	810bd9e <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 810bcfc:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 810bd00:	021b      	lsls	r3, r3, #8
 810bd02:	b21a      	sxth	r2, r3
 810bd04:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 810bd08:	b21b      	sxth	r3, r3
 810bd0a:	4313      	orrs	r3, r2
 810bd0c:	b21b      	sxth	r3, r3
 810bd0e:	4618      	mov	r0, r3
 810bd10:	f7f4 fc90 	bl	8100634 <__aeabi_i2d>
 810bd14:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810bd18:	f7f4 fe20 	bl	810095c <__aeabi_ddiv>
 810bd1c:	4603      	mov	r3, r0
 810bd1e:	460c      	mov	r4, r1
 810bd20:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 810bd24:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 810bd28:	021b      	lsls	r3, r3, #8
 810bd2a:	b21a      	sxth	r2, r3
 810bd2c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 810bd30:	b21b      	sxth	r3, r3
 810bd32:	4313      	orrs	r3, r2
 810bd34:	b21b      	sxth	r3, r3
 810bd36:	4618      	mov	r0, r3
 810bd38:	f7f4 fc7c 	bl	8100634 <__aeabi_i2d>
 810bd3c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810bd40:	f7f4 fe0c 	bl	810095c <__aeabi_ddiv>
 810bd44:	4603      	mov	r3, r0
 810bd46:	460c      	mov	r4, r1
 810bd48:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 810bd4c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 810bd50:	021b      	lsls	r3, r3, #8
 810bd52:	b21a      	sxth	r2, r3
 810bd54:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 810bd58:	b21b      	sxth	r3, r3
 810bd5a:	4313      	orrs	r3, r2
 810bd5c:	b21b      	sxth	r3, r3
 810bd5e:	4618      	mov	r0, r3
 810bd60:	f7f4 fc68 	bl	8100634 <__aeabi_i2d>
 810bd64:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810bd68:	f7f4 fdf8 	bl	810095c <__aeabi_ddiv>
 810bd6c:	4603      	mov	r3, r0
 810bd6e:	460c      	mov	r4, r1
 810bd70:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 810bd74:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 810bd78:	021b      	lsls	r3, r3, #8
 810bd7a:	b21a      	sxth	r2, r3
 810bd7c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 810bd80:	b21b      	sxth	r3, r3
 810bd82:	4313      	orrs	r3, r2
 810bd84:	b21b      	sxth	r3, r3
 810bd86:	4618      	mov	r0, r3
 810bd88:	f7f4 fc54 	bl	8100634 <__aeabi_i2d>
 810bd8c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810bd90:	f7f4 fde4 	bl	810095c <__aeabi_ddiv>
 810bd94:	4603      	mov	r3, r0
 810bd96:	460c      	mov	r4, r1
 810bd98:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
 810bd9c:	e03b      	b.n	810be16 <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 810bd9e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 810bda2:	021b      	lsls	r3, r3, #8
 810bda4:	b21a      	sxth	r2, r3
 810bda6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 810bdaa:	b21b      	sxth	r3, r3
 810bdac:	4313      	orrs	r3, r2
 810bdae:	b21b      	sxth	r3, r3
 810bdb0:	4618      	mov	r0, r3
 810bdb2:	f7f4 fc3f 	bl	8100634 <__aeabi_i2d>
 810bdb6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810bdba:	f7f4 fdcf 	bl	810095c <__aeabi_ddiv>
 810bdbe:	4603      	mov	r3, r0
 810bdc0:	460c      	mov	r4, r1
 810bdc2:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 810bdc6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 810bdca:	021b      	lsls	r3, r3, #8
 810bdcc:	b21a      	sxth	r2, r3
 810bdce:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 810bdd2:	b21b      	sxth	r3, r3
 810bdd4:	4313      	orrs	r3, r2
 810bdd6:	b21b      	sxth	r3, r3
 810bdd8:	4618      	mov	r0, r3
 810bdda:	f7f4 fc2b 	bl	8100634 <__aeabi_i2d>
 810bdde:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810bde2:	f7f4 fdbb 	bl	810095c <__aeabi_ddiv>
 810bde6:	4603      	mov	r3, r0
 810bde8:	460c      	mov	r4, r1
 810bdea:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 810bdee:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 810bdf2:	021b      	lsls	r3, r3, #8
 810bdf4:	b21a      	sxth	r2, r3
 810bdf6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 810bdfa:	b21b      	sxth	r3, r3
 810bdfc:	4313      	orrs	r3, r2
 810bdfe:	b21b      	sxth	r3, r3
 810be00:	4618      	mov	r0, r3
 810be02:	f7f4 fc17 	bl	8100634 <__aeabi_i2d>
 810be06:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810be0a:	f7f4 fda7 	bl	810095c <__aeabi_ddiv>
 810be0e:	4603      	mov	r3, r0
 810be10:	460c      	mov	r4, r1
 810be12:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
  }

  return xyz;
 810be16:	f107 0450 	add.w	r4, r7, #80	; 0x50
 810be1a:	f107 0528 	add.w	r5, r7, #40	; 0x28
 810be1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810be20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810be22:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 810be26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 810be2a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 810be2e:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 810be32:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 810be36:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 810be3a:	ec49 8b14 	vmov	d4, r8, r9
 810be3e:	ec46 5b15 	vmov	d5, r5, r6
 810be42:	ec42 1b16 	vmov	d6, r1, r2
 810be46:	ec44 3b17 	vmov	d7, r3, r4
}
 810be4a:	eeb0 0a44 	vmov.f32	s0, s8
 810be4e:	eef0 0a64 	vmov.f32	s1, s9
 810be52:	eeb0 1a45 	vmov.f32	s2, s10
 810be56:	eef0 1a65 	vmov.f32	s3, s11
 810be5a:	eeb0 2a46 	vmov.f32	s4, s12
 810be5e:	eef0 2a66 	vmov.f32	s5, s13
 810be62:	eeb0 3a47 	vmov.f32	s6, s14
 810be66:	eef0 3a67 	vmov.f32	s7, s15
 810be6a:	377c      	adds	r7, #124	; 0x7c
 810be6c:	46bd      	mov	sp, r7
 810be6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810be72:	bf00      	nop
 810be74:	3ff00000 	.word	0x3ff00000
 810be78:	1000002e 	.word	0x1000002e
 810be7c:	10000028 	.word	0x10000028
 810be80:	1000002a 	.word	0x1000002a
 810be84:	1000002c 	.word	0x1000002c
 810be88:	10000030 	.word	0x10000030

0810be8c <bno055_getVectorAccelerometer>:

bno055_vector_t bno055_getVectorAccelerometer() {
 810be8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810be90:	b091      	sub	sp, #68	; 0x44
 810be92:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
 810be94:	2008      	movs	r0, #8
 810be96:	f7ff feb5 	bl	810bc04 <bno055_getVector>
 810be9a:	eeb0 4a40 	vmov.f32	s8, s0
 810be9e:	eef0 4a60 	vmov.f32	s9, s1
 810bea2:	eeb0 5a41 	vmov.f32	s10, s2
 810bea6:	eef0 5a61 	vmov.f32	s11, s3
 810beaa:	eeb0 6a42 	vmov.f32	s12, s4
 810beae:	eef0 6a62 	vmov.f32	s13, s5
 810beb2:	eeb0 7a43 	vmov.f32	s14, s6
 810beb6:	eef0 7a63 	vmov.f32	s15, s7
 810beba:	ed87 4b08 	vstr	d4, [r7, #32]
 810bebe:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 810bec2:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 810bec6:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 810beca:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 810bece:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 810bed2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 810bed6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 810beda:	ec49 8b14 	vmov	d4, r8, r9
 810bede:	ec46 5b15 	vmov	d5, r5, r6
 810bee2:	ec42 1b16 	vmov	d6, r1, r2
 810bee6:	ec44 3b17 	vmov	d7, r3, r4
}
 810beea:	eeb0 0a44 	vmov.f32	s0, s8
 810beee:	eef0 0a64 	vmov.f32	s1, s9
 810bef2:	eeb0 1a45 	vmov.f32	s2, s10
 810bef6:	eef0 1a65 	vmov.f32	s3, s11
 810befa:	eeb0 2a46 	vmov.f32	s4, s12
 810befe:	eef0 2a66 	vmov.f32	s5, s13
 810bf02:	eeb0 3a47 	vmov.f32	s6, s14
 810bf06:	eef0 3a67 	vmov.f32	s7, s15
 810bf0a:	3744      	adds	r7, #68	; 0x44
 810bf0c:	46bd      	mov	sp, r7
 810bf0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0810bf12 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 810bf12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810bf16:	b091      	sub	sp, #68	; 0x44
 810bf18:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 810bf1a:	201a      	movs	r0, #26
 810bf1c:	f7ff fe72 	bl	810bc04 <bno055_getVector>
 810bf20:	eeb0 4a40 	vmov.f32	s8, s0
 810bf24:	eef0 4a60 	vmov.f32	s9, s1
 810bf28:	eeb0 5a41 	vmov.f32	s10, s2
 810bf2c:	eef0 5a61 	vmov.f32	s11, s3
 810bf30:	eeb0 6a42 	vmov.f32	s12, s4
 810bf34:	eef0 6a62 	vmov.f32	s13, s5
 810bf38:	eeb0 7a43 	vmov.f32	s14, s6
 810bf3c:	eef0 7a63 	vmov.f32	s15, s7
 810bf40:	ed87 4b08 	vstr	d4, [r7, #32]
 810bf44:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 810bf48:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 810bf4c:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 810bf50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 810bf54:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 810bf58:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 810bf5c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 810bf60:	ec49 8b14 	vmov	d4, r8, r9
 810bf64:	ec46 5b15 	vmov	d5, r5, r6
 810bf68:	ec42 1b16 	vmov	d6, r1, r2
 810bf6c:	ec44 3b17 	vmov	d7, r3, r4
}
 810bf70:	eeb0 0a44 	vmov.f32	s0, s8
 810bf74:	eef0 0a64 	vmov.f32	s1, s9
 810bf78:	eeb0 1a45 	vmov.f32	s2, s10
 810bf7c:	eef0 1a65 	vmov.f32	s3, s11
 810bf80:	eeb0 2a46 	vmov.f32	s4, s12
 810bf84:	eef0 2a66 	vmov.f32	s5, s13
 810bf88:	eeb0 3a47 	vmov.f32	s6, s14
 810bf8c:	eef0 3a67 	vmov.f32	s7, s15
 810bf90:	3744      	adds	r7, #68	; 0x44
 810bf92:	46bd      	mov	sp, r7
 810bf94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0810bf98 <bno055_getVectorGravity>:
bno055_vector_t bno055_getVectorLinearAccel() {
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
}
bno055_vector_t bno055_getVectorGravity() {
 810bf98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810bf9c:	b091      	sub	sp, #68	; 0x44
 810bf9e:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
 810bfa0:	202e      	movs	r0, #46	; 0x2e
 810bfa2:	f7ff fe2f 	bl	810bc04 <bno055_getVector>
 810bfa6:	eeb0 4a40 	vmov.f32	s8, s0
 810bfaa:	eef0 4a60 	vmov.f32	s9, s1
 810bfae:	eeb0 5a41 	vmov.f32	s10, s2
 810bfb2:	eef0 5a61 	vmov.f32	s11, s3
 810bfb6:	eeb0 6a42 	vmov.f32	s12, s4
 810bfba:	eef0 6a62 	vmov.f32	s13, s5
 810bfbe:	eeb0 7a43 	vmov.f32	s14, s6
 810bfc2:	eef0 7a63 	vmov.f32	s15, s7
 810bfc6:	ed87 4b08 	vstr	d4, [r7, #32]
 810bfca:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 810bfce:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 810bfd2:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 810bfd6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 810bfda:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 810bfde:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 810bfe2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 810bfe6:	ec49 8b14 	vmov	d4, r8, r9
 810bfea:	ec46 5b15 	vmov	d5, r5, r6
 810bfee:	ec42 1b16 	vmov	d6, r1, r2
 810bff2:	ec44 3b17 	vmov	d7, r3, r4
}
 810bff6:	eeb0 0a44 	vmov.f32	s0, s8
 810bffa:	eef0 0a64 	vmov.f32	s1, s9
 810bffe:	eeb0 1a45 	vmov.f32	s2, s10
 810c002:	eef0 1a65 	vmov.f32	s3, s11
 810c006:	eeb0 2a46 	vmov.f32	s4, s12
 810c00a:	eef0 2a66 	vmov.f32	s5, s13
 810c00e:	eeb0 3a47 	vmov.f32	s6, s14
 810c012:	eef0 3a67 	vmov.f32	s7, s15
 810c016:	3744      	adds	r7, #68	; 0x44
 810c018:	46bd      	mov	sp, r7
 810c01a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0810c020 <bno055_assignI2C>:
#include "bno055_stm32.h"
#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 810c020:	b480      	push	{r7}
 810c022:	b083      	sub	sp, #12
 810c024:	af00      	add	r7, sp, #0
 810c026:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 810c028:	4a04      	ldr	r2, [pc, #16]	; (810c03c <bno055_assignI2C+0x1c>)
 810c02a:	687b      	ldr	r3, [r7, #4]
 810c02c:	6013      	str	r3, [r2, #0]
}
 810c02e:	bf00      	nop
 810c030:	370c      	adds	r7, #12
 810c032:	46bd      	mov	sp, r7
 810c034:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c038:	4770      	bx	lr
 810c03a:	bf00      	nop
 810c03c:	10005508 	.word	0x10005508

0810c040 <bno055_delay>:

void bno055_delay(int time) {
 810c040:	b580      	push	{r7, lr}
 810c042:	b082      	sub	sp, #8
 810c044:	af00      	add	r7, sp, #0
 810c046:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
 810c048:	6878      	ldr	r0, [r7, #4]
 810c04a:	f7fc fc23 	bl	8108894 <osDelay>
#else
  HAL_Delay(time);
#endif
}
 810c04e:	bf00      	nop
 810c050:	3708      	adds	r7, #8
 810c052:	46bd      	mov	sp, r7
 810c054:	bd80      	pop	{r7, pc}
	...

0810c058 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 810c058:	b580      	push	{r7, lr}
 810c05a:	b088      	sub	sp, #32
 810c05c:	af02      	add	r7, sp, #8
 810c05e:	4603      	mov	r3, r0
 810c060:	460a      	mov	r2, r1
 810c062:	71fb      	strb	r3, [r7, #7]
 810c064:	4613      	mov	r3, r2
 810c066:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 810c068:	79fb      	ldrb	r3, [r7, #7]
 810c06a:	733b      	strb	r3, [r7, #12]
 810c06c:	79bb      	ldrb	r3, [r7, #6]
 810c06e:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 810c070:	4b5a      	ldr	r3, [pc, #360]	; (810c1dc <bno055_writeData+0x184>)
 810c072:	6818      	ldr	r0, [r3, #0]
 810c074:	f107 020c 	add.w	r2, r7, #12
 810c078:	230a      	movs	r3, #10
 810c07a:	9300      	str	r3, [sp, #0]
 810c07c:	2302      	movs	r3, #2
 810c07e:	2150      	movs	r1, #80	; 0x50
 810c080:	f7f8 fd90 	bl	8104ba4 <HAL_I2C_Master_Transmit>
 810c084:	4603      	mov	r3, r0
 810c086:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 810c088:	7dfb      	ldrb	r3, [r7, #23]
 810c08a:	2b00      	cmp	r3, #0
 810c08c:	f000 80a0 	beq.w	810c1d0 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 810c090:	7dfb      	ldrb	r3, [r7, #23]
 810c092:	2b01      	cmp	r3, #1
 810c094:	d103      	bne.n	810c09e <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 810c096:	4852      	ldr	r0, [pc, #328]	; (810c1e0 <bno055_writeData+0x188>)
 810c098:	f001 f806 	bl	810d0a8 <puts>
 810c09c:	e012      	b.n	810c0c4 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 810c09e:	7dfb      	ldrb	r3, [r7, #23]
 810c0a0:	2b03      	cmp	r3, #3
 810c0a2:	d103      	bne.n	810c0ac <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 810c0a4:	484f      	ldr	r0, [pc, #316]	; (810c1e4 <bno055_writeData+0x18c>)
 810c0a6:	f000 ffff 	bl	810d0a8 <puts>
 810c0aa:	e00b      	b.n	810c0c4 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 810c0ac:	7dfb      	ldrb	r3, [r7, #23]
 810c0ae:	2b02      	cmp	r3, #2
 810c0b0:	d103      	bne.n	810c0ba <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 810c0b2:	484d      	ldr	r0, [pc, #308]	; (810c1e8 <bno055_writeData+0x190>)
 810c0b4:	f000 fff8 	bl	810d0a8 <puts>
 810c0b8:	e004      	b.n	810c0c4 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 810c0ba:	7dfb      	ldrb	r3, [r7, #23]
 810c0bc:	4619      	mov	r1, r3
 810c0be:	484b      	ldr	r0, [pc, #300]	; (810c1ec <bno055_writeData+0x194>)
 810c0c0:	f000 ff7e 	bl	810cfc0 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 810c0c4:	4b45      	ldr	r3, [pc, #276]	; (810c1dc <bno055_writeData+0x184>)
 810c0c6:	681b      	ldr	r3, [r3, #0]
 810c0c8:	4618      	mov	r0, r3
 810c0ca:	f7f9 f991 	bl	81053f0 <HAL_I2C_GetError>
 810c0ce:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 810c0d0:	693b      	ldr	r3, [r7, #16]
 810c0d2:	2b00      	cmp	r3, #0
 810c0d4:	d07e      	beq.n	810c1d4 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 810c0d6:	693b      	ldr	r3, [r7, #16]
 810c0d8:	2b01      	cmp	r3, #1
 810c0da:	d103      	bne.n	810c0e4 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 810c0dc:	4844      	ldr	r0, [pc, #272]	; (810c1f0 <bno055_writeData+0x198>)
 810c0de:	f000 ffe3 	bl	810d0a8 <puts>
 810c0e2:	e021      	b.n	810c128 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 810c0e4:	693b      	ldr	r3, [r7, #16]
 810c0e6:	2b02      	cmp	r3, #2
 810c0e8:	d103      	bne.n	810c0f2 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 810c0ea:	4842      	ldr	r0, [pc, #264]	; (810c1f4 <bno055_writeData+0x19c>)
 810c0ec:	f000 ffdc 	bl	810d0a8 <puts>
 810c0f0:	e01a      	b.n	810c128 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 810c0f2:	693b      	ldr	r3, [r7, #16]
 810c0f4:	2b04      	cmp	r3, #4
 810c0f6:	d103      	bne.n	810c100 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 810c0f8:	483f      	ldr	r0, [pc, #252]	; (810c1f8 <bno055_writeData+0x1a0>)
 810c0fa:	f000 ffd5 	bl	810d0a8 <puts>
 810c0fe:	e013      	b.n	810c128 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 810c100:	693b      	ldr	r3, [r7, #16]
 810c102:	2b08      	cmp	r3, #8
 810c104:	d103      	bne.n	810c10e <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 810c106:	483d      	ldr	r0, [pc, #244]	; (810c1fc <bno055_writeData+0x1a4>)
 810c108:	f000 ffce 	bl	810d0a8 <puts>
 810c10c:	e00c      	b.n	810c128 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 810c10e:	693b      	ldr	r3, [r7, #16]
 810c110:	2b10      	cmp	r3, #16
 810c112:	d103      	bne.n	810c11c <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 810c114:	483a      	ldr	r0, [pc, #232]	; (810c200 <bno055_writeData+0x1a8>)
 810c116:	f000 ffc7 	bl	810d0a8 <puts>
 810c11a:	e005      	b.n	810c128 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 810c11c:	693b      	ldr	r3, [r7, #16]
 810c11e:	2b20      	cmp	r3, #32
 810c120:	d102      	bne.n	810c128 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 810c122:	4838      	ldr	r0, [pc, #224]	; (810c204 <bno055_writeData+0x1ac>)
 810c124:	f000 ffc0 	bl	810d0a8 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 810c128:	4b2c      	ldr	r3, [pc, #176]	; (810c1dc <bno055_writeData+0x184>)
 810c12a:	681b      	ldr	r3, [r3, #0]
 810c12c:	4618      	mov	r0, r3
 810c12e:	f7f9 f951 	bl	81053d4 <HAL_I2C_GetState>
 810c132:	4603      	mov	r3, r0
 810c134:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 810c136:	7bfb      	ldrb	r3, [r7, #15]
 810c138:	2b00      	cmp	r3, #0
 810c13a:	d103      	bne.n	810c144 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 810c13c:	4832      	ldr	r0, [pc, #200]	; (810c208 <bno055_writeData+0x1b0>)
 810c13e:	f000 ffb3 	bl	810d0a8 <puts>
 810c142:	e048      	b.n	810c1d6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 810c144:	7bfb      	ldrb	r3, [r7, #15]
 810c146:	2b20      	cmp	r3, #32
 810c148:	d103      	bne.n	810c152 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 810c14a:	482f      	ldr	r0, [pc, #188]	; (810c208 <bno055_writeData+0x1b0>)
 810c14c:	f000 ffac 	bl	810d0a8 <puts>
 810c150:	e041      	b.n	810c1d6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 810c152:	7bfb      	ldrb	r3, [r7, #15]
 810c154:	2b24      	cmp	r3, #36	; 0x24
 810c156:	d103      	bne.n	810c160 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 810c158:	482c      	ldr	r0, [pc, #176]	; (810c20c <bno055_writeData+0x1b4>)
 810c15a:	f000 ffa5 	bl	810d0a8 <puts>
 810c15e:	e03a      	b.n	810c1d6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 810c160:	7bfb      	ldrb	r3, [r7, #15]
 810c162:	2b21      	cmp	r3, #33	; 0x21
 810c164:	d103      	bne.n	810c16e <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 810c166:	482a      	ldr	r0, [pc, #168]	; (810c210 <bno055_writeData+0x1b8>)
 810c168:	f000 ff9e 	bl	810d0a8 <puts>
 810c16c:	e033      	b.n	810c1d6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 810c16e:	7bfb      	ldrb	r3, [r7, #15]
 810c170:	2b22      	cmp	r3, #34	; 0x22
 810c172:	d103      	bne.n	810c17c <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 810c174:	4827      	ldr	r0, [pc, #156]	; (810c214 <bno055_writeData+0x1bc>)
 810c176:	f000 ff97 	bl	810d0a8 <puts>
 810c17a:	e02c      	b.n	810c1d6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 810c17c:	7bfb      	ldrb	r3, [r7, #15]
 810c17e:	2b28      	cmp	r3, #40	; 0x28
 810c180:	d103      	bne.n	810c18a <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 810c182:	4825      	ldr	r0, [pc, #148]	; (810c218 <bno055_writeData+0x1c0>)
 810c184:	f000 ff90 	bl	810d0a8 <puts>
 810c188:	e025      	b.n	810c1d6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 810c18a:	7bfb      	ldrb	r3, [r7, #15]
 810c18c:	2b29      	cmp	r3, #41	; 0x29
 810c18e:	d103      	bne.n	810c198 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 810c190:	4822      	ldr	r0, [pc, #136]	; (810c21c <bno055_writeData+0x1c4>)
 810c192:	f000 ff89 	bl	810d0a8 <puts>
 810c196:	e01e      	b.n	810c1d6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 810c198:	7bfb      	ldrb	r3, [r7, #15]
 810c19a:	2b2a      	cmp	r3, #42	; 0x2a
 810c19c:	d103      	bne.n	810c1a6 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 810c19e:	4820      	ldr	r0, [pc, #128]	; (810c220 <bno055_writeData+0x1c8>)
 810c1a0:	f000 ff82 	bl	810d0a8 <puts>
 810c1a4:	e017      	b.n	810c1d6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 810c1a6:	7bfb      	ldrb	r3, [r7, #15]
 810c1a8:	2b60      	cmp	r3, #96	; 0x60
 810c1aa:	d103      	bne.n	810c1b4 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 810c1ac:	481d      	ldr	r0, [pc, #116]	; (810c224 <bno055_writeData+0x1cc>)
 810c1ae:	f000 ff7b 	bl	810d0a8 <puts>
 810c1b2:	e010      	b.n	810c1d6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 810c1b4:	7bfb      	ldrb	r3, [r7, #15]
 810c1b6:	2ba0      	cmp	r3, #160	; 0xa0
 810c1b8:	d103      	bne.n	810c1c2 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 810c1ba:	481b      	ldr	r0, [pc, #108]	; (810c228 <bno055_writeData+0x1d0>)
 810c1bc:	f000 ff74 	bl	810d0a8 <puts>
 810c1c0:	e009      	b.n	810c1d6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 810c1c2:	7bfb      	ldrb	r3, [r7, #15]
 810c1c4:	2be0      	cmp	r3, #224	; 0xe0
 810c1c6:	d106      	bne.n	810c1d6 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 810c1c8:	4818      	ldr	r0, [pc, #96]	; (810c22c <bno055_writeData+0x1d4>)
 810c1ca:	f000 ff6d 	bl	810d0a8 <puts>
 810c1ce:	e002      	b.n	810c1d6 <bno055_writeData+0x17e>
    return;
 810c1d0:	bf00      	nop
 810c1d2:	e000      	b.n	810c1d6 <bno055_writeData+0x17e>
    return;
 810c1d4:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 810c1d6:	3718      	adds	r7, #24
 810c1d8:	46bd      	mov	sp, r7
 810c1da:	bd80      	pop	{r7, pc}
 810c1dc:	10005508 	.word	0x10005508
 810c1e0:	0810ef1c 	.word	0x0810ef1c
 810c1e4:	0810ef40 	.word	0x0810ef40
 810c1e8:	0810ef68 	.word	0x0810ef68
 810c1ec:	0810ef8c 	.word	0x0810ef8c
 810c1f0:	0810efa4 	.word	0x0810efa4
 810c1f4:	0810efb8 	.word	0x0810efb8
 810c1f8:	0810efcc 	.word	0x0810efcc
 810c1fc:	0810efe0 	.word	0x0810efe0
 810c200:	0810eff4 	.word	0x0810eff4
 810c204:	0810f008 	.word	0x0810f008
 810c208:	0810f020 	.word	0x0810f020
 810c20c:	0810f038 	.word	0x0810f038
 810c210:	0810f04c 	.word	0x0810f04c
 810c214:	0810f064 	.word	0x0810f064
 810c218:	0810f07c 	.word	0x0810f07c
 810c21c:	0810f094 	.word	0x0810f094
 810c220:	0810f0b4 	.word	0x0810f0b4
 810c224:	0810f0d4 	.word	0x0810f0d4
 810c228:	0810f0ec 	.word	0x0810f0ec
 810c22c:	0810f104 	.word	0x0810f104

0810c230 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 810c230:	b580      	push	{r7, lr}
 810c232:	b084      	sub	sp, #16
 810c234:	af02      	add	r7, sp, #8
 810c236:	4603      	mov	r3, r0
 810c238:	6039      	str	r1, [r7, #0]
 810c23a:	71fb      	strb	r3, [r7, #7]
 810c23c:	4613      	mov	r3, r2
 810c23e:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 810c240:	4b0b      	ldr	r3, [pc, #44]	; (810c270 <bno055_readData+0x40>)
 810c242:	6818      	ldr	r0, [r3, #0]
 810c244:	1dfa      	adds	r2, r7, #7
 810c246:	2364      	movs	r3, #100	; 0x64
 810c248:	9300      	str	r3, [sp, #0]
 810c24a:	2301      	movs	r3, #1
 810c24c:	2150      	movs	r1, #80	; 0x50
 810c24e:	f7f8 fca9 	bl	8104ba4 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 810c252:	4b07      	ldr	r3, [pc, #28]	; (810c270 <bno055_readData+0x40>)
 810c254:	6818      	ldr	r0, [r3, #0]
 810c256:	79bb      	ldrb	r3, [r7, #6]
 810c258:	b29a      	uxth	r2, r3
 810c25a:	2364      	movs	r3, #100	; 0x64
 810c25c:	9300      	str	r3, [sp, #0]
 810c25e:	4613      	mov	r3, r2
 810c260:	683a      	ldr	r2, [r7, #0]
 810c262:	2150      	movs	r1, #80	; 0x50
 810c264:	f7f8 fd92 	bl	8104d8c <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 810c268:	bf00      	nop
 810c26a:	3708      	adds	r7, #8
 810c26c:	46bd      	mov	sp, r7
 810c26e:	bd80      	pop	{r7, pc}
 810c270:	10005508 	.word	0x10005508

0810c274 <_ZN14WatchdogThread4initEv>:
#elif defined CORE_CM4
IWDG_HandleTypeDef* watchdog_handle = &hiwdg2;
#endif


void WatchdogThread::init() {
 810c274:	b480      	push	{r7}
 810c276:	b083      	sub	sp, #12
 810c278:	af00      	add	r7, sp, #0
 810c27a:	6078      	str	r0, [r7, #4]

}
 810c27c:	bf00      	nop
 810c27e:	370c      	adds	r7, #12
 810c280:	46bd      	mov	sp, r7
 810c282:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c286:	4770      	bx	lr

0810c288 <_ZN14WatchdogThread4loopEv>:

void WatchdogThread::loop() {
 810c288:	b580      	push	{r7, lr}
 810c28a:	b082      	sub	sp, #8
 810c28c:	af00      	add	r7, sp, #0
 810c28e:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Refresh(watchdog_handle);
 810c290:	4b05      	ldr	r3, [pc, #20]	; (810c2a8 <_ZN14WatchdogThread4loopEv+0x20>)
 810c292:	681b      	ldr	r3, [r3, #0]
 810c294:	4618      	mov	r0, r3
 810c296:	f7f9 fc41 	bl	8105b1c <HAL_IWDG_Refresh>
	osDelay(100);
 810c29a:	2064      	movs	r0, #100	; 0x64
 810c29c:	f7fc fafa 	bl	8108894 <osDelay>
}
 810c2a0:	bf00      	nop
 810c2a2:	3708      	adds	r7, #8
 810c2a4:	46bd      	mov	sp, r7
 810c2a6:	bd80      	pop	{r7, pc}
 810c2a8:	10000034 	.word	0x10000034

0810c2ac <_ZN15BarometerThread4initEv>:

#include "Barometer.h"
#include "Libraries/bmp280.h"


void BarometerThread::init() {
 810c2ac:	b5b0      	push	{r4, r5, r7, lr}
 810c2ae:	b0c4      	sub	sp, #272	; 0x110
 810c2b0:	af00      	add	r7, sp, #0
 810c2b2:	1d3b      	adds	r3, r7, #4
 810c2b4:	6018      	str	r0, [r3, #0]
	bmp280_init_default_params(&bmp280.params);
 810c2b6:	1d3b      	adds	r3, r7, #4
 810c2b8:	681b      	ldr	r3, [r3, #0]
 810c2ba:	3334      	adds	r3, #52	; 0x34
 810c2bc:	4618      	mov	r0, r3
 810c2be:	f7fe ff27 	bl	810b110 <bmp280_init_default_params>
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 810c2c2:	1d3b      	adds	r3, r7, #4
 810c2c4:	681b      	ldr	r3, [r3, #0]
 810c2c6:	2276      	movs	r2, #118	; 0x76
 810c2c8:	859a      	strh	r2, [r3, #44]	; 0x2c
	bmp280.i2c = hi2c;
 810c2ca:	1d3b      	adds	r3, r7, #4
 810c2cc:	681b      	ldr	r3, [r3, #0]
 810c2ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810c2d0:	1d3b      	adds	r3, r7, #4
 810c2d2:	681b      	ldr	r3, [r3, #0]
 810c2d4:	631a      	str	r2, [r3, #48]	; 0x30
	while (!bmp280_init(&bmp280, &bmp280.params)) {
 810c2d6:	1d3b      	adds	r3, r7, #4
 810c2d8:	681b      	ldr	r3, [r3, #0]
 810c2da:	f103 0208 	add.w	r2, r3, #8
 810c2de:	1d3b      	adds	r3, r7, #4
 810c2e0:	681b      	ldr	r3, [r3, #0]
 810c2e2:	3334      	adds	r3, #52	; 0x34
 810c2e4:	4619      	mov	r1, r3
 810c2e6:	4610      	mov	r0, r2
 810c2e8:	f7ff f88d 	bl	810b406 <bmp280_init>
 810c2ec:	4603      	mov	r3, r0
 810c2ee:	f083 0301 	eor.w	r3, r3, #1
 810c2f2:	b2db      	uxtb	r3, r3
 810c2f4:	2b00      	cmp	r3, #0
 810c2f6:	d01c      	beq.n	810c332 <_ZN15BarometerThread4initEv+0x86>
		char data[256]; //Random size, check this
	  	int size = sprintf((char *)data, "BMP280 initialization failed\n");
 810c2f8:	f107 030c 	add.w	r3, r7, #12
 810c2fc:	4a0f      	ldr	r2, [pc, #60]	; (810c33c <_ZN15BarometerThread4initEv+0x90>)
 810c2fe:	461c      	mov	r4, r3
 810c300:	4615      	mov	r5, r2
 810c302:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810c304:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810c306:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 810c30a:	c407      	stmia	r4!, {r0, r1, r2}
 810c30c:	8023      	strh	r3, [r4, #0]
 810c30e:	231d      	movs	r3, #29
 810c310:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	  	printToUart(huart, (uint8_t*)data, size);
 810c314:	1d3b      	adds	r3, r7, #4
 810c316:	681b      	ldr	r3, [r3, #0]
 810c318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810c31a:	f107 010c 	add.w	r1, r7, #12
 810c31e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 810c322:	4618      	mov	r0, r3
 810c324:	f7fe fee2 	bl	810b0ec <_Z11printToUartP20__UART_HandleTypeDefPhi>
	  	osDelay(500);
 810c328:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 810c32c:	f7fc fab2 	bl	8108894 <osDelay>
	while (!bmp280_init(&bmp280, &bmp280.params)) {
 810c330:	e7d1      	b.n	810c2d6 <_ZN15BarometerThread4initEv+0x2a>
	 }
}
 810c332:	bf00      	nop
 810c334:	f507 7788 	add.w	r7, r7, #272	; 0x110
 810c338:	46bd      	mov	sp, r7
 810c33a:	bdb0      	pop	{r4, r5, r7, pc}
 810c33c:	0810f11c 	.word	0x0810f11c

0810c340 <_ZN15BarometerThread4loopEv>:

void BarometerThread::loop() {
 810c340:	b580      	push	{r7, lr}
 810c342:	b086      	sub	sp, #24
 810c344:	af00      	add	r7, sp, #0
 810c346:	6078      	str	r0, [r7, #4]
	float *temperature;
	float *pressure;
	float *humidity;

	bmp280_read_float(&bmp280, temperature, pressure, humidity);
 810c348:	687b      	ldr	r3, [r7, #4]
 810c34a:	f103 0008 	add.w	r0, r3, #8
 810c34e:	68fb      	ldr	r3, [r7, #12]
 810c350:	693a      	ldr	r2, [r7, #16]
 810c352:	6979      	ldr	r1, [r7, #20]
 810c354:	f7ff fbac 	bl	810bab0 <bmp280_read_float>
	osDelay(100);
 810c358:	2064      	movs	r0, #100	; 0x64
 810c35a:	f7fc fa9b 	bl	8108894 <osDelay>
}
 810c35e:	bf00      	nop
 810c360:	3718      	adds	r7, #24
 810c362:	46bd      	mov	sp, r7
 810c364:	bd80      	pop	{r7, pc}

0810c366 <_ZN9IMUThread4initEv>:
 *      Author: arion
 */

#include "IMU.h"

void IMUThread::init() {
 810c366:	b580      	push	{r7, lr}
 810c368:	b082      	sub	sp, #8
 810c36a:	af00      	add	r7, sp, #0
 810c36c:	6078      	str	r0, [r7, #4]
	bno055_assignI2C(this->hi2c);
 810c36e:	687b      	ldr	r3, [r7, #4]
 810c370:	689b      	ldr	r3, [r3, #8]
 810c372:	4618      	mov	r0, r3
 810c374:	f7ff fe54 	bl	810c020 <bno055_assignI2C>
	bno055_setup();
 810c378:	f7ff fc26 	bl	810bbc8 <bno055_setup>
	bno055_setOperationModeNDOF();
 810c37c:	f7ff fc11 	bl	810bba2 <bno055_setOperationModeNDOF>
}
 810c380:	bf00      	nop
 810c382:	3708      	adds	r7, #8
 810c384:	46bd      	mov	sp, r7
 810c386:	bd80      	pop	{r7, pc}

0810c388 <_ZN9IMUThread4loopEv>:

void IMUThread::loop() {
 810c388:	b580      	push	{r7, lr}
 810c38a:	b0dc      	sub	sp, #368	; 0x170
 810c38c:	af00      	add	r7, sp, #0
 810c38e:	1d3b      	adds	r3, r7, #4
 810c390:	6018      	str	r0, [r3, #0]
	bno055_vector_t imuData[3];
	imuData[0] = bno055_getVectorAccelerometer();
 810c392:	f7ff fd7b 	bl	810be8c <bno055_getVectorAccelerometer>
 810c396:	eeb0 4a40 	vmov.f32	s8, s0
 810c39a:	eef0 4a60 	vmov.f32	s9, s1
 810c39e:	eeb0 5a41 	vmov.f32	s10, s2
 810c3a2:	eef0 5a61 	vmov.f32	s11, s3
 810c3a6:	eeb0 6a42 	vmov.f32	s12, s4
 810c3aa:	eef0 6a62 	vmov.f32	s13, s5
 810c3ae:	eeb0 7a43 	vmov.f32	s14, s6
 810c3b2:	eef0 7a63 	vmov.f32	s15, s7
 810c3b6:	ed87 4b42 	vstr	d4, [r7, #264]	; 0x108
 810c3ba:	ed87 5b44 	vstr	d5, [r7, #272]	; 0x110
 810c3be:	ed87 6b46 	vstr	d6, [r7, #280]	; 0x118
 810c3c2:	ed87 7b48 	vstr	d7, [r7, #288]	; 0x120
	imuData[1] = bno055_getVectorEuler(); // bno055_getVectorQuaternion();
 810c3c6:	f7ff fda4 	bl	810bf12 <bno055_getVectorEuler>
 810c3ca:	eeb0 4a40 	vmov.f32	s8, s0
 810c3ce:	eef0 4a60 	vmov.f32	s9, s1
 810c3d2:	eeb0 5a41 	vmov.f32	s10, s2
 810c3d6:	eef0 5a61 	vmov.f32	s11, s3
 810c3da:	eeb0 6a42 	vmov.f32	s12, s4
 810c3de:	eef0 6a62 	vmov.f32	s13, s5
 810c3e2:	eeb0 7a43 	vmov.f32	s14, s6
 810c3e6:	eef0 7a63 	vmov.f32	s15, s7
 810c3ea:	ed87 4b4a 	vstr	d4, [r7, #296]	; 0x128
 810c3ee:	ed87 5b4c 	vstr	d5, [r7, #304]	; 0x130
 810c3f2:	ed87 6b4e 	vstr	d6, [r7, #312]	; 0x138
 810c3f6:	ed87 7b50 	vstr	d7, [r7, #320]	; 0x140
	imuData[2] = bno055_getVectorGravity();
 810c3fa:	f7ff fdcd 	bl	810bf98 <bno055_getVectorGravity>
 810c3fe:	eeb0 4a40 	vmov.f32	s8, s0
 810c402:	eef0 4a60 	vmov.f32	s9, s1
 810c406:	eeb0 5a41 	vmov.f32	s10, s2
 810c40a:	eef0 5a61 	vmov.f32	s11, s3
 810c40e:	eeb0 6a42 	vmov.f32	s12, s4
 810c412:	eef0 6a62 	vmov.f32	s13, s5
 810c416:	eeb0 7a43 	vmov.f32	s14, s6
 810c41a:	eef0 7a63 	vmov.f32	s15, s7
 810c41e:	ed87 4b52 	vstr	d4, [r7, #328]	; 0x148
 810c422:	ed87 5b54 	vstr	d5, [r7, #336]	; 0x150
 810c426:	ed87 6b56 	vstr	d6, [r7, #344]	; 0x158
 810c42a:	ed87 7b58 	vstr	d7, [r7, #352]	; 0x160
	char data[256]; //Random size, check this
	int size = sprintf((char *)data, "Acc : ");
 810c42e:	f107 0308 	add.w	r3, r7, #8
 810c432:	4a12      	ldr	r2, [pc, #72]	; (810c47c <_ZN9IMUThread4loopEv+0xf4>)
 810c434:	e892 0003 	ldmia.w	r2, {r0, r1}
 810c438:	6018      	str	r0, [r3, #0]
 810c43a:	3304      	adds	r3, #4
 810c43c:	8019      	strh	r1, [r3, #0]
 810c43e:	3302      	adds	r3, #2
 810c440:	0c0a      	lsrs	r2, r1, #16
 810c442:	701a      	strb	r2, [r3, #0]
 810c444:	2306      	movs	r3, #6
 810c446:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
	printToUart(huart, (uint8_t*)data, size);
 810c44a:	1d3b      	adds	r3, r7, #4
 810c44c:	681b      	ldr	r3, [r3, #0]
 810c44e:	68db      	ldr	r3, [r3, #12]
 810c450:	f107 0108 	add.w	r1, r7, #8
 810c454:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 810c458:	4618      	mov	r0, r3
 810c45a:	f7fe fe47 	bl	810b0ec <_Z11printToUartP20__UART_HandleTypeDefPhi>
	writeToRtosBuffer(imuData); //envoyer à un autre thread pour etre envoyé par ethernet
 810c45e:	f507 7284 	add.w	r2, r7, #264	; 0x108
 810c462:	1d3b      	adds	r3, r7, #4
 810c464:	4611      	mov	r1, r2
 810c466:	6818      	ldr	r0, [r3, #0]
 810c468:	f000 f80a 	bl	810c480 <_ZN9IMUThread17writeToRtosBufferEP15bno055_vector_t>
	osDelay(100);
 810c46c:	2064      	movs	r0, #100	; 0x64
 810c46e:	f7fc fa11 	bl	8108894 <osDelay>
}
 810c472:	bf00      	nop
 810c474:	f507 77b8 	add.w	r7, r7, #368	; 0x170
 810c478:	46bd      	mov	sp, r7
 810c47a:	bd80      	pop	{r7, pc}
 810c47c:	0810f13c 	.word	0x0810f13c

0810c480 <_ZN9IMUThread17writeToRtosBufferEP15bno055_vector_t>:

void IMUThread::writeToRtosBuffer(bno055_vector_t imuData[]){
 810c480:	b480      	push	{r7}
 810c482:	b083      	sub	sp, #12
 810c484:	af00      	add	r7, sp, #0
 810c486:	6078      	str	r0, [r7, #4]
 810c488:	6039      	str	r1, [r7, #0]


}
 810c48a:	bf00      	nop
 810c48c:	370c      	adds	r7, #12
 810c48e:	46bd      	mov	sp, r7
 810c490:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c494:	4770      	bx	lr

0810c496 <_Znwj>:
#define LANG_OPERATORS_H_

#include "cmsis_os.h"
#include <stdint.h>

void * operator new(size_t size) {
 810c496:	b580      	push	{r7, lr}
 810c498:	b082      	sub	sp, #8
 810c49a:	af00      	add	r7, sp, #0
 810c49c:	6078      	str	r0, [r7, #4]
    return pvPortMalloc(size);
 810c49e:	6878      	ldr	r0, [r7, #4]
 810c4a0:	f7fe fc4e 	bl	810ad40 <pvPortMalloc>
 810c4a4:	4603      	mov	r3, r0
}
 810c4a6:	4618      	mov	r0, r3
 810c4a8:	3708      	adds	r7, #8
 810c4aa:	46bd      	mov	sp, r7
 810c4ac:	bd80      	pop	{r7, pc}
	...

0810c4b0 <_ZN14WatchdogThreadC1Ev>:

#include "../Thread.h"

class WatchdogThread : Thread {
public:
	WatchdogThread() : Thread("Watchdog") {}
 810c4b0:	b580      	push	{r7, lr}
 810c4b2:	b082      	sub	sp, #8
 810c4b4:	af00      	add	r7, sp, #0
 810c4b6:	6078      	str	r0, [r7, #4]
 810c4b8:	687b      	ldr	r3, [r7, #4]
 810c4ba:	4906      	ldr	r1, [pc, #24]	; (810c4d4 <_ZN14WatchdogThreadC1Ev+0x24>)
 810c4bc:	4618      	mov	r0, r3
 810c4be:	f000 f883 	bl	810c5c8 <_ZN6ThreadC1EPKc>
 810c4c2:	4a05      	ldr	r2, [pc, #20]	; (810c4d8 <_ZN14WatchdogThreadC1Ev+0x28>)
 810c4c4:	687b      	ldr	r3, [r7, #4]
 810c4c6:	601a      	str	r2, [r3, #0]
 810c4c8:	687b      	ldr	r3, [r7, #4]
 810c4ca:	4618      	mov	r0, r3
 810c4cc:	3708      	adds	r7, #8
 810c4ce:	46bd      	mov	sp, r7
 810c4d0:	bd80      	pop	{r7, pc}
 810c4d2:	bf00      	nop
 810c4d4:	0810f150 	.word	0x0810f150
 810c4d8:	0810f1a4 	.word	0x0810f1a4

0810c4dc <_ZN15BarometerThreadC1EP19__I2C_HandleTypeDefP20__UART_HandleTypeDef>:
#include "../Libraries/UartPrint.h"


class BarometerThread : Thread {
public:
	BarometerThread(I2C_HandleTypeDef* hi2c, UART_HandleTypeDef* huart) : Thread("Barometer"), bmp280(), hi2c(hi2c), huart(huart)  {}
 810c4dc:	b580      	push	{r7, lr}
 810c4de:	b084      	sub	sp, #16
 810c4e0:	af00      	add	r7, sp, #0
 810c4e2:	60f8      	str	r0, [r7, #12]
 810c4e4:	60b9      	str	r1, [r7, #8]
 810c4e6:	607a      	str	r2, [r7, #4]
 810c4e8:	68fb      	ldr	r3, [r7, #12]
 810c4ea:	490c      	ldr	r1, [pc, #48]	; (810c51c <_ZN15BarometerThreadC1EP19__I2C_HandleTypeDefP20__UART_HandleTypeDef+0x40>)
 810c4ec:	4618      	mov	r0, r3
 810c4ee:	f000 f86b 	bl	810c5c8 <_ZN6ThreadC1EPKc>
 810c4f2:	4a0b      	ldr	r2, [pc, #44]	; (810c520 <_ZN15BarometerThreadC1EP19__I2C_HandleTypeDefP20__UART_HandleTypeDef+0x44>)
 810c4f4:	68fb      	ldr	r3, [r7, #12]
 810c4f6:	601a      	str	r2, [r3, #0]
 810c4f8:	68fb      	ldr	r3, [r7, #12]
 810c4fa:	3308      	adds	r3, #8
 810c4fc:	2234      	movs	r2, #52	; 0x34
 810c4fe:	2100      	movs	r1, #0
 810c500:	4618      	mov	r0, r3
 810c502:	f000 f8f8 	bl	810c6f6 <memset>
 810c506:	68fb      	ldr	r3, [r7, #12]
 810c508:	68ba      	ldr	r2, [r7, #8]
 810c50a:	63da      	str	r2, [r3, #60]	; 0x3c
 810c50c:	68fb      	ldr	r3, [r7, #12]
 810c50e:	687a      	ldr	r2, [r7, #4]
 810c510:	641a      	str	r2, [r3, #64]	; 0x40
 810c512:	68fb      	ldr	r3, [r7, #12]
 810c514:	4618      	mov	r0, r3
 810c516:	3710      	adds	r7, #16
 810c518:	46bd      	mov	sp, r7
 810c51a:	bd80      	pop	{r7, pc}
 810c51c:	0810f15c 	.word	0x0810f15c
 810c520:	0810f1b4 	.word	0x0810f1b4

0810c524 <_ZN9IMUThreadC1EP19__I2C_HandleTypeDefP20__UART_HandleTypeDef>:
#include "../Libraries/bno055_stm32.h"
#include "../Libraries/bno055.h"

class IMUThread : Thread {
public:
	IMUThread(I2C_HandleTypeDef* hi2c, UART_HandleTypeDef* huart) : Thread("IMU"), hi2c(hi2c), huart(huart) {}
 810c524:	b580      	push	{r7, lr}
 810c526:	b084      	sub	sp, #16
 810c528:	af00      	add	r7, sp, #0
 810c52a:	60f8      	str	r0, [r7, #12]
 810c52c:	60b9      	str	r1, [r7, #8]
 810c52e:	607a      	str	r2, [r7, #4]
 810c530:	68fb      	ldr	r3, [r7, #12]
 810c532:	4909      	ldr	r1, [pc, #36]	; (810c558 <_ZN9IMUThreadC1EP19__I2C_HandleTypeDefP20__UART_HandleTypeDef+0x34>)
 810c534:	4618      	mov	r0, r3
 810c536:	f000 f847 	bl	810c5c8 <_ZN6ThreadC1EPKc>
 810c53a:	4a08      	ldr	r2, [pc, #32]	; (810c55c <_ZN9IMUThreadC1EP19__I2C_HandleTypeDefP20__UART_HandleTypeDef+0x38>)
 810c53c:	68fb      	ldr	r3, [r7, #12]
 810c53e:	601a      	str	r2, [r3, #0]
 810c540:	68fb      	ldr	r3, [r7, #12]
 810c542:	68ba      	ldr	r2, [r7, #8]
 810c544:	609a      	str	r2, [r3, #8]
 810c546:	68fb      	ldr	r3, [r7, #12]
 810c548:	687a      	ldr	r2, [r7, #4]
 810c54a:	60da      	str	r2, [r3, #12]
 810c54c:	68fb      	ldr	r3, [r7, #12]
 810c54e:	4618      	mov	r0, r3
 810c550:	3710      	adds	r7, #16
 810c552:	46bd      	mov	sp, r7
 810c554:	bd80      	pop	{r7, pc}
 810c556:	bf00      	nop
 810c558:	0810f168 	.word	0x0810f168
 810c55c:	0810f1c4 	.word	0x0810f1c4

0810c560 <initCortexM4>:

#include "Misc/WatchdogThread.h"
#include "Sensors/Barometer.h"
#include "Sensors/IMU.h"

void initCortexM4() {
 810c560:	b580      	push	{r7, lr}
 810c562:	af00      	add	r7, sp, #0
	new WatchdogThread();
 810c564:	2008      	movs	r0, #8
 810c566:	f7ff ff96 	bl	810c496 <_Znwj>
 810c56a:	4603      	mov	r3, r0
 810c56c:	4618      	mov	r0, r3
 810c56e:	f7ff ff9f 	bl	810c4b0 <_ZN14WatchdogThreadC1Ev>
	new IMUThread(&hi2c1, &huart3);
 810c572:	2010      	movs	r0, #16
 810c574:	f7ff ff8f 	bl	810c496 <_Znwj>
 810c578:	4603      	mov	r3, r0
 810c57a:	4a08      	ldr	r2, [pc, #32]	; (810c59c <initCortexM4+0x3c>)
 810c57c:	4908      	ldr	r1, [pc, #32]	; (810c5a0 <initCortexM4+0x40>)
 810c57e:	4618      	mov	r0, r3
 810c580:	f7ff ffd0 	bl	810c524 <_ZN9IMUThreadC1EP19__I2C_HandleTypeDefP20__UART_HandleTypeDef>
	new BarometerThread(&hi2c1, &huart3);
 810c584:	2044      	movs	r0, #68	; 0x44
 810c586:	f7ff ff86 	bl	810c496 <_Znwj>
 810c58a:	4603      	mov	r3, r0
 810c58c:	4a03      	ldr	r2, [pc, #12]	; (810c59c <initCortexM4+0x3c>)
 810c58e:	4904      	ldr	r1, [pc, #16]	; (810c5a0 <initCortexM4+0x40>)
 810c590:	4618      	mov	r0, r3
 810c592:	f7ff ffa3 	bl	810c4dc <_ZN15BarometerThreadC1EP19__I2C_HandleTypeDefP20__UART_HandleTypeDef>
}
 810c596:	bf00      	nop
 810c598:	bd80      	pop	{r7, pc}
 810c59a:	bf00      	nop
 810c59c:	10004f54 	.word	0x10004f54
 810c5a0:	10004c34 	.word	0x10004c34

0810c5a4 <_Z10__task_runPv>:
#include "Thread.h"

#define DEFAULT_STACK_SIZE (512 * 4)


void __task_run(void* arg) {
 810c5a4:	b580      	push	{r7, lr}
 810c5a6:	b084      	sub	sp, #16
 810c5a8:	af00      	add	r7, sp, #0
 810c5aa:	6078      	str	r0, [r7, #4]
	Thread* thread = (Thread*) arg;
 810c5ac:	687b      	ldr	r3, [r7, #4]
 810c5ae:	60fb      	str	r3, [r7, #12]

	thread->init();
 810c5b0:	68fb      	ldr	r3, [r7, #12]
 810c5b2:	681b      	ldr	r3, [r3, #0]
 810c5b4:	681b      	ldr	r3, [r3, #0]
 810c5b6:	68f8      	ldr	r0, [r7, #12]
 810c5b8:	4798      	blx	r3

	while(true) {
		thread->loop();
 810c5ba:	68fb      	ldr	r3, [r7, #12]
 810c5bc:	681b      	ldr	r3, [r3, #0]
 810c5be:	3304      	adds	r3, #4
 810c5c0:	681b      	ldr	r3, [r3, #0]
 810c5c2:	68f8      	ldr	r0, [r7, #12]
 810c5c4:	4798      	blx	r3
 810c5c6:	e7f8      	b.n	810c5ba <_Z10__task_runPv+0x16>

0810c5c8 <_ZN6ThreadC1EPKc>:
	}
}

Thread::Thread(const char* name) : Thread(name, (osPriority_t) osPriorityNormal) {
 810c5c8:	b580      	push	{r7, lr}
 810c5ca:	b082      	sub	sp, #8
 810c5cc:	af00      	add	r7, sp, #0
 810c5ce:	6078      	str	r0, [r7, #4]
 810c5d0:	6039      	str	r1, [r7, #0]
 810c5d2:	2218      	movs	r2, #24
 810c5d4:	6839      	ldr	r1, [r7, #0]
 810c5d6:	6878      	ldr	r0, [r7, #4]
 810c5d8:	f000 f805 	bl	810c5e6 <_ZN6ThreadC1EPKc12osPriority_t>
	;
}
 810c5dc:	687b      	ldr	r3, [r7, #4]
 810c5de:	4618      	mov	r0, r3
 810c5e0:	3708      	adds	r7, #8
 810c5e2:	46bd      	mov	sp, r7
 810c5e4:	bd80      	pop	{r7, pc}

0810c5e6 <_ZN6ThreadC1EPKc12osPriority_t>:

Thread::Thread(const char* name, osPriority_t priority) : Thread(name, priority, DEFAULT_STACK_SIZE) {
 810c5e6:	b580      	push	{r7, lr}
 810c5e8:	b084      	sub	sp, #16
 810c5ea:	af00      	add	r7, sp, #0
 810c5ec:	60f8      	str	r0, [r7, #12]
 810c5ee:	60b9      	str	r1, [r7, #8]
 810c5f0:	607a      	str	r2, [r7, #4]
 810c5f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810c5f6:	687a      	ldr	r2, [r7, #4]
 810c5f8:	68b9      	ldr	r1, [r7, #8]
 810c5fa:	68f8      	ldr	r0, [r7, #12]
 810c5fc:	f000 f806 	bl	810c60c <_ZN6ThreadC1EPKc12osPriority_tm>
	;
}
 810c600:	68fb      	ldr	r3, [r7, #12]
 810c602:	4618      	mov	r0, r3
 810c604:	3710      	adds	r7, #16
 810c606:	46bd      	mov	sp, r7
 810c608:	bd80      	pop	{r7, pc}
	...

0810c60c <_ZN6ThreadC1EPKc12osPriority_tm>:

Thread::Thread(const char* name, uint32_t stackSize) : Thread(name, (osPriority_t) osPriorityNormal, stackSize) {
	;
}

Thread::Thread(const char* name, osPriority_t priority, uint32_t stackSize) {
 810c60c:	b580      	push	{r7, lr}
 810c60e:	b08e      	sub	sp, #56	; 0x38
 810c610:	af00      	add	r7, sp, #0
 810c612:	60f8      	str	r0, [r7, #12]
 810c614:	60b9      	str	r1, [r7, #8]
 810c616:	607a      	str	r2, [r7, #4]
 810c618:	603b      	str	r3, [r7, #0]
 810c61a:	4a0c      	ldr	r2, [pc, #48]	; (810c64c <_ZN6ThreadC1EPKc12osPriority_tm+0x40>)
 810c61c:	68fb      	ldr	r3, [r7, #12]
 810c61e:	601a      	str	r2, [r3, #0]
	osThreadAttr_t attributes;

	attributes.name = name;
 810c620:	68bb      	ldr	r3, [r7, #8]
 810c622:	617b      	str	r3, [r7, #20]
	attributes.priority = priority;
 810c624:	687b      	ldr	r3, [r7, #4]
 810c626:	62fb      	str	r3, [r7, #44]	; 0x2c
	attributes.stack_size = stackSize;
 810c628:	683b      	ldr	r3, [r7, #0]
 810c62a:	62bb      	str	r3, [r7, #40]	; 0x28

	this->handle = osThreadNew(__task_run, this, &attributes);
 810c62c:	f107 0314 	add.w	r3, r7, #20
 810c630:	461a      	mov	r2, r3
 810c632:	68f9      	ldr	r1, [r7, #12]
 810c634:	4806      	ldr	r0, [pc, #24]	; (810c650 <_ZN6ThreadC1EPKc12osPriority_tm+0x44>)
 810c636:	f7fc f887 	bl	8108748 <osThreadNew>
 810c63a:	4602      	mov	r2, r0
 810c63c:	68fb      	ldr	r3, [r7, #12]
 810c63e:	605a      	str	r2, [r3, #4]
}
 810c640:	68fb      	ldr	r3, [r7, #12]
 810c642:	4618      	mov	r0, r3
 810c644:	3738      	adds	r7, #56	; 0x38
 810c646:	46bd      	mov	sp, r7
 810c648:	bd80      	pop	{r7, pc}
 810c64a:	bf00      	nop
 810c64c:	0810f1d4 	.word	0x0810f1d4
 810c650:	0810c5a5 	.word	0x0810c5a5

0810c654 <__cxa_pure_virtual>:
 810c654:	b508      	push	{r3, lr}
 810c656:	f000 f80d 	bl	810c674 <_ZSt9terminatev>

0810c65a <_ZN10__cxxabiv111__terminateEPFvvE>:
 810c65a:	b508      	push	{r3, lr}
 810c65c:	4780      	blx	r0
 810c65e:	f000 f80e 	bl	810c67e <abort>
	...

0810c664 <_ZSt13get_terminatev>:
 810c664:	4b02      	ldr	r3, [pc, #8]	; (810c670 <_ZSt13get_terminatev+0xc>)
 810c666:	6818      	ldr	r0, [r3, #0]
 810c668:	f3bf 8f5b 	dmb	ish
 810c66c:	4770      	bx	lr
 810c66e:	bf00      	nop
 810c670:	10000038 	.word	0x10000038

0810c674 <_ZSt9terminatev>:
 810c674:	b508      	push	{r3, lr}
 810c676:	f7ff fff5 	bl	810c664 <_ZSt13get_terminatev>
 810c67a:	f7ff ffee 	bl	810c65a <_ZN10__cxxabiv111__terminateEPFvvE>

0810c67e <abort>:
 810c67e:	b508      	push	{r3, lr}
 810c680:	2006      	movs	r0, #6
 810c682:	f000 fd41 	bl	810d108 <raise>
 810c686:	2001      	movs	r0, #1
 810c688:	f7f5 fa7e 	bl	8101b88 <_exit>

0810c68c <__errno>:
 810c68c:	4b01      	ldr	r3, [pc, #4]	; (810c694 <__errno+0x8>)
 810c68e:	6818      	ldr	r0, [r3, #0]
 810c690:	4770      	bx	lr
 810c692:	bf00      	nop
 810c694:	1000003c 	.word	0x1000003c

0810c698 <__libc_init_array>:
 810c698:	b570      	push	{r4, r5, r6, lr}
 810c69a:	4e0d      	ldr	r6, [pc, #52]	; (810c6d0 <__libc_init_array+0x38>)
 810c69c:	4c0d      	ldr	r4, [pc, #52]	; (810c6d4 <__libc_init_array+0x3c>)
 810c69e:	1ba4      	subs	r4, r4, r6
 810c6a0:	10a4      	asrs	r4, r4, #2
 810c6a2:	2500      	movs	r5, #0
 810c6a4:	42a5      	cmp	r5, r4
 810c6a6:	d109      	bne.n	810c6bc <__libc_init_array+0x24>
 810c6a8:	4e0b      	ldr	r6, [pc, #44]	; (810c6d8 <__libc_init_array+0x40>)
 810c6aa:	4c0c      	ldr	r4, [pc, #48]	; (810c6dc <__libc_init_array+0x44>)
 810c6ac:	f002 fbf0 	bl	810ee90 <_init>
 810c6b0:	1ba4      	subs	r4, r4, r6
 810c6b2:	10a4      	asrs	r4, r4, #2
 810c6b4:	2500      	movs	r5, #0
 810c6b6:	42a5      	cmp	r5, r4
 810c6b8:	d105      	bne.n	810c6c6 <__libc_init_array+0x2e>
 810c6ba:	bd70      	pop	{r4, r5, r6, pc}
 810c6bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 810c6c0:	4798      	blx	r3
 810c6c2:	3501      	adds	r5, #1
 810c6c4:	e7ee      	b.n	810c6a4 <__libc_init_array+0xc>
 810c6c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 810c6ca:	4798      	blx	r3
 810c6cc:	3501      	adds	r5, #1
 810c6ce:	e7f2      	b.n	810c6b6 <__libc_init_array+0x1e>
 810c6d0:	0810f4a8 	.word	0x0810f4a8
 810c6d4:	0810f4a8 	.word	0x0810f4a8
 810c6d8:	0810f4a8 	.word	0x0810f4a8
 810c6dc:	0810f4ac 	.word	0x0810f4ac

0810c6e0 <memcpy>:
 810c6e0:	b510      	push	{r4, lr}
 810c6e2:	1e43      	subs	r3, r0, #1
 810c6e4:	440a      	add	r2, r1
 810c6e6:	4291      	cmp	r1, r2
 810c6e8:	d100      	bne.n	810c6ec <memcpy+0xc>
 810c6ea:	bd10      	pop	{r4, pc}
 810c6ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 810c6f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 810c6f4:	e7f7      	b.n	810c6e6 <memcpy+0x6>

0810c6f6 <memset>:
 810c6f6:	4402      	add	r2, r0
 810c6f8:	4603      	mov	r3, r0
 810c6fa:	4293      	cmp	r3, r2
 810c6fc:	d100      	bne.n	810c700 <memset+0xa>
 810c6fe:	4770      	bx	lr
 810c700:	f803 1b01 	strb.w	r1, [r3], #1
 810c704:	e7f9      	b.n	810c6fa <memset+0x4>

0810c706 <__cvt>:
 810c706:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810c70a:	ec55 4b10 	vmov	r4, r5, d0
 810c70e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 810c710:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 810c714:	2d00      	cmp	r5, #0
 810c716:	460e      	mov	r6, r1
 810c718:	4691      	mov	r9, r2
 810c71a:	4619      	mov	r1, r3
 810c71c:	bfb8      	it	lt
 810c71e:	4622      	movlt	r2, r4
 810c720:	462b      	mov	r3, r5
 810c722:	f027 0720 	bic.w	r7, r7, #32
 810c726:	bfbb      	ittet	lt
 810c728:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 810c72c:	461d      	movlt	r5, r3
 810c72e:	2300      	movge	r3, #0
 810c730:	232d      	movlt	r3, #45	; 0x2d
 810c732:	bfb8      	it	lt
 810c734:	4614      	movlt	r4, r2
 810c736:	2f46      	cmp	r7, #70	; 0x46
 810c738:	700b      	strb	r3, [r1, #0]
 810c73a:	d004      	beq.n	810c746 <__cvt+0x40>
 810c73c:	2f45      	cmp	r7, #69	; 0x45
 810c73e:	d100      	bne.n	810c742 <__cvt+0x3c>
 810c740:	3601      	adds	r6, #1
 810c742:	2102      	movs	r1, #2
 810c744:	e000      	b.n	810c748 <__cvt+0x42>
 810c746:	2103      	movs	r1, #3
 810c748:	ab03      	add	r3, sp, #12
 810c74a:	9301      	str	r3, [sp, #4]
 810c74c:	ab02      	add	r3, sp, #8
 810c74e:	9300      	str	r3, [sp, #0]
 810c750:	4632      	mov	r2, r6
 810c752:	4653      	mov	r3, sl
 810c754:	ec45 4b10 	vmov	d0, r4, r5
 810c758:	f000 fe3e 	bl	810d3d8 <_dtoa_r>
 810c75c:	2f47      	cmp	r7, #71	; 0x47
 810c75e:	4680      	mov	r8, r0
 810c760:	d102      	bne.n	810c768 <__cvt+0x62>
 810c762:	f019 0f01 	tst.w	r9, #1
 810c766:	d026      	beq.n	810c7b6 <__cvt+0xb0>
 810c768:	2f46      	cmp	r7, #70	; 0x46
 810c76a:	eb08 0906 	add.w	r9, r8, r6
 810c76e:	d111      	bne.n	810c794 <__cvt+0x8e>
 810c770:	f898 3000 	ldrb.w	r3, [r8]
 810c774:	2b30      	cmp	r3, #48	; 0x30
 810c776:	d10a      	bne.n	810c78e <__cvt+0x88>
 810c778:	2200      	movs	r2, #0
 810c77a:	2300      	movs	r3, #0
 810c77c:	4620      	mov	r0, r4
 810c77e:	4629      	mov	r1, r5
 810c780:	f7f4 fa2a 	bl	8100bd8 <__aeabi_dcmpeq>
 810c784:	b918      	cbnz	r0, 810c78e <__cvt+0x88>
 810c786:	f1c6 0601 	rsb	r6, r6, #1
 810c78a:	f8ca 6000 	str.w	r6, [sl]
 810c78e:	f8da 3000 	ldr.w	r3, [sl]
 810c792:	4499      	add	r9, r3
 810c794:	2200      	movs	r2, #0
 810c796:	2300      	movs	r3, #0
 810c798:	4620      	mov	r0, r4
 810c79a:	4629      	mov	r1, r5
 810c79c:	f7f4 fa1c 	bl	8100bd8 <__aeabi_dcmpeq>
 810c7a0:	b938      	cbnz	r0, 810c7b2 <__cvt+0xac>
 810c7a2:	2230      	movs	r2, #48	; 0x30
 810c7a4:	9b03      	ldr	r3, [sp, #12]
 810c7a6:	454b      	cmp	r3, r9
 810c7a8:	d205      	bcs.n	810c7b6 <__cvt+0xb0>
 810c7aa:	1c59      	adds	r1, r3, #1
 810c7ac:	9103      	str	r1, [sp, #12]
 810c7ae:	701a      	strb	r2, [r3, #0]
 810c7b0:	e7f8      	b.n	810c7a4 <__cvt+0x9e>
 810c7b2:	f8cd 900c 	str.w	r9, [sp, #12]
 810c7b6:	9b03      	ldr	r3, [sp, #12]
 810c7b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810c7ba:	eba3 0308 	sub.w	r3, r3, r8
 810c7be:	4640      	mov	r0, r8
 810c7c0:	6013      	str	r3, [r2, #0]
 810c7c2:	b004      	add	sp, #16
 810c7c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0810c7c8 <__exponent>:
 810c7c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810c7ca:	2900      	cmp	r1, #0
 810c7cc:	4604      	mov	r4, r0
 810c7ce:	bfba      	itte	lt
 810c7d0:	4249      	neglt	r1, r1
 810c7d2:	232d      	movlt	r3, #45	; 0x2d
 810c7d4:	232b      	movge	r3, #43	; 0x2b
 810c7d6:	2909      	cmp	r1, #9
 810c7d8:	f804 2b02 	strb.w	r2, [r4], #2
 810c7dc:	7043      	strb	r3, [r0, #1]
 810c7de:	dd20      	ble.n	810c822 <__exponent+0x5a>
 810c7e0:	f10d 0307 	add.w	r3, sp, #7
 810c7e4:	461f      	mov	r7, r3
 810c7e6:	260a      	movs	r6, #10
 810c7e8:	fb91 f5f6 	sdiv	r5, r1, r6
 810c7ec:	fb06 1115 	mls	r1, r6, r5, r1
 810c7f0:	3130      	adds	r1, #48	; 0x30
 810c7f2:	2d09      	cmp	r5, #9
 810c7f4:	f803 1c01 	strb.w	r1, [r3, #-1]
 810c7f8:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 810c7fc:	4629      	mov	r1, r5
 810c7fe:	dc09      	bgt.n	810c814 <__exponent+0x4c>
 810c800:	3130      	adds	r1, #48	; 0x30
 810c802:	3b02      	subs	r3, #2
 810c804:	f802 1c01 	strb.w	r1, [r2, #-1]
 810c808:	42bb      	cmp	r3, r7
 810c80a:	4622      	mov	r2, r4
 810c80c:	d304      	bcc.n	810c818 <__exponent+0x50>
 810c80e:	1a10      	subs	r0, r2, r0
 810c810:	b003      	add	sp, #12
 810c812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810c814:	4613      	mov	r3, r2
 810c816:	e7e7      	b.n	810c7e8 <__exponent+0x20>
 810c818:	f813 2b01 	ldrb.w	r2, [r3], #1
 810c81c:	f804 2b01 	strb.w	r2, [r4], #1
 810c820:	e7f2      	b.n	810c808 <__exponent+0x40>
 810c822:	2330      	movs	r3, #48	; 0x30
 810c824:	4419      	add	r1, r3
 810c826:	7083      	strb	r3, [r0, #2]
 810c828:	1d02      	adds	r2, r0, #4
 810c82a:	70c1      	strb	r1, [r0, #3]
 810c82c:	e7ef      	b.n	810c80e <__exponent+0x46>
	...

0810c830 <_printf_float>:
 810c830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c834:	b08d      	sub	sp, #52	; 0x34
 810c836:	460c      	mov	r4, r1
 810c838:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 810c83c:	4616      	mov	r6, r2
 810c83e:	461f      	mov	r7, r3
 810c840:	4605      	mov	r5, r0
 810c842:	f001 fcfb 	bl	810e23c <_localeconv_r>
 810c846:	6803      	ldr	r3, [r0, #0]
 810c848:	9304      	str	r3, [sp, #16]
 810c84a:	4618      	mov	r0, r3
 810c84c:	f7f3 fd48 	bl	81002e0 <strlen>
 810c850:	2300      	movs	r3, #0
 810c852:	930a      	str	r3, [sp, #40]	; 0x28
 810c854:	f8d8 3000 	ldr.w	r3, [r8]
 810c858:	9005      	str	r0, [sp, #20]
 810c85a:	3307      	adds	r3, #7
 810c85c:	f023 0307 	bic.w	r3, r3, #7
 810c860:	f103 0208 	add.w	r2, r3, #8
 810c864:	f894 a018 	ldrb.w	sl, [r4, #24]
 810c868:	f8d4 b000 	ldr.w	fp, [r4]
 810c86c:	f8c8 2000 	str.w	r2, [r8]
 810c870:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c874:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 810c878:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 810c87c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810c880:	9307      	str	r3, [sp, #28]
 810c882:	f8cd 8018 	str.w	r8, [sp, #24]
 810c886:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810c88a:	4ba7      	ldr	r3, [pc, #668]	; (810cb28 <_printf_float+0x2f8>)
 810c88c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810c890:	f7f4 f9d4 	bl	8100c3c <__aeabi_dcmpun>
 810c894:	bb70      	cbnz	r0, 810c8f4 <_printf_float+0xc4>
 810c896:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810c89a:	4ba3      	ldr	r3, [pc, #652]	; (810cb28 <_printf_float+0x2f8>)
 810c89c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810c8a0:	f7f4 f9ae 	bl	8100c00 <__aeabi_dcmple>
 810c8a4:	bb30      	cbnz	r0, 810c8f4 <_printf_float+0xc4>
 810c8a6:	2200      	movs	r2, #0
 810c8a8:	2300      	movs	r3, #0
 810c8aa:	4640      	mov	r0, r8
 810c8ac:	4649      	mov	r1, r9
 810c8ae:	f7f4 f99d 	bl	8100bec <__aeabi_dcmplt>
 810c8b2:	b110      	cbz	r0, 810c8ba <_printf_float+0x8a>
 810c8b4:	232d      	movs	r3, #45	; 0x2d
 810c8b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810c8ba:	4a9c      	ldr	r2, [pc, #624]	; (810cb2c <_printf_float+0x2fc>)
 810c8bc:	4b9c      	ldr	r3, [pc, #624]	; (810cb30 <_printf_float+0x300>)
 810c8be:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 810c8c2:	bf8c      	ite	hi
 810c8c4:	4690      	movhi	r8, r2
 810c8c6:	4698      	movls	r8, r3
 810c8c8:	2303      	movs	r3, #3
 810c8ca:	f02b 0204 	bic.w	r2, fp, #4
 810c8ce:	6123      	str	r3, [r4, #16]
 810c8d0:	6022      	str	r2, [r4, #0]
 810c8d2:	f04f 0900 	mov.w	r9, #0
 810c8d6:	9700      	str	r7, [sp, #0]
 810c8d8:	4633      	mov	r3, r6
 810c8da:	aa0b      	add	r2, sp, #44	; 0x2c
 810c8dc:	4621      	mov	r1, r4
 810c8de:	4628      	mov	r0, r5
 810c8e0:	f000 f9e6 	bl	810ccb0 <_printf_common>
 810c8e4:	3001      	adds	r0, #1
 810c8e6:	f040 808d 	bne.w	810ca04 <_printf_float+0x1d4>
 810c8ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810c8ee:	b00d      	add	sp, #52	; 0x34
 810c8f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c8f4:	4642      	mov	r2, r8
 810c8f6:	464b      	mov	r3, r9
 810c8f8:	4640      	mov	r0, r8
 810c8fa:	4649      	mov	r1, r9
 810c8fc:	f7f4 f99e 	bl	8100c3c <__aeabi_dcmpun>
 810c900:	b110      	cbz	r0, 810c908 <_printf_float+0xd8>
 810c902:	4a8c      	ldr	r2, [pc, #560]	; (810cb34 <_printf_float+0x304>)
 810c904:	4b8c      	ldr	r3, [pc, #560]	; (810cb38 <_printf_float+0x308>)
 810c906:	e7da      	b.n	810c8be <_printf_float+0x8e>
 810c908:	6861      	ldr	r1, [r4, #4]
 810c90a:	1c4b      	adds	r3, r1, #1
 810c90c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 810c910:	a80a      	add	r0, sp, #40	; 0x28
 810c912:	d13e      	bne.n	810c992 <_printf_float+0x162>
 810c914:	2306      	movs	r3, #6
 810c916:	6063      	str	r3, [r4, #4]
 810c918:	2300      	movs	r3, #0
 810c91a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 810c91e:	ab09      	add	r3, sp, #36	; 0x24
 810c920:	9300      	str	r3, [sp, #0]
 810c922:	ec49 8b10 	vmov	d0, r8, r9
 810c926:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 810c92a:	6022      	str	r2, [r4, #0]
 810c92c:	f8cd a004 	str.w	sl, [sp, #4]
 810c930:	6861      	ldr	r1, [r4, #4]
 810c932:	4628      	mov	r0, r5
 810c934:	f7ff fee7 	bl	810c706 <__cvt>
 810c938:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 810c93c:	2b47      	cmp	r3, #71	; 0x47
 810c93e:	4680      	mov	r8, r0
 810c940:	d109      	bne.n	810c956 <_printf_float+0x126>
 810c942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810c944:	1cd8      	adds	r0, r3, #3
 810c946:	db02      	blt.n	810c94e <_printf_float+0x11e>
 810c948:	6862      	ldr	r2, [r4, #4]
 810c94a:	4293      	cmp	r3, r2
 810c94c:	dd47      	ble.n	810c9de <_printf_float+0x1ae>
 810c94e:	f1aa 0a02 	sub.w	sl, sl, #2
 810c952:	fa5f fa8a 	uxtb.w	sl, sl
 810c956:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 810c95a:	9909      	ldr	r1, [sp, #36]	; 0x24
 810c95c:	d824      	bhi.n	810c9a8 <_printf_float+0x178>
 810c95e:	3901      	subs	r1, #1
 810c960:	4652      	mov	r2, sl
 810c962:	f104 0050 	add.w	r0, r4, #80	; 0x50
 810c966:	9109      	str	r1, [sp, #36]	; 0x24
 810c968:	f7ff ff2e 	bl	810c7c8 <__exponent>
 810c96c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810c96e:	1813      	adds	r3, r2, r0
 810c970:	2a01      	cmp	r2, #1
 810c972:	4681      	mov	r9, r0
 810c974:	6123      	str	r3, [r4, #16]
 810c976:	dc02      	bgt.n	810c97e <_printf_float+0x14e>
 810c978:	6822      	ldr	r2, [r4, #0]
 810c97a:	07d1      	lsls	r1, r2, #31
 810c97c:	d501      	bpl.n	810c982 <_printf_float+0x152>
 810c97e:	3301      	adds	r3, #1
 810c980:	6123      	str	r3, [r4, #16]
 810c982:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 810c986:	2b00      	cmp	r3, #0
 810c988:	d0a5      	beq.n	810c8d6 <_printf_float+0xa6>
 810c98a:	232d      	movs	r3, #45	; 0x2d
 810c98c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810c990:	e7a1      	b.n	810c8d6 <_printf_float+0xa6>
 810c992:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 810c996:	f000 8177 	beq.w	810cc88 <_printf_float+0x458>
 810c99a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 810c99e:	d1bb      	bne.n	810c918 <_printf_float+0xe8>
 810c9a0:	2900      	cmp	r1, #0
 810c9a2:	d1b9      	bne.n	810c918 <_printf_float+0xe8>
 810c9a4:	2301      	movs	r3, #1
 810c9a6:	e7b6      	b.n	810c916 <_printf_float+0xe6>
 810c9a8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 810c9ac:	d119      	bne.n	810c9e2 <_printf_float+0x1b2>
 810c9ae:	2900      	cmp	r1, #0
 810c9b0:	6863      	ldr	r3, [r4, #4]
 810c9b2:	dd0c      	ble.n	810c9ce <_printf_float+0x19e>
 810c9b4:	6121      	str	r1, [r4, #16]
 810c9b6:	b913      	cbnz	r3, 810c9be <_printf_float+0x18e>
 810c9b8:	6822      	ldr	r2, [r4, #0]
 810c9ba:	07d2      	lsls	r2, r2, #31
 810c9bc:	d502      	bpl.n	810c9c4 <_printf_float+0x194>
 810c9be:	3301      	adds	r3, #1
 810c9c0:	440b      	add	r3, r1
 810c9c2:	6123      	str	r3, [r4, #16]
 810c9c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810c9c6:	65a3      	str	r3, [r4, #88]	; 0x58
 810c9c8:	f04f 0900 	mov.w	r9, #0
 810c9cc:	e7d9      	b.n	810c982 <_printf_float+0x152>
 810c9ce:	b913      	cbnz	r3, 810c9d6 <_printf_float+0x1a6>
 810c9d0:	6822      	ldr	r2, [r4, #0]
 810c9d2:	07d0      	lsls	r0, r2, #31
 810c9d4:	d501      	bpl.n	810c9da <_printf_float+0x1aa>
 810c9d6:	3302      	adds	r3, #2
 810c9d8:	e7f3      	b.n	810c9c2 <_printf_float+0x192>
 810c9da:	2301      	movs	r3, #1
 810c9dc:	e7f1      	b.n	810c9c2 <_printf_float+0x192>
 810c9de:	f04f 0a67 	mov.w	sl, #103	; 0x67
 810c9e2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 810c9e6:	4293      	cmp	r3, r2
 810c9e8:	db05      	blt.n	810c9f6 <_printf_float+0x1c6>
 810c9ea:	6822      	ldr	r2, [r4, #0]
 810c9ec:	6123      	str	r3, [r4, #16]
 810c9ee:	07d1      	lsls	r1, r2, #31
 810c9f0:	d5e8      	bpl.n	810c9c4 <_printf_float+0x194>
 810c9f2:	3301      	adds	r3, #1
 810c9f4:	e7e5      	b.n	810c9c2 <_printf_float+0x192>
 810c9f6:	2b00      	cmp	r3, #0
 810c9f8:	bfd4      	ite	le
 810c9fa:	f1c3 0302 	rsble	r3, r3, #2
 810c9fe:	2301      	movgt	r3, #1
 810ca00:	4413      	add	r3, r2
 810ca02:	e7de      	b.n	810c9c2 <_printf_float+0x192>
 810ca04:	6823      	ldr	r3, [r4, #0]
 810ca06:	055a      	lsls	r2, r3, #21
 810ca08:	d407      	bmi.n	810ca1a <_printf_float+0x1ea>
 810ca0a:	6923      	ldr	r3, [r4, #16]
 810ca0c:	4642      	mov	r2, r8
 810ca0e:	4631      	mov	r1, r6
 810ca10:	4628      	mov	r0, r5
 810ca12:	47b8      	blx	r7
 810ca14:	3001      	adds	r0, #1
 810ca16:	d12b      	bne.n	810ca70 <_printf_float+0x240>
 810ca18:	e767      	b.n	810c8ea <_printf_float+0xba>
 810ca1a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 810ca1e:	f240 80dc 	bls.w	810cbda <_printf_float+0x3aa>
 810ca22:	2200      	movs	r2, #0
 810ca24:	2300      	movs	r3, #0
 810ca26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810ca2a:	f7f4 f8d5 	bl	8100bd8 <__aeabi_dcmpeq>
 810ca2e:	2800      	cmp	r0, #0
 810ca30:	d033      	beq.n	810ca9a <_printf_float+0x26a>
 810ca32:	2301      	movs	r3, #1
 810ca34:	4a41      	ldr	r2, [pc, #260]	; (810cb3c <_printf_float+0x30c>)
 810ca36:	4631      	mov	r1, r6
 810ca38:	4628      	mov	r0, r5
 810ca3a:	47b8      	blx	r7
 810ca3c:	3001      	adds	r0, #1
 810ca3e:	f43f af54 	beq.w	810c8ea <_printf_float+0xba>
 810ca42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810ca46:	429a      	cmp	r2, r3
 810ca48:	db02      	blt.n	810ca50 <_printf_float+0x220>
 810ca4a:	6823      	ldr	r3, [r4, #0]
 810ca4c:	07d8      	lsls	r0, r3, #31
 810ca4e:	d50f      	bpl.n	810ca70 <_printf_float+0x240>
 810ca50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810ca54:	4631      	mov	r1, r6
 810ca56:	4628      	mov	r0, r5
 810ca58:	47b8      	blx	r7
 810ca5a:	3001      	adds	r0, #1
 810ca5c:	f43f af45 	beq.w	810c8ea <_printf_float+0xba>
 810ca60:	f04f 0800 	mov.w	r8, #0
 810ca64:	f104 091a 	add.w	r9, r4, #26
 810ca68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810ca6a:	3b01      	subs	r3, #1
 810ca6c:	4543      	cmp	r3, r8
 810ca6e:	dc09      	bgt.n	810ca84 <_printf_float+0x254>
 810ca70:	6823      	ldr	r3, [r4, #0]
 810ca72:	079b      	lsls	r3, r3, #30
 810ca74:	f100 8103 	bmi.w	810cc7e <_printf_float+0x44e>
 810ca78:	68e0      	ldr	r0, [r4, #12]
 810ca7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810ca7c:	4298      	cmp	r0, r3
 810ca7e:	bfb8      	it	lt
 810ca80:	4618      	movlt	r0, r3
 810ca82:	e734      	b.n	810c8ee <_printf_float+0xbe>
 810ca84:	2301      	movs	r3, #1
 810ca86:	464a      	mov	r2, r9
 810ca88:	4631      	mov	r1, r6
 810ca8a:	4628      	mov	r0, r5
 810ca8c:	47b8      	blx	r7
 810ca8e:	3001      	adds	r0, #1
 810ca90:	f43f af2b 	beq.w	810c8ea <_printf_float+0xba>
 810ca94:	f108 0801 	add.w	r8, r8, #1
 810ca98:	e7e6      	b.n	810ca68 <_printf_float+0x238>
 810ca9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810ca9c:	2b00      	cmp	r3, #0
 810ca9e:	dc2b      	bgt.n	810caf8 <_printf_float+0x2c8>
 810caa0:	2301      	movs	r3, #1
 810caa2:	4a26      	ldr	r2, [pc, #152]	; (810cb3c <_printf_float+0x30c>)
 810caa4:	4631      	mov	r1, r6
 810caa6:	4628      	mov	r0, r5
 810caa8:	47b8      	blx	r7
 810caaa:	3001      	adds	r0, #1
 810caac:	f43f af1d 	beq.w	810c8ea <_printf_float+0xba>
 810cab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810cab2:	b923      	cbnz	r3, 810cabe <_printf_float+0x28e>
 810cab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810cab6:	b913      	cbnz	r3, 810cabe <_printf_float+0x28e>
 810cab8:	6823      	ldr	r3, [r4, #0]
 810caba:	07d9      	lsls	r1, r3, #31
 810cabc:	d5d8      	bpl.n	810ca70 <_printf_float+0x240>
 810cabe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810cac2:	4631      	mov	r1, r6
 810cac4:	4628      	mov	r0, r5
 810cac6:	47b8      	blx	r7
 810cac8:	3001      	adds	r0, #1
 810caca:	f43f af0e 	beq.w	810c8ea <_printf_float+0xba>
 810cace:	f04f 0900 	mov.w	r9, #0
 810cad2:	f104 0a1a 	add.w	sl, r4, #26
 810cad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810cad8:	425b      	negs	r3, r3
 810cada:	454b      	cmp	r3, r9
 810cadc:	dc01      	bgt.n	810cae2 <_printf_float+0x2b2>
 810cade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810cae0:	e794      	b.n	810ca0c <_printf_float+0x1dc>
 810cae2:	2301      	movs	r3, #1
 810cae4:	4652      	mov	r2, sl
 810cae6:	4631      	mov	r1, r6
 810cae8:	4628      	mov	r0, r5
 810caea:	47b8      	blx	r7
 810caec:	3001      	adds	r0, #1
 810caee:	f43f aefc 	beq.w	810c8ea <_printf_float+0xba>
 810caf2:	f109 0901 	add.w	r9, r9, #1
 810caf6:	e7ee      	b.n	810cad6 <_printf_float+0x2a6>
 810caf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810cafa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 810cafc:	429a      	cmp	r2, r3
 810cafe:	bfa8      	it	ge
 810cb00:	461a      	movge	r2, r3
 810cb02:	2a00      	cmp	r2, #0
 810cb04:	4691      	mov	r9, r2
 810cb06:	dd07      	ble.n	810cb18 <_printf_float+0x2e8>
 810cb08:	4613      	mov	r3, r2
 810cb0a:	4631      	mov	r1, r6
 810cb0c:	4642      	mov	r2, r8
 810cb0e:	4628      	mov	r0, r5
 810cb10:	47b8      	blx	r7
 810cb12:	3001      	adds	r0, #1
 810cb14:	f43f aee9 	beq.w	810c8ea <_printf_float+0xba>
 810cb18:	f104 031a 	add.w	r3, r4, #26
 810cb1c:	f04f 0b00 	mov.w	fp, #0
 810cb20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810cb24:	9306      	str	r3, [sp, #24]
 810cb26:	e015      	b.n	810cb54 <_printf_float+0x324>
 810cb28:	7fefffff 	.word	0x7fefffff
 810cb2c:	0810f1e4 	.word	0x0810f1e4
 810cb30:	0810f1e0 	.word	0x0810f1e0
 810cb34:	0810f1ec 	.word	0x0810f1ec
 810cb38:	0810f1e8 	.word	0x0810f1e8
 810cb3c:	0810f1f0 	.word	0x0810f1f0
 810cb40:	2301      	movs	r3, #1
 810cb42:	9a06      	ldr	r2, [sp, #24]
 810cb44:	4631      	mov	r1, r6
 810cb46:	4628      	mov	r0, r5
 810cb48:	47b8      	blx	r7
 810cb4a:	3001      	adds	r0, #1
 810cb4c:	f43f aecd 	beq.w	810c8ea <_printf_float+0xba>
 810cb50:	f10b 0b01 	add.w	fp, fp, #1
 810cb54:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 810cb58:	ebaa 0309 	sub.w	r3, sl, r9
 810cb5c:	455b      	cmp	r3, fp
 810cb5e:	dcef      	bgt.n	810cb40 <_printf_float+0x310>
 810cb60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810cb64:	429a      	cmp	r2, r3
 810cb66:	44d0      	add	r8, sl
 810cb68:	db15      	blt.n	810cb96 <_printf_float+0x366>
 810cb6a:	6823      	ldr	r3, [r4, #0]
 810cb6c:	07da      	lsls	r2, r3, #31
 810cb6e:	d412      	bmi.n	810cb96 <_printf_float+0x366>
 810cb70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810cb72:	9909      	ldr	r1, [sp, #36]	; 0x24
 810cb74:	eba3 020a 	sub.w	r2, r3, sl
 810cb78:	eba3 0a01 	sub.w	sl, r3, r1
 810cb7c:	4592      	cmp	sl, r2
 810cb7e:	bfa8      	it	ge
 810cb80:	4692      	movge	sl, r2
 810cb82:	f1ba 0f00 	cmp.w	sl, #0
 810cb86:	dc0e      	bgt.n	810cba6 <_printf_float+0x376>
 810cb88:	f04f 0800 	mov.w	r8, #0
 810cb8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810cb90:	f104 091a 	add.w	r9, r4, #26
 810cb94:	e019      	b.n	810cbca <_printf_float+0x39a>
 810cb96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810cb9a:	4631      	mov	r1, r6
 810cb9c:	4628      	mov	r0, r5
 810cb9e:	47b8      	blx	r7
 810cba0:	3001      	adds	r0, #1
 810cba2:	d1e5      	bne.n	810cb70 <_printf_float+0x340>
 810cba4:	e6a1      	b.n	810c8ea <_printf_float+0xba>
 810cba6:	4653      	mov	r3, sl
 810cba8:	4642      	mov	r2, r8
 810cbaa:	4631      	mov	r1, r6
 810cbac:	4628      	mov	r0, r5
 810cbae:	47b8      	blx	r7
 810cbb0:	3001      	adds	r0, #1
 810cbb2:	d1e9      	bne.n	810cb88 <_printf_float+0x358>
 810cbb4:	e699      	b.n	810c8ea <_printf_float+0xba>
 810cbb6:	2301      	movs	r3, #1
 810cbb8:	464a      	mov	r2, r9
 810cbba:	4631      	mov	r1, r6
 810cbbc:	4628      	mov	r0, r5
 810cbbe:	47b8      	blx	r7
 810cbc0:	3001      	adds	r0, #1
 810cbc2:	f43f ae92 	beq.w	810c8ea <_printf_float+0xba>
 810cbc6:	f108 0801 	add.w	r8, r8, #1
 810cbca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810cbce:	1a9b      	subs	r3, r3, r2
 810cbd0:	eba3 030a 	sub.w	r3, r3, sl
 810cbd4:	4543      	cmp	r3, r8
 810cbd6:	dcee      	bgt.n	810cbb6 <_printf_float+0x386>
 810cbd8:	e74a      	b.n	810ca70 <_printf_float+0x240>
 810cbda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810cbdc:	2a01      	cmp	r2, #1
 810cbde:	dc01      	bgt.n	810cbe4 <_printf_float+0x3b4>
 810cbe0:	07db      	lsls	r3, r3, #31
 810cbe2:	d53a      	bpl.n	810cc5a <_printf_float+0x42a>
 810cbe4:	2301      	movs	r3, #1
 810cbe6:	4642      	mov	r2, r8
 810cbe8:	4631      	mov	r1, r6
 810cbea:	4628      	mov	r0, r5
 810cbec:	47b8      	blx	r7
 810cbee:	3001      	adds	r0, #1
 810cbf0:	f43f ae7b 	beq.w	810c8ea <_printf_float+0xba>
 810cbf4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810cbf8:	4631      	mov	r1, r6
 810cbfa:	4628      	mov	r0, r5
 810cbfc:	47b8      	blx	r7
 810cbfe:	3001      	adds	r0, #1
 810cc00:	f108 0801 	add.w	r8, r8, #1
 810cc04:	f43f ae71 	beq.w	810c8ea <_printf_float+0xba>
 810cc08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810cc0a:	2200      	movs	r2, #0
 810cc0c:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 810cc10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810cc14:	2300      	movs	r3, #0
 810cc16:	f7f3 ffdf 	bl	8100bd8 <__aeabi_dcmpeq>
 810cc1a:	b9c8      	cbnz	r0, 810cc50 <_printf_float+0x420>
 810cc1c:	4653      	mov	r3, sl
 810cc1e:	4642      	mov	r2, r8
 810cc20:	4631      	mov	r1, r6
 810cc22:	4628      	mov	r0, r5
 810cc24:	47b8      	blx	r7
 810cc26:	3001      	adds	r0, #1
 810cc28:	d10e      	bne.n	810cc48 <_printf_float+0x418>
 810cc2a:	e65e      	b.n	810c8ea <_printf_float+0xba>
 810cc2c:	2301      	movs	r3, #1
 810cc2e:	4652      	mov	r2, sl
 810cc30:	4631      	mov	r1, r6
 810cc32:	4628      	mov	r0, r5
 810cc34:	47b8      	blx	r7
 810cc36:	3001      	adds	r0, #1
 810cc38:	f43f ae57 	beq.w	810c8ea <_printf_float+0xba>
 810cc3c:	f108 0801 	add.w	r8, r8, #1
 810cc40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810cc42:	3b01      	subs	r3, #1
 810cc44:	4543      	cmp	r3, r8
 810cc46:	dcf1      	bgt.n	810cc2c <_printf_float+0x3fc>
 810cc48:	464b      	mov	r3, r9
 810cc4a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 810cc4e:	e6de      	b.n	810ca0e <_printf_float+0x1de>
 810cc50:	f04f 0800 	mov.w	r8, #0
 810cc54:	f104 0a1a 	add.w	sl, r4, #26
 810cc58:	e7f2      	b.n	810cc40 <_printf_float+0x410>
 810cc5a:	2301      	movs	r3, #1
 810cc5c:	e7df      	b.n	810cc1e <_printf_float+0x3ee>
 810cc5e:	2301      	movs	r3, #1
 810cc60:	464a      	mov	r2, r9
 810cc62:	4631      	mov	r1, r6
 810cc64:	4628      	mov	r0, r5
 810cc66:	47b8      	blx	r7
 810cc68:	3001      	adds	r0, #1
 810cc6a:	f43f ae3e 	beq.w	810c8ea <_printf_float+0xba>
 810cc6e:	f108 0801 	add.w	r8, r8, #1
 810cc72:	68e3      	ldr	r3, [r4, #12]
 810cc74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810cc76:	1a9b      	subs	r3, r3, r2
 810cc78:	4543      	cmp	r3, r8
 810cc7a:	dcf0      	bgt.n	810cc5e <_printf_float+0x42e>
 810cc7c:	e6fc      	b.n	810ca78 <_printf_float+0x248>
 810cc7e:	f04f 0800 	mov.w	r8, #0
 810cc82:	f104 0919 	add.w	r9, r4, #25
 810cc86:	e7f4      	b.n	810cc72 <_printf_float+0x442>
 810cc88:	2900      	cmp	r1, #0
 810cc8a:	f43f ae8b 	beq.w	810c9a4 <_printf_float+0x174>
 810cc8e:	2300      	movs	r3, #0
 810cc90:	e9cd 0302 	strd	r0, r3, [sp, #8]
 810cc94:	ab09      	add	r3, sp, #36	; 0x24
 810cc96:	9300      	str	r3, [sp, #0]
 810cc98:	ec49 8b10 	vmov	d0, r8, r9
 810cc9c:	6022      	str	r2, [r4, #0]
 810cc9e:	f8cd a004 	str.w	sl, [sp, #4]
 810cca2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 810cca6:	4628      	mov	r0, r5
 810cca8:	f7ff fd2d 	bl	810c706 <__cvt>
 810ccac:	4680      	mov	r8, r0
 810ccae:	e648      	b.n	810c942 <_printf_float+0x112>

0810ccb0 <_printf_common>:
 810ccb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810ccb4:	4691      	mov	r9, r2
 810ccb6:	461f      	mov	r7, r3
 810ccb8:	688a      	ldr	r2, [r1, #8]
 810ccba:	690b      	ldr	r3, [r1, #16]
 810ccbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 810ccc0:	4293      	cmp	r3, r2
 810ccc2:	bfb8      	it	lt
 810ccc4:	4613      	movlt	r3, r2
 810ccc6:	f8c9 3000 	str.w	r3, [r9]
 810ccca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 810ccce:	4606      	mov	r6, r0
 810ccd0:	460c      	mov	r4, r1
 810ccd2:	b112      	cbz	r2, 810ccda <_printf_common+0x2a>
 810ccd4:	3301      	adds	r3, #1
 810ccd6:	f8c9 3000 	str.w	r3, [r9]
 810ccda:	6823      	ldr	r3, [r4, #0]
 810ccdc:	0699      	lsls	r1, r3, #26
 810ccde:	bf42      	ittt	mi
 810cce0:	f8d9 3000 	ldrmi.w	r3, [r9]
 810cce4:	3302      	addmi	r3, #2
 810cce6:	f8c9 3000 	strmi.w	r3, [r9]
 810ccea:	6825      	ldr	r5, [r4, #0]
 810ccec:	f015 0506 	ands.w	r5, r5, #6
 810ccf0:	d107      	bne.n	810cd02 <_printf_common+0x52>
 810ccf2:	f104 0a19 	add.w	sl, r4, #25
 810ccf6:	68e3      	ldr	r3, [r4, #12]
 810ccf8:	f8d9 2000 	ldr.w	r2, [r9]
 810ccfc:	1a9b      	subs	r3, r3, r2
 810ccfe:	42ab      	cmp	r3, r5
 810cd00:	dc28      	bgt.n	810cd54 <_printf_common+0xa4>
 810cd02:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 810cd06:	6822      	ldr	r2, [r4, #0]
 810cd08:	3300      	adds	r3, #0
 810cd0a:	bf18      	it	ne
 810cd0c:	2301      	movne	r3, #1
 810cd0e:	0692      	lsls	r2, r2, #26
 810cd10:	d42d      	bmi.n	810cd6e <_printf_common+0xbe>
 810cd12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 810cd16:	4639      	mov	r1, r7
 810cd18:	4630      	mov	r0, r6
 810cd1a:	47c0      	blx	r8
 810cd1c:	3001      	adds	r0, #1
 810cd1e:	d020      	beq.n	810cd62 <_printf_common+0xb2>
 810cd20:	6823      	ldr	r3, [r4, #0]
 810cd22:	68e5      	ldr	r5, [r4, #12]
 810cd24:	f8d9 2000 	ldr.w	r2, [r9]
 810cd28:	f003 0306 	and.w	r3, r3, #6
 810cd2c:	2b04      	cmp	r3, #4
 810cd2e:	bf08      	it	eq
 810cd30:	1aad      	subeq	r5, r5, r2
 810cd32:	68a3      	ldr	r3, [r4, #8]
 810cd34:	6922      	ldr	r2, [r4, #16]
 810cd36:	bf0c      	ite	eq
 810cd38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810cd3c:	2500      	movne	r5, #0
 810cd3e:	4293      	cmp	r3, r2
 810cd40:	bfc4      	itt	gt
 810cd42:	1a9b      	subgt	r3, r3, r2
 810cd44:	18ed      	addgt	r5, r5, r3
 810cd46:	f04f 0900 	mov.w	r9, #0
 810cd4a:	341a      	adds	r4, #26
 810cd4c:	454d      	cmp	r5, r9
 810cd4e:	d11a      	bne.n	810cd86 <_printf_common+0xd6>
 810cd50:	2000      	movs	r0, #0
 810cd52:	e008      	b.n	810cd66 <_printf_common+0xb6>
 810cd54:	2301      	movs	r3, #1
 810cd56:	4652      	mov	r2, sl
 810cd58:	4639      	mov	r1, r7
 810cd5a:	4630      	mov	r0, r6
 810cd5c:	47c0      	blx	r8
 810cd5e:	3001      	adds	r0, #1
 810cd60:	d103      	bne.n	810cd6a <_printf_common+0xba>
 810cd62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810cd66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810cd6a:	3501      	adds	r5, #1
 810cd6c:	e7c3      	b.n	810ccf6 <_printf_common+0x46>
 810cd6e:	18e1      	adds	r1, r4, r3
 810cd70:	1c5a      	adds	r2, r3, #1
 810cd72:	2030      	movs	r0, #48	; 0x30
 810cd74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 810cd78:	4422      	add	r2, r4
 810cd7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 810cd7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 810cd82:	3302      	adds	r3, #2
 810cd84:	e7c5      	b.n	810cd12 <_printf_common+0x62>
 810cd86:	2301      	movs	r3, #1
 810cd88:	4622      	mov	r2, r4
 810cd8a:	4639      	mov	r1, r7
 810cd8c:	4630      	mov	r0, r6
 810cd8e:	47c0      	blx	r8
 810cd90:	3001      	adds	r0, #1
 810cd92:	d0e6      	beq.n	810cd62 <_printf_common+0xb2>
 810cd94:	f109 0901 	add.w	r9, r9, #1
 810cd98:	e7d8      	b.n	810cd4c <_printf_common+0x9c>
	...

0810cd9c <_printf_i>:
 810cd9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810cda0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 810cda4:	460c      	mov	r4, r1
 810cda6:	7e09      	ldrb	r1, [r1, #24]
 810cda8:	b085      	sub	sp, #20
 810cdaa:	296e      	cmp	r1, #110	; 0x6e
 810cdac:	4617      	mov	r7, r2
 810cdae:	4606      	mov	r6, r0
 810cdb0:	4698      	mov	r8, r3
 810cdb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 810cdb4:	f000 80b3 	beq.w	810cf1e <_printf_i+0x182>
 810cdb8:	d822      	bhi.n	810ce00 <_printf_i+0x64>
 810cdba:	2963      	cmp	r1, #99	; 0x63
 810cdbc:	d036      	beq.n	810ce2c <_printf_i+0x90>
 810cdbe:	d80a      	bhi.n	810cdd6 <_printf_i+0x3a>
 810cdc0:	2900      	cmp	r1, #0
 810cdc2:	f000 80b9 	beq.w	810cf38 <_printf_i+0x19c>
 810cdc6:	2958      	cmp	r1, #88	; 0x58
 810cdc8:	f000 8083 	beq.w	810ced2 <_printf_i+0x136>
 810cdcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810cdd0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 810cdd4:	e032      	b.n	810ce3c <_printf_i+0xa0>
 810cdd6:	2964      	cmp	r1, #100	; 0x64
 810cdd8:	d001      	beq.n	810cdde <_printf_i+0x42>
 810cdda:	2969      	cmp	r1, #105	; 0x69
 810cddc:	d1f6      	bne.n	810cdcc <_printf_i+0x30>
 810cdde:	6820      	ldr	r0, [r4, #0]
 810cde0:	6813      	ldr	r3, [r2, #0]
 810cde2:	0605      	lsls	r5, r0, #24
 810cde4:	f103 0104 	add.w	r1, r3, #4
 810cde8:	d52a      	bpl.n	810ce40 <_printf_i+0xa4>
 810cdea:	681b      	ldr	r3, [r3, #0]
 810cdec:	6011      	str	r1, [r2, #0]
 810cdee:	2b00      	cmp	r3, #0
 810cdf0:	da03      	bge.n	810cdfa <_printf_i+0x5e>
 810cdf2:	222d      	movs	r2, #45	; 0x2d
 810cdf4:	425b      	negs	r3, r3
 810cdf6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 810cdfa:	486f      	ldr	r0, [pc, #444]	; (810cfb8 <_printf_i+0x21c>)
 810cdfc:	220a      	movs	r2, #10
 810cdfe:	e039      	b.n	810ce74 <_printf_i+0xd8>
 810ce00:	2973      	cmp	r1, #115	; 0x73
 810ce02:	f000 809d 	beq.w	810cf40 <_printf_i+0x1a4>
 810ce06:	d808      	bhi.n	810ce1a <_printf_i+0x7e>
 810ce08:	296f      	cmp	r1, #111	; 0x6f
 810ce0a:	d020      	beq.n	810ce4e <_printf_i+0xb2>
 810ce0c:	2970      	cmp	r1, #112	; 0x70
 810ce0e:	d1dd      	bne.n	810cdcc <_printf_i+0x30>
 810ce10:	6823      	ldr	r3, [r4, #0]
 810ce12:	f043 0320 	orr.w	r3, r3, #32
 810ce16:	6023      	str	r3, [r4, #0]
 810ce18:	e003      	b.n	810ce22 <_printf_i+0x86>
 810ce1a:	2975      	cmp	r1, #117	; 0x75
 810ce1c:	d017      	beq.n	810ce4e <_printf_i+0xb2>
 810ce1e:	2978      	cmp	r1, #120	; 0x78
 810ce20:	d1d4      	bne.n	810cdcc <_printf_i+0x30>
 810ce22:	2378      	movs	r3, #120	; 0x78
 810ce24:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 810ce28:	4864      	ldr	r0, [pc, #400]	; (810cfbc <_printf_i+0x220>)
 810ce2a:	e055      	b.n	810ced8 <_printf_i+0x13c>
 810ce2c:	6813      	ldr	r3, [r2, #0]
 810ce2e:	1d19      	adds	r1, r3, #4
 810ce30:	681b      	ldr	r3, [r3, #0]
 810ce32:	6011      	str	r1, [r2, #0]
 810ce34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810ce38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 810ce3c:	2301      	movs	r3, #1
 810ce3e:	e08c      	b.n	810cf5a <_printf_i+0x1be>
 810ce40:	681b      	ldr	r3, [r3, #0]
 810ce42:	6011      	str	r1, [r2, #0]
 810ce44:	f010 0f40 	tst.w	r0, #64	; 0x40
 810ce48:	bf18      	it	ne
 810ce4a:	b21b      	sxthne	r3, r3
 810ce4c:	e7cf      	b.n	810cdee <_printf_i+0x52>
 810ce4e:	6813      	ldr	r3, [r2, #0]
 810ce50:	6825      	ldr	r5, [r4, #0]
 810ce52:	1d18      	adds	r0, r3, #4
 810ce54:	6010      	str	r0, [r2, #0]
 810ce56:	0628      	lsls	r0, r5, #24
 810ce58:	d501      	bpl.n	810ce5e <_printf_i+0xc2>
 810ce5a:	681b      	ldr	r3, [r3, #0]
 810ce5c:	e002      	b.n	810ce64 <_printf_i+0xc8>
 810ce5e:	0668      	lsls	r0, r5, #25
 810ce60:	d5fb      	bpl.n	810ce5a <_printf_i+0xbe>
 810ce62:	881b      	ldrh	r3, [r3, #0]
 810ce64:	4854      	ldr	r0, [pc, #336]	; (810cfb8 <_printf_i+0x21c>)
 810ce66:	296f      	cmp	r1, #111	; 0x6f
 810ce68:	bf14      	ite	ne
 810ce6a:	220a      	movne	r2, #10
 810ce6c:	2208      	moveq	r2, #8
 810ce6e:	2100      	movs	r1, #0
 810ce70:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 810ce74:	6865      	ldr	r5, [r4, #4]
 810ce76:	60a5      	str	r5, [r4, #8]
 810ce78:	2d00      	cmp	r5, #0
 810ce7a:	f2c0 8095 	blt.w	810cfa8 <_printf_i+0x20c>
 810ce7e:	6821      	ldr	r1, [r4, #0]
 810ce80:	f021 0104 	bic.w	r1, r1, #4
 810ce84:	6021      	str	r1, [r4, #0]
 810ce86:	2b00      	cmp	r3, #0
 810ce88:	d13d      	bne.n	810cf06 <_printf_i+0x16a>
 810ce8a:	2d00      	cmp	r5, #0
 810ce8c:	f040 808e 	bne.w	810cfac <_printf_i+0x210>
 810ce90:	4665      	mov	r5, ip
 810ce92:	2a08      	cmp	r2, #8
 810ce94:	d10b      	bne.n	810ceae <_printf_i+0x112>
 810ce96:	6823      	ldr	r3, [r4, #0]
 810ce98:	07db      	lsls	r3, r3, #31
 810ce9a:	d508      	bpl.n	810ceae <_printf_i+0x112>
 810ce9c:	6923      	ldr	r3, [r4, #16]
 810ce9e:	6862      	ldr	r2, [r4, #4]
 810cea0:	429a      	cmp	r2, r3
 810cea2:	bfde      	ittt	le
 810cea4:	2330      	movle	r3, #48	; 0x30
 810cea6:	f805 3c01 	strble.w	r3, [r5, #-1]
 810ceaa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 810ceae:	ebac 0305 	sub.w	r3, ip, r5
 810ceb2:	6123      	str	r3, [r4, #16]
 810ceb4:	f8cd 8000 	str.w	r8, [sp]
 810ceb8:	463b      	mov	r3, r7
 810ceba:	aa03      	add	r2, sp, #12
 810cebc:	4621      	mov	r1, r4
 810cebe:	4630      	mov	r0, r6
 810cec0:	f7ff fef6 	bl	810ccb0 <_printf_common>
 810cec4:	3001      	adds	r0, #1
 810cec6:	d14d      	bne.n	810cf64 <_printf_i+0x1c8>
 810cec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810cecc:	b005      	add	sp, #20
 810cece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810ced2:	4839      	ldr	r0, [pc, #228]	; (810cfb8 <_printf_i+0x21c>)
 810ced4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 810ced8:	6813      	ldr	r3, [r2, #0]
 810ceda:	6821      	ldr	r1, [r4, #0]
 810cedc:	1d1d      	adds	r5, r3, #4
 810cede:	681b      	ldr	r3, [r3, #0]
 810cee0:	6015      	str	r5, [r2, #0]
 810cee2:	060a      	lsls	r2, r1, #24
 810cee4:	d50b      	bpl.n	810cefe <_printf_i+0x162>
 810cee6:	07ca      	lsls	r2, r1, #31
 810cee8:	bf44      	itt	mi
 810ceea:	f041 0120 	orrmi.w	r1, r1, #32
 810ceee:	6021      	strmi	r1, [r4, #0]
 810cef0:	b91b      	cbnz	r3, 810cefa <_printf_i+0x15e>
 810cef2:	6822      	ldr	r2, [r4, #0]
 810cef4:	f022 0220 	bic.w	r2, r2, #32
 810cef8:	6022      	str	r2, [r4, #0]
 810cefa:	2210      	movs	r2, #16
 810cefc:	e7b7      	b.n	810ce6e <_printf_i+0xd2>
 810cefe:	064d      	lsls	r5, r1, #25
 810cf00:	bf48      	it	mi
 810cf02:	b29b      	uxthmi	r3, r3
 810cf04:	e7ef      	b.n	810cee6 <_printf_i+0x14a>
 810cf06:	4665      	mov	r5, ip
 810cf08:	fbb3 f1f2 	udiv	r1, r3, r2
 810cf0c:	fb02 3311 	mls	r3, r2, r1, r3
 810cf10:	5cc3      	ldrb	r3, [r0, r3]
 810cf12:	f805 3d01 	strb.w	r3, [r5, #-1]!
 810cf16:	460b      	mov	r3, r1
 810cf18:	2900      	cmp	r1, #0
 810cf1a:	d1f5      	bne.n	810cf08 <_printf_i+0x16c>
 810cf1c:	e7b9      	b.n	810ce92 <_printf_i+0xf6>
 810cf1e:	6813      	ldr	r3, [r2, #0]
 810cf20:	6825      	ldr	r5, [r4, #0]
 810cf22:	6961      	ldr	r1, [r4, #20]
 810cf24:	1d18      	adds	r0, r3, #4
 810cf26:	6010      	str	r0, [r2, #0]
 810cf28:	0628      	lsls	r0, r5, #24
 810cf2a:	681b      	ldr	r3, [r3, #0]
 810cf2c:	d501      	bpl.n	810cf32 <_printf_i+0x196>
 810cf2e:	6019      	str	r1, [r3, #0]
 810cf30:	e002      	b.n	810cf38 <_printf_i+0x19c>
 810cf32:	066a      	lsls	r2, r5, #25
 810cf34:	d5fb      	bpl.n	810cf2e <_printf_i+0x192>
 810cf36:	8019      	strh	r1, [r3, #0]
 810cf38:	2300      	movs	r3, #0
 810cf3a:	6123      	str	r3, [r4, #16]
 810cf3c:	4665      	mov	r5, ip
 810cf3e:	e7b9      	b.n	810ceb4 <_printf_i+0x118>
 810cf40:	6813      	ldr	r3, [r2, #0]
 810cf42:	1d19      	adds	r1, r3, #4
 810cf44:	6011      	str	r1, [r2, #0]
 810cf46:	681d      	ldr	r5, [r3, #0]
 810cf48:	6862      	ldr	r2, [r4, #4]
 810cf4a:	2100      	movs	r1, #0
 810cf4c:	4628      	mov	r0, r5
 810cf4e:	f7f3 f9cf 	bl	81002f0 <memchr>
 810cf52:	b108      	cbz	r0, 810cf58 <_printf_i+0x1bc>
 810cf54:	1b40      	subs	r0, r0, r5
 810cf56:	6060      	str	r0, [r4, #4]
 810cf58:	6863      	ldr	r3, [r4, #4]
 810cf5a:	6123      	str	r3, [r4, #16]
 810cf5c:	2300      	movs	r3, #0
 810cf5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810cf62:	e7a7      	b.n	810ceb4 <_printf_i+0x118>
 810cf64:	6923      	ldr	r3, [r4, #16]
 810cf66:	462a      	mov	r2, r5
 810cf68:	4639      	mov	r1, r7
 810cf6a:	4630      	mov	r0, r6
 810cf6c:	47c0      	blx	r8
 810cf6e:	3001      	adds	r0, #1
 810cf70:	d0aa      	beq.n	810cec8 <_printf_i+0x12c>
 810cf72:	6823      	ldr	r3, [r4, #0]
 810cf74:	079b      	lsls	r3, r3, #30
 810cf76:	d413      	bmi.n	810cfa0 <_printf_i+0x204>
 810cf78:	68e0      	ldr	r0, [r4, #12]
 810cf7a:	9b03      	ldr	r3, [sp, #12]
 810cf7c:	4298      	cmp	r0, r3
 810cf7e:	bfb8      	it	lt
 810cf80:	4618      	movlt	r0, r3
 810cf82:	e7a3      	b.n	810cecc <_printf_i+0x130>
 810cf84:	2301      	movs	r3, #1
 810cf86:	464a      	mov	r2, r9
 810cf88:	4639      	mov	r1, r7
 810cf8a:	4630      	mov	r0, r6
 810cf8c:	47c0      	blx	r8
 810cf8e:	3001      	adds	r0, #1
 810cf90:	d09a      	beq.n	810cec8 <_printf_i+0x12c>
 810cf92:	3501      	adds	r5, #1
 810cf94:	68e3      	ldr	r3, [r4, #12]
 810cf96:	9a03      	ldr	r2, [sp, #12]
 810cf98:	1a9b      	subs	r3, r3, r2
 810cf9a:	42ab      	cmp	r3, r5
 810cf9c:	dcf2      	bgt.n	810cf84 <_printf_i+0x1e8>
 810cf9e:	e7eb      	b.n	810cf78 <_printf_i+0x1dc>
 810cfa0:	2500      	movs	r5, #0
 810cfa2:	f104 0919 	add.w	r9, r4, #25
 810cfa6:	e7f5      	b.n	810cf94 <_printf_i+0x1f8>
 810cfa8:	2b00      	cmp	r3, #0
 810cfaa:	d1ac      	bne.n	810cf06 <_printf_i+0x16a>
 810cfac:	7803      	ldrb	r3, [r0, #0]
 810cfae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 810cfb2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810cfb6:	e76c      	b.n	810ce92 <_printf_i+0xf6>
 810cfb8:	0810f1f2 	.word	0x0810f1f2
 810cfbc:	0810f203 	.word	0x0810f203

0810cfc0 <iprintf>:
 810cfc0:	b40f      	push	{r0, r1, r2, r3}
 810cfc2:	4b0a      	ldr	r3, [pc, #40]	; (810cfec <iprintf+0x2c>)
 810cfc4:	b513      	push	{r0, r1, r4, lr}
 810cfc6:	681c      	ldr	r4, [r3, #0]
 810cfc8:	b124      	cbz	r4, 810cfd4 <iprintf+0x14>
 810cfca:	69a3      	ldr	r3, [r4, #24]
 810cfcc:	b913      	cbnz	r3, 810cfd4 <iprintf+0x14>
 810cfce:	4620      	mov	r0, r4
 810cfd0:	f001 f8aa 	bl	810e128 <__sinit>
 810cfd4:	ab05      	add	r3, sp, #20
 810cfd6:	9a04      	ldr	r2, [sp, #16]
 810cfd8:	68a1      	ldr	r1, [r4, #8]
 810cfda:	9301      	str	r3, [sp, #4]
 810cfdc:	4620      	mov	r0, r4
 810cfde:	f001 fd63 	bl	810eaa8 <_vfiprintf_r>
 810cfe2:	b002      	add	sp, #8
 810cfe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810cfe8:	b004      	add	sp, #16
 810cfea:	4770      	bx	lr
 810cfec:	1000003c 	.word	0x1000003c

0810cff0 <_puts_r>:
 810cff0:	b570      	push	{r4, r5, r6, lr}
 810cff2:	460e      	mov	r6, r1
 810cff4:	4605      	mov	r5, r0
 810cff6:	b118      	cbz	r0, 810d000 <_puts_r+0x10>
 810cff8:	6983      	ldr	r3, [r0, #24]
 810cffa:	b90b      	cbnz	r3, 810d000 <_puts_r+0x10>
 810cffc:	f001 f894 	bl	810e128 <__sinit>
 810d000:	69ab      	ldr	r3, [r5, #24]
 810d002:	68ac      	ldr	r4, [r5, #8]
 810d004:	b913      	cbnz	r3, 810d00c <_puts_r+0x1c>
 810d006:	4628      	mov	r0, r5
 810d008:	f001 f88e 	bl	810e128 <__sinit>
 810d00c:	4b23      	ldr	r3, [pc, #140]	; (810d09c <_puts_r+0xac>)
 810d00e:	429c      	cmp	r4, r3
 810d010:	d117      	bne.n	810d042 <_puts_r+0x52>
 810d012:	686c      	ldr	r4, [r5, #4]
 810d014:	89a3      	ldrh	r3, [r4, #12]
 810d016:	071b      	lsls	r3, r3, #28
 810d018:	d51d      	bpl.n	810d056 <_puts_r+0x66>
 810d01a:	6923      	ldr	r3, [r4, #16]
 810d01c:	b1db      	cbz	r3, 810d056 <_puts_r+0x66>
 810d01e:	3e01      	subs	r6, #1
 810d020:	68a3      	ldr	r3, [r4, #8]
 810d022:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 810d026:	3b01      	subs	r3, #1
 810d028:	60a3      	str	r3, [r4, #8]
 810d02a:	b9e9      	cbnz	r1, 810d068 <_puts_r+0x78>
 810d02c:	2b00      	cmp	r3, #0
 810d02e:	da2e      	bge.n	810d08e <_puts_r+0x9e>
 810d030:	4622      	mov	r2, r4
 810d032:	210a      	movs	r1, #10
 810d034:	4628      	mov	r0, r5
 810d036:	f000 f883 	bl	810d140 <__swbuf_r>
 810d03a:	3001      	adds	r0, #1
 810d03c:	d011      	beq.n	810d062 <_puts_r+0x72>
 810d03e:	200a      	movs	r0, #10
 810d040:	e011      	b.n	810d066 <_puts_r+0x76>
 810d042:	4b17      	ldr	r3, [pc, #92]	; (810d0a0 <_puts_r+0xb0>)
 810d044:	429c      	cmp	r4, r3
 810d046:	d101      	bne.n	810d04c <_puts_r+0x5c>
 810d048:	68ac      	ldr	r4, [r5, #8]
 810d04a:	e7e3      	b.n	810d014 <_puts_r+0x24>
 810d04c:	4b15      	ldr	r3, [pc, #84]	; (810d0a4 <_puts_r+0xb4>)
 810d04e:	429c      	cmp	r4, r3
 810d050:	bf08      	it	eq
 810d052:	68ec      	ldreq	r4, [r5, #12]
 810d054:	e7de      	b.n	810d014 <_puts_r+0x24>
 810d056:	4621      	mov	r1, r4
 810d058:	4628      	mov	r0, r5
 810d05a:	f000 f8c3 	bl	810d1e4 <__swsetup_r>
 810d05e:	2800      	cmp	r0, #0
 810d060:	d0dd      	beq.n	810d01e <_puts_r+0x2e>
 810d062:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810d066:	bd70      	pop	{r4, r5, r6, pc}
 810d068:	2b00      	cmp	r3, #0
 810d06a:	da04      	bge.n	810d076 <_puts_r+0x86>
 810d06c:	69a2      	ldr	r2, [r4, #24]
 810d06e:	429a      	cmp	r2, r3
 810d070:	dc06      	bgt.n	810d080 <_puts_r+0x90>
 810d072:	290a      	cmp	r1, #10
 810d074:	d004      	beq.n	810d080 <_puts_r+0x90>
 810d076:	6823      	ldr	r3, [r4, #0]
 810d078:	1c5a      	adds	r2, r3, #1
 810d07a:	6022      	str	r2, [r4, #0]
 810d07c:	7019      	strb	r1, [r3, #0]
 810d07e:	e7cf      	b.n	810d020 <_puts_r+0x30>
 810d080:	4622      	mov	r2, r4
 810d082:	4628      	mov	r0, r5
 810d084:	f000 f85c 	bl	810d140 <__swbuf_r>
 810d088:	3001      	adds	r0, #1
 810d08a:	d1c9      	bne.n	810d020 <_puts_r+0x30>
 810d08c:	e7e9      	b.n	810d062 <_puts_r+0x72>
 810d08e:	6823      	ldr	r3, [r4, #0]
 810d090:	200a      	movs	r0, #10
 810d092:	1c5a      	adds	r2, r3, #1
 810d094:	6022      	str	r2, [r4, #0]
 810d096:	7018      	strb	r0, [r3, #0]
 810d098:	e7e5      	b.n	810d066 <_puts_r+0x76>
 810d09a:	bf00      	nop
 810d09c:	0810f244 	.word	0x0810f244
 810d0a0:	0810f264 	.word	0x0810f264
 810d0a4:	0810f224 	.word	0x0810f224

0810d0a8 <puts>:
 810d0a8:	4b02      	ldr	r3, [pc, #8]	; (810d0b4 <puts+0xc>)
 810d0aa:	4601      	mov	r1, r0
 810d0ac:	6818      	ldr	r0, [r3, #0]
 810d0ae:	f7ff bf9f 	b.w	810cff0 <_puts_r>
 810d0b2:	bf00      	nop
 810d0b4:	1000003c 	.word	0x1000003c

0810d0b8 <_raise_r>:
 810d0b8:	291f      	cmp	r1, #31
 810d0ba:	b538      	push	{r3, r4, r5, lr}
 810d0bc:	4604      	mov	r4, r0
 810d0be:	460d      	mov	r5, r1
 810d0c0:	d904      	bls.n	810d0cc <_raise_r+0x14>
 810d0c2:	2316      	movs	r3, #22
 810d0c4:	6003      	str	r3, [r0, #0]
 810d0c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810d0ca:	bd38      	pop	{r3, r4, r5, pc}
 810d0cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810d0ce:	b112      	cbz	r2, 810d0d6 <_raise_r+0x1e>
 810d0d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810d0d4:	b94b      	cbnz	r3, 810d0ea <_raise_r+0x32>
 810d0d6:	4620      	mov	r0, r4
 810d0d8:	f000 f830 	bl	810d13c <_getpid_r>
 810d0dc:	462a      	mov	r2, r5
 810d0de:	4601      	mov	r1, r0
 810d0e0:	4620      	mov	r0, r4
 810d0e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810d0e6:	f000 b817 	b.w	810d118 <_kill_r>
 810d0ea:	2b01      	cmp	r3, #1
 810d0ec:	d00a      	beq.n	810d104 <_raise_r+0x4c>
 810d0ee:	1c59      	adds	r1, r3, #1
 810d0f0:	d103      	bne.n	810d0fa <_raise_r+0x42>
 810d0f2:	2316      	movs	r3, #22
 810d0f4:	6003      	str	r3, [r0, #0]
 810d0f6:	2001      	movs	r0, #1
 810d0f8:	e7e7      	b.n	810d0ca <_raise_r+0x12>
 810d0fa:	2400      	movs	r4, #0
 810d0fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810d100:	4628      	mov	r0, r5
 810d102:	4798      	blx	r3
 810d104:	2000      	movs	r0, #0
 810d106:	e7e0      	b.n	810d0ca <_raise_r+0x12>

0810d108 <raise>:
 810d108:	4b02      	ldr	r3, [pc, #8]	; (810d114 <raise+0xc>)
 810d10a:	4601      	mov	r1, r0
 810d10c:	6818      	ldr	r0, [r3, #0]
 810d10e:	f7ff bfd3 	b.w	810d0b8 <_raise_r>
 810d112:	bf00      	nop
 810d114:	1000003c 	.word	0x1000003c

0810d118 <_kill_r>:
 810d118:	b538      	push	{r3, r4, r5, lr}
 810d11a:	4c07      	ldr	r4, [pc, #28]	; (810d138 <_kill_r+0x20>)
 810d11c:	2300      	movs	r3, #0
 810d11e:	4605      	mov	r5, r0
 810d120:	4608      	mov	r0, r1
 810d122:	4611      	mov	r1, r2
 810d124:	6023      	str	r3, [r4, #0]
 810d126:	f7f4 fd1f 	bl	8101b68 <_kill>
 810d12a:	1c43      	adds	r3, r0, #1
 810d12c:	d102      	bne.n	810d134 <_kill_r+0x1c>
 810d12e:	6823      	ldr	r3, [r4, #0]
 810d130:	b103      	cbz	r3, 810d134 <_kill_r+0x1c>
 810d132:	602b      	str	r3, [r5, #0]
 810d134:	bd38      	pop	{r3, r4, r5, pc}
 810d136:	bf00      	nop
 810d138:	1000550c 	.word	0x1000550c

0810d13c <_getpid_r>:
 810d13c:	f7f4 bd0c 	b.w	8101b58 <_getpid>

0810d140 <__swbuf_r>:
 810d140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d142:	460e      	mov	r6, r1
 810d144:	4614      	mov	r4, r2
 810d146:	4605      	mov	r5, r0
 810d148:	b118      	cbz	r0, 810d152 <__swbuf_r+0x12>
 810d14a:	6983      	ldr	r3, [r0, #24]
 810d14c:	b90b      	cbnz	r3, 810d152 <__swbuf_r+0x12>
 810d14e:	f000 ffeb 	bl	810e128 <__sinit>
 810d152:	4b21      	ldr	r3, [pc, #132]	; (810d1d8 <__swbuf_r+0x98>)
 810d154:	429c      	cmp	r4, r3
 810d156:	d12a      	bne.n	810d1ae <__swbuf_r+0x6e>
 810d158:	686c      	ldr	r4, [r5, #4]
 810d15a:	69a3      	ldr	r3, [r4, #24]
 810d15c:	60a3      	str	r3, [r4, #8]
 810d15e:	89a3      	ldrh	r3, [r4, #12]
 810d160:	071a      	lsls	r2, r3, #28
 810d162:	d52e      	bpl.n	810d1c2 <__swbuf_r+0x82>
 810d164:	6923      	ldr	r3, [r4, #16]
 810d166:	b363      	cbz	r3, 810d1c2 <__swbuf_r+0x82>
 810d168:	6923      	ldr	r3, [r4, #16]
 810d16a:	6820      	ldr	r0, [r4, #0]
 810d16c:	1ac0      	subs	r0, r0, r3
 810d16e:	6963      	ldr	r3, [r4, #20]
 810d170:	b2f6      	uxtb	r6, r6
 810d172:	4283      	cmp	r3, r0
 810d174:	4637      	mov	r7, r6
 810d176:	dc04      	bgt.n	810d182 <__swbuf_r+0x42>
 810d178:	4621      	mov	r1, r4
 810d17a:	4628      	mov	r0, r5
 810d17c:	f000 ff6a 	bl	810e054 <_fflush_r>
 810d180:	bb28      	cbnz	r0, 810d1ce <__swbuf_r+0x8e>
 810d182:	68a3      	ldr	r3, [r4, #8]
 810d184:	3b01      	subs	r3, #1
 810d186:	60a3      	str	r3, [r4, #8]
 810d188:	6823      	ldr	r3, [r4, #0]
 810d18a:	1c5a      	adds	r2, r3, #1
 810d18c:	6022      	str	r2, [r4, #0]
 810d18e:	701e      	strb	r6, [r3, #0]
 810d190:	6963      	ldr	r3, [r4, #20]
 810d192:	3001      	adds	r0, #1
 810d194:	4283      	cmp	r3, r0
 810d196:	d004      	beq.n	810d1a2 <__swbuf_r+0x62>
 810d198:	89a3      	ldrh	r3, [r4, #12]
 810d19a:	07db      	lsls	r3, r3, #31
 810d19c:	d519      	bpl.n	810d1d2 <__swbuf_r+0x92>
 810d19e:	2e0a      	cmp	r6, #10
 810d1a0:	d117      	bne.n	810d1d2 <__swbuf_r+0x92>
 810d1a2:	4621      	mov	r1, r4
 810d1a4:	4628      	mov	r0, r5
 810d1a6:	f000 ff55 	bl	810e054 <_fflush_r>
 810d1aa:	b190      	cbz	r0, 810d1d2 <__swbuf_r+0x92>
 810d1ac:	e00f      	b.n	810d1ce <__swbuf_r+0x8e>
 810d1ae:	4b0b      	ldr	r3, [pc, #44]	; (810d1dc <__swbuf_r+0x9c>)
 810d1b0:	429c      	cmp	r4, r3
 810d1b2:	d101      	bne.n	810d1b8 <__swbuf_r+0x78>
 810d1b4:	68ac      	ldr	r4, [r5, #8]
 810d1b6:	e7d0      	b.n	810d15a <__swbuf_r+0x1a>
 810d1b8:	4b09      	ldr	r3, [pc, #36]	; (810d1e0 <__swbuf_r+0xa0>)
 810d1ba:	429c      	cmp	r4, r3
 810d1bc:	bf08      	it	eq
 810d1be:	68ec      	ldreq	r4, [r5, #12]
 810d1c0:	e7cb      	b.n	810d15a <__swbuf_r+0x1a>
 810d1c2:	4621      	mov	r1, r4
 810d1c4:	4628      	mov	r0, r5
 810d1c6:	f000 f80d 	bl	810d1e4 <__swsetup_r>
 810d1ca:	2800      	cmp	r0, #0
 810d1cc:	d0cc      	beq.n	810d168 <__swbuf_r+0x28>
 810d1ce:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 810d1d2:	4638      	mov	r0, r7
 810d1d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810d1d6:	bf00      	nop
 810d1d8:	0810f244 	.word	0x0810f244
 810d1dc:	0810f264 	.word	0x0810f264
 810d1e0:	0810f224 	.word	0x0810f224

0810d1e4 <__swsetup_r>:
 810d1e4:	4b32      	ldr	r3, [pc, #200]	; (810d2b0 <__swsetup_r+0xcc>)
 810d1e6:	b570      	push	{r4, r5, r6, lr}
 810d1e8:	681d      	ldr	r5, [r3, #0]
 810d1ea:	4606      	mov	r6, r0
 810d1ec:	460c      	mov	r4, r1
 810d1ee:	b125      	cbz	r5, 810d1fa <__swsetup_r+0x16>
 810d1f0:	69ab      	ldr	r3, [r5, #24]
 810d1f2:	b913      	cbnz	r3, 810d1fa <__swsetup_r+0x16>
 810d1f4:	4628      	mov	r0, r5
 810d1f6:	f000 ff97 	bl	810e128 <__sinit>
 810d1fa:	4b2e      	ldr	r3, [pc, #184]	; (810d2b4 <__swsetup_r+0xd0>)
 810d1fc:	429c      	cmp	r4, r3
 810d1fe:	d10f      	bne.n	810d220 <__swsetup_r+0x3c>
 810d200:	686c      	ldr	r4, [r5, #4]
 810d202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810d206:	b29a      	uxth	r2, r3
 810d208:	0715      	lsls	r5, r2, #28
 810d20a:	d42c      	bmi.n	810d266 <__swsetup_r+0x82>
 810d20c:	06d0      	lsls	r0, r2, #27
 810d20e:	d411      	bmi.n	810d234 <__swsetup_r+0x50>
 810d210:	2209      	movs	r2, #9
 810d212:	6032      	str	r2, [r6, #0]
 810d214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810d218:	81a3      	strh	r3, [r4, #12]
 810d21a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810d21e:	e03e      	b.n	810d29e <__swsetup_r+0xba>
 810d220:	4b25      	ldr	r3, [pc, #148]	; (810d2b8 <__swsetup_r+0xd4>)
 810d222:	429c      	cmp	r4, r3
 810d224:	d101      	bne.n	810d22a <__swsetup_r+0x46>
 810d226:	68ac      	ldr	r4, [r5, #8]
 810d228:	e7eb      	b.n	810d202 <__swsetup_r+0x1e>
 810d22a:	4b24      	ldr	r3, [pc, #144]	; (810d2bc <__swsetup_r+0xd8>)
 810d22c:	429c      	cmp	r4, r3
 810d22e:	bf08      	it	eq
 810d230:	68ec      	ldreq	r4, [r5, #12]
 810d232:	e7e6      	b.n	810d202 <__swsetup_r+0x1e>
 810d234:	0751      	lsls	r1, r2, #29
 810d236:	d512      	bpl.n	810d25e <__swsetup_r+0x7a>
 810d238:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810d23a:	b141      	cbz	r1, 810d24e <__swsetup_r+0x6a>
 810d23c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810d240:	4299      	cmp	r1, r3
 810d242:	d002      	beq.n	810d24a <__swsetup_r+0x66>
 810d244:	4630      	mov	r0, r6
 810d246:	f001 fb5d 	bl	810e904 <_free_r>
 810d24a:	2300      	movs	r3, #0
 810d24c:	6363      	str	r3, [r4, #52]	; 0x34
 810d24e:	89a3      	ldrh	r3, [r4, #12]
 810d250:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 810d254:	81a3      	strh	r3, [r4, #12]
 810d256:	2300      	movs	r3, #0
 810d258:	6063      	str	r3, [r4, #4]
 810d25a:	6923      	ldr	r3, [r4, #16]
 810d25c:	6023      	str	r3, [r4, #0]
 810d25e:	89a3      	ldrh	r3, [r4, #12]
 810d260:	f043 0308 	orr.w	r3, r3, #8
 810d264:	81a3      	strh	r3, [r4, #12]
 810d266:	6923      	ldr	r3, [r4, #16]
 810d268:	b94b      	cbnz	r3, 810d27e <__swsetup_r+0x9a>
 810d26a:	89a3      	ldrh	r3, [r4, #12]
 810d26c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 810d270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810d274:	d003      	beq.n	810d27e <__swsetup_r+0x9a>
 810d276:	4621      	mov	r1, r4
 810d278:	4630      	mov	r0, r6
 810d27a:	f001 f811 	bl	810e2a0 <__smakebuf_r>
 810d27e:	89a2      	ldrh	r2, [r4, #12]
 810d280:	f012 0301 	ands.w	r3, r2, #1
 810d284:	d00c      	beq.n	810d2a0 <__swsetup_r+0xbc>
 810d286:	2300      	movs	r3, #0
 810d288:	60a3      	str	r3, [r4, #8]
 810d28a:	6963      	ldr	r3, [r4, #20]
 810d28c:	425b      	negs	r3, r3
 810d28e:	61a3      	str	r3, [r4, #24]
 810d290:	6923      	ldr	r3, [r4, #16]
 810d292:	b953      	cbnz	r3, 810d2aa <__swsetup_r+0xc6>
 810d294:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810d298:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 810d29c:	d1ba      	bne.n	810d214 <__swsetup_r+0x30>
 810d29e:	bd70      	pop	{r4, r5, r6, pc}
 810d2a0:	0792      	lsls	r2, r2, #30
 810d2a2:	bf58      	it	pl
 810d2a4:	6963      	ldrpl	r3, [r4, #20]
 810d2a6:	60a3      	str	r3, [r4, #8]
 810d2a8:	e7f2      	b.n	810d290 <__swsetup_r+0xac>
 810d2aa:	2000      	movs	r0, #0
 810d2ac:	e7f7      	b.n	810d29e <__swsetup_r+0xba>
 810d2ae:	bf00      	nop
 810d2b0:	1000003c 	.word	0x1000003c
 810d2b4:	0810f244 	.word	0x0810f244
 810d2b8:	0810f264 	.word	0x0810f264
 810d2bc:	0810f224 	.word	0x0810f224

0810d2c0 <quorem>:
 810d2c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d2c4:	6903      	ldr	r3, [r0, #16]
 810d2c6:	690c      	ldr	r4, [r1, #16]
 810d2c8:	42a3      	cmp	r3, r4
 810d2ca:	4680      	mov	r8, r0
 810d2cc:	f2c0 8082 	blt.w	810d3d4 <quorem+0x114>
 810d2d0:	3c01      	subs	r4, #1
 810d2d2:	f101 0714 	add.w	r7, r1, #20
 810d2d6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 810d2da:	f100 0614 	add.w	r6, r0, #20
 810d2de:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 810d2e2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 810d2e6:	eb06 030c 	add.w	r3, r6, ip
 810d2ea:	3501      	adds	r5, #1
 810d2ec:	eb07 090c 	add.w	r9, r7, ip
 810d2f0:	9301      	str	r3, [sp, #4]
 810d2f2:	fbb0 f5f5 	udiv	r5, r0, r5
 810d2f6:	b395      	cbz	r5, 810d35e <quorem+0x9e>
 810d2f8:	f04f 0a00 	mov.w	sl, #0
 810d2fc:	4638      	mov	r0, r7
 810d2fe:	46b6      	mov	lr, r6
 810d300:	46d3      	mov	fp, sl
 810d302:	f850 2b04 	ldr.w	r2, [r0], #4
 810d306:	b293      	uxth	r3, r2
 810d308:	fb05 a303 	mla	r3, r5, r3, sl
 810d30c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 810d310:	b29b      	uxth	r3, r3
 810d312:	ebab 0303 	sub.w	r3, fp, r3
 810d316:	0c12      	lsrs	r2, r2, #16
 810d318:	f8de b000 	ldr.w	fp, [lr]
 810d31c:	fb05 a202 	mla	r2, r5, r2, sl
 810d320:	fa13 f38b 	uxtah	r3, r3, fp
 810d324:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 810d328:	fa1f fb82 	uxth.w	fp, r2
 810d32c:	f8de 2000 	ldr.w	r2, [lr]
 810d330:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 810d334:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810d338:	b29b      	uxth	r3, r3
 810d33a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810d33e:	4581      	cmp	r9, r0
 810d340:	ea4f 4b22 	mov.w	fp, r2, asr #16
 810d344:	f84e 3b04 	str.w	r3, [lr], #4
 810d348:	d2db      	bcs.n	810d302 <quorem+0x42>
 810d34a:	f856 300c 	ldr.w	r3, [r6, ip]
 810d34e:	b933      	cbnz	r3, 810d35e <quorem+0x9e>
 810d350:	9b01      	ldr	r3, [sp, #4]
 810d352:	3b04      	subs	r3, #4
 810d354:	429e      	cmp	r6, r3
 810d356:	461a      	mov	r2, r3
 810d358:	d330      	bcc.n	810d3bc <quorem+0xfc>
 810d35a:	f8c8 4010 	str.w	r4, [r8, #16]
 810d35e:	4640      	mov	r0, r8
 810d360:	f001 f9fc 	bl	810e75c <__mcmp>
 810d364:	2800      	cmp	r0, #0
 810d366:	db25      	blt.n	810d3b4 <quorem+0xf4>
 810d368:	3501      	adds	r5, #1
 810d36a:	4630      	mov	r0, r6
 810d36c:	f04f 0c00 	mov.w	ip, #0
 810d370:	f857 2b04 	ldr.w	r2, [r7], #4
 810d374:	f8d0 e000 	ldr.w	lr, [r0]
 810d378:	b293      	uxth	r3, r2
 810d37a:	ebac 0303 	sub.w	r3, ip, r3
 810d37e:	0c12      	lsrs	r2, r2, #16
 810d380:	fa13 f38e 	uxtah	r3, r3, lr
 810d384:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 810d388:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810d38c:	b29b      	uxth	r3, r3
 810d38e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810d392:	45b9      	cmp	r9, r7
 810d394:	ea4f 4c22 	mov.w	ip, r2, asr #16
 810d398:	f840 3b04 	str.w	r3, [r0], #4
 810d39c:	d2e8      	bcs.n	810d370 <quorem+0xb0>
 810d39e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 810d3a2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 810d3a6:	b92a      	cbnz	r2, 810d3b4 <quorem+0xf4>
 810d3a8:	3b04      	subs	r3, #4
 810d3aa:	429e      	cmp	r6, r3
 810d3ac:	461a      	mov	r2, r3
 810d3ae:	d30b      	bcc.n	810d3c8 <quorem+0x108>
 810d3b0:	f8c8 4010 	str.w	r4, [r8, #16]
 810d3b4:	4628      	mov	r0, r5
 810d3b6:	b003      	add	sp, #12
 810d3b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d3bc:	6812      	ldr	r2, [r2, #0]
 810d3be:	3b04      	subs	r3, #4
 810d3c0:	2a00      	cmp	r2, #0
 810d3c2:	d1ca      	bne.n	810d35a <quorem+0x9a>
 810d3c4:	3c01      	subs	r4, #1
 810d3c6:	e7c5      	b.n	810d354 <quorem+0x94>
 810d3c8:	6812      	ldr	r2, [r2, #0]
 810d3ca:	3b04      	subs	r3, #4
 810d3cc:	2a00      	cmp	r2, #0
 810d3ce:	d1ef      	bne.n	810d3b0 <quorem+0xf0>
 810d3d0:	3c01      	subs	r4, #1
 810d3d2:	e7ea      	b.n	810d3aa <quorem+0xea>
 810d3d4:	2000      	movs	r0, #0
 810d3d6:	e7ee      	b.n	810d3b6 <quorem+0xf6>

0810d3d8 <_dtoa_r>:
 810d3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d3dc:	ec57 6b10 	vmov	r6, r7, d0
 810d3e0:	b097      	sub	sp, #92	; 0x5c
 810d3e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 810d3e4:	9106      	str	r1, [sp, #24]
 810d3e6:	4604      	mov	r4, r0
 810d3e8:	920b      	str	r2, [sp, #44]	; 0x2c
 810d3ea:	9312      	str	r3, [sp, #72]	; 0x48
 810d3ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 810d3f0:	e9cd 6700 	strd	r6, r7, [sp]
 810d3f4:	b93d      	cbnz	r5, 810d406 <_dtoa_r+0x2e>
 810d3f6:	2010      	movs	r0, #16
 810d3f8:	f000 ff92 	bl	810e320 <malloc>
 810d3fc:	6260      	str	r0, [r4, #36]	; 0x24
 810d3fe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 810d402:	6005      	str	r5, [r0, #0]
 810d404:	60c5      	str	r5, [r0, #12]
 810d406:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810d408:	6819      	ldr	r1, [r3, #0]
 810d40a:	b151      	cbz	r1, 810d422 <_dtoa_r+0x4a>
 810d40c:	685a      	ldr	r2, [r3, #4]
 810d40e:	604a      	str	r2, [r1, #4]
 810d410:	2301      	movs	r3, #1
 810d412:	4093      	lsls	r3, r2
 810d414:	608b      	str	r3, [r1, #8]
 810d416:	4620      	mov	r0, r4
 810d418:	f000 ffbe 	bl	810e398 <_Bfree>
 810d41c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810d41e:	2200      	movs	r2, #0
 810d420:	601a      	str	r2, [r3, #0]
 810d422:	1e3b      	subs	r3, r7, #0
 810d424:	bfbb      	ittet	lt
 810d426:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 810d42a:	9301      	strlt	r3, [sp, #4]
 810d42c:	2300      	movge	r3, #0
 810d42e:	2201      	movlt	r2, #1
 810d430:	bfac      	ite	ge
 810d432:	f8c8 3000 	strge.w	r3, [r8]
 810d436:	f8c8 2000 	strlt.w	r2, [r8]
 810d43a:	4baf      	ldr	r3, [pc, #700]	; (810d6f8 <_dtoa_r+0x320>)
 810d43c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 810d440:	ea33 0308 	bics.w	r3, r3, r8
 810d444:	d114      	bne.n	810d470 <_dtoa_r+0x98>
 810d446:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810d448:	f242 730f 	movw	r3, #9999	; 0x270f
 810d44c:	6013      	str	r3, [r2, #0]
 810d44e:	9b00      	ldr	r3, [sp, #0]
 810d450:	b923      	cbnz	r3, 810d45c <_dtoa_r+0x84>
 810d452:	f3c8 0013 	ubfx	r0, r8, #0, #20
 810d456:	2800      	cmp	r0, #0
 810d458:	f000 8542 	beq.w	810dee0 <_dtoa_r+0xb08>
 810d45c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810d45e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 810d70c <_dtoa_r+0x334>
 810d462:	2b00      	cmp	r3, #0
 810d464:	f000 8544 	beq.w	810def0 <_dtoa_r+0xb18>
 810d468:	f10b 0303 	add.w	r3, fp, #3
 810d46c:	f000 bd3e 	b.w	810deec <_dtoa_r+0xb14>
 810d470:	e9dd 6700 	ldrd	r6, r7, [sp]
 810d474:	2200      	movs	r2, #0
 810d476:	2300      	movs	r3, #0
 810d478:	4630      	mov	r0, r6
 810d47a:	4639      	mov	r1, r7
 810d47c:	f7f3 fbac 	bl	8100bd8 <__aeabi_dcmpeq>
 810d480:	4681      	mov	r9, r0
 810d482:	b168      	cbz	r0, 810d4a0 <_dtoa_r+0xc8>
 810d484:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810d486:	2301      	movs	r3, #1
 810d488:	6013      	str	r3, [r2, #0]
 810d48a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810d48c:	2b00      	cmp	r3, #0
 810d48e:	f000 8524 	beq.w	810deda <_dtoa_r+0xb02>
 810d492:	4b9a      	ldr	r3, [pc, #616]	; (810d6fc <_dtoa_r+0x324>)
 810d494:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810d496:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 810d49a:	6013      	str	r3, [r2, #0]
 810d49c:	f000 bd28 	b.w	810def0 <_dtoa_r+0xb18>
 810d4a0:	aa14      	add	r2, sp, #80	; 0x50
 810d4a2:	a915      	add	r1, sp, #84	; 0x54
 810d4a4:	ec47 6b10 	vmov	d0, r6, r7
 810d4a8:	4620      	mov	r0, r4
 810d4aa:	f001 f9ce 	bl	810e84a <__d2b>
 810d4ae:	f3c8 550a 	ubfx	r5, r8, #20, #11
 810d4b2:	9004      	str	r0, [sp, #16]
 810d4b4:	2d00      	cmp	r5, #0
 810d4b6:	d07c      	beq.n	810d5b2 <_dtoa_r+0x1da>
 810d4b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810d4bc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 810d4c0:	46b2      	mov	sl, r6
 810d4c2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 810d4c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 810d4ca:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 810d4ce:	2200      	movs	r2, #0
 810d4d0:	4b8b      	ldr	r3, [pc, #556]	; (810d700 <_dtoa_r+0x328>)
 810d4d2:	4650      	mov	r0, sl
 810d4d4:	4659      	mov	r1, fp
 810d4d6:	f7f2 ff5f 	bl	8100398 <__aeabi_dsub>
 810d4da:	a381      	add	r3, pc, #516	; (adr r3, 810d6e0 <_dtoa_r+0x308>)
 810d4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d4e0:	f7f3 f912 	bl	8100708 <__aeabi_dmul>
 810d4e4:	a380      	add	r3, pc, #512	; (adr r3, 810d6e8 <_dtoa_r+0x310>)
 810d4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d4ea:	f7f2 ff57 	bl	810039c <__adddf3>
 810d4ee:	4606      	mov	r6, r0
 810d4f0:	4628      	mov	r0, r5
 810d4f2:	460f      	mov	r7, r1
 810d4f4:	f7f3 f89e 	bl	8100634 <__aeabi_i2d>
 810d4f8:	a37d      	add	r3, pc, #500	; (adr r3, 810d6f0 <_dtoa_r+0x318>)
 810d4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d4fe:	f7f3 f903 	bl	8100708 <__aeabi_dmul>
 810d502:	4602      	mov	r2, r0
 810d504:	460b      	mov	r3, r1
 810d506:	4630      	mov	r0, r6
 810d508:	4639      	mov	r1, r7
 810d50a:	f7f2 ff47 	bl	810039c <__adddf3>
 810d50e:	4606      	mov	r6, r0
 810d510:	460f      	mov	r7, r1
 810d512:	f7f3 fba9 	bl	8100c68 <__aeabi_d2iz>
 810d516:	2200      	movs	r2, #0
 810d518:	4682      	mov	sl, r0
 810d51a:	2300      	movs	r3, #0
 810d51c:	4630      	mov	r0, r6
 810d51e:	4639      	mov	r1, r7
 810d520:	f7f3 fb64 	bl	8100bec <__aeabi_dcmplt>
 810d524:	b148      	cbz	r0, 810d53a <_dtoa_r+0x162>
 810d526:	4650      	mov	r0, sl
 810d528:	f7f3 f884 	bl	8100634 <__aeabi_i2d>
 810d52c:	4632      	mov	r2, r6
 810d52e:	463b      	mov	r3, r7
 810d530:	f7f3 fb52 	bl	8100bd8 <__aeabi_dcmpeq>
 810d534:	b908      	cbnz	r0, 810d53a <_dtoa_r+0x162>
 810d536:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 810d53a:	f1ba 0f16 	cmp.w	sl, #22
 810d53e:	d859      	bhi.n	810d5f4 <_dtoa_r+0x21c>
 810d540:	4970      	ldr	r1, [pc, #448]	; (810d704 <_dtoa_r+0x32c>)
 810d542:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 810d546:	e9dd 2300 	ldrd	r2, r3, [sp]
 810d54a:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d54e:	f7f3 fb6b 	bl	8100c28 <__aeabi_dcmpgt>
 810d552:	2800      	cmp	r0, #0
 810d554:	d050      	beq.n	810d5f8 <_dtoa_r+0x220>
 810d556:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 810d55a:	2300      	movs	r3, #0
 810d55c:	930f      	str	r3, [sp, #60]	; 0x3c
 810d55e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810d560:	1b5d      	subs	r5, r3, r5
 810d562:	f1b5 0801 	subs.w	r8, r5, #1
 810d566:	bf49      	itett	mi
 810d568:	f1c5 0301 	rsbmi	r3, r5, #1
 810d56c:	2300      	movpl	r3, #0
 810d56e:	9305      	strmi	r3, [sp, #20]
 810d570:	f04f 0800 	movmi.w	r8, #0
 810d574:	bf58      	it	pl
 810d576:	9305      	strpl	r3, [sp, #20]
 810d578:	f1ba 0f00 	cmp.w	sl, #0
 810d57c:	db3e      	blt.n	810d5fc <_dtoa_r+0x224>
 810d57e:	2300      	movs	r3, #0
 810d580:	44d0      	add	r8, sl
 810d582:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 810d586:	9307      	str	r3, [sp, #28]
 810d588:	9b06      	ldr	r3, [sp, #24]
 810d58a:	2b09      	cmp	r3, #9
 810d58c:	f200 8090 	bhi.w	810d6b0 <_dtoa_r+0x2d8>
 810d590:	2b05      	cmp	r3, #5
 810d592:	bfc4      	itt	gt
 810d594:	3b04      	subgt	r3, #4
 810d596:	9306      	strgt	r3, [sp, #24]
 810d598:	9b06      	ldr	r3, [sp, #24]
 810d59a:	f1a3 0302 	sub.w	r3, r3, #2
 810d59e:	bfcc      	ite	gt
 810d5a0:	2500      	movgt	r5, #0
 810d5a2:	2501      	movle	r5, #1
 810d5a4:	2b03      	cmp	r3, #3
 810d5a6:	f200 808f 	bhi.w	810d6c8 <_dtoa_r+0x2f0>
 810d5aa:	e8df f003 	tbb	[pc, r3]
 810d5ae:	7f7d      	.short	0x7f7d
 810d5b0:	7131      	.short	0x7131
 810d5b2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 810d5b6:	441d      	add	r5, r3
 810d5b8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 810d5bc:	2820      	cmp	r0, #32
 810d5be:	dd13      	ble.n	810d5e8 <_dtoa_r+0x210>
 810d5c0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 810d5c4:	9b00      	ldr	r3, [sp, #0]
 810d5c6:	fa08 f800 	lsl.w	r8, r8, r0
 810d5ca:	f205 4012 	addw	r0, r5, #1042	; 0x412
 810d5ce:	fa23 f000 	lsr.w	r0, r3, r0
 810d5d2:	ea48 0000 	orr.w	r0, r8, r0
 810d5d6:	f7f3 f81d 	bl	8100614 <__aeabi_ui2d>
 810d5da:	2301      	movs	r3, #1
 810d5dc:	4682      	mov	sl, r0
 810d5de:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 810d5e2:	3d01      	subs	r5, #1
 810d5e4:	9313      	str	r3, [sp, #76]	; 0x4c
 810d5e6:	e772      	b.n	810d4ce <_dtoa_r+0xf6>
 810d5e8:	9b00      	ldr	r3, [sp, #0]
 810d5ea:	f1c0 0020 	rsb	r0, r0, #32
 810d5ee:	fa03 f000 	lsl.w	r0, r3, r0
 810d5f2:	e7f0      	b.n	810d5d6 <_dtoa_r+0x1fe>
 810d5f4:	2301      	movs	r3, #1
 810d5f6:	e7b1      	b.n	810d55c <_dtoa_r+0x184>
 810d5f8:	900f      	str	r0, [sp, #60]	; 0x3c
 810d5fa:	e7b0      	b.n	810d55e <_dtoa_r+0x186>
 810d5fc:	9b05      	ldr	r3, [sp, #20]
 810d5fe:	eba3 030a 	sub.w	r3, r3, sl
 810d602:	9305      	str	r3, [sp, #20]
 810d604:	f1ca 0300 	rsb	r3, sl, #0
 810d608:	9307      	str	r3, [sp, #28]
 810d60a:	2300      	movs	r3, #0
 810d60c:	930e      	str	r3, [sp, #56]	; 0x38
 810d60e:	e7bb      	b.n	810d588 <_dtoa_r+0x1b0>
 810d610:	2301      	movs	r3, #1
 810d612:	930a      	str	r3, [sp, #40]	; 0x28
 810d614:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810d616:	2b00      	cmp	r3, #0
 810d618:	dd59      	ble.n	810d6ce <_dtoa_r+0x2f6>
 810d61a:	9302      	str	r3, [sp, #8]
 810d61c:	4699      	mov	r9, r3
 810d61e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 810d620:	2200      	movs	r2, #0
 810d622:	6072      	str	r2, [r6, #4]
 810d624:	2204      	movs	r2, #4
 810d626:	f102 0014 	add.w	r0, r2, #20
 810d62a:	4298      	cmp	r0, r3
 810d62c:	6871      	ldr	r1, [r6, #4]
 810d62e:	d953      	bls.n	810d6d8 <_dtoa_r+0x300>
 810d630:	4620      	mov	r0, r4
 810d632:	f000 fe7d 	bl	810e330 <_Balloc>
 810d636:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810d638:	6030      	str	r0, [r6, #0]
 810d63a:	f1b9 0f0e 	cmp.w	r9, #14
 810d63e:	f8d3 b000 	ldr.w	fp, [r3]
 810d642:	f200 80e6 	bhi.w	810d812 <_dtoa_r+0x43a>
 810d646:	2d00      	cmp	r5, #0
 810d648:	f000 80e3 	beq.w	810d812 <_dtoa_r+0x43a>
 810d64c:	ed9d 7b00 	vldr	d7, [sp]
 810d650:	f1ba 0f00 	cmp.w	sl, #0
 810d654:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 810d658:	dd74      	ble.n	810d744 <_dtoa_r+0x36c>
 810d65a:	4a2a      	ldr	r2, [pc, #168]	; (810d704 <_dtoa_r+0x32c>)
 810d65c:	f00a 030f 	and.w	r3, sl, #15
 810d660:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 810d664:	ed93 7b00 	vldr	d7, [r3]
 810d668:	ea4f 162a 	mov.w	r6, sl, asr #4
 810d66c:	06f0      	lsls	r0, r6, #27
 810d66e:	ed8d 7b08 	vstr	d7, [sp, #32]
 810d672:	d565      	bpl.n	810d740 <_dtoa_r+0x368>
 810d674:	4b24      	ldr	r3, [pc, #144]	; (810d708 <_dtoa_r+0x330>)
 810d676:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 810d67a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810d67e:	f7f3 f96d 	bl	810095c <__aeabi_ddiv>
 810d682:	e9cd 0100 	strd	r0, r1, [sp]
 810d686:	f006 060f 	and.w	r6, r6, #15
 810d68a:	2503      	movs	r5, #3
 810d68c:	4f1e      	ldr	r7, [pc, #120]	; (810d708 <_dtoa_r+0x330>)
 810d68e:	e04c      	b.n	810d72a <_dtoa_r+0x352>
 810d690:	2301      	movs	r3, #1
 810d692:	930a      	str	r3, [sp, #40]	; 0x28
 810d694:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810d696:	4453      	add	r3, sl
 810d698:	f103 0901 	add.w	r9, r3, #1
 810d69c:	9302      	str	r3, [sp, #8]
 810d69e:	464b      	mov	r3, r9
 810d6a0:	2b01      	cmp	r3, #1
 810d6a2:	bfb8      	it	lt
 810d6a4:	2301      	movlt	r3, #1
 810d6a6:	e7ba      	b.n	810d61e <_dtoa_r+0x246>
 810d6a8:	2300      	movs	r3, #0
 810d6aa:	e7b2      	b.n	810d612 <_dtoa_r+0x23a>
 810d6ac:	2300      	movs	r3, #0
 810d6ae:	e7f0      	b.n	810d692 <_dtoa_r+0x2ba>
 810d6b0:	2501      	movs	r5, #1
 810d6b2:	2300      	movs	r3, #0
 810d6b4:	9306      	str	r3, [sp, #24]
 810d6b6:	950a      	str	r5, [sp, #40]	; 0x28
 810d6b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810d6bc:	9302      	str	r3, [sp, #8]
 810d6be:	4699      	mov	r9, r3
 810d6c0:	2200      	movs	r2, #0
 810d6c2:	2312      	movs	r3, #18
 810d6c4:	920b      	str	r2, [sp, #44]	; 0x2c
 810d6c6:	e7aa      	b.n	810d61e <_dtoa_r+0x246>
 810d6c8:	2301      	movs	r3, #1
 810d6ca:	930a      	str	r3, [sp, #40]	; 0x28
 810d6cc:	e7f4      	b.n	810d6b8 <_dtoa_r+0x2e0>
 810d6ce:	2301      	movs	r3, #1
 810d6d0:	9302      	str	r3, [sp, #8]
 810d6d2:	4699      	mov	r9, r3
 810d6d4:	461a      	mov	r2, r3
 810d6d6:	e7f5      	b.n	810d6c4 <_dtoa_r+0x2ec>
 810d6d8:	3101      	adds	r1, #1
 810d6da:	6071      	str	r1, [r6, #4]
 810d6dc:	0052      	lsls	r2, r2, #1
 810d6de:	e7a2      	b.n	810d626 <_dtoa_r+0x24e>
 810d6e0:	636f4361 	.word	0x636f4361
 810d6e4:	3fd287a7 	.word	0x3fd287a7
 810d6e8:	8b60c8b3 	.word	0x8b60c8b3
 810d6ec:	3fc68a28 	.word	0x3fc68a28
 810d6f0:	509f79fb 	.word	0x509f79fb
 810d6f4:	3fd34413 	.word	0x3fd34413
 810d6f8:	7ff00000 	.word	0x7ff00000
 810d6fc:	0810f1f1 	.word	0x0810f1f1
 810d700:	3ff80000 	.word	0x3ff80000
 810d704:	0810f2b0 	.word	0x0810f2b0
 810d708:	0810f288 	.word	0x0810f288
 810d70c:	0810f21d 	.word	0x0810f21d
 810d710:	07f1      	lsls	r1, r6, #31
 810d712:	d508      	bpl.n	810d726 <_dtoa_r+0x34e>
 810d714:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810d718:	e9d7 2300 	ldrd	r2, r3, [r7]
 810d71c:	f7f2 fff4 	bl	8100708 <__aeabi_dmul>
 810d720:	e9cd 0108 	strd	r0, r1, [sp, #32]
 810d724:	3501      	adds	r5, #1
 810d726:	1076      	asrs	r6, r6, #1
 810d728:	3708      	adds	r7, #8
 810d72a:	2e00      	cmp	r6, #0
 810d72c:	d1f0      	bne.n	810d710 <_dtoa_r+0x338>
 810d72e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 810d732:	e9dd 0100 	ldrd	r0, r1, [sp]
 810d736:	f7f3 f911 	bl	810095c <__aeabi_ddiv>
 810d73a:	e9cd 0100 	strd	r0, r1, [sp]
 810d73e:	e01a      	b.n	810d776 <_dtoa_r+0x39e>
 810d740:	2502      	movs	r5, #2
 810d742:	e7a3      	b.n	810d68c <_dtoa_r+0x2b4>
 810d744:	f000 80a0 	beq.w	810d888 <_dtoa_r+0x4b0>
 810d748:	f1ca 0600 	rsb	r6, sl, #0
 810d74c:	4b9f      	ldr	r3, [pc, #636]	; (810d9cc <_dtoa_r+0x5f4>)
 810d74e:	4fa0      	ldr	r7, [pc, #640]	; (810d9d0 <_dtoa_r+0x5f8>)
 810d750:	f006 020f 	and.w	r2, r6, #15
 810d754:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810d758:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d75c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 810d760:	f7f2 ffd2 	bl	8100708 <__aeabi_dmul>
 810d764:	e9cd 0100 	strd	r0, r1, [sp]
 810d768:	1136      	asrs	r6, r6, #4
 810d76a:	2300      	movs	r3, #0
 810d76c:	2502      	movs	r5, #2
 810d76e:	2e00      	cmp	r6, #0
 810d770:	d17f      	bne.n	810d872 <_dtoa_r+0x49a>
 810d772:	2b00      	cmp	r3, #0
 810d774:	d1e1      	bne.n	810d73a <_dtoa_r+0x362>
 810d776:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810d778:	2b00      	cmp	r3, #0
 810d77a:	f000 8087 	beq.w	810d88c <_dtoa_r+0x4b4>
 810d77e:	e9dd 6700 	ldrd	r6, r7, [sp]
 810d782:	2200      	movs	r2, #0
 810d784:	4b93      	ldr	r3, [pc, #588]	; (810d9d4 <_dtoa_r+0x5fc>)
 810d786:	4630      	mov	r0, r6
 810d788:	4639      	mov	r1, r7
 810d78a:	f7f3 fa2f 	bl	8100bec <__aeabi_dcmplt>
 810d78e:	2800      	cmp	r0, #0
 810d790:	d07c      	beq.n	810d88c <_dtoa_r+0x4b4>
 810d792:	f1b9 0f00 	cmp.w	r9, #0
 810d796:	d079      	beq.n	810d88c <_dtoa_r+0x4b4>
 810d798:	9b02      	ldr	r3, [sp, #8]
 810d79a:	2b00      	cmp	r3, #0
 810d79c:	dd35      	ble.n	810d80a <_dtoa_r+0x432>
 810d79e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 810d7a2:	9308      	str	r3, [sp, #32]
 810d7a4:	4639      	mov	r1, r7
 810d7a6:	2200      	movs	r2, #0
 810d7a8:	4b8b      	ldr	r3, [pc, #556]	; (810d9d8 <_dtoa_r+0x600>)
 810d7aa:	4630      	mov	r0, r6
 810d7ac:	f7f2 ffac 	bl	8100708 <__aeabi_dmul>
 810d7b0:	e9cd 0100 	strd	r0, r1, [sp]
 810d7b4:	9f02      	ldr	r7, [sp, #8]
 810d7b6:	3501      	adds	r5, #1
 810d7b8:	4628      	mov	r0, r5
 810d7ba:	f7f2 ff3b 	bl	8100634 <__aeabi_i2d>
 810d7be:	e9dd 2300 	ldrd	r2, r3, [sp]
 810d7c2:	f7f2 ffa1 	bl	8100708 <__aeabi_dmul>
 810d7c6:	2200      	movs	r2, #0
 810d7c8:	4b84      	ldr	r3, [pc, #528]	; (810d9dc <_dtoa_r+0x604>)
 810d7ca:	f7f2 fde7 	bl	810039c <__adddf3>
 810d7ce:	4605      	mov	r5, r0
 810d7d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 810d7d4:	2f00      	cmp	r7, #0
 810d7d6:	d15d      	bne.n	810d894 <_dtoa_r+0x4bc>
 810d7d8:	2200      	movs	r2, #0
 810d7da:	4b81      	ldr	r3, [pc, #516]	; (810d9e0 <_dtoa_r+0x608>)
 810d7dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 810d7e0:	f7f2 fdda 	bl	8100398 <__aeabi_dsub>
 810d7e4:	462a      	mov	r2, r5
 810d7e6:	4633      	mov	r3, r6
 810d7e8:	e9cd 0100 	strd	r0, r1, [sp]
 810d7ec:	f7f3 fa1c 	bl	8100c28 <__aeabi_dcmpgt>
 810d7f0:	2800      	cmp	r0, #0
 810d7f2:	f040 8288 	bne.w	810dd06 <_dtoa_r+0x92e>
 810d7f6:	462a      	mov	r2, r5
 810d7f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 810d7fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 810d800:	f7f3 f9f4 	bl	8100bec <__aeabi_dcmplt>
 810d804:	2800      	cmp	r0, #0
 810d806:	f040 827c 	bne.w	810dd02 <_dtoa_r+0x92a>
 810d80a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 810d80e:	e9cd 2300 	strd	r2, r3, [sp]
 810d812:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810d814:	2b00      	cmp	r3, #0
 810d816:	f2c0 8150 	blt.w	810daba <_dtoa_r+0x6e2>
 810d81a:	f1ba 0f0e 	cmp.w	sl, #14
 810d81e:	f300 814c 	bgt.w	810daba <_dtoa_r+0x6e2>
 810d822:	4b6a      	ldr	r3, [pc, #424]	; (810d9cc <_dtoa_r+0x5f4>)
 810d824:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 810d828:	ed93 7b00 	vldr	d7, [r3]
 810d82c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810d82e:	2b00      	cmp	r3, #0
 810d830:	ed8d 7b02 	vstr	d7, [sp, #8]
 810d834:	f280 80d8 	bge.w	810d9e8 <_dtoa_r+0x610>
 810d838:	f1b9 0f00 	cmp.w	r9, #0
 810d83c:	f300 80d4 	bgt.w	810d9e8 <_dtoa_r+0x610>
 810d840:	f040 825e 	bne.w	810dd00 <_dtoa_r+0x928>
 810d844:	2200      	movs	r2, #0
 810d846:	4b66      	ldr	r3, [pc, #408]	; (810d9e0 <_dtoa_r+0x608>)
 810d848:	ec51 0b17 	vmov	r0, r1, d7
 810d84c:	f7f2 ff5c 	bl	8100708 <__aeabi_dmul>
 810d850:	e9dd 2300 	ldrd	r2, r3, [sp]
 810d854:	f7f3 f9de 	bl	8100c14 <__aeabi_dcmpge>
 810d858:	464f      	mov	r7, r9
 810d85a:	464e      	mov	r6, r9
 810d85c:	2800      	cmp	r0, #0
 810d85e:	f040 8234 	bne.w	810dcca <_dtoa_r+0x8f2>
 810d862:	2331      	movs	r3, #49	; 0x31
 810d864:	f10b 0501 	add.w	r5, fp, #1
 810d868:	f88b 3000 	strb.w	r3, [fp]
 810d86c:	f10a 0a01 	add.w	sl, sl, #1
 810d870:	e22f      	b.n	810dcd2 <_dtoa_r+0x8fa>
 810d872:	07f2      	lsls	r2, r6, #31
 810d874:	d505      	bpl.n	810d882 <_dtoa_r+0x4aa>
 810d876:	e9d7 2300 	ldrd	r2, r3, [r7]
 810d87a:	f7f2 ff45 	bl	8100708 <__aeabi_dmul>
 810d87e:	3501      	adds	r5, #1
 810d880:	2301      	movs	r3, #1
 810d882:	1076      	asrs	r6, r6, #1
 810d884:	3708      	adds	r7, #8
 810d886:	e772      	b.n	810d76e <_dtoa_r+0x396>
 810d888:	2502      	movs	r5, #2
 810d88a:	e774      	b.n	810d776 <_dtoa_r+0x39e>
 810d88c:	f8cd a020 	str.w	sl, [sp, #32]
 810d890:	464f      	mov	r7, r9
 810d892:	e791      	b.n	810d7b8 <_dtoa_r+0x3e0>
 810d894:	4b4d      	ldr	r3, [pc, #308]	; (810d9cc <_dtoa_r+0x5f4>)
 810d896:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 810d89a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 810d89e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810d8a0:	2b00      	cmp	r3, #0
 810d8a2:	d047      	beq.n	810d934 <_dtoa_r+0x55c>
 810d8a4:	4602      	mov	r2, r0
 810d8a6:	460b      	mov	r3, r1
 810d8a8:	2000      	movs	r0, #0
 810d8aa:	494e      	ldr	r1, [pc, #312]	; (810d9e4 <_dtoa_r+0x60c>)
 810d8ac:	f7f3 f856 	bl	810095c <__aeabi_ddiv>
 810d8b0:	462a      	mov	r2, r5
 810d8b2:	4633      	mov	r3, r6
 810d8b4:	f7f2 fd70 	bl	8100398 <__aeabi_dsub>
 810d8b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 810d8bc:	465d      	mov	r5, fp
 810d8be:	e9dd 0100 	ldrd	r0, r1, [sp]
 810d8c2:	f7f3 f9d1 	bl	8100c68 <__aeabi_d2iz>
 810d8c6:	4606      	mov	r6, r0
 810d8c8:	f7f2 feb4 	bl	8100634 <__aeabi_i2d>
 810d8cc:	4602      	mov	r2, r0
 810d8ce:	460b      	mov	r3, r1
 810d8d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 810d8d4:	f7f2 fd60 	bl	8100398 <__aeabi_dsub>
 810d8d8:	3630      	adds	r6, #48	; 0x30
 810d8da:	f805 6b01 	strb.w	r6, [r5], #1
 810d8de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 810d8e2:	e9cd 0100 	strd	r0, r1, [sp]
 810d8e6:	f7f3 f981 	bl	8100bec <__aeabi_dcmplt>
 810d8ea:	2800      	cmp	r0, #0
 810d8ec:	d163      	bne.n	810d9b6 <_dtoa_r+0x5de>
 810d8ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 810d8f2:	2000      	movs	r0, #0
 810d8f4:	4937      	ldr	r1, [pc, #220]	; (810d9d4 <_dtoa_r+0x5fc>)
 810d8f6:	f7f2 fd4f 	bl	8100398 <__aeabi_dsub>
 810d8fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 810d8fe:	f7f3 f975 	bl	8100bec <__aeabi_dcmplt>
 810d902:	2800      	cmp	r0, #0
 810d904:	f040 80b7 	bne.w	810da76 <_dtoa_r+0x69e>
 810d908:	eba5 030b 	sub.w	r3, r5, fp
 810d90c:	429f      	cmp	r7, r3
 810d90e:	f77f af7c 	ble.w	810d80a <_dtoa_r+0x432>
 810d912:	2200      	movs	r2, #0
 810d914:	4b30      	ldr	r3, [pc, #192]	; (810d9d8 <_dtoa_r+0x600>)
 810d916:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 810d91a:	f7f2 fef5 	bl	8100708 <__aeabi_dmul>
 810d91e:	2200      	movs	r2, #0
 810d920:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 810d924:	4b2c      	ldr	r3, [pc, #176]	; (810d9d8 <_dtoa_r+0x600>)
 810d926:	e9dd 0100 	ldrd	r0, r1, [sp]
 810d92a:	f7f2 feed 	bl	8100708 <__aeabi_dmul>
 810d92e:	e9cd 0100 	strd	r0, r1, [sp]
 810d932:	e7c4      	b.n	810d8be <_dtoa_r+0x4e6>
 810d934:	462a      	mov	r2, r5
 810d936:	4633      	mov	r3, r6
 810d938:	f7f2 fee6 	bl	8100708 <__aeabi_dmul>
 810d93c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 810d940:	eb0b 0507 	add.w	r5, fp, r7
 810d944:	465e      	mov	r6, fp
 810d946:	e9dd 0100 	ldrd	r0, r1, [sp]
 810d94a:	f7f3 f98d 	bl	8100c68 <__aeabi_d2iz>
 810d94e:	4607      	mov	r7, r0
 810d950:	f7f2 fe70 	bl	8100634 <__aeabi_i2d>
 810d954:	3730      	adds	r7, #48	; 0x30
 810d956:	4602      	mov	r2, r0
 810d958:	460b      	mov	r3, r1
 810d95a:	e9dd 0100 	ldrd	r0, r1, [sp]
 810d95e:	f7f2 fd1b 	bl	8100398 <__aeabi_dsub>
 810d962:	f806 7b01 	strb.w	r7, [r6], #1
 810d966:	42ae      	cmp	r6, r5
 810d968:	e9cd 0100 	strd	r0, r1, [sp]
 810d96c:	f04f 0200 	mov.w	r2, #0
 810d970:	d126      	bne.n	810d9c0 <_dtoa_r+0x5e8>
 810d972:	4b1c      	ldr	r3, [pc, #112]	; (810d9e4 <_dtoa_r+0x60c>)
 810d974:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 810d978:	f7f2 fd10 	bl	810039c <__adddf3>
 810d97c:	4602      	mov	r2, r0
 810d97e:	460b      	mov	r3, r1
 810d980:	e9dd 0100 	ldrd	r0, r1, [sp]
 810d984:	f7f3 f950 	bl	8100c28 <__aeabi_dcmpgt>
 810d988:	2800      	cmp	r0, #0
 810d98a:	d174      	bne.n	810da76 <_dtoa_r+0x69e>
 810d98c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 810d990:	2000      	movs	r0, #0
 810d992:	4914      	ldr	r1, [pc, #80]	; (810d9e4 <_dtoa_r+0x60c>)
 810d994:	f7f2 fd00 	bl	8100398 <__aeabi_dsub>
 810d998:	4602      	mov	r2, r0
 810d99a:	460b      	mov	r3, r1
 810d99c:	e9dd 0100 	ldrd	r0, r1, [sp]
 810d9a0:	f7f3 f924 	bl	8100bec <__aeabi_dcmplt>
 810d9a4:	2800      	cmp	r0, #0
 810d9a6:	f43f af30 	beq.w	810d80a <_dtoa_r+0x432>
 810d9aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810d9ae:	2b30      	cmp	r3, #48	; 0x30
 810d9b0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 810d9b4:	d002      	beq.n	810d9bc <_dtoa_r+0x5e4>
 810d9b6:	f8dd a020 	ldr.w	sl, [sp, #32]
 810d9ba:	e04a      	b.n	810da52 <_dtoa_r+0x67a>
 810d9bc:	4615      	mov	r5, r2
 810d9be:	e7f4      	b.n	810d9aa <_dtoa_r+0x5d2>
 810d9c0:	4b05      	ldr	r3, [pc, #20]	; (810d9d8 <_dtoa_r+0x600>)
 810d9c2:	f7f2 fea1 	bl	8100708 <__aeabi_dmul>
 810d9c6:	e9cd 0100 	strd	r0, r1, [sp]
 810d9ca:	e7bc      	b.n	810d946 <_dtoa_r+0x56e>
 810d9cc:	0810f2b0 	.word	0x0810f2b0
 810d9d0:	0810f288 	.word	0x0810f288
 810d9d4:	3ff00000 	.word	0x3ff00000
 810d9d8:	40240000 	.word	0x40240000
 810d9dc:	401c0000 	.word	0x401c0000
 810d9e0:	40140000 	.word	0x40140000
 810d9e4:	3fe00000 	.word	0x3fe00000
 810d9e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 810d9ec:	465d      	mov	r5, fp
 810d9ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810d9f2:	4630      	mov	r0, r6
 810d9f4:	4639      	mov	r1, r7
 810d9f6:	f7f2 ffb1 	bl	810095c <__aeabi_ddiv>
 810d9fa:	f7f3 f935 	bl	8100c68 <__aeabi_d2iz>
 810d9fe:	4680      	mov	r8, r0
 810da00:	f7f2 fe18 	bl	8100634 <__aeabi_i2d>
 810da04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810da08:	f7f2 fe7e 	bl	8100708 <__aeabi_dmul>
 810da0c:	4602      	mov	r2, r0
 810da0e:	460b      	mov	r3, r1
 810da10:	4630      	mov	r0, r6
 810da12:	4639      	mov	r1, r7
 810da14:	f108 0630 	add.w	r6, r8, #48	; 0x30
 810da18:	f7f2 fcbe 	bl	8100398 <__aeabi_dsub>
 810da1c:	f805 6b01 	strb.w	r6, [r5], #1
 810da20:	eba5 060b 	sub.w	r6, r5, fp
 810da24:	45b1      	cmp	r9, r6
 810da26:	4602      	mov	r2, r0
 810da28:	460b      	mov	r3, r1
 810da2a:	d139      	bne.n	810daa0 <_dtoa_r+0x6c8>
 810da2c:	f7f2 fcb6 	bl	810039c <__adddf3>
 810da30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810da34:	4606      	mov	r6, r0
 810da36:	460f      	mov	r7, r1
 810da38:	f7f3 f8f6 	bl	8100c28 <__aeabi_dcmpgt>
 810da3c:	b9c8      	cbnz	r0, 810da72 <_dtoa_r+0x69a>
 810da3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810da42:	4630      	mov	r0, r6
 810da44:	4639      	mov	r1, r7
 810da46:	f7f3 f8c7 	bl	8100bd8 <__aeabi_dcmpeq>
 810da4a:	b110      	cbz	r0, 810da52 <_dtoa_r+0x67a>
 810da4c:	f018 0f01 	tst.w	r8, #1
 810da50:	d10f      	bne.n	810da72 <_dtoa_r+0x69a>
 810da52:	9904      	ldr	r1, [sp, #16]
 810da54:	4620      	mov	r0, r4
 810da56:	f000 fc9f 	bl	810e398 <_Bfree>
 810da5a:	2300      	movs	r3, #0
 810da5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810da5e:	702b      	strb	r3, [r5, #0]
 810da60:	f10a 0301 	add.w	r3, sl, #1
 810da64:	6013      	str	r3, [r2, #0]
 810da66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810da68:	2b00      	cmp	r3, #0
 810da6a:	f000 8241 	beq.w	810def0 <_dtoa_r+0xb18>
 810da6e:	601d      	str	r5, [r3, #0]
 810da70:	e23e      	b.n	810def0 <_dtoa_r+0xb18>
 810da72:	f8cd a020 	str.w	sl, [sp, #32]
 810da76:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810da7a:	2a39      	cmp	r2, #57	; 0x39
 810da7c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 810da80:	d108      	bne.n	810da94 <_dtoa_r+0x6bc>
 810da82:	459b      	cmp	fp, r3
 810da84:	d10a      	bne.n	810da9c <_dtoa_r+0x6c4>
 810da86:	9b08      	ldr	r3, [sp, #32]
 810da88:	3301      	adds	r3, #1
 810da8a:	9308      	str	r3, [sp, #32]
 810da8c:	2330      	movs	r3, #48	; 0x30
 810da8e:	f88b 3000 	strb.w	r3, [fp]
 810da92:	465b      	mov	r3, fp
 810da94:	781a      	ldrb	r2, [r3, #0]
 810da96:	3201      	adds	r2, #1
 810da98:	701a      	strb	r2, [r3, #0]
 810da9a:	e78c      	b.n	810d9b6 <_dtoa_r+0x5de>
 810da9c:	461d      	mov	r5, r3
 810da9e:	e7ea      	b.n	810da76 <_dtoa_r+0x69e>
 810daa0:	2200      	movs	r2, #0
 810daa2:	4b9b      	ldr	r3, [pc, #620]	; (810dd10 <_dtoa_r+0x938>)
 810daa4:	f7f2 fe30 	bl	8100708 <__aeabi_dmul>
 810daa8:	2200      	movs	r2, #0
 810daaa:	2300      	movs	r3, #0
 810daac:	4606      	mov	r6, r0
 810daae:	460f      	mov	r7, r1
 810dab0:	f7f3 f892 	bl	8100bd8 <__aeabi_dcmpeq>
 810dab4:	2800      	cmp	r0, #0
 810dab6:	d09a      	beq.n	810d9ee <_dtoa_r+0x616>
 810dab8:	e7cb      	b.n	810da52 <_dtoa_r+0x67a>
 810daba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810dabc:	2a00      	cmp	r2, #0
 810dabe:	f000 808b 	beq.w	810dbd8 <_dtoa_r+0x800>
 810dac2:	9a06      	ldr	r2, [sp, #24]
 810dac4:	2a01      	cmp	r2, #1
 810dac6:	dc6e      	bgt.n	810dba6 <_dtoa_r+0x7ce>
 810dac8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 810daca:	2a00      	cmp	r2, #0
 810dacc:	d067      	beq.n	810db9e <_dtoa_r+0x7c6>
 810dace:	f203 4333 	addw	r3, r3, #1075	; 0x433
 810dad2:	9f07      	ldr	r7, [sp, #28]
 810dad4:	9d05      	ldr	r5, [sp, #20]
 810dad6:	9a05      	ldr	r2, [sp, #20]
 810dad8:	2101      	movs	r1, #1
 810dada:	441a      	add	r2, r3
 810dadc:	4620      	mov	r0, r4
 810dade:	9205      	str	r2, [sp, #20]
 810dae0:	4498      	add	r8, r3
 810dae2:	f000 fcf9 	bl	810e4d8 <__i2b>
 810dae6:	4606      	mov	r6, r0
 810dae8:	2d00      	cmp	r5, #0
 810daea:	dd0c      	ble.n	810db06 <_dtoa_r+0x72e>
 810daec:	f1b8 0f00 	cmp.w	r8, #0
 810daf0:	dd09      	ble.n	810db06 <_dtoa_r+0x72e>
 810daf2:	4545      	cmp	r5, r8
 810daf4:	9a05      	ldr	r2, [sp, #20]
 810daf6:	462b      	mov	r3, r5
 810daf8:	bfa8      	it	ge
 810dafa:	4643      	movge	r3, r8
 810dafc:	1ad2      	subs	r2, r2, r3
 810dafe:	9205      	str	r2, [sp, #20]
 810db00:	1aed      	subs	r5, r5, r3
 810db02:	eba8 0803 	sub.w	r8, r8, r3
 810db06:	9b07      	ldr	r3, [sp, #28]
 810db08:	b1eb      	cbz	r3, 810db46 <_dtoa_r+0x76e>
 810db0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810db0c:	2b00      	cmp	r3, #0
 810db0e:	d067      	beq.n	810dbe0 <_dtoa_r+0x808>
 810db10:	b18f      	cbz	r7, 810db36 <_dtoa_r+0x75e>
 810db12:	4631      	mov	r1, r6
 810db14:	463a      	mov	r2, r7
 810db16:	4620      	mov	r0, r4
 810db18:	f000 fd7e 	bl	810e618 <__pow5mult>
 810db1c:	9a04      	ldr	r2, [sp, #16]
 810db1e:	4601      	mov	r1, r0
 810db20:	4606      	mov	r6, r0
 810db22:	4620      	mov	r0, r4
 810db24:	f000 fce1 	bl	810e4ea <__multiply>
 810db28:	9904      	ldr	r1, [sp, #16]
 810db2a:	9008      	str	r0, [sp, #32]
 810db2c:	4620      	mov	r0, r4
 810db2e:	f000 fc33 	bl	810e398 <_Bfree>
 810db32:	9b08      	ldr	r3, [sp, #32]
 810db34:	9304      	str	r3, [sp, #16]
 810db36:	9b07      	ldr	r3, [sp, #28]
 810db38:	1bda      	subs	r2, r3, r7
 810db3a:	d004      	beq.n	810db46 <_dtoa_r+0x76e>
 810db3c:	9904      	ldr	r1, [sp, #16]
 810db3e:	4620      	mov	r0, r4
 810db40:	f000 fd6a 	bl	810e618 <__pow5mult>
 810db44:	9004      	str	r0, [sp, #16]
 810db46:	2101      	movs	r1, #1
 810db48:	4620      	mov	r0, r4
 810db4a:	f000 fcc5 	bl	810e4d8 <__i2b>
 810db4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810db50:	4607      	mov	r7, r0
 810db52:	2b00      	cmp	r3, #0
 810db54:	f000 81d0 	beq.w	810def8 <_dtoa_r+0xb20>
 810db58:	461a      	mov	r2, r3
 810db5a:	4601      	mov	r1, r0
 810db5c:	4620      	mov	r0, r4
 810db5e:	f000 fd5b 	bl	810e618 <__pow5mult>
 810db62:	9b06      	ldr	r3, [sp, #24]
 810db64:	2b01      	cmp	r3, #1
 810db66:	4607      	mov	r7, r0
 810db68:	dc40      	bgt.n	810dbec <_dtoa_r+0x814>
 810db6a:	9b00      	ldr	r3, [sp, #0]
 810db6c:	2b00      	cmp	r3, #0
 810db6e:	d139      	bne.n	810dbe4 <_dtoa_r+0x80c>
 810db70:	9b01      	ldr	r3, [sp, #4]
 810db72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810db76:	2b00      	cmp	r3, #0
 810db78:	d136      	bne.n	810dbe8 <_dtoa_r+0x810>
 810db7a:	9b01      	ldr	r3, [sp, #4]
 810db7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810db80:	0d1b      	lsrs	r3, r3, #20
 810db82:	051b      	lsls	r3, r3, #20
 810db84:	b12b      	cbz	r3, 810db92 <_dtoa_r+0x7ba>
 810db86:	9b05      	ldr	r3, [sp, #20]
 810db88:	3301      	adds	r3, #1
 810db8a:	9305      	str	r3, [sp, #20]
 810db8c:	f108 0801 	add.w	r8, r8, #1
 810db90:	2301      	movs	r3, #1
 810db92:	9307      	str	r3, [sp, #28]
 810db94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810db96:	2b00      	cmp	r3, #0
 810db98:	d12a      	bne.n	810dbf0 <_dtoa_r+0x818>
 810db9a:	2001      	movs	r0, #1
 810db9c:	e030      	b.n	810dc00 <_dtoa_r+0x828>
 810db9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810dba0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 810dba4:	e795      	b.n	810dad2 <_dtoa_r+0x6fa>
 810dba6:	9b07      	ldr	r3, [sp, #28]
 810dba8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 810dbac:	42bb      	cmp	r3, r7
 810dbae:	bfbf      	itttt	lt
 810dbb0:	9b07      	ldrlt	r3, [sp, #28]
 810dbb2:	9707      	strlt	r7, [sp, #28]
 810dbb4:	1afa      	sublt	r2, r7, r3
 810dbb6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 810dbb8:	bfbb      	ittet	lt
 810dbba:	189b      	addlt	r3, r3, r2
 810dbbc:	930e      	strlt	r3, [sp, #56]	; 0x38
 810dbbe:	1bdf      	subge	r7, r3, r7
 810dbc0:	2700      	movlt	r7, #0
 810dbc2:	f1b9 0f00 	cmp.w	r9, #0
 810dbc6:	bfb5      	itete	lt
 810dbc8:	9b05      	ldrlt	r3, [sp, #20]
 810dbca:	9d05      	ldrge	r5, [sp, #20]
 810dbcc:	eba3 0509 	sublt.w	r5, r3, r9
 810dbd0:	464b      	movge	r3, r9
 810dbd2:	bfb8      	it	lt
 810dbd4:	2300      	movlt	r3, #0
 810dbd6:	e77e      	b.n	810dad6 <_dtoa_r+0x6fe>
 810dbd8:	9f07      	ldr	r7, [sp, #28]
 810dbda:	9d05      	ldr	r5, [sp, #20]
 810dbdc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 810dbde:	e783      	b.n	810dae8 <_dtoa_r+0x710>
 810dbe0:	9a07      	ldr	r2, [sp, #28]
 810dbe2:	e7ab      	b.n	810db3c <_dtoa_r+0x764>
 810dbe4:	2300      	movs	r3, #0
 810dbe6:	e7d4      	b.n	810db92 <_dtoa_r+0x7ba>
 810dbe8:	9b00      	ldr	r3, [sp, #0]
 810dbea:	e7d2      	b.n	810db92 <_dtoa_r+0x7ba>
 810dbec:	2300      	movs	r3, #0
 810dbee:	9307      	str	r3, [sp, #28]
 810dbf0:	693b      	ldr	r3, [r7, #16]
 810dbf2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 810dbf6:	6918      	ldr	r0, [r3, #16]
 810dbf8:	f000 fc20 	bl	810e43c <__hi0bits>
 810dbfc:	f1c0 0020 	rsb	r0, r0, #32
 810dc00:	4440      	add	r0, r8
 810dc02:	f010 001f 	ands.w	r0, r0, #31
 810dc06:	d047      	beq.n	810dc98 <_dtoa_r+0x8c0>
 810dc08:	f1c0 0320 	rsb	r3, r0, #32
 810dc0c:	2b04      	cmp	r3, #4
 810dc0e:	dd3b      	ble.n	810dc88 <_dtoa_r+0x8b0>
 810dc10:	9b05      	ldr	r3, [sp, #20]
 810dc12:	f1c0 001c 	rsb	r0, r0, #28
 810dc16:	4403      	add	r3, r0
 810dc18:	9305      	str	r3, [sp, #20]
 810dc1a:	4405      	add	r5, r0
 810dc1c:	4480      	add	r8, r0
 810dc1e:	9b05      	ldr	r3, [sp, #20]
 810dc20:	2b00      	cmp	r3, #0
 810dc22:	dd05      	ble.n	810dc30 <_dtoa_r+0x858>
 810dc24:	461a      	mov	r2, r3
 810dc26:	9904      	ldr	r1, [sp, #16]
 810dc28:	4620      	mov	r0, r4
 810dc2a:	f000 fd43 	bl	810e6b4 <__lshift>
 810dc2e:	9004      	str	r0, [sp, #16]
 810dc30:	f1b8 0f00 	cmp.w	r8, #0
 810dc34:	dd05      	ble.n	810dc42 <_dtoa_r+0x86a>
 810dc36:	4639      	mov	r1, r7
 810dc38:	4642      	mov	r2, r8
 810dc3a:	4620      	mov	r0, r4
 810dc3c:	f000 fd3a 	bl	810e6b4 <__lshift>
 810dc40:	4607      	mov	r7, r0
 810dc42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810dc44:	b353      	cbz	r3, 810dc9c <_dtoa_r+0x8c4>
 810dc46:	4639      	mov	r1, r7
 810dc48:	9804      	ldr	r0, [sp, #16]
 810dc4a:	f000 fd87 	bl	810e75c <__mcmp>
 810dc4e:	2800      	cmp	r0, #0
 810dc50:	da24      	bge.n	810dc9c <_dtoa_r+0x8c4>
 810dc52:	2300      	movs	r3, #0
 810dc54:	220a      	movs	r2, #10
 810dc56:	9904      	ldr	r1, [sp, #16]
 810dc58:	4620      	mov	r0, r4
 810dc5a:	f000 fbb4 	bl	810e3c6 <__multadd>
 810dc5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810dc60:	9004      	str	r0, [sp, #16]
 810dc62:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 810dc66:	2b00      	cmp	r3, #0
 810dc68:	f000 814d 	beq.w	810df06 <_dtoa_r+0xb2e>
 810dc6c:	2300      	movs	r3, #0
 810dc6e:	4631      	mov	r1, r6
 810dc70:	220a      	movs	r2, #10
 810dc72:	4620      	mov	r0, r4
 810dc74:	f000 fba7 	bl	810e3c6 <__multadd>
 810dc78:	9b02      	ldr	r3, [sp, #8]
 810dc7a:	2b00      	cmp	r3, #0
 810dc7c:	4606      	mov	r6, r0
 810dc7e:	dc4f      	bgt.n	810dd20 <_dtoa_r+0x948>
 810dc80:	9b06      	ldr	r3, [sp, #24]
 810dc82:	2b02      	cmp	r3, #2
 810dc84:	dd4c      	ble.n	810dd20 <_dtoa_r+0x948>
 810dc86:	e011      	b.n	810dcac <_dtoa_r+0x8d4>
 810dc88:	d0c9      	beq.n	810dc1e <_dtoa_r+0x846>
 810dc8a:	9a05      	ldr	r2, [sp, #20]
 810dc8c:	331c      	adds	r3, #28
 810dc8e:	441a      	add	r2, r3
 810dc90:	9205      	str	r2, [sp, #20]
 810dc92:	441d      	add	r5, r3
 810dc94:	4498      	add	r8, r3
 810dc96:	e7c2      	b.n	810dc1e <_dtoa_r+0x846>
 810dc98:	4603      	mov	r3, r0
 810dc9a:	e7f6      	b.n	810dc8a <_dtoa_r+0x8b2>
 810dc9c:	f1b9 0f00 	cmp.w	r9, #0
 810dca0:	dc38      	bgt.n	810dd14 <_dtoa_r+0x93c>
 810dca2:	9b06      	ldr	r3, [sp, #24]
 810dca4:	2b02      	cmp	r3, #2
 810dca6:	dd35      	ble.n	810dd14 <_dtoa_r+0x93c>
 810dca8:	f8cd 9008 	str.w	r9, [sp, #8]
 810dcac:	9b02      	ldr	r3, [sp, #8]
 810dcae:	b963      	cbnz	r3, 810dcca <_dtoa_r+0x8f2>
 810dcb0:	4639      	mov	r1, r7
 810dcb2:	2205      	movs	r2, #5
 810dcb4:	4620      	mov	r0, r4
 810dcb6:	f000 fb86 	bl	810e3c6 <__multadd>
 810dcba:	4601      	mov	r1, r0
 810dcbc:	4607      	mov	r7, r0
 810dcbe:	9804      	ldr	r0, [sp, #16]
 810dcc0:	f000 fd4c 	bl	810e75c <__mcmp>
 810dcc4:	2800      	cmp	r0, #0
 810dcc6:	f73f adcc 	bgt.w	810d862 <_dtoa_r+0x48a>
 810dcca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810dccc:	465d      	mov	r5, fp
 810dcce:	ea6f 0a03 	mvn.w	sl, r3
 810dcd2:	f04f 0900 	mov.w	r9, #0
 810dcd6:	4639      	mov	r1, r7
 810dcd8:	4620      	mov	r0, r4
 810dcda:	f000 fb5d 	bl	810e398 <_Bfree>
 810dcde:	2e00      	cmp	r6, #0
 810dce0:	f43f aeb7 	beq.w	810da52 <_dtoa_r+0x67a>
 810dce4:	f1b9 0f00 	cmp.w	r9, #0
 810dce8:	d005      	beq.n	810dcf6 <_dtoa_r+0x91e>
 810dcea:	45b1      	cmp	r9, r6
 810dcec:	d003      	beq.n	810dcf6 <_dtoa_r+0x91e>
 810dcee:	4649      	mov	r1, r9
 810dcf0:	4620      	mov	r0, r4
 810dcf2:	f000 fb51 	bl	810e398 <_Bfree>
 810dcf6:	4631      	mov	r1, r6
 810dcf8:	4620      	mov	r0, r4
 810dcfa:	f000 fb4d 	bl	810e398 <_Bfree>
 810dcfe:	e6a8      	b.n	810da52 <_dtoa_r+0x67a>
 810dd00:	2700      	movs	r7, #0
 810dd02:	463e      	mov	r6, r7
 810dd04:	e7e1      	b.n	810dcca <_dtoa_r+0x8f2>
 810dd06:	f8dd a020 	ldr.w	sl, [sp, #32]
 810dd0a:	463e      	mov	r6, r7
 810dd0c:	e5a9      	b.n	810d862 <_dtoa_r+0x48a>
 810dd0e:	bf00      	nop
 810dd10:	40240000 	.word	0x40240000
 810dd14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810dd16:	f8cd 9008 	str.w	r9, [sp, #8]
 810dd1a:	2b00      	cmp	r3, #0
 810dd1c:	f000 80fa 	beq.w	810df14 <_dtoa_r+0xb3c>
 810dd20:	2d00      	cmp	r5, #0
 810dd22:	dd05      	ble.n	810dd30 <_dtoa_r+0x958>
 810dd24:	4631      	mov	r1, r6
 810dd26:	462a      	mov	r2, r5
 810dd28:	4620      	mov	r0, r4
 810dd2a:	f000 fcc3 	bl	810e6b4 <__lshift>
 810dd2e:	4606      	mov	r6, r0
 810dd30:	9b07      	ldr	r3, [sp, #28]
 810dd32:	2b00      	cmp	r3, #0
 810dd34:	d04c      	beq.n	810ddd0 <_dtoa_r+0x9f8>
 810dd36:	6871      	ldr	r1, [r6, #4]
 810dd38:	4620      	mov	r0, r4
 810dd3a:	f000 faf9 	bl	810e330 <_Balloc>
 810dd3e:	6932      	ldr	r2, [r6, #16]
 810dd40:	3202      	adds	r2, #2
 810dd42:	4605      	mov	r5, r0
 810dd44:	0092      	lsls	r2, r2, #2
 810dd46:	f106 010c 	add.w	r1, r6, #12
 810dd4a:	300c      	adds	r0, #12
 810dd4c:	f7fe fcc8 	bl	810c6e0 <memcpy>
 810dd50:	2201      	movs	r2, #1
 810dd52:	4629      	mov	r1, r5
 810dd54:	4620      	mov	r0, r4
 810dd56:	f000 fcad 	bl	810e6b4 <__lshift>
 810dd5a:	9b00      	ldr	r3, [sp, #0]
 810dd5c:	f8cd b014 	str.w	fp, [sp, #20]
 810dd60:	f003 0301 	and.w	r3, r3, #1
 810dd64:	46b1      	mov	r9, r6
 810dd66:	9307      	str	r3, [sp, #28]
 810dd68:	4606      	mov	r6, r0
 810dd6a:	4639      	mov	r1, r7
 810dd6c:	9804      	ldr	r0, [sp, #16]
 810dd6e:	f7ff faa7 	bl	810d2c0 <quorem>
 810dd72:	4649      	mov	r1, r9
 810dd74:	4605      	mov	r5, r0
 810dd76:	f100 0830 	add.w	r8, r0, #48	; 0x30
 810dd7a:	9804      	ldr	r0, [sp, #16]
 810dd7c:	f000 fcee 	bl	810e75c <__mcmp>
 810dd80:	4632      	mov	r2, r6
 810dd82:	9000      	str	r0, [sp, #0]
 810dd84:	4639      	mov	r1, r7
 810dd86:	4620      	mov	r0, r4
 810dd88:	f000 fd02 	bl	810e790 <__mdiff>
 810dd8c:	68c3      	ldr	r3, [r0, #12]
 810dd8e:	4602      	mov	r2, r0
 810dd90:	bb03      	cbnz	r3, 810ddd4 <_dtoa_r+0x9fc>
 810dd92:	4601      	mov	r1, r0
 810dd94:	9008      	str	r0, [sp, #32]
 810dd96:	9804      	ldr	r0, [sp, #16]
 810dd98:	f000 fce0 	bl	810e75c <__mcmp>
 810dd9c:	9a08      	ldr	r2, [sp, #32]
 810dd9e:	4603      	mov	r3, r0
 810dda0:	4611      	mov	r1, r2
 810dda2:	4620      	mov	r0, r4
 810dda4:	9308      	str	r3, [sp, #32]
 810dda6:	f000 faf7 	bl	810e398 <_Bfree>
 810ddaa:	9b08      	ldr	r3, [sp, #32]
 810ddac:	b9a3      	cbnz	r3, 810ddd8 <_dtoa_r+0xa00>
 810ddae:	9a06      	ldr	r2, [sp, #24]
 810ddb0:	b992      	cbnz	r2, 810ddd8 <_dtoa_r+0xa00>
 810ddb2:	9a07      	ldr	r2, [sp, #28]
 810ddb4:	b982      	cbnz	r2, 810ddd8 <_dtoa_r+0xa00>
 810ddb6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 810ddba:	d029      	beq.n	810de10 <_dtoa_r+0xa38>
 810ddbc:	9b00      	ldr	r3, [sp, #0]
 810ddbe:	2b00      	cmp	r3, #0
 810ddc0:	dd01      	ble.n	810ddc6 <_dtoa_r+0x9ee>
 810ddc2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 810ddc6:	9b05      	ldr	r3, [sp, #20]
 810ddc8:	1c5d      	adds	r5, r3, #1
 810ddca:	f883 8000 	strb.w	r8, [r3]
 810ddce:	e782      	b.n	810dcd6 <_dtoa_r+0x8fe>
 810ddd0:	4630      	mov	r0, r6
 810ddd2:	e7c2      	b.n	810dd5a <_dtoa_r+0x982>
 810ddd4:	2301      	movs	r3, #1
 810ddd6:	e7e3      	b.n	810dda0 <_dtoa_r+0x9c8>
 810ddd8:	9a00      	ldr	r2, [sp, #0]
 810ddda:	2a00      	cmp	r2, #0
 810dddc:	db04      	blt.n	810dde8 <_dtoa_r+0xa10>
 810ddde:	d125      	bne.n	810de2c <_dtoa_r+0xa54>
 810dde0:	9a06      	ldr	r2, [sp, #24]
 810dde2:	bb1a      	cbnz	r2, 810de2c <_dtoa_r+0xa54>
 810dde4:	9a07      	ldr	r2, [sp, #28]
 810dde6:	bb0a      	cbnz	r2, 810de2c <_dtoa_r+0xa54>
 810dde8:	2b00      	cmp	r3, #0
 810ddea:	ddec      	ble.n	810ddc6 <_dtoa_r+0x9ee>
 810ddec:	2201      	movs	r2, #1
 810ddee:	9904      	ldr	r1, [sp, #16]
 810ddf0:	4620      	mov	r0, r4
 810ddf2:	f000 fc5f 	bl	810e6b4 <__lshift>
 810ddf6:	4639      	mov	r1, r7
 810ddf8:	9004      	str	r0, [sp, #16]
 810ddfa:	f000 fcaf 	bl	810e75c <__mcmp>
 810ddfe:	2800      	cmp	r0, #0
 810de00:	dc03      	bgt.n	810de0a <_dtoa_r+0xa32>
 810de02:	d1e0      	bne.n	810ddc6 <_dtoa_r+0x9ee>
 810de04:	f018 0f01 	tst.w	r8, #1
 810de08:	d0dd      	beq.n	810ddc6 <_dtoa_r+0x9ee>
 810de0a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 810de0e:	d1d8      	bne.n	810ddc2 <_dtoa_r+0x9ea>
 810de10:	9b05      	ldr	r3, [sp, #20]
 810de12:	9a05      	ldr	r2, [sp, #20]
 810de14:	1c5d      	adds	r5, r3, #1
 810de16:	2339      	movs	r3, #57	; 0x39
 810de18:	7013      	strb	r3, [r2, #0]
 810de1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810de1e:	2b39      	cmp	r3, #57	; 0x39
 810de20:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 810de24:	d04f      	beq.n	810dec6 <_dtoa_r+0xaee>
 810de26:	3301      	adds	r3, #1
 810de28:	7013      	strb	r3, [r2, #0]
 810de2a:	e754      	b.n	810dcd6 <_dtoa_r+0x8fe>
 810de2c:	9a05      	ldr	r2, [sp, #20]
 810de2e:	2b00      	cmp	r3, #0
 810de30:	f102 0501 	add.w	r5, r2, #1
 810de34:	dd06      	ble.n	810de44 <_dtoa_r+0xa6c>
 810de36:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 810de3a:	d0e9      	beq.n	810de10 <_dtoa_r+0xa38>
 810de3c:	f108 0801 	add.w	r8, r8, #1
 810de40:	9b05      	ldr	r3, [sp, #20]
 810de42:	e7c2      	b.n	810ddca <_dtoa_r+0x9f2>
 810de44:	9a02      	ldr	r2, [sp, #8]
 810de46:	f805 8c01 	strb.w	r8, [r5, #-1]
 810de4a:	eba5 030b 	sub.w	r3, r5, fp
 810de4e:	4293      	cmp	r3, r2
 810de50:	d021      	beq.n	810de96 <_dtoa_r+0xabe>
 810de52:	2300      	movs	r3, #0
 810de54:	220a      	movs	r2, #10
 810de56:	9904      	ldr	r1, [sp, #16]
 810de58:	4620      	mov	r0, r4
 810de5a:	f000 fab4 	bl	810e3c6 <__multadd>
 810de5e:	45b1      	cmp	r9, r6
 810de60:	9004      	str	r0, [sp, #16]
 810de62:	f04f 0300 	mov.w	r3, #0
 810de66:	f04f 020a 	mov.w	r2, #10
 810de6a:	4649      	mov	r1, r9
 810de6c:	4620      	mov	r0, r4
 810de6e:	d105      	bne.n	810de7c <_dtoa_r+0xaa4>
 810de70:	f000 faa9 	bl	810e3c6 <__multadd>
 810de74:	4681      	mov	r9, r0
 810de76:	4606      	mov	r6, r0
 810de78:	9505      	str	r5, [sp, #20]
 810de7a:	e776      	b.n	810dd6a <_dtoa_r+0x992>
 810de7c:	f000 faa3 	bl	810e3c6 <__multadd>
 810de80:	4631      	mov	r1, r6
 810de82:	4681      	mov	r9, r0
 810de84:	2300      	movs	r3, #0
 810de86:	220a      	movs	r2, #10
 810de88:	4620      	mov	r0, r4
 810de8a:	f000 fa9c 	bl	810e3c6 <__multadd>
 810de8e:	4606      	mov	r6, r0
 810de90:	e7f2      	b.n	810de78 <_dtoa_r+0xaa0>
 810de92:	f04f 0900 	mov.w	r9, #0
 810de96:	2201      	movs	r2, #1
 810de98:	9904      	ldr	r1, [sp, #16]
 810de9a:	4620      	mov	r0, r4
 810de9c:	f000 fc0a 	bl	810e6b4 <__lshift>
 810dea0:	4639      	mov	r1, r7
 810dea2:	9004      	str	r0, [sp, #16]
 810dea4:	f000 fc5a 	bl	810e75c <__mcmp>
 810dea8:	2800      	cmp	r0, #0
 810deaa:	dcb6      	bgt.n	810de1a <_dtoa_r+0xa42>
 810deac:	d102      	bne.n	810deb4 <_dtoa_r+0xadc>
 810deae:	f018 0f01 	tst.w	r8, #1
 810deb2:	d1b2      	bne.n	810de1a <_dtoa_r+0xa42>
 810deb4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810deb8:	2b30      	cmp	r3, #48	; 0x30
 810deba:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 810debe:	f47f af0a 	bne.w	810dcd6 <_dtoa_r+0x8fe>
 810dec2:	4615      	mov	r5, r2
 810dec4:	e7f6      	b.n	810deb4 <_dtoa_r+0xadc>
 810dec6:	4593      	cmp	fp, r2
 810dec8:	d105      	bne.n	810ded6 <_dtoa_r+0xafe>
 810deca:	2331      	movs	r3, #49	; 0x31
 810decc:	f10a 0a01 	add.w	sl, sl, #1
 810ded0:	f88b 3000 	strb.w	r3, [fp]
 810ded4:	e6ff      	b.n	810dcd6 <_dtoa_r+0x8fe>
 810ded6:	4615      	mov	r5, r2
 810ded8:	e79f      	b.n	810de1a <_dtoa_r+0xa42>
 810deda:	f8df b064 	ldr.w	fp, [pc, #100]	; 810df40 <_dtoa_r+0xb68>
 810dede:	e007      	b.n	810def0 <_dtoa_r+0xb18>
 810dee0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810dee2:	f8df b060 	ldr.w	fp, [pc, #96]	; 810df44 <_dtoa_r+0xb6c>
 810dee6:	b11b      	cbz	r3, 810def0 <_dtoa_r+0xb18>
 810dee8:	f10b 0308 	add.w	r3, fp, #8
 810deec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810deee:	6013      	str	r3, [r2, #0]
 810def0:	4658      	mov	r0, fp
 810def2:	b017      	add	sp, #92	; 0x5c
 810def4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810def8:	9b06      	ldr	r3, [sp, #24]
 810defa:	2b01      	cmp	r3, #1
 810defc:	f77f ae35 	ble.w	810db6a <_dtoa_r+0x792>
 810df00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810df02:	9307      	str	r3, [sp, #28]
 810df04:	e649      	b.n	810db9a <_dtoa_r+0x7c2>
 810df06:	9b02      	ldr	r3, [sp, #8]
 810df08:	2b00      	cmp	r3, #0
 810df0a:	dc03      	bgt.n	810df14 <_dtoa_r+0xb3c>
 810df0c:	9b06      	ldr	r3, [sp, #24]
 810df0e:	2b02      	cmp	r3, #2
 810df10:	f73f aecc 	bgt.w	810dcac <_dtoa_r+0x8d4>
 810df14:	465d      	mov	r5, fp
 810df16:	4639      	mov	r1, r7
 810df18:	9804      	ldr	r0, [sp, #16]
 810df1a:	f7ff f9d1 	bl	810d2c0 <quorem>
 810df1e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 810df22:	f805 8b01 	strb.w	r8, [r5], #1
 810df26:	9a02      	ldr	r2, [sp, #8]
 810df28:	eba5 030b 	sub.w	r3, r5, fp
 810df2c:	429a      	cmp	r2, r3
 810df2e:	ddb0      	ble.n	810de92 <_dtoa_r+0xaba>
 810df30:	2300      	movs	r3, #0
 810df32:	220a      	movs	r2, #10
 810df34:	9904      	ldr	r1, [sp, #16]
 810df36:	4620      	mov	r0, r4
 810df38:	f000 fa45 	bl	810e3c6 <__multadd>
 810df3c:	9004      	str	r0, [sp, #16]
 810df3e:	e7ea      	b.n	810df16 <_dtoa_r+0xb3e>
 810df40:	0810f1f0 	.word	0x0810f1f0
 810df44:	0810f214 	.word	0x0810f214

0810df48 <__sflush_r>:
 810df48:	898a      	ldrh	r2, [r1, #12]
 810df4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810df4e:	4605      	mov	r5, r0
 810df50:	0710      	lsls	r0, r2, #28
 810df52:	460c      	mov	r4, r1
 810df54:	d458      	bmi.n	810e008 <__sflush_r+0xc0>
 810df56:	684b      	ldr	r3, [r1, #4]
 810df58:	2b00      	cmp	r3, #0
 810df5a:	dc05      	bgt.n	810df68 <__sflush_r+0x20>
 810df5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 810df5e:	2b00      	cmp	r3, #0
 810df60:	dc02      	bgt.n	810df68 <__sflush_r+0x20>
 810df62:	2000      	movs	r0, #0
 810df64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810df68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810df6a:	2e00      	cmp	r6, #0
 810df6c:	d0f9      	beq.n	810df62 <__sflush_r+0x1a>
 810df6e:	2300      	movs	r3, #0
 810df70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 810df74:	682f      	ldr	r7, [r5, #0]
 810df76:	6a21      	ldr	r1, [r4, #32]
 810df78:	602b      	str	r3, [r5, #0]
 810df7a:	d032      	beq.n	810dfe2 <__sflush_r+0x9a>
 810df7c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 810df7e:	89a3      	ldrh	r3, [r4, #12]
 810df80:	075a      	lsls	r2, r3, #29
 810df82:	d505      	bpl.n	810df90 <__sflush_r+0x48>
 810df84:	6863      	ldr	r3, [r4, #4]
 810df86:	1ac0      	subs	r0, r0, r3
 810df88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810df8a:	b10b      	cbz	r3, 810df90 <__sflush_r+0x48>
 810df8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 810df8e:	1ac0      	subs	r0, r0, r3
 810df90:	2300      	movs	r3, #0
 810df92:	4602      	mov	r2, r0
 810df94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810df96:	6a21      	ldr	r1, [r4, #32]
 810df98:	4628      	mov	r0, r5
 810df9a:	47b0      	blx	r6
 810df9c:	1c43      	adds	r3, r0, #1
 810df9e:	89a3      	ldrh	r3, [r4, #12]
 810dfa0:	d106      	bne.n	810dfb0 <__sflush_r+0x68>
 810dfa2:	6829      	ldr	r1, [r5, #0]
 810dfa4:	291d      	cmp	r1, #29
 810dfa6:	d848      	bhi.n	810e03a <__sflush_r+0xf2>
 810dfa8:	4a29      	ldr	r2, [pc, #164]	; (810e050 <__sflush_r+0x108>)
 810dfaa:	40ca      	lsrs	r2, r1
 810dfac:	07d6      	lsls	r6, r2, #31
 810dfae:	d544      	bpl.n	810e03a <__sflush_r+0xf2>
 810dfb0:	2200      	movs	r2, #0
 810dfb2:	6062      	str	r2, [r4, #4]
 810dfb4:	04d9      	lsls	r1, r3, #19
 810dfb6:	6922      	ldr	r2, [r4, #16]
 810dfb8:	6022      	str	r2, [r4, #0]
 810dfba:	d504      	bpl.n	810dfc6 <__sflush_r+0x7e>
 810dfbc:	1c42      	adds	r2, r0, #1
 810dfbe:	d101      	bne.n	810dfc4 <__sflush_r+0x7c>
 810dfc0:	682b      	ldr	r3, [r5, #0]
 810dfc2:	b903      	cbnz	r3, 810dfc6 <__sflush_r+0x7e>
 810dfc4:	6560      	str	r0, [r4, #84]	; 0x54
 810dfc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810dfc8:	602f      	str	r7, [r5, #0]
 810dfca:	2900      	cmp	r1, #0
 810dfcc:	d0c9      	beq.n	810df62 <__sflush_r+0x1a>
 810dfce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810dfd2:	4299      	cmp	r1, r3
 810dfd4:	d002      	beq.n	810dfdc <__sflush_r+0x94>
 810dfd6:	4628      	mov	r0, r5
 810dfd8:	f000 fc94 	bl	810e904 <_free_r>
 810dfdc:	2000      	movs	r0, #0
 810dfde:	6360      	str	r0, [r4, #52]	; 0x34
 810dfe0:	e7c0      	b.n	810df64 <__sflush_r+0x1c>
 810dfe2:	2301      	movs	r3, #1
 810dfe4:	4628      	mov	r0, r5
 810dfe6:	47b0      	blx	r6
 810dfe8:	1c41      	adds	r1, r0, #1
 810dfea:	d1c8      	bne.n	810df7e <__sflush_r+0x36>
 810dfec:	682b      	ldr	r3, [r5, #0]
 810dfee:	2b00      	cmp	r3, #0
 810dff0:	d0c5      	beq.n	810df7e <__sflush_r+0x36>
 810dff2:	2b1d      	cmp	r3, #29
 810dff4:	d001      	beq.n	810dffa <__sflush_r+0xb2>
 810dff6:	2b16      	cmp	r3, #22
 810dff8:	d101      	bne.n	810dffe <__sflush_r+0xb6>
 810dffa:	602f      	str	r7, [r5, #0]
 810dffc:	e7b1      	b.n	810df62 <__sflush_r+0x1a>
 810dffe:	89a3      	ldrh	r3, [r4, #12]
 810e000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810e004:	81a3      	strh	r3, [r4, #12]
 810e006:	e7ad      	b.n	810df64 <__sflush_r+0x1c>
 810e008:	690f      	ldr	r7, [r1, #16]
 810e00a:	2f00      	cmp	r7, #0
 810e00c:	d0a9      	beq.n	810df62 <__sflush_r+0x1a>
 810e00e:	0793      	lsls	r3, r2, #30
 810e010:	680e      	ldr	r6, [r1, #0]
 810e012:	bf08      	it	eq
 810e014:	694b      	ldreq	r3, [r1, #20]
 810e016:	600f      	str	r7, [r1, #0]
 810e018:	bf18      	it	ne
 810e01a:	2300      	movne	r3, #0
 810e01c:	eba6 0807 	sub.w	r8, r6, r7
 810e020:	608b      	str	r3, [r1, #8]
 810e022:	f1b8 0f00 	cmp.w	r8, #0
 810e026:	dd9c      	ble.n	810df62 <__sflush_r+0x1a>
 810e028:	4643      	mov	r3, r8
 810e02a:	463a      	mov	r2, r7
 810e02c:	6a21      	ldr	r1, [r4, #32]
 810e02e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 810e030:	4628      	mov	r0, r5
 810e032:	47b0      	blx	r6
 810e034:	2800      	cmp	r0, #0
 810e036:	dc06      	bgt.n	810e046 <__sflush_r+0xfe>
 810e038:	89a3      	ldrh	r3, [r4, #12]
 810e03a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810e03e:	81a3      	strh	r3, [r4, #12]
 810e040:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810e044:	e78e      	b.n	810df64 <__sflush_r+0x1c>
 810e046:	4407      	add	r7, r0
 810e048:	eba8 0800 	sub.w	r8, r8, r0
 810e04c:	e7e9      	b.n	810e022 <__sflush_r+0xda>
 810e04e:	bf00      	nop
 810e050:	20400001 	.word	0x20400001

0810e054 <_fflush_r>:
 810e054:	b538      	push	{r3, r4, r5, lr}
 810e056:	690b      	ldr	r3, [r1, #16]
 810e058:	4605      	mov	r5, r0
 810e05a:	460c      	mov	r4, r1
 810e05c:	b1db      	cbz	r3, 810e096 <_fflush_r+0x42>
 810e05e:	b118      	cbz	r0, 810e068 <_fflush_r+0x14>
 810e060:	6983      	ldr	r3, [r0, #24]
 810e062:	b90b      	cbnz	r3, 810e068 <_fflush_r+0x14>
 810e064:	f000 f860 	bl	810e128 <__sinit>
 810e068:	4b0c      	ldr	r3, [pc, #48]	; (810e09c <_fflush_r+0x48>)
 810e06a:	429c      	cmp	r4, r3
 810e06c:	d109      	bne.n	810e082 <_fflush_r+0x2e>
 810e06e:	686c      	ldr	r4, [r5, #4]
 810e070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810e074:	b17b      	cbz	r3, 810e096 <_fflush_r+0x42>
 810e076:	4621      	mov	r1, r4
 810e078:	4628      	mov	r0, r5
 810e07a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810e07e:	f7ff bf63 	b.w	810df48 <__sflush_r>
 810e082:	4b07      	ldr	r3, [pc, #28]	; (810e0a0 <_fflush_r+0x4c>)
 810e084:	429c      	cmp	r4, r3
 810e086:	d101      	bne.n	810e08c <_fflush_r+0x38>
 810e088:	68ac      	ldr	r4, [r5, #8]
 810e08a:	e7f1      	b.n	810e070 <_fflush_r+0x1c>
 810e08c:	4b05      	ldr	r3, [pc, #20]	; (810e0a4 <_fflush_r+0x50>)
 810e08e:	429c      	cmp	r4, r3
 810e090:	bf08      	it	eq
 810e092:	68ec      	ldreq	r4, [r5, #12]
 810e094:	e7ec      	b.n	810e070 <_fflush_r+0x1c>
 810e096:	2000      	movs	r0, #0
 810e098:	bd38      	pop	{r3, r4, r5, pc}
 810e09a:	bf00      	nop
 810e09c:	0810f244 	.word	0x0810f244
 810e0a0:	0810f264 	.word	0x0810f264
 810e0a4:	0810f224 	.word	0x0810f224

0810e0a8 <std>:
 810e0a8:	2300      	movs	r3, #0
 810e0aa:	b510      	push	{r4, lr}
 810e0ac:	4604      	mov	r4, r0
 810e0ae:	e9c0 3300 	strd	r3, r3, [r0]
 810e0b2:	6083      	str	r3, [r0, #8]
 810e0b4:	8181      	strh	r1, [r0, #12]
 810e0b6:	6643      	str	r3, [r0, #100]	; 0x64
 810e0b8:	81c2      	strh	r2, [r0, #14]
 810e0ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810e0be:	6183      	str	r3, [r0, #24]
 810e0c0:	4619      	mov	r1, r3
 810e0c2:	2208      	movs	r2, #8
 810e0c4:	305c      	adds	r0, #92	; 0x5c
 810e0c6:	f7fe fb16 	bl	810c6f6 <memset>
 810e0ca:	4b05      	ldr	r3, [pc, #20]	; (810e0e0 <std+0x38>)
 810e0cc:	6263      	str	r3, [r4, #36]	; 0x24
 810e0ce:	4b05      	ldr	r3, [pc, #20]	; (810e0e4 <std+0x3c>)
 810e0d0:	62a3      	str	r3, [r4, #40]	; 0x28
 810e0d2:	4b05      	ldr	r3, [pc, #20]	; (810e0e8 <std+0x40>)
 810e0d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 810e0d6:	4b05      	ldr	r3, [pc, #20]	; (810e0ec <std+0x44>)
 810e0d8:	6224      	str	r4, [r4, #32]
 810e0da:	6323      	str	r3, [r4, #48]	; 0x30
 810e0dc:	bd10      	pop	{r4, pc}
 810e0de:	bf00      	nop
 810e0e0:	0810ecf5 	.word	0x0810ecf5
 810e0e4:	0810ed17 	.word	0x0810ed17
 810e0e8:	0810ed4f 	.word	0x0810ed4f
 810e0ec:	0810ed73 	.word	0x0810ed73

0810e0f0 <_cleanup_r>:
 810e0f0:	4901      	ldr	r1, [pc, #4]	; (810e0f8 <_cleanup_r+0x8>)
 810e0f2:	f000 b885 	b.w	810e200 <_fwalk_reent>
 810e0f6:	bf00      	nop
 810e0f8:	0810e055 	.word	0x0810e055

0810e0fc <__sfmoreglue>:
 810e0fc:	b570      	push	{r4, r5, r6, lr}
 810e0fe:	1e4a      	subs	r2, r1, #1
 810e100:	2568      	movs	r5, #104	; 0x68
 810e102:	4355      	muls	r5, r2
 810e104:	460e      	mov	r6, r1
 810e106:	f105 0174 	add.w	r1, r5, #116	; 0x74
 810e10a:	f000 fc49 	bl	810e9a0 <_malloc_r>
 810e10e:	4604      	mov	r4, r0
 810e110:	b140      	cbz	r0, 810e124 <__sfmoreglue+0x28>
 810e112:	2100      	movs	r1, #0
 810e114:	e9c0 1600 	strd	r1, r6, [r0]
 810e118:	300c      	adds	r0, #12
 810e11a:	60a0      	str	r0, [r4, #8]
 810e11c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 810e120:	f7fe fae9 	bl	810c6f6 <memset>
 810e124:	4620      	mov	r0, r4
 810e126:	bd70      	pop	{r4, r5, r6, pc}

0810e128 <__sinit>:
 810e128:	6983      	ldr	r3, [r0, #24]
 810e12a:	b510      	push	{r4, lr}
 810e12c:	4604      	mov	r4, r0
 810e12e:	bb33      	cbnz	r3, 810e17e <__sinit+0x56>
 810e130:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 810e134:	6503      	str	r3, [r0, #80]	; 0x50
 810e136:	4b12      	ldr	r3, [pc, #72]	; (810e180 <__sinit+0x58>)
 810e138:	4a12      	ldr	r2, [pc, #72]	; (810e184 <__sinit+0x5c>)
 810e13a:	681b      	ldr	r3, [r3, #0]
 810e13c:	6282      	str	r2, [r0, #40]	; 0x28
 810e13e:	4298      	cmp	r0, r3
 810e140:	bf04      	itt	eq
 810e142:	2301      	moveq	r3, #1
 810e144:	6183      	streq	r3, [r0, #24]
 810e146:	f000 f81f 	bl	810e188 <__sfp>
 810e14a:	6060      	str	r0, [r4, #4]
 810e14c:	4620      	mov	r0, r4
 810e14e:	f000 f81b 	bl	810e188 <__sfp>
 810e152:	60a0      	str	r0, [r4, #8]
 810e154:	4620      	mov	r0, r4
 810e156:	f000 f817 	bl	810e188 <__sfp>
 810e15a:	2200      	movs	r2, #0
 810e15c:	60e0      	str	r0, [r4, #12]
 810e15e:	2104      	movs	r1, #4
 810e160:	6860      	ldr	r0, [r4, #4]
 810e162:	f7ff ffa1 	bl	810e0a8 <std>
 810e166:	2201      	movs	r2, #1
 810e168:	2109      	movs	r1, #9
 810e16a:	68a0      	ldr	r0, [r4, #8]
 810e16c:	f7ff ff9c 	bl	810e0a8 <std>
 810e170:	2202      	movs	r2, #2
 810e172:	2112      	movs	r1, #18
 810e174:	68e0      	ldr	r0, [r4, #12]
 810e176:	f7ff ff97 	bl	810e0a8 <std>
 810e17a:	2301      	movs	r3, #1
 810e17c:	61a3      	str	r3, [r4, #24]
 810e17e:	bd10      	pop	{r4, pc}
 810e180:	0810f1dc 	.word	0x0810f1dc
 810e184:	0810e0f1 	.word	0x0810e0f1

0810e188 <__sfp>:
 810e188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e18a:	4b1b      	ldr	r3, [pc, #108]	; (810e1f8 <__sfp+0x70>)
 810e18c:	681e      	ldr	r6, [r3, #0]
 810e18e:	69b3      	ldr	r3, [r6, #24]
 810e190:	4607      	mov	r7, r0
 810e192:	b913      	cbnz	r3, 810e19a <__sfp+0x12>
 810e194:	4630      	mov	r0, r6
 810e196:	f7ff ffc7 	bl	810e128 <__sinit>
 810e19a:	3648      	adds	r6, #72	; 0x48
 810e19c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 810e1a0:	3b01      	subs	r3, #1
 810e1a2:	d503      	bpl.n	810e1ac <__sfp+0x24>
 810e1a4:	6833      	ldr	r3, [r6, #0]
 810e1a6:	b133      	cbz	r3, 810e1b6 <__sfp+0x2e>
 810e1a8:	6836      	ldr	r6, [r6, #0]
 810e1aa:	e7f7      	b.n	810e19c <__sfp+0x14>
 810e1ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 810e1b0:	b16d      	cbz	r5, 810e1ce <__sfp+0x46>
 810e1b2:	3468      	adds	r4, #104	; 0x68
 810e1b4:	e7f4      	b.n	810e1a0 <__sfp+0x18>
 810e1b6:	2104      	movs	r1, #4
 810e1b8:	4638      	mov	r0, r7
 810e1ba:	f7ff ff9f 	bl	810e0fc <__sfmoreglue>
 810e1be:	6030      	str	r0, [r6, #0]
 810e1c0:	2800      	cmp	r0, #0
 810e1c2:	d1f1      	bne.n	810e1a8 <__sfp+0x20>
 810e1c4:	230c      	movs	r3, #12
 810e1c6:	603b      	str	r3, [r7, #0]
 810e1c8:	4604      	mov	r4, r0
 810e1ca:	4620      	mov	r0, r4
 810e1cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810e1ce:	4b0b      	ldr	r3, [pc, #44]	; (810e1fc <__sfp+0x74>)
 810e1d0:	6665      	str	r5, [r4, #100]	; 0x64
 810e1d2:	e9c4 5500 	strd	r5, r5, [r4]
 810e1d6:	60a5      	str	r5, [r4, #8]
 810e1d8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 810e1dc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 810e1e0:	2208      	movs	r2, #8
 810e1e2:	4629      	mov	r1, r5
 810e1e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 810e1e8:	f7fe fa85 	bl	810c6f6 <memset>
 810e1ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 810e1f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 810e1f4:	e7e9      	b.n	810e1ca <__sfp+0x42>
 810e1f6:	bf00      	nop
 810e1f8:	0810f1dc 	.word	0x0810f1dc
 810e1fc:	ffff0001 	.word	0xffff0001

0810e200 <_fwalk_reent>:
 810e200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810e204:	4680      	mov	r8, r0
 810e206:	4689      	mov	r9, r1
 810e208:	f100 0448 	add.w	r4, r0, #72	; 0x48
 810e20c:	2600      	movs	r6, #0
 810e20e:	b914      	cbnz	r4, 810e216 <_fwalk_reent+0x16>
 810e210:	4630      	mov	r0, r6
 810e212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810e216:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 810e21a:	3f01      	subs	r7, #1
 810e21c:	d501      	bpl.n	810e222 <_fwalk_reent+0x22>
 810e21e:	6824      	ldr	r4, [r4, #0]
 810e220:	e7f5      	b.n	810e20e <_fwalk_reent+0xe>
 810e222:	89ab      	ldrh	r3, [r5, #12]
 810e224:	2b01      	cmp	r3, #1
 810e226:	d907      	bls.n	810e238 <_fwalk_reent+0x38>
 810e228:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810e22c:	3301      	adds	r3, #1
 810e22e:	d003      	beq.n	810e238 <_fwalk_reent+0x38>
 810e230:	4629      	mov	r1, r5
 810e232:	4640      	mov	r0, r8
 810e234:	47c8      	blx	r9
 810e236:	4306      	orrs	r6, r0
 810e238:	3568      	adds	r5, #104	; 0x68
 810e23a:	e7ee      	b.n	810e21a <_fwalk_reent+0x1a>

0810e23c <_localeconv_r>:
 810e23c:	4b04      	ldr	r3, [pc, #16]	; (810e250 <_localeconv_r+0x14>)
 810e23e:	681b      	ldr	r3, [r3, #0]
 810e240:	6a18      	ldr	r0, [r3, #32]
 810e242:	4b04      	ldr	r3, [pc, #16]	; (810e254 <_localeconv_r+0x18>)
 810e244:	2800      	cmp	r0, #0
 810e246:	bf08      	it	eq
 810e248:	4618      	moveq	r0, r3
 810e24a:	30f0      	adds	r0, #240	; 0xf0
 810e24c:	4770      	bx	lr
 810e24e:	bf00      	nop
 810e250:	1000003c 	.word	0x1000003c
 810e254:	100000a0 	.word	0x100000a0

0810e258 <__swhatbuf_r>:
 810e258:	b570      	push	{r4, r5, r6, lr}
 810e25a:	460e      	mov	r6, r1
 810e25c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810e260:	2900      	cmp	r1, #0
 810e262:	b096      	sub	sp, #88	; 0x58
 810e264:	4614      	mov	r4, r2
 810e266:	461d      	mov	r5, r3
 810e268:	da07      	bge.n	810e27a <__swhatbuf_r+0x22>
 810e26a:	2300      	movs	r3, #0
 810e26c:	602b      	str	r3, [r5, #0]
 810e26e:	89b3      	ldrh	r3, [r6, #12]
 810e270:	061a      	lsls	r2, r3, #24
 810e272:	d410      	bmi.n	810e296 <__swhatbuf_r+0x3e>
 810e274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810e278:	e00e      	b.n	810e298 <__swhatbuf_r+0x40>
 810e27a:	466a      	mov	r2, sp
 810e27c:	f000 fda0 	bl	810edc0 <_fstat_r>
 810e280:	2800      	cmp	r0, #0
 810e282:	dbf2      	blt.n	810e26a <__swhatbuf_r+0x12>
 810e284:	9a01      	ldr	r2, [sp, #4]
 810e286:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 810e28a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 810e28e:	425a      	negs	r2, r3
 810e290:	415a      	adcs	r2, r3
 810e292:	602a      	str	r2, [r5, #0]
 810e294:	e7ee      	b.n	810e274 <__swhatbuf_r+0x1c>
 810e296:	2340      	movs	r3, #64	; 0x40
 810e298:	2000      	movs	r0, #0
 810e29a:	6023      	str	r3, [r4, #0]
 810e29c:	b016      	add	sp, #88	; 0x58
 810e29e:	bd70      	pop	{r4, r5, r6, pc}

0810e2a0 <__smakebuf_r>:
 810e2a0:	898b      	ldrh	r3, [r1, #12]
 810e2a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810e2a4:	079d      	lsls	r5, r3, #30
 810e2a6:	4606      	mov	r6, r0
 810e2a8:	460c      	mov	r4, r1
 810e2aa:	d507      	bpl.n	810e2bc <__smakebuf_r+0x1c>
 810e2ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810e2b0:	6023      	str	r3, [r4, #0]
 810e2b2:	6123      	str	r3, [r4, #16]
 810e2b4:	2301      	movs	r3, #1
 810e2b6:	6163      	str	r3, [r4, #20]
 810e2b8:	b002      	add	sp, #8
 810e2ba:	bd70      	pop	{r4, r5, r6, pc}
 810e2bc:	ab01      	add	r3, sp, #4
 810e2be:	466a      	mov	r2, sp
 810e2c0:	f7ff ffca 	bl	810e258 <__swhatbuf_r>
 810e2c4:	9900      	ldr	r1, [sp, #0]
 810e2c6:	4605      	mov	r5, r0
 810e2c8:	4630      	mov	r0, r6
 810e2ca:	f000 fb69 	bl	810e9a0 <_malloc_r>
 810e2ce:	b948      	cbnz	r0, 810e2e4 <__smakebuf_r+0x44>
 810e2d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810e2d4:	059a      	lsls	r2, r3, #22
 810e2d6:	d4ef      	bmi.n	810e2b8 <__smakebuf_r+0x18>
 810e2d8:	f023 0303 	bic.w	r3, r3, #3
 810e2dc:	f043 0302 	orr.w	r3, r3, #2
 810e2e0:	81a3      	strh	r3, [r4, #12]
 810e2e2:	e7e3      	b.n	810e2ac <__smakebuf_r+0xc>
 810e2e4:	4b0d      	ldr	r3, [pc, #52]	; (810e31c <__smakebuf_r+0x7c>)
 810e2e6:	62b3      	str	r3, [r6, #40]	; 0x28
 810e2e8:	89a3      	ldrh	r3, [r4, #12]
 810e2ea:	6020      	str	r0, [r4, #0]
 810e2ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810e2f0:	81a3      	strh	r3, [r4, #12]
 810e2f2:	9b00      	ldr	r3, [sp, #0]
 810e2f4:	6163      	str	r3, [r4, #20]
 810e2f6:	9b01      	ldr	r3, [sp, #4]
 810e2f8:	6120      	str	r0, [r4, #16]
 810e2fa:	b15b      	cbz	r3, 810e314 <__smakebuf_r+0x74>
 810e2fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810e300:	4630      	mov	r0, r6
 810e302:	f000 fd6f 	bl	810ede4 <_isatty_r>
 810e306:	b128      	cbz	r0, 810e314 <__smakebuf_r+0x74>
 810e308:	89a3      	ldrh	r3, [r4, #12]
 810e30a:	f023 0303 	bic.w	r3, r3, #3
 810e30e:	f043 0301 	orr.w	r3, r3, #1
 810e312:	81a3      	strh	r3, [r4, #12]
 810e314:	89a3      	ldrh	r3, [r4, #12]
 810e316:	431d      	orrs	r5, r3
 810e318:	81a5      	strh	r5, [r4, #12]
 810e31a:	e7cd      	b.n	810e2b8 <__smakebuf_r+0x18>
 810e31c:	0810e0f1 	.word	0x0810e0f1

0810e320 <malloc>:
 810e320:	4b02      	ldr	r3, [pc, #8]	; (810e32c <malloc+0xc>)
 810e322:	4601      	mov	r1, r0
 810e324:	6818      	ldr	r0, [r3, #0]
 810e326:	f000 bb3b 	b.w	810e9a0 <_malloc_r>
 810e32a:	bf00      	nop
 810e32c:	1000003c 	.word	0x1000003c

0810e330 <_Balloc>:
 810e330:	b570      	push	{r4, r5, r6, lr}
 810e332:	6a45      	ldr	r5, [r0, #36]	; 0x24
 810e334:	4604      	mov	r4, r0
 810e336:	460e      	mov	r6, r1
 810e338:	b93d      	cbnz	r5, 810e34a <_Balloc+0x1a>
 810e33a:	2010      	movs	r0, #16
 810e33c:	f7ff fff0 	bl	810e320 <malloc>
 810e340:	6260      	str	r0, [r4, #36]	; 0x24
 810e342:	e9c0 5501 	strd	r5, r5, [r0, #4]
 810e346:	6005      	str	r5, [r0, #0]
 810e348:	60c5      	str	r5, [r0, #12]
 810e34a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 810e34c:	68eb      	ldr	r3, [r5, #12]
 810e34e:	b183      	cbz	r3, 810e372 <_Balloc+0x42>
 810e350:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810e352:	68db      	ldr	r3, [r3, #12]
 810e354:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 810e358:	b9b8      	cbnz	r0, 810e38a <_Balloc+0x5a>
 810e35a:	2101      	movs	r1, #1
 810e35c:	fa01 f506 	lsl.w	r5, r1, r6
 810e360:	1d6a      	adds	r2, r5, #5
 810e362:	0092      	lsls	r2, r2, #2
 810e364:	4620      	mov	r0, r4
 810e366:	f000 fabf 	bl	810e8e8 <_calloc_r>
 810e36a:	b160      	cbz	r0, 810e386 <_Balloc+0x56>
 810e36c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 810e370:	e00e      	b.n	810e390 <_Balloc+0x60>
 810e372:	2221      	movs	r2, #33	; 0x21
 810e374:	2104      	movs	r1, #4
 810e376:	4620      	mov	r0, r4
 810e378:	f000 fab6 	bl	810e8e8 <_calloc_r>
 810e37c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810e37e:	60e8      	str	r0, [r5, #12]
 810e380:	68db      	ldr	r3, [r3, #12]
 810e382:	2b00      	cmp	r3, #0
 810e384:	d1e4      	bne.n	810e350 <_Balloc+0x20>
 810e386:	2000      	movs	r0, #0
 810e388:	bd70      	pop	{r4, r5, r6, pc}
 810e38a:	6802      	ldr	r2, [r0, #0]
 810e38c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 810e390:	2300      	movs	r3, #0
 810e392:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810e396:	e7f7      	b.n	810e388 <_Balloc+0x58>

0810e398 <_Bfree>:
 810e398:	b570      	push	{r4, r5, r6, lr}
 810e39a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 810e39c:	4606      	mov	r6, r0
 810e39e:	460d      	mov	r5, r1
 810e3a0:	b93c      	cbnz	r4, 810e3b2 <_Bfree+0x1a>
 810e3a2:	2010      	movs	r0, #16
 810e3a4:	f7ff ffbc 	bl	810e320 <malloc>
 810e3a8:	6270      	str	r0, [r6, #36]	; 0x24
 810e3aa:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810e3ae:	6004      	str	r4, [r0, #0]
 810e3b0:	60c4      	str	r4, [r0, #12]
 810e3b2:	b13d      	cbz	r5, 810e3c4 <_Bfree+0x2c>
 810e3b4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 810e3b6:	686a      	ldr	r2, [r5, #4]
 810e3b8:	68db      	ldr	r3, [r3, #12]
 810e3ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810e3be:	6029      	str	r1, [r5, #0]
 810e3c0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 810e3c4:	bd70      	pop	{r4, r5, r6, pc}

0810e3c6 <__multadd>:
 810e3c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810e3ca:	690d      	ldr	r5, [r1, #16]
 810e3cc:	461f      	mov	r7, r3
 810e3ce:	4606      	mov	r6, r0
 810e3d0:	460c      	mov	r4, r1
 810e3d2:	f101 0c14 	add.w	ip, r1, #20
 810e3d6:	2300      	movs	r3, #0
 810e3d8:	f8dc 0000 	ldr.w	r0, [ip]
 810e3dc:	b281      	uxth	r1, r0
 810e3de:	fb02 7101 	mla	r1, r2, r1, r7
 810e3e2:	0c0f      	lsrs	r7, r1, #16
 810e3e4:	0c00      	lsrs	r0, r0, #16
 810e3e6:	fb02 7000 	mla	r0, r2, r0, r7
 810e3ea:	b289      	uxth	r1, r1
 810e3ec:	3301      	adds	r3, #1
 810e3ee:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 810e3f2:	429d      	cmp	r5, r3
 810e3f4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 810e3f8:	f84c 1b04 	str.w	r1, [ip], #4
 810e3fc:	dcec      	bgt.n	810e3d8 <__multadd+0x12>
 810e3fe:	b1d7      	cbz	r7, 810e436 <__multadd+0x70>
 810e400:	68a3      	ldr	r3, [r4, #8]
 810e402:	42ab      	cmp	r3, r5
 810e404:	dc12      	bgt.n	810e42c <__multadd+0x66>
 810e406:	6861      	ldr	r1, [r4, #4]
 810e408:	4630      	mov	r0, r6
 810e40a:	3101      	adds	r1, #1
 810e40c:	f7ff ff90 	bl	810e330 <_Balloc>
 810e410:	6922      	ldr	r2, [r4, #16]
 810e412:	3202      	adds	r2, #2
 810e414:	f104 010c 	add.w	r1, r4, #12
 810e418:	4680      	mov	r8, r0
 810e41a:	0092      	lsls	r2, r2, #2
 810e41c:	300c      	adds	r0, #12
 810e41e:	f7fe f95f 	bl	810c6e0 <memcpy>
 810e422:	4621      	mov	r1, r4
 810e424:	4630      	mov	r0, r6
 810e426:	f7ff ffb7 	bl	810e398 <_Bfree>
 810e42a:	4644      	mov	r4, r8
 810e42c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810e430:	3501      	adds	r5, #1
 810e432:	615f      	str	r7, [r3, #20]
 810e434:	6125      	str	r5, [r4, #16]
 810e436:	4620      	mov	r0, r4
 810e438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810e43c <__hi0bits>:
 810e43c:	0c02      	lsrs	r2, r0, #16
 810e43e:	0412      	lsls	r2, r2, #16
 810e440:	4603      	mov	r3, r0
 810e442:	b9b2      	cbnz	r2, 810e472 <__hi0bits+0x36>
 810e444:	0403      	lsls	r3, r0, #16
 810e446:	2010      	movs	r0, #16
 810e448:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 810e44c:	bf04      	itt	eq
 810e44e:	021b      	lsleq	r3, r3, #8
 810e450:	3008      	addeq	r0, #8
 810e452:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 810e456:	bf04      	itt	eq
 810e458:	011b      	lsleq	r3, r3, #4
 810e45a:	3004      	addeq	r0, #4
 810e45c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 810e460:	bf04      	itt	eq
 810e462:	009b      	lsleq	r3, r3, #2
 810e464:	3002      	addeq	r0, #2
 810e466:	2b00      	cmp	r3, #0
 810e468:	db06      	blt.n	810e478 <__hi0bits+0x3c>
 810e46a:	005b      	lsls	r3, r3, #1
 810e46c:	d503      	bpl.n	810e476 <__hi0bits+0x3a>
 810e46e:	3001      	adds	r0, #1
 810e470:	4770      	bx	lr
 810e472:	2000      	movs	r0, #0
 810e474:	e7e8      	b.n	810e448 <__hi0bits+0xc>
 810e476:	2020      	movs	r0, #32
 810e478:	4770      	bx	lr

0810e47a <__lo0bits>:
 810e47a:	6803      	ldr	r3, [r0, #0]
 810e47c:	f013 0207 	ands.w	r2, r3, #7
 810e480:	4601      	mov	r1, r0
 810e482:	d00b      	beq.n	810e49c <__lo0bits+0x22>
 810e484:	07da      	lsls	r2, r3, #31
 810e486:	d423      	bmi.n	810e4d0 <__lo0bits+0x56>
 810e488:	0798      	lsls	r0, r3, #30
 810e48a:	bf49      	itett	mi
 810e48c:	085b      	lsrmi	r3, r3, #1
 810e48e:	089b      	lsrpl	r3, r3, #2
 810e490:	2001      	movmi	r0, #1
 810e492:	600b      	strmi	r3, [r1, #0]
 810e494:	bf5c      	itt	pl
 810e496:	600b      	strpl	r3, [r1, #0]
 810e498:	2002      	movpl	r0, #2
 810e49a:	4770      	bx	lr
 810e49c:	b298      	uxth	r0, r3
 810e49e:	b9a8      	cbnz	r0, 810e4cc <__lo0bits+0x52>
 810e4a0:	0c1b      	lsrs	r3, r3, #16
 810e4a2:	2010      	movs	r0, #16
 810e4a4:	f013 0fff 	tst.w	r3, #255	; 0xff
 810e4a8:	bf04      	itt	eq
 810e4aa:	0a1b      	lsreq	r3, r3, #8
 810e4ac:	3008      	addeq	r0, #8
 810e4ae:	071a      	lsls	r2, r3, #28
 810e4b0:	bf04      	itt	eq
 810e4b2:	091b      	lsreq	r3, r3, #4
 810e4b4:	3004      	addeq	r0, #4
 810e4b6:	079a      	lsls	r2, r3, #30
 810e4b8:	bf04      	itt	eq
 810e4ba:	089b      	lsreq	r3, r3, #2
 810e4bc:	3002      	addeq	r0, #2
 810e4be:	07da      	lsls	r2, r3, #31
 810e4c0:	d402      	bmi.n	810e4c8 <__lo0bits+0x4e>
 810e4c2:	085b      	lsrs	r3, r3, #1
 810e4c4:	d006      	beq.n	810e4d4 <__lo0bits+0x5a>
 810e4c6:	3001      	adds	r0, #1
 810e4c8:	600b      	str	r3, [r1, #0]
 810e4ca:	4770      	bx	lr
 810e4cc:	4610      	mov	r0, r2
 810e4ce:	e7e9      	b.n	810e4a4 <__lo0bits+0x2a>
 810e4d0:	2000      	movs	r0, #0
 810e4d2:	4770      	bx	lr
 810e4d4:	2020      	movs	r0, #32
 810e4d6:	4770      	bx	lr

0810e4d8 <__i2b>:
 810e4d8:	b510      	push	{r4, lr}
 810e4da:	460c      	mov	r4, r1
 810e4dc:	2101      	movs	r1, #1
 810e4de:	f7ff ff27 	bl	810e330 <_Balloc>
 810e4e2:	2201      	movs	r2, #1
 810e4e4:	6144      	str	r4, [r0, #20]
 810e4e6:	6102      	str	r2, [r0, #16]
 810e4e8:	bd10      	pop	{r4, pc}

0810e4ea <__multiply>:
 810e4ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e4ee:	4614      	mov	r4, r2
 810e4f0:	690a      	ldr	r2, [r1, #16]
 810e4f2:	6923      	ldr	r3, [r4, #16]
 810e4f4:	429a      	cmp	r2, r3
 810e4f6:	bfb8      	it	lt
 810e4f8:	460b      	movlt	r3, r1
 810e4fa:	4688      	mov	r8, r1
 810e4fc:	bfbc      	itt	lt
 810e4fe:	46a0      	movlt	r8, r4
 810e500:	461c      	movlt	r4, r3
 810e502:	f8d8 7010 	ldr.w	r7, [r8, #16]
 810e506:	f8d4 9010 	ldr.w	r9, [r4, #16]
 810e50a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810e50e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 810e512:	eb07 0609 	add.w	r6, r7, r9
 810e516:	42b3      	cmp	r3, r6
 810e518:	bfb8      	it	lt
 810e51a:	3101      	addlt	r1, #1
 810e51c:	f7ff ff08 	bl	810e330 <_Balloc>
 810e520:	f100 0514 	add.w	r5, r0, #20
 810e524:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 810e528:	462b      	mov	r3, r5
 810e52a:	2200      	movs	r2, #0
 810e52c:	4573      	cmp	r3, lr
 810e52e:	d316      	bcc.n	810e55e <__multiply+0x74>
 810e530:	f104 0214 	add.w	r2, r4, #20
 810e534:	f108 0114 	add.w	r1, r8, #20
 810e538:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 810e53c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 810e540:	9300      	str	r3, [sp, #0]
 810e542:	9b00      	ldr	r3, [sp, #0]
 810e544:	9201      	str	r2, [sp, #4]
 810e546:	4293      	cmp	r3, r2
 810e548:	d80c      	bhi.n	810e564 <__multiply+0x7a>
 810e54a:	2e00      	cmp	r6, #0
 810e54c:	dd03      	ble.n	810e556 <__multiply+0x6c>
 810e54e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 810e552:	2b00      	cmp	r3, #0
 810e554:	d05d      	beq.n	810e612 <__multiply+0x128>
 810e556:	6106      	str	r6, [r0, #16]
 810e558:	b003      	add	sp, #12
 810e55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e55e:	f843 2b04 	str.w	r2, [r3], #4
 810e562:	e7e3      	b.n	810e52c <__multiply+0x42>
 810e564:	f8b2 b000 	ldrh.w	fp, [r2]
 810e568:	f1bb 0f00 	cmp.w	fp, #0
 810e56c:	d023      	beq.n	810e5b6 <__multiply+0xcc>
 810e56e:	4689      	mov	r9, r1
 810e570:	46ac      	mov	ip, r5
 810e572:	f04f 0800 	mov.w	r8, #0
 810e576:	f859 4b04 	ldr.w	r4, [r9], #4
 810e57a:	f8dc a000 	ldr.w	sl, [ip]
 810e57e:	b2a3      	uxth	r3, r4
 810e580:	fa1f fa8a 	uxth.w	sl, sl
 810e584:	fb0b a303 	mla	r3, fp, r3, sl
 810e588:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 810e58c:	f8dc 4000 	ldr.w	r4, [ip]
 810e590:	4443      	add	r3, r8
 810e592:	ea4f 4814 	mov.w	r8, r4, lsr #16
 810e596:	fb0b 840a 	mla	r4, fp, sl, r8
 810e59a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 810e59e:	46e2      	mov	sl, ip
 810e5a0:	b29b      	uxth	r3, r3
 810e5a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 810e5a6:	454f      	cmp	r7, r9
 810e5a8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 810e5ac:	f84a 3b04 	str.w	r3, [sl], #4
 810e5b0:	d82b      	bhi.n	810e60a <__multiply+0x120>
 810e5b2:	f8cc 8004 	str.w	r8, [ip, #4]
 810e5b6:	9b01      	ldr	r3, [sp, #4]
 810e5b8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 810e5bc:	3204      	adds	r2, #4
 810e5be:	f1ba 0f00 	cmp.w	sl, #0
 810e5c2:	d020      	beq.n	810e606 <__multiply+0x11c>
 810e5c4:	682b      	ldr	r3, [r5, #0]
 810e5c6:	4689      	mov	r9, r1
 810e5c8:	46a8      	mov	r8, r5
 810e5ca:	f04f 0b00 	mov.w	fp, #0
 810e5ce:	f8b9 c000 	ldrh.w	ip, [r9]
 810e5d2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 810e5d6:	fb0a 440c 	mla	r4, sl, ip, r4
 810e5da:	445c      	add	r4, fp
 810e5dc:	46c4      	mov	ip, r8
 810e5de:	b29b      	uxth	r3, r3
 810e5e0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 810e5e4:	f84c 3b04 	str.w	r3, [ip], #4
 810e5e8:	f859 3b04 	ldr.w	r3, [r9], #4
 810e5ec:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 810e5f0:	0c1b      	lsrs	r3, r3, #16
 810e5f2:	fb0a b303 	mla	r3, sl, r3, fp
 810e5f6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 810e5fa:	454f      	cmp	r7, r9
 810e5fc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 810e600:	d805      	bhi.n	810e60e <__multiply+0x124>
 810e602:	f8c8 3004 	str.w	r3, [r8, #4]
 810e606:	3504      	adds	r5, #4
 810e608:	e79b      	b.n	810e542 <__multiply+0x58>
 810e60a:	46d4      	mov	ip, sl
 810e60c:	e7b3      	b.n	810e576 <__multiply+0x8c>
 810e60e:	46e0      	mov	r8, ip
 810e610:	e7dd      	b.n	810e5ce <__multiply+0xe4>
 810e612:	3e01      	subs	r6, #1
 810e614:	e799      	b.n	810e54a <__multiply+0x60>
	...

0810e618 <__pow5mult>:
 810e618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810e61c:	4615      	mov	r5, r2
 810e61e:	f012 0203 	ands.w	r2, r2, #3
 810e622:	4606      	mov	r6, r0
 810e624:	460f      	mov	r7, r1
 810e626:	d007      	beq.n	810e638 <__pow5mult+0x20>
 810e628:	3a01      	subs	r2, #1
 810e62a:	4c21      	ldr	r4, [pc, #132]	; (810e6b0 <__pow5mult+0x98>)
 810e62c:	2300      	movs	r3, #0
 810e62e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810e632:	f7ff fec8 	bl	810e3c6 <__multadd>
 810e636:	4607      	mov	r7, r0
 810e638:	10ad      	asrs	r5, r5, #2
 810e63a:	d035      	beq.n	810e6a8 <__pow5mult+0x90>
 810e63c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 810e63e:	b93c      	cbnz	r4, 810e650 <__pow5mult+0x38>
 810e640:	2010      	movs	r0, #16
 810e642:	f7ff fe6d 	bl	810e320 <malloc>
 810e646:	6270      	str	r0, [r6, #36]	; 0x24
 810e648:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810e64c:	6004      	str	r4, [r0, #0]
 810e64e:	60c4      	str	r4, [r0, #12]
 810e650:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 810e654:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810e658:	b94c      	cbnz	r4, 810e66e <__pow5mult+0x56>
 810e65a:	f240 2171 	movw	r1, #625	; 0x271
 810e65e:	4630      	mov	r0, r6
 810e660:	f7ff ff3a 	bl	810e4d8 <__i2b>
 810e664:	2300      	movs	r3, #0
 810e666:	f8c8 0008 	str.w	r0, [r8, #8]
 810e66a:	4604      	mov	r4, r0
 810e66c:	6003      	str	r3, [r0, #0]
 810e66e:	f04f 0800 	mov.w	r8, #0
 810e672:	07eb      	lsls	r3, r5, #31
 810e674:	d50a      	bpl.n	810e68c <__pow5mult+0x74>
 810e676:	4639      	mov	r1, r7
 810e678:	4622      	mov	r2, r4
 810e67a:	4630      	mov	r0, r6
 810e67c:	f7ff ff35 	bl	810e4ea <__multiply>
 810e680:	4639      	mov	r1, r7
 810e682:	4681      	mov	r9, r0
 810e684:	4630      	mov	r0, r6
 810e686:	f7ff fe87 	bl	810e398 <_Bfree>
 810e68a:	464f      	mov	r7, r9
 810e68c:	106d      	asrs	r5, r5, #1
 810e68e:	d00b      	beq.n	810e6a8 <__pow5mult+0x90>
 810e690:	6820      	ldr	r0, [r4, #0]
 810e692:	b938      	cbnz	r0, 810e6a4 <__pow5mult+0x8c>
 810e694:	4622      	mov	r2, r4
 810e696:	4621      	mov	r1, r4
 810e698:	4630      	mov	r0, r6
 810e69a:	f7ff ff26 	bl	810e4ea <__multiply>
 810e69e:	6020      	str	r0, [r4, #0]
 810e6a0:	f8c0 8000 	str.w	r8, [r0]
 810e6a4:	4604      	mov	r4, r0
 810e6a6:	e7e4      	b.n	810e672 <__pow5mult+0x5a>
 810e6a8:	4638      	mov	r0, r7
 810e6aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810e6ae:	bf00      	nop
 810e6b0:	0810f378 	.word	0x0810f378

0810e6b4 <__lshift>:
 810e6b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810e6b8:	460c      	mov	r4, r1
 810e6ba:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810e6be:	6923      	ldr	r3, [r4, #16]
 810e6c0:	6849      	ldr	r1, [r1, #4]
 810e6c2:	eb0a 0903 	add.w	r9, sl, r3
 810e6c6:	68a3      	ldr	r3, [r4, #8]
 810e6c8:	4607      	mov	r7, r0
 810e6ca:	4616      	mov	r6, r2
 810e6cc:	f109 0501 	add.w	r5, r9, #1
 810e6d0:	42ab      	cmp	r3, r5
 810e6d2:	db32      	blt.n	810e73a <__lshift+0x86>
 810e6d4:	4638      	mov	r0, r7
 810e6d6:	f7ff fe2b 	bl	810e330 <_Balloc>
 810e6da:	2300      	movs	r3, #0
 810e6dc:	4680      	mov	r8, r0
 810e6de:	f100 0114 	add.w	r1, r0, #20
 810e6e2:	461a      	mov	r2, r3
 810e6e4:	4553      	cmp	r3, sl
 810e6e6:	db2b      	blt.n	810e740 <__lshift+0x8c>
 810e6e8:	6920      	ldr	r0, [r4, #16]
 810e6ea:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810e6ee:	f104 0314 	add.w	r3, r4, #20
 810e6f2:	f016 021f 	ands.w	r2, r6, #31
 810e6f6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810e6fa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810e6fe:	d025      	beq.n	810e74c <__lshift+0x98>
 810e700:	f1c2 0e20 	rsb	lr, r2, #32
 810e704:	2000      	movs	r0, #0
 810e706:	681e      	ldr	r6, [r3, #0]
 810e708:	468a      	mov	sl, r1
 810e70a:	4096      	lsls	r6, r2
 810e70c:	4330      	orrs	r0, r6
 810e70e:	f84a 0b04 	str.w	r0, [sl], #4
 810e712:	f853 0b04 	ldr.w	r0, [r3], #4
 810e716:	459c      	cmp	ip, r3
 810e718:	fa20 f00e 	lsr.w	r0, r0, lr
 810e71c:	d814      	bhi.n	810e748 <__lshift+0x94>
 810e71e:	6048      	str	r0, [r1, #4]
 810e720:	b108      	cbz	r0, 810e726 <__lshift+0x72>
 810e722:	f109 0502 	add.w	r5, r9, #2
 810e726:	3d01      	subs	r5, #1
 810e728:	4638      	mov	r0, r7
 810e72a:	f8c8 5010 	str.w	r5, [r8, #16]
 810e72e:	4621      	mov	r1, r4
 810e730:	f7ff fe32 	bl	810e398 <_Bfree>
 810e734:	4640      	mov	r0, r8
 810e736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810e73a:	3101      	adds	r1, #1
 810e73c:	005b      	lsls	r3, r3, #1
 810e73e:	e7c7      	b.n	810e6d0 <__lshift+0x1c>
 810e740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 810e744:	3301      	adds	r3, #1
 810e746:	e7cd      	b.n	810e6e4 <__lshift+0x30>
 810e748:	4651      	mov	r1, sl
 810e74a:	e7dc      	b.n	810e706 <__lshift+0x52>
 810e74c:	3904      	subs	r1, #4
 810e74e:	f853 2b04 	ldr.w	r2, [r3], #4
 810e752:	f841 2f04 	str.w	r2, [r1, #4]!
 810e756:	459c      	cmp	ip, r3
 810e758:	d8f9      	bhi.n	810e74e <__lshift+0x9a>
 810e75a:	e7e4      	b.n	810e726 <__lshift+0x72>

0810e75c <__mcmp>:
 810e75c:	6903      	ldr	r3, [r0, #16]
 810e75e:	690a      	ldr	r2, [r1, #16]
 810e760:	1a9b      	subs	r3, r3, r2
 810e762:	b530      	push	{r4, r5, lr}
 810e764:	d10c      	bne.n	810e780 <__mcmp+0x24>
 810e766:	0092      	lsls	r2, r2, #2
 810e768:	3014      	adds	r0, #20
 810e76a:	3114      	adds	r1, #20
 810e76c:	1884      	adds	r4, r0, r2
 810e76e:	4411      	add	r1, r2
 810e770:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 810e774:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 810e778:	4295      	cmp	r5, r2
 810e77a:	d003      	beq.n	810e784 <__mcmp+0x28>
 810e77c:	d305      	bcc.n	810e78a <__mcmp+0x2e>
 810e77e:	2301      	movs	r3, #1
 810e780:	4618      	mov	r0, r3
 810e782:	bd30      	pop	{r4, r5, pc}
 810e784:	42a0      	cmp	r0, r4
 810e786:	d3f3      	bcc.n	810e770 <__mcmp+0x14>
 810e788:	e7fa      	b.n	810e780 <__mcmp+0x24>
 810e78a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810e78e:	e7f7      	b.n	810e780 <__mcmp+0x24>

0810e790 <__mdiff>:
 810e790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810e794:	460d      	mov	r5, r1
 810e796:	4607      	mov	r7, r0
 810e798:	4611      	mov	r1, r2
 810e79a:	4628      	mov	r0, r5
 810e79c:	4614      	mov	r4, r2
 810e79e:	f7ff ffdd 	bl	810e75c <__mcmp>
 810e7a2:	1e06      	subs	r6, r0, #0
 810e7a4:	d108      	bne.n	810e7b8 <__mdiff+0x28>
 810e7a6:	4631      	mov	r1, r6
 810e7a8:	4638      	mov	r0, r7
 810e7aa:	f7ff fdc1 	bl	810e330 <_Balloc>
 810e7ae:	2301      	movs	r3, #1
 810e7b0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 810e7b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810e7b8:	bfa4      	itt	ge
 810e7ba:	4623      	movge	r3, r4
 810e7bc:	462c      	movge	r4, r5
 810e7be:	4638      	mov	r0, r7
 810e7c0:	6861      	ldr	r1, [r4, #4]
 810e7c2:	bfa6      	itte	ge
 810e7c4:	461d      	movge	r5, r3
 810e7c6:	2600      	movge	r6, #0
 810e7c8:	2601      	movlt	r6, #1
 810e7ca:	f7ff fdb1 	bl	810e330 <_Balloc>
 810e7ce:	692b      	ldr	r3, [r5, #16]
 810e7d0:	60c6      	str	r6, [r0, #12]
 810e7d2:	6926      	ldr	r6, [r4, #16]
 810e7d4:	f105 0914 	add.w	r9, r5, #20
 810e7d8:	f104 0214 	add.w	r2, r4, #20
 810e7dc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 810e7e0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 810e7e4:	f100 0514 	add.w	r5, r0, #20
 810e7e8:	f04f 0e00 	mov.w	lr, #0
 810e7ec:	f852 ab04 	ldr.w	sl, [r2], #4
 810e7f0:	f859 4b04 	ldr.w	r4, [r9], #4
 810e7f4:	fa1e f18a 	uxtah	r1, lr, sl
 810e7f8:	b2a3      	uxth	r3, r4
 810e7fa:	1ac9      	subs	r1, r1, r3
 810e7fc:	0c23      	lsrs	r3, r4, #16
 810e7fe:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 810e802:	eb03 4321 	add.w	r3, r3, r1, asr #16
 810e806:	b289      	uxth	r1, r1
 810e808:	ea4f 4e23 	mov.w	lr, r3, asr #16
 810e80c:	45c8      	cmp	r8, r9
 810e80e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 810e812:	4694      	mov	ip, r2
 810e814:	f845 3b04 	str.w	r3, [r5], #4
 810e818:	d8e8      	bhi.n	810e7ec <__mdiff+0x5c>
 810e81a:	45bc      	cmp	ip, r7
 810e81c:	d304      	bcc.n	810e828 <__mdiff+0x98>
 810e81e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 810e822:	b183      	cbz	r3, 810e846 <__mdiff+0xb6>
 810e824:	6106      	str	r6, [r0, #16]
 810e826:	e7c5      	b.n	810e7b4 <__mdiff+0x24>
 810e828:	f85c 1b04 	ldr.w	r1, [ip], #4
 810e82c:	fa1e f381 	uxtah	r3, lr, r1
 810e830:	141a      	asrs	r2, r3, #16
 810e832:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 810e836:	b29b      	uxth	r3, r3
 810e838:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810e83c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 810e840:	f845 3b04 	str.w	r3, [r5], #4
 810e844:	e7e9      	b.n	810e81a <__mdiff+0x8a>
 810e846:	3e01      	subs	r6, #1
 810e848:	e7e9      	b.n	810e81e <__mdiff+0x8e>

0810e84a <__d2b>:
 810e84a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810e84e:	460e      	mov	r6, r1
 810e850:	2101      	movs	r1, #1
 810e852:	ec59 8b10 	vmov	r8, r9, d0
 810e856:	4615      	mov	r5, r2
 810e858:	f7ff fd6a 	bl	810e330 <_Balloc>
 810e85c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 810e860:	4607      	mov	r7, r0
 810e862:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810e866:	bb34      	cbnz	r4, 810e8b6 <__d2b+0x6c>
 810e868:	9301      	str	r3, [sp, #4]
 810e86a:	f1b8 0300 	subs.w	r3, r8, #0
 810e86e:	d027      	beq.n	810e8c0 <__d2b+0x76>
 810e870:	a802      	add	r0, sp, #8
 810e872:	f840 3d08 	str.w	r3, [r0, #-8]!
 810e876:	f7ff fe00 	bl	810e47a <__lo0bits>
 810e87a:	9900      	ldr	r1, [sp, #0]
 810e87c:	b1f0      	cbz	r0, 810e8bc <__d2b+0x72>
 810e87e:	9a01      	ldr	r2, [sp, #4]
 810e880:	f1c0 0320 	rsb	r3, r0, #32
 810e884:	fa02 f303 	lsl.w	r3, r2, r3
 810e888:	430b      	orrs	r3, r1
 810e88a:	40c2      	lsrs	r2, r0
 810e88c:	617b      	str	r3, [r7, #20]
 810e88e:	9201      	str	r2, [sp, #4]
 810e890:	9b01      	ldr	r3, [sp, #4]
 810e892:	61bb      	str	r3, [r7, #24]
 810e894:	2b00      	cmp	r3, #0
 810e896:	bf14      	ite	ne
 810e898:	2102      	movne	r1, #2
 810e89a:	2101      	moveq	r1, #1
 810e89c:	6139      	str	r1, [r7, #16]
 810e89e:	b1c4      	cbz	r4, 810e8d2 <__d2b+0x88>
 810e8a0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 810e8a4:	4404      	add	r4, r0
 810e8a6:	6034      	str	r4, [r6, #0]
 810e8a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810e8ac:	6028      	str	r0, [r5, #0]
 810e8ae:	4638      	mov	r0, r7
 810e8b0:	b003      	add	sp, #12
 810e8b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810e8b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810e8ba:	e7d5      	b.n	810e868 <__d2b+0x1e>
 810e8bc:	6179      	str	r1, [r7, #20]
 810e8be:	e7e7      	b.n	810e890 <__d2b+0x46>
 810e8c0:	a801      	add	r0, sp, #4
 810e8c2:	f7ff fdda 	bl	810e47a <__lo0bits>
 810e8c6:	9b01      	ldr	r3, [sp, #4]
 810e8c8:	617b      	str	r3, [r7, #20]
 810e8ca:	2101      	movs	r1, #1
 810e8cc:	6139      	str	r1, [r7, #16]
 810e8ce:	3020      	adds	r0, #32
 810e8d0:	e7e5      	b.n	810e89e <__d2b+0x54>
 810e8d2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 810e8d6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810e8da:	6030      	str	r0, [r6, #0]
 810e8dc:	6918      	ldr	r0, [r3, #16]
 810e8de:	f7ff fdad 	bl	810e43c <__hi0bits>
 810e8e2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 810e8e6:	e7e1      	b.n	810e8ac <__d2b+0x62>

0810e8e8 <_calloc_r>:
 810e8e8:	b538      	push	{r3, r4, r5, lr}
 810e8ea:	fb02 f401 	mul.w	r4, r2, r1
 810e8ee:	4621      	mov	r1, r4
 810e8f0:	f000 f856 	bl	810e9a0 <_malloc_r>
 810e8f4:	4605      	mov	r5, r0
 810e8f6:	b118      	cbz	r0, 810e900 <_calloc_r+0x18>
 810e8f8:	4622      	mov	r2, r4
 810e8fa:	2100      	movs	r1, #0
 810e8fc:	f7fd fefb 	bl	810c6f6 <memset>
 810e900:	4628      	mov	r0, r5
 810e902:	bd38      	pop	{r3, r4, r5, pc}

0810e904 <_free_r>:
 810e904:	b538      	push	{r3, r4, r5, lr}
 810e906:	4605      	mov	r5, r0
 810e908:	2900      	cmp	r1, #0
 810e90a:	d045      	beq.n	810e998 <_free_r+0x94>
 810e90c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810e910:	1f0c      	subs	r4, r1, #4
 810e912:	2b00      	cmp	r3, #0
 810e914:	bfb8      	it	lt
 810e916:	18e4      	addlt	r4, r4, r3
 810e918:	f000 fa98 	bl	810ee4c <__malloc_lock>
 810e91c:	4a1f      	ldr	r2, [pc, #124]	; (810e99c <_free_r+0x98>)
 810e91e:	6813      	ldr	r3, [r2, #0]
 810e920:	4610      	mov	r0, r2
 810e922:	b933      	cbnz	r3, 810e932 <_free_r+0x2e>
 810e924:	6063      	str	r3, [r4, #4]
 810e926:	6014      	str	r4, [r2, #0]
 810e928:	4628      	mov	r0, r5
 810e92a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810e92e:	f000 ba8e 	b.w	810ee4e <__malloc_unlock>
 810e932:	42a3      	cmp	r3, r4
 810e934:	d90c      	bls.n	810e950 <_free_r+0x4c>
 810e936:	6821      	ldr	r1, [r4, #0]
 810e938:	1862      	adds	r2, r4, r1
 810e93a:	4293      	cmp	r3, r2
 810e93c:	bf04      	itt	eq
 810e93e:	681a      	ldreq	r2, [r3, #0]
 810e940:	685b      	ldreq	r3, [r3, #4]
 810e942:	6063      	str	r3, [r4, #4]
 810e944:	bf04      	itt	eq
 810e946:	1852      	addeq	r2, r2, r1
 810e948:	6022      	streq	r2, [r4, #0]
 810e94a:	6004      	str	r4, [r0, #0]
 810e94c:	e7ec      	b.n	810e928 <_free_r+0x24>
 810e94e:	4613      	mov	r3, r2
 810e950:	685a      	ldr	r2, [r3, #4]
 810e952:	b10a      	cbz	r2, 810e958 <_free_r+0x54>
 810e954:	42a2      	cmp	r2, r4
 810e956:	d9fa      	bls.n	810e94e <_free_r+0x4a>
 810e958:	6819      	ldr	r1, [r3, #0]
 810e95a:	1858      	adds	r0, r3, r1
 810e95c:	42a0      	cmp	r0, r4
 810e95e:	d10b      	bne.n	810e978 <_free_r+0x74>
 810e960:	6820      	ldr	r0, [r4, #0]
 810e962:	4401      	add	r1, r0
 810e964:	1858      	adds	r0, r3, r1
 810e966:	4282      	cmp	r2, r0
 810e968:	6019      	str	r1, [r3, #0]
 810e96a:	d1dd      	bne.n	810e928 <_free_r+0x24>
 810e96c:	6810      	ldr	r0, [r2, #0]
 810e96e:	6852      	ldr	r2, [r2, #4]
 810e970:	605a      	str	r2, [r3, #4]
 810e972:	4401      	add	r1, r0
 810e974:	6019      	str	r1, [r3, #0]
 810e976:	e7d7      	b.n	810e928 <_free_r+0x24>
 810e978:	d902      	bls.n	810e980 <_free_r+0x7c>
 810e97a:	230c      	movs	r3, #12
 810e97c:	602b      	str	r3, [r5, #0]
 810e97e:	e7d3      	b.n	810e928 <_free_r+0x24>
 810e980:	6820      	ldr	r0, [r4, #0]
 810e982:	1821      	adds	r1, r4, r0
 810e984:	428a      	cmp	r2, r1
 810e986:	bf04      	itt	eq
 810e988:	6811      	ldreq	r1, [r2, #0]
 810e98a:	6852      	ldreq	r2, [r2, #4]
 810e98c:	6062      	str	r2, [r4, #4]
 810e98e:	bf04      	itt	eq
 810e990:	1809      	addeq	r1, r1, r0
 810e992:	6021      	streq	r1, [r4, #0]
 810e994:	605c      	str	r4, [r3, #4]
 810e996:	e7c7      	b.n	810e928 <_free_r+0x24>
 810e998:	bd38      	pop	{r3, r4, r5, pc}
 810e99a:	bf00      	nop
 810e99c:	10004b40 	.word	0x10004b40

0810e9a0 <_malloc_r>:
 810e9a0:	b570      	push	{r4, r5, r6, lr}
 810e9a2:	1ccd      	adds	r5, r1, #3
 810e9a4:	f025 0503 	bic.w	r5, r5, #3
 810e9a8:	3508      	adds	r5, #8
 810e9aa:	2d0c      	cmp	r5, #12
 810e9ac:	bf38      	it	cc
 810e9ae:	250c      	movcc	r5, #12
 810e9b0:	2d00      	cmp	r5, #0
 810e9b2:	4606      	mov	r6, r0
 810e9b4:	db01      	blt.n	810e9ba <_malloc_r+0x1a>
 810e9b6:	42a9      	cmp	r1, r5
 810e9b8:	d903      	bls.n	810e9c2 <_malloc_r+0x22>
 810e9ba:	230c      	movs	r3, #12
 810e9bc:	6033      	str	r3, [r6, #0]
 810e9be:	2000      	movs	r0, #0
 810e9c0:	bd70      	pop	{r4, r5, r6, pc}
 810e9c2:	f000 fa43 	bl	810ee4c <__malloc_lock>
 810e9c6:	4a21      	ldr	r2, [pc, #132]	; (810ea4c <_malloc_r+0xac>)
 810e9c8:	6814      	ldr	r4, [r2, #0]
 810e9ca:	4621      	mov	r1, r4
 810e9cc:	b991      	cbnz	r1, 810e9f4 <_malloc_r+0x54>
 810e9ce:	4c20      	ldr	r4, [pc, #128]	; (810ea50 <_malloc_r+0xb0>)
 810e9d0:	6823      	ldr	r3, [r4, #0]
 810e9d2:	b91b      	cbnz	r3, 810e9dc <_malloc_r+0x3c>
 810e9d4:	4630      	mov	r0, r6
 810e9d6:	f000 f97d 	bl	810ecd4 <_sbrk_r>
 810e9da:	6020      	str	r0, [r4, #0]
 810e9dc:	4629      	mov	r1, r5
 810e9de:	4630      	mov	r0, r6
 810e9e0:	f000 f978 	bl	810ecd4 <_sbrk_r>
 810e9e4:	1c43      	adds	r3, r0, #1
 810e9e6:	d124      	bne.n	810ea32 <_malloc_r+0x92>
 810e9e8:	230c      	movs	r3, #12
 810e9ea:	6033      	str	r3, [r6, #0]
 810e9ec:	4630      	mov	r0, r6
 810e9ee:	f000 fa2e 	bl	810ee4e <__malloc_unlock>
 810e9f2:	e7e4      	b.n	810e9be <_malloc_r+0x1e>
 810e9f4:	680b      	ldr	r3, [r1, #0]
 810e9f6:	1b5b      	subs	r3, r3, r5
 810e9f8:	d418      	bmi.n	810ea2c <_malloc_r+0x8c>
 810e9fa:	2b0b      	cmp	r3, #11
 810e9fc:	d90f      	bls.n	810ea1e <_malloc_r+0x7e>
 810e9fe:	600b      	str	r3, [r1, #0]
 810ea00:	50cd      	str	r5, [r1, r3]
 810ea02:	18cc      	adds	r4, r1, r3
 810ea04:	4630      	mov	r0, r6
 810ea06:	f000 fa22 	bl	810ee4e <__malloc_unlock>
 810ea0a:	f104 000b 	add.w	r0, r4, #11
 810ea0e:	1d23      	adds	r3, r4, #4
 810ea10:	f020 0007 	bic.w	r0, r0, #7
 810ea14:	1ac3      	subs	r3, r0, r3
 810ea16:	d0d3      	beq.n	810e9c0 <_malloc_r+0x20>
 810ea18:	425a      	negs	r2, r3
 810ea1a:	50e2      	str	r2, [r4, r3]
 810ea1c:	e7d0      	b.n	810e9c0 <_malloc_r+0x20>
 810ea1e:	428c      	cmp	r4, r1
 810ea20:	684b      	ldr	r3, [r1, #4]
 810ea22:	bf16      	itet	ne
 810ea24:	6063      	strne	r3, [r4, #4]
 810ea26:	6013      	streq	r3, [r2, #0]
 810ea28:	460c      	movne	r4, r1
 810ea2a:	e7eb      	b.n	810ea04 <_malloc_r+0x64>
 810ea2c:	460c      	mov	r4, r1
 810ea2e:	6849      	ldr	r1, [r1, #4]
 810ea30:	e7cc      	b.n	810e9cc <_malloc_r+0x2c>
 810ea32:	1cc4      	adds	r4, r0, #3
 810ea34:	f024 0403 	bic.w	r4, r4, #3
 810ea38:	42a0      	cmp	r0, r4
 810ea3a:	d005      	beq.n	810ea48 <_malloc_r+0xa8>
 810ea3c:	1a21      	subs	r1, r4, r0
 810ea3e:	4630      	mov	r0, r6
 810ea40:	f000 f948 	bl	810ecd4 <_sbrk_r>
 810ea44:	3001      	adds	r0, #1
 810ea46:	d0cf      	beq.n	810e9e8 <_malloc_r+0x48>
 810ea48:	6025      	str	r5, [r4, #0]
 810ea4a:	e7db      	b.n	810ea04 <_malloc_r+0x64>
 810ea4c:	10004b40 	.word	0x10004b40
 810ea50:	10004b44 	.word	0x10004b44

0810ea54 <__sfputc_r>:
 810ea54:	6893      	ldr	r3, [r2, #8]
 810ea56:	3b01      	subs	r3, #1
 810ea58:	2b00      	cmp	r3, #0
 810ea5a:	b410      	push	{r4}
 810ea5c:	6093      	str	r3, [r2, #8]
 810ea5e:	da08      	bge.n	810ea72 <__sfputc_r+0x1e>
 810ea60:	6994      	ldr	r4, [r2, #24]
 810ea62:	42a3      	cmp	r3, r4
 810ea64:	db01      	blt.n	810ea6a <__sfputc_r+0x16>
 810ea66:	290a      	cmp	r1, #10
 810ea68:	d103      	bne.n	810ea72 <__sfputc_r+0x1e>
 810ea6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 810ea6e:	f7fe bb67 	b.w	810d140 <__swbuf_r>
 810ea72:	6813      	ldr	r3, [r2, #0]
 810ea74:	1c58      	adds	r0, r3, #1
 810ea76:	6010      	str	r0, [r2, #0]
 810ea78:	7019      	strb	r1, [r3, #0]
 810ea7a:	4608      	mov	r0, r1
 810ea7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 810ea80:	4770      	bx	lr

0810ea82 <__sfputs_r>:
 810ea82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810ea84:	4606      	mov	r6, r0
 810ea86:	460f      	mov	r7, r1
 810ea88:	4614      	mov	r4, r2
 810ea8a:	18d5      	adds	r5, r2, r3
 810ea8c:	42ac      	cmp	r4, r5
 810ea8e:	d101      	bne.n	810ea94 <__sfputs_r+0x12>
 810ea90:	2000      	movs	r0, #0
 810ea92:	e007      	b.n	810eaa4 <__sfputs_r+0x22>
 810ea94:	463a      	mov	r2, r7
 810ea96:	f814 1b01 	ldrb.w	r1, [r4], #1
 810ea9a:	4630      	mov	r0, r6
 810ea9c:	f7ff ffda 	bl	810ea54 <__sfputc_r>
 810eaa0:	1c43      	adds	r3, r0, #1
 810eaa2:	d1f3      	bne.n	810ea8c <__sfputs_r+0xa>
 810eaa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810eaa8 <_vfiprintf_r>:
 810eaa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810eaac:	460c      	mov	r4, r1
 810eaae:	b09d      	sub	sp, #116	; 0x74
 810eab0:	4617      	mov	r7, r2
 810eab2:	461d      	mov	r5, r3
 810eab4:	4606      	mov	r6, r0
 810eab6:	b118      	cbz	r0, 810eac0 <_vfiprintf_r+0x18>
 810eab8:	6983      	ldr	r3, [r0, #24]
 810eaba:	b90b      	cbnz	r3, 810eac0 <_vfiprintf_r+0x18>
 810eabc:	f7ff fb34 	bl	810e128 <__sinit>
 810eac0:	4b7c      	ldr	r3, [pc, #496]	; (810ecb4 <_vfiprintf_r+0x20c>)
 810eac2:	429c      	cmp	r4, r3
 810eac4:	d158      	bne.n	810eb78 <_vfiprintf_r+0xd0>
 810eac6:	6874      	ldr	r4, [r6, #4]
 810eac8:	89a3      	ldrh	r3, [r4, #12]
 810eaca:	0718      	lsls	r0, r3, #28
 810eacc:	d55e      	bpl.n	810eb8c <_vfiprintf_r+0xe4>
 810eace:	6923      	ldr	r3, [r4, #16]
 810ead0:	2b00      	cmp	r3, #0
 810ead2:	d05b      	beq.n	810eb8c <_vfiprintf_r+0xe4>
 810ead4:	2300      	movs	r3, #0
 810ead6:	9309      	str	r3, [sp, #36]	; 0x24
 810ead8:	2320      	movs	r3, #32
 810eada:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810eade:	2330      	movs	r3, #48	; 0x30
 810eae0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810eae4:	9503      	str	r5, [sp, #12]
 810eae6:	f04f 0b01 	mov.w	fp, #1
 810eaea:	46b8      	mov	r8, r7
 810eaec:	4645      	mov	r5, r8
 810eaee:	f815 3b01 	ldrb.w	r3, [r5], #1
 810eaf2:	b10b      	cbz	r3, 810eaf8 <_vfiprintf_r+0x50>
 810eaf4:	2b25      	cmp	r3, #37	; 0x25
 810eaf6:	d154      	bne.n	810eba2 <_vfiprintf_r+0xfa>
 810eaf8:	ebb8 0a07 	subs.w	sl, r8, r7
 810eafc:	d00b      	beq.n	810eb16 <_vfiprintf_r+0x6e>
 810eafe:	4653      	mov	r3, sl
 810eb00:	463a      	mov	r2, r7
 810eb02:	4621      	mov	r1, r4
 810eb04:	4630      	mov	r0, r6
 810eb06:	f7ff ffbc 	bl	810ea82 <__sfputs_r>
 810eb0a:	3001      	adds	r0, #1
 810eb0c:	f000 80c2 	beq.w	810ec94 <_vfiprintf_r+0x1ec>
 810eb10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810eb12:	4453      	add	r3, sl
 810eb14:	9309      	str	r3, [sp, #36]	; 0x24
 810eb16:	f898 3000 	ldrb.w	r3, [r8]
 810eb1a:	2b00      	cmp	r3, #0
 810eb1c:	f000 80ba 	beq.w	810ec94 <_vfiprintf_r+0x1ec>
 810eb20:	2300      	movs	r3, #0
 810eb22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810eb26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810eb2a:	9304      	str	r3, [sp, #16]
 810eb2c:	9307      	str	r3, [sp, #28]
 810eb2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810eb32:	931a      	str	r3, [sp, #104]	; 0x68
 810eb34:	46a8      	mov	r8, r5
 810eb36:	2205      	movs	r2, #5
 810eb38:	f818 1b01 	ldrb.w	r1, [r8], #1
 810eb3c:	485e      	ldr	r0, [pc, #376]	; (810ecb8 <_vfiprintf_r+0x210>)
 810eb3e:	f7f1 fbd7 	bl	81002f0 <memchr>
 810eb42:	9b04      	ldr	r3, [sp, #16]
 810eb44:	bb78      	cbnz	r0, 810eba6 <_vfiprintf_r+0xfe>
 810eb46:	06d9      	lsls	r1, r3, #27
 810eb48:	bf44      	itt	mi
 810eb4a:	2220      	movmi	r2, #32
 810eb4c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 810eb50:	071a      	lsls	r2, r3, #28
 810eb52:	bf44      	itt	mi
 810eb54:	222b      	movmi	r2, #43	; 0x2b
 810eb56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 810eb5a:	782a      	ldrb	r2, [r5, #0]
 810eb5c:	2a2a      	cmp	r2, #42	; 0x2a
 810eb5e:	d02a      	beq.n	810ebb6 <_vfiprintf_r+0x10e>
 810eb60:	9a07      	ldr	r2, [sp, #28]
 810eb62:	46a8      	mov	r8, r5
 810eb64:	2000      	movs	r0, #0
 810eb66:	250a      	movs	r5, #10
 810eb68:	4641      	mov	r1, r8
 810eb6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 810eb6e:	3b30      	subs	r3, #48	; 0x30
 810eb70:	2b09      	cmp	r3, #9
 810eb72:	d969      	bls.n	810ec48 <_vfiprintf_r+0x1a0>
 810eb74:	b360      	cbz	r0, 810ebd0 <_vfiprintf_r+0x128>
 810eb76:	e024      	b.n	810ebc2 <_vfiprintf_r+0x11a>
 810eb78:	4b50      	ldr	r3, [pc, #320]	; (810ecbc <_vfiprintf_r+0x214>)
 810eb7a:	429c      	cmp	r4, r3
 810eb7c:	d101      	bne.n	810eb82 <_vfiprintf_r+0xda>
 810eb7e:	68b4      	ldr	r4, [r6, #8]
 810eb80:	e7a2      	b.n	810eac8 <_vfiprintf_r+0x20>
 810eb82:	4b4f      	ldr	r3, [pc, #316]	; (810ecc0 <_vfiprintf_r+0x218>)
 810eb84:	429c      	cmp	r4, r3
 810eb86:	bf08      	it	eq
 810eb88:	68f4      	ldreq	r4, [r6, #12]
 810eb8a:	e79d      	b.n	810eac8 <_vfiprintf_r+0x20>
 810eb8c:	4621      	mov	r1, r4
 810eb8e:	4630      	mov	r0, r6
 810eb90:	f7fe fb28 	bl	810d1e4 <__swsetup_r>
 810eb94:	2800      	cmp	r0, #0
 810eb96:	d09d      	beq.n	810ead4 <_vfiprintf_r+0x2c>
 810eb98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810eb9c:	b01d      	add	sp, #116	; 0x74
 810eb9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810eba2:	46a8      	mov	r8, r5
 810eba4:	e7a2      	b.n	810eaec <_vfiprintf_r+0x44>
 810eba6:	4a44      	ldr	r2, [pc, #272]	; (810ecb8 <_vfiprintf_r+0x210>)
 810eba8:	1a80      	subs	r0, r0, r2
 810ebaa:	fa0b f000 	lsl.w	r0, fp, r0
 810ebae:	4318      	orrs	r0, r3
 810ebb0:	9004      	str	r0, [sp, #16]
 810ebb2:	4645      	mov	r5, r8
 810ebb4:	e7be      	b.n	810eb34 <_vfiprintf_r+0x8c>
 810ebb6:	9a03      	ldr	r2, [sp, #12]
 810ebb8:	1d11      	adds	r1, r2, #4
 810ebba:	6812      	ldr	r2, [r2, #0]
 810ebbc:	9103      	str	r1, [sp, #12]
 810ebbe:	2a00      	cmp	r2, #0
 810ebc0:	db01      	blt.n	810ebc6 <_vfiprintf_r+0x11e>
 810ebc2:	9207      	str	r2, [sp, #28]
 810ebc4:	e004      	b.n	810ebd0 <_vfiprintf_r+0x128>
 810ebc6:	4252      	negs	r2, r2
 810ebc8:	f043 0302 	orr.w	r3, r3, #2
 810ebcc:	9207      	str	r2, [sp, #28]
 810ebce:	9304      	str	r3, [sp, #16]
 810ebd0:	f898 3000 	ldrb.w	r3, [r8]
 810ebd4:	2b2e      	cmp	r3, #46	; 0x2e
 810ebd6:	d10e      	bne.n	810ebf6 <_vfiprintf_r+0x14e>
 810ebd8:	f898 3001 	ldrb.w	r3, [r8, #1]
 810ebdc:	2b2a      	cmp	r3, #42	; 0x2a
 810ebde:	d138      	bne.n	810ec52 <_vfiprintf_r+0x1aa>
 810ebe0:	9b03      	ldr	r3, [sp, #12]
 810ebe2:	1d1a      	adds	r2, r3, #4
 810ebe4:	681b      	ldr	r3, [r3, #0]
 810ebe6:	9203      	str	r2, [sp, #12]
 810ebe8:	2b00      	cmp	r3, #0
 810ebea:	bfb8      	it	lt
 810ebec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 810ebf0:	f108 0802 	add.w	r8, r8, #2
 810ebf4:	9305      	str	r3, [sp, #20]
 810ebf6:	4d33      	ldr	r5, [pc, #204]	; (810ecc4 <_vfiprintf_r+0x21c>)
 810ebf8:	f898 1000 	ldrb.w	r1, [r8]
 810ebfc:	2203      	movs	r2, #3
 810ebfe:	4628      	mov	r0, r5
 810ec00:	f7f1 fb76 	bl	81002f0 <memchr>
 810ec04:	b140      	cbz	r0, 810ec18 <_vfiprintf_r+0x170>
 810ec06:	2340      	movs	r3, #64	; 0x40
 810ec08:	1b40      	subs	r0, r0, r5
 810ec0a:	fa03 f000 	lsl.w	r0, r3, r0
 810ec0e:	9b04      	ldr	r3, [sp, #16]
 810ec10:	4303      	orrs	r3, r0
 810ec12:	f108 0801 	add.w	r8, r8, #1
 810ec16:	9304      	str	r3, [sp, #16]
 810ec18:	f898 1000 	ldrb.w	r1, [r8]
 810ec1c:	482a      	ldr	r0, [pc, #168]	; (810ecc8 <_vfiprintf_r+0x220>)
 810ec1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810ec22:	2206      	movs	r2, #6
 810ec24:	f108 0701 	add.w	r7, r8, #1
 810ec28:	f7f1 fb62 	bl	81002f0 <memchr>
 810ec2c:	2800      	cmp	r0, #0
 810ec2e:	d037      	beq.n	810eca0 <_vfiprintf_r+0x1f8>
 810ec30:	4b26      	ldr	r3, [pc, #152]	; (810eccc <_vfiprintf_r+0x224>)
 810ec32:	bb1b      	cbnz	r3, 810ec7c <_vfiprintf_r+0x1d4>
 810ec34:	9b03      	ldr	r3, [sp, #12]
 810ec36:	3307      	adds	r3, #7
 810ec38:	f023 0307 	bic.w	r3, r3, #7
 810ec3c:	3308      	adds	r3, #8
 810ec3e:	9303      	str	r3, [sp, #12]
 810ec40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810ec42:	444b      	add	r3, r9
 810ec44:	9309      	str	r3, [sp, #36]	; 0x24
 810ec46:	e750      	b.n	810eaea <_vfiprintf_r+0x42>
 810ec48:	fb05 3202 	mla	r2, r5, r2, r3
 810ec4c:	2001      	movs	r0, #1
 810ec4e:	4688      	mov	r8, r1
 810ec50:	e78a      	b.n	810eb68 <_vfiprintf_r+0xc0>
 810ec52:	2300      	movs	r3, #0
 810ec54:	f108 0801 	add.w	r8, r8, #1
 810ec58:	9305      	str	r3, [sp, #20]
 810ec5a:	4619      	mov	r1, r3
 810ec5c:	250a      	movs	r5, #10
 810ec5e:	4640      	mov	r0, r8
 810ec60:	f810 2b01 	ldrb.w	r2, [r0], #1
 810ec64:	3a30      	subs	r2, #48	; 0x30
 810ec66:	2a09      	cmp	r2, #9
 810ec68:	d903      	bls.n	810ec72 <_vfiprintf_r+0x1ca>
 810ec6a:	2b00      	cmp	r3, #0
 810ec6c:	d0c3      	beq.n	810ebf6 <_vfiprintf_r+0x14e>
 810ec6e:	9105      	str	r1, [sp, #20]
 810ec70:	e7c1      	b.n	810ebf6 <_vfiprintf_r+0x14e>
 810ec72:	fb05 2101 	mla	r1, r5, r1, r2
 810ec76:	2301      	movs	r3, #1
 810ec78:	4680      	mov	r8, r0
 810ec7a:	e7f0      	b.n	810ec5e <_vfiprintf_r+0x1b6>
 810ec7c:	ab03      	add	r3, sp, #12
 810ec7e:	9300      	str	r3, [sp, #0]
 810ec80:	4622      	mov	r2, r4
 810ec82:	4b13      	ldr	r3, [pc, #76]	; (810ecd0 <_vfiprintf_r+0x228>)
 810ec84:	a904      	add	r1, sp, #16
 810ec86:	4630      	mov	r0, r6
 810ec88:	f7fd fdd2 	bl	810c830 <_printf_float>
 810ec8c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 810ec90:	4681      	mov	r9, r0
 810ec92:	d1d5      	bne.n	810ec40 <_vfiprintf_r+0x198>
 810ec94:	89a3      	ldrh	r3, [r4, #12]
 810ec96:	065b      	lsls	r3, r3, #25
 810ec98:	f53f af7e 	bmi.w	810eb98 <_vfiprintf_r+0xf0>
 810ec9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 810ec9e:	e77d      	b.n	810eb9c <_vfiprintf_r+0xf4>
 810eca0:	ab03      	add	r3, sp, #12
 810eca2:	9300      	str	r3, [sp, #0]
 810eca4:	4622      	mov	r2, r4
 810eca6:	4b0a      	ldr	r3, [pc, #40]	; (810ecd0 <_vfiprintf_r+0x228>)
 810eca8:	a904      	add	r1, sp, #16
 810ecaa:	4630      	mov	r0, r6
 810ecac:	f7fe f876 	bl	810cd9c <_printf_i>
 810ecb0:	e7ec      	b.n	810ec8c <_vfiprintf_r+0x1e4>
 810ecb2:	bf00      	nop
 810ecb4:	0810f244 	.word	0x0810f244
 810ecb8:	0810f384 	.word	0x0810f384
 810ecbc:	0810f264 	.word	0x0810f264
 810ecc0:	0810f224 	.word	0x0810f224
 810ecc4:	0810f38a 	.word	0x0810f38a
 810ecc8:	0810f38e 	.word	0x0810f38e
 810eccc:	0810c831 	.word	0x0810c831
 810ecd0:	0810ea83 	.word	0x0810ea83

0810ecd4 <_sbrk_r>:
 810ecd4:	b538      	push	{r3, r4, r5, lr}
 810ecd6:	4c06      	ldr	r4, [pc, #24]	; (810ecf0 <_sbrk_r+0x1c>)
 810ecd8:	2300      	movs	r3, #0
 810ecda:	4605      	mov	r5, r0
 810ecdc:	4608      	mov	r0, r1
 810ecde:	6023      	str	r3, [r4, #0]
 810ece0:	f7f2 ffca 	bl	8101c78 <_sbrk>
 810ece4:	1c43      	adds	r3, r0, #1
 810ece6:	d102      	bne.n	810ecee <_sbrk_r+0x1a>
 810ece8:	6823      	ldr	r3, [r4, #0]
 810ecea:	b103      	cbz	r3, 810ecee <_sbrk_r+0x1a>
 810ecec:	602b      	str	r3, [r5, #0]
 810ecee:	bd38      	pop	{r3, r4, r5, pc}
 810ecf0:	1000550c 	.word	0x1000550c

0810ecf4 <__sread>:
 810ecf4:	b510      	push	{r4, lr}
 810ecf6:	460c      	mov	r4, r1
 810ecf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810ecfc:	f000 f8a8 	bl	810ee50 <_read_r>
 810ed00:	2800      	cmp	r0, #0
 810ed02:	bfab      	itete	ge
 810ed04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 810ed06:	89a3      	ldrhlt	r3, [r4, #12]
 810ed08:	181b      	addge	r3, r3, r0
 810ed0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 810ed0e:	bfac      	ite	ge
 810ed10:	6563      	strge	r3, [r4, #84]	; 0x54
 810ed12:	81a3      	strhlt	r3, [r4, #12]
 810ed14:	bd10      	pop	{r4, pc}

0810ed16 <__swrite>:
 810ed16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810ed1a:	461f      	mov	r7, r3
 810ed1c:	898b      	ldrh	r3, [r1, #12]
 810ed1e:	05db      	lsls	r3, r3, #23
 810ed20:	4605      	mov	r5, r0
 810ed22:	460c      	mov	r4, r1
 810ed24:	4616      	mov	r6, r2
 810ed26:	d505      	bpl.n	810ed34 <__swrite+0x1e>
 810ed28:	2302      	movs	r3, #2
 810ed2a:	2200      	movs	r2, #0
 810ed2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810ed30:	f000 f868 	bl	810ee04 <_lseek_r>
 810ed34:	89a3      	ldrh	r3, [r4, #12]
 810ed36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810ed3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810ed3e:	81a3      	strh	r3, [r4, #12]
 810ed40:	4632      	mov	r2, r6
 810ed42:	463b      	mov	r3, r7
 810ed44:	4628      	mov	r0, r5
 810ed46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810ed4a:	f000 b817 	b.w	810ed7c <_write_r>

0810ed4e <__sseek>:
 810ed4e:	b510      	push	{r4, lr}
 810ed50:	460c      	mov	r4, r1
 810ed52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810ed56:	f000 f855 	bl	810ee04 <_lseek_r>
 810ed5a:	1c43      	adds	r3, r0, #1
 810ed5c:	89a3      	ldrh	r3, [r4, #12]
 810ed5e:	bf15      	itete	ne
 810ed60:	6560      	strne	r0, [r4, #84]	; 0x54
 810ed62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 810ed66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 810ed6a:	81a3      	strheq	r3, [r4, #12]
 810ed6c:	bf18      	it	ne
 810ed6e:	81a3      	strhne	r3, [r4, #12]
 810ed70:	bd10      	pop	{r4, pc}

0810ed72 <__sclose>:
 810ed72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810ed76:	f000 b813 	b.w	810eda0 <_close_r>
	...

0810ed7c <_write_r>:
 810ed7c:	b538      	push	{r3, r4, r5, lr}
 810ed7e:	4c07      	ldr	r4, [pc, #28]	; (810ed9c <_write_r+0x20>)
 810ed80:	4605      	mov	r5, r0
 810ed82:	4608      	mov	r0, r1
 810ed84:	4611      	mov	r1, r2
 810ed86:	2200      	movs	r2, #0
 810ed88:	6022      	str	r2, [r4, #0]
 810ed8a:	461a      	mov	r2, r3
 810ed8c:	f7f2 ff23 	bl	8101bd6 <_write>
 810ed90:	1c43      	adds	r3, r0, #1
 810ed92:	d102      	bne.n	810ed9a <_write_r+0x1e>
 810ed94:	6823      	ldr	r3, [r4, #0]
 810ed96:	b103      	cbz	r3, 810ed9a <_write_r+0x1e>
 810ed98:	602b      	str	r3, [r5, #0]
 810ed9a:	bd38      	pop	{r3, r4, r5, pc}
 810ed9c:	1000550c 	.word	0x1000550c

0810eda0 <_close_r>:
 810eda0:	b538      	push	{r3, r4, r5, lr}
 810eda2:	4c06      	ldr	r4, [pc, #24]	; (810edbc <_close_r+0x1c>)
 810eda4:	2300      	movs	r3, #0
 810eda6:	4605      	mov	r5, r0
 810eda8:	4608      	mov	r0, r1
 810edaa:	6023      	str	r3, [r4, #0]
 810edac:	f7f2 ff2f 	bl	8101c0e <_close>
 810edb0:	1c43      	adds	r3, r0, #1
 810edb2:	d102      	bne.n	810edba <_close_r+0x1a>
 810edb4:	6823      	ldr	r3, [r4, #0]
 810edb6:	b103      	cbz	r3, 810edba <_close_r+0x1a>
 810edb8:	602b      	str	r3, [r5, #0]
 810edba:	bd38      	pop	{r3, r4, r5, pc}
 810edbc:	1000550c 	.word	0x1000550c

0810edc0 <_fstat_r>:
 810edc0:	b538      	push	{r3, r4, r5, lr}
 810edc2:	4c07      	ldr	r4, [pc, #28]	; (810ede0 <_fstat_r+0x20>)
 810edc4:	2300      	movs	r3, #0
 810edc6:	4605      	mov	r5, r0
 810edc8:	4608      	mov	r0, r1
 810edca:	4611      	mov	r1, r2
 810edcc:	6023      	str	r3, [r4, #0]
 810edce:	f7f2 ff2a 	bl	8101c26 <_fstat>
 810edd2:	1c43      	adds	r3, r0, #1
 810edd4:	d102      	bne.n	810eddc <_fstat_r+0x1c>
 810edd6:	6823      	ldr	r3, [r4, #0]
 810edd8:	b103      	cbz	r3, 810eddc <_fstat_r+0x1c>
 810edda:	602b      	str	r3, [r5, #0]
 810eddc:	bd38      	pop	{r3, r4, r5, pc}
 810edde:	bf00      	nop
 810ede0:	1000550c 	.word	0x1000550c

0810ede4 <_isatty_r>:
 810ede4:	b538      	push	{r3, r4, r5, lr}
 810ede6:	4c06      	ldr	r4, [pc, #24]	; (810ee00 <_isatty_r+0x1c>)
 810ede8:	2300      	movs	r3, #0
 810edea:	4605      	mov	r5, r0
 810edec:	4608      	mov	r0, r1
 810edee:	6023      	str	r3, [r4, #0]
 810edf0:	f7f2 ff29 	bl	8101c46 <_isatty>
 810edf4:	1c43      	adds	r3, r0, #1
 810edf6:	d102      	bne.n	810edfe <_isatty_r+0x1a>
 810edf8:	6823      	ldr	r3, [r4, #0]
 810edfa:	b103      	cbz	r3, 810edfe <_isatty_r+0x1a>
 810edfc:	602b      	str	r3, [r5, #0]
 810edfe:	bd38      	pop	{r3, r4, r5, pc}
 810ee00:	1000550c 	.word	0x1000550c

0810ee04 <_lseek_r>:
 810ee04:	b538      	push	{r3, r4, r5, lr}
 810ee06:	4c07      	ldr	r4, [pc, #28]	; (810ee24 <_lseek_r+0x20>)
 810ee08:	4605      	mov	r5, r0
 810ee0a:	4608      	mov	r0, r1
 810ee0c:	4611      	mov	r1, r2
 810ee0e:	2200      	movs	r2, #0
 810ee10:	6022      	str	r2, [r4, #0]
 810ee12:	461a      	mov	r2, r3
 810ee14:	f7f2 ff22 	bl	8101c5c <_lseek>
 810ee18:	1c43      	adds	r3, r0, #1
 810ee1a:	d102      	bne.n	810ee22 <_lseek_r+0x1e>
 810ee1c:	6823      	ldr	r3, [r4, #0]
 810ee1e:	b103      	cbz	r3, 810ee22 <_lseek_r+0x1e>
 810ee20:	602b      	str	r3, [r5, #0]
 810ee22:	bd38      	pop	{r3, r4, r5, pc}
 810ee24:	1000550c 	.word	0x1000550c

0810ee28 <__ascii_mbtowc>:
 810ee28:	b082      	sub	sp, #8
 810ee2a:	b901      	cbnz	r1, 810ee2e <__ascii_mbtowc+0x6>
 810ee2c:	a901      	add	r1, sp, #4
 810ee2e:	b142      	cbz	r2, 810ee42 <__ascii_mbtowc+0x1a>
 810ee30:	b14b      	cbz	r3, 810ee46 <__ascii_mbtowc+0x1e>
 810ee32:	7813      	ldrb	r3, [r2, #0]
 810ee34:	600b      	str	r3, [r1, #0]
 810ee36:	7812      	ldrb	r2, [r2, #0]
 810ee38:	1c10      	adds	r0, r2, #0
 810ee3a:	bf18      	it	ne
 810ee3c:	2001      	movne	r0, #1
 810ee3e:	b002      	add	sp, #8
 810ee40:	4770      	bx	lr
 810ee42:	4610      	mov	r0, r2
 810ee44:	e7fb      	b.n	810ee3e <__ascii_mbtowc+0x16>
 810ee46:	f06f 0001 	mvn.w	r0, #1
 810ee4a:	e7f8      	b.n	810ee3e <__ascii_mbtowc+0x16>

0810ee4c <__malloc_lock>:
 810ee4c:	4770      	bx	lr

0810ee4e <__malloc_unlock>:
 810ee4e:	4770      	bx	lr

0810ee50 <_read_r>:
 810ee50:	b538      	push	{r3, r4, r5, lr}
 810ee52:	4c07      	ldr	r4, [pc, #28]	; (810ee70 <_read_r+0x20>)
 810ee54:	4605      	mov	r5, r0
 810ee56:	4608      	mov	r0, r1
 810ee58:	4611      	mov	r1, r2
 810ee5a:	2200      	movs	r2, #0
 810ee5c:	6022      	str	r2, [r4, #0]
 810ee5e:	461a      	mov	r2, r3
 810ee60:	f7f2 fe9c 	bl	8101b9c <_read>
 810ee64:	1c43      	adds	r3, r0, #1
 810ee66:	d102      	bne.n	810ee6e <_read_r+0x1e>
 810ee68:	6823      	ldr	r3, [r4, #0]
 810ee6a:	b103      	cbz	r3, 810ee6e <_read_r+0x1e>
 810ee6c:	602b      	str	r3, [r5, #0]
 810ee6e:	bd38      	pop	{r3, r4, r5, pc}
 810ee70:	1000550c 	.word	0x1000550c

0810ee74 <__ascii_wctomb>:
 810ee74:	b149      	cbz	r1, 810ee8a <__ascii_wctomb+0x16>
 810ee76:	2aff      	cmp	r2, #255	; 0xff
 810ee78:	bf85      	ittet	hi
 810ee7a:	238a      	movhi	r3, #138	; 0x8a
 810ee7c:	6003      	strhi	r3, [r0, #0]
 810ee7e:	700a      	strbls	r2, [r1, #0]
 810ee80:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 810ee84:	bf98      	it	ls
 810ee86:	2001      	movls	r0, #1
 810ee88:	4770      	bx	lr
 810ee8a:	4608      	mov	r0, r1
 810ee8c:	4770      	bx	lr
	...

0810ee90 <_init>:
 810ee90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810ee92:	bf00      	nop
 810ee94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810ee96:	bc08      	pop	{r3}
 810ee98:	469e      	mov	lr, r3
 810ee9a:	4770      	bx	lr

0810ee9c <_fini>:
 810ee9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810ee9e:	bf00      	nop
 810eea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810eea2:	bc08      	pop	{r3}
 810eea4:	469e      	mov	lr, r3
 810eea6:	4770      	bx	lr
