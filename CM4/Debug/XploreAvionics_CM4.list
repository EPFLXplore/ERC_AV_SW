
XploreAvionics_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000120a0  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e98  08112340  08112340  00022340  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  081131d8  081131d8  000231d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  081131e0  081131e0  000231e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  081131ec  081131ec  000231ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000020c  10000000  081131f4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00009fec  1000020c  08113400  0003020c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  1000a1f8  08113400  0003a1f8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0006eb24  00000000  00000000  0003023c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000ba26  00000000  00000000  0009ed60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002910  00000000  00000000  000aa788  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002568  00000000  00000000  000ad098  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004c722  00000000  00000000  000af600  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00036151  00000000  00000000  000fbd22  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001aba98  00000000  00000000  00131e73  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  002dd90b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c054  00000000  00000000  002dd988  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	1000020c 	.word	0x1000020c
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08112328 	.word	0x08112328

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000210 	.word	0x10000210
 81002dc:	08112328 	.word	0x08112328

081002e0 <strcmp>:
 81002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 81002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 81002e8:	2a01      	cmp	r2, #1
 81002ea:	bf28      	it	cs
 81002ec:	429a      	cmpcs	r2, r3
 81002ee:	d0f7      	beq.n	81002e0 <strcmp>
 81002f0:	1ad0      	subs	r0, r2, r3
 81002f2:	4770      	bx	lr

081002f4 <strlen>:
 81002f4:	4603      	mov	r3, r0
 81002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002fa:	2a00      	cmp	r2, #0
 81002fc:	d1fb      	bne.n	81002f6 <strlen+0x2>
 81002fe:	1a18      	subs	r0, r3, r0
 8100300:	3801      	subs	r0, #1
 8100302:	4770      	bx	lr
	...

08100310 <memchr>:
 8100310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8100314:	2a10      	cmp	r2, #16
 8100316:	db2b      	blt.n	8100370 <memchr+0x60>
 8100318:	f010 0f07 	tst.w	r0, #7
 810031c:	d008      	beq.n	8100330 <memchr+0x20>
 810031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100322:	3a01      	subs	r2, #1
 8100324:	428b      	cmp	r3, r1
 8100326:	d02d      	beq.n	8100384 <memchr+0x74>
 8100328:	f010 0f07 	tst.w	r0, #7
 810032c:	b342      	cbz	r2, 8100380 <memchr+0x70>
 810032e:	d1f6      	bne.n	810031e <memchr+0xe>
 8100330:	b4f0      	push	{r4, r5, r6, r7}
 8100332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810033a:	f022 0407 	bic.w	r4, r2, #7
 810033e:	f07f 0700 	mvns.w	r7, #0
 8100342:	2300      	movs	r3, #0
 8100344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100348:	3c08      	subs	r4, #8
 810034a:	ea85 0501 	eor.w	r5, r5, r1
 810034e:	ea86 0601 	eor.w	r6, r6, r1
 8100352:	fa85 f547 	uadd8	r5, r5, r7
 8100356:	faa3 f587 	sel	r5, r3, r7
 810035a:	fa86 f647 	uadd8	r6, r6, r7
 810035e:	faa5 f687 	sel	r6, r5, r7
 8100362:	b98e      	cbnz	r6, 8100388 <memchr+0x78>
 8100364:	d1ee      	bne.n	8100344 <memchr+0x34>
 8100366:	bcf0      	pop	{r4, r5, r6, r7}
 8100368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810036c:	f002 0207 	and.w	r2, r2, #7
 8100370:	b132      	cbz	r2, 8100380 <memchr+0x70>
 8100372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100376:	3a01      	subs	r2, #1
 8100378:	ea83 0301 	eor.w	r3, r3, r1
 810037c:	b113      	cbz	r3, 8100384 <memchr+0x74>
 810037e:	d1f8      	bne.n	8100372 <memchr+0x62>
 8100380:	2000      	movs	r0, #0
 8100382:	4770      	bx	lr
 8100384:	3801      	subs	r0, #1
 8100386:	4770      	bx	lr
 8100388:	2d00      	cmp	r5, #0
 810038a:	bf06      	itte	eq
 810038c:	4635      	moveq	r5, r6
 810038e:	3803      	subeq	r0, #3
 8100390:	3807      	subne	r0, #7
 8100392:	f015 0f01 	tst.w	r5, #1
 8100396:	d107      	bne.n	81003a8 <memchr+0x98>
 8100398:	3001      	adds	r0, #1
 810039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810039e:	bf02      	ittt	eq
 81003a0:	3001      	addeq	r0, #1
 81003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 81003a6:	3001      	addeq	r0, #1
 81003a8:	bcf0      	pop	{r4, r5, r6, r7}
 81003aa:	3801      	subs	r0, #1
 81003ac:	4770      	bx	lr
 81003ae:	bf00      	nop

081003b0 <__aeabi_drsub>:
 81003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 81003b4:	e002      	b.n	81003bc <__adddf3>
 81003b6:	bf00      	nop

081003b8 <__aeabi_dsub>:
 81003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

081003bc <__adddf3>:
 81003bc:	b530      	push	{r4, r5, lr}
 81003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003c6:	ea94 0f05 	teq	r4, r5
 81003ca:	bf08      	it	eq
 81003cc:	ea90 0f02 	teqeq	r0, r2
 81003d0:	bf1f      	itttt	ne
 81003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003e2:	f000 80e2 	beq.w	81005aa <__adddf3+0x1ee>
 81003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ee:	bfb8      	it	lt
 81003f0:	426d      	neglt	r5, r5
 81003f2:	dd0c      	ble.n	810040e <__adddf3+0x52>
 81003f4:	442c      	add	r4, r5
 81003f6:	ea80 0202 	eor.w	r2, r0, r2
 81003fa:	ea81 0303 	eor.w	r3, r1, r3
 81003fe:	ea82 0000 	eor.w	r0, r2, r0
 8100402:	ea83 0101 	eor.w	r1, r3, r1
 8100406:	ea80 0202 	eor.w	r2, r0, r2
 810040a:	ea81 0303 	eor.w	r3, r1, r3
 810040e:	2d36      	cmp	r5, #54	; 0x36
 8100410:	bf88      	it	hi
 8100412:	bd30      	pophi	{r4, r5, pc}
 8100414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100424:	d002      	beq.n	810042c <__adddf3+0x70>
 8100426:	4240      	negs	r0, r0
 8100428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100438:	d002      	beq.n	8100440 <__adddf3+0x84>
 810043a:	4252      	negs	r2, r2
 810043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100440:	ea94 0f05 	teq	r4, r5
 8100444:	f000 80a7 	beq.w	8100596 <__adddf3+0x1da>
 8100448:	f1a4 0401 	sub.w	r4, r4, #1
 810044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100450:	db0d      	blt.n	810046e <__adddf3+0xb2>
 8100452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100456:	fa22 f205 	lsr.w	r2, r2, r5
 810045a:	1880      	adds	r0, r0, r2
 810045c:	f141 0100 	adc.w	r1, r1, #0
 8100460:	fa03 f20e 	lsl.w	r2, r3, lr
 8100464:	1880      	adds	r0, r0, r2
 8100466:	fa43 f305 	asr.w	r3, r3, r5
 810046a:	4159      	adcs	r1, r3
 810046c:	e00e      	b.n	810048c <__adddf3+0xd0>
 810046e:	f1a5 0520 	sub.w	r5, r5, #32
 8100472:	f10e 0e20 	add.w	lr, lr, #32
 8100476:	2a01      	cmp	r2, #1
 8100478:	fa03 fc0e 	lsl.w	ip, r3, lr
 810047c:	bf28      	it	cs
 810047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100482:	fa43 f305 	asr.w	r3, r3, r5
 8100486:	18c0      	adds	r0, r0, r3
 8100488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100490:	d507      	bpl.n	81004a2 <__adddf3+0xe6>
 8100492:	f04f 0e00 	mov.w	lr, #0
 8100496:	f1dc 0c00 	rsbs	ip, ip, #0
 810049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810049e:	eb6e 0101 	sbc.w	r1, lr, r1
 81004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 81004a6:	d31b      	bcc.n	81004e0 <__adddf3+0x124>
 81004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 81004ac:	d30c      	bcc.n	81004c8 <__adddf3+0x10c>
 81004ae:	0849      	lsrs	r1, r1, #1
 81004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 81004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81004b8:	f104 0401 	add.w	r4, r4, #1
 81004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004c4:	f080 809a 	bcs.w	81005fc <__adddf3+0x240>
 81004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004cc:	bf08      	it	eq
 81004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004d2:	f150 0000 	adcs.w	r0, r0, #0
 81004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004da:	ea41 0105 	orr.w	r1, r1, r5
 81004de:	bd30      	pop	{r4, r5, pc}
 81004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004e4:	4140      	adcs	r0, r0
 81004e6:	eb41 0101 	adc.w	r1, r1, r1
 81004ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81004ee:	f1a4 0401 	sub.w	r4, r4, #1
 81004f2:	d1e9      	bne.n	81004c8 <__adddf3+0x10c>
 81004f4:	f091 0f00 	teq	r1, #0
 81004f8:	bf04      	itt	eq
 81004fa:	4601      	moveq	r1, r0
 81004fc:	2000      	moveq	r0, #0
 81004fe:	fab1 f381 	clz	r3, r1
 8100502:	bf08      	it	eq
 8100504:	3320      	addeq	r3, #32
 8100506:	f1a3 030b 	sub.w	r3, r3, #11
 810050a:	f1b3 0220 	subs.w	r2, r3, #32
 810050e:	da0c      	bge.n	810052a <__adddf3+0x16e>
 8100510:	320c      	adds	r2, #12
 8100512:	dd08      	ble.n	8100526 <__adddf3+0x16a>
 8100514:	f102 0c14 	add.w	ip, r2, #20
 8100518:	f1c2 020c 	rsb	r2, r2, #12
 810051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8100520:	fa21 f102 	lsr.w	r1, r1, r2
 8100524:	e00c      	b.n	8100540 <__adddf3+0x184>
 8100526:	f102 0214 	add.w	r2, r2, #20
 810052a:	bfd8      	it	le
 810052c:	f1c2 0c20 	rsble	ip, r2, #32
 8100530:	fa01 f102 	lsl.w	r1, r1, r2
 8100534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100538:	bfdc      	itt	le
 810053a:	ea41 010c 	orrle.w	r1, r1, ip
 810053e:	4090      	lslle	r0, r2
 8100540:	1ae4      	subs	r4, r4, r3
 8100542:	bfa2      	ittt	ge
 8100544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100548:	4329      	orrge	r1, r5
 810054a:	bd30      	popge	{r4, r5, pc}
 810054c:	ea6f 0404 	mvn.w	r4, r4
 8100550:	3c1f      	subs	r4, #31
 8100552:	da1c      	bge.n	810058e <__adddf3+0x1d2>
 8100554:	340c      	adds	r4, #12
 8100556:	dc0e      	bgt.n	8100576 <__adddf3+0x1ba>
 8100558:	f104 0414 	add.w	r4, r4, #20
 810055c:	f1c4 0220 	rsb	r2, r4, #32
 8100560:	fa20 f004 	lsr.w	r0, r0, r4
 8100564:	fa01 f302 	lsl.w	r3, r1, r2
 8100568:	ea40 0003 	orr.w	r0, r0, r3
 810056c:	fa21 f304 	lsr.w	r3, r1, r4
 8100570:	ea45 0103 	orr.w	r1, r5, r3
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f1c4 040c 	rsb	r4, r4, #12
 810057a:	f1c4 0220 	rsb	r2, r4, #32
 810057e:	fa20 f002 	lsr.w	r0, r0, r2
 8100582:	fa01 f304 	lsl.w	r3, r1, r4
 8100586:	ea40 0003 	orr.w	r0, r0, r3
 810058a:	4629      	mov	r1, r5
 810058c:	bd30      	pop	{r4, r5, pc}
 810058e:	fa21 f004 	lsr.w	r0, r1, r4
 8100592:	4629      	mov	r1, r5
 8100594:	bd30      	pop	{r4, r5, pc}
 8100596:	f094 0f00 	teq	r4, #0
 810059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810059e:	bf06      	itte	eq
 81005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 81005a4:	3401      	addeq	r4, #1
 81005a6:	3d01      	subne	r5, #1
 81005a8:	e74e      	b.n	8100448 <__adddf3+0x8c>
 81005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ae:	bf18      	it	ne
 81005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81005b4:	d029      	beq.n	810060a <__adddf3+0x24e>
 81005b6:	ea94 0f05 	teq	r4, r5
 81005ba:	bf08      	it	eq
 81005bc:	ea90 0f02 	teqeq	r0, r2
 81005c0:	d005      	beq.n	81005ce <__adddf3+0x212>
 81005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005c6:	bf04      	itt	eq
 81005c8:	4619      	moveq	r1, r3
 81005ca:	4610      	moveq	r0, r2
 81005cc:	bd30      	pop	{r4, r5, pc}
 81005ce:	ea91 0f03 	teq	r1, r3
 81005d2:	bf1e      	ittt	ne
 81005d4:	2100      	movne	r1, #0
 81005d6:	2000      	movne	r0, #0
 81005d8:	bd30      	popne	{r4, r5, pc}
 81005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005de:	d105      	bne.n	81005ec <__adddf3+0x230>
 81005e0:	0040      	lsls	r0, r0, #1
 81005e2:	4149      	adcs	r1, r1
 81005e4:	bf28      	it	cs
 81005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ea:	bd30      	pop	{r4, r5, pc}
 81005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005f0:	bf3c      	itt	cc
 81005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005f6:	bd30      	popcc	{r4, r5, pc}
 81005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8100600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8100604:	f04f 0000 	mov.w	r0, #0
 8100608:	bd30      	pop	{r4, r5, pc}
 810060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810060e:	bf1a      	itte	ne
 8100610:	4619      	movne	r1, r3
 8100612:	4610      	movne	r0, r2
 8100614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100618:	bf1c      	itt	ne
 810061a:	460b      	movne	r3, r1
 810061c:	4602      	movne	r2, r0
 810061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100622:	bf06      	itte	eq
 8100624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100628:	ea91 0f03 	teqeq	r1, r3
 810062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100630:	bd30      	pop	{r4, r5, pc}
 8100632:	bf00      	nop

08100634 <__aeabi_ui2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f04f 0500 	mov.w	r5, #0
 810064c:	f04f 0100 	mov.w	r1, #0
 8100650:	e750      	b.n	81004f4 <__adddf3+0x138>
 8100652:	bf00      	nop

08100654 <__aeabi_i2d>:
 8100654:	f090 0f00 	teq	r0, #0
 8100658:	bf04      	itt	eq
 810065a:	2100      	moveq	r1, #0
 810065c:	4770      	bxeq	lr
 810065e:	b530      	push	{r4, r5, lr}
 8100660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810066c:	bf48      	it	mi
 810066e:	4240      	negmi	r0, r0
 8100670:	f04f 0100 	mov.w	r1, #0
 8100674:	e73e      	b.n	81004f4 <__adddf3+0x138>
 8100676:	bf00      	nop

08100678 <__aeabi_f2d>:
 8100678:	0042      	lsls	r2, r0, #1
 810067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100686:	bf1f      	itttt	ne
 8100688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100694:	4770      	bxne	lr
 8100696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810069a:	bf08      	it	eq
 810069c:	4770      	bxeq	lr
 810069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 81006a2:	bf04      	itt	eq
 81006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 81006a8:	4770      	bxeq	lr
 81006aa:	b530      	push	{r4, r5, lr}
 81006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 81006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 81006b8:	e71c      	b.n	81004f4 <__adddf3+0x138>
 81006ba:	bf00      	nop

081006bc <__aeabi_ul2d>:
 81006bc:	ea50 0201 	orrs.w	r2, r0, r1
 81006c0:	bf08      	it	eq
 81006c2:	4770      	bxeq	lr
 81006c4:	b530      	push	{r4, r5, lr}
 81006c6:	f04f 0500 	mov.w	r5, #0
 81006ca:	e00a      	b.n	81006e2 <__aeabi_l2d+0x16>

081006cc <__aeabi_l2d>:
 81006cc:	ea50 0201 	orrs.w	r2, r0, r1
 81006d0:	bf08      	it	eq
 81006d2:	4770      	bxeq	lr
 81006d4:	b530      	push	{r4, r5, lr}
 81006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006da:	d502      	bpl.n	81006e2 <__aeabi_l2d+0x16>
 81006dc:	4240      	negs	r0, r0
 81006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ee:	f43f aed8 	beq.w	81004a2 <__adddf3+0xe6>
 81006f2:	f04f 0203 	mov.w	r2, #3
 81006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006fa:	bf18      	it	ne
 81006fc:	3203      	addne	r2, #3
 81006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100702:	bf18      	it	ne
 8100704:	3203      	addne	r2, #3
 8100706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 810070a:	f1c2 0320 	rsb	r3, r2, #32
 810070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8100712:	fa20 f002 	lsr.w	r0, r0, r2
 8100716:	fa01 fe03 	lsl.w	lr, r1, r3
 810071a:	ea40 000e 	orr.w	r0, r0, lr
 810071e:	fa21 f102 	lsr.w	r1, r1, r2
 8100722:	4414      	add	r4, r2
 8100724:	e6bd      	b.n	81004a2 <__adddf3+0xe6>
 8100726:	bf00      	nop

08100728 <__aeabi_dmul>:
 8100728:	b570      	push	{r4, r5, r6, lr}
 810072a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810072e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100736:	bf1d      	ittte	ne
 8100738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810073c:	ea94 0f0c 	teqne	r4, ip
 8100740:	ea95 0f0c 	teqne	r5, ip
 8100744:	f000 f8de 	bleq	8100904 <__aeabi_dmul+0x1dc>
 8100748:	442c      	add	r4, r5
 810074a:	ea81 0603 	eor.w	r6, r1, r3
 810074e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100752:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100756:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810075a:	bf18      	it	ne
 810075c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100760:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100764:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100768:	d038      	beq.n	81007dc <__aeabi_dmul+0xb4>
 810076a:	fba0 ce02 	umull	ip, lr, r0, r2
 810076e:	f04f 0500 	mov.w	r5, #0
 8100772:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100776:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810077a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810077e:	f04f 0600 	mov.w	r6, #0
 8100782:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100786:	f09c 0f00 	teq	ip, #0
 810078a:	bf18      	it	ne
 810078c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100790:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100794:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100798:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810079c:	d204      	bcs.n	81007a8 <__aeabi_dmul+0x80>
 810079e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81007a2:	416d      	adcs	r5, r5
 81007a4:	eb46 0606 	adc.w	r6, r6, r6
 81007a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81007ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81007b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81007b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81007b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81007bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007c0:	bf88      	it	hi
 81007c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007c6:	d81e      	bhi.n	8100806 <__aeabi_dmul+0xde>
 81007c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007cc:	bf08      	it	eq
 81007ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007d2:	f150 0000 	adcs.w	r0, r0, #0
 81007d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007da:	bd70      	pop	{r4, r5, r6, pc}
 81007dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007e0:	ea46 0101 	orr.w	r1, r6, r1
 81007e4:	ea40 0002 	orr.w	r0, r0, r2
 81007e8:	ea81 0103 	eor.w	r1, r1, r3
 81007ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007f0:	bfc2      	ittt	gt
 81007f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007fa:	bd70      	popgt	{r4, r5, r6, pc}
 81007fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100800:	f04f 0e00 	mov.w	lr, #0
 8100804:	3c01      	subs	r4, #1
 8100806:	f300 80ab 	bgt.w	8100960 <__aeabi_dmul+0x238>
 810080a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 810080e:	bfde      	ittt	le
 8100810:	2000      	movle	r0, #0
 8100812:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8100816:	bd70      	pople	{r4, r5, r6, pc}
 8100818:	f1c4 0400 	rsb	r4, r4, #0
 810081c:	3c20      	subs	r4, #32
 810081e:	da35      	bge.n	810088c <__aeabi_dmul+0x164>
 8100820:	340c      	adds	r4, #12
 8100822:	dc1b      	bgt.n	810085c <__aeabi_dmul+0x134>
 8100824:	f104 0414 	add.w	r4, r4, #20
 8100828:	f1c4 0520 	rsb	r5, r4, #32
 810082c:	fa00 f305 	lsl.w	r3, r0, r5
 8100830:	fa20 f004 	lsr.w	r0, r0, r4
 8100834:	fa01 f205 	lsl.w	r2, r1, r5
 8100838:	ea40 0002 	orr.w	r0, r0, r2
 810083c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100840:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100844:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100848:	fa21 f604 	lsr.w	r6, r1, r4
 810084c:	eb42 0106 	adc.w	r1, r2, r6
 8100850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100854:	bf08      	it	eq
 8100856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810085a:	bd70      	pop	{r4, r5, r6, pc}
 810085c:	f1c4 040c 	rsb	r4, r4, #12
 8100860:	f1c4 0520 	rsb	r5, r4, #32
 8100864:	fa00 f304 	lsl.w	r3, r0, r4
 8100868:	fa20 f005 	lsr.w	r0, r0, r5
 810086c:	fa01 f204 	lsl.w	r2, r1, r4
 8100870:	ea40 0002 	orr.w	r0, r0, r2
 8100874:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100878:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810087c:	f141 0100 	adc.w	r1, r1, #0
 8100880:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100884:	bf08      	it	eq
 8100886:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810088a:	bd70      	pop	{r4, r5, r6, pc}
 810088c:	f1c4 0520 	rsb	r5, r4, #32
 8100890:	fa00 f205 	lsl.w	r2, r0, r5
 8100894:	ea4e 0e02 	orr.w	lr, lr, r2
 8100898:	fa20 f304 	lsr.w	r3, r0, r4
 810089c:	fa01 f205 	lsl.w	r2, r1, r5
 81008a0:	ea43 0302 	orr.w	r3, r3, r2
 81008a4:	fa21 f004 	lsr.w	r0, r1, r4
 81008a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81008ac:	fa21 f204 	lsr.w	r2, r1, r4
 81008b0:	ea20 0002 	bic.w	r0, r0, r2
 81008b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81008b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81008bc:	bf08      	it	eq
 81008be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008c2:	bd70      	pop	{r4, r5, r6, pc}
 81008c4:	f094 0f00 	teq	r4, #0
 81008c8:	d10f      	bne.n	81008ea <__aeabi_dmul+0x1c2>
 81008ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ce:	0040      	lsls	r0, r0, #1
 81008d0:	eb41 0101 	adc.w	r1, r1, r1
 81008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3c01      	subeq	r4, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1a6>
 81008de:	ea41 0106 	orr.w	r1, r1, r6
 81008e2:	f095 0f00 	teq	r5, #0
 81008e6:	bf18      	it	ne
 81008e8:	4770      	bxne	lr
 81008ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ee:	0052      	lsls	r2, r2, #1
 81008f0:	eb43 0303 	adc.w	r3, r3, r3
 81008f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008f8:	bf08      	it	eq
 81008fa:	3d01      	subeq	r5, #1
 81008fc:	d0f7      	beq.n	81008ee <__aeabi_dmul+0x1c6>
 81008fe:	ea43 0306 	orr.w	r3, r3, r6
 8100902:	4770      	bx	lr
 8100904:	ea94 0f0c 	teq	r4, ip
 8100908:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 810090c:	bf18      	it	ne
 810090e:	ea95 0f0c 	teqne	r5, ip
 8100912:	d00c      	beq.n	810092e <__aeabi_dmul+0x206>
 8100914:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100918:	bf18      	it	ne
 810091a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091e:	d1d1      	bne.n	81008c4 <__aeabi_dmul+0x19c>
 8100920:	ea81 0103 	eor.w	r1, r1, r3
 8100924:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100928:	f04f 0000 	mov.w	r0, #0
 810092c:	bd70      	pop	{r4, r5, r6, pc}
 810092e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100932:	bf06      	itte	eq
 8100934:	4610      	moveq	r0, r2
 8100936:	4619      	moveq	r1, r3
 8100938:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810093c:	d019      	beq.n	8100972 <__aeabi_dmul+0x24a>
 810093e:	ea94 0f0c 	teq	r4, ip
 8100942:	d102      	bne.n	810094a <__aeabi_dmul+0x222>
 8100944:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100948:	d113      	bne.n	8100972 <__aeabi_dmul+0x24a>
 810094a:	ea95 0f0c 	teq	r5, ip
 810094e:	d105      	bne.n	810095c <__aeabi_dmul+0x234>
 8100950:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100954:	bf1c      	itt	ne
 8100956:	4610      	movne	r0, r2
 8100958:	4619      	movne	r1, r3
 810095a:	d10a      	bne.n	8100972 <__aeabi_dmul+0x24a>
 810095c:	ea81 0103 	eor.w	r1, r1, r3
 8100960:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100964:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100968:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810096c:	f04f 0000 	mov.w	r0, #0
 8100970:	bd70      	pop	{r4, r5, r6, pc}
 8100972:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100976:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810097a:	bd70      	pop	{r4, r5, r6, pc}

0810097c <__aeabi_ddiv>:
 810097c:	b570      	push	{r4, r5, r6, lr}
 810097e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100982:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100986:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810098a:	bf1d      	ittte	ne
 810098c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100990:	ea94 0f0c 	teqne	r4, ip
 8100994:	ea95 0f0c 	teqne	r5, ip
 8100998:	f000 f8a7 	bleq	8100aea <__aeabi_ddiv+0x16e>
 810099c:	eba4 0405 	sub.w	r4, r4, r5
 81009a0:	ea81 0e03 	eor.w	lr, r1, r3
 81009a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81009a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81009ac:	f000 8088 	beq.w	8100ac0 <__aeabi_ddiv+0x144>
 81009b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81009b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 81009b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81009bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009d4:	429d      	cmp	r5, r3
 81009d6:	bf08      	it	eq
 81009d8:	4296      	cmpeq	r6, r2
 81009da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009e2:	d202      	bcs.n	81009ea <__aeabi_ddiv+0x6e>
 81009e4:	085b      	lsrs	r3, r3, #1
 81009e6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ea:	1ab6      	subs	r6, r6, r2
 81009ec:	eb65 0503 	sbc.w	r5, r5, r3
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a06:	bf22      	ittt	cs
 8100a08:	1ab6      	subcs	r6, r6, r2
 8100a0a:	4675      	movcs	r5, lr
 8100a0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8100a10:	085b      	lsrs	r3, r3, #1
 8100a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a1e:	bf22      	ittt	cs
 8100a20:	1ab6      	subcs	r6, r6, r2
 8100a22:	4675      	movcs	r5, lr
 8100a24:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a28:	085b      	lsrs	r3, r3, #1
 8100a2a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a36:	bf22      	ittt	cs
 8100a38:	1ab6      	subcs	r6, r6, r2
 8100a3a:	4675      	movcs	r5, lr
 8100a3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a40:	085b      	lsrs	r3, r3, #1
 8100a42:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a46:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a4e:	bf22      	ittt	cs
 8100a50:	1ab6      	subcs	r6, r6, r2
 8100a52:	4675      	movcs	r5, lr
 8100a54:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a58:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a5c:	d018      	beq.n	8100a90 <__aeabi_ddiv+0x114>
 8100a5e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a62:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a66:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a6a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a6e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a72:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a76:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a7a:	d1c0      	bne.n	81009fe <__aeabi_ddiv+0x82>
 8100a7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a80:	d10b      	bne.n	8100a9a <__aeabi_ddiv+0x11e>
 8100a82:	ea41 0100 	orr.w	r1, r1, r0
 8100a86:	f04f 0000 	mov.w	r0, #0
 8100a8a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a8e:	e7b6      	b.n	81009fe <__aeabi_ddiv+0x82>
 8100a90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a94:	bf04      	itt	eq
 8100a96:	4301      	orreq	r1, r0
 8100a98:	2000      	moveq	r0, #0
 8100a9a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a9e:	bf88      	it	hi
 8100aa0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100aa4:	f63f aeaf 	bhi.w	8100806 <__aeabi_dmul+0xde>
 8100aa8:	ebb5 0c03 	subs.w	ip, r5, r3
 8100aac:	bf04      	itt	eq
 8100aae:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100ab2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100ab6:	f150 0000 	adcs.w	r0, r0, #0
 8100aba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100abe:	bd70      	pop	{r4, r5, r6, pc}
 8100ac0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100ac4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100ac8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100acc:	bfc2      	ittt	gt
 8100ace:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ad2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ad6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ad8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100adc:	f04f 0e00 	mov.w	lr, #0
 8100ae0:	3c01      	subs	r4, #1
 8100ae2:	e690      	b.n	8100806 <__aeabi_dmul+0xde>
 8100ae4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ae8:	e68d      	b.n	8100806 <__aeabi_dmul+0xde>
 8100aea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100aee:	ea94 0f0c 	teq	r4, ip
 8100af2:	bf08      	it	eq
 8100af4:	ea95 0f0c 	teqeq	r5, ip
 8100af8:	f43f af3b 	beq.w	8100972 <__aeabi_dmul+0x24a>
 8100afc:	ea94 0f0c 	teq	r4, ip
 8100b00:	d10a      	bne.n	8100b18 <__aeabi_ddiv+0x19c>
 8100b02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100b06:	f47f af34 	bne.w	8100972 <__aeabi_dmul+0x24a>
 8100b0a:	ea95 0f0c 	teq	r5, ip
 8100b0e:	f47f af25 	bne.w	810095c <__aeabi_dmul+0x234>
 8100b12:	4610      	mov	r0, r2
 8100b14:	4619      	mov	r1, r3
 8100b16:	e72c      	b.n	8100972 <__aeabi_dmul+0x24a>
 8100b18:	ea95 0f0c 	teq	r5, ip
 8100b1c:	d106      	bne.n	8100b2c <__aeabi_ddiv+0x1b0>
 8100b1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b22:	f43f aefd 	beq.w	8100920 <__aeabi_dmul+0x1f8>
 8100b26:	4610      	mov	r0, r2
 8100b28:	4619      	mov	r1, r3
 8100b2a:	e722      	b.n	8100972 <__aeabi_dmul+0x24a>
 8100b2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b30:	bf18      	it	ne
 8100b32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b36:	f47f aec5 	bne.w	81008c4 <__aeabi_dmul+0x19c>
 8100b3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b3e:	f47f af0d 	bne.w	810095c <__aeabi_dmul+0x234>
 8100b42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b46:	f47f aeeb 	bne.w	8100920 <__aeabi_dmul+0x1f8>
 8100b4a:	e712      	b.n	8100972 <__aeabi_dmul+0x24a>

08100b4c <__gedf2>:
 8100b4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8100b50:	e006      	b.n	8100b60 <__cmpdf2+0x4>
 8100b52:	bf00      	nop

08100b54 <__ledf2>:
 8100b54:	f04f 0c01 	mov.w	ip, #1
 8100b58:	e002      	b.n	8100b60 <__cmpdf2+0x4>
 8100b5a:	bf00      	nop

08100b5c <__cmpdf2>:
 8100b5c:	f04f 0c01 	mov.w	ip, #1
 8100b60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b70:	bf18      	it	ne
 8100b72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b76:	d01b      	beq.n	8100bb0 <__cmpdf2+0x54>
 8100b78:	b001      	add	sp, #4
 8100b7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b7e:	bf0c      	ite	eq
 8100b80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b84:	ea91 0f03 	teqne	r1, r3
 8100b88:	bf02      	ittt	eq
 8100b8a:	ea90 0f02 	teqeq	r0, r2
 8100b8e:	2000      	moveq	r0, #0
 8100b90:	4770      	bxeq	lr
 8100b92:	f110 0f00 	cmn.w	r0, #0
 8100b96:	ea91 0f03 	teq	r1, r3
 8100b9a:	bf58      	it	pl
 8100b9c:	4299      	cmppl	r1, r3
 8100b9e:	bf08      	it	eq
 8100ba0:	4290      	cmpeq	r0, r2
 8100ba2:	bf2c      	ite	cs
 8100ba4:	17d8      	asrcs	r0, r3, #31
 8100ba6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100baa:	f040 0001 	orr.w	r0, r0, #1
 8100bae:	4770      	bx	lr
 8100bb0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100bb8:	d102      	bne.n	8100bc0 <__cmpdf2+0x64>
 8100bba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100bbe:	d107      	bne.n	8100bd0 <__cmpdf2+0x74>
 8100bc0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100bc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100bc8:	d1d6      	bne.n	8100b78 <__cmpdf2+0x1c>
 8100bca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bce:	d0d3      	beq.n	8100b78 <__cmpdf2+0x1c>
 8100bd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bd4:	4770      	bx	lr
 8100bd6:	bf00      	nop

08100bd8 <__aeabi_cdrcmple>:
 8100bd8:	4684      	mov	ip, r0
 8100bda:	4610      	mov	r0, r2
 8100bdc:	4662      	mov	r2, ip
 8100bde:	468c      	mov	ip, r1
 8100be0:	4619      	mov	r1, r3
 8100be2:	4663      	mov	r3, ip
 8100be4:	e000      	b.n	8100be8 <__aeabi_cdcmpeq>
 8100be6:	bf00      	nop

08100be8 <__aeabi_cdcmpeq>:
 8100be8:	b501      	push	{r0, lr}
 8100bea:	f7ff ffb7 	bl	8100b5c <__cmpdf2>
 8100bee:	2800      	cmp	r0, #0
 8100bf0:	bf48      	it	mi
 8100bf2:	f110 0f00 	cmnmi.w	r0, #0
 8100bf6:	bd01      	pop	{r0, pc}

08100bf8 <__aeabi_dcmpeq>:
 8100bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bfc:	f7ff fff4 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c00:	bf0c      	ite	eq
 8100c02:	2001      	moveq	r0, #1
 8100c04:	2000      	movne	r0, #0
 8100c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c0a:	bf00      	nop

08100c0c <__aeabi_dcmplt>:
 8100c0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c10:	f7ff ffea 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c14:	bf34      	ite	cc
 8100c16:	2001      	movcc	r0, #1
 8100c18:	2000      	movcs	r0, #0
 8100c1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c1e:	bf00      	nop

08100c20 <__aeabi_dcmple>:
 8100c20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c24:	f7ff ffe0 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c28:	bf94      	ite	ls
 8100c2a:	2001      	movls	r0, #1
 8100c2c:	2000      	movhi	r0, #0
 8100c2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c32:	bf00      	nop

08100c34 <__aeabi_dcmpge>:
 8100c34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c38:	f7ff ffce 	bl	8100bd8 <__aeabi_cdrcmple>
 8100c3c:	bf94      	ite	ls
 8100c3e:	2001      	movls	r0, #1
 8100c40:	2000      	movhi	r0, #0
 8100c42:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c46:	bf00      	nop

08100c48 <__aeabi_dcmpgt>:
 8100c48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c4c:	f7ff ffc4 	bl	8100bd8 <__aeabi_cdrcmple>
 8100c50:	bf34      	ite	cc
 8100c52:	2001      	movcc	r0, #1
 8100c54:	2000      	movcs	r0, #0
 8100c56:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c5a:	bf00      	nop

08100c5c <__aeabi_dcmpun>:
 8100c5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c64:	d102      	bne.n	8100c6c <__aeabi_dcmpun+0x10>
 8100c66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c6a:	d10a      	bne.n	8100c82 <__aeabi_dcmpun+0x26>
 8100c6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c74:	d102      	bne.n	8100c7c <__aeabi_dcmpun+0x20>
 8100c76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c7a:	d102      	bne.n	8100c82 <__aeabi_dcmpun+0x26>
 8100c7c:	f04f 0000 	mov.w	r0, #0
 8100c80:	4770      	bx	lr
 8100c82:	f04f 0001 	mov.w	r0, #1
 8100c86:	4770      	bx	lr

08100c88 <__aeabi_d2iz>:
 8100c88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c90:	d215      	bcs.n	8100cbe <__aeabi_d2iz+0x36>
 8100c92:	d511      	bpl.n	8100cb8 <__aeabi_d2iz+0x30>
 8100c94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c9c:	d912      	bls.n	8100cc4 <__aeabi_d2iz+0x3c>
 8100c9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100ca2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100ca6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100caa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100cae:	fa23 f002 	lsr.w	r0, r3, r2
 8100cb2:	bf18      	it	ne
 8100cb4:	4240      	negne	r0, r0
 8100cb6:	4770      	bx	lr
 8100cb8:	f04f 0000 	mov.w	r0, #0
 8100cbc:	4770      	bx	lr
 8100cbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cc2:	d105      	bne.n	8100cd0 <__aeabi_d2iz+0x48>
 8100cc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100cc8:	bf08      	it	eq
 8100cca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cce:	4770      	bx	lr
 8100cd0:	f04f 0000 	mov.w	r0, #0
 8100cd4:	4770      	bx	lr
 8100cd6:	bf00      	nop

08100cd8 <__aeabi_d2f>:
 8100cd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100ce0:	bf24      	itt	cs
 8100ce2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100ce6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100cea:	d90d      	bls.n	8100d08 <__aeabi_d2f+0x30>
 8100cec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100cf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100cf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100cf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100cfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d00:	bf08      	it	eq
 8100d02:	f020 0001 	biceq.w	r0, r0, #1
 8100d06:	4770      	bx	lr
 8100d08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d0c:	d121      	bne.n	8100d52 <__aeabi_d2f+0x7a>
 8100d0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d12:	bfbc      	itt	lt
 8100d14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d18:	4770      	bxlt	lr
 8100d1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d22:	f1c2 0218 	rsb	r2, r2, #24
 8100d26:	f1c2 0c20 	rsb	ip, r2, #32
 8100d2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d2e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d32:	bf18      	it	ne
 8100d34:	f040 0001 	orrne.w	r0, r0, #1
 8100d38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d44:	ea40 000c 	orr.w	r0, r0, ip
 8100d48:	fa23 f302 	lsr.w	r3, r3, r2
 8100d4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d50:	e7cc      	b.n	8100cec <__aeabi_d2f+0x14>
 8100d52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d56:	d107      	bne.n	8100d68 <__aeabi_d2f+0x90>
 8100d58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d5c:	bf1e      	ittt	ne
 8100d5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d66:	4770      	bxne	lr
 8100d68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d74:	4770      	bx	lr
 8100d76:	bf00      	nop

08100d78 <__aeabi_ldivmod>:
 8100d78:	b97b      	cbnz	r3, 8100d9a <__aeabi_ldivmod+0x22>
 8100d7a:	b972      	cbnz	r2, 8100d9a <__aeabi_ldivmod+0x22>
 8100d7c:	2900      	cmp	r1, #0
 8100d7e:	bfbe      	ittt	lt
 8100d80:	2000      	movlt	r0, #0
 8100d82:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8100d86:	e006      	blt.n	8100d96 <__aeabi_ldivmod+0x1e>
 8100d88:	bf08      	it	eq
 8100d8a:	2800      	cmpeq	r0, #0
 8100d8c:	bf1c      	itt	ne
 8100d8e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8100d92:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8100d96:	f000 b9bd 	b.w	8101114 <__aeabi_idiv0>
 8100d9a:	f1ad 0c08 	sub.w	ip, sp, #8
 8100d9e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100da2:	2900      	cmp	r1, #0
 8100da4:	db09      	blt.n	8100dba <__aeabi_ldivmod+0x42>
 8100da6:	2b00      	cmp	r3, #0
 8100da8:	db1a      	blt.n	8100de0 <__aeabi_ldivmod+0x68>
 8100daa:	f000 f84d 	bl	8100e48 <__udivmoddi4>
 8100dae:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100db2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100db6:	b004      	add	sp, #16
 8100db8:	4770      	bx	lr
 8100dba:	4240      	negs	r0, r0
 8100dbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100dc0:	2b00      	cmp	r3, #0
 8100dc2:	db1b      	blt.n	8100dfc <__aeabi_ldivmod+0x84>
 8100dc4:	f000 f840 	bl	8100e48 <__udivmoddi4>
 8100dc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dd0:	b004      	add	sp, #16
 8100dd2:	4240      	negs	r0, r0
 8100dd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100dd8:	4252      	negs	r2, r2
 8100dda:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100dde:	4770      	bx	lr
 8100de0:	4252      	negs	r2, r2
 8100de2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100de6:	f000 f82f 	bl	8100e48 <__udivmoddi4>
 8100dea:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100df2:	b004      	add	sp, #16
 8100df4:	4240      	negs	r0, r0
 8100df6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100dfa:	4770      	bx	lr
 8100dfc:	4252      	negs	r2, r2
 8100dfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100e02:	f000 f821 	bl	8100e48 <__udivmoddi4>
 8100e06:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100e0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100e0e:	b004      	add	sp, #16
 8100e10:	4252      	negs	r2, r2
 8100e12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100e16:	4770      	bx	lr

08100e18 <__aeabi_uldivmod>:
 8100e18:	b953      	cbnz	r3, 8100e30 <__aeabi_uldivmod+0x18>
 8100e1a:	b94a      	cbnz	r2, 8100e30 <__aeabi_uldivmod+0x18>
 8100e1c:	2900      	cmp	r1, #0
 8100e1e:	bf08      	it	eq
 8100e20:	2800      	cmpeq	r0, #0
 8100e22:	bf1c      	itt	ne
 8100e24:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8100e28:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8100e2c:	f000 b972 	b.w	8101114 <__aeabi_idiv0>
 8100e30:	f1ad 0c08 	sub.w	ip, sp, #8
 8100e34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100e38:	f000 f806 	bl	8100e48 <__udivmoddi4>
 8100e3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100e40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100e44:	b004      	add	sp, #16
 8100e46:	4770      	bx	lr

08100e48 <__udivmoddi4>:
 8100e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e4c:	9e08      	ldr	r6, [sp, #32]
 8100e4e:	4604      	mov	r4, r0
 8100e50:	4688      	mov	r8, r1
 8100e52:	2b00      	cmp	r3, #0
 8100e54:	d14b      	bne.n	8100eee <__udivmoddi4+0xa6>
 8100e56:	428a      	cmp	r2, r1
 8100e58:	4615      	mov	r5, r2
 8100e5a:	d967      	bls.n	8100f2c <__udivmoddi4+0xe4>
 8100e5c:	fab2 f282 	clz	r2, r2
 8100e60:	b14a      	cbz	r2, 8100e76 <__udivmoddi4+0x2e>
 8100e62:	f1c2 0720 	rsb	r7, r2, #32
 8100e66:	fa01 f302 	lsl.w	r3, r1, r2
 8100e6a:	fa20 f707 	lsr.w	r7, r0, r7
 8100e6e:	4095      	lsls	r5, r2
 8100e70:	ea47 0803 	orr.w	r8, r7, r3
 8100e74:	4094      	lsls	r4, r2
 8100e76:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8100e7a:	0c23      	lsrs	r3, r4, #16
 8100e7c:	fbb8 f7fe 	udiv	r7, r8, lr
 8100e80:	fa1f fc85 	uxth.w	ip, r5
 8100e84:	fb0e 8817 	mls	r8, lr, r7, r8
 8100e88:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8100e8c:	fb07 f10c 	mul.w	r1, r7, ip
 8100e90:	4299      	cmp	r1, r3
 8100e92:	d909      	bls.n	8100ea8 <__udivmoddi4+0x60>
 8100e94:	18eb      	adds	r3, r5, r3
 8100e96:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8100e9a:	f080 811b 	bcs.w	81010d4 <__udivmoddi4+0x28c>
 8100e9e:	4299      	cmp	r1, r3
 8100ea0:	f240 8118 	bls.w	81010d4 <__udivmoddi4+0x28c>
 8100ea4:	3f02      	subs	r7, #2
 8100ea6:	442b      	add	r3, r5
 8100ea8:	1a5b      	subs	r3, r3, r1
 8100eaa:	b2a4      	uxth	r4, r4
 8100eac:	fbb3 f0fe 	udiv	r0, r3, lr
 8100eb0:	fb0e 3310 	mls	r3, lr, r0, r3
 8100eb4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100eb8:	fb00 fc0c 	mul.w	ip, r0, ip
 8100ebc:	45a4      	cmp	ip, r4
 8100ebe:	d909      	bls.n	8100ed4 <__udivmoddi4+0x8c>
 8100ec0:	192c      	adds	r4, r5, r4
 8100ec2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8100ec6:	f080 8107 	bcs.w	81010d8 <__udivmoddi4+0x290>
 8100eca:	45a4      	cmp	ip, r4
 8100ecc:	f240 8104 	bls.w	81010d8 <__udivmoddi4+0x290>
 8100ed0:	3802      	subs	r0, #2
 8100ed2:	442c      	add	r4, r5
 8100ed4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8100ed8:	eba4 040c 	sub.w	r4, r4, ip
 8100edc:	2700      	movs	r7, #0
 8100ede:	b11e      	cbz	r6, 8100ee8 <__udivmoddi4+0xa0>
 8100ee0:	40d4      	lsrs	r4, r2
 8100ee2:	2300      	movs	r3, #0
 8100ee4:	e9c6 4300 	strd	r4, r3, [r6]
 8100ee8:	4639      	mov	r1, r7
 8100eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100eee:	428b      	cmp	r3, r1
 8100ef0:	d909      	bls.n	8100f06 <__udivmoddi4+0xbe>
 8100ef2:	2e00      	cmp	r6, #0
 8100ef4:	f000 80eb 	beq.w	81010ce <__udivmoddi4+0x286>
 8100ef8:	2700      	movs	r7, #0
 8100efa:	e9c6 0100 	strd	r0, r1, [r6]
 8100efe:	4638      	mov	r0, r7
 8100f00:	4639      	mov	r1, r7
 8100f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100f06:	fab3 f783 	clz	r7, r3
 8100f0a:	2f00      	cmp	r7, #0
 8100f0c:	d147      	bne.n	8100f9e <__udivmoddi4+0x156>
 8100f0e:	428b      	cmp	r3, r1
 8100f10:	d302      	bcc.n	8100f18 <__udivmoddi4+0xd0>
 8100f12:	4282      	cmp	r2, r0
 8100f14:	f200 80fa 	bhi.w	810110c <__udivmoddi4+0x2c4>
 8100f18:	1a84      	subs	r4, r0, r2
 8100f1a:	eb61 0303 	sbc.w	r3, r1, r3
 8100f1e:	2001      	movs	r0, #1
 8100f20:	4698      	mov	r8, r3
 8100f22:	2e00      	cmp	r6, #0
 8100f24:	d0e0      	beq.n	8100ee8 <__udivmoddi4+0xa0>
 8100f26:	e9c6 4800 	strd	r4, r8, [r6]
 8100f2a:	e7dd      	b.n	8100ee8 <__udivmoddi4+0xa0>
 8100f2c:	b902      	cbnz	r2, 8100f30 <__udivmoddi4+0xe8>
 8100f2e:	deff      	udf	#255	; 0xff
 8100f30:	fab2 f282 	clz	r2, r2
 8100f34:	2a00      	cmp	r2, #0
 8100f36:	f040 808f 	bne.w	8101058 <__udivmoddi4+0x210>
 8100f3a:	1b49      	subs	r1, r1, r5
 8100f3c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8100f40:	fa1f f885 	uxth.w	r8, r5
 8100f44:	2701      	movs	r7, #1
 8100f46:	fbb1 fcfe 	udiv	ip, r1, lr
 8100f4a:	0c23      	lsrs	r3, r4, #16
 8100f4c:	fb0e 111c 	mls	r1, lr, ip, r1
 8100f50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100f54:	fb08 f10c 	mul.w	r1, r8, ip
 8100f58:	4299      	cmp	r1, r3
 8100f5a:	d907      	bls.n	8100f6c <__udivmoddi4+0x124>
 8100f5c:	18eb      	adds	r3, r5, r3
 8100f5e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8100f62:	d202      	bcs.n	8100f6a <__udivmoddi4+0x122>
 8100f64:	4299      	cmp	r1, r3
 8100f66:	f200 80cd 	bhi.w	8101104 <__udivmoddi4+0x2bc>
 8100f6a:	4684      	mov	ip, r0
 8100f6c:	1a59      	subs	r1, r3, r1
 8100f6e:	b2a3      	uxth	r3, r4
 8100f70:	fbb1 f0fe 	udiv	r0, r1, lr
 8100f74:	fb0e 1410 	mls	r4, lr, r0, r1
 8100f78:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8100f7c:	fb08 f800 	mul.w	r8, r8, r0
 8100f80:	45a0      	cmp	r8, r4
 8100f82:	d907      	bls.n	8100f94 <__udivmoddi4+0x14c>
 8100f84:	192c      	adds	r4, r5, r4
 8100f86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8100f8a:	d202      	bcs.n	8100f92 <__udivmoddi4+0x14a>
 8100f8c:	45a0      	cmp	r8, r4
 8100f8e:	f200 80b6 	bhi.w	81010fe <__udivmoddi4+0x2b6>
 8100f92:	4618      	mov	r0, r3
 8100f94:	eba4 0408 	sub.w	r4, r4, r8
 8100f98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8100f9c:	e79f      	b.n	8100ede <__udivmoddi4+0x96>
 8100f9e:	f1c7 0c20 	rsb	ip, r7, #32
 8100fa2:	40bb      	lsls	r3, r7
 8100fa4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8100fa8:	ea4e 0e03 	orr.w	lr, lr, r3
 8100fac:	fa01 f407 	lsl.w	r4, r1, r7
 8100fb0:	fa20 f50c 	lsr.w	r5, r0, ip
 8100fb4:	fa21 f30c 	lsr.w	r3, r1, ip
 8100fb8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8100fbc:	4325      	orrs	r5, r4
 8100fbe:	fbb3 f9f8 	udiv	r9, r3, r8
 8100fc2:	0c2c      	lsrs	r4, r5, #16
 8100fc4:	fb08 3319 	mls	r3, r8, r9, r3
 8100fc8:	fa1f fa8e 	uxth.w	sl, lr
 8100fcc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8100fd0:	fb09 f40a 	mul.w	r4, r9, sl
 8100fd4:	429c      	cmp	r4, r3
 8100fd6:	fa02 f207 	lsl.w	r2, r2, r7
 8100fda:	fa00 f107 	lsl.w	r1, r0, r7
 8100fde:	d90b      	bls.n	8100ff8 <__udivmoddi4+0x1b0>
 8100fe0:	eb1e 0303 	adds.w	r3, lr, r3
 8100fe4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8100fe8:	f080 8087 	bcs.w	81010fa <__udivmoddi4+0x2b2>
 8100fec:	429c      	cmp	r4, r3
 8100fee:	f240 8084 	bls.w	81010fa <__udivmoddi4+0x2b2>
 8100ff2:	f1a9 0902 	sub.w	r9, r9, #2
 8100ff6:	4473      	add	r3, lr
 8100ff8:	1b1b      	subs	r3, r3, r4
 8100ffa:	b2ad      	uxth	r5, r5
 8100ffc:	fbb3 f0f8 	udiv	r0, r3, r8
 8101000:	fb08 3310 	mls	r3, r8, r0, r3
 8101004:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8101008:	fb00 fa0a 	mul.w	sl, r0, sl
 810100c:	45a2      	cmp	sl, r4
 810100e:	d908      	bls.n	8101022 <__udivmoddi4+0x1da>
 8101010:	eb1e 0404 	adds.w	r4, lr, r4
 8101014:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8101018:	d26b      	bcs.n	81010f2 <__udivmoddi4+0x2aa>
 810101a:	45a2      	cmp	sl, r4
 810101c:	d969      	bls.n	81010f2 <__udivmoddi4+0x2aa>
 810101e:	3802      	subs	r0, #2
 8101020:	4474      	add	r4, lr
 8101022:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8101026:	fba0 8902 	umull	r8, r9, r0, r2
 810102a:	eba4 040a 	sub.w	r4, r4, sl
 810102e:	454c      	cmp	r4, r9
 8101030:	46c2      	mov	sl, r8
 8101032:	464b      	mov	r3, r9
 8101034:	d354      	bcc.n	81010e0 <__udivmoddi4+0x298>
 8101036:	d051      	beq.n	81010dc <__udivmoddi4+0x294>
 8101038:	2e00      	cmp	r6, #0
 810103a:	d069      	beq.n	8101110 <__udivmoddi4+0x2c8>
 810103c:	ebb1 050a 	subs.w	r5, r1, sl
 8101040:	eb64 0403 	sbc.w	r4, r4, r3
 8101044:	fa04 fc0c 	lsl.w	ip, r4, ip
 8101048:	40fd      	lsrs	r5, r7
 810104a:	40fc      	lsrs	r4, r7
 810104c:	ea4c 0505 	orr.w	r5, ip, r5
 8101050:	e9c6 5400 	strd	r5, r4, [r6]
 8101054:	2700      	movs	r7, #0
 8101056:	e747      	b.n	8100ee8 <__udivmoddi4+0xa0>
 8101058:	f1c2 0320 	rsb	r3, r2, #32
 810105c:	fa20 f703 	lsr.w	r7, r0, r3
 8101060:	4095      	lsls	r5, r2
 8101062:	fa01 f002 	lsl.w	r0, r1, r2
 8101066:	fa21 f303 	lsr.w	r3, r1, r3
 810106a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 810106e:	4338      	orrs	r0, r7
 8101070:	0c01      	lsrs	r1, r0, #16
 8101072:	fbb3 f7fe 	udiv	r7, r3, lr
 8101076:	fa1f f885 	uxth.w	r8, r5
 810107a:	fb0e 3317 	mls	r3, lr, r7, r3
 810107e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8101082:	fb07 f308 	mul.w	r3, r7, r8
 8101086:	428b      	cmp	r3, r1
 8101088:	fa04 f402 	lsl.w	r4, r4, r2
 810108c:	d907      	bls.n	810109e <__udivmoddi4+0x256>
 810108e:	1869      	adds	r1, r5, r1
 8101090:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8101094:	d22f      	bcs.n	81010f6 <__udivmoddi4+0x2ae>
 8101096:	428b      	cmp	r3, r1
 8101098:	d92d      	bls.n	81010f6 <__udivmoddi4+0x2ae>
 810109a:	3f02      	subs	r7, #2
 810109c:	4429      	add	r1, r5
 810109e:	1acb      	subs	r3, r1, r3
 81010a0:	b281      	uxth	r1, r0
 81010a2:	fbb3 f0fe 	udiv	r0, r3, lr
 81010a6:	fb0e 3310 	mls	r3, lr, r0, r3
 81010aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81010ae:	fb00 f308 	mul.w	r3, r0, r8
 81010b2:	428b      	cmp	r3, r1
 81010b4:	d907      	bls.n	81010c6 <__udivmoddi4+0x27e>
 81010b6:	1869      	adds	r1, r5, r1
 81010b8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 81010bc:	d217      	bcs.n	81010ee <__udivmoddi4+0x2a6>
 81010be:	428b      	cmp	r3, r1
 81010c0:	d915      	bls.n	81010ee <__udivmoddi4+0x2a6>
 81010c2:	3802      	subs	r0, #2
 81010c4:	4429      	add	r1, r5
 81010c6:	1ac9      	subs	r1, r1, r3
 81010c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 81010cc:	e73b      	b.n	8100f46 <__udivmoddi4+0xfe>
 81010ce:	4637      	mov	r7, r6
 81010d0:	4630      	mov	r0, r6
 81010d2:	e709      	b.n	8100ee8 <__udivmoddi4+0xa0>
 81010d4:	4607      	mov	r7, r0
 81010d6:	e6e7      	b.n	8100ea8 <__udivmoddi4+0x60>
 81010d8:	4618      	mov	r0, r3
 81010da:	e6fb      	b.n	8100ed4 <__udivmoddi4+0x8c>
 81010dc:	4541      	cmp	r1, r8
 81010de:	d2ab      	bcs.n	8101038 <__udivmoddi4+0x1f0>
 81010e0:	ebb8 0a02 	subs.w	sl, r8, r2
 81010e4:	eb69 020e 	sbc.w	r2, r9, lr
 81010e8:	3801      	subs	r0, #1
 81010ea:	4613      	mov	r3, r2
 81010ec:	e7a4      	b.n	8101038 <__udivmoddi4+0x1f0>
 81010ee:	4660      	mov	r0, ip
 81010f0:	e7e9      	b.n	81010c6 <__udivmoddi4+0x27e>
 81010f2:	4618      	mov	r0, r3
 81010f4:	e795      	b.n	8101022 <__udivmoddi4+0x1da>
 81010f6:	4667      	mov	r7, ip
 81010f8:	e7d1      	b.n	810109e <__udivmoddi4+0x256>
 81010fa:	4681      	mov	r9, r0
 81010fc:	e77c      	b.n	8100ff8 <__udivmoddi4+0x1b0>
 81010fe:	3802      	subs	r0, #2
 8101100:	442c      	add	r4, r5
 8101102:	e747      	b.n	8100f94 <__udivmoddi4+0x14c>
 8101104:	f1ac 0c02 	sub.w	ip, ip, #2
 8101108:	442b      	add	r3, r5
 810110a:	e72f      	b.n	8100f6c <__udivmoddi4+0x124>
 810110c:	4638      	mov	r0, r7
 810110e:	e708      	b.n	8100f22 <__udivmoddi4+0xda>
 8101110:	4637      	mov	r7, r6
 8101112:	e6e9      	b.n	8100ee8 <__udivmoddi4+0xa0>

08101114 <__aeabi_idiv0>:
 8101114:	4770      	bx	lr
 8101116:	bf00      	nop

08101118 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101118:	b480      	push	{r7}
 810111a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 810111c:	4b0b      	ldr	r3, [pc, #44]	; (810114c <SystemInit+0x34>)
 810111e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8101122:	4a0a      	ldr	r2, [pc, #40]	; (810114c <SystemInit+0x34>)
 8101124:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101128:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810112c:	4b07      	ldr	r3, [pc, #28]	; (810114c <SystemInit+0x34>)
 810112e:	691b      	ldr	r3, [r3, #16]
 8101130:	4a06      	ldr	r2, [pc, #24]	; (810114c <SystemInit+0x34>)
 8101132:	f043 0310 	orr.w	r3, r3, #16
 8101136:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8101138:	4b04      	ldr	r3, [pc, #16]	; (810114c <SystemInit+0x34>)
 810113a:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 810113e:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8101140:	bf00      	nop
 8101142:	46bd      	mov	sp, r7
 8101144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101148:	4770      	bx	lr
 810114a:	bf00      	nop
 810114c:	e000ed00 	.word	0xe000ed00

08101150 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8101150:	b580      	push	{r7, lr}
 8101152:	b082      	sub	sp, #8
 8101154:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8101156:	4b21      	ldr	r3, [pc, #132]	; (81011dc <MX_DMA_Init+0x8c>)
 8101158:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810115c:	4a1f      	ldr	r2, [pc, #124]	; (81011dc <MX_DMA_Init+0x8c>)
 810115e:	f043 0301 	orr.w	r3, r3, #1
 8101162:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101166:	4b1d      	ldr	r3, [pc, #116]	; (81011dc <MX_DMA_Init+0x8c>)
 8101168:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810116c:	f003 0301 	and.w	r3, r3, #1
 8101170:	607b      	str	r3, [r7, #4]
 8101172:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8101174:	4b19      	ldr	r3, [pc, #100]	; (81011dc <MX_DMA_Init+0x8c>)
 8101176:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810117a:	4a18      	ldr	r2, [pc, #96]	; (81011dc <MX_DMA_Init+0x8c>)
 810117c:	f043 0302 	orr.w	r3, r3, #2
 8101180:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101184:	4b15      	ldr	r3, [pc, #84]	; (81011dc <MX_DMA_Init+0x8c>)
 8101186:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810118a:	f003 0302 	and.w	r3, r3, #2
 810118e:	603b      	str	r3, [r7, #0]
 8101190:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8101192:	2200      	movs	r2, #0
 8101194:	2105      	movs	r1, #5
 8101196:	200b      	movs	r0, #11
 8101198:	f001 f957 	bl	810244a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 810119c:	200b      	movs	r0, #11
 810119e:	f001 f96e 	bl	810247e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 81011a2:	2200      	movs	r2, #0
 81011a4:	2105      	movs	r1, #5
 81011a6:	200c      	movs	r0, #12
 81011a8:	f001 f94f 	bl	810244a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 81011ac:	200c      	movs	r0, #12
 81011ae:	f001 f966 	bl	810247e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 81011b2:	2200      	movs	r2, #0
 81011b4:	2105      	movs	r1, #5
 81011b6:	203a      	movs	r0, #58	; 0x3a
 81011b8:	f001 f947 	bl	810244a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 81011bc:	203a      	movs	r0, #58	; 0x3a
 81011be:	f001 f95e 	bl	810247e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 81011c2:	2200      	movs	r2, #0
 81011c4:	2105      	movs	r1, #5
 81011c6:	203b      	movs	r0, #59	; 0x3b
 81011c8:	f001 f93f 	bl	810244a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 81011cc:	203b      	movs	r0, #59	; 0x3b
 81011ce:	f001 f956 	bl	810247e <HAL_NVIC_EnableIRQ>

}
 81011d2:	bf00      	nop
 81011d4:	3708      	adds	r7, #8
 81011d6:	46bd      	mov	sp, r7
 81011d8:	bd80      	pop	{r7, pc}
 81011da:	bf00      	nop
 81011dc:	58024400 	.word	0x58024400

081011e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 81011e0:	b480      	push	{r7}
 81011e2:	b085      	sub	sp, #20
 81011e4:	af00      	add	r7, sp, #0
 81011e6:	60f8      	str	r0, [r7, #12]
 81011e8:	60b9      	str	r1, [r7, #8]
 81011ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 81011ec:	68fb      	ldr	r3, [r7, #12]
 81011ee:	4a07      	ldr	r2, [pc, #28]	; (810120c <vApplicationGetIdleTaskMemory+0x2c>)
 81011f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 81011f2:	68bb      	ldr	r3, [r7, #8]
 81011f4:	4a06      	ldr	r2, [pc, #24]	; (8101210 <vApplicationGetIdleTaskMemory+0x30>)
 81011f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 81011f8:	687b      	ldr	r3, [r7, #4]
 81011fa:	2280      	movs	r2, #128	; 0x80
 81011fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 81011fe:	bf00      	nop
 8101200:	3714      	adds	r7, #20
 8101202:	46bd      	mov	sp, r7
 8101204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101208:	4770      	bx	lr
 810120a:	bf00      	nop
 810120c:	10000228 	.word	0x10000228
 8101210:	1000027c 	.word	0x1000027c

08101214 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8101214:	b5b0      	push	{r4, r5, r7, lr}
 8101216:	b088      	sub	sp, #32
 8101218:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of watchdog */
  osThreadDef(watchdog, watchdogTask, osPriorityNormal, 0, 128);
 810121a:	4b0b      	ldr	r3, [pc, #44]	; (8101248 <MX_FREERTOS_Init+0x34>)
 810121c:	1d3c      	adds	r4, r7, #4
 810121e:	461d      	mov	r5, r3
 8101220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101224:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8101228:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  watchdogHandle = osThreadCreate(osThread(watchdog), NULL);
 810122c:	1d3b      	adds	r3, r7, #4
 810122e:	2100      	movs	r1, #0
 8101230:	4618      	mov	r0, r3
 8101232:	f007 fded 	bl	8108e10 <osThreadCreate>
 8101236:	4602      	mov	r2, r0
 8101238:	4b04      	ldr	r3, [pc, #16]	; (810124c <MX_FREERTOS_Init+0x38>)
 810123a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	initCortexM4();
 810123c:	f00d fc68 	bl	810eb10 <initCortexM4>
  /* USER CODE END RTOS_THREADS */

}
 8101240:	bf00      	nop
 8101242:	3720      	adds	r7, #32
 8101244:	46bd      	mov	sp, r7
 8101246:	bdb0      	pop	{r4, r5, r7, pc}
 8101248:	0811234c 	.word	0x0811234c
 810124c:	10009838 	.word	0x10009838

08101250 <watchdogTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_watchdogTask */
void watchdogTask(void const * argument)
{
 8101250:	b580      	push	{r7, lr}
 8101252:	b082      	sub	sp, #8
 8101254:	af00      	add	r7, sp, #0
 8101256:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN watchdogTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8101258:	2001      	movs	r0, #1
 810125a:	f007 fe25 	bl	8108ea8 <osDelay>
 810125e:	e7fb      	b.n	8101258 <watchdogTask+0x8>

08101260 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8101260:	b480      	push	{r7}
 8101262:	b087      	sub	sp, #28
 8101264:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8101266:	4b28      	ldr	r3, [pc, #160]	; (8101308 <MX_GPIO_Init+0xa8>)
 8101268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810126c:	4a26      	ldr	r2, [pc, #152]	; (8101308 <MX_GPIO_Init+0xa8>)
 810126e:	f043 0310 	orr.w	r3, r3, #16
 8101272:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101276:	4b24      	ldr	r3, [pc, #144]	; (8101308 <MX_GPIO_Init+0xa8>)
 8101278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810127c:	f003 0310 	and.w	r3, r3, #16
 8101280:	617b      	str	r3, [r7, #20]
 8101282:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101284:	4b20      	ldr	r3, [pc, #128]	; (8101308 <MX_GPIO_Init+0xa8>)
 8101286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810128a:	4a1f      	ldr	r2, [pc, #124]	; (8101308 <MX_GPIO_Init+0xa8>)
 810128c:	f043 0301 	orr.w	r3, r3, #1
 8101290:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101294:	4b1c      	ldr	r3, [pc, #112]	; (8101308 <MX_GPIO_Init+0xa8>)
 8101296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810129a:	f003 0301 	and.w	r3, r3, #1
 810129e:	613b      	str	r3, [r7, #16]
 81012a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81012a2:	4b19      	ldr	r3, [pc, #100]	; (8101308 <MX_GPIO_Init+0xa8>)
 81012a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012a8:	4a17      	ldr	r2, [pc, #92]	; (8101308 <MX_GPIO_Init+0xa8>)
 81012aa:	f043 0302 	orr.w	r3, r3, #2
 81012ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012b2:	4b15      	ldr	r3, [pc, #84]	; (8101308 <MX_GPIO_Init+0xa8>)
 81012b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012b8:	f003 0302 	and.w	r3, r3, #2
 81012bc:	60fb      	str	r3, [r7, #12]
 81012be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81012c0:	4b11      	ldr	r3, [pc, #68]	; (8101308 <MX_GPIO_Init+0xa8>)
 81012c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012c6:	4a10      	ldr	r2, [pc, #64]	; (8101308 <MX_GPIO_Init+0xa8>)
 81012c8:	f043 0308 	orr.w	r3, r3, #8
 81012cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012d0:	4b0d      	ldr	r3, [pc, #52]	; (8101308 <MX_GPIO_Init+0xa8>)
 81012d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012d6:	f003 0308 	and.w	r3, r3, #8
 81012da:	60bb      	str	r3, [r7, #8]
 81012dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 81012de:	4b0a      	ldr	r3, [pc, #40]	; (8101308 <MX_GPIO_Init+0xa8>)
 81012e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012e4:	4a08      	ldr	r2, [pc, #32]	; (8101308 <MX_GPIO_Init+0xa8>)
 81012e6:	f043 0304 	orr.w	r3, r3, #4
 81012ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012ee:	4b06      	ldr	r3, [pc, #24]	; (8101308 <MX_GPIO_Init+0xa8>)
 81012f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012f4:	f003 0304 	and.w	r3, r3, #4
 81012f8:	607b      	str	r3, [r7, #4]
 81012fa:	687b      	ldr	r3, [r7, #4]

}
 81012fc:	bf00      	nop
 81012fe:	371c      	adds	r7, #28
 8101300:	46bd      	mov	sp, r7
 8101302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101306:	4770      	bx	lr
 8101308:	58024400 	.word	0x58024400

0810130c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 810130c:	b580      	push	{r7, lr}
 810130e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8101310:	4b1c      	ldr	r3, [pc, #112]	; (8101384 <MX_I2C1_Init+0x78>)
 8101312:	4a1d      	ldr	r2, [pc, #116]	; (8101388 <MX_I2C1_Init+0x7c>)
 8101314:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401242;
 8101316:	4b1b      	ldr	r3, [pc, #108]	; (8101384 <MX_I2C1_Init+0x78>)
 8101318:	4a1c      	ldr	r2, [pc, #112]	; (810138c <MX_I2C1_Init+0x80>)
 810131a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 810131c:	4b19      	ldr	r3, [pc, #100]	; (8101384 <MX_I2C1_Init+0x78>)
 810131e:	2200      	movs	r2, #0
 8101320:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8101322:	4b18      	ldr	r3, [pc, #96]	; (8101384 <MX_I2C1_Init+0x78>)
 8101324:	2201      	movs	r2, #1
 8101326:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8101328:	4b16      	ldr	r3, [pc, #88]	; (8101384 <MX_I2C1_Init+0x78>)
 810132a:	2200      	movs	r2, #0
 810132c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 810132e:	4b15      	ldr	r3, [pc, #84]	; (8101384 <MX_I2C1_Init+0x78>)
 8101330:	2200      	movs	r2, #0
 8101332:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8101334:	4b13      	ldr	r3, [pc, #76]	; (8101384 <MX_I2C1_Init+0x78>)
 8101336:	2200      	movs	r2, #0
 8101338:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 810133a:	4b12      	ldr	r3, [pc, #72]	; (8101384 <MX_I2C1_Init+0x78>)
 810133c:	2200      	movs	r2, #0
 810133e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8101340:	4b10      	ldr	r3, [pc, #64]	; (8101384 <MX_I2C1_Init+0x78>)
 8101342:	2200      	movs	r2, #0
 8101344:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8101346:	480f      	ldr	r0, [pc, #60]	; (8101384 <MX_I2C1_Init+0x78>)
 8101348:	f003 fdea 	bl	8104f20 <HAL_I2C_Init>
 810134c:	4603      	mov	r3, r0
 810134e:	2b00      	cmp	r3, #0
 8101350:	d001      	beq.n	8101356 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8101352:	f000 fa01 	bl	8101758 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8101356:	2100      	movs	r1, #0
 8101358:	480a      	ldr	r0, [pc, #40]	; (8101384 <MX_I2C1_Init+0x78>)
 810135a:	f004 fd2b 	bl	8105db4 <HAL_I2CEx_ConfigAnalogFilter>
 810135e:	4603      	mov	r3, r0
 8101360:	2b00      	cmp	r3, #0
 8101362:	d001      	beq.n	8101368 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8101364:	f000 f9f8 	bl	8101758 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8101368:	2100      	movs	r1, #0
 810136a:	4806      	ldr	r0, [pc, #24]	; (8101384 <MX_I2C1_Init+0x78>)
 810136c:	f004 fd6d 	bl	8105e4a <HAL_I2CEx_ConfigDigitalFilter>
 8101370:	4603      	mov	r3, r0
 8101372:	2b00      	cmp	r3, #0
 8101374:	d001      	beq.n	810137a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8101376:	f000 f9ef 	bl	8101758 <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 810137a:	2001      	movs	r0, #1
 810137c:	f004 fdb2 	bl	8105ee4 <HAL_I2CEx_EnableFastModePlus>

}
 8101380:	bf00      	nop
 8101382:	bd80      	pop	{r7, pc}
 8101384:	10009888 	.word	0x10009888
 8101388:	40005400 	.word	0x40005400
 810138c:	00401242 	.word	0x00401242

08101390 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8101390:	b580      	push	{r7, lr}
 8101392:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8101394:	4b1b      	ldr	r3, [pc, #108]	; (8101404 <MX_I2C2_Init+0x74>)
 8101396:	4a1c      	ldr	r2, [pc, #112]	; (8101408 <MX_I2C2_Init+0x78>)
 8101398:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10C0ECFF;
 810139a:	4b1a      	ldr	r3, [pc, #104]	; (8101404 <MX_I2C2_Init+0x74>)
 810139c:	4a1b      	ldr	r2, [pc, #108]	; (810140c <MX_I2C2_Init+0x7c>)
 810139e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 81013a0:	4b18      	ldr	r3, [pc, #96]	; (8101404 <MX_I2C2_Init+0x74>)
 81013a2:	2200      	movs	r2, #0
 81013a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 81013a6:	4b17      	ldr	r3, [pc, #92]	; (8101404 <MX_I2C2_Init+0x74>)
 81013a8:	2201      	movs	r2, #1
 81013aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 81013ac:	4b15      	ldr	r3, [pc, #84]	; (8101404 <MX_I2C2_Init+0x74>)
 81013ae:	2200      	movs	r2, #0
 81013b0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 81013b2:	4b14      	ldr	r3, [pc, #80]	; (8101404 <MX_I2C2_Init+0x74>)
 81013b4:	2200      	movs	r2, #0
 81013b6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 81013b8:	4b12      	ldr	r3, [pc, #72]	; (8101404 <MX_I2C2_Init+0x74>)
 81013ba:	2200      	movs	r2, #0
 81013bc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 81013be:	4b11      	ldr	r3, [pc, #68]	; (8101404 <MX_I2C2_Init+0x74>)
 81013c0:	2200      	movs	r2, #0
 81013c2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81013c4:	4b0f      	ldr	r3, [pc, #60]	; (8101404 <MX_I2C2_Init+0x74>)
 81013c6:	2200      	movs	r2, #0
 81013c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 81013ca:	480e      	ldr	r0, [pc, #56]	; (8101404 <MX_I2C2_Init+0x74>)
 81013cc:	f003 fda8 	bl	8104f20 <HAL_I2C_Init>
 81013d0:	4603      	mov	r3, r0
 81013d2:	2b00      	cmp	r3, #0
 81013d4:	d001      	beq.n	81013da <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 81013d6:	f000 f9bf 	bl	8101758 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 81013da:	2100      	movs	r1, #0
 81013dc:	4809      	ldr	r0, [pc, #36]	; (8101404 <MX_I2C2_Init+0x74>)
 81013de:	f004 fce9 	bl	8105db4 <HAL_I2CEx_ConfigAnalogFilter>
 81013e2:	4603      	mov	r3, r0
 81013e4:	2b00      	cmp	r3, #0
 81013e6:	d001      	beq.n	81013ec <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 81013e8:	f000 f9b6 	bl	8101758 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 81013ec:	2100      	movs	r1, #0
 81013ee:	4805      	ldr	r0, [pc, #20]	; (8101404 <MX_I2C2_Init+0x74>)
 81013f0:	f004 fd2b 	bl	8105e4a <HAL_I2CEx_ConfigDigitalFilter>
 81013f4:	4603      	mov	r3, r0
 81013f6:	2b00      	cmp	r3, #0
 81013f8:	d001      	beq.n	81013fe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 81013fa:	f000 f9ad 	bl	8101758 <Error_Handler>
  }

}
 81013fe:	bf00      	nop
 8101400:	bd80      	pop	{r7, pc}
 8101402:	bf00      	nop
 8101404:	100098d4 	.word	0x100098d4
 8101408:	40005800 	.word	0x40005800
 810140c:	10c0ecff 	.word	0x10c0ecff

08101410 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8101410:	b580      	push	{r7, lr}
 8101412:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8101414:	4b1b      	ldr	r3, [pc, #108]	; (8101484 <MX_I2C3_Init+0x74>)
 8101416:	4a1c      	ldr	r2, [pc, #112]	; (8101488 <MX_I2C3_Init+0x78>)
 8101418:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10C0ECFF;
 810141a:	4b1a      	ldr	r3, [pc, #104]	; (8101484 <MX_I2C3_Init+0x74>)
 810141c:	4a1b      	ldr	r2, [pc, #108]	; (810148c <MX_I2C3_Init+0x7c>)
 810141e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8101420:	4b18      	ldr	r3, [pc, #96]	; (8101484 <MX_I2C3_Init+0x74>)
 8101422:	2200      	movs	r2, #0
 8101424:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8101426:	4b17      	ldr	r3, [pc, #92]	; (8101484 <MX_I2C3_Init+0x74>)
 8101428:	2201      	movs	r2, #1
 810142a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 810142c:	4b15      	ldr	r3, [pc, #84]	; (8101484 <MX_I2C3_Init+0x74>)
 810142e:	2200      	movs	r2, #0
 8101430:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8101432:	4b14      	ldr	r3, [pc, #80]	; (8101484 <MX_I2C3_Init+0x74>)
 8101434:	2200      	movs	r2, #0
 8101436:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8101438:	4b12      	ldr	r3, [pc, #72]	; (8101484 <MX_I2C3_Init+0x74>)
 810143a:	2200      	movs	r2, #0
 810143c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 810143e:	4b11      	ldr	r3, [pc, #68]	; (8101484 <MX_I2C3_Init+0x74>)
 8101440:	2200      	movs	r2, #0
 8101442:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8101444:	4b0f      	ldr	r3, [pc, #60]	; (8101484 <MX_I2C3_Init+0x74>)
 8101446:	2200      	movs	r2, #0
 8101448:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 810144a:	480e      	ldr	r0, [pc, #56]	; (8101484 <MX_I2C3_Init+0x74>)
 810144c:	f003 fd68 	bl	8104f20 <HAL_I2C_Init>
 8101450:	4603      	mov	r3, r0
 8101452:	2b00      	cmp	r3, #0
 8101454:	d001      	beq.n	810145a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8101456:	f000 f97f 	bl	8101758 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 810145a:	2100      	movs	r1, #0
 810145c:	4809      	ldr	r0, [pc, #36]	; (8101484 <MX_I2C3_Init+0x74>)
 810145e:	f004 fca9 	bl	8105db4 <HAL_I2CEx_ConfigAnalogFilter>
 8101462:	4603      	mov	r3, r0
 8101464:	2b00      	cmp	r3, #0
 8101466:	d001      	beq.n	810146c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8101468:	f000 f976 	bl	8101758 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 810146c:	2100      	movs	r1, #0
 810146e:	4805      	ldr	r0, [pc, #20]	; (8101484 <MX_I2C3_Init+0x74>)
 8101470:	f004 fceb 	bl	8105e4a <HAL_I2CEx_ConfigDigitalFilter>
 8101474:	4603      	mov	r3, r0
 8101476:	2b00      	cmp	r3, #0
 8101478:	d001      	beq.n	810147e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 810147a:	f000 f96d 	bl	8101758 <Error_Handler>
  }

}
 810147e:	bf00      	nop
 8101480:	bd80      	pop	{r7, pc}
 8101482:	bf00      	nop
 8101484:	1000983c 	.word	0x1000983c
 8101488:	40005c00 	.word	0x40005c00
 810148c:	10c0ecff 	.word	0x10c0ecff

08101490 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8101490:	b580      	push	{r7, lr}
 8101492:	b08e      	sub	sp, #56	; 0x38
 8101494:	af00      	add	r7, sp, #0
 8101496:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810149c:	2200      	movs	r2, #0
 810149e:	601a      	str	r2, [r3, #0]
 81014a0:	605a      	str	r2, [r3, #4]
 81014a2:	609a      	str	r2, [r3, #8]
 81014a4:	60da      	str	r2, [r3, #12]
 81014a6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 81014a8:	687b      	ldr	r3, [r7, #4]
 81014aa:	681b      	ldr	r3, [r3, #0]
 81014ac:	4a5f      	ldr	r2, [pc, #380]	; (810162c <HAL_I2C_MspInit+0x19c>)
 81014ae:	4293      	cmp	r3, r2
 81014b0:	d12e      	bne.n	8101510 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81014b2:	4b5f      	ldr	r3, [pc, #380]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 81014b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014b8:	4a5d      	ldr	r2, [pc, #372]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 81014ba:	f043 0302 	orr.w	r3, r3, #2
 81014be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81014c2:	4b5b      	ldr	r3, [pc, #364]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 81014c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014c8:	f003 0302 	and.w	r3, r3, #2
 81014cc:	623b      	str	r3, [r7, #32]
 81014ce:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 81014d0:	23c0      	movs	r3, #192	; 0xc0
 81014d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81014d4:	2312      	movs	r3, #18
 81014d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81014d8:	2300      	movs	r3, #0
 81014da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81014dc:	2300      	movs	r3, #0
 81014de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 81014e0:	2304      	movs	r3, #4
 81014e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81014e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81014e8:	4619      	mov	r1, r3
 81014ea:	4852      	ldr	r0, [pc, #328]	; (8101634 <HAL_I2C_MspInit+0x1a4>)
 81014ec:	f003 fb08 	bl	8104b00 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 81014f0:	4b4f      	ldr	r3, [pc, #316]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 81014f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81014f6:	4a4e      	ldr	r2, [pc, #312]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 81014f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81014fc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101500:	4b4b      	ldr	r3, [pc, #300]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 8101502:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101506:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810150a:	61fb      	str	r3, [r7, #28]
 810150c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 810150e:	e088      	b.n	8101622 <HAL_I2C_MspInit+0x192>
  else if(i2cHandle->Instance==I2C2)
 8101510:	687b      	ldr	r3, [r7, #4]
 8101512:	681b      	ldr	r3, [r3, #0]
 8101514:	4a48      	ldr	r2, [pc, #288]	; (8101638 <HAL_I2C_MspInit+0x1a8>)
 8101516:	4293      	cmp	r3, r2
 8101518:	d12f      	bne.n	810157a <HAL_I2C_MspInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 810151a:	4b45      	ldr	r3, [pc, #276]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 810151c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101520:	4a43      	ldr	r2, [pc, #268]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 8101522:	f043 0302 	orr.w	r3, r3, #2
 8101526:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810152a:	4b41      	ldr	r3, [pc, #260]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 810152c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101530:	f003 0302 	and.w	r3, r3, #2
 8101534:	61bb      	str	r3, [r7, #24]
 8101536:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8101538:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 810153c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 810153e:	2312      	movs	r3, #18
 8101540:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101542:	2300      	movs	r3, #0
 8101544:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101546:	2300      	movs	r3, #0
 8101548:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 810154a:	2304      	movs	r3, #4
 810154c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810154e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8101552:	4619      	mov	r1, r3
 8101554:	4837      	ldr	r0, [pc, #220]	; (8101634 <HAL_I2C_MspInit+0x1a4>)
 8101556:	f003 fad3 	bl	8104b00 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 810155a:	4b35      	ldr	r3, [pc, #212]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 810155c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101560:	4a33      	ldr	r2, [pc, #204]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 8101562:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8101566:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810156a:	4b31      	ldr	r3, [pc, #196]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 810156c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101570:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8101574:	617b      	str	r3, [r7, #20]
 8101576:	697b      	ldr	r3, [r7, #20]
}
 8101578:	e053      	b.n	8101622 <HAL_I2C_MspInit+0x192>
  else if(i2cHandle->Instance==I2C3)
 810157a:	687b      	ldr	r3, [r7, #4]
 810157c:	681b      	ldr	r3, [r3, #0]
 810157e:	4a2f      	ldr	r2, [pc, #188]	; (810163c <HAL_I2C_MspInit+0x1ac>)
 8101580:	4293      	cmp	r3, r2
 8101582:	d14e      	bne.n	8101622 <HAL_I2C_MspInit+0x192>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101584:	4b2a      	ldr	r3, [pc, #168]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 8101586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810158a:	4a29      	ldr	r2, [pc, #164]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 810158c:	f043 0304 	orr.w	r3, r3, #4
 8101590:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101594:	4b26      	ldr	r3, [pc, #152]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 8101596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810159a:	f003 0304 	and.w	r3, r3, #4
 810159e:	613b      	str	r3, [r7, #16]
 81015a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 81015a2:	4b23      	ldr	r3, [pc, #140]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 81015a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81015a8:	4a21      	ldr	r2, [pc, #132]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 81015aa:	f043 0301 	orr.w	r3, r3, #1
 81015ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81015b2:	4b1f      	ldr	r3, [pc, #124]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 81015b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81015b8:	f003 0301 	and.w	r3, r3, #1
 81015bc:	60fb      	str	r3, [r7, #12]
 81015be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 81015c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 81015c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81015c6:	2312      	movs	r3, #18
 81015c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81015ca:	2300      	movs	r3, #0
 81015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81015ce:	2300      	movs	r3, #0
 81015d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 81015d2:	2304      	movs	r3, #4
 81015d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81015d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81015da:	4619      	mov	r1, r3
 81015dc:	4818      	ldr	r0, [pc, #96]	; (8101640 <HAL_I2C_MspInit+0x1b0>)
 81015de:	f003 fa8f 	bl	8104b00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 81015e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 81015e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81015e8:	2312      	movs	r3, #18
 81015ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81015ec:	2300      	movs	r3, #0
 81015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81015f0:	2300      	movs	r3, #0
 81015f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 81015f4:	2304      	movs	r3, #4
 81015f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81015f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81015fc:	4619      	mov	r1, r3
 81015fe:	4811      	ldr	r0, [pc, #68]	; (8101644 <HAL_I2C_MspInit+0x1b4>)
 8101600:	f003 fa7e 	bl	8104b00 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8101604:	4b0a      	ldr	r3, [pc, #40]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 8101606:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810160a:	4a09      	ldr	r2, [pc, #36]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 810160c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8101610:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101614:	4b06      	ldr	r3, [pc, #24]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 8101616:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810161a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810161e:	60bb      	str	r3, [r7, #8]
 8101620:	68bb      	ldr	r3, [r7, #8]
}
 8101622:	bf00      	nop
 8101624:	3738      	adds	r7, #56	; 0x38
 8101626:	46bd      	mov	sp, r7
 8101628:	bd80      	pop	{r7, pc}
 810162a:	bf00      	nop
 810162c:	40005400 	.word	0x40005400
 8101630:	58024400 	.word	0x58024400
 8101634:	58020400 	.word	0x58020400
 8101638:	40005800 	.word	0x40005800
 810163c:	40005c00 	.word	0x40005c00
 8101640:	58020800 	.word	0x58020800
 8101644:	58020000 	.word	0x58020000

08101648 <MX_IWDG2_Init>:

IWDG_HandleTypeDef hiwdg2;

/* IWDG2 init function */
void MX_IWDG2_Init(void)
{
 8101648:	b580      	push	{r7, lr}
 810164a:	af00      	add	r7, sp, #0

  hiwdg2.Instance = IWDG2;
 810164c:	4b0b      	ldr	r3, [pc, #44]	; (810167c <MX_IWDG2_Init+0x34>)
 810164e:	4a0c      	ldr	r2, [pc, #48]	; (8101680 <MX_IWDG2_Init+0x38>)
 8101650:	601a      	str	r2, [r3, #0]
  hiwdg2.Init.Prescaler = IWDG_PRESCALER_4;
 8101652:	4b0a      	ldr	r3, [pc, #40]	; (810167c <MX_IWDG2_Init+0x34>)
 8101654:	2200      	movs	r2, #0
 8101656:	605a      	str	r2, [r3, #4]
  hiwdg2.Init.Window = 4095;
 8101658:	4b08      	ldr	r3, [pc, #32]	; (810167c <MX_IWDG2_Init+0x34>)
 810165a:	f640 72ff 	movw	r2, #4095	; 0xfff
 810165e:	60da      	str	r2, [r3, #12]
  hiwdg2.Init.Reload = 4095;
 8101660:	4b06      	ldr	r3, [pc, #24]	; (810167c <MX_IWDG2_Init+0x34>)
 8101662:	f640 72ff 	movw	r2, #4095	; 0xfff
 8101666:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg2) != HAL_OK)
 8101668:	4804      	ldr	r0, [pc, #16]	; (810167c <MX_IWDG2_Init+0x34>)
 810166a:	f004 fc5f 	bl	8105f2c <HAL_IWDG_Init>
 810166e:	4603      	mov	r3, r0
 8101670:	2b00      	cmp	r3, #0
 8101672:	d001      	beq.n	8101678 <MX_IWDG2_Init+0x30>
  {
    Error_Handler();
 8101674:	f000 f870 	bl	8101758 <Error_Handler>
  }

}
 8101678:	bf00      	nop
 810167a:	bd80      	pop	{r7, pc}
 810167c:	10009920 	.word	0x10009920
 8101680:	58004c00 	.word	0x58004c00

08101684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101684:	b580      	push	{r7, lr}
 8101686:	b082      	sub	sp, #8
 8101688:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810168a:	4b27      	ldr	r3, [pc, #156]	; (8101728 <main+0xa4>)
 810168c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101690:	4a25      	ldr	r2, [pc, #148]	; (8101728 <main+0xa4>)
 8101692:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101696:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810169a:	4b23      	ldr	r3, [pc, #140]	; (8101728 <main+0xa4>)
 810169c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81016a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81016a4:	607b      	str	r3, [r7, #4]
 81016a6:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81016a8:	2001      	movs	r0, #1
 81016aa:	f003 fc27 	bl	8104efc <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81016ae:	f004 fd09 	bl	81060c4 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81016b2:	2201      	movs	r2, #1
 81016b4:	2102      	movs	r1, #2
 81016b6:	2000      	movs	r0, #0
 81016b8:	f004 fc8e 	bl	8105fd8 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81016bc:	4b1b      	ldr	r3, [pc, #108]	; (810172c <main+0xa8>)
 81016be:	681b      	ldr	r3, [r3, #0]
 81016c0:	091b      	lsrs	r3, r3, #4
 81016c2:	f003 030f 	and.w	r3, r3, #15
 81016c6:	2b07      	cmp	r3, #7
 81016c8:	d108      	bne.n	81016dc <main+0x58>
 81016ca:	4b19      	ldr	r3, [pc, #100]	; (8101730 <main+0xac>)
 81016cc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 81016d0:	4a17      	ldr	r2, [pc, #92]	; (8101730 <main+0xac>)
 81016d2:	f043 0301 	orr.w	r3, r3, #1
 81016d6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81016da:	e007      	b.n	81016ec <main+0x68>
 81016dc:	4b14      	ldr	r3, [pc, #80]	; (8101730 <main+0xac>)
 81016de:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 81016e2:	4a13      	ldr	r2, [pc, #76]	; (8101730 <main+0xac>)
 81016e4:	f043 0301 	orr.w	r3, r3, #1
 81016e8:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81016ec:	f000 fd62 	bl	81021b4 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81016f0:	f7ff fdb6 	bl	8101260 <MX_GPIO_Init>
  MX_DMA_Init();
 81016f4:	f7ff fd2c 	bl	8101150 <MX_DMA_Init>
  MX_IWDG2_Init();
 81016f8:	f7ff ffa6 	bl	8101648 <MX_IWDG2_Init>
  MX_FATFS_Init();
 81016fc:	f007 faa4 	bl	8108c48 <MX_FATFS_Init>
  MX_I2C1_Init();
 8101700:	f7ff fe04 	bl	810130c <MX_I2C1_Init>
  MX_SPI1_Init();
 8101704:	f000 f82c 	bl	8101760 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8101708:	f000 fc2e 	bl	8101f68 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 810170c:	f7ff fe40 	bl	8101390 <MX_I2C2_Init>
  MX_I2C3_Init();
 8101710:	f7ff fe7e 	bl	8101410 <MX_I2C3_Init>
  MX_SPI3_Init();
 8101714:	f000 f87a 	bl	810180c <MX_SPI3_Init>
  MX_SPI4_Init();
 8101718:	f000 f8ce 	bl	81018b8 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 810171c:	f7ff fd7a 	bl	8101214 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8101720:	f007 fb6f 	bl	8108e02 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8101724:	e7fe      	b.n	8101724 <main+0xa0>
 8101726:	bf00      	nop
 8101728:	58024400 	.word	0x58024400
 810172c:	e000ed00 	.word	0xe000ed00
 8101730:	58026400 	.word	0x58026400

08101734 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8101734:	b580      	push	{r7, lr}
 8101736:	b082      	sub	sp, #8
 8101738:	af00      	add	r7, sp, #0
 810173a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM8) {
 810173c:	687b      	ldr	r3, [r7, #4]
 810173e:	681b      	ldr	r3, [r3, #0]
 8101740:	4a04      	ldr	r2, [pc, #16]	; (8101754 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8101742:	4293      	cmp	r3, r2
 8101744:	d101      	bne.n	810174a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8101746:	f000 fd93 	bl	8102270 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 810174a:	bf00      	nop
 810174c:	3708      	adds	r7, #8
 810174e:	46bd      	mov	sp, r7
 8101750:	bd80      	pop	{r7, pc}
 8101752:	bf00      	nop
 8101754:	40010400 	.word	0x40010400

08101758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101758:	b480      	push	{r7}
 810175a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 810175c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 810175e:	e7fe      	b.n	810175e <Error_Handler+0x6>

08101760 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8101760:	b580      	push	{r7, lr}
 8101762:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8101764:	4b27      	ldr	r3, [pc, #156]	; (8101804 <MX_SPI1_Init+0xa4>)
 8101766:	4a28      	ldr	r2, [pc, #160]	; (8101808 <MX_SPI1_Init+0xa8>)
 8101768:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 810176a:	4b26      	ldr	r3, [pc, #152]	; (8101804 <MX_SPI1_Init+0xa4>)
 810176c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8101770:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8101772:	4b24      	ldr	r3, [pc, #144]	; (8101804 <MX_SPI1_Init+0xa4>)
 8101774:	2200      	movs	r2, #0
 8101776:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8101778:	4b22      	ldr	r3, [pc, #136]	; (8101804 <MX_SPI1_Init+0xa4>)
 810177a:	2203      	movs	r2, #3
 810177c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 810177e:	4b21      	ldr	r3, [pc, #132]	; (8101804 <MX_SPI1_Init+0xa4>)
 8101780:	2200      	movs	r2, #0
 8101782:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8101784:	4b1f      	ldr	r3, [pc, #124]	; (8101804 <MX_SPI1_Init+0xa4>)
 8101786:	2200      	movs	r2, #0
 8101788:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 810178a:	4b1e      	ldr	r3, [pc, #120]	; (8101804 <MX_SPI1_Init+0xa4>)
 810178c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8101790:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8101792:	4b1c      	ldr	r3, [pc, #112]	; (8101804 <MX_SPI1_Init+0xa4>)
 8101794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8101798:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 810179a:	4b1a      	ldr	r3, [pc, #104]	; (8101804 <MX_SPI1_Init+0xa4>)
 810179c:	2200      	movs	r2, #0
 810179e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 81017a0:	4b18      	ldr	r3, [pc, #96]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017a2:	2200      	movs	r2, #0
 81017a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 81017a6:	4b17      	ldr	r3, [pc, #92]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017a8:	2200      	movs	r2, #0
 81017aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 81017ac:	4b15      	ldr	r3, [pc, #84]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017ae:	2200      	movs	r2, #0
 81017b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 81017b2:	4b14      	ldr	r3, [pc, #80]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 81017b8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 81017ba:	4b12      	ldr	r3, [pc, #72]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017bc:	2200      	movs	r2, #0
 81017be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 81017c0:	4b10      	ldr	r3, [pc, #64]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017c2:	2200      	movs	r2, #0
 81017c4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 81017c6:	4b0f      	ldr	r3, [pc, #60]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017c8:	2200      	movs	r2, #0
 81017ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 81017cc:	4b0d      	ldr	r3, [pc, #52]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017ce:	2200      	movs	r2, #0
 81017d0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 81017d2:	4b0c      	ldr	r3, [pc, #48]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017d4:	2200      	movs	r2, #0
 81017d6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 81017d8:	4b0a      	ldr	r3, [pc, #40]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017da:	2200      	movs	r2, #0
 81017dc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 81017de:	4b09      	ldr	r3, [pc, #36]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017e0:	2200      	movs	r2, #0
 81017e2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 81017e4:	4b07      	ldr	r3, [pc, #28]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017e6:	2200      	movs	r2, #0
 81017e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 81017ea:	4b06      	ldr	r3, [pc, #24]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017ec:	2200      	movs	r2, #0
 81017ee:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 81017f0:	4804      	ldr	r0, [pc, #16]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017f2:	f005 f935 	bl	8106a60 <HAL_SPI_Init>
 81017f6:	4603      	mov	r3, r0
 81017f8:	2b00      	cmp	r3, #0
 81017fa:	d001      	beq.n	8101800 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 81017fc:	f7ff ffac 	bl	8101758 <Error_Handler>
  }

}
 8101800:	bf00      	nop
 8101802:	bd80      	pop	{r7, pc}
 8101804:	10009a40 	.word	0x10009a40
 8101808:	40013000 	.word	0x40013000

0810180c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 810180c:	b580      	push	{r7, lr}
 810180e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8101810:	4b27      	ldr	r3, [pc, #156]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101812:	4a28      	ldr	r2, [pc, #160]	; (81018b4 <MX_SPI3_Init+0xa8>)
 8101814:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8101816:	4b26      	ldr	r3, [pc, #152]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101818:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 810181c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 810181e:	4b24      	ldr	r3, [pc, #144]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101820:	2200      	movs	r2, #0
 8101822:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8101824:	4b22      	ldr	r3, [pc, #136]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101826:	2203      	movs	r2, #3
 8101828:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 810182a:	4b21      	ldr	r3, [pc, #132]	; (81018b0 <MX_SPI3_Init+0xa4>)
 810182c:	2200      	movs	r2, #0
 810182e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8101830:	4b1f      	ldr	r3, [pc, #124]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101832:	2200      	movs	r2, #0
 8101834:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8101836:	4b1e      	ldr	r3, [pc, #120]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101838:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 810183c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 810183e:	4b1c      	ldr	r3, [pc, #112]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8101844:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8101846:	4b1a      	ldr	r3, [pc, #104]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101848:	2200      	movs	r2, #0
 810184a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 810184c:	4b18      	ldr	r3, [pc, #96]	; (81018b0 <MX_SPI3_Init+0xa4>)
 810184e:	2200      	movs	r2, #0
 8101850:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8101852:	4b17      	ldr	r3, [pc, #92]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101854:	2200      	movs	r2, #0
 8101856:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8101858:	4b15      	ldr	r3, [pc, #84]	; (81018b0 <MX_SPI3_Init+0xa4>)
 810185a:	2200      	movs	r2, #0
 810185c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 810185e:	4b14      	ldr	r3, [pc, #80]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101860:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8101864:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8101866:	4b12      	ldr	r3, [pc, #72]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101868:	2200      	movs	r2, #0
 810186a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 810186c:	4b10      	ldr	r3, [pc, #64]	; (81018b0 <MX_SPI3_Init+0xa4>)
 810186e:	2200      	movs	r2, #0
 8101870:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101872:	4b0f      	ldr	r3, [pc, #60]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101874:	2200      	movs	r2, #0
 8101876:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101878:	4b0d      	ldr	r3, [pc, #52]	; (81018b0 <MX_SPI3_Init+0xa4>)
 810187a:	2200      	movs	r2, #0
 810187c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 810187e:	4b0c      	ldr	r3, [pc, #48]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101880:	2200      	movs	r2, #0
 8101882:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8101884:	4b0a      	ldr	r3, [pc, #40]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101886:	2200      	movs	r2, #0
 8101888:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 810188a:	4b09      	ldr	r3, [pc, #36]	; (81018b0 <MX_SPI3_Init+0xa4>)
 810188c:	2200      	movs	r2, #0
 810188e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8101890:	4b07      	ldr	r3, [pc, #28]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101892:	2200      	movs	r2, #0
 8101894:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8101896:	4b06      	ldr	r3, [pc, #24]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101898:	2200      	movs	r2, #0
 810189a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 810189c:	4804      	ldr	r0, [pc, #16]	; (81018b0 <MX_SPI3_Init+0xa4>)
 810189e:	f005 f8df 	bl	8106a60 <HAL_SPI_Init>
 81018a2:	4603      	mov	r3, r0
 81018a4:	2b00      	cmp	r3, #0
 81018a6:	d001      	beq.n	81018ac <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 81018a8:	f7ff ff56 	bl	8101758 <Error_Handler>
  }

}
 81018ac:	bf00      	nop
 81018ae:	bd80      	pop	{r7, pc}
 81018b0:	10009930 	.word	0x10009930
 81018b4:	40003c00 	.word	0x40003c00

081018b8 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 81018b8:	b580      	push	{r7, lr}
 81018ba:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 81018bc:	4b27      	ldr	r3, [pc, #156]	; (810195c <MX_SPI4_Init+0xa4>)
 81018be:	4a28      	ldr	r2, [pc, #160]	; (8101960 <MX_SPI4_Init+0xa8>)
 81018c0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 81018c2:	4b26      	ldr	r3, [pc, #152]	; (810195c <MX_SPI4_Init+0xa4>)
 81018c4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 81018c8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 81018ca:	4b24      	ldr	r3, [pc, #144]	; (810195c <MX_SPI4_Init+0xa4>)
 81018cc:	2200      	movs	r2, #0
 81018ce:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 81018d0:	4b22      	ldr	r3, [pc, #136]	; (810195c <MX_SPI4_Init+0xa4>)
 81018d2:	2203      	movs	r2, #3
 81018d4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 81018d6:	4b21      	ldr	r3, [pc, #132]	; (810195c <MX_SPI4_Init+0xa4>)
 81018d8:	2200      	movs	r2, #0
 81018da:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 81018dc:	4b1f      	ldr	r3, [pc, #124]	; (810195c <MX_SPI4_Init+0xa4>)
 81018de:	2200      	movs	r2, #0
 81018e0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 81018e2:	4b1e      	ldr	r3, [pc, #120]	; (810195c <MX_SPI4_Init+0xa4>)
 81018e4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 81018e8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 81018ea:	4b1c      	ldr	r3, [pc, #112]	; (810195c <MX_SPI4_Init+0xa4>)
 81018ec:	2200      	movs	r2, #0
 81018ee:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 81018f0:	4b1a      	ldr	r3, [pc, #104]	; (810195c <MX_SPI4_Init+0xa4>)
 81018f2:	2200      	movs	r2, #0
 81018f4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 81018f6:	4b19      	ldr	r3, [pc, #100]	; (810195c <MX_SPI4_Init+0xa4>)
 81018f8:	2200      	movs	r2, #0
 81018fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 81018fc:	4b17      	ldr	r3, [pc, #92]	; (810195c <MX_SPI4_Init+0xa4>)
 81018fe:	2200      	movs	r2, #0
 8101900:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8101902:	4b16      	ldr	r3, [pc, #88]	; (810195c <MX_SPI4_Init+0xa4>)
 8101904:	2200      	movs	r2, #0
 8101906:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8101908:	4b14      	ldr	r3, [pc, #80]	; (810195c <MX_SPI4_Init+0xa4>)
 810190a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 810190e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8101910:	4b12      	ldr	r3, [pc, #72]	; (810195c <MX_SPI4_Init+0xa4>)
 8101912:	2200      	movs	r2, #0
 8101914:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8101916:	4b11      	ldr	r3, [pc, #68]	; (810195c <MX_SPI4_Init+0xa4>)
 8101918:	2200      	movs	r2, #0
 810191a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 810191c:	4b0f      	ldr	r3, [pc, #60]	; (810195c <MX_SPI4_Init+0xa4>)
 810191e:	2200      	movs	r2, #0
 8101920:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101922:	4b0e      	ldr	r3, [pc, #56]	; (810195c <MX_SPI4_Init+0xa4>)
 8101924:	2200      	movs	r2, #0
 8101926:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8101928:	4b0c      	ldr	r3, [pc, #48]	; (810195c <MX_SPI4_Init+0xa4>)
 810192a:	2200      	movs	r2, #0
 810192c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 810192e:	4b0b      	ldr	r3, [pc, #44]	; (810195c <MX_SPI4_Init+0xa4>)
 8101930:	2200      	movs	r2, #0
 8101932:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8101934:	4b09      	ldr	r3, [pc, #36]	; (810195c <MX_SPI4_Init+0xa4>)
 8101936:	2200      	movs	r2, #0
 8101938:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 810193a:	4b08      	ldr	r3, [pc, #32]	; (810195c <MX_SPI4_Init+0xa4>)
 810193c:	2200      	movs	r2, #0
 810193e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8101940:	4b06      	ldr	r3, [pc, #24]	; (810195c <MX_SPI4_Init+0xa4>)
 8101942:	2200      	movs	r2, #0
 8101944:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8101946:	4805      	ldr	r0, [pc, #20]	; (810195c <MX_SPI4_Init+0xa4>)
 8101948:	f005 f88a 	bl	8106a60 <HAL_SPI_Init>
 810194c:	4603      	mov	r3, r0
 810194e:	2b00      	cmp	r3, #0
 8101950:	d001      	beq.n	8101956 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8101952:	f7ff ff01 	bl	8101758 <Error_Handler>
  }

}
 8101956:	bf00      	nop
 8101958:	bd80      	pop	{r7, pc}
 810195a:	bf00      	nop
 810195c:	100099b8 	.word	0x100099b8
 8101960:	40013400 	.word	0x40013400

08101964 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8101964:	b580      	push	{r7, lr}
 8101966:	b090      	sub	sp, #64	; 0x40
 8101968:	af00      	add	r7, sp, #0
 810196a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810196c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101970:	2200      	movs	r2, #0
 8101972:	601a      	str	r2, [r3, #0]
 8101974:	605a      	str	r2, [r3, #4]
 8101976:	609a      	str	r2, [r3, #8]
 8101978:	60da      	str	r2, [r3, #12]
 810197a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 810197c:	687b      	ldr	r3, [r7, #4]
 810197e:	681b      	ldr	r3, [r3, #0]
 8101980:	4aa0      	ldr	r2, [pc, #640]	; (8101c04 <HAL_SPI_MspInit+0x2a0>)
 8101982:	4293      	cmp	r3, r2
 8101984:	f040 80b2 	bne.w	8101aec <HAL_SPI_MspInit+0x188>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8101988:	4b9f      	ldr	r3, [pc, #636]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 810198a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810198e:	4a9e      	ldr	r2, [pc, #632]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101990:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8101994:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101998:	4b9b      	ldr	r3, [pc, #620]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 810199a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810199e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81019a2:	62bb      	str	r3, [r7, #40]	; 0x28
 81019a4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 81019a6:	4b98      	ldr	r3, [pc, #608]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 81019a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019ac:	4a96      	ldr	r2, [pc, #600]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 81019ae:	f043 0301 	orr.w	r3, r3, #1
 81019b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81019b6:	4b94      	ldr	r3, [pc, #592]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 81019b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019bc:	f003 0301 	and.w	r3, r3, #1
 81019c0:	627b      	str	r3, [r7, #36]	; 0x24
 81019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 81019c4:	4b90      	ldr	r3, [pc, #576]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 81019c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019ca:	4a8f      	ldr	r2, [pc, #572]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 81019cc:	f043 0308 	orr.w	r3, r3, #8
 81019d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81019d4:	4b8c      	ldr	r3, [pc, #560]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 81019d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019da:	f003 0308 	and.w	r3, r3, #8
 81019de:	623b      	str	r3, [r7, #32]
 81019e0:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 81019e2:	2360      	movs	r3, #96	; 0x60
 81019e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81019e6:	2302      	movs	r3, #2
 81019e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81019ea:	2300      	movs	r3, #0
 81019ec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81019ee:	2300      	movs	r3, #0
 81019f0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 81019f2:	2305      	movs	r3, #5
 81019f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81019f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 81019fa:	4619      	mov	r1, r3
 81019fc:	4883      	ldr	r0, [pc, #524]	; (8101c0c <HAL_SPI_MspInit+0x2a8>)
 81019fe:	f003 f87f 	bl	8104b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8101a02:	2380      	movs	r3, #128	; 0x80
 8101a04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101a06:	2302      	movs	r3, #2
 8101a08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a0a:	2300      	movs	r3, #0
 8101a0c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a0e:	2300      	movs	r3, #0
 8101a10:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8101a12:	2305      	movs	r3, #5
 8101a14:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101a16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101a1a:	4619      	mov	r1, r3
 8101a1c:	487c      	ldr	r0, [pc, #496]	; (8101c10 <HAL_SPI_MspInit+0x2ac>)
 8101a1e:	f003 f86f 	bl	8104b00 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8101a22:	4b7c      	ldr	r3, [pc, #496]	; (8101c14 <HAL_SPI_MspInit+0x2b0>)
 8101a24:	4a7c      	ldr	r2, [pc, #496]	; (8101c18 <HAL_SPI_MspInit+0x2b4>)
 8101a26:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8101a28:	4b7a      	ldr	r3, [pc, #488]	; (8101c14 <HAL_SPI_MspInit+0x2b0>)
 8101a2a:	2225      	movs	r2, #37	; 0x25
 8101a2c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8101a2e:	4b79      	ldr	r3, [pc, #484]	; (8101c14 <HAL_SPI_MspInit+0x2b0>)
 8101a30:	2200      	movs	r2, #0
 8101a32:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101a34:	4b77      	ldr	r3, [pc, #476]	; (8101c14 <HAL_SPI_MspInit+0x2b0>)
 8101a36:	2200      	movs	r2, #0
 8101a38:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8101a3a:	4b76      	ldr	r3, [pc, #472]	; (8101c14 <HAL_SPI_MspInit+0x2b0>)
 8101a3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101a40:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101a42:	4b74      	ldr	r3, [pc, #464]	; (8101c14 <HAL_SPI_MspInit+0x2b0>)
 8101a44:	2200      	movs	r2, #0
 8101a46:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101a48:	4b72      	ldr	r3, [pc, #456]	; (8101c14 <HAL_SPI_MspInit+0x2b0>)
 8101a4a:	2200      	movs	r2, #0
 8101a4c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8101a4e:	4b71      	ldr	r3, [pc, #452]	; (8101c14 <HAL_SPI_MspInit+0x2b0>)
 8101a50:	2200      	movs	r2, #0
 8101a52:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8101a54:	4b6f      	ldr	r3, [pc, #444]	; (8101c14 <HAL_SPI_MspInit+0x2b0>)
 8101a56:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8101a5a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101a5c:	4b6d      	ldr	r3, [pc, #436]	; (8101c14 <HAL_SPI_MspInit+0x2b0>)
 8101a5e:	2200      	movs	r2, #0
 8101a60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8101a62:	486c      	ldr	r0, [pc, #432]	; (8101c14 <HAL_SPI_MspInit+0x2b0>)
 8101a64:	f000 fd32 	bl	81024cc <HAL_DMA_Init>
 8101a68:	4603      	mov	r3, r0
 8101a6a:	2b00      	cmp	r3, #0
 8101a6c:	d001      	beq.n	8101a72 <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 8101a6e:	f7ff fe73 	bl	8101758 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8101a72:	687b      	ldr	r3, [r7, #4]
 8101a74:	4a67      	ldr	r2, [pc, #412]	; (8101c14 <HAL_SPI_MspInit+0x2b0>)
 8101a76:	67da      	str	r2, [r3, #124]	; 0x7c
 8101a78:	4a66      	ldr	r2, [pc, #408]	; (8101c14 <HAL_SPI_MspInit+0x2b0>)
 8101a7a:	687b      	ldr	r3, [r7, #4]
 8101a7c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 8101a7e:	4b67      	ldr	r3, [pc, #412]	; (8101c1c <HAL_SPI_MspInit+0x2b8>)
 8101a80:	4a67      	ldr	r2, [pc, #412]	; (8101c20 <HAL_SPI_MspInit+0x2bc>)
 8101a82:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8101a84:	4b65      	ldr	r3, [pc, #404]	; (8101c1c <HAL_SPI_MspInit+0x2b8>)
 8101a86:	2226      	movs	r2, #38	; 0x26
 8101a88:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8101a8a:	4b64      	ldr	r3, [pc, #400]	; (8101c1c <HAL_SPI_MspInit+0x2b8>)
 8101a8c:	2240      	movs	r2, #64	; 0x40
 8101a8e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101a90:	4b62      	ldr	r3, [pc, #392]	; (8101c1c <HAL_SPI_MspInit+0x2b8>)
 8101a92:	2200      	movs	r2, #0
 8101a94:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8101a96:	4b61      	ldr	r3, [pc, #388]	; (8101c1c <HAL_SPI_MspInit+0x2b8>)
 8101a98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101a9c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101a9e:	4b5f      	ldr	r3, [pc, #380]	; (8101c1c <HAL_SPI_MspInit+0x2b8>)
 8101aa0:	2200      	movs	r2, #0
 8101aa2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101aa4:	4b5d      	ldr	r3, [pc, #372]	; (8101c1c <HAL_SPI_MspInit+0x2b8>)
 8101aa6:	2200      	movs	r2, #0
 8101aa8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8101aaa:	4b5c      	ldr	r3, [pc, #368]	; (8101c1c <HAL_SPI_MspInit+0x2b8>)
 8101aac:	2200      	movs	r2, #0
 8101aae:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8101ab0:	4b5a      	ldr	r3, [pc, #360]	; (8101c1c <HAL_SPI_MspInit+0x2b8>)
 8101ab2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8101ab6:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101ab8:	4b58      	ldr	r3, [pc, #352]	; (8101c1c <HAL_SPI_MspInit+0x2b8>)
 8101aba:	2200      	movs	r2, #0
 8101abc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8101abe:	4857      	ldr	r0, [pc, #348]	; (8101c1c <HAL_SPI_MspInit+0x2b8>)
 8101ac0:	f000 fd04 	bl	81024cc <HAL_DMA_Init>
 8101ac4:	4603      	mov	r3, r0
 8101ac6:	2b00      	cmp	r3, #0
 8101ac8:	d001      	beq.n	8101ace <HAL_SPI_MspInit+0x16a>
    {
      Error_Handler();
 8101aca:	f7ff fe45 	bl	8101758 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8101ace:	687b      	ldr	r3, [r7, #4]
 8101ad0:	4a52      	ldr	r2, [pc, #328]	; (8101c1c <HAL_SPI_MspInit+0x2b8>)
 8101ad2:	679a      	str	r2, [r3, #120]	; 0x78
 8101ad4:	4a51      	ldr	r2, [pc, #324]	; (8101c1c <HAL_SPI_MspInit+0x2b8>)
 8101ad6:	687b      	ldr	r3, [r7, #4]
 8101ad8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8101ada:	2200      	movs	r2, #0
 8101adc:	2105      	movs	r1, #5
 8101ade:	2023      	movs	r0, #35	; 0x23
 8101ae0:	f000 fcb3 	bl	810244a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8101ae4:	2023      	movs	r0, #35	; 0x23
 8101ae6:	f000 fcca 	bl	810247e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8101aea:	e086      	b.n	8101bfa <HAL_SPI_MspInit+0x296>
  else if(spiHandle->Instance==SPI3)
 8101aec:	687b      	ldr	r3, [r7, #4]
 8101aee:	681b      	ldr	r3, [r3, #0]
 8101af0:	4a4c      	ldr	r2, [pc, #304]	; (8101c24 <HAL_SPI_MspInit+0x2c0>)
 8101af2:	4293      	cmp	r3, r2
 8101af4:	d14e      	bne.n	8101b94 <HAL_SPI_MspInit+0x230>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8101af6:	4b44      	ldr	r3, [pc, #272]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101af8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101afc:	4a42      	ldr	r2, [pc, #264]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8101b02:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101b06:	4b40      	ldr	r3, [pc, #256]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101b08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101b0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8101b10:	61fb      	str	r3, [r7, #28]
 8101b12:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101b14:	4b3c      	ldr	r3, [pc, #240]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b1a:	4a3b      	ldr	r2, [pc, #236]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101b1c:	f043 0302 	orr.w	r3, r3, #2
 8101b20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101b24:	4b38      	ldr	r3, [pc, #224]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b2a:	f003 0302 	and.w	r3, r3, #2
 8101b2e:	61bb      	str	r3, [r7, #24]
 8101b30:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101b32:	4b35      	ldr	r3, [pc, #212]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b38:	4a33      	ldr	r2, [pc, #204]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101b3a:	f043 0304 	orr.w	r3, r3, #4
 8101b3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101b42:	4b31      	ldr	r3, [pc, #196]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b48:	f003 0304 	and.w	r3, r3, #4
 8101b4c:	617b      	str	r3, [r7, #20]
 8101b4e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8101b50:	2304      	movs	r3, #4
 8101b52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101b54:	2302      	movs	r3, #2
 8101b56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b58:	2300      	movs	r3, #0
 8101b5a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101b5c:	2300      	movs	r3, #0
 8101b5e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8101b60:	2307      	movs	r3, #7
 8101b62:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101b64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101b68:	4619      	mov	r1, r3
 8101b6a:	482f      	ldr	r0, [pc, #188]	; (8101c28 <HAL_SPI_MspInit+0x2c4>)
 8101b6c:	f002 ffc8 	bl	8104b00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8101b70:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8101b74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101b76:	2302      	movs	r3, #2
 8101b78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b7a:	2300      	movs	r3, #0
 8101b7c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101b7e:	2300      	movs	r3, #0
 8101b80:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8101b82:	2306      	movs	r3, #6
 8101b84:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101b86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101b8a:	4619      	mov	r1, r3
 8101b8c:	4827      	ldr	r0, [pc, #156]	; (8101c2c <HAL_SPI_MspInit+0x2c8>)
 8101b8e:	f002 ffb7 	bl	8104b00 <HAL_GPIO_Init>
}
 8101b92:	e032      	b.n	8101bfa <HAL_SPI_MspInit+0x296>
  else if(spiHandle->Instance==SPI4)
 8101b94:	687b      	ldr	r3, [r7, #4]
 8101b96:	681b      	ldr	r3, [r3, #0]
 8101b98:	4a25      	ldr	r2, [pc, #148]	; (8101c30 <HAL_SPI_MspInit+0x2cc>)
 8101b9a:	4293      	cmp	r3, r2
 8101b9c:	d12d      	bne.n	8101bfa <HAL_SPI_MspInit+0x296>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8101b9e:	4b1a      	ldr	r3, [pc, #104]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101ba0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101ba4:	4a18      	ldr	r2, [pc, #96]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101ba6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8101baa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101bae:	4b16      	ldr	r3, [pc, #88]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101bb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101bb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8101bb8:	613b      	str	r3, [r7, #16]
 8101bba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8101bbc:	4b12      	ldr	r3, [pc, #72]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bc2:	4a11      	ldr	r2, [pc, #68]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101bc4:	f043 0310 	orr.w	r3, r3, #16
 8101bc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101bcc:	4b0e      	ldr	r3, [pc, #56]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bd2:	f003 0310 	and.w	r3, r3, #16
 8101bd6:	60fb      	str	r3, [r7, #12]
 8101bd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8101bda:	2364      	movs	r3, #100	; 0x64
 8101bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101bde:	2302      	movs	r3, #2
 8101be0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101be2:	2300      	movs	r3, #0
 8101be4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101be6:	2300      	movs	r3, #0
 8101be8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8101bea:	2305      	movs	r3, #5
 8101bec:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101bee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101bf2:	4619      	mov	r1, r3
 8101bf4:	480f      	ldr	r0, [pc, #60]	; (8101c34 <HAL_SPI_MspInit+0x2d0>)
 8101bf6:	f002 ff83 	bl	8104b00 <HAL_GPIO_Init>
}
 8101bfa:	bf00      	nop
 8101bfc:	3740      	adds	r7, #64	; 0x40
 8101bfe:	46bd      	mov	sp, r7
 8101c00:	bd80      	pop	{r7, pc}
 8101c02:	bf00      	nop
 8101c04:	40013000 	.word	0x40013000
 8101c08:	58024400 	.word	0x58024400
 8101c0c:	58020000 	.word	0x58020000
 8101c10:	58020c00 	.word	0x58020c00
 8101c14:	10009ac8 	.word	0x10009ac8
 8101c18:	40020010 	.word	0x40020010
 8101c1c:	10009b40 	.word	0x10009b40
 8101c20:	40020028 	.word	0x40020028
 8101c24:	40003c00 	.word	0x40003c00
 8101c28:	58020400 	.word	0x58020400
 8101c2c:	58020800 	.word	0x58020800
 8101c30:	40013400 	.word	0x40013400
 8101c34:	58021000 	.word	0x58021000

08101c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101c38:	b580      	push	{r7, lr}
 8101c3a:	b082      	sub	sp, #8
 8101c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101c3e:	4b0c      	ldr	r3, [pc, #48]	; (8101c70 <HAL_MspInit+0x38>)
 8101c40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101c44:	4a0a      	ldr	r2, [pc, #40]	; (8101c70 <HAL_MspInit+0x38>)
 8101c46:	f043 0302 	orr.w	r3, r3, #2
 8101c4a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101c4e:	4b08      	ldr	r3, [pc, #32]	; (8101c70 <HAL_MspInit+0x38>)
 8101c50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101c54:	f003 0302 	and.w	r3, r3, #2
 8101c58:	607b      	str	r3, [r7, #4]
 8101c5a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8101c5c:	2200      	movs	r2, #0
 8101c5e:	210f      	movs	r1, #15
 8101c60:	f06f 0001 	mvn.w	r0, #1
 8101c64:	f000 fbf1 	bl	810244a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101c68:	bf00      	nop
 8101c6a:	3708      	adds	r7, #8
 8101c6c:	46bd      	mov	sp, r7
 8101c6e:	bd80      	pop	{r7, pc}
 8101c70:	58024400 	.word	0x58024400

08101c74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101c74:	b580      	push	{r7, lr}
 8101c76:	b08e      	sub	sp, #56	; 0x38
 8101c78:	af00      	add	r7, sp, #0
 8101c7a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM8 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101c7c:	687b      	ldr	r3, [r7, #4]
 8101c7e:	2b0f      	cmp	r3, #15
 8101c80:	d844      	bhi.n	8101d0c <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0U);
 8101c82:	2200      	movs	r2, #0
 8101c84:	6879      	ldr	r1, [r7, #4]
 8101c86:	202c      	movs	r0, #44	; 0x2c
 8101c88:	f000 fbdf 	bl	810244a <HAL_NVIC_SetPriority>

  /* Enable the TIM8 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8101c8c:	202c      	movs	r0, #44	; 0x2c
 8101c8e:	f000 fbf6 	bl	810247e <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8101c92:	4a24      	ldr	r2, [pc, #144]	; (8101d24 <HAL_InitTick+0xb0>)
 8101c94:	687b      	ldr	r3, [r7, #4]
 8101c96:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 8101c98:	4b23      	ldr	r3, [pc, #140]	; (8101d28 <HAL_InitTick+0xb4>)
 8101c9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101c9e:	4a22      	ldr	r2, [pc, #136]	; (8101d28 <HAL_InitTick+0xb4>)
 8101ca0:	f043 0302 	orr.w	r3, r3, #2
 8101ca4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101ca8:	4b1f      	ldr	r3, [pc, #124]	; (8101d28 <HAL_InitTick+0xb4>)
 8101caa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101cae:	f003 0302 	and.w	r3, r3, #2
 8101cb2:	60bb      	str	r3, [r7, #8]
 8101cb4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8101cb6:	f107 020c 	add.w	r2, r7, #12
 8101cba:	f107 0310 	add.w	r3, r7, #16
 8101cbe:	4611      	mov	r1, r2
 8101cc0:	4618      	mov	r0, r3
 8101cc2:	f004 fbdd 	bl	8106480 <HAL_RCC_GetClockConfig>

  /* Compute TIM8 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8101cc6:	f004 fbc5 	bl	8106454 <HAL_RCC_GetPCLK2Freq>
 8101cca:	4603      	mov	r3, r0
 8101ccc:	005b      	lsls	r3, r3, #1
 8101cce:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8101cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101cd2:	4a16      	ldr	r2, [pc, #88]	; (8101d2c <HAL_InitTick+0xb8>)
 8101cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8101cd8:	0c9b      	lsrs	r3, r3, #18
 8101cda:	3b01      	subs	r3, #1
 8101cdc:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 8101cde:	4b14      	ldr	r3, [pc, #80]	; (8101d30 <HAL_InitTick+0xbc>)
 8101ce0:	4a14      	ldr	r2, [pc, #80]	; (8101d34 <HAL_InitTick+0xc0>)
 8101ce2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (1000000U / 1000U) - 1U;
 8101ce4:	4b12      	ldr	r3, [pc, #72]	; (8101d30 <HAL_InitTick+0xbc>)
 8101ce6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8101cea:	60da      	str	r2, [r3, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 8101cec:	4a10      	ldr	r2, [pc, #64]	; (8101d30 <HAL_InitTick+0xbc>)
 8101cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101cf0:	6053      	str	r3, [r2, #4]
  htim8.Init.ClockDivision = 0;
 8101cf2:	4b0f      	ldr	r3, [pc, #60]	; (8101d30 <HAL_InitTick+0xbc>)
 8101cf4:	2200      	movs	r2, #0
 8101cf6:	611a      	str	r2, [r3, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101cf8:	4b0d      	ldr	r3, [pc, #52]	; (8101d30 <HAL_InitTick+0xbc>)
 8101cfa:	2200      	movs	r2, #0
 8101cfc:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim8) == HAL_OK)
 8101cfe:	480c      	ldr	r0, [pc, #48]	; (8101d30 <HAL_InitTick+0xbc>)
 8101d00:	f005 fa85 	bl	810720e <HAL_TIM_Base_Init>
 8101d04:	4603      	mov	r3, r0
 8101d06:	2b00      	cmp	r3, #0
 8101d08:	d107      	bne.n	8101d1a <HAL_InitTick+0xa6>
 8101d0a:	e001      	b.n	8101d10 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8101d0c:	2301      	movs	r3, #1
 8101d0e:	e005      	b.n	8101d1c <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim8);
 8101d10:	4807      	ldr	r0, [pc, #28]	; (8101d30 <HAL_InitTick+0xbc>)
 8101d12:	f005 fadd 	bl	81072d0 <HAL_TIM_Base_Start_IT>
 8101d16:	4603      	mov	r3, r0
 8101d18:	e000      	b.n	8101d1c <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8101d1a:	2301      	movs	r3, #1
}
 8101d1c:	4618      	mov	r0, r3
 8101d1e:	3738      	adds	r7, #56	; 0x38
 8101d20:	46bd      	mov	sp, r7
 8101d22:	bd80      	pop	{r7, pc}
 8101d24:	10000008 	.word	0x10000008
 8101d28:	58024400 	.word	0x58024400
 8101d2c:	431bde83 	.word	0x431bde83
 8101d30:	10009bb8 	.word	0x10009bb8
 8101d34:	40010400 	.word	0x40010400

08101d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101d38:	b480      	push	{r7}
 8101d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101d3c:	e7fe      	b.n	8101d3c <NMI_Handler+0x4>

08101d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101d3e:	b480      	push	{r7}
 8101d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101d42:	e7fe      	b.n	8101d42 <HardFault_Handler+0x4>

08101d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101d44:	b480      	push	{r7}
 8101d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101d48:	e7fe      	b.n	8101d48 <MemManage_Handler+0x4>

08101d4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101d4a:	b480      	push	{r7}
 8101d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101d4e:	e7fe      	b.n	8101d4e <BusFault_Handler+0x4>

08101d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101d50:	b480      	push	{r7}
 8101d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101d54:	e7fe      	b.n	8101d54 <UsageFault_Handler+0x4>

08101d56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101d56:	b480      	push	{r7}
 8101d58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101d5a:	bf00      	nop
 8101d5c:	46bd      	mov	sp, r7
 8101d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d62:	4770      	bx	lr

08101d64 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8101d64:	b580      	push	{r7, lr}
 8101d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8101d68:	4802      	ldr	r0, [pc, #8]	; (8101d74 <DMA1_Stream0_IRQHandler+0x10>)
 8101d6a:	f001 fbb7 	bl	81034dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8101d6e:	bf00      	nop
 8101d70:	bd80      	pop	{r7, pc}
 8101d72:	bf00      	nop
 8101d74:	10009ac8 	.word	0x10009ac8

08101d78 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8101d78:	b580      	push	{r7, lr}
 8101d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8101d7c:	4802      	ldr	r0, [pc, #8]	; (8101d88 <DMA1_Stream1_IRQHandler+0x10>)
 8101d7e:	f001 fbad 	bl	81034dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8101d82:	bf00      	nop
 8101d84:	bd80      	pop	{r7, pc}
 8101d86:	bf00      	nop
 8101d88:	10009b40 	.word	0x10009b40

08101d8c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8101d8c:	b580      	push	{r7, lr}
 8101d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8101d90:	4802      	ldr	r0, [pc, #8]	; (8101d9c <SPI1_IRQHandler+0x10>)
 8101d92:	f004 ff5d 	bl	8106c50 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8101d96:	bf00      	nop
 8101d98:	bd80      	pop	{r7, pc}
 8101d9a:	bf00      	nop
 8101d9c:	10009a40 	.word	0x10009a40

08101da0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8101da0:	b580      	push	{r7, lr}
 8101da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8101da4:	4802      	ldr	r0, [pc, #8]	; (8101db0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8101da6:	f005 fac9 	bl	810733c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8101daa:	bf00      	nop
 8101dac:	bd80      	pop	{r7, pc}
 8101dae:	bf00      	nop
 8101db0:	10009bb8 	.word	0x10009bb8

08101db4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8101db4:	b580      	push	{r7, lr}
 8101db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8101db8:	4802      	ldr	r0, [pc, #8]	; (8101dc4 <DMA2_Stream2_IRQHandler+0x10>)
 8101dba:	f001 fb8f 	bl	81034dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8101dbe:	bf00      	nop
 8101dc0:	bd80      	pop	{r7, pc}
 8101dc2:	bf00      	nop
 8101dc4:	10009c04 	.word	0x10009c04

08101dc8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8101dc8:	b580      	push	{r7, lr}
 8101dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8101dcc:	4802      	ldr	r0, [pc, #8]	; (8101dd8 <DMA2_Stream3_IRQHandler+0x10>)
 8101dce:	f001 fb85 	bl	81034dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8101dd2:	bf00      	nop
 8101dd4:	bd80      	pop	{r7, pc}
 8101dd6:	bf00      	nop
 8101dd8:	10009d08 	.word	0x10009d08

08101ddc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8101ddc:	b480      	push	{r7}
 8101dde:	af00      	add	r7, sp, #0
	return 1;
 8101de0:	2301      	movs	r3, #1
}
 8101de2:	4618      	mov	r0, r3
 8101de4:	46bd      	mov	sp, r7
 8101de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101dea:	4770      	bx	lr

08101dec <_kill>:

int _kill(int pid, int sig)
{
 8101dec:	b580      	push	{r7, lr}
 8101dee:	b082      	sub	sp, #8
 8101df0:	af00      	add	r7, sp, #0
 8101df2:	6078      	str	r0, [r7, #4]
 8101df4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8101df6:	f00d fbc1 	bl	810f57c <__errno>
 8101dfa:	4602      	mov	r2, r0
 8101dfc:	2316      	movs	r3, #22
 8101dfe:	6013      	str	r3, [r2, #0]
	return -1;
 8101e00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8101e04:	4618      	mov	r0, r3
 8101e06:	3708      	adds	r7, #8
 8101e08:	46bd      	mov	sp, r7
 8101e0a:	bd80      	pop	{r7, pc}

08101e0c <_exit>:

void _exit (int status)
{
 8101e0c:	b580      	push	{r7, lr}
 8101e0e:	b082      	sub	sp, #8
 8101e10:	af00      	add	r7, sp, #0
 8101e12:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8101e14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8101e18:	6878      	ldr	r0, [r7, #4]
 8101e1a:	f7ff ffe7 	bl	8101dec <_kill>
	while (1) {}		/* Make sure we hang here */
 8101e1e:	e7fe      	b.n	8101e1e <_exit+0x12>

08101e20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8101e20:	b580      	push	{r7, lr}
 8101e22:	b086      	sub	sp, #24
 8101e24:	af00      	add	r7, sp, #0
 8101e26:	60f8      	str	r0, [r7, #12]
 8101e28:	60b9      	str	r1, [r7, #8]
 8101e2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101e2c:	2300      	movs	r3, #0
 8101e2e:	617b      	str	r3, [r7, #20]
 8101e30:	e00a      	b.n	8101e48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8101e32:	f3af 8000 	nop.w
 8101e36:	4601      	mov	r1, r0
 8101e38:	68bb      	ldr	r3, [r7, #8]
 8101e3a:	1c5a      	adds	r2, r3, #1
 8101e3c:	60ba      	str	r2, [r7, #8]
 8101e3e:	b2ca      	uxtb	r2, r1
 8101e40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101e42:	697b      	ldr	r3, [r7, #20]
 8101e44:	3301      	adds	r3, #1
 8101e46:	617b      	str	r3, [r7, #20]
 8101e48:	697a      	ldr	r2, [r7, #20]
 8101e4a:	687b      	ldr	r3, [r7, #4]
 8101e4c:	429a      	cmp	r2, r3
 8101e4e:	dbf0      	blt.n	8101e32 <_read+0x12>
	}

return len;
 8101e50:	687b      	ldr	r3, [r7, #4]
}
 8101e52:	4618      	mov	r0, r3
 8101e54:	3718      	adds	r7, #24
 8101e56:	46bd      	mov	sp, r7
 8101e58:	bd80      	pop	{r7, pc}

08101e5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8101e5a:	b580      	push	{r7, lr}
 8101e5c:	b086      	sub	sp, #24
 8101e5e:	af00      	add	r7, sp, #0
 8101e60:	60f8      	str	r0, [r7, #12]
 8101e62:	60b9      	str	r1, [r7, #8]
 8101e64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101e66:	2300      	movs	r3, #0
 8101e68:	617b      	str	r3, [r7, #20]
 8101e6a:	e009      	b.n	8101e80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8101e6c:	68bb      	ldr	r3, [r7, #8]
 8101e6e:	1c5a      	adds	r2, r3, #1
 8101e70:	60ba      	str	r2, [r7, #8]
 8101e72:	781b      	ldrb	r3, [r3, #0]
 8101e74:	4618      	mov	r0, r3
 8101e76:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101e7a:	697b      	ldr	r3, [r7, #20]
 8101e7c:	3301      	adds	r3, #1
 8101e7e:	617b      	str	r3, [r7, #20]
 8101e80:	697a      	ldr	r2, [r7, #20]
 8101e82:	687b      	ldr	r3, [r7, #4]
 8101e84:	429a      	cmp	r2, r3
 8101e86:	dbf1      	blt.n	8101e6c <_write+0x12>
	}
	return len;
 8101e88:	687b      	ldr	r3, [r7, #4]
}
 8101e8a:	4618      	mov	r0, r3
 8101e8c:	3718      	adds	r7, #24
 8101e8e:	46bd      	mov	sp, r7
 8101e90:	bd80      	pop	{r7, pc}

08101e92 <_close>:

int _close(int file)
{
 8101e92:	b480      	push	{r7}
 8101e94:	b083      	sub	sp, #12
 8101e96:	af00      	add	r7, sp, #0
 8101e98:	6078      	str	r0, [r7, #4]
	return -1;
 8101e9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8101e9e:	4618      	mov	r0, r3
 8101ea0:	370c      	adds	r7, #12
 8101ea2:	46bd      	mov	sp, r7
 8101ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ea8:	4770      	bx	lr

08101eaa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8101eaa:	b480      	push	{r7}
 8101eac:	b083      	sub	sp, #12
 8101eae:	af00      	add	r7, sp, #0
 8101eb0:	6078      	str	r0, [r7, #4]
 8101eb2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8101eb4:	683b      	ldr	r3, [r7, #0]
 8101eb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8101eba:	605a      	str	r2, [r3, #4]
	return 0;
 8101ebc:	2300      	movs	r3, #0
}
 8101ebe:	4618      	mov	r0, r3
 8101ec0:	370c      	adds	r7, #12
 8101ec2:	46bd      	mov	sp, r7
 8101ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ec8:	4770      	bx	lr

08101eca <_isatty>:

int _isatty(int file)
{
 8101eca:	b480      	push	{r7}
 8101ecc:	b083      	sub	sp, #12
 8101ece:	af00      	add	r7, sp, #0
 8101ed0:	6078      	str	r0, [r7, #4]
	return 1;
 8101ed2:	2301      	movs	r3, #1
}
 8101ed4:	4618      	mov	r0, r3
 8101ed6:	370c      	adds	r7, #12
 8101ed8:	46bd      	mov	sp, r7
 8101eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ede:	4770      	bx	lr

08101ee0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8101ee0:	b480      	push	{r7}
 8101ee2:	b085      	sub	sp, #20
 8101ee4:	af00      	add	r7, sp, #0
 8101ee6:	60f8      	str	r0, [r7, #12]
 8101ee8:	60b9      	str	r1, [r7, #8]
 8101eea:	607a      	str	r2, [r7, #4]
	return 0;
 8101eec:	2300      	movs	r3, #0
}
 8101eee:	4618      	mov	r0, r3
 8101ef0:	3714      	adds	r7, #20
 8101ef2:	46bd      	mov	sp, r7
 8101ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ef8:	4770      	bx	lr
	...

08101efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101efc:	b580      	push	{r7, lr}
 8101efe:	b086      	sub	sp, #24
 8101f00:	af00      	add	r7, sp, #0
 8101f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101f04:	4a14      	ldr	r2, [pc, #80]	; (8101f58 <_sbrk+0x5c>)
 8101f06:	4b15      	ldr	r3, [pc, #84]	; (8101f5c <_sbrk+0x60>)
 8101f08:	1ad3      	subs	r3, r2, r3
 8101f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101f0c:	697b      	ldr	r3, [r7, #20]
 8101f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101f10:	4b13      	ldr	r3, [pc, #76]	; (8101f60 <_sbrk+0x64>)
 8101f12:	681b      	ldr	r3, [r3, #0]
 8101f14:	2b00      	cmp	r3, #0
 8101f16:	d102      	bne.n	8101f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101f18:	4b11      	ldr	r3, [pc, #68]	; (8101f60 <_sbrk+0x64>)
 8101f1a:	4a12      	ldr	r2, [pc, #72]	; (8101f64 <_sbrk+0x68>)
 8101f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8101f1e:	4b10      	ldr	r3, [pc, #64]	; (8101f60 <_sbrk+0x64>)
 8101f20:	681a      	ldr	r2, [r3, #0]
 8101f22:	687b      	ldr	r3, [r7, #4]
 8101f24:	4413      	add	r3, r2
 8101f26:	693a      	ldr	r2, [r7, #16]
 8101f28:	429a      	cmp	r2, r3
 8101f2a:	d207      	bcs.n	8101f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101f2c:	f00d fb26 	bl	810f57c <__errno>
 8101f30:	4602      	mov	r2, r0
 8101f32:	230c      	movs	r3, #12
 8101f34:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8101f36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8101f3a:	e009      	b.n	8101f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101f3c:	4b08      	ldr	r3, [pc, #32]	; (8101f60 <_sbrk+0x64>)
 8101f3e:	681b      	ldr	r3, [r3, #0]
 8101f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101f42:	4b07      	ldr	r3, [pc, #28]	; (8101f60 <_sbrk+0x64>)
 8101f44:	681a      	ldr	r2, [r3, #0]
 8101f46:	687b      	ldr	r3, [r7, #4]
 8101f48:	4413      	add	r3, r2
 8101f4a:	4a05      	ldr	r2, [pc, #20]	; (8101f60 <_sbrk+0x64>)
 8101f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101f4e:	68fb      	ldr	r3, [r7, #12]
}
 8101f50:	4618      	mov	r0, r3
 8101f52:	3718      	adds	r7, #24
 8101f54:	46bd      	mov	sp, r7
 8101f56:	bd80      	pop	{r7, pc}
 8101f58:	10048000 	.word	0x10048000
 8101f5c:	00000400 	.word	0x00000400
 8101f60:	1000047c 	.word	0x1000047c
 8101f64:	1000a1f8 	.word	0x1000a1f8

08101f68 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8101f68:	b580      	push	{r7, lr}
 8101f6a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8101f6c:	4b22      	ldr	r3, [pc, #136]	; (8101ff8 <MX_USART3_UART_Init+0x90>)
 8101f6e:	4a23      	ldr	r2, [pc, #140]	; (8101ffc <MX_USART3_UART_Init+0x94>)
 8101f70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8101f72:	4b21      	ldr	r3, [pc, #132]	; (8101ff8 <MX_USART3_UART_Init+0x90>)
 8101f74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8101f78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8101f7a:	4b1f      	ldr	r3, [pc, #124]	; (8101ff8 <MX_USART3_UART_Init+0x90>)
 8101f7c:	2200      	movs	r2, #0
 8101f7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8101f80:	4b1d      	ldr	r3, [pc, #116]	; (8101ff8 <MX_USART3_UART_Init+0x90>)
 8101f82:	2200      	movs	r2, #0
 8101f84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8101f86:	4b1c      	ldr	r3, [pc, #112]	; (8101ff8 <MX_USART3_UART_Init+0x90>)
 8101f88:	2200      	movs	r2, #0
 8101f8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8101f8c:	4b1a      	ldr	r3, [pc, #104]	; (8101ff8 <MX_USART3_UART_Init+0x90>)
 8101f8e:	220c      	movs	r2, #12
 8101f90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8101f92:	4b19      	ldr	r3, [pc, #100]	; (8101ff8 <MX_USART3_UART_Init+0x90>)
 8101f94:	2200      	movs	r2, #0
 8101f96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8101f98:	4b17      	ldr	r3, [pc, #92]	; (8101ff8 <MX_USART3_UART_Init+0x90>)
 8101f9a:	2200      	movs	r2, #0
 8101f9c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8101f9e:	4b16      	ldr	r3, [pc, #88]	; (8101ff8 <MX_USART3_UART_Init+0x90>)
 8101fa0:	2200      	movs	r2, #0
 8101fa2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101fa4:	4b14      	ldr	r3, [pc, #80]	; (8101ff8 <MX_USART3_UART_Init+0x90>)
 8101fa6:	2200      	movs	r2, #0
 8101fa8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8101faa:	4b13      	ldr	r3, [pc, #76]	; (8101ff8 <MX_USART3_UART_Init+0x90>)
 8101fac:	2200      	movs	r2, #0
 8101fae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8101fb0:	4811      	ldr	r0, [pc, #68]	; (8101ff8 <MX_USART3_UART_Init+0x90>)
 8101fb2:	f005 fbc3 	bl	810773c <HAL_UART_Init>
 8101fb6:	4603      	mov	r3, r0
 8101fb8:	2b00      	cmp	r3, #0
 8101fba:	d001      	beq.n	8101fc0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8101fbc:	f7ff fbcc 	bl	8101758 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101fc0:	2100      	movs	r1, #0
 8101fc2:	480d      	ldr	r0, [pc, #52]	; (8101ff8 <MX_USART3_UART_Init+0x90>)
 8101fc4:	f006 fd5b 	bl	8108a7e <HAL_UARTEx_SetTxFifoThreshold>
 8101fc8:	4603      	mov	r3, r0
 8101fca:	2b00      	cmp	r3, #0
 8101fcc:	d001      	beq.n	8101fd2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8101fce:	f7ff fbc3 	bl	8101758 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101fd2:	2100      	movs	r1, #0
 8101fd4:	4808      	ldr	r0, [pc, #32]	; (8101ff8 <MX_USART3_UART_Init+0x90>)
 8101fd6:	f006 fd90 	bl	8108afa <HAL_UARTEx_SetRxFifoThreshold>
 8101fda:	4603      	mov	r3, r0
 8101fdc:	2b00      	cmp	r3, #0
 8101fde:	d001      	beq.n	8101fe4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8101fe0:	f7ff fbba 	bl	8101758 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8101fe4:	4804      	ldr	r0, [pc, #16]	; (8101ff8 <MX_USART3_UART_Init+0x90>)
 8101fe6:	f006 fd11 	bl	8108a0c <HAL_UARTEx_DisableFifoMode>
 8101fea:	4603      	mov	r3, r0
 8101fec:	2b00      	cmp	r3, #0
 8101fee:	d001      	beq.n	8101ff4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8101ff0:	f7ff fbb2 	bl	8101758 <Error_Handler>
  }

}
 8101ff4:	bf00      	nop
 8101ff6:	bd80      	pop	{r7, pc}
 8101ff8:	10009c7c 	.word	0x10009c7c
 8101ffc:	40004800 	.word	0x40004800

08102000 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8102000:	b580      	push	{r7, lr}
 8102002:	b08a      	sub	sp, #40	; 0x28
 8102004:	af00      	add	r7, sp, #0
 8102006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102008:	f107 0314 	add.w	r3, r7, #20
 810200c:	2200      	movs	r2, #0
 810200e:	601a      	str	r2, [r3, #0]
 8102010:	605a      	str	r2, [r3, #4]
 8102012:	609a      	str	r2, [r3, #8]
 8102014:	60da      	str	r2, [r3, #12]
 8102016:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8102018:	687b      	ldr	r3, [r7, #4]
 810201a:	681b      	ldr	r3, [r3, #0]
 810201c:	4a49      	ldr	r2, [pc, #292]	; (8102144 <HAL_UART_MspInit+0x144>)
 810201e:	4293      	cmp	r3, r2
 8102020:	f040 808b 	bne.w	810213a <HAL_UART_MspInit+0x13a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8102024:	4b48      	ldr	r3, [pc, #288]	; (8102148 <HAL_UART_MspInit+0x148>)
 8102026:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810202a:	4a47      	ldr	r2, [pc, #284]	; (8102148 <HAL_UART_MspInit+0x148>)
 810202c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8102030:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102034:	4b44      	ldr	r3, [pc, #272]	; (8102148 <HAL_UART_MspInit+0x148>)
 8102036:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810203a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810203e:	613b      	str	r3, [r7, #16]
 8102040:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8102042:	4b41      	ldr	r3, [pc, #260]	; (8102148 <HAL_UART_MspInit+0x148>)
 8102044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102048:	4a3f      	ldr	r2, [pc, #252]	; (8102148 <HAL_UART_MspInit+0x148>)
 810204a:	f043 0308 	orr.w	r3, r3, #8
 810204e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102052:	4b3d      	ldr	r3, [pc, #244]	; (8102148 <HAL_UART_MspInit+0x148>)
 8102054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102058:	f003 0308 	and.w	r3, r3, #8
 810205c:	60fb      	str	r3, [r7, #12]
 810205e:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8102060:	f44f 7340 	mov.w	r3, #768	; 0x300
 8102064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102066:	2302      	movs	r3, #2
 8102068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810206a:	2300      	movs	r3, #0
 810206c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810206e:	2300      	movs	r3, #0
 8102070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8102072:	2307      	movs	r3, #7
 8102074:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8102076:	f107 0314 	add.w	r3, r7, #20
 810207a:	4619      	mov	r1, r3
 810207c:	4833      	ldr	r0, [pc, #204]	; (810214c <HAL_UART_MspInit+0x14c>)
 810207e:	f002 fd3f 	bl	8104b00 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA2_Stream2;
 8102082:	4b33      	ldr	r3, [pc, #204]	; (8102150 <HAL_UART_MspInit+0x150>)
 8102084:	4a33      	ldr	r2, [pc, #204]	; (8102154 <HAL_UART_MspInit+0x154>)
 8102086:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8102088:	4b31      	ldr	r3, [pc, #196]	; (8102150 <HAL_UART_MspInit+0x150>)
 810208a:	222d      	movs	r2, #45	; 0x2d
 810208c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 810208e:	4b30      	ldr	r3, [pc, #192]	; (8102150 <HAL_UART_MspInit+0x150>)
 8102090:	2200      	movs	r2, #0
 8102092:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102094:	4b2e      	ldr	r3, [pc, #184]	; (8102150 <HAL_UART_MspInit+0x150>)
 8102096:	2200      	movs	r2, #0
 8102098:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 810209a:	4b2d      	ldr	r3, [pc, #180]	; (8102150 <HAL_UART_MspInit+0x150>)
 810209c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81020a0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 81020a2:	4b2b      	ldr	r3, [pc, #172]	; (8102150 <HAL_UART_MspInit+0x150>)
 81020a4:	2200      	movs	r2, #0
 81020a6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 81020a8:	4b29      	ldr	r3, [pc, #164]	; (8102150 <HAL_UART_MspInit+0x150>)
 81020aa:	2200      	movs	r2, #0
 81020ac:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 81020ae:	4b28      	ldr	r3, [pc, #160]	; (8102150 <HAL_UART_MspInit+0x150>)
 81020b0:	2200      	movs	r2, #0
 81020b2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 81020b4:	4b26      	ldr	r3, [pc, #152]	; (8102150 <HAL_UART_MspInit+0x150>)
 81020b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 81020ba:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81020bc:	4b24      	ldr	r3, [pc, #144]	; (8102150 <HAL_UART_MspInit+0x150>)
 81020be:	2200      	movs	r2, #0
 81020c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 81020c2:	4823      	ldr	r0, [pc, #140]	; (8102150 <HAL_UART_MspInit+0x150>)
 81020c4:	f000 fa02 	bl	81024cc <HAL_DMA_Init>
 81020c8:	4603      	mov	r3, r0
 81020ca:	2b00      	cmp	r3, #0
 81020cc:	d001      	beq.n	81020d2 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 81020ce:	f7ff fb43 	bl	8101758 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 81020d2:	687b      	ldr	r3, [r7, #4]
 81020d4:	4a1e      	ldr	r2, [pc, #120]	; (8102150 <HAL_UART_MspInit+0x150>)
 81020d6:	679a      	str	r2, [r3, #120]	; 0x78
 81020d8:	4a1d      	ldr	r2, [pc, #116]	; (8102150 <HAL_UART_MspInit+0x150>)
 81020da:	687b      	ldr	r3, [r7, #4]
 81020dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA2_Stream3;
 81020de:	4b1e      	ldr	r3, [pc, #120]	; (8102158 <HAL_UART_MspInit+0x158>)
 81020e0:	4a1e      	ldr	r2, [pc, #120]	; (810215c <HAL_UART_MspInit+0x15c>)
 81020e2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 81020e4:	4b1c      	ldr	r3, [pc, #112]	; (8102158 <HAL_UART_MspInit+0x158>)
 81020e6:	222e      	movs	r2, #46	; 0x2e
 81020e8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 81020ea:	4b1b      	ldr	r3, [pc, #108]	; (8102158 <HAL_UART_MspInit+0x158>)
 81020ec:	2240      	movs	r2, #64	; 0x40
 81020ee:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 81020f0:	4b19      	ldr	r3, [pc, #100]	; (8102158 <HAL_UART_MspInit+0x158>)
 81020f2:	2200      	movs	r2, #0
 81020f4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 81020f6:	4b18      	ldr	r3, [pc, #96]	; (8102158 <HAL_UART_MspInit+0x158>)
 81020f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81020fc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 81020fe:	4b16      	ldr	r3, [pc, #88]	; (8102158 <HAL_UART_MspInit+0x158>)
 8102100:	2200      	movs	r2, #0
 8102102:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8102104:	4b14      	ldr	r3, [pc, #80]	; (8102158 <HAL_UART_MspInit+0x158>)
 8102106:	2200      	movs	r2, #0
 8102108:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 810210a:	4b13      	ldr	r3, [pc, #76]	; (8102158 <HAL_UART_MspInit+0x158>)
 810210c:	2200      	movs	r2, #0
 810210e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8102110:	4b11      	ldr	r3, [pc, #68]	; (8102158 <HAL_UART_MspInit+0x158>)
 8102112:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8102116:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8102118:	4b0f      	ldr	r3, [pc, #60]	; (8102158 <HAL_UART_MspInit+0x158>)
 810211a:	2200      	movs	r2, #0
 810211c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 810211e:	480e      	ldr	r0, [pc, #56]	; (8102158 <HAL_UART_MspInit+0x158>)
 8102120:	f000 f9d4 	bl	81024cc <HAL_DMA_Init>
 8102124:	4603      	mov	r3, r0
 8102126:	2b00      	cmp	r3, #0
 8102128:	d001      	beq.n	810212e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 810212a:	f7ff fb15 	bl	8101758 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 810212e:	687b      	ldr	r3, [r7, #4]
 8102130:	4a09      	ldr	r2, [pc, #36]	; (8102158 <HAL_UART_MspInit+0x158>)
 8102132:	675a      	str	r2, [r3, #116]	; 0x74
 8102134:	4a08      	ldr	r2, [pc, #32]	; (8102158 <HAL_UART_MspInit+0x158>)
 8102136:	687b      	ldr	r3, [r7, #4]
 8102138:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 810213a:	bf00      	nop
 810213c:	3728      	adds	r7, #40	; 0x28
 810213e:	46bd      	mov	sp, r7
 8102140:	bd80      	pop	{r7, pc}
 8102142:	bf00      	nop
 8102144:	40004800 	.word	0x40004800
 8102148:	58024400 	.word	0x58024400
 810214c:	58020c00 	.word	0x58020c00
 8102150:	10009c04 	.word	0x10009c04
 8102154:	40020440 	.word	0x40020440
 8102158:	10009d08 	.word	0x10009d08
 810215c:	40020458 	.word	0x40020458

08102160 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8102160:	f8df d034 	ldr.w	sp, [pc, #52]	; 8102198 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8102164:	f7fe ffd8 	bl	8101118 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8102168:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 810216a:	e003      	b.n	8102174 <LoopCopyDataInit>

0810216c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 810216c:	4b0b      	ldr	r3, [pc, #44]	; (810219c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 810216e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8102170:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8102172:	3104      	adds	r1, #4

08102174 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8102174:	480a      	ldr	r0, [pc, #40]	; (81021a0 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8102176:	4b0b      	ldr	r3, [pc, #44]	; (81021a4 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8102178:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 810217a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 810217c:	d3f6      	bcc.n	810216c <CopyDataInit>
  ldr  r2, =_sbss
 810217e:	4a0a      	ldr	r2, [pc, #40]	; (81021a8 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8102180:	e002      	b.n	8102188 <LoopFillZerobss>

08102182 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8102182:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8102184:	f842 3b04 	str.w	r3, [r2], #4

08102188 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8102188:	4b08      	ldr	r3, [pc, #32]	; (81021ac <LoopFillZerobss+0x24>)
  cmp  r2, r3
 810218a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 810218c:	d3f9      	bcc.n	8102182 <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 810218e:	f00d f9fb 	bl	810f588 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8102192:	f7ff fa77 	bl	8101684 <main>
  bx  lr    
 8102196:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8102198:	10048000 	.word	0x10048000
  ldr  r3, =_sidata
 810219c:	081131f4 	.word	0x081131f4
  ldr  r0, =_sdata
 81021a0:	10000000 	.word	0x10000000
  ldr  r3, =_edata
 81021a4:	1000020c 	.word	0x1000020c
  ldr  r2, =_sbss
 81021a8:	1000020c 	.word	0x1000020c
  ldr  r3, = _ebss
 81021ac:	1000a1f8 	.word	0x1000a1f8

081021b0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81021b0:	e7fe      	b.n	81021b0 <ADC3_IRQHandler>
	...

081021b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81021b4:	b580      	push	{r7, lr}
 81021b6:	b082      	sub	sp, #8
 81021b8:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81021ba:	4b28      	ldr	r3, [pc, #160]	; (810225c <HAL_Init+0xa8>)
 81021bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81021c0:	4a26      	ldr	r2, [pc, #152]	; (810225c <HAL_Init+0xa8>)
 81021c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81021c6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81021ca:	4b24      	ldr	r3, [pc, #144]	; (810225c <HAL_Init+0xa8>)
 81021cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81021d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81021d4:	603b      	str	r3, [r7, #0]
 81021d6:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81021d8:	4b21      	ldr	r3, [pc, #132]	; (8102260 <HAL_Init+0xac>)
 81021da:	681b      	ldr	r3, [r3, #0]
 81021dc:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 81021e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81021e4:	4a1e      	ldr	r2, [pc, #120]	; (8102260 <HAL_Init+0xac>)
 81021e6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 81021ea:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81021ec:	4b1c      	ldr	r3, [pc, #112]	; (8102260 <HAL_Init+0xac>)
 81021ee:	681b      	ldr	r3, [r3, #0]
 81021f0:	4a1b      	ldr	r2, [pc, #108]	; (8102260 <HAL_Init+0xac>)
 81021f2:	f043 0301 	orr.w	r3, r3, #1
 81021f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81021f8:	2003      	movs	r0, #3
 81021fa:	f000 f91b 	bl	8102434 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81021fe:	f003 ff6f 	bl	81060e0 <HAL_RCC_GetSysClockFreq>
 8102202:	4601      	mov	r1, r0
 8102204:	4b15      	ldr	r3, [pc, #84]	; (810225c <HAL_Init+0xa8>)
 8102206:	699b      	ldr	r3, [r3, #24]
 8102208:	0a1b      	lsrs	r3, r3, #8
 810220a:	f003 030f 	and.w	r3, r3, #15
 810220e:	4a15      	ldr	r2, [pc, #84]	; (8102264 <HAL_Init+0xb0>)
 8102210:	5cd3      	ldrb	r3, [r2, r3]
 8102212:	f003 031f 	and.w	r3, r3, #31
 8102216:	fa21 f303 	lsr.w	r3, r1, r3
 810221a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810221c:	4b0f      	ldr	r3, [pc, #60]	; (810225c <HAL_Init+0xa8>)
 810221e:	699b      	ldr	r3, [r3, #24]
 8102220:	f003 030f 	and.w	r3, r3, #15
 8102224:	4a0f      	ldr	r2, [pc, #60]	; (8102264 <HAL_Init+0xb0>)
 8102226:	5cd3      	ldrb	r3, [r2, r3]
 8102228:	f003 031f 	and.w	r3, r3, #31
 810222c:	687a      	ldr	r2, [r7, #4]
 810222e:	fa22 f303 	lsr.w	r3, r2, r3
 8102232:	4a0d      	ldr	r2, [pc, #52]	; (8102268 <HAL_Init+0xb4>)
 8102234:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102236:	4b0c      	ldr	r3, [pc, #48]	; (8102268 <HAL_Init+0xb4>)
 8102238:	681b      	ldr	r3, [r3, #0]
 810223a:	4a0c      	ldr	r2, [pc, #48]	; (810226c <HAL_Init+0xb8>)
 810223c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810223e:	2000      	movs	r0, #0
 8102240:	f7ff fd18 	bl	8101c74 <HAL_InitTick>
 8102244:	4603      	mov	r3, r0
 8102246:	2b00      	cmp	r3, #0
 8102248:	d001      	beq.n	810224e <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810224a:	2301      	movs	r3, #1
 810224c:	e002      	b.n	8102254 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810224e:	f7ff fcf3 	bl	8101c38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8102252:	2300      	movs	r3, #0
}
 8102254:	4618      	mov	r0, r3
 8102256:	3708      	adds	r7, #8
 8102258:	46bd      	mov	sp, r7
 810225a:	bd80      	pop	{r7, pc}
 810225c:	58024400 	.word	0x58024400
 8102260:	40024400 	.word	0x40024400
 8102264:	08112a00 	.word	0x08112a00
 8102268:	10000004 	.word	0x10000004
 810226c:	10000000 	.word	0x10000000

08102270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8102270:	b480      	push	{r7}
 8102272:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8102274:	4b06      	ldr	r3, [pc, #24]	; (8102290 <HAL_IncTick+0x20>)
 8102276:	781b      	ldrb	r3, [r3, #0]
 8102278:	461a      	mov	r2, r3
 810227a:	4b06      	ldr	r3, [pc, #24]	; (8102294 <HAL_IncTick+0x24>)
 810227c:	681b      	ldr	r3, [r3, #0]
 810227e:	4413      	add	r3, r2
 8102280:	4a04      	ldr	r2, [pc, #16]	; (8102294 <HAL_IncTick+0x24>)
 8102282:	6013      	str	r3, [r2, #0]
}
 8102284:	bf00      	nop
 8102286:	46bd      	mov	sp, r7
 8102288:	f85d 7b04 	ldr.w	r7, [sp], #4
 810228c:	4770      	bx	lr
 810228e:	bf00      	nop
 8102290:	1000000c 	.word	0x1000000c
 8102294:	10009d80 	.word	0x10009d80

08102298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8102298:	b480      	push	{r7}
 810229a:	af00      	add	r7, sp, #0
  return uwTick;
 810229c:	4b03      	ldr	r3, [pc, #12]	; (81022ac <HAL_GetTick+0x14>)
 810229e:	681b      	ldr	r3, [r3, #0]
}
 81022a0:	4618      	mov	r0, r3
 81022a2:	46bd      	mov	sp, r7
 81022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022a8:	4770      	bx	lr
 81022aa:	bf00      	nop
 81022ac:	10009d80 	.word	0x10009d80

081022b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81022b0:	b480      	push	{r7}
 81022b2:	b085      	sub	sp, #20
 81022b4:	af00      	add	r7, sp, #0
 81022b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81022b8:	687b      	ldr	r3, [r7, #4]
 81022ba:	f003 0307 	and.w	r3, r3, #7
 81022be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81022c0:	4b0c      	ldr	r3, [pc, #48]	; (81022f4 <__NVIC_SetPriorityGrouping+0x44>)
 81022c2:	68db      	ldr	r3, [r3, #12]
 81022c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81022c6:	68ba      	ldr	r2, [r7, #8]
 81022c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81022cc:	4013      	ands	r3, r2
 81022ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81022d0:	68fb      	ldr	r3, [r7, #12]
 81022d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81022d4:	68bb      	ldr	r3, [r7, #8]
 81022d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81022d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81022dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81022e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81022e2:	4a04      	ldr	r2, [pc, #16]	; (81022f4 <__NVIC_SetPriorityGrouping+0x44>)
 81022e4:	68bb      	ldr	r3, [r7, #8]
 81022e6:	60d3      	str	r3, [r2, #12]
}
 81022e8:	bf00      	nop
 81022ea:	3714      	adds	r7, #20
 81022ec:	46bd      	mov	sp, r7
 81022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022f2:	4770      	bx	lr
 81022f4:	e000ed00 	.word	0xe000ed00

081022f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81022f8:	b480      	push	{r7}
 81022fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81022fc:	4b04      	ldr	r3, [pc, #16]	; (8102310 <__NVIC_GetPriorityGrouping+0x18>)
 81022fe:	68db      	ldr	r3, [r3, #12]
 8102300:	0a1b      	lsrs	r3, r3, #8
 8102302:	f003 0307 	and.w	r3, r3, #7
}
 8102306:	4618      	mov	r0, r3
 8102308:	46bd      	mov	sp, r7
 810230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810230e:	4770      	bx	lr
 8102310:	e000ed00 	.word	0xe000ed00

08102314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102314:	b480      	push	{r7}
 8102316:	b083      	sub	sp, #12
 8102318:	af00      	add	r7, sp, #0
 810231a:	4603      	mov	r3, r0
 810231c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810231e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102322:	2b00      	cmp	r3, #0
 8102324:	db0b      	blt.n	810233e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8102326:	88fb      	ldrh	r3, [r7, #6]
 8102328:	f003 021f 	and.w	r2, r3, #31
 810232c:	4907      	ldr	r1, [pc, #28]	; (810234c <__NVIC_EnableIRQ+0x38>)
 810232e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102332:	095b      	lsrs	r3, r3, #5
 8102334:	2001      	movs	r0, #1
 8102336:	fa00 f202 	lsl.w	r2, r0, r2
 810233a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 810233e:	bf00      	nop
 8102340:	370c      	adds	r7, #12
 8102342:	46bd      	mov	sp, r7
 8102344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102348:	4770      	bx	lr
 810234a:	bf00      	nop
 810234c:	e000e100 	.word	0xe000e100

08102350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8102350:	b480      	push	{r7}
 8102352:	b083      	sub	sp, #12
 8102354:	af00      	add	r7, sp, #0
 8102356:	4603      	mov	r3, r0
 8102358:	6039      	str	r1, [r7, #0]
 810235a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810235c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102360:	2b00      	cmp	r3, #0
 8102362:	db0a      	blt.n	810237a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102364:	683b      	ldr	r3, [r7, #0]
 8102366:	b2da      	uxtb	r2, r3
 8102368:	490c      	ldr	r1, [pc, #48]	; (810239c <__NVIC_SetPriority+0x4c>)
 810236a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810236e:	0112      	lsls	r2, r2, #4
 8102370:	b2d2      	uxtb	r2, r2
 8102372:	440b      	add	r3, r1
 8102374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8102378:	e00a      	b.n	8102390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810237a:	683b      	ldr	r3, [r7, #0]
 810237c:	b2da      	uxtb	r2, r3
 810237e:	4908      	ldr	r1, [pc, #32]	; (81023a0 <__NVIC_SetPriority+0x50>)
 8102380:	88fb      	ldrh	r3, [r7, #6]
 8102382:	f003 030f 	and.w	r3, r3, #15
 8102386:	3b04      	subs	r3, #4
 8102388:	0112      	lsls	r2, r2, #4
 810238a:	b2d2      	uxtb	r2, r2
 810238c:	440b      	add	r3, r1
 810238e:	761a      	strb	r2, [r3, #24]
}
 8102390:	bf00      	nop
 8102392:	370c      	adds	r7, #12
 8102394:	46bd      	mov	sp, r7
 8102396:	f85d 7b04 	ldr.w	r7, [sp], #4
 810239a:	4770      	bx	lr
 810239c:	e000e100 	.word	0xe000e100
 81023a0:	e000ed00 	.word	0xe000ed00

081023a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81023a4:	b480      	push	{r7}
 81023a6:	b089      	sub	sp, #36	; 0x24
 81023a8:	af00      	add	r7, sp, #0
 81023aa:	60f8      	str	r0, [r7, #12]
 81023ac:	60b9      	str	r1, [r7, #8]
 81023ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81023b0:	68fb      	ldr	r3, [r7, #12]
 81023b2:	f003 0307 	and.w	r3, r3, #7
 81023b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81023b8:	69fb      	ldr	r3, [r7, #28]
 81023ba:	f1c3 0307 	rsb	r3, r3, #7
 81023be:	2b04      	cmp	r3, #4
 81023c0:	bf28      	it	cs
 81023c2:	2304      	movcs	r3, #4
 81023c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81023c6:	69fb      	ldr	r3, [r7, #28]
 81023c8:	3304      	adds	r3, #4
 81023ca:	2b06      	cmp	r3, #6
 81023cc:	d902      	bls.n	81023d4 <NVIC_EncodePriority+0x30>
 81023ce:	69fb      	ldr	r3, [r7, #28]
 81023d0:	3b03      	subs	r3, #3
 81023d2:	e000      	b.n	81023d6 <NVIC_EncodePriority+0x32>
 81023d4:	2300      	movs	r3, #0
 81023d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81023d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 81023dc:	69bb      	ldr	r3, [r7, #24]
 81023de:	fa02 f303 	lsl.w	r3, r2, r3
 81023e2:	43da      	mvns	r2, r3
 81023e4:	68bb      	ldr	r3, [r7, #8]
 81023e6:	401a      	ands	r2, r3
 81023e8:	697b      	ldr	r3, [r7, #20]
 81023ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81023ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 81023f0:	697b      	ldr	r3, [r7, #20]
 81023f2:	fa01 f303 	lsl.w	r3, r1, r3
 81023f6:	43d9      	mvns	r1, r3
 81023f8:	687b      	ldr	r3, [r7, #4]
 81023fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81023fc:	4313      	orrs	r3, r2
         );
}
 81023fe:	4618      	mov	r0, r3
 8102400:	3724      	adds	r7, #36	; 0x24
 8102402:	46bd      	mov	sp, r7
 8102404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102408:	4770      	bx	lr
	...

0810240c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 810240c:	b480      	push	{r7}
 810240e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8102410:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8102414:	4b05      	ldr	r3, [pc, #20]	; (810242c <__NVIC_SystemReset+0x20>)
 8102416:	68db      	ldr	r3, [r3, #12]
 8102418:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 810241c:	4903      	ldr	r1, [pc, #12]	; (810242c <__NVIC_SystemReset+0x20>)
 810241e:	4b04      	ldr	r3, [pc, #16]	; (8102430 <__NVIC_SystemReset+0x24>)
 8102420:	4313      	orrs	r3, r2
 8102422:	60cb      	str	r3, [r1, #12]
 8102424:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8102428:	bf00      	nop
 810242a:	e7fd      	b.n	8102428 <__NVIC_SystemReset+0x1c>
 810242c:	e000ed00 	.word	0xe000ed00
 8102430:	05fa0004 	.word	0x05fa0004

08102434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102434:	b580      	push	{r7, lr}
 8102436:	b082      	sub	sp, #8
 8102438:	af00      	add	r7, sp, #0
 810243a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810243c:	6878      	ldr	r0, [r7, #4]
 810243e:	f7ff ff37 	bl	81022b0 <__NVIC_SetPriorityGrouping>
}
 8102442:	bf00      	nop
 8102444:	3708      	adds	r7, #8
 8102446:	46bd      	mov	sp, r7
 8102448:	bd80      	pop	{r7, pc}

0810244a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810244a:	b580      	push	{r7, lr}
 810244c:	b086      	sub	sp, #24
 810244e:	af00      	add	r7, sp, #0
 8102450:	4603      	mov	r3, r0
 8102452:	60b9      	str	r1, [r7, #8]
 8102454:	607a      	str	r2, [r7, #4]
 8102456:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8102458:	f7ff ff4e 	bl	81022f8 <__NVIC_GetPriorityGrouping>
 810245c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810245e:	687a      	ldr	r2, [r7, #4]
 8102460:	68b9      	ldr	r1, [r7, #8]
 8102462:	6978      	ldr	r0, [r7, #20]
 8102464:	f7ff ff9e 	bl	81023a4 <NVIC_EncodePriority>
 8102468:	4602      	mov	r2, r0
 810246a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810246e:	4611      	mov	r1, r2
 8102470:	4618      	mov	r0, r3
 8102472:	f7ff ff6d 	bl	8102350 <__NVIC_SetPriority>
}
 8102476:	bf00      	nop
 8102478:	3718      	adds	r7, #24
 810247a:	46bd      	mov	sp, r7
 810247c:	bd80      	pop	{r7, pc}

0810247e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810247e:	b580      	push	{r7, lr}
 8102480:	b082      	sub	sp, #8
 8102482:	af00      	add	r7, sp, #0
 8102484:	4603      	mov	r3, r0
 8102486:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8102488:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810248c:	4618      	mov	r0, r3
 810248e:	f7ff ff41 	bl	8102314 <__NVIC_EnableIRQ>
}
 8102492:	bf00      	nop
 8102494:	3708      	adds	r7, #8
 8102496:	46bd      	mov	sp, r7
 8102498:	bd80      	pop	{r7, pc}

0810249a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 810249a:	b580      	push	{r7, lr}
 810249c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 810249e:	f7ff ffb5 	bl	810240c <__NVIC_SystemReset>
	...

081024a4 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81024a4:	b480      	push	{r7}
 81024a6:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81024a8:	4b07      	ldr	r3, [pc, #28]	; (81024c8 <HAL_GetCurrentCPUID+0x24>)
 81024aa:	681b      	ldr	r3, [r3, #0]
 81024ac:	091b      	lsrs	r3, r3, #4
 81024ae:	f003 030f 	and.w	r3, r3, #15
 81024b2:	2b07      	cmp	r3, #7
 81024b4:	d101      	bne.n	81024ba <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81024b6:	2303      	movs	r3, #3
 81024b8:	e000      	b.n	81024bc <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81024ba:	2301      	movs	r3, #1
  }
}
 81024bc:	4618      	mov	r0, r3
 81024be:	46bd      	mov	sp, r7
 81024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024c4:	4770      	bx	lr
 81024c6:	bf00      	nop
 81024c8:	e000ed00 	.word	0xe000ed00

081024cc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 81024cc:	b580      	push	{r7, lr}
 81024ce:	b086      	sub	sp, #24
 81024d0:	af00      	add	r7, sp, #0
 81024d2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 81024d4:	f7ff fee0 	bl	8102298 <HAL_GetTick>
 81024d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81024da:	687b      	ldr	r3, [r7, #4]
 81024dc:	2b00      	cmp	r3, #0
 81024de:	d101      	bne.n	81024e4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 81024e0:	2301      	movs	r3, #1
 81024e2:	e314      	b.n	8102b0e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81024e4:	687b      	ldr	r3, [r7, #4]
 81024e6:	681b      	ldr	r3, [r3, #0]
 81024e8:	4a66      	ldr	r2, [pc, #408]	; (8102684 <HAL_DMA_Init+0x1b8>)
 81024ea:	4293      	cmp	r3, r2
 81024ec:	d04a      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 81024ee:	687b      	ldr	r3, [r7, #4]
 81024f0:	681b      	ldr	r3, [r3, #0]
 81024f2:	4a65      	ldr	r2, [pc, #404]	; (8102688 <HAL_DMA_Init+0x1bc>)
 81024f4:	4293      	cmp	r3, r2
 81024f6:	d045      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 81024f8:	687b      	ldr	r3, [r7, #4]
 81024fa:	681b      	ldr	r3, [r3, #0]
 81024fc:	4a63      	ldr	r2, [pc, #396]	; (810268c <HAL_DMA_Init+0x1c0>)
 81024fe:	4293      	cmp	r3, r2
 8102500:	d040      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 8102502:	687b      	ldr	r3, [r7, #4]
 8102504:	681b      	ldr	r3, [r3, #0]
 8102506:	4a62      	ldr	r2, [pc, #392]	; (8102690 <HAL_DMA_Init+0x1c4>)
 8102508:	4293      	cmp	r3, r2
 810250a:	d03b      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 810250c:	687b      	ldr	r3, [r7, #4]
 810250e:	681b      	ldr	r3, [r3, #0]
 8102510:	4a60      	ldr	r2, [pc, #384]	; (8102694 <HAL_DMA_Init+0x1c8>)
 8102512:	4293      	cmp	r3, r2
 8102514:	d036      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 8102516:	687b      	ldr	r3, [r7, #4]
 8102518:	681b      	ldr	r3, [r3, #0]
 810251a:	4a5f      	ldr	r2, [pc, #380]	; (8102698 <HAL_DMA_Init+0x1cc>)
 810251c:	4293      	cmp	r3, r2
 810251e:	d031      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 8102520:	687b      	ldr	r3, [r7, #4]
 8102522:	681b      	ldr	r3, [r3, #0]
 8102524:	4a5d      	ldr	r2, [pc, #372]	; (810269c <HAL_DMA_Init+0x1d0>)
 8102526:	4293      	cmp	r3, r2
 8102528:	d02c      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 810252a:	687b      	ldr	r3, [r7, #4]
 810252c:	681b      	ldr	r3, [r3, #0]
 810252e:	4a5c      	ldr	r2, [pc, #368]	; (81026a0 <HAL_DMA_Init+0x1d4>)
 8102530:	4293      	cmp	r3, r2
 8102532:	d027      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 8102534:	687b      	ldr	r3, [r7, #4]
 8102536:	681b      	ldr	r3, [r3, #0]
 8102538:	4a5a      	ldr	r2, [pc, #360]	; (81026a4 <HAL_DMA_Init+0x1d8>)
 810253a:	4293      	cmp	r3, r2
 810253c:	d022      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 810253e:	687b      	ldr	r3, [r7, #4]
 8102540:	681b      	ldr	r3, [r3, #0]
 8102542:	4a59      	ldr	r2, [pc, #356]	; (81026a8 <HAL_DMA_Init+0x1dc>)
 8102544:	4293      	cmp	r3, r2
 8102546:	d01d      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 8102548:	687b      	ldr	r3, [r7, #4]
 810254a:	681b      	ldr	r3, [r3, #0]
 810254c:	4a57      	ldr	r2, [pc, #348]	; (81026ac <HAL_DMA_Init+0x1e0>)
 810254e:	4293      	cmp	r3, r2
 8102550:	d018      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 8102552:	687b      	ldr	r3, [r7, #4]
 8102554:	681b      	ldr	r3, [r3, #0]
 8102556:	4a56      	ldr	r2, [pc, #344]	; (81026b0 <HAL_DMA_Init+0x1e4>)
 8102558:	4293      	cmp	r3, r2
 810255a:	d013      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 810255c:	687b      	ldr	r3, [r7, #4]
 810255e:	681b      	ldr	r3, [r3, #0]
 8102560:	4a54      	ldr	r2, [pc, #336]	; (81026b4 <HAL_DMA_Init+0x1e8>)
 8102562:	4293      	cmp	r3, r2
 8102564:	d00e      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 8102566:	687b      	ldr	r3, [r7, #4]
 8102568:	681b      	ldr	r3, [r3, #0]
 810256a:	4a53      	ldr	r2, [pc, #332]	; (81026b8 <HAL_DMA_Init+0x1ec>)
 810256c:	4293      	cmp	r3, r2
 810256e:	d009      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 8102570:	687b      	ldr	r3, [r7, #4]
 8102572:	681b      	ldr	r3, [r3, #0]
 8102574:	4a51      	ldr	r2, [pc, #324]	; (81026bc <HAL_DMA_Init+0x1f0>)
 8102576:	4293      	cmp	r3, r2
 8102578:	d004      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 810257a:	687b      	ldr	r3, [r7, #4]
 810257c:	681b      	ldr	r3, [r3, #0]
 810257e:	4a50      	ldr	r2, [pc, #320]	; (81026c0 <HAL_DMA_Init+0x1f4>)
 8102580:	4293      	cmp	r3, r2
 8102582:	d101      	bne.n	8102588 <HAL_DMA_Init+0xbc>
 8102584:	2301      	movs	r3, #1
 8102586:	e000      	b.n	810258a <HAL_DMA_Init+0xbe>
 8102588:	2300      	movs	r3, #0
 810258a:	2b00      	cmp	r3, #0
 810258c:	f000 813b 	beq.w	8102806 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8102590:	687b      	ldr	r3, [r7, #4]
 8102592:	2200      	movs	r2, #0
 8102594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8102598:	687b      	ldr	r3, [r7, #4]
 810259a:	2202      	movs	r2, #2
 810259c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 81025a0:	687b      	ldr	r3, [r7, #4]
 81025a2:	681b      	ldr	r3, [r3, #0]
 81025a4:	4a37      	ldr	r2, [pc, #220]	; (8102684 <HAL_DMA_Init+0x1b8>)
 81025a6:	4293      	cmp	r3, r2
 81025a8:	d04a      	beq.n	8102640 <HAL_DMA_Init+0x174>
 81025aa:	687b      	ldr	r3, [r7, #4]
 81025ac:	681b      	ldr	r3, [r3, #0]
 81025ae:	4a36      	ldr	r2, [pc, #216]	; (8102688 <HAL_DMA_Init+0x1bc>)
 81025b0:	4293      	cmp	r3, r2
 81025b2:	d045      	beq.n	8102640 <HAL_DMA_Init+0x174>
 81025b4:	687b      	ldr	r3, [r7, #4]
 81025b6:	681b      	ldr	r3, [r3, #0]
 81025b8:	4a34      	ldr	r2, [pc, #208]	; (810268c <HAL_DMA_Init+0x1c0>)
 81025ba:	4293      	cmp	r3, r2
 81025bc:	d040      	beq.n	8102640 <HAL_DMA_Init+0x174>
 81025be:	687b      	ldr	r3, [r7, #4]
 81025c0:	681b      	ldr	r3, [r3, #0]
 81025c2:	4a33      	ldr	r2, [pc, #204]	; (8102690 <HAL_DMA_Init+0x1c4>)
 81025c4:	4293      	cmp	r3, r2
 81025c6:	d03b      	beq.n	8102640 <HAL_DMA_Init+0x174>
 81025c8:	687b      	ldr	r3, [r7, #4]
 81025ca:	681b      	ldr	r3, [r3, #0]
 81025cc:	4a31      	ldr	r2, [pc, #196]	; (8102694 <HAL_DMA_Init+0x1c8>)
 81025ce:	4293      	cmp	r3, r2
 81025d0:	d036      	beq.n	8102640 <HAL_DMA_Init+0x174>
 81025d2:	687b      	ldr	r3, [r7, #4]
 81025d4:	681b      	ldr	r3, [r3, #0]
 81025d6:	4a30      	ldr	r2, [pc, #192]	; (8102698 <HAL_DMA_Init+0x1cc>)
 81025d8:	4293      	cmp	r3, r2
 81025da:	d031      	beq.n	8102640 <HAL_DMA_Init+0x174>
 81025dc:	687b      	ldr	r3, [r7, #4]
 81025de:	681b      	ldr	r3, [r3, #0]
 81025e0:	4a2e      	ldr	r2, [pc, #184]	; (810269c <HAL_DMA_Init+0x1d0>)
 81025e2:	4293      	cmp	r3, r2
 81025e4:	d02c      	beq.n	8102640 <HAL_DMA_Init+0x174>
 81025e6:	687b      	ldr	r3, [r7, #4]
 81025e8:	681b      	ldr	r3, [r3, #0]
 81025ea:	4a2d      	ldr	r2, [pc, #180]	; (81026a0 <HAL_DMA_Init+0x1d4>)
 81025ec:	4293      	cmp	r3, r2
 81025ee:	d027      	beq.n	8102640 <HAL_DMA_Init+0x174>
 81025f0:	687b      	ldr	r3, [r7, #4]
 81025f2:	681b      	ldr	r3, [r3, #0]
 81025f4:	4a2b      	ldr	r2, [pc, #172]	; (81026a4 <HAL_DMA_Init+0x1d8>)
 81025f6:	4293      	cmp	r3, r2
 81025f8:	d022      	beq.n	8102640 <HAL_DMA_Init+0x174>
 81025fa:	687b      	ldr	r3, [r7, #4]
 81025fc:	681b      	ldr	r3, [r3, #0]
 81025fe:	4a2a      	ldr	r2, [pc, #168]	; (81026a8 <HAL_DMA_Init+0x1dc>)
 8102600:	4293      	cmp	r3, r2
 8102602:	d01d      	beq.n	8102640 <HAL_DMA_Init+0x174>
 8102604:	687b      	ldr	r3, [r7, #4]
 8102606:	681b      	ldr	r3, [r3, #0]
 8102608:	4a28      	ldr	r2, [pc, #160]	; (81026ac <HAL_DMA_Init+0x1e0>)
 810260a:	4293      	cmp	r3, r2
 810260c:	d018      	beq.n	8102640 <HAL_DMA_Init+0x174>
 810260e:	687b      	ldr	r3, [r7, #4]
 8102610:	681b      	ldr	r3, [r3, #0]
 8102612:	4a27      	ldr	r2, [pc, #156]	; (81026b0 <HAL_DMA_Init+0x1e4>)
 8102614:	4293      	cmp	r3, r2
 8102616:	d013      	beq.n	8102640 <HAL_DMA_Init+0x174>
 8102618:	687b      	ldr	r3, [r7, #4]
 810261a:	681b      	ldr	r3, [r3, #0]
 810261c:	4a25      	ldr	r2, [pc, #148]	; (81026b4 <HAL_DMA_Init+0x1e8>)
 810261e:	4293      	cmp	r3, r2
 8102620:	d00e      	beq.n	8102640 <HAL_DMA_Init+0x174>
 8102622:	687b      	ldr	r3, [r7, #4]
 8102624:	681b      	ldr	r3, [r3, #0]
 8102626:	4a24      	ldr	r2, [pc, #144]	; (81026b8 <HAL_DMA_Init+0x1ec>)
 8102628:	4293      	cmp	r3, r2
 810262a:	d009      	beq.n	8102640 <HAL_DMA_Init+0x174>
 810262c:	687b      	ldr	r3, [r7, #4]
 810262e:	681b      	ldr	r3, [r3, #0]
 8102630:	4a22      	ldr	r2, [pc, #136]	; (81026bc <HAL_DMA_Init+0x1f0>)
 8102632:	4293      	cmp	r3, r2
 8102634:	d004      	beq.n	8102640 <HAL_DMA_Init+0x174>
 8102636:	687b      	ldr	r3, [r7, #4]
 8102638:	681b      	ldr	r3, [r3, #0]
 810263a:	4a21      	ldr	r2, [pc, #132]	; (81026c0 <HAL_DMA_Init+0x1f4>)
 810263c:	4293      	cmp	r3, r2
 810263e:	d108      	bne.n	8102652 <HAL_DMA_Init+0x186>
 8102640:	687b      	ldr	r3, [r7, #4]
 8102642:	681b      	ldr	r3, [r3, #0]
 8102644:	681a      	ldr	r2, [r3, #0]
 8102646:	687b      	ldr	r3, [r7, #4]
 8102648:	681b      	ldr	r3, [r3, #0]
 810264a:	f022 0201 	bic.w	r2, r2, #1
 810264e:	601a      	str	r2, [r3, #0]
 8102650:	e007      	b.n	8102662 <HAL_DMA_Init+0x196>
 8102652:	687b      	ldr	r3, [r7, #4]
 8102654:	681b      	ldr	r3, [r3, #0]
 8102656:	681a      	ldr	r2, [r3, #0]
 8102658:	687b      	ldr	r3, [r7, #4]
 810265a:	681b      	ldr	r3, [r3, #0]
 810265c:	f022 0201 	bic.w	r2, r2, #1
 8102660:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8102662:	e02f      	b.n	81026c4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8102664:	f7ff fe18 	bl	8102298 <HAL_GetTick>
 8102668:	4602      	mov	r2, r0
 810266a:	693b      	ldr	r3, [r7, #16]
 810266c:	1ad3      	subs	r3, r2, r3
 810266e:	2b05      	cmp	r3, #5
 8102670:	d928      	bls.n	81026c4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8102672:	687b      	ldr	r3, [r7, #4]
 8102674:	2220      	movs	r2, #32
 8102676:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8102678:	687b      	ldr	r3, [r7, #4]
 810267a:	2203      	movs	r2, #3
 810267c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8102680:	2301      	movs	r3, #1
 8102682:	e244      	b.n	8102b0e <HAL_DMA_Init+0x642>
 8102684:	40020010 	.word	0x40020010
 8102688:	40020028 	.word	0x40020028
 810268c:	40020040 	.word	0x40020040
 8102690:	40020058 	.word	0x40020058
 8102694:	40020070 	.word	0x40020070
 8102698:	40020088 	.word	0x40020088
 810269c:	400200a0 	.word	0x400200a0
 81026a0:	400200b8 	.word	0x400200b8
 81026a4:	40020410 	.word	0x40020410
 81026a8:	40020428 	.word	0x40020428
 81026ac:	40020440 	.word	0x40020440
 81026b0:	40020458 	.word	0x40020458
 81026b4:	40020470 	.word	0x40020470
 81026b8:	40020488 	.word	0x40020488
 81026bc:	400204a0 	.word	0x400204a0
 81026c0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81026c4:	687b      	ldr	r3, [r7, #4]
 81026c6:	681b      	ldr	r3, [r3, #0]
 81026c8:	681b      	ldr	r3, [r3, #0]
 81026ca:	f003 0301 	and.w	r3, r3, #1
 81026ce:	2b00      	cmp	r3, #0
 81026d0:	d1c8      	bne.n	8102664 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 81026d2:	687b      	ldr	r3, [r7, #4]
 81026d4:	681b      	ldr	r3, [r3, #0]
 81026d6:	681b      	ldr	r3, [r3, #0]
 81026d8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 81026da:	697a      	ldr	r2, [r7, #20]
 81026dc:	4b84      	ldr	r3, [pc, #528]	; (81028f0 <HAL_DMA_Init+0x424>)
 81026de:	4013      	ands	r3, r2
 81026e0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 81026e2:	687b      	ldr	r3, [r7, #4]
 81026e4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81026e6:	687b      	ldr	r3, [r7, #4]
 81026e8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 81026ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81026ec:	687b      	ldr	r3, [r7, #4]
 81026ee:	691b      	ldr	r3, [r3, #16]
 81026f0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 81026f2:	687b      	ldr	r3, [r7, #4]
 81026f4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81026f6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 81026f8:	687b      	ldr	r3, [r7, #4]
 81026fa:	699b      	ldr	r3, [r3, #24]
 81026fc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 81026fe:	687b      	ldr	r3, [r7, #4]
 8102700:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8102702:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8102704:	687b      	ldr	r3, [r7, #4]
 8102706:	6a1b      	ldr	r3, [r3, #32]
 8102708:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 810270a:	697a      	ldr	r2, [r7, #20]
 810270c:	4313      	orrs	r3, r2
 810270e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8102710:	687b      	ldr	r3, [r7, #4]
 8102712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102714:	2b04      	cmp	r3, #4
 8102716:	d107      	bne.n	8102728 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8102718:	687b      	ldr	r3, [r7, #4]
 810271a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810271c:	687b      	ldr	r3, [r7, #4]
 810271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102720:	4313      	orrs	r3, r2
 8102722:	697a      	ldr	r2, [r7, #20]
 8102724:	4313      	orrs	r3, r2
 8102726:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8102728:	4b72      	ldr	r3, [pc, #456]	; (81028f4 <HAL_DMA_Init+0x428>)
 810272a:	681b      	ldr	r3, [r3, #0]
 810272c:	0c1b      	lsrs	r3, r3, #16
 810272e:	041b      	lsls	r3, r3, #16
 8102730:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102734:	d328      	bcc.n	8102788 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8102736:	687b      	ldr	r3, [r7, #4]
 8102738:	685b      	ldr	r3, [r3, #4]
 810273a:	2b28      	cmp	r3, #40	; 0x28
 810273c:	d903      	bls.n	8102746 <HAL_DMA_Init+0x27a>
 810273e:	687b      	ldr	r3, [r7, #4]
 8102740:	685b      	ldr	r3, [r3, #4]
 8102742:	2b2e      	cmp	r3, #46	; 0x2e
 8102744:	d917      	bls.n	8102776 <HAL_DMA_Init+0x2aa>
 8102746:	687b      	ldr	r3, [r7, #4]
 8102748:	685b      	ldr	r3, [r3, #4]
 810274a:	2b3e      	cmp	r3, #62	; 0x3e
 810274c:	d903      	bls.n	8102756 <HAL_DMA_Init+0x28a>
 810274e:	687b      	ldr	r3, [r7, #4]
 8102750:	685b      	ldr	r3, [r3, #4]
 8102752:	2b42      	cmp	r3, #66	; 0x42
 8102754:	d90f      	bls.n	8102776 <HAL_DMA_Init+0x2aa>
 8102756:	687b      	ldr	r3, [r7, #4]
 8102758:	685b      	ldr	r3, [r3, #4]
 810275a:	2b46      	cmp	r3, #70	; 0x46
 810275c:	d903      	bls.n	8102766 <HAL_DMA_Init+0x29a>
 810275e:	687b      	ldr	r3, [r7, #4]
 8102760:	685b      	ldr	r3, [r3, #4]
 8102762:	2b48      	cmp	r3, #72	; 0x48
 8102764:	d907      	bls.n	8102776 <HAL_DMA_Init+0x2aa>
 8102766:	687b      	ldr	r3, [r7, #4]
 8102768:	685b      	ldr	r3, [r3, #4]
 810276a:	2b4e      	cmp	r3, #78	; 0x4e
 810276c:	d905      	bls.n	810277a <HAL_DMA_Init+0x2ae>
 810276e:	687b      	ldr	r3, [r7, #4]
 8102770:	685b      	ldr	r3, [r3, #4]
 8102772:	2b52      	cmp	r3, #82	; 0x52
 8102774:	d801      	bhi.n	810277a <HAL_DMA_Init+0x2ae>
 8102776:	2301      	movs	r3, #1
 8102778:	e000      	b.n	810277c <HAL_DMA_Init+0x2b0>
 810277a:	2300      	movs	r3, #0
 810277c:	2b00      	cmp	r3, #0
 810277e:	d003      	beq.n	8102788 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8102780:	697b      	ldr	r3, [r7, #20]
 8102782:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8102786:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8102788:	687b      	ldr	r3, [r7, #4]
 810278a:	681b      	ldr	r3, [r3, #0]
 810278c:	697a      	ldr	r2, [r7, #20]
 810278e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8102790:	687b      	ldr	r3, [r7, #4]
 8102792:	681b      	ldr	r3, [r3, #0]
 8102794:	695b      	ldr	r3, [r3, #20]
 8102796:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8102798:	697b      	ldr	r3, [r7, #20]
 810279a:	f023 0307 	bic.w	r3, r3, #7
 810279e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 81027a0:	687b      	ldr	r3, [r7, #4]
 81027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81027a4:	697a      	ldr	r2, [r7, #20]
 81027a6:	4313      	orrs	r3, r2
 81027a8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 81027aa:	687b      	ldr	r3, [r7, #4]
 81027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81027ae:	2b04      	cmp	r3, #4
 81027b0:	d117      	bne.n	81027e2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 81027b2:	687b      	ldr	r3, [r7, #4]
 81027b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81027b6:	697a      	ldr	r2, [r7, #20]
 81027b8:	4313      	orrs	r3, r2
 81027ba:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 81027bc:	687b      	ldr	r3, [r7, #4]
 81027be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81027c0:	2b00      	cmp	r3, #0
 81027c2:	d00e      	beq.n	81027e2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 81027c4:	6878      	ldr	r0, [r7, #4]
 81027c6:	f002 f811 	bl	81047ec <DMA_CheckFifoParam>
 81027ca:	4603      	mov	r3, r0
 81027cc:	2b00      	cmp	r3, #0
 81027ce:	d008      	beq.n	81027e2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 81027d0:	687b      	ldr	r3, [r7, #4]
 81027d2:	2240      	movs	r2, #64	; 0x40
 81027d4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81027d6:	687b      	ldr	r3, [r7, #4]
 81027d8:	2201      	movs	r2, #1
 81027da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 81027de:	2301      	movs	r3, #1
 81027e0:	e195      	b.n	8102b0e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 81027e2:	687b      	ldr	r3, [r7, #4]
 81027e4:	681b      	ldr	r3, [r3, #0]
 81027e6:	697a      	ldr	r2, [r7, #20]
 81027e8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 81027ea:	6878      	ldr	r0, [r7, #4]
 81027ec:	f001 ff4c 	bl	8104688 <DMA_CalcBaseAndBitshift>
 81027f0:	4603      	mov	r3, r0
 81027f2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81027f4:	687b      	ldr	r3, [r7, #4]
 81027f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81027f8:	f003 031f 	and.w	r3, r3, #31
 81027fc:	223f      	movs	r2, #63	; 0x3f
 81027fe:	409a      	lsls	r2, r3
 8102800:	68bb      	ldr	r3, [r7, #8]
 8102802:	609a      	str	r2, [r3, #8]
 8102804:	e0cb      	b.n	810299e <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8102806:	687b      	ldr	r3, [r7, #4]
 8102808:	681b      	ldr	r3, [r3, #0]
 810280a:	4a3b      	ldr	r2, [pc, #236]	; (81028f8 <HAL_DMA_Init+0x42c>)
 810280c:	4293      	cmp	r3, r2
 810280e:	d022      	beq.n	8102856 <HAL_DMA_Init+0x38a>
 8102810:	687b      	ldr	r3, [r7, #4]
 8102812:	681b      	ldr	r3, [r3, #0]
 8102814:	4a39      	ldr	r2, [pc, #228]	; (81028fc <HAL_DMA_Init+0x430>)
 8102816:	4293      	cmp	r3, r2
 8102818:	d01d      	beq.n	8102856 <HAL_DMA_Init+0x38a>
 810281a:	687b      	ldr	r3, [r7, #4]
 810281c:	681b      	ldr	r3, [r3, #0]
 810281e:	4a38      	ldr	r2, [pc, #224]	; (8102900 <HAL_DMA_Init+0x434>)
 8102820:	4293      	cmp	r3, r2
 8102822:	d018      	beq.n	8102856 <HAL_DMA_Init+0x38a>
 8102824:	687b      	ldr	r3, [r7, #4]
 8102826:	681b      	ldr	r3, [r3, #0]
 8102828:	4a36      	ldr	r2, [pc, #216]	; (8102904 <HAL_DMA_Init+0x438>)
 810282a:	4293      	cmp	r3, r2
 810282c:	d013      	beq.n	8102856 <HAL_DMA_Init+0x38a>
 810282e:	687b      	ldr	r3, [r7, #4]
 8102830:	681b      	ldr	r3, [r3, #0]
 8102832:	4a35      	ldr	r2, [pc, #212]	; (8102908 <HAL_DMA_Init+0x43c>)
 8102834:	4293      	cmp	r3, r2
 8102836:	d00e      	beq.n	8102856 <HAL_DMA_Init+0x38a>
 8102838:	687b      	ldr	r3, [r7, #4]
 810283a:	681b      	ldr	r3, [r3, #0]
 810283c:	4a33      	ldr	r2, [pc, #204]	; (810290c <HAL_DMA_Init+0x440>)
 810283e:	4293      	cmp	r3, r2
 8102840:	d009      	beq.n	8102856 <HAL_DMA_Init+0x38a>
 8102842:	687b      	ldr	r3, [r7, #4]
 8102844:	681b      	ldr	r3, [r3, #0]
 8102846:	4a32      	ldr	r2, [pc, #200]	; (8102910 <HAL_DMA_Init+0x444>)
 8102848:	4293      	cmp	r3, r2
 810284a:	d004      	beq.n	8102856 <HAL_DMA_Init+0x38a>
 810284c:	687b      	ldr	r3, [r7, #4]
 810284e:	681b      	ldr	r3, [r3, #0]
 8102850:	4a30      	ldr	r2, [pc, #192]	; (8102914 <HAL_DMA_Init+0x448>)
 8102852:	4293      	cmp	r3, r2
 8102854:	d101      	bne.n	810285a <HAL_DMA_Init+0x38e>
 8102856:	2301      	movs	r3, #1
 8102858:	e000      	b.n	810285c <HAL_DMA_Init+0x390>
 810285a:	2300      	movs	r3, #0
 810285c:	2b00      	cmp	r3, #0
 810285e:	f000 8095 	beq.w	810298c <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8102862:	687b      	ldr	r3, [r7, #4]
 8102864:	681b      	ldr	r3, [r3, #0]
 8102866:	4a24      	ldr	r2, [pc, #144]	; (81028f8 <HAL_DMA_Init+0x42c>)
 8102868:	4293      	cmp	r3, r2
 810286a:	d021      	beq.n	81028b0 <HAL_DMA_Init+0x3e4>
 810286c:	687b      	ldr	r3, [r7, #4]
 810286e:	681b      	ldr	r3, [r3, #0]
 8102870:	4a22      	ldr	r2, [pc, #136]	; (81028fc <HAL_DMA_Init+0x430>)
 8102872:	4293      	cmp	r3, r2
 8102874:	d01c      	beq.n	81028b0 <HAL_DMA_Init+0x3e4>
 8102876:	687b      	ldr	r3, [r7, #4]
 8102878:	681b      	ldr	r3, [r3, #0]
 810287a:	4a21      	ldr	r2, [pc, #132]	; (8102900 <HAL_DMA_Init+0x434>)
 810287c:	4293      	cmp	r3, r2
 810287e:	d017      	beq.n	81028b0 <HAL_DMA_Init+0x3e4>
 8102880:	687b      	ldr	r3, [r7, #4]
 8102882:	681b      	ldr	r3, [r3, #0]
 8102884:	4a1f      	ldr	r2, [pc, #124]	; (8102904 <HAL_DMA_Init+0x438>)
 8102886:	4293      	cmp	r3, r2
 8102888:	d012      	beq.n	81028b0 <HAL_DMA_Init+0x3e4>
 810288a:	687b      	ldr	r3, [r7, #4]
 810288c:	681b      	ldr	r3, [r3, #0]
 810288e:	4a1e      	ldr	r2, [pc, #120]	; (8102908 <HAL_DMA_Init+0x43c>)
 8102890:	4293      	cmp	r3, r2
 8102892:	d00d      	beq.n	81028b0 <HAL_DMA_Init+0x3e4>
 8102894:	687b      	ldr	r3, [r7, #4]
 8102896:	681b      	ldr	r3, [r3, #0]
 8102898:	4a1c      	ldr	r2, [pc, #112]	; (810290c <HAL_DMA_Init+0x440>)
 810289a:	4293      	cmp	r3, r2
 810289c:	d008      	beq.n	81028b0 <HAL_DMA_Init+0x3e4>
 810289e:	687b      	ldr	r3, [r7, #4]
 81028a0:	681b      	ldr	r3, [r3, #0]
 81028a2:	4a1b      	ldr	r2, [pc, #108]	; (8102910 <HAL_DMA_Init+0x444>)
 81028a4:	4293      	cmp	r3, r2
 81028a6:	d003      	beq.n	81028b0 <HAL_DMA_Init+0x3e4>
 81028a8:	687b      	ldr	r3, [r7, #4]
 81028aa:	681b      	ldr	r3, [r3, #0]
 81028ac:	4a19      	ldr	r2, [pc, #100]	; (8102914 <HAL_DMA_Init+0x448>)
 81028ae:	4293      	cmp	r3, r2
 81028b0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 81028b2:	687b      	ldr	r3, [r7, #4]
 81028b4:	2200      	movs	r2, #0
 81028b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 81028ba:	687b      	ldr	r3, [r7, #4]
 81028bc:	2202      	movs	r2, #2
 81028be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 81028c2:	687b      	ldr	r3, [r7, #4]
 81028c4:	681b      	ldr	r3, [r3, #0]
 81028c6:	681b      	ldr	r3, [r3, #0]
 81028c8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 81028ca:	697b      	ldr	r3, [r7, #20]
 81028cc:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 81028d0:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 81028d4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81028d6:	687b      	ldr	r3, [r7, #4]
 81028d8:	689b      	ldr	r3, [r3, #8]
 81028da:	2b40      	cmp	r3, #64	; 0x40
 81028dc:	d01c      	beq.n	8102918 <HAL_DMA_Init+0x44c>
 81028de:	687b      	ldr	r3, [r7, #4]
 81028e0:	689b      	ldr	r3, [r3, #8]
 81028e2:	2b80      	cmp	r3, #128	; 0x80
 81028e4:	d102      	bne.n	81028ec <HAL_DMA_Init+0x420>
 81028e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 81028ea:	e016      	b.n	810291a <HAL_DMA_Init+0x44e>
 81028ec:	2300      	movs	r3, #0
 81028ee:	e014      	b.n	810291a <HAL_DMA_Init+0x44e>
 81028f0:	fe10803f 	.word	0xfe10803f
 81028f4:	5c001000 	.word	0x5c001000
 81028f8:	58025408 	.word	0x58025408
 81028fc:	5802541c 	.word	0x5802541c
 8102900:	58025430 	.word	0x58025430
 8102904:	58025444 	.word	0x58025444
 8102908:	58025458 	.word	0x58025458
 810290c:	5802546c 	.word	0x5802546c
 8102910:	58025480 	.word	0x58025480
 8102914:	58025494 	.word	0x58025494
 8102918:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 810291a:	687a      	ldr	r2, [r7, #4]
 810291c:	68d2      	ldr	r2, [r2, #12]
 810291e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8102920:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8102922:	687b      	ldr	r3, [r7, #4]
 8102924:	691b      	ldr	r3, [r3, #16]
 8102926:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8102928:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 810292a:	687b      	ldr	r3, [r7, #4]
 810292c:	695b      	ldr	r3, [r3, #20]
 810292e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8102930:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8102932:	687b      	ldr	r3, [r7, #4]
 8102934:	699b      	ldr	r3, [r3, #24]
 8102936:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8102938:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 810293a:	687b      	ldr	r3, [r7, #4]
 810293c:	69db      	ldr	r3, [r3, #28]
 810293e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8102940:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8102942:	687b      	ldr	r3, [r7, #4]
 8102944:	6a1b      	ldr	r3, [r3, #32]
 8102946:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8102948:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 810294a:	697a      	ldr	r2, [r7, #20]
 810294c:	4313      	orrs	r3, r2
 810294e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8102950:	687b      	ldr	r3, [r7, #4]
 8102952:	681b      	ldr	r3, [r3, #0]
 8102954:	697a      	ldr	r2, [r7, #20]
 8102956:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8102958:	687b      	ldr	r3, [r7, #4]
 810295a:	681b      	ldr	r3, [r3, #0]
 810295c:	461a      	mov	r2, r3
 810295e:	4b6e      	ldr	r3, [pc, #440]	; (8102b18 <HAL_DMA_Init+0x64c>)
 8102960:	4413      	add	r3, r2
 8102962:	4a6e      	ldr	r2, [pc, #440]	; (8102b1c <HAL_DMA_Init+0x650>)
 8102964:	fba2 2303 	umull	r2, r3, r2, r3
 8102968:	091b      	lsrs	r3, r3, #4
 810296a:	009a      	lsls	r2, r3, #2
 810296c:	687b      	ldr	r3, [r7, #4]
 810296e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8102970:	6878      	ldr	r0, [r7, #4]
 8102972:	f001 fe89 	bl	8104688 <DMA_CalcBaseAndBitshift>
 8102976:	4603      	mov	r3, r0
 8102978:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 810297a:	687b      	ldr	r3, [r7, #4]
 810297c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810297e:	f003 031f 	and.w	r3, r3, #31
 8102982:	2201      	movs	r2, #1
 8102984:	409a      	lsls	r2, r3
 8102986:	68fb      	ldr	r3, [r7, #12]
 8102988:	605a      	str	r2, [r3, #4]
 810298a:	e008      	b.n	810299e <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 810298c:	687b      	ldr	r3, [r7, #4]
 810298e:	2240      	movs	r2, #64	; 0x40
 8102990:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8102992:	687b      	ldr	r3, [r7, #4]
 8102994:	2203      	movs	r2, #3
 8102996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 810299a:	2301      	movs	r3, #1
 810299c:	e0b7      	b.n	8102b0e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810299e:	687b      	ldr	r3, [r7, #4]
 81029a0:	681b      	ldr	r3, [r3, #0]
 81029a2:	4a5f      	ldr	r2, [pc, #380]	; (8102b20 <HAL_DMA_Init+0x654>)
 81029a4:	4293      	cmp	r3, r2
 81029a6:	d072      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 81029a8:	687b      	ldr	r3, [r7, #4]
 81029aa:	681b      	ldr	r3, [r3, #0]
 81029ac:	4a5d      	ldr	r2, [pc, #372]	; (8102b24 <HAL_DMA_Init+0x658>)
 81029ae:	4293      	cmp	r3, r2
 81029b0:	d06d      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 81029b2:	687b      	ldr	r3, [r7, #4]
 81029b4:	681b      	ldr	r3, [r3, #0]
 81029b6:	4a5c      	ldr	r2, [pc, #368]	; (8102b28 <HAL_DMA_Init+0x65c>)
 81029b8:	4293      	cmp	r3, r2
 81029ba:	d068      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 81029bc:	687b      	ldr	r3, [r7, #4]
 81029be:	681b      	ldr	r3, [r3, #0]
 81029c0:	4a5a      	ldr	r2, [pc, #360]	; (8102b2c <HAL_DMA_Init+0x660>)
 81029c2:	4293      	cmp	r3, r2
 81029c4:	d063      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 81029c6:	687b      	ldr	r3, [r7, #4]
 81029c8:	681b      	ldr	r3, [r3, #0]
 81029ca:	4a59      	ldr	r2, [pc, #356]	; (8102b30 <HAL_DMA_Init+0x664>)
 81029cc:	4293      	cmp	r3, r2
 81029ce:	d05e      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 81029d0:	687b      	ldr	r3, [r7, #4]
 81029d2:	681b      	ldr	r3, [r3, #0]
 81029d4:	4a57      	ldr	r2, [pc, #348]	; (8102b34 <HAL_DMA_Init+0x668>)
 81029d6:	4293      	cmp	r3, r2
 81029d8:	d059      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 81029da:	687b      	ldr	r3, [r7, #4]
 81029dc:	681b      	ldr	r3, [r3, #0]
 81029de:	4a56      	ldr	r2, [pc, #344]	; (8102b38 <HAL_DMA_Init+0x66c>)
 81029e0:	4293      	cmp	r3, r2
 81029e2:	d054      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 81029e4:	687b      	ldr	r3, [r7, #4]
 81029e6:	681b      	ldr	r3, [r3, #0]
 81029e8:	4a54      	ldr	r2, [pc, #336]	; (8102b3c <HAL_DMA_Init+0x670>)
 81029ea:	4293      	cmp	r3, r2
 81029ec:	d04f      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 81029ee:	687b      	ldr	r3, [r7, #4]
 81029f0:	681b      	ldr	r3, [r3, #0]
 81029f2:	4a53      	ldr	r2, [pc, #332]	; (8102b40 <HAL_DMA_Init+0x674>)
 81029f4:	4293      	cmp	r3, r2
 81029f6:	d04a      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 81029f8:	687b      	ldr	r3, [r7, #4]
 81029fa:	681b      	ldr	r3, [r3, #0]
 81029fc:	4a51      	ldr	r2, [pc, #324]	; (8102b44 <HAL_DMA_Init+0x678>)
 81029fe:	4293      	cmp	r3, r2
 8102a00:	d045      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a02:	687b      	ldr	r3, [r7, #4]
 8102a04:	681b      	ldr	r3, [r3, #0]
 8102a06:	4a50      	ldr	r2, [pc, #320]	; (8102b48 <HAL_DMA_Init+0x67c>)
 8102a08:	4293      	cmp	r3, r2
 8102a0a:	d040      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a0c:	687b      	ldr	r3, [r7, #4]
 8102a0e:	681b      	ldr	r3, [r3, #0]
 8102a10:	4a4e      	ldr	r2, [pc, #312]	; (8102b4c <HAL_DMA_Init+0x680>)
 8102a12:	4293      	cmp	r3, r2
 8102a14:	d03b      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a16:	687b      	ldr	r3, [r7, #4]
 8102a18:	681b      	ldr	r3, [r3, #0]
 8102a1a:	4a4d      	ldr	r2, [pc, #308]	; (8102b50 <HAL_DMA_Init+0x684>)
 8102a1c:	4293      	cmp	r3, r2
 8102a1e:	d036      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a20:	687b      	ldr	r3, [r7, #4]
 8102a22:	681b      	ldr	r3, [r3, #0]
 8102a24:	4a4b      	ldr	r2, [pc, #300]	; (8102b54 <HAL_DMA_Init+0x688>)
 8102a26:	4293      	cmp	r3, r2
 8102a28:	d031      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a2a:	687b      	ldr	r3, [r7, #4]
 8102a2c:	681b      	ldr	r3, [r3, #0]
 8102a2e:	4a4a      	ldr	r2, [pc, #296]	; (8102b58 <HAL_DMA_Init+0x68c>)
 8102a30:	4293      	cmp	r3, r2
 8102a32:	d02c      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a34:	687b      	ldr	r3, [r7, #4]
 8102a36:	681b      	ldr	r3, [r3, #0]
 8102a38:	4a48      	ldr	r2, [pc, #288]	; (8102b5c <HAL_DMA_Init+0x690>)
 8102a3a:	4293      	cmp	r3, r2
 8102a3c:	d027      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a3e:	687b      	ldr	r3, [r7, #4]
 8102a40:	681b      	ldr	r3, [r3, #0]
 8102a42:	4a47      	ldr	r2, [pc, #284]	; (8102b60 <HAL_DMA_Init+0x694>)
 8102a44:	4293      	cmp	r3, r2
 8102a46:	d022      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a48:	687b      	ldr	r3, [r7, #4]
 8102a4a:	681b      	ldr	r3, [r3, #0]
 8102a4c:	4a45      	ldr	r2, [pc, #276]	; (8102b64 <HAL_DMA_Init+0x698>)
 8102a4e:	4293      	cmp	r3, r2
 8102a50:	d01d      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a52:	687b      	ldr	r3, [r7, #4]
 8102a54:	681b      	ldr	r3, [r3, #0]
 8102a56:	4a44      	ldr	r2, [pc, #272]	; (8102b68 <HAL_DMA_Init+0x69c>)
 8102a58:	4293      	cmp	r3, r2
 8102a5a:	d018      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a5c:	687b      	ldr	r3, [r7, #4]
 8102a5e:	681b      	ldr	r3, [r3, #0]
 8102a60:	4a42      	ldr	r2, [pc, #264]	; (8102b6c <HAL_DMA_Init+0x6a0>)
 8102a62:	4293      	cmp	r3, r2
 8102a64:	d013      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a66:	687b      	ldr	r3, [r7, #4]
 8102a68:	681b      	ldr	r3, [r3, #0]
 8102a6a:	4a41      	ldr	r2, [pc, #260]	; (8102b70 <HAL_DMA_Init+0x6a4>)
 8102a6c:	4293      	cmp	r3, r2
 8102a6e:	d00e      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a70:	687b      	ldr	r3, [r7, #4]
 8102a72:	681b      	ldr	r3, [r3, #0]
 8102a74:	4a3f      	ldr	r2, [pc, #252]	; (8102b74 <HAL_DMA_Init+0x6a8>)
 8102a76:	4293      	cmp	r3, r2
 8102a78:	d009      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a7a:	687b      	ldr	r3, [r7, #4]
 8102a7c:	681b      	ldr	r3, [r3, #0]
 8102a7e:	4a3e      	ldr	r2, [pc, #248]	; (8102b78 <HAL_DMA_Init+0x6ac>)
 8102a80:	4293      	cmp	r3, r2
 8102a82:	d004      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a84:	687b      	ldr	r3, [r7, #4]
 8102a86:	681b      	ldr	r3, [r3, #0]
 8102a88:	4a3c      	ldr	r2, [pc, #240]	; (8102b7c <HAL_DMA_Init+0x6b0>)
 8102a8a:	4293      	cmp	r3, r2
 8102a8c:	d101      	bne.n	8102a92 <HAL_DMA_Init+0x5c6>
 8102a8e:	2301      	movs	r3, #1
 8102a90:	e000      	b.n	8102a94 <HAL_DMA_Init+0x5c8>
 8102a92:	2300      	movs	r3, #0
 8102a94:	2b00      	cmp	r3, #0
 8102a96:	d032      	beq.n	8102afe <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8102a98:	6878      	ldr	r0, [r7, #4]
 8102a9a:	f001 ff23 	bl	81048e4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8102a9e:	687b      	ldr	r3, [r7, #4]
 8102aa0:	689b      	ldr	r3, [r3, #8]
 8102aa2:	2b80      	cmp	r3, #128	; 0x80
 8102aa4:	d102      	bne.n	8102aac <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8102aa6:	687b      	ldr	r3, [r7, #4]
 8102aa8:	2200      	movs	r2, #0
 8102aaa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8102aac:	687b      	ldr	r3, [r7, #4]
 8102aae:	685a      	ldr	r2, [r3, #4]
 8102ab0:	687b      	ldr	r3, [r7, #4]
 8102ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102ab4:	b2d2      	uxtb	r2, r2
 8102ab6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8102ab8:	687b      	ldr	r3, [r7, #4]
 8102aba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102abc:	687a      	ldr	r2, [r7, #4]
 8102abe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8102ac0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8102ac2:	687b      	ldr	r3, [r7, #4]
 8102ac4:	685b      	ldr	r3, [r3, #4]
 8102ac6:	2b00      	cmp	r3, #0
 8102ac8:	d010      	beq.n	8102aec <HAL_DMA_Init+0x620>
 8102aca:	687b      	ldr	r3, [r7, #4]
 8102acc:	685b      	ldr	r3, [r3, #4]
 8102ace:	2b08      	cmp	r3, #8
 8102ad0:	d80c      	bhi.n	8102aec <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8102ad2:	6878      	ldr	r0, [r7, #4]
 8102ad4:	f001 ffa0 	bl	8104a18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8102ad8:	687b      	ldr	r3, [r7, #4]
 8102ada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102adc:	2200      	movs	r2, #0
 8102ade:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8102ae0:	687b      	ldr	r3, [r7, #4]
 8102ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102ae4:	687a      	ldr	r2, [r7, #4]
 8102ae6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8102ae8:	605a      	str	r2, [r3, #4]
 8102aea:	e008      	b.n	8102afe <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8102aec:	687b      	ldr	r3, [r7, #4]
 8102aee:	2200      	movs	r2, #0
 8102af0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8102af2:	687b      	ldr	r3, [r7, #4]
 8102af4:	2200      	movs	r2, #0
 8102af6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8102af8:	687b      	ldr	r3, [r7, #4]
 8102afa:	2200      	movs	r2, #0
 8102afc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8102afe:	687b      	ldr	r3, [r7, #4]
 8102b00:	2200      	movs	r2, #0
 8102b02:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8102b04:	687b      	ldr	r3, [r7, #4]
 8102b06:	2201      	movs	r2, #1
 8102b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8102b0c:	2300      	movs	r3, #0
}
 8102b0e:	4618      	mov	r0, r3
 8102b10:	3718      	adds	r7, #24
 8102b12:	46bd      	mov	sp, r7
 8102b14:	bd80      	pop	{r7, pc}
 8102b16:	bf00      	nop
 8102b18:	a7fdabf8 	.word	0xa7fdabf8
 8102b1c:	cccccccd 	.word	0xcccccccd
 8102b20:	40020010 	.word	0x40020010
 8102b24:	40020028 	.word	0x40020028
 8102b28:	40020040 	.word	0x40020040
 8102b2c:	40020058 	.word	0x40020058
 8102b30:	40020070 	.word	0x40020070
 8102b34:	40020088 	.word	0x40020088
 8102b38:	400200a0 	.word	0x400200a0
 8102b3c:	400200b8 	.word	0x400200b8
 8102b40:	40020410 	.word	0x40020410
 8102b44:	40020428 	.word	0x40020428
 8102b48:	40020440 	.word	0x40020440
 8102b4c:	40020458 	.word	0x40020458
 8102b50:	40020470 	.word	0x40020470
 8102b54:	40020488 	.word	0x40020488
 8102b58:	400204a0 	.word	0x400204a0
 8102b5c:	400204b8 	.word	0x400204b8
 8102b60:	58025408 	.word	0x58025408
 8102b64:	5802541c 	.word	0x5802541c
 8102b68:	58025430 	.word	0x58025430
 8102b6c:	58025444 	.word	0x58025444
 8102b70:	58025458 	.word	0x58025458
 8102b74:	5802546c 	.word	0x5802546c
 8102b78:	58025480 	.word	0x58025480
 8102b7c:	58025494 	.word	0x58025494

08102b80 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8102b80:	b580      	push	{r7, lr}
 8102b82:	b086      	sub	sp, #24
 8102b84:	af00      	add	r7, sp, #0
 8102b86:	60f8      	str	r0, [r7, #12]
 8102b88:	60b9      	str	r1, [r7, #8]
 8102b8a:	607a      	str	r2, [r7, #4]
 8102b8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8102b8e:	2300      	movs	r3, #0
 8102b90:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8102b92:	68fb      	ldr	r3, [r7, #12]
 8102b94:	2b00      	cmp	r3, #0
 8102b96:	d101      	bne.n	8102b9c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8102b98:	2301      	movs	r3, #1
 8102b9a:	e226      	b.n	8102fea <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8102b9c:	68fb      	ldr	r3, [r7, #12]
 8102b9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8102ba2:	2b01      	cmp	r3, #1
 8102ba4:	d101      	bne.n	8102baa <HAL_DMA_Start_IT+0x2a>
 8102ba6:	2302      	movs	r3, #2
 8102ba8:	e21f      	b.n	8102fea <HAL_DMA_Start_IT+0x46a>
 8102baa:	68fb      	ldr	r3, [r7, #12]
 8102bac:	2201      	movs	r2, #1
 8102bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8102bb2:	68fb      	ldr	r3, [r7, #12]
 8102bb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8102bb8:	b2db      	uxtb	r3, r3
 8102bba:	2b01      	cmp	r3, #1
 8102bbc:	f040 820a 	bne.w	8102fd4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8102bc0:	68fb      	ldr	r3, [r7, #12]
 8102bc2:	2202      	movs	r2, #2
 8102bc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8102bc8:	68fb      	ldr	r3, [r7, #12]
 8102bca:	2200      	movs	r2, #0
 8102bcc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8102bce:	68fb      	ldr	r3, [r7, #12]
 8102bd0:	681b      	ldr	r3, [r3, #0]
 8102bd2:	4a68      	ldr	r2, [pc, #416]	; (8102d74 <HAL_DMA_Start_IT+0x1f4>)
 8102bd4:	4293      	cmp	r3, r2
 8102bd6:	d04a      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102bd8:	68fb      	ldr	r3, [r7, #12]
 8102bda:	681b      	ldr	r3, [r3, #0]
 8102bdc:	4a66      	ldr	r2, [pc, #408]	; (8102d78 <HAL_DMA_Start_IT+0x1f8>)
 8102bde:	4293      	cmp	r3, r2
 8102be0:	d045      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102be2:	68fb      	ldr	r3, [r7, #12]
 8102be4:	681b      	ldr	r3, [r3, #0]
 8102be6:	4a65      	ldr	r2, [pc, #404]	; (8102d7c <HAL_DMA_Start_IT+0x1fc>)
 8102be8:	4293      	cmp	r3, r2
 8102bea:	d040      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102bec:	68fb      	ldr	r3, [r7, #12]
 8102bee:	681b      	ldr	r3, [r3, #0]
 8102bf0:	4a63      	ldr	r2, [pc, #396]	; (8102d80 <HAL_DMA_Start_IT+0x200>)
 8102bf2:	4293      	cmp	r3, r2
 8102bf4:	d03b      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102bf6:	68fb      	ldr	r3, [r7, #12]
 8102bf8:	681b      	ldr	r3, [r3, #0]
 8102bfa:	4a62      	ldr	r2, [pc, #392]	; (8102d84 <HAL_DMA_Start_IT+0x204>)
 8102bfc:	4293      	cmp	r3, r2
 8102bfe:	d036      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102c00:	68fb      	ldr	r3, [r7, #12]
 8102c02:	681b      	ldr	r3, [r3, #0]
 8102c04:	4a60      	ldr	r2, [pc, #384]	; (8102d88 <HAL_DMA_Start_IT+0x208>)
 8102c06:	4293      	cmp	r3, r2
 8102c08:	d031      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102c0a:	68fb      	ldr	r3, [r7, #12]
 8102c0c:	681b      	ldr	r3, [r3, #0]
 8102c0e:	4a5f      	ldr	r2, [pc, #380]	; (8102d8c <HAL_DMA_Start_IT+0x20c>)
 8102c10:	4293      	cmp	r3, r2
 8102c12:	d02c      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102c14:	68fb      	ldr	r3, [r7, #12]
 8102c16:	681b      	ldr	r3, [r3, #0]
 8102c18:	4a5d      	ldr	r2, [pc, #372]	; (8102d90 <HAL_DMA_Start_IT+0x210>)
 8102c1a:	4293      	cmp	r3, r2
 8102c1c:	d027      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102c1e:	68fb      	ldr	r3, [r7, #12]
 8102c20:	681b      	ldr	r3, [r3, #0]
 8102c22:	4a5c      	ldr	r2, [pc, #368]	; (8102d94 <HAL_DMA_Start_IT+0x214>)
 8102c24:	4293      	cmp	r3, r2
 8102c26:	d022      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102c28:	68fb      	ldr	r3, [r7, #12]
 8102c2a:	681b      	ldr	r3, [r3, #0]
 8102c2c:	4a5a      	ldr	r2, [pc, #360]	; (8102d98 <HAL_DMA_Start_IT+0x218>)
 8102c2e:	4293      	cmp	r3, r2
 8102c30:	d01d      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102c32:	68fb      	ldr	r3, [r7, #12]
 8102c34:	681b      	ldr	r3, [r3, #0]
 8102c36:	4a59      	ldr	r2, [pc, #356]	; (8102d9c <HAL_DMA_Start_IT+0x21c>)
 8102c38:	4293      	cmp	r3, r2
 8102c3a:	d018      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102c3c:	68fb      	ldr	r3, [r7, #12]
 8102c3e:	681b      	ldr	r3, [r3, #0]
 8102c40:	4a57      	ldr	r2, [pc, #348]	; (8102da0 <HAL_DMA_Start_IT+0x220>)
 8102c42:	4293      	cmp	r3, r2
 8102c44:	d013      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102c46:	68fb      	ldr	r3, [r7, #12]
 8102c48:	681b      	ldr	r3, [r3, #0]
 8102c4a:	4a56      	ldr	r2, [pc, #344]	; (8102da4 <HAL_DMA_Start_IT+0x224>)
 8102c4c:	4293      	cmp	r3, r2
 8102c4e:	d00e      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102c50:	68fb      	ldr	r3, [r7, #12]
 8102c52:	681b      	ldr	r3, [r3, #0]
 8102c54:	4a54      	ldr	r2, [pc, #336]	; (8102da8 <HAL_DMA_Start_IT+0x228>)
 8102c56:	4293      	cmp	r3, r2
 8102c58:	d009      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102c5a:	68fb      	ldr	r3, [r7, #12]
 8102c5c:	681b      	ldr	r3, [r3, #0]
 8102c5e:	4a53      	ldr	r2, [pc, #332]	; (8102dac <HAL_DMA_Start_IT+0x22c>)
 8102c60:	4293      	cmp	r3, r2
 8102c62:	d004      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102c64:	68fb      	ldr	r3, [r7, #12]
 8102c66:	681b      	ldr	r3, [r3, #0]
 8102c68:	4a51      	ldr	r2, [pc, #324]	; (8102db0 <HAL_DMA_Start_IT+0x230>)
 8102c6a:	4293      	cmp	r3, r2
 8102c6c:	d108      	bne.n	8102c80 <HAL_DMA_Start_IT+0x100>
 8102c6e:	68fb      	ldr	r3, [r7, #12]
 8102c70:	681b      	ldr	r3, [r3, #0]
 8102c72:	681a      	ldr	r2, [r3, #0]
 8102c74:	68fb      	ldr	r3, [r7, #12]
 8102c76:	681b      	ldr	r3, [r3, #0]
 8102c78:	f022 0201 	bic.w	r2, r2, #1
 8102c7c:	601a      	str	r2, [r3, #0]
 8102c7e:	e007      	b.n	8102c90 <HAL_DMA_Start_IT+0x110>
 8102c80:	68fb      	ldr	r3, [r7, #12]
 8102c82:	681b      	ldr	r3, [r3, #0]
 8102c84:	681a      	ldr	r2, [r3, #0]
 8102c86:	68fb      	ldr	r3, [r7, #12]
 8102c88:	681b      	ldr	r3, [r3, #0]
 8102c8a:	f022 0201 	bic.w	r2, r2, #1
 8102c8e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8102c90:	683b      	ldr	r3, [r7, #0]
 8102c92:	687a      	ldr	r2, [r7, #4]
 8102c94:	68b9      	ldr	r1, [r7, #8]
 8102c96:	68f8      	ldr	r0, [r7, #12]
 8102c98:	f001 fb4a 	bl	8104330 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102c9c:	68fb      	ldr	r3, [r7, #12]
 8102c9e:	681b      	ldr	r3, [r3, #0]
 8102ca0:	4a34      	ldr	r2, [pc, #208]	; (8102d74 <HAL_DMA_Start_IT+0x1f4>)
 8102ca2:	4293      	cmp	r3, r2
 8102ca4:	d04a      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102ca6:	68fb      	ldr	r3, [r7, #12]
 8102ca8:	681b      	ldr	r3, [r3, #0]
 8102caa:	4a33      	ldr	r2, [pc, #204]	; (8102d78 <HAL_DMA_Start_IT+0x1f8>)
 8102cac:	4293      	cmp	r3, r2
 8102cae:	d045      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102cb0:	68fb      	ldr	r3, [r7, #12]
 8102cb2:	681b      	ldr	r3, [r3, #0]
 8102cb4:	4a31      	ldr	r2, [pc, #196]	; (8102d7c <HAL_DMA_Start_IT+0x1fc>)
 8102cb6:	4293      	cmp	r3, r2
 8102cb8:	d040      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102cba:	68fb      	ldr	r3, [r7, #12]
 8102cbc:	681b      	ldr	r3, [r3, #0]
 8102cbe:	4a30      	ldr	r2, [pc, #192]	; (8102d80 <HAL_DMA_Start_IT+0x200>)
 8102cc0:	4293      	cmp	r3, r2
 8102cc2:	d03b      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102cc4:	68fb      	ldr	r3, [r7, #12]
 8102cc6:	681b      	ldr	r3, [r3, #0]
 8102cc8:	4a2e      	ldr	r2, [pc, #184]	; (8102d84 <HAL_DMA_Start_IT+0x204>)
 8102cca:	4293      	cmp	r3, r2
 8102ccc:	d036      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102cce:	68fb      	ldr	r3, [r7, #12]
 8102cd0:	681b      	ldr	r3, [r3, #0]
 8102cd2:	4a2d      	ldr	r2, [pc, #180]	; (8102d88 <HAL_DMA_Start_IT+0x208>)
 8102cd4:	4293      	cmp	r3, r2
 8102cd6:	d031      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102cd8:	68fb      	ldr	r3, [r7, #12]
 8102cda:	681b      	ldr	r3, [r3, #0]
 8102cdc:	4a2b      	ldr	r2, [pc, #172]	; (8102d8c <HAL_DMA_Start_IT+0x20c>)
 8102cde:	4293      	cmp	r3, r2
 8102ce0:	d02c      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102ce2:	68fb      	ldr	r3, [r7, #12]
 8102ce4:	681b      	ldr	r3, [r3, #0]
 8102ce6:	4a2a      	ldr	r2, [pc, #168]	; (8102d90 <HAL_DMA_Start_IT+0x210>)
 8102ce8:	4293      	cmp	r3, r2
 8102cea:	d027      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102cec:	68fb      	ldr	r3, [r7, #12]
 8102cee:	681b      	ldr	r3, [r3, #0]
 8102cf0:	4a28      	ldr	r2, [pc, #160]	; (8102d94 <HAL_DMA_Start_IT+0x214>)
 8102cf2:	4293      	cmp	r3, r2
 8102cf4:	d022      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102cf6:	68fb      	ldr	r3, [r7, #12]
 8102cf8:	681b      	ldr	r3, [r3, #0]
 8102cfa:	4a27      	ldr	r2, [pc, #156]	; (8102d98 <HAL_DMA_Start_IT+0x218>)
 8102cfc:	4293      	cmp	r3, r2
 8102cfe:	d01d      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102d00:	68fb      	ldr	r3, [r7, #12]
 8102d02:	681b      	ldr	r3, [r3, #0]
 8102d04:	4a25      	ldr	r2, [pc, #148]	; (8102d9c <HAL_DMA_Start_IT+0x21c>)
 8102d06:	4293      	cmp	r3, r2
 8102d08:	d018      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102d0a:	68fb      	ldr	r3, [r7, #12]
 8102d0c:	681b      	ldr	r3, [r3, #0]
 8102d0e:	4a24      	ldr	r2, [pc, #144]	; (8102da0 <HAL_DMA_Start_IT+0x220>)
 8102d10:	4293      	cmp	r3, r2
 8102d12:	d013      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102d14:	68fb      	ldr	r3, [r7, #12]
 8102d16:	681b      	ldr	r3, [r3, #0]
 8102d18:	4a22      	ldr	r2, [pc, #136]	; (8102da4 <HAL_DMA_Start_IT+0x224>)
 8102d1a:	4293      	cmp	r3, r2
 8102d1c:	d00e      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102d1e:	68fb      	ldr	r3, [r7, #12]
 8102d20:	681b      	ldr	r3, [r3, #0]
 8102d22:	4a21      	ldr	r2, [pc, #132]	; (8102da8 <HAL_DMA_Start_IT+0x228>)
 8102d24:	4293      	cmp	r3, r2
 8102d26:	d009      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102d28:	68fb      	ldr	r3, [r7, #12]
 8102d2a:	681b      	ldr	r3, [r3, #0]
 8102d2c:	4a1f      	ldr	r2, [pc, #124]	; (8102dac <HAL_DMA_Start_IT+0x22c>)
 8102d2e:	4293      	cmp	r3, r2
 8102d30:	d004      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102d32:	68fb      	ldr	r3, [r7, #12]
 8102d34:	681b      	ldr	r3, [r3, #0]
 8102d36:	4a1e      	ldr	r2, [pc, #120]	; (8102db0 <HAL_DMA_Start_IT+0x230>)
 8102d38:	4293      	cmp	r3, r2
 8102d3a:	d101      	bne.n	8102d40 <HAL_DMA_Start_IT+0x1c0>
 8102d3c:	2301      	movs	r3, #1
 8102d3e:	e000      	b.n	8102d42 <HAL_DMA_Start_IT+0x1c2>
 8102d40:	2300      	movs	r3, #0
 8102d42:	2b00      	cmp	r3, #0
 8102d44:	d036      	beq.n	8102db4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8102d46:	68fb      	ldr	r3, [r7, #12]
 8102d48:	681b      	ldr	r3, [r3, #0]
 8102d4a:	681b      	ldr	r3, [r3, #0]
 8102d4c:	f023 021e 	bic.w	r2, r3, #30
 8102d50:	68fb      	ldr	r3, [r7, #12]
 8102d52:	681b      	ldr	r3, [r3, #0]
 8102d54:	f042 0216 	orr.w	r2, r2, #22
 8102d58:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8102d5a:	68fb      	ldr	r3, [r7, #12]
 8102d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102d5e:	2b00      	cmp	r3, #0
 8102d60:	d03e      	beq.n	8102de0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8102d62:	68fb      	ldr	r3, [r7, #12]
 8102d64:	681b      	ldr	r3, [r3, #0]
 8102d66:	681a      	ldr	r2, [r3, #0]
 8102d68:	68fb      	ldr	r3, [r7, #12]
 8102d6a:	681b      	ldr	r3, [r3, #0]
 8102d6c:	f042 0208 	orr.w	r2, r2, #8
 8102d70:	601a      	str	r2, [r3, #0]
 8102d72:	e035      	b.n	8102de0 <HAL_DMA_Start_IT+0x260>
 8102d74:	40020010 	.word	0x40020010
 8102d78:	40020028 	.word	0x40020028
 8102d7c:	40020040 	.word	0x40020040
 8102d80:	40020058 	.word	0x40020058
 8102d84:	40020070 	.word	0x40020070
 8102d88:	40020088 	.word	0x40020088
 8102d8c:	400200a0 	.word	0x400200a0
 8102d90:	400200b8 	.word	0x400200b8
 8102d94:	40020410 	.word	0x40020410
 8102d98:	40020428 	.word	0x40020428
 8102d9c:	40020440 	.word	0x40020440
 8102da0:	40020458 	.word	0x40020458
 8102da4:	40020470 	.word	0x40020470
 8102da8:	40020488 	.word	0x40020488
 8102dac:	400204a0 	.word	0x400204a0
 8102db0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8102db4:	68fb      	ldr	r3, [r7, #12]
 8102db6:	681b      	ldr	r3, [r3, #0]
 8102db8:	681b      	ldr	r3, [r3, #0]
 8102dba:	f023 020e 	bic.w	r2, r3, #14
 8102dbe:	68fb      	ldr	r3, [r7, #12]
 8102dc0:	681b      	ldr	r3, [r3, #0]
 8102dc2:	f042 020a 	orr.w	r2, r2, #10
 8102dc6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8102dc8:	68fb      	ldr	r3, [r7, #12]
 8102dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102dcc:	2b00      	cmp	r3, #0
 8102dce:	d007      	beq.n	8102de0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8102dd0:	68fb      	ldr	r3, [r7, #12]
 8102dd2:	681b      	ldr	r3, [r3, #0]
 8102dd4:	681a      	ldr	r2, [r3, #0]
 8102dd6:	68fb      	ldr	r3, [r7, #12]
 8102dd8:	681b      	ldr	r3, [r3, #0]
 8102dda:	f042 0204 	orr.w	r2, r2, #4
 8102dde:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102de0:	68fb      	ldr	r3, [r7, #12]
 8102de2:	681b      	ldr	r3, [r3, #0]
 8102de4:	4a83      	ldr	r2, [pc, #524]	; (8102ff4 <HAL_DMA_Start_IT+0x474>)
 8102de6:	4293      	cmp	r3, r2
 8102de8:	d072      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102dea:	68fb      	ldr	r3, [r7, #12]
 8102dec:	681b      	ldr	r3, [r3, #0]
 8102dee:	4a82      	ldr	r2, [pc, #520]	; (8102ff8 <HAL_DMA_Start_IT+0x478>)
 8102df0:	4293      	cmp	r3, r2
 8102df2:	d06d      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102df4:	68fb      	ldr	r3, [r7, #12]
 8102df6:	681b      	ldr	r3, [r3, #0]
 8102df8:	4a80      	ldr	r2, [pc, #512]	; (8102ffc <HAL_DMA_Start_IT+0x47c>)
 8102dfa:	4293      	cmp	r3, r2
 8102dfc:	d068      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102dfe:	68fb      	ldr	r3, [r7, #12]
 8102e00:	681b      	ldr	r3, [r3, #0]
 8102e02:	4a7f      	ldr	r2, [pc, #508]	; (8103000 <HAL_DMA_Start_IT+0x480>)
 8102e04:	4293      	cmp	r3, r2
 8102e06:	d063      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e08:	68fb      	ldr	r3, [r7, #12]
 8102e0a:	681b      	ldr	r3, [r3, #0]
 8102e0c:	4a7d      	ldr	r2, [pc, #500]	; (8103004 <HAL_DMA_Start_IT+0x484>)
 8102e0e:	4293      	cmp	r3, r2
 8102e10:	d05e      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e12:	68fb      	ldr	r3, [r7, #12]
 8102e14:	681b      	ldr	r3, [r3, #0]
 8102e16:	4a7c      	ldr	r2, [pc, #496]	; (8103008 <HAL_DMA_Start_IT+0x488>)
 8102e18:	4293      	cmp	r3, r2
 8102e1a:	d059      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e1c:	68fb      	ldr	r3, [r7, #12]
 8102e1e:	681b      	ldr	r3, [r3, #0]
 8102e20:	4a7a      	ldr	r2, [pc, #488]	; (810300c <HAL_DMA_Start_IT+0x48c>)
 8102e22:	4293      	cmp	r3, r2
 8102e24:	d054      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e26:	68fb      	ldr	r3, [r7, #12]
 8102e28:	681b      	ldr	r3, [r3, #0]
 8102e2a:	4a79      	ldr	r2, [pc, #484]	; (8103010 <HAL_DMA_Start_IT+0x490>)
 8102e2c:	4293      	cmp	r3, r2
 8102e2e:	d04f      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e30:	68fb      	ldr	r3, [r7, #12]
 8102e32:	681b      	ldr	r3, [r3, #0]
 8102e34:	4a77      	ldr	r2, [pc, #476]	; (8103014 <HAL_DMA_Start_IT+0x494>)
 8102e36:	4293      	cmp	r3, r2
 8102e38:	d04a      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e3a:	68fb      	ldr	r3, [r7, #12]
 8102e3c:	681b      	ldr	r3, [r3, #0]
 8102e3e:	4a76      	ldr	r2, [pc, #472]	; (8103018 <HAL_DMA_Start_IT+0x498>)
 8102e40:	4293      	cmp	r3, r2
 8102e42:	d045      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e44:	68fb      	ldr	r3, [r7, #12]
 8102e46:	681b      	ldr	r3, [r3, #0]
 8102e48:	4a74      	ldr	r2, [pc, #464]	; (810301c <HAL_DMA_Start_IT+0x49c>)
 8102e4a:	4293      	cmp	r3, r2
 8102e4c:	d040      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e4e:	68fb      	ldr	r3, [r7, #12]
 8102e50:	681b      	ldr	r3, [r3, #0]
 8102e52:	4a73      	ldr	r2, [pc, #460]	; (8103020 <HAL_DMA_Start_IT+0x4a0>)
 8102e54:	4293      	cmp	r3, r2
 8102e56:	d03b      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e58:	68fb      	ldr	r3, [r7, #12]
 8102e5a:	681b      	ldr	r3, [r3, #0]
 8102e5c:	4a71      	ldr	r2, [pc, #452]	; (8103024 <HAL_DMA_Start_IT+0x4a4>)
 8102e5e:	4293      	cmp	r3, r2
 8102e60:	d036      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e62:	68fb      	ldr	r3, [r7, #12]
 8102e64:	681b      	ldr	r3, [r3, #0]
 8102e66:	4a70      	ldr	r2, [pc, #448]	; (8103028 <HAL_DMA_Start_IT+0x4a8>)
 8102e68:	4293      	cmp	r3, r2
 8102e6a:	d031      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e6c:	68fb      	ldr	r3, [r7, #12]
 8102e6e:	681b      	ldr	r3, [r3, #0]
 8102e70:	4a6e      	ldr	r2, [pc, #440]	; (810302c <HAL_DMA_Start_IT+0x4ac>)
 8102e72:	4293      	cmp	r3, r2
 8102e74:	d02c      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e76:	68fb      	ldr	r3, [r7, #12]
 8102e78:	681b      	ldr	r3, [r3, #0]
 8102e7a:	4a6d      	ldr	r2, [pc, #436]	; (8103030 <HAL_DMA_Start_IT+0x4b0>)
 8102e7c:	4293      	cmp	r3, r2
 8102e7e:	d027      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e80:	68fb      	ldr	r3, [r7, #12]
 8102e82:	681b      	ldr	r3, [r3, #0]
 8102e84:	4a6b      	ldr	r2, [pc, #428]	; (8103034 <HAL_DMA_Start_IT+0x4b4>)
 8102e86:	4293      	cmp	r3, r2
 8102e88:	d022      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e8a:	68fb      	ldr	r3, [r7, #12]
 8102e8c:	681b      	ldr	r3, [r3, #0]
 8102e8e:	4a6a      	ldr	r2, [pc, #424]	; (8103038 <HAL_DMA_Start_IT+0x4b8>)
 8102e90:	4293      	cmp	r3, r2
 8102e92:	d01d      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e94:	68fb      	ldr	r3, [r7, #12]
 8102e96:	681b      	ldr	r3, [r3, #0]
 8102e98:	4a68      	ldr	r2, [pc, #416]	; (810303c <HAL_DMA_Start_IT+0x4bc>)
 8102e9a:	4293      	cmp	r3, r2
 8102e9c:	d018      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e9e:	68fb      	ldr	r3, [r7, #12]
 8102ea0:	681b      	ldr	r3, [r3, #0]
 8102ea2:	4a67      	ldr	r2, [pc, #412]	; (8103040 <HAL_DMA_Start_IT+0x4c0>)
 8102ea4:	4293      	cmp	r3, r2
 8102ea6:	d013      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102ea8:	68fb      	ldr	r3, [r7, #12]
 8102eaa:	681b      	ldr	r3, [r3, #0]
 8102eac:	4a65      	ldr	r2, [pc, #404]	; (8103044 <HAL_DMA_Start_IT+0x4c4>)
 8102eae:	4293      	cmp	r3, r2
 8102eb0:	d00e      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102eb2:	68fb      	ldr	r3, [r7, #12]
 8102eb4:	681b      	ldr	r3, [r3, #0]
 8102eb6:	4a64      	ldr	r2, [pc, #400]	; (8103048 <HAL_DMA_Start_IT+0x4c8>)
 8102eb8:	4293      	cmp	r3, r2
 8102eba:	d009      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102ebc:	68fb      	ldr	r3, [r7, #12]
 8102ebe:	681b      	ldr	r3, [r3, #0]
 8102ec0:	4a62      	ldr	r2, [pc, #392]	; (810304c <HAL_DMA_Start_IT+0x4cc>)
 8102ec2:	4293      	cmp	r3, r2
 8102ec4:	d004      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102ec6:	68fb      	ldr	r3, [r7, #12]
 8102ec8:	681b      	ldr	r3, [r3, #0]
 8102eca:	4a61      	ldr	r2, [pc, #388]	; (8103050 <HAL_DMA_Start_IT+0x4d0>)
 8102ecc:	4293      	cmp	r3, r2
 8102ece:	d101      	bne.n	8102ed4 <HAL_DMA_Start_IT+0x354>
 8102ed0:	2301      	movs	r3, #1
 8102ed2:	e000      	b.n	8102ed6 <HAL_DMA_Start_IT+0x356>
 8102ed4:	2300      	movs	r3, #0
 8102ed6:	2b00      	cmp	r3, #0
 8102ed8:	d01a      	beq.n	8102f10 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8102eda:	68fb      	ldr	r3, [r7, #12]
 8102edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102ede:	681b      	ldr	r3, [r3, #0]
 8102ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102ee4:	2b00      	cmp	r3, #0
 8102ee6:	d007      	beq.n	8102ef8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8102ee8:	68fb      	ldr	r3, [r7, #12]
 8102eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102eec:	681a      	ldr	r2, [r3, #0]
 8102eee:	68fb      	ldr	r3, [r7, #12]
 8102ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102ef2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102ef6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8102ef8:	68fb      	ldr	r3, [r7, #12]
 8102efa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102efc:	2b00      	cmp	r3, #0
 8102efe:	d007      	beq.n	8102f10 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8102f00:	68fb      	ldr	r3, [r7, #12]
 8102f02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102f04:	681a      	ldr	r2, [r3, #0]
 8102f06:	68fb      	ldr	r3, [r7, #12]
 8102f08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102f0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102f0e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8102f10:	68fb      	ldr	r3, [r7, #12]
 8102f12:	681b      	ldr	r3, [r3, #0]
 8102f14:	4a37      	ldr	r2, [pc, #220]	; (8102ff4 <HAL_DMA_Start_IT+0x474>)
 8102f16:	4293      	cmp	r3, r2
 8102f18:	d04a      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f1a:	68fb      	ldr	r3, [r7, #12]
 8102f1c:	681b      	ldr	r3, [r3, #0]
 8102f1e:	4a36      	ldr	r2, [pc, #216]	; (8102ff8 <HAL_DMA_Start_IT+0x478>)
 8102f20:	4293      	cmp	r3, r2
 8102f22:	d045      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f24:	68fb      	ldr	r3, [r7, #12]
 8102f26:	681b      	ldr	r3, [r3, #0]
 8102f28:	4a34      	ldr	r2, [pc, #208]	; (8102ffc <HAL_DMA_Start_IT+0x47c>)
 8102f2a:	4293      	cmp	r3, r2
 8102f2c:	d040      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f2e:	68fb      	ldr	r3, [r7, #12]
 8102f30:	681b      	ldr	r3, [r3, #0]
 8102f32:	4a33      	ldr	r2, [pc, #204]	; (8103000 <HAL_DMA_Start_IT+0x480>)
 8102f34:	4293      	cmp	r3, r2
 8102f36:	d03b      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f38:	68fb      	ldr	r3, [r7, #12]
 8102f3a:	681b      	ldr	r3, [r3, #0]
 8102f3c:	4a31      	ldr	r2, [pc, #196]	; (8103004 <HAL_DMA_Start_IT+0x484>)
 8102f3e:	4293      	cmp	r3, r2
 8102f40:	d036      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f42:	68fb      	ldr	r3, [r7, #12]
 8102f44:	681b      	ldr	r3, [r3, #0]
 8102f46:	4a30      	ldr	r2, [pc, #192]	; (8103008 <HAL_DMA_Start_IT+0x488>)
 8102f48:	4293      	cmp	r3, r2
 8102f4a:	d031      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f4c:	68fb      	ldr	r3, [r7, #12]
 8102f4e:	681b      	ldr	r3, [r3, #0]
 8102f50:	4a2e      	ldr	r2, [pc, #184]	; (810300c <HAL_DMA_Start_IT+0x48c>)
 8102f52:	4293      	cmp	r3, r2
 8102f54:	d02c      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f56:	68fb      	ldr	r3, [r7, #12]
 8102f58:	681b      	ldr	r3, [r3, #0]
 8102f5a:	4a2d      	ldr	r2, [pc, #180]	; (8103010 <HAL_DMA_Start_IT+0x490>)
 8102f5c:	4293      	cmp	r3, r2
 8102f5e:	d027      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f60:	68fb      	ldr	r3, [r7, #12]
 8102f62:	681b      	ldr	r3, [r3, #0]
 8102f64:	4a2b      	ldr	r2, [pc, #172]	; (8103014 <HAL_DMA_Start_IT+0x494>)
 8102f66:	4293      	cmp	r3, r2
 8102f68:	d022      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f6a:	68fb      	ldr	r3, [r7, #12]
 8102f6c:	681b      	ldr	r3, [r3, #0]
 8102f6e:	4a2a      	ldr	r2, [pc, #168]	; (8103018 <HAL_DMA_Start_IT+0x498>)
 8102f70:	4293      	cmp	r3, r2
 8102f72:	d01d      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f74:	68fb      	ldr	r3, [r7, #12]
 8102f76:	681b      	ldr	r3, [r3, #0]
 8102f78:	4a28      	ldr	r2, [pc, #160]	; (810301c <HAL_DMA_Start_IT+0x49c>)
 8102f7a:	4293      	cmp	r3, r2
 8102f7c:	d018      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f7e:	68fb      	ldr	r3, [r7, #12]
 8102f80:	681b      	ldr	r3, [r3, #0]
 8102f82:	4a27      	ldr	r2, [pc, #156]	; (8103020 <HAL_DMA_Start_IT+0x4a0>)
 8102f84:	4293      	cmp	r3, r2
 8102f86:	d013      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f88:	68fb      	ldr	r3, [r7, #12]
 8102f8a:	681b      	ldr	r3, [r3, #0]
 8102f8c:	4a25      	ldr	r2, [pc, #148]	; (8103024 <HAL_DMA_Start_IT+0x4a4>)
 8102f8e:	4293      	cmp	r3, r2
 8102f90:	d00e      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f92:	68fb      	ldr	r3, [r7, #12]
 8102f94:	681b      	ldr	r3, [r3, #0]
 8102f96:	4a24      	ldr	r2, [pc, #144]	; (8103028 <HAL_DMA_Start_IT+0x4a8>)
 8102f98:	4293      	cmp	r3, r2
 8102f9a:	d009      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f9c:	68fb      	ldr	r3, [r7, #12]
 8102f9e:	681b      	ldr	r3, [r3, #0]
 8102fa0:	4a22      	ldr	r2, [pc, #136]	; (810302c <HAL_DMA_Start_IT+0x4ac>)
 8102fa2:	4293      	cmp	r3, r2
 8102fa4:	d004      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102fa6:	68fb      	ldr	r3, [r7, #12]
 8102fa8:	681b      	ldr	r3, [r3, #0]
 8102faa:	4a21      	ldr	r2, [pc, #132]	; (8103030 <HAL_DMA_Start_IT+0x4b0>)
 8102fac:	4293      	cmp	r3, r2
 8102fae:	d108      	bne.n	8102fc2 <HAL_DMA_Start_IT+0x442>
 8102fb0:	68fb      	ldr	r3, [r7, #12]
 8102fb2:	681b      	ldr	r3, [r3, #0]
 8102fb4:	681a      	ldr	r2, [r3, #0]
 8102fb6:	68fb      	ldr	r3, [r7, #12]
 8102fb8:	681b      	ldr	r3, [r3, #0]
 8102fba:	f042 0201 	orr.w	r2, r2, #1
 8102fbe:	601a      	str	r2, [r3, #0]
 8102fc0:	e012      	b.n	8102fe8 <HAL_DMA_Start_IT+0x468>
 8102fc2:	68fb      	ldr	r3, [r7, #12]
 8102fc4:	681b      	ldr	r3, [r3, #0]
 8102fc6:	681a      	ldr	r2, [r3, #0]
 8102fc8:	68fb      	ldr	r3, [r7, #12]
 8102fca:	681b      	ldr	r3, [r3, #0]
 8102fcc:	f042 0201 	orr.w	r2, r2, #1
 8102fd0:	601a      	str	r2, [r3, #0]
 8102fd2:	e009      	b.n	8102fe8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8102fd4:	68fb      	ldr	r3, [r7, #12]
 8102fd6:	2200      	movs	r2, #0
 8102fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8102fdc:	68fb      	ldr	r3, [r7, #12]
 8102fde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8102fe2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8102fe4:	2301      	movs	r3, #1
 8102fe6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8102fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8102fea:	4618      	mov	r0, r3
 8102fec:	3718      	adds	r7, #24
 8102fee:	46bd      	mov	sp, r7
 8102ff0:	bd80      	pop	{r7, pc}
 8102ff2:	bf00      	nop
 8102ff4:	40020010 	.word	0x40020010
 8102ff8:	40020028 	.word	0x40020028
 8102ffc:	40020040 	.word	0x40020040
 8103000:	40020058 	.word	0x40020058
 8103004:	40020070 	.word	0x40020070
 8103008:	40020088 	.word	0x40020088
 810300c:	400200a0 	.word	0x400200a0
 8103010:	400200b8 	.word	0x400200b8
 8103014:	40020410 	.word	0x40020410
 8103018:	40020428 	.word	0x40020428
 810301c:	40020440 	.word	0x40020440
 8103020:	40020458 	.word	0x40020458
 8103024:	40020470 	.word	0x40020470
 8103028:	40020488 	.word	0x40020488
 810302c:	400204a0 	.word	0x400204a0
 8103030:	400204b8 	.word	0x400204b8
 8103034:	58025408 	.word	0x58025408
 8103038:	5802541c 	.word	0x5802541c
 810303c:	58025430 	.word	0x58025430
 8103040:	58025444 	.word	0x58025444
 8103044:	58025458 	.word	0x58025458
 8103048:	5802546c 	.word	0x5802546c
 810304c:	58025480 	.word	0x58025480
 8103050:	58025494 	.word	0x58025494

08103054 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8103054:	b580      	push	{r7, lr}
 8103056:	b084      	sub	sp, #16
 8103058:	af00      	add	r7, sp, #0
 810305a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 810305c:	687b      	ldr	r3, [r7, #4]
 810305e:	2b00      	cmp	r3, #0
 8103060:	d101      	bne.n	8103066 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8103062:	2301      	movs	r3, #1
 8103064:	e205      	b.n	8103472 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8103066:	687b      	ldr	r3, [r7, #4]
 8103068:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 810306c:	b2db      	uxtb	r3, r3
 810306e:	2b02      	cmp	r3, #2
 8103070:	d004      	beq.n	810307c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8103072:	687b      	ldr	r3, [r7, #4]
 8103074:	2280      	movs	r2, #128	; 0x80
 8103076:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8103078:	2301      	movs	r3, #1
 810307a:	e1fa      	b.n	8103472 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810307c:	687b      	ldr	r3, [r7, #4]
 810307e:	681b      	ldr	r3, [r3, #0]
 8103080:	4a8c      	ldr	r2, [pc, #560]	; (81032b4 <HAL_DMA_Abort_IT+0x260>)
 8103082:	4293      	cmp	r3, r2
 8103084:	d04a      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 8103086:	687b      	ldr	r3, [r7, #4]
 8103088:	681b      	ldr	r3, [r3, #0]
 810308a:	4a8b      	ldr	r2, [pc, #556]	; (81032b8 <HAL_DMA_Abort_IT+0x264>)
 810308c:	4293      	cmp	r3, r2
 810308e:	d045      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 8103090:	687b      	ldr	r3, [r7, #4]
 8103092:	681b      	ldr	r3, [r3, #0]
 8103094:	4a89      	ldr	r2, [pc, #548]	; (81032bc <HAL_DMA_Abort_IT+0x268>)
 8103096:	4293      	cmp	r3, r2
 8103098:	d040      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 810309a:	687b      	ldr	r3, [r7, #4]
 810309c:	681b      	ldr	r3, [r3, #0]
 810309e:	4a88      	ldr	r2, [pc, #544]	; (81032c0 <HAL_DMA_Abort_IT+0x26c>)
 81030a0:	4293      	cmp	r3, r2
 81030a2:	d03b      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 81030a4:	687b      	ldr	r3, [r7, #4]
 81030a6:	681b      	ldr	r3, [r3, #0]
 81030a8:	4a86      	ldr	r2, [pc, #536]	; (81032c4 <HAL_DMA_Abort_IT+0x270>)
 81030aa:	4293      	cmp	r3, r2
 81030ac:	d036      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 81030ae:	687b      	ldr	r3, [r7, #4]
 81030b0:	681b      	ldr	r3, [r3, #0]
 81030b2:	4a85      	ldr	r2, [pc, #532]	; (81032c8 <HAL_DMA_Abort_IT+0x274>)
 81030b4:	4293      	cmp	r3, r2
 81030b6:	d031      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 81030b8:	687b      	ldr	r3, [r7, #4]
 81030ba:	681b      	ldr	r3, [r3, #0]
 81030bc:	4a83      	ldr	r2, [pc, #524]	; (81032cc <HAL_DMA_Abort_IT+0x278>)
 81030be:	4293      	cmp	r3, r2
 81030c0:	d02c      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 81030c2:	687b      	ldr	r3, [r7, #4]
 81030c4:	681b      	ldr	r3, [r3, #0]
 81030c6:	4a82      	ldr	r2, [pc, #520]	; (81032d0 <HAL_DMA_Abort_IT+0x27c>)
 81030c8:	4293      	cmp	r3, r2
 81030ca:	d027      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 81030cc:	687b      	ldr	r3, [r7, #4]
 81030ce:	681b      	ldr	r3, [r3, #0]
 81030d0:	4a80      	ldr	r2, [pc, #512]	; (81032d4 <HAL_DMA_Abort_IT+0x280>)
 81030d2:	4293      	cmp	r3, r2
 81030d4:	d022      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 81030d6:	687b      	ldr	r3, [r7, #4]
 81030d8:	681b      	ldr	r3, [r3, #0]
 81030da:	4a7f      	ldr	r2, [pc, #508]	; (81032d8 <HAL_DMA_Abort_IT+0x284>)
 81030dc:	4293      	cmp	r3, r2
 81030de:	d01d      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 81030e0:	687b      	ldr	r3, [r7, #4]
 81030e2:	681b      	ldr	r3, [r3, #0]
 81030e4:	4a7d      	ldr	r2, [pc, #500]	; (81032dc <HAL_DMA_Abort_IT+0x288>)
 81030e6:	4293      	cmp	r3, r2
 81030e8:	d018      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 81030ea:	687b      	ldr	r3, [r7, #4]
 81030ec:	681b      	ldr	r3, [r3, #0]
 81030ee:	4a7c      	ldr	r2, [pc, #496]	; (81032e0 <HAL_DMA_Abort_IT+0x28c>)
 81030f0:	4293      	cmp	r3, r2
 81030f2:	d013      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 81030f4:	687b      	ldr	r3, [r7, #4]
 81030f6:	681b      	ldr	r3, [r3, #0]
 81030f8:	4a7a      	ldr	r2, [pc, #488]	; (81032e4 <HAL_DMA_Abort_IT+0x290>)
 81030fa:	4293      	cmp	r3, r2
 81030fc:	d00e      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 81030fe:	687b      	ldr	r3, [r7, #4]
 8103100:	681b      	ldr	r3, [r3, #0]
 8103102:	4a79      	ldr	r2, [pc, #484]	; (81032e8 <HAL_DMA_Abort_IT+0x294>)
 8103104:	4293      	cmp	r3, r2
 8103106:	d009      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 8103108:	687b      	ldr	r3, [r7, #4]
 810310a:	681b      	ldr	r3, [r3, #0]
 810310c:	4a77      	ldr	r2, [pc, #476]	; (81032ec <HAL_DMA_Abort_IT+0x298>)
 810310e:	4293      	cmp	r3, r2
 8103110:	d004      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 8103112:	687b      	ldr	r3, [r7, #4]
 8103114:	681b      	ldr	r3, [r3, #0]
 8103116:	4a76      	ldr	r2, [pc, #472]	; (81032f0 <HAL_DMA_Abort_IT+0x29c>)
 8103118:	4293      	cmp	r3, r2
 810311a:	d101      	bne.n	8103120 <HAL_DMA_Abort_IT+0xcc>
 810311c:	2301      	movs	r3, #1
 810311e:	e000      	b.n	8103122 <HAL_DMA_Abort_IT+0xce>
 8103120:	2300      	movs	r3, #0
 8103122:	2b00      	cmp	r3, #0
 8103124:	d065      	beq.n	81031f2 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8103126:	687b      	ldr	r3, [r7, #4]
 8103128:	2204      	movs	r2, #4
 810312a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 810312e:	687b      	ldr	r3, [r7, #4]
 8103130:	681b      	ldr	r3, [r3, #0]
 8103132:	4a60      	ldr	r2, [pc, #384]	; (81032b4 <HAL_DMA_Abort_IT+0x260>)
 8103134:	4293      	cmp	r3, r2
 8103136:	d04a      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 8103138:	687b      	ldr	r3, [r7, #4]
 810313a:	681b      	ldr	r3, [r3, #0]
 810313c:	4a5e      	ldr	r2, [pc, #376]	; (81032b8 <HAL_DMA_Abort_IT+0x264>)
 810313e:	4293      	cmp	r3, r2
 8103140:	d045      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 8103142:	687b      	ldr	r3, [r7, #4]
 8103144:	681b      	ldr	r3, [r3, #0]
 8103146:	4a5d      	ldr	r2, [pc, #372]	; (81032bc <HAL_DMA_Abort_IT+0x268>)
 8103148:	4293      	cmp	r3, r2
 810314a:	d040      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 810314c:	687b      	ldr	r3, [r7, #4]
 810314e:	681b      	ldr	r3, [r3, #0]
 8103150:	4a5b      	ldr	r2, [pc, #364]	; (81032c0 <HAL_DMA_Abort_IT+0x26c>)
 8103152:	4293      	cmp	r3, r2
 8103154:	d03b      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 8103156:	687b      	ldr	r3, [r7, #4]
 8103158:	681b      	ldr	r3, [r3, #0]
 810315a:	4a5a      	ldr	r2, [pc, #360]	; (81032c4 <HAL_DMA_Abort_IT+0x270>)
 810315c:	4293      	cmp	r3, r2
 810315e:	d036      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 8103160:	687b      	ldr	r3, [r7, #4]
 8103162:	681b      	ldr	r3, [r3, #0]
 8103164:	4a58      	ldr	r2, [pc, #352]	; (81032c8 <HAL_DMA_Abort_IT+0x274>)
 8103166:	4293      	cmp	r3, r2
 8103168:	d031      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 810316a:	687b      	ldr	r3, [r7, #4]
 810316c:	681b      	ldr	r3, [r3, #0]
 810316e:	4a57      	ldr	r2, [pc, #348]	; (81032cc <HAL_DMA_Abort_IT+0x278>)
 8103170:	4293      	cmp	r3, r2
 8103172:	d02c      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 8103174:	687b      	ldr	r3, [r7, #4]
 8103176:	681b      	ldr	r3, [r3, #0]
 8103178:	4a55      	ldr	r2, [pc, #340]	; (81032d0 <HAL_DMA_Abort_IT+0x27c>)
 810317a:	4293      	cmp	r3, r2
 810317c:	d027      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 810317e:	687b      	ldr	r3, [r7, #4]
 8103180:	681b      	ldr	r3, [r3, #0]
 8103182:	4a54      	ldr	r2, [pc, #336]	; (81032d4 <HAL_DMA_Abort_IT+0x280>)
 8103184:	4293      	cmp	r3, r2
 8103186:	d022      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 8103188:	687b      	ldr	r3, [r7, #4]
 810318a:	681b      	ldr	r3, [r3, #0]
 810318c:	4a52      	ldr	r2, [pc, #328]	; (81032d8 <HAL_DMA_Abort_IT+0x284>)
 810318e:	4293      	cmp	r3, r2
 8103190:	d01d      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 8103192:	687b      	ldr	r3, [r7, #4]
 8103194:	681b      	ldr	r3, [r3, #0]
 8103196:	4a51      	ldr	r2, [pc, #324]	; (81032dc <HAL_DMA_Abort_IT+0x288>)
 8103198:	4293      	cmp	r3, r2
 810319a:	d018      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 810319c:	687b      	ldr	r3, [r7, #4]
 810319e:	681b      	ldr	r3, [r3, #0]
 81031a0:	4a4f      	ldr	r2, [pc, #316]	; (81032e0 <HAL_DMA_Abort_IT+0x28c>)
 81031a2:	4293      	cmp	r3, r2
 81031a4:	d013      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 81031a6:	687b      	ldr	r3, [r7, #4]
 81031a8:	681b      	ldr	r3, [r3, #0]
 81031aa:	4a4e      	ldr	r2, [pc, #312]	; (81032e4 <HAL_DMA_Abort_IT+0x290>)
 81031ac:	4293      	cmp	r3, r2
 81031ae:	d00e      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 81031b0:	687b      	ldr	r3, [r7, #4]
 81031b2:	681b      	ldr	r3, [r3, #0]
 81031b4:	4a4c      	ldr	r2, [pc, #304]	; (81032e8 <HAL_DMA_Abort_IT+0x294>)
 81031b6:	4293      	cmp	r3, r2
 81031b8:	d009      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 81031ba:	687b      	ldr	r3, [r7, #4]
 81031bc:	681b      	ldr	r3, [r3, #0]
 81031be:	4a4b      	ldr	r2, [pc, #300]	; (81032ec <HAL_DMA_Abort_IT+0x298>)
 81031c0:	4293      	cmp	r3, r2
 81031c2:	d004      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 81031c4:	687b      	ldr	r3, [r7, #4]
 81031c6:	681b      	ldr	r3, [r3, #0]
 81031c8:	4a49      	ldr	r2, [pc, #292]	; (81032f0 <HAL_DMA_Abort_IT+0x29c>)
 81031ca:	4293      	cmp	r3, r2
 81031cc:	d108      	bne.n	81031e0 <HAL_DMA_Abort_IT+0x18c>
 81031ce:	687b      	ldr	r3, [r7, #4]
 81031d0:	681b      	ldr	r3, [r3, #0]
 81031d2:	681a      	ldr	r2, [r3, #0]
 81031d4:	687b      	ldr	r3, [r7, #4]
 81031d6:	681b      	ldr	r3, [r3, #0]
 81031d8:	f022 0201 	bic.w	r2, r2, #1
 81031dc:	601a      	str	r2, [r3, #0]
 81031de:	e147      	b.n	8103470 <HAL_DMA_Abort_IT+0x41c>
 81031e0:	687b      	ldr	r3, [r7, #4]
 81031e2:	681b      	ldr	r3, [r3, #0]
 81031e4:	681a      	ldr	r2, [r3, #0]
 81031e6:	687b      	ldr	r3, [r7, #4]
 81031e8:	681b      	ldr	r3, [r3, #0]
 81031ea:	f022 0201 	bic.w	r2, r2, #1
 81031ee:	601a      	str	r2, [r3, #0]
 81031f0:	e13e      	b.n	8103470 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 81031f2:	687b      	ldr	r3, [r7, #4]
 81031f4:	681b      	ldr	r3, [r3, #0]
 81031f6:	681a      	ldr	r2, [r3, #0]
 81031f8:	687b      	ldr	r3, [r7, #4]
 81031fa:	681b      	ldr	r3, [r3, #0]
 81031fc:	f022 020e 	bic.w	r2, r2, #14
 8103200:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8103202:	687b      	ldr	r3, [r7, #4]
 8103204:	681b      	ldr	r3, [r3, #0]
 8103206:	4a2b      	ldr	r2, [pc, #172]	; (81032b4 <HAL_DMA_Abort_IT+0x260>)
 8103208:	4293      	cmp	r3, r2
 810320a:	d04a      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 810320c:	687b      	ldr	r3, [r7, #4]
 810320e:	681b      	ldr	r3, [r3, #0]
 8103210:	4a29      	ldr	r2, [pc, #164]	; (81032b8 <HAL_DMA_Abort_IT+0x264>)
 8103212:	4293      	cmp	r3, r2
 8103214:	d045      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 8103216:	687b      	ldr	r3, [r7, #4]
 8103218:	681b      	ldr	r3, [r3, #0]
 810321a:	4a28      	ldr	r2, [pc, #160]	; (81032bc <HAL_DMA_Abort_IT+0x268>)
 810321c:	4293      	cmp	r3, r2
 810321e:	d040      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 8103220:	687b      	ldr	r3, [r7, #4]
 8103222:	681b      	ldr	r3, [r3, #0]
 8103224:	4a26      	ldr	r2, [pc, #152]	; (81032c0 <HAL_DMA_Abort_IT+0x26c>)
 8103226:	4293      	cmp	r3, r2
 8103228:	d03b      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 810322a:	687b      	ldr	r3, [r7, #4]
 810322c:	681b      	ldr	r3, [r3, #0]
 810322e:	4a25      	ldr	r2, [pc, #148]	; (81032c4 <HAL_DMA_Abort_IT+0x270>)
 8103230:	4293      	cmp	r3, r2
 8103232:	d036      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 8103234:	687b      	ldr	r3, [r7, #4]
 8103236:	681b      	ldr	r3, [r3, #0]
 8103238:	4a23      	ldr	r2, [pc, #140]	; (81032c8 <HAL_DMA_Abort_IT+0x274>)
 810323a:	4293      	cmp	r3, r2
 810323c:	d031      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 810323e:	687b      	ldr	r3, [r7, #4]
 8103240:	681b      	ldr	r3, [r3, #0]
 8103242:	4a22      	ldr	r2, [pc, #136]	; (81032cc <HAL_DMA_Abort_IT+0x278>)
 8103244:	4293      	cmp	r3, r2
 8103246:	d02c      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 8103248:	687b      	ldr	r3, [r7, #4]
 810324a:	681b      	ldr	r3, [r3, #0]
 810324c:	4a20      	ldr	r2, [pc, #128]	; (81032d0 <HAL_DMA_Abort_IT+0x27c>)
 810324e:	4293      	cmp	r3, r2
 8103250:	d027      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 8103252:	687b      	ldr	r3, [r7, #4]
 8103254:	681b      	ldr	r3, [r3, #0]
 8103256:	4a1f      	ldr	r2, [pc, #124]	; (81032d4 <HAL_DMA_Abort_IT+0x280>)
 8103258:	4293      	cmp	r3, r2
 810325a:	d022      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 810325c:	687b      	ldr	r3, [r7, #4]
 810325e:	681b      	ldr	r3, [r3, #0]
 8103260:	4a1d      	ldr	r2, [pc, #116]	; (81032d8 <HAL_DMA_Abort_IT+0x284>)
 8103262:	4293      	cmp	r3, r2
 8103264:	d01d      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 8103266:	687b      	ldr	r3, [r7, #4]
 8103268:	681b      	ldr	r3, [r3, #0]
 810326a:	4a1c      	ldr	r2, [pc, #112]	; (81032dc <HAL_DMA_Abort_IT+0x288>)
 810326c:	4293      	cmp	r3, r2
 810326e:	d018      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 8103270:	687b      	ldr	r3, [r7, #4]
 8103272:	681b      	ldr	r3, [r3, #0]
 8103274:	4a1a      	ldr	r2, [pc, #104]	; (81032e0 <HAL_DMA_Abort_IT+0x28c>)
 8103276:	4293      	cmp	r3, r2
 8103278:	d013      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 810327a:	687b      	ldr	r3, [r7, #4]
 810327c:	681b      	ldr	r3, [r3, #0]
 810327e:	4a19      	ldr	r2, [pc, #100]	; (81032e4 <HAL_DMA_Abort_IT+0x290>)
 8103280:	4293      	cmp	r3, r2
 8103282:	d00e      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 8103284:	687b      	ldr	r3, [r7, #4]
 8103286:	681b      	ldr	r3, [r3, #0]
 8103288:	4a17      	ldr	r2, [pc, #92]	; (81032e8 <HAL_DMA_Abort_IT+0x294>)
 810328a:	4293      	cmp	r3, r2
 810328c:	d009      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 810328e:	687b      	ldr	r3, [r7, #4]
 8103290:	681b      	ldr	r3, [r3, #0]
 8103292:	4a16      	ldr	r2, [pc, #88]	; (81032ec <HAL_DMA_Abort_IT+0x298>)
 8103294:	4293      	cmp	r3, r2
 8103296:	d004      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 8103298:	687b      	ldr	r3, [r7, #4]
 810329a:	681b      	ldr	r3, [r3, #0]
 810329c:	4a14      	ldr	r2, [pc, #80]	; (81032f0 <HAL_DMA_Abort_IT+0x29c>)
 810329e:	4293      	cmp	r3, r2
 81032a0:	d128      	bne.n	81032f4 <HAL_DMA_Abort_IT+0x2a0>
 81032a2:	687b      	ldr	r3, [r7, #4]
 81032a4:	681b      	ldr	r3, [r3, #0]
 81032a6:	681a      	ldr	r2, [r3, #0]
 81032a8:	687b      	ldr	r3, [r7, #4]
 81032aa:	681b      	ldr	r3, [r3, #0]
 81032ac:	f022 0201 	bic.w	r2, r2, #1
 81032b0:	601a      	str	r2, [r3, #0]
 81032b2:	e027      	b.n	8103304 <HAL_DMA_Abort_IT+0x2b0>
 81032b4:	40020010 	.word	0x40020010
 81032b8:	40020028 	.word	0x40020028
 81032bc:	40020040 	.word	0x40020040
 81032c0:	40020058 	.word	0x40020058
 81032c4:	40020070 	.word	0x40020070
 81032c8:	40020088 	.word	0x40020088
 81032cc:	400200a0 	.word	0x400200a0
 81032d0:	400200b8 	.word	0x400200b8
 81032d4:	40020410 	.word	0x40020410
 81032d8:	40020428 	.word	0x40020428
 81032dc:	40020440 	.word	0x40020440
 81032e0:	40020458 	.word	0x40020458
 81032e4:	40020470 	.word	0x40020470
 81032e8:	40020488 	.word	0x40020488
 81032ec:	400204a0 	.word	0x400204a0
 81032f0:	400204b8 	.word	0x400204b8
 81032f4:	687b      	ldr	r3, [r7, #4]
 81032f6:	681b      	ldr	r3, [r3, #0]
 81032f8:	681a      	ldr	r2, [r3, #0]
 81032fa:	687b      	ldr	r3, [r7, #4]
 81032fc:	681b      	ldr	r3, [r3, #0]
 81032fe:	f022 0201 	bic.w	r2, r2, #1
 8103302:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103304:	687b      	ldr	r3, [r7, #4]
 8103306:	681b      	ldr	r3, [r3, #0]
 8103308:	4a5c      	ldr	r2, [pc, #368]	; (810347c <HAL_DMA_Abort_IT+0x428>)
 810330a:	4293      	cmp	r3, r2
 810330c:	d072      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 810330e:	687b      	ldr	r3, [r7, #4]
 8103310:	681b      	ldr	r3, [r3, #0]
 8103312:	4a5b      	ldr	r2, [pc, #364]	; (8103480 <HAL_DMA_Abort_IT+0x42c>)
 8103314:	4293      	cmp	r3, r2
 8103316:	d06d      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 8103318:	687b      	ldr	r3, [r7, #4]
 810331a:	681b      	ldr	r3, [r3, #0]
 810331c:	4a59      	ldr	r2, [pc, #356]	; (8103484 <HAL_DMA_Abort_IT+0x430>)
 810331e:	4293      	cmp	r3, r2
 8103320:	d068      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 8103322:	687b      	ldr	r3, [r7, #4]
 8103324:	681b      	ldr	r3, [r3, #0]
 8103326:	4a58      	ldr	r2, [pc, #352]	; (8103488 <HAL_DMA_Abort_IT+0x434>)
 8103328:	4293      	cmp	r3, r2
 810332a:	d063      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 810332c:	687b      	ldr	r3, [r7, #4]
 810332e:	681b      	ldr	r3, [r3, #0]
 8103330:	4a56      	ldr	r2, [pc, #344]	; (810348c <HAL_DMA_Abort_IT+0x438>)
 8103332:	4293      	cmp	r3, r2
 8103334:	d05e      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 8103336:	687b      	ldr	r3, [r7, #4]
 8103338:	681b      	ldr	r3, [r3, #0]
 810333a:	4a55      	ldr	r2, [pc, #340]	; (8103490 <HAL_DMA_Abort_IT+0x43c>)
 810333c:	4293      	cmp	r3, r2
 810333e:	d059      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 8103340:	687b      	ldr	r3, [r7, #4]
 8103342:	681b      	ldr	r3, [r3, #0]
 8103344:	4a53      	ldr	r2, [pc, #332]	; (8103494 <HAL_DMA_Abort_IT+0x440>)
 8103346:	4293      	cmp	r3, r2
 8103348:	d054      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 810334a:	687b      	ldr	r3, [r7, #4]
 810334c:	681b      	ldr	r3, [r3, #0]
 810334e:	4a52      	ldr	r2, [pc, #328]	; (8103498 <HAL_DMA_Abort_IT+0x444>)
 8103350:	4293      	cmp	r3, r2
 8103352:	d04f      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 8103354:	687b      	ldr	r3, [r7, #4]
 8103356:	681b      	ldr	r3, [r3, #0]
 8103358:	4a50      	ldr	r2, [pc, #320]	; (810349c <HAL_DMA_Abort_IT+0x448>)
 810335a:	4293      	cmp	r3, r2
 810335c:	d04a      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 810335e:	687b      	ldr	r3, [r7, #4]
 8103360:	681b      	ldr	r3, [r3, #0]
 8103362:	4a4f      	ldr	r2, [pc, #316]	; (81034a0 <HAL_DMA_Abort_IT+0x44c>)
 8103364:	4293      	cmp	r3, r2
 8103366:	d045      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 8103368:	687b      	ldr	r3, [r7, #4]
 810336a:	681b      	ldr	r3, [r3, #0]
 810336c:	4a4d      	ldr	r2, [pc, #308]	; (81034a4 <HAL_DMA_Abort_IT+0x450>)
 810336e:	4293      	cmp	r3, r2
 8103370:	d040      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 8103372:	687b      	ldr	r3, [r7, #4]
 8103374:	681b      	ldr	r3, [r3, #0]
 8103376:	4a4c      	ldr	r2, [pc, #304]	; (81034a8 <HAL_DMA_Abort_IT+0x454>)
 8103378:	4293      	cmp	r3, r2
 810337a:	d03b      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 810337c:	687b      	ldr	r3, [r7, #4]
 810337e:	681b      	ldr	r3, [r3, #0]
 8103380:	4a4a      	ldr	r2, [pc, #296]	; (81034ac <HAL_DMA_Abort_IT+0x458>)
 8103382:	4293      	cmp	r3, r2
 8103384:	d036      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 8103386:	687b      	ldr	r3, [r7, #4]
 8103388:	681b      	ldr	r3, [r3, #0]
 810338a:	4a49      	ldr	r2, [pc, #292]	; (81034b0 <HAL_DMA_Abort_IT+0x45c>)
 810338c:	4293      	cmp	r3, r2
 810338e:	d031      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 8103390:	687b      	ldr	r3, [r7, #4]
 8103392:	681b      	ldr	r3, [r3, #0]
 8103394:	4a47      	ldr	r2, [pc, #284]	; (81034b4 <HAL_DMA_Abort_IT+0x460>)
 8103396:	4293      	cmp	r3, r2
 8103398:	d02c      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 810339a:	687b      	ldr	r3, [r7, #4]
 810339c:	681b      	ldr	r3, [r3, #0]
 810339e:	4a46      	ldr	r2, [pc, #280]	; (81034b8 <HAL_DMA_Abort_IT+0x464>)
 81033a0:	4293      	cmp	r3, r2
 81033a2:	d027      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 81033a4:	687b      	ldr	r3, [r7, #4]
 81033a6:	681b      	ldr	r3, [r3, #0]
 81033a8:	4a44      	ldr	r2, [pc, #272]	; (81034bc <HAL_DMA_Abort_IT+0x468>)
 81033aa:	4293      	cmp	r3, r2
 81033ac:	d022      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 81033ae:	687b      	ldr	r3, [r7, #4]
 81033b0:	681b      	ldr	r3, [r3, #0]
 81033b2:	4a43      	ldr	r2, [pc, #268]	; (81034c0 <HAL_DMA_Abort_IT+0x46c>)
 81033b4:	4293      	cmp	r3, r2
 81033b6:	d01d      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 81033b8:	687b      	ldr	r3, [r7, #4]
 81033ba:	681b      	ldr	r3, [r3, #0]
 81033bc:	4a41      	ldr	r2, [pc, #260]	; (81034c4 <HAL_DMA_Abort_IT+0x470>)
 81033be:	4293      	cmp	r3, r2
 81033c0:	d018      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 81033c2:	687b      	ldr	r3, [r7, #4]
 81033c4:	681b      	ldr	r3, [r3, #0]
 81033c6:	4a40      	ldr	r2, [pc, #256]	; (81034c8 <HAL_DMA_Abort_IT+0x474>)
 81033c8:	4293      	cmp	r3, r2
 81033ca:	d013      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 81033cc:	687b      	ldr	r3, [r7, #4]
 81033ce:	681b      	ldr	r3, [r3, #0]
 81033d0:	4a3e      	ldr	r2, [pc, #248]	; (81034cc <HAL_DMA_Abort_IT+0x478>)
 81033d2:	4293      	cmp	r3, r2
 81033d4:	d00e      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 81033d6:	687b      	ldr	r3, [r7, #4]
 81033d8:	681b      	ldr	r3, [r3, #0]
 81033da:	4a3d      	ldr	r2, [pc, #244]	; (81034d0 <HAL_DMA_Abort_IT+0x47c>)
 81033dc:	4293      	cmp	r3, r2
 81033de:	d009      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 81033e0:	687b      	ldr	r3, [r7, #4]
 81033e2:	681b      	ldr	r3, [r3, #0]
 81033e4:	4a3b      	ldr	r2, [pc, #236]	; (81034d4 <HAL_DMA_Abort_IT+0x480>)
 81033e6:	4293      	cmp	r3, r2
 81033e8:	d004      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 81033ea:	687b      	ldr	r3, [r7, #4]
 81033ec:	681b      	ldr	r3, [r3, #0]
 81033ee:	4a3a      	ldr	r2, [pc, #232]	; (81034d8 <HAL_DMA_Abort_IT+0x484>)
 81033f0:	4293      	cmp	r3, r2
 81033f2:	d101      	bne.n	81033f8 <HAL_DMA_Abort_IT+0x3a4>
 81033f4:	2301      	movs	r3, #1
 81033f6:	e000      	b.n	81033fa <HAL_DMA_Abort_IT+0x3a6>
 81033f8:	2300      	movs	r3, #0
 81033fa:	2b00      	cmp	r3, #0
 81033fc:	d028      	beq.n	8103450 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 81033fe:	687b      	ldr	r3, [r7, #4]
 8103400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103402:	681a      	ldr	r2, [r3, #0]
 8103404:	687b      	ldr	r3, [r7, #4]
 8103406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103408:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810340c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 810340e:	687b      	ldr	r3, [r7, #4]
 8103410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103412:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8103414:	687b      	ldr	r3, [r7, #4]
 8103416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103418:	f003 031f 	and.w	r3, r3, #31
 810341c:	2201      	movs	r2, #1
 810341e:	409a      	lsls	r2, r3
 8103420:	68fb      	ldr	r3, [r7, #12]
 8103422:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103424:	687b      	ldr	r3, [r7, #4]
 8103426:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103428:	687a      	ldr	r2, [r7, #4]
 810342a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 810342c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 810342e:	687b      	ldr	r3, [r7, #4]
 8103430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103432:	2b00      	cmp	r3, #0
 8103434:	d00c      	beq.n	8103450 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8103436:	687b      	ldr	r3, [r7, #4]
 8103438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810343a:	681a      	ldr	r2, [r3, #0]
 810343c:	687b      	ldr	r3, [r7, #4]
 810343e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103440:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8103444:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103446:	687b      	ldr	r3, [r7, #4]
 8103448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810344a:	687a      	ldr	r2, [r7, #4]
 810344c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 810344e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8103450:	687b      	ldr	r3, [r7, #4]
 8103452:	2200      	movs	r2, #0
 8103454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8103458:	687b      	ldr	r3, [r7, #4]
 810345a:	2201      	movs	r2, #1
 810345c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8103460:	687b      	ldr	r3, [r7, #4]
 8103462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103464:	2b00      	cmp	r3, #0
 8103466:	d003      	beq.n	8103470 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8103468:	687b      	ldr	r3, [r7, #4]
 810346a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810346c:	6878      	ldr	r0, [r7, #4]
 810346e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8103470:	2300      	movs	r3, #0
}
 8103472:	4618      	mov	r0, r3
 8103474:	3710      	adds	r7, #16
 8103476:	46bd      	mov	sp, r7
 8103478:	bd80      	pop	{r7, pc}
 810347a:	bf00      	nop
 810347c:	40020010 	.word	0x40020010
 8103480:	40020028 	.word	0x40020028
 8103484:	40020040 	.word	0x40020040
 8103488:	40020058 	.word	0x40020058
 810348c:	40020070 	.word	0x40020070
 8103490:	40020088 	.word	0x40020088
 8103494:	400200a0 	.word	0x400200a0
 8103498:	400200b8 	.word	0x400200b8
 810349c:	40020410 	.word	0x40020410
 81034a0:	40020428 	.word	0x40020428
 81034a4:	40020440 	.word	0x40020440
 81034a8:	40020458 	.word	0x40020458
 81034ac:	40020470 	.word	0x40020470
 81034b0:	40020488 	.word	0x40020488
 81034b4:	400204a0 	.word	0x400204a0
 81034b8:	400204b8 	.word	0x400204b8
 81034bc:	58025408 	.word	0x58025408
 81034c0:	5802541c 	.word	0x5802541c
 81034c4:	58025430 	.word	0x58025430
 81034c8:	58025444 	.word	0x58025444
 81034cc:	58025458 	.word	0x58025458
 81034d0:	5802546c 	.word	0x5802546c
 81034d4:	58025480 	.word	0x58025480
 81034d8:	58025494 	.word	0x58025494

081034dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 81034dc:	b580      	push	{r7, lr}
 81034de:	b08a      	sub	sp, #40	; 0x28
 81034e0:	af00      	add	r7, sp, #0
 81034e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 81034e4:	2300      	movs	r3, #0
 81034e6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 81034e8:	4b67      	ldr	r3, [pc, #412]	; (8103688 <HAL_DMA_IRQHandler+0x1ac>)
 81034ea:	681b      	ldr	r3, [r3, #0]
 81034ec:	4a67      	ldr	r2, [pc, #412]	; (810368c <HAL_DMA_IRQHandler+0x1b0>)
 81034ee:	fba2 2303 	umull	r2, r3, r2, r3
 81034f2:	0a9b      	lsrs	r3, r3, #10
 81034f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 81034f6:	687b      	ldr	r3, [r7, #4]
 81034f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81034fa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81034fc:	687b      	ldr	r3, [r7, #4]
 81034fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103500:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8103502:	6a3b      	ldr	r3, [r7, #32]
 8103504:	681b      	ldr	r3, [r3, #0]
 8103506:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8103508:	69fb      	ldr	r3, [r7, #28]
 810350a:	681b      	ldr	r3, [r3, #0]
 810350c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 810350e:	687b      	ldr	r3, [r7, #4]
 8103510:	681b      	ldr	r3, [r3, #0]
 8103512:	4a5f      	ldr	r2, [pc, #380]	; (8103690 <HAL_DMA_IRQHandler+0x1b4>)
 8103514:	4293      	cmp	r3, r2
 8103516:	d04a      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 8103518:	687b      	ldr	r3, [r7, #4]
 810351a:	681b      	ldr	r3, [r3, #0]
 810351c:	4a5d      	ldr	r2, [pc, #372]	; (8103694 <HAL_DMA_IRQHandler+0x1b8>)
 810351e:	4293      	cmp	r3, r2
 8103520:	d045      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 8103522:	687b      	ldr	r3, [r7, #4]
 8103524:	681b      	ldr	r3, [r3, #0]
 8103526:	4a5c      	ldr	r2, [pc, #368]	; (8103698 <HAL_DMA_IRQHandler+0x1bc>)
 8103528:	4293      	cmp	r3, r2
 810352a:	d040      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 810352c:	687b      	ldr	r3, [r7, #4]
 810352e:	681b      	ldr	r3, [r3, #0]
 8103530:	4a5a      	ldr	r2, [pc, #360]	; (810369c <HAL_DMA_IRQHandler+0x1c0>)
 8103532:	4293      	cmp	r3, r2
 8103534:	d03b      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 8103536:	687b      	ldr	r3, [r7, #4]
 8103538:	681b      	ldr	r3, [r3, #0]
 810353a:	4a59      	ldr	r2, [pc, #356]	; (81036a0 <HAL_DMA_IRQHandler+0x1c4>)
 810353c:	4293      	cmp	r3, r2
 810353e:	d036      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 8103540:	687b      	ldr	r3, [r7, #4]
 8103542:	681b      	ldr	r3, [r3, #0]
 8103544:	4a57      	ldr	r2, [pc, #348]	; (81036a4 <HAL_DMA_IRQHandler+0x1c8>)
 8103546:	4293      	cmp	r3, r2
 8103548:	d031      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 810354a:	687b      	ldr	r3, [r7, #4]
 810354c:	681b      	ldr	r3, [r3, #0]
 810354e:	4a56      	ldr	r2, [pc, #344]	; (81036a8 <HAL_DMA_IRQHandler+0x1cc>)
 8103550:	4293      	cmp	r3, r2
 8103552:	d02c      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 8103554:	687b      	ldr	r3, [r7, #4]
 8103556:	681b      	ldr	r3, [r3, #0]
 8103558:	4a54      	ldr	r2, [pc, #336]	; (81036ac <HAL_DMA_IRQHandler+0x1d0>)
 810355a:	4293      	cmp	r3, r2
 810355c:	d027      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 810355e:	687b      	ldr	r3, [r7, #4]
 8103560:	681b      	ldr	r3, [r3, #0]
 8103562:	4a53      	ldr	r2, [pc, #332]	; (81036b0 <HAL_DMA_IRQHandler+0x1d4>)
 8103564:	4293      	cmp	r3, r2
 8103566:	d022      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 8103568:	687b      	ldr	r3, [r7, #4]
 810356a:	681b      	ldr	r3, [r3, #0]
 810356c:	4a51      	ldr	r2, [pc, #324]	; (81036b4 <HAL_DMA_IRQHandler+0x1d8>)
 810356e:	4293      	cmp	r3, r2
 8103570:	d01d      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 8103572:	687b      	ldr	r3, [r7, #4]
 8103574:	681b      	ldr	r3, [r3, #0]
 8103576:	4a50      	ldr	r2, [pc, #320]	; (81036b8 <HAL_DMA_IRQHandler+0x1dc>)
 8103578:	4293      	cmp	r3, r2
 810357a:	d018      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 810357c:	687b      	ldr	r3, [r7, #4]
 810357e:	681b      	ldr	r3, [r3, #0]
 8103580:	4a4e      	ldr	r2, [pc, #312]	; (81036bc <HAL_DMA_IRQHandler+0x1e0>)
 8103582:	4293      	cmp	r3, r2
 8103584:	d013      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 8103586:	687b      	ldr	r3, [r7, #4]
 8103588:	681b      	ldr	r3, [r3, #0]
 810358a:	4a4d      	ldr	r2, [pc, #308]	; (81036c0 <HAL_DMA_IRQHandler+0x1e4>)
 810358c:	4293      	cmp	r3, r2
 810358e:	d00e      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 8103590:	687b      	ldr	r3, [r7, #4]
 8103592:	681b      	ldr	r3, [r3, #0]
 8103594:	4a4b      	ldr	r2, [pc, #300]	; (81036c4 <HAL_DMA_IRQHandler+0x1e8>)
 8103596:	4293      	cmp	r3, r2
 8103598:	d009      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 810359a:	687b      	ldr	r3, [r7, #4]
 810359c:	681b      	ldr	r3, [r3, #0]
 810359e:	4a4a      	ldr	r2, [pc, #296]	; (81036c8 <HAL_DMA_IRQHandler+0x1ec>)
 81035a0:	4293      	cmp	r3, r2
 81035a2:	d004      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 81035a4:	687b      	ldr	r3, [r7, #4]
 81035a6:	681b      	ldr	r3, [r3, #0]
 81035a8:	4a48      	ldr	r2, [pc, #288]	; (81036cc <HAL_DMA_IRQHandler+0x1f0>)
 81035aa:	4293      	cmp	r3, r2
 81035ac:	d101      	bne.n	81035b2 <HAL_DMA_IRQHandler+0xd6>
 81035ae:	2301      	movs	r3, #1
 81035b0:	e000      	b.n	81035b4 <HAL_DMA_IRQHandler+0xd8>
 81035b2:	2300      	movs	r3, #0
 81035b4:	2b00      	cmp	r3, #0
 81035b6:	f000 842b 	beq.w	8103e10 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81035ba:	687b      	ldr	r3, [r7, #4]
 81035bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81035be:	f003 031f 	and.w	r3, r3, #31
 81035c2:	2208      	movs	r2, #8
 81035c4:	409a      	lsls	r2, r3
 81035c6:	69bb      	ldr	r3, [r7, #24]
 81035c8:	4013      	ands	r3, r2
 81035ca:	2b00      	cmp	r3, #0
 81035cc:	f000 80a2 	beq.w	8103714 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 81035d0:	687b      	ldr	r3, [r7, #4]
 81035d2:	681b      	ldr	r3, [r3, #0]
 81035d4:	4a2e      	ldr	r2, [pc, #184]	; (8103690 <HAL_DMA_IRQHandler+0x1b4>)
 81035d6:	4293      	cmp	r3, r2
 81035d8:	d04a      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 81035da:	687b      	ldr	r3, [r7, #4]
 81035dc:	681b      	ldr	r3, [r3, #0]
 81035de:	4a2d      	ldr	r2, [pc, #180]	; (8103694 <HAL_DMA_IRQHandler+0x1b8>)
 81035e0:	4293      	cmp	r3, r2
 81035e2:	d045      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 81035e4:	687b      	ldr	r3, [r7, #4]
 81035e6:	681b      	ldr	r3, [r3, #0]
 81035e8:	4a2b      	ldr	r2, [pc, #172]	; (8103698 <HAL_DMA_IRQHandler+0x1bc>)
 81035ea:	4293      	cmp	r3, r2
 81035ec:	d040      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 81035ee:	687b      	ldr	r3, [r7, #4]
 81035f0:	681b      	ldr	r3, [r3, #0]
 81035f2:	4a2a      	ldr	r2, [pc, #168]	; (810369c <HAL_DMA_IRQHandler+0x1c0>)
 81035f4:	4293      	cmp	r3, r2
 81035f6:	d03b      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 81035f8:	687b      	ldr	r3, [r7, #4]
 81035fa:	681b      	ldr	r3, [r3, #0]
 81035fc:	4a28      	ldr	r2, [pc, #160]	; (81036a0 <HAL_DMA_IRQHandler+0x1c4>)
 81035fe:	4293      	cmp	r3, r2
 8103600:	d036      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 8103602:	687b      	ldr	r3, [r7, #4]
 8103604:	681b      	ldr	r3, [r3, #0]
 8103606:	4a27      	ldr	r2, [pc, #156]	; (81036a4 <HAL_DMA_IRQHandler+0x1c8>)
 8103608:	4293      	cmp	r3, r2
 810360a:	d031      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 810360c:	687b      	ldr	r3, [r7, #4]
 810360e:	681b      	ldr	r3, [r3, #0]
 8103610:	4a25      	ldr	r2, [pc, #148]	; (81036a8 <HAL_DMA_IRQHandler+0x1cc>)
 8103612:	4293      	cmp	r3, r2
 8103614:	d02c      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 8103616:	687b      	ldr	r3, [r7, #4]
 8103618:	681b      	ldr	r3, [r3, #0]
 810361a:	4a24      	ldr	r2, [pc, #144]	; (81036ac <HAL_DMA_IRQHandler+0x1d0>)
 810361c:	4293      	cmp	r3, r2
 810361e:	d027      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 8103620:	687b      	ldr	r3, [r7, #4]
 8103622:	681b      	ldr	r3, [r3, #0]
 8103624:	4a22      	ldr	r2, [pc, #136]	; (81036b0 <HAL_DMA_IRQHandler+0x1d4>)
 8103626:	4293      	cmp	r3, r2
 8103628:	d022      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 810362a:	687b      	ldr	r3, [r7, #4]
 810362c:	681b      	ldr	r3, [r3, #0]
 810362e:	4a21      	ldr	r2, [pc, #132]	; (81036b4 <HAL_DMA_IRQHandler+0x1d8>)
 8103630:	4293      	cmp	r3, r2
 8103632:	d01d      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 8103634:	687b      	ldr	r3, [r7, #4]
 8103636:	681b      	ldr	r3, [r3, #0]
 8103638:	4a1f      	ldr	r2, [pc, #124]	; (81036b8 <HAL_DMA_IRQHandler+0x1dc>)
 810363a:	4293      	cmp	r3, r2
 810363c:	d018      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 810363e:	687b      	ldr	r3, [r7, #4]
 8103640:	681b      	ldr	r3, [r3, #0]
 8103642:	4a1e      	ldr	r2, [pc, #120]	; (81036bc <HAL_DMA_IRQHandler+0x1e0>)
 8103644:	4293      	cmp	r3, r2
 8103646:	d013      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 8103648:	687b      	ldr	r3, [r7, #4]
 810364a:	681b      	ldr	r3, [r3, #0]
 810364c:	4a1c      	ldr	r2, [pc, #112]	; (81036c0 <HAL_DMA_IRQHandler+0x1e4>)
 810364e:	4293      	cmp	r3, r2
 8103650:	d00e      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 8103652:	687b      	ldr	r3, [r7, #4]
 8103654:	681b      	ldr	r3, [r3, #0]
 8103656:	4a1b      	ldr	r2, [pc, #108]	; (81036c4 <HAL_DMA_IRQHandler+0x1e8>)
 8103658:	4293      	cmp	r3, r2
 810365a:	d009      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 810365c:	687b      	ldr	r3, [r7, #4]
 810365e:	681b      	ldr	r3, [r3, #0]
 8103660:	4a19      	ldr	r2, [pc, #100]	; (81036c8 <HAL_DMA_IRQHandler+0x1ec>)
 8103662:	4293      	cmp	r3, r2
 8103664:	d004      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 8103666:	687b      	ldr	r3, [r7, #4]
 8103668:	681b      	ldr	r3, [r3, #0]
 810366a:	4a18      	ldr	r2, [pc, #96]	; (81036cc <HAL_DMA_IRQHandler+0x1f0>)
 810366c:	4293      	cmp	r3, r2
 810366e:	d12f      	bne.n	81036d0 <HAL_DMA_IRQHandler+0x1f4>
 8103670:	687b      	ldr	r3, [r7, #4]
 8103672:	681b      	ldr	r3, [r3, #0]
 8103674:	681b      	ldr	r3, [r3, #0]
 8103676:	f003 0304 	and.w	r3, r3, #4
 810367a:	2b00      	cmp	r3, #0
 810367c:	bf14      	ite	ne
 810367e:	2301      	movne	r3, #1
 8103680:	2300      	moveq	r3, #0
 8103682:	b2db      	uxtb	r3, r3
 8103684:	e02e      	b.n	81036e4 <HAL_DMA_IRQHandler+0x208>
 8103686:	bf00      	nop
 8103688:	10000000 	.word	0x10000000
 810368c:	1b4e81b5 	.word	0x1b4e81b5
 8103690:	40020010 	.word	0x40020010
 8103694:	40020028 	.word	0x40020028
 8103698:	40020040 	.word	0x40020040
 810369c:	40020058 	.word	0x40020058
 81036a0:	40020070 	.word	0x40020070
 81036a4:	40020088 	.word	0x40020088
 81036a8:	400200a0 	.word	0x400200a0
 81036ac:	400200b8 	.word	0x400200b8
 81036b0:	40020410 	.word	0x40020410
 81036b4:	40020428 	.word	0x40020428
 81036b8:	40020440 	.word	0x40020440
 81036bc:	40020458 	.word	0x40020458
 81036c0:	40020470 	.word	0x40020470
 81036c4:	40020488 	.word	0x40020488
 81036c8:	400204a0 	.word	0x400204a0
 81036cc:	400204b8 	.word	0x400204b8
 81036d0:	687b      	ldr	r3, [r7, #4]
 81036d2:	681b      	ldr	r3, [r3, #0]
 81036d4:	681b      	ldr	r3, [r3, #0]
 81036d6:	f003 0308 	and.w	r3, r3, #8
 81036da:	2b00      	cmp	r3, #0
 81036dc:	bf14      	ite	ne
 81036de:	2301      	movne	r3, #1
 81036e0:	2300      	moveq	r3, #0
 81036e2:	b2db      	uxtb	r3, r3
 81036e4:	2b00      	cmp	r3, #0
 81036e6:	d015      	beq.n	8103714 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 81036e8:	687b      	ldr	r3, [r7, #4]
 81036ea:	681b      	ldr	r3, [r3, #0]
 81036ec:	681a      	ldr	r2, [r3, #0]
 81036ee:	687b      	ldr	r3, [r7, #4]
 81036f0:	681b      	ldr	r3, [r3, #0]
 81036f2:	f022 0204 	bic.w	r2, r2, #4
 81036f6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81036f8:	687b      	ldr	r3, [r7, #4]
 81036fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81036fc:	f003 031f 	and.w	r3, r3, #31
 8103700:	2208      	movs	r2, #8
 8103702:	409a      	lsls	r2, r3
 8103704:	6a3b      	ldr	r3, [r7, #32]
 8103706:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8103708:	687b      	ldr	r3, [r7, #4]
 810370a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810370c:	f043 0201 	orr.w	r2, r3, #1
 8103710:	687b      	ldr	r3, [r7, #4]
 8103712:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103714:	687b      	ldr	r3, [r7, #4]
 8103716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103718:	f003 031f 	and.w	r3, r3, #31
 810371c:	69ba      	ldr	r2, [r7, #24]
 810371e:	fa22 f303 	lsr.w	r3, r2, r3
 8103722:	f003 0301 	and.w	r3, r3, #1
 8103726:	2b00      	cmp	r3, #0
 8103728:	d06e      	beq.n	8103808 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 810372a:	687b      	ldr	r3, [r7, #4]
 810372c:	681b      	ldr	r3, [r3, #0]
 810372e:	4a69      	ldr	r2, [pc, #420]	; (81038d4 <HAL_DMA_IRQHandler+0x3f8>)
 8103730:	4293      	cmp	r3, r2
 8103732:	d04a      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 8103734:	687b      	ldr	r3, [r7, #4]
 8103736:	681b      	ldr	r3, [r3, #0]
 8103738:	4a67      	ldr	r2, [pc, #412]	; (81038d8 <HAL_DMA_IRQHandler+0x3fc>)
 810373a:	4293      	cmp	r3, r2
 810373c:	d045      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 810373e:	687b      	ldr	r3, [r7, #4]
 8103740:	681b      	ldr	r3, [r3, #0]
 8103742:	4a66      	ldr	r2, [pc, #408]	; (81038dc <HAL_DMA_IRQHandler+0x400>)
 8103744:	4293      	cmp	r3, r2
 8103746:	d040      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 8103748:	687b      	ldr	r3, [r7, #4]
 810374a:	681b      	ldr	r3, [r3, #0]
 810374c:	4a64      	ldr	r2, [pc, #400]	; (81038e0 <HAL_DMA_IRQHandler+0x404>)
 810374e:	4293      	cmp	r3, r2
 8103750:	d03b      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 8103752:	687b      	ldr	r3, [r7, #4]
 8103754:	681b      	ldr	r3, [r3, #0]
 8103756:	4a63      	ldr	r2, [pc, #396]	; (81038e4 <HAL_DMA_IRQHandler+0x408>)
 8103758:	4293      	cmp	r3, r2
 810375a:	d036      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 810375c:	687b      	ldr	r3, [r7, #4]
 810375e:	681b      	ldr	r3, [r3, #0]
 8103760:	4a61      	ldr	r2, [pc, #388]	; (81038e8 <HAL_DMA_IRQHandler+0x40c>)
 8103762:	4293      	cmp	r3, r2
 8103764:	d031      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 8103766:	687b      	ldr	r3, [r7, #4]
 8103768:	681b      	ldr	r3, [r3, #0]
 810376a:	4a60      	ldr	r2, [pc, #384]	; (81038ec <HAL_DMA_IRQHandler+0x410>)
 810376c:	4293      	cmp	r3, r2
 810376e:	d02c      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 8103770:	687b      	ldr	r3, [r7, #4]
 8103772:	681b      	ldr	r3, [r3, #0]
 8103774:	4a5e      	ldr	r2, [pc, #376]	; (81038f0 <HAL_DMA_IRQHandler+0x414>)
 8103776:	4293      	cmp	r3, r2
 8103778:	d027      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 810377a:	687b      	ldr	r3, [r7, #4]
 810377c:	681b      	ldr	r3, [r3, #0]
 810377e:	4a5d      	ldr	r2, [pc, #372]	; (81038f4 <HAL_DMA_IRQHandler+0x418>)
 8103780:	4293      	cmp	r3, r2
 8103782:	d022      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 8103784:	687b      	ldr	r3, [r7, #4]
 8103786:	681b      	ldr	r3, [r3, #0]
 8103788:	4a5b      	ldr	r2, [pc, #364]	; (81038f8 <HAL_DMA_IRQHandler+0x41c>)
 810378a:	4293      	cmp	r3, r2
 810378c:	d01d      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 810378e:	687b      	ldr	r3, [r7, #4]
 8103790:	681b      	ldr	r3, [r3, #0]
 8103792:	4a5a      	ldr	r2, [pc, #360]	; (81038fc <HAL_DMA_IRQHandler+0x420>)
 8103794:	4293      	cmp	r3, r2
 8103796:	d018      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 8103798:	687b      	ldr	r3, [r7, #4]
 810379a:	681b      	ldr	r3, [r3, #0]
 810379c:	4a58      	ldr	r2, [pc, #352]	; (8103900 <HAL_DMA_IRQHandler+0x424>)
 810379e:	4293      	cmp	r3, r2
 81037a0:	d013      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 81037a2:	687b      	ldr	r3, [r7, #4]
 81037a4:	681b      	ldr	r3, [r3, #0]
 81037a6:	4a57      	ldr	r2, [pc, #348]	; (8103904 <HAL_DMA_IRQHandler+0x428>)
 81037a8:	4293      	cmp	r3, r2
 81037aa:	d00e      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 81037ac:	687b      	ldr	r3, [r7, #4]
 81037ae:	681b      	ldr	r3, [r3, #0]
 81037b0:	4a55      	ldr	r2, [pc, #340]	; (8103908 <HAL_DMA_IRQHandler+0x42c>)
 81037b2:	4293      	cmp	r3, r2
 81037b4:	d009      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 81037b6:	687b      	ldr	r3, [r7, #4]
 81037b8:	681b      	ldr	r3, [r3, #0]
 81037ba:	4a54      	ldr	r2, [pc, #336]	; (810390c <HAL_DMA_IRQHandler+0x430>)
 81037bc:	4293      	cmp	r3, r2
 81037be:	d004      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 81037c0:	687b      	ldr	r3, [r7, #4]
 81037c2:	681b      	ldr	r3, [r3, #0]
 81037c4:	4a52      	ldr	r2, [pc, #328]	; (8103910 <HAL_DMA_IRQHandler+0x434>)
 81037c6:	4293      	cmp	r3, r2
 81037c8:	d10a      	bne.n	81037e0 <HAL_DMA_IRQHandler+0x304>
 81037ca:	687b      	ldr	r3, [r7, #4]
 81037cc:	681b      	ldr	r3, [r3, #0]
 81037ce:	695b      	ldr	r3, [r3, #20]
 81037d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81037d4:	2b00      	cmp	r3, #0
 81037d6:	bf14      	ite	ne
 81037d8:	2301      	movne	r3, #1
 81037da:	2300      	moveq	r3, #0
 81037dc:	b2db      	uxtb	r3, r3
 81037de:	e003      	b.n	81037e8 <HAL_DMA_IRQHandler+0x30c>
 81037e0:	687b      	ldr	r3, [r7, #4]
 81037e2:	681b      	ldr	r3, [r3, #0]
 81037e4:	681b      	ldr	r3, [r3, #0]
 81037e6:	2300      	movs	r3, #0
 81037e8:	2b00      	cmp	r3, #0
 81037ea:	d00d      	beq.n	8103808 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81037ec:	687b      	ldr	r3, [r7, #4]
 81037ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81037f0:	f003 031f 	and.w	r3, r3, #31
 81037f4:	2201      	movs	r2, #1
 81037f6:	409a      	lsls	r2, r3
 81037f8:	6a3b      	ldr	r3, [r7, #32]
 81037fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 81037fc:	687b      	ldr	r3, [r7, #4]
 81037fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103800:	f043 0202 	orr.w	r2, r3, #2
 8103804:	687b      	ldr	r3, [r7, #4]
 8103806:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103808:	687b      	ldr	r3, [r7, #4]
 810380a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810380c:	f003 031f 	and.w	r3, r3, #31
 8103810:	2204      	movs	r2, #4
 8103812:	409a      	lsls	r2, r3
 8103814:	69bb      	ldr	r3, [r7, #24]
 8103816:	4013      	ands	r3, r2
 8103818:	2b00      	cmp	r3, #0
 810381a:	f000 808f 	beq.w	810393c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 810381e:	687b      	ldr	r3, [r7, #4]
 8103820:	681b      	ldr	r3, [r3, #0]
 8103822:	4a2c      	ldr	r2, [pc, #176]	; (81038d4 <HAL_DMA_IRQHandler+0x3f8>)
 8103824:	4293      	cmp	r3, r2
 8103826:	d04a      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 8103828:	687b      	ldr	r3, [r7, #4]
 810382a:	681b      	ldr	r3, [r3, #0]
 810382c:	4a2a      	ldr	r2, [pc, #168]	; (81038d8 <HAL_DMA_IRQHandler+0x3fc>)
 810382e:	4293      	cmp	r3, r2
 8103830:	d045      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 8103832:	687b      	ldr	r3, [r7, #4]
 8103834:	681b      	ldr	r3, [r3, #0]
 8103836:	4a29      	ldr	r2, [pc, #164]	; (81038dc <HAL_DMA_IRQHandler+0x400>)
 8103838:	4293      	cmp	r3, r2
 810383a:	d040      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 810383c:	687b      	ldr	r3, [r7, #4]
 810383e:	681b      	ldr	r3, [r3, #0]
 8103840:	4a27      	ldr	r2, [pc, #156]	; (81038e0 <HAL_DMA_IRQHandler+0x404>)
 8103842:	4293      	cmp	r3, r2
 8103844:	d03b      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 8103846:	687b      	ldr	r3, [r7, #4]
 8103848:	681b      	ldr	r3, [r3, #0]
 810384a:	4a26      	ldr	r2, [pc, #152]	; (81038e4 <HAL_DMA_IRQHandler+0x408>)
 810384c:	4293      	cmp	r3, r2
 810384e:	d036      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 8103850:	687b      	ldr	r3, [r7, #4]
 8103852:	681b      	ldr	r3, [r3, #0]
 8103854:	4a24      	ldr	r2, [pc, #144]	; (81038e8 <HAL_DMA_IRQHandler+0x40c>)
 8103856:	4293      	cmp	r3, r2
 8103858:	d031      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 810385a:	687b      	ldr	r3, [r7, #4]
 810385c:	681b      	ldr	r3, [r3, #0]
 810385e:	4a23      	ldr	r2, [pc, #140]	; (81038ec <HAL_DMA_IRQHandler+0x410>)
 8103860:	4293      	cmp	r3, r2
 8103862:	d02c      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 8103864:	687b      	ldr	r3, [r7, #4]
 8103866:	681b      	ldr	r3, [r3, #0]
 8103868:	4a21      	ldr	r2, [pc, #132]	; (81038f0 <HAL_DMA_IRQHandler+0x414>)
 810386a:	4293      	cmp	r3, r2
 810386c:	d027      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 810386e:	687b      	ldr	r3, [r7, #4]
 8103870:	681b      	ldr	r3, [r3, #0]
 8103872:	4a20      	ldr	r2, [pc, #128]	; (81038f4 <HAL_DMA_IRQHandler+0x418>)
 8103874:	4293      	cmp	r3, r2
 8103876:	d022      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 8103878:	687b      	ldr	r3, [r7, #4]
 810387a:	681b      	ldr	r3, [r3, #0]
 810387c:	4a1e      	ldr	r2, [pc, #120]	; (81038f8 <HAL_DMA_IRQHandler+0x41c>)
 810387e:	4293      	cmp	r3, r2
 8103880:	d01d      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 8103882:	687b      	ldr	r3, [r7, #4]
 8103884:	681b      	ldr	r3, [r3, #0]
 8103886:	4a1d      	ldr	r2, [pc, #116]	; (81038fc <HAL_DMA_IRQHandler+0x420>)
 8103888:	4293      	cmp	r3, r2
 810388a:	d018      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 810388c:	687b      	ldr	r3, [r7, #4]
 810388e:	681b      	ldr	r3, [r3, #0]
 8103890:	4a1b      	ldr	r2, [pc, #108]	; (8103900 <HAL_DMA_IRQHandler+0x424>)
 8103892:	4293      	cmp	r3, r2
 8103894:	d013      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 8103896:	687b      	ldr	r3, [r7, #4]
 8103898:	681b      	ldr	r3, [r3, #0]
 810389a:	4a1a      	ldr	r2, [pc, #104]	; (8103904 <HAL_DMA_IRQHandler+0x428>)
 810389c:	4293      	cmp	r3, r2
 810389e:	d00e      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 81038a0:	687b      	ldr	r3, [r7, #4]
 81038a2:	681b      	ldr	r3, [r3, #0]
 81038a4:	4a18      	ldr	r2, [pc, #96]	; (8103908 <HAL_DMA_IRQHandler+0x42c>)
 81038a6:	4293      	cmp	r3, r2
 81038a8:	d009      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 81038aa:	687b      	ldr	r3, [r7, #4]
 81038ac:	681b      	ldr	r3, [r3, #0]
 81038ae:	4a17      	ldr	r2, [pc, #92]	; (810390c <HAL_DMA_IRQHandler+0x430>)
 81038b0:	4293      	cmp	r3, r2
 81038b2:	d004      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 81038b4:	687b      	ldr	r3, [r7, #4]
 81038b6:	681b      	ldr	r3, [r3, #0]
 81038b8:	4a15      	ldr	r2, [pc, #84]	; (8103910 <HAL_DMA_IRQHandler+0x434>)
 81038ba:	4293      	cmp	r3, r2
 81038bc:	d12a      	bne.n	8103914 <HAL_DMA_IRQHandler+0x438>
 81038be:	687b      	ldr	r3, [r7, #4]
 81038c0:	681b      	ldr	r3, [r3, #0]
 81038c2:	681b      	ldr	r3, [r3, #0]
 81038c4:	f003 0302 	and.w	r3, r3, #2
 81038c8:	2b00      	cmp	r3, #0
 81038ca:	bf14      	ite	ne
 81038cc:	2301      	movne	r3, #1
 81038ce:	2300      	moveq	r3, #0
 81038d0:	b2db      	uxtb	r3, r3
 81038d2:	e023      	b.n	810391c <HAL_DMA_IRQHandler+0x440>
 81038d4:	40020010 	.word	0x40020010
 81038d8:	40020028 	.word	0x40020028
 81038dc:	40020040 	.word	0x40020040
 81038e0:	40020058 	.word	0x40020058
 81038e4:	40020070 	.word	0x40020070
 81038e8:	40020088 	.word	0x40020088
 81038ec:	400200a0 	.word	0x400200a0
 81038f0:	400200b8 	.word	0x400200b8
 81038f4:	40020410 	.word	0x40020410
 81038f8:	40020428 	.word	0x40020428
 81038fc:	40020440 	.word	0x40020440
 8103900:	40020458 	.word	0x40020458
 8103904:	40020470 	.word	0x40020470
 8103908:	40020488 	.word	0x40020488
 810390c:	400204a0 	.word	0x400204a0
 8103910:	400204b8 	.word	0x400204b8
 8103914:	687b      	ldr	r3, [r7, #4]
 8103916:	681b      	ldr	r3, [r3, #0]
 8103918:	681b      	ldr	r3, [r3, #0]
 810391a:	2300      	movs	r3, #0
 810391c:	2b00      	cmp	r3, #0
 810391e:	d00d      	beq.n	810393c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103920:	687b      	ldr	r3, [r7, #4]
 8103922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103924:	f003 031f 	and.w	r3, r3, #31
 8103928:	2204      	movs	r2, #4
 810392a:	409a      	lsls	r2, r3
 810392c:	6a3b      	ldr	r3, [r7, #32]
 810392e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8103930:	687b      	ldr	r3, [r7, #4]
 8103932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103934:	f043 0204 	orr.w	r2, r3, #4
 8103938:	687b      	ldr	r3, [r7, #4]
 810393a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 810393c:	687b      	ldr	r3, [r7, #4]
 810393e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103940:	f003 031f 	and.w	r3, r3, #31
 8103944:	2210      	movs	r2, #16
 8103946:	409a      	lsls	r2, r3
 8103948:	69bb      	ldr	r3, [r7, #24]
 810394a:	4013      	ands	r3, r2
 810394c:	2b00      	cmp	r3, #0
 810394e:	f000 80a6 	beq.w	8103a9e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8103952:	687b      	ldr	r3, [r7, #4]
 8103954:	681b      	ldr	r3, [r3, #0]
 8103956:	4a85      	ldr	r2, [pc, #532]	; (8103b6c <HAL_DMA_IRQHandler+0x690>)
 8103958:	4293      	cmp	r3, r2
 810395a:	d04a      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 810395c:	687b      	ldr	r3, [r7, #4]
 810395e:	681b      	ldr	r3, [r3, #0]
 8103960:	4a83      	ldr	r2, [pc, #524]	; (8103b70 <HAL_DMA_IRQHandler+0x694>)
 8103962:	4293      	cmp	r3, r2
 8103964:	d045      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 8103966:	687b      	ldr	r3, [r7, #4]
 8103968:	681b      	ldr	r3, [r3, #0]
 810396a:	4a82      	ldr	r2, [pc, #520]	; (8103b74 <HAL_DMA_IRQHandler+0x698>)
 810396c:	4293      	cmp	r3, r2
 810396e:	d040      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 8103970:	687b      	ldr	r3, [r7, #4]
 8103972:	681b      	ldr	r3, [r3, #0]
 8103974:	4a80      	ldr	r2, [pc, #512]	; (8103b78 <HAL_DMA_IRQHandler+0x69c>)
 8103976:	4293      	cmp	r3, r2
 8103978:	d03b      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 810397a:	687b      	ldr	r3, [r7, #4]
 810397c:	681b      	ldr	r3, [r3, #0]
 810397e:	4a7f      	ldr	r2, [pc, #508]	; (8103b7c <HAL_DMA_IRQHandler+0x6a0>)
 8103980:	4293      	cmp	r3, r2
 8103982:	d036      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 8103984:	687b      	ldr	r3, [r7, #4]
 8103986:	681b      	ldr	r3, [r3, #0]
 8103988:	4a7d      	ldr	r2, [pc, #500]	; (8103b80 <HAL_DMA_IRQHandler+0x6a4>)
 810398a:	4293      	cmp	r3, r2
 810398c:	d031      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 810398e:	687b      	ldr	r3, [r7, #4]
 8103990:	681b      	ldr	r3, [r3, #0]
 8103992:	4a7c      	ldr	r2, [pc, #496]	; (8103b84 <HAL_DMA_IRQHandler+0x6a8>)
 8103994:	4293      	cmp	r3, r2
 8103996:	d02c      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 8103998:	687b      	ldr	r3, [r7, #4]
 810399a:	681b      	ldr	r3, [r3, #0]
 810399c:	4a7a      	ldr	r2, [pc, #488]	; (8103b88 <HAL_DMA_IRQHandler+0x6ac>)
 810399e:	4293      	cmp	r3, r2
 81039a0:	d027      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 81039a2:	687b      	ldr	r3, [r7, #4]
 81039a4:	681b      	ldr	r3, [r3, #0]
 81039a6:	4a79      	ldr	r2, [pc, #484]	; (8103b8c <HAL_DMA_IRQHandler+0x6b0>)
 81039a8:	4293      	cmp	r3, r2
 81039aa:	d022      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 81039ac:	687b      	ldr	r3, [r7, #4]
 81039ae:	681b      	ldr	r3, [r3, #0]
 81039b0:	4a77      	ldr	r2, [pc, #476]	; (8103b90 <HAL_DMA_IRQHandler+0x6b4>)
 81039b2:	4293      	cmp	r3, r2
 81039b4:	d01d      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 81039b6:	687b      	ldr	r3, [r7, #4]
 81039b8:	681b      	ldr	r3, [r3, #0]
 81039ba:	4a76      	ldr	r2, [pc, #472]	; (8103b94 <HAL_DMA_IRQHandler+0x6b8>)
 81039bc:	4293      	cmp	r3, r2
 81039be:	d018      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 81039c0:	687b      	ldr	r3, [r7, #4]
 81039c2:	681b      	ldr	r3, [r3, #0]
 81039c4:	4a74      	ldr	r2, [pc, #464]	; (8103b98 <HAL_DMA_IRQHandler+0x6bc>)
 81039c6:	4293      	cmp	r3, r2
 81039c8:	d013      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 81039ca:	687b      	ldr	r3, [r7, #4]
 81039cc:	681b      	ldr	r3, [r3, #0]
 81039ce:	4a73      	ldr	r2, [pc, #460]	; (8103b9c <HAL_DMA_IRQHandler+0x6c0>)
 81039d0:	4293      	cmp	r3, r2
 81039d2:	d00e      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 81039d4:	687b      	ldr	r3, [r7, #4]
 81039d6:	681b      	ldr	r3, [r3, #0]
 81039d8:	4a71      	ldr	r2, [pc, #452]	; (8103ba0 <HAL_DMA_IRQHandler+0x6c4>)
 81039da:	4293      	cmp	r3, r2
 81039dc:	d009      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 81039de:	687b      	ldr	r3, [r7, #4]
 81039e0:	681b      	ldr	r3, [r3, #0]
 81039e2:	4a70      	ldr	r2, [pc, #448]	; (8103ba4 <HAL_DMA_IRQHandler+0x6c8>)
 81039e4:	4293      	cmp	r3, r2
 81039e6:	d004      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 81039e8:	687b      	ldr	r3, [r7, #4]
 81039ea:	681b      	ldr	r3, [r3, #0]
 81039ec:	4a6e      	ldr	r2, [pc, #440]	; (8103ba8 <HAL_DMA_IRQHandler+0x6cc>)
 81039ee:	4293      	cmp	r3, r2
 81039f0:	d10a      	bne.n	8103a08 <HAL_DMA_IRQHandler+0x52c>
 81039f2:	687b      	ldr	r3, [r7, #4]
 81039f4:	681b      	ldr	r3, [r3, #0]
 81039f6:	681b      	ldr	r3, [r3, #0]
 81039f8:	f003 0308 	and.w	r3, r3, #8
 81039fc:	2b00      	cmp	r3, #0
 81039fe:	bf14      	ite	ne
 8103a00:	2301      	movne	r3, #1
 8103a02:	2300      	moveq	r3, #0
 8103a04:	b2db      	uxtb	r3, r3
 8103a06:	e009      	b.n	8103a1c <HAL_DMA_IRQHandler+0x540>
 8103a08:	687b      	ldr	r3, [r7, #4]
 8103a0a:	681b      	ldr	r3, [r3, #0]
 8103a0c:	681b      	ldr	r3, [r3, #0]
 8103a0e:	f003 0304 	and.w	r3, r3, #4
 8103a12:	2b00      	cmp	r3, #0
 8103a14:	bf14      	ite	ne
 8103a16:	2301      	movne	r3, #1
 8103a18:	2300      	moveq	r3, #0
 8103a1a:	b2db      	uxtb	r3, r3
 8103a1c:	2b00      	cmp	r3, #0
 8103a1e:	d03e      	beq.n	8103a9e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103a20:	687b      	ldr	r3, [r7, #4]
 8103a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103a24:	f003 031f 	and.w	r3, r3, #31
 8103a28:	2210      	movs	r2, #16
 8103a2a:	409a      	lsls	r2, r3
 8103a2c:	6a3b      	ldr	r3, [r7, #32]
 8103a2e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8103a30:	687b      	ldr	r3, [r7, #4]
 8103a32:	681b      	ldr	r3, [r3, #0]
 8103a34:	681b      	ldr	r3, [r3, #0]
 8103a36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103a3a:	2b00      	cmp	r3, #0
 8103a3c:	d018      	beq.n	8103a70 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8103a3e:	687b      	ldr	r3, [r7, #4]
 8103a40:	681b      	ldr	r3, [r3, #0]
 8103a42:	681b      	ldr	r3, [r3, #0]
 8103a44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8103a48:	2b00      	cmp	r3, #0
 8103a4a:	d108      	bne.n	8103a5e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8103a4c:	687b      	ldr	r3, [r7, #4]
 8103a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103a50:	2b00      	cmp	r3, #0
 8103a52:	d024      	beq.n	8103a9e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8103a54:	687b      	ldr	r3, [r7, #4]
 8103a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103a58:	6878      	ldr	r0, [r7, #4]
 8103a5a:	4798      	blx	r3
 8103a5c:	e01f      	b.n	8103a9e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8103a5e:	687b      	ldr	r3, [r7, #4]
 8103a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103a62:	2b00      	cmp	r3, #0
 8103a64:	d01b      	beq.n	8103a9e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8103a66:	687b      	ldr	r3, [r7, #4]
 8103a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103a6a:	6878      	ldr	r0, [r7, #4]
 8103a6c:	4798      	blx	r3
 8103a6e:	e016      	b.n	8103a9e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8103a70:	687b      	ldr	r3, [r7, #4]
 8103a72:	681b      	ldr	r3, [r3, #0]
 8103a74:	681b      	ldr	r3, [r3, #0]
 8103a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103a7a:	2b00      	cmp	r3, #0
 8103a7c:	d107      	bne.n	8103a8e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8103a7e:	687b      	ldr	r3, [r7, #4]
 8103a80:	681b      	ldr	r3, [r3, #0]
 8103a82:	681a      	ldr	r2, [r3, #0]
 8103a84:	687b      	ldr	r3, [r7, #4]
 8103a86:	681b      	ldr	r3, [r3, #0]
 8103a88:	f022 0208 	bic.w	r2, r2, #8
 8103a8c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8103a8e:	687b      	ldr	r3, [r7, #4]
 8103a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103a92:	2b00      	cmp	r3, #0
 8103a94:	d003      	beq.n	8103a9e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8103a96:	687b      	ldr	r3, [r7, #4]
 8103a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103a9a:	6878      	ldr	r0, [r7, #4]
 8103a9c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103a9e:	687b      	ldr	r3, [r7, #4]
 8103aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103aa2:	f003 031f 	and.w	r3, r3, #31
 8103aa6:	2220      	movs	r2, #32
 8103aa8:	409a      	lsls	r2, r3
 8103aaa:	69bb      	ldr	r3, [r7, #24]
 8103aac:	4013      	ands	r3, r2
 8103aae:	2b00      	cmp	r3, #0
 8103ab0:	f000 8110 	beq.w	8103cd4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8103ab4:	687b      	ldr	r3, [r7, #4]
 8103ab6:	681b      	ldr	r3, [r3, #0]
 8103ab8:	4a2c      	ldr	r2, [pc, #176]	; (8103b6c <HAL_DMA_IRQHandler+0x690>)
 8103aba:	4293      	cmp	r3, r2
 8103abc:	d04a      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103abe:	687b      	ldr	r3, [r7, #4]
 8103ac0:	681b      	ldr	r3, [r3, #0]
 8103ac2:	4a2b      	ldr	r2, [pc, #172]	; (8103b70 <HAL_DMA_IRQHandler+0x694>)
 8103ac4:	4293      	cmp	r3, r2
 8103ac6:	d045      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103ac8:	687b      	ldr	r3, [r7, #4]
 8103aca:	681b      	ldr	r3, [r3, #0]
 8103acc:	4a29      	ldr	r2, [pc, #164]	; (8103b74 <HAL_DMA_IRQHandler+0x698>)
 8103ace:	4293      	cmp	r3, r2
 8103ad0:	d040      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103ad2:	687b      	ldr	r3, [r7, #4]
 8103ad4:	681b      	ldr	r3, [r3, #0]
 8103ad6:	4a28      	ldr	r2, [pc, #160]	; (8103b78 <HAL_DMA_IRQHandler+0x69c>)
 8103ad8:	4293      	cmp	r3, r2
 8103ada:	d03b      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103adc:	687b      	ldr	r3, [r7, #4]
 8103ade:	681b      	ldr	r3, [r3, #0]
 8103ae0:	4a26      	ldr	r2, [pc, #152]	; (8103b7c <HAL_DMA_IRQHandler+0x6a0>)
 8103ae2:	4293      	cmp	r3, r2
 8103ae4:	d036      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103ae6:	687b      	ldr	r3, [r7, #4]
 8103ae8:	681b      	ldr	r3, [r3, #0]
 8103aea:	4a25      	ldr	r2, [pc, #148]	; (8103b80 <HAL_DMA_IRQHandler+0x6a4>)
 8103aec:	4293      	cmp	r3, r2
 8103aee:	d031      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103af0:	687b      	ldr	r3, [r7, #4]
 8103af2:	681b      	ldr	r3, [r3, #0]
 8103af4:	4a23      	ldr	r2, [pc, #140]	; (8103b84 <HAL_DMA_IRQHandler+0x6a8>)
 8103af6:	4293      	cmp	r3, r2
 8103af8:	d02c      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103afa:	687b      	ldr	r3, [r7, #4]
 8103afc:	681b      	ldr	r3, [r3, #0]
 8103afe:	4a22      	ldr	r2, [pc, #136]	; (8103b88 <HAL_DMA_IRQHandler+0x6ac>)
 8103b00:	4293      	cmp	r3, r2
 8103b02:	d027      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103b04:	687b      	ldr	r3, [r7, #4]
 8103b06:	681b      	ldr	r3, [r3, #0]
 8103b08:	4a20      	ldr	r2, [pc, #128]	; (8103b8c <HAL_DMA_IRQHandler+0x6b0>)
 8103b0a:	4293      	cmp	r3, r2
 8103b0c:	d022      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103b0e:	687b      	ldr	r3, [r7, #4]
 8103b10:	681b      	ldr	r3, [r3, #0]
 8103b12:	4a1f      	ldr	r2, [pc, #124]	; (8103b90 <HAL_DMA_IRQHandler+0x6b4>)
 8103b14:	4293      	cmp	r3, r2
 8103b16:	d01d      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103b18:	687b      	ldr	r3, [r7, #4]
 8103b1a:	681b      	ldr	r3, [r3, #0]
 8103b1c:	4a1d      	ldr	r2, [pc, #116]	; (8103b94 <HAL_DMA_IRQHandler+0x6b8>)
 8103b1e:	4293      	cmp	r3, r2
 8103b20:	d018      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103b22:	687b      	ldr	r3, [r7, #4]
 8103b24:	681b      	ldr	r3, [r3, #0]
 8103b26:	4a1c      	ldr	r2, [pc, #112]	; (8103b98 <HAL_DMA_IRQHandler+0x6bc>)
 8103b28:	4293      	cmp	r3, r2
 8103b2a:	d013      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103b2c:	687b      	ldr	r3, [r7, #4]
 8103b2e:	681b      	ldr	r3, [r3, #0]
 8103b30:	4a1a      	ldr	r2, [pc, #104]	; (8103b9c <HAL_DMA_IRQHandler+0x6c0>)
 8103b32:	4293      	cmp	r3, r2
 8103b34:	d00e      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103b36:	687b      	ldr	r3, [r7, #4]
 8103b38:	681b      	ldr	r3, [r3, #0]
 8103b3a:	4a19      	ldr	r2, [pc, #100]	; (8103ba0 <HAL_DMA_IRQHandler+0x6c4>)
 8103b3c:	4293      	cmp	r3, r2
 8103b3e:	d009      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103b40:	687b      	ldr	r3, [r7, #4]
 8103b42:	681b      	ldr	r3, [r3, #0]
 8103b44:	4a17      	ldr	r2, [pc, #92]	; (8103ba4 <HAL_DMA_IRQHandler+0x6c8>)
 8103b46:	4293      	cmp	r3, r2
 8103b48:	d004      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103b4a:	687b      	ldr	r3, [r7, #4]
 8103b4c:	681b      	ldr	r3, [r3, #0]
 8103b4e:	4a16      	ldr	r2, [pc, #88]	; (8103ba8 <HAL_DMA_IRQHandler+0x6cc>)
 8103b50:	4293      	cmp	r3, r2
 8103b52:	d12b      	bne.n	8103bac <HAL_DMA_IRQHandler+0x6d0>
 8103b54:	687b      	ldr	r3, [r7, #4]
 8103b56:	681b      	ldr	r3, [r3, #0]
 8103b58:	681b      	ldr	r3, [r3, #0]
 8103b5a:	f003 0310 	and.w	r3, r3, #16
 8103b5e:	2b00      	cmp	r3, #0
 8103b60:	bf14      	ite	ne
 8103b62:	2301      	movne	r3, #1
 8103b64:	2300      	moveq	r3, #0
 8103b66:	b2db      	uxtb	r3, r3
 8103b68:	e02a      	b.n	8103bc0 <HAL_DMA_IRQHandler+0x6e4>
 8103b6a:	bf00      	nop
 8103b6c:	40020010 	.word	0x40020010
 8103b70:	40020028 	.word	0x40020028
 8103b74:	40020040 	.word	0x40020040
 8103b78:	40020058 	.word	0x40020058
 8103b7c:	40020070 	.word	0x40020070
 8103b80:	40020088 	.word	0x40020088
 8103b84:	400200a0 	.word	0x400200a0
 8103b88:	400200b8 	.word	0x400200b8
 8103b8c:	40020410 	.word	0x40020410
 8103b90:	40020428 	.word	0x40020428
 8103b94:	40020440 	.word	0x40020440
 8103b98:	40020458 	.word	0x40020458
 8103b9c:	40020470 	.word	0x40020470
 8103ba0:	40020488 	.word	0x40020488
 8103ba4:	400204a0 	.word	0x400204a0
 8103ba8:	400204b8 	.word	0x400204b8
 8103bac:	687b      	ldr	r3, [r7, #4]
 8103bae:	681b      	ldr	r3, [r3, #0]
 8103bb0:	681b      	ldr	r3, [r3, #0]
 8103bb2:	f003 0302 	and.w	r3, r3, #2
 8103bb6:	2b00      	cmp	r3, #0
 8103bb8:	bf14      	ite	ne
 8103bba:	2301      	movne	r3, #1
 8103bbc:	2300      	moveq	r3, #0
 8103bbe:	b2db      	uxtb	r3, r3
 8103bc0:	2b00      	cmp	r3, #0
 8103bc2:	f000 8087 	beq.w	8103cd4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103bc6:	687b      	ldr	r3, [r7, #4]
 8103bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103bca:	f003 031f 	and.w	r3, r3, #31
 8103bce:	2220      	movs	r2, #32
 8103bd0:	409a      	lsls	r2, r3
 8103bd2:	6a3b      	ldr	r3, [r7, #32]
 8103bd4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8103bd6:	687b      	ldr	r3, [r7, #4]
 8103bd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8103bdc:	b2db      	uxtb	r3, r3
 8103bde:	2b04      	cmp	r3, #4
 8103be0:	d139      	bne.n	8103c56 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8103be2:	687b      	ldr	r3, [r7, #4]
 8103be4:	681b      	ldr	r3, [r3, #0]
 8103be6:	681a      	ldr	r2, [r3, #0]
 8103be8:	687b      	ldr	r3, [r7, #4]
 8103bea:	681b      	ldr	r3, [r3, #0]
 8103bec:	f022 0216 	bic.w	r2, r2, #22
 8103bf0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8103bf2:	687b      	ldr	r3, [r7, #4]
 8103bf4:	681b      	ldr	r3, [r3, #0]
 8103bf6:	695a      	ldr	r2, [r3, #20]
 8103bf8:	687b      	ldr	r3, [r7, #4]
 8103bfa:	681b      	ldr	r3, [r3, #0]
 8103bfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8103c00:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8103c02:	687b      	ldr	r3, [r7, #4]
 8103c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103c06:	2b00      	cmp	r3, #0
 8103c08:	d103      	bne.n	8103c12 <HAL_DMA_IRQHandler+0x736>
 8103c0a:	687b      	ldr	r3, [r7, #4]
 8103c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103c0e:	2b00      	cmp	r3, #0
 8103c10:	d007      	beq.n	8103c22 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8103c12:	687b      	ldr	r3, [r7, #4]
 8103c14:	681b      	ldr	r3, [r3, #0]
 8103c16:	681a      	ldr	r2, [r3, #0]
 8103c18:	687b      	ldr	r3, [r7, #4]
 8103c1a:	681b      	ldr	r3, [r3, #0]
 8103c1c:	f022 0208 	bic.w	r2, r2, #8
 8103c20:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8103c22:	687b      	ldr	r3, [r7, #4]
 8103c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103c26:	f003 031f 	and.w	r3, r3, #31
 8103c2a:	223f      	movs	r2, #63	; 0x3f
 8103c2c:	409a      	lsls	r2, r3
 8103c2e:	6a3b      	ldr	r3, [r7, #32]
 8103c30:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8103c32:	687b      	ldr	r3, [r7, #4]
 8103c34:	2200      	movs	r2, #0
 8103c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8103c3a:	687b      	ldr	r3, [r7, #4]
 8103c3c:	2201      	movs	r2, #1
 8103c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8103c42:	687b      	ldr	r3, [r7, #4]
 8103c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103c46:	2b00      	cmp	r3, #0
 8103c48:	f000 834a 	beq.w	81042e0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8103c4c:	687b      	ldr	r3, [r7, #4]
 8103c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103c50:	6878      	ldr	r0, [r7, #4]
 8103c52:	4798      	blx	r3
          }
          return;
 8103c54:	e344      	b.n	81042e0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8103c56:	687b      	ldr	r3, [r7, #4]
 8103c58:	681b      	ldr	r3, [r3, #0]
 8103c5a:	681b      	ldr	r3, [r3, #0]
 8103c5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103c60:	2b00      	cmp	r3, #0
 8103c62:	d018      	beq.n	8103c96 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8103c64:	687b      	ldr	r3, [r7, #4]
 8103c66:	681b      	ldr	r3, [r3, #0]
 8103c68:	681b      	ldr	r3, [r3, #0]
 8103c6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8103c6e:	2b00      	cmp	r3, #0
 8103c70:	d108      	bne.n	8103c84 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8103c72:	687b      	ldr	r3, [r7, #4]
 8103c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103c76:	2b00      	cmp	r3, #0
 8103c78:	d02c      	beq.n	8103cd4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8103c7a:	687b      	ldr	r3, [r7, #4]
 8103c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103c7e:	6878      	ldr	r0, [r7, #4]
 8103c80:	4798      	blx	r3
 8103c82:	e027      	b.n	8103cd4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8103c84:	687b      	ldr	r3, [r7, #4]
 8103c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103c88:	2b00      	cmp	r3, #0
 8103c8a:	d023      	beq.n	8103cd4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8103c8c:	687b      	ldr	r3, [r7, #4]
 8103c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103c90:	6878      	ldr	r0, [r7, #4]
 8103c92:	4798      	blx	r3
 8103c94:	e01e      	b.n	8103cd4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8103c96:	687b      	ldr	r3, [r7, #4]
 8103c98:	681b      	ldr	r3, [r3, #0]
 8103c9a:	681b      	ldr	r3, [r3, #0]
 8103c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103ca0:	2b00      	cmp	r3, #0
 8103ca2:	d10f      	bne.n	8103cc4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8103ca4:	687b      	ldr	r3, [r7, #4]
 8103ca6:	681b      	ldr	r3, [r3, #0]
 8103ca8:	681a      	ldr	r2, [r3, #0]
 8103caa:	687b      	ldr	r3, [r7, #4]
 8103cac:	681b      	ldr	r3, [r3, #0]
 8103cae:	f022 0210 	bic.w	r2, r2, #16
 8103cb2:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8103cb4:	687b      	ldr	r3, [r7, #4]
 8103cb6:	2200      	movs	r2, #0
 8103cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8103cbc:	687b      	ldr	r3, [r7, #4]
 8103cbe:	2201      	movs	r2, #1
 8103cc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8103cc4:	687b      	ldr	r3, [r7, #4]
 8103cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103cc8:	2b00      	cmp	r3, #0
 8103cca:	d003      	beq.n	8103cd4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8103ccc:	687b      	ldr	r3, [r7, #4]
 8103cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103cd0:	6878      	ldr	r0, [r7, #4]
 8103cd2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8103cd4:	687b      	ldr	r3, [r7, #4]
 8103cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103cd8:	2b00      	cmp	r3, #0
 8103cda:	f000 8306 	beq.w	81042ea <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8103cde:	687b      	ldr	r3, [r7, #4]
 8103ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103ce2:	f003 0301 	and.w	r3, r3, #1
 8103ce6:	2b00      	cmp	r3, #0
 8103ce8:	f000 8088 	beq.w	8103dfc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8103cec:	687b      	ldr	r3, [r7, #4]
 8103cee:	2204      	movs	r2, #4
 8103cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8103cf4:	687b      	ldr	r3, [r7, #4]
 8103cf6:	681b      	ldr	r3, [r3, #0]
 8103cf8:	4a7a      	ldr	r2, [pc, #488]	; (8103ee4 <HAL_DMA_IRQHandler+0xa08>)
 8103cfa:	4293      	cmp	r3, r2
 8103cfc:	d04a      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103cfe:	687b      	ldr	r3, [r7, #4]
 8103d00:	681b      	ldr	r3, [r3, #0]
 8103d02:	4a79      	ldr	r2, [pc, #484]	; (8103ee8 <HAL_DMA_IRQHandler+0xa0c>)
 8103d04:	4293      	cmp	r3, r2
 8103d06:	d045      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d08:	687b      	ldr	r3, [r7, #4]
 8103d0a:	681b      	ldr	r3, [r3, #0]
 8103d0c:	4a77      	ldr	r2, [pc, #476]	; (8103eec <HAL_DMA_IRQHandler+0xa10>)
 8103d0e:	4293      	cmp	r3, r2
 8103d10:	d040      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d12:	687b      	ldr	r3, [r7, #4]
 8103d14:	681b      	ldr	r3, [r3, #0]
 8103d16:	4a76      	ldr	r2, [pc, #472]	; (8103ef0 <HAL_DMA_IRQHandler+0xa14>)
 8103d18:	4293      	cmp	r3, r2
 8103d1a:	d03b      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d1c:	687b      	ldr	r3, [r7, #4]
 8103d1e:	681b      	ldr	r3, [r3, #0]
 8103d20:	4a74      	ldr	r2, [pc, #464]	; (8103ef4 <HAL_DMA_IRQHandler+0xa18>)
 8103d22:	4293      	cmp	r3, r2
 8103d24:	d036      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d26:	687b      	ldr	r3, [r7, #4]
 8103d28:	681b      	ldr	r3, [r3, #0]
 8103d2a:	4a73      	ldr	r2, [pc, #460]	; (8103ef8 <HAL_DMA_IRQHandler+0xa1c>)
 8103d2c:	4293      	cmp	r3, r2
 8103d2e:	d031      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d30:	687b      	ldr	r3, [r7, #4]
 8103d32:	681b      	ldr	r3, [r3, #0]
 8103d34:	4a71      	ldr	r2, [pc, #452]	; (8103efc <HAL_DMA_IRQHandler+0xa20>)
 8103d36:	4293      	cmp	r3, r2
 8103d38:	d02c      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d3a:	687b      	ldr	r3, [r7, #4]
 8103d3c:	681b      	ldr	r3, [r3, #0]
 8103d3e:	4a70      	ldr	r2, [pc, #448]	; (8103f00 <HAL_DMA_IRQHandler+0xa24>)
 8103d40:	4293      	cmp	r3, r2
 8103d42:	d027      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d44:	687b      	ldr	r3, [r7, #4]
 8103d46:	681b      	ldr	r3, [r3, #0]
 8103d48:	4a6e      	ldr	r2, [pc, #440]	; (8103f04 <HAL_DMA_IRQHandler+0xa28>)
 8103d4a:	4293      	cmp	r3, r2
 8103d4c:	d022      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d4e:	687b      	ldr	r3, [r7, #4]
 8103d50:	681b      	ldr	r3, [r3, #0]
 8103d52:	4a6d      	ldr	r2, [pc, #436]	; (8103f08 <HAL_DMA_IRQHandler+0xa2c>)
 8103d54:	4293      	cmp	r3, r2
 8103d56:	d01d      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d58:	687b      	ldr	r3, [r7, #4]
 8103d5a:	681b      	ldr	r3, [r3, #0]
 8103d5c:	4a6b      	ldr	r2, [pc, #428]	; (8103f0c <HAL_DMA_IRQHandler+0xa30>)
 8103d5e:	4293      	cmp	r3, r2
 8103d60:	d018      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d62:	687b      	ldr	r3, [r7, #4]
 8103d64:	681b      	ldr	r3, [r3, #0]
 8103d66:	4a6a      	ldr	r2, [pc, #424]	; (8103f10 <HAL_DMA_IRQHandler+0xa34>)
 8103d68:	4293      	cmp	r3, r2
 8103d6a:	d013      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d6c:	687b      	ldr	r3, [r7, #4]
 8103d6e:	681b      	ldr	r3, [r3, #0]
 8103d70:	4a68      	ldr	r2, [pc, #416]	; (8103f14 <HAL_DMA_IRQHandler+0xa38>)
 8103d72:	4293      	cmp	r3, r2
 8103d74:	d00e      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d76:	687b      	ldr	r3, [r7, #4]
 8103d78:	681b      	ldr	r3, [r3, #0]
 8103d7a:	4a67      	ldr	r2, [pc, #412]	; (8103f18 <HAL_DMA_IRQHandler+0xa3c>)
 8103d7c:	4293      	cmp	r3, r2
 8103d7e:	d009      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d80:	687b      	ldr	r3, [r7, #4]
 8103d82:	681b      	ldr	r3, [r3, #0]
 8103d84:	4a65      	ldr	r2, [pc, #404]	; (8103f1c <HAL_DMA_IRQHandler+0xa40>)
 8103d86:	4293      	cmp	r3, r2
 8103d88:	d004      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d8a:	687b      	ldr	r3, [r7, #4]
 8103d8c:	681b      	ldr	r3, [r3, #0]
 8103d8e:	4a64      	ldr	r2, [pc, #400]	; (8103f20 <HAL_DMA_IRQHandler+0xa44>)
 8103d90:	4293      	cmp	r3, r2
 8103d92:	d108      	bne.n	8103da6 <HAL_DMA_IRQHandler+0x8ca>
 8103d94:	687b      	ldr	r3, [r7, #4]
 8103d96:	681b      	ldr	r3, [r3, #0]
 8103d98:	681a      	ldr	r2, [r3, #0]
 8103d9a:	687b      	ldr	r3, [r7, #4]
 8103d9c:	681b      	ldr	r3, [r3, #0]
 8103d9e:	f022 0201 	bic.w	r2, r2, #1
 8103da2:	601a      	str	r2, [r3, #0]
 8103da4:	e007      	b.n	8103db6 <HAL_DMA_IRQHandler+0x8da>
 8103da6:	687b      	ldr	r3, [r7, #4]
 8103da8:	681b      	ldr	r3, [r3, #0]
 8103daa:	681a      	ldr	r2, [r3, #0]
 8103dac:	687b      	ldr	r3, [r7, #4]
 8103dae:	681b      	ldr	r3, [r3, #0]
 8103db0:	f022 0201 	bic.w	r2, r2, #1
 8103db4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8103db6:	68fb      	ldr	r3, [r7, #12]
 8103db8:	3301      	adds	r3, #1
 8103dba:	60fb      	str	r3, [r7, #12]
 8103dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103dbe:	429a      	cmp	r2, r3
 8103dc0:	d307      	bcc.n	8103dd2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8103dc2:	687b      	ldr	r3, [r7, #4]
 8103dc4:	681b      	ldr	r3, [r3, #0]
 8103dc6:	681b      	ldr	r3, [r3, #0]
 8103dc8:	f003 0301 	and.w	r3, r3, #1
 8103dcc:	2b00      	cmp	r3, #0
 8103dce:	d1f2      	bne.n	8103db6 <HAL_DMA_IRQHandler+0x8da>
 8103dd0:	e000      	b.n	8103dd4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8103dd2:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8103dd4:	687b      	ldr	r3, [r7, #4]
 8103dd6:	2200      	movs	r2, #0
 8103dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8103ddc:	687b      	ldr	r3, [r7, #4]
 8103dde:	681b      	ldr	r3, [r3, #0]
 8103de0:	681b      	ldr	r3, [r3, #0]
 8103de2:	f003 0301 	and.w	r3, r3, #1
 8103de6:	2b00      	cmp	r3, #0
 8103de8:	d004      	beq.n	8103df4 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8103dea:	687b      	ldr	r3, [r7, #4]
 8103dec:	2203      	movs	r2, #3
 8103dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8103df2:	e003      	b.n	8103dfc <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8103df4:	687b      	ldr	r3, [r7, #4]
 8103df6:	2201      	movs	r2, #1
 8103df8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8103dfc:	687b      	ldr	r3, [r7, #4]
 8103dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103e00:	2b00      	cmp	r3, #0
 8103e02:	f000 8272 	beq.w	81042ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8103e06:	687b      	ldr	r3, [r7, #4]
 8103e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103e0a:	6878      	ldr	r0, [r7, #4]
 8103e0c:	4798      	blx	r3
 8103e0e:	e26c      	b.n	81042ea <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8103e10:	687b      	ldr	r3, [r7, #4]
 8103e12:	681b      	ldr	r3, [r3, #0]
 8103e14:	4a43      	ldr	r2, [pc, #268]	; (8103f24 <HAL_DMA_IRQHandler+0xa48>)
 8103e16:	4293      	cmp	r3, r2
 8103e18:	d022      	beq.n	8103e60 <HAL_DMA_IRQHandler+0x984>
 8103e1a:	687b      	ldr	r3, [r7, #4]
 8103e1c:	681b      	ldr	r3, [r3, #0]
 8103e1e:	4a42      	ldr	r2, [pc, #264]	; (8103f28 <HAL_DMA_IRQHandler+0xa4c>)
 8103e20:	4293      	cmp	r3, r2
 8103e22:	d01d      	beq.n	8103e60 <HAL_DMA_IRQHandler+0x984>
 8103e24:	687b      	ldr	r3, [r7, #4]
 8103e26:	681b      	ldr	r3, [r3, #0]
 8103e28:	4a40      	ldr	r2, [pc, #256]	; (8103f2c <HAL_DMA_IRQHandler+0xa50>)
 8103e2a:	4293      	cmp	r3, r2
 8103e2c:	d018      	beq.n	8103e60 <HAL_DMA_IRQHandler+0x984>
 8103e2e:	687b      	ldr	r3, [r7, #4]
 8103e30:	681b      	ldr	r3, [r3, #0]
 8103e32:	4a3f      	ldr	r2, [pc, #252]	; (8103f30 <HAL_DMA_IRQHandler+0xa54>)
 8103e34:	4293      	cmp	r3, r2
 8103e36:	d013      	beq.n	8103e60 <HAL_DMA_IRQHandler+0x984>
 8103e38:	687b      	ldr	r3, [r7, #4]
 8103e3a:	681b      	ldr	r3, [r3, #0]
 8103e3c:	4a3d      	ldr	r2, [pc, #244]	; (8103f34 <HAL_DMA_IRQHandler+0xa58>)
 8103e3e:	4293      	cmp	r3, r2
 8103e40:	d00e      	beq.n	8103e60 <HAL_DMA_IRQHandler+0x984>
 8103e42:	687b      	ldr	r3, [r7, #4]
 8103e44:	681b      	ldr	r3, [r3, #0]
 8103e46:	4a3c      	ldr	r2, [pc, #240]	; (8103f38 <HAL_DMA_IRQHandler+0xa5c>)
 8103e48:	4293      	cmp	r3, r2
 8103e4a:	d009      	beq.n	8103e60 <HAL_DMA_IRQHandler+0x984>
 8103e4c:	687b      	ldr	r3, [r7, #4]
 8103e4e:	681b      	ldr	r3, [r3, #0]
 8103e50:	4a3a      	ldr	r2, [pc, #232]	; (8103f3c <HAL_DMA_IRQHandler+0xa60>)
 8103e52:	4293      	cmp	r3, r2
 8103e54:	d004      	beq.n	8103e60 <HAL_DMA_IRQHandler+0x984>
 8103e56:	687b      	ldr	r3, [r7, #4]
 8103e58:	681b      	ldr	r3, [r3, #0]
 8103e5a:	4a39      	ldr	r2, [pc, #228]	; (8103f40 <HAL_DMA_IRQHandler+0xa64>)
 8103e5c:	4293      	cmp	r3, r2
 8103e5e:	d101      	bne.n	8103e64 <HAL_DMA_IRQHandler+0x988>
 8103e60:	2301      	movs	r3, #1
 8103e62:	e000      	b.n	8103e66 <HAL_DMA_IRQHandler+0x98a>
 8103e64:	2300      	movs	r3, #0
 8103e66:	2b00      	cmp	r3, #0
 8103e68:	f000 823f 	beq.w	81042ea <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8103e6c:	687b      	ldr	r3, [r7, #4]
 8103e6e:	681b      	ldr	r3, [r3, #0]
 8103e70:	681b      	ldr	r3, [r3, #0]
 8103e72:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8103e74:	687b      	ldr	r3, [r7, #4]
 8103e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103e78:	f003 031f 	and.w	r3, r3, #31
 8103e7c:	2204      	movs	r2, #4
 8103e7e:	409a      	lsls	r2, r3
 8103e80:	697b      	ldr	r3, [r7, #20]
 8103e82:	4013      	ands	r3, r2
 8103e84:	2b00      	cmp	r3, #0
 8103e86:	f000 80cd 	beq.w	8104024 <HAL_DMA_IRQHandler+0xb48>
 8103e8a:	693b      	ldr	r3, [r7, #16]
 8103e8c:	f003 0304 	and.w	r3, r3, #4
 8103e90:	2b00      	cmp	r3, #0
 8103e92:	f000 80c7 	beq.w	8104024 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8103e96:	687b      	ldr	r3, [r7, #4]
 8103e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103e9a:	f003 031f 	and.w	r3, r3, #31
 8103e9e:	2204      	movs	r2, #4
 8103ea0:	409a      	lsls	r2, r3
 8103ea2:	69fb      	ldr	r3, [r7, #28]
 8103ea4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103ea6:	693b      	ldr	r3, [r7, #16]
 8103ea8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103eac:	2b00      	cmp	r3, #0
 8103eae:	d049      	beq.n	8103f44 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8103eb0:	693b      	ldr	r3, [r7, #16]
 8103eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103eb6:	2b00      	cmp	r3, #0
 8103eb8:	d109      	bne.n	8103ece <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8103eba:	687b      	ldr	r3, [r7, #4]
 8103ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103ebe:	2b00      	cmp	r3, #0
 8103ec0:	f000 8210 	beq.w	81042e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8103ec4:	687b      	ldr	r3, [r7, #4]
 8103ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103ec8:	6878      	ldr	r0, [r7, #4]
 8103eca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103ecc:	e20a      	b.n	81042e4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8103ece:	687b      	ldr	r3, [r7, #4]
 8103ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103ed2:	2b00      	cmp	r3, #0
 8103ed4:	f000 8206 	beq.w	81042e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8103ed8:	687b      	ldr	r3, [r7, #4]
 8103eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103edc:	6878      	ldr	r0, [r7, #4]
 8103ede:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103ee0:	e200      	b.n	81042e4 <HAL_DMA_IRQHandler+0xe08>
 8103ee2:	bf00      	nop
 8103ee4:	40020010 	.word	0x40020010
 8103ee8:	40020028 	.word	0x40020028
 8103eec:	40020040 	.word	0x40020040
 8103ef0:	40020058 	.word	0x40020058
 8103ef4:	40020070 	.word	0x40020070
 8103ef8:	40020088 	.word	0x40020088
 8103efc:	400200a0 	.word	0x400200a0
 8103f00:	400200b8 	.word	0x400200b8
 8103f04:	40020410 	.word	0x40020410
 8103f08:	40020428 	.word	0x40020428
 8103f0c:	40020440 	.word	0x40020440
 8103f10:	40020458 	.word	0x40020458
 8103f14:	40020470 	.word	0x40020470
 8103f18:	40020488 	.word	0x40020488
 8103f1c:	400204a0 	.word	0x400204a0
 8103f20:	400204b8 	.word	0x400204b8
 8103f24:	58025408 	.word	0x58025408
 8103f28:	5802541c 	.word	0x5802541c
 8103f2c:	58025430 	.word	0x58025430
 8103f30:	58025444 	.word	0x58025444
 8103f34:	58025458 	.word	0x58025458
 8103f38:	5802546c 	.word	0x5802546c
 8103f3c:	58025480 	.word	0x58025480
 8103f40:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8103f44:	693b      	ldr	r3, [r7, #16]
 8103f46:	f003 0320 	and.w	r3, r3, #32
 8103f4a:	2b00      	cmp	r3, #0
 8103f4c:	d160      	bne.n	8104010 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8103f4e:	687b      	ldr	r3, [r7, #4]
 8103f50:	681b      	ldr	r3, [r3, #0]
 8103f52:	4a8c      	ldr	r2, [pc, #560]	; (8104184 <HAL_DMA_IRQHandler+0xca8>)
 8103f54:	4293      	cmp	r3, r2
 8103f56:	d04a      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103f58:	687b      	ldr	r3, [r7, #4]
 8103f5a:	681b      	ldr	r3, [r3, #0]
 8103f5c:	4a8a      	ldr	r2, [pc, #552]	; (8104188 <HAL_DMA_IRQHandler+0xcac>)
 8103f5e:	4293      	cmp	r3, r2
 8103f60:	d045      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103f62:	687b      	ldr	r3, [r7, #4]
 8103f64:	681b      	ldr	r3, [r3, #0]
 8103f66:	4a89      	ldr	r2, [pc, #548]	; (810418c <HAL_DMA_IRQHandler+0xcb0>)
 8103f68:	4293      	cmp	r3, r2
 8103f6a:	d040      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103f6c:	687b      	ldr	r3, [r7, #4]
 8103f6e:	681b      	ldr	r3, [r3, #0]
 8103f70:	4a87      	ldr	r2, [pc, #540]	; (8104190 <HAL_DMA_IRQHandler+0xcb4>)
 8103f72:	4293      	cmp	r3, r2
 8103f74:	d03b      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103f76:	687b      	ldr	r3, [r7, #4]
 8103f78:	681b      	ldr	r3, [r3, #0]
 8103f7a:	4a86      	ldr	r2, [pc, #536]	; (8104194 <HAL_DMA_IRQHandler+0xcb8>)
 8103f7c:	4293      	cmp	r3, r2
 8103f7e:	d036      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103f80:	687b      	ldr	r3, [r7, #4]
 8103f82:	681b      	ldr	r3, [r3, #0]
 8103f84:	4a84      	ldr	r2, [pc, #528]	; (8104198 <HAL_DMA_IRQHandler+0xcbc>)
 8103f86:	4293      	cmp	r3, r2
 8103f88:	d031      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103f8a:	687b      	ldr	r3, [r7, #4]
 8103f8c:	681b      	ldr	r3, [r3, #0]
 8103f8e:	4a83      	ldr	r2, [pc, #524]	; (810419c <HAL_DMA_IRQHandler+0xcc0>)
 8103f90:	4293      	cmp	r3, r2
 8103f92:	d02c      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103f94:	687b      	ldr	r3, [r7, #4]
 8103f96:	681b      	ldr	r3, [r3, #0]
 8103f98:	4a81      	ldr	r2, [pc, #516]	; (81041a0 <HAL_DMA_IRQHandler+0xcc4>)
 8103f9a:	4293      	cmp	r3, r2
 8103f9c:	d027      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103f9e:	687b      	ldr	r3, [r7, #4]
 8103fa0:	681b      	ldr	r3, [r3, #0]
 8103fa2:	4a80      	ldr	r2, [pc, #512]	; (81041a4 <HAL_DMA_IRQHandler+0xcc8>)
 8103fa4:	4293      	cmp	r3, r2
 8103fa6:	d022      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103fa8:	687b      	ldr	r3, [r7, #4]
 8103faa:	681b      	ldr	r3, [r3, #0]
 8103fac:	4a7e      	ldr	r2, [pc, #504]	; (81041a8 <HAL_DMA_IRQHandler+0xccc>)
 8103fae:	4293      	cmp	r3, r2
 8103fb0:	d01d      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103fb2:	687b      	ldr	r3, [r7, #4]
 8103fb4:	681b      	ldr	r3, [r3, #0]
 8103fb6:	4a7d      	ldr	r2, [pc, #500]	; (81041ac <HAL_DMA_IRQHandler+0xcd0>)
 8103fb8:	4293      	cmp	r3, r2
 8103fba:	d018      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103fbc:	687b      	ldr	r3, [r7, #4]
 8103fbe:	681b      	ldr	r3, [r3, #0]
 8103fc0:	4a7b      	ldr	r2, [pc, #492]	; (81041b0 <HAL_DMA_IRQHandler+0xcd4>)
 8103fc2:	4293      	cmp	r3, r2
 8103fc4:	d013      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103fc6:	687b      	ldr	r3, [r7, #4]
 8103fc8:	681b      	ldr	r3, [r3, #0]
 8103fca:	4a7a      	ldr	r2, [pc, #488]	; (81041b4 <HAL_DMA_IRQHandler+0xcd8>)
 8103fcc:	4293      	cmp	r3, r2
 8103fce:	d00e      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103fd0:	687b      	ldr	r3, [r7, #4]
 8103fd2:	681b      	ldr	r3, [r3, #0]
 8103fd4:	4a78      	ldr	r2, [pc, #480]	; (81041b8 <HAL_DMA_IRQHandler+0xcdc>)
 8103fd6:	4293      	cmp	r3, r2
 8103fd8:	d009      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103fda:	687b      	ldr	r3, [r7, #4]
 8103fdc:	681b      	ldr	r3, [r3, #0]
 8103fde:	4a77      	ldr	r2, [pc, #476]	; (81041bc <HAL_DMA_IRQHandler+0xce0>)
 8103fe0:	4293      	cmp	r3, r2
 8103fe2:	d004      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103fe4:	687b      	ldr	r3, [r7, #4]
 8103fe6:	681b      	ldr	r3, [r3, #0]
 8103fe8:	4a75      	ldr	r2, [pc, #468]	; (81041c0 <HAL_DMA_IRQHandler+0xce4>)
 8103fea:	4293      	cmp	r3, r2
 8103fec:	d108      	bne.n	8104000 <HAL_DMA_IRQHandler+0xb24>
 8103fee:	687b      	ldr	r3, [r7, #4]
 8103ff0:	681b      	ldr	r3, [r3, #0]
 8103ff2:	681a      	ldr	r2, [r3, #0]
 8103ff4:	687b      	ldr	r3, [r7, #4]
 8103ff6:	681b      	ldr	r3, [r3, #0]
 8103ff8:	f022 0208 	bic.w	r2, r2, #8
 8103ffc:	601a      	str	r2, [r3, #0]
 8103ffe:	e007      	b.n	8104010 <HAL_DMA_IRQHandler+0xb34>
 8104000:	687b      	ldr	r3, [r7, #4]
 8104002:	681b      	ldr	r3, [r3, #0]
 8104004:	681a      	ldr	r2, [r3, #0]
 8104006:	687b      	ldr	r3, [r7, #4]
 8104008:	681b      	ldr	r3, [r3, #0]
 810400a:	f022 0204 	bic.w	r2, r2, #4
 810400e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8104010:	687b      	ldr	r3, [r7, #4]
 8104012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104014:	2b00      	cmp	r3, #0
 8104016:	f000 8165 	beq.w	81042e4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 810401a:	687b      	ldr	r3, [r7, #4]
 810401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810401e:	6878      	ldr	r0, [r7, #4]
 8104020:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104022:	e15f      	b.n	81042e4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8104024:	687b      	ldr	r3, [r7, #4]
 8104026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104028:	f003 031f 	and.w	r3, r3, #31
 810402c:	2202      	movs	r2, #2
 810402e:	409a      	lsls	r2, r3
 8104030:	697b      	ldr	r3, [r7, #20]
 8104032:	4013      	ands	r3, r2
 8104034:	2b00      	cmp	r3, #0
 8104036:	f000 80c5 	beq.w	81041c4 <HAL_DMA_IRQHandler+0xce8>
 810403a:	693b      	ldr	r3, [r7, #16]
 810403c:	f003 0302 	and.w	r3, r3, #2
 8104040:	2b00      	cmp	r3, #0
 8104042:	f000 80bf 	beq.w	81041c4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8104046:	687b      	ldr	r3, [r7, #4]
 8104048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810404a:	f003 031f 	and.w	r3, r3, #31
 810404e:	2202      	movs	r2, #2
 8104050:	409a      	lsls	r2, r3
 8104052:	69fb      	ldr	r3, [r7, #28]
 8104054:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104056:	693b      	ldr	r3, [r7, #16]
 8104058:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810405c:	2b00      	cmp	r3, #0
 810405e:	d018      	beq.n	8104092 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8104060:	693b      	ldr	r3, [r7, #16]
 8104062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104066:	2b00      	cmp	r3, #0
 8104068:	d109      	bne.n	810407e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 810406a:	687b      	ldr	r3, [r7, #4]
 810406c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810406e:	2b00      	cmp	r3, #0
 8104070:	f000 813a 	beq.w	81042e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8104074:	687b      	ldr	r3, [r7, #4]
 8104076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104078:	6878      	ldr	r0, [r7, #4]
 810407a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810407c:	e134      	b.n	81042e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 810407e:	687b      	ldr	r3, [r7, #4]
 8104080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104082:	2b00      	cmp	r3, #0
 8104084:	f000 8130 	beq.w	81042e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8104088:	687b      	ldr	r3, [r7, #4]
 810408a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810408c:	6878      	ldr	r0, [r7, #4]
 810408e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104090:	e12a      	b.n	81042e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8104092:	693b      	ldr	r3, [r7, #16]
 8104094:	f003 0320 	and.w	r3, r3, #32
 8104098:	2b00      	cmp	r3, #0
 810409a:	d168      	bne.n	810416e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 810409c:	687b      	ldr	r3, [r7, #4]
 810409e:	681b      	ldr	r3, [r3, #0]
 81040a0:	4a38      	ldr	r2, [pc, #224]	; (8104184 <HAL_DMA_IRQHandler+0xca8>)
 81040a2:	4293      	cmp	r3, r2
 81040a4:	d04a      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 81040a6:	687b      	ldr	r3, [r7, #4]
 81040a8:	681b      	ldr	r3, [r3, #0]
 81040aa:	4a37      	ldr	r2, [pc, #220]	; (8104188 <HAL_DMA_IRQHandler+0xcac>)
 81040ac:	4293      	cmp	r3, r2
 81040ae:	d045      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 81040b0:	687b      	ldr	r3, [r7, #4]
 81040b2:	681b      	ldr	r3, [r3, #0]
 81040b4:	4a35      	ldr	r2, [pc, #212]	; (810418c <HAL_DMA_IRQHandler+0xcb0>)
 81040b6:	4293      	cmp	r3, r2
 81040b8:	d040      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 81040ba:	687b      	ldr	r3, [r7, #4]
 81040bc:	681b      	ldr	r3, [r3, #0]
 81040be:	4a34      	ldr	r2, [pc, #208]	; (8104190 <HAL_DMA_IRQHandler+0xcb4>)
 81040c0:	4293      	cmp	r3, r2
 81040c2:	d03b      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 81040c4:	687b      	ldr	r3, [r7, #4]
 81040c6:	681b      	ldr	r3, [r3, #0]
 81040c8:	4a32      	ldr	r2, [pc, #200]	; (8104194 <HAL_DMA_IRQHandler+0xcb8>)
 81040ca:	4293      	cmp	r3, r2
 81040cc:	d036      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 81040ce:	687b      	ldr	r3, [r7, #4]
 81040d0:	681b      	ldr	r3, [r3, #0]
 81040d2:	4a31      	ldr	r2, [pc, #196]	; (8104198 <HAL_DMA_IRQHandler+0xcbc>)
 81040d4:	4293      	cmp	r3, r2
 81040d6:	d031      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 81040d8:	687b      	ldr	r3, [r7, #4]
 81040da:	681b      	ldr	r3, [r3, #0]
 81040dc:	4a2f      	ldr	r2, [pc, #188]	; (810419c <HAL_DMA_IRQHandler+0xcc0>)
 81040de:	4293      	cmp	r3, r2
 81040e0:	d02c      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 81040e2:	687b      	ldr	r3, [r7, #4]
 81040e4:	681b      	ldr	r3, [r3, #0]
 81040e6:	4a2e      	ldr	r2, [pc, #184]	; (81041a0 <HAL_DMA_IRQHandler+0xcc4>)
 81040e8:	4293      	cmp	r3, r2
 81040ea:	d027      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 81040ec:	687b      	ldr	r3, [r7, #4]
 81040ee:	681b      	ldr	r3, [r3, #0]
 81040f0:	4a2c      	ldr	r2, [pc, #176]	; (81041a4 <HAL_DMA_IRQHandler+0xcc8>)
 81040f2:	4293      	cmp	r3, r2
 81040f4:	d022      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 81040f6:	687b      	ldr	r3, [r7, #4]
 81040f8:	681b      	ldr	r3, [r3, #0]
 81040fa:	4a2b      	ldr	r2, [pc, #172]	; (81041a8 <HAL_DMA_IRQHandler+0xccc>)
 81040fc:	4293      	cmp	r3, r2
 81040fe:	d01d      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 8104100:	687b      	ldr	r3, [r7, #4]
 8104102:	681b      	ldr	r3, [r3, #0]
 8104104:	4a29      	ldr	r2, [pc, #164]	; (81041ac <HAL_DMA_IRQHandler+0xcd0>)
 8104106:	4293      	cmp	r3, r2
 8104108:	d018      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 810410a:	687b      	ldr	r3, [r7, #4]
 810410c:	681b      	ldr	r3, [r3, #0]
 810410e:	4a28      	ldr	r2, [pc, #160]	; (81041b0 <HAL_DMA_IRQHandler+0xcd4>)
 8104110:	4293      	cmp	r3, r2
 8104112:	d013      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 8104114:	687b      	ldr	r3, [r7, #4]
 8104116:	681b      	ldr	r3, [r3, #0]
 8104118:	4a26      	ldr	r2, [pc, #152]	; (81041b4 <HAL_DMA_IRQHandler+0xcd8>)
 810411a:	4293      	cmp	r3, r2
 810411c:	d00e      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 810411e:	687b      	ldr	r3, [r7, #4]
 8104120:	681b      	ldr	r3, [r3, #0]
 8104122:	4a25      	ldr	r2, [pc, #148]	; (81041b8 <HAL_DMA_IRQHandler+0xcdc>)
 8104124:	4293      	cmp	r3, r2
 8104126:	d009      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 8104128:	687b      	ldr	r3, [r7, #4]
 810412a:	681b      	ldr	r3, [r3, #0]
 810412c:	4a23      	ldr	r2, [pc, #140]	; (81041bc <HAL_DMA_IRQHandler+0xce0>)
 810412e:	4293      	cmp	r3, r2
 8104130:	d004      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 8104132:	687b      	ldr	r3, [r7, #4]
 8104134:	681b      	ldr	r3, [r3, #0]
 8104136:	4a22      	ldr	r2, [pc, #136]	; (81041c0 <HAL_DMA_IRQHandler+0xce4>)
 8104138:	4293      	cmp	r3, r2
 810413a:	d108      	bne.n	810414e <HAL_DMA_IRQHandler+0xc72>
 810413c:	687b      	ldr	r3, [r7, #4]
 810413e:	681b      	ldr	r3, [r3, #0]
 8104140:	681a      	ldr	r2, [r3, #0]
 8104142:	687b      	ldr	r3, [r7, #4]
 8104144:	681b      	ldr	r3, [r3, #0]
 8104146:	f022 0214 	bic.w	r2, r2, #20
 810414a:	601a      	str	r2, [r3, #0]
 810414c:	e007      	b.n	810415e <HAL_DMA_IRQHandler+0xc82>
 810414e:	687b      	ldr	r3, [r7, #4]
 8104150:	681b      	ldr	r3, [r3, #0]
 8104152:	681a      	ldr	r2, [r3, #0]
 8104154:	687b      	ldr	r3, [r7, #4]
 8104156:	681b      	ldr	r3, [r3, #0]
 8104158:	f022 020a 	bic.w	r2, r2, #10
 810415c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 810415e:	687b      	ldr	r3, [r7, #4]
 8104160:	2200      	movs	r2, #0
 8104162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8104166:	687b      	ldr	r3, [r7, #4]
 8104168:	2201      	movs	r2, #1
 810416a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 810416e:	687b      	ldr	r3, [r7, #4]
 8104170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104172:	2b00      	cmp	r3, #0
 8104174:	f000 80b8 	beq.w	81042e8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8104178:	687b      	ldr	r3, [r7, #4]
 810417a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810417c:	6878      	ldr	r0, [r7, #4]
 810417e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104180:	e0b2      	b.n	81042e8 <HAL_DMA_IRQHandler+0xe0c>
 8104182:	bf00      	nop
 8104184:	40020010 	.word	0x40020010
 8104188:	40020028 	.word	0x40020028
 810418c:	40020040 	.word	0x40020040
 8104190:	40020058 	.word	0x40020058
 8104194:	40020070 	.word	0x40020070
 8104198:	40020088 	.word	0x40020088
 810419c:	400200a0 	.word	0x400200a0
 81041a0:	400200b8 	.word	0x400200b8
 81041a4:	40020410 	.word	0x40020410
 81041a8:	40020428 	.word	0x40020428
 81041ac:	40020440 	.word	0x40020440
 81041b0:	40020458 	.word	0x40020458
 81041b4:	40020470 	.word	0x40020470
 81041b8:	40020488 	.word	0x40020488
 81041bc:	400204a0 	.word	0x400204a0
 81041c0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 81041c4:	687b      	ldr	r3, [r7, #4]
 81041c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81041c8:	f003 031f 	and.w	r3, r3, #31
 81041cc:	2208      	movs	r2, #8
 81041ce:	409a      	lsls	r2, r3
 81041d0:	697b      	ldr	r3, [r7, #20]
 81041d2:	4013      	ands	r3, r2
 81041d4:	2b00      	cmp	r3, #0
 81041d6:	f000 8088 	beq.w	81042ea <HAL_DMA_IRQHandler+0xe0e>
 81041da:	693b      	ldr	r3, [r7, #16]
 81041dc:	f003 0308 	and.w	r3, r3, #8
 81041e0:	2b00      	cmp	r3, #0
 81041e2:	f000 8082 	beq.w	81042ea <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 81041e6:	687b      	ldr	r3, [r7, #4]
 81041e8:	681b      	ldr	r3, [r3, #0]
 81041ea:	4a41      	ldr	r2, [pc, #260]	; (81042f0 <HAL_DMA_IRQHandler+0xe14>)
 81041ec:	4293      	cmp	r3, r2
 81041ee:	d04a      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 81041f0:	687b      	ldr	r3, [r7, #4]
 81041f2:	681b      	ldr	r3, [r3, #0]
 81041f4:	4a3f      	ldr	r2, [pc, #252]	; (81042f4 <HAL_DMA_IRQHandler+0xe18>)
 81041f6:	4293      	cmp	r3, r2
 81041f8:	d045      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 81041fa:	687b      	ldr	r3, [r7, #4]
 81041fc:	681b      	ldr	r3, [r3, #0]
 81041fe:	4a3e      	ldr	r2, [pc, #248]	; (81042f8 <HAL_DMA_IRQHandler+0xe1c>)
 8104200:	4293      	cmp	r3, r2
 8104202:	d040      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 8104204:	687b      	ldr	r3, [r7, #4]
 8104206:	681b      	ldr	r3, [r3, #0]
 8104208:	4a3c      	ldr	r2, [pc, #240]	; (81042fc <HAL_DMA_IRQHandler+0xe20>)
 810420a:	4293      	cmp	r3, r2
 810420c:	d03b      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 810420e:	687b      	ldr	r3, [r7, #4]
 8104210:	681b      	ldr	r3, [r3, #0]
 8104212:	4a3b      	ldr	r2, [pc, #236]	; (8104300 <HAL_DMA_IRQHandler+0xe24>)
 8104214:	4293      	cmp	r3, r2
 8104216:	d036      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 8104218:	687b      	ldr	r3, [r7, #4]
 810421a:	681b      	ldr	r3, [r3, #0]
 810421c:	4a39      	ldr	r2, [pc, #228]	; (8104304 <HAL_DMA_IRQHandler+0xe28>)
 810421e:	4293      	cmp	r3, r2
 8104220:	d031      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 8104222:	687b      	ldr	r3, [r7, #4]
 8104224:	681b      	ldr	r3, [r3, #0]
 8104226:	4a38      	ldr	r2, [pc, #224]	; (8104308 <HAL_DMA_IRQHandler+0xe2c>)
 8104228:	4293      	cmp	r3, r2
 810422a:	d02c      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 810422c:	687b      	ldr	r3, [r7, #4]
 810422e:	681b      	ldr	r3, [r3, #0]
 8104230:	4a36      	ldr	r2, [pc, #216]	; (810430c <HAL_DMA_IRQHandler+0xe30>)
 8104232:	4293      	cmp	r3, r2
 8104234:	d027      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 8104236:	687b      	ldr	r3, [r7, #4]
 8104238:	681b      	ldr	r3, [r3, #0]
 810423a:	4a35      	ldr	r2, [pc, #212]	; (8104310 <HAL_DMA_IRQHandler+0xe34>)
 810423c:	4293      	cmp	r3, r2
 810423e:	d022      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 8104240:	687b      	ldr	r3, [r7, #4]
 8104242:	681b      	ldr	r3, [r3, #0]
 8104244:	4a33      	ldr	r2, [pc, #204]	; (8104314 <HAL_DMA_IRQHandler+0xe38>)
 8104246:	4293      	cmp	r3, r2
 8104248:	d01d      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 810424a:	687b      	ldr	r3, [r7, #4]
 810424c:	681b      	ldr	r3, [r3, #0]
 810424e:	4a32      	ldr	r2, [pc, #200]	; (8104318 <HAL_DMA_IRQHandler+0xe3c>)
 8104250:	4293      	cmp	r3, r2
 8104252:	d018      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 8104254:	687b      	ldr	r3, [r7, #4]
 8104256:	681b      	ldr	r3, [r3, #0]
 8104258:	4a30      	ldr	r2, [pc, #192]	; (810431c <HAL_DMA_IRQHandler+0xe40>)
 810425a:	4293      	cmp	r3, r2
 810425c:	d013      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 810425e:	687b      	ldr	r3, [r7, #4]
 8104260:	681b      	ldr	r3, [r3, #0]
 8104262:	4a2f      	ldr	r2, [pc, #188]	; (8104320 <HAL_DMA_IRQHandler+0xe44>)
 8104264:	4293      	cmp	r3, r2
 8104266:	d00e      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 8104268:	687b      	ldr	r3, [r7, #4]
 810426a:	681b      	ldr	r3, [r3, #0]
 810426c:	4a2d      	ldr	r2, [pc, #180]	; (8104324 <HAL_DMA_IRQHandler+0xe48>)
 810426e:	4293      	cmp	r3, r2
 8104270:	d009      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 8104272:	687b      	ldr	r3, [r7, #4]
 8104274:	681b      	ldr	r3, [r3, #0]
 8104276:	4a2c      	ldr	r2, [pc, #176]	; (8104328 <HAL_DMA_IRQHandler+0xe4c>)
 8104278:	4293      	cmp	r3, r2
 810427a:	d004      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 810427c:	687b      	ldr	r3, [r7, #4]
 810427e:	681b      	ldr	r3, [r3, #0]
 8104280:	4a2a      	ldr	r2, [pc, #168]	; (810432c <HAL_DMA_IRQHandler+0xe50>)
 8104282:	4293      	cmp	r3, r2
 8104284:	d108      	bne.n	8104298 <HAL_DMA_IRQHandler+0xdbc>
 8104286:	687b      	ldr	r3, [r7, #4]
 8104288:	681b      	ldr	r3, [r3, #0]
 810428a:	681a      	ldr	r2, [r3, #0]
 810428c:	687b      	ldr	r3, [r7, #4]
 810428e:	681b      	ldr	r3, [r3, #0]
 8104290:	f022 021c 	bic.w	r2, r2, #28
 8104294:	601a      	str	r2, [r3, #0]
 8104296:	e007      	b.n	81042a8 <HAL_DMA_IRQHandler+0xdcc>
 8104298:	687b      	ldr	r3, [r7, #4]
 810429a:	681b      	ldr	r3, [r3, #0]
 810429c:	681a      	ldr	r2, [r3, #0]
 810429e:	687b      	ldr	r3, [r7, #4]
 81042a0:	681b      	ldr	r3, [r3, #0]
 81042a2:	f022 020e 	bic.w	r2, r2, #14
 81042a6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 81042a8:	687b      	ldr	r3, [r7, #4]
 81042aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81042ac:	f003 031f 	and.w	r3, r3, #31
 81042b0:	2201      	movs	r2, #1
 81042b2:	409a      	lsls	r2, r3
 81042b4:	69fb      	ldr	r3, [r7, #28]
 81042b6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 81042b8:	687b      	ldr	r3, [r7, #4]
 81042ba:	2201      	movs	r2, #1
 81042bc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 81042be:	687b      	ldr	r3, [r7, #4]
 81042c0:	2200      	movs	r2, #0
 81042c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 81042c6:	687b      	ldr	r3, [r7, #4]
 81042c8:	2201      	movs	r2, #1
 81042ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 81042ce:	687b      	ldr	r3, [r7, #4]
 81042d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81042d2:	2b00      	cmp	r3, #0
 81042d4:	d009      	beq.n	81042ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 81042d6:	687b      	ldr	r3, [r7, #4]
 81042d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81042da:	6878      	ldr	r0, [r7, #4]
 81042dc:	4798      	blx	r3
 81042de:	e004      	b.n	81042ea <HAL_DMA_IRQHandler+0xe0e>
          return;
 81042e0:	bf00      	nop
 81042e2:	e002      	b.n	81042ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81042e4:	bf00      	nop
 81042e6:	e000      	b.n	81042ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81042e8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 81042ea:	3728      	adds	r7, #40	; 0x28
 81042ec:	46bd      	mov	sp, r7
 81042ee:	bd80      	pop	{r7, pc}
 81042f0:	40020010 	.word	0x40020010
 81042f4:	40020028 	.word	0x40020028
 81042f8:	40020040 	.word	0x40020040
 81042fc:	40020058 	.word	0x40020058
 8104300:	40020070 	.word	0x40020070
 8104304:	40020088 	.word	0x40020088
 8104308:	400200a0 	.word	0x400200a0
 810430c:	400200b8 	.word	0x400200b8
 8104310:	40020410 	.word	0x40020410
 8104314:	40020428 	.word	0x40020428
 8104318:	40020440 	.word	0x40020440
 810431c:	40020458 	.word	0x40020458
 8104320:	40020470 	.word	0x40020470
 8104324:	40020488 	.word	0x40020488
 8104328:	400204a0 	.word	0x400204a0
 810432c:	400204b8 	.word	0x400204b8

08104330 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8104330:	b480      	push	{r7}
 8104332:	b087      	sub	sp, #28
 8104334:	af00      	add	r7, sp, #0
 8104336:	60f8      	str	r0, [r7, #12]
 8104338:	60b9      	str	r1, [r7, #8]
 810433a:	607a      	str	r2, [r7, #4]
 810433c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 810433e:	68fb      	ldr	r3, [r7, #12]
 8104340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104342:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8104344:	68fb      	ldr	r3, [r7, #12]
 8104346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104348:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810434a:	68fb      	ldr	r3, [r7, #12]
 810434c:	681b      	ldr	r3, [r3, #0]
 810434e:	4a84      	ldr	r2, [pc, #528]	; (8104560 <DMA_SetConfig+0x230>)
 8104350:	4293      	cmp	r3, r2
 8104352:	d072      	beq.n	810443a <DMA_SetConfig+0x10a>
 8104354:	68fb      	ldr	r3, [r7, #12]
 8104356:	681b      	ldr	r3, [r3, #0]
 8104358:	4a82      	ldr	r2, [pc, #520]	; (8104564 <DMA_SetConfig+0x234>)
 810435a:	4293      	cmp	r3, r2
 810435c:	d06d      	beq.n	810443a <DMA_SetConfig+0x10a>
 810435e:	68fb      	ldr	r3, [r7, #12]
 8104360:	681b      	ldr	r3, [r3, #0]
 8104362:	4a81      	ldr	r2, [pc, #516]	; (8104568 <DMA_SetConfig+0x238>)
 8104364:	4293      	cmp	r3, r2
 8104366:	d068      	beq.n	810443a <DMA_SetConfig+0x10a>
 8104368:	68fb      	ldr	r3, [r7, #12]
 810436a:	681b      	ldr	r3, [r3, #0]
 810436c:	4a7f      	ldr	r2, [pc, #508]	; (810456c <DMA_SetConfig+0x23c>)
 810436e:	4293      	cmp	r3, r2
 8104370:	d063      	beq.n	810443a <DMA_SetConfig+0x10a>
 8104372:	68fb      	ldr	r3, [r7, #12]
 8104374:	681b      	ldr	r3, [r3, #0]
 8104376:	4a7e      	ldr	r2, [pc, #504]	; (8104570 <DMA_SetConfig+0x240>)
 8104378:	4293      	cmp	r3, r2
 810437a:	d05e      	beq.n	810443a <DMA_SetConfig+0x10a>
 810437c:	68fb      	ldr	r3, [r7, #12]
 810437e:	681b      	ldr	r3, [r3, #0]
 8104380:	4a7c      	ldr	r2, [pc, #496]	; (8104574 <DMA_SetConfig+0x244>)
 8104382:	4293      	cmp	r3, r2
 8104384:	d059      	beq.n	810443a <DMA_SetConfig+0x10a>
 8104386:	68fb      	ldr	r3, [r7, #12]
 8104388:	681b      	ldr	r3, [r3, #0]
 810438a:	4a7b      	ldr	r2, [pc, #492]	; (8104578 <DMA_SetConfig+0x248>)
 810438c:	4293      	cmp	r3, r2
 810438e:	d054      	beq.n	810443a <DMA_SetConfig+0x10a>
 8104390:	68fb      	ldr	r3, [r7, #12]
 8104392:	681b      	ldr	r3, [r3, #0]
 8104394:	4a79      	ldr	r2, [pc, #484]	; (810457c <DMA_SetConfig+0x24c>)
 8104396:	4293      	cmp	r3, r2
 8104398:	d04f      	beq.n	810443a <DMA_SetConfig+0x10a>
 810439a:	68fb      	ldr	r3, [r7, #12]
 810439c:	681b      	ldr	r3, [r3, #0]
 810439e:	4a78      	ldr	r2, [pc, #480]	; (8104580 <DMA_SetConfig+0x250>)
 81043a0:	4293      	cmp	r3, r2
 81043a2:	d04a      	beq.n	810443a <DMA_SetConfig+0x10a>
 81043a4:	68fb      	ldr	r3, [r7, #12]
 81043a6:	681b      	ldr	r3, [r3, #0]
 81043a8:	4a76      	ldr	r2, [pc, #472]	; (8104584 <DMA_SetConfig+0x254>)
 81043aa:	4293      	cmp	r3, r2
 81043ac:	d045      	beq.n	810443a <DMA_SetConfig+0x10a>
 81043ae:	68fb      	ldr	r3, [r7, #12]
 81043b0:	681b      	ldr	r3, [r3, #0]
 81043b2:	4a75      	ldr	r2, [pc, #468]	; (8104588 <DMA_SetConfig+0x258>)
 81043b4:	4293      	cmp	r3, r2
 81043b6:	d040      	beq.n	810443a <DMA_SetConfig+0x10a>
 81043b8:	68fb      	ldr	r3, [r7, #12]
 81043ba:	681b      	ldr	r3, [r3, #0]
 81043bc:	4a73      	ldr	r2, [pc, #460]	; (810458c <DMA_SetConfig+0x25c>)
 81043be:	4293      	cmp	r3, r2
 81043c0:	d03b      	beq.n	810443a <DMA_SetConfig+0x10a>
 81043c2:	68fb      	ldr	r3, [r7, #12]
 81043c4:	681b      	ldr	r3, [r3, #0]
 81043c6:	4a72      	ldr	r2, [pc, #456]	; (8104590 <DMA_SetConfig+0x260>)
 81043c8:	4293      	cmp	r3, r2
 81043ca:	d036      	beq.n	810443a <DMA_SetConfig+0x10a>
 81043cc:	68fb      	ldr	r3, [r7, #12]
 81043ce:	681b      	ldr	r3, [r3, #0]
 81043d0:	4a70      	ldr	r2, [pc, #448]	; (8104594 <DMA_SetConfig+0x264>)
 81043d2:	4293      	cmp	r3, r2
 81043d4:	d031      	beq.n	810443a <DMA_SetConfig+0x10a>
 81043d6:	68fb      	ldr	r3, [r7, #12]
 81043d8:	681b      	ldr	r3, [r3, #0]
 81043da:	4a6f      	ldr	r2, [pc, #444]	; (8104598 <DMA_SetConfig+0x268>)
 81043dc:	4293      	cmp	r3, r2
 81043de:	d02c      	beq.n	810443a <DMA_SetConfig+0x10a>
 81043e0:	68fb      	ldr	r3, [r7, #12]
 81043e2:	681b      	ldr	r3, [r3, #0]
 81043e4:	4a6d      	ldr	r2, [pc, #436]	; (810459c <DMA_SetConfig+0x26c>)
 81043e6:	4293      	cmp	r3, r2
 81043e8:	d027      	beq.n	810443a <DMA_SetConfig+0x10a>
 81043ea:	68fb      	ldr	r3, [r7, #12]
 81043ec:	681b      	ldr	r3, [r3, #0]
 81043ee:	4a6c      	ldr	r2, [pc, #432]	; (81045a0 <DMA_SetConfig+0x270>)
 81043f0:	4293      	cmp	r3, r2
 81043f2:	d022      	beq.n	810443a <DMA_SetConfig+0x10a>
 81043f4:	68fb      	ldr	r3, [r7, #12]
 81043f6:	681b      	ldr	r3, [r3, #0]
 81043f8:	4a6a      	ldr	r2, [pc, #424]	; (81045a4 <DMA_SetConfig+0x274>)
 81043fa:	4293      	cmp	r3, r2
 81043fc:	d01d      	beq.n	810443a <DMA_SetConfig+0x10a>
 81043fe:	68fb      	ldr	r3, [r7, #12]
 8104400:	681b      	ldr	r3, [r3, #0]
 8104402:	4a69      	ldr	r2, [pc, #420]	; (81045a8 <DMA_SetConfig+0x278>)
 8104404:	4293      	cmp	r3, r2
 8104406:	d018      	beq.n	810443a <DMA_SetConfig+0x10a>
 8104408:	68fb      	ldr	r3, [r7, #12]
 810440a:	681b      	ldr	r3, [r3, #0]
 810440c:	4a67      	ldr	r2, [pc, #412]	; (81045ac <DMA_SetConfig+0x27c>)
 810440e:	4293      	cmp	r3, r2
 8104410:	d013      	beq.n	810443a <DMA_SetConfig+0x10a>
 8104412:	68fb      	ldr	r3, [r7, #12]
 8104414:	681b      	ldr	r3, [r3, #0]
 8104416:	4a66      	ldr	r2, [pc, #408]	; (81045b0 <DMA_SetConfig+0x280>)
 8104418:	4293      	cmp	r3, r2
 810441a:	d00e      	beq.n	810443a <DMA_SetConfig+0x10a>
 810441c:	68fb      	ldr	r3, [r7, #12]
 810441e:	681b      	ldr	r3, [r3, #0]
 8104420:	4a64      	ldr	r2, [pc, #400]	; (81045b4 <DMA_SetConfig+0x284>)
 8104422:	4293      	cmp	r3, r2
 8104424:	d009      	beq.n	810443a <DMA_SetConfig+0x10a>
 8104426:	68fb      	ldr	r3, [r7, #12]
 8104428:	681b      	ldr	r3, [r3, #0]
 810442a:	4a63      	ldr	r2, [pc, #396]	; (81045b8 <DMA_SetConfig+0x288>)
 810442c:	4293      	cmp	r3, r2
 810442e:	d004      	beq.n	810443a <DMA_SetConfig+0x10a>
 8104430:	68fb      	ldr	r3, [r7, #12]
 8104432:	681b      	ldr	r3, [r3, #0]
 8104434:	4a61      	ldr	r2, [pc, #388]	; (81045bc <DMA_SetConfig+0x28c>)
 8104436:	4293      	cmp	r3, r2
 8104438:	d101      	bne.n	810443e <DMA_SetConfig+0x10e>
 810443a:	2301      	movs	r3, #1
 810443c:	e000      	b.n	8104440 <DMA_SetConfig+0x110>
 810443e:	2300      	movs	r3, #0
 8104440:	2b00      	cmp	r3, #0
 8104442:	d00d      	beq.n	8104460 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8104444:	68fb      	ldr	r3, [r7, #12]
 8104446:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104448:	68fa      	ldr	r2, [r7, #12]
 810444a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 810444c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 810444e:	68fb      	ldr	r3, [r7, #12]
 8104450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104452:	2b00      	cmp	r3, #0
 8104454:	d004      	beq.n	8104460 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8104456:	68fb      	ldr	r3, [r7, #12]
 8104458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810445a:	68fa      	ldr	r2, [r7, #12]
 810445c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 810445e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104460:	68fb      	ldr	r3, [r7, #12]
 8104462:	681b      	ldr	r3, [r3, #0]
 8104464:	4a3e      	ldr	r2, [pc, #248]	; (8104560 <DMA_SetConfig+0x230>)
 8104466:	4293      	cmp	r3, r2
 8104468:	d04a      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 810446a:	68fb      	ldr	r3, [r7, #12]
 810446c:	681b      	ldr	r3, [r3, #0]
 810446e:	4a3d      	ldr	r2, [pc, #244]	; (8104564 <DMA_SetConfig+0x234>)
 8104470:	4293      	cmp	r3, r2
 8104472:	d045      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 8104474:	68fb      	ldr	r3, [r7, #12]
 8104476:	681b      	ldr	r3, [r3, #0]
 8104478:	4a3b      	ldr	r2, [pc, #236]	; (8104568 <DMA_SetConfig+0x238>)
 810447a:	4293      	cmp	r3, r2
 810447c:	d040      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 810447e:	68fb      	ldr	r3, [r7, #12]
 8104480:	681b      	ldr	r3, [r3, #0]
 8104482:	4a3a      	ldr	r2, [pc, #232]	; (810456c <DMA_SetConfig+0x23c>)
 8104484:	4293      	cmp	r3, r2
 8104486:	d03b      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 8104488:	68fb      	ldr	r3, [r7, #12]
 810448a:	681b      	ldr	r3, [r3, #0]
 810448c:	4a38      	ldr	r2, [pc, #224]	; (8104570 <DMA_SetConfig+0x240>)
 810448e:	4293      	cmp	r3, r2
 8104490:	d036      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 8104492:	68fb      	ldr	r3, [r7, #12]
 8104494:	681b      	ldr	r3, [r3, #0]
 8104496:	4a37      	ldr	r2, [pc, #220]	; (8104574 <DMA_SetConfig+0x244>)
 8104498:	4293      	cmp	r3, r2
 810449a:	d031      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 810449c:	68fb      	ldr	r3, [r7, #12]
 810449e:	681b      	ldr	r3, [r3, #0]
 81044a0:	4a35      	ldr	r2, [pc, #212]	; (8104578 <DMA_SetConfig+0x248>)
 81044a2:	4293      	cmp	r3, r2
 81044a4:	d02c      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 81044a6:	68fb      	ldr	r3, [r7, #12]
 81044a8:	681b      	ldr	r3, [r3, #0]
 81044aa:	4a34      	ldr	r2, [pc, #208]	; (810457c <DMA_SetConfig+0x24c>)
 81044ac:	4293      	cmp	r3, r2
 81044ae:	d027      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 81044b0:	68fb      	ldr	r3, [r7, #12]
 81044b2:	681b      	ldr	r3, [r3, #0]
 81044b4:	4a32      	ldr	r2, [pc, #200]	; (8104580 <DMA_SetConfig+0x250>)
 81044b6:	4293      	cmp	r3, r2
 81044b8:	d022      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 81044ba:	68fb      	ldr	r3, [r7, #12]
 81044bc:	681b      	ldr	r3, [r3, #0]
 81044be:	4a31      	ldr	r2, [pc, #196]	; (8104584 <DMA_SetConfig+0x254>)
 81044c0:	4293      	cmp	r3, r2
 81044c2:	d01d      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 81044c4:	68fb      	ldr	r3, [r7, #12]
 81044c6:	681b      	ldr	r3, [r3, #0]
 81044c8:	4a2f      	ldr	r2, [pc, #188]	; (8104588 <DMA_SetConfig+0x258>)
 81044ca:	4293      	cmp	r3, r2
 81044cc:	d018      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 81044ce:	68fb      	ldr	r3, [r7, #12]
 81044d0:	681b      	ldr	r3, [r3, #0]
 81044d2:	4a2e      	ldr	r2, [pc, #184]	; (810458c <DMA_SetConfig+0x25c>)
 81044d4:	4293      	cmp	r3, r2
 81044d6:	d013      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 81044d8:	68fb      	ldr	r3, [r7, #12]
 81044da:	681b      	ldr	r3, [r3, #0]
 81044dc:	4a2c      	ldr	r2, [pc, #176]	; (8104590 <DMA_SetConfig+0x260>)
 81044de:	4293      	cmp	r3, r2
 81044e0:	d00e      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 81044e2:	68fb      	ldr	r3, [r7, #12]
 81044e4:	681b      	ldr	r3, [r3, #0]
 81044e6:	4a2b      	ldr	r2, [pc, #172]	; (8104594 <DMA_SetConfig+0x264>)
 81044e8:	4293      	cmp	r3, r2
 81044ea:	d009      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 81044ec:	68fb      	ldr	r3, [r7, #12]
 81044ee:	681b      	ldr	r3, [r3, #0]
 81044f0:	4a29      	ldr	r2, [pc, #164]	; (8104598 <DMA_SetConfig+0x268>)
 81044f2:	4293      	cmp	r3, r2
 81044f4:	d004      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 81044f6:	68fb      	ldr	r3, [r7, #12]
 81044f8:	681b      	ldr	r3, [r3, #0]
 81044fa:	4a28      	ldr	r2, [pc, #160]	; (810459c <DMA_SetConfig+0x26c>)
 81044fc:	4293      	cmp	r3, r2
 81044fe:	d101      	bne.n	8104504 <DMA_SetConfig+0x1d4>
 8104500:	2301      	movs	r3, #1
 8104502:	e000      	b.n	8104506 <DMA_SetConfig+0x1d6>
 8104504:	2300      	movs	r3, #0
 8104506:	2b00      	cmp	r3, #0
 8104508:	d05a      	beq.n	81045c0 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 810450a:	68fb      	ldr	r3, [r7, #12]
 810450c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810450e:	f003 031f 	and.w	r3, r3, #31
 8104512:	223f      	movs	r2, #63	; 0x3f
 8104514:	409a      	lsls	r2, r3
 8104516:	697b      	ldr	r3, [r7, #20]
 8104518:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 810451a:	68fb      	ldr	r3, [r7, #12]
 810451c:	681b      	ldr	r3, [r3, #0]
 810451e:	681a      	ldr	r2, [r3, #0]
 8104520:	68fb      	ldr	r3, [r7, #12]
 8104522:	681b      	ldr	r3, [r3, #0]
 8104524:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8104528:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 810452a:	68fb      	ldr	r3, [r7, #12]
 810452c:	681b      	ldr	r3, [r3, #0]
 810452e:	683a      	ldr	r2, [r7, #0]
 8104530:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8104532:	68fb      	ldr	r3, [r7, #12]
 8104534:	689b      	ldr	r3, [r3, #8]
 8104536:	2b40      	cmp	r3, #64	; 0x40
 8104538:	d108      	bne.n	810454c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 810453a:	68fb      	ldr	r3, [r7, #12]
 810453c:	681b      	ldr	r3, [r3, #0]
 810453e:	687a      	ldr	r2, [r7, #4]
 8104540:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8104542:	68fb      	ldr	r3, [r7, #12]
 8104544:	681b      	ldr	r3, [r3, #0]
 8104546:	68ba      	ldr	r2, [r7, #8]
 8104548:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 810454a:	e087      	b.n	810465c <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 810454c:	68fb      	ldr	r3, [r7, #12]
 810454e:	681b      	ldr	r3, [r3, #0]
 8104550:	68ba      	ldr	r2, [r7, #8]
 8104552:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8104554:	68fb      	ldr	r3, [r7, #12]
 8104556:	681b      	ldr	r3, [r3, #0]
 8104558:	687a      	ldr	r2, [r7, #4]
 810455a:	60da      	str	r2, [r3, #12]
}
 810455c:	e07e      	b.n	810465c <DMA_SetConfig+0x32c>
 810455e:	bf00      	nop
 8104560:	40020010 	.word	0x40020010
 8104564:	40020028 	.word	0x40020028
 8104568:	40020040 	.word	0x40020040
 810456c:	40020058 	.word	0x40020058
 8104570:	40020070 	.word	0x40020070
 8104574:	40020088 	.word	0x40020088
 8104578:	400200a0 	.word	0x400200a0
 810457c:	400200b8 	.word	0x400200b8
 8104580:	40020410 	.word	0x40020410
 8104584:	40020428 	.word	0x40020428
 8104588:	40020440 	.word	0x40020440
 810458c:	40020458 	.word	0x40020458
 8104590:	40020470 	.word	0x40020470
 8104594:	40020488 	.word	0x40020488
 8104598:	400204a0 	.word	0x400204a0
 810459c:	400204b8 	.word	0x400204b8
 81045a0:	58025408 	.word	0x58025408
 81045a4:	5802541c 	.word	0x5802541c
 81045a8:	58025430 	.word	0x58025430
 81045ac:	58025444 	.word	0x58025444
 81045b0:	58025458 	.word	0x58025458
 81045b4:	5802546c 	.word	0x5802546c
 81045b8:	58025480 	.word	0x58025480
 81045bc:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 81045c0:	68fb      	ldr	r3, [r7, #12]
 81045c2:	681b      	ldr	r3, [r3, #0]
 81045c4:	4a28      	ldr	r2, [pc, #160]	; (8104668 <DMA_SetConfig+0x338>)
 81045c6:	4293      	cmp	r3, r2
 81045c8:	d022      	beq.n	8104610 <DMA_SetConfig+0x2e0>
 81045ca:	68fb      	ldr	r3, [r7, #12]
 81045cc:	681b      	ldr	r3, [r3, #0]
 81045ce:	4a27      	ldr	r2, [pc, #156]	; (810466c <DMA_SetConfig+0x33c>)
 81045d0:	4293      	cmp	r3, r2
 81045d2:	d01d      	beq.n	8104610 <DMA_SetConfig+0x2e0>
 81045d4:	68fb      	ldr	r3, [r7, #12]
 81045d6:	681b      	ldr	r3, [r3, #0]
 81045d8:	4a25      	ldr	r2, [pc, #148]	; (8104670 <DMA_SetConfig+0x340>)
 81045da:	4293      	cmp	r3, r2
 81045dc:	d018      	beq.n	8104610 <DMA_SetConfig+0x2e0>
 81045de:	68fb      	ldr	r3, [r7, #12]
 81045e0:	681b      	ldr	r3, [r3, #0]
 81045e2:	4a24      	ldr	r2, [pc, #144]	; (8104674 <DMA_SetConfig+0x344>)
 81045e4:	4293      	cmp	r3, r2
 81045e6:	d013      	beq.n	8104610 <DMA_SetConfig+0x2e0>
 81045e8:	68fb      	ldr	r3, [r7, #12]
 81045ea:	681b      	ldr	r3, [r3, #0]
 81045ec:	4a22      	ldr	r2, [pc, #136]	; (8104678 <DMA_SetConfig+0x348>)
 81045ee:	4293      	cmp	r3, r2
 81045f0:	d00e      	beq.n	8104610 <DMA_SetConfig+0x2e0>
 81045f2:	68fb      	ldr	r3, [r7, #12]
 81045f4:	681b      	ldr	r3, [r3, #0]
 81045f6:	4a21      	ldr	r2, [pc, #132]	; (810467c <DMA_SetConfig+0x34c>)
 81045f8:	4293      	cmp	r3, r2
 81045fa:	d009      	beq.n	8104610 <DMA_SetConfig+0x2e0>
 81045fc:	68fb      	ldr	r3, [r7, #12]
 81045fe:	681b      	ldr	r3, [r3, #0]
 8104600:	4a1f      	ldr	r2, [pc, #124]	; (8104680 <DMA_SetConfig+0x350>)
 8104602:	4293      	cmp	r3, r2
 8104604:	d004      	beq.n	8104610 <DMA_SetConfig+0x2e0>
 8104606:	68fb      	ldr	r3, [r7, #12]
 8104608:	681b      	ldr	r3, [r3, #0]
 810460a:	4a1e      	ldr	r2, [pc, #120]	; (8104684 <DMA_SetConfig+0x354>)
 810460c:	4293      	cmp	r3, r2
 810460e:	d101      	bne.n	8104614 <DMA_SetConfig+0x2e4>
 8104610:	2301      	movs	r3, #1
 8104612:	e000      	b.n	8104616 <DMA_SetConfig+0x2e6>
 8104614:	2300      	movs	r3, #0
 8104616:	2b00      	cmp	r3, #0
 8104618:	d020      	beq.n	810465c <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 810461a:	68fb      	ldr	r3, [r7, #12]
 810461c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810461e:	f003 031f 	and.w	r3, r3, #31
 8104622:	2201      	movs	r2, #1
 8104624:	409a      	lsls	r2, r3
 8104626:	693b      	ldr	r3, [r7, #16]
 8104628:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 810462a:	68fb      	ldr	r3, [r7, #12]
 810462c:	681b      	ldr	r3, [r3, #0]
 810462e:	683a      	ldr	r2, [r7, #0]
 8104630:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8104632:	68fb      	ldr	r3, [r7, #12]
 8104634:	689b      	ldr	r3, [r3, #8]
 8104636:	2b40      	cmp	r3, #64	; 0x40
 8104638:	d108      	bne.n	810464c <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 810463a:	68fb      	ldr	r3, [r7, #12]
 810463c:	681b      	ldr	r3, [r3, #0]
 810463e:	687a      	ldr	r2, [r7, #4]
 8104640:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8104642:	68fb      	ldr	r3, [r7, #12]
 8104644:	681b      	ldr	r3, [r3, #0]
 8104646:	68ba      	ldr	r2, [r7, #8]
 8104648:	60da      	str	r2, [r3, #12]
}
 810464a:	e007      	b.n	810465c <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 810464c:	68fb      	ldr	r3, [r7, #12]
 810464e:	681b      	ldr	r3, [r3, #0]
 8104650:	68ba      	ldr	r2, [r7, #8]
 8104652:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8104654:	68fb      	ldr	r3, [r7, #12]
 8104656:	681b      	ldr	r3, [r3, #0]
 8104658:	687a      	ldr	r2, [r7, #4]
 810465a:	60da      	str	r2, [r3, #12]
}
 810465c:	bf00      	nop
 810465e:	371c      	adds	r7, #28
 8104660:	46bd      	mov	sp, r7
 8104662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104666:	4770      	bx	lr
 8104668:	58025408 	.word	0x58025408
 810466c:	5802541c 	.word	0x5802541c
 8104670:	58025430 	.word	0x58025430
 8104674:	58025444 	.word	0x58025444
 8104678:	58025458 	.word	0x58025458
 810467c:	5802546c 	.word	0x5802546c
 8104680:	58025480 	.word	0x58025480
 8104684:	58025494 	.word	0x58025494

08104688 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8104688:	b480      	push	{r7}
 810468a:	b085      	sub	sp, #20
 810468c:	af00      	add	r7, sp, #0
 810468e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104690:	687b      	ldr	r3, [r7, #4]
 8104692:	681b      	ldr	r3, [r3, #0]
 8104694:	4a43      	ldr	r2, [pc, #268]	; (81047a4 <DMA_CalcBaseAndBitshift+0x11c>)
 8104696:	4293      	cmp	r3, r2
 8104698:	d04a      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 810469a:	687b      	ldr	r3, [r7, #4]
 810469c:	681b      	ldr	r3, [r3, #0]
 810469e:	4a42      	ldr	r2, [pc, #264]	; (81047a8 <DMA_CalcBaseAndBitshift+0x120>)
 81046a0:	4293      	cmp	r3, r2
 81046a2:	d045      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 81046a4:	687b      	ldr	r3, [r7, #4]
 81046a6:	681b      	ldr	r3, [r3, #0]
 81046a8:	4a40      	ldr	r2, [pc, #256]	; (81047ac <DMA_CalcBaseAndBitshift+0x124>)
 81046aa:	4293      	cmp	r3, r2
 81046ac:	d040      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 81046ae:	687b      	ldr	r3, [r7, #4]
 81046b0:	681b      	ldr	r3, [r3, #0]
 81046b2:	4a3f      	ldr	r2, [pc, #252]	; (81047b0 <DMA_CalcBaseAndBitshift+0x128>)
 81046b4:	4293      	cmp	r3, r2
 81046b6:	d03b      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 81046b8:	687b      	ldr	r3, [r7, #4]
 81046ba:	681b      	ldr	r3, [r3, #0]
 81046bc:	4a3d      	ldr	r2, [pc, #244]	; (81047b4 <DMA_CalcBaseAndBitshift+0x12c>)
 81046be:	4293      	cmp	r3, r2
 81046c0:	d036      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 81046c2:	687b      	ldr	r3, [r7, #4]
 81046c4:	681b      	ldr	r3, [r3, #0]
 81046c6:	4a3c      	ldr	r2, [pc, #240]	; (81047b8 <DMA_CalcBaseAndBitshift+0x130>)
 81046c8:	4293      	cmp	r3, r2
 81046ca:	d031      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 81046cc:	687b      	ldr	r3, [r7, #4]
 81046ce:	681b      	ldr	r3, [r3, #0]
 81046d0:	4a3a      	ldr	r2, [pc, #232]	; (81047bc <DMA_CalcBaseAndBitshift+0x134>)
 81046d2:	4293      	cmp	r3, r2
 81046d4:	d02c      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 81046d6:	687b      	ldr	r3, [r7, #4]
 81046d8:	681b      	ldr	r3, [r3, #0]
 81046da:	4a39      	ldr	r2, [pc, #228]	; (81047c0 <DMA_CalcBaseAndBitshift+0x138>)
 81046dc:	4293      	cmp	r3, r2
 81046de:	d027      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 81046e0:	687b      	ldr	r3, [r7, #4]
 81046e2:	681b      	ldr	r3, [r3, #0]
 81046e4:	4a37      	ldr	r2, [pc, #220]	; (81047c4 <DMA_CalcBaseAndBitshift+0x13c>)
 81046e6:	4293      	cmp	r3, r2
 81046e8:	d022      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 81046ea:	687b      	ldr	r3, [r7, #4]
 81046ec:	681b      	ldr	r3, [r3, #0]
 81046ee:	4a36      	ldr	r2, [pc, #216]	; (81047c8 <DMA_CalcBaseAndBitshift+0x140>)
 81046f0:	4293      	cmp	r3, r2
 81046f2:	d01d      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 81046f4:	687b      	ldr	r3, [r7, #4]
 81046f6:	681b      	ldr	r3, [r3, #0]
 81046f8:	4a34      	ldr	r2, [pc, #208]	; (81047cc <DMA_CalcBaseAndBitshift+0x144>)
 81046fa:	4293      	cmp	r3, r2
 81046fc:	d018      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 81046fe:	687b      	ldr	r3, [r7, #4]
 8104700:	681b      	ldr	r3, [r3, #0]
 8104702:	4a33      	ldr	r2, [pc, #204]	; (81047d0 <DMA_CalcBaseAndBitshift+0x148>)
 8104704:	4293      	cmp	r3, r2
 8104706:	d013      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 8104708:	687b      	ldr	r3, [r7, #4]
 810470a:	681b      	ldr	r3, [r3, #0]
 810470c:	4a31      	ldr	r2, [pc, #196]	; (81047d4 <DMA_CalcBaseAndBitshift+0x14c>)
 810470e:	4293      	cmp	r3, r2
 8104710:	d00e      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 8104712:	687b      	ldr	r3, [r7, #4]
 8104714:	681b      	ldr	r3, [r3, #0]
 8104716:	4a30      	ldr	r2, [pc, #192]	; (81047d8 <DMA_CalcBaseAndBitshift+0x150>)
 8104718:	4293      	cmp	r3, r2
 810471a:	d009      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 810471c:	687b      	ldr	r3, [r7, #4]
 810471e:	681b      	ldr	r3, [r3, #0]
 8104720:	4a2e      	ldr	r2, [pc, #184]	; (81047dc <DMA_CalcBaseAndBitshift+0x154>)
 8104722:	4293      	cmp	r3, r2
 8104724:	d004      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 8104726:	687b      	ldr	r3, [r7, #4]
 8104728:	681b      	ldr	r3, [r3, #0]
 810472a:	4a2d      	ldr	r2, [pc, #180]	; (81047e0 <DMA_CalcBaseAndBitshift+0x158>)
 810472c:	4293      	cmp	r3, r2
 810472e:	d101      	bne.n	8104734 <DMA_CalcBaseAndBitshift+0xac>
 8104730:	2301      	movs	r3, #1
 8104732:	e000      	b.n	8104736 <DMA_CalcBaseAndBitshift+0xae>
 8104734:	2300      	movs	r3, #0
 8104736:	2b00      	cmp	r3, #0
 8104738:	d026      	beq.n	8104788 <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 810473a:	687b      	ldr	r3, [r7, #4]
 810473c:	681b      	ldr	r3, [r3, #0]
 810473e:	b2db      	uxtb	r3, r3
 8104740:	3b10      	subs	r3, #16
 8104742:	4a28      	ldr	r2, [pc, #160]	; (81047e4 <DMA_CalcBaseAndBitshift+0x15c>)
 8104744:	fba2 2303 	umull	r2, r3, r2, r3
 8104748:	091b      	lsrs	r3, r3, #4
 810474a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 810474c:	68fb      	ldr	r3, [r7, #12]
 810474e:	f003 0307 	and.w	r3, r3, #7
 8104752:	4a25      	ldr	r2, [pc, #148]	; (81047e8 <DMA_CalcBaseAndBitshift+0x160>)
 8104754:	5cd3      	ldrb	r3, [r2, r3]
 8104756:	461a      	mov	r2, r3
 8104758:	687b      	ldr	r3, [r7, #4]
 810475a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 810475c:	68fb      	ldr	r3, [r7, #12]
 810475e:	2b03      	cmp	r3, #3
 8104760:	d909      	bls.n	8104776 <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8104762:	687b      	ldr	r3, [r7, #4]
 8104764:	681b      	ldr	r3, [r3, #0]
 8104766:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 810476a:	f023 0303 	bic.w	r3, r3, #3
 810476e:	1d1a      	adds	r2, r3, #4
 8104770:	687b      	ldr	r3, [r7, #4]
 8104772:	659a      	str	r2, [r3, #88]	; 0x58
 8104774:	e00e      	b.n	8104794 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8104776:	687b      	ldr	r3, [r7, #4]
 8104778:	681b      	ldr	r3, [r3, #0]
 810477a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 810477e:	f023 0303 	bic.w	r3, r3, #3
 8104782:	687a      	ldr	r2, [r7, #4]
 8104784:	6593      	str	r3, [r2, #88]	; 0x58
 8104786:	e005      	b.n	8104794 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8104788:	687b      	ldr	r3, [r7, #4]
 810478a:	681b      	ldr	r3, [r3, #0]
 810478c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8104790:	687b      	ldr	r3, [r7, #4]
 8104792:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8104794:	687b      	ldr	r3, [r7, #4]
 8104796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8104798:	4618      	mov	r0, r3
 810479a:	3714      	adds	r7, #20
 810479c:	46bd      	mov	sp, r7
 810479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047a2:	4770      	bx	lr
 81047a4:	40020010 	.word	0x40020010
 81047a8:	40020028 	.word	0x40020028
 81047ac:	40020040 	.word	0x40020040
 81047b0:	40020058 	.word	0x40020058
 81047b4:	40020070 	.word	0x40020070
 81047b8:	40020088 	.word	0x40020088
 81047bc:	400200a0 	.word	0x400200a0
 81047c0:	400200b8 	.word	0x400200b8
 81047c4:	40020410 	.word	0x40020410
 81047c8:	40020428 	.word	0x40020428
 81047cc:	40020440 	.word	0x40020440
 81047d0:	40020458 	.word	0x40020458
 81047d4:	40020470 	.word	0x40020470
 81047d8:	40020488 	.word	0x40020488
 81047dc:	400204a0 	.word	0x400204a0
 81047e0:	400204b8 	.word	0x400204b8
 81047e4:	aaaaaaab 	.word	0xaaaaaaab
 81047e8:	08112a10 	.word	0x08112a10

081047ec <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 81047ec:	b480      	push	{r7}
 81047ee:	b085      	sub	sp, #20
 81047f0:	af00      	add	r7, sp, #0
 81047f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81047f4:	2300      	movs	r3, #0
 81047f6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 81047f8:	687b      	ldr	r3, [r7, #4]
 81047fa:	699b      	ldr	r3, [r3, #24]
 81047fc:	2b00      	cmp	r3, #0
 81047fe:	d120      	bne.n	8104842 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8104800:	687b      	ldr	r3, [r7, #4]
 8104802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104804:	2b03      	cmp	r3, #3
 8104806:	d858      	bhi.n	81048ba <DMA_CheckFifoParam+0xce>
 8104808:	a201      	add	r2, pc, #4	; (adr r2, 8104810 <DMA_CheckFifoParam+0x24>)
 810480a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810480e:	bf00      	nop
 8104810:	08104821 	.word	0x08104821
 8104814:	08104833 	.word	0x08104833
 8104818:	08104821 	.word	0x08104821
 810481c:	081048bb 	.word	0x081048bb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8104820:	687b      	ldr	r3, [r7, #4]
 8104822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104824:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8104828:	2b00      	cmp	r3, #0
 810482a:	d048      	beq.n	81048be <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 810482c:	2301      	movs	r3, #1
 810482e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104830:	e045      	b.n	81048be <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8104832:	687b      	ldr	r3, [r7, #4]
 8104834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104836:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 810483a:	d142      	bne.n	81048c2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 810483c:	2301      	movs	r3, #1
 810483e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104840:	e03f      	b.n	81048c2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8104842:	687b      	ldr	r3, [r7, #4]
 8104844:	699b      	ldr	r3, [r3, #24]
 8104846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810484a:	d123      	bne.n	8104894 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 810484c:	687b      	ldr	r3, [r7, #4]
 810484e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104850:	2b03      	cmp	r3, #3
 8104852:	d838      	bhi.n	81048c6 <DMA_CheckFifoParam+0xda>
 8104854:	a201      	add	r2, pc, #4	; (adr r2, 810485c <DMA_CheckFifoParam+0x70>)
 8104856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810485a:	bf00      	nop
 810485c:	0810486d 	.word	0x0810486d
 8104860:	08104873 	.word	0x08104873
 8104864:	0810486d 	.word	0x0810486d
 8104868:	08104885 	.word	0x08104885
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 810486c:	2301      	movs	r3, #1
 810486e:	73fb      	strb	r3, [r7, #15]
        break;
 8104870:	e030      	b.n	81048d4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8104872:	687b      	ldr	r3, [r7, #4]
 8104874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104876:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810487a:	2b00      	cmp	r3, #0
 810487c:	d025      	beq.n	81048ca <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 810487e:	2301      	movs	r3, #1
 8104880:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104882:	e022      	b.n	81048ca <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8104884:	687b      	ldr	r3, [r7, #4]
 8104886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104888:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 810488c:	d11f      	bne.n	81048ce <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 810488e:	2301      	movs	r3, #1
 8104890:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104892:	e01c      	b.n	81048ce <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8104894:	687b      	ldr	r3, [r7, #4]
 8104896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104898:	2b02      	cmp	r3, #2
 810489a:	d902      	bls.n	81048a2 <DMA_CheckFifoParam+0xb6>
 810489c:	2b03      	cmp	r3, #3
 810489e:	d003      	beq.n	81048a8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 81048a0:	e018      	b.n	81048d4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 81048a2:	2301      	movs	r3, #1
 81048a4:	73fb      	strb	r3, [r7, #15]
        break;
 81048a6:	e015      	b.n	81048d4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81048a8:	687b      	ldr	r3, [r7, #4]
 81048aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81048ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81048b0:	2b00      	cmp	r3, #0
 81048b2:	d00e      	beq.n	81048d2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 81048b4:	2301      	movs	r3, #1
 81048b6:	73fb      	strb	r3, [r7, #15]
    break;
 81048b8:	e00b      	b.n	81048d2 <DMA_CheckFifoParam+0xe6>
        break;
 81048ba:	bf00      	nop
 81048bc:	e00a      	b.n	81048d4 <DMA_CheckFifoParam+0xe8>
        break;
 81048be:	bf00      	nop
 81048c0:	e008      	b.n	81048d4 <DMA_CheckFifoParam+0xe8>
        break;
 81048c2:	bf00      	nop
 81048c4:	e006      	b.n	81048d4 <DMA_CheckFifoParam+0xe8>
        break;
 81048c6:	bf00      	nop
 81048c8:	e004      	b.n	81048d4 <DMA_CheckFifoParam+0xe8>
        break;
 81048ca:	bf00      	nop
 81048cc:	e002      	b.n	81048d4 <DMA_CheckFifoParam+0xe8>
        break;
 81048ce:	bf00      	nop
 81048d0:	e000      	b.n	81048d4 <DMA_CheckFifoParam+0xe8>
    break;
 81048d2:	bf00      	nop
    }
  }

  return status;
 81048d4:	7bfb      	ldrb	r3, [r7, #15]
}
 81048d6:	4618      	mov	r0, r3
 81048d8:	3714      	adds	r7, #20
 81048da:	46bd      	mov	sp, r7
 81048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81048e0:	4770      	bx	lr
 81048e2:	bf00      	nop

081048e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 81048e4:	b480      	push	{r7}
 81048e6:	b085      	sub	sp, #20
 81048e8:	af00      	add	r7, sp, #0
 81048ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 81048ec:	687b      	ldr	r3, [r7, #4]
 81048ee:	681b      	ldr	r3, [r3, #0]
 81048f0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81048f2:	687b      	ldr	r3, [r7, #4]
 81048f4:	681b      	ldr	r3, [r3, #0]
 81048f6:	4a3a      	ldr	r2, [pc, #232]	; (81049e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 81048f8:	4293      	cmp	r3, r2
 81048fa:	d022      	beq.n	8104942 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81048fc:	687b      	ldr	r3, [r7, #4]
 81048fe:	681b      	ldr	r3, [r3, #0]
 8104900:	4a38      	ldr	r2, [pc, #224]	; (81049e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8104902:	4293      	cmp	r3, r2
 8104904:	d01d      	beq.n	8104942 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104906:	687b      	ldr	r3, [r7, #4]
 8104908:	681b      	ldr	r3, [r3, #0]
 810490a:	4a37      	ldr	r2, [pc, #220]	; (81049e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 810490c:	4293      	cmp	r3, r2
 810490e:	d018      	beq.n	8104942 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104910:	687b      	ldr	r3, [r7, #4]
 8104912:	681b      	ldr	r3, [r3, #0]
 8104914:	4a35      	ldr	r2, [pc, #212]	; (81049ec <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8104916:	4293      	cmp	r3, r2
 8104918:	d013      	beq.n	8104942 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810491a:	687b      	ldr	r3, [r7, #4]
 810491c:	681b      	ldr	r3, [r3, #0]
 810491e:	4a34      	ldr	r2, [pc, #208]	; (81049f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8104920:	4293      	cmp	r3, r2
 8104922:	d00e      	beq.n	8104942 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104924:	687b      	ldr	r3, [r7, #4]
 8104926:	681b      	ldr	r3, [r3, #0]
 8104928:	4a32      	ldr	r2, [pc, #200]	; (81049f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 810492a:	4293      	cmp	r3, r2
 810492c:	d009      	beq.n	8104942 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810492e:	687b      	ldr	r3, [r7, #4]
 8104930:	681b      	ldr	r3, [r3, #0]
 8104932:	4a31      	ldr	r2, [pc, #196]	; (81049f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8104934:	4293      	cmp	r3, r2
 8104936:	d004      	beq.n	8104942 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104938:	687b      	ldr	r3, [r7, #4]
 810493a:	681b      	ldr	r3, [r3, #0]
 810493c:	4a2f      	ldr	r2, [pc, #188]	; (81049fc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 810493e:	4293      	cmp	r3, r2
 8104940:	d101      	bne.n	8104946 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8104942:	2301      	movs	r3, #1
 8104944:	e000      	b.n	8104948 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8104946:	2300      	movs	r3, #0
 8104948:	2b00      	cmp	r3, #0
 810494a:	d01c      	beq.n	8104986 <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 810494c:	687b      	ldr	r3, [r7, #4]
 810494e:	681b      	ldr	r3, [r3, #0]
 8104950:	b2db      	uxtb	r3, r3
 8104952:	3b08      	subs	r3, #8
 8104954:	4a2a      	ldr	r2, [pc, #168]	; (8104a00 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8104956:	fba2 2303 	umull	r2, r3, r2, r3
 810495a:	091b      	lsrs	r3, r3, #4
 810495c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 810495e:	68fb      	ldr	r3, [r7, #12]
 8104960:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 8104964:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 8104968:	009b      	lsls	r3, r3, #2
 810496a:	461a      	mov	r2, r3
 810496c:	687b      	ldr	r3, [r7, #4]
 810496e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8104970:	687b      	ldr	r3, [r7, #4]
 8104972:	4a24      	ldr	r2, [pc, #144]	; (8104a04 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8104974:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8104976:	68fb      	ldr	r3, [r7, #12]
 8104978:	f003 031f 	and.w	r3, r3, #31
 810497c:	2201      	movs	r2, #1
 810497e:	409a      	lsls	r2, r3
 8104980:	687b      	ldr	r3, [r7, #4]
 8104982:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8104984:	e026      	b.n	81049d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8104986:	687b      	ldr	r3, [r7, #4]
 8104988:	681b      	ldr	r3, [r3, #0]
 810498a:	b2db      	uxtb	r3, r3
 810498c:	3b10      	subs	r3, #16
 810498e:	4a1e      	ldr	r2, [pc, #120]	; (8104a08 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8104990:	fba2 2303 	umull	r2, r3, r2, r3
 8104994:	091b      	lsrs	r3, r3, #4
 8104996:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8104998:	68bb      	ldr	r3, [r7, #8]
 810499a:	4a1c      	ldr	r2, [pc, #112]	; (8104a0c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 810499c:	4293      	cmp	r3, r2
 810499e:	d806      	bhi.n	81049ae <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 81049a0:	68bb      	ldr	r3, [r7, #8]
 81049a2:	4a1b      	ldr	r2, [pc, #108]	; (8104a10 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 81049a4:	4293      	cmp	r3, r2
 81049a6:	d902      	bls.n	81049ae <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 81049a8:	68fb      	ldr	r3, [r7, #12]
 81049aa:	3308      	adds	r3, #8
 81049ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 81049ae:	68fb      	ldr	r3, [r7, #12]
 81049b0:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 81049b4:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 81049b8:	009b      	lsls	r3, r3, #2
 81049ba:	461a      	mov	r2, r3
 81049bc:	687b      	ldr	r3, [r7, #4]
 81049be:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 81049c0:	687b      	ldr	r3, [r7, #4]
 81049c2:	4a14      	ldr	r2, [pc, #80]	; (8104a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 81049c4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 81049c6:	68fb      	ldr	r3, [r7, #12]
 81049c8:	f003 031f 	and.w	r3, r3, #31
 81049cc:	2201      	movs	r2, #1
 81049ce:	409a      	lsls	r2, r3
 81049d0:	687b      	ldr	r3, [r7, #4]
 81049d2:	669a      	str	r2, [r3, #104]	; 0x68
}
 81049d4:	bf00      	nop
 81049d6:	3714      	adds	r7, #20
 81049d8:	46bd      	mov	sp, r7
 81049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81049de:	4770      	bx	lr
 81049e0:	58025408 	.word	0x58025408
 81049e4:	5802541c 	.word	0x5802541c
 81049e8:	58025430 	.word	0x58025430
 81049ec:	58025444 	.word	0x58025444
 81049f0:	58025458 	.word	0x58025458
 81049f4:	5802546c 	.word	0x5802546c
 81049f8:	58025480 	.word	0x58025480
 81049fc:	58025494 	.word	0x58025494
 8104a00:	cccccccd 	.word	0xcccccccd
 8104a04:	58025880 	.word	0x58025880
 8104a08:	aaaaaaab 	.word	0xaaaaaaab
 8104a0c:	400204b8 	.word	0x400204b8
 8104a10:	4002040f 	.word	0x4002040f
 8104a14:	40020880 	.word	0x40020880

08104a18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8104a18:	b480      	push	{r7}
 8104a1a:	b085      	sub	sp, #20
 8104a1c:	af00      	add	r7, sp, #0
 8104a1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8104a20:	687b      	ldr	r3, [r7, #4]
 8104a22:	685b      	ldr	r3, [r3, #4]
 8104a24:	b2db      	uxtb	r3, r3
 8104a26:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8104a28:	68fb      	ldr	r3, [r7, #12]
 8104a2a:	2b00      	cmp	r3, #0
 8104a2c:	d04a      	beq.n	8104ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8104a2e:	68fb      	ldr	r3, [r7, #12]
 8104a30:	2b08      	cmp	r3, #8
 8104a32:	d847      	bhi.n	8104ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8104a34:	687b      	ldr	r3, [r7, #4]
 8104a36:	681b      	ldr	r3, [r3, #0]
 8104a38:	4a25      	ldr	r2, [pc, #148]	; (8104ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8104a3a:	4293      	cmp	r3, r2
 8104a3c:	d022      	beq.n	8104a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104a3e:	687b      	ldr	r3, [r7, #4]
 8104a40:	681b      	ldr	r3, [r3, #0]
 8104a42:	4a24      	ldr	r2, [pc, #144]	; (8104ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8104a44:	4293      	cmp	r3, r2
 8104a46:	d01d      	beq.n	8104a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104a48:	687b      	ldr	r3, [r7, #4]
 8104a4a:	681b      	ldr	r3, [r3, #0]
 8104a4c:	4a22      	ldr	r2, [pc, #136]	; (8104ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8104a4e:	4293      	cmp	r3, r2
 8104a50:	d018      	beq.n	8104a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104a52:	687b      	ldr	r3, [r7, #4]
 8104a54:	681b      	ldr	r3, [r3, #0]
 8104a56:	4a21      	ldr	r2, [pc, #132]	; (8104adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8104a58:	4293      	cmp	r3, r2
 8104a5a:	d013      	beq.n	8104a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104a5c:	687b      	ldr	r3, [r7, #4]
 8104a5e:	681b      	ldr	r3, [r3, #0]
 8104a60:	4a1f      	ldr	r2, [pc, #124]	; (8104ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8104a62:	4293      	cmp	r3, r2
 8104a64:	d00e      	beq.n	8104a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104a66:	687b      	ldr	r3, [r7, #4]
 8104a68:	681b      	ldr	r3, [r3, #0]
 8104a6a:	4a1e      	ldr	r2, [pc, #120]	; (8104ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8104a6c:	4293      	cmp	r3, r2
 8104a6e:	d009      	beq.n	8104a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104a70:	687b      	ldr	r3, [r7, #4]
 8104a72:	681b      	ldr	r3, [r3, #0]
 8104a74:	4a1c      	ldr	r2, [pc, #112]	; (8104ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8104a76:	4293      	cmp	r3, r2
 8104a78:	d004      	beq.n	8104a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104a7a:	687b      	ldr	r3, [r7, #4]
 8104a7c:	681b      	ldr	r3, [r3, #0]
 8104a7e:	4a1b      	ldr	r2, [pc, #108]	; (8104aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8104a80:	4293      	cmp	r3, r2
 8104a82:	d101      	bne.n	8104a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8104a84:	2301      	movs	r3, #1
 8104a86:	e000      	b.n	8104a8a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8104a88:	2300      	movs	r3, #0
 8104a8a:	2b00      	cmp	r3, #0
 8104a8c:	d00a      	beq.n	8104aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8104a8e:	68fa      	ldr	r2, [r7, #12]
 8104a90:	4b17      	ldr	r3, [pc, #92]	; (8104af0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8104a92:	4413      	add	r3, r2
 8104a94:	009b      	lsls	r3, r3, #2
 8104a96:	461a      	mov	r2, r3
 8104a98:	687b      	ldr	r3, [r7, #4]
 8104a9a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8104a9c:	687b      	ldr	r3, [r7, #4]
 8104a9e:	4a15      	ldr	r2, [pc, #84]	; (8104af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8104aa0:	671a      	str	r2, [r3, #112]	; 0x70
 8104aa2:	e009      	b.n	8104ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8104aa4:	68fa      	ldr	r2, [r7, #12]
 8104aa6:	4b14      	ldr	r3, [pc, #80]	; (8104af8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8104aa8:	4413      	add	r3, r2
 8104aaa:	009b      	lsls	r3, r3, #2
 8104aac:	461a      	mov	r2, r3
 8104aae:	687b      	ldr	r3, [r7, #4]
 8104ab0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8104ab2:	687b      	ldr	r3, [r7, #4]
 8104ab4:	4a11      	ldr	r2, [pc, #68]	; (8104afc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8104ab6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8104ab8:	68fb      	ldr	r3, [r7, #12]
 8104aba:	3b01      	subs	r3, #1
 8104abc:	2201      	movs	r2, #1
 8104abe:	409a      	lsls	r2, r3
 8104ac0:	687b      	ldr	r3, [r7, #4]
 8104ac2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8104ac4:	bf00      	nop
 8104ac6:	3714      	adds	r7, #20
 8104ac8:	46bd      	mov	sp, r7
 8104aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ace:	4770      	bx	lr
 8104ad0:	58025408 	.word	0x58025408
 8104ad4:	5802541c 	.word	0x5802541c
 8104ad8:	58025430 	.word	0x58025430
 8104adc:	58025444 	.word	0x58025444
 8104ae0:	58025458 	.word	0x58025458
 8104ae4:	5802546c 	.word	0x5802546c
 8104ae8:	58025480 	.word	0x58025480
 8104aec:	58025494 	.word	0x58025494
 8104af0:	1600963f 	.word	0x1600963f
 8104af4:	58025940 	.word	0x58025940
 8104af8:	1000823f 	.word	0x1000823f
 8104afc:	40020940 	.word	0x40020940

08104b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8104b00:	b480      	push	{r7}
 8104b02:	b089      	sub	sp, #36	; 0x24
 8104b04:	af00      	add	r7, sp, #0
 8104b06:	6078      	str	r0, [r7, #4]
 8104b08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8104b0a:	2300      	movs	r3, #0
 8104b0c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8104b0e:	4b89      	ldr	r3, [pc, #548]	; (8104d34 <HAL_GPIO_Init+0x234>)
 8104b10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104b12:	e194      	b.n	8104e3e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8104b14:	683b      	ldr	r3, [r7, #0]
 8104b16:	681a      	ldr	r2, [r3, #0]
 8104b18:	2101      	movs	r1, #1
 8104b1a:	69fb      	ldr	r3, [r7, #28]
 8104b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8104b20:	4013      	ands	r3, r2
 8104b22:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8104b24:	693b      	ldr	r3, [r7, #16]
 8104b26:	2b00      	cmp	r3, #0
 8104b28:	f000 8186 	beq.w	8104e38 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8104b2c:	683b      	ldr	r3, [r7, #0]
 8104b2e:	685b      	ldr	r3, [r3, #4]
 8104b30:	2b01      	cmp	r3, #1
 8104b32:	d00b      	beq.n	8104b4c <HAL_GPIO_Init+0x4c>
 8104b34:	683b      	ldr	r3, [r7, #0]
 8104b36:	685b      	ldr	r3, [r3, #4]
 8104b38:	2b02      	cmp	r3, #2
 8104b3a:	d007      	beq.n	8104b4c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8104b3c:	683b      	ldr	r3, [r7, #0]
 8104b3e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8104b40:	2b11      	cmp	r3, #17
 8104b42:	d003      	beq.n	8104b4c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8104b44:	683b      	ldr	r3, [r7, #0]
 8104b46:	685b      	ldr	r3, [r3, #4]
 8104b48:	2b12      	cmp	r3, #18
 8104b4a:	d130      	bne.n	8104bae <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8104b4c:	687b      	ldr	r3, [r7, #4]
 8104b4e:	689b      	ldr	r3, [r3, #8]
 8104b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8104b52:	69fb      	ldr	r3, [r7, #28]
 8104b54:	005b      	lsls	r3, r3, #1
 8104b56:	2203      	movs	r2, #3
 8104b58:	fa02 f303 	lsl.w	r3, r2, r3
 8104b5c:	43db      	mvns	r3, r3
 8104b5e:	69ba      	ldr	r2, [r7, #24]
 8104b60:	4013      	ands	r3, r2
 8104b62:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8104b64:	683b      	ldr	r3, [r7, #0]
 8104b66:	68da      	ldr	r2, [r3, #12]
 8104b68:	69fb      	ldr	r3, [r7, #28]
 8104b6a:	005b      	lsls	r3, r3, #1
 8104b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8104b70:	69ba      	ldr	r2, [r7, #24]
 8104b72:	4313      	orrs	r3, r2
 8104b74:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8104b76:	687b      	ldr	r3, [r7, #4]
 8104b78:	69ba      	ldr	r2, [r7, #24]
 8104b7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8104b7c:	687b      	ldr	r3, [r7, #4]
 8104b7e:	685b      	ldr	r3, [r3, #4]
 8104b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8104b82:	2201      	movs	r2, #1
 8104b84:	69fb      	ldr	r3, [r7, #28]
 8104b86:	fa02 f303 	lsl.w	r3, r2, r3
 8104b8a:	43db      	mvns	r3, r3
 8104b8c:	69ba      	ldr	r2, [r7, #24]
 8104b8e:	4013      	ands	r3, r2
 8104b90:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8104b92:	683b      	ldr	r3, [r7, #0]
 8104b94:	685b      	ldr	r3, [r3, #4]
 8104b96:	091b      	lsrs	r3, r3, #4
 8104b98:	f003 0201 	and.w	r2, r3, #1
 8104b9c:	69fb      	ldr	r3, [r7, #28]
 8104b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8104ba2:	69ba      	ldr	r2, [r7, #24]
 8104ba4:	4313      	orrs	r3, r2
 8104ba6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8104ba8:	687b      	ldr	r3, [r7, #4]
 8104baa:	69ba      	ldr	r2, [r7, #24]
 8104bac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8104bae:	687b      	ldr	r3, [r7, #4]
 8104bb0:	68db      	ldr	r3, [r3, #12]
 8104bb2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8104bb4:	69fb      	ldr	r3, [r7, #28]
 8104bb6:	005b      	lsls	r3, r3, #1
 8104bb8:	2203      	movs	r2, #3
 8104bba:	fa02 f303 	lsl.w	r3, r2, r3
 8104bbe:	43db      	mvns	r3, r3
 8104bc0:	69ba      	ldr	r2, [r7, #24]
 8104bc2:	4013      	ands	r3, r2
 8104bc4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8104bc6:	683b      	ldr	r3, [r7, #0]
 8104bc8:	689a      	ldr	r2, [r3, #8]
 8104bca:	69fb      	ldr	r3, [r7, #28]
 8104bcc:	005b      	lsls	r3, r3, #1
 8104bce:	fa02 f303 	lsl.w	r3, r2, r3
 8104bd2:	69ba      	ldr	r2, [r7, #24]
 8104bd4:	4313      	orrs	r3, r2
 8104bd6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8104bd8:	687b      	ldr	r3, [r7, #4]
 8104bda:	69ba      	ldr	r2, [r7, #24]
 8104bdc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8104bde:	683b      	ldr	r3, [r7, #0]
 8104be0:	685b      	ldr	r3, [r3, #4]
 8104be2:	2b02      	cmp	r3, #2
 8104be4:	d003      	beq.n	8104bee <HAL_GPIO_Init+0xee>
 8104be6:	683b      	ldr	r3, [r7, #0]
 8104be8:	685b      	ldr	r3, [r3, #4]
 8104bea:	2b12      	cmp	r3, #18
 8104bec:	d123      	bne.n	8104c36 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8104bee:	69fb      	ldr	r3, [r7, #28]
 8104bf0:	08da      	lsrs	r2, r3, #3
 8104bf2:	687b      	ldr	r3, [r7, #4]
 8104bf4:	3208      	adds	r2, #8
 8104bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8104bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8104bfc:	69fb      	ldr	r3, [r7, #28]
 8104bfe:	f003 0307 	and.w	r3, r3, #7
 8104c02:	009b      	lsls	r3, r3, #2
 8104c04:	220f      	movs	r2, #15
 8104c06:	fa02 f303 	lsl.w	r3, r2, r3
 8104c0a:	43db      	mvns	r3, r3
 8104c0c:	69ba      	ldr	r2, [r7, #24]
 8104c0e:	4013      	ands	r3, r2
 8104c10:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8104c12:	683b      	ldr	r3, [r7, #0]
 8104c14:	691a      	ldr	r2, [r3, #16]
 8104c16:	69fb      	ldr	r3, [r7, #28]
 8104c18:	f003 0307 	and.w	r3, r3, #7
 8104c1c:	009b      	lsls	r3, r3, #2
 8104c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8104c22:	69ba      	ldr	r2, [r7, #24]
 8104c24:	4313      	orrs	r3, r2
 8104c26:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8104c28:	69fb      	ldr	r3, [r7, #28]
 8104c2a:	08da      	lsrs	r2, r3, #3
 8104c2c:	687b      	ldr	r3, [r7, #4]
 8104c2e:	3208      	adds	r2, #8
 8104c30:	69b9      	ldr	r1, [r7, #24]
 8104c32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8104c36:	687b      	ldr	r3, [r7, #4]
 8104c38:	681b      	ldr	r3, [r3, #0]
 8104c3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8104c3c:	69fb      	ldr	r3, [r7, #28]
 8104c3e:	005b      	lsls	r3, r3, #1
 8104c40:	2203      	movs	r2, #3
 8104c42:	fa02 f303 	lsl.w	r3, r2, r3
 8104c46:	43db      	mvns	r3, r3
 8104c48:	69ba      	ldr	r2, [r7, #24]
 8104c4a:	4013      	ands	r3, r2
 8104c4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8104c4e:	683b      	ldr	r3, [r7, #0]
 8104c50:	685b      	ldr	r3, [r3, #4]
 8104c52:	f003 0203 	and.w	r2, r3, #3
 8104c56:	69fb      	ldr	r3, [r7, #28]
 8104c58:	005b      	lsls	r3, r3, #1
 8104c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8104c5e:	69ba      	ldr	r2, [r7, #24]
 8104c60:	4313      	orrs	r3, r2
 8104c62:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8104c64:	687b      	ldr	r3, [r7, #4]
 8104c66:	69ba      	ldr	r2, [r7, #24]
 8104c68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8104c6a:	683b      	ldr	r3, [r7, #0]
 8104c6c:	685b      	ldr	r3, [r3, #4]
 8104c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8104c72:	2b00      	cmp	r3, #0
 8104c74:	f000 80e0 	beq.w	8104e38 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8104c78:	4b2f      	ldr	r3, [pc, #188]	; (8104d38 <HAL_GPIO_Init+0x238>)
 8104c7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8104c7e:	4a2e      	ldr	r2, [pc, #184]	; (8104d38 <HAL_GPIO_Init+0x238>)
 8104c80:	f043 0302 	orr.w	r3, r3, #2
 8104c84:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8104c88:	4b2b      	ldr	r3, [pc, #172]	; (8104d38 <HAL_GPIO_Init+0x238>)
 8104c8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8104c8e:	f003 0302 	and.w	r3, r3, #2
 8104c92:	60fb      	str	r3, [r7, #12]
 8104c94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8104c96:	4a29      	ldr	r2, [pc, #164]	; (8104d3c <HAL_GPIO_Init+0x23c>)
 8104c98:	69fb      	ldr	r3, [r7, #28]
 8104c9a:	089b      	lsrs	r3, r3, #2
 8104c9c:	3302      	adds	r3, #2
 8104c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8104ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8104ca4:	69fb      	ldr	r3, [r7, #28]
 8104ca6:	f003 0303 	and.w	r3, r3, #3
 8104caa:	009b      	lsls	r3, r3, #2
 8104cac:	220f      	movs	r2, #15
 8104cae:	fa02 f303 	lsl.w	r3, r2, r3
 8104cb2:	43db      	mvns	r3, r3
 8104cb4:	69ba      	ldr	r2, [r7, #24]
 8104cb6:	4013      	ands	r3, r2
 8104cb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8104cba:	687b      	ldr	r3, [r7, #4]
 8104cbc:	4a20      	ldr	r2, [pc, #128]	; (8104d40 <HAL_GPIO_Init+0x240>)
 8104cbe:	4293      	cmp	r3, r2
 8104cc0:	d052      	beq.n	8104d68 <HAL_GPIO_Init+0x268>
 8104cc2:	687b      	ldr	r3, [r7, #4]
 8104cc4:	4a1f      	ldr	r2, [pc, #124]	; (8104d44 <HAL_GPIO_Init+0x244>)
 8104cc6:	4293      	cmp	r3, r2
 8104cc8:	d031      	beq.n	8104d2e <HAL_GPIO_Init+0x22e>
 8104cca:	687b      	ldr	r3, [r7, #4]
 8104ccc:	4a1e      	ldr	r2, [pc, #120]	; (8104d48 <HAL_GPIO_Init+0x248>)
 8104cce:	4293      	cmp	r3, r2
 8104cd0:	d02b      	beq.n	8104d2a <HAL_GPIO_Init+0x22a>
 8104cd2:	687b      	ldr	r3, [r7, #4]
 8104cd4:	4a1d      	ldr	r2, [pc, #116]	; (8104d4c <HAL_GPIO_Init+0x24c>)
 8104cd6:	4293      	cmp	r3, r2
 8104cd8:	d025      	beq.n	8104d26 <HAL_GPIO_Init+0x226>
 8104cda:	687b      	ldr	r3, [r7, #4]
 8104cdc:	4a1c      	ldr	r2, [pc, #112]	; (8104d50 <HAL_GPIO_Init+0x250>)
 8104cde:	4293      	cmp	r3, r2
 8104ce0:	d01f      	beq.n	8104d22 <HAL_GPIO_Init+0x222>
 8104ce2:	687b      	ldr	r3, [r7, #4]
 8104ce4:	4a1b      	ldr	r2, [pc, #108]	; (8104d54 <HAL_GPIO_Init+0x254>)
 8104ce6:	4293      	cmp	r3, r2
 8104ce8:	d019      	beq.n	8104d1e <HAL_GPIO_Init+0x21e>
 8104cea:	687b      	ldr	r3, [r7, #4]
 8104cec:	4a1a      	ldr	r2, [pc, #104]	; (8104d58 <HAL_GPIO_Init+0x258>)
 8104cee:	4293      	cmp	r3, r2
 8104cf0:	d013      	beq.n	8104d1a <HAL_GPIO_Init+0x21a>
 8104cf2:	687b      	ldr	r3, [r7, #4]
 8104cf4:	4a19      	ldr	r2, [pc, #100]	; (8104d5c <HAL_GPIO_Init+0x25c>)
 8104cf6:	4293      	cmp	r3, r2
 8104cf8:	d00d      	beq.n	8104d16 <HAL_GPIO_Init+0x216>
 8104cfa:	687b      	ldr	r3, [r7, #4]
 8104cfc:	4a18      	ldr	r2, [pc, #96]	; (8104d60 <HAL_GPIO_Init+0x260>)
 8104cfe:	4293      	cmp	r3, r2
 8104d00:	d007      	beq.n	8104d12 <HAL_GPIO_Init+0x212>
 8104d02:	687b      	ldr	r3, [r7, #4]
 8104d04:	4a17      	ldr	r2, [pc, #92]	; (8104d64 <HAL_GPIO_Init+0x264>)
 8104d06:	4293      	cmp	r3, r2
 8104d08:	d101      	bne.n	8104d0e <HAL_GPIO_Init+0x20e>
 8104d0a:	2309      	movs	r3, #9
 8104d0c:	e02d      	b.n	8104d6a <HAL_GPIO_Init+0x26a>
 8104d0e:	230a      	movs	r3, #10
 8104d10:	e02b      	b.n	8104d6a <HAL_GPIO_Init+0x26a>
 8104d12:	2308      	movs	r3, #8
 8104d14:	e029      	b.n	8104d6a <HAL_GPIO_Init+0x26a>
 8104d16:	2307      	movs	r3, #7
 8104d18:	e027      	b.n	8104d6a <HAL_GPIO_Init+0x26a>
 8104d1a:	2306      	movs	r3, #6
 8104d1c:	e025      	b.n	8104d6a <HAL_GPIO_Init+0x26a>
 8104d1e:	2305      	movs	r3, #5
 8104d20:	e023      	b.n	8104d6a <HAL_GPIO_Init+0x26a>
 8104d22:	2304      	movs	r3, #4
 8104d24:	e021      	b.n	8104d6a <HAL_GPIO_Init+0x26a>
 8104d26:	2303      	movs	r3, #3
 8104d28:	e01f      	b.n	8104d6a <HAL_GPIO_Init+0x26a>
 8104d2a:	2302      	movs	r3, #2
 8104d2c:	e01d      	b.n	8104d6a <HAL_GPIO_Init+0x26a>
 8104d2e:	2301      	movs	r3, #1
 8104d30:	e01b      	b.n	8104d6a <HAL_GPIO_Init+0x26a>
 8104d32:	bf00      	nop
 8104d34:	580000c0 	.word	0x580000c0
 8104d38:	58024400 	.word	0x58024400
 8104d3c:	58000400 	.word	0x58000400
 8104d40:	58020000 	.word	0x58020000
 8104d44:	58020400 	.word	0x58020400
 8104d48:	58020800 	.word	0x58020800
 8104d4c:	58020c00 	.word	0x58020c00
 8104d50:	58021000 	.word	0x58021000
 8104d54:	58021400 	.word	0x58021400
 8104d58:	58021800 	.word	0x58021800
 8104d5c:	58021c00 	.word	0x58021c00
 8104d60:	58022000 	.word	0x58022000
 8104d64:	58022400 	.word	0x58022400
 8104d68:	2300      	movs	r3, #0
 8104d6a:	69fa      	ldr	r2, [r7, #28]
 8104d6c:	f002 0203 	and.w	r2, r2, #3
 8104d70:	0092      	lsls	r2, r2, #2
 8104d72:	4093      	lsls	r3, r2
 8104d74:	69ba      	ldr	r2, [r7, #24]
 8104d76:	4313      	orrs	r3, r2
 8104d78:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8104d7a:	4938      	ldr	r1, [pc, #224]	; (8104e5c <HAL_GPIO_Init+0x35c>)
 8104d7c:	69fb      	ldr	r3, [r7, #28]
 8104d7e:	089b      	lsrs	r3, r3, #2
 8104d80:	3302      	adds	r3, #2
 8104d82:	69ba      	ldr	r2, [r7, #24]
 8104d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8104d88:	697b      	ldr	r3, [r7, #20]
 8104d8a:	681b      	ldr	r3, [r3, #0]
 8104d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104d8e:	693b      	ldr	r3, [r7, #16]
 8104d90:	43db      	mvns	r3, r3
 8104d92:	69ba      	ldr	r2, [r7, #24]
 8104d94:	4013      	ands	r3, r2
 8104d96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8104d98:	683b      	ldr	r3, [r7, #0]
 8104d9a:	685b      	ldr	r3, [r3, #4]
 8104d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104da0:	2b00      	cmp	r3, #0
 8104da2:	d003      	beq.n	8104dac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8104da4:	69ba      	ldr	r2, [r7, #24]
 8104da6:	693b      	ldr	r3, [r7, #16]
 8104da8:	4313      	orrs	r3, r2
 8104daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8104dac:	697b      	ldr	r3, [r7, #20]
 8104dae:	69ba      	ldr	r2, [r7, #24]
 8104db0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8104db2:	697b      	ldr	r3, [r7, #20]
 8104db4:	685b      	ldr	r3, [r3, #4]
 8104db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104db8:	693b      	ldr	r3, [r7, #16]
 8104dba:	43db      	mvns	r3, r3
 8104dbc:	69ba      	ldr	r2, [r7, #24]
 8104dbe:	4013      	ands	r3, r2
 8104dc0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8104dc2:	683b      	ldr	r3, [r7, #0]
 8104dc4:	685b      	ldr	r3, [r3, #4]
 8104dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104dca:	2b00      	cmp	r3, #0
 8104dcc:	d003      	beq.n	8104dd6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8104dce:	69ba      	ldr	r2, [r7, #24]
 8104dd0:	693b      	ldr	r3, [r7, #16]
 8104dd2:	4313      	orrs	r3, r2
 8104dd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8104dd6:	697b      	ldr	r3, [r7, #20]
 8104dd8:	69ba      	ldr	r2, [r7, #24]
 8104dda:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8104ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8104de0:	681b      	ldr	r3, [r3, #0]
 8104de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104de4:	693b      	ldr	r3, [r7, #16]
 8104de6:	43db      	mvns	r3, r3
 8104de8:	69ba      	ldr	r2, [r7, #24]
 8104dea:	4013      	ands	r3, r2
 8104dec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8104dee:	683b      	ldr	r3, [r7, #0]
 8104df0:	685b      	ldr	r3, [r3, #4]
 8104df2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8104df6:	2b00      	cmp	r3, #0
 8104df8:	d003      	beq.n	8104e02 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8104dfa:	69ba      	ldr	r2, [r7, #24]
 8104dfc:	693b      	ldr	r3, [r7, #16]
 8104dfe:	4313      	orrs	r3, r2
 8104e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8104e02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8104e06:	69bb      	ldr	r3, [r7, #24]
 8104e08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8104e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8104e0e:	685b      	ldr	r3, [r3, #4]
 8104e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104e12:	693b      	ldr	r3, [r7, #16]
 8104e14:	43db      	mvns	r3, r3
 8104e16:	69ba      	ldr	r2, [r7, #24]
 8104e18:	4013      	ands	r3, r2
 8104e1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8104e1c:	683b      	ldr	r3, [r7, #0]
 8104e1e:	685b      	ldr	r3, [r3, #4]
 8104e20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8104e24:	2b00      	cmp	r3, #0
 8104e26:	d003      	beq.n	8104e30 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8104e28:	69ba      	ldr	r2, [r7, #24]
 8104e2a:	693b      	ldr	r3, [r7, #16]
 8104e2c:	4313      	orrs	r3, r2
 8104e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8104e30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8104e34:	69bb      	ldr	r3, [r7, #24]
 8104e36:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8104e38:	69fb      	ldr	r3, [r7, #28]
 8104e3a:	3301      	adds	r3, #1
 8104e3c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104e3e:	683b      	ldr	r3, [r7, #0]
 8104e40:	681a      	ldr	r2, [r3, #0]
 8104e42:	69fb      	ldr	r3, [r7, #28]
 8104e44:	fa22 f303 	lsr.w	r3, r2, r3
 8104e48:	2b00      	cmp	r3, #0
 8104e4a:	f47f ae63 	bne.w	8104b14 <HAL_GPIO_Init+0x14>
  }
}
 8104e4e:	bf00      	nop
 8104e50:	3724      	adds	r7, #36	; 0x24
 8104e52:	46bd      	mov	sp, r7
 8104e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e58:	4770      	bx	lr
 8104e5a:	bf00      	nop
 8104e5c:	58000400 	.word	0x58000400

08104e60 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 8104e60:	b480      	push	{r7}
 8104e62:	b083      	sub	sp, #12
 8104e64:	af00      	add	r7, sp, #0
 8104e66:	6078      	str	r0, [r7, #4]
 8104e68:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 8104e6a:	490e      	ldr	r1, [pc, #56]	; (8104ea4 <HAL_HSEM_Take+0x44>)
 8104e6c:	683b      	ldr	r3, [r7, #0]
 8104e6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8104e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8104e76:	687a      	ldr	r2, [r7, #4]
 8104e78:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 8104e7c:	4a09      	ldr	r2, [pc, #36]	; (8104ea4 <HAL_HSEM_Take+0x44>)
 8104e7e:	687b      	ldr	r3, [r7, #4]
 8104e80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8104e84:	683b      	ldr	r3, [r7, #0]
 8104e86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8104e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8104e8e:	429a      	cmp	r2, r3
 8104e90:	d101      	bne.n	8104e96 <HAL_HSEM_Take+0x36>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 8104e92:	2300      	movs	r3, #0
 8104e94:	e000      	b.n	8104e98 <HAL_HSEM_Take+0x38>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 8104e96:	2301      	movs	r3, #1
}
 8104e98:	4618      	mov	r0, r3
 8104e9a:	370c      	adds	r7, #12
 8104e9c:	46bd      	mov	sp, r7
 8104e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ea2:	4770      	bx	lr
 8104ea4:	58026400 	.word	0x58026400

08104ea8 <HAL_HSEM_IsSemTaken>:
  * @brief  Check semaphore state Taken or not.
  * @param  SemID: semaphore ID
  * @retval HAL HSEM state
  */
uint32_t HAL_HSEM_IsSemTaken(uint32_t SemID)
{
 8104ea8:	b480      	push	{r7}
 8104eaa:	b083      	sub	sp, #12
 8104eac:	af00      	add	r7, sp, #0
 8104eae:	6078      	str	r0, [r7, #4]
  return (((HSEM->R[SemID] & HSEM_R_LOCK) != 0U) ? 1UL : 0UL);
 8104eb0:	4a07      	ldr	r2, [pc, #28]	; (8104ed0 <HAL_HSEM_IsSemTaken+0x28>)
 8104eb2:	687b      	ldr	r3, [r7, #4]
 8104eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8104eb8:	2b00      	cmp	r3, #0
 8104eba:	da01      	bge.n	8104ec0 <HAL_HSEM_IsSemTaken+0x18>
 8104ebc:	2301      	movs	r3, #1
 8104ebe:	e000      	b.n	8104ec2 <HAL_HSEM_IsSemTaken+0x1a>
 8104ec0:	2300      	movs	r3, #0
}
 8104ec2:	4618      	mov	r0, r3
 8104ec4:	370c      	adds	r7, #12
 8104ec6:	46bd      	mov	sp, r7
 8104ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ecc:	4770      	bx	lr
 8104ece:	bf00      	nop
 8104ed0:	58026400 	.word	0x58026400

08104ed4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8104ed4:	b480      	push	{r7}
 8104ed6:	b083      	sub	sp, #12
 8104ed8:	af00      	add	r7, sp, #0
 8104eda:	6078      	str	r0, [r7, #4]
 8104edc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8104ede:	4906      	ldr	r1, [pc, #24]	; (8104ef8 <HAL_HSEM_Release+0x24>)
 8104ee0:	683b      	ldr	r3, [r7, #0]
 8104ee2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104ee6:	687b      	ldr	r3, [r7, #4]
 8104ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8104eec:	bf00      	nop
 8104eee:	370c      	adds	r7, #12
 8104ef0:	46bd      	mov	sp, r7
 8104ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ef6:	4770      	bx	lr
 8104ef8:	58026400 	.word	0x58026400

08104efc <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8104efc:	b480      	push	{r7}
 8104efe:	b083      	sub	sp, #12
 8104f00:	af00      	add	r7, sp, #0
 8104f02:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8104f04:	4b05      	ldr	r3, [pc, #20]	; (8104f1c <HAL_HSEM_ActivateNotification+0x20>)
 8104f06:	681a      	ldr	r2, [r3, #0]
 8104f08:	4904      	ldr	r1, [pc, #16]	; (8104f1c <HAL_HSEM_ActivateNotification+0x20>)
 8104f0a:	687b      	ldr	r3, [r7, #4]
 8104f0c:	4313      	orrs	r3, r2
 8104f0e:	600b      	str	r3, [r1, #0]
#endif
}
 8104f10:	bf00      	nop
 8104f12:	370c      	adds	r7, #12
 8104f14:	46bd      	mov	sp, r7
 8104f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f1a:	4770      	bx	lr
 8104f1c:	58026510 	.word	0x58026510

08104f20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8104f20:	b580      	push	{r7, lr}
 8104f22:	b082      	sub	sp, #8
 8104f24:	af00      	add	r7, sp, #0
 8104f26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8104f28:	687b      	ldr	r3, [r7, #4]
 8104f2a:	2b00      	cmp	r3, #0
 8104f2c:	d101      	bne.n	8104f32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8104f2e:	2301      	movs	r3, #1
 8104f30:	e081      	b.n	8105036 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8104f32:	687b      	ldr	r3, [r7, #4]
 8104f34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104f38:	b2db      	uxtb	r3, r3
 8104f3a:	2b00      	cmp	r3, #0
 8104f3c:	d106      	bne.n	8104f4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8104f3e:	687b      	ldr	r3, [r7, #4]
 8104f40:	2200      	movs	r2, #0
 8104f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8104f46:	6878      	ldr	r0, [r7, #4]
 8104f48:	f7fc faa2 	bl	8101490 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8104f4c:	687b      	ldr	r3, [r7, #4]
 8104f4e:	2224      	movs	r2, #36	; 0x24
 8104f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8104f54:	687b      	ldr	r3, [r7, #4]
 8104f56:	681b      	ldr	r3, [r3, #0]
 8104f58:	681a      	ldr	r2, [r3, #0]
 8104f5a:	687b      	ldr	r3, [r7, #4]
 8104f5c:	681b      	ldr	r3, [r3, #0]
 8104f5e:	f022 0201 	bic.w	r2, r2, #1
 8104f62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8104f64:	687b      	ldr	r3, [r7, #4]
 8104f66:	685a      	ldr	r2, [r3, #4]
 8104f68:	687b      	ldr	r3, [r7, #4]
 8104f6a:	681b      	ldr	r3, [r3, #0]
 8104f6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8104f70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8104f72:	687b      	ldr	r3, [r7, #4]
 8104f74:	681b      	ldr	r3, [r3, #0]
 8104f76:	689a      	ldr	r2, [r3, #8]
 8104f78:	687b      	ldr	r3, [r7, #4]
 8104f7a:	681b      	ldr	r3, [r3, #0]
 8104f7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8104f80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8104f82:	687b      	ldr	r3, [r7, #4]
 8104f84:	68db      	ldr	r3, [r3, #12]
 8104f86:	2b01      	cmp	r3, #1
 8104f88:	d107      	bne.n	8104f9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8104f8a:	687b      	ldr	r3, [r7, #4]
 8104f8c:	689a      	ldr	r2, [r3, #8]
 8104f8e:	687b      	ldr	r3, [r7, #4]
 8104f90:	681b      	ldr	r3, [r3, #0]
 8104f92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8104f96:	609a      	str	r2, [r3, #8]
 8104f98:	e006      	b.n	8104fa8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8104f9a:	687b      	ldr	r3, [r7, #4]
 8104f9c:	689a      	ldr	r2, [r3, #8]
 8104f9e:	687b      	ldr	r3, [r7, #4]
 8104fa0:	681b      	ldr	r3, [r3, #0]
 8104fa2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8104fa6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8104fa8:	687b      	ldr	r3, [r7, #4]
 8104faa:	68db      	ldr	r3, [r3, #12]
 8104fac:	2b02      	cmp	r3, #2
 8104fae:	d104      	bne.n	8104fba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8104fb0:	687b      	ldr	r3, [r7, #4]
 8104fb2:	681b      	ldr	r3, [r3, #0]
 8104fb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8104fb8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8104fba:	687b      	ldr	r3, [r7, #4]
 8104fbc:	681b      	ldr	r3, [r3, #0]
 8104fbe:	685b      	ldr	r3, [r3, #4]
 8104fc0:	687a      	ldr	r2, [r7, #4]
 8104fc2:	6812      	ldr	r2, [r2, #0]
 8104fc4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8104fc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8104fcc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8104fce:	687b      	ldr	r3, [r7, #4]
 8104fd0:	681b      	ldr	r3, [r3, #0]
 8104fd2:	68da      	ldr	r2, [r3, #12]
 8104fd4:	687b      	ldr	r3, [r7, #4]
 8104fd6:	681b      	ldr	r3, [r3, #0]
 8104fd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8104fdc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8104fde:	687b      	ldr	r3, [r7, #4]
 8104fe0:	691a      	ldr	r2, [r3, #16]
 8104fe2:	687b      	ldr	r3, [r7, #4]
 8104fe4:	695b      	ldr	r3, [r3, #20]
 8104fe6:	ea42 0103 	orr.w	r1, r2, r3
 8104fea:	687b      	ldr	r3, [r7, #4]
 8104fec:	699b      	ldr	r3, [r3, #24]
 8104fee:	021a      	lsls	r2, r3, #8
 8104ff0:	687b      	ldr	r3, [r7, #4]
 8104ff2:	681b      	ldr	r3, [r3, #0]
 8104ff4:	430a      	orrs	r2, r1
 8104ff6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8104ff8:	687b      	ldr	r3, [r7, #4]
 8104ffa:	69d9      	ldr	r1, [r3, #28]
 8104ffc:	687b      	ldr	r3, [r7, #4]
 8104ffe:	6a1a      	ldr	r2, [r3, #32]
 8105000:	687b      	ldr	r3, [r7, #4]
 8105002:	681b      	ldr	r3, [r3, #0]
 8105004:	430a      	orrs	r2, r1
 8105006:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8105008:	687b      	ldr	r3, [r7, #4]
 810500a:	681b      	ldr	r3, [r3, #0]
 810500c:	681a      	ldr	r2, [r3, #0]
 810500e:	687b      	ldr	r3, [r7, #4]
 8105010:	681b      	ldr	r3, [r3, #0]
 8105012:	f042 0201 	orr.w	r2, r2, #1
 8105016:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8105018:	687b      	ldr	r3, [r7, #4]
 810501a:	2200      	movs	r2, #0
 810501c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 810501e:	687b      	ldr	r3, [r7, #4]
 8105020:	2220      	movs	r2, #32
 8105022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8105026:	687b      	ldr	r3, [r7, #4]
 8105028:	2200      	movs	r2, #0
 810502a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 810502c:	687b      	ldr	r3, [r7, #4]
 810502e:	2200      	movs	r2, #0
 8105030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8105034:	2300      	movs	r3, #0
}
 8105036:	4618      	mov	r0, r3
 8105038:	3708      	adds	r7, #8
 810503a:	46bd      	mov	sp, r7
 810503c:	bd80      	pop	{r7, pc}
	...

08105040 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8105040:	b580      	push	{r7, lr}
 8105042:	b088      	sub	sp, #32
 8105044:	af02      	add	r7, sp, #8
 8105046:	60f8      	str	r0, [r7, #12]
 8105048:	607a      	str	r2, [r7, #4]
 810504a:	461a      	mov	r2, r3
 810504c:	460b      	mov	r3, r1
 810504e:	817b      	strh	r3, [r7, #10]
 8105050:	4613      	mov	r3, r2
 8105052:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8105054:	68fb      	ldr	r3, [r7, #12]
 8105056:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810505a:	b2db      	uxtb	r3, r3
 810505c:	2b20      	cmp	r3, #32
 810505e:	f040 80da 	bne.w	8105216 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8105062:	68fb      	ldr	r3, [r7, #12]
 8105064:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8105068:	2b01      	cmp	r3, #1
 810506a:	d101      	bne.n	8105070 <HAL_I2C_Master_Transmit+0x30>
 810506c:	2302      	movs	r3, #2
 810506e:	e0d3      	b.n	8105218 <HAL_I2C_Master_Transmit+0x1d8>
 8105070:	68fb      	ldr	r3, [r7, #12]
 8105072:	2201      	movs	r2, #1
 8105074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8105078:	f7fd f90e 	bl	8102298 <HAL_GetTick>
 810507c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 810507e:	697b      	ldr	r3, [r7, #20]
 8105080:	9300      	str	r3, [sp, #0]
 8105082:	2319      	movs	r3, #25
 8105084:	2201      	movs	r2, #1
 8105086:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 810508a:	68f8      	ldr	r0, [r7, #12]
 810508c:	f000 fcd6 	bl	8105a3c <I2C_WaitOnFlagUntilTimeout>
 8105090:	4603      	mov	r3, r0
 8105092:	2b00      	cmp	r3, #0
 8105094:	d001      	beq.n	810509a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8105096:	2301      	movs	r3, #1
 8105098:	e0be      	b.n	8105218 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 810509a:	68fb      	ldr	r3, [r7, #12]
 810509c:	2221      	movs	r2, #33	; 0x21
 810509e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 81050a2:	68fb      	ldr	r3, [r7, #12]
 81050a4:	2210      	movs	r2, #16
 81050a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81050aa:	68fb      	ldr	r3, [r7, #12]
 81050ac:	2200      	movs	r2, #0
 81050ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81050b0:	68fb      	ldr	r3, [r7, #12]
 81050b2:	687a      	ldr	r2, [r7, #4]
 81050b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 81050b6:	68fb      	ldr	r3, [r7, #12]
 81050b8:	893a      	ldrh	r2, [r7, #8]
 81050ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 81050bc:	68fb      	ldr	r3, [r7, #12]
 81050be:	2200      	movs	r2, #0
 81050c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81050c2:	68fb      	ldr	r3, [r7, #12]
 81050c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81050c6:	b29b      	uxth	r3, r3
 81050c8:	2bff      	cmp	r3, #255	; 0xff
 81050ca:	d90e      	bls.n	81050ea <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81050cc:	68fb      	ldr	r3, [r7, #12]
 81050ce:	22ff      	movs	r2, #255	; 0xff
 81050d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 81050d2:	68fb      	ldr	r3, [r7, #12]
 81050d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81050d6:	b2da      	uxtb	r2, r3
 81050d8:	8979      	ldrh	r1, [r7, #10]
 81050da:	4b51      	ldr	r3, [pc, #324]	; (8105220 <HAL_I2C_Master_Transmit+0x1e0>)
 81050dc:	9300      	str	r3, [sp, #0]
 81050de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81050e2:	68f8      	ldr	r0, [r7, #12]
 81050e4:	f000 fe38 	bl	8105d58 <I2C_TransferConfig>
 81050e8:	e06c      	b.n	81051c4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81050ea:	68fb      	ldr	r3, [r7, #12]
 81050ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81050ee:	b29a      	uxth	r2, r3
 81050f0:	68fb      	ldr	r3, [r7, #12]
 81050f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 81050f4:	68fb      	ldr	r3, [r7, #12]
 81050f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81050f8:	b2da      	uxtb	r2, r3
 81050fa:	8979      	ldrh	r1, [r7, #10]
 81050fc:	4b48      	ldr	r3, [pc, #288]	; (8105220 <HAL_I2C_Master_Transmit+0x1e0>)
 81050fe:	9300      	str	r3, [sp, #0]
 8105100:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8105104:	68f8      	ldr	r0, [r7, #12]
 8105106:	f000 fe27 	bl	8105d58 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 810510a:	e05b      	b.n	81051c4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810510c:	697a      	ldr	r2, [r7, #20]
 810510e:	6a39      	ldr	r1, [r7, #32]
 8105110:	68f8      	ldr	r0, [r7, #12]
 8105112:	f000 fcd3 	bl	8105abc <I2C_WaitOnTXISFlagUntilTimeout>
 8105116:	4603      	mov	r3, r0
 8105118:	2b00      	cmp	r3, #0
 810511a:	d001      	beq.n	8105120 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 810511c:	2301      	movs	r3, #1
 810511e:	e07b      	b.n	8105218 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8105120:	68fb      	ldr	r3, [r7, #12]
 8105122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105124:	781a      	ldrb	r2, [r3, #0]
 8105126:	68fb      	ldr	r3, [r7, #12]
 8105128:	681b      	ldr	r3, [r3, #0]
 810512a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 810512c:	68fb      	ldr	r3, [r7, #12]
 810512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105130:	1c5a      	adds	r2, r3, #1
 8105132:	68fb      	ldr	r3, [r7, #12]
 8105134:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8105136:	68fb      	ldr	r3, [r7, #12]
 8105138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810513a:	b29b      	uxth	r3, r3
 810513c:	3b01      	subs	r3, #1
 810513e:	b29a      	uxth	r2, r3
 8105140:	68fb      	ldr	r3, [r7, #12]
 8105142:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8105144:	68fb      	ldr	r3, [r7, #12]
 8105146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105148:	3b01      	subs	r3, #1
 810514a:	b29a      	uxth	r2, r3
 810514c:	68fb      	ldr	r3, [r7, #12]
 810514e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8105150:	68fb      	ldr	r3, [r7, #12]
 8105152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105154:	b29b      	uxth	r3, r3
 8105156:	2b00      	cmp	r3, #0
 8105158:	d034      	beq.n	81051c4 <HAL_I2C_Master_Transmit+0x184>
 810515a:	68fb      	ldr	r3, [r7, #12]
 810515c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810515e:	2b00      	cmp	r3, #0
 8105160:	d130      	bne.n	81051c4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8105162:	697b      	ldr	r3, [r7, #20]
 8105164:	9300      	str	r3, [sp, #0]
 8105166:	6a3b      	ldr	r3, [r7, #32]
 8105168:	2200      	movs	r2, #0
 810516a:	2180      	movs	r1, #128	; 0x80
 810516c:	68f8      	ldr	r0, [r7, #12]
 810516e:	f000 fc65 	bl	8105a3c <I2C_WaitOnFlagUntilTimeout>
 8105172:	4603      	mov	r3, r0
 8105174:	2b00      	cmp	r3, #0
 8105176:	d001      	beq.n	810517c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8105178:	2301      	movs	r3, #1
 810517a:	e04d      	b.n	8105218 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810517c:	68fb      	ldr	r3, [r7, #12]
 810517e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105180:	b29b      	uxth	r3, r3
 8105182:	2bff      	cmp	r3, #255	; 0xff
 8105184:	d90e      	bls.n	81051a4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8105186:	68fb      	ldr	r3, [r7, #12]
 8105188:	22ff      	movs	r2, #255	; 0xff
 810518a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 810518c:	68fb      	ldr	r3, [r7, #12]
 810518e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105190:	b2da      	uxtb	r2, r3
 8105192:	8979      	ldrh	r1, [r7, #10]
 8105194:	2300      	movs	r3, #0
 8105196:	9300      	str	r3, [sp, #0]
 8105198:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810519c:	68f8      	ldr	r0, [r7, #12]
 810519e:	f000 fddb 	bl	8105d58 <I2C_TransferConfig>
 81051a2:	e00f      	b.n	81051c4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81051a4:	68fb      	ldr	r3, [r7, #12]
 81051a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81051a8:	b29a      	uxth	r2, r3
 81051aa:	68fb      	ldr	r3, [r7, #12]
 81051ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 81051ae:	68fb      	ldr	r3, [r7, #12]
 81051b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81051b2:	b2da      	uxtb	r2, r3
 81051b4:	8979      	ldrh	r1, [r7, #10]
 81051b6:	2300      	movs	r3, #0
 81051b8:	9300      	str	r3, [sp, #0]
 81051ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81051be:	68f8      	ldr	r0, [r7, #12]
 81051c0:	f000 fdca 	bl	8105d58 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 81051c4:	68fb      	ldr	r3, [r7, #12]
 81051c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81051c8:	b29b      	uxth	r3, r3
 81051ca:	2b00      	cmp	r3, #0
 81051cc:	d19e      	bne.n	810510c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81051ce:	697a      	ldr	r2, [r7, #20]
 81051d0:	6a39      	ldr	r1, [r7, #32]
 81051d2:	68f8      	ldr	r0, [r7, #12]
 81051d4:	f000 fcb2 	bl	8105b3c <I2C_WaitOnSTOPFlagUntilTimeout>
 81051d8:	4603      	mov	r3, r0
 81051da:	2b00      	cmp	r3, #0
 81051dc:	d001      	beq.n	81051e2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 81051de:	2301      	movs	r3, #1
 81051e0:	e01a      	b.n	8105218 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81051e2:	68fb      	ldr	r3, [r7, #12]
 81051e4:	681b      	ldr	r3, [r3, #0]
 81051e6:	2220      	movs	r2, #32
 81051e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81051ea:	68fb      	ldr	r3, [r7, #12]
 81051ec:	681b      	ldr	r3, [r3, #0]
 81051ee:	6859      	ldr	r1, [r3, #4]
 81051f0:	68fb      	ldr	r3, [r7, #12]
 81051f2:	681a      	ldr	r2, [r3, #0]
 81051f4:	4b0b      	ldr	r3, [pc, #44]	; (8105224 <HAL_I2C_Master_Transmit+0x1e4>)
 81051f6:	400b      	ands	r3, r1
 81051f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 81051fa:	68fb      	ldr	r3, [r7, #12]
 81051fc:	2220      	movs	r2, #32
 81051fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8105202:	68fb      	ldr	r3, [r7, #12]
 8105204:	2200      	movs	r2, #0
 8105206:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810520a:	68fb      	ldr	r3, [r7, #12]
 810520c:	2200      	movs	r2, #0
 810520e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8105212:	2300      	movs	r3, #0
 8105214:	e000      	b.n	8105218 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8105216:	2302      	movs	r3, #2
  }
}
 8105218:	4618      	mov	r0, r3
 810521a:	3718      	adds	r7, #24
 810521c:	46bd      	mov	sp, r7
 810521e:	bd80      	pop	{r7, pc}
 8105220:	80002000 	.word	0x80002000
 8105224:	fe00e800 	.word	0xfe00e800

08105228 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8105228:	b580      	push	{r7, lr}
 810522a:	b088      	sub	sp, #32
 810522c:	af02      	add	r7, sp, #8
 810522e:	60f8      	str	r0, [r7, #12]
 8105230:	607a      	str	r2, [r7, #4]
 8105232:	461a      	mov	r2, r3
 8105234:	460b      	mov	r3, r1
 8105236:	817b      	strh	r3, [r7, #10]
 8105238:	4613      	mov	r3, r2
 810523a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 810523c:	68fb      	ldr	r3, [r7, #12]
 810523e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105242:	b2db      	uxtb	r3, r3
 8105244:	2b20      	cmp	r3, #32
 8105246:	f040 80db 	bne.w	8105400 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810524a:	68fb      	ldr	r3, [r7, #12]
 810524c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8105250:	2b01      	cmp	r3, #1
 8105252:	d101      	bne.n	8105258 <HAL_I2C_Master_Receive+0x30>
 8105254:	2302      	movs	r3, #2
 8105256:	e0d4      	b.n	8105402 <HAL_I2C_Master_Receive+0x1da>
 8105258:	68fb      	ldr	r3, [r7, #12]
 810525a:	2201      	movs	r2, #1
 810525c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8105260:	f7fd f81a 	bl	8102298 <HAL_GetTick>
 8105264:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8105266:	697b      	ldr	r3, [r7, #20]
 8105268:	9300      	str	r3, [sp, #0]
 810526a:	2319      	movs	r3, #25
 810526c:	2201      	movs	r2, #1
 810526e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8105272:	68f8      	ldr	r0, [r7, #12]
 8105274:	f000 fbe2 	bl	8105a3c <I2C_WaitOnFlagUntilTimeout>
 8105278:	4603      	mov	r3, r0
 810527a:	2b00      	cmp	r3, #0
 810527c:	d001      	beq.n	8105282 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 810527e:	2301      	movs	r3, #1
 8105280:	e0bf      	b.n	8105402 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8105282:	68fb      	ldr	r3, [r7, #12]
 8105284:	2222      	movs	r2, #34	; 0x22
 8105286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 810528a:	68fb      	ldr	r3, [r7, #12]
 810528c:	2210      	movs	r2, #16
 810528e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8105292:	68fb      	ldr	r3, [r7, #12]
 8105294:	2200      	movs	r2, #0
 8105296:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8105298:	68fb      	ldr	r3, [r7, #12]
 810529a:	687a      	ldr	r2, [r7, #4]
 810529c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 810529e:	68fb      	ldr	r3, [r7, #12]
 81052a0:	893a      	ldrh	r2, [r7, #8]
 81052a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 81052a4:	68fb      	ldr	r3, [r7, #12]
 81052a6:	2200      	movs	r2, #0
 81052a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81052aa:	68fb      	ldr	r3, [r7, #12]
 81052ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81052ae:	b29b      	uxth	r3, r3
 81052b0:	2bff      	cmp	r3, #255	; 0xff
 81052b2:	d90e      	bls.n	81052d2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81052b4:	68fb      	ldr	r3, [r7, #12]
 81052b6:	22ff      	movs	r2, #255	; 0xff
 81052b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 81052ba:	68fb      	ldr	r3, [r7, #12]
 81052bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81052be:	b2da      	uxtb	r2, r3
 81052c0:	8979      	ldrh	r1, [r7, #10]
 81052c2:	4b52      	ldr	r3, [pc, #328]	; (810540c <HAL_I2C_Master_Receive+0x1e4>)
 81052c4:	9300      	str	r3, [sp, #0]
 81052c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81052ca:	68f8      	ldr	r0, [r7, #12]
 81052cc:	f000 fd44 	bl	8105d58 <I2C_TransferConfig>
 81052d0:	e06d      	b.n	81053ae <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81052d2:	68fb      	ldr	r3, [r7, #12]
 81052d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81052d6:	b29a      	uxth	r2, r3
 81052d8:	68fb      	ldr	r3, [r7, #12]
 81052da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 81052dc:	68fb      	ldr	r3, [r7, #12]
 81052de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81052e0:	b2da      	uxtb	r2, r3
 81052e2:	8979      	ldrh	r1, [r7, #10]
 81052e4:	4b49      	ldr	r3, [pc, #292]	; (810540c <HAL_I2C_Master_Receive+0x1e4>)
 81052e6:	9300      	str	r3, [sp, #0]
 81052e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81052ec:	68f8      	ldr	r0, [r7, #12]
 81052ee:	f000 fd33 	bl	8105d58 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 81052f2:	e05c      	b.n	81053ae <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81052f4:	697a      	ldr	r2, [r7, #20]
 81052f6:	6a39      	ldr	r1, [r7, #32]
 81052f8:	68f8      	ldr	r0, [r7, #12]
 81052fa:	f000 fc5b 	bl	8105bb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 81052fe:	4603      	mov	r3, r0
 8105300:	2b00      	cmp	r3, #0
 8105302:	d001      	beq.n	8105308 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8105304:	2301      	movs	r3, #1
 8105306:	e07c      	b.n	8105402 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8105308:	68fb      	ldr	r3, [r7, #12]
 810530a:	681b      	ldr	r3, [r3, #0]
 810530c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810530e:	68fb      	ldr	r3, [r7, #12]
 8105310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105312:	b2d2      	uxtb	r2, r2
 8105314:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8105316:	68fb      	ldr	r3, [r7, #12]
 8105318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810531a:	1c5a      	adds	r2, r3, #1
 810531c:	68fb      	ldr	r3, [r7, #12]
 810531e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8105320:	68fb      	ldr	r3, [r7, #12]
 8105322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105324:	3b01      	subs	r3, #1
 8105326:	b29a      	uxth	r2, r3
 8105328:	68fb      	ldr	r3, [r7, #12]
 810532a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 810532c:	68fb      	ldr	r3, [r7, #12]
 810532e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105330:	b29b      	uxth	r3, r3
 8105332:	3b01      	subs	r3, #1
 8105334:	b29a      	uxth	r2, r3
 8105336:	68fb      	ldr	r3, [r7, #12]
 8105338:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 810533a:	68fb      	ldr	r3, [r7, #12]
 810533c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810533e:	b29b      	uxth	r3, r3
 8105340:	2b00      	cmp	r3, #0
 8105342:	d034      	beq.n	81053ae <HAL_I2C_Master_Receive+0x186>
 8105344:	68fb      	ldr	r3, [r7, #12]
 8105346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105348:	2b00      	cmp	r3, #0
 810534a:	d130      	bne.n	81053ae <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 810534c:	697b      	ldr	r3, [r7, #20]
 810534e:	9300      	str	r3, [sp, #0]
 8105350:	6a3b      	ldr	r3, [r7, #32]
 8105352:	2200      	movs	r2, #0
 8105354:	2180      	movs	r1, #128	; 0x80
 8105356:	68f8      	ldr	r0, [r7, #12]
 8105358:	f000 fb70 	bl	8105a3c <I2C_WaitOnFlagUntilTimeout>
 810535c:	4603      	mov	r3, r0
 810535e:	2b00      	cmp	r3, #0
 8105360:	d001      	beq.n	8105366 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8105362:	2301      	movs	r3, #1
 8105364:	e04d      	b.n	8105402 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105366:	68fb      	ldr	r3, [r7, #12]
 8105368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810536a:	b29b      	uxth	r3, r3
 810536c:	2bff      	cmp	r3, #255	; 0xff
 810536e:	d90e      	bls.n	810538e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8105370:	68fb      	ldr	r3, [r7, #12]
 8105372:	22ff      	movs	r2, #255	; 0xff
 8105374:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8105376:	68fb      	ldr	r3, [r7, #12]
 8105378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810537a:	b2da      	uxtb	r2, r3
 810537c:	8979      	ldrh	r1, [r7, #10]
 810537e:	2300      	movs	r3, #0
 8105380:	9300      	str	r3, [sp, #0]
 8105382:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8105386:	68f8      	ldr	r0, [r7, #12]
 8105388:	f000 fce6 	bl	8105d58 <I2C_TransferConfig>
 810538c:	e00f      	b.n	81053ae <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 810538e:	68fb      	ldr	r3, [r7, #12]
 8105390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105392:	b29a      	uxth	r2, r3
 8105394:	68fb      	ldr	r3, [r7, #12]
 8105396:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8105398:	68fb      	ldr	r3, [r7, #12]
 810539a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810539c:	b2da      	uxtb	r2, r3
 810539e:	8979      	ldrh	r1, [r7, #10]
 81053a0:	2300      	movs	r3, #0
 81053a2:	9300      	str	r3, [sp, #0]
 81053a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81053a8:	68f8      	ldr	r0, [r7, #12]
 81053aa:	f000 fcd5 	bl	8105d58 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 81053ae:	68fb      	ldr	r3, [r7, #12]
 81053b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81053b2:	b29b      	uxth	r3, r3
 81053b4:	2b00      	cmp	r3, #0
 81053b6:	d19d      	bne.n	81052f4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81053b8:	697a      	ldr	r2, [r7, #20]
 81053ba:	6a39      	ldr	r1, [r7, #32]
 81053bc:	68f8      	ldr	r0, [r7, #12]
 81053be:	f000 fbbd 	bl	8105b3c <I2C_WaitOnSTOPFlagUntilTimeout>
 81053c2:	4603      	mov	r3, r0
 81053c4:	2b00      	cmp	r3, #0
 81053c6:	d001      	beq.n	81053cc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 81053c8:	2301      	movs	r3, #1
 81053ca:	e01a      	b.n	8105402 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81053cc:	68fb      	ldr	r3, [r7, #12]
 81053ce:	681b      	ldr	r3, [r3, #0]
 81053d0:	2220      	movs	r2, #32
 81053d2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81053d4:	68fb      	ldr	r3, [r7, #12]
 81053d6:	681b      	ldr	r3, [r3, #0]
 81053d8:	6859      	ldr	r1, [r3, #4]
 81053da:	68fb      	ldr	r3, [r7, #12]
 81053dc:	681a      	ldr	r2, [r3, #0]
 81053de:	4b0c      	ldr	r3, [pc, #48]	; (8105410 <HAL_I2C_Master_Receive+0x1e8>)
 81053e0:	400b      	ands	r3, r1
 81053e2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 81053e4:	68fb      	ldr	r3, [r7, #12]
 81053e6:	2220      	movs	r2, #32
 81053e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 81053ec:	68fb      	ldr	r3, [r7, #12]
 81053ee:	2200      	movs	r2, #0
 81053f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81053f4:	68fb      	ldr	r3, [r7, #12]
 81053f6:	2200      	movs	r2, #0
 81053f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81053fc:	2300      	movs	r3, #0
 81053fe:	e000      	b.n	8105402 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8105400:	2302      	movs	r3, #2
  }
}
 8105402:	4618      	mov	r0, r3
 8105404:	3718      	adds	r7, #24
 8105406:	46bd      	mov	sp, r7
 8105408:	bd80      	pop	{r7, pc}
 810540a:	bf00      	nop
 810540c:	80002400 	.word	0x80002400
 8105410:	fe00e800 	.word	0xfe00e800

08105414 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8105414:	b580      	push	{r7, lr}
 8105416:	b088      	sub	sp, #32
 8105418:	af02      	add	r7, sp, #8
 810541a:	60f8      	str	r0, [r7, #12]
 810541c:	4608      	mov	r0, r1
 810541e:	4611      	mov	r1, r2
 8105420:	461a      	mov	r2, r3
 8105422:	4603      	mov	r3, r0
 8105424:	817b      	strh	r3, [r7, #10]
 8105426:	460b      	mov	r3, r1
 8105428:	813b      	strh	r3, [r7, #8]
 810542a:	4613      	mov	r3, r2
 810542c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810542e:	68fb      	ldr	r3, [r7, #12]
 8105430:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105434:	b2db      	uxtb	r3, r3
 8105436:	2b20      	cmp	r3, #32
 8105438:	f040 80f9 	bne.w	810562e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 810543c:	6a3b      	ldr	r3, [r7, #32]
 810543e:	2b00      	cmp	r3, #0
 8105440:	d002      	beq.n	8105448 <HAL_I2C_Mem_Write+0x34>
 8105442:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8105444:	2b00      	cmp	r3, #0
 8105446:	d105      	bne.n	8105454 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8105448:	68fb      	ldr	r3, [r7, #12]
 810544a:	f44f 7200 	mov.w	r2, #512	; 0x200
 810544e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8105450:	2301      	movs	r3, #1
 8105452:	e0ed      	b.n	8105630 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8105454:	68fb      	ldr	r3, [r7, #12]
 8105456:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810545a:	2b01      	cmp	r3, #1
 810545c:	d101      	bne.n	8105462 <HAL_I2C_Mem_Write+0x4e>
 810545e:	2302      	movs	r3, #2
 8105460:	e0e6      	b.n	8105630 <HAL_I2C_Mem_Write+0x21c>
 8105462:	68fb      	ldr	r3, [r7, #12]
 8105464:	2201      	movs	r2, #1
 8105466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 810546a:	f7fc ff15 	bl	8102298 <HAL_GetTick>
 810546e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8105470:	697b      	ldr	r3, [r7, #20]
 8105472:	9300      	str	r3, [sp, #0]
 8105474:	2319      	movs	r3, #25
 8105476:	2201      	movs	r2, #1
 8105478:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 810547c:	68f8      	ldr	r0, [r7, #12]
 810547e:	f000 fadd 	bl	8105a3c <I2C_WaitOnFlagUntilTimeout>
 8105482:	4603      	mov	r3, r0
 8105484:	2b00      	cmp	r3, #0
 8105486:	d001      	beq.n	810548c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8105488:	2301      	movs	r3, #1
 810548a:	e0d1      	b.n	8105630 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 810548c:	68fb      	ldr	r3, [r7, #12]
 810548e:	2221      	movs	r2, #33	; 0x21
 8105490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8105494:	68fb      	ldr	r3, [r7, #12]
 8105496:	2240      	movs	r2, #64	; 0x40
 8105498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810549c:	68fb      	ldr	r3, [r7, #12]
 810549e:	2200      	movs	r2, #0
 81054a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81054a2:	68fb      	ldr	r3, [r7, #12]
 81054a4:	6a3a      	ldr	r2, [r7, #32]
 81054a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 81054a8:	68fb      	ldr	r3, [r7, #12]
 81054aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 81054ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 81054ae:	68fb      	ldr	r3, [r7, #12]
 81054b0:	2200      	movs	r2, #0
 81054b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 81054b4:	88f8      	ldrh	r0, [r7, #6]
 81054b6:	893a      	ldrh	r2, [r7, #8]
 81054b8:	8979      	ldrh	r1, [r7, #10]
 81054ba:	697b      	ldr	r3, [r7, #20]
 81054bc:	9301      	str	r3, [sp, #4]
 81054be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81054c0:	9300      	str	r3, [sp, #0]
 81054c2:	4603      	mov	r3, r0
 81054c4:	68f8      	ldr	r0, [r7, #12]
 81054c6:	f000 f9ed 	bl	81058a4 <I2C_RequestMemoryWrite>
 81054ca:	4603      	mov	r3, r0
 81054cc:	2b00      	cmp	r3, #0
 81054ce:	d005      	beq.n	81054dc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81054d0:	68fb      	ldr	r3, [r7, #12]
 81054d2:	2200      	movs	r2, #0
 81054d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 81054d8:	2301      	movs	r3, #1
 81054da:	e0a9      	b.n	8105630 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81054dc:	68fb      	ldr	r3, [r7, #12]
 81054de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81054e0:	b29b      	uxth	r3, r3
 81054e2:	2bff      	cmp	r3, #255	; 0xff
 81054e4:	d90e      	bls.n	8105504 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81054e6:	68fb      	ldr	r3, [r7, #12]
 81054e8:	22ff      	movs	r2, #255	; 0xff
 81054ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 81054ec:	68fb      	ldr	r3, [r7, #12]
 81054ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81054f0:	b2da      	uxtb	r2, r3
 81054f2:	8979      	ldrh	r1, [r7, #10]
 81054f4:	2300      	movs	r3, #0
 81054f6:	9300      	str	r3, [sp, #0]
 81054f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81054fc:	68f8      	ldr	r0, [r7, #12]
 81054fe:	f000 fc2b 	bl	8105d58 <I2C_TransferConfig>
 8105502:	e00f      	b.n	8105524 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8105504:	68fb      	ldr	r3, [r7, #12]
 8105506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105508:	b29a      	uxth	r2, r3
 810550a:	68fb      	ldr	r3, [r7, #12]
 810550c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 810550e:	68fb      	ldr	r3, [r7, #12]
 8105510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105512:	b2da      	uxtb	r2, r3
 8105514:	8979      	ldrh	r1, [r7, #10]
 8105516:	2300      	movs	r3, #0
 8105518:	9300      	str	r3, [sp, #0]
 810551a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810551e:	68f8      	ldr	r0, [r7, #12]
 8105520:	f000 fc1a 	bl	8105d58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8105524:	697a      	ldr	r2, [r7, #20]
 8105526:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8105528:	68f8      	ldr	r0, [r7, #12]
 810552a:	f000 fac7 	bl	8105abc <I2C_WaitOnTXISFlagUntilTimeout>
 810552e:	4603      	mov	r3, r0
 8105530:	2b00      	cmp	r3, #0
 8105532:	d001      	beq.n	8105538 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8105534:	2301      	movs	r3, #1
 8105536:	e07b      	b.n	8105630 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8105538:	68fb      	ldr	r3, [r7, #12]
 810553a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810553c:	781a      	ldrb	r2, [r3, #0]
 810553e:	68fb      	ldr	r3, [r7, #12]
 8105540:	681b      	ldr	r3, [r3, #0]
 8105542:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8105544:	68fb      	ldr	r3, [r7, #12]
 8105546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105548:	1c5a      	adds	r2, r3, #1
 810554a:	68fb      	ldr	r3, [r7, #12]
 810554c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 810554e:	68fb      	ldr	r3, [r7, #12]
 8105550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105552:	b29b      	uxth	r3, r3
 8105554:	3b01      	subs	r3, #1
 8105556:	b29a      	uxth	r2, r3
 8105558:	68fb      	ldr	r3, [r7, #12]
 810555a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 810555c:	68fb      	ldr	r3, [r7, #12]
 810555e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105560:	3b01      	subs	r3, #1
 8105562:	b29a      	uxth	r2, r3
 8105564:	68fb      	ldr	r3, [r7, #12]
 8105566:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8105568:	68fb      	ldr	r3, [r7, #12]
 810556a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810556c:	b29b      	uxth	r3, r3
 810556e:	2b00      	cmp	r3, #0
 8105570:	d034      	beq.n	81055dc <HAL_I2C_Mem_Write+0x1c8>
 8105572:	68fb      	ldr	r3, [r7, #12]
 8105574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105576:	2b00      	cmp	r3, #0
 8105578:	d130      	bne.n	81055dc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 810557a:	697b      	ldr	r3, [r7, #20]
 810557c:	9300      	str	r3, [sp, #0]
 810557e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105580:	2200      	movs	r2, #0
 8105582:	2180      	movs	r1, #128	; 0x80
 8105584:	68f8      	ldr	r0, [r7, #12]
 8105586:	f000 fa59 	bl	8105a3c <I2C_WaitOnFlagUntilTimeout>
 810558a:	4603      	mov	r3, r0
 810558c:	2b00      	cmp	r3, #0
 810558e:	d001      	beq.n	8105594 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8105590:	2301      	movs	r3, #1
 8105592:	e04d      	b.n	8105630 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105594:	68fb      	ldr	r3, [r7, #12]
 8105596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105598:	b29b      	uxth	r3, r3
 810559a:	2bff      	cmp	r3, #255	; 0xff
 810559c:	d90e      	bls.n	81055bc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 810559e:	68fb      	ldr	r3, [r7, #12]
 81055a0:	22ff      	movs	r2, #255	; 0xff
 81055a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 81055a4:	68fb      	ldr	r3, [r7, #12]
 81055a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81055a8:	b2da      	uxtb	r2, r3
 81055aa:	8979      	ldrh	r1, [r7, #10]
 81055ac:	2300      	movs	r3, #0
 81055ae:	9300      	str	r3, [sp, #0]
 81055b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81055b4:	68f8      	ldr	r0, [r7, #12]
 81055b6:	f000 fbcf 	bl	8105d58 <I2C_TransferConfig>
 81055ba:	e00f      	b.n	81055dc <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81055bc:	68fb      	ldr	r3, [r7, #12]
 81055be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81055c0:	b29a      	uxth	r2, r3
 81055c2:	68fb      	ldr	r3, [r7, #12]
 81055c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 81055c6:	68fb      	ldr	r3, [r7, #12]
 81055c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81055ca:	b2da      	uxtb	r2, r3
 81055cc:	8979      	ldrh	r1, [r7, #10]
 81055ce:	2300      	movs	r3, #0
 81055d0:	9300      	str	r3, [sp, #0]
 81055d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81055d6:	68f8      	ldr	r0, [r7, #12]
 81055d8:	f000 fbbe 	bl	8105d58 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 81055dc:	68fb      	ldr	r3, [r7, #12]
 81055de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81055e0:	b29b      	uxth	r3, r3
 81055e2:	2b00      	cmp	r3, #0
 81055e4:	d19e      	bne.n	8105524 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81055e6:	697a      	ldr	r2, [r7, #20]
 81055e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 81055ea:	68f8      	ldr	r0, [r7, #12]
 81055ec:	f000 faa6 	bl	8105b3c <I2C_WaitOnSTOPFlagUntilTimeout>
 81055f0:	4603      	mov	r3, r0
 81055f2:	2b00      	cmp	r3, #0
 81055f4:	d001      	beq.n	81055fa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 81055f6:	2301      	movs	r3, #1
 81055f8:	e01a      	b.n	8105630 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81055fa:	68fb      	ldr	r3, [r7, #12]
 81055fc:	681b      	ldr	r3, [r3, #0]
 81055fe:	2220      	movs	r2, #32
 8105600:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8105602:	68fb      	ldr	r3, [r7, #12]
 8105604:	681b      	ldr	r3, [r3, #0]
 8105606:	6859      	ldr	r1, [r3, #4]
 8105608:	68fb      	ldr	r3, [r7, #12]
 810560a:	681a      	ldr	r2, [r3, #0]
 810560c:	4b0a      	ldr	r3, [pc, #40]	; (8105638 <HAL_I2C_Mem_Write+0x224>)
 810560e:	400b      	ands	r3, r1
 8105610:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8105612:	68fb      	ldr	r3, [r7, #12]
 8105614:	2220      	movs	r2, #32
 8105616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 810561a:	68fb      	ldr	r3, [r7, #12]
 810561c:	2200      	movs	r2, #0
 810561e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105622:	68fb      	ldr	r3, [r7, #12]
 8105624:	2200      	movs	r2, #0
 8105626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810562a:	2300      	movs	r3, #0
 810562c:	e000      	b.n	8105630 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 810562e:	2302      	movs	r3, #2
  }
}
 8105630:	4618      	mov	r0, r3
 8105632:	3718      	adds	r7, #24
 8105634:	46bd      	mov	sp, r7
 8105636:	bd80      	pop	{r7, pc}
 8105638:	fe00e800 	.word	0xfe00e800

0810563c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810563c:	b580      	push	{r7, lr}
 810563e:	b088      	sub	sp, #32
 8105640:	af02      	add	r7, sp, #8
 8105642:	60f8      	str	r0, [r7, #12]
 8105644:	4608      	mov	r0, r1
 8105646:	4611      	mov	r1, r2
 8105648:	461a      	mov	r2, r3
 810564a:	4603      	mov	r3, r0
 810564c:	817b      	strh	r3, [r7, #10]
 810564e:	460b      	mov	r3, r1
 8105650:	813b      	strh	r3, [r7, #8]
 8105652:	4613      	mov	r3, r2
 8105654:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8105656:	68fb      	ldr	r3, [r7, #12]
 8105658:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810565c:	b2db      	uxtb	r3, r3
 810565e:	2b20      	cmp	r3, #32
 8105660:	f040 80fd 	bne.w	810585e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8105664:	6a3b      	ldr	r3, [r7, #32]
 8105666:	2b00      	cmp	r3, #0
 8105668:	d002      	beq.n	8105670 <HAL_I2C_Mem_Read+0x34>
 810566a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 810566c:	2b00      	cmp	r3, #0
 810566e:	d105      	bne.n	810567c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8105670:	68fb      	ldr	r3, [r7, #12]
 8105672:	f44f 7200 	mov.w	r2, #512	; 0x200
 8105676:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8105678:	2301      	movs	r3, #1
 810567a:	e0f1      	b.n	8105860 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 810567c:	68fb      	ldr	r3, [r7, #12]
 810567e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8105682:	2b01      	cmp	r3, #1
 8105684:	d101      	bne.n	810568a <HAL_I2C_Mem_Read+0x4e>
 8105686:	2302      	movs	r3, #2
 8105688:	e0ea      	b.n	8105860 <HAL_I2C_Mem_Read+0x224>
 810568a:	68fb      	ldr	r3, [r7, #12]
 810568c:	2201      	movs	r2, #1
 810568e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8105692:	f7fc fe01 	bl	8102298 <HAL_GetTick>
 8105696:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8105698:	697b      	ldr	r3, [r7, #20]
 810569a:	9300      	str	r3, [sp, #0]
 810569c:	2319      	movs	r3, #25
 810569e:	2201      	movs	r2, #1
 81056a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81056a4:	68f8      	ldr	r0, [r7, #12]
 81056a6:	f000 f9c9 	bl	8105a3c <I2C_WaitOnFlagUntilTimeout>
 81056aa:	4603      	mov	r3, r0
 81056ac:	2b00      	cmp	r3, #0
 81056ae:	d001      	beq.n	81056b4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 81056b0:	2301      	movs	r3, #1
 81056b2:	e0d5      	b.n	8105860 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 81056b4:	68fb      	ldr	r3, [r7, #12]
 81056b6:	2222      	movs	r2, #34	; 0x22
 81056b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 81056bc:	68fb      	ldr	r3, [r7, #12]
 81056be:	2240      	movs	r2, #64	; 0x40
 81056c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81056c4:	68fb      	ldr	r3, [r7, #12]
 81056c6:	2200      	movs	r2, #0
 81056c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81056ca:	68fb      	ldr	r3, [r7, #12]
 81056cc:	6a3a      	ldr	r2, [r7, #32]
 81056ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 81056d0:	68fb      	ldr	r3, [r7, #12]
 81056d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 81056d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 81056d6:	68fb      	ldr	r3, [r7, #12]
 81056d8:	2200      	movs	r2, #0
 81056da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 81056dc:	88f8      	ldrh	r0, [r7, #6]
 81056de:	893a      	ldrh	r2, [r7, #8]
 81056e0:	8979      	ldrh	r1, [r7, #10]
 81056e2:	697b      	ldr	r3, [r7, #20]
 81056e4:	9301      	str	r3, [sp, #4]
 81056e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81056e8:	9300      	str	r3, [sp, #0]
 81056ea:	4603      	mov	r3, r0
 81056ec:	68f8      	ldr	r0, [r7, #12]
 81056ee:	f000 f92d 	bl	810594c <I2C_RequestMemoryRead>
 81056f2:	4603      	mov	r3, r0
 81056f4:	2b00      	cmp	r3, #0
 81056f6:	d005      	beq.n	8105704 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81056f8:	68fb      	ldr	r3, [r7, #12]
 81056fa:	2200      	movs	r2, #0
 81056fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8105700:	2301      	movs	r3, #1
 8105702:	e0ad      	b.n	8105860 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105704:	68fb      	ldr	r3, [r7, #12]
 8105706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105708:	b29b      	uxth	r3, r3
 810570a:	2bff      	cmp	r3, #255	; 0xff
 810570c:	d90e      	bls.n	810572c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 810570e:	68fb      	ldr	r3, [r7, #12]
 8105710:	22ff      	movs	r2, #255	; 0xff
 8105712:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8105714:	68fb      	ldr	r3, [r7, #12]
 8105716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105718:	b2da      	uxtb	r2, r3
 810571a:	8979      	ldrh	r1, [r7, #10]
 810571c:	4b52      	ldr	r3, [pc, #328]	; (8105868 <HAL_I2C_Mem_Read+0x22c>)
 810571e:	9300      	str	r3, [sp, #0]
 8105720:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8105724:	68f8      	ldr	r0, [r7, #12]
 8105726:	f000 fb17 	bl	8105d58 <I2C_TransferConfig>
 810572a:	e00f      	b.n	810574c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 810572c:	68fb      	ldr	r3, [r7, #12]
 810572e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105730:	b29a      	uxth	r2, r3
 8105732:	68fb      	ldr	r3, [r7, #12]
 8105734:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8105736:	68fb      	ldr	r3, [r7, #12]
 8105738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810573a:	b2da      	uxtb	r2, r3
 810573c:	8979      	ldrh	r1, [r7, #10]
 810573e:	4b4a      	ldr	r3, [pc, #296]	; (8105868 <HAL_I2C_Mem_Read+0x22c>)
 8105740:	9300      	str	r3, [sp, #0]
 8105742:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8105746:	68f8      	ldr	r0, [r7, #12]
 8105748:	f000 fb06 	bl	8105d58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 810574c:	697b      	ldr	r3, [r7, #20]
 810574e:	9300      	str	r3, [sp, #0]
 8105750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105752:	2200      	movs	r2, #0
 8105754:	2104      	movs	r1, #4
 8105756:	68f8      	ldr	r0, [r7, #12]
 8105758:	f000 f970 	bl	8105a3c <I2C_WaitOnFlagUntilTimeout>
 810575c:	4603      	mov	r3, r0
 810575e:	2b00      	cmp	r3, #0
 8105760:	d001      	beq.n	8105766 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8105762:	2301      	movs	r3, #1
 8105764:	e07c      	b.n	8105860 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8105766:	68fb      	ldr	r3, [r7, #12]
 8105768:	681b      	ldr	r3, [r3, #0]
 810576a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810576c:	68fb      	ldr	r3, [r7, #12]
 810576e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105770:	b2d2      	uxtb	r2, r2
 8105772:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8105774:	68fb      	ldr	r3, [r7, #12]
 8105776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105778:	1c5a      	adds	r2, r3, #1
 810577a:	68fb      	ldr	r3, [r7, #12]
 810577c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 810577e:	68fb      	ldr	r3, [r7, #12]
 8105780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105782:	3b01      	subs	r3, #1
 8105784:	b29a      	uxth	r2, r3
 8105786:	68fb      	ldr	r3, [r7, #12]
 8105788:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 810578a:	68fb      	ldr	r3, [r7, #12]
 810578c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810578e:	b29b      	uxth	r3, r3
 8105790:	3b01      	subs	r3, #1
 8105792:	b29a      	uxth	r2, r3
 8105794:	68fb      	ldr	r3, [r7, #12]
 8105796:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8105798:	68fb      	ldr	r3, [r7, #12]
 810579a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810579c:	b29b      	uxth	r3, r3
 810579e:	2b00      	cmp	r3, #0
 81057a0:	d034      	beq.n	810580c <HAL_I2C_Mem_Read+0x1d0>
 81057a2:	68fb      	ldr	r3, [r7, #12]
 81057a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81057a6:	2b00      	cmp	r3, #0
 81057a8:	d130      	bne.n	810580c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81057aa:	697b      	ldr	r3, [r7, #20]
 81057ac:	9300      	str	r3, [sp, #0]
 81057ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81057b0:	2200      	movs	r2, #0
 81057b2:	2180      	movs	r1, #128	; 0x80
 81057b4:	68f8      	ldr	r0, [r7, #12]
 81057b6:	f000 f941 	bl	8105a3c <I2C_WaitOnFlagUntilTimeout>
 81057ba:	4603      	mov	r3, r0
 81057bc:	2b00      	cmp	r3, #0
 81057be:	d001      	beq.n	81057c4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 81057c0:	2301      	movs	r3, #1
 81057c2:	e04d      	b.n	8105860 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81057c4:	68fb      	ldr	r3, [r7, #12]
 81057c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81057c8:	b29b      	uxth	r3, r3
 81057ca:	2bff      	cmp	r3, #255	; 0xff
 81057cc:	d90e      	bls.n	81057ec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81057ce:	68fb      	ldr	r3, [r7, #12]
 81057d0:	22ff      	movs	r2, #255	; 0xff
 81057d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 81057d4:	68fb      	ldr	r3, [r7, #12]
 81057d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81057d8:	b2da      	uxtb	r2, r3
 81057da:	8979      	ldrh	r1, [r7, #10]
 81057dc:	2300      	movs	r3, #0
 81057de:	9300      	str	r3, [sp, #0]
 81057e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81057e4:	68f8      	ldr	r0, [r7, #12]
 81057e6:	f000 fab7 	bl	8105d58 <I2C_TransferConfig>
 81057ea:	e00f      	b.n	810580c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81057ec:	68fb      	ldr	r3, [r7, #12]
 81057ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81057f0:	b29a      	uxth	r2, r3
 81057f2:	68fb      	ldr	r3, [r7, #12]
 81057f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 81057f6:	68fb      	ldr	r3, [r7, #12]
 81057f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81057fa:	b2da      	uxtb	r2, r3
 81057fc:	8979      	ldrh	r1, [r7, #10]
 81057fe:	2300      	movs	r3, #0
 8105800:	9300      	str	r3, [sp, #0]
 8105802:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8105806:	68f8      	ldr	r0, [r7, #12]
 8105808:	f000 faa6 	bl	8105d58 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 810580c:	68fb      	ldr	r3, [r7, #12]
 810580e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105810:	b29b      	uxth	r3, r3
 8105812:	2b00      	cmp	r3, #0
 8105814:	d19a      	bne.n	810574c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8105816:	697a      	ldr	r2, [r7, #20]
 8105818:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810581a:	68f8      	ldr	r0, [r7, #12]
 810581c:	f000 f98e 	bl	8105b3c <I2C_WaitOnSTOPFlagUntilTimeout>
 8105820:	4603      	mov	r3, r0
 8105822:	2b00      	cmp	r3, #0
 8105824:	d001      	beq.n	810582a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8105826:	2301      	movs	r3, #1
 8105828:	e01a      	b.n	8105860 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810582a:	68fb      	ldr	r3, [r7, #12]
 810582c:	681b      	ldr	r3, [r3, #0]
 810582e:	2220      	movs	r2, #32
 8105830:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8105832:	68fb      	ldr	r3, [r7, #12]
 8105834:	681b      	ldr	r3, [r3, #0]
 8105836:	6859      	ldr	r1, [r3, #4]
 8105838:	68fb      	ldr	r3, [r7, #12]
 810583a:	681a      	ldr	r2, [r3, #0]
 810583c:	4b0b      	ldr	r3, [pc, #44]	; (810586c <HAL_I2C_Mem_Read+0x230>)
 810583e:	400b      	ands	r3, r1
 8105840:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8105842:	68fb      	ldr	r3, [r7, #12]
 8105844:	2220      	movs	r2, #32
 8105846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 810584a:	68fb      	ldr	r3, [r7, #12]
 810584c:	2200      	movs	r2, #0
 810584e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105852:	68fb      	ldr	r3, [r7, #12]
 8105854:	2200      	movs	r2, #0
 8105856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810585a:	2300      	movs	r3, #0
 810585c:	e000      	b.n	8105860 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 810585e:	2302      	movs	r3, #2
  }
}
 8105860:	4618      	mov	r0, r3
 8105862:	3718      	adds	r7, #24
 8105864:	46bd      	mov	sp, r7
 8105866:	bd80      	pop	{r7, pc}
 8105868:	80002400 	.word	0x80002400
 810586c:	fe00e800 	.word	0xfe00e800

08105870 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8105870:	b480      	push	{r7}
 8105872:	b083      	sub	sp, #12
 8105874:	af00      	add	r7, sp, #0
 8105876:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8105878:	687b      	ldr	r3, [r7, #4]
 810587a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810587e:	b2db      	uxtb	r3, r3
}
 8105880:	4618      	mov	r0, r3
 8105882:	370c      	adds	r7, #12
 8105884:	46bd      	mov	sp, r7
 8105886:	f85d 7b04 	ldr.w	r7, [sp], #4
 810588a:	4770      	bx	lr

0810588c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
* @retval I2C Error Code
*/
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 810588c:	b480      	push	{r7}
 810588e:	b083      	sub	sp, #12
 8105890:	af00      	add	r7, sp, #0
 8105892:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8105894:	687b      	ldr	r3, [r7, #4]
 8105896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8105898:	4618      	mov	r0, r3
 810589a:	370c      	adds	r7, #12
 810589c:	46bd      	mov	sp, r7
 810589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81058a2:	4770      	bx	lr

081058a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 81058a4:	b580      	push	{r7, lr}
 81058a6:	b086      	sub	sp, #24
 81058a8:	af02      	add	r7, sp, #8
 81058aa:	60f8      	str	r0, [r7, #12]
 81058ac:	4608      	mov	r0, r1
 81058ae:	4611      	mov	r1, r2
 81058b0:	461a      	mov	r2, r3
 81058b2:	4603      	mov	r3, r0
 81058b4:	817b      	strh	r3, [r7, #10]
 81058b6:	460b      	mov	r3, r1
 81058b8:	813b      	strh	r3, [r7, #8]
 81058ba:	4613      	mov	r3, r2
 81058bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 81058be:	88fb      	ldrh	r3, [r7, #6]
 81058c0:	b2da      	uxtb	r2, r3
 81058c2:	8979      	ldrh	r1, [r7, #10]
 81058c4:	4b20      	ldr	r3, [pc, #128]	; (8105948 <I2C_RequestMemoryWrite+0xa4>)
 81058c6:	9300      	str	r3, [sp, #0]
 81058c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81058cc:	68f8      	ldr	r0, [r7, #12]
 81058ce:	f000 fa43 	bl	8105d58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81058d2:	69fa      	ldr	r2, [r7, #28]
 81058d4:	69b9      	ldr	r1, [r7, #24]
 81058d6:	68f8      	ldr	r0, [r7, #12]
 81058d8:	f000 f8f0 	bl	8105abc <I2C_WaitOnTXISFlagUntilTimeout>
 81058dc:	4603      	mov	r3, r0
 81058de:	2b00      	cmp	r3, #0
 81058e0:	d001      	beq.n	81058e6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 81058e2:	2301      	movs	r3, #1
 81058e4:	e02c      	b.n	8105940 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 81058e6:	88fb      	ldrh	r3, [r7, #6]
 81058e8:	2b01      	cmp	r3, #1
 81058ea:	d105      	bne.n	81058f8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81058ec:	893b      	ldrh	r3, [r7, #8]
 81058ee:	b2da      	uxtb	r2, r3
 81058f0:	68fb      	ldr	r3, [r7, #12]
 81058f2:	681b      	ldr	r3, [r3, #0]
 81058f4:	629a      	str	r2, [r3, #40]	; 0x28
 81058f6:	e015      	b.n	8105924 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 81058f8:	893b      	ldrh	r3, [r7, #8]
 81058fa:	0a1b      	lsrs	r3, r3, #8
 81058fc:	b29b      	uxth	r3, r3
 81058fe:	b2da      	uxtb	r2, r3
 8105900:	68fb      	ldr	r3, [r7, #12]
 8105902:	681b      	ldr	r3, [r3, #0]
 8105904:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8105906:	69fa      	ldr	r2, [r7, #28]
 8105908:	69b9      	ldr	r1, [r7, #24]
 810590a:	68f8      	ldr	r0, [r7, #12]
 810590c:	f000 f8d6 	bl	8105abc <I2C_WaitOnTXISFlagUntilTimeout>
 8105910:	4603      	mov	r3, r0
 8105912:	2b00      	cmp	r3, #0
 8105914:	d001      	beq.n	810591a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8105916:	2301      	movs	r3, #1
 8105918:	e012      	b.n	8105940 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810591a:	893b      	ldrh	r3, [r7, #8]
 810591c:	b2da      	uxtb	r2, r3
 810591e:	68fb      	ldr	r3, [r7, #12]
 8105920:	681b      	ldr	r3, [r3, #0]
 8105922:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8105924:	69fb      	ldr	r3, [r7, #28]
 8105926:	9300      	str	r3, [sp, #0]
 8105928:	69bb      	ldr	r3, [r7, #24]
 810592a:	2200      	movs	r2, #0
 810592c:	2180      	movs	r1, #128	; 0x80
 810592e:	68f8      	ldr	r0, [r7, #12]
 8105930:	f000 f884 	bl	8105a3c <I2C_WaitOnFlagUntilTimeout>
 8105934:	4603      	mov	r3, r0
 8105936:	2b00      	cmp	r3, #0
 8105938:	d001      	beq.n	810593e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 810593a:	2301      	movs	r3, #1
 810593c:	e000      	b.n	8105940 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 810593e:	2300      	movs	r3, #0
}
 8105940:	4618      	mov	r0, r3
 8105942:	3710      	adds	r7, #16
 8105944:	46bd      	mov	sp, r7
 8105946:	bd80      	pop	{r7, pc}
 8105948:	80002000 	.word	0x80002000

0810594c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 810594c:	b580      	push	{r7, lr}
 810594e:	b086      	sub	sp, #24
 8105950:	af02      	add	r7, sp, #8
 8105952:	60f8      	str	r0, [r7, #12]
 8105954:	4608      	mov	r0, r1
 8105956:	4611      	mov	r1, r2
 8105958:	461a      	mov	r2, r3
 810595a:	4603      	mov	r3, r0
 810595c:	817b      	strh	r3, [r7, #10]
 810595e:	460b      	mov	r3, r1
 8105960:	813b      	strh	r3, [r7, #8]
 8105962:	4613      	mov	r3, r2
 8105964:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8105966:	88fb      	ldrh	r3, [r7, #6]
 8105968:	b2da      	uxtb	r2, r3
 810596a:	8979      	ldrh	r1, [r7, #10]
 810596c:	4b20      	ldr	r3, [pc, #128]	; (81059f0 <I2C_RequestMemoryRead+0xa4>)
 810596e:	9300      	str	r3, [sp, #0]
 8105970:	2300      	movs	r3, #0
 8105972:	68f8      	ldr	r0, [r7, #12]
 8105974:	f000 f9f0 	bl	8105d58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8105978:	69fa      	ldr	r2, [r7, #28]
 810597a:	69b9      	ldr	r1, [r7, #24]
 810597c:	68f8      	ldr	r0, [r7, #12]
 810597e:	f000 f89d 	bl	8105abc <I2C_WaitOnTXISFlagUntilTimeout>
 8105982:	4603      	mov	r3, r0
 8105984:	2b00      	cmp	r3, #0
 8105986:	d001      	beq.n	810598c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8105988:	2301      	movs	r3, #1
 810598a:	e02c      	b.n	81059e6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 810598c:	88fb      	ldrh	r3, [r7, #6]
 810598e:	2b01      	cmp	r3, #1
 8105990:	d105      	bne.n	810599e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8105992:	893b      	ldrh	r3, [r7, #8]
 8105994:	b2da      	uxtb	r2, r3
 8105996:	68fb      	ldr	r3, [r7, #12]
 8105998:	681b      	ldr	r3, [r3, #0]
 810599a:	629a      	str	r2, [r3, #40]	; 0x28
 810599c:	e015      	b.n	81059ca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 810599e:	893b      	ldrh	r3, [r7, #8]
 81059a0:	0a1b      	lsrs	r3, r3, #8
 81059a2:	b29b      	uxth	r3, r3
 81059a4:	b2da      	uxtb	r2, r3
 81059a6:	68fb      	ldr	r3, [r7, #12]
 81059a8:	681b      	ldr	r3, [r3, #0]
 81059aa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81059ac:	69fa      	ldr	r2, [r7, #28]
 81059ae:	69b9      	ldr	r1, [r7, #24]
 81059b0:	68f8      	ldr	r0, [r7, #12]
 81059b2:	f000 f883 	bl	8105abc <I2C_WaitOnTXISFlagUntilTimeout>
 81059b6:	4603      	mov	r3, r0
 81059b8:	2b00      	cmp	r3, #0
 81059ba:	d001      	beq.n	81059c0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 81059bc:	2301      	movs	r3, #1
 81059be:	e012      	b.n	81059e6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81059c0:	893b      	ldrh	r3, [r7, #8]
 81059c2:	b2da      	uxtb	r2, r3
 81059c4:	68fb      	ldr	r3, [r7, #12]
 81059c6:	681b      	ldr	r3, [r3, #0]
 81059c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 81059ca:	69fb      	ldr	r3, [r7, #28]
 81059cc:	9300      	str	r3, [sp, #0]
 81059ce:	69bb      	ldr	r3, [r7, #24]
 81059d0:	2200      	movs	r2, #0
 81059d2:	2140      	movs	r1, #64	; 0x40
 81059d4:	68f8      	ldr	r0, [r7, #12]
 81059d6:	f000 f831 	bl	8105a3c <I2C_WaitOnFlagUntilTimeout>
 81059da:	4603      	mov	r3, r0
 81059dc:	2b00      	cmp	r3, #0
 81059de:	d001      	beq.n	81059e4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 81059e0:	2301      	movs	r3, #1
 81059e2:	e000      	b.n	81059e6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 81059e4:	2300      	movs	r3, #0
}
 81059e6:	4618      	mov	r0, r3
 81059e8:	3710      	adds	r7, #16
 81059ea:	46bd      	mov	sp, r7
 81059ec:	bd80      	pop	{r7, pc}
 81059ee:	bf00      	nop
 81059f0:	80002000 	.word	0x80002000

081059f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 81059f4:	b480      	push	{r7}
 81059f6:	b083      	sub	sp, #12
 81059f8:	af00      	add	r7, sp, #0
 81059fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 81059fc:	687b      	ldr	r3, [r7, #4]
 81059fe:	681b      	ldr	r3, [r3, #0]
 8105a00:	699b      	ldr	r3, [r3, #24]
 8105a02:	f003 0302 	and.w	r3, r3, #2
 8105a06:	2b02      	cmp	r3, #2
 8105a08:	d103      	bne.n	8105a12 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8105a0a:	687b      	ldr	r3, [r7, #4]
 8105a0c:	681b      	ldr	r3, [r3, #0]
 8105a0e:	2200      	movs	r2, #0
 8105a10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8105a12:	687b      	ldr	r3, [r7, #4]
 8105a14:	681b      	ldr	r3, [r3, #0]
 8105a16:	699b      	ldr	r3, [r3, #24]
 8105a18:	f003 0301 	and.w	r3, r3, #1
 8105a1c:	2b01      	cmp	r3, #1
 8105a1e:	d007      	beq.n	8105a30 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8105a20:	687b      	ldr	r3, [r7, #4]
 8105a22:	681b      	ldr	r3, [r3, #0]
 8105a24:	699a      	ldr	r2, [r3, #24]
 8105a26:	687b      	ldr	r3, [r7, #4]
 8105a28:	681b      	ldr	r3, [r3, #0]
 8105a2a:	f042 0201 	orr.w	r2, r2, #1
 8105a2e:	619a      	str	r2, [r3, #24]
  }
}
 8105a30:	bf00      	nop
 8105a32:	370c      	adds	r7, #12
 8105a34:	46bd      	mov	sp, r7
 8105a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a3a:	4770      	bx	lr

08105a3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8105a3c:	b580      	push	{r7, lr}
 8105a3e:	b084      	sub	sp, #16
 8105a40:	af00      	add	r7, sp, #0
 8105a42:	60f8      	str	r0, [r7, #12]
 8105a44:	60b9      	str	r1, [r7, #8]
 8105a46:	603b      	str	r3, [r7, #0]
 8105a48:	4613      	mov	r3, r2
 8105a4a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8105a4c:	e022      	b.n	8105a94 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8105a4e:	683b      	ldr	r3, [r7, #0]
 8105a50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8105a54:	d01e      	beq.n	8105a94 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105a56:	f7fc fc1f 	bl	8102298 <HAL_GetTick>
 8105a5a:	4602      	mov	r2, r0
 8105a5c:	69bb      	ldr	r3, [r7, #24]
 8105a5e:	1ad3      	subs	r3, r2, r3
 8105a60:	683a      	ldr	r2, [r7, #0]
 8105a62:	429a      	cmp	r2, r3
 8105a64:	d302      	bcc.n	8105a6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8105a66:	683b      	ldr	r3, [r7, #0]
 8105a68:	2b00      	cmp	r3, #0
 8105a6a:	d113      	bne.n	8105a94 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105a6c:	68fb      	ldr	r3, [r7, #12]
 8105a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105a70:	f043 0220 	orr.w	r2, r3, #32
 8105a74:	68fb      	ldr	r3, [r7, #12]
 8105a76:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8105a78:	68fb      	ldr	r3, [r7, #12]
 8105a7a:	2220      	movs	r2, #32
 8105a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8105a80:	68fb      	ldr	r3, [r7, #12]
 8105a82:	2200      	movs	r2, #0
 8105a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8105a88:	68fb      	ldr	r3, [r7, #12]
 8105a8a:	2200      	movs	r2, #0
 8105a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8105a90:	2301      	movs	r3, #1
 8105a92:	e00f      	b.n	8105ab4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8105a94:	68fb      	ldr	r3, [r7, #12]
 8105a96:	681b      	ldr	r3, [r3, #0]
 8105a98:	699a      	ldr	r2, [r3, #24]
 8105a9a:	68bb      	ldr	r3, [r7, #8]
 8105a9c:	4013      	ands	r3, r2
 8105a9e:	68ba      	ldr	r2, [r7, #8]
 8105aa0:	429a      	cmp	r2, r3
 8105aa2:	bf0c      	ite	eq
 8105aa4:	2301      	moveq	r3, #1
 8105aa6:	2300      	movne	r3, #0
 8105aa8:	b2db      	uxtb	r3, r3
 8105aaa:	461a      	mov	r2, r3
 8105aac:	79fb      	ldrb	r3, [r7, #7]
 8105aae:	429a      	cmp	r2, r3
 8105ab0:	d0cd      	beq.n	8105a4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8105ab2:	2300      	movs	r3, #0
}
 8105ab4:	4618      	mov	r0, r3
 8105ab6:	3710      	adds	r7, #16
 8105ab8:	46bd      	mov	sp, r7
 8105aba:	bd80      	pop	{r7, pc}

08105abc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8105abc:	b580      	push	{r7, lr}
 8105abe:	b084      	sub	sp, #16
 8105ac0:	af00      	add	r7, sp, #0
 8105ac2:	60f8      	str	r0, [r7, #12]
 8105ac4:	60b9      	str	r1, [r7, #8]
 8105ac6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8105ac8:	e02c      	b.n	8105b24 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8105aca:	687a      	ldr	r2, [r7, #4]
 8105acc:	68b9      	ldr	r1, [r7, #8]
 8105ace:	68f8      	ldr	r0, [r7, #12]
 8105ad0:	f000 f8dc 	bl	8105c8c <I2C_IsAcknowledgeFailed>
 8105ad4:	4603      	mov	r3, r0
 8105ad6:	2b00      	cmp	r3, #0
 8105ad8:	d001      	beq.n	8105ade <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8105ada:	2301      	movs	r3, #1
 8105adc:	e02a      	b.n	8105b34 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8105ade:	68bb      	ldr	r3, [r7, #8]
 8105ae0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8105ae4:	d01e      	beq.n	8105b24 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105ae6:	f7fc fbd7 	bl	8102298 <HAL_GetTick>
 8105aea:	4602      	mov	r2, r0
 8105aec:	687b      	ldr	r3, [r7, #4]
 8105aee:	1ad3      	subs	r3, r2, r3
 8105af0:	68ba      	ldr	r2, [r7, #8]
 8105af2:	429a      	cmp	r2, r3
 8105af4:	d302      	bcc.n	8105afc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8105af6:	68bb      	ldr	r3, [r7, #8]
 8105af8:	2b00      	cmp	r3, #0
 8105afa:	d113      	bne.n	8105b24 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105afc:	68fb      	ldr	r3, [r7, #12]
 8105afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105b00:	f043 0220 	orr.w	r2, r3, #32
 8105b04:	68fb      	ldr	r3, [r7, #12]
 8105b06:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8105b08:	68fb      	ldr	r3, [r7, #12]
 8105b0a:	2220      	movs	r2, #32
 8105b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8105b10:	68fb      	ldr	r3, [r7, #12]
 8105b12:	2200      	movs	r2, #0
 8105b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8105b18:	68fb      	ldr	r3, [r7, #12]
 8105b1a:	2200      	movs	r2, #0
 8105b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8105b20:	2301      	movs	r3, #1
 8105b22:	e007      	b.n	8105b34 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8105b24:	68fb      	ldr	r3, [r7, #12]
 8105b26:	681b      	ldr	r3, [r3, #0]
 8105b28:	699b      	ldr	r3, [r3, #24]
 8105b2a:	f003 0302 	and.w	r3, r3, #2
 8105b2e:	2b02      	cmp	r3, #2
 8105b30:	d1cb      	bne.n	8105aca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8105b32:	2300      	movs	r3, #0
}
 8105b34:	4618      	mov	r0, r3
 8105b36:	3710      	adds	r7, #16
 8105b38:	46bd      	mov	sp, r7
 8105b3a:	bd80      	pop	{r7, pc}

08105b3c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8105b3c:	b580      	push	{r7, lr}
 8105b3e:	b084      	sub	sp, #16
 8105b40:	af00      	add	r7, sp, #0
 8105b42:	60f8      	str	r0, [r7, #12]
 8105b44:	60b9      	str	r1, [r7, #8]
 8105b46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8105b48:	e028      	b.n	8105b9c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8105b4a:	687a      	ldr	r2, [r7, #4]
 8105b4c:	68b9      	ldr	r1, [r7, #8]
 8105b4e:	68f8      	ldr	r0, [r7, #12]
 8105b50:	f000 f89c 	bl	8105c8c <I2C_IsAcknowledgeFailed>
 8105b54:	4603      	mov	r3, r0
 8105b56:	2b00      	cmp	r3, #0
 8105b58:	d001      	beq.n	8105b5e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8105b5a:	2301      	movs	r3, #1
 8105b5c:	e026      	b.n	8105bac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105b5e:	f7fc fb9b 	bl	8102298 <HAL_GetTick>
 8105b62:	4602      	mov	r2, r0
 8105b64:	687b      	ldr	r3, [r7, #4]
 8105b66:	1ad3      	subs	r3, r2, r3
 8105b68:	68ba      	ldr	r2, [r7, #8]
 8105b6a:	429a      	cmp	r2, r3
 8105b6c:	d302      	bcc.n	8105b74 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8105b6e:	68bb      	ldr	r3, [r7, #8]
 8105b70:	2b00      	cmp	r3, #0
 8105b72:	d113      	bne.n	8105b9c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105b74:	68fb      	ldr	r3, [r7, #12]
 8105b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105b78:	f043 0220 	orr.w	r2, r3, #32
 8105b7c:	68fb      	ldr	r3, [r7, #12]
 8105b7e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8105b80:	68fb      	ldr	r3, [r7, #12]
 8105b82:	2220      	movs	r2, #32
 8105b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8105b88:	68fb      	ldr	r3, [r7, #12]
 8105b8a:	2200      	movs	r2, #0
 8105b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8105b90:	68fb      	ldr	r3, [r7, #12]
 8105b92:	2200      	movs	r2, #0
 8105b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8105b98:	2301      	movs	r3, #1
 8105b9a:	e007      	b.n	8105bac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8105b9c:	68fb      	ldr	r3, [r7, #12]
 8105b9e:	681b      	ldr	r3, [r3, #0]
 8105ba0:	699b      	ldr	r3, [r3, #24]
 8105ba2:	f003 0320 	and.w	r3, r3, #32
 8105ba6:	2b20      	cmp	r3, #32
 8105ba8:	d1cf      	bne.n	8105b4a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8105baa:	2300      	movs	r3, #0
}
 8105bac:	4618      	mov	r0, r3
 8105bae:	3710      	adds	r7, #16
 8105bb0:	46bd      	mov	sp, r7
 8105bb2:	bd80      	pop	{r7, pc}

08105bb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8105bb4:	b580      	push	{r7, lr}
 8105bb6:	b084      	sub	sp, #16
 8105bb8:	af00      	add	r7, sp, #0
 8105bba:	60f8      	str	r0, [r7, #12]
 8105bbc:	60b9      	str	r1, [r7, #8]
 8105bbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8105bc0:	e055      	b.n	8105c6e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8105bc2:	687a      	ldr	r2, [r7, #4]
 8105bc4:	68b9      	ldr	r1, [r7, #8]
 8105bc6:	68f8      	ldr	r0, [r7, #12]
 8105bc8:	f000 f860 	bl	8105c8c <I2C_IsAcknowledgeFailed>
 8105bcc:	4603      	mov	r3, r0
 8105bce:	2b00      	cmp	r3, #0
 8105bd0:	d001      	beq.n	8105bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8105bd2:	2301      	movs	r3, #1
 8105bd4:	e053      	b.n	8105c7e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8105bd6:	68fb      	ldr	r3, [r7, #12]
 8105bd8:	681b      	ldr	r3, [r3, #0]
 8105bda:	699b      	ldr	r3, [r3, #24]
 8105bdc:	f003 0320 	and.w	r3, r3, #32
 8105be0:	2b20      	cmp	r3, #32
 8105be2:	d129      	bne.n	8105c38 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8105be4:	68fb      	ldr	r3, [r7, #12]
 8105be6:	681b      	ldr	r3, [r3, #0]
 8105be8:	699b      	ldr	r3, [r3, #24]
 8105bea:	f003 0304 	and.w	r3, r3, #4
 8105bee:	2b04      	cmp	r3, #4
 8105bf0:	d105      	bne.n	8105bfe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8105bf2:	68fb      	ldr	r3, [r7, #12]
 8105bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105bf6:	2b00      	cmp	r3, #0
 8105bf8:	d001      	beq.n	8105bfe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8105bfa:	2300      	movs	r3, #0
 8105bfc:	e03f      	b.n	8105c7e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8105bfe:	68fb      	ldr	r3, [r7, #12]
 8105c00:	681b      	ldr	r3, [r3, #0]
 8105c02:	2220      	movs	r2, #32
 8105c04:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8105c06:	68fb      	ldr	r3, [r7, #12]
 8105c08:	681b      	ldr	r3, [r3, #0]
 8105c0a:	6859      	ldr	r1, [r3, #4]
 8105c0c:	68fb      	ldr	r3, [r7, #12]
 8105c0e:	681a      	ldr	r2, [r3, #0]
 8105c10:	4b1d      	ldr	r3, [pc, #116]	; (8105c88 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8105c12:	400b      	ands	r3, r1
 8105c14:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8105c16:	68fb      	ldr	r3, [r7, #12]
 8105c18:	2200      	movs	r2, #0
 8105c1a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8105c1c:	68fb      	ldr	r3, [r7, #12]
 8105c1e:	2220      	movs	r2, #32
 8105c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8105c24:	68fb      	ldr	r3, [r7, #12]
 8105c26:	2200      	movs	r2, #0
 8105c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8105c2c:	68fb      	ldr	r3, [r7, #12]
 8105c2e:	2200      	movs	r2, #0
 8105c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8105c34:	2301      	movs	r3, #1
 8105c36:	e022      	b.n	8105c7e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105c38:	f7fc fb2e 	bl	8102298 <HAL_GetTick>
 8105c3c:	4602      	mov	r2, r0
 8105c3e:	687b      	ldr	r3, [r7, #4]
 8105c40:	1ad3      	subs	r3, r2, r3
 8105c42:	68ba      	ldr	r2, [r7, #8]
 8105c44:	429a      	cmp	r2, r3
 8105c46:	d302      	bcc.n	8105c4e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8105c48:	68bb      	ldr	r3, [r7, #8]
 8105c4a:	2b00      	cmp	r3, #0
 8105c4c:	d10f      	bne.n	8105c6e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105c4e:	68fb      	ldr	r3, [r7, #12]
 8105c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105c52:	f043 0220 	orr.w	r2, r3, #32
 8105c56:	68fb      	ldr	r3, [r7, #12]
 8105c58:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8105c5a:	68fb      	ldr	r3, [r7, #12]
 8105c5c:	2220      	movs	r2, #32
 8105c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8105c62:	68fb      	ldr	r3, [r7, #12]
 8105c64:	2200      	movs	r2, #0
 8105c66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8105c6a:	2301      	movs	r3, #1
 8105c6c:	e007      	b.n	8105c7e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8105c6e:	68fb      	ldr	r3, [r7, #12]
 8105c70:	681b      	ldr	r3, [r3, #0]
 8105c72:	699b      	ldr	r3, [r3, #24]
 8105c74:	f003 0304 	and.w	r3, r3, #4
 8105c78:	2b04      	cmp	r3, #4
 8105c7a:	d1a2      	bne.n	8105bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8105c7c:	2300      	movs	r3, #0
}
 8105c7e:	4618      	mov	r0, r3
 8105c80:	3710      	adds	r7, #16
 8105c82:	46bd      	mov	sp, r7
 8105c84:	bd80      	pop	{r7, pc}
 8105c86:	bf00      	nop
 8105c88:	fe00e800 	.word	0xfe00e800

08105c8c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8105c8c:	b580      	push	{r7, lr}
 8105c8e:	b084      	sub	sp, #16
 8105c90:	af00      	add	r7, sp, #0
 8105c92:	60f8      	str	r0, [r7, #12]
 8105c94:	60b9      	str	r1, [r7, #8]
 8105c96:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8105c98:	68fb      	ldr	r3, [r7, #12]
 8105c9a:	681b      	ldr	r3, [r3, #0]
 8105c9c:	699b      	ldr	r3, [r3, #24]
 8105c9e:	f003 0310 	and.w	r3, r3, #16
 8105ca2:	2b10      	cmp	r3, #16
 8105ca4:	d151      	bne.n	8105d4a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8105ca6:	e022      	b.n	8105cee <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8105ca8:	68bb      	ldr	r3, [r7, #8]
 8105caa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8105cae:	d01e      	beq.n	8105cee <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105cb0:	f7fc faf2 	bl	8102298 <HAL_GetTick>
 8105cb4:	4602      	mov	r2, r0
 8105cb6:	687b      	ldr	r3, [r7, #4]
 8105cb8:	1ad3      	subs	r3, r2, r3
 8105cba:	68ba      	ldr	r2, [r7, #8]
 8105cbc:	429a      	cmp	r2, r3
 8105cbe:	d302      	bcc.n	8105cc6 <I2C_IsAcknowledgeFailed+0x3a>
 8105cc0:	68bb      	ldr	r3, [r7, #8]
 8105cc2:	2b00      	cmp	r3, #0
 8105cc4:	d113      	bne.n	8105cee <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105cc6:	68fb      	ldr	r3, [r7, #12]
 8105cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105cca:	f043 0220 	orr.w	r2, r3, #32
 8105cce:	68fb      	ldr	r3, [r7, #12]
 8105cd0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8105cd2:	68fb      	ldr	r3, [r7, #12]
 8105cd4:	2220      	movs	r2, #32
 8105cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8105cda:	68fb      	ldr	r3, [r7, #12]
 8105cdc:	2200      	movs	r2, #0
 8105cde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8105ce2:	68fb      	ldr	r3, [r7, #12]
 8105ce4:	2200      	movs	r2, #0
 8105ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8105cea:	2301      	movs	r3, #1
 8105cec:	e02e      	b.n	8105d4c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8105cee:	68fb      	ldr	r3, [r7, #12]
 8105cf0:	681b      	ldr	r3, [r3, #0]
 8105cf2:	699b      	ldr	r3, [r3, #24]
 8105cf4:	f003 0320 	and.w	r3, r3, #32
 8105cf8:	2b20      	cmp	r3, #32
 8105cfa:	d1d5      	bne.n	8105ca8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8105cfc:	68fb      	ldr	r3, [r7, #12]
 8105cfe:	681b      	ldr	r3, [r3, #0]
 8105d00:	2210      	movs	r2, #16
 8105d02:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8105d04:	68fb      	ldr	r3, [r7, #12]
 8105d06:	681b      	ldr	r3, [r3, #0]
 8105d08:	2220      	movs	r2, #32
 8105d0a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8105d0c:	68f8      	ldr	r0, [r7, #12]
 8105d0e:	f7ff fe71 	bl	81059f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8105d12:	68fb      	ldr	r3, [r7, #12]
 8105d14:	681b      	ldr	r3, [r3, #0]
 8105d16:	6859      	ldr	r1, [r3, #4]
 8105d18:	68fb      	ldr	r3, [r7, #12]
 8105d1a:	681a      	ldr	r2, [r3, #0]
 8105d1c:	4b0d      	ldr	r3, [pc, #52]	; (8105d54 <I2C_IsAcknowledgeFailed+0xc8>)
 8105d1e:	400b      	ands	r3, r1
 8105d20:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8105d22:	68fb      	ldr	r3, [r7, #12]
 8105d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105d26:	f043 0204 	orr.w	r2, r3, #4
 8105d2a:	68fb      	ldr	r3, [r7, #12]
 8105d2c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8105d2e:	68fb      	ldr	r3, [r7, #12]
 8105d30:	2220      	movs	r2, #32
 8105d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8105d36:	68fb      	ldr	r3, [r7, #12]
 8105d38:	2200      	movs	r2, #0
 8105d3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105d3e:	68fb      	ldr	r3, [r7, #12]
 8105d40:	2200      	movs	r2, #0
 8105d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8105d46:	2301      	movs	r3, #1
 8105d48:	e000      	b.n	8105d4c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8105d4a:	2300      	movs	r3, #0
}
 8105d4c:	4618      	mov	r0, r3
 8105d4e:	3710      	adds	r7, #16
 8105d50:	46bd      	mov	sp, r7
 8105d52:	bd80      	pop	{r7, pc}
 8105d54:	fe00e800 	.word	0xfe00e800

08105d58 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8105d58:	b480      	push	{r7}
 8105d5a:	b085      	sub	sp, #20
 8105d5c:	af00      	add	r7, sp, #0
 8105d5e:	60f8      	str	r0, [r7, #12]
 8105d60:	607b      	str	r3, [r7, #4]
 8105d62:	460b      	mov	r3, r1
 8105d64:	817b      	strh	r3, [r7, #10]
 8105d66:	4613      	mov	r3, r2
 8105d68:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8105d6a:	68fb      	ldr	r3, [r7, #12]
 8105d6c:	681b      	ldr	r3, [r3, #0]
 8105d6e:	685a      	ldr	r2, [r3, #4]
 8105d70:	69bb      	ldr	r3, [r7, #24]
 8105d72:	0d5b      	lsrs	r3, r3, #21
 8105d74:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8105d78:	4b0d      	ldr	r3, [pc, #52]	; (8105db0 <I2C_TransferConfig+0x58>)
 8105d7a:	430b      	orrs	r3, r1
 8105d7c:	43db      	mvns	r3, r3
 8105d7e:	ea02 0103 	and.w	r1, r2, r3
 8105d82:	897b      	ldrh	r3, [r7, #10]
 8105d84:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8105d88:	7a7b      	ldrb	r3, [r7, #9]
 8105d8a:	041b      	lsls	r3, r3, #16
 8105d8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8105d90:	431a      	orrs	r2, r3
 8105d92:	687b      	ldr	r3, [r7, #4]
 8105d94:	431a      	orrs	r2, r3
 8105d96:	69bb      	ldr	r3, [r7, #24]
 8105d98:	431a      	orrs	r2, r3
 8105d9a:	68fb      	ldr	r3, [r7, #12]
 8105d9c:	681b      	ldr	r3, [r3, #0]
 8105d9e:	430a      	orrs	r2, r1
 8105da0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8105da2:	bf00      	nop
 8105da4:	3714      	adds	r7, #20
 8105da6:	46bd      	mov	sp, r7
 8105da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105dac:	4770      	bx	lr
 8105dae:	bf00      	nop
 8105db0:	03ff63ff 	.word	0x03ff63ff

08105db4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8105db4:	b480      	push	{r7}
 8105db6:	b083      	sub	sp, #12
 8105db8:	af00      	add	r7, sp, #0
 8105dba:	6078      	str	r0, [r7, #4]
 8105dbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8105dbe:	687b      	ldr	r3, [r7, #4]
 8105dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105dc4:	b2db      	uxtb	r3, r3
 8105dc6:	2b20      	cmp	r3, #32
 8105dc8:	d138      	bne.n	8105e3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8105dca:	687b      	ldr	r3, [r7, #4]
 8105dcc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8105dd0:	2b01      	cmp	r3, #1
 8105dd2:	d101      	bne.n	8105dd8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8105dd4:	2302      	movs	r3, #2
 8105dd6:	e032      	b.n	8105e3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8105dd8:	687b      	ldr	r3, [r7, #4]
 8105dda:	2201      	movs	r2, #1
 8105ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8105de0:	687b      	ldr	r3, [r7, #4]
 8105de2:	2224      	movs	r2, #36	; 0x24
 8105de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8105de8:	687b      	ldr	r3, [r7, #4]
 8105dea:	681b      	ldr	r3, [r3, #0]
 8105dec:	681a      	ldr	r2, [r3, #0]
 8105dee:	687b      	ldr	r3, [r7, #4]
 8105df0:	681b      	ldr	r3, [r3, #0]
 8105df2:	f022 0201 	bic.w	r2, r2, #1
 8105df6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8105df8:	687b      	ldr	r3, [r7, #4]
 8105dfa:	681b      	ldr	r3, [r3, #0]
 8105dfc:	681a      	ldr	r2, [r3, #0]
 8105dfe:	687b      	ldr	r3, [r7, #4]
 8105e00:	681b      	ldr	r3, [r3, #0]
 8105e02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8105e06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8105e08:	687b      	ldr	r3, [r7, #4]
 8105e0a:	681b      	ldr	r3, [r3, #0]
 8105e0c:	6819      	ldr	r1, [r3, #0]
 8105e0e:	687b      	ldr	r3, [r7, #4]
 8105e10:	681b      	ldr	r3, [r3, #0]
 8105e12:	683a      	ldr	r2, [r7, #0]
 8105e14:	430a      	orrs	r2, r1
 8105e16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8105e18:	687b      	ldr	r3, [r7, #4]
 8105e1a:	681b      	ldr	r3, [r3, #0]
 8105e1c:	681a      	ldr	r2, [r3, #0]
 8105e1e:	687b      	ldr	r3, [r7, #4]
 8105e20:	681b      	ldr	r3, [r3, #0]
 8105e22:	f042 0201 	orr.w	r2, r2, #1
 8105e26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8105e28:	687b      	ldr	r3, [r7, #4]
 8105e2a:	2220      	movs	r2, #32
 8105e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105e30:	687b      	ldr	r3, [r7, #4]
 8105e32:	2200      	movs	r2, #0
 8105e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8105e38:	2300      	movs	r3, #0
 8105e3a:	e000      	b.n	8105e3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8105e3c:	2302      	movs	r3, #2
  }
}
 8105e3e:	4618      	mov	r0, r3
 8105e40:	370c      	adds	r7, #12
 8105e42:	46bd      	mov	sp, r7
 8105e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e48:	4770      	bx	lr

08105e4a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8105e4a:	b480      	push	{r7}
 8105e4c:	b085      	sub	sp, #20
 8105e4e:	af00      	add	r7, sp, #0
 8105e50:	6078      	str	r0, [r7, #4]
 8105e52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8105e54:	687b      	ldr	r3, [r7, #4]
 8105e56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105e5a:	b2db      	uxtb	r3, r3
 8105e5c:	2b20      	cmp	r3, #32
 8105e5e:	d139      	bne.n	8105ed4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8105e60:	687b      	ldr	r3, [r7, #4]
 8105e62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8105e66:	2b01      	cmp	r3, #1
 8105e68:	d101      	bne.n	8105e6e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8105e6a:	2302      	movs	r3, #2
 8105e6c:	e033      	b.n	8105ed6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8105e6e:	687b      	ldr	r3, [r7, #4]
 8105e70:	2201      	movs	r2, #1
 8105e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8105e76:	687b      	ldr	r3, [r7, #4]
 8105e78:	2224      	movs	r2, #36	; 0x24
 8105e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8105e7e:	687b      	ldr	r3, [r7, #4]
 8105e80:	681b      	ldr	r3, [r3, #0]
 8105e82:	681a      	ldr	r2, [r3, #0]
 8105e84:	687b      	ldr	r3, [r7, #4]
 8105e86:	681b      	ldr	r3, [r3, #0]
 8105e88:	f022 0201 	bic.w	r2, r2, #1
 8105e8c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8105e8e:	687b      	ldr	r3, [r7, #4]
 8105e90:	681b      	ldr	r3, [r3, #0]
 8105e92:	681b      	ldr	r3, [r3, #0]
 8105e94:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8105e96:	68fb      	ldr	r3, [r7, #12]
 8105e98:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8105e9c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8105e9e:	683b      	ldr	r3, [r7, #0]
 8105ea0:	021b      	lsls	r3, r3, #8
 8105ea2:	68fa      	ldr	r2, [r7, #12]
 8105ea4:	4313      	orrs	r3, r2
 8105ea6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8105ea8:	687b      	ldr	r3, [r7, #4]
 8105eaa:	681b      	ldr	r3, [r3, #0]
 8105eac:	68fa      	ldr	r2, [r7, #12]
 8105eae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8105eb0:	687b      	ldr	r3, [r7, #4]
 8105eb2:	681b      	ldr	r3, [r3, #0]
 8105eb4:	681a      	ldr	r2, [r3, #0]
 8105eb6:	687b      	ldr	r3, [r7, #4]
 8105eb8:	681b      	ldr	r3, [r3, #0]
 8105eba:	f042 0201 	orr.w	r2, r2, #1
 8105ebe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8105ec0:	687b      	ldr	r3, [r7, #4]
 8105ec2:	2220      	movs	r2, #32
 8105ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105ec8:	687b      	ldr	r3, [r7, #4]
 8105eca:	2200      	movs	r2, #0
 8105ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8105ed0:	2300      	movs	r3, #0
 8105ed2:	e000      	b.n	8105ed6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8105ed4:	2302      	movs	r3, #2
  }
}
 8105ed6:	4618      	mov	r0, r3
 8105ed8:	3714      	adds	r7, #20
 8105eda:	46bd      	mov	sp, r7
 8105edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ee0:	4770      	bx	lr
	...

08105ee4 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8105ee4:	b480      	push	{r7}
 8105ee6:	b085      	sub	sp, #20
 8105ee8:	af00      	add	r7, sp, #0
 8105eea:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8105eec:	4b0d      	ldr	r3, [pc, #52]	; (8105f24 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8105eee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8105ef2:	4a0c      	ldr	r2, [pc, #48]	; (8105f24 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8105ef4:	f043 0302 	orr.w	r3, r3, #2
 8105ef8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8105efc:	4b09      	ldr	r3, [pc, #36]	; (8105f24 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8105efe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8105f02:	f003 0302 	and.w	r3, r3, #2
 8105f06:	60fb      	str	r3, [r7, #12]
 8105f08:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8105f0a:	4b07      	ldr	r3, [pc, #28]	; (8105f28 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8105f0c:	685a      	ldr	r2, [r3, #4]
 8105f0e:	4906      	ldr	r1, [pc, #24]	; (8105f28 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8105f10:	687b      	ldr	r3, [r7, #4]
 8105f12:	4313      	orrs	r3, r2
 8105f14:	604b      	str	r3, [r1, #4]
}
 8105f16:	bf00      	nop
 8105f18:	3714      	adds	r7, #20
 8105f1a:	46bd      	mov	sp, r7
 8105f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f20:	4770      	bx	lr
 8105f22:	bf00      	nop
 8105f24:	58024400 	.word	0x58024400
 8105f28:	58000400 	.word	0x58000400

08105f2c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8105f2c:	b580      	push	{r7, lr}
 8105f2e:	b084      	sub	sp, #16
 8105f30:	af00      	add	r7, sp, #0
 8105f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8105f34:	687b      	ldr	r3, [r7, #4]
 8105f36:	2b00      	cmp	r3, #0
 8105f38:	d101      	bne.n	8105f3e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8105f3a:	2301      	movs	r3, #1
 8105f3c:	e038      	b.n	8105fb0 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8105f3e:	687b      	ldr	r3, [r7, #4]
 8105f40:	681b      	ldr	r3, [r3, #0]
 8105f42:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8105f46:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8105f48:	687b      	ldr	r3, [r7, #4]
 8105f4a:	681b      	ldr	r3, [r3, #0]
 8105f4c:	f245 5255 	movw	r2, #21845	; 0x5555
 8105f50:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8105f52:	687b      	ldr	r3, [r7, #4]
 8105f54:	681b      	ldr	r3, [r3, #0]
 8105f56:	687a      	ldr	r2, [r7, #4]
 8105f58:	6852      	ldr	r2, [r2, #4]
 8105f5a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8105f5c:	687b      	ldr	r3, [r7, #4]
 8105f5e:	681b      	ldr	r3, [r3, #0]
 8105f60:	687a      	ldr	r2, [r7, #4]
 8105f62:	6892      	ldr	r2, [r2, #8]
 8105f64:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8105f66:	f7fc f997 	bl	8102298 <HAL_GetTick>
 8105f6a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8105f6c:	e008      	b.n	8105f80 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8105f6e:	f7fc f993 	bl	8102298 <HAL_GetTick>
 8105f72:	4602      	mov	r2, r0
 8105f74:	68fb      	ldr	r3, [r7, #12]
 8105f76:	1ad3      	subs	r3, r2, r3
 8105f78:	2b30      	cmp	r3, #48	; 0x30
 8105f7a:	d901      	bls.n	8105f80 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8105f7c:	2303      	movs	r3, #3
 8105f7e:	e017      	b.n	8105fb0 <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 8105f80:	687b      	ldr	r3, [r7, #4]
 8105f82:	681b      	ldr	r3, [r3, #0]
 8105f84:	68db      	ldr	r3, [r3, #12]
 8105f86:	2b00      	cmp	r3, #0
 8105f88:	d1f1      	bne.n	8105f6e <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8105f8a:	687b      	ldr	r3, [r7, #4]
 8105f8c:	681b      	ldr	r3, [r3, #0]
 8105f8e:	691a      	ldr	r2, [r3, #16]
 8105f90:	687b      	ldr	r3, [r7, #4]
 8105f92:	68db      	ldr	r3, [r3, #12]
 8105f94:	429a      	cmp	r2, r3
 8105f96:	d005      	beq.n	8105fa4 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8105f98:	687b      	ldr	r3, [r7, #4]
 8105f9a:	681b      	ldr	r3, [r3, #0]
 8105f9c:	687a      	ldr	r2, [r7, #4]
 8105f9e:	68d2      	ldr	r2, [r2, #12]
 8105fa0:	611a      	str	r2, [r3, #16]
 8105fa2:	e004      	b.n	8105fae <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8105fa4:	687b      	ldr	r3, [r7, #4]
 8105fa6:	681b      	ldr	r3, [r3, #0]
 8105fa8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8105fac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8105fae:	2300      	movs	r3, #0
}
 8105fb0:	4618      	mov	r0, r3
 8105fb2:	3710      	adds	r7, #16
 8105fb4:	46bd      	mov	sp, r7
 8105fb6:	bd80      	pop	{r7, pc}

08105fb8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8105fb8:	b480      	push	{r7}
 8105fba:	b083      	sub	sp, #12
 8105fbc:	af00      	add	r7, sp, #0
 8105fbe:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8105fc0:	687b      	ldr	r3, [r7, #4]
 8105fc2:	681b      	ldr	r3, [r3, #0]
 8105fc4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8105fc8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8105fca:	2300      	movs	r3, #0
}
 8105fcc:	4618      	mov	r0, r3
 8105fce:	370c      	adds	r7, #12
 8105fd0:	46bd      	mov	sp, r7
 8105fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105fd6:	4770      	bx	lr

08105fd8 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8105fd8:	b580      	push	{r7, lr}
 8105fda:	b084      	sub	sp, #16
 8105fdc:	af00      	add	r7, sp, #0
 8105fde:	60f8      	str	r0, [r7, #12]
 8105fe0:	460b      	mov	r3, r1
 8105fe2:	607a      	str	r2, [r7, #4]
 8105fe4:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8105fe6:	4b35      	ldr	r3, [pc, #212]	; (81060bc <HAL_PWREx_EnterSTOPMode+0xe4>)
 8105fe8:	681b      	ldr	r3, [r3, #0]
 8105fea:	f023 0201 	bic.w	r2, r3, #1
 8105fee:	4933      	ldr	r1, [pc, #204]	; (81060bc <HAL_PWREx_EnterSTOPMode+0xe4>)
 8105ff0:	68fb      	ldr	r3, [r7, #12]
 8105ff2:	4313      	orrs	r3, r2
 8105ff4:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8105ff6:	687b      	ldr	r3, [r7, #4]
 8105ff8:	2b00      	cmp	r3, #0
 8105ffa:	d121      	bne.n	8106040 <HAL_PWREx_EnterSTOPMode+0x68>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8105ffc:	f7fc fa52 	bl	81024a4 <HAL_GetCurrentCPUID>
 8106000:	4603      	mov	r3, r0
 8106002:	2b03      	cmp	r3, #3
 8106004:	d154      	bne.n	81060b0 <HAL_PWREx_EnterSTOPMode+0xd8>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8106006:	4b2d      	ldr	r3, [pc, #180]	; (81060bc <HAL_PWREx_EnterSTOPMode+0xe4>)
 8106008:	691b      	ldr	r3, [r3, #16]
 810600a:	4a2c      	ldr	r2, [pc, #176]	; (81060bc <HAL_PWREx_EnterSTOPMode+0xe4>)
 810600c:	f023 0301 	bic.w	r3, r3, #1
 8106010:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8106012:	4b2b      	ldr	r3, [pc, #172]	; (81060c0 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8106014:	691b      	ldr	r3, [r3, #16]
 8106016:	4a2a      	ldr	r2, [pc, #168]	; (81060c0 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8106018:	f043 0304 	orr.w	r3, r3, #4
 810601c:	6113      	str	r3, [r2, #16]
 810601e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8106022:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8106026:	7afb      	ldrb	r3, [r7, #11]
 8106028:	2b01      	cmp	r3, #1
 810602a:	d101      	bne.n	8106030 <HAL_PWREx_EnterSTOPMode+0x58>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810602c:	bf30      	wfi
 810602e:	e000      	b.n	8106032 <HAL_PWREx_EnterSTOPMode+0x5a>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8106030:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8106032:	4b23      	ldr	r3, [pc, #140]	; (81060c0 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8106034:	691b      	ldr	r3, [r3, #16]
 8106036:	4a22      	ldr	r2, [pc, #136]	; (81060c0 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8106038:	f023 0304 	bic.w	r3, r3, #4
 810603c:	6113      	str	r3, [r2, #16]
 810603e:	e03a      	b.n	81060b6 <HAL_PWREx_EnterSTOPMode+0xde>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8106040:	687b      	ldr	r3, [r7, #4]
 8106042:	2b01      	cmp	r3, #1
 8106044:	d121      	bne.n	810608a <HAL_PWREx_EnterSTOPMode+0xb2>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8106046:	f7fc fa2d 	bl	81024a4 <HAL_GetCurrentCPUID>
 810604a:	4603      	mov	r3, r0
 810604c:	2b01      	cmp	r3, #1
 810604e:	d131      	bne.n	81060b4 <HAL_PWREx_EnterSTOPMode+0xdc>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8106050:	4b1a      	ldr	r3, [pc, #104]	; (81060bc <HAL_PWREx_EnterSTOPMode+0xe4>)
 8106052:	695b      	ldr	r3, [r3, #20]
 8106054:	4a19      	ldr	r2, [pc, #100]	; (81060bc <HAL_PWREx_EnterSTOPMode+0xe4>)
 8106056:	f023 0302 	bic.w	r3, r3, #2
 810605a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810605c:	4b18      	ldr	r3, [pc, #96]	; (81060c0 <HAL_PWREx_EnterSTOPMode+0xe8>)
 810605e:	691b      	ldr	r3, [r3, #16]
 8106060:	4a17      	ldr	r2, [pc, #92]	; (81060c0 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8106062:	f043 0304 	orr.w	r3, r3, #4
 8106066:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8106068:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 810606c:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8106070:	7afb      	ldrb	r3, [r7, #11]
 8106072:	2b01      	cmp	r3, #1
 8106074:	d101      	bne.n	810607a <HAL_PWREx_EnterSTOPMode+0xa2>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8106076:	bf30      	wfi
 8106078:	e000      	b.n	810607c <HAL_PWREx_EnterSTOPMode+0xa4>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810607a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810607c:	4b10      	ldr	r3, [pc, #64]	; (81060c0 <HAL_PWREx_EnterSTOPMode+0xe8>)
 810607e:	691b      	ldr	r3, [r3, #16]
 8106080:	4a0f      	ldr	r2, [pc, #60]	; (81060c0 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8106082:	f023 0304 	bic.w	r3, r3, #4
 8106086:	6113      	str	r3, [r2, #16]
 8106088:	e015      	b.n	81060b6 <HAL_PWREx_EnterSTOPMode+0xde>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810608a:	f7fc fa0b 	bl	81024a4 <HAL_GetCurrentCPUID>
 810608e:	4603      	mov	r3, r0
 8106090:	2b03      	cmp	r3, #3
 8106092:	d106      	bne.n	81060a2 <HAL_PWREx_EnterSTOPMode+0xca>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8106094:	4b09      	ldr	r3, [pc, #36]	; (81060bc <HAL_PWREx_EnterSTOPMode+0xe4>)
 8106096:	691b      	ldr	r3, [r3, #16]
 8106098:	4a08      	ldr	r2, [pc, #32]	; (81060bc <HAL_PWREx_EnterSTOPMode+0xe4>)
 810609a:	f023 0304 	bic.w	r3, r3, #4
 810609e:	6113      	str	r3, [r2, #16]
 81060a0:	e009      	b.n	81060b6 <HAL_PWREx_EnterSTOPMode+0xde>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81060a2:	4b06      	ldr	r3, [pc, #24]	; (81060bc <HAL_PWREx_EnterSTOPMode+0xe4>)
 81060a4:	695b      	ldr	r3, [r3, #20]
 81060a6:	4a05      	ldr	r2, [pc, #20]	; (81060bc <HAL_PWREx_EnterSTOPMode+0xe4>)
 81060a8:	f023 0304 	bic.w	r3, r3, #4
 81060ac:	6153      	str	r3, [r2, #20]
 81060ae:	e002      	b.n	81060b6 <HAL_PWREx_EnterSTOPMode+0xde>
      return;
 81060b0:	bf00      	nop
 81060b2:	e000      	b.n	81060b6 <HAL_PWREx_EnterSTOPMode+0xde>
      return;
 81060b4:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81060b6:	3710      	adds	r7, #16
 81060b8:	46bd      	mov	sp, r7
 81060ba:	bd80      	pop	{r7, pc}
 81060bc:	58024800 	.word	0x58024800
 81060c0:	e000ed00 	.word	0xe000ed00

081060c4 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81060c4:	b580      	push	{r7, lr}
 81060c6:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81060c8:	f7fc f9ec 	bl	81024a4 <HAL_GetCurrentCPUID>
 81060cc:	4603      	mov	r3, r0
 81060ce:	2b03      	cmp	r3, #3
 81060d0:	d101      	bne.n	81060d6 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81060d2:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81060d4:	e001      	b.n	81060da <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81060d6:	bf40      	sev
    __WFE ();
 81060d8:	bf20      	wfe
}
 81060da:	bf00      	nop
 81060dc:	bd80      	pop	{r7, pc}
	...

081060e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81060e0:	b480      	push	{r7}
 81060e2:	b089      	sub	sp, #36	; 0x24
 81060e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81060e6:	4baf      	ldr	r3, [pc, #700]	; (81063a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81060e8:	691b      	ldr	r3, [r3, #16]
 81060ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81060ee:	2b18      	cmp	r3, #24
 81060f0:	f200 814e 	bhi.w	8106390 <HAL_RCC_GetSysClockFreq+0x2b0>
 81060f4:	a201      	add	r2, pc, #4	; (adr r2, 81060fc <HAL_RCC_GetSysClockFreq+0x1c>)
 81060f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81060fa:	bf00      	nop
 81060fc:	08106161 	.word	0x08106161
 8106100:	08106391 	.word	0x08106391
 8106104:	08106391 	.word	0x08106391
 8106108:	08106391 	.word	0x08106391
 810610c:	08106391 	.word	0x08106391
 8106110:	08106391 	.word	0x08106391
 8106114:	08106391 	.word	0x08106391
 8106118:	08106391 	.word	0x08106391
 810611c:	08106187 	.word	0x08106187
 8106120:	08106391 	.word	0x08106391
 8106124:	08106391 	.word	0x08106391
 8106128:	08106391 	.word	0x08106391
 810612c:	08106391 	.word	0x08106391
 8106130:	08106391 	.word	0x08106391
 8106134:	08106391 	.word	0x08106391
 8106138:	08106391 	.word	0x08106391
 810613c:	0810618d 	.word	0x0810618d
 8106140:	08106391 	.word	0x08106391
 8106144:	08106391 	.word	0x08106391
 8106148:	08106391 	.word	0x08106391
 810614c:	08106391 	.word	0x08106391
 8106150:	08106391 	.word	0x08106391
 8106154:	08106391 	.word	0x08106391
 8106158:	08106391 	.word	0x08106391
 810615c:	08106193 	.word	0x08106193
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106160:	4b90      	ldr	r3, [pc, #576]	; (81063a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8106162:	681b      	ldr	r3, [r3, #0]
 8106164:	f003 0320 	and.w	r3, r3, #32
 8106168:	2b00      	cmp	r3, #0
 810616a:	d009      	beq.n	8106180 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810616c:	4b8d      	ldr	r3, [pc, #564]	; (81063a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810616e:	681b      	ldr	r3, [r3, #0]
 8106170:	08db      	lsrs	r3, r3, #3
 8106172:	f003 0303 	and.w	r3, r3, #3
 8106176:	4a8c      	ldr	r2, [pc, #560]	; (81063a8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8106178:	fa22 f303 	lsr.w	r3, r2, r3
 810617c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 810617e:	e10a      	b.n	8106396 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8106180:	4b89      	ldr	r3, [pc, #548]	; (81063a8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8106182:	61bb      	str	r3, [r7, #24]
    break;
 8106184:	e107      	b.n	8106396 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8106186:	4b89      	ldr	r3, [pc, #548]	; (81063ac <HAL_RCC_GetSysClockFreq+0x2cc>)
 8106188:	61bb      	str	r3, [r7, #24]
    break;
 810618a:	e104      	b.n	8106396 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 810618c:	4b88      	ldr	r3, [pc, #544]	; (81063b0 <HAL_RCC_GetSysClockFreq+0x2d0>)
 810618e:	61bb      	str	r3, [r7, #24]
    break;
 8106190:	e101      	b.n	8106396 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106192:	4b84      	ldr	r3, [pc, #528]	; (81063a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8106194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106196:	f003 0303 	and.w	r3, r3, #3
 810619a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 810619c:	4b81      	ldr	r3, [pc, #516]	; (81063a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810619e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81061a0:	091b      	lsrs	r3, r3, #4
 81061a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81061a6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 81061a8:	4b7e      	ldr	r3, [pc, #504]	; (81063a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81061aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81061ac:	f003 0301 	and.w	r3, r3, #1
 81061b0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 81061b2:	4b7c      	ldr	r3, [pc, #496]	; (81063a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81061b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81061b6:	08db      	lsrs	r3, r3, #3
 81061b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81061bc:	68fa      	ldr	r2, [r7, #12]
 81061be:	fb02 f303 	mul.w	r3, r2, r3
 81061c2:	ee07 3a90 	vmov	s15, r3
 81061c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81061ca:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 81061ce:	693b      	ldr	r3, [r7, #16]
 81061d0:	2b00      	cmp	r3, #0
 81061d2:	f000 80da 	beq.w	810638a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 81061d6:	697b      	ldr	r3, [r7, #20]
 81061d8:	2b01      	cmp	r3, #1
 81061da:	d05a      	beq.n	8106292 <HAL_RCC_GetSysClockFreq+0x1b2>
 81061dc:	2b01      	cmp	r3, #1
 81061de:	d302      	bcc.n	81061e6 <HAL_RCC_GetSysClockFreq+0x106>
 81061e0:	2b02      	cmp	r3, #2
 81061e2:	d078      	beq.n	81062d6 <HAL_RCC_GetSysClockFreq+0x1f6>
 81061e4:	e099      	b.n	810631a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81061e6:	4b6f      	ldr	r3, [pc, #444]	; (81063a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81061e8:	681b      	ldr	r3, [r3, #0]
 81061ea:	f003 0320 	and.w	r3, r3, #32
 81061ee:	2b00      	cmp	r3, #0
 81061f0:	d02d      	beq.n	810624e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81061f2:	4b6c      	ldr	r3, [pc, #432]	; (81063a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81061f4:	681b      	ldr	r3, [r3, #0]
 81061f6:	08db      	lsrs	r3, r3, #3
 81061f8:	f003 0303 	and.w	r3, r3, #3
 81061fc:	4a6a      	ldr	r2, [pc, #424]	; (81063a8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 81061fe:	fa22 f303 	lsr.w	r3, r2, r3
 8106202:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106204:	687b      	ldr	r3, [r7, #4]
 8106206:	ee07 3a90 	vmov	s15, r3
 810620a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810620e:	693b      	ldr	r3, [r7, #16]
 8106210:	ee07 3a90 	vmov	s15, r3
 8106214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106218:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810621c:	4b61      	ldr	r3, [pc, #388]	; (81063a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810621e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106224:	ee07 3a90 	vmov	s15, r3
 8106228:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810622c:	ed97 6a02 	vldr	s12, [r7, #8]
 8106230:	eddf 5a60 	vldr	s11, [pc, #384]	; 81063b4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8106234:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106238:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810623c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106240:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106244:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106248:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 810624c:	e087      	b.n	810635e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810624e:	693b      	ldr	r3, [r7, #16]
 8106250:	ee07 3a90 	vmov	s15, r3
 8106254:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106258:	eddf 6a57 	vldr	s13, [pc, #348]	; 81063b8 <HAL_RCC_GetSysClockFreq+0x2d8>
 810625c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106260:	4b50      	ldr	r3, [pc, #320]	; (81063a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8106262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106268:	ee07 3a90 	vmov	s15, r3
 810626c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106270:	ed97 6a02 	vldr	s12, [r7, #8]
 8106274:	eddf 5a4f 	vldr	s11, [pc, #316]	; 81063b4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8106278:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810627c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106280:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106284:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106288:	ee67 7a27 	vmul.f32	s15, s14, s15
 810628c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106290:	e065      	b.n	810635e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106292:	693b      	ldr	r3, [r7, #16]
 8106294:	ee07 3a90 	vmov	s15, r3
 8106298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810629c:	eddf 6a47 	vldr	s13, [pc, #284]	; 81063bc <HAL_RCC_GetSysClockFreq+0x2dc>
 81062a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81062a4:	4b3f      	ldr	r3, [pc, #252]	; (81063a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81062a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81062a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81062ac:	ee07 3a90 	vmov	s15, r3
 81062b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81062b4:	ed97 6a02 	vldr	s12, [r7, #8]
 81062b8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 81063b4 <HAL_RCC_GetSysClockFreq+0x2d4>
 81062bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81062c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81062c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81062c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81062cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 81062d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81062d4:	e043      	b.n	810635e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81062d6:	693b      	ldr	r3, [r7, #16]
 81062d8:	ee07 3a90 	vmov	s15, r3
 81062dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81062e0:	eddf 6a37 	vldr	s13, [pc, #220]	; 81063c0 <HAL_RCC_GetSysClockFreq+0x2e0>
 81062e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81062e8:	4b2e      	ldr	r3, [pc, #184]	; (81063a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81062ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81062ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81062f0:	ee07 3a90 	vmov	s15, r3
 81062f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81062f8:	ed97 6a02 	vldr	s12, [r7, #8]
 81062fc:	eddf 5a2d 	vldr	s11, [pc, #180]	; 81063b4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8106300:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106304:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106308:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810630c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106314:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106318:	e021      	b.n	810635e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810631a:	693b      	ldr	r3, [r7, #16]
 810631c:	ee07 3a90 	vmov	s15, r3
 8106320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106324:	eddf 6a25 	vldr	s13, [pc, #148]	; 81063bc <HAL_RCC_GetSysClockFreq+0x2dc>
 8106328:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810632c:	4b1d      	ldr	r3, [pc, #116]	; (81063a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810632e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106334:	ee07 3a90 	vmov	s15, r3
 8106338:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810633c:	ed97 6a02 	vldr	s12, [r7, #8]
 8106340:	eddf 5a1c 	vldr	s11, [pc, #112]	; 81063b4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8106344:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106348:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810634c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106350:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106354:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106358:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810635c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 810635e:	4b11      	ldr	r3, [pc, #68]	; (81063a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8106360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106362:	0a5b      	lsrs	r3, r3, #9
 8106364:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106368:	3301      	adds	r3, #1
 810636a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 810636c:	683b      	ldr	r3, [r7, #0]
 810636e:	ee07 3a90 	vmov	s15, r3
 8106372:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8106376:	edd7 6a07 	vldr	s13, [r7, #28]
 810637a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810637e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106382:	ee17 3a90 	vmov	r3, s15
 8106386:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8106388:	e005      	b.n	8106396 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 810638a:	2300      	movs	r3, #0
 810638c:	61bb      	str	r3, [r7, #24]
    break;
 810638e:	e002      	b.n	8106396 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8106390:	4b06      	ldr	r3, [pc, #24]	; (81063ac <HAL_RCC_GetSysClockFreq+0x2cc>)
 8106392:	61bb      	str	r3, [r7, #24]
    break;
 8106394:	bf00      	nop
  }

  return sysclockfreq;
 8106396:	69bb      	ldr	r3, [r7, #24]
}
 8106398:	4618      	mov	r0, r3
 810639a:	3724      	adds	r7, #36	; 0x24
 810639c:	46bd      	mov	sp, r7
 810639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81063a2:	4770      	bx	lr
 81063a4:	58024400 	.word	0x58024400
 81063a8:	03d09000 	.word	0x03d09000
 81063ac:	003d0900 	.word	0x003d0900
 81063b0:	017d7840 	.word	0x017d7840
 81063b4:	46000000 	.word	0x46000000
 81063b8:	4c742400 	.word	0x4c742400
 81063bc:	4a742400 	.word	0x4a742400
 81063c0:	4bbebc20 	.word	0x4bbebc20

081063c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81063c4:	b580      	push	{r7, lr}
 81063c6:	b082      	sub	sp, #8
 81063c8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81063ca:	f7ff fe89 	bl	81060e0 <HAL_RCC_GetSysClockFreq>
 81063ce:	4601      	mov	r1, r0
 81063d0:	4b11      	ldr	r3, [pc, #68]	; (8106418 <HAL_RCC_GetHCLKFreq+0x54>)
 81063d2:	699b      	ldr	r3, [r3, #24]
 81063d4:	0a1b      	lsrs	r3, r3, #8
 81063d6:	f003 030f 	and.w	r3, r3, #15
 81063da:	4a10      	ldr	r2, [pc, #64]	; (810641c <HAL_RCC_GetHCLKFreq+0x58>)
 81063dc:	5cd3      	ldrb	r3, [r2, r3]
 81063de:	f003 031f 	and.w	r3, r3, #31
 81063e2:	fa21 f303 	lsr.w	r3, r1, r3
 81063e6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81063e8:	4b0b      	ldr	r3, [pc, #44]	; (8106418 <HAL_RCC_GetHCLKFreq+0x54>)
 81063ea:	699b      	ldr	r3, [r3, #24]
 81063ec:	f003 030f 	and.w	r3, r3, #15
 81063f0:	4a0a      	ldr	r2, [pc, #40]	; (810641c <HAL_RCC_GetHCLKFreq+0x58>)
 81063f2:	5cd3      	ldrb	r3, [r2, r3]
 81063f4:	f003 031f 	and.w	r3, r3, #31
 81063f8:	687a      	ldr	r2, [r7, #4]
 81063fa:	fa22 f303 	lsr.w	r3, r2, r3
 81063fe:	4a08      	ldr	r2, [pc, #32]	; (8106420 <HAL_RCC_GetHCLKFreq+0x5c>)
 8106400:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8106402:	4b07      	ldr	r3, [pc, #28]	; (8106420 <HAL_RCC_GetHCLKFreq+0x5c>)
 8106404:	681b      	ldr	r3, [r3, #0]
 8106406:	4a07      	ldr	r2, [pc, #28]	; (8106424 <HAL_RCC_GetHCLKFreq+0x60>)
 8106408:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810640a:	4b05      	ldr	r3, [pc, #20]	; (8106420 <HAL_RCC_GetHCLKFreq+0x5c>)
 810640c:	681b      	ldr	r3, [r3, #0]
}
 810640e:	4618      	mov	r0, r3
 8106410:	3708      	adds	r7, #8
 8106412:	46bd      	mov	sp, r7
 8106414:	bd80      	pop	{r7, pc}
 8106416:	bf00      	nop
 8106418:	58024400 	.word	0x58024400
 810641c:	08112a00 	.word	0x08112a00
 8106420:	10000004 	.word	0x10000004
 8106424:	10000000 	.word	0x10000000

08106428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8106428:	b580      	push	{r7, lr}
 810642a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 810642c:	f7ff ffca 	bl	81063c4 <HAL_RCC_GetHCLKFreq>
 8106430:	4601      	mov	r1, r0
 8106432:	4b06      	ldr	r3, [pc, #24]	; (810644c <HAL_RCC_GetPCLK1Freq+0x24>)
 8106434:	69db      	ldr	r3, [r3, #28]
 8106436:	091b      	lsrs	r3, r3, #4
 8106438:	f003 0307 	and.w	r3, r3, #7
 810643c:	4a04      	ldr	r2, [pc, #16]	; (8106450 <HAL_RCC_GetPCLK1Freq+0x28>)
 810643e:	5cd3      	ldrb	r3, [r2, r3]
 8106440:	f003 031f 	and.w	r3, r3, #31
 8106444:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8106448:	4618      	mov	r0, r3
 810644a:	bd80      	pop	{r7, pc}
 810644c:	58024400 	.word	0x58024400
 8106450:	08112a00 	.word	0x08112a00

08106454 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8106454:	b580      	push	{r7, lr}
 8106456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8106458:	f7ff ffb4 	bl	81063c4 <HAL_RCC_GetHCLKFreq>
 810645c:	4601      	mov	r1, r0
 810645e:	4b06      	ldr	r3, [pc, #24]	; (8106478 <HAL_RCC_GetPCLK2Freq+0x24>)
 8106460:	69db      	ldr	r3, [r3, #28]
 8106462:	0a1b      	lsrs	r3, r3, #8
 8106464:	f003 0307 	and.w	r3, r3, #7
 8106468:	4a04      	ldr	r2, [pc, #16]	; (810647c <HAL_RCC_GetPCLK2Freq+0x28>)
 810646a:	5cd3      	ldrb	r3, [r2, r3]
 810646c:	f003 031f 	and.w	r3, r3, #31
 8106470:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8106474:	4618      	mov	r0, r3
 8106476:	bd80      	pop	{r7, pc}
 8106478:	58024400 	.word	0x58024400
 810647c:	08112a00 	.word	0x08112a00

08106480 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8106480:	b480      	push	{r7}
 8106482:	b083      	sub	sp, #12
 8106484:	af00      	add	r7, sp, #0
 8106486:	6078      	str	r0, [r7, #4]
 8106488:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 810648a:	687b      	ldr	r3, [r7, #4]
 810648c:	223f      	movs	r2, #63	; 0x3f
 810648e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8106490:	4b1a      	ldr	r3, [pc, #104]	; (81064fc <HAL_RCC_GetClockConfig+0x7c>)
 8106492:	691b      	ldr	r3, [r3, #16]
 8106494:	f003 0207 	and.w	r2, r3, #7
 8106498:	687b      	ldr	r3, [r7, #4]
 810649a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 810649c:	4b17      	ldr	r3, [pc, #92]	; (81064fc <HAL_RCC_GetClockConfig+0x7c>)
 810649e:	699b      	ldr	r3, [r3, #24]
 81064a0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 81064a4:	687b      	ldr	r3, [r7, #4]
 81064a6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 81064a8:	4b14      	ldr	r3, [pc, #80]	; (81064fc <HAL_RCC_GetClockConfig+0x7c>)
 81064aa:	699b      	ldr	r3, [r3, #24]
 81064ac:	f003 020f 	and.w	r2, r3, #15
 81064b0:	687b      	ldr	r3, [r7, #4]
 81064b2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 81064b4:	4b11      	ldr	r3, [pc, #68]	; (81064fc <HAL_RCC_GetClockConfig+0x7c>)
 81064b6:	699b      	ldr	r3, [r3, #24]
 81064b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 81064bc:	687b      	ldr	r3, [r7, #4]
 81064be:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 81064c0:	4b0e      	ldr	r3, [pc, #56]	; (81064fc <HAL_RCC_GetClockConfig+0x7c>)
 81064c2:	69db      	ldr	r3, [r3, #28]
 81064c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 81064c8:	687b      	ldr	r3, [r7, #4]
 81064ca:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 81064cc:	4b0b      	ldr	r3, [pc, #44]	; (81064fc <HAL_RCC_GetClockConfig+0x7c>)
 81064ce:	69db      	ldr	r3, [r3, #28]
 81064d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 81064d4:	687b      	ldr	r3, [r7, #4]
 81064d6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 81064d8:	4b08      	ldr	r3, [pc, #32]	; (81064fc <HAL_RCC_GetClockConfig+0x7c>)
 81064da:	6a1b      	ldr	r3, [r3, #32]
 81064dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 81064e0:	687b      	ldr	r3, [r7, #4]
 81064e2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 81064e4:	4b06      	ldr	r3, [pc, #24]	; (8106500 <HAL_RCC_GetClockConfig+0x80>)
 81064e6:	681b      	ldr	r3, [r3, #0]
 81064e8:	f003 020f 	and.w	r2, r3, #15
 81064ec:	683b      	ldr	r3, [r7, #0]
 81064ee:	601a      	str	r2, [r3, #0]
}
 81064f0:	bf00      	nop
 81064f2:	370c      	adds	r7, #12
 81064f4:	46bd      	mov	sp, r7
 81064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81064fa:	4770      	bx	lr
 81064fc:	58024400 	.word	0x58024400
 8106500:	52002000 	.word	0x52002000

08106504 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8106504:	b580      	push	{r7, lr}
 8106506:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8106508:	f7ff ff5c 	bl	81063c4 <HAL_RCC_GetHCLKFreq>
 810650c:	4601      	mov	r1, r0
 810650e:	4b06      	ldr	r3, [pc, #24]	; (8106528 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8106510:	6a1b      	ldr	r3, [r3, #32]
 8106512:	091b      	lsrs	r3, r3, #4
 8106514:	f003 0307 	and.w	r3, r3, #7
 8106518:	4a04      	ldr	r2, [pc, #16]	; (810652c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810651a:	5cd3      	ldrb	r3, [r2, r3]
 810651c:	f003 031f 	and.w	r3, r3, #31
 8106520:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8106524:	4618      	mov	r0, r3
 8106526:	bd80      	pop	{r7, pc}
 8106528:	58024400 	.word	0x58024400
 810652c:	08112a00 	.word	0x08112a00

08106530 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8106530:	b480      	push	{r7}
 8106532:	b089      	sub	sp, #36	; 0x24
 8106534:	af00      	add	r7, sp, #0
 8106536:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106538:	4b9d      	ldr	r3, [pc, #628]	; (81067b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810653a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810653c:	f003 0303 	and.w	r3, r3, #3
 8106540:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8106542:	4b9b      	ldr	r3, [pc, #620]	; (81067b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106546:	0b1b      	lsrs	r3, r3, #12
 8106548:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810654c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810654e:	4b98      	ldr	r3, [pc, #608]	; (81067b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106552:	091b      	lsrs	r3, r3, #4
 8106554:	f003 0301 	and.w	r3, r3, #1
 8106558:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 810655a:	4b95      	ldr	r3, [pc, #596]	; (81067b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810655c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810655e:	08db      	lsrs	r3, r3, #3
 8106560:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106564:	693a      	ldr	r2, [r7, #16]
 8106566:	fb02 f303 	mul.w	r3, r2, r3
 810656a:	ee07 3a90 	vmov	s15, r3
 810656e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106572:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8106576:	697b      	ldr	r3, [r7, #20]
 8106578:	2b00      	cmp	r3, #0
 810657a:	f000 810a 	beq.w	8106792 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 810657e:	69bb      	ldr	r3, [r7, #24]
 8106580:	2b01      	cmp	r3, #1
 8106582:	d05a      	beq.n	810663a <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8106584:	2b01      	cmp	r3, #1
 8106586:	d302      	bcc.n	810658e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8106588:	2b02      	cmp	r3, #2
 810658a:	d078      	beq.n	810667e <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 810658c:	e099      	b.n	81066c2 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810658e:	4b88      	ldr	r3, [pc, #544]	; (81067b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106590:	681b      	ldr	r3, [r3, #0]
 8106592:	f003 0320 	and.w	r3, r3, #32
 8106596:	2b00      	cmp	r3, #0
 8106598:	d02d      	beq.n	81065f6 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810659a:	4b85      	ldr	r3, [pc, #532]	; (81067b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810659c:	681b      	ldr	r3, [r3, #0]
 810659e:	08db      	lsrs	r3, r3, #3
 81065a0:	f003 0303 	and.w	r3, r3, #3
 81065a4:	4a83      	ldr	r2, [pc, #524]	; (81067b4 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 81065a6:	fa22 f303 	lsr.w	r3, r2, r3
 81065aa:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81065ac:	68bb      	ldr	r3, [r7, #8]
 81065ae:	ee07 3a90 	vmov	s15, r3
 81065b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81065b6:	697b      	ldr	r3, [r7, #20]
 81065b8:	ee07 3a90 	vmov	s15, r3
 81065bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81065c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81065c4:	4b7a      	ldr	r3, [pc, #488]	; (81067b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81065c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81065c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81065cc:	ee07 3a90 	vmov	s15, r3
 81065d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81065d4:	ed97 6a03 	vldr	s12, [r7, #12]
 81065d8:	eddf 5a77 	vldr	s11, [pc, #476]	; 81067b8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 81065dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81065e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81065e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81065e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81065ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 81065f0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81065f4:	e087      	b.n	8106706 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81065f6:	697b      	ldr	r3, [r7, #20]
 81065f8:	ee07 3a90 	vmov	s15, r3
 81065fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106600:	eddf 6a6e 	vldr	s13, [pc, #440]	; 81067bc <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8106604:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106608:	4b69      	ldr	r3, [pc, #420]	; (81067b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810660a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810660c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106610:	ee07 3a90 	vmov	s15, r3
 8106614:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106618:	ed97 6a03 	vldr	s12, [r7, #12]
 810661c:	eddf 5a66 	vldr	s11, [pc, #408]	; 81067b8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8106620:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106624:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106628:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810662c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106630:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106634:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106638:	e065      	b.n	8106706 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810663a:	697b      	ldr	r3, [r7, #20]
 810663c:	ee07 3a90 	vmov	s15, r3
 8106640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106644:	eddf 6a5e 	vldr	s13, [pc, #376]	; 81067c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8106648:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810664c:	4b58      	ldr	r3, [pc, #352]	; (81067b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810664e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106654:	ee07 3a90 	vmov	s15, r3
 8106658:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810665c:	ed97 6a03 	vldr	s12, [r7, #12]
 8106660:	eddf 5a55 	vldr	s11, [pc, #340]	; 81067b8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8106664:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106668:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810666c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106670:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106678:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810667c:	e043      	b.n	8106706 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810667e:	697b      	ldr	r3, [r7, #20]
 8106680:	ee07 3a90 	vmov	s15, r3
 8106684:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106688:	eddf 6a4e 	vldr	s13, [pc, #312]	; 81067c4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 810668c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106690:	4b47      	ldr	r3, [pc, #284]	; (81067b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106698:	ee07 3a90 	vmov	s15, r3
 810669c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81066a0:	ed97 6a03 	vldr	s12, [r7, #12]
 81066a4:	eddf 5a44 	vldr	s11, [pc, #272]	; 81067b8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 81066a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81066ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81066b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81066b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81066b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81066bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81066c0:	e021      	b.n	8106706 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81066c2:	697b      	ldr	r3, [r7, #20]
 81066c4:	ee07 3a90 	vmov	s15, r3
 81066c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81066cc:	eddf 6a3c 	vldr	s13, [pc, #240]	; 81067c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 81066d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81066d4:	4b36      	ldr	r3, [pc, #216]	; (81067b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81066d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81066d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81066dc:	ee07 3a90 	vmov	s15, r3
 81066e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81066e4:	ed97 6a03 	vldr	s12, [r7, #12]
 81066e8:	eddf 5a33 	vldr	s11, [pc, #204]	; 81067b8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 81066ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81066f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81066f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81066f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81066fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106700:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106704:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8106706:	4b2a      	ldr	r3, [pc, #168]	; (81067b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810670a:	0a5b      	lsrs	r3, r3, #9
 810670c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106710:	ee07 3a90 	vmov	s15, r3
 8106714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106718:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810671c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106720:	edd7 6a07 	vldr	s13, [r7, #28]
 8106724:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106728:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810672c:	ee17 2a90 	vmov	r2, s15
 8106730:	687b      	ldr	r3, [r7, #4]
 8106732:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8106734:	4b1e      	ldr	r3, [pc, #120]	; (81067b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106738:	0c1b      	lsrs	r3, r3, #16
 810673a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810673e:	ee07 3a90 	vmov	s15, r3
 8106742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106746:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810674a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810674e:	edd7 6a07 	vldr	s13, [r7, #28]
 8106752:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106756:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810675a:	ee17 2a90 	vmov	r2, s15
 810675e:	687b      	ldr	r3, [r7, #4]
 8106760:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8106762:	4b13      	ldr	r3, [pc, #76]	; (81067b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106766:	0e1b      	lsrs	r3, r3, #24
 8106768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810676c:	ee07 3a90 	vmov	s15, r3
 8106770:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106774:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106778:	ee37 7a87 	vadd.f32	s14, s15, s14
 810677c:	edd7 6a07 	vldr	s13, [r7, #28]
 8106780:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106784:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106788:	ee17 2a90 	vmov	r2, s15
 810678c:	687b      	ldr	r3, [r7, #4]
 810678e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8106790:	e008      	b.n	81067a4 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8106792:	687b      	ldr	r3, [r7, #4]
 8106794:	2200      	movs	r2, #0
 8106796:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8106798:	687b      	ldr	r3, [r7, #4]
 810679a:	2200      	movs	r2, #0
 810679c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 810679e:	687b      	ldr	r3, [r7, #4]
 81067a0:	2200      	movs	r2, #0
 81067a2:	609a      	str	r2, [r3, #8]
}
 81067a4:	bf00      	nop
 81067a6:	3724      	adds	r7, #36	; 0x24
 81067a8:	46bd      	mov	sp, r7
 81067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067ae:	4770      	bx	lr
 81067b0:	58024400 	.word	0x58024400
 81067b4:	03d09000 	.word	0x03d09000
 81067b8:	46000000 	.word	0x46000000
 81067bc:	4c742400 	.word	0x4c742400
 81067c0:	4a742400 	.word	0x4a742400
 81067c4:	4bbebc20 	.word	0x4bbebc20

081067c8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 81067c8:	b480      	push	{r7}
 81067ca:	b089      	sub	sp, #36	; 0x24
 81067cc:	af00      	add	r7, sp, #0
 81067ce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81067d0:	4b9d      	ldr	r3, [pc, #628]	; (8106a48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81067d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81067d4:	f003 0303 	and.w	r3, r3, #3
 81067d8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 81067da:	4b9b      	ldr	r3, [pc, #620]	; (8106a48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81067dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81067de:	0d1b      	lsrs	r3, r3, #20
 81067e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81067e4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81067e6:	4b98      	ldr	r3, [pc, #608]	; (8106a48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81067e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81067ea:	0a1b      	lsrs	r3, r3, #8
 81067ec:	f003 0301 	and.w	r3, r3, #1
 81067f0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 81067f2:	4b95      	ldr	r3, [pc, #596]	; (8106a48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81067f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81067f6:	08db      	lsrs	r3, r3, #3
 81067f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81067fc:	693a      	ldr	r2, [r7, #16]
 81067fe:	fb02 f303 	mul.w	r3, r2, r3
 8106802:	ee07 3a90 	vmov	s15, r3
 8106806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810680a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 810680e:	697b      	ldr	r3, [r7, #20]
 8106810:	2b00      	cmp	r3, #0
 8106812:	f000 810a 	beq.w	8106a2a <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8106816:	69bb      	ldr	r3, [r7, #24]
 8106818:	2b01      	cmp	r3, #1
 810681a:	d05a      	beq.n	81068d2 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 810681c:	2b01      	cmp	r3, #1
 810681e:	d302      	bcc.n	8106826 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8106820:	2b02      	cmp	r3, #2
 8106822:	d078      	beq.n	8106916 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8106824:	e099      	b.n	810695a <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106826:	4b88      	ldr	r3, [pc, #544]	; (8106a48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106828:	681b      	ldr	r3, [r3, #0]
 810682a:	f003 0320 	and.w	r3, r3, #32
 810682e:	2b00      	cmp	r3, #0
 8106830:	d02d      	beq.n	810688e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106832:	4b85      	ldr	r3, [pc, #532]	; (8106a48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106834:	681b      	ldr	r3, [r3, #0]
 8106836:	08db      	lsrs	r3, r3, #3
 8106838:	f003 0303 	and.w	r3, r3, #3
 810683c:	4a83      	ldr	r2, [pc, #524]	; (8106a4c <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 810683e:	fa22 f303 	lsr.w	r3, r2, r3
 8106842:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8106844:	68bb      	ldr	r3, [r7, #8]
 8106846:	ee07 3a90 	vmov	s15, r3
 810684a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810684e:	697b      	ldr	r3, [r7, #20]
 8106850:	ee07 3a90 	vmov	s15, r3
 8106854:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106858:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810685c:	4b7a      	ldr	r3, [pc, #488]	; (8106a48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810685e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106864:	ee07 3a90 	vmov	s15, r3
 8106868:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810686c:	ed97 6a03 	vldr	s12, [r7, #12]
 8106870:	eddf 5a77 	vldr	s11, [pc, #476]	; 8106a50 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8106874:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106878:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810687c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106880:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106884:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106888:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810688c:	e087      	b.n	810699e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810688e:	697b      	ldr	r3, [r7, #20]
 8106890:	ee07 3a90 	vmov	s15, r3
 8106894:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106898:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8106a54 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 810689c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81068a0:	4b69      	ldr	r3, [pc, #420]	; (8106a48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81068a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81068a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81068a8:	ee07 3a90 	vmov	s15, r3
 81068ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81068b0:	ed97 6a03 	vldr	s12, [r7, #12]
 81068b4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8106a50 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 81068b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81068bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81068c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81068c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81068c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81068cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81068d0:	e065      	b.n	810699e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81068d2:	697b      	ldr	r3, [r7, #20]
 81068d4:	ee07 3a90 	vmov	s15, r3
 81068d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81068dc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8106a58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 81068e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81068e4:	4b58      	ldr	r3, [pc, #352]	; (8106a48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81068e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81068e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81068ec:	ee07 3a90 	vmov	s15, r3
 81068f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81068f4:	ed97 6a03 	vldr	s12, [r7, #12]
 81068f8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8106a50 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 81068fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106900:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106904:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106908:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810690c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106910:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106914:	e043      	b.n	810699e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8106916:	697b      	ldr	r3, [r7, #20]
 8106918:	ee07 3a90 	vmov	s15, r3
 810691c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106920:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8106a5c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8106924:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106928:	4b47      	ldr	r3, [pc, #284]	; (8106a48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810692a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810692c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106930:	ee07 3a90 	vmov	s15, r3
 8106934:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106938:	ed97 6a03 	vldr	s12, [r7, #12]
 810693c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8106a50 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8106940:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106944:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106948:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810694c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106954:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106958:	e021      	b.n	810699e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810695a:	697b      	ldr	r3, [r7, #20]
 810695c:	ee07 3a90 	vmov	s15, r3
 8106960:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106964:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8106a58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8106968:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810696c:	4b36      	ldr	r3, [pc, #216]	; (8106a48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810696e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106974:	ee07 3a90 	vmov	s15, r3
 8106978:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810697c:	ed97 6a03 	vldr	s12, [r7, #12]
 8106980:	eddf 5a33 	vldr	s11, [pc, #204]	; 8106a50 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8106984:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106988:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810698c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106990:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106994:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106998:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810699c:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 810699e:	4b2a      	ldr	r3, [pc, #168]	; (8106a48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81069a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81069a2:	0a5b      	lsrs	r3, r3, #9
 81069a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81069a8:	ee07 3a90 	vmov	s15, r3
 81069ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81069b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81069b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 81069b8:	edd7 6a07 	vldr	s13, [r7, #28]
 81069bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81069c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81069c4:	ee17 2a90 	vmov	r2, s15
 81069c8:	687b      	ldr	r3, [r7, #4]
 81069ca:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 81069cc:	4b1e      	ldr	r3, [pc, #120]	; (8106a48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81069ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81069d0:	0c1b      	lsrs	r3, r3, #16
 81069d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81069d6:	ee07 3a90 	vmov	s15, r3
 81069da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81069de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81069e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 81069e6:	edd7 6a07 	vldr	s13, [r7, #28]
 81069ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81069ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81069f2:	ee17 2a90 	vmov	r2, s15
 81069f6:	687b      	ldr	r3, [r7, #4]
 81069f8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 81069fa:	4b13      	ldr	r3, [pc, #76]	; (8106a48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81069fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81069fe:	0e1b      	lsrs	r3, r3, #24
 8106a00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106a04:	ee07 3a90 	vmov	s15, r3
 8106a08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106a0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106a10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106a14:	edd7 6a07 	vldr	s13, [r7, #28]
 8106a18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106a1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106a20:	ee17 2a90 	vmov	r2, s15
 8106a24:	687b      	ldr	r3, [r7, #4]
 8106a26:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8106a28:	e008      	b.n	8106a3c <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8106a2a:	687b      	ldr	r3, [r7, #4]
 8106a2c:	2200      	movs	r2, #0
 8106a2e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8106a30:	687b      	ldr	r3, [r7, #4]
 8106a32:	2200      	movs	r2, #0
 8106a34:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8106a36:	687b      	ldr	r3, [r7, #4]
 8106a38:	2200      	movs	r2, #0
 8106a3a:	609a      	str	r2, [r3, #8]
}
 8106a3c:	bf00      	nop
 8106a3e:	3724      	adds	r7, #36	; 0x24
 8106a40:	46bd      	mov	sp, r7
 8106a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a46:	4770      	bx	lr
 8106a48:	58024400 	.word	0x58024400
 8106a4c:	03d09000 	.word	0x03d09000
 8106a50:	46000000 	.word	0x46000000
 8106a54:	4c742400 	.word	0x4c742400
 8106a58:	4a742400 	.word	0x4a742400
 8106a5c:	4bbebc20 	.word	0x4bbebc20

08106a60 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8106a60:	b580      	push	{r7, lr}
 8106a62:	b084      	sub	sp, #16
 8106a64:	af00      	add	r7, sp, #0
 8106a66:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8106a68:	2300      	movs	r3, #0
 8106a6a:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8106a6c:	687b      	ldr	r3, [r7, #4]
 8106a6e:	2b00      	cmp	r3, #0
 8106a70:	d101      	bne.n	8106a76 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8106a72:	2301      	movs	r3, #1
 8106a74:	e0e2      	b.n	8106c3c <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8106a76:	687b      	ldr	r3, [r7, #4]
 8106a78:	2200      	movs	r2, #0
 8106a7a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8106a7c:	687b      	ldr	r3, [r7, #4]
 8106a7e:	681b      	ldr	r3, [r3, #0]
 8106a80:	4a70      	ldr	r2, [pc, #448]	; (8106c44 <HAL_SPI_Init+0x1e4>)
 8106a82:	4293      	cmp	r3, r2
 8106a84:	d00f      	beq.n	8106aa6 <HAL_SPI_Init+0x46>
 8106a86:	687b      	ldr	r3, [r7, #4]
 8106a88:	681b      	ldr	r3, [r3, #0]
 8106a8a:	4a6f      	ldr	r2, [pc, #444]	; (8106c48 <HAL_SPI_Init+0x1e8>)
 8106a8c:	4293      	cmp	r3, r2
 8106a8e:	d00a      	beq.n	8106aa6 <HAL_SPI_Init+0x46>
 8106a90:	687b      	ldr	r3, [r7, #4]
 8106a92:	681b      	ldr	r3, [r3, #0]
 8106a94:	4a6d      	ldr	r2, [pc, #436]	; (8106c4c <HAL_SPI_Init+0x1ec>)
 8106a96:	4293      	cmp	r3, r2
 8106a98:	d005      	beq.n	8106aa6 <HAL_SPI_Init+0x46>
 8106a9a:	687b      	ldr	r3, [r7, #4]
 8106a9c:	68db      	ldr	r3, [r3, #12]
 8106a9e:	2b0f      	cmp	r3, #15
 8106aa0:	d901      	bls.n	8106aa6 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8106aa2:	2301      	movs	r3, #1
 8106aa4:	e0ca      	b.n	8106c3c <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8106aa6:	6878      	ldr	r0, [r7, #4]
 8106aa8:	f000 fb96 	bl	81071d8 <SPI_GetPacketSize>
 8106aac:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8106aae:	687b      	ldr	r3, [r7, #4]
 8106ab0:	681b      	ldr	r3, [r3, #0]
 8106ab2:	4a64      	ldr	r2, [pc, #400]	; (8106c44 <HAL_SPI_Init+0x1e4>)
 8106ab4:	4293      	cmp	r3, r2
 8106ab6:	d00c      	beq.n	8106ad2 <HAL_SPI_Init+0x72>
 8106ab8:	687b      	ldr	r3, [r7, #4]
 8106aba:	681b      	ldr	r3, [r3, #0]
 8106abc:	4a62      	ldr	r2, [pc, #392]	; (8106c48 <HAL_SPI_Init+0x1e8>)
 8106abe:	4293      	cmp	r3, r2
 8106ac0:	d007      	beq.n	8106ad2 <HAL_SPI_Init+0x72>
 8106ac2:	687b      	ldr	r3, [r7, #4]
 8106ac4:	681b      	ldr	r3, [r3, #0]
 8106ac6:	4a61      	ldr	r2, [pc, #388]	; (8106c4c <HAL_SPI_Init+0x1ec>)
 8106ac8:	4293      	cmp	r3, r2
 8106aca:	d002      	beq.n	8106ad2 <HAL_SPI_Init+0x72>
 8106acc:	68bb      	ldr	r3, [r7, #8]
 8106ace:	2b08      	cmp	r3, #8
 8106ad0:	d811      	bhi.n	8106af6 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8106ad2:	687b      	ldr	r3, [r7, #4]
 8106ad4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8106ad6:	4a5b      	ldr	r2, [pc, #364]	; (8106c44 <HAL_SPI_Init+0x1e4>)
 8106ad8:	4293      	cmp	r3, r2
 8106ada:	d009      	beq.n	8106af0 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8106adc:	687b      	ldr	r3, [r7, #4]
 8106ade:	681b      	ldr	r3, [r3, #0]
 8106ae0:	4a59      	ldr	r2, [pc, #356]	; (8106c48 <HAL_SPI_Init+0x1e8>)
 8106ae2:	4293      	cmp	r3, r2
 8106ae4:	d004      	beq.n	8106af0 <HAL_SPI_Init+0x90>
 8106ae6:	687b      	ldr	r3, [r7, #4]
 8106ae8:	681b      	ldr	r3, [r3, #0]
 8106aea:	4a58      	ldr	r2, [pc, #352]	; (8106c4c <HAL_SPI_Init+0x1ec>)
 8106aec:	4293      	cmp	r3, r2
 8106aee:	d104      	bne.n	8106afa <HAL_SPI_Init+0x9a>
 8106af0:	68bb      	ldr	r3, [r7, #8]
 8106af2:	2b10      	cmp	r3, #16
 8106af4:	d901      	bls.n	8106afa <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8106af6:	2301      	movs	r3, #1
 8106af8:	e0a0      	b.n	8106c3c <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8106afa:	687b      	ldr	r3, [r7, #4]
 8106afc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8106b00:	b2db      	uxtb	r3, r3
 8106b02:	2b00      	cmp	r3, #0
 8106b04:	d106      	bne.n	8106b14 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8106b06:	687b      	ldr	r3, [r7, #4]
 8106b08:	2200      	movs	r2, #0
 8106b0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8106b0e:	6878      	ldr	r0, [r7, #4]
 8106b10:	f7fa ff28 	bl	8101964 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8106b14:	687b      	ldr	r3, [r7, #4]
 8106b16:	2202      	movs	r2, #2
 8106b18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8106b1c:	687b      	ldr	r3, [r7, #4]
 8106b1e:	681b      	ldr	r3, [r3, #0]
 8106b20:	681a      	ldr	r2, [r3, #0]
 8106b22:	687b      	ldr	r3, [r7, #4]
 8106b24:	681b      	ldr	r3, [r3, #0]
 8106b26:	f022 0201 	bic.w	r2, r2, #1
 8106b2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8106b2c:	687b      	ldr	r3, [r7, #4]
 8106b2e:	699b      	ldr	r3, [r3, #24]
 8106b30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8106b34:	d110      	bne.n	8106b58 <HAL_SPI_Init+0xf8>
 8106b36:	687b      	ldr	r3, [r7, #4]
 8106b38:	685b      	ldr	r3, [r3, #4]
 8106b3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8106b3e:	d10b      	bne.n	8106b58 <HAL_SPI_Init+0xf8>
 8106b40:	687b      	ldr	r3, [r7, #4]
 8106b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106b44:	2b00      	cmp	r3, #0
 8106b46:	d107      	bne.n	8106b58 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8106b48:	687b      	ldr	r3, [r7, #4]
 8106b4a:	681b      	ldr	r3, [r3, #0]
 8106b4c:	681a      	ldr	r2, [r3, #0]
 8106b4e:	687b      	ldr	r3, [r7, #4]
 8106b50:	681b      	ldr	r3, [r3, #0]
 8106b52:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8106b56:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8106b58:	687b      	ldr	r3, [r7, #4]
 8106b5a:	69da      	ldr	r2, [r3, #28]
 8106b5c:	687b      	ldr	r3, [r7, #4]
 8106b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106b60:	431a      	orrs	r2, r3
 8106b62:	68fb      	ldr	r3, [r7, #12]
 8106b64:	431a      	orrs	r2, r3
 8106b66:	687b      	ldr	r3, [r7, #4]
 8106b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106b6a:	ea42 0103 	orr.w	r1, r2, r3
 8106b6e:	687b      	ldr	r3, [r7, #4]
 8106b70:	68da      	ldr	r2, [r3, #12]
 8106b72:	687b      	ldr	r3, [r7, #4]
 8106b74:	681b      	ldr	r3, [r3, #0]
 8106b76:	430a      	orrs	r2, r1
 8106b78:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8106b7a:	687b      	ldr	r3, [r7, #4]
 8106b7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8106b7e:	687b      	ldr	r3, [r7, #4]
 8106b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106b82:	431a      	orrs	r2, r3
 8106b84:	687b      	ldr	r3, [r7, #4]
 8106b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106b88:	431a      	orrs	r2, r3
 8106b8a:	687b      	ldr	r3, [r7, #4]
 8106b8c:	699b      	ldr	r3, [r3, #24]
 8106b8e:	431a      	orrs	r2, r3
 8106b90:	687b      	ldr	r3, [r7, #4]
 8106b92:	691b      	ldr	r3, [r3, #16]
 8106b94:	431a      	orrs	r2, r3
 8106b96:	687b      	ldr	r3, [r7, #4]
 8106b98:	695b      	ldr	r3, [r3, #20]
 8106b9a:	431a      	orrs	r2, r3
 8106b9c:	687b      	ldr	r3, [r7, #4]
 8106b9e:	6a1b      	ldr	r3, [r3, #32]
 8106ba0:	431a      	orrs	r2, r3
 8106ba2:	687b      	ldr	r3, [r7, #4]
 8106ba4:	685b      	ldr	r3, [r3, #4]
 8106ba6:	431a      	orrs	r2, r3
 8106ba8:	687b      	ldr	r3, [r7, #4]
 8106baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106bac:	431a      	orrs	r2, r3
 8106bae:	687b      	ldr	r3, [r7, #4]
 8106bb0:	689b      	ldr	r3, [r3, #8]
 8106bb2:	431a      	orrs	r2, r3
 8106bb4:	687b      	ldr	r3, [r7, #4]
 8106bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8106bb8:	ea42 0103 	orr.w	r1, r2, r3
 8106bbc:	687b      	ldr	r3, [r7, #4]
 8106bbe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8106bc0:	687b      	ldr	r3, [r7, #4]
 8106bc2:	681b      	ldr	r3, [r3, #0]
 8106bc4:	430a      	orrs	r2, r1
 8106bc6:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8106bc8:	687b      	ldr	r3, [r7, #4]
 8106bca:	685b      	ldr	r3, [r3, #4]
 8106bcc:	2b00      	cmp	r3, #0
 8106bce:	d113      	bne.n	8106bf8 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8106bd0:	687b      	ldr	r3, [r7, #4]
 8106bd2:	681b      	ldr	r3, [r3, #0]
 8106bd4:	689b      	ldr	r3, [r3, #8]
 8106bd6:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8106bda:	687b      	ldr	r3, [r7, #4]
 8106bdc:	681b      	ldr	r3, [r3, #0]
 8106bde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8106be2:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8106be4:	687b      	ldr	r3, [r7, #4]
 8106be6:	681b      	ldr	r3, [r3, #0]
 8106be8:	689b      	ldr	r3, [r3, #8]
 8106bea:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8106bee:	687b      	ldr	r3, [r7, #4]
 8106bf0:	681b      	ldr	r3, [r3, #0]
 8106bf2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8106bf6:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8106bf8:	687b      	ldr	r3, [r7, #4]
 8106bfa:	681b      	ldr	r3, [r3, #0]
 8106bfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8106bfe:	687b      	ldr	r3, [r7, #4]
 8106c00:	681b      	ldr	r3, [r3, #0]
 8106c02:	f022 0201 	bic.w	r2, r2, #1
 8106c06:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8106c08:	687b      	ldr	r3, [r7, #4]
 8106c0a:	685b      	ldr	r3, [r3, #4]
 8106c0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8106c10:	2b00      	cmp	r3, #0
 8106c12:	d00a      	beq.n	8106c2a <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8106c14:	687b      	ldr	r3, [r7, #4]
 8106c16:	681b      	ldr	r3, [r3, #0]
 8106c18:	68db      	ldr	r3, [r3, #12]
 8106c1a:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8106c1e:	687b      	ldr	r3, [r7, #4]
 8106c20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8106c22:	687b      	ldr	r3, [r7, #4]
 8106c24:	681b      	ldr	r3, [r3, #0]
 8106c26:	430a      	orrs	r2, r1
 8106c28:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8106c2a:	687b      	ldr	r3, [r7, #4]
 8106c2c:	2200      	movs	r2, #0
 8106c2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8106c32:	687b      	ldr	r3, [r7, #4]
 8106c34:	2201      	movs	r2, #1
 8106c36:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8106c3a:	2300      	movs	r3, #0
}
 8106c3c:	4618      	mov	r0, r3
 8106c3e:	3710      	adds	r7, #16
 8106c40:	46bd      	mov	sp, r7
 8106c42:	bd80      	pop	{r7, pc}
 8106c44:	40013000 	.word	0x40013000
 8106c48:	40003800 	.word	0x40003800
 8106c4c:	40003c00 	.word	0x40003c00

08106c50 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8106c50:	b580      	push	{r7, lr}
 8106c52:	b08a      	sub	sp, #40	; 0x28
 8106c54:	af00      	add	r7, sp, #0
 8106c56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8106c58:	687b      	ldr	r3, [r7, #4]
 8106c5a:	681b      	ldr	r3, [r3, #0]
 8106c5c:	691b      	ldr	r3, [r3, #16]
 8106c5e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8106c60:	687b      	ldr	r3, [r7, #4]
 8106c62:	681b      	ldr	r3, [r3, #0]
 8106c64:	695b      	ldr	r3, [r3, #20]
 8106c66:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8106c68:	6a3a      	ldr	r2, [r7, #32]
 8106c6a:	69fb      	ldr	r3, [r7, #28]
 8106c6c:	4013      	ands	r3, r2
 8106c6e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8106c70:	687b      	ldr	r3, [r7, #4]
 8106c72:	681b      	ldr	r3, [r3, #0]
 8106c74:	689b      	ldr	r3, [r3, #8]
 8106c76:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8106c78:	2300      	movs	r3, #0
 8106c7a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8106c7c:	687b      	ldr	r3, [r7, #4]
 8106c7e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8106c82:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8106c84:	687b      	ldr	r3, [r7, #4]
 8106c86:	681b      	ldr	r3, [r3, #0]
 8106c88:	3330      	adds	r3, #48	; 0x30
 8106c8a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8106c8c:	69bb      	ldr	r3, [r7, #24]
 8106c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106c92:	2b00      	cmp	r3, #0
 8106c94:	d113      	bne.n	8106cbe <HAL_SPI_IRQHandler+0x6e>
 8106c96:	69bb      	ldr	r3, [r7, #24]
 8106c98:	f003 0320 	and.w	r3, r3, #32
 8106c9c:	2b00      	cmp	r3, #0
 8106c9e:	d10e      	bne.n	8106cbe <HAL_SPI_IRQHandler+0x6e>
 8106ca0:	69bb      	ldr	r3, [r7, #24]
 8106ca2:	f003 0304 	and.w	r3, r3, #4
 8106ca6:	2b00      	cmp	r3, #0
 8106ca8:	d009      	beq.n	8106cbe <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8106caa:	687b      	ldr	r3, [r7, #4]
 8106cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8106cae:	6878      	ldr	r0, [r7, #4]
 8106cb0:	4798      	blx	r3
    hspi->RxISR(hspi);
 8106cb2:	687b      	ldr	r3, [r7, #4]
 8106cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106cb6:	6878      	ldr	r0, [r7, #4]
 8106cb8:	4798      	blx	r3
    handled = 1UL;
 8106cba:	2301      	movs	r3, #1
 8106cbc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8106cbe:	69bb      	ldr	r3, [r7, #24]
 8106cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106cc4:	2b00      	cmp	r3, #0
 8106cc6:	d10f      	bne.n	8106ce8 <HAL_SPI_IRQHandler+0x98>
 8106cc8:	69bb      	ldr	r3, [r7, #24]
 8106cca:	f003 0301 	and.w	r3, r3, #1
 8106cce:	2b00      	cmp	r3, #0
 8106cd0:	d00a      	beq.n	8106ce8 <HAL_SPI_IRQHandler+0x98>
 8106cd2:	69bb      	ldr	r3, [r7, #24]
 8106cd4:	f003 0304 	and.w	r3, r3, #4
 8106cd8:	2b00      	cmp	r3, #0
 8106cda:	d105      	bne.n	8106ce8 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8106cdc:	687b      	ldr	r3, [r7, #4]
 8106cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106ce0:	6878      	ldr	r0, [r7, #4]
 8106ce2:	4798      	blx	r3
    handled = 1UL;
 8106ce4:	2301      	movs	r3, #1
 8106ce6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8106ce8:	69bb      	ldr	r3, [r7, #24]
 8106cea:	f003 0320 	and.w	r3, r3, #32
 8106cee:	2b00      	cmp	r3, #0
 8106cf0:	d10f      	bne.n	8106d12 <HAL_SPI_IRQHandler+0xc2>
 8106cf2:	69bb      	ldr	r3, [r7, #24]
 8106cf4:	f003 0302 	and.w	r3, r3, #2
 8106cf8:	2b00      	cmp	r3, #0
 8106cfa:	d00a      	beq.n	8106d12 <HAL_SPI_IRQHandler+0xc2>
 8106cfc:	69bb      	ldr	r3, [r7, #24]
 8106cfe:	f003 0304 	and.w	r3, r3, #4
 8106d02:	2b00      	cmp	r3, #0
 8106d04:	d105      	bne.n	8106d12 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8106d06:	687b      	ldr	r3, [r7, #4]
 8106d08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8106d0a:	6878      	ldr	r0, [r7, #4]
 8106d0c:	4798      	blx	r3
    handled = 1UL;
 8106d0e:	2301      	movs	r3, #1
 8106d10:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8106d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106d14:	2b00      	cmp	r3, #0
 8106d16:	f040 8172 	bne.w	8106ffe <HAL_SPI_IRQHandler+0x3ae>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8106d1a:	69bb      	ldr	r3, [r7, #24]
 8106d1c:	f003 0308 	and.w	r3, r3, #8
 8106d20:	2b00      	cmp	r3, #0
 8106d22:	f000 80a0 	beq.w	8106e66 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8106d26:	687b      	ldr	r3, [r7, #4]
 8106d28:	681b      	ldr	r3, [r3, #0]
 8106d2a:	699a      	ldr	r2, [r3, #24]
 8106d2c:	687b      	ldr	r3, [r7, #4]
 8106d2e:	681b      	ldr	r3, [r3, #0]
 8106d30:	f042 0208 	orr.w	r2, r2, #8
 8106d34:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8106d36:	687b      	ldr	r3, [r7, #4]
 8106d38:	681b      	ldr	r3, [r3, #0]
 8106d3a:	699a      	ldr	r2, [r3, #24]
 8106d3c:	687b      	ldr	r3, [r7, #4]
 8106d3e:	681b      	ldr	r3, [r3, #0]
 8106d40:	f042 0210 	orr.w	r2, r2, #16
 8106d44:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8106d46:	687b      	ldr	r3, [r7, #4]
 8106d48:	681b      	ldr	r3, [r3, #0]
 8106d4a:	699a      	ldr	r2, [r3, #24]
 8106d4c:	687b      	ldr	r3, [r7, #4]
 8106d4e:	681b      	ldr	r3, [r3, #0]
 8106d50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8106d54:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8106d56:	687b      	ldr	r3, [r7, #4]
 8106d58:	681b      	ldr	r3, [r3, #0]
 8106d5a:	691a      	ldr	r2, [r3, #16]
 8106d5c:	687b      	ldr	r3, [r7, #4]
 8106d5e:	681b      	ldr	r3, [r3, #0]
 8106d60:	f022 0208 	bic.w	r2, r2, #8
 8106d64:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8106d66:	697b      	ldr	r3, [r7, #20]
 8106d68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8106d6c:	2b00      	cmp	r3, #0
 8106d6e:	d00f      	beq.n	8106d90 <HAL_SPI_IRQHandler+0x140>
 8106d70:	7cfb      	ldrb	r3, [r7, #19]
 8106d72:	2b04      	cmp	r3, #4
 8106d74:	d004      	beq.n	8106d80 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8106d76:	687b      	ldr	r3, [r7, #4]
 8106d78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106d7a:	69db      	ldr	r3, [r3, #28]
 8106d7c:	2b00      	cmp	r3, #0
 8106d7e:	d007      	beq.n	8106d90 <HAL_SPI_IRQHandler+0x140>
 8106d80:	7cfb      	ldrb	r3, [r7, #19]
 8106d82:	2b03      	cmp	r3, #3
 8106d84:	d059      	beq.n	8106e3a <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8106d86:	687b      	ldr	r3, [r7, #4]
 8106d88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106d8a:	69db      	ldr	r3, [r3, #28]
 8106d8c:	2b00      	cmp	r3, #0
 8106d8e:	d154      	bne.n	8106e3a <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8106d90:	687b      	ldr	r3, [r7, #4]
 8106d92:	681b      	ldr	r3, [r3, #0]
 8106d94:	689b      	ldr	r3, [r3, #8]
 8106d96:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8106d9a:	2b00      	cmp	r3, #0
 8106d9c:	d13d      	bne.n	8106e1a <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8106d9e:	e036      	b.n	8106e0e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8106da0:	687b      	ldr	r3, [r7, #4]
 8106da2:	68db      	ldr	r3, [r3, #12]
 8106da4:	2b0f      	cmp	r3, #15
 8106da6:	d90b      	bls.n	8106dc0 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8106da8:	687b      	ldr	r3, [r7, #4]
 8106daa:	681a      	ldr	r2, [r3, #0]
 8106dac:	687b      	ldr	r3, [r7, #4]
 8106dae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106db0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8106db2:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8106db4:	687b      	ldr	r3, [r7, #4]
 8106db6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106db8:	1d1a      	adds	r2, r3, #4
 8106dba:	687b      	ldr	r3, [r7, #4]
 8106dbc:	665a      	str	r2, [r3, #100]	; 0x64
 8106dbe:	e01d      	b.n	8106dfc <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8106dc0:	687b      	ldr	r3, [r7, #4]
 8106dc2:	68db      	ldr	r3, [r3, #12]
 8106dc4:	2b07      	cmp	r3, #7
 8106dc6:	d90b      	bls.n	8106de0 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8106dc8:	687b      	ldr	r3, [r7, #4]
 8106dca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106dcc:	68fa      	ldr	r2, [r7, #12]
 8106dce:	8812      	ldrh	r2, [r2, #0]
 8106dd0:	b292      	uxth	r2, r2
 8106dd2:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8106dd4:	687b      	ldr	r3, [r7, #4]
 8106dd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106dd8:	1c9a      	adds	r2, r3, #2
 8106dda:	687b      	ldr	r3, [r7, #4]
 8106ddc:	665a      	str	r2, [r3, #100]	; 0x64
 8106dde:	e00d      	b.n	8106dfc <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8106de0:	687b      	ldr	r3, [r7, #4]
 8106de2:	681b      	ldr	r3, [r3, #0]
 8106de4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8106de8:	687b      	ldr	r3, [r7, #4]
 8106dea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106dec:	7812      	ldrb	r2, [r2, #0]
 8106dee:	b2d2      	uxtb	r2, r2
 8106df0:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8106df2:	687b      	ldr	r3, [r7, #4]
 8106df4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106df6:	1c5a      	adds	r2, r3, #1
 8106df8:	687b      	ldr	r3, [r7, #4]
 8106dfa:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8106dfc:	687b      	ldr	r3, [r7, #4]
 8106dfe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8106e02:	b29b      	uxth	r3, r3
 8106e04:	3b01      	subs	r3, #1
 8106e06:	b29a      	uxth	r2, r3
 8106e08:	687b      	ldr	r3, [r7, #4]
 8106e0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8106e0e:	687b      	ldr	r3, [r7, #4]
 8106e10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8106e14:	b29b      	uxth	r3, r3
 8106e16:	2b00      	cmp	r3, #0
 8106e18:	d1c2      	bne.n	8106da0 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8106e1a:	6878      	ldr	r0, [r7, #4]
 8106e1c:	f000 f93c 	bl	8107098 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8106e20:	687b      	ldr	r3, [r7, #4]
 8106e22:	2201      	movs	r2, #1
 8106e24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8106e28:	687b      	ldr	r3, [r7, #4]
 8106e2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106e2e:	2b00      	cmp	r3, #0
 8106e30:	d003      	beq.n	8106e3a <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8106e32:	6878      	ldr	r0, [r7, #4]
 8106e34:	f000 f90c 	bl	8107050 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8106e38:	e0e6      	b.n	8107008 <HAL_SPI_IRQHandler+0x3b8>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8106e3a:	7cfb      	ldrb	r3, [r7, #19]
 8106e3c:	2b05      	cmp	r3, #5
 8106e3e:	d103      	bne.n	8106e48 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8106e40:	6878      	ldr	r0, [r7, #4]
 8106e42:	f000 f8fb 	bl	810703c <HAL_SPI_TxRxCpltCallback>
    {
      /* end of the appropriate call */
    }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

    return;
 8106e46:	e0dc      	b.n	8107002 <HAL_SPI_IRQHandler+0x3b2>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8106e48:	7cfb      	ldrb	r3, [r7, #19]
 8106e4a:	2b04      	cmp	r3, #4
 8106e4c:	d103      	bne.n	8106e56 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8106e4e:	6878      	ldr	r0, [r7, #4]
 8106e50:	f000 f8ea 	bl	8107028 <HAL_SPI_RxCpltCallback>
    return;
 8106e54:	e0d5      	b.n	8107002 <HAL_SPI_IRQHandler+0x3b2>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8106e56:	7cfb      	ldrb	r3, [r7, #19]
 8106e58:	2b03      	cmp	r3, #3
 8106e5a:	f040 80d2 	bne.w	8107002 <HAL_SPI_IRQHandler+0x3b2>
      HAL_SPI_TxCpltCallback(hspi);
 8106e5e:	6878      	ldr	r0, [r7, #4]
 8106e60:	f000 f8d8 	bl	8107014 <HAL_SPI_TxCpltCallback>
    return;
 8106e64:	e0cd      	b.n	8107002 <HAL_SPI_IRQHandler+0x3b2>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8106e66:	69fb      	ldr	r3, [r7, #28]
 8106e68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8106e6c:	2b00      	cmp	r3, #0
 8106e6e:	d00d      	beq.n	8106e8c <HAL_SPI_IRQHandler+0x23c>
 8106e70:	6a3b      	ldr	r3, [r7, #32]
 8106e72:	f003 0308 	and.w	r3, r3, #8
 8106e76:	2b00      	cmp	r3, #0
 8106e78:	d008      	beq.n	8106e8c <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8106e7a:	687b      	ldr	r3, [r7, #4]
 8106e7c:	681b      	ldr	r3, [r3, #0]
 8106e7e:	699a      	ldr	r2, [r3, #24]
 8106e80:	687b      	ldr	r3, [r7, #4]
 8106e82:	681b      	ldr	r3, [r3, #0]
 8106e84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8106e88:	619a      	str	r2, [r3, #24]

    return;
 8106e8a:	e0bd      	b.n	8107008 <HAL_SPI_IRQHandler+0x3b8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8106e8c:	69bb      	ldr	r3, [r7, #24]
 8106e8e:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8106e92:	2b00      	cmp	r3, #0
 8106e94:	f000 80b8 	beq.w	8107008 <HAL_SPI_IRQHandler+0x3b8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8106e98:	69bb      	ldr	r3, [r7, #24]
 8106e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106e9e:	2b00      	cmp	r3, #0
 8106ea0:	d00f      	beq.n	8106ec2 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8106ea2:	687b      	ldr	r3, [r7, #4]
 8106ea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106ea8:	f043 0204 	orr.w	r2, r3, #4
 8106eac:	687b      	ldr	r3, [r7, #4]
 8106eae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8106eb2:	687b      	ldr	r3, [r7, #4]
 8106eb4:	681b      	ldr	r3, [r3, #0]
 8106eb6:	699a      	ldr	r2, [r3, #24]
 8106eb8:	687b      	ldr	r3, [r7, #4]
 8106eba:	681b      	ldr	r3, [r3, #0]
 8106ebc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8106ec0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8106ec2:	69bb      	ldr	r3, [r7, #24]
 8106ec4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8106ec8:	2b00      	cmp	r3, #0
 8106eca:	d00f      	beq.n	8106eec <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8106ecc:	687b      	ldr	r3, [r7, #4]
 8106ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106ed2:	f043 0201 	orr.w	r2, r3, #1
 8106ed6:	687b      	ldr	r3, [r7, #4]
 8106ed8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8106edc:	687b      	ldr	r3, [r7, #4]
 8106ede:	681b      	ldr	r3, [r3, #0]
 8106ee0:	699a      	ldr	r2, [r3, #24]
 8106ee2:	687b      	ldr	r3, [r7, #4]
 8106ee4:	681b      	ldr	r3, [r3, #0]
 8106ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8106eea:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8106eec:	69bb      	ldr	r3, [r7, #24]
 8106eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106ef2:	2b00      	cmp	r3, #0
 8106ef4:	d00f      	beq.n	8106f16 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8106ef6:	687b      	ldr	r3, [r7, #4]
 8106ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106efc:	f043 0208 	orr.w	r2, r3, #8
 8106f00:	687b      	ldr	r3, [r7, #4]
 8106f02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8106f06:	687b      	ldr	r3, [r7, #4]
 8106f08:	681b      	ldr	r3, [r3, #0]
 8106f0a:	699a      	ldr	r2, [r3, #24]
 8106f0c:	687b      	ldr	r3, [r7, #4]
 8106f0e:	681b      	ldr	r3, [r3, #0]
 8106f10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8106f14:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8106f16:	69bb      	ldr	r3, [r7, #24]
 8106f18:	f003 0320 	and.w	r3, r3, #32
 8106f1c:	2b00      	cmp	r3, #0
 8106f1e:	d00f      	beq.n	8106f40 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8106f20:	687b      	ldr	r3, [r7, #4]
 8106f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106f26:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8106f2a:	687b      	ldr	r3, [r7, #4]
 8106f2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8106f30:	687b      	ldr	r3, [r7, #4]
 8106f32:	681b      	ldr	r3, [r3, #0]
 8106f34:	699a      	ldr	r2, [r3, #24]
 8106f36:	687b      	ldr	r3, [r7, #4]
 8106f38:	681b      	ldr	r3, [r3, #0]
 8106f3a:	f042 0220 	orr.w	r2, r2, #32
 8106f3e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8106f40:	687b      	ldr	r3, [r7, #4]
 8106f42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106f46:	2b00      	cmp	r3, #0
 8106f48:	d05d      	beq.n	8107006 <HAL_SPI_IRQHandler+0x3b6>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8106f4a:	687b      	ldr	r3, [r7, #4]
 8106f4c:	681b      	ldr	r3, [r3, #0]
 8106f4e:	681a      	ldr	r2, [r3, #0]
 8106f50:	687b      	ldr	r3, [r7, #4]
 8106f52:	681b      	ldr	r3, [r3, #0]
 8106f54:	f022 0201 	bic.w	r2, r2, #1
 8106f58:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8106f5a:	687b      	ldr	r3, [r7, #4]
 8106f5c:	681b      	ldr	r3, [r3, #0]
 8106f5e:	691b      	ldr	r3, [r3, #16]
 8106f60:	687a      	ldr	r2, [r7, #4]
 8106f62:	6812      	ldr	r2, [r2, #0]
 8106f64:	f423 735a 	bic.w	r3, r3, #872	; 0x368
 8106f68:	f023 0303 	bic.w	r3, r3, #3
 8106f6c:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8106f6e:	697b      	ldr	r3, [r7, #20]
 8106f70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8106f74:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8106f78:	d138      	bne.n	8106fec <HAL_SPI_IRQHandler+0x39c>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8106f7a:	687b      	ldr	r3, [r7, #4]
 8106f7c:	681b      	ldr	r3, [r3, #0]
 8106f7e:	689a      	ldr	r2, [r3, #8]
 8106f80:	687b      	ldr	r3, [r7, #4]
 8106f82:	681b      	ldr	r3, [r3, #0]
 8106f84:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8106f88:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8106f8a:	687b      	ldr	r3, [r7, #4]
 8106f8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106f8e:	2b00      	cmp	r3, #0
 8106f90:	d013      	beq.n	8106fba <HAL_SPI_IRQHandler+0x36a>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8106f92:	687b      	ldr	r3, [r7, #4]
 8106f94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106f96:	4a1e      	ldr	r2, [pc, #120]	; (8107010 <HAL_SPI_IRQHandler+0x3c0>)
 8106f98:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8106f9a:	687b      	ldr	r3, [r7, #4]
 8106f9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106f9e:	4618      	mov	r0, r3
 8106fa0:	f7fc f858 	bl	8103054 <HAL_DMA_Abort_IT>
 8106fa4:	4603      	mov	r3, r0
 8106fa6:	2b00      	cmp	r3, #0
 8106fa8:	d007      	beq.n	8106fba <HAL_SPI_IRQHandler+0x36a>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8106faa:	687b      	ldr	r3, [r7, #4]
 8106fac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106fb0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8106fb4:	687b      	ldr	r3, [r7, #4]
 8106fb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8106fba:	687b      	ldr	r3, [r7, #4]
 8106fbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106fbe:	2b00      	cmp	r3, #0
 8106fc0:	d021      	beq.n	8107006 <HAL_SPI_IRQHandler+0x3b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8106fc2:	687b      	ldr	r3, [r7, #4]
 8106fc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106fc6:	4a12      	ldr	r2, [pc, #72]	; (8107010 <HAL_SPI_IRQHandler+0x3c0>)
 8106fc8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8106fca:	687b      	ldr	r3, [r7, #4]
 8106fcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106fce:	4618      	mov	r0, r3
 8106fd0:	f7fc f840 	bl	8103054 <HAL_DMA_Abort_IT>
 8106fd4:	4603      	mov	r3, r0
 8106fd6:	2b00      	cmp	r3, #0
 8106fd8:	d015      	beq.n	8107006 <HAL_SPI_IRQHandler+0x3b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8106fda:	687b      	ldr	r3, [r7, #4]
 8106fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106fe0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8106fe4:	687b      	ldr	r3, [r7, #4]
 8106fe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8106fea:	e00c      	b.n	8107006 <HAL_SPI_IRQHandler+0x3b6>
        hspi->State = HAL_SPI_STATE_READY;
 8106fec:	687b      	ldr	r3, [r7, #4]
 8106fee:	2201      	movs	r2, #1
 8106ff0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8106ff4:	6878      	ldr	r0, [r7, #4]
 8106ff6:	f000 f82b 	bl	8107050 <HAL_SPI_ErrorCallback>
    return;
 8106ffa:	bf00      	nop
 8106ffc:	e003      	b.n	8107006 <HAL_SPI_IRQHandler+0x3b6>
    return;
 8106ffe:	bf00      	nop
 8107000:	e002      	b.n	8107008 <HAL_SPI_IRQHandler+0x3b8>
    return;
 8107002:	bf00      	nop
 8107004:	e000      	b.n	8107008 <HAL_SPI_IRQHandler+0x3b8>
    return;
 8107006:	bf00      	nop
  }
}
 8107008:	3728      	adds	r7, #40	; 0x28
 810700a:	46bd      	mov	sp, r7
 810700c:	bd80      	pop	{r7, pc}
 810700e:	bf00      	nop
 8107010:	08107065 	.word	0x08107065

08107014 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8107014:	b480      	push	{r7}
 8107016:	b083      	sub	sp, #12
 8107018:	af00      	add	r7, sp, #0
 810701a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 810701c:	bf00      	nop
 810701e:	370c      	adds	r7, #12
 8107020:	46bd      	mov	sp, r7
 8107022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107026:	4770      	bx	lr

08107028 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8107028:	b480      	push	{r7}
 810702a:	b083      	sub	sp, #12
 810702c:	af00      	add	r7, sp, #0
 810702e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8107030:	bf00      	nop
 8107032:	370c      	adds	r7, #12
 8107034:	46bd      	mov	sp, r7
 8107036:	f85d 7b04 	ldr.w	r7, [sp], #4
 810703a:	4770      	bx	lr

0810703c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 810703c:	b480      	push	{r7}
 810703e:	b083      	sub	sp, #12
 8107040:	af00      	add	r7, sp, #0
 8107042:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8107044:	bf00      	nop
 8107046:	370c      	adds	r7, #12
 8107048:	46bd      	mov	sp, r7
 810704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810704e:	4770      	bx	lr

08107050 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8107050:	b480      	push	{r7}
 8107052:	b083      	sub	sp, #12
 8107054:	af00      	add	r7, sp, #0
 8107056:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8107058:	bf00      	nop
 810705a:	370c      	adds	r7, #12
 810705c:	46bd      	mov	sp, r7
 810705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107062:	4770      	bx	lr

08107064 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8107064:	b580      	push	{r7, lr}
 8107066:	b084      	sub	sp, #16
 8107068:	af00      	add	r7, sp, #0
 810706a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810706c:	687b      	ldr	r3, [r7, #4]
 810706e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107070:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8107072:	68fb      	ldr	r3, [r7, #12]
 8107074:	2200      	movs	r2, #0
 8107076:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 810707a:	68fb      	ldr	r3, [r7, #12]
 810707c:	2200      	movs	r2, #0
 810707e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8107082:	68fb      	ldr	r3, [r7, #12]
 8107084:	2201      	movs	r2, #1
 8107086:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 810708a:	68f8      	ldr	r0, [r7, #12]
 810708c:	f7ff ffe0 	bl	8107050 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8107090:	bf00      	nop
 8107092:	3710      	adds	r7, #16
 8107094:	46bd      	mov	sp, r7
 8107096:	bd80      	pop	{r7, pc}

08107098 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8107098:	b480      	push	{r7}
 810709a:	b085      	sub	sp, #20
 810709c:	af00      	add	r7, sp, #0
 810709e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 81070a0:	687b      	ldr	r3, [r7, #4]
 81070a2:	681b      	ldr	r3, [r3, #0]
 81070a4:	695b      	ldr	r3, [r3, #20]
 81070a6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 81070a8:	687b      	ldr	r3, [r7, #4]
 81070aa:	681b      	ldr	r3, [r3, #0]
 81070ac:	699a      	ldr	r2, [r3, #24]
 81070ae:	687b      	ldr	r3, [r7, #4]
 81070b0:	681b      	ldr	r3, [r3, #0]
 81070b2:	f042 0208 	orr.w	r2, r2, #8
 81070b6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 81070b8:	687b      	ldr	r3, [r7, #4]
 81070ba:	681b      	ldr	r3, [r3, #0]
 81070bc:	699a      	ldr	r2, [r3, #24]
 81070be:	687b      	ldr	r3, [r7, #4]
 81070c0:	681b      	ldr	r3, [r3, #0]
 81070c2:	f042 0210 	orr.w	r2, r2, #16
 81070c6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 81070c8:	687b      	ldr	r3, [r7, #4]
 81070ca:	681b      	ldr	r3, [r3, #0]
 81070cc:	681a      	ldr	r2, [r3, #0]
 81070ce:	687b      	ldr	r3, [r7, #4]
 81070d0:	681b      	ldr	r3, [r3, #0]
 81070d2:	f022 0201 	bic.w	r2, r2, #1
 81070d6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 81070d8:	687b      	ldr	r3, [r7, #4]
 81070da:	681b      	ldr	r3, [r3, #0]
 81070dc:	691b      	ldr	r3, [r3, #16]
 81070de:	687a      	ldr	r2, [r7, #4]
 81070e0:	6812      	ldr	r2, [r2, #0]
 81070e2:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 81070e6:	f023 0303 	bic.w	r3, r3, #3
 81070ea:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 81070ec:	687b      	ldr	r3, [r7, #4]
 81070ee:	681b      	ldr	r3, [r3, #0]
 81070f0:	689a      	ldr	r2, [r3, #8]
 81070f2:	687b      	ldr	r3, [r7, #4]
 81070f4:	681b      	ldr	r3, [r3, #0]
 81070f6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 81070fa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 81070fc:	687b      	ldr	r3, [r7, #4]
 81070fe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8107102:	b2db      	uxtb	r3, r3
 8107104:	2b04      	cmp	r3, #4
 8107106:	d014      	beq.n	8107132 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8107108:	68fb      	ldr	r3, [r7, #12]
 810710a:	f003 0320 	and.w	r3, r3, #32
 810710e:	2b00      	cmp	r3, #0
 8107110:	d00f      	beq.n	8107132 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8107112:	687b      	ldr	r3, [r7, #4]
 8107114:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107118:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810711c:	687b      	ldr	r3, [r7, #4]
 810711e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8107122:	687b      	ldr	r3, [r7, #4]
 8107124:	681b      	ldr	r3, [r3, #0]
 8107126:	699a      	ldr	r2, [r3, #24]
 8107128:	687b      	ldr	r3, [r7, #4]
 810712a:	681b      	ldr	r3, [r3, #0]
 810712c:	f042 0220 	orr.w	r2, r2, #32
 8107130:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8107132:	687b      	ldr	r3, [r7, #4]
 8107134:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8107138:	b2db      	uxtb	r3, r3
 810713a:	2b03      	cmp	r3, #3
 810713c:	d014      	beq.n	8107168 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 810713e:	68fb      	ldr	r3, [r7, #12]
 8107140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107144:	2b00      	cmp	r3, #0
 8107146:	d00f      	beq.n	8107168 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8107148:	687b      	ldr	r3, [r7, #4]
 810714a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810714e:	f043 0204 	orr.w	r2, r3, #4
 8107152:	687b      	ldr	r3, [r7, #4]
 8107154:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8107158:	687b      	ldr	r3, [r7, #4]
 810715a:	681b      	ldr	r3, [r3, #0]
 810715c:	699a      	ldr	r2, [r3, #24]
 810715e:	687b      	ldr	r3, [r7, #4]
 8107160:	681b      	ldr	r3, [r3, #0]
 8107162:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8107166:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8107168:	68fb      	ldr	r3, [r7, #12]
 810716a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810716e:	2b00      	cmp	r3, #0
 8107170:	d00f      	beq.n	8107192 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8107172:	687b      	ldr	r3, [r7, #4]
 8107174:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107178:	f043 0201 	orr.w	r2, r3, #1
 810717c:	687b      	ldr	r3, [r7, #4]
 810717e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8107182:	687b      	ldr	r3, [r7, #4]
 8107184:	681b      	ldr	r3, [r3, #0]
 8107186:	699a      	ldr	r2, [r3, #24]
 8107188:	687b      	ldr	r3, [r7, #4]
 810718a:	681b      	ldr	r3, [r3, #0]
 810718c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8107190:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8107192:	68fb      	ldr	r3, [r7, #12]
 8107194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8107198:	2b00      	cmp	r3, #0
 810719a:	d00f      	beq.n	81071bc <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 810719c:	687b      	ldr	r3, [r7, #4]
 810719e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81071a2:	f043 0208 	orr.w	r2, r3, #8
 81071a6:	687b      	ldr	r3, [r7, #4]
 81071a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 81071ac:	687b      	ldr	r3, [r7, #4]
 81071ae:	681b      	ldr	r3, [r3, #0]
 81071b0:	699a      	ldr	r2, [r3, #24]
 81071b2:	687b      	ldr	r3, [r7, #4]
 81071b4:	681b      	ldr	r3, [r3, #0]
 81071b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81071ba:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 81071bc:	687b      	ldr	r3, [r7, #4]
 81071be:	2200      	movs	r2, #0
 81071c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 81071c4:	687b      	ldr	r3, [r7, #4]
 81071c6:	2200      	movs	r2, #0
 81071c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 81071cc:	bf00      	nop
 81071ce:	3714      	adds	r7, #20
 81071d0:	46bd      	mov	sp, r7
 81071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81071d6:	4770      	bx	lr

081071d8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 81071d8:	b480      	push	{r7}
 81071da:	b085      	sub	sp, #20
 81071dc:	af00      	add	r7, sp, #0
 81071de:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 81071e0:	687b      	ldr	r3, [r7, #4]
 81071e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81071e4:	095b      	lsrs	r3, r3, #5
 81071e6:	3301      	adds	r3, #1
 81071e8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 81071ea:	687b      	ldr	r3, [r7, #4]
 81071ec:	68db      	ldr	r3, [r3, #12]
 81071ee:	3301      	adds	r3, #1
 81071f0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 81071f2:	68bb      	ldr	r3, [r7, #8]
 81071f4:	3307      	adds	r3, #7
 81071f6:	08db      	lsrs	r3, r3, #3
 81071f8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 81071fa:	68bb      	ldr	r3, [r7, #8]
 81071fc:	68fa      	ldr	r2, [r7, #12]
 81071fe:	fb02 f303 	mul.w	r3, r2, r3
}
 8107202:	4618      	mov	r0, r3
 8107204:	3714      	adds	r7, #20
 8107206:	46bd      	mov	sp, r7
 8107208:	f85d 7b04 	ldr.w	r7, [sp], #4
 810720c:	4770      	bx	lr

0810720e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 810720e:	b580      	push	{r7, lr}
 8107210:	b082      	sub	sp, #8
 8107212:	af00      	add	r7, sp, #0
 8107214:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8107216:	687b      	ldr	r3, [r7, #4]
 8107218:	2b00      	cmp	r3, #0
 810721a:	d101      	bne.n	8107220 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810721c:	2301      	movs	r3, #1
 810721e:	e049      	b.n	81072b4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8107220:	687b      	ldr	r3, [r7, #4]
 8107222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8107226:	b2db      	uxtb	r3, r3
 8107228:	2b00      	cmp	r3, #0
 810722a:	d106      	bne.n	810723a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810722c:	687b      	ldr	r3, [r7, #4]
 810722e:	2200      	movs	r2, #0
 8107230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8107234:	6878      	ldr	r0, [r7, #4]
 8107236:	f000 f841 	bl	81072bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810723a:	687b      	ldr	r3, [r7, #4]
 810723c:	2202      	movs	r2, #2
 810723e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8107242:	687b      	ldr	r3, [r7, #4]
 8107244:	681a      	ldr	r2, [r3, #0]
 8107246:	687b      	ldr	r3, [r7, #4]
 8107248:	3304      	adds	r3, #4
 810724a:	4619      	mov	r1, r3
 810724c:	4610      	mov	r0, r2
 810724e:	f000 f9bd 	bl	81075cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8107252:	687b      	ldr	r3, [r7, #4]
 8107254:	2201      	movs	r2, #1
 8107256:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810725a:	687b      	ldr	r3, [r7, #4]
 810725c:	2201      	movs	r2, #1
 810725e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8107262:	687b      	ldr	r3, [r7, #4]
 8107264:	2201      	movs	r2, #1
 8107266:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 810726a:	687b      	ldr	r3, [r7, #4]
 810726c:	2201      	movs	r2, #1
 810726e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8107272:	687b      	ldr	r3, [r7, #4]
 8107274:	2201      	movs	r2, #1
 8107276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810727a:	687b      	ldr	r3, [r7, #4]
 810727c:	2201      	movs	r2, #1
 810727e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8107282:	687b      	ldr	r3, [r7, #4]
 8107284:	2201      	movs	r2, #1
 8107286:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810728a:	687b      	ldr	r3, [r7, #4]
 810728c:	2201      	movs	r2, #1
 810728e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8107292:	687b      	ldr	r3, [r7, #4]
 8107294:	2201      	movs	r2, #1
 8107296:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810729a:	687b      	ldr	r3, [r7, #4]
 810729c:	2201      	movs	r2, #1
 810729e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81072a2:	687b      	ldr	r3, [r7, #4]
 81072a4:	2201      	movs	r2, #1
 81072a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81072aa:	687b      	ldr	r3, [r7, #4]
 81072ac:	2201      	movs	r2, #1
 81072ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81072b2:	2300      	movs	r3, #0
}
 81072b4:	4618      	mov	r0, r3
 81072b6:	3708      	adds	r7, #8
 81072b8:	46bd      	mov	sp, r7
 81072ba:	bd80      	pop	{r7, pc}

081072bc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 81072bc:	b480      	push	{r7}
 81072be:	b083      	sub	sp, #12
 81072c0:	af00      	add	r7, sp, #0
 81072c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 81072c4:	bf00      	nop
 81072c6:	370c      	adds	r7, #12
 81072c8:	46bd      	mov	sp, r7
 81072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81072ce:	4770      	bx	lr

081072d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 81072d0:	b480      	push	{r7}
 81072d2:	b085      	sub	sp, #20
 81072d4:	af00      	add	r7, sp, #0
 81072d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 81072d8:	687b      	ldr	r3, [r7, #4]
 81072da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81072de:	b2db      	uxtb	r3, r3
 81072e0:	2b01      	cmp	r3, #1
 81072e2:	d001      	beq.n	81072e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 81072e4:	2301      	movs	r3, #1
 81072e6:	e021      	b.n	810732c <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81072e8:	687b      	ldr	r3, [r7, #4]
 81072ea:	2202      	movs	r2, #2
 81072ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 81072f0:	687b      	ldr	r3, [r7, #4]
 81072f2:	681b      	ldr	r3, [r3, #0]
 81072f4:	68da      	ldr	r2, [r3, #12]
 81072f6:	687b      	ldr	r3, [r7, #4]
 81072f8:	681b      	ldr	r3, [r3, #0]
 81072fa:	f042 0201 	orr.w	r2, r2, #1
 81072fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8107300:	687b      	ldr	r3, [r7, #4]
 8107302:	681b      	ldr	r3, [r3, #0]
 8107304:	689a      	ldr	r2, [r3, #8]
 8107306:	4b0c      	ldr	r3, [pc, #48]	; (8107338 <HAL_TIM_Base_Start_IT+0x68>)
 8107308:	4013      	ands	r3, r2
 810730a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810730c:	68fb      	ldr	r3, [r7, #12]
 810730e:	2b06      	cmp	r3, #6
 8107310:	d00b      	beq.n	810732a <HAL_TIM_Base_Start_IT+0x5a>
 8107312:	68fb      	ldr	r3, [r7, #12]
 8107314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107318:	d007      	beq.n	810732a <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 810731a:	687b      	ldr	r3, [r7, #4]
 810731c:	681b      	ldr	r3, [r3, #0]
 810731e:	681a      	ldr	r2, [r3, #0]
 8107320:	687b      	ldr	r3, [r7, #4]
 8107322:	681b      	ldr	r3, [r3, #0]
 8107324:	f042 0201 	orr.w	r2, r2, #1
 8107328:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 810732a:	2300      	movs	r3, #0
}
 810732c:	4618      	mov	r0, r3
 810732e:	3714      	adds	r7, #20
 8107330:	46bd      	mov	sp, r7
 8107332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107336:	4770      	bx	lr
 8107338:	00010007 	.word	0x00010007

0810733c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 810733c:	b580      	push	{r7, lr}
 810733e:	b082      	sub	sp, #8
 8107340:	af00      	add	r7, sp, #0
 8107342:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8107344:	687b      	ldr	r3, [r7, #4]
 8107346:	681b      	ldr	r3, [r3, #0]
 8107348:	691b      	ldr	r3, [r3, #16]
 810734a:	f003 0302 	and.w	r3, r3, #2
 810734e:	2b02      	cmp	r3, #2
 8107350:	d122      	bne.n	8107398 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8107352:	687b      	ldr	r3, [r7, #4]
 8107354:	681b      	ldr	r3, [r3, #0]
 8107356:	68db      	ldr	r3, [r3, #12]
 8107358:	f003 0302 	and.w	r3, r3, #2
 810735c:	2b02      	cmp	r3, #2
 810735e:	d11b      	bne.n	8107398 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8107360:	687b      	ldr	r3, [r7, #4]
 8107362:	681b      	ldr	r3, [r3, #0]
 8107364:	f06f 0202 	mvn.w	r2, #2
 8107368:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810736a:	687b      	ldr	r3, [r7, #4]
 810736c:	2201      	movs	r2, #1
 810736e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8107370:	687b      	ldr	r3, [r7, #4]
 8107372:	681b      	ldr	r3, [r3, #0]
 8107374:	699b      	ldr	r3, [r3, #24]
 8107376:	f003 0303 	and.w	r3, r3, #3
 810737a:	2b00      	cmp	r3, #0
 810737c:	d003      	beq.n	8107386 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 810737e:	6878      	ldr	r0, [r7, #4]
 8107380:	f000 f905 	bl	810758e <HAL_TIM_IC_CaptureCallback>
 8107384:	e005      	b.n	8107392 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8107386:	6878      	ldr	r0, [r7, #4]
 8107388:	f000 f8f7 	bl	810757a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 810738c:	6878      	ldr	r0, [r7, #4]
 810738e:	f000 f908 	bl	81075a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8107392:	687b      	ldr	r3, [r7, #4]
 8107394:	2200      	movs	r2, #0
 8107396:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8107398:	687b      	ldr	r3, [r7, #4]
 810739a:	681b      	ldr	r3, [r3, #0]
 810739c:	691b      	ldr	r3, [r3, #16]
 810739e:	f003 0304 	and.w	r3, r3, #4
 81073a2:	2b04      	cmp	r3, #4
 81073a4:	d122      	bne.n	81073ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 81073a6:	687b      	ldr	r3, [r7, #4]
 81073a8:	681b      	ldr	r3, [r3, #0]
 81073aa:	68db      	ldr	r3, [r3, #12]
 81073ac:	f003 0304 	and.w	r3, r3, #4
 81073b0:	2b04      	cmp	r3, #4
 81073b2:	d11b      	bne.n	81073ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 81073b4:	687b      	ldr	r3, [r7, #4]
 81073b6:	681b      	ldr	r3, [r3, #0]
 81073b8:	f06f 0204 	mvn.w	r2, #4
 81073bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 81073be:	687b      	ldr	r3, [r7, #4]
 81073c0:	2202      	movs	r2, #2
 81073c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 81073c4:	687b      	ldr	r3, [r7, #4]
 81073c6:	681b      	ldr	r3, [r3, #0]
 81073c8:	699b      	ldr	r3, [r3, #24]
 81073ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81073ce:	2b00      	cmp	r3, #0
 81073d0:	d003      	beq.n	81073da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81073d2:	6878      	ldr	r0, [r7, #4]
 81073d4:	f000 f8db 	bl	810758e <HAL_TIM_IC_CaptureCallback>
 81073d8:	e005      	b.n	81073e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81073da:	6878      	ldr	r0, [r7, #4]
 81073dc:	f000 f8cd 	bl	810757a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81073e0:	6878      	ldr	r0, [r7, #4]
 81073e2:	f000 f8de 	bl	81075a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81073e6:	687b      	ldr	r3, [r7, #4]
 81073e8:	2200      	movs	r2, #0
 81073ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 81073ec:	687b      	ldr	r3, [r7, #4]
 81073ee:	681b      	ldr	r3, [r3, #0]
 81073f0:	691b      	ldr	r3, [r3, #16]
 81073f2:	f003 0308 	and.w	r3, r3, #8
 81073f6:	2b08      	cmp	r3, #8
 81073f8:	d122      	bne.n	8107440 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 81073fa:	687b      	ldr	r3, [r7, #4]
 81073fc:	681b      	ldr	r3, [r3, #0]
 81073fe:	68db      	ldr	r3, [r3, #12]
 8107400:	f003 0308 	and.w	r3, r3, #8
 8107404:	2b08      	cmp	r3, #8
 8107406:	d11b      	bne.n	8107440 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8107408:	687b      	ldr	r3, [r7, #4]
 810740a:	681b      	ldr	r3, [r3, #0]
 810740c:	f06f 0208 	mvn.w	r2, #8
 8107410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8107412:	687b      	ldr	r3, [r7, #4]
 8107414:	2204      	movs	r2, #4
 8107416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8107418:	687b      	ldr	r3, [r7, #4]
 810741a:	681b      	ldr	r3, [r3, #0]
 810741c:	69db      	ldr	r3, [r3, #28]
 810741e:	f003 0303 	and.w	r3, r3, #3
 8107422:	2b00      	cmp	r3, #0
 8107424:	d003      	beq.n	810742e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8107426:	6878      	ldr	r0, [r7, #4]
 8107428:	f000 f8b1 	bl	810758e <HAL_TIM_IC_CaptureCallback>
 810742c:	e005      	b.n	810743a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810742e:	6878      	ldr	r0, [r7, #4]
 8107430:	f000 f8a3 	bl	810757a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8107434:	6878      	ldr	r0, [r7, #4]
 8107436:	f000 f8b4 	bl	81075a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810743a:	687b      	ldr	r3, [r7, #4]
 810743c:	2200      	movs	r2, #0
 810743e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8107440:	687b      	ldr	r3, [r7, #4]
 8107442:	681b      	ldr	r3, [r3, #0]
 8107444:	691b      	ldr	r3, [r3, #16]
 8107446:	f003 0310 	and.w	r3, r3, #16
 810744a:	2b10      	cmp	r3, #16
 810744c:	d122      	bne.n	8107494 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 810744e:	687b      	ldr	r3, [r7, #4]
 8107450:	681b      	ldr	r3, [r3, #0]
 8107452:	68db      	ldr	r3, [r3, #12]
 8107454:	f003 0310 	and.w	r3, r3, #16
 8107458:	2b10      	cmp	r3, #16
 810745a:	d11b      	bne.n	8107494 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 810745c:	687b      	ldr	r3, [r7, #4]
 810745e:	681b      	ldr	r3, [r3, #0]
 8107460:	f06f 0210 	mvn.w	r2, #16
 8107464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8107466:	687b      	ldr	r3, [r7, #4]
 8107468:	2208      	movs	r2, #8
 810746a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 810746c:	687b      	ldr	r3, [r7, #4]
 810746e:	681b      	ldr	r3, [r3, #0]
 8107470:	69db      	ldr	r3, [r3, #28]
 8107472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8107476:	2b00      	cmp	r3, #0
 8107478:	d003      	beq.n	8107482 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810747a:	6878      	ldr	r0, [r7, #4]
 810747c:	f000 f887 	bl	810758e <HAL_TIM_IC_CaptureCallback>
 8107480:	e005      	b.n	810748e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8107482:	6878      	ldr	r0, [r7, #4]
 8107484:	f000 f879 	bl	810757a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8107488:	6878      	ldr	r0, [r7, #4]
 810748a:	f000 f88a 	bl	81075a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810748e:	687b      	ldr	r3, [r7, #4]
 8107490:	2200      	movs	r2, #0
 8107492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8107494:	687b      	ldr	r3, [r7, #4]
 8107496:	681b      	ldr	r3, [r3, #0]
 8107498:	691b      	ldr	r3, [r3, #16]
 810749a:	f003 0301 	and.w	r3, r3, #1
 810749e:	2b01      	cmp	r3, #1
 81074a0:	d10e      	bne.n	81074c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 81074a2:	687b      	ldr	r3, [r7, #4]
 81074a4:	681b      	ldr	r3, [r3, #0]
 81074a6:	68db      	ldr	r3, [r3, #12]
 81074a8:	f003 0301 	and.w	r3, r3, #1
 81074ac:	2b01      	cmp	r3, #1
 81074ae:	d107      	bne.n	81074c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 81074b0:	687b      	ldr	r3, [r7, #4]
 81074b2:	681b      	ldr	r3, [r3, #0]
 81074b4:	f06f 0201 	mvn.w	r2, #1
 81074b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 81074ba:	6878      	ldr	r0, [r7, #4]
 81074bc:	f7fa f93a 	bl	8101734 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 81074c0:	687b      	ldr	r3, [r7, #4]
 81074c2:	681b      	ldr	r3, [r3, #0]
 81074c4:	691b      	ldr	r3, [r3, #16]
 81074c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81074ca:	2b80      	cmp	r3, #128	; 0x80
 81074cc:	d10e      	bne.n	81074ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 81074ce:	687b      	ldr	r3, [r7, #4]
 81074d0:	681b      	ldr	r3, [r3, #0]
 81074d2:	68db      	ldr	r3, [r3, #12]
 81074d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81074d8:	2b80      	cmp	r3, #128	; 0x80
 81074da:	d107      	bne.n	81074ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 81074dc:	687b      	ldr	r3, [r7, #4]
 81074de:	681b      	ldr	r3, [r3, #0]
 81074e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 81074e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 81074e6:	6878      	ldr	r0, [r7, #4]
 81074e8:	f000 f914 	bl	8107714 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 81074ec:	687b      	ldr	r3, [r7, #4]
 81074ee:	681b      	ldr	r3, [r3, #0]
 81074f0:	691b      	ldr	r3, [r3, #16]
 81074f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81074f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81074fa:	d10e      	bne.n	810751a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 81074fc:	687b      	ldr	r3, [r7, #4]
 81074fe:	681b      	ldr	r3, [r3, #0]
 8107500:	68db      	ldr	r3, [r3, #12]
 8107502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8107506:	2b80      	cmp	r3, #128	; 0x80
 8107508:	d107      	bne.n	810751a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 810750a:	687b      	ldr	r3, [r7, #4]
 810750c:	681b      	ldr	r3, [r3, #0]
 810750e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8107512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8107514:	6878      	ldr	r0, [r7, #4]
 8107516:	f000 f907 	bl	8107728 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 810751a:	687b      	ldr	r3, [r7, #4]
 810751c:	681b      	ldr	r3, [r3, #0]
 810751e:	691b      	ldr	r3, [r3, #16]
 8107520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107524:	2b40      	cmp	r3, #64	; 0x40
 8107526:	d10e      	bne.n	8107546 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8107528:	687b      	ldr	r3, [r7, #4]
 810752a:	681b      	ldr	r3, [r3, #0]
 810752c:	68db      	ldr	r3, [r3, #12]
 810752e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107532:	2b40      	cmp	r3, #64	; 0x40
 8107534:	d107      	bne.n	8107546 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8107536:	687b      	ldr	r3, [r7, #4]
 8107538:	681b      	ldr	r3, [r3, #0]
 810753a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 810753e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8107540:	6878      	ldr	r0, [r7, #4]
 8107542:	f000 f838 	bl	81075b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8107546:	687b      	ldr	r3, [r7, #4]
 8107548:	681b      	ldr	r3, [r3, #0]
 810754a:	691b      	ldr	r3, [r3, #16]
 810754c:	f003 0320 	and.w	r3, r3, #32
 8107550:	2b20      	cmp	r3, #32
 8107552:	d10e      	bne.n	8107572 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8107554:	687b      	ldr	r3, [r7, #4]
 8107556:	681b      	ldr	r3, [r3, #0]
 8107558:	68db      	ldr	r3, [r3, #12]
 810755a:	f003 0320 	and.w	r3, r3, #32
 810755e:	2b20      	cmp	r3, #32
 8107560:	d107      	bne.n	8107572 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8107562:	687b      	ldr	r3, [r7, #4]
 8107564:	681b      	ldr	r3, [r3, #0]
 8107566:	f06f 0220 	mvn.w	r2, #32
 810756a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 810756c:	6878      	ldr	r0, [r7, #4]
 810756e:	f000 f8c7 	bl	8107700 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8107572:	bf00      	nop
 8107574:	3708      	adds	r7, #8
 8107576:	46bd      	mov	sp, r7
 8107578:	bd80      	pop	{r7, pc}

0810757a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 810757a:	b480      	push	{r7}
 810757c:	b083      	sub	sp, #12
 810757e:	af00      	add	r7, sp, #0
 8107580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8107582:	bf00      	nop
 8107584:	370c      	adds	r7, #12
 8107586:	46bd      	mov	sp, r7
 8107588:	f85d 7b04 	ldr.w	r7, [sp], #4
 810758c:	4770      	bx	lr

0810758e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 810758e:	b480      	push	{r7}
 8107590:	b083      	sub	sp, #12
 8107592:	af00      	add	r7, sp, #0
 8107594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8107596:	bf00      	nop
 8107598:	370c      	adds	r7, #12
 810759a:	46bd      	mov	sp, r7
 810759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81075a0:	4770      	bx	lr

081075a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 81075a2:	b480      	push	{r7}
 81075a4:	b083      	sub	sp, #12
 81075a6:	af00      	add	r7, sp, #0
 81075a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 81075aa:	bf00      	nop
 81075ac:	370c      	adds	r7, #12
 81075ae:	46bd      	mov	sp, r7
 81075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81075b4:	4770      	bx	lr

081075b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 81075b6:	b480      	push	{r7}
 81075b8:	b083      	sub	sp, #12
 81075ba:	af00      	add	r7, sp, #0
 81075bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 81075be:	bf00      	nop
 81075c0:	370c      	adds	r7, #12
 81075c2:	46bd      	mov	sp, r7
 81075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81075c8:	4770      	bx	lr
	...

081075cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 81075cc:	b480      	push	{r7}
 81075ce:	b085      	sub	sp, #20
 81075d0:	af00      	add	r7, sp, #0
 81075d2:	6078      	str	r0, [r7, #4]
 81075d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 81075d6:	687b      	ldr	r3, [r7, #4]
 81075d8:	681b      	ldr	r3, [r3, #0]
 81075da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 81075dc:	687b      	ldr	r3, [r7, #4]
 81075de:	4a40      	ldr	r2, [pc, #256]	; (81076e0 <TIM_Base_SetConfig+0x114>)
 81075e0:	4293      	cmp	r3, r2
 81075e2:	d013      	beq.n	810760c <TIM_Base_SetConfig+0x40>
 81075e4:	687b      	ldr	r3, [r7, #4]
 81075e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81075ea:	d00f      	beq.n	810760c <TIM_Base_SetConfig+0x40>
 81075ec:	687b      	ldr	r3, [r7, #4]
 81075ee:	4a3d      	ldr	r2, [pc, #244]	; (81076e4 <TIM_Base_SetConfig+0x118>)
 81075f0:	4293      	cmp	r3, r2
 81075f2:	d00b      	beq.n	810760c <TIM_Base_SetConfig+0x40>
 81075f4:	687b      	ldr	r3, [r7, #4]
 81075f6:	4a3c      	ldr	r2, [pc, #240]	; (81076e8 <TIM_Base_SetConfig+0x11c>)
 81075f8:	4293      	cmp	r3, r2
 81075fa:	d007      	beq.n	810760c <TIM_Base_SetConfig+0x40>
 81075fc:	687b      	ldr	r3, [r7, #4]
 81075fe:	4a3b      	ldr	r2, [pc, #236]	; (81076ec <TIM_Base_SetConfig+0x120>)
 8107600:	4293      	cmp	r3, r2
 8107602:	d003      	beq.n	810760c <TIM_Base_SetConfig+0x40>
 8107604:	687b      	ldr	r3, [r7, #4]
 8107606:	4a3a      	ldr	r2, [pc, #232]	; (81076f0 <TIM_Base_SetConfig+0x124>)
 8107608:	4293      	cmp	r3, r2
 810760a:	d108      	bne.n	810761e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810760c:	68fb      	ldr	r3, [r7, #12]
 810760e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8107614:	683b      	ldr	r3, [r7, #0]
 8107616:	685b      	ldr	r3, [r3, #4]
 8107618:	68fa      	ldr	r2, [r7, #12]
 810761a:	4313      	orrs	r3, r2
 810761c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810761e:	687b      	ldr	r3, [r7, #4]
 8107620:	4a2f      	ldr	r2, [pc, #188]	; (81076e0 <TIM_Base_SetConfig+0x114>)
 8107622:	4293      	cmp	r3, r2
 8107624:	d01f      	beq.n	8107666 <TIM_Base_SetConfig+0x9a>
 8107626:	687b      	ldr	r3, [r7, #4]
 8107628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810762c:	d01b      	beq.n	8107666 <TIM_Base_SetConfig+0x9a>
 810762e:	687b      	ldr	r3, [r7, #4]
 8107630:	4a2c      	ldr	r2, [pc, #176]	; (81076e4 <TIM_Base_SetConfig+0x118>)
 8107632:	4293      	cmp	r3, r2
 8107634:	d017      	beq.n	8107666 <TIM_Base_SetConfig+0x9a>
 8107636:	687b      	ldr	r3, [r7, #4]
 8107638:	4a2b      	ldr	r2, [pc, #172]	; (81076e8 <TIM_Base_SetConfig+0x11c>)
 810763a:	4293      	cmp	r3, r2
 810763c:	d013      	beq.n	8107666 <TIM_Base_SetConfig+0x9a>
 810763e:	687b      	ldr	r3, [r7, #4]
 8107640:	4a2a      	ldr	r2, [pc, #168]	; (81076ec <TIM_Base_SetConfig+0x120>)
 8107642:	4293      	cmp	r3, r2
 8107644:	d00f      	beq.n	8107666 <TIM_Base_SetConfig+0x9a>
 8107646:	687b      	ldr	r3, [r7, #4]
 8107648:	4a29      	ldr	r2, [pc, #164]	; (81076f0 <TIM_Base_SetConfig+0x124>)
 810764a:	4293      	cmp	r3, r2
 810764c:	d00b      	beq.n	8107666 <TIM_Base_SetConfig+0x9a>
 810764e:	687b      	ldr	r3, [r7, #4]
 8107650:	4a28      	ldr	r2, [pc, #160]	; (81076f4 <TIM_Base_SetConfig+0x128>)
 8107652:	4293      	cmp	r3, r2
 8107654:	d007      	beq.n	8107666 <TIM_Base_SetConfig+0x9a>
 8107656:	687b      	ldr	r3, [r7, #4]
 8107658:	4a27      	ldr	r2, [pc, #156]	; (81076f8 <TIM_Base_SetConfig+0x12c>)
 810765a:	4293      	cmp	r3, r2
 810765c:	d003      	beq.n	8107666 <TIM_Base_SetConfig+0x9a>
 810765e:	687b      	ldr	r3, [r7, #4]
 8107660:	4a26      	ldr	r2, [pc, #152]	; (81076fc <TIM_Base_SetConfig+0x130>)
 8107662:	4293      	cmp	r3, r2
 8107664:	d108      	bne.n	8107678 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8107666:	68fb      	ldr	r3, [r7, #12]
 8107668:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810766c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810766e:	683b      	ldr	r3, [r7, #0]
 8107670:	68db      	ldr	r3, [r3, #12]
 8107672:	68fa      	ldr	r2, [r7, #12]
 8107674:	4313      	orrs	r3, r2
 8107676:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8107678:	68fb      	ldr	r3, [r7, #12]
 810767a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 810767e:	683b      	ldr	r3, [r7, #0]
 8107680:	695b      	ldr	r3, [r3, #20]
 8107682:	4313      	orrs	r3, r2
 8107684:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8107686:	687b      	ldr	r3, [r7, #4]
 8107688:	68fa      	ldr	r2, [r7, #12]
 810768a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810768c:	683b      	ldr	r3, [r7, #0]
 810768e:	689a      	ldr	r2, [r3, #8]
 8107690:	687b      	ldr	r3, [r7, #4]
 8107692:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8107694:	683b      	ldr	r3, [r7, #0]
 8107696:	681a      	ldr	r2, [r3, #0]
 8107698:	687b      	ldr	r3, [r7, #4]
 810769a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810769c:	687b      	ldr	r3, [r7, #4]
 810769e:	4a10      	ldr	r2, [pc, #64]	; (81076e0 <TIM_Base_SetConfig+0x114>)
 81076a0:	4293      	cmp	r3, r2
 81076a2:	d00f      	beq.n	81076c4 <TIM_Base_SetConfig+0xf8>
 81076a4:	687b      	ldr	r3, [r7, #4]
 81076a6:	4a12      	ldr	r2, [pc, #72]	; (81076f0 <TIM_Base_SetConfig+0x124>)
 81076a8:	4293      	cmp	r3, r2
 81076aa:	d00b      	beq.n	81076c4 <TIM_Base_SetConfig+0xf8>
 81076ac:	687b      	ldr	r3, [r7, #4]
 81076ae:	4a11      	ldr	r2, [pc, #68]	; (81076f4 <TIM_Base_SetConfig+0x128>)
 81076b0:	4293      	cmp	r3, r2
 81076b2:	d007      	beq.n	81076c4 <TIM_Base_SetConfig+0xf8>
 81076b4:	687b      	ldr	r3, [r7, #4]
 81076b6:	4a10      	ldr	r2, [pc, #64]	; (81076f8 <TIM_Base_SetConfig+0x12c>)
 81076b8:	4293      	cmp	r3, r2
 81076ba:	d003      	beq.n	81076c4 <TIM_Base_SetConfig+0xf8>
 81076bc:	687b      	ldr	r3, [r7, #4]
 81076be:	4a0f      	ldr	r2, [pc, #60]	; (81076fc <TIM_Base_SetConfig+0x130>)
 81076c0:	4293      	cmp	r3, r2
 81076c2:	d103      	bne.n	81076cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 81076c4:	683b      	ldr	r3, [r7, #0]
 81076c6:	691a      	ldr	r2, [r3, #16]
 81076c8:	687b      	ldr	r3, [r7, #4]
 81076ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 81076cc:	687b      	ldr	r3, [r7, #4]
 81076ce:	2201      	movs	r2, #1
 81076d0:	615a      	str	r2, [r3, #20]
}
 81076d2:	bf00      	nop
 81076d4:	3714      	adds	r7, #20
 81076d6:	46bd      	mov	sp, r7
 81076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81076dc:	4770      	bx	lr
 81076de:	bf00      	nop
 81076e0:	40010000 	.word	0x40010000
 81076e4:	40000400 	.word	0x40000400
 81076e8:	40000800 	.word	0x40000800
 81076ec:	40000c00 	.word	0x40000c00
 81076f0:	40010400 	.word	0x40010400
 81076f4:	40014000 	.word	0x40014000
 81076f8:	40014400 	.word	0x40014400
 81076fc:	40014800 	.word	0x40014800

08107700 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8107700:	b480      	push	{r7}
 8107702:	b083      	sub	sp, #12
 8107704:	af00      	add	r7, sp, #0
 8107706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8107708:	bf00      	nop
 810770a:	370c      	adds	r7, #12
 810770c:	46bd      	mov	sp, r7
 810770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107712:	4770      	bx	lr

08107714 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8107714:	b480      	push	{r7}
 8107716:	b083      	sub	sp, #12
 8107718:	af00      	add	r7, sp, #0
 810771a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 810771c:	bf00      	nop
 810771e:	370c      	adds	r7, #12
 8107720:	46bd      	mov	sp, r7
 8107722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107726:	4770      	bx	lr

08107728 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8107728:	b480      	push	{r7}
 810772a:	b083      	sub	sp, #12
 810772c:	af00      	add	r7, sp, #0
 810772e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8107730:	bf00      	nop
 8107732:	370c      	adds	r7, #12
 8107734:	46bd      	mov	sp, r7
 8107736:	f85d 7b04 	ldr.w	r7, [sp], #4
 810773a:	4770      	bx	lr

0810773c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810773c:	b580      	push	{r7, lr}
 810773e:	b082      	sub	sp, #8
 8107740:	af00      	add	r7, sp, #0
 8107742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8107744:	687b      	ldr	r3, [r7, #4]
 8107746:	2b00      	cmp	r3, #0
 8107748:	d101      	bne.n	810774e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810774a:	2301      	movs	r3, #1
 810774c:	e042      	b.n	81077d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810774e:	687b      	ldr	r3, [r7, #4]
 8107750:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8107754:	2b00      	cmp	r3, #0
 8107756:	d106      	bne.n	8107766 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8107758:	687b      	ldr	r3, [r7, #4]
 810775a:	2200      	movs	r2, #0
 810775c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8107760:	6878      	ldr	r0, [r7, #4]
 8107762:	f7fa fc4d 	bl	8102000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8107766:	687b      	ldr	r3, [r7, #4]
 8107768:	2224      	movs	r2, #36	; 0x24
 810776a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 810776e:	687b      	ldr	r3, [r7, #4]
 8107770:	681b      	ldr	r3, [r3, #0]
 8107772:	681a      	ldr	r2, [r3, #0]
 8107774:	687b      	ldr	r3, [r7, #4]
 8107776:	681b      	ldr	r3, [r3, #0]
 8107778:	f022 0201 	bic.w	r2, r2, #1
 810777c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810777e:	6878      	ldr	r0, [r7, #4]
 8107780:	f000 f968 	bl	8107a54 <UART_SetConfig>
 8107784:	4603      	mov	r3, r0
 8107786:	2b01      	cmp	r3, #1
 8107788:	d101      	bne.n	810778e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 810778a:	2301      	movs	r3, #1
 810778c:	e022      	b.n	81077d4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810778e:	687b      	ldr	r3, [r7, #4]
 8107790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107792:	2b00      	cmp	r3, #0
 8107794:	d002      	beq.n	810779c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8107796:	6878      	ldr	r0, [r7, #4]
 8107798:	f000 ff0c 	bl	81085b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810779c:	687b      	ldr	r3, [r7, #4]
 810779e:	681b      	ldr	r3, [r3, #0]
 81077a0:	685a      	ldr	r2, [r3, #4]
 81077a2:	687b      	ldr	r3, [r7, #4]
 81077a4:	681b      	ldr	r3, [r3, #0]
 81077a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 81077aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 81077ac:	687b      	ldr	r3, [r7, #4]
 81077ae:	681b      	ldr	r3, [r3, #0]
 81077b0:	689a      	ldr	r2, [r3, #8]
 81077b2:	687b      	ldr	r3, [r7, #4]
 81077b4:	681b      	ldr	r3, [r3, #0]
 81077b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 81077ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 81077bc:	687b      	ldr	r3, [r7, #4]
 81077be:	681b      	ldr	r3, [r3, #0]
 81077c0:	681a      	ldr	r2, [r3, #0]
 81077c2:	687b      	ldr	r3, [r7, #4]
 81077c4:	681b      	ldr	r3, [r3, #0]
 81077c6:	f042 0201 	orr.w	r2, r2, #1
 81077ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 81077cc:	6878      	ldr	r0, [r7, #4]
 81077ce:	f000 ff93 	bl	81086f8 <UART_CheckIdleState>
 81077d2:	4603      	mov	r3, r0
}
 81077d4:	4618      	mov	r0, r3
 81077d6:	3708      	adds	r7, #8
 81077d8:	46bd      	mov	sp, r7
 81077da:	bd80      	pop	{r7, pc}

081077dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81077dc:	b580      	push	{r7, lr}
 81077de:	b08a      	sub	sp, #40	; 0x28
 81077e0:	af02      	add	r7, sp, #8
 81077e2:	60f8      	str	r0, [r7, #12]
 81077e4:	60b9      	str	r1, [r7, #8]
 81077e6:	603b      	str	r3, [r7, #0]
 81077e8:	4613      	mov	r3, r2
 81077ea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 81077ec:	68fb      	ldr	r3, [r7, #12]
 81077ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81077f2:	2b20      	cmp	r3, #32
 81077f4:	f040 8083 	bne.w	81078fe <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 81077f8:	68bb      	ldr	r3, [r7, #8]
 81077fa:	2b00      	cmp	r3, #0
 81077fc:	d002      	beq.n	8107804 <HAL_UART_Transmit+0x28>
 81077fe:	88fb      	ldrh	r3, [r7, #6]
 8107800:	2b00      	cmp	r3, #0
 8107802:	d101      	bne.n	8107808 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8107804:	2301      	movs	r3, #1
 8107806:	e07b      	b.n	8107900 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8107808:	68fb      	ldr	r3, [r7, #12]
 810780a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 810780e:	2b01      	cmp	r3, #1
 8107810:	d101      	bne.n	8107816 <HAL_UART_Transmit+0x3a>
 8107812:	2302      	movs	r3, #2
 8107814:	e074      	b.n	8107900 <HAL_UART_Transmit+0x124>
 8107816:	68fb      	ldr	r3, [r7, #12]
 8107818:	2201      	movs	r2, #1
 810781a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810781e:	68fb      	ldr	r3, [r7, #12]
 8107820:	2200      	movs	r2, #0
 8107822:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8107826:	68fb      	ldr	r3, [r7, #12]
 8107828:	2221      	movs	r2, #33	; 0x21
 810782a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 810782e:	f7fa fd33 	bl	8102298 <HAL_GetTick>
 8107832:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8107834:	68fb      	ldr	r3, [r7, #12]
 8107836:	88fa      	ldrh	r2, [r7, #6]
 8107838:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 810783c:	68fb      	ldr	r3, [r7, #12]
 810783e:	88fa      	ldrh	r2, [r7, #6]
 8107840:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8107844:	68fb      	ldr	r3, [r7, #12]
 8107846:	689b      	ldr	r3, [r3, #8]
 8107848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810784c:	d108      	bne.n	8107860 <HAL_UART_Transmit+0x84>
 810784e:	68fb      	ldr	r3, [r7, #12]
 8107850:	691b      	ldr	r3, [r3, #16]
 8107852:	2b00      	cmp	r3, #0
 8107854:	d104      	bne.n	8107860 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8107856:	2300      	movs	r3, #0
 8107858:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 810785a:	68bb      	ldr	r3, [r7, #8]
 810785c:	61bb      	str	r3, [r7, #24]
 810785e:	e003      	b.n	8107868 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8107860:	68bb      	ldr	r3, [r7, #8]
 8107862:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8107864:	2300      	movs	r3, #0
 8107866:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8107868:	68fb      	ldr	r3, [r7, #12]
 810786a:	2200      	movs	r2, #0
 810786c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8107870:	e02c      	b.n	81078cc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8107872:	683b      	ldr	r3, [r7, #0]
 8107874:	9300      	str	r3, [sp, #0]
 8107876:	697b      	ldr	r3, [r7, #20]
 8107878:	2200      	movs	r2, #0
 810787a:	2180      	movs	r1, #128	; 0x80
 810787c:	68f8      	ldr	r0, [r7, #12]
 810787e:	f000 ff83 	bl	8108788 <UART_WaitOnFlagUntilTimeout>
 8107882:	4603      	mov	r3, r0
 8107884:	2b00      	cmp	r3, #0
 8107886:	d001      	beq.n	810788c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8107888:	2303      	movs	r3, #3
 810788a:	e039      	b.n	8107900 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 810788c:	69fb      	ldr	r3, [r7, #28]
 810788e:	2b00      	cmp	r3, #0
 8107890:	d10b      	bne.n	81078aa <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8107892:	69bb      	ldr	r3, [r7, #24]
 8107894:	881b      	ldrh	r3, [r3, #0]
 8107896:	461a      	mov	r2, r3
 8107898:	68fb      	ldr	r3, [r7, #12]
 810789a:	681b      	ldr	r3, [r3, #0]
 810789c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 81078a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 81078a2:	69bb      	ldr	r3, [r7, #24]
 81078a4:	3302      	adds	r3, #2
 81078a6:	61bb      	str	r3, [r7, #24]
 81078a8:	e007      	b.n	81078ba <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 81078aa:	69fb      	ldr	r3, [r7, #28]
 81078ac:	781a      	ldrb	r2, [r3, #0]
 81078ae:	68fb      	ldr	r3, [r7, #12]
 81078b0:	681b      	ldr	r3, [r3, #0]
 81078b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 81078b4:	69fb      	ldr	r3, [r7, #28]
 81078b6:	3301      	adds	r3, #1
 81078b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 81078ba:	68fb      	ldr	r3, [r7, #12]
 81078bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 81078c0:	b29b      	uxth	r3, r3
 81078c2:	3b01      	subs	r3, #1
 81078c4:	b29a      	uxth	r2, r3
 81078c6:	68fb      	ldr	r3, [r7, #12]
 81078c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 81078cc:	68fb      	ldr	r3, [r7, #12]
 81078ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 81078d2:	b29b      	uxth	r3, r3
 81078d4:	2b00      	cmp	r3, #0
 81078d6:	d1cc      	bne.n	8107872 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 81078d8:	683b      	ldr	r3, [r7, #0]
 81078da:	9300      	str	r3, [sp, #0]
 81078dc:	697b      	ldr	r3, [r7, #20]
 81078de:	2200      	movs	r2, #0
 81078e0:	2140      	movs	r1, #64	; 0x40
 81078e2:	68f8      	ldr	r0, [r7, #12]
 81078e4:	f000 ff50 	bl	8108788 <UART_WaitOnFlagUntilTimeout>
 81078e8:	4603      	mov	r3, r0
 81078ea:	2b00      	cmp	r3, #0
 81078ec:	d001      	beq.n	81078f2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 81078ee:	2303      	movs	r3, #3
 81078f0:	e006      	b.n	8107900 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 81078f2:	68fb      	ldr	r3, [r7, #12]
 81078f4:	2220      	movs	r2, #32
 81078f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 81078fa:	2300      	movs	r3, #0
 81078fc:	e000      	b.n	8107900 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 81078fe:	2302      	movs	r3, #2
  }
}
 8107900:	4618      	mov	r0, r3
 8107902:	3720      	adds	r7, #32
 8107904:	46bd      	mov	sp, r7
 8107906:	bd80      	pop	{r7, pc}

08107908 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8107908:	b580      	push	{r7, lr}
 810790a:	b084      	sub	sp, #16
 810790c:	af00      	add	r7, sp, #0
 810790e:	60f8      	str	r0, [r7, #12]
 8107910:	60b9      	str	r1, [r7, #8]
 8107912:	4613      	mov	r3, r2
 8107914:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8107916:	68fb      	ldr	r3, [r7, #12]
 8107918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810791c:	2b20      	cmp	r3, #32
 810791e:	d170      	bne.n	8107a02 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 8107920:	68bb      	ldr	r3, [r7, #8]
 8107922:	2b00      	cmp	r3, #0
 8107924:	d002      	beq.n	810792c <HAL_UART_Receive_DMA+0x24>
 8107926:	88fb      	ldrh	r3, [r7, #6]
 8107928:	2b00      	cmp	r3, #0
 810792a:	d101      	bne.n	8107930 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 810792c:	2301      	movs	r3, #1
 810792e:	e069      	b.n	8107a04 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 8107930:	68fb      	ldr	r3, [r7, #12]
 8107932:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8107936:	2b01      	cmp	r3, #1
 8107938:	d101      	bne.n	810793e <HAL_UART_Receive_DMA+0x36>
 810793a:	2302      	movs	r3, #2
 810793c:	e062      	b.n	8107a04 <HAL_UART_Receive_DMA+0xfc>
 810793e:	68fb      	ldr	r3, [r7, #12]
 8107940:	2201      	movs	r2, #1
 8107942:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 8107946:	68fb      	ldr	r3, [r7, #12]
 8107948:	68ba      	ldr	r2, [r7, #8]
 810794a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 810794c:	68fb      	ldr	r3, [r7, #12]
 810794e:	88fa      	ldrh	r2, [r7, #6]
 8107950:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107954:	68fb      	ldr	r3, [r7, #12]
 8107956:	2200      	movs	r2, #0
 8107958:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 810795c:	68fb      	ldr	r3, [r7, #12]
 810795e:	2222      	movs	r2, #34	; 0x22
 8107960:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8107964:	68fb      	ldr	r3, [r7, #12]
 8107966:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8107968:	2b00      	cmp	r3, #0
 810796a:	d02c      	beq.n	81079c6 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 810796c:	68fb      	ldr	r3, [r7, #12]
 810796e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8107970:	4a26      	ldr	r2, [pc, #152]	; (8107a0c <HAL_UART_Receive_DMA+0x104>)
 8107972:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8107974:	68fb      	ldr	r3, [r7, #12]
 8107976:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8107978:	4a25      	ldr	r2, [pc, #148]	; (8107a10 <HAL_UART_Receive_DMA+0x108>)
 810797a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 810797c:	68fb      	ldr	r3, [r7, #12]
 810797e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8107980:	4a24      	ldr	r2, [pc, #144]	; (8107a14 <HAL_UART_Receive_DMA+0x10c>)
 8107982:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8107984:	68fb      	ldr	r3, [r7, #12]
 8107986:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8107988:	2200      	movs	r2, #0
 810798a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 810798c:	68fb      	ldr	r3, [r7, #12]
 810798e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8107990:	68fb      	ldr	r3, [r7, #12]
 8107992:	681b      	ldr	r3, [r3, #0]
 8107994:	3324      	adds	r3, #36	; 0x24
 8107996:	4619      	mov	r1, r3
 8107998:	68fb      	ldr	r3, [r7, #12]
 810799a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810799c:	461a      	mov	r2, r3
 810799e:	88fb      	ldrh	r3, [r7, #6]
 81079a0:	f7fb f8ee 	bl	8102b80 <HAL_DMA_Start_IT>
 81079a4:	4603      	mov	r3, r0
 81079a6:	2b00      	cmp	r3, #0
 81079a8:	d00d      	beq.n	81079c6 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 81079aa:	68fb      	ldr	r3, [r7, #12]
 81079ac:	2210      	movs	r2, #16
 81079ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 81079b2:	68fb      	ldr	r3, [r7, #12]
 81079b4:	2200      	movs	r2, #0
 81079b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 81079ba:	68fb      	ldr	r3, [r7, #12]
 81079bc:	2220      	movs	r2, #32
 81079be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 81079c2:	2301      	movs	r3, #1
 81079c4:	e01e      	b.n	8107a04 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 81079c6:	68fb      	ldr	r3, [r7, #12]
 81079c8:	2200      	movs	r2, #0
 81079ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 81079ce:	68fb      	ldr	r3, [r7, #12]
 81079d0:	681b      	ldr	r3, [r3, #0]
 81079d2:	681a      	ldr	r2, [r3, #0]
 81079d4:	68fb      	ldr	r3, [r7, #12]
 81079d6:	681b      	ldr	r3, [r3, #0]
 81079d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81079dc:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81079de:	68fb      	ldr	r3, [r7, #12]
 81079e0:	681b      	ldr	r3, [r3, #0]
 81079e2:	689a      	ldr	r2, [r3, #8]
 81079e4:	68fb      	ldr	r3, [r7, #12]
 81079e6:	681b      	ldr	r3, [r3, #0]
 81079e8:	f042 0201 	orr.w	r2, r2, #1
 81079ec:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 81079ee:	68fb      	ldr	r3, [r7, #12]
 81079f0:	681b      	ldr	r3, [r3, #0]
 81079f2:	689a      	ldr	r2, [r3, #8]
 81079f4:	68fb      	ldr	r3, [r7, #12]
 81079f6:	681b      	ldr	r3, [r3, #0]
 81079f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 81079fc:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 81079fe:	2300      	movs	r3, #0
 8107a00:	e000      	b.n	8107a04 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 8107a02:	2302      	movs	r3, #2
  }
}
 8107a04:	4618      	mov	r0, r3
 8107a06:	3710      	adds	r7, #16
 8107a08:	46bd      	mov	sp, r7
 8107a0a:	bd80      	pop	{r7, pc}
 8107a0c:	0810890b 	.word	0x0810890b
 8107a10:	08108971 	.word	0x08108971
 8107a14:	0810898d 	.word	0x0810898d

08107a18 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8107a18:	b480      	push	{r7}
 8107a1a:	b083      	sub	sp, #12
 8107a1c:	af00      	add	r7, sp, #0
 8107a1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8107a20:	bf00      	nop
 8107a22:	370c      	adds	r7, #12
 8107a24:	46bd      	mov	sp, r7
 8107a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a2a:	4770      	bx	lr

08107a2c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8107a2c:	b480      	push	{r7}
 8107a2e:	b083      	sub	sp, #12
 8107a30:	af00      	add	r7, sp, #0
 8107a32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8107a34:	bf00      	nop
 8107a36:	370c      	adds	r7, #12
 8107a38:	46bd      	mov	sp, r7
 8107a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a3e:	4770      	bx	lr

08107a40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8107a40:	b480      	push	{r7}
 8107a42:	b083      	sub	sp, #12
 8107a44:	af00      	add	r7, sp, #0
 8107a46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8107a48:	bf00      	nop
 8107a4a:	370c      	adds	r7, #12
 8107a4c:	46bd      	mov	sp, r7
 8107a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a52:	4770      	bx	lr

08107a54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8107a54:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8107a58:	b08e      	sub	sp, #56	; 0x38
 8107a5a:	af00      	add	r7, sp, #0
 8107a5c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8107a5e:	2300      	movs	r3, #0
 8107a60:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8107a64:	687b      	ldr	r3, [r7, #4]
 8107a66:	689a      	ldr	r2, [r3, #8]
 8107a68:	687b      	ldr	r3, [r7, #4]
 8107a6a:	691b      	ldr	r3, [r3, #16]
 8107a6c:	431a      	orrs	r2, r3
 8107a6e:	687b      	ldr	r3, [r7, #4]
 8107a70:	695b      	ldr	r3, [r3, #20]
 8107a72:	431a      	orrs	r2, r3
 8107a74:	687b      	ldr	r3, [r7, #4]
 8107a76:	69db      	ldr	r3, [r3, #28]
 8107a78:	4313      	orrs	r3, r2
 8107a7a:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8107a7c:	687b      	ldr	r3, [r7, #4]
 8107a7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107a80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8107a82:	4313      	orrs	r3, r2
 8107a84:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8107a86:	687b      	ldr	r3, [r7, #4]
 8107a88:	681b      	ldr	r3, [r3, #0]
 8107a8a:	681a      	ldr	r2, [r3, #0]
 8107a8c:	4bc2      	ldr	r3, [pc, #776]	; (8107d98 <UART_SetConfig+0x344>)
 8107a8e:	4013      	ands	r3, r2
 8107a90:	687a      	ldr	r2, [r7, #4]
 8107a92:	6812      	ldr	r2, [r2, #0]
 8107a94:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8107a96:	430b      	orrs	r3, r1
 8107a98:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8107a9a:	687b      	ldr	r3, [r7, #4]
 8107a9c:	681b      	ldr	r3, [r3, #0]
 8107a9e:	685b      	ldr	r3, [r3, #4]
 8107aa0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8107aa4:	687b      	ldr	r3, [r7, #4]
 8107aa6:	68da      	ldr	r2, [r3, #12]
 8107aa8:	687b      	ldr	r3, [r7, #4]
 8107aaa:	681b      	ldr	r3, [r3, #0]
 8107aac:	430a      	orrs	r2, r1
 8107aae:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8107ab0:	687b      	ldr	r3, [r7, #4]
 8107ab2:	699b      	ldr	r3, [r3, #24]
 8107ab4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8107ab6:	687b      	ldr	r3, [r7, #4]
 8107ab8:	681b      	ldr	r3, [r3, #0]
 8107aba:	4ab8      	ldr	r2, [pc, #736]	; (8107d9c <UART_SetConfig+0x348>)
 8107abc:	4293      	cmp	r3, r2
 8107abe:	d004      	beq.n	8107aca <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8107ac0:	687b      	ldr	r3, [r7, #4]
 8107ac2:	6a1b      	ldr	r3, [r3, #32]
 8107ac4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8107ac6:	4313      	orrs	r3, r2
 8107ac8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8107aca:	687b      	ldr	r3, [r7, #4]
 8107acc:	681b      	ldr	r3, [r3, #0]
 8107ace:	689b      	ldr	r3, [r3, #8]
 8107ad0:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8107ad4:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8107ad8:	687a      	ldr	r2, [r7, #4]
 8107ada:	6812      	ldr	r2, [r2, #0]
 8107adc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8107ade:	430b      	orrs	r3, r1
 8107ae0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8107ae2:	687b      	ldr	r3, [r7, #4]
 8107ae4:	681b      	ldr	r3, [r3, #0]
 8107ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107ae8:	f023 010f 	bic.w	r1, r3, #15
 8107aec:	687b      	ldr	r3, [r7, #4]
 8107aee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8107af0:	687b      	ldr	r3, [r7, #4]
 8107af2:	681b      	ldr	r3, [r3, #0]
 8107af4:	430a      	orrs	r2, r1
 8107af6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8107af8:	687b      	ldr	r3, [r7, #4]
 8107afa:	681b      	ldr	r3, [r3, #0]
 8107afc:	4aa8      	ldr	r2, [pc, #672]	; (8107da0 <UART_SetConfig+0x34c>)
 8107afe:	4293      	cmp	r3, r2
 8107b00:	d177      	bne.n	8107bf2 <UART_SetConfig+0x19e>
 8107b02:	4ba8      	ldr	r3, [pc, #672]	; (8107da4 <UART_SetConfig+0x350>)
 8107b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107b06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8107b0a:	2b28      	cmp	r3, #40	; 0x28
 8107b0c:	d86c      	bhi.n	8107be8 <UART_SetConfig+0x194>
 8107b0e:	a201      	add	r2, pc, #4	; (adr r2, 8107b14 <UART_SetConfig+0xc0>)
 8107b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107b14:	08107bb9 	.word	0x08107bb9
 8107b18:	08107be9 	.word	0x08107be9
 8107b1c:	08107be9 	.word	0x08107be9
 8107b20:	08107be9 	.word	0x08107be9
 8107b24:	08107be9 	.word	0x08107be9
 8107b28:	08107be9 	.word	0x08107be9
 8107b2c:	08107be9 	.word	0x08107be9
 8107b30:	08107be9 	.word	0x08107be9
 8107b34:	08107bc1 	.word	0x08107bc1
 8107b38:	08107be9 	.word	0x08107be9
 8107b3c:	08107be9 	.word	0x08107be9
 8107b40:	08107be9 	.word	0x08107be9
 8107b44:	08107be9 	.word	0x08107be9
 8107b48:	08107be9 	.word	0x08107be9
 8107b4c:	08107be9 	.word	0x08107be9
 8107b50:	08107be9 	.word	0x08107be9
 8107b54:	08107bc9 	.word	0x08107bc9
 8107b58:	08107be9 	.word	0x08107be9
 8107b5c:	08107be9 	.word	0x08107be9
 8107b60:	08107be9 	.word	0x08107be9
 8107b64:	08107be9 	.word	0x08107be9
 8107b68:	08107be9 	.word	0x08107be9
 8107b6c:	08107be9 	.word	0x08107be9
 8107b70:	08107be9 	.word	0x08107be9
 8107b74:	08107bd1 	.word	0x08107bd1
 8107b78:	08107be9 	.word	0x08107be9
 8107b7c:	08107be9 	.word	0x08107be9
 8107b80:	08107be9 	.word	0x08107be9
 8107b84:	08107be9 	.word	0x08107be9
 8107b88:	08107be9 	.word	0x08107be9
 8107b8c:	08107be9 	.word	0x08107be9
 8107b90:	08107be9 	.word	0x08107be9
 8107b94:	08107bd9 	.word	0x08107bd9
 8107b98:	08107be9 	.word	0x08107be9
 8107b9c:	08107be9 	.word	0x08107be9
 8107ba0:	08107be9 	.word	0x08107be9
 8107ba4:	08107be9 	.word	0x08107be9
 8107ba8:	08107be9 	.word	0x08107be9
 8107bac:	08107be9 	.word	0x08107be9
 8107bb0:	08107be9 	.word	0x08107be9
 8107bb4:	08107be1 	.word	0x08107be1
 8107bb8:	2301      	movs	r3, #1
 8107bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107bbe:	e231      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107bc0:	2304      	movs	r3, #4
 8107bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107bc6:	e22d      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107bc8:	2308      	movs	r3, #8
 8107bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107bce:	e229      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107bd0:	2310      	movs	r3, #16
 8107bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107bd6:	e225      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107bd8:	2320      	movs	r3, #32
 8107bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107bde:	e221      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107be0:	2340      	movs	r3, #64	; 0x40
 8107be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107be6:	e21d      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107be8:	2380      	movs	r3, #128	; 0x80
 8107bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107bee:	bf00      	nop
 8107bf0:	e218      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107bf2:	687b      	ldr	r3, [r7, #4]
 8107bf4:	681b      	ldr	r3, [r3, #0]
 8107bf6:	4a6c      	ldr	r2, [pc, #432]	; (8107da8 <UART_SetConfig+0x354>)
 8107bf8:	4293      	cmp	r3, r2
 8107bfa:	d132      	bne.n	8107c62 <UART_SetConfig+0x20e>
 8107bfc:	4b69      	ldr	r3, [pc, #420]	; (8107da4 <UART_SetConfig+0x350>)
 8107bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107c00:	f003 0307 	and.w	r3, r3, #7
 8107c04:	2b05      	cmp	r3, #5
 8107c06:	d827      	bhi.n	8107c58 <UART_SetConfig+0x204>
 8107c08:	a201      	add	r2, pc, #4	; (adr r2, 8107c10 <UART_SetConfig+0x1bc>)
 8107c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107c0e:	bf00      	nop
 8107c10:	08107c29 	.word	0x08107c29
 8107c14:	08107c31 	.word	0x08107c31
 8107c18:	08107c39 	.word	0x08107c39
 8107c1c:	08107c41 	.word	0x08107c41
 8107c20:	08107c49 	.word	0x08107c49
 8107c24:	08107c51 	.word	0x08107c51
 8107c28:	2300      	movs	r3, #0
 8107c2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107c2e:	e1f9      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107c30:	2304      	movs	r3, #4
 8107c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107c36:	e1f5      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107c38:	2308      	movs	r3, #8
 8107c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107c3e:	e1f1      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107c40:	2310      	movs	r3, #16
 8107c42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107c46:	e1ed      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107c48:	2320      	movs	r3, #32
 8107c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107c4e:	e1e9      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107c50:	2340      	movs	r3, #64	; 0x40
 8107c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107c56:	e1e5      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107c58:	2380      	movs	r3, #128	; 0x80
 8107c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107c5e:	bf00      	nop
 8107c60:	e1e0      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107c62:	687b      	ldr	r3, [r7, #4]
 8107c64:	681b      	ldr	r3, [r3, #0]
 8107c66:	4a51      	ldr	r2, [pc, #324]	; (8107dac <UART_SetConfig+0x358>)
 8107c68:	4293      	cmp	r3, r2
 8107c6a:	d132      	bne.n	8107cd2 <UART_SetConfig+0x27e>
 8107c6c:	4b4d      	ldr	r3, [pc, #308]	; (8107da4 <UART_SetConfig+0x350>)
 8107c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107c70:	f003 0307 	and.w	r3, r3, #7
 8107c74:	2b05      	cmp	r3, #5
 8107c76:	d827      	bhi.n	8107cc8 <UART_SetConfig+0x274>
 8107c78:	a201      	add	r2, pc, #4	; (adr r2, 8107c80 <UART_SetConfig+0x22c>)
 8107c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107c7e:	bf00      	nop
 8107c80:	08107c99 	.word	0x08107c99
 8107c84:	08107ca1 	.word	0x08107ca1
 8107c88:	08107ca9 	.word	0x08107ca9
 8107c8c:	08107cb1 	.word	0x08107cb1
 8107c90:	08107cb9 	.word	0x08107cb9
 8107c94:	08107cc1 	.word	0x08107cc1
 8107c98:	2300      	movs	r3, #0
 8107c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107c9e:	e1c1      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107ca0:	2304      	movs	r3, #4
 8107ca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107ca6:	e1bd      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107ca8:	2308      	movs	r3, #8
 8107caa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107cae:	e1b9      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107cb0:	2310      	movs	r3, #16
 8107cb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107cb6:	e1b5      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107cb8:	2320      	movs	r3, #32
 8107cba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107cbe:	e1b1      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107cc0:	2340      	movs	r3, #64	; 0x40
 8107cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107cc6:	e1ad      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107cc8:	2380      	movs	r3, #128	; 0x80
 8107cca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107cce:	bf00      	nop
 8107cd0:	e1a8      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107cd2:	687b      	ldr	r3, [r7, #4]
 8107cd4:	681b      	ldr	r3, [r3, #0]
 8107cd6:	4a36      	ldr	r2, [pc, #216]	; (8107db0 <UART_SetConfig+0x35c>)
 8107cd8:	4293      	cmp	r3, r2
 8107cda:	d132      	bne.n	8107d42 <UART_SetConfig+0x2ee>
 8107cdc:	4b31      	ldr	r3, [pc, #196]	; (8107da4 <UART_SetConfig+0x350>)
 8107cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107ce0:	f003 0307 	and.w	r3, r3, #7
 8107ce4:	2b05      	cmp	r3, #5
 8107ce6:	d827      	bhi.n	8107d38 <UART_SetConfig+0x2e4>
 8107ce8:	a201      	add	r2, pc, #4	; (adr r2, 8107cf0 <UART_SetConfig+0x29c>)
 8107cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107cee:	bf00      	nop
 8107cf0:	08107d09 	.word	0x08107d09
 8107cf4:	08107d11 	.word	0x08107d11
 8107cf8:	08107d19 	.word	0x08107d19
 8107cfc:	08107d21 	.word	0x08107d21
 8107d00:	08107d29 	.word	0x08107d29
 8107d04:	08107d31 	.word	0x08107d31
 8107d08:	2300      	movs	r3, #0
 8107d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107d0e:	e189      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107d10:	2304      	movs	r3, #4
 8107d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107d16:	e185      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107d18:	2308      	movs	r3, #8
 8107d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107d1e:	e181      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107d20:	2310      	movs	r3, #16
 8107d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107d26:	e17d      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107d28:	2320      	movs	r3, #32
 8107d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107d2e:	e179      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107d30:	2340      	movs	r3, #64	; 0x40
 8107d32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107d36:	e175      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107d38:	2380      	movs	r3, #128	; 0x80
 8107d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107d3e:	bf00      	nop
 8107d40:	e170      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107d42:	687b      	ldr	r3, [r7, #4]
 8107d44:	681b      	ldr	r3, [r3, #0]
 8107d46:	4a1b      	ldr	r2, [pc, #108]	; (8107db4 <UART_SetConfig+0x360>)
 8107d48:	4293      	cmp	r3, r2
 8107d4a:	d142      	bne.n	8107dd2 <UART_SetConfig+0x37e>
 8107d4c:	4b15      	ldr	r3, [pc, #84]	; (8107da4 <UART_SetConfig+0x350>)
 8107d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107d50:	f003 0307 	and.w	r3, r3, #7
 8107d54:	2b05      	cmp	r3, #5
 8107d56:	d837      	bhi.n	8107dc8 <UART_SetConfig+0x374>
 8107d58:	a201      	add	r2, pc, #4	; (adr r2, 8107d60 <UART_SetConfig+0x30c>)
 8107d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107d5e:	bf00      	nop
 8107d60:	08107d79 	.word	0x08107d79
 8107d64:	08107d81 	.word	0x08107d81
 8107d68:	08107d89 	.word	0x08107d89
 8107d6c:	08107d91 	.word	0x08107d91
 8107d70:	08107db9 	.word	0x08107db9
 8107d74:	08107dc1 	.word	0x08107dc1
 8107d78:	2300      	movs	r3, #0
 8107d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107d7e:	e151      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107d80:	2304      	movs	r3, #4
 8107d82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107d86:	e14d      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107d88:	2308      	movs	r3, #8
 8107d8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107d8e:	e149      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107d90:	2310      	movs	r3, #16
 8107d92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107d96:	e145      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107d98:	cfff69f3 	.word	0xcfff69f3
 8107d9c:	58000c00 	.word	0x58000c00
 8107da0:	40011000 	.word	0x40011000
 8107da4:	58024400 	.word	0x58024400
 8107da8:	40004400 	.word	0x40004400
 8107dac:	40004800 	.word	0x40004800
 8107db0:	40004c00 	.word	0x40004c00
 8107db4:	40005000 	.word	0x40005000
 8107db8:	2320      	movs	r3, #32
 8107dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107dbe:	e131      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107dc0:	2340      	movs	r3, #64	; 0x40
 8107dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107dc6:	e12d      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107dc8:	2380      	movs	r3, #128	; 0x80
 8107dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107dce:	bf00      	nop
 8107dd0:	e128      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107dd2:	687b      	ldr	r3, [r7, #4]
 8107dd4:	681b      	ldr	r3, [r3, #0]
 8107dd6:	4ab6      	ldr	r2, [pc, #728]	; (81080b0 <UART_SetConfig+0x65c>)
 8107dd8:	4293      	cmp	r3, r2
 8107dda:	d178      	bne.n	8107ece <UART_SetConfig+0x47a>
 8107ddc:	4bb5      	ldr	r3, [pc, #724]	; (81080b4 <UART_SetConfig+0x660>)
 8107dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107de0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8107de4:	2b28      	cmp	r3, #40	; 0x28
 8107de6:	d86d      	bhi.n	8107ec4 <UART_SetConfig+0x470>
 8107de8:	a201      	add	r2, pc, #4	; (adr r2, 8107df0 <UART_SetConfig+0x39c>)
 8107dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107dee:	bf00      	nop
 8107df0:	08107e95 	.word	0x08107e95
 8107df4:	08107ec5 	.word	0x08107ec5
 8107df8:	08107ec5 	.word	0x08107ec5
 8107dfc:	08107ec5 	.word	0x08107ec5
 8107e00:	08107ec5 	.word	0x08107ec5
 8107e04:	08107ec5 	.word	0x08107ec5
 8107e08:	08107ec5 	.word	0x08107ec5
 8107e0c:	08107ec5 	.word	0x08107ec5
 8107e10:	08107e9d 	.word	0x08107e9d
 8107e14:	08107ec5 	.word	0x08107ec5
 8107e18:	08107ec5 	.word	0x08107ec5
 8107e1c:	08107ec5 	.word	0x08107ec5
 8107e20:	08107ec5 	.word	0x08107ec5
 8107e24:	08107ec5 	.word	0x08107ec5
 8107e28:	08107ec5 	.word	0x08107ec5
 8107e2c:	08107ec5 	.word	0x08107ec5
 8107e30:	08107ea5 	.word	0x08107ea5
 8107e34:	08107ec5 	.word	0x08107ec5
 8107e38:	08107ec5 	.word	0x08107ec5
 8107e3c:	08107ec5 	.word	0x08107ec5
 8107e40:	08107ec5 	.word	0x08107ec5
 8107e44:	08107ec5 	.word	0x08107ec5
 8107e48:	08107ec5 	.word	0x08107ec5
 8107e4c:	08107ec5 	.word	0x08107ec5
 8107e50:	08107ead 	.word	0x08107ead
 8107e54:	08107ec5 	.word	0x08107ec5
 8107e58:	08107ec5 	.word	0x08107ec5
 8107e5c:	08107ec5 	.word	0x08107ec5
 8107e60:	08107ec5 	.word	0x08107ec5
 8107e64:	08107ec5 	.word	0x08107ec5
 8107e68:	08107ec5 	.word	0x08107ec5
 8107e6c:	08107ec5 	.word	0x08107ec5
 8107e70:	08107eb5 	.word	0x08107eb5
 8107e74:	08107ec5 	.word	0x08107ec5
 8107e78:	08107ec5 	.word	0x08107ec5
 8107e7c:	08107ec5 	.word	0x08107ec5
 8107e80:	08107ec5 	.word	0x08107ec5
 8107e84:	08107ec5 	.word	0x08107ec5
 8107e88:	08107ec5 	.word	0x08107ec5
 8107e8c:	08107ec5 	.word	0x08107ec5
 8107e90:	08107ebd 	.word	0x08107ebd
 8107e94:	2301      	movs	r3, #1
 8107e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107e9a:	e0c3      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107e9c:	2304      	movs	r3, #4
 8107e9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107ea2:	e0bf      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107ea4:	2308      	movs	r3, #8
 8107ea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107eaa:	e0bb      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107eac:	2310      	movs	r3, #16
 8107eae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107eb2:	e0b7      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107eb4:	2320      	movs	r3, #32
 8107eb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107eba:	e0b3      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107ebc:	2340      	movs	r3, #64	; 0x40
 8107ebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107ec2:	e0af      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107ec4:	2380      	movs	r3, #128	; 0x80
 8107ec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107eca:	bf00      	nop
 8107ecc:	e0aa      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107ece:	687b      	ldr	r3, [r7, #4]
 8107ed0:	681b      	ldr	r3, [r3, #0]
 8107ed2:	4a79      	ldr	r2, [pc, #484]	; (81080b8 <UART_SetConfig+0x664>)
 8107ed4:	4293      	cmp	r3, r2
 8107ed6:	d132      	bne.n	8107f3e <UART_SetConfig+0x4ea>
 8107ed8:	4b76      	ldr	r3, [pc, #472]	; (81080b4 <UART_SetConfig+0x660>)
 8107eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107edc:	f003 0307 	and.w	r3, r3, #7
 8107ee0:	2b05      	cmp	r3, #5
 8107ee2:	d827      	bhi.n	8107f34 <UART_SetConfig+0x4e0>
 8107ee4:	a201      	add	r2, pc, #4	; (adr r2, 8107eec <UART_SetConfig+0x498>)
 8107ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107eea:	bf00      	nop
 8107eec:	08107f05 	.word	0x08107f05
 8107ef0:	08107f0d 	.word	0x08107f0d
 8107ef4:	08107f15 	.word	0x08107f15
 8107ef8:	08107f1d 	.word	0x08107f1d
 8107efc:	08107f25 	.word	0x08107f25
 8107f00:	08107f2d 	.word	0x08107f2d
 8107f04:	2300      	movs	r3, #0
 8107f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107f0a:	e08b      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107f0c:	2304      	movs	r3, #4
 8107f0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107f12:	e087      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107f14:	2308      	movs	r3, #8
 8107f16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107f1a:	e083      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107f1c:	2310      	movs	r3, #16
 8107f1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107f22:	e07f      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107f24:	2320      	movs	r3, #32
 8107f26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107f2a:	e07b      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107f2c:	2340      	movs	r3, #64	; 0x40
 8107f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107f32:	e077      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107f34:	2380      	movs	r3, #128	; 0x80
 8107f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107f3a:	bf00      	nop
 8107f3c:	e072      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107f3e:	687b      	ldr	r3, [r7, #4]
 8107f40:	681b      	ldr	r3, [r3, #0]
 8107f42:	4a5e      	ldr	r2, [pc, #376]	; (81080bc <UART_SetConfig+0x668>)
 8107f44:	4293      	cmp	r3, r2
 8107f46:	d132      	bne.n	8107fae <UART_SetConfig+0x55a>
 8107f48:	4b5a      	ldr	r3, [pc, #360]	; (81080b4 <UART_SetConfig+0x660>)
 8107f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107f4c:	f003 0307 	and.w	r3, r3, #7
 8107f50:	2b05      	cmp	r3, #5
 8107f52:	d827      	bhi.n	8107fa4 <UART_SetConfig+0x550>
 8107f54:	a201      	add	r2, pc, #4	; (adr r2, 8107f5c <UART_SetConfig+0x508>)
 8107f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107f5a:	bf00      	nop
 8107f5c:	08107f75 	.word	0x08107f75
 8107f60:	08107f7d 	.word	0x08107f7d
 8107f64:	08107f85 	.word	0x08107f85
 8107f68:	08107f8d 	.word	0x08107f8d
 8107f6c:	08107f95 	.word	0x08107f95
 8107f70:	08107f9d 	.word	0x08107f9d
 8107f74:	2300      	movs	r3, #0
 8107f76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107f7a:	e053      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107f7c:	2304      	movs	r3, #4
 8107f7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107f82:	e04f      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107f84:	2308      	movs	r3, #8
 8107f86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107f8a:	e04b      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107f8c:	2310      	movs	r3, #16
 8107f8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107f92:	e047      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107f94:	2320      	movs	r3, #32
 8107f96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107f9a:	e043      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107f9c:	2340      	movs	r3, #64	; 0x40
 8107f9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107fa2:	e03f      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107fa4:	2380      	movs	r3, #128	; 0x80
 8107fa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107faa:	bf00      	nop
 8107fac:	e03a      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107fae:	687b      	ldr	r3, [r7, #4]
 8107fb0:	681b      	ldr	r3, [r3, #0]
 8107fb2:	4a43      	ldr	r2, [pc, #268]	; (81080c0 <UART_SetConfig+0x66c>)
 8107fb4:	4293      	cmp	r3, r2
 8107fb6:	d132      	bne.n	810801e <UART_SetConfig+0x5ca>
 8107fb8:	4b3e      	ldr	r3, [pc, #248]	; (81080b4 <UART_SetConfig+0x660>)
 8107fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107fbc:	f003 0307 	and.w	r3, r3, #7
 8107fc0:	2b05      	cmp	r3, #5
 8107fc2:	d827      	bhi.n	8108014 <UART_SetConfig+0x5c0>
 8107fc4:	a201      	add	r2, pc, #4	; (adr r2, 8107fcc <UART_SetConfig+0x578>)
 8107fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107fca:	bf00      	nop
 8107fcc:	08107fe5 	.word	0x08107fe5
 8107fd0:	08107fed 	.word	0x08107fed
 8107fd4:	08107ff5 	.word	0x08107ff5
 8107fd8:	08107ffd 	.word	0x08107ffd
 8107fdc:	08108005 	.word	0x08108005
 8107fe0:	0810800d 	.word	0x0810800d
 8107fe4:	2302      	movs	r3, #2
 8107fe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107fea:	e01b      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107fec:	2304      	movs	r3, #4
 8107fee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107ff2:	e017      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107ff4:	2308      	movs	r3, #8
 8107ff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107ffa:	e013      	b.n	8108024 <UART_SetConfig+0x5d0>
 8107ffc:	2310      	movs	r3, #16
 8107ffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108002:	e00f      	b.n	8108024 <UART_SetConfig+0x5d0>
 8108004:	2320      	movs	r3, #32
 8108006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810800a:	e00b      	b.n	8108024 <UART_SetConfig+0x5d0>
 810800c:	2340      	movs	r3, #64	; 0x40
 810800e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108012:	e007      	b.n	8108024 <UART_SetConfig+0x5d0>
 8108014:	2380      	movs	r3, #128	; 0x80
 8108016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810801a:	bf00      	nop
 810801c:	e002      	b.n	8108024 <UART_SetConfig+0x5d0>
 810801e:	2380      	movs	r3, #128	; 0x80
 8108020:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8108024:	687b      	ldr	r3, [r7, #4]
 8108026:	681b      	ldr	r3, [r3, #0]
 8108028:	4a25      	ldr	r2, [pc, #148]	; (81080c0 <UART_SetConfig+0x66c>)
 810802a:	4293      	cmp	r3, r2
 810802c:	f040 80b8 	bne.w	81081a0 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8108030:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8108034:	2b08      	cmp	r3, #8
 8108036:	d019      	beq.n	810806c <UART_SetConfig+0x618>
 8108038:	2b08      	cmp	r3, #8
 810803a:	dc04      	bgt.n	8108046 <UART_SetConfig+0x5f2>
 810803c:	2b02      	cmp	r3, #2
 810803e:	d009      	beq.n	8108054 <UART_SetConfig+0x600>
 8108040:	2b04      	cmp	r3, #4
 8108042:	d00b      	beq.n	810805c <UART_SetConfig+0x608>
 8108044:	e042      	b.n	81080cc <UART_SetConfig+0x678>
 8108046:	2b20      	cmp	r3, #32
 8108048:	d02b      	beq.n	81080a2 <UART_SetConfig+0x64e>
 810804a:	2b40      	cmp	r3, #64	; 0x40
 810804c:	d02c      	beq.n	81080a8 <UART_SetConfig+0x654>
 810804e:	2b10      	cmp	r3, #16
 8108050:	d014      	beq.n	810807c <UART_SetConfig+0x628>
 8108052:	e03b      	b.n	81080cc <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8108054:	f7fe fa56 	bl	8106504 <HAL_RCCEx_GetD3PCLK1Freq>
 8108058:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810805a:	e03d      	b.n	81080d8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810805c:	f107 0314 	add.w	r3, r7, #20
 8108060:	4618      	mov	r0, r3
 8108062:	f7fe fa65 	bl	8106530 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108066:	69bb      	ldr	r3, [r7, #24]
 8108068:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810806a:	e035      	b.n	81080d8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810806c:	f107 0308 	add.w	r3, r7, #8
 8108070:	4618      	mov	r0, r3
 8108072:	f7fe fba9 	bl	81067c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108076:	68fb      	ldr	r3, [r7, #12]
 8108078:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810807a:	e02d      	b.n	81080d8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810807c:	4b0d      	ldr	r3, [pc, #52]	; (81080b4 <UART_SetConfig+0x660>)
 810807e:	681b      	ldr	r3, [r3, #0]
 8108080:	f003 0320 	and.w	r3, r3, #32
 8108084:	2b00      	cmp	r3, #0
 8108086:	d009      	beq.n	810809c <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8108088:	4b0a      	ldr	r3, [pc, #40]	; (81080b4 <UART_SetConfig+0x660>)
 810808a:	681b      	ldr	r3, [r3, #0]
 810808c:	08db      	lsrs	r3, r3, #3
 810808e:	f003 0303 	and.w	r3, r3, #3
 8108092:	4a0c      	ldr	r2, [pc, #48]	; (81080c4 <UART_SetConfig+0x670>)
 8108094:	fa22 f303 	lsr.w	r3, r2, r3
 8108098:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810809a:	e01d      	b.n	81080d8 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 810809c:	4b09      	ldr	r3, [pc, #36]	; (81080c4 <UART_SetConfig+0x670>)
 810809e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81080a0:	e01a      	b.n	81080d8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81080a2:	4b09      	ldr	r3, [pc, #36]	; (81080c8 <UART_SetConfig+0x674>)
 81080a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81080a6:	e017      	b.n	81080d8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81080a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81080ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81080ae:	e013      	b.n	81080d8 <UART_SetConfig+0x684>
 81080b0:	40011400 	.word	0x40011400
 81080b4:	58024400 	.word	0x58024400
 81080b8:	40007800 	.word	0x40007800
 81080bc:	40007c00 	.word	0x40007c00
 81080c0:	58000c00 	.word	0x58000c00
 81080c4:	03d09000 	.word	0x03d09000
 81080c8:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 81080cc:	2300      	movs	r3, #0
 81080ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 81080d0:	2301      	movs	r3, #1
 81080d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 81080d6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 81080d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81080da:	2b00      	cmp	r3, #0
 81080dc:	f000 824d 	beq.w	810857a <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 81080e0:	687b      	ldr	r3, [r7, #4]
 81080e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81080e4:	4aad      	ldr	r2, [pc, #692]	; (810839c <UART_SetConfig+0x948>)
 81080e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81080ea:	461a      	mov	r2, r3
 81080ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81080ee:	fbb3 f3f2 	udiv	r3, r3, r2
 81080f2:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81080f4:	687b      	ldr	r3, [r7, #4]
 81080f6:	685a      	ldr	r2, [r3, #4]
 81080f8:	4613      	mov	r3, r2
 81080fa:	005b      	lsls	r3, r3, #1
 81080fc:	4413      	add	r3, r2
 81080fe:	6a3a      	ldr	r2, [r7, #32]
 8108100:	429a      	cmp	r2, r3
 8108102:	d305      	bcc.n	8108110 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8108104:	687b      	ldr	r3, [r7, #4]
 8108106:	685b      	ldr	r3, [r3, #4]
 8108108:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810810a:	6a3a      	ldr	r2, [r7, #32]
 810810c:	429a      	cmp	r2, r3
 810810e:	d903      	bls.n	8108118 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8108110:	2301      	movs	r3, #1
 8108112:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8108116:	e230      	b.n	810857a <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810811a:	4618      	mov	r0, r3
 810811c:	f04f 0100 	mov.w	r1, #0
 8108120:	687b      	ldr	r3, [r7, #4]
 8108122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108124:	4a9d      	ldr	r2, [pc, #628]	; (810839c <UART_SetConfig+0x948>)
 8108126:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810812a:	b29b      	uxth	r3, r3
 810812c:	f04f 0400 	mov.w	r4, #0
 8108130:	461a      	mov	r2, r3
 8108132:	4623      	mov	r3, r4
 8108134:	f7f8 fe70 	bl	8100e18 <__aeabi_uldivmod>
 8108138:	4603      	mov	r3, r0
 810813a:	460c      	mov	r4, r1
 810813c:	4619      	mov	r1, r3
 810813e:	4622      	mov	r2, r4
 8108140:	f04f 0300 	mov.w	r3, #0
 8108144:	f04f 0400 	mov.w	r4, #0
 8108148:	0214      	lsls	r4, r2, #8
 810814a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 810814e:	020b      	lsls	r3, r1, #8
 8108150:	687a      	ldr	r2, [r7, #4]
 8108152:	6852      	ldr	r2, [r2, #4]
 8108154:	0852      	lsrs	r2, r2, #1
 8108156:	4611      	mov	r1, r2
 8108158:	f04f 0200 	mov.w	r2, #0
 810815c:	eb13 0b01 	adds.w	fp, r3, r1
 8108160:	eb44 0c02 	adc.w	ip, r4, r2
 8108164:	4658      	mov	r0, fp
 8108166:	4661      	mov	r1, ip
 8108168:	687b      	ldr	r3, [r7, #4]
 810816a:	685b      	ldr	r3, [r3, #4]
 810816c:	f04f 0400 	mov.w	r4, #0
 8108170:	461a      	mov	r2, r3
 8108172:	4623      	mov	r3, r4
 8108174:	f7f8 fe50 	bl	8100e18 <__aeabi_uldivmod>
 8108178:	4603      	mov	r3, r0
 810817a:	460c      	mov	r4, r1
 810817c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810817e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108180:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8108184:	d308      	bcc.n	8108198 <UART_SetConfig+0x744>
 8108186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108188:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810818c:	d204      	bcs.n	8108198 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 810818e:	687b      	ldr	r3, [r7, #4]
 8108190:	681b      	ldr	r3, [r3, #0]
 8108192:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8108194:	60da      	str	r2, [r3, #12]
 8108196:	e1f0      	b.n	810857a <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8108198:	2301      	movs	r3, #1
 810819a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810819e:	e1ec      	b.n	810857a <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 81081a0:	687b      	ldr	r3, [r7, #4]
 81081a2:	69db      	ldr	r3, [r3, #28]
 81081a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81081a8:	f040 8100 	bne.w	81083ac <UART_SetConfig+0x958>
  {
    switch (clocksource)
 81081ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 81081b0:	2b40      	cmp	r3, #64	; 0x40
 81081b2:	f200 80b7 	bhi.w	8108324 <UART_SetConfig+0x8d0>
 81081b6:	a201      	add	r2, pc, #4	; (adr r2, 81081bc <UART_SetConfig+0x768>)
 81081b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81081bc:	081082c1 	.word	0x081082c1
 81081c0:	081082c9 	.word	0x081082c9
 81081c4:	08108325 	.word	0x08108325
 81081c8:	08108325 	.word	0x08108325
 81081cc:	081082d1 	.word	0x081082d1
 81081d0:	08108325 	.word	0x08108325
 81081d4:	08108325 	.word	0x08108325
 81081d8:	08108325 	.word	0x08108325
 81081dc:	081082e1 	.word	0x081082e1
 81081e0:	08108325 	.word	0x08108325
 81081e4:	08108325 	.word	0x08108325
 81081e8:	08108325 	.word	0x08108325
 81081ec:	08108325 	.word	0x08108325
 81081f0:	08108325 	.word	0x08108325
 81081f4:	08108325 	.word	0x08108325
 81081f8:	08108325 	.word	0x08108325
 81081fc:	081082f1 	.word	0x081082f1
 8108200:	08108325 	.word	0x08108325
 8108204:	08108325 	.word	0x08108325
 8108208:	08108325 	.word	0x08108325
 810820c:	08108325 	.word	0x08108325
 8108210:	08108325 	.word	0x08108325
 8108214:	08108325 	.word	0x08108325
 8108218:	08108325 	.word	0x08108325
 810821c:	08108325 	.word	0x08108325
 8108220:	08108325 	.word	0x08108325
 8108224:	08108325 	.word	0x08108325
 8108228:	08108325 	.word	0x08108325
 810822c:	08108325 	.word	0x08108325
 8108230:	08108325 	.word	0x08108325
 8108234:	08108325 	.word	0x08108325
 8108238:	08108325 	.word	0x08108325
 810823c:	08108317 	.word	0x08108317
 8108240:	08108325 	.word	0x08108325
 8108244:	08108325 	.word	0x08108325
 8108248:	08108325 	.word	0x08108325
 810824c:	08108325 	.word	0x08108325
 8108250:	08108325 	.word	0x08108325
 8108254:	08108325 	.word	0x08108325
 8108258:	08108325 	.word	0x08108325
 810825c:	08108325 	.word	0x08108325
 8108260:	08108325 	.word	0x08108325
 8108264:	08108325 	.word	0x08108325
 8108268:	08108325 	.word	0x08108325
 810826c:	08108325 	.word	0x08108325
 8108270:	08108325 	.word	0x08108325
 8108274:	08108325 	.word	0x08108325
 8108278:	08108325 	.word	0x08108325
 810827c:	08108325 	.word	0x08108325
 8108280:	08108325 	.word	0x08108325
 8108284:	08108325 	.word	0x08108325
 8108288:	08108325 	.word	0x08108325
 810828c:	08108325 	.word	0x08108325
 8108290:	08108325 	.word	0x08108325
 8108294:	08108325 	.word	0x08108325
 8108298:	08108325 	.word	0x08108325
 810829c:	08108325 	.word	0x08108325
 81082a0:	08108325 	.word	0x08108325
 81082a4:	08108325 	.word	0x08108325
 81082a8:	08108325 	.word	0x08108325
 81082ac:	08108325 	.word	0x08108325
 81082b0:	08108325 	.word	0x08108325
 81082b4:	08108325 	.word	0x08108325
 81082b8:	08108325 	.word	0x08108325
 81082bc:	0810831d 	.word	0x0810831d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81082c0:	f7fe f8b2 	bl	8106428 <HAL_RCC_GetPCLK1Freq>
 81082c4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81082c6:	e033      	b.n	8108330 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81082c8:	f7fe f8c4 	bl	8106454 <HAL_RCC_GetPCLK2Freq>
 81082cc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81082ce:	e02f      	b.n	8108330 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81082d0:	f107 0314 	add.w	r3, r7, #20
 81082d4:	4618      	mov	r0, r3
 81082d6:	f7fe f92b 	bl	8106530 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81082da:	69bb      	ldr	r3, [r7, #24]
 81082dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81082de:	e027      	b.n	8108330 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81082e0:	f107 0308 	add.w	r3, r7, #8
 81082e4:	4618      	mov	r0, r3
 81082e6:	f7fe fa6f 	bl	81067c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81082ea:	68fb      	ldr	r3, [r7, #12]
 81082ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81082ee:	e01f      	b.n	8108330 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81082f0:	4b2b      	ldr	r3, [pc, #172]	; (81083a0 <UART_SetConfig+0x94c>)
 81082f2:	681b      	ldr	r3, [r3, #0]
 81082f4:	f003 0320 	and.w	r3, r3, #32
 81082f8:	2b00      	cmp	r3, #0
 81082fa:	d009      	beq.n	8108310 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81082fc:	4b28      	ldr	r3, [pc, #160]	; (81083a0 <UART_SetConfig+0x94c>)
 81082fe:	681b      	ldr	r3, [r3, #0]
 8108300:	08db      	lsrs	r3, r3, #3
 8108302:	f003 0303 	and.w	r3, r3, #3
 8108306:	4a27      	ldr	r2, [pc, #156]	; (81083a4 <UART_SetConfig+0x950>)
 8108308:	fa22 f303 	lsr.w	r3, r2, r3
 810830c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810830e:	e00f      	b.n	8108330 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8108310:	4b24      	ldr	r3, [pc, #144]	; (81083a4 <UART_SetConfig+0x950>)
 8108312:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108314:	e00c      	b.n	8108330 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8108316:	4b24      	ldr	r3, [pc, #144]	; (81083a8 <UART_SetConfig+0x954>)
 8108318:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810831a:	e009      	b.n	8108330 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810831c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8108320:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108322:	e005      	b.n	8108330 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8108324:	2300      	movs	r3, #0
 8108326:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8108328:	2301      	movs	r3, #1
 810832a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810832e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8108330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108332:	2b00      	cmp	r3, #0
 8108334:	f000 8121 	beq.w	810857a <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108338:	687b      	ldr	r3, [r7, #4]
 810833a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810833c:	4a17      	ldr	r2, [pc, #92]	; (810839c <UART_SetConfig+0x948>)
 810833e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108342:	461a      	mov	r2, r3
 8108344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108346:	fbb3 f3f2 	udiv	r3, r3, r2
 810834a:	005a      	lsls	r2, r3, #1
 810834c:	687b      	ldr	r3, [r7, #4]
 810834e:	685b      	ldr	r3, [r3, #4]
 8108350:	085b      	lsrs	r3, r3, #1
 8108352:	441a      	add	r2, r3
 8108354:	687b      	ldr	r3, [r7, #4]
 8108356:	685b      	ldr	r3, [r3, #4]
 8108358:	fbb2 f3f3 	udiv	r3, r2, r3
 810835c:	b29b      	uxth	r3, r3
 810835e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8108360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108362:	2b0f      	cmp	r3, #15
 8108364:	d916      	bls.n	8108394 <UART_SetConfig+0x940>
 8108366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810836c:	d212      	bcs.n	8108394 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810836e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108370:	b29b      	uxth	r3, r3
 8108372:	f023 030f 	bic.w	r3, r3, #15
 8108376:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8108378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810837a:	085b      	lsrs	r3, r3, #1
 810837c:	b29b      	uxth	r3, r3
 810837e:	f003 0307 	and.w	r3, r3, #7
 8108382:	b29a      	uxth	r2, r3
 8108384:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8108386:	4313      	orrs	r3, r2
 8108388:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 810838a:	687b      	ldr	r3, [r7, #4]
 810838c:	681b      	ldr	r3, [r3, #0]
 810838e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8108390:	60da      	str	r2, [r3, #12]
 8108392:	e0f2      	b.n	810857a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8108394:	2301      	movs	r3, #1
 8108396:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810839a:	e0ee      	b.n	810857a <UART_SetConfig+0xb26>
 810839c:	08112a18 	.word	0x08112a18
 81083a0:	58024400 	.word	0x58024400
 81083a4:	03d09000 	.word	0x03d09000
 81083a8:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 81083ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 81083b0:	2b40      	cmp	r3, #64	; 0x40
 81083b2:	f200 80b7 	bhi.w	8108524 <UART_SetConfig+0xad0>
 81083b6:	a201      	add	r2, pc, #4	; (adr r2, 81083bc <UART_SetConfig+0x968>)
 81083b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81083bc:	081084c1 	.word	0x081084c1
 81083c0:	081084c9 	.word	0x081084c9
 81083c4:	08108525 	.word	0x08108525
 81083c8:	08108525 	.word	0x08108525
 81083cc:	081084d1 	.word	0x081084d1
 81083d0:	08108525 	.word	0x08108525
 81083d4:	08108525 	.word	0x08108525
 81083d8:	08108525 	.word	0x08108525
 81083dc:	081084e1 	.word	0x081084e1
 81083e0:	08108525 	.word	0x08108525
 81083e4:	08108525 	.word	0x08108525
 81083e8:	08108525 	.word	0x08108525
 81083ec:	08108525 	.word	0x08108525
 81083f0:	08108525 	.word	0x08108525
 81083f4:	08108525 	.word	0x08108525
 81083f8:	08108525 	.word	0x08108525
 81083fc:	081084f1 	.word	0x081084f1
 8108400:	08108525 	.word	0x08108525
 8108404:	08108525 	.word	0x08108525
 8108408:	08108525 	.word	0x08108525
 810840c:	08108525 	.word	0x08108525
 8108410:	08108525 	.word	0x08108525
 8108414:	08108525 	.word	0x08108525
 8108418:	08108525 	.word	0x08108525
 810841c:	08108525 	.word	0x08108525
 8108420:	08108525 	.word	0x08108525
 8108424:	08108525 	.word	0x08108525
 8108428:	08108525 	.word	0x08108525
 810842c:	08108525 	.word	0x08108525
 8108430:	08108525 	.word	0x08108525
 8108434:	08108525 	.word	0x08108525
 8108438:	08108525 	.word	0x08108525
 810843c:	08108517 	.word	0x08108517
 8108440:	08108525 	.word	0x08108525
 8108444:	08108525 	.word	0x08108525
 8108448:	08108525 	.word	0x08108525
 810844c:	08108525 	.word	0x08108525
 8108450:	08108525 	.word	0x08108525
 8108454:	08108525 	.word	0x08108525
 8108458:	08108525 	.word	0x08108525
 810845c:	08108525 	.word	0x08108525
 8108460:	08108525 	.word	0x08108525
 8108464:	08108525 	.word	0x08108525
 8108468:	08108525 	.word	0x08108525
 810846c:	08108525 	.word	0x08108525
 8108470:	08108525 	.word	0x08108525
 8108474:	08108525 	.word	0x08108525
 8108478:	08108525 	.word	0x08108525
 810847c:	08108525 	.word	0x08108525
 8108480:	08108525 	.word	0x08108525
 8108484:	08108525 	.word	0x08108525
 8108488:	08108525 	.word	0x08108525
 810848c:	08108525 	.word	0x08108525
 8108490:	08108525 	.word	0x08108525
 8108494:	08108525 	.word	0x08108525
 8108498:	08108525 	.word	0x08108525
 810849c:	08108525 	.word	0x08108525
 81084a0:	08108525 	.word	0x08108525
 81084a4:	08108525 	.word	0x08108525
 81084a8:	08108525 	.word	0x08108525
 81084ac:	08108525 	.word	0x08108525
 81084b0:	08108525 	.word	0x08108525
 81084b4:	08108525 	.word	0x08108525
 81084b8:	08108525 	.word	0x08108525
 81084bc:	0810851d 	.word	0x0810851d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81084c0:	f7fd ffb2 	bl	8106428 <HAL_RCC_GetPCLK1Freq>
 81084c4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81084c6:	e033      	b.n	8108530 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81084c8:	f7fd ffc4 	bl	8106454 <HAL_RCC_GetPCLK2Freq>
 81084cc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81084ce:	e02f      	b.n	8108530 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81084d0:	f107 0314 	add.w	r3, r7, #20
 81084d4:	4618      	mov	r0, r3
 81084d6:	f7fe f82b 	bl	8106530 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81084da:	69bb      	ldr	r3, [r7, #24]
 81084dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81084de:	e027      	b.n	8108530 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81084e0:	f107 0308 	add.w	r3, r7, #8
 81084e4:	4618      	mov	r0, r3
 81084e6:	f7fe f96f 	bl	81067c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81084ea:	68fb      	ldr	r3, [r7, #12]
 81084ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81084ee:	e01f      	b.n	8108530 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81084f0:	4b2c      	ldr	r3, [pc, #176]	; (81085a4 <UART_SetConfig+0xb50>)
 81084f2:	681b      	ldr	r3, [r3, #0]
 81084f4:	f003 0320 	and.w	r3, r3, #32
 81084f8:	2b00      	cmp	r3, #0
 81084fa:	d009      	beq.n	8108510 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81084fc:	4b29      	ldr	r3, [pc, #164]	; (81085a4 <UART_SetConfig+0xb50>)
 81084fe:	681b      	ldr	r3, [r3, #0]
 8108500:	08db      	lsrs	r3, r3, #3
 8108502:	f003 0303 	and.w	r3, r3, #3
 8108506:	4a28      	ldr	r2, [pc, #160]	; (81085a8 <UART_SetConfig+0xb54>)
 8108508:	fa22 f303 	lsr.w	r3, r2, r3
 810850c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810850e:	e00f      	b.n	8108530 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8108510:	4b25      	ldr	r3, [pc, #148]	; (81085a8 <UART_SetConfig+0xb54>)
 8108512:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108514:	e00c      	b.n	8108530 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8108516:	4b25      	ldr	r3, [pc, #148]	; (81085ac <UART_SetConfig+0xb58>)
 8108518:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810851a:	e009      	b.n	8108530 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810851c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8108520:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108522:	e005      	b.n	8108530 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8108524:	2300      	movs	r3, #0
 8108526:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8108528:	2301      	movs	r3, #1
 810852a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810852e:	bf00      	nop
    }

    if (pclk != 0U)
 8108530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108532:	2b00      	cmp	r3, #0
 8108534:	d021      	beq.n	810857a <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108536:	687b      	ldr	r3, [r7, #4]
 8108538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810853a:	4a1d      	ldr	r2, [pc, #116]	; (81085b0 <UART_SetConfig+0xb5c>)
 810853c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108540:	461a      	mov	r2, r3
 8108542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108544:	fbb3 f2f2 	udiv	r2, r3, r2
 8108548:	687b      	ldr	r3, [r7, #4]
 810854a:	685b      	ldr	r3, [r3, #4]
 810854c:	085b      	lsrs	r3, r3, #1
 810854e:	441a      	add	r2, r3
 8108550:	687b      	ldr	r3, [r7, #4]
 8108552:	685b      	ldr	r3, [r3, #4]
 8108554:	fbb2 f3f3 	udiv	r3, r2, r3
 8108558:	b29b      	uxth	r3, r3
 810855a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810855c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810855e:	2b0f      	cmp	r3, #15
 8108560:	d908      	bls.n	8108574 <UART_SetConfig+0xb20>
 8108562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8108568:	d204      	bcs.n	8108574 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 810856a:	687b      	ldr	r3, [r7, #4]
 810856c:	681b      	ldr	r3, [r3, #0]
 810856e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8108570:	60da      	str	r2, [r3, #12]
 8108572:	e002      	b.n	810857a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8108574:	2301      	movs	r3, #1
 8108576:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810857a:	687b      	ldr	r3, [r7, #4]
 810857c:	2201      	movs	r2, #1
 810857e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8108582:	687b      	ldr	r3, [r7, #4]
 8108584:	2201      	movs	r2, #1
 8108586:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810858a:	687b      	ldr	r3, [r7, #4]
 810858c:	2200      	movs	r2, #0
 810858e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8108590:	687b      	ldr	r3, [r7, #4]
 8108592:	2200      	movs	r2, #0
 8108594:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8108596:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 810859a:	4618      	mov	r0, r3
 810859c:	3738      	adds	r7, #56	; 0x38
 810859e:	46bd      	mov	sp, r7
 81085a0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 81085a4:	58024400 	.word	0x58024400
 81085a8:	03d09000 	.word	0x03d09000
 81085ac:	003d0900 	.word	0x003d0900
 81085b0:	08112a18 	.word	0x08112a18

081085b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 81085b4:	b480      	push	{r7}
 81085b6:	b083      	sub	sp, #12
 81085b8:	af00      	add	r7, sp, #0
 81085ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 81085bc:	687b      	ldr	r3, [r7, #4]
 81085be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81085c0:	f003 0301 	and.w	r3, r3, #1
 81085c4:	2b00      	cmp	r3, #0
 81085c6:	d00a      	beq.n	81085de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 81085c8:	687b      	ldr	r3, [r7, #4]
 81085ca:	681b      	ldr	r3, [r3, #0]
 81085cc:	685b      	ldr	r3, [r3, #4]
 81085ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 81085d2:	687b      	ldr	r3, [r7, #4]
 81085d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81085d6:	687b      	ldr	r3, [r7, #4]
 81085d8:	681b      	ldr	r3, [r3, #0]
 81085da:	430a      	orrs	r2, r1
 81085dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 81085de:	687b      	ldr	r3, [r7, #4]
 81085e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81085e2:	f003 0302 	and.w	r3, r3, #2
 81085e6:	2b00      	cmp	r3, #0
 81085e8:	d00a      	beq.n	8108600 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 81085ea:	687b      	ldr	r3, [r7, #4]
 81085ec:	681b      	ldr	r3, [r3, #0]
 81085ee:	685b      	ldr	r3, [r3, #4]
 81085f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 81085f4:	687b      	ldr	r3, [r7, #4]
 81085f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 81085f8:	687b      	ldr	r3, [r7, #4]
 81085fa:	681b      	ldr	r3, [r3, #0]
 81085fc:	430a      	orrs	r2, r1
 81085fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8108600:	687b      	ldr	r3, [r7, #4]
 8108602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108604:	f003 0304 	and.w	r3, r3, #4
 8108608:	2b00      	cmp	r3, #0
 810860a:	d00a      	beq.n	8108622 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810860c:	687b      	ldr	r3, [r7, #4]
 810860e:	681b      	ldr	r3, [r3, #0]
 8108610:	685b      	ldr	r3, [r3, #4]
 8108612:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8108616:	687b      	ldr	r3, [r7, #4]
 8108618:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810861a:	687b      	ldr	r3, [r7, #4]
 810861c:	681b      	ldr	r3, [r3, #0]
 810861e:	430a      	orrs	r2, r1
 8108620:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8108622:	687b      	ldr	r3, [r7, #4]
 8108624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108626:	f003 0308 	and.w	r3, r3, #8
 810862a:	2b00      	cmp	r3, #0
 810862c:	d00a      	beq.n	8108644 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810862e:	687b      	ldr	r3, [r7, #4]
 8108630:	681b      	ldr	r3, [r3, #0]
 8108632:	685b      	ldr	r3, [r3, #4]
 8108634:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8108638:	687b      	ldr	r3, [r7, #4]
 810863a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810863c:	687b      	ldr	r3, [r7, #4]
 810863e:	681b      	ldr	r3, [r3, #0]
 8108640:	430a      	orrs	r2, r1
 8108642:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8108644:	687b      	ldr	r3, [r7, #4]
 8108646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108648:	f003 0310 	and.w	r3, r3, #16
 810864c:	2b00      	cmp	r3, #0
 810864e:	d00a      	beq.n	8108666 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8108650:	687b      	ldr	r3, [r7, #4]
 8108652:	681b      	ldr	r3, [r3, #0]
 8108654:	689b      	ldr	r3, [r3, #8]
 8108656:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 810865a:	687b      	ldr	r3, [r7, #4]
 810865c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810865e:	687b      	ldr	r3, [r7, #4]
 8108660:	681b      	ldr	r3, [r3, #0]
 8108662:	430a      	orrs	r2, r1
 8108664:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8108666:	687b      	ldr	r3, [r7, #4]
 8108668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810866a:	f003 0320 	and.w	r3, r3, #32
 810866e:	2b00      	cmp	r3, #0
 8108670:	d00a      	beq.n	8108688 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8108672:	687b      	ldr	r3, [r7, #4]
 8108674:	681b      	ldr	r3, [r3, #0]
 8108676:	689b      	ldr	r3, [r3, #8]
 8108678:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 810867c:	687b      	ldr	r3, [r7, #4]
 810867e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8108680:	687b      	ldr	r3, [r7, #4]
 8108682:	681b      	ldr	r3, [r3, #0]
 8108684:	430a      	orrs	r2, r1
 8108686:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8108688:	687b      	ldr	r3, [r7, #4]
 810868a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810868c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8108690:	2b00      	cmp	r3, #0
 8108692:	d01a      	beq.n	81086ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8108694:	687b      	ldr	r3, [r7, #4]
 8108696:	681b      	ldr	r3, [r3, #0]
 8108698:	685b      	ldr	r3, [r3, #4]
 810869a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 810869e:	687b      	ldr	r3, [r7, #4]
 81086a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 81086a2:	687b      	ldr	r3, [r7, #4]
 81086a4:	681b      	ldr	r3, [r3, #0]
 81086a6:	430a      	orrs	r2, r1
 81086a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 81086aa:	687b      	ldr	r3, [r7, #4]
 81086ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81086ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81086b2:	d10a      	bne.n	81086ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 81086b4:	687b      	ldr	r3, [r7, #4]
 81086b6:	681b      	ldr	r3, [r3, #0]
 81086b8:	685b      	ldr	r3, [r3, #4]
 81086ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 81086be:	687b      	ldr	r3, [r7, #4]
 81086c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 81086c2:	687b      	ldr	r3, [r7, #4]
 81086c4:	681b      	ldr	r3, [r3, #0]
 81086c6:	430a      	orrs	r2, r1
 81086c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 81086ca:	687b      	ldr	r3, [r7, #4]
 81086cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81086ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81086d2:	2b00      	cmp	r3, #0
 81086d4:	d00a      	beq.n	81086ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 81086d6:	687b      	ldr	r3, [r7, #4]
 81086d8:	681b      	ldr	r3, [r3, #0]
 81086da:	685b      	ldr	r3, [r3, #4]
 81086dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 81086e0:	687b      	ldr	r3, [r7, #4]
 81086e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 81086e4:	687b      	ldr	r3, [r7, #4]
 81086e6:	681b      	ldr	r3, [r3, #0]
 81086e8:	430a      	orrs	r2, r1
 81086ea:	605a      	str	r2, [r3, #4]
  }
}
 81086ec:	bf00      	nop
 81086ee:	370c      	adds	r7, #12
 81086f0:	46bd      	mov	sp, r7
 81086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81086f6:	4770      	bx	lr

081086f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 81086f8:	b580      	push	{r7, lr}
 81086fa:	b086      	sub	sp, #24
 81086fc:	af02      	add	r7, sp, #8
 81086fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8108700:	687b      	ldr	r3, [r7, #4]
 8108702:	2200      	movs	r2, #0
 8108704:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8108708:	f7f9 fdc6 	bl	8102298 <HAL_GetTick>
 810870c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810870e:	687b      	ldr	r3, [r7, #4]
 8108710:	681b      	ldr	r3, [r3, #0]
 8108712:	681b      	ldr	r3, [r3, #0]
 8108714:	f003 0308 	and.w	r3, r3, #8
 8108718:	2b08      	cmp	r3, #8
 810871a:	d10e      	bne.n	810873a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810871c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8108720:	9300      	str	r3, [sp, #0]
 8108722:	68fb      	ldr	r3, [r7, #12]
 8108724:	2200      	movs	r2, #0
 8108726:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810872a:	6878      	ldr	r0, [r7, #4]
 810872c:	f000 f82c 	bl	8108788 <UART_WaitOnFlagUntilTimeout>
 8108730:	4603      	mov	r3, r0
 8108732:	2b00      	cmp	r3, #0
 8108734:	d001      	beq.n	810873a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8108736:	2303      	movs	r3, #3
 8108738:	e022      	b.n	8108780 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810873a:	687b      	ldr	r3, [r7, #4]
 810873c:	681b      	ldr	r3, [r3, #0]
 810873e:	681b      	ldr	r3, [r3, #0]
 8108740:	f003 0304 	and.w	r3, r3, #4
 8108744:	2b04      	cmp	r3, #4
 8108746:	d10e      	bne.n	8108766 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8108748:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810874c:	9300      	str	r3, [sp, #0]
 810874e:	68fb      	ldr	r3, [r7, #12]
 8108750:	2200      	movs	r2, #0
 8108752:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8108756:	6878      	ldr	r0, [r7, #4]
 8108758:	f000 f816 	bl	8108788 <UART_WaitOnFlagUntilTimeout>
 810875c:	4603      	mov	r3, r0
 810875e:	2b00      	cmp	r3, #0
 8108760:	d001      	beq.n	8108766 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8108762:	2303      	movs	r3, #3
 8108764:	e00c      	b.n	8108780 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8108766:	687b      	ldr	r3, [r7, #4]
 8108768:	2220      	movs	r2, #32
 810876a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 810876e:	687b      	ldr	r3, [r7, #4]
 8108770:	2220      	movs	r2, #32
 8108772:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8108776:	687b      	ldr	r3, [r7, #4]
 8108778:	2200      	movs	r2, #0
 810877a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 810877e:	2300      	movs	r3, #0
}
 8108780:	4618      	mov	r0, r3
 8108782:	3710      	adds	r7, #16
 8108784:	46bd      	mov	sp, r7
 8108786:	bd80      	pop	{r7, pc}

08108788 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8108788:	b580      	push	{r7, lr}
 810878a:	b084      	sub	sp, #16
 810878c:	af00      	add	r7, sp, #0
 810878e:	60f8      	str	r0, [r7, #12]
 8108790:	60b9      	str	r1, [r7, #8]
 8108792:	603b      	str	r3, [r7, #0]
 8108794:	4613      	mov	r3, r2
 8108796:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8108798:	e062      	b.n	8108860 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810879a:	69bb      	ldr	r3, [r7, #24]
 810879c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81087a0:	d05e      	beq.n	8108860 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81087a2:	f7f9 fd79 	bl	8102298 <HAL_GetTick>
 81087a6:	4602      	mov	r2, r0
 81087a8:	683b      	ldr	r3, [r7, #0]
 81087aa:	1ad3      	subs	r3, r2, r3
 81087ac:	69ba      	ldr	r2, [r7, #24]
 81087ae:	429a      	cmp	r2, r3
 81087b0:	d302      	bcc.n	81087b8 <UART_WaitOnFlagUntilTimeout+0x30>
 81087b2:	69bb      	ldr	r3, [r7, #24]
 81087b4:	2b00      	cmp	r3, #0
 81087b6:	d11d      	bne.n	81087f4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 81087b8:	68fb      	ldr	r3, [r7, #12]
 81087ba:	681b      	ldr	r3, [r3, #0]
 81087bc:	681a      	ldr	r2, [r3, #0]
 81087be:	68fb      	ldr	r3, [r7, #12]
 81087c0:	681b      	ldr	r3, [r3, #0]
 81087c2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 81087c6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81087c8:	68fb      	ldr	r3, [r7, #12]
 81087ca:	681b      	ldr	r3, [r3, #0]
 81087cc:	689a      	ldr	r2, [r3, #8]
 81087ce:	68fb      	ldr	r3, [r7, #12]
 81087d0:	681b      	ldr	r3, [r3, #0]
 81087d2:	f022 0201 	bic.w	r2, r2, #1
 81087d6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 81087d8:	68fb      	ldr	r3, [r7, #12]
 81087da:	2220      	movs	r2, #32
 81087dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 81087e0:	68fb      	ldr	r3, [r7, #12]
 81087e2:	2220      	movs	r2, #32
 81087e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 81087e8:	68fb      	ldr	r3, [r7, #12]
 81087ea:	2200      	movs	r2, #0
 81087ec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 81087f0:	2303      	movs	r3, #3
 81087f2:	e045      	b.n	8108880 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 81087f4:	68fb      	ldr	r3, [r7, #12]
 81087f6:	681b      	ldr	r3, [r3, #0]
 81087f8:	681b      	ldr	r3, [r3, #0]
 81087fa:	f003 0304 	and.w	r3, r3, #4
 81087fe:	2b00      	cmp	r3, #0
 8108800:	d02e      	beq.n	8108860 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8108802:	68fb      	ldr	r3, [r7, #12]
 8108804:	681b      	ldr	r3, [r3, #0]
 8108806:	69db      	ldr	r3, [r3, #28]
 8108808:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810880c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8108810:	d126      	bne.n	8108860 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8108812:	68fb      	ldr	r3, [r7, #12]
 8108814:	681b      	ldr	r3, [r3, #0]
 8108816:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810881a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 810881c:	68fb      	ldr	r3, [r7, #12]
 810881e:	681b      	ldr	r3, [r3, #0]
 8108820:	681a      	ldr	r2, [r3, #0]
 8108822:	68fb      	ldr	r3, [r7, #12]
 8108824:	681b      	ldr	r3, [r3, #0]
 8108826:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 810882a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810882c:	68fb      	ldr	r3, [r7, #12]
 810882e:	681b      	ldr	r3, [r3, #0]
 8108830:	689a      	ldr	r2, [r3, #8]
 8108832:	68fb      	ldr	r3, [r7, #12]
 8108834:	681b      	ldr	r3, [r3, #0]
 8108836:	f022 0201 	bic.w	r2, r2, #1
 810883a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 810883c:	68fb      	ldr	r3, [r7, #12]
 810883e:	2220      	movs	r2, #32
 8108840:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8108844:	68fb      	ldr	r3, [r7, #12]
 8108846:	2220      	movs	r2, #32
 8108848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810884c:	68fb      	ldr	r3, [r7, #12]
 810884e:	2220      	movs	r2, #32
 8108850:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8108854:	68fb      	ldr	r3, [r7, #12]
 8108856:	2200      	movs	r2, #0
 8108858:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 810885c:	2303      	movs	r3, #3
 810885e:	e00f      	b.n	8108880 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8108860:	68fb      	ldr	r3, [r7, #12]
 8108862:	681b      	ldr	r3, [r3, #0]
 8108864:	69da      	ldr	r2, [r3, #28]
 8108866:	68bb      	ldr	r3, [r7, #8]
 8108868:	4013      	ands	r3, r2
 810886a:	68ba      	ldr	r2, [r7, #8]
 810886c:	429a      	cmp	r2, r3
 810886e:	bf0c      	ite	eq
 8108870:	2301      	moveq	r3, #1
 8108872:	2300      	movne	r3, #0
 8108874:	b2db      	uxtb	r3, r3
 8108876:	461a      	mov	r2, r3
 8108878:	79fb      	ldrb	r3, [r7, #7]
 810887a:	429a      	cmp	r2, r3
 810887c:	d08d      	beq.n	810879a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810887e:	2300      	movs	r3, #0
}
 8108880:	4618      	mov	r0, r3
 8108882:	3710      	adds	r7, #16
 8108884:	46bd      	mov	sp, r7
 8108886:	bd80      	pop	{r7, pc}

08108888 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8108888:	b480      	push	{r7}
 810888a:	b083      	sub	sp, #12
 810888c:	af00      	add	r7, sp, #0
 810888e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8108890:	687b      	ldr	r3, [r7, #4]
 8108892:	681b      	ldr	r3, [r3, #0]
 8108894:	681a      	ldr	r2, [r3, #0]
 8108896:	687b      	ldr	r3, [r7, #4]
 8108898:	681b      	ldr	r3, [r3, #0]
 810889a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 810889e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 81088a0:	687b      	ldr	r3, [r7, #4]
 81088a2:	681b      	ldr	r3, [r3, #0]
 81088a4:	689a      	ldr	r2, [r3, #8]
 81088a6:	687b      	ldr	r3, [r7, #4]
 81088a8:	681b      	ldr	r3, [r3, #0]
 81088aa:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 81088ae:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 81088b0:	687b      	ldr	r3, [r7, #4]
 81088b2:	2220      	movs	r2, #32
 81088b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 81088b8:	bf00      	nop
 81088ba:	370c      	adds	r7, #12
 81088bc:	46bd      	mov	sp, r7
 81088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81088c2:	4770      	bx	lr

081088c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 81088c4:	b480      	push	{r7}
 81088c6:	b083      	sub	sp, #12
 81088c8:	af00      	add	r7, sp, #0
 81088ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 81088cc:	687b      	ldr	r3, [r7, #4]
 81088ce:	681b      	ldr	r3, [r3, #0]
 81088d0:	681a      	ldr	r2, [r3, #0]
 81088d2:	687b      	ldr	r3, [r7, #4]
 81088d4:	681b      	ldr	r3, [r3, #0]
 81088d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 81088da:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 81088dc:	687b      	ldr	r3, [r7, #4]
 81088de:	681b      	ldr	r3, [r3, #0]
 81088e0:	689b      	ldr	r3, [r3, #8]
 81088e2:	687a      	ldr	r2, [r7, #4]
 81088e4:	6812      	ldr	r2, [r2, #0]
 81088e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 81088ea:	f023 0301 	bic.w	r3, r3, #1
 81088ee:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 81088f0:	687b      	ldr	r3, [r7, #4]
 81088f2:	2220      	movs	r2, #32
 81088f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 81088f8:	687b      	ldr	r3, [r7, #4]
 81088fa:	2200      	movs	r2, #0
 81088fc:	66da      	str	r2, [r3, #108]	; 0x6c
}
 81088fe:	bf00      	nop
 8108900:	370c      	adds	r7, #12
 8108902:	46bd      	mov	sp, r7
 8108904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108908:	4770      	bx	lr

0810890a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810890a:	b580      	push	{r7, lr}
 810890c:	b084      	sub	sp, #16
 810890e:	af00      	add	r7, sp, #0
 8108910:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8108912:	687b      	ldr	r3, [r7, #4]
 8108914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108916:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8108918:	687b      	ldr	r3, [r7, #4]
 810891a:	69db      	ldr	r3, [r3, #28]
 810891c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108920:	d01f      	beq.n	8108962 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 8108922:	68fb      	ldr	r3, [r7, #12]
 8108924:	2200      	movs	r2, #0
 8108926:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810892a:	68fb      	ldr	r3, [r7, #12]
 810892c:	681b      	ldr	r3, [r3, #0]
 810892e:	681a      	ldr	r2, [r3, #0]
 8108930:	68fb      	ldr	r3, [r7, #12]
 8108932:	681b      	ldr	r3, [r3, #0]
 8108934:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8108938:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810893a:	68fb      	ldr	r3, [r7, #12]
 810893c:	681b      	ldr	r3, [r3, #0]
 810893e:	689a      	ldr	r2, [r3, #8]
 8108940:	68fb      	ldr	r3, [r7, #12]
 8108942:	681b      	ldr	r3, [r3, #0]
 8108944:	f022 0201 	bic.w	r2, r2, #1
 8108948:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810894a:	68fb      	ldr	r3, [r7, #12]
 810894c:	681b      	ldr	r3, [r3, #0]
 810894e:	689a      	ldr	r2, [r3, #8]
 8108950:	68fb      	ldr	r3, [r7, #12]
 8108952:	681b      	ldr	r3, [r3, #0]
 8108954:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8108958:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 810895a:	68fb      	ldr	r3, [r7, #12]
 810895c:	2220      	movs	r2, #32
 810895e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8108962:	68f8      	ldr	r0, [r7, #12]
 8108964:	f7ff f858 	bl	8107a18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8108968:	bf00      	nop
 810896a:	3710      	adds	r7, #16
 810896c:	46bd      	mov	sp, r7
 810896e:	bd80      	pop	{r7, pc}

08108970 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8108970:	b580      	push	{r7, lr}
 8108972:	b084      	sub	sp, #16
 8108974:	af00      	add	r7, sp, #0
 8108976:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8108978:	687b      	ldr	r3, [r7, #4]
 810897a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810897c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 810897e:	68f8      	ldr	r0, [r7, #12]
 8108980:	f7ff f854 	bl	8107a2c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8108984:	bf00      	nop
 8108986:	3710      	adds	r7, #16
 8108988:	46bd      	mov	sp, r7
 810898a:	bd80      	pop	{r7, pc}

0810898c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 810898c:	b580      	push	{r7, lr}
 810898e:	b086      	sub	sp, #24
 8108990:	af00      	add	r7, sp, #0
 8108992:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8108994:	687b      	ldr	r3, [r7, #4]
 8108996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108998:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 810899a:	697b      	ldr	r3, [r7, #20]
 810899c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81089a0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 81089a2:	697b      	ldr	r3, [r7, #20]
 81089a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81089a8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 81089aa:	697b      	ldr	r3, [r7, #20]
 81089ac:	681b      	ldr	r3, [r3, #0]
 81089ae:	689b      	ldr	r3, [r3, #8]
 81089b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81089b4:	2b80      	cmp	r3, #128	; 0x80
 81089b6:	d109      	bne.n	81089cc <UART_DMAError+0x40>
 81089b8:	693b      	ldr	r3, [r7, #16]
 81089ba:	2b21      	cmp	r3, #33	; 0x21
 81089bc:	d106      	bne.n	81089cc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 81089be:	697b      	ldr	r3, [r7, #20]
 81089c0:	2200      	movs	r2, #0
 81089c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 81089c6:	6978      	ldr	r0, [r7, #20]
 81089c8:	f7ff ff5e 	bl	8108888 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 81089cc:	697b      	ldr	r3, [r7, #20]
 81089ce:	681b      	ldr	r3, [r3, #0]
 81089d0:	689b      	ldr	r3, [r3, #8]
 81089d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81089d6:	2b40      	cmp	r3, #64	; 0x40
 81089d8:	d109      	bne.n	81089ee <UART_DMAError+0x62>
 81089da:	68fb      	ldr	r3, [r7, #12]
 81089dc:	2b22      	cmp	r3, #34	; 0x22
 81089de:	d106      	bne.n	81089ee <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 81089e0:	697b      	ldr	r3, [r7, #20]
 81089e2:	2200      	movs	r2, #0
 81089e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 81089e8:	6978      	ldr	r0, [r7, #20]
 81089ea:	f7ff ff6b 	bl	81088c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 81089ee:	697b      	ldr	r3, [r7, #20]
 81089f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81089f4:	f043 0210 	orr.w	r2, r3, #16
 81089f8:	697b      	ldr	r3, [r7, #20]
 81089fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 81089fe:	6978      	ldr	r0, [r7, #20]
 8108a00:	f7ff f81e 	bl	8107a40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8108a04:	bf00      	nop
 8108a06:	3718      	adds	r7, #24
 8108a08:	46bd      	mov	sp, r7
 8108a0a:	bd80      	pop	{r7, pc}

08108a0c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8108a0c:	b480      	push	{r7}
 8108a0e:	b085      	sub	sp, #20
 8108a10:	af00      	add	r7, sp, #0
 8108a12:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8108a14:	687b      	ldr	r3, [r7, #4]
 8108a16:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8108a1a:	2b01      	cmp	r3, #1
 8108a1c:	d101      	bne.n	8108a22 <HAL_UARTEx_DisableFifoMode+0x16>
 8108a1e:	2302      	movs	r3, #2
 8108a20:	e027      	b.n	8108a72 <HAL_UARTEx_DisableFifoMode+0x66>
 8108a22:	687b      	ldr	r3, [r7, #4]
 8108a24:	2201      	movs	r2, #1
 8108a26:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8108a2a:	687b      	ldr	r3, [r7, #4]
 8108a2c:	2224      	movs	r2, #36	; 0x24
 8108a2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8108a32:	687b      	ldr	r3, [r7, #4]
 8108a34:	681b      	ldr	r3, [r3, #0]
 8108a36:	681b      	ldr	r3, [r3, #0]
 8108a38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8108a3a:	687b      	ldr	r3, [r7, #4]
 8108a3c:	681b      	ldr	r3, [r3, #0]
 8108a3e:	681a      	ldr	r2, [r3, #0]
 8108a40:	687b      	ldr	r3, [r7, #4]
 8108a42:	681b      	ldr	r3, [r3, #0]
 8108a44:	f022 0201 	bic.w	r2, r2, #1
 8108a48:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8108a4a:	68fb      	ldr	r3, [r7, #12]
 8108a4c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8108a50:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8108a52:	687b      	ldr	r3, [r7, #4]
 8108a54:	2200      	movs	r2, #0
 8108a56:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8108a58:	687b      	ldr	r3, [r7, #4]
 8108a5a:	681b      	ldr	r3, [r3, #0]
 8108a5c:	68fa      	ldr	r2, [r7, #12]
 8108a5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8108a60:	687b      	ldr	r3, [r7, #4]
 8108a62:	2220      	movs	r2, #32
 8108a64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108a68:	687b      	ldr	r3, [r7, #4]
 8108a6a:	2200      	movs	r2, #0
 8108a6c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8108a70:	2300      	movs	r3, #0
}
 8108a72:	4618      	mov	r0, r3
 8108a74:	3714      	adds	r7, #20
 8108a76:	46bd      	mov	sp, r7
 8108a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108a7c:	4770      	bx	lr

08108a7e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8108a7e:	b580      	push	{r7, lr}
 8108a80:	b084      	sub	sp, #16
 8108a82:	af00      	add	r7, sp, #0
 8108a84:	6078      	str	r0, [r7, #4]
 8108a86:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8108a88:	687b      	ldr	r3, [r7, #4]
 8108a8a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8108a8e:	2b01      	cmp	r3, #1
 8108a90:	d101      	bne.n	8108a96 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8108a92:	2302      	movs	r3, #2
 8108a94:	e02d      	b.n	8108af2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8108a96:	687b      	ldr	r3, [r7, #4]
 8108a98:	2201      	movs	r2, #1
 8108a9a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8108a9e:	687b      	ldr	r3, [r7, #4]
 8108aa0:	2224      	movs	r2, #36	; 0x24
 8108aa2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8108aa6:	687b      	ldr	r3, [r7, #4]
 8108aa8:	681b      	ldr	r3, [r3, #0]
 8108aaa:	681b      	ldr	r3, [r3, #0]
 8108aac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8108aae:	687b      	ldr	r3, [r7, #4]
 8108ab0:	681b      	ldr	r3, [r3, #0]
 8108ab2:	681a      	ldr	r2, [r3, #0]
 8108ab4:	687b      	ldr	r3, [r7, #4]
 8108ab6:	681b      	ldr	r3, [r3, #0]
 8108ab8:	f022 0201 	bic.w	r2, r2, #1
 8108abc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8108abe:	687b      	ldr	r3, [r7, #4]
 8108ac0:	681b      	ldr	r3, [r3, #0]
 8108ac2:	689b      	ldr	r3, [r3, #8]
 8108ac4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8108ac8:	687b      	ldr	r3, [r7, #4]
 8108aca:	681b      	ldr	r3, [r3, #0]
 8108acc:	683a      	ldr	r2, [r7, #0]
 8108ace:	430a      	orrs	r2, r1
 8108ad0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8108ad2:	6878      	ldr	r0, [r7, #4]
 8108ad4:	f000 f850 	bl	8108b78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8108ad8:	687b      	ldr	r3, [r7, #4]
 8108ada:	681b      	ldr	r3, [r3, #0]
 8108adc:	68fa      	ldr	r2, [r7, #12]
 8108ade:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8108ae0:	687b      	ldr	r3, [r7, #4]
 8108ae2:	2220      	movs	r2, #32
 8108ae4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108ae8:	687b      	ldr	r3, [r7, #4]
 8108aea:	2200      	movs	r2, #0
 8108aec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8108af0:	2300      	movs	r3, #0
}
 8108af2:	4618      	mov	r0, r3
 8108af4:	3710      	adds	r7, #16
 8108af6:	46bd      	mov	sp, r7
 8108af8:	bd80      	pop	{r7, pc}

08108afa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8108afa:	b580      	push	{r7, lr}
 8108afc:	b084      	sub	sp, #16
 8108afe:	af00      	add	r7, sp, #0
 8108b00:	6078      	str	r0, [r7, #4]
 8108b02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8108b04:	687b      	ldr	r3, [r7, #4]
 8108b06:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8108b0a:	2b01      	cmp	r3, #1
 8108b0c:	d101      	bne.n	8108b12 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8108b0e:	2302      	movs	r3, #2
 8108b10:	e02d      	b.n	8108b6e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8108b12:	687b      	ldr	r3, [r7, #4]
 8108b14:	2201      	movs	r2, #1
 8108b16:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8108b1a:	687b      	ldr	r3, [r7, #4]
 8108b1c:	2224      	movs	r2, #36	; 0x24
 8108b1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8108b22:	687b      	ldr	r3, [r7, #4]
 8108b24:	681b      	ldr	r3, [r3, #0]
 8108b26:	681b      	ldr	r3, [r3, #0]
 8108b28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8108b2a:	687b      	ldr	r3, [r7, #4]
 8108b2c:	681b      	ldr	r3, [r3, #0]
 8108b2e:	681a      	ldr	r2, [r3, #0]
 8108b30:	687b      	ldr	r3, [r7, #4]
 8108b32:	681b      	ldr	r3, [r3, #0]
 8108b34:	f022 0201 	bic.w	r2, r2, #1
 8108b38:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8108b3a:	687b      	ldr	r3, [r7, #4]
 8108b3c:	681b      	ldr	r3, [r3, #0]
 8108b3e:	689b      	ldr	r3, [r3, #8]
 8108b40:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8108b44:	687b      	ldr	r3, [r7, #4]
 8108b46:	681b      	ldr	r3, [r3, #0]
 8108b48:	683a      	ldr	r2, [r7, #0]
 8108b4a:	430a      	orrs	r2, r1
 8108b4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8108b4e:	6878      	ldr	r0, [r7, #4]
 8108b50:	f000 f812 	bl	8108b78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8108b54:	687b      	ldr	r3, [r7, #4]
 8108b56:	681b      	ldr	r3, [r3, #0]
 8108b58:	68fa      	ldr	r2, [r7, #12]
 8108b5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8108b5c:	687b      	ldr	r3, [r7, #4]
 8108b5e:	2220      	movs	r2, #32
 8108b60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108b64:	687b      	ldr	r3, [r7, #4]
 8108b66:	2200      	movs	r2, #0
 8108b68:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8108b6c:	2300      	movs	r3, #0
}
 8108b6e:	4618      	mov	r0, r3
 8108b70:	3710      	adds	r7, #16
 8108b72:	46bd      	mov	sp, r7
 8108b74:	bd80      	pop	{r7, pc}
	...

08108b78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8108b78:	b480      	push	{r7}
 8108b7a:	b089      	sub	sp, #36	; 0x24
 8108b7c:	af00      	add	r7, sp, #0
 8108b7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8108b80:	4a2f      	ldr	r2, [pc, #188]	; (8108c40 <UARTEx_SetNbDataToProcess+0xc8>)
 8108b82:	f107 0314 	add.w	r3, r7, #20
 8108b86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8108b8a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8108b8e:	4a2d      	ldr	r2, [pc, #180]	; (8108c44 <UARTEx_SetNbDataToProcess+0xcc>)
 8108b90:	f107 030c 	add.w	r3, r7, #12
 8108b94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8108b98:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8108b9c:	687b      	ldr	r3, [r7, #4]
 8108b9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108ba0:	2b00      	cmp	r3, #0
 8108ba2:	d108      	bne.n	8108bb6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8108ba4:	687b      	ldr	r3, [r7, #4]
 8108ba6:	2201      	movs	r2, #1
 8108ba8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8108bac:	687b      	ldr	r3, [r7, #4]
 8108bae:	2201      	movs	r2, #1
 8108bb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8108bb4:	e03d      	b.n	8108c32 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8108bb6:	2310      	movs	r3, #16
 8108bb8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8108bba:	2310      	movs	r3, #16
 8108bbc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8108bbe:	687b      	ldr	r3, [r7, #4]
 8108bc0:	681b      	ldr	r3, [r3, #0]
 8108bc2:	689b      	ldr	r3, [r3, #8]
 8108bc4:	0e5b      	lsrs	r3, r3, #25
 8108bc6:	b2db      	uxtb	r3, r3
 8108bc8:	f003 0307 	and.w	r3, r3, #7
 8108bcc:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8108bce:	687b      	ldr	r3, [r7, #4]
 8108bd0:	681b      	ldr	r3, [r3, #0]
 8108bd2:	689b      	ldr	r3, [r3, #8]
 8108bd4:	0f5b      	lsrs	r3, r3, #29
 8108bd6:	b2db      	uxtb	r3, r3
 8108bd8:	f003 0307 	and.w	r3, r3, #7
 8108bdc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8108bde:	7fbb      	ldrb	r3, [r7, #30]
 8108be0:	7f3a      	ldrb	r2, [r7, #28]
 8108be2:	f107 0120 	add.w	r1, r7, #32
 8108be6:	440a      	add	r2, r1
 8108be8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8108bec:	fb02 f303 	mul.w	r3, r2, r3
 8108bf0:	7f3a      	ldrb	r2, [r7, #28]
 8108bf2:	f107 0120 	add.w	r1, r7, #32
 8108bf6:	440a      	add	r2, r1
 8108bf8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8108bfc:	fb93 f3f2 	sdiv	r3, r3, r2
 8108c00:	b29a      	uxth	r2, r3
 8108c02:	687b      	ldr	r3, [r7, #4]
 8108c04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8108c08:	7ffb      	ldrb	r3, [r7, #31]
 8108c0a:	7f7a      	ldrb	r2, [r7, #29]
 8108c0c:	f107 0120 	add.w	r1, r7, #32
 8108c10:	440a      	add	r2, r1
 8108c12:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8108c16:	fb02 f303 	mul.w	r3, r2, r3
 8108c1a:	7f7a      	ldrb	r2, [r7, #29]
 8108c1c:	f107 0120 	add.w	r1, r7, #32
 8108c20:	440a      	add	r2, r1
 8108c22:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8108c26:	fb93 f3f2 	sdiv	r3, r3, r2
 8108c2a:	b29a      	uxth	r2, r3
 8108c2c:	687b      	ldr	r3, [r7, #4]
 8108c2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8108c32:	bf00      	nop
 8108c34:	3724      	adds	r7, #36	; 0x24
 8108c36:	46bd      	mov	sp, r7
 8108c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c3c:	4770      	bx	lr
 8108c3e:	bf00      	nop
 8108c40:	08112368 	.word	0x08112368
 8108c44:	08112370 	.word	0x08112370

08108c48 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8108c48:	b580      	push	{r7, lr}
 8108c4a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8108c4c:	4904      	ldr	r1, [pc, #16]	; (8108c60 <MX_FATFS_Init+0x18>)
 8108c4e:	4805      	ldr	r0, [pc, #20]	; (8108c64 <MX_FATFS_Init+0x1c>)
 8108c50:	f000 f8b0 	bl	8108db4 <FATFS_LinkDriver>
 8108c54:	4603      	mov	r3, r0
 8108c56:	461a      	mov	r2, r3
 8108c58:	4b03      	ldr	r3, [pc, #12]	; (8108c68 <MX_FATFS_Init+0x20>)
 8108c5a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8108c5c:	bf00      	nop
 8108c5e:	bd80      	pop	{r7, pc}
 8108c60:	10009d84 	.word	0x10009d84
 8108c64:	10000010 	.word	0x10000010
 8108c68:	10009d88 	.word	0x10009d88

08108c6c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8108c6c:	b480      	push	{r7}
 8108c6e:	b083      	sub	sp, #12
 8108c70:	af00      	add	r7, sp, #0
 8108c72:	4603      	mov	r3, r0
 8108c74:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8108c76:	4b06      	ldr	r3, [pc, #24]	; (8108c90 <USER_initialize+0x24>)
 8108c78:	2201      	movs	r2, #1
 8108c7a:	701a      	strb	r2, [r3, #0]
    return Stat;
 8108c7c:	4b04      	ldr	r3, [pc, #16]	; (8108c90 <USER_initialize+0x24>)
 8108c7e:	781b      	ldrb	r3, [r3, #0]
 8108c80:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8108c82:	4618      	mov	r0, r3
 8108c84:	370c      	adds	r7, #12
 8108c86:	46bd      	mov	sp, r7
 8108c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c8c:	4770      	bx	lr
 8108c8e:	bf00      	nop
 8108c90:	1000000d 	.word	0x1000000d

08108c94 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8108c94:	b480      	push	{r7}
 8108c96:	b083      	sub	sp, #12
 8108c98:	af00      	add	r7, sp, #0
 8108c9a:	4603      	mov	r3, r0
 8108c9c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8108c9e:	4b06      	ldr	r3, [pc, #24]	; (8108cb8 <USER_status+0x24>)
 8108ca0:	2201      	movs	r2, #1
 8108ca2:	701a      	strb	r2, [r3, #0]
    return Stat;
 8108ca4:	4b04      	ldr	r3, [pc, #16]	; (8108cb8 <USER_status+0x24>)
 8108ca6:	781b      	ldrb	r3, [r3, #0]
 8108ca8:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8108caa:	4618      	mov	r0, r3
 8108cac:	370c      	adds	r7, #12
 8108cae:	46bd      	mov	sp, r7
 8108cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108cb4:	4770      	bx	lr
 8108cb6:	bf00      	nop
 8108cb8:	1000000d 	.word	0x1000000d

08108cbc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8108cbc:	b480      	push	{r7}
 8108cbe:	b085      	sub	sp, #20
 8108cc0:	af00      	add	r7, sp, #0
 8108cc2:	60b9      	str	r1, [r7, #8]
 8108cc4:	607a      	str	r2, [r7, #4]
 8108cc6:	603b      	str	r3, [r7, #0]
 8108cc8:	4603      	mov	r3, r0
 8108cca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8108ccc:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8108cce:	4618      	mov	r0, r3
 8108cd0:	3714      	adds	r7, #20
 8108cd2:	46bd      	mov	sp, r7
 8108cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108cd8:	4770      	bx	lr

08108cda <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8108cda:	b480      	push	{r7}
 8108cdc:	b085      	sub	sp, #20
 8108cde:	af00      	add	r7, sp, #0
 8108ce0:	60b9      	str	r1, [r7, #8]
 8108ce2:	607a      	str	r2, [r7, #4]
 8108ce4:	603b      	str	r3, [r7, #0]
 8108ce6:	4603      	mov	r3, r0
 8108ce8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8108cea:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8108cec:	4618      	mov	r0, r3
 8108cee:	3714      	adds	r7, #20
 8108cf0:	46bd      	mov	sp, r7
 8108cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108cf6:	4770      	bx	lr

08108cf8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8108cf8:	b480      	push	{r7}
 8108cfa:	b085      	sub	sp, #20
 8108cfc:	af00      	add	r7, sp, #0
 8108cfe:	4603      	mov	r3, r0
 8108d00:	603a      	str	r2, [r7, #0]
 8108d02:	71fb      	strb	r3, [r7, #7]
 8108d04:	460b      	mov	r3, r1
 8108d06:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8108d08:	2301      	movs	r3, #1
 8108d0a:	73fb      	strb	r3, [r7, #15]
    return res;
 8108d0c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8108d0e:	4618      	mov	r0, r3
 8108d10:	3714      	adds	r7, #20
 8108d12:	46bd      	mov	sp, r7
 8108d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d18:	4770      	bx	lr
	...

08108d1c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8108d1c:	b480      	push	{r7}
 8108d1e:	b087      	sub	sp, #28
 8108d20:	af00      	add	r7, sp, #0
 8108d22:	60f8      	str	r0, [r7, #12]
 8108d24:	60b9      	str	r1, [r7, #8]
 8108d26:	4613      	mov	r3, r2
 8108d28:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8108d2a:	2301      	movs	r3, #1
 8108d2c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8108d2e:	2300      	movs	r3, #0
 8108d30:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8108d32:	4b1f      	ldr	r3, [pc, #124]	; (8108db0 <FATFS_LinkDriverEx+0x94>)
 8108d34:	7a5b      	ldrb	r3, [r3, #9]
 8108d36:	b2db      	uxtb	r3, r3
 8108d38:	2b00      	cmp	r3, #0
 8108d3a:	d131      	bne.n	8108da0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8108d3c:	4b1c      	ldr	r3, [pc, #112]	; (8108db0 <FATFS_LinkDriverEx+0x94>)
 8108d3e:	7a5b      	ldrb	r3, [r3, #9]
 8108d40:	b2db      	uxtb	r3, r3
 8108d42:	461a      	mov	r2, r3
 8108d44:	4b1a      	ldr	r3, [pc, #104]	; (8108db0 <FATFS_LinkDriverEx+0x94>)
 8108d46:	2100      	movs	r1, #0
 8108d48:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8108d4a:	4b19      	ldr	r3, [pc, #100]	; (8108db0 <FATFS_LinkDriverEx+0x94>)
 8108d4c:	7a5b      	ldrb	r3, [r3, #9]
 8108d4e:	b2db      	uxtb	r3, r3
 8108d50:	4a17      	ldr	r2, [pc, #92]	; (8108db0 <FATFS_LinkDriverEx+0x94>)
 8108d52:	009b      	lsls	r3, r3, #2
 8108d54:	4413      	add	r3, r2
 8108d56:	68fa      	ldr	r2, [r7, #12]
 8108d58:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8108d5a:	4b15      	ldr	r3, [pc, #84]	; (8108db0 <FATFS_LinkDriverEx+0x94>)
 8108d5c:	7a5b      	ldrb	r3, [r3, #9]
 8108d5e:	b2db      	uxtb	r3, r3
 8108d60:	461a      	mov	r2, r3
 8108d62:	4b13      	ldr	r3, [pc, #76]	; (8108db0 <FATFS_LinkDriverEx+0x94>)
 8108d64:	4413      	add	r3, r2
 8108d66:	79fa      	ldrb	r2, [r7, #7]
 8108d68:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8108d6a:	4b11      	ldr	r3, [pc, #68]	; (8108db0 <FATFS_LinkDriverEx+0x94>)
 8108d6c:	7a5b      	ldrb	r3, [r3, #9]
 8108d6e:	b2db      	uxtb	r3, r3
 8108d70:	1c5a      	adds	r2, r3, #1
 8108d72:	b2d1      	uxtb	r1, r2
 8108d74:	4a0e      	ldr	r2, [pc, #56]	; (8108db0 <FATFS_LinkDriverEx+0x94>)
 8108d76:	7251      	strb	r1, [r2, #9]
 8108d78:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8108d7a:	7dbb      	ldrb	r3, [r7, #22]
 8108d7c:	3330      	adds	r3, #48	; 0x30
 8108d7e:	b2da      	uxtb	r2, r3
 8108d80:	68bb      	ldr	r3, [r7, #8]
 8108d82:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8108d84:	68bb      	ldr	r3, [r7, #8]
 8108d86:	3301      	adds	r3, #1
 8108d88:	223a      	movs	r2, #58	; 0x3a
 8108d8a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8108d8c:	68bb      	ldr	r3, [r7, #8]
 8108d8e:	3302      	adds	r3, #2
 8108d90:	222f      	movs	r2, #47	; 0x2f
 8108d92:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8108d94:	68bb      	ldr	r3, [r7, #8]
 8108d96:	3303      	adds	r3, #3
 8108d98:	2200      	movs	r2, #0
 8108d9a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8108d9c:	2300      	movs	r3, #0
 8108d9e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8108da0:	7dfb      	ldrb	r3, [r7, #23]
}
 8108da2:	4618      	mov	r0, r3
 8108da4:	371c      	adds	r7, #28
 8108da6:	46bd      	mov	sp, r7
 8108da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108dac:	4770      	bx	lr
 8108dae:	bf00      	nop
 8108db0:	10000480 	.word	0x10000480

08108db4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8108db4:	b580      	push	{r7, lr}
 8108db6:	b082      	sub	sp, #8
 8108db8:	af00      	add	r7, sp, #0
 8108dba:	6078      	str	r0, [r7, #4]
 8108dbc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8108dbe:	2200      	movs	r2, #0
 8108dc0:	6839      	ldr	r1, [r7, #0]
 8108dc2:	6878      	ldr	r0, [r7, #4]
 8108dc4:	f7ff ffaa 	bl	8108d1c <FATFS_LinkDriverEx>
 8108dc8:	4603      	mov	r3, r0
}
 8108dca:	4618      	mov	r0, r3
 8108dcc:	3708      	adds	r7, #8
 8108dce:	46bd      	mov	sp, r7
 8108dd0:	bd80      	pop	{r7, pc}

08108dd2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8108dd2:	b480      	push	{r7}
 8108dd4:	b085      	sub	sp, #20
 8108dd6:	af00      	add	r7, sp, #0
 8108dd8:	4603      	mov	r3, r0
 8108dda:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8108ddc:	2300      	movs	r3, #0
 8108dde:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8108de0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8108de4:	2b84      	cmp	r3, #132	; 0x84
 8108de6:	d005      	beq.n	8108df4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8108de8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8108dec:	68fb      	ldr	r3, [r7, #12]
 8108dee:	4413      	add	r3, r2
 8108df0:	3303      	adds	r3, #3
 8108df2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8108df4:	68fb      	ldr	r3, [r7, #12]
}
 8108df6:	4618      	mov	r0, r3
 8108df8:	3714      	adds	r7, #20
 8108dfa:	46bd      	mov	sp, r7
 8108dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e00:	4770      	bx	lr

08108e02 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8108e02:	b580      	push	{r7, lr}
 8108e04:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8108e06:	f001 f9f1 	bl	810a1ec <vTaskStartScheduler>
  
  return osOK;
 8108e0a:	2300      	movs	r3, #0
}
 8108e0c:	4618      	mov	r0, r3
 8108e0e:	bd80      	pop	{r7, pc}

08108e10 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8108e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8108e12:	b089      	sub	sp, #36	; 0x24
 8108e14:	af04      	add	r7, sp, #16
 8108e16:	6078      	str	r0, [r7, #4]
 8108e18:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8108e1a:	687b      	ldr	r3, [r7, #4]
 8108e1c:	695b      	ldr	r3, [r3, #20]
 8108e1e:	2b00      	cmp	r3, #0
 8108e20:	d020      	beq.n	8108e64 <osThreadCreate+0x54>
 8108e22:	687b      	ldr	r3, [r7, #4]
 8108e24:	699b      	ldr	r3, [r3, #24]
 8108e26:	2b00      	cmp	r3, #0
 8108e28:	d01c      	beq.n	8108e64 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8108e2a:	687b      	ldr	r3, [r7, #4]
 8108e2c:	685c      	ldr	r4, [r3, #4]
 8108e2e:	687b      	ldr	r3, [r7, #4]
 8108e30:	681d      	ldr	r5, [r3, #0]
 8108e32:	687b      	ldr	r3, [r7, #4]
 8108e34:	691e      	ldr	r6, [r3, #16]
 8108e36:	687b      	ldr	r3, [r7, #4]
 8108e38:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8108e3c:	4618      	mov	r0, r3
 8108e3e:	f7ff ffc8 	bl	8108dd2 <makeFreeRtosPriority>
 8108e42:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8108e44:	687b      	ldr	r3, [r7, #4]
 8108e46:	695b      	ldr	r3, [r3, #20]
 8108e48:	687a      	ldr	r2, [r7, #4]
 8108e4a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8108e4c:	9202      	str	r2, [sp, #8]
 8108e4e:	9301      	str	r3, [sp, #4]
 8108e50:	9100      	str	r1, [sp, #0]
 8108e52:	683b      	ldr	r3, [r7, #0]
 8108e54:	4632      	mov	r2, r6
 8108e56:	4629      	mov	r1, r5
 8108e58:	4620      	mov	r0, r4
 8108e5a:	f001 f803 	bl	8109e64 <xTaskCreateStatic>
 8108e5e:	4603      	mov	r3, r0
 8108e60:	60fb      	str	r3, [r7, #12]
 8108e62:	e01c      	b.n	8108e9e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8108e64:	687b      	ldr	r3, [r7, #4]
 8108e66:	685c      	ldr	r4, [r3, #4]
 8108e68:	687b      	ldr	r3, [r7, #4]
 8108e6a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8108e6c:	687b      	ldr	r3, [r7, #4]
 8108e6e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8108e70:	b29e      	uxth	r6, r3
 8108e72:	687b      	ldr	r3, [r7, #4]
 8108e74:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8108e78:	4618      	mov	r0, r3
 8108e7a:	f7ff ffaa 	bl	8108dd2 <makeFreeRtosPriority>
 8108e7e:	4602      	mov	r2, r0
 8108e80:	f107 030c 	add.w	r3, r7, #12
 8108e84:	9301      	str	r3, [sp, #4]
 8108e86:	9200      	str	r2, [sp, #0]
 8108e88:	683b      	ldr	r3, [r7, #0]
 8108e8a:	4632      	mov	r2, r6
 8108e8c:	4629      	mov	r1, r5
 8108e8e:	4620      	mov	r0, r4
 8108e90:	f001 f842 	bl	8109f18 <xTaskCreate>
 8108e94:	4603      	mov	r3, r0
 8108e96:	2b01      	cmp	r3, #1
 8108e98:	d001      	beq.n	8108e9e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8108e9a:	2300      	movs	r3, #0
 8108e9c:	e000      	b.n	8108ea0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8108e9e:	68fb      	ldr	r3, [r7, #12]
}
 8108ea0:	4618      	mov	r0, r3
 8108ea2:	3714      	adds	r7, #20
 8108ea4:	46bd      	mov	sp, r7
 8108ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08108ea8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8108ea8:	b580      	push	{r7, lr}
 8108eaa:	b084      	sub	sp, #16
 8108eac:	af00      	add	r7, sp, #0
 8108eae:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8108eb0:	687b      	ldr	r3, [r7, #4]
 8108eb2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8108eb4:	68fb      	ldr	r3, [r7, #12]
 8108eb6:	2b00      	cmp	r3, #0
 8108eb8:	d001      	beq.n	8108ebe <osDelay+0x16>
 8108eba:	68fb      	ldr	r3, [r7, #12]
 8108ebc:	e000      	b.n	8108ec0 <osDelay+0x18>
 8108ebe:	2301      	movs	r3, #1
 8108ec0:	4618      	mov	r0, r3
 8108ec2:	f001 f95f 	bl	810a184 <vTaskDelay>
  
  return osOK;
 8108ec6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8108ec8:	4618      	mov	r0, r3
 8108eca:	3710      	adds	r7, #16
 8108ecc:	46bd      	mov	sp, r7
 8108ece:	bd80      	pop	{r7, pc}

08108ed0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8108ed0:	b580      	push	{r7, lr}
 8108ed2:	b086      	sub	sp, #24
 8108ed4:	af02      	add	r7, sp, #8
 8108ed6:	6078      	str	r0, [r7, #4]
 8108ed8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8108eda:	687b      	ldr	r3, [r7, #4]
 8108edc:	685b      	ldr	r3, [r3, #4]
 8108ede:	2b00      	cmp	r3, #0
 8108ee0:	d010      	beq.n	8108f04 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8108ee2:	683b      	ldr	r3, [r7, #0]
 8108ee4:	2b01      	cmp	r3, #1
 8108ee6:	d10b      	bne.n	8108f00 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8108ee8:	687b      	ldr	r3, [r7, #4]
 8108eea:	685a      	ldr	r2, [r3, #4]
 8108eec:	2303      	movs	r3, #3
 8108eee:	9300      	str	r3, [sp, #0]
 8108ef0:	4613      	mov	r3, r2
 8108ef2:	2200      	movs	r2, #0
 8108ef4:	2100      	movs	r1, #0
 8108ef6:	2001      	movs	r0, #1
 8108ef8:	f000 fd14 	bl	8109924 <xQueueGenericCreateStatic>
 8108efc:	4603      	mov	r3, r0
 8108efe:	e016      	b.n	8108f2e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8108f00:	2300      	movs	r3, #0
 8108f02:	e014      	b.n	8108f2e <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8108f04:	683b      	ldr	r3, [r7, #0]
 8108f06:	2b01      	cmp	r3, #1
 8108f08:	d110      	bne.n	8108f2c <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8108f0a:	2203      	movs	r2, #3
 8108f0c:	2100      	movs	r1, #0
 8108f0e:	2001      	movs	r0, #1
 8108f10:	f000 fd7b 	bl	8109a0a <xQueueGenericCreate>
 8108f14:	60f8      	str	r0, [r7, #12]
 8108f16:	68fb      	ldr	r3, [r7, #12]
 8108f18:	2b00      	cmp	r3, #0
 8108f1a:	d005      	beq.n	8108f28 <osSemaphoreCreate+0x58>
 8108f1c:	2300      	movs	r3, #0
 8108f1e:	2200      	movs	r2, #0
 8108f20:	2100      	movs	r1, #0
 8108f22:	68f8      	ldr	r0, [r7, #12]
 8108f24:	f000 fdd0 	bl	8109ac8 <xQueueGenericSend>
      return sema;
 8108f28:	68fb      	ldr	r3, [r7, #12]
 8108f2a:	e000      	b.n	8108f2e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8108f2c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8108f2e:	4618      	mov	r0, r3
 8108f30:	3710      	adds	r7, #16
 8108f32:	46bd      	mov	sp, r7
 8108f34:	bd80      	pop	{r7, pc}
	...

08108f38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8108f38:	b580      	push	{r7, lr}
 8108f3a:	b08a      	sub	sp, #40	; 0x28
 8108f3c:	af00      	add	r7, sp, #0
 8108f3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8108f40:	2300      	movs	r3, #0
 8108f42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8108f44:	f001 f9b0 	bl	810a2a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8108f48:	4b57      	ldr	r3, [pc, #348]	; (81090a8 <pvPortMalloc+0x170>)
 8108f4a:	681b      	ldr	r3, [r3, #0]
 8108f4c:	2b00      	cmp	r3, #0
 8108f4e:	d101      	bne.n	8108f54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8108f50:	f000 f90c 	bl	810916c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8108f54:	4b55      	ldr	r3, [pc, #340]	; (81090ac <pvPortMalloc+0x174>)
 8108f56:	681a      	ldr	r2, [r3, #0]
 8108f58:	687b      	ldr	r3, [r7, #4]
 8108f5a:	4013      	ands	r3, r2
 8108f5c:	2b00      	cmp	r3, #0
 8108f5e:	f040 808c 	bne.w	810907a <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8108f62:	687b      	ldr	r3, [r7, #4]
 8108f64:	2b00      	cmp	r3, #0
 8108f66:	d01c      	beq.n	8108fa2 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8108f68:	2208      	movs	r2, #8
 8108f6a:	687b      	ldr	r3, [r7, #4]
 8108f6c:	4413      	add	r3, r2
 8108f6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8108f70:	687b      	ldr	r3, [r7, #4]
 8108f72:	f003 0307 	and.w	r3, r3, #7
 8108f76:	2b00      	cmp	r3, #0
 8108f78:	d013      	beq.n	8108fa2 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8108f7a:	687b      	ldr	r3, [r7, #4]
 8108f7c:	f023 0307 	bic.w	r3, r3, #7
 8108f80:	3308      	adds	r3, #8
 8108f82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8108f84:	687b      	ldr	r3, [r7, #4]
 8108f86:	f003 0307 	and.w	r3, r3, #7
 8108f8a:	2b00      	cmp	r3, #0
 8108f8c:	d009      	beq.n	8108fa2 <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8108f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108f92:	f383 8811 	msr	BASEPRI, r3
 8108f96:	f3bf 8f6f 	isb	sy
 8108f9a:	f3bf 8f4f 	dsb	sy
 8108f9e:	617b      	str	r3, [r7, #20]
 8108fa0:	e7fe      	b.n	8108fa0 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8108fa2:	687b      	ldr	r3, [r7, #4]
 8108fa4:	2b00      	cmp	r3, #0
 8108fa6:	d068      	beq.n	810907a <pvPortMalloc+0x142>
 8108fa8:	4b41      	ldr	r3, [pc, #260]	; (81090b0 <pvPortMalloc+0x178>)
 8108faa:	681b      	ldr	r3, [r3, #0]
 8108fac:	687a      	ldr	r2, [r7, #4]
 8108fae:	429a      	cmp	r2, r3
 8108fb0:	d863      	bhi.n	810907a <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8108fb2:	4b40      	ldr	r3, [pc, #256]	; (81090b4 <pvPortMalloc+0x17c>)
 8108fb4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8108fb6:	4b3f      	ldr	r3, [pc, #252]	; (81090b4 <pvPortMalloc+0x17c>)
 8108fb8:	681b      	ldr	r3, [r3, #0]
 8108fba:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8108fbc:	e004      	b.n	8108fc8 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8108fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108fc0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8108fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108fc4:	681b      	ldr	r3, [r3, #0]
 8108fc6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8108fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108fca:	685b      	ldr	r3, [r3, #4]
 8108fcc:	687a      	ldr	r2, [r7, #4]
 8108fce:	429a      	cmp	r2, r3
 8108fd0:	d903      	bls.n	8108fda <pvPortMalloc+0xa2>
 8108fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108fd4:	681b      	ldr	r3, [r3, #0]
 8108fd6:	2b00      	cmp	r3, #0
 8108fd8:	d1f1      	bne.n	8108fbe <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8108fda:	4b33      	ldr	r3, [pc, #204]	; (81090a8 <pvPortMalloc+0x170>)
 8108fdc:	681b      	ldr	r3, [r3, #0]
 8108fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8108fe0:	429a      	cmp	r2, r3
 8108fe2:	d04a      	beq.n	810907a <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8108fe4:	6a3b      	ldr	r3, [r7, #32]
 8108fe6:	681b      	ldr	r3, [r3, #0]
 8108fe8:	2208      	movs	r2, #8
 8108fea:	4413      	add	r3, r2
 8108fec:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8108fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108ff0:	681a      	ldr	r2, [r3, #0]
 8108ff2:	6a3b      	ldr	r3, [r7, #32]
 8108ff4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8108ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108ff8:	685a      	ldr	r2, [r3, #4]
 8108ffa:	687b      	ldr	r3, [r7, #4]
 8108ffc:	1ad2      	subs	r2, r2, r3
 8108ffe:	2308      	movs	r3, #8
 8109000:	005b      	lsls	r3, r3, #1
 8109002:	429a      	cmp	r2, r3
 8109004:	d91e      	bls.n	8109044 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8109006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8109008:	687b      	ldr	r3, [r7, #4]
 810900a:	4413      	add	r3, r2
 810900c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 810900e:	69bb      	ldr	r3, [r7, #24]
 8109010:	f003 0307 	and.w	r3, r3, #7
 8109014:	2b00      	cmp	r3, #0
 8109016:	d009      	beq.n	810902c <pvPortMalloc+0xf4>
 8109018:	f04f 0350 	mov.w	r3, #80	; 0x50
 810901c:	f383 8811 	msr	BASEPRI, r3
 8109020:	f3bf 8f6f 	isb	sy
 8109024:	f3bf 8f4f 	dsb	sy
 8109028:	613b      	str	r3, [r7, #16]
 810902a:	e7fe      	b.n	810902a <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 810902c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810902e:	685a      	ldr	r2, [r3, #4]
 8109030:	687b      	ldr	r3, [r7, #4]
 8109032:	1ad2      	subs	r2, r2, r3
 8109034:	69bb      	ldr	r3, [r7, #24]
 8109036:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8109038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810903a:	687a      	ldr	r2, [r7, #4]
 810903c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 810903e:	69b8      	ldr	r0, [r7, #24]
 8109040:	f000 f8f6 	bl	8109230 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8109044:	4b1a      	ldr	r3, [pc, #104]	; (81090b0 <pvPortMalloc+0x178>)
 8109046:	681a      	ldr	r2, [r3, #0]
 8109048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810904a:	685b      	ldr	r3, [r3, #4]
 810904c:	1ad3      	subs	r3, r2, r3
 810904e:	4a18      	ldr	r2, [pc, #96]	; (81090b0 <pvPortMalloc+0x178>)
 8109050:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8109052:	4b17      	ldr	r3, [pc, #92]	; (81090b0 <pvPortMalloc+0x178>)
 8109054:	681a      	ldr	r2, [r3, #0]
 8109056:	4b18      	ldr	r3, [pc, #96]	; (81090b8 <pvPortMalloc+0x180>)
 8109058:	681b      	ldr	r3, [r3, #0]
 810905a:	429a      	cmp	r2, r3
 810905c:	d203      	bcs.n	8109066 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 810905e:	4b14      	ldr	r3, [pc, #80]	; (81090b0 <pvPortMalloc+0x178>)
 8109060:	681b      	ldr	r3, [r3, #0]
 8109062:	4a15      	ldr	r2, [pc, #84]	; (81090b8 <pvPortMalloc+0x180>)
 8109064:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8109066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109068:	685a      	ldr	r2, [r3, #4]
 810906a:	4b10      	ldr	r3, [pc, #64]	; (81090ac <pvPortMalloc+0x174>)
 810906c:	681b      	ldr	r3, [r3, #0]
 810906e:	431a      	orrs	r2, r3
 8109070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109072:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8109074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109076:	2200      	movs	r2, #0
 8109078:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 810907a:	f001 f923 	bl	810a2c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 810907e:	69fb      	ldr	r3, [r7, #28]
 8109080:	f003 0307 	and.w	r3, r3, #7
 8109084:	2b00      	cmp	r3, #0
 8109086:	d009      	beq.n	810909c <pvPortMalloc+0x164>
 8109088:	f04f 0350 	mov.w	r3, #80	; 0x50
 810908c:	f383 8811 	msr	BASEPRI, r3
 8109090:	f3bf 8f6f 	isb	sy
 8109094:	f3bf 8f4f 	dsb	sy
 8109098:	60fb      	str	r3, [r7, #12]
 810909a:	e7fe      	b.n	810909a <pvPortMalloc+0x162>
	return pvReturn;
 810909c:	69fb      	ldr	r3, [r7, #28]
}
 810909e:	4618      	mov	r0, r3
 81090a0:	3728      	adds	r7, #40	; 0x28
 81090a2:	46bd      	mov	sp, r7
 81090a4:	bd80      	pop	{r7, pc}
 81090a6:	bf00      	nop
 81090a8:	10004094 	.word	0x10004094
 81090ac:	100040a0 	.word	0x100040a0
 81090b0:	10004098 	.word	0x10004098
 81090b4:	1000408c 	.word	0x1000408c
 81090b8:	1000409c 	.word	0x1000409c

081090bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 81090bc:	b580      	push	{r7, lr}
 81090be:	b086      	sub	sp, #24
 81090c0:	af00      	add	r7, sp, #0
 81090c2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 81090c4:	687b      	ldr	r3, [r7, #4]
 81090c6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 81090c8:	687b      	ldr	r3, [r7, #4]
 81090ca:	2b00      	cmp	r3, #0
 81090cc:	d046      	beq.n	810915c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 81090ce:	2308      	movs	r3, #8
 81090d0:	425b      	negs	r3, r3
 81090d2:	697a      	ldr	r2, [r7, #20]
 81090d4:	4413      	add	r3, r2
 81090d6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 81090d8:	697b      	ldr	r3, [r7, #20]
 81090da:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 81090dc:	693b      	ldr	r3, [r7, #16]
 81090de:	685a      	ldr	r2, [r3, #4]
 81090e0:	4b20      	ldr	r3, [pc, #128]	; (8109164 <vPortFree+0xa8>)
 81090e2:	681b      	ldr	r3, [r3, #0]
 81090e4:	4013      	ands	r3, r2
 81090e6:	2b00      	cmp	r3, #0
 81090e8:	d109      	bne.n	81090fe <vPortFree+0x42>
 81090ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 81090ee:	f383 8811 	msr	BASEPRI, r3
 81090f2:	f3bf 8f6f 	isb	sy
 81090f6:	f3bf 8f4f 	dsb	sy
 81090fa:	60fb      	str	r3, [r7, #12]
 81090fc:	e7fe      	b.n	81090fc <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 81090fe:	693b      	ldr	r3, [r7, #16]
 8109100:	681b      	ldr	r3, [r3, #0]
 8109102:	2b00      	cmp	r3, #0
 8109104:	d009      	beq.n	810911a <vPortFree+0x5e>
 8109106:	f04f 0350 	mov.w	r3, #80	; 0x50
 810910a:	f383 8811 	msr	BASEPRI, r3
 810910e:	f3bf 8f6f 	isb	sy
 8109112:	f3bf 8f4f 	dsb	sy
 8109116:	60bb      	str	r3, [r7, #8]
 8109118:	e7fe      	b.n	8109118 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 810911a:	693b      	ldr	r3, [r7, #16]
 810911c:	685a      	ldr	r2, [r3, #4]
 810911e:	4b11      	ldr	r3, [pc, #68]	; (8109164 <vPortFree+0xa8>)
 8109120:	681b      	ldr	r3, [r3, #0]
 8109122:	4013      	ands	r3, r2
 8109124:	2b00      	cmp	r3, #0
 8109126:	d019      	beq.n	810915c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8109128:	693b      	ldr	r3, [r7, #16]
 810912a:	681b      	ldr	r3, [r3, #0]
 810912c:	2b00      	cmp	r3, #0
 810912e:	d115      	bne.n	810915c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8109130:	693b      	ldr	r3, [r7, #16]
 8109132:	685a      	ldr	r2, [r3, #4]
 8109134:	4b0b      	ldr	r3, [pc, #44]	; (8109164 <vPortFree+0xa8>)
 8109136:	681b      	ldr	r3, [r3, #0]
 8109138:	43db      	mvns	r3, r3
 810913a:	401a      	ands	r2, r3
 810913c:	693b      	ldr	r3, [r7, #16]
 810913e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8109140:	f001 f8b2 	bl	810a2a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8109144:	693b      	ldr	r3, [r7, #16]
 8109146:	685a      	ldr	r2, [r3, #4]
 8109148:	4b07      	ldr	r3, [pc, #28]	; (8109168 <vPortFree+0xac>)
 810914a:	681b      	ldr	r3, [r3, #0]
 810914c:	4413      	add	r3, r2
 810914e:	4a06      	ldr	r2, [pc, #24]	; (8109168 <vPortFree+0xac>)
 8109150:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8109152:	6938      	ldr	r0, [r7, #16]
 8109154:	f000 f86c 	bl	8109230 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8109158:	f001 f8b4 	bl	810a2c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 810915c:	bf00      	nop
 810915e:	3718      	adds	r7, #24
 8109160:	46bd      	mov	sp, r7
 8109162:	bd80      	pop	{r7, pc}
 8109164:	100040a0 	.word	0x100040a0
 8109168:	10004098 	.word	0x10004098

0810916c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 810916c:	b480      	push	{r7}
 810916e:	b085      	sub	sp, #20
 8109170:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8109172:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8109176:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8109178:	4b27      	ldr	r3, [pc, #156]	; (8109218 <prvHeapInit+0xac>)
 810917a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 810917c:	68fb      	ldr	r3, [r7, #12]
 810917e:	f003 0307 	and.w	r3, r3, #7
 8109182:	2b00      	cmp	r3, #0
 8109184:	d00c      	beq.n	81091a0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8109186:	68fb      	ldr	r3, [r7, #12]
 8109188:	3307      	adds	r3, #7
 810918a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 810918c:	68fb      	ldr	r3, [r7, #12]
 810918e:	f023 0307 	bic.w	r3, r3, #7
 8109192:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8109194:	68ba      	ldr	r2, [r7, #8]
 8109196:	68fb      	ldr	r3, [r7, #12]
 8109198:	1ad3      	subs	r3, r2, r3
 810919a:	4a1f      	ldr	r2, [pc, #124]	; (8109218 <prvHeapInit+0xac>)
 810919c:	4413      	add	r3, r2
 810919e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 81091a0:	68fb      	ldr	r3, [r7, #12]
 81091a2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 81091a4:	4a1d      	ldr	r2, [pc, #116]	; (810921c <prvHeapInit+0xb0>)
 81091a6:	687b      	ldr	r3, [r7, #4]
 81091a8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 81091aa:	4b1c      	ldr	r3, [pc, #112]	; (810921c <prvHeapInit+0xb0>)
 81091ac:	2200      	movs	r2, #0
 81091ae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 81091b0:	687b      	ldr	r3, [r7, #4]
 81091b2:	68ba      	ldr	r2, [r7, #8]
 81091b4:	4413      	add	r3, r2
 81091b6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 81091b8:	2208      	movs	r2, #8
 81091ba:	68fb      	ldr	r3, [r7, #12]
 81091bc:	1a9b      	subs	r3, r3, r2
 81091be:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 81091c0:	68fb      	ldr	r3, [r7, #12]
 81091c2:	f023 0307 	bic.w	r3, r3, #7
 81091c6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 81091c8:	68fb      	ldr	r3, [r7, #12]
 81091ca:	4a15      	ldr	r2, [pc, #84]	; (8109220 <prvHeapInit+0xb4>)
 81091cc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 81091ce:	4b14      	ldr	r3, [pc, #80]	; (8109220 <prvHeapInit+0xb4>)
 81091d0:	681b      	ldr	r3, [r3, #0]
 81091d2:	2200      	movs	r2, #0
 81091d4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 81091d6:	4b12      	ldr	r3, [pc, #72]	; (8109220 <prvHeapInit+0xb4>)
 81091d8:	681b      	ldr	r3, [r3, #0]
 81091da:	2200      	movs	r2, #0
 81091dc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 81091de:	687b      	ldr	r3, [r7, #4]
 81091e0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 81091e2:	683b      	ldr	r3, [r7, #0]
 81091e4:	68fa      	ldr	r2, [r7, #12]
 81091e6:	1ad2      	subs	r2, r2, r3
 81091e8:	683b      	ldr	r3, [r7, #0]
 81091ea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 81091ec:	4b0c      	ldr	r3, [pc, #48]	; (8109220 <prvHeapInit+0xb4>)
 81091ee:	681a      	ldr	r2, [r3, #0]
 81091f0:	683b      	ldr	r3, [r7, #0]
 81091f2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 81091f4:	683b      	ldr	r3, [r7, #0]
 81091f6:	685b      	ldr	r3, [r3, #4]
 81091f8:	4a0a      	ldr	r2, [pc, #40]	; (8109224 <prvHeapInit+0xb8>)
 81091fa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 81091fc:	683b      	ldr	r3, [r7, #0]
 81091fe:	685b      	ldr	r3, [r3, #4]
 8109200:	4a09      	ldr	r2, [pc, #36]	; (8109228 <prvHeapInit+0xbc>)
 8109202:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8109204:	4b09      	ldr	r3, [pc, #36]	; (810922c <prvHeapInit+0xc0>)
 8109206:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 810920a:	601a      	str	r2, [r3, #0]
}
 810920c:	bf00      	nop
 810920e:	3714      	adds	r7, #20
 8109210:	46bd      	mov	sp, r7
 8109212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109216:	4770      	bx	lr
 8109218:	1000048c 	.word	0x1000048c
 810921c:	1000408c 	.word	0x1000408c
 8109220:	10004094 	.word	0x10004094
 8109224:	1000409c 	.word	0x1000409c
 8109228:	10004098 	.word	0x10004098
 810922c:	100040a0 	.word	0x100040a0

08109230 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8109230:	b480      	push	{r7}
 8109232:	b085      	sub	sp, #20
 8109234:	af00      	add	r7, sp, #0
 8109236:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8109238:	4b28      	ldr	r3, [pc, #160]	; (81092dc <prvInsertBlockIntoFreeList+0xac>)
 810923a:	60fb      	str	r3, [r7, #12]
 810923c:	e002      	b.n	8109244 <prvInsertBlockIntoFreeList+0x14>
 810923e:	68fb      	ldr	r3, [r7, #12]
 8109240:	681b      	ldr	r3, [r3, #0]
 8109242:	60fb      	str	r3, [r7, #12]
 8109244:	68fb      	ldr	r3, [r7, #12]
 8109246:	681b      	ldr	r3, [r3, #0]
 8109248:	687a      	ldr	r2, [r7, #4]
 810924a:	429a      	cmp	r2, r3
 810924c:	d8f7      	bhi.n	810923e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 810924e:	68fb      	ldr	r3, [r7, #12]
 8109250:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8109252:	68fb      	ldr	r3, [r7, #12]
 8109254:	685b      	ldr	r3, [r3, #4]
 8109256:	68ba      	ldr	r2, [r7, #8]
 8109258:	4413      	add	r3, r2
 810925a:	687a      	ldr	r2, [r7, #4]
 810925c:	429a      	cmp	r2, r3
 810925e:	d108      	bne.n	8109272 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8109260:	68fb      	ldr	r3, [r7, #12]
 8109262:	685a      	ldr	r2, [r3, #4]
 8109264:	687b      	ldr	r3, [r7, #4]
 8109266:	685b      	ldr	r3, [r3, #4]
 8109268:	441a      	add	r2, r3
 810926a:	68fb      	ldr	r3, [r7, #12]
 810926c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 810926e:	68fb      	ldr	r3, [r7, #12]
 8109270:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8109272:	687b      	ldr	r3, [r7, #4]
 8109274:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8109276:	687b      	ldr	r3, [r7, #4]
 8109278:	685b      	ldr	r3, [r3, #4]
 810927a:	68ba      	ldr	r2, [r7, #8]
 810927c:	441a      	add	r2, r3
 810927e:	68fb      	ldr	r3, [r7, #12]
 8109280:	681b      	ldr	r3, [r3, #0]
 8109282:	429a      	cmp	r2, r3
 8109284:	d118      	bne.n	81092b8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8109286:	68fb      	ldr	r3, [r7, #12]
 8109288:	681a      	ldr	r2, [r3, #0]
 810928a:	4b15      	ldr	r3, [pc, #84]	; (81092e0 <prvInsertBlockIntoFreeList+0xb0>)
 810928c:	681b      	ldr	r3, [r3, #0]
 810928e:	429a      	cmp	r2, r3
 8109290:	d00d      	beq.n	81092ae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8109292:	687b      	ldr	r3, [r7, #4]
 8109294:	685a      	ldr	r2, [r3, #4]
 8109296:	68fb      	ldr	r3, [r7, #12]
 8109298:	681b      	ldr	r3, [r3, #0]
 810929a:	685b      	ldr	r3, [r3, #4]
 810929c:	441a      	add	r2, r3
 810929e:	687b      	ldr	r3, [r7, #4]
 81092a0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 81092a2:	68fb      	ldr	r3, [r7, #12]
 81092a4:	681b      	ldr	r3, [r3, #0]
 81092a6:	681a      	ldr	r2, [r3, #0]
 81092a8:	687b      	ldr	r3, [r7, #4]
 81092aa:	601a      	str	r2, [r3, #0]
 81092ac:	e008      	b.n	81092c0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 81092ae:	4b0c      	ldr	r3, [pc, #48]	; (81092e0 <prvInsertBlockIntoFreeList+0xb0>)
 81092b0:	681a      	ldr	r2, [r3, #0]
 81092b2:	687b      	ldr	r3, [r7, #4]
 81092b4:	601a      	str	r2, [r3, #0]
 81092b6:	e003      	b.n	81092c0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 81092b8:	68fb      	ldr	r3, [r7, #12]
 81092ba:	681a      	ldr	r2, [r3, #0]
 81092bc:	687b      	ldr	r3, [r7, #4]
 81092be:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 81092c0:	68fa      	ldr	r2, [r7, #12]
 81092c2:	687b      	ldr	r3, [r7, #4]
 81092c4:	429a      	cmp	r2, r3
 81092c6:	d002      	beq.n	81092ce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 81092c8:	68fb      	ldr	r3, [r7, #12]
 81092ca:	687a      	ldr	r2, [r7, #4]
 81092cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 81092ce:	bf00      	nop
 81092d0:	3714      	adds	r7, #20
 81092d2:	46bd      	mov	sp, r7
 81092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81092d8:	4770      	bx	lr
 81092da:	bf00      	nop
 81092dc:	1000408c 	.word	0x1000408c
 81092e0:	10004094 	.word	0x10004094

081092e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 81092e4:	b480      	push	{r7}
 81092e6:	b083      	sub	sp, #12
 81092e8:	af00      	add	r7, sp, #0
 81092ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 81092ec:	687b      	ldr	r3, [r7, #4]
 81092ee:	f103 0208 	add.w	r2, r3, #8
 81092f2:	687b      	ldr	r3, [r7, #4]
 81092f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 81092f6:	687b      	ldr	r3, [r7, #4]
 81092f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 81092fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 81092fe:	687b      	ldr	r3, [r7, #4]
 8109300:	f103 0208 	add.w	r2, r3, #8
 8109304:	687b      	ldr	r3, [r7, #4]
 8109306:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8109308:	687b      	ldr	r3, [r7, #4]
 810930a:	f103 0208 	add.w	r2, r3, #8
 810930e:	687b      	ldr	r3, [r7, #4]
 8109310:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8109312:	687b      	ldr	r3, [r7, #4]
 8109314:	2200      	movs	r2, #0
 8109316:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8109318:	bf00      	nop
 810931a:	370c      	adds	r7, #12
 810931c:	46bd      	mov	sp, r7
 810931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109322:	4770      	bx	lr

08109324 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8109324:	b480      	push	{r7}
 8109326:	b083      	sub	sp, #12
 8109328:	af00      	add	r7, sp, #0
 810932a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 810932c:	687b      	ldr	r3, [r7, #4]
 810932e:	2200      	movs	r2, #0
 8109330:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8109332:	bf00      	nop
 8109334:	370c      	adds	r7, #12
 8109336:	46bd      	mov	sp, r7
 8109338:	f85d 7b04 	ldr.w	r7, [sp], #4
 810933c:	4770      	bx	lr

0810933e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810933e:	b480      	push	{r7}
 8109340:	b085      	sub	sp, #20
 8109342:	af00      	add	r7, sp, #0
 8109344:	6078      	str	r0, [r7, #4]
 8109346:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8109348:	687b      	ldr	r3, [r7, #4]
 810934a:	685b      	ldr	r3, [r3, #4]
 810934c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 810934e:	683b      	ldr	r3, [r7, #0]
 8109350:	68fa      	ldr	r2, [r7, #12]
 8109352:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8109354:	68fb      	ldr	r3, [r7, #12]
 8109356:	689a      	ldr	r2, [r3, #8]
 8109358:	683b      	ldr	r3, [r7, #0]
 810935a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 810935c:	68fb      	ldr	r3, [r7, #12]
 810935e:	689b      	ldr	r3, [r3, #8]
 8109360:	683a      	ldr	r2, [r7, #0]
 8109362:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8109364:	68fb      	ldr	r3, [r7, #12]
 8109366:	683a      	ldr	r2, [r7, #0]
 8109368:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 810936a:	683b      	ldr	r3, [r7, #0]
 810936c:	687a      	ldr	r2, [r7, #4]
 810936e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8109370:	687b      	ldr	r3, [r7, #4]
 8109372:	681b      	ldr	r3, [r3, #0]
 8109374:	1c5a      	adds	r2, r3, #1
 8109376:	687b      	ldr	r3, [r7, #4]
 8109378:	601a      	str	r2, [r3, #0]
}
 810937a:	bf00      	nop
 810937c:	3714      	adds	r7, #20
 810937e:	46bd      	mov	sp, r7
 8109380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109384:	4770      	bx	lr

08109386 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8109386:	b480      	push	{r7}
 8109388:	b085      	sub	sp, #20
 810938a:	af00      	add	r7, sp, #0
 810938c:	6078      	str	r0, [r7, #4]
 810938e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8109390:	683b      	ldr	r3, [r7, #0]
 8109392:	681b      	ldr	r3, [r3, #0]
 8109394:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8109396:	68bb      	ldr	r3, [r7, #8]
 8109398:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810939c:	d103      	bne.n	81093a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 810939e:	687b      	ldr	r3, [r7, #4]
 81093a0:	691b      	ldr	r3, [r3, #16]
 81093a2:	60fb      	str	r3, [r7, #12]
 81093a4:	e00c      	b.n	81093c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 81093a6:	687b      	ldr	r3, [r7, #4]
 81093a8:	3308      	adds	r3, #8
 81093aa:	60fb      	str	r3, [r7, #12]
 81093ac:	e002      	b.n	81093b4 <vListInsert+0x2e>
 81093ae:	68fb      	ldr	r3, [r7, #12]
 81093b0:	685b      	ldr	r3, [r3, #4]
 81093b2:	60fb      	str	r3, [r7, #12]
 81093b4:	68fb      	ldr	r3, [r7, #12]
 81093b6:	685b      	ldr	r3, [r3, #4]
 81093b8:	681b      	ldr	r3, [r3, #0]
 81093ba:	68ba      	ldr	r2, [r7, #8]
 81093bc:	429a      	cmp	r2, r3
 81093be:	d2f6      	bcs.n	81093ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 81093c0:	68fb      	ldr	r3, [r7, #12]
 81093c2:	685a      	ldr	r2, [r3, #4]
 81093c4:	683b      	ldr	r3, [r7, #0]
 81093c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 81093c8:	683b      	ldr	r3, [r7, #0]
 81093ca:	685b      	ldr	r3, [r3, #4]
 81093cc:	683a      	ldr	r2, [r7, #0]
 81093ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 81093d0:	683b      	ldr	r3, [r7, #0]
 81093d2:	68fa      	ldr	r2, [r7, #12]
 81093d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 81093d6:	68fb      	ldr	r3, [r7, #12]
 81093d8:	683a      	ldr	r2, [r7, #0]
 81093da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 81093dc:	683b      	ldr	r3, [r7, #0]
 81093de:	687a      	ldr	r2, [r7, #4]
 81093e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 81093e2:	687b      	ldr	r3, [r7, #4]
 81093e4:	681b      	ldr	r3, [r3, #0]
 81093e6:	1c5a      	adds	r2, r3, #1
 81093e8:	687b      	ldr	r3, [r7, #4]
 81093ea:	601a      	str	r2, [r3, #0]
}
 81093ec:	bf00      	nop
 81093ee:	3714      	adds	r7, #20
 81093f0:	46bd      	mov	sp, r7
 81093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81093f6:	4770      	bx	lr

081093f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 81093f8:	b480      	push	{r7}
 81093fa:	b085      	sub	sp, #20
 81093fc:	af00      	add	r7, sp, #0
 81093fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8109400:	687b      	ldr	r3, [r7, #4]
 8109402:	691b      	ldr	r3, [r3, #16]
 8109404:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8109406:	687b      	ldr	r3, [r7, #4]
 8109408:	685b      	ldr	r3, [r3, #4]
 810940a:	687a      	ldr	r2, [r7, #4]
 810940c:	6892      	ldr	r2, [r2, #8]
 810940e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8109410:	687b      	ldr	r3, [r7, #4]
 8109412:	689b      	ldr	r3, [r3, #8]
 8109414:	687a      	ldr	r2, [r7, #4]
 8109416:	6852      	ldr	r2, [r2, #4]
 8109418:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 810941a:	68fb      	ldr	r3, [r7, #12]
 810941c:	685b      	ldr	r3, [r3, #4]
 810941e:	687a      	ldr	r2, [r7, #4]
 8109420:	429a      	cmp	r2, r3
 8109422:	d103      	bne.n	810942c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8109424:	687b      	ldr	r3, [r7, #4]
 8109426:	689a      	ldr	r2, [r3, #8]
 8109428:	68fb      	ldr	r3, [r7, #12]
 810942a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 810942c:	687b      	ldr	r3, [r7, #4]
 810942e:	2200      	movs	r2, #0
 8109430:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8109432:	68fb      	ldr	r3, [r7, #12]
 8109434:	681b      	ldr	r3, [r3, #0]
 8109436:	1e5a      	subs	r2, r3, #1
 8109438:	68fb      	ldr	r3, [r7, #12]
 810943a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 810943c:	68fb      	ldr	r3, [r7, #12]
 810943e:	681b      	ldr	r3, [r3, #0]
}
 8109440:	4618      	mov	r0, r3
 8109442:	3714      	adds	r7, #20
 8109444:	46bd      	mov	sp, r7
 8109446:	f85d 7b04 	ldr.w	r7, [sp], #4
 810944a:	4770      	bx	lr

0810944c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 810944c:	b480      	push	{r7}
 810944e:	b085      	sub	sp, #20
 8109450:	af00      	add	r7, sp, #0
 8109452:	60f8      	str	r0, [r7, #12]
 8109454:	60b9      	str	r1, [r7, #8]
 8109456:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8109458:	68fb      	ldr	r3, [r7, #12]
 810945a:	3b04      	subs	r3, #4
 810945c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 810945e:	68fb      	ldr	r3, [r7, #12]
 8109460:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8109464:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8109466:	68fb      	ldr	r3, [r7, #12]
 8109468:	3b04      	subs	r3, #4
 810946a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 810946c:	68bb      	ldr	r3, [r7, #8]
 810946e:	f023 0201 	bic.w	r2, r3, #1
 8109472:	68fb      	ldr	r3, [r7, #12]
 8109474:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8109476:	68fb      	ldr	r3, [r7, #12]
 8109478:	3b04      	subs	r3, #4
 810947a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 810947c:	4a0c      	ldr	r2, [pc, #48]	; (81094b0 <pxPortInitialiseStack+0x64>)
 810947e:	68fb      	ldr	r3, [r7, #12]
 8109480:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8109482:	68fb      	ldr	r3, [r7, #12]
 8109484:	3b14      	subs	r3, #20
 8109486:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8109488:	687a      	ldr	r2, [r7, #4]
 810948a:	68fb      	ldr	r3, [r7, #12]
 810948c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 810948e:	68fb      	ldr	r3, [r7, #12]
 8109490:	3b04      	subs	r3, #4
 8109492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8109494:	68fb      	ldr	r3, [r7, #12]
 8109496:	f06f 0202 	mvn.w	r2, #2
 810949a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 810949c:	68fb      	ldr	r3, [r7, #12]
 810949e:	3b20      	subs	r3, #32
 81094a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 81094a2:	68fb      	ldr	r3, [r7, #12]
}
 81094a4:	4618      	mov	r0, r3
 81094a6:	3714      	adds	r7, #20
 81094a8:	46bd      	mov	sp, r7
 81094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81094ae:	4770      	bx	lr
 81094b0:	081094b5 	.word	0x081094b5

081094b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 81094b4:	b480      	push	{r7}
 81094b6:	b085      	sub	sp, #20
 81094b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 81094ba:	2300      	movs	r3, #0
 81094bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 81094be:	4b11      	ldr	r3, [pc, #68]	; (8109504 <prvTaskExitError+0x50>)
 81094c0:	681b      	ldr	r3, [r3, #0]
 81094c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81094c6:	d009      	beq.n	81094dc <prvTaskExitError+0x28>
 81094c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81094cc:	f383 8811 	msr	BASEPRI, r3
 81094d0:	f3bf 8f6f 	isb	sy
 81094d4:	f3bf 8f4f 	dsb	sy
 81094d8:	60fb      	str	r3, [r7, #12]
 81094da:	e7fe      	b.n	81094da <prvTaskExitError+0x26>
 81094dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 81094e0:	f383 8811 	msr	BASEPRI, r3
 81094e4:	f3bf 8f6f 	isb	sy
 81094e8:	f3bf 8f4f 	dsb	sy
 81094ec:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 81094ee:	bf00      	nop
 81094f0:	687b      	ldr	r3, [r7, #4]
 81094f2:	2b00      	cmp	r3, #0
 81094f4:	d0fc      	beq.n	81094f0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 81094f6:	bf00      	nop
 81094f8:	3714      	adds	r7, #20
 81094fa:	46bd      	mov	sp, r7
 81094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109500:	4770      	bx	lr
 8109502:	bf00      	nop
 8109504:	10000024 	.word	0x10000024
	...

08109510 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8109510:	4b07      	ldr	r3, [pc, #28]	; (8109530 <pxCurrentTCBConst2>)
 8109512:	6819      	ldr	r1, [r3, #0]
 8109514:	6808      	ldr	r0, [r1, #0]
 8109516:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810951a:	f380 8809 	msr	PSP, r0
 810951e:	f3bf 8f6f 	isb	sy
 8109522:	f04f 0000 	mov.w	r0, #0
 8109526:	f380 8811 	msr	BASEPRI, r0
 810952a:	4770      	bx	lr
 810952c:	f3af 8000 	nop.w

08109530 <pxCurrentTCBConst2>:
 8109530:	100040ac 	.word	0x100040ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8109534:	bf00      	nop
 8109536:	bf00      	nop

08109538 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8109538:	4808      	ldr	r0, [pc, #32]	; (810955c <prvPortStartFirstTask+0x24>)
 810953a:	6800      	ldr	r0, [r0, #0]
 810953c:	6800      	ldr	r0, [r0, #0]
 810953e:	f380 8808 	msr	MSP, r0
 8109542:	f04f 0000 	mov.w	r0, #0
 8109546:	f380 8814 	msr	CONTROL, r0
 810954a:	b662      	cpsie	i
 810954c:	b661      	cpsie	f
 810954e:	f3bf 8f4f 	dsb	sy
 8109552:	f3bf 8f6f 	isb	sy
 8109556:	df00      	svc	0
 8109558:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 810955a:	bf00      	nop
 810955c:	e000ed08 	.word	0xe000ed08

08109560 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8109560:	b580      	push	{r7, lr}
 8109562:	b086      	sub	sp, #24
 8109564:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8109566:	4b44      	ldr	r3, [pc, #272]	; (8109678 <xPortStartScheduler+0x118>)
 8109568:	681b      	ldr	r3, [r3, #0]
 810956a:	4a44      	ldr	r2, [pc, #272]	; (810967c <xPortStartScheduler+0x11c>)
 810956c:	4293      	cmp	r3, r2
 810956e:	d109      	bne.n	8109584 <xPortStartScheduler+0x24>
 8109570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109574:	f383 8811 	msr	BASEPRI, r3
 8109578:	f3bf 8f6f 	isb	sy
 810957c:	f3bf 8f4f 	dsb	sy
 8109580:	613b      	str	r3, [r7, #16]
 8109582:	e7fe      	b.n	8109582 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8109584:	4b3c      	ldr	r3, [pc, #240]	; (8109678 <xPortStartScheduler+0x118>)
 8109586:	681b      	ldr	r3, [r3, #0]
 8109588:	4a3d      	ldr	r2, [pc, #244]	; (8109680 <xPortStartScheduler+0x120>)
 810958a:	4293      	cmp	r3, r2
 810958c:	d109      	bne.n	81095a2 <xPortStartScheduler+0x42>
 810958e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109592:	f383 8811 	msr	BASEPRI, r3
 8109596:	f3bf 8f6f 	isb	sy
 810959a:	f3bf 8f4f 	dsb	sy
 810959e:	60fb      	str	r3, [r7, #12]
 81095a0:	e7fe      	b.n	81095a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 81095a2:	4b38      	ldr	r3, [pc, #224]	; (8109684 <xPortStartScheduler+0x124>)
 81095a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 81095a6:	697b      	ldr	r3, [r7, #20]
 81095a8:	781b      	ldrb	r3, [r3, #0]
 81095aa:	b2db      	uxtb	r3, r3
 81095ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 81095ae:	697b      	ldr	r3, [r7, #20]
 81095b0:	22ff      	movs	r2, #255	; 0xff
 81095b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 81095b4:	697b      	ldr	r3, [r7, #20]
 81095b6:	781b      	ldrb	r3, [r3, #0]
 81095b8:	b2db      	uxtb	r3, r3
 81095ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 81095bc:	78fb      	ldrb	r3, [r7, #3]
 81095be:	b2db      	uxtb	r3, r3
 81095c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 81095c4:	b2da      	uxtb	r2, r3
 81095c6:	4b30      	ldr	r3, [pc, #192]	; (8109688 <xPortStartScheduler+0x128>)
 81095c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 81095ca:	4b30      	ldr	r3, [pc, #192]	; (810968c <xPortStartScheduler+0x12c>)
 81095cc:	2207      	movs	r2, #7
 81095ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 81095d0:	e009      	b.n	81095e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 81095d2:	4b2e      	ldr	r3, [pc, #184]	; (810968c <xPortStartScheduler+0x12c>)
 81095d4:	681b      	ldr	r3, [r3, #0]
 81095d6:	3b01      	subs	r3, #1
 81095d8:	4a2c      	ldr	r2, [pc, #176]	; (810968c <xPortStartScheduler+0x12c>)
 81095da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 81095dc:	78fb      	ldrb	r3, [r7, #3]
 81095de:	b2db      	uxtb	r3, r3
 81095e0:	005b      	lsls	r3, r3, #1
 81095e2:	b2db      	uxtb	r3, r3
 81095e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 81095e6:	78fb      	ldrb	r3, [r7, #3]
 81095e8:	b2db      	uxtb	r3, r3
 81095ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81095ee:	2b80      	cmp	r3, #128	; 0x80
 81095f0:	d0ef      	beq.n	81095d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 81095f2:	4b26      	ldr	r3, [pc, #152]	; (810968c <xPortStartScheduler+0x12c>)
 81095f4:	681b      	ldr	r3, [r3, #0]
 81095f6:	f1c3 0307 	rsb	r3, r3, #7
 81095fa:	2b04      	cmp	r3, #4
 81095fc:	d009      	beq.n	8109612 <xPortStartScheduler+0xb2>
 81095fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109602:	f383 8811 	msr	BASEPRI, r3
 8109606:	f3bf 8f6f 	isb	sy
 810960a:	f3bf 8f4f 	dsb	sy
 810960e:	60bb      	str	r3, [r7, #8]
 8109610:	e7fe      	b.n	8109610 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8109612:	4b1e      	ldr	r3, [pc, #120]	; (810968c <xPortStartScheduler+0x12c>)
 8109614:	681b      	ldr	r3, [r3, #0]
 8109616:	021b      	lsls	r3, r3, #8
 8109618:	4a1c      	ldr	r2, [pc, #112]	; (810968c <xPortStartScheduler+0x12c>)
 810961a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 810961c:	4b1b      	ldr	r3, [pc, #108]	; (810968c <xPortStartScheduler+0x12c>)
 810961e:	681b      	ldr	r3, [r3, #0]
 8109620:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8109624:	4a19      	ldr	r2, [pc, #100]	; (810968c <xPortStartScheduler+0x12c>)
 8109626:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8109628:	687b      	ldr	r3, [r7, #4]
 810962a:	b2da      	uxtb	r2, r3
 810962c:	697b      	ldr	r3, [r7, #20]
 810962e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8109630:	4b17      	ldr	r3, [pc, #92]	; (8109690 <xPortStartScheduler+0x130>)
 8109632:	681b      	ldr	r3, [r3, #0]
 8109634:	4a16      	ldr	r2, [pc, #88]	; (8109690 <xPortStartScheduler+0x130>)
 8109636:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 810963a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 810963c:	4b14      	ldr	r3, [pc, #80]	; (8109690 <xPortStartScheduler+0x130>)
 810963e:	681b      	ldr	r3, [r3, #0]
 8109640:	4a13      	ldr	r2, [pc, #76]	; (8109690 <xPortStartScheduler+0x130>)
 8109642:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8109646:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8109648:	f000 f8d6 	bl	81097f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 810964c:	4b11      	ldr	r3, [pc, #68]	; (8109694 <xPortStartScheduler+0x134>)
 810964e:	2200      	movs	r2, #0
 8109650:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8109652:	f000 f8f5 	bl	8109840 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8109656:	4b10      	ldr	r3, [pc, #64]	; (8109698 <xPortStartScheduler+0x138>)
 8109658:	681b      	ldr	r3, [r3, #0]
 810965a:	4a0f      	ldr	r2, [pc, #60]	; (8109698 <xPortStartScheduler+0x138>)
 810965c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8109660:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8109662:	f7ff ff69 	bl	8109538 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8109666:	f000 ff81 	bl	810a56c <vTaskSwitchContext>
	prvTaskExitError();
 810966a:	f7ff ff23 	bl	81094b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 810966e:	2300      	movs	r3, #0
}
 8109670:	4618      	mov	r0, r3
 8109672:	3718      	adds	r7, #24
 8109674:	46bd      	mov	sp, r7
 8109676:	bd80      	pop	{r7, pc}
 8109678:	e000ed00 	.word	0xe000ed00
 810967c:	410fc271 	.word	0x410fc271
 8109680:	410fc270 	.word	0x410fc270
 8109684:	e000e400 	.word	0xe000e400
 8109688:	100040a4 	.word	0x100040a4
 810968c:	100040a8 	.word	0x100040a8
 8109690:	e000ed20 	.word	0xe000ed20
 8109694:	10000024 	.word	0x10000024
 8109698:	e000ef34 	.word	0xe000ef34

0810969c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 810969c:	b480      	push	{r7}
 810969e:	b083      	sub	sp, #12
 81096a0:	af00      	add	r7, sp, #0
 81096a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81096a6:	f383 8811 	msr	BASEPRI, r3
 81096aa:	f3bf 8f6f 	isb	sy
 81096ae:	f3bf 8f4f 	dsb	sy
 81096b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 81096b4:	4b0e      	ldr	r3, [pc, #56]	; (81096f0 <vPortEnterCritical+0x54>)
 81096b6:	681b      	ldr	r3, [r3, #0]
 81096b8:	3301      	adds	r3, #1
 81096ba:	4a0d      	ldr	r2, [pc, #52]	; (81096f0 <vPortEnterCritical+0x54>)
 81096bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 81096be:	4b0c      	ldr	r3, [pc, #48]	; (81096f0 <vPortEnterCritical+0x54>)
 81096c0:	681b      	ldr	r3, [r3, #0]
 81096c2:	2b01      	cmp	r3, #1
 81096c4:	d10e      	bne.n	81096e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 81096c6:	4b0b      	ldr	r3, [pc, #44]	; (81096f4 <vPortEnterCritical+0x58>)
 81096c8:	681b      	ldr	r3, [r3, #0]
 81096ca:	b2db      	uxtb	r3, r3
 81096cc:	2b00      	cmp	r3, #0
 81096ce:	d009      	beq.n	81096e4 <vPortEnterCritical+0x48>
 81096d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81096d4:	f383 8811 	msr	BASEPRI, r3
 81096d8:	f3bf 8f6f 	isb	sy
 81096dc:	f3bf 8f4f 	dsb	sy
 81096e0:	603b      	str	r3, [r7, #0]
 81096e2:	e7fe      	b.n	81096e2 <vPortEnterCritical+0x46>
	}
}
 81096e4:	bf00      	nop
 81096e6:	370c      	adds	r7, #12
 81096e8:	46bd      	mov	sp, r7
 81096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81096ee:	4770      	bx	lr
 81096f0:	10000024 	.word	0x10000024
 81096f4:	e000ed04 	.word	0xe000ed04

081096f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 81096f8:	b480      	push	{r7}
 81096fa:	b083      	sub	sp, #12
 81096fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 81096fe:	4b11      	ldr	r3, [pc, #68]	; (8109744 <vPortExitCritical+0x4c>)
 8109700:	681b      	ldr	r3, [r3, #0]
 8109702:	2b00      	cmp	r3, #0
 8109704:	d109      	bne.n	810971a <vPortExitCritical+0x22>
 8109706:	f04f 0350 	mov.w	r3, #80	; 0x50
 810970a:	f383 8811 	msr	BASEPRI, r3
 810970e:	f3bf 8f6f 	isb	sy
 8109712:	f3bf 8f4f 	dsb	sy
 8109716:	607b      	str	r3, [r7, #4]
 8109718:	e7fe      	b.n	8109718 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 810971a:	4b0a      	ldr	r3, [pc, #40]	; (8109744 <vPortExitCritical+0x4c>)
 810971c:	681b      	ldr	r3, [r3, #0]
 810971e:	3b01      	subs	r3, #1
 8109720:	4a08      	ldr	r2, [pc, #32]	; (8109744 <vPortExitCritical+0x4c>)
 8109722:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8109724:	4b07      	ldr	r3, [pc, #28]	; (8109744 <vPortExitCritical+0x4c>)
 8109726:	681b      	ldr	r3, [r3, #0]
 8109728:	2b00      	cmp	r3, #0
 810972a:	d104      	bne.n	8109736 <vPortExitCritical+0x3e>
 810972c:	2300      	movs	r3, #0
 810972e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8109730:	683b      	ldr	r3, [r7, #0]
 8109732:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8109736:	bf00      	nop
 8109738:	370c      	adds	r7, #12
 810973a:	46bd      	mov	sp, r7
 810973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109740:	4770      	bx	lr
 8109742:	bf00      	nop
 8109744:	10000024 	.word	0x10000024
	...

08109750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8109750:	f3ef 8009 	mrs	r0, PSP
 8109754:	f3bf 8f6f 	isb	sy
 8109758:	4b15      	ldr	r3, [pc, #84]	; (81097b0 <pxCurrentTCBConst>)
 810975a:	681a      	ldr	r2, [r3, #0]
 810975c:	f01e 0f10 	tst.w	lr, #16
 8109760:	bf08      	it	eq
 8109762:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8109766:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810976a:	6010      	str	r0, [r2, #0]
 810976c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8109770:	f04f 0050 	mov.w	r0, #80	; 0x50
 8109774:	f380 8811 	msr	BASEPRI, r0
 8109778:	f3bf 8f4f 	dsb	sy
 810977c:	f3bf 8f6f 	isb	sy
 8109780:	f000 fef4 	bl	810a56c <vTaskSwitchContext>
 8109784:	f04f 0000 	mov.w	r0, #0
 8109788:	f380 8811 	msr	BASEPRI, r0
 810978c:	bc09      	pop	{r0, r3}
 810978e:	6819      	ldr	r1, [r3, #0]
 8109790:	6808      	ldr	r0, [r1, #0]
 8109792:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109796:	f01e 0f10 	tst.w	lr, #16
 810979a:	bf08      	it	eq
 810979c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 81097a0:	f380 8809 	msr	PSP, r0
 81097a4:	f3bf 8f6f 	isb	sy
 81097a8:	4770      	bx	lr
 81097aa:	bf00      	nop
 81097ac:	f3af 8000 	nop.w

081097b0 <pxCurrentTCBConst>:
 81097b0:	100040ac 	.word	0x100040ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 81097b4:	bf00      	nop
 81097b6:	bf00      	nop

081097b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 81097b8:	b580      	push	{r7, lr}
 81097ba:	b082      	sub	sp, #8
 81097bc:	af00      	add	r7, sp, #0
	__asm volatile
 81097be:	f04f 0350 	mov.w	r3, #80	; 0x50
 81097c2:	f383 8811 	msr	BASEPRI, r3
 81097c6:	f3bf 8f6f 	isb	sy
 81097ca:	f3bf 8f4f 	dsb	sy
 81097ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 81097d0:	f000 fe14 	bl	810a3fc <xTaskIncrementTick>
 81097d4:	4603      	mov	r3, r0
 81097d6:	2b00      	cmp	r3, #0
 81097d8:	d003      	beq.n	81097e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 81097da:	4b06      	ldr	r3, [pc, #24]	; (81097f4 <SysTick_Handler+0x3c>)
 81097dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81097e0:	601a      	str	r2, [r3, #0]
 81097e2:	2300      	movs	r3, #0
 81097e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 81097e6:	683b      	ldr	r3, [r7, #0]
 81097e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 81097ec:	bf00      	nop
 81097ee:	3708      	adds	r7, #8
 81097f0:	46bd      	mov	sp, r7
 81097f2:	bd80      	pop	{r7, pc}
 81097f4:	e000ed04 	.word	0xe000ed04

081097f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 81097f8:	b480      	push	{r7}
 81097fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 81097fc:	4b0b      	ldr	r3, [pc, #44]	; (810982c <vPortSetupTimerInterrupt+0x34>)
 81097fe:	2200      	movs	r2, #0
 8109800:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8109802:	4b0b      	ldr	r3, [pc, #44]	; (8109830 <vPortSetupTimerInterrupt+0x38>)
 8109804:	2200      	movs	r2, #0
 8109806:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8109808:	4b0a      	ldr	r3, [pc, #40]	; (8109834 <vPortSetupTimerInterrupt+0x3c>)
 810980a:	681b      	ldr	r3, [r3, #0]
 810980c:	4a0a      	ldr	r2, [pc, #40]	; (8109838 <vPortSetupTimerInterrupt+0x40>)
 810980e:	fba2 2303 	umull	r2, r3, r2, r3
 8109812:	099b      	lsrs	r3, r3, #6
 8109814:	4a09      	ldr	r2, [pc, #36]	; (810983c <vPortSetupTimerInterrupt+0x44>)
 8109816:	3b01      	subs	r3, #1
 8109818:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 810981a:	4b04      	ldr	r3, [pc, #16]	; (810982c <vPortSetupTimerInterrupt+0x34>)
 810981c:	2207      	movs	r2, #7
 810981e:	601a      	str	r2, [r3, #0]
}
 8109820:	bf00      	nop
 8109822:	46bd      	mov	sp, r7
 8109824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109828:	4770      	bx	lr
 810982a:	bf00      	nop
 810982c:	e000e010 	.word	0xe000e010
 8109830:	e000e018 	.word	0xe000e018
 8109834:	10000004 	.word	0x10000004
 8109838:	10624dd3 	.word	0x10624dd3
 810983c:	e000e014 	.word	0xe000e014

08109840 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8109840:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8109850 <vPortEnableVFP+0x10>
 8109844:	6801      	ldr	r1, [r0, #0]
 8109846:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810984a:	6001      	str	r1, [r0, #0]
 810984c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 810984e:	bf00      	nop
 8109850:	e000ed88 	.word	0xe000ed88

08109854 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8109854:	b580      	push	{r7, lr}
 8109856:	b084      	sub	sp, #16
 8109858:	af00      	add	r7, sp, #0
 810985a:	6078      	str	r0, [r7, #4]
 810985c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 810985e:	687b      	ldr	r3, [r7, #4]
 8109860:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8109862:	68fb      	ldr	r3, [r7, #12]
 8109864:	2b00      	cmp	r3, #0
 8109866:	d109      	bne.n	810987c <xQueueGenericReset+0x28>
	__asm volatile
 8109868:	f04f 0350 	mov.w	r3, #80	; 0x50
 810986c:	f383 8811 	msr	BASEPRI, r3
 8109870:	f3bf 8f6f 	isb	sy
 8109874:	f3bf 8f4f 	dsb	sy
 8109878:	60bb      	str	r3, [r7, #8]
 810987a:	e7fe      	b.n	810987a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 810987c:	f7ff ff0e 	bl	810969c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8109880:	68fb      	ldr	r3, [r7, #12]
 8109882:	681a      	ldr	r2, [r3, #0]
 8109884:	68fb      	ldr	r3, [r7, #12]
 8109886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109888:	68f9      	ldr	r1, [r7, #12]
 810988a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 810988c:	fb01 f303 	mul.w	r3, r1, r3
 8109890:	441a      	add	r2, r3
 8109892:	68fb      	ldr	r3, [r7, #12]
 8109894:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8109896:	68fb      	ldr	r3, [r7, #12]
 8109898:	2200      	movs	r2, #0
 810989a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 810989c:	68fb      	ldr	r3, [r7, #12]
 810989e:	681a      	ldr	r2, [r3, #0]
 81098a0:	68fb      	ldr	r3, [r7, #12]
 81098a2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 81098a4:	68fb      	ldr	r3, [r7, #12]
 81098a6:	681a      	ldr	r2, [r3, #0]
 81098a8:	68fb      	ldr	r3, [r7, #12]
 81098aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81098ac:	3b01      	subs	r3, #1
 81098ae:	68f9      	ldr	r1, [r7, #12]
 81098b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 81098b2:	fb01 f303 	mul.w	r3, r1, r3
 81098b6:	441a      	add	r2, r3
 81098b8:	68fb      	ldr	r3, [r7, #12]
 81098ba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 81098bc:	68fb      	ldr	r3, [r7, #12]
 81098be:	22ff      	movs	r2, #255	; 0xff
 81098c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 81098c4:	68fb      	ldr	r3, [r7, #12]
 81098c6:	22ff      	movs	r2, #255	; 0xff
 81098c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 81098cc:	683b      	ldr	r3, [r7, #0]
 81098ce:	2b00      	cmp	r3, #0
 81098d0:	d114      	bne.n	81098fc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 81098d2:	68fb      	ldr	r3, [r7, #12]
 81098d4:	691b      	ldr	r3, [r3, #16]
 81098d6:	2b00      	cmp	r3, #0
 81098d8:	d01a      	beq.n	8109910 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 81098da:	68fb      	ldr	r3, [r7, #12]
 81098dc:	3310      	adds	r3, #16
 81098de:	4618      	mov	r0, r3
 81098e0:	f000 fec2 	bl	810a668 <xTaskRemoveFromEventList>
 81098e4:	4603      	mov	r3, r0
 81098e6:	2b00      	cmp	r3, #0
 81098e8:	d012      	beq.n	8109910 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 81098ea:	4b0d      	ldr	r3, [pc, #52]	; (8109920 <xQueueGenericReset+0xcc>)
 81098ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81098f0:	601a      	str	r2, [r3, #0]
 81098f2:	f3bf 8f4f 	dsb	sy
 81098f6:	f3bf 8f6f 	isb	sy
 81098fa:	e009      	b.n	8109910 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 81098fc:	68fb      	ldr	r3, [r7, #12]
 81098fe:	3310      	adds	r3, #16
 8109900:	4618      	mov	r0, r3
 8109902:	f7ff fcef 	bl	81092e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8109906:	68fb      	ldr	r3, [r7, #12]
 8109908:	3324      	adds	r3, #36	; 0x24
 810990a:	4618      	mov	r0, r3
 810990c:	f7ff fcea 	bl	81092e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8109910:	f7ff fef2 	bl	81096f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8109914:	2301      	movs	r3, #1
}
 8109916:	4618      	mov	r0, r3
 8109918:	3710      	adds	r7, #16
 810991a:	46bd      	mov	sp, r7
 810991c:	bd80      	pop	{r7, pc}
 810991e:	bf00      	nop
 8109920:	e000ed04 	.word	0xe000ed04

08109924 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8109924:	b580      	push	{r7, lr}
 8109926:	b08e      	sub	sp, #56	; 0x38
 8109928:	af02      	add	r7, sp, #8
 810992a:	60f8      	str	r0, [r7, #12]
 810992c:	60b9      	str	r1, [r7, #8]
 810992e:	607a      	str	r2, [r7, #4]
 8109930:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8109932:	68fb      	ldr	r3, [r7, #12]
 8109934:	2b00      	cmp	r3, #0
 8109936:	d109      	bne.n	810994c <xQueueGenericCreateStatic+0x28>
 8109938:	f04f 0350 	mov.w	r3, #80	; 0x50
 810993c:	f383 8811 	msr	BASEPRI, r3
 8109940:	f3bf 8f6f 	isb	sy
 8109944:	f3bf 8f4f 	dsb	sy
 8109948:	62bb      	str	r3, [r7, #40]	; 0x28
 810994a:	e7fe      	b.n	810994a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 810994c:	683b      	ldr	r3, [r7, #0]
 810994e:	2b00      	cmp	r3, #0
 8109950:	d109      	bne.n	8109966 <xQueueGenericCreateStatic+0x42>
 8109952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109956:	f383 8811 	msr	BASEPRI, r3
 810995a:	f3bf 8f6f 	isb	sy
 810995e:	f3bf 8f4f 	dsb	sy
 8109962:	627b      	str	r3, [r7, #36]	; 0x24
 8109964:	e7fe      	b.n	8109964 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8109966:	687b      	ldr	r3, [r7, #4]
 8109968:	2b00      	cmp	r3, #0
 810996a:	d002      	beq.n	8109972 <xQueueGenericCreateStatic+0x4e>
 810996c:	68bb      	ldr	r3, [r7, #8]
 810996e:	2b00      	cmp	r3, #0
 8109970:	d001      	beq.n	8109976 <xQueueGenericCreateStatic+0x52>
 8109972:	2301      	movs	r3, #1
 8109974:	e000      	b.n	8109978 <xQueueGenericCreateStatic+0x54>
 8109976:	2300      	movs	r3, #0
 8109978:	2b00      	cmp	r3, #0
 810997a:	d109      	bne.n	8109990 <xQueueGenericCreateStatic+0x6c>
 810997c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109980:	f383 8811 	msr	BASEPRI, r3
 8109984:	f3bf 8f6f 	isb	sy
 8109988:	f3bf 8f4f 	dsb	sy
 810998c:	623b      	str	r3, [r7, #32]
 810998e:	e7fe      	b.n	810998e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8109990:	687b      	ldr	r3, [r7, #4]
 8109992:	2b00      	cmp	r3, #0
 8109994:	d102      	bne.n	810999c <xQueueGenericCreateStatic+0x78>
 8109996:	68bb      	ldr	r3, [r7, #8]
 8109998:	2b00      	cmp	r3, #0
 810999a:	d101      	bne.n	81099a0 <xQueueGenericCreateStatic+0x7c>
 810999c:	2301      	movs	r3, #1
 810999e:	e000      	b.n	81099a2 <xQueueGenericCreateStatic+0x7e>
 81099a0:	2300      	movs	r3, #0
 81099a2:	2b00      	cmp	r3, #0
 81099a4:	d109      	bne.n	81099ba <xQueueGenericCreateStatic+0x96>
 81099a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 81099aa:	f383 8811 	msr	BASEPRI, r3
 81099ae:	f3bf 8f6f 	isb	sy
 81099b2:	f3bf 8f4f 	dsb	sy
 81099b6:	61fb      	str	r3, [r7, #28]
 81099b8:	e7fe      	b.n	81099b8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 81099ba:	2348      	movs	r3, #72	; 0x48
 81099bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 81099be:	697b      	ldr	r3, [r7, #20]
 81099c0:	2b48      	cmp	r3, #72	; 0x48
 81099c2:	d009      	beq.n	81099d8 <xQueueGenericCreateStatic+0xb4>
 81099c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81099c8:	f383 8811 	msr	BASEPRI, r3
 81099cc:	f3bf 8f6f 	isb	sy
 81099d0:	f3bf 8f4f 	dsb	sy
 81099d4:	61bb      	str	r3, [r7, #24]
 81099d6:	e7fe      	b.n	81099d6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 81099d8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 81099da:	683b      	ldr	r3, [r7, #0]
 81099dc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 81099de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81099e0:	2b00      	cmp	r3, #0
 81099e2:	d00d      	beq.n	8109a00 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 81099e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81099e6:	2201      	movs	r2, #1
 81099e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 81099ec:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 81099f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81099f2:	9300      	str	r3, [sp, #0]
 81099f4:	4613      	mov	r3, r2
 81099f6:	687a      	ldr	r2, [r7, #4]
 81099f8:	68b9      	ldr	r1, [r7, #8]
 81099fa:	68f8      	ldr	r0, [r7, #12]
 81099fc:	f000 f844 	bl	8109a88 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8109a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8109a02:	4618      	mov	r0, r3
 8109a04:	3730      	adds	r7, #48	; 0x30
 8109a06:	46bd      	mov	sp, r7
 8109a08:	bd80      	pop	{r7, pc}

08109a0a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8109a0a:	b580      	push	{r7, lr}
 8109a0c:	b08a      	sub	sp, #40	; 0x28
 8109a0e:	af02      	add	r7, sp, #8
 8109a10:	60f8      	str	r0, [r7, #12]
 8109a12:	60b9      	str	r1, [r7, #8]
 8109a14:	4613      	mov	r3, r2
 8109a16:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8109a18:	68fb      	ldr	r3, [r7, #12]
 8109a1a:	2b00      	cmp	r3, #0
 8109a1c:	d109      	bne.n	8109a32 <xQueueGenericCreate+0x28>
 8109a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109a22:	f383 8811 	msr	BASEPRI, r3
 8109a26:	f3bf 8f6f 	isb	sy
 8109a2a:	f3bf 8f4f 	dsb	sy
 8109a2e:	613b      	str	r3, [r7, #16]
 8109a30:	e7fe      	b.n	8109a30 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8109a32:	68bb      	ldr	r3, [r7, #8]
 8109a34:	2b00      	cmp	r3, #0
 8109a36:	d102      	bne.n	8109a3e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8109a38:	2300      	movs	r3, #0
 8109a3a:	61fb      	str	r3, [r7, #28]
 8109a3c:	e004      	b.n	8109a48 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8109a3e:	68fb      	ldr	r3, [r7, #12]
 8109a40:	68ba      	ldr	r2, [r7, #8]
 8109a42:	fb02 f303 	mul.w	r3, r2, r3
 8109a46:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8109a48:	69fb      	ldr	r3, [r7, #28]
 8109a4a:	3348      	adds	r3, #72	; 0x48
 8109a4c:	4618      	mov	r0, r3
 8109a4e:	f7ff fa73 	bl	8108f38 <pvPortMalloc>
 8109a52:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8109a54:	69bb      	ldr	r3, [r7, #24]
 8109a56:	2b00      	cmp	r3, #0
 8109a58:	d011      	beq.n	8109a7e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8109a5a:	69bb      	ldr	r3, [r7, #24]
 8109a5c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8109a5e:	697b      	ldr	r3, [r7, #20]
 8109a60:	3348      	adds	r3, #72	; 0x48
 8109a62:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8109a64:	69bb      	ldr	r3, [r7, #24]
 8109a66:	2200      	movs	r2, #0
 8109a68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8109a6c:	79fa      	ldrb	r2, [r7, #7]
 8109a6e:	69bb      	ldr	r3, [r7, #24]
 8109a70:	9300      	str	r3, [sp, #0]
 8109a72:	4613      	mov	r3, r2
 8109a74:	697a      	ldr	r2, [r7, #20]
 8109a76:	68b9      	ldr	r1, [r7, #8]
 8109a78:	68f8      	ldr	r0, [r7, #12]
 8109a7a:	f000 f805 	bl	8109a88 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8109a7e:	69bb      	ldr	r3, [r7, #24]
	}
 8109a80:	4618      	mov	r0, r3
 8109a82:	3720      	adds	r7, #32
 8109a84:	46bd      	mov	sp, r7
 8109a86:	bd80      	pop	{r7, pc}

08109a88 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8109a88:	b580      	push	{r7, lr}
 8109a8a:	b084      	sub	sp, #16
 8109a8c:	af00      	add	r7, sp, #0
 8109a8e:	60f8      	str	r0, [r7, #12]
 8109a90:	60b9      	str	r1, [r7, #8]
 8109a92:	607a      	str	r2, [r7, #4]
 8109a94:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8109a96:	68bb      	ldr	r3, [r7, #8]
 8109a98:	2b00      	cmp	r3, #0
 8109a9a:	d103      	bne.n	8109aa4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8109a9c:	69bb      	ldr	r3, [r7, #24]
 8109a9e:	69ba      	ldr	r2, [r7, #24]
 8109aa0:	601a      	str	r2, [r3, #0]
 8109aa2:	e002      	b.n	8109aaa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8109aa4:	69bb      	ldr	r3, [r7, #24]
 8109aa6:	687a      	ldr	r2, [r7, #4]
 8109aa8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8109aaa:	69bb      	ldr	r3, [r7, #24]
 8109aac:	68fa      	ldr	r2, [r7, #12]
 8109aae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8109ab0:	69bb      	ldr	r3, [r7, #24]
 8109ab2:	68ba      	ldr	r2, [r7, #8]
 8109ab4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8109ab6:	2101      	movs	r1, #1
 8109ab8:	69b8      	ldr	r0, [r7, #24]
 8109aba:	f7ff fecb 	bl	8109854 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8109abe:	bf00      	nop
 8109ac0:	3710      	adds	r7, #16
 8109ac2:	46bd      	mov	sp, r7
 8109ac4:	bd80      	pop	{r7, pc}
	...

08109ac8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8109ac8:	b580      	push	{r7, lr}
 8109aca:	b08e      	sub	sp, #56	; 0x38
 8109acc:	af00      	add	r7, sp, #0
 8109ace:	60f8      	str	r0, [r7, #12]
 8109ad0:	60b9      	str	r1, [r7, #8]
 8109ad2:	607a      	str	r2, [r7, #4]
 8109ad4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8109ad6:	2300      	movs	r3, #0
 8109ad8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8109ada:	68fb      	ldr	r3, [r7, #12]
 8109adc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8109ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109ae0:	2b00      	cmp	r3, #0
 8109ae2:	d109      	bne.n	8109af8 <xQueueGenericSend+0x30>
 8109ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109ae8:	f383 8811 	msr	BASEPRI, r3
 8109aec:	f3bf 8f6f 	isb	sy
 8109af0:	f3bf 8f4f 	dsb	sy
 8109af4:	62bb      	str	r3, [r7, #40]	; 0x28
 8109af6:	e7fe      	b.n	8109af6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8109af8:	68bb      	ldr	r3, [r7, #8]
 8109afa:	2b00      	cmp	r3, #0
 8109afc:	d103      	bne.n	8109b06 <xQueueGenericSend+0x3e>
 8109afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109b02:	2b00      	cmp	r3, #0
 8109b04:	d101      	bne.n	8109b0a <xQueueGenericSend+0x42>
 8109b06:	2301      	movs	r3, #1
 8109b08:	e000      	b.n	8109b0c <xQueueGenericSend+0x44>
 8109b0a:	2300      	movs	r3, #0
 8109b0c:	2b00      	cmp	r3, #0
 8109b0e:	d109      	bne.n	8109b24 <xQueueGenericSend+0x5c>
 8109b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109b14:	f383 8811 	msr	BASEPRI, r3
 8109b18:	f3bf 8f6f 	isb	sy
 8109b1c:	f3bf 8f4f 	dsb	sy
 8109b20:	627b      	str	r3, [r7, #36]	; 0x24
 8109b22:	e7fe      	b.n	8109b22 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8109b24:	683b      	ldr	r3, [r7, #0]
 8109b26:	2b02      	cmp	r3, #2
 8109b28:	d103      	bne.n	8109b32 <xQueueGenericSend+0x6a>
 8109b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109b2e:	2b01      	cmp	r3, #1
 8109b30:	d101      	bne.n	8109b36 <xQueueGenericSend+0x6e>
 8109b32:	2301      	movs	r3, #1
 8109b34:	e000      	b.n	8109b38 <xQueueGenericSend+0x70>
 8109b36:	2300      	movs	r3, #0
 8109b38:	2b00      	cmp	r3, #0
 8109b3a:	d109      	bne.n	8109b50 <xQueueGenericSend+0x88>
 8109b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109b40:	f383 8811 	msr	BASEPRI, r3
 8109b44:	f3bf 8f6f 	isb	sy
 8109b48:	f3bf 8f4f 	dsb	sy
 8109b4c:	623b      	str	r3, [r7, #32]
 8109b4e:	e7fe      	b.n	8109b4e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8109b50:	f000 ff40 	bl	810a9d4 <xTaskGetSchedulerState>
 8109b54:	4603      	mov	r3, r0
 8109b56:	2b00      	cmp	r3, #0
 8109b58:	d102      	bne.n	8109b60 <xQueueGenericSend+0x98>
 8109b5a:	687b      	ldr	r3, [r7, #4]
 8109b5c:	2b00      	cmp	r3, #0
 8109b5e:	d101      	bne.n	8109b64 <xQueueGenericSend+0x9c>
 8109b60:	2301      	movs	r3, #1
 8109b62:	e000      	b.n	8109b66 <xQueueGenericSend+0x9e>
 8109b64:	2300      	movs	r3, #0
 8109b66:	2b00      	cmp	r3, #0
 8109b68:	d109      	bne.n	8109b7e <xQueueGenericSend+0xb6>
 8109b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109b6e:	f383 8811 	msr	BASEPRI, r3
 8109b72:	f3bf 8f6f 	isb	sy
 8109b76:	f3bf 8f4f 	dsb	sy
 8109b7a:	61fb      	str	r3, [r7, #28]
 8109b7c:	e7fe      	b.n	8109b7c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8109b7e:	f7ff fd8d 	bl	810969c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8109b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109b84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8109b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109b8a:	429a      	cmp	r2, r3
 8109b8c:	d302      	bcc.n	8109b94 <xQueueGenericSend+0xcc>
 8109b8e:	683b      	ldr	r3, [r7, #0]
 8109b90:	2b02      	cmp	r3, #2
 8109b92:	d129      	bne.n	8109be8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8109b94:	683a      	ldr	r2, [r7, #0]
 8109b96:	68b9      	ldr	r1, [r7, #8]
 8109b98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8109b9a:	f000 f88f 	bl	8109cbc <prvCopyDataToQueue>
 8109b9e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8109ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109ba4:	2b00      	cmp	r3, #0
 8109ba6:	d010      	beq.n	8109bca <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8109ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109baa:	3324      	adds	r3, #36	; 0x24
 8109bac:	4618      	mov	r0, r3
 8109bae:	f000 fd5b 	bl	810a668 <xTaskRemoveFromEventList>
 8109bb2:	4603      	mov	r3, r0
 8109bb4:	2b00      	cmp	r3, #0
 8109bb6:	d013      	beq.n	8109be0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8109bb8:	4b3f      	ldr	r3, [pc, #252]	; (8109cb8 <xQueueGenericSend+0x1f0>)
 8109bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8109bbe:	601a      	str	r2, [r3, #0]
 8109bc0:	f3bf 8f4f 	dsb	sy
 8109bc4:	f3bf 8f6f 	isb	sy
 8109bc8:	e00a      	b.n	8109be0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8109bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109bcc:	2b00      	cmp	r3, #0
 8109bce:	d007      	beq.n	8109be0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8109bd0:	4b39      	ldr	r3, [pc, #228]	; (8109cb8 <xQueueGenericSend+0x1f0>)
 8109bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8109bd6:	601a      	str	r2, [r3, #0]
 8109bd8:	f3bf 8f4f 	dsb	sy
 8109bdc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8109be0:	f7ff fd8a 	bl	81096f8 <vPortExitCritical>
				return pdPASS;
 8109be4:	2301      	movs	r3, #1
 8109be6:	e063      	b.n	8109cb0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8109be8:	687b      	ldr	r3, [r7, #4]
 8109bea:	2b00      	cmp	r3, #0
 8109bec:	d103      	bne.n	8109bf6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8109bee:	f7ff fd83 	bl	81096f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8109bf2:	2300      	movs	r3, #0
 8109bf4:	e05c      	b.n	8109cb0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8109bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8109bf8:	2b00      	cmp	r3, #0
 8109bfa:	d106      	bne.n	8109c0a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8109bfc:	f107 0314 	add.w	r3, r7, #20
 8109c00:	4618      	mov	r0, r3
 8109c02:	f000 fd93 	bl	810a72c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8109c06:	2301      	movs	r3, #1
 8109c08:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8109c0a:	f7ff fd75 	bl	81096f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8109c0e:	f000 fb4b 	bl	810a2a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8109c12:	f7ff fd43 	bl	810969c <vPortEnterCritical>
 8109c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109c18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8109c1c:	b25b      	sxtb	r3, r3
 8109c1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8109c22:	d103      	bne.n	8109c2c <xQueueGenericSend+0x164>
 8109c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109c26:	2200      	movs	r2, #0
 8109c28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8109c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109c2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8109c32:	b25b      	sxtb	r3, r3
 8109c34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8109c38:	d103      	bne.n	8109c42 <xQueueGenericSend+0x17a>
 8109c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109c3c:	2200      	movs	r2, #0
 8109c3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8109c42:	f7ff fd59 	bl	81096f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8109c46:	1d3a      	adds	r2, r7, #4
 8109c48:	f107 0314 	add.w	r3, r7, #20
 8109c4c:	4611      	mov	r1, r2
 8109c4e:	4618      	mov	r0, r3
 8109c50:	f000 fd82 	bl	810a758 <xTaskCheckForTimeOut>
 8109c54:	4603      	mov	r3, r0
 8109c56:	2b00      	cmp	r3, #0
 8109c58:	d124      	bne.n	8109ca4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8109c5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8109c5c:	f000 f8ea 	bl	8109e34 <prvIsQueueFull>
 8109c60:	4603      	mov	r3, r0
 8109c62:	2b00      	cmp	r3, #0
 8109c64:	d018      	beq.n	8109c98 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8109c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109c68:	3310      	adds	r3, #16
 8109c6a:	687a      	ldr	r2, [r7, #4]
 8109c6c:	4611      	mov	r1, r2
 8109c6e:	4618      	mov	r0, r3
 8109c70:	f000 fcd6 	bl	810a620 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8109c74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8109c76:	f000 f88b 	bl	8109d90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8109c7a:	f000 fb23 	bl	810a2c4 <xTaskResumeAll>
 8109c7e:	4603      	mov	r3, r0
 8109c80:	2b00      	cmp	r3, #0
 8109c82:	f47f af7c 	bne.w	8109b7e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8109c86:	4b0c      	ldr	r3, [pc, #48]	; (8109cb8 <xQueueGenericSend+0x1f0>)
 8109c88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8109c8c:	601a      	str	r2, [r3, #0]
 8109c8e:	f3bf 8f4f 	dsb	sy
 8109c92:	f3bf 8f6f 	isb	sy
 8109c96:	e772      	b.n	8109b7e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8109c98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8109c9a:	f000 f879 	bl	8109d90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8109c9e:	f000 fb11 	bl	810a2c4 <xTaskResumeAll>
 8109ca2:	e76c      	b.n	8109b7e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8109ca4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8109ca6:	f000 f873 	bl	8109d90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8109caa:	f000 fb0b 	bl	810a2c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8109cae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8109cb0:	4618      	mov	r0, r3
 8109cb2:	3738      	adds	r7, #56	; 0x38
 8109cb4:	46bd      	mov	sp, r7
 8109cb6:	bd80      	pop	{r7, pc}
 8109cb8:	e000ed04 	.word	0xe000ed04

08109cbc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8109cbc:	b580      	push	{r7, lr}
 8109cbe:	b086      	sub	sp, #24
 8109cc0:	af00      	add	r7, sp, #0
 8109cc2:	60f8      	str	r0, [r7, #12]
 8109cc4:	60b9      	str	r1, [r7, #8]
 8109cc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8109cc8:	2300      	movs	r3, #0
 8109cca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8109ccc:	68fb      	ldr	r3, [r7, #12]
 8109cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109cd0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8109cd2:	68fb      	ldr	r3, [r7, #12]
 8109cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109cd6:	2b00      	cmp	r3, #0
 8109cd8:	d10d      	bne.n	8109cf6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8109cda:	68fb      	ldr	r3, [r7, #12]
 8109cdc:	681b      	ldr	r3, [r3, #0]
 8109cde:	2b00      	cmp	r3, #0
 8109ce0:	d14d      	bne.n	8109d7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8109ce2:	68fb      	ldr	r3, [r7, #12]
 8109ce4:	689b      	ldr	r3, [r3, #8]
 8109ce6:	4618      	mov	r0, r3
 8109ce8:	f000 fe92 	bl	810aa10 <xTaskPriorityDisinherit>
 8109cec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8109cee:	68fb      	ldr	r3, [r7, #12]
 8109cf0:	2200      	movs	r2, #0
 8109cf2:	609a      	str	r2, [r3, #8]
 8109cf4:	e043      	b.n	8109d7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8109cf6:	687b      	ldr	r3, [r7, #4]
 8109cf8:	2b00      	cmp	r3, #0
 8109cfa:	d119      	bne.n	8109d30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8109cfc:	68fb      	ldr	r3, [r7, #12]
 8109cfe:	6858      	ldr	r0, [r3, #4]
 8109d00:	68fb      	ldr	r3, [r7, #12]
 8109d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109d04:	461a      	mov	r2, r3
 8109d06:	68b9      	ldr	r1, [r7, #8]
 8109d08:	f005 fc62 	bl	810f5d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8109d0c:	68fb      	ldr	r3, [r7, #12]
 8109d0e:	685a      	ldr	r2, [r3, #4]
 8109d10:	68fb      	ldr	r3, [r7, #12]
 8109d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109d14:	441a      	add	r2, r3
 8109d16:	68fb      	ldr	r3, [r7, #12]
 8109d18:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8109d1a:	68fb      	ldr	r3, [r7, #12]
 8109d1c:	685a      	ldr	r2, [r3, #4]
 8109d1e:	68fb      	ldr	r3, [r7, #12]
 8109d20:	689b      	ldr	r3, [r3, #8]
 8109d22:	429a      	cmp	r2, r3
 8109d24:	d32b      	bcc.n	8109d7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8109d26:	68fb      	ldr	r3, [r7, #12]
 8109d28:	681a      	ldr	r2, [r3, #0]
 8109d2a:	68fb      	ldr	r3, [r7, #12]
 8109d2c:	605a      	str	r2, [r3, #4]
 8109d2e:	e026      	b.n	8109d7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8109d30:	68fb      	ldr	r3, [r7, #12]
 8109d32:	68d8      	ldr	r0, [r3, #12]
 8109d34:	68fb      	ldr	r3, [r7, #12]
 8109d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109d38:	461a      	mov	r2, r3
 8109d3a:	68b9      	ldr	r1, [r7, #8]
 8109d3c:	f005 fc48 	bl	810f5d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8109d40:	68fb      	ldr	r3, [r7, #12]
 8109d42:	68da      	ldr	r2, [r3, #12]
 8109d44:	68fb      	ldr	r3, [r7, #12]
 8109d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109d48:	425b      	negs	r3, r3
 8109d4a:	441a      	add	r2, r3
 8109d4c:	68fb      	ldr	r3, [r7, #12]
 8109d4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8109d50:	68fb      	ldr	r3, [r7, #12]
 8109d52:	68da      	ldr	r2, [r3, #12]
 8109d54:	68fb      	ldr	r3, [r7, #12]
 8109d56:	681b      	ldr	r3, [r3, #0]
 8109d58:	429a      	cmp	r2, r3
 8109d5a:	d207      	bcs.n	8109d6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8109d5c:	68fb      	ldr	r3, [r7, #12]
 8109d5e:	689a      	ldr	r2, [r3, #8]
 8109d60:	68fb      	ldr	r3, [r7, #12]
 8109d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109d64:	425b      	negs	r3, r3
 8109d66:	441a      	add	r2, r3
 8109d68:	68fb      	ldr	r3, [r7, #12]
 8109d6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8109d6c:	687b      	ldr	r3, [r7, #4]
 8109d6e:	2b02      	cmp	r3, #2
 8109d70:	d105      	bne.n	8109d7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8109d72:	693b      	ldr	r3, [r7, #16]
 8109d74:	2b00      	cmp	r3, #0
 8109d76:	d002      	beq.n	8109d7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8109d78:	693b      	ldr	r3, [r7, #16]
 8109d7a:	3b01      	subs	r3, #1
 8109d7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8109d7e:	693b      	ldr	r3, [r7, #16]
 8109d80:	1c5a      	adds	r2, r3, #1
 8109d82:	68fb      	ldr	r3, [r7, #12]
 8109d84:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8109d86:	697b      	ldr	r3, [r7, #20]
}
 8109d88:	4618      	mov	r0, r3
 8109d8a:	3718      	adds	r7, #24
 8109d8c:	46bd      	mov	sp, r7
 8109d8e:	bd80      	pop	{r7, pc}

08109d90 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8109d90:	b580      	push	{r7, lr}
 8109d92:	b084      	sub	sp, #16
 8109d94:	af00      	add	r7, sp, #0
 8109d96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8109d98:	f7ff fc80 	bl	810969c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8109d9c:	687b      	ldr	r3, [r7, #4]
 8109d9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8109da2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8109da4:	e011      	b.n	8109dca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8109da6:	687b      	ldr	r3, [r7, #4]
 8109da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109daa:	2b00      	cmp	r3, #0
 8109dac:	d012      	beq.n	8109dd4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8109dae:	687b      	ldr	r3, [r7, #4]
 8109db0:	3324      	adds	r3, #36	; 0x24
 8109db2:	4618      	mov	r0, r3
 8109db4:	f000 fc58 	bl	810a668 <xTaskRemoveFromEventList>
 8109db8:	4603      	mov	r3, r0
 8109dba:	2b00      	cmp	r3, #0
 8109dbc:	d001      	beq.n	8109dc2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8109dbe:	f000 fd2b 	bl	810a818 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8109dc2:	7bfb      	ldrb	r3, [r7, #15]
 8109dc4:	3b01      	subs	r3, #1
 8109dc6:	b2db      	uxtb	r3, r3
 8109dc8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8109dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8109dce:	2b00      	cmp	r3, #0
 8109dd0:	dce9      	bgt.n	8109da6 <prvUnlockQueue+0x16>
 8109dd2:	e000      	b.n	8109dd6 <prvUnlockQueue+0x46>
					break;
 8109dd4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8109dd6:	687b      	ldr	r3, [r7, #4]
 8109dd8:	22ff      	movs	r2, #255	; 0xff
 8109dda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8109dde:	f7ff fc8b 	bl	81096f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8109de2:	f7ff fc5b 	bl	810969c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8109de6:	687b      	ldr	r3, [r7, #4]
 8109de8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8109dec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8109dee:	e011      	b.n	8109e14 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8109df0:	687b      	ldr	r3, [r7, #4]
 8109df2:	691b      	ldr	r3, [r3, #16]
 8109df4:	2b00      	cmp	r3, #0
 8109df6:	d012      	beq.n	8109e1e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8109df8:	687b      	ldr	r3, [r7, #4]
 8109dfa:	3310      	adds	r3, #16
 8109dfc:	4618      	mov	r0, r3
 8109dfe:	f000 fc33 	bl	810a668 <xTaskRemoveFromEventList>
 8109e02:	4603      	mov	r3, r0
 8109e04:	2b00      	cmp	r3, #0
 8109e06:	d001      	beq.n	8109e0c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8109e08:	f000 fd06 	bl	810a818 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8109e0c:	7bbb      	ldrb	r3, [r7, #14]
 8109e0e:	3b01      	subs	r3, #1
 8109e10:	b2db      	uxtb	r3, r3
 8109e12:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8109e14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8109e18:	2b00      	cmp	r3, #0
 8109e1a:	dce9      	bgt.n	8109df0 <prvUnlockQueue+0x60>
 8109e1c:	e000      	b.n	8109e20 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8109e1e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8109e20:	687b      	ldr	r3, [r7, #4]
 8109e22:	22ff      	movs	r2, #255	; 0xff
 8109e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8109e28:	f7ff fc66 	bl	81096f8 <vPortExitCritical>
}
 8109e2c:	bf00      	nop
 8109e2e:	3710      	adds	r7, #16
 8109e30:	46bd      	mov	sp, r7
 8109e32:	bd80      	pop	{r7, pc}

08109e34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8109e34:	b580      	push	{r7, lr}
 8109e36:	b084      	sub	sp, #16
 8109e38:	af00      	add	r7, sp, #0
 8109e3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8109e3c:	f7ff fc2e 	bl	810969c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8109e40:	687b      	ldr	r3, [r7, #4]
 8109e42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8109e44:	687b      	ldr	r3, [r7, #4]
 8109e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109e48:	429a      	cmp	r2, r3
 8109e4a:	d102      	bne.n	8109e52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8109e4c:	2301      	movs	r3, #1
 8109e4e:	60fb      	str	r3, [r7, #12]
 8109e50:	e001      	b.n	8109e56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8109e52:	2300      	movs	r3, #0
 8109e54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8109e56:	f7ff fc4f 	bl	81096f8 <vPortExitCritical>

	return xReturn;
 8109e5a:	68fb      	ldr	r3, [r7, #12]
}
 8109e5c:	4618      	mov	r0, r3
 8109e5e:	3710      	adds	r7, #16
 8109e60:	46bd      	mov	sp, r7
 8109e62:	bd80      	pop	{r7, pc}

08109e64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8109e64:	b580      	push	{r7, lr}
 8109e66:	b08e      	sub	sp, #56	; 0x38
 8109e68:	af04      	add	r7, sp, #16
 8109e6a:	60f8      	str	r0, [r7, #12]
 8109e6c:	60b9      	str	r1, [r7, #8]
 8109e6e:	607a      	str	r2, [r7, #4]
 8109e70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8109e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8109e74:	2b00      	cmp	r3, #0
 8109e76:	d109      	bne.n	8109e8c <xTaskCreateStatic+0x28>
 8109e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109e7c:	f383 8811 	msr	BASEPRI, r3
 8109e80:	f3bf 8f6f 	isb	sy
 8109e84:	f3bf 8f4f 	dsb	sy
 8109e88:	623b      	str	r3, [r7, #32]
 8109e8a:	e7fe      	b.n	8109e8a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8109e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109e8e:	2b00      	cmp	r3, #0
 8109e90:	d109      	bne.n	8109ea6 <xTaskCreateStatic+0x42>
 8109e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109e96:	f383 8811 	msr	BASEPRI, r3
 8109e9a:	f3bf 8f6f 	isb	sy
 8109e9e:	f3bf 8f4f 	dsb	sy
 8109ea2:	61fb      	str	r3, [r7, #28]
 8109ea4:	e7fe      	b.n	8109ea4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8109ea6:	2354      	movs	r3, #84	; 0x54
 8109ea8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8109eaa:	693b      	ldr	r3, [r7, #16]
 8109eac:	2b54      	cmp	r3, #84	; 0x54
 8109eae:	d009      	beq.n	8109ec4 <xTaskCreateStatic+0x60>
 8109eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109eb4:	f383 8811 	msr	BASEPRI, r3
 8109eb8:	f3bf 8f6f 	isb	sy
 8109ebc:	f3bf 8f4f 	dsb	sy
 8109ec0:	61bb      	str	r3, [r7, #24]
 8109ec2:	e7fe      	b.n	8109ec2 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8109ec4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8109ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109ec8:	2b00      	cmp	r3, #0
 8109eca:	d01e      	beq.n	8109f0a <xTaskCreateStatic+0xa6>
 8109ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8109ece:	2b00      	cmp	r3, #0
 8109ed0:	d01b      	beq.n	8109f0a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8109ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109ed4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8109ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109ed8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8109eda:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8109edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109ede:	2202      	movs	r2, #2
 8109ee0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8109ee4:	2300      	movs	r3, #0
 8109ee6:	9303      	str	r3, [sp, #12]
 8109ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109eea:	9302      	str	r3, [sp, #8]
 8109eec:	f107 0314 	add.w	r3, r7, #20
 8109ef0:	9301      	str	r3, [sp, #4]
 8109ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109ef4:	9300      	str	r3, [sp, #0]
 8109ef6:	683b      	ldr	r3, [r7, #0]
 8109ef8:	687a      	ldr	r2, [r7, #4]
 8109efa:	68b9      	ldr	r1, [r7, #8]
 8109efc:	68f8      	ldr	r0, [r7, #12]
 8109efe:	f000 f850 	bl	8109fa2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8109f02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8109f04:	f000 f8d4 	bl	810a0b0 <prvAddNewTaskToReadyList>
 8109f08:	e001      	b.n	8109f0e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8109f0a:	2300      	movs	r3, #0
 8109f0c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8109f0e:	697b      	ldr	r3, [r7, #20]
	}
 8109f10:	4618      	mov	r0, r3
 8109f12:	3728      	adds	r7, #40	; 0x28
 8109f14:	46bd      	mov	sp, r7
 8109f16:	bd80      	pop	{r7, pc}

08109f18 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8109f18:	b580      	push	{r7, lr}
 8109f1a:	b08c      	sub	sp, #48	; 0x30
 8109f1c:	af04      	add	r7, sp, #16
 8109f1e:	60f8      	str	r0, [r7, #12]
 8109f20:	60b9      	str	r1, [r7, #8]
 8109f22:	603b      	str	r3, [r7, #0]
 8109f24:	4613      	mov	r3, r2
 8109f26:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8109f28:	88fb      	ldrh	r3, [r7, #6]
 8109f2a:	009b      	lsls	r3, r3, #2
 8109f2c:	4618      	mov	r0, r3
 8109f2e:	f7ff f803 	bl	8108f38 <pvPortMalloc>
 8109f32:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8109f34:	697b      	ldr	r3, [r7, #20]
 8109f36:	2b00      	cmp	r3, #0
 8109f38:	d00e      	beq.n	8109f58 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8109f3a:	2054      	movs	r0, #84	; 0x54
 8109f3c:	f7fe fffc 	bl	8108f38 <pvPortMalloc>
 8109f40:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8109f42:	69fb      	ldr	r3, [r7, #28]
 8109f44:	2b00      	cmp	r3, #0
 8109f46:	d003      	beq.n	8109f50 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8109f48:	69fb      	ldr	r3, [r7, #28]
 8109f4a:	697a      	ldr	r2, [r7, #20]
 8109f4c:	631a      	str	r2, [r3, #48]	; 0x30
 8109f4e:	e005      	b.n	8109f5c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8109f50:	6978      	ldr	r0, [r7, #20]
 8109f52:	f7ff f8b3 	bl	81090bc <vPortFree>
 8109f56:	e001      	b.n	8109f5c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8109f58:	2300      	movs	r3, #0
 8109f5a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8109f5c:	69fb      	ldr	r3, [r7, #28]
 8109f5e:	2b00      	cmp	r3, #0
 8109f60:	d017      	beq.n	8109f92 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8109f62:	69fb      	ldr	r3, [r7, #28]
 8109f64:	2200      	movs	r2, #0
 8109f66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8109f6a:	88fa      	ldrh	r2, [r7, #6]
 8109f6c:	2300      	movs	r3, #0
 8109f6e:	9303      	str	r3, [sp, #12]
 8109f70:	69fb      	ldr	r3, [r7, #28]
 8109f72:	9302      	str	r3, [sp, #8]
 8109f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109f76:	9301      	str	r3, [sp, #4]
 8109f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109f7a:	9300      	str	r3, [sp, #0]
 8109f7c:	683b      	ldr	r3, [r7, #0]
 8109f7e:	68b9      	ldr	r1, [r7, #8]
 8109f80:	68f8      	ldr	r0, [r7, #12]
 8109f82:	f000 f80e 	bl	8109fa2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8109f86:	69f8      	ldr	r0, [r7, #28]
 8109f88:	f000 f892 	bl	810a0b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8109f8c:	2301      	movs	r3, #1
 8109f8e:	61bb      	str	r3, [r7, #24]
 8109f90:	e002      	b.n	8109f98 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8109f92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8109f96:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8109f98:	69bb      	ldr	r3, [r7, #24]
	}
 8109f9a:	4618      	mov	r0, r3
 8109f9c:	3720      	adds	r7, #32
 8109f9e:	46bd      	mov	sp, r7
 8109fa0:	bd80      	pop	{r7, pc}

08109fa2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8109fa2:	b580      	push	{r7, lr}
 8109fa4:	b088      	sub	sp, #32
 8109fa6:	af00      	add	r7, sp, #0
 8109fa8:	60f8      	str	r0, [r7, #12]
 8109faa:	60b9      	str	r1, [r7, #8]
 8109fac:	607a      	str	r2, [r7, #4]
 8109fae:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8109fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109fb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8109fb4:	687b      	ldr	r3, [r7, #4]
 8109fb6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8109fba:	3b01      	subs	r3, #1
 8109fbc:	009b      	lsls	r3, r3, #2
 8109fbe:	4413      	add	r3, r2
 8109fc0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8109fc2:	69bb      	ldr	r3, [r7, #24]
 8109fc4:	f023 0307 	bic.w	r3, r3, #7
 8109fc8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8109fca:	69bb      	ldr	r3, [r7, #24]
 8109fcc:	f003 0307 	and.w	r3, r3, #7
 8109fd0:	2b00      	cmp	r3, #0
 8109fd2:	d009      	beq.n	8109fe8 <prvInitialiseNewTask+0x46>
 8109fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109fd8:	f383 8811 	msr	BASEPRI, r3
 8109fdc:	f3bf 8f6f 	isb	sy
 8109fe0:	f3bf 8f4f 	dsb	sy
 8109fe4:	617b      	str	r3, [r7, #20]
 8109fe6:	e7fe      	b.n	8109fe6 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8109fe8:	68bb      	ldr	r3, [r7, #8]
 8109fea:	2b00      	cmp	r3, #0
 8109fec:	d01f      	beq.n	810a02e <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8109fee:	2300      	movs	r3, #0
 8109ff0:	61fb      	str	r3, [r7, #28]
 8109ff2:	e012      	b.n	810a01a <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8109ff4:	68ba      	ldr	r2, [r7, #8]
 8109ff6:	69fb      	ldr	r3, [r7, #28]
 8109ff8:	4413      	add	r3, r2
 8109ffa:	7819      	ldrb	r1, [r3, #0]
 8109ffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8109ffe:	69fb      	ldr	r3, [r7, #28]
 810a000:	4413      	add	r3, r2
 810a002:	3334      	adds	r3, #52	; 0x34
 810a004:	460a      	mov	r2, r1
 810a006:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 810a008:	68ba      	ldr	r2, [r7, #8]
 810a00a:	69fb      	ldr	r3, [r7, #28]
 810a00c:	4413      	add	r3, r2
 810a00e:	781b      	ldrb	r3, [r3, #0]
 810a010:	2b00      	cmp	r3, #0
 810a012:	d006      	beq.n	810a022 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810a014:	69fb      	ldr	r3, [r7, #28]
 810a016:	3301      	adds	r3, #1
 810a018:	61fb      	str	r3, [r7, #28]
 810a01a:	69fb      	ldr	r3, [r7, #28]
 810a01c:	2b0f      	cmp	r3, #15
 810a01e:	d9e9      	bls.n	8109ff4 <prvInitialiseNewTask+0x52>
 810a020:	e000      	b.n	810a024 <prvInitialiseNewTask+0x82>
			{
				break;
 810a022:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 810a024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a026:	2200      	movs	r2, #0
 810a028:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 810a02c:	e003      	b.n	810a036 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 810a02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a030:	2200      	movs	r2, #0
 810a032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 810a036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a038:	2b06      	cmp	r3, #6
 810a03a:	d901      	bls.n	810a040 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 810a03c:	2306      	movs	r3, #6
 810a03e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 810a040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a042:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810a044:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 810a046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a048:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810a04a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 810a04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a04e:	2200      	movs	r2, #0
 810a050:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 810a052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a054:	3304      	adds	r3, #4
 810a056:	4618      	mov	r0, r3
 810a058:	f7ff f964 	bl	8109324 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 810a05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a05e:	3318      	adds	r3, #24
 810a060:	4618      	mov	r0, r3
 810a062:	f7ff f95f 	bl	8109324 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 810a066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810a06a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810a06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a06e:	f1c3 0207 	rsb	r2, r3, #7
 810a072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a074:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 810a076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810a07a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 810a07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a07e:	2200      	movs	r2, #0
 810a080:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 810a082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a084:	2200      	movs	r2, #0
 810a086:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 810a08a:	683a      	ldr	r2, [r7, #0]
 810a08c:	68f9      	ldr	r1, [r7, #12]
 810a08e:	69b8      	ldr	r0, [r7, #24]
 810a090:	f7ff f9dc 	bl	810944c <pxPortInitialiseStack>
 810a094:	4602      	mov	r2, r0
 810a096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a098:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 810a09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a09c:	2b00      	cmp	r3, #0
 810a09e:	d002      	beq.n	810a0a6 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 810a0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a0a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810a0a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810a0a6:	bf00      	nop
 810a0a8:	3720      	adds	r7, #32
 810a0aa:	46bd      	mov	sp, r7
 810a0ac:	bd80      	pop	{r7, pc}
	...

0810a0b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 810a0b0:	b580      	push	{r7, lr}
 810a0b2:	b082      	sub	sp, #8
 810a0b4:	af00      	add	r7, sp, #0
 810a0b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 810a0b8:	f7ff faf0 	bl	810969c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 810a0bc:	4b2a      	ldr	r3, [pc, #168]	; (810a168 <prvAddNewTaskToReadyList+0xb8>)
 810a0be:	681b      	ldr	r3, [r3, #0]
 810a0c0:	3301      	adds	r3, #1
 810a0c2:	4a29      	ldr	r2, [pc, #164]	; (810a168 <prvAddNewTaskToReadyList+0xb8>)
 810a0c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 810a0c6:	4b29      	ldr	r3, [pc, #164]	; (810a16c <prvAddNewTaskToReadyList+0xbc>)
 810a0c8:	681b      	ldr	r3, [r3, #0]
 810a0ca:	2b00      	cmp	r3, #0
 810a0cc:	d109      	bne.n	810a0e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 810a0ce:	4a27      	ldr	r2, [pc, #156]	; (810a16c <prvAddNewTaskToReadyList+0xbc>)
 810a0d0:	687b      	ldr	r3, [r7, #4]
 810a0d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 810a0d4:	4b24      	ldr	r3, [pc, #144]	; (810a168 <prvAddNewTaskToReadyList+0xb8>)
 810a0d6:	681b      	ldr	r3, [r3, #0]
 810a0d8:	2b01      	cmp	r3, #1
 810a0da:	d110      	bne.n	810a0fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 810a0dc:	f000 fbc0 	bl	810a860 <prvInitialiseTaskLists>
 810a0e0:	e00d      	b.n	810a0fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 810a0e2:	4b23      	ldr	r3, [pc, #140]	; (810a170 <prvAddNewTaskToReadyList+0xc0>)
 810a0e4:	681b      	ldr	r3, [r3, #0]
 810a0e6:	2b00      	cmp	r3, #0
 810a0e8:	d109      	bne.n	810a0fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 810a0ea:	4b20      	ldr	r3, [pc, #128]	; (810a16c <prvAddNewTaskToReadyList+0xbc>)
 810a0ec:	681b      	ldr	r3, [r3, #0]
 810a0ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a0f0:	687b      	ldr	r3, [r7, #4]
 810a0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a0f4:	429a      	cmp	r2, r3
 810a0f6:	d802      	bhi.n	810a0fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 810a0f8:	4a1c      	ldr	r2, [pc, #112]	; (810a16c <prvAddNewTaskToReadyList+0xbc>)
 810a0fa:	687b      	ldr	r3, [r7, #4]
 810a0fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 810a0fe:	4b1d      	ldr	r3, [pc, #116]	; (810a174 <prvAddNewTaskToReadyList+0xc4>)
 810a100:	681b      	ldr	r3, [r3, #0]
 810a102:	3301      	adds	r3, #1
 810a104:	4a1b      	ldr	r2, [pc, #108]	; (810a174 <prvAddNewTaskToReadyList+0xc4>)
 810a106:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 810a108:	687b      	ldr	r3, [r7, #4]
 810a10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a10c:	2201      	movs	r2, #1
 810a10e:	409a      	lsls	r2, r3
 810a110:	4b19      	ldr	r3, [pc, #100]	; (810a178 <prvAddNewTaskToReadyList+0xc8>)
 810a112:	681b      	ldr	r3, [r3, #0]
 810a114:	4313      	orrs	r3, r2
 810a116:	4a18      	ldr	r2, [pc, #96]	; (810a178 <prvAddNewTaskToReadyList+0xc8>)
 810a118:	6013      	str	r3, [r2, #0]
 810a11a:	687b      	ldr	r3, [r7, #4]
 810a11c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a11e:	4613      	mov	r3, r2
 810a120:	009b      	lsls	r3, r3, #2
 810a122:	4413      	add	r3, r2
 810a124:	009b      	lsls	r3, r3, #2
 810a126:	4a15      	ldr	r2, [pc, #84]	; (810a17c <prvAddNewTaskToReadyList+0xcc>)
 810a128:	441a      	add	r2, r3
 810a12a:	687b      	ldr	r3, [r7, #4]
 810a12c:	3304      	adds	r3, #4
 810a12e:	4619      	mov	r1, r3
 810a130:	4610      	mov	r0, r2
 810a132:	f7ff f904 	bl	810933e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 810a136:	f7ff fadf 	bl	81096f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 810a13a:	4b0d      	ldr	r3, [pc, #52]	; (810a170 <prvAddNewTaskToReadyList+0xc0>)
 810a13c:	681b      	ldr	r3, [r3, #0]
 810a13e:	2b00      	cmp	r3, #0
 810a140:	d00e      	beq.n	810a160 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 810a142:	4b0a      	ldr	r3, [pc, #40]	; (810a16c <prvAddNewTaskToReadyList+0xbc>)
 810a144:	681b      	ldr	r3, [r3, #0]
 810a146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a148:	687b      	ldr	r3, [r7, #4]
 810a14a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a14c:	429a      	cmp	r2, r3
 810a14e:	d207      	bcs.n	810a160 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 810a150:	4b0b      	ldr	r3, [pc, #44]	; (810a180 <prvAddNewTaskToReadyList+0xd0>)
 810a152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810a156:	601a      	str	r2, [r3, #0]
 810a158:	f3bf 8f4f 	dsb	sy
 810a15c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810a160:	bf00      	nop
 810a162:	3708      	adds	r7, #8
 810a164:	46bd      	mov	sp, r7
 810a166:	bd80      	pop	{r7, pc}
 810a168:	100041ac 	.word	0x100041ac
 810a16c:	100040ac 	.word	0x100040ac
 810a170:	100041b8 	.word	0x100041b8
 810a174:	100041c8 	.word	0x100041c8
 810a178:	100041b4 	.word	0x100041b4
 810a17c:	100040b0 	.word	0x100040b0
 810a180:	e000ed04 	.word	0xe000ed04

0810a184 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 810a184:	b580      	push	{r7, lr}
 810a186:	b084      	sub	sp, #16
 810a188:	af00      	add	r7, sp, #0
 810a18a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 810a18c:	2300      	movs	r3, #0
 810a18e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 810a190:	687b      	ldr	r3, [r7, #4]
 810a192:	2b00      	cmp	r3, #0
 810a194:	d016      	beq.n	810a1c4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 810a196:	4b13      	ldr	r3, [pc, #76]	; (810a1e4 <vTaskDelay+0x60>)
 810a198:	681b      	ldr	r3, [r3, #0]
 810a19a:	2b00      	cmp	r3, #0
 810a19c:	d009      	beq.n	810a1b2 <vTaskDelay+0x2e>
 810a19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a1a2:	f383 8811 	msr	BASEPRI, r3
 810a1a6:	f3bf 8f6f 	isb	sy
 810a1aa:	f3bf 8f4f 	dsb	sy
 810a1ae:	60bb      	str	r3, [r7, #8]
 810a1b0:	e7fe      	b.n	810a1b0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 810a1b2:	f000 f879 	bl	810a2a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 810a1b6:	2100      	movs	r1, #0
 810a1b8:	6878      	ldr	r0, [r7, #4]
 810a1ba:	f000 fcad 	bl	810ab18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 810a1be:	f000 f881 	bl	810a2c4 <xTaskResumeAll>
 810a1c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 810a1c4:	68fb      	ldr	r3, [r7, #12]
 810a1c6:	2b00      	cmp	r3, #0
 810a1c8:	d107      	bne.n	810a1da <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 810a1ca:	4b07      	ldr	r3, [pc, #28]	; (810a1e8 <vTaskDelay+0x64>)
 810a1cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810a1d0:	601a      	str	r2, [r3, #0]
 810a1d2:	f3bf 8f4f 	dsb	sy
 810a1d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810a1da:	bf00      	nop
 810a1dc:	3710      	adds	r7, #16
 810a1de:	46bd      	mov	sp, r7
 810a1e0:	bd80      	pop	{r7, pc}
 810a1e2:	bf00      	nop
 810a1e4:	100041d4 	.word	0x100041d4
 810a1e8:	e000ed04 	.word	0xe000ed04

0810a1ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 810a1ec:	b580      	push	{r7, lr}
 810a1ee:	b08a      	sub	sp, #40	; 0x28
 810a1f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 810a1f2:	2300      	movs	r3, #0
 810a1f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 810a1f6:	2300      	movs	r3, #0
 810a1f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 810a1fa:	463a      	mov	r2, r7
 810a1fc:	1d39      	adds	r1, r7, #4
 810a1fe:	f107 0308 	add.w	r3, r7, #8
 810a202:	4618      	mov	r0, r3
 810a204:	f7f6 ffec 	bl	81011e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 810a208:	6839      	ldr	r1, [r7, #0]
 810a20a:	687b      	ldr	r3, [r7, #4]
 810a20c:	68ba      	ldr	r2, [r7, #8]
 810a20e:	9202      	str	r2, [sp, #8]
 810a210:	9301      	str	r3, [sp, #4]
 810a212:	2300      	movs	r3, #0
 810a214:	9300      	str	r3, [sp, #0]
 810a216:	2300      	movs	r3, #0
 810a218:	460a      	mov	r2, r1
 810a21a:	491d      	ldr	r1, [pc, #116]	; (810a290 <vTaskStartScheduler+0xa4>)
 810a21c:	481d      	ldr	r0, [pc, #116]	; (810a294 <vTaskStartScheduler+0xa8>)
 810a21e:	f7ff fe21 	bl	8109e64 <xTaskCreateStatic>
 810a222:	4602      	mov	r2, r0
 810a224:	4b1c      	ldr	r3, [pc, #112]	; (810a298 <vTaskStartScheduler+0xac>)
 810a226:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 810a228:	4b1b      	ldr	r3, [pc, #108]	; (810a298 <vTaskStartScheduler+0xac>)
 810a22a:	681b      	ldr	r3, [r3, #0]
 810a22c:	2b00      	cmp	r3, #0
 810a22e:	d002      	beq.n	810a236 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 810a230:	2301      	movs	r3, #1
 810a232:	617b      	str	r3, [r7, #20]
 810a234:	e001      	b.n	810a23a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 810a236:	2300      	movs	r3, #0
 810a238:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 810a23a:	697b      	ldr	r3, [r7, #20]
 810a23c:	2b01      	cmp	r3, #1
 810a23e:	d115      	bne.n	810a26c <vTaskStartScheduler+0x80>
 810a240:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a244:	f383 8811 	msr	BASEPRI, r3
 810a248:	f3bf 8f6f 	isb	sy
 810a24c:	f3bf 8f4f 	dsb	sy
 810a250:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 810a252:	4b12      	ldr	r3, [pc, #72]	; (810a29c <vTaskStartScheduler+0xb0>)
 810a254:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810a258:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 810a25a:	4b11      	ldr	r3, [pc, #68]	; (810a2a0 <vTaskStartScheduler+0xb4>)
 810a25c:	2201      	movs	r2, #1
 810a25e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 810a260:	4b10      	ldr	r3, [pc, #64]	; (810a2a4 <vTaskStartScheduler+0xb8>)
 810a262:	2200      	movs	r2, #0
 810a264:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 810a266:	f7ff f97b 	bl	8109560 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 810a26a:	e00d      	b.n	810a288 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 810a26c:	697b      	ldr	r3, [r7, #20]
 810a26e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810a272:	d109      	bne.n	810a288 <vTaskStartScheduler+0x9c>
 810a274:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a278:	f383 8811 	msr	BASEPRI, r3
 810a27c:	f3bf 8f6f 	isb	sy
 810a280:	f3bf 8f4f 	dsb	sy
 810a284:	60fb      	str	r3, [r7, #12]
 810a286:	e7fe      	b.n	810a286 <vTaskStartScheduler+0x9a>
}
 810a288:	bf00      	nop
 810a28a:	3718      	adds	r7, #24
 810a28c:	46bd      	mov	sp, r7
 810a28e:	bd80      	pop	{r7, pc}
 810a290:	08112378 	.word	0x08112378
 810a294:	0810a831 	.word	0x0810a831
 810a298:	100041d0 	.word	0x100041d0
 810a29c:	100041cc 	.word	0x100041cc
 810a2a0:	100041b8 	.word	0x100041b8
 810a2a4:	100041b0 	.word	0x100041b0

0810a2a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 810a2a8:	b480      	push	{r7}
 810a2aa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 810a2ac:	4b04      	ldr	r3, [pc, #16]	; (810a2c0 <vTaskSuspendAll+0x18>)
 810a2ae:	681b      	ldr	r3, [r3, #0]
 810a2b0:	3301      	adds	r3, #1
 810a2b2:	4a03      	ldr	r2, [pc, #12]	; (810a2c0 <vTaskSuspendAll+0x18>)
 810a2b4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 810a2b6:	bf00      	nop
 810a2b8:	46bd      	mov	sp, r7
 810a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a2be:	4770      	bx	lr
 810a2c0:	100041d4 	.word	0x100041d4

0810a2c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 810a2c4:	b580      	push	{r7, lr}
 810a2c6:	b084      	sub	sp, #16
 810a2c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 810a2ca:	2300      	movs	r3, #0
 810a2cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 810a2ce:	2300      	movs	r3, #0
 810a2d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 810a2d2:	4b41      	ldr	r3, [pc, #260]	; (810a3d8 <xTaskResumeAll+0x114>)
 810a2d4:	681b      	ldr	r3, [r3, #0]
 810a2d6:	2b00      	cmp	r3, #0
 810a2d8:	d109      	bne.n	810a2ee <xTaskResumeAll+0x2a>
 810a2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a2de:	f383 8811 	msr	BASEPRI, r3
 810a2e2:	f3bf 8f6f 	isb	sy
 810a2e6:	f3bf 8f4f 	dsb	sy
 810a2ea:	603b      	str	r3, [r7, #0]
 810a2ec:	e7fe      	b.n	810a2ec <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 810a2ee:	f7ff f9d5 	bl	810969c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 810a2f2:	4b39      	ldr	r3, [pc, #228]	; (810a3d8 <xTaskResumeAll+0x114>)
 810a2f4:	681b      	ldr	r3, [r3, #0]
 810a2f6:	3b01      	subs	r3, #1
 810a2f8:	4a37      	ldr	r2, [pc, #220]	; (810a3d8 <xTaskResumeAll+0x114>)
 810a2fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810a2fc:	4b36      	ldr	r3, [pc, #216]	; (810a3d8 <xTaskResumeAll+0x114>)
 810a2fe:	681b      	ldr	r3, [r3, #0]
 810a300:	2b00      	cmp	r3, #0
 810a302:	d161      	bne.n	810a3c8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 810a304:	4b35      	ldr	r3, [pc, #212]	; (810a3dc <xTaskResumeAll+0x118>)
 810a306:	681b      	ldr	r3, [r3, #0]
 810a308:	2b00      	cmp	r3, #0
 810a30a:	d05d      	beq.n	810a3c8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810a30c:	e02e      	b.n	810a36c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a30e:	4b34      	ldr	r3, [pc, #208]	; (810a3e0 <xTaskResumeAll+0x11c>)
 810a310:	68db      	ldr	r3, [r3, #12]
 810a312:	68db      	ldr	r3, [r3, #12]
 810a314:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810a316:	68fb      	ldr	r3, [r7, #12]
 810a318:	3318      	adds	r3, #24
 810a31a:	4618      	mov	r0, r3
 810a31c:	f7ff f86c 	bl	81093f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810a320:	68fb      	ldr	r3, [r7, #12]
 810a322:	3304      	adds	r3, #4
 810a324:	4618      	mov	r0, r3
 810a326:	f7ff f867 	bl	81093f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810a32a:	68fb      	ldr	r3, [r7, #12]
 810a32c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a32e:	2201      	movs	r2, #1
 810a330:	409a      	lsls	r2, r3
 810a332:	4b2c      	ldr	r3, [pc, #176]	; (810a3e4 <xTaskResumeAll+0x120>)
 810a334:	681b      	ldr	r3, [r3, #0]
 810a336:	4313      	orrs	r3, r2
 810a338:	4a2a      	ldr	r2, [pc, #168]	; (810a3e4 <xTaskResumeAll+0x120>)
 810a33a:	6013      	str	r3, [r2, #0]
 810a33c:	68fb      	ldr	r3, [r7, #12]
 810a33e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a340:	4613      	mov	r3, r2
 810a342:	009b      	lsls	r3, r3, #2
 810a344:	4413      	add	r3, r2
 810a346:	009b      	lsls	r3, r3, #2
 810a348:	4a27      	ldr	r2, [pc, #156]	; (810a3e8 <xTaskResumeAll+0x124>)
 810a34a:	441a      	add	r2, r3
 810a34c:	68fb      	ldr	r3, [r7, #12]
 810a34e:	3304      	adds	r3, #4
 810a350:	4619      	mov	r1, r3
 810a352:	4610      	mov	r0, r2
 810a354:	f7fe fff3 	bl	810933e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810a358:	68fb      	ldr	r3, [r7, #12]
 810a35a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a35c:	4b23      	ldr	r3, [pc, #140]	; (810a3ec <xTaskResumeAll+0x128>)
 810a35e:	681b      	ldr	r3, [r3, #0]
 810a360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a362:	429a      	cmp	r2, r3
 810a364:	d302      	bcc.n	810a36c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 810a366:	4b22      	ldr	r3, [pc, #136]	; (810a3f0 <xTaskResumeAll+0x12c>)
 810a368:	2201      	movs	r2, #1
 810a36a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810a36c:	4b1c      	ldr	r3, [pc, #112]	; (810a3e0 <xTaskResumeAll+0x11c>)
 810a36e:	681b      	ldr	r3, [r3, #0]
 810a370:	2b00      	cmp	r3, #0
 810a372:	d1cc      	bne.n	810a30e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 810a374:	68fb      	ldr	r3, [r7, #12]
 810a376:	2b00      	cmp	r3, #0
 810a378:	d001      	beq.n	810a37e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 810a37a:	f000 fb0b 	bl	810a994 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 810a37e:	4b1d      	ldr	r3, [pc, #116]	; (810a3f4 <xTaskResumeAll+0x130>)
 810a380:	681b      	ldr	r3, [r3, #0]
 810a382:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 810a384:	687b      	ldr	r3, [r7, #4]
 810a386:	2b00      	cmp	r3, #0
 810a388:	d010      	beq.n	810a3ac <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 810a38a:	f000 f837 	bl	810a3fc <xTaskIncrementTick>
 810a38e:	4603      	mov	r3, r0
 810a390:	2b00      	cmp	r3, #0
 810a392:	d002      	beq.n	810a39a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 810a394:	4b16      	ldr	r3, [pc, #88]	; (810a3f0 <xTaskResumeAll+0x12c>)
 810a396:	2201      	movs	r2, #1
 810a398:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 810a39a:	687b      	ldr	r3, [r7, #4]
 810a39c:	3b01      	subs	r3, #1
 810a39e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 810a3a0:	687b      	ldr	r3, [r7, #4]
 810a3a2:	2b00      	cmp	r3, #0
 810a3a4:	d1f1      	bne.n	810a38a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 810a3a6:	4b13      	ldr	r3, [pc, #76]	; (810a3f4 <xTaskResumeAll+0x130>)
 810a3a8:	2200      	movs	r2, #0
 810a3aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 810a3ac:	4b10      	ldr	r3, [pc, #64]	; (810a3f0 <xTaskResumeAll+0x12c>)
 810a3ae:	681b      	ldr	r3, [r3, #0]
 810a3b0:	2b00      	cmp	r3, #0
 810a3b2:	d009      	beq.n	810a3c8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 810a3b4:	2301      	movs	r3, #1
 810a3b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 810a3b8:	4b0f      	ldr	r3, [pc, #60]	; (810a3f8 <xTaskResumeAll+0x134>)
 810a3ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810a3be:	601a      	str	r2, [r3, #0]
 810a3c0:	f3bf 8f4f 	dsb	sy
 810a3c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810a3c8:	f7ff f996 	bl	81096f8 <vPortExitCritical>

	return xAlreadyYielded;
 810a3cc:	68bb      	ldr	r3, [r7, #8]
}
 810a3ce:	4618      	mov	r0, r3
 810a3d0:	3710      	adds	r7, #16
 810a3d2:	46bd      	mov	sp, r7
 810a3d4:	bd80      	pop	{r7, pc}
 810a3d6:	bf00      	nop
 810a3d8:	100041d4 	.word	0x100041d4
 810a3dc:	100041ac 	.word	0x100041ac
 810a3e0:	1000416c 	.word	0x1000416c
 810a3e4:	100041b4 	.word	0x100041b4
 810a3e8:	100040b0 	.word	0x100040b0
 810a3ec:	100040ac 	.word	0x100040ac
 810a3f0:	100041c0 	.word	0x100041c0
 810a3f4:	100041bc 	.word	0x100041bc
 810a3f8:	e000ed04 	.word	0xe000ed04

0810a3fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 810a3fc:	b580      	push	{r7, lr}
 810a3fe:	b086      	sub	sp, #24
 810a400:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 810a402:	2300      	movs	r3, #0
 810a404:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810a406:	4b4e      	ldr	r3, [pc, #312]	; (810a540 <xTaskIncrementTick+0x144>)
 810a408:	681b      	ldr	r3, [r3, #0]
 810a40a:	2b00      	cmp	r3, #0
 810a40c:	f040 8087 	bne.w	810a51e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 810a410:	4b4c      	ldr	r3, [pc, #304]	; (810a544 <xTaskIncrementTick+0x148>)
 810a412:	681b      	ldr	r3, [r3, #0]
 810a414:	3301      	adds	r3, #1
 810a416:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 810a418:	4a4a      	ldr	r2, [pc, #296]	; (810a544 <xTaskIncrementTick+0x148>)
 810a41a:	693b      	ldr	r3, [r7, #16]
 810a41c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 810a41e:	693b      	ldr	r3, [r7, #16]
 810a420:	2b00      	cmp	r3, #0
 810a422:	d11f      	bne.n	810a464 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 810a424:	4b48      	ldr	r3, [pc, #288]	; (810a548 <xTaskIncrementTick+0x14c>)
 810a426:	681b      	ldr	r3, [r3, #0]
 810a428:	681b      	ldr	r3, [r3, #0]
 810a42a:	2b00      	cmp	r3, #0
 810a42c:	d009      	beq.n	810a442 <xTaskIncrementTick+0x46>
 810a42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a432:	f383 8811 	msr	BASEPRI, r3
 810a436:	f3bf 8f6f 	isb	sy
 810a43a:	f3bf 8f4f 	dsb	sy
 810a43e:	603b      	str	r3, [r7, #0]
 810a440:	e7fe      	b.n	810a440 <xTaskIncrementTick+0x44>
 810a442:	4b41      	ldr	r3, [pc, #260]	; (810a548 <xTaskIncrementTick+0x14c>)
 810a444:	681b      	ldr	r3, [r3, #0]
 810a446:	60fb      	str	r3, [r7, #12]
 810a448:	4b40      	ldr	r3, [pc, #256]	; (810a54c <xTaskIncrementTick+0x150>)
 810a44a:	681b      	ldr	r3, [r3, #0]
 810a44c:	4a3e      	ldr	r2, [pc, #248]	; (810a548 <xTaskIncrementTick+0x14c>)
 810a44e:	6013      	str	r3, [r2, #0]
 810a450:	4a3e      	ldr	r2, [pc, #248]	; (810a54c <xTaskIncrementTick+0x150>)
 810a452:	68fb      	ldr	r3, [r7, #12]
 810a454:	6013      	str	r3, [r2, #0]
 810a456:	4b3e      	ldr	r3, [pc, #248]	; (810a550 <xTaskIncrementTick+0x154>)
 810a458:	681b      	ldr	r3, [r3, #0]
 810a45a:	3301      	adds	r3, #1
 810a45c:	4a3c      	ldr	r2, [pc, #240]	; (810a550 <xTaskIncrementTick+0x154>)
 810a45e:	6013      	str	r3, [r2, #0]
 810a460:	f000 fa98 	bl	810a994 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 810a464:	4b3b      	ldr	r3, [pc, #236]	; (810a554 <xTaskIncrementTick+0x158>)
 810a466:	681b      	ldr	r3, [r3, #0]
 810a468:	693a      	ldr	r2, [r7, #16]
 810a46a:	429a      	cmp	r2, r3
 810a46c:	d348      	bcc.n	810a500 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810a46e:	4b36      	ldr	r3, [pc, #216]	; (810a548 <xTaskIncrementTick+0x14c>)
 810a470:	681b      	ldr	r3, [r3, #0]
 810a472:	681b      	ldr	r3, [r3, #0]
 810a474:	2b00      	cmp	r3, #0
 810a476:	d104      	bne.n	810a482 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810a478:	4b36      	ldr	r3, [pc, #216]	; (810a554 <xTaskIncrementTick+0x158>)
 810a47a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810a47e:	601a      	str	r2, [r3, #0]
					break;
 810a480:	e03e      	b.n	810a500 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a482:	4b31      	ldr	r3, [pc, #196]	; (810a548 <xTaskIncrementTick+0x14c>)
 810a484:	681b      	ldr	r3, [r3, #0]
 810a486:	68db      	ldr	r3, [r3, #12]
 810a488:	68db      	ldr	r3, [r3, #12]
 810a48a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 810a48c:	68bb      	ldr	r3, [r7, #8]
 810a48e:	685b      	ldr	r3, [r3, #4]
 810a490:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 810a492:	693a      	ldr	r2, [r7, #16]
 810a494:	687b      	ldr	r3, [r7, #4]
 810a496:	429a      	cmp	r2, r3
 810a498:	d203      	bcs.n	810a4a2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 810a49a:	4a2e      	ldr	r2, [pc, #184]	; (810a554 <xTaskIncrementTick+0x158>)
 810a49c:	687b      	ldr	r3, [r7, #4]
 810a49e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 810a4a0:	e02e      	b.n	810a500 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810a4a2:	68bb      	ldr	r3, [r7, #8]
 810a4a4:	3304      	adds	r3, #4
 810a4a6:	4618      	mov	r0, r3
 810a4a8:	f7fe ffa6 	bl	81093f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 810a4ac:	68bb      	ldr	r3, [r7, #8]
 810a4ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a4b0:	2b00      	cmp	r3, #0
 810a4b2:	d004      	beq.n	810a4be <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810a4b4:	68bb      	ldr	r3, [r7, #8]
 810a4b6:	3318      	adds	r3, #24
 810a4b8:	4618      	mov	r0, r3
 810a4ba:	f7fe ff9d 	bl	81093f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 810a4be:	68bb      	ldr	r3, [r7, #8]
 810a4c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a4c2:	2201      	movs	r2, #1
 810a4c4:	409a      	lsls	r2, r3
 810a4c6:	4b24      	ldr	r3, [pc, #144]	; (810a558 <xTaskIncrementTick+0x15c>)
 810a4c8:	681b      	ldr	r3, [r3, #0]
 810a4ca:	4313      	orrs	r3, r2
 810a4cc:	4a22      	ldr	r2, [pc, #136]	; (810a558 <xTaskIncrementTick+0x15c>)
 810a4ce:	6013      	str	r3, [r2, #0]
 810a4d0:	68bb      	ldr	r3, [r7, #8]
 810a4d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a4d4:	4613      	mov	r3, r2
 810a4d6:	009b      	lsls	r3, r3, #2
 810a4d8:	4413      	add	r3, r2
 810a4da:	009b      	lsls	r3, r3, #2
 810a4dc:	4a1f      	ldr	r2, [pc, #124]	; (810a55c <xTaskIncrementTick+0x160>)
 810a4de:	441a      	add	r2, r3
 810a4e0:	68bb      	ldr	r3, [r7, #8]
 810a4e2:	3304      	adds	r3, #4
 810a4e4:	4619      	mov	r1, r3
 810a4e6:	4610      	mov	r0, r2
 810a4e8:	f7fe ff29 	bl	810933e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810a4ec:	68bb      	ldr	r3, [r7, #8]
 810a4ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a4f0:	4b1b      	ldr	r3, [pc, #108]	; (810a560 <xTaskIncrementTick+0x164>)
 810a4f2:	681b      	ldr	r3, [r3, #0]
 810a4f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a4f6:	429a      	cmp	r2, r3
 810a4f8:	d3b9      	bcc.n	810a46e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 810a4fa:	2301      	movs	r3, #1
 810a4fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810a4fe:	e7b6      	b.n	810a46e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 810a500:	4b17      	ldr	r3, [pc, #92]	; (810a560 <xTaskIncrementTick+0x164>)
 810a502:	681b      	ldr	r3, [r3, #0]
 810a504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a506:	4915      	ldr	r1, [pc, #84]	; (810a55c <xTaskIncrementTick+0x160>)
 810a508:	4613      	mov	r3, r2
 810a50a:	009b      	lsls	r3, r3, #2
 810a50c:	4413      	add	r3, r2
 810a50e:	009b      	lsls	r3, r3, #2
 810a510:	440b      	add	r3, r1
 810a512:	681b      	ldr	r3, [r3, #0]
 810a514:	2b01      	cmp	r3, #1
 810a516:	d907      	bls.n	810a528 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 810a518:	2301      	movs	r3, #1
 810a51a:	617b      	str	r3, [r7, #20]
 810a51c:	e004      	b.n	810a528 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 810a51e:	4b11      	ldr	r3, [pc, #68]	; (810a564 <xTaskIncrementTick+0x168>)
 810a520:	681b      	ldr	r3, [r3, #0]
 810a522:	3301      	adds	r3, #1
 810a524:	4a0f      	ldr	r2, [pc, #60]	; (810a564 <xTaskIncrementTick+0x168>)
 810a526:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 810a528:	4b0f      	ldr	r3, [pc, #60]	; (810a568 <xTaskIncrementTick+0x16c>)
 810a52a:	681b      	ldr	r3, [r3, #0]
 810a52c:	2b00      	cmp	r3, #0
 810a52e:	d001      	beq.n	810a534 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 810a530:	2301      	movs	r3, #1
 810a532:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 810a534:	697b      	ldr	r3, [r7, #20]
}
 810a536:	4618      	mov	r0, r3
 810a538:	3718      	adds	r7, #24
 810a53a:	46bd      	mov	sp, r7
 810a53c:	bd80      	pop	{r7, pc}
 810a53e:	bf00      	nop
 810a540:	100041d4 	.word	0x100041d4
 810a544:	100041b0 	.word	0x100041b0
 810a548:	10004164 	.word	0x10004164
 810a54c:	10004168 	.word	0x10004168
 810a550:	100041c4 	.word	0x100041c4
 810a554:	100041cc 	.word	0x100041cc
 810a558:	100041b4 	.word	0x100041b4
 810a55c:	100040b0 	.word	0x100040b0
 810a560:	100040ac 	.word	0x100040ac
 810a564:	100041bc 	.word	0x100041bc
 810a568:	100041c0 	.word	0x100041c0

0810a56c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 810a56c:	b480      	push	{r7}
 810a56e:	b087      	sub	sp, #28
 810a570:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 810a572:	4b26      	ldr	r3, [pc, #152]	; (810a60c <vTaskSwitchContext+0xa0>)
 810a574:	681b      	ldr	r3, [r3, #0]
 810a576:	2b00      	cmp	r3, #0
 810a578:	d003      	beq.n	810a582 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 810a57a:	4b25      	ldr	r3, [pc, #148]	; (810a610 <vTaskSwitchContext+0xa4>)
 810a57c:	2201      	movs	r2, #1
 810a57e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 810a580:	e03e      	b.n	810a600 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 810a582:	4b23      	ldr	r3, [pc, #140]	; (810a610 <vTaskSwitchContext+0xa4>)
 810a584:	2200      	movs	r2, #0
 810a586:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a588:	4b22      	ldr	r3, [pc, #136]	; (810a614 <vTaskSwitchContext+0xa8>)
 810a58a:	681b      	ldr	r3, [r3, #0]
 810a58c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 810a58e:	68fb      	ldr	r3, [r7, #12]
 810a590:	fab3 f383 	clz	r3, r3
 810a594:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 810a596:	7afb      	ldrb	r3, [r7, #11]
 810a598:	f1c3 031f 	rsb	r3, r3, #31
 810a59c:	617b      	str	r3, [r7, #20]
 810a59e:	491e      	ldr	r1, [pc, #120]	; (810a618 <vTaskSwitchContext+0xac>)
 810a5a0:	697a      	ldr	r2, [r7, #20]
 810a5a2:	4613      	mov	r3, r2
 810a5a4:	009b      	lsls	r3, r3, #2
 810a5a6:	4413      	add	r3, r2
 810a5a8:	009b      	lsls	r3, r3, #2
 810a5aa:	440b      	add	r3, r1
 810a5ac:	681b      	ldr	r3, [r3, #0]
 810a5ae:	2b00      	cmp	r3, #0
 810a5b0:	d109      	bne.n	810a5c6 <vTaskSwitchContext+0x5a>
	__asm volatile
 810a5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a5b6:	f383 8811 	msr	BASEPRI, r3
 810a5ba:	f3bf 8f6f 	isb	sy
 810a5be:	f3bf 8f4f 	dsb	sy
 810a5c2:	607b      	str	r3, [r7, #4]
 810a5c4:	e7fe      	b.n	810a5c4 <vTaskSwitchContext+0x58>
 810a5c6:	697a      	ldr	r2, [r7, #20]
 810a5c8:	4613      	mov	r3, r2
 810a5ca:	009b      	lsls	r3, r3, #2
 810a5cc:	4413      	add	r3, r2
 810a5ce:	009b      	lsls	r3, r3, #2
 810a5d0:	4a11      	ldr	r2, [pc, #68]	; (810a618 <vTaskSwitchContext+0xac>)
 810a5d2:	4413      	add	r3, r2
 810a5d4:	613b      	str	r3, [r7, #16]
 810a5d6:	693b      	ldr	r3, [r7, #16]
 810a5d8:	685b      	ldr	r3, [r3, #4]
 810a5da:	685a      	ldr	r2, [r3, #4]
 810a5dc:	693b      	ldr	r3, [r7, #16]
 810a5de:	605a      	str	r2, [r3, #4]
 810a5e0:	693b      	ldr	r3, [r7, #16]
 810a5e2:	685a      	ldr	r2, [r3, #4]
 810a5e4:	693b      	ldr	r3, [r7, #16]
 810a5e6:	3308      	adds	r3, #8
 810a5e8:	429a      	cmp	r2, r3
 810a5ea:	d104      	bne.n	810a5f6 <vTaskSwitchContext+0x8a>
 810a5ec:	693b      	ldr	r3, [r7, #16]
 810a5ee:	685b      	ldr	r3, [r3, #4]
 810a5f0:	685a      	ldr	r2, [r3, #4]
 810a5f2:	693b      	ldr	r3, [r7, #16]
 810a5f4:	605a      	str	r2, [r3, #4]
 810a5f6:	693b      	ldr	r3, [r7, #16]
 810a5f8:	685b      	ldr	r3, [r3, #4]
 810a5fa:	68db      	ldr	r3, [r3, #12]
 810a5fc:	4a07      	ldr	r2, [pc, #28]	; (810a61c <vTaskSwitchContext+0xb0>)
 810a5fe:	6013      	str	r3, [r2, #0]
}
 810a600:	bf00      	nop
 810a602:	371c      	adds	r7, #28
 810a604:	46bd      	mov	sp, r7
 810a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a60a:	4770      	bx	lr
 810a60c:	100041d4 	.word	0x100041d4
 810a610:	100041c0 	.word	0x100041c0
 810a614:	100041b4 	.word	0x100041b4
 810a618:	100040b0 	.word	0x100040b0
 810a61c:	100040ac 	.word	0x100040ac

0810a620 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 810a620:	b580      	push	{r7, lr}
 810a622:	b084      	sub	sp, #16
 810a624:	af00      	add	r7, sp, #0
 810a626:	6078      	str	r0, [r7, #4]
 810a628:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 810a62a:	687b      	ldr	r3, [r7, #4]
 810a62c:	2b00      	cmp	r3, #0
 810a62e:	d109      	bne.n	810a644 <vTaskPlaceOnEventList+0x24>
 810a630:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a634:	f383 8811 	msr	BASEPRI, r3
 810a638:	f3bf 8f6f 	isb	sy
 810a63c:	f3bf 8f4f 	dsb	sy
 810a640:	60fb      	str	r3, [r7, #12]
 810a642:	e7fe      	b.n	810a642 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810a644:	4b07      	ldr	r3, [pc, #28]	; (810a664 <vTaskPlaceOnEventList+0x44>)
 810a646:	681b      	ldr	r3, [r3, #0]
 810a648:	3318      	adds	r3, #24
 810a64a:	4619      	mov	r1, r3
 810a64c:	6878      	ldr	r0, [r7, #4]
 810a64e:	f7fe fe9a 	bl	8109386 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 810a652:	2101      	movs	r1, #1
 810a654:	6838      	ldr	r0, [r7, #0]
 810a656:	f000 fa5f 	bl	810ab18 <prvAddCurrentTaskToDelayedList>
}
 810a65a:	bf00      	nop
 810a65c:	3710      	adds	r7, #16
 810a65e:	46bd      	mov	sp, r7
 810a660:	bd80      	pop	{r7, pc}
 810a662:	bf00      	nop
 810a664:	100040ac 	.word	0x100040ac

0810a668 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 810a668:	b580      	push	{r7, lr}
 810a66a:	b086      	sub	sp, #24
 810a66c:	af00      	add	r7, sp, #0
 810a66e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a670:	687b      	ldr	r3, [r7, #4]
 810a672:	68db      	ldr	r3, [r3, #12]
 810a674:	68db      	ldr	r3, [r3, #12]
 810a676:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 810a678:	693b      	ldr	r3, [r7, #16]
 810a67a:	2b00      	cmp	r3, #0
 810a67c:	d109      	bne.n	810a692 <xTaskRemoveFromEventList+0x2a>
 810a67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a682:	f383 8811 	msr	BASEPRI, r3
 810a686:	f3bf 8f6f 	isb	sy
 810a68a:	f3bf 8f4f 	dsb	sy
 810a68e:	60fb      	str	r3, [r7, #12]
 810a690:	e7fe      	b.n	810a690 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 810a692:	693b      	ldr	r3, [r7, #16]
 810a694:	3318      	adds	r3, #24
 810a696:	4618      	mov	r0, r3
 810a698:	f7fe feae 	bl	81093f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810a69c:	4b1d      	ldr	r3, [pc, #116]	; (810a714 <xTaskRemoveFromEventList+0xac>)
 810a69e:	681b      	ldr	r3, [r3, #0]
 810a6a0:	2b00      	cmp	r3, #0
 810a6a2:	d11c      	bne.n	810a6de <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 810a6a4:	693b      	ldr	r3, [r7, #16]
 810a6a6:	3304      	adds	r3, #4
 810a6a8:	4618      	mov	r0, r3
 810a6aa:	f7fe fea5 	bl	81093f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 810a6ae:	693b      	ldr	r3, [r7, #16]
 810a6b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a6b2:	2201      	movs	r2, #1
 810a6b4:	409a      	lsls	r2, r3
 810a6b6:	4b18      	ldr	r3, [pc, #96]	; (810a718 <xTaskRemoveFromEventList+0xb0>)
 810a6b8:	681b      	ldr	r3, [r3, #0]
 810a6ba:	4313      	orrs	r3, r2
 810a6bc:	4a16      	ldr	r2, [pc, #88]	; (810a718 <xTaskRemoveFromEventList+0xb0>)
 810a6be:	6013      	str	r3, [r2, #0]
 810a6c0:	693b      	ldr	r3, [r7, #16]
 810a6c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a6c4:	4613      	mov	r3, r2
 810a6c6:	009b      	lsls	r3, r3, #2
 810a6c8:	4413      	add	r3, r2
 810a6ca:	009b      	lsls	r3, r3, #2
 810a6cc:	4a13      	ldr	r2, [pc, #76]	; (810a71c <xTaskRemoveFromEventList+0xb4>)
 810a6ce:	441a      	add	r2, r3
 810a6d0:	693b      	ldr	r3, [r7, #16]
 810a6d2:	3304      	adds	r3, #4
 810a6d4:	4619      	mov	r1, r3
 810a6d6:	4610      	mov	r0, r2
 810a6d8:	f7fe fe31 	bl	810933e <vListInsertEnd>
 810a6dc:	e005      	b.n	810a6ea <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 810a6de:	693b      	ldr	r3, [r7, #16]
 810a6e0:	3318      	adds	r3, #24
 810a6e2:	4619      	mov	r1, r3
 810a6e4:	480e      	ldr	r0, [pc, #56]	; (810a720 <xTaskRemoveFromEventList+0xb8>)
 810a6e6:	f7fe fe2a 	bl	810933e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 810a6ea:	693b      	ldr	r3, [r7, #16]
 810a6ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a6ee:	4b0d      	ldr	r3, [pc, #52]	; (810a724 <xTaskRemoveFromEventList+0xbc>)
 810a6f0:	681b      	ldr	r3, [r3, #0]
 810a6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a6f4:	429a      	cmp	r2, r3
 810a6f6:	d905      	bls.n	810a704 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 810a6f8:	2301      	movs	r3, #1
 810a6fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 810a6fc:	4b0a      	ldr	r3, [pc, #40]	; (810a728 <xTaskRemoveFromEventList+0xc0>)
 810a6fe:	2201      	movs	r2, #1
 810a700:	601a      	str	r2, [r3, #0]
 810a702:	e001      	b.n	810a708 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 810a704:	2300      	movs	r3, #0
 810a706:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 810a708:	697b      	ldr	r3, [r7, #20]
}
 810a70a:	4618      	mov	r0, r3
 810a70c:	3718      	adds	r7, #24
 810a70e:	46bd      	mov	sp, r7
 810a710:	bd80      	pop	{r7, pc}
 810a712:	bf00      	nop
 810a714:	100041d4 	.word	0x100041d4
 810a718:	100041b4 	.word	0x100041b4
 810a71c:	100040b0 	.word	0x100040b0
 810a720:	1000416c 	.word	0x1000416c
 810a724:	100040ac 	.word	0x100040ac
 810a728:	100041c0 	.word	0x100041c0

0810a72c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 810a72c:	b480      	push	{r7}
 810a72e:	b083      	sub	sp, #12
 810a730:	af00      	add	r7, sp, #0
 810a732:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 810a734:	4b06      	ldr	r3, [pc, #24]	; (810a750 <vTaskInternalSetTimeOutState+0x24>)
 810a736:	681a      	ldr	r2, [r3, #0]
 810a738:	687b      	ldr	r3, [r7, #4]
 810a73a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 810a73c:	4b05      	ldr	r3, [pc, #20]	; (810a754 <vTaskInternalSetTimeOutState+0x28>)
 810a73e:	681a      	ldr	r2, [r3, #0]
 810a740:	687b      	ldr	r3, [r7, #4]
 810a742:	605a      	str	r2, [r3, #4]
}
 810a744:	bf00      	nop
 810a746:	370c      	adds	r7, #12
 810a748:	46bd      	mov	sp, r7
 810a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a74e:	4770      	bx	lr
 810a750:	100041c4 	.word	0x100041c4
 810a754:	100041b0 	.word	0x100041b0

0810a758 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 810a758:	b580      	push	{r7, lr}
 810a75a:	b088      	sub	sp, #32
 810a75c:	af00      	add	r7, sp, #0
 810a75e:	6078      	str	r0, [r7, #4]
 810a760:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 810a762:	687b      	ldr	r3, [r7, #4]
 810a764:	2b00      	cmp	r3, #0
 810a766:	d109      	bne.n	810a77c <xTaskCheckForTimeOut+0x24>
 810a768:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a76c:	f383 8811 	msr	BASEPRI, r3
 810a770:	f3bf 8f6f 	isb	sy
 810a774:	f3bf 8f4f 	dsb	sy
 810a778:	613b      	str	r3, [r7, #16]
 810a77a:	e7fe      	b.n	810a77a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 810a77c:	683b      	ldr	r3, [r7, #0]
 810a77e:	2b00      	cmp	r3, #0
 810a780:	d109      	bne.n	810a796 <xTaskCheckForTimeOut+0x3e>
 810a782:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a786:	f383 8811 	msr	BASEPRI, r3
 810a78a:	f3bf 8f6f 	isb	sy
 810a78e:	f3bf 8f4f 	dsb	sy
 810a792:	60fb      	str	r3, [r7, #12]
 810a794:	e7fe      	b.n	810a794 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 810a796:	f7fe ff81 	bl	810969c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 810a79a:	4b1d      	ldr	r3, [pc, #116]	; (810a810 <xTaskCheckForTimeOut+0xb8>)
 810a79c:	681b      	ldr	r3, [r3, #0]
 810a79e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 810a7a0:	687b      	ldr	r3, [r7, #4]
 810a7a2:	685b      	ldr	r3, [r3, #4]
 810a7a4:	69ba      	ldr	r2, [r7, #24]
 810a7a6:	1ad3      	subs	r3, r2, r3
 810a7a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 810a7aa:	683b      	ldr	r3, [r7, #0]
 810a7ac:	681b      	ldr	r3, [r3, #0]
 810a7ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810a7b2:	d102      	bne.n	810a7ba <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 810a7b4:	2300      	movs	r3, #0
 810a7b6:	61fb      	str	r3, [r7, #28]
 810a7b8:	e023      	b.n	810a802 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 810a7ba:	687b      	ldr	r3, [r7, #4]
 810a7bc:	681a      	ldr	r2, [r3, #0]
 810a7be:	4b15      	ldr	r3, [pc, #84]	; (810a814 <xTaskCheckForTimeOut+0xbc>)
 810a7c0:	681b      	ldr	r3, [r3, #0]
 810a7c2:	429a      	cmp	r2, r3
 810a7c4:	d007      	beq.n	810a7d6 <xTaskCheckForTimeOut+0x7e>
 810a7c6:	687b      	ldr	r3, [r7, #4]
 810a7c8:	685b      	ldr	r3, [r3, #4]
 810a7ca:	69ba      	ldr	r2, [r7, #24]
 810a7cc:	429a      	cmp	r2, r3
 810a7ce:	d302      	bcc.n	810a7d6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 810a7d0:	2301      	movs	r3, #1
 810a7d2:	61fb      	str	r3, [r7, #28]
 810a7d4:	e015      	b.n	810a802 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 810a7d6:	683b      	ldr	r3, [r7, #0]
 810a7d8:	681b      	ldr	r3, [r3, #0]
 810a7da:	697a      	ldr	r2, [r7, #20]
 810a7dc:	429a      	cmp	r2, r3
 810a7de:	d20b      	bcs.n	810a7f8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 810a7e0:	683b      	ldr	r3, [r7, #0]
 810a7e2:	681a      	ldr	r2, [r3, #0]
 810a7e4:	697b      	ldr	r3, [r7, #20]
 810a7e6:	1ad2      	subs	r2, r2, r3
 810a7e8:	683b      	ldr	r3, [r7, #0]
 810a7ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 810a7ec:	6878      	ldr	r0, [r7, #4]
 810a7ee:	f7ff ff9d 	bl	810a72c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 810a7f2:	2300      	movs	r3, #0
 810a7f4:	61fb      	str	r3, [r7, #28]
 810a7f6:	e004      	b.n	810a802 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 810a7f8:	683b      	ldr	r3, [r7, #0]
 810a7fa:	2200      	movs	r2, #0
 810a7fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 810a7fe:	2301      	movs	r3, #1
 810a800:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 810a802:	f7fe ff79 	bl	81096f8 <vPortExitCritical>

	return xReturn;
 810a806:	69fb      	ldr	r3, [r7, #28]
}
 810a808:	4618      	mov	r0, r3
 810a80a:	3720      	adds	r7, #32
 810a80c:	46bd      	mov	sp, r7
 810a80e:	bd80      	pop	{r7, pc}
 810a810:	100041b0 	.word	0x100041b0
 810a814:	100041c4 	.word	0x100041c4

0810a818 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 810a818:	b480      	push	{r7}
 810a81a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 810a81c:	4b03      	ldr	r3, [pc, #12]	; (810a82c <vTaskMissedYield+0x14>)
 810a81e:	2201      	movs	r2, #1
 810a820:	601a      	str	r2, [r3, #0]
}
 810a822:	bf00      	nop
 810a824:	46bd      	mov	sp, r7
 810a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a82a:	4770      	bx	lr
 810a82c:	100041c0 	.word	0x100041c0

0810a830 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 810a830:	b580      	push	{r7, lr}
 810a832:	b082      	sub	sp, #8
 810a834:	af00      	add	r7, sp, #0
 810a836:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 810a838:	f000 f852 	bl	810a8e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 810a83c:	4b06      	ldr	r3, [pc, #24]	; (810a858 <prvIdleTask+0x28>)
 810a83e:	681b      	ldr	r3, [r3, #0]
 810a840:	2b01      	cmp	r3, #1
 810a842:	d9f9      	bls.n	810a838 <prvIdleTask+0x8>
			{
				taskYIELD();
 810a844:	4b05      	ldr	r3, [pc, #20]	; (810a85c <prvIdleTask+0x2c>)
 810a846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810a84a:	601a      	str	r2, [r3, #0]
 810a84c:	f3bf 8f4f 	dsb	sy
 810a850:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 810a854:	e7f0      	b.n	810a838 <prvIdleTask+0x8>
 810a856:	bf00      	nop
 810a858:	100040b0 	.word	0x100040b0
 810a85c:	e000ed04 	.word	0xe000ed04

0810a860 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 810a860:	b580      	push	{r7, lr}
 810a862:	b082      	sub	sp, #8
 810a864:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810a866:	2300      	movs	r3, #0
 810a868:	607b      	str	r3, [r7, #4]
 810a86a:	e00c      	b.n	810a886 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 810a86c:	687a      	ldr	r2, [r7, #4]
 810a86e:	4613      	mov	r3, r2
 810a870:	009b      	lsls	r3, r3, #2
 810a872:	4413      	add	r3, r2
 810a874:	009b      	lsls	r3, r3, #2
 810a876:	4a12      	ldr	r2, [pc, #72]	; (810a8c0 <prvInitialiseTaskLists+0x60>)
 810a878:	4413      	add	r3, r2
 810a87a:	4618      	mov	r0, r3
 810a87c:	f7fe fd32 	bl	81092e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810a880:	687b      	ldr	r3, [r7, #4]
 810a882:	3301      	adds	r3, #1
 810a884:	607b      	str	r3, [r7, #4]
 810a886:	687b      	ldr	r3, [r7, #4]
 810a888:	2b06      	cmp	r3, #6
 810a88a:	d9ef      	bls.n	810a86c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 810a88c:	480d      	ldr	r0, [pc, #52]	; (810a8c4 <prvInitialiseTaskLists+0x64>)
 810a88e:	f7fe fd29 	bl	81092e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 810a892:	480d      	ldr	r0, [pc, #52]	; (810a8c8 <prvInitialiseTaskLists+0x68>)
 810a894:	f7fe fd26 	bl	81092e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 810a898:	480c      	ldr	r0, [pc, #48]	; (810a8cc <prvInitialiseTaskLists+0x6c>)
 810a89a:	f7fe fd23 	bl	81092e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 810a89e:	480c      	ldr	r0, [pc, #48]	; (810a8d0 <prvInitialiseTaskLists+0x70>)
 810a8a0:	f7fe fd20 	bl	81092e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 810a8a4:	480b      	ldr	r0, [pc, #44]	; (810a8d4 <prvInitialiseTaskLists+0x74>)
 810a8a6:	f7fe fd1d 	bl	81092e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 810a8aa:	4b0b      	ldr	r3, [pc, #44]	; (810a8d8 <prvInitialiseTaskLists+0x78>)
 810a8ac:	4a05      	ldr	r2, [pc, #20]	; (810a8c4 <prvInitialiseTaskLists+0x64>)
 810a8ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 810a8b0:	4b0a      	ldr	r3, [pc, #40]	; (810a8dc <prvInitialiseTaskLists+0x7c>)
 810a8b2:	4a05      	ldr	r2, [pc, #20]	; (810a8c8 <prvInitialiseTaskLists+0x68>)
 810a8b4:	601a      	str	r2, [r3, #0]
}
 810a8b6:	bf00      	nop
 810a8b8:	3708      	adds	r7, #8
 810a8ba:	46bd      	mov	sp, r7
 810a8bc:	bd80      	pop	{r7, pc}
 810a8be:	bf00      	nop
 810a8c0:	100040b0 	.word	0x100040b0
 810a8c4:	1000413c 	.word	0x1000413c
 810a8c8:	10004150 	.word	0x10004150
 810a8cc:	1000416c 	.word	0x1000416c
 810a8d0:	10004180 	.word	0x10004180
 810a8d4:	10004198 	.word	0x10004198
 810a8d8:	10004164 	.word	0x10004164
 810a8dc:	10004168 	.word	0x10004168

0810a8e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 810a8e0:	b580      	push	{r7, lr}
 810a8e2:	b082      	sub	sp, #8
 810a8e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810a8e6:	e019      	b.n	810a91c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 810a8e8:	f7fe fed8 	bl	810969c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a8ec:	4b0f      	ldr	r3, [pc, #60]	; (810a92c <prvCheckTasksWaitingTermination+0x4c>)
 810a8ee:	68db      	ldr	r3, [r3, #12]
 810a8f0:	68db      	ldr	r3, [r3, #12]
 810a8f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810a8f4:	687b      	ldr	r3, [r7, #4]
 810a8f6:	3304      	adds	r3, #4
 810a8f8:	4618      	mov	r0, r3
 810a8fa:	f7fe fd7d 	bl	81093f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 810a8fe:	4b0c      	ldr	r3, [pc, #48]	; (810a930 <prvCheckTasksWaitingTermination+0x50>)
 810a900:	681b      	ldr	r3, [r3, #0]
 810a902:	3b01      	subs	r3, #1
 810a904:	4a0a      	ldr	r2, [pc, #40]	; (810a930 <prvCheckTasksWaitingTermination+0x50>)
 810a906:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 810a908:	4b0a      	ldr	r3, [pc, #40]	; (810a934 <prvCheckTasksWaitingTermination+0x54>)
 810a90a:	681b      	ldr	r3, [r3, #0]
 810a90c:	3b01      	subs	r3, #1
 810a90e:	4a09      	ldr	r2, [pc, #36]	; (810a934 <prvCheckTasksWaitingTermination+0x54>)
 810a910:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 810a912:	f7fe fef1 	bl	81096f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 810a916:	6878      	ldr	r0, [r7, #4]
 810a918:	f000 f80e 	bl	810a938 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810a91c:	4b05      	ldr	r3, [pc, #20]	; (810a934 <prvCheckTasksWaitingTermination+0x54>)
 810a91e:	681b      	ldr	r3, [r3, #0]
 810a920:	2b00      	cmp	r3, #0
 810a922:	d1e1      	bne.n	810a8e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 810a924:	bf00      	nop
 810a926:	3708      	adds	r7, #8
 810a928:	46bd      	mov	sp, r7
 810a92a:	bd80      	pop	{r7, pc}
 810a92c:	10004180 	.word	0x10004180
 810a930:	100041ac 	.word	0x100041ac
 810a934:	10004194 	.word	0x10004194

0810a938 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 810a938:	b580      	push	{r7, lr}
 810a93a:	b084      	sub	sp, #16
 810a93c:	af00      	add	r7, sp, #0
 810a93e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 810a940:	687b      	ldr	r3, [r7, #4]
 810a942:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 810a946:	2b00      	cmp	r3, #0
 810a948:	d108      	bne.n	810a95c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 810a94a:	687b      	ldr	r3, [r7, #4]
 810a94c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810a94e:	4618      	mov	r0, r3
 810a950:	f7fe fbb4 	bl	81090bc <vPortFree>
				vPortFree( pxTCB );
 810a954:	6878      	ldr	r0, [r7, #4]
 810a956:	f7fe fbb1 	bl	81090bc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 810a95a:	e017      	b.n	810a98c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 810a95c:	687b      	ldr	r3, [r7, #4]
 810a95e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 810a962:	2b01      	cmp	r3, #1
 810a964:	d103      	bne.n	810a96e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 810a966:	6878      	ldr	r0, [r7, #4]
 810a968:	f7fe fba8 	bl	81090bc <vPortFree>
	}
 810a96c:	e00e      	b.n	810a98c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 810a96e:	687b      	ldr	r3, [r7, #4]
 810a970:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 810a974:	2b02      	cmp	r3, #2
 810a976:	d009      	beq.n	810a98c <prvDeleteTCB+0x54>
 810a978:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a97c:	f383 8811 	msr	BASEPRI, r3
 810a980:	f3bf 8f6f 	isb	sy
 810a984:	f3bf 8f4f 	dsb	sy
 810a988:	60fb      	str	r3, [r7, #12]
 810a98a:	e7fe      	b.n	810a98a <prvDeleteTCB+0x52>
	}
 810a98c:	bf00      	nop
 810a98e:	3710      	adds	r7, #16
 810a990:	46bd      	mov	sp, r7
 810a992:	bd80      	pop	{r7, pc}

0810a994 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 810a994:	b480      	push	{r7}
 810a996:	b083      	sub	sp, #12
 810a998:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810a99a:	4b0c      	ldr	r3, [pc, #48]	; (810a9cc <prvResetNextTaskUnblockTime+0x38>)
 810a99c:	681b      	ldr	r3, [r3, #0]
 810a99e:	681b      	ldr	r3, [r3, #0]
 810a9a0:	2b00      	cmp	r3, #0
 810a9a2:	d104      	bne.n	810a9ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 810a9a4:	4b0a      	ldr	r3, [pc, #40]	; (810a9d0 <prvResetNextTaskUnblockTime+0x3c>)
 810a9a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810a9aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 810a9ac:	e008      	b.n	810a9c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a9ae:	4b07      	ldr	r3, [pc, #28]	; (810a9cc <prvResetNextTaskUnblockTime+0x38>)
 810a9b0:	681b      	ldr	r3, [r3, #0]
 810a9b2:	68db      	ldr	r3, [r3, #12]
 810a9b4:	68db      	ldr	r3, [r3, #12]
 810a9b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 810a9b8:	687b      	ldr	r3, [r7, #4]
 810a9ba:	685b      	ldr	r3, [r3, #4]
 810a9bc:	4a04      	ldr	r2, [pc, #16]	; (810a9d0 <prvResetNextTaskUnblockTime+0x3c>)
 810a9be:	6013      	str	r3, [r2, #0]
}
 810a9c0:	bf00      	nop
 810a9c2:	370c      	adds	r7, #12
 810a9c4:	46bd      	mov	sp, r7
 810a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a9ca:	4770      	bx	lr
 810a9cc:	10004164 	.word	0x10004164
 810a9d0:	100041cc 	.word	0x100041cc

0810a9d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 810a9d4:	b480      	push	{r7}
 810a9d6:	b083      	sub	sp, #12
 810a9d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 810a9da:	4b0b      	ldr	r3, [pc, #44]	; (810aa08 <xTaskGetSchedulerState+0x34>)
 810a9dc:	681b      	ldr	r3, [r3, #0]
 810a9de:	2b00      	cmp	r3, #0
 810a9e0:	d102      	bne.n	810a9e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 810a9e2:	2301      	movs	r3, #1
 810a9e4:	607b      	str	r3, [r7, #4]
 810a9e6:	e008      	b.n	810a9fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810a9e8:	4b08      	ldr	r3, [pc, #32]	; (810aa0c <xTaskGetSchedulerState+0x38>)
 810a9ea:	681b      	ldr	r3, [r3, #0]
 810a9ec:	2b00      	cmp	r3, #0
 810a9ee:	d102      	bne.n	810a9f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 810a9f0:	2302      	movs	r3, #2
 810a9f2:	607b      	str	r3, [r7, #4]
 810a9f4:	e001      	b.n	810a9fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 810a9f6:	2300      	movs	r3, #0
 810a9f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 810a9fa:	687b      	ldr	r3, [r7, #4]
	}
 810a9fc:	4618      	mov	r0, r3
 810a9fe:	370c      	adds	r7, #12
 810aa00:	46bd      	mov	sp, r7
 810aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aa06:	4770      	bx	lr
 810aa08:	100041b8 	.word	0x100041b8
 810aa0c:	100041d4 	.word	0x100041d4

0810aa10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 810aa10:	b580      	push	{r7, lr}
 810aa12:	b086      	sub	sp, #24
 810aa14:	af00      	add	r7, sp, #0
 810aa16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 810aa18:	687b      	ldr	r3, [r7, #4]
 810aa1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 810aa1c:	2300      	movs	r3, #0
 810aa1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810aa20:	687b      	ldr	r3, [r7, #4]
 810aa22:	2b00      	cmp	r3, #0
 810aa24:	d06c      	beq.n	810ab00 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 810aa26:	4b39      	ldr	r3, [pc, #228]	; (810ab0c <xTaskPriorityDisinherit+0xfc>)
 810aa28:	681b      	ldr	r3, [r3, #0]
 810aa2a:	693a      	ldr	r2, [r7, #16]
 810aa2c:	429a      	cmp	r2, r3
 810aa2e:	d009      	beq.n	810aa44 <xTaskPriorityDisinherit+0x34>
 810aa30:	f04f 0350 	mov.w	r3, #80	; 0x50
 810aa34:	f383 8811 	msr	BASEPRI, r3
 810aa38:	f3bf 8f6f 	isb	sy
 810aa3c:	f3bf 8f4f 	dsb	sy
 810aa40:	60fb      	str	r3, [r7, #12]
 810aa42:	e7fe      	b.n	810aa42 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 810aa44:	693b      	ldr	r3, [r7, #16]
 810aa46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810aa48:	2b00      	cmp	r3, #0
 810aa4a:	d109      	bne.n	810aa60 <xTaskPriorityDisinherit+0x50>
 810aa4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810aa50:	f383 8811 	msr	BASEPRI, r3
 810aa54:	f3bf 8f6f 	isb	sy
 810aa58:	f3bf 8f4f 	dsb	sy
 810aa5c:	60bb      	str	r3, [r7, #8]
 810aa5e:	e7fe      	b.n	810aa5e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 810aa60:	693b      	ldr	r3, [r7, #16]
 810aa62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810aa64:	1e5a      	subs	r2, r3, #1
 810aa66:	693b      	ldr	r3, [r7, #16]
 810aa68:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 810aa6a:	693b      	ldr	r3, [r7, #16]
 810aa6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810aa6e:	693b      	ldr	r3, [r7, #16]
 810aa70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810aa72:	429a      	cmp	r2, r3
 810aa74:	d044      	beq.n	810ab00 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 810aa76:	693b      	ldr	r3, [r7, #16]
 810aa78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810aa7a:	2b00      	cmp	r3, #0
 810aa7c:	d140      	bne.n	810ab00 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810aa7e:	693b      	ldr	r3, [r7, #16]
 810aa80:	3304      	adds	r3, #4
 810aa82:	4618      	mov	r0, r3
 810aa84:	f7fe fcb8 	bl	81093f8 <uxListRemove>
 810aa88:	4603      	mov	r3, r0
 810aa8a:	2b00      	cmp	r3, #0
 810aa8c:	d115      	bne.n	810aaba <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 810aa8e:	693b      	ldr	r3, [r7, #16]
 810aa90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810aa92:	491f      	ldr	r1, [pc, #124]	; (810ab10 <xTaskPriorityDisinherit+0x100>)
 810aa94:	4613      	mov	r3, r2
 810aa96:	009b      	lsls	r3, r3, #2
 810aa98:	4413      	add	r3, r2
 810aa9a:	009b      	lsls	r3, r3, #2
 810aa9c:	440b      	add	r3, r1
 810aa9e:	681b      	ldr	r3, [r3, #0]
 810aaa0:	2b00      	cmp	r3, #0
 810aaa2:	d10a      	bne.n	810aaba <xTaskPriorityDisinherit+0xaa>
 810aaa4:	693b      	ldr	r3, [r7, #16]
 810aaa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810aaa8:	2201      	movs	r2, #1
 810aaaa:	fa02 f303 	lsl.w	r3, r2, r3
 810aaae:	43da      	mvns	r2, r3
 810aab0:	4b18      	ldr	r3, [pc, #96]	; (810ab14 <xTaskPriorityDisinherit+0x104>)
 810aab2:	681b      	ldr	r3, [r3, #0]
 810aab4:	4013      	ands	r3, r2
 810aab6:	4a17      	ldr	r2, [pc, #92]	; (810ab14 <xTaskPriorityDisinherit+0x104>)
 810aab8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 810aaba:	693b      	ldr	r3, [r7, #16]
 810aabc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810aabe:	693b      	ldr	r3, [r7, #16]
 810aac0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810aac2:	693b      	ldr	r3, [r7, #16]
 810aac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810aac6:	f1c3 0207 	rsb	r2, r3, #7
 810aaca:	693b      	ldr	r3, [r7, #16]
 810aacc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 810aace:	693b      	ldr	r3, [r7, #16]
 810aad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810aad2:	2201      	movs	r2, #1
 810aad4:	409a      	lsls	r2, r3
 810aad6:	4b0f      	ldr	r3, [pc, #60]	; (810ab14 <xTaskPriorityDisinherit+0x104>)
 810aad8:	681b      	ldr	r3, [r3, #0]
 810aada:	4313      	orrs	r3, r2
 810aadc:	4a0d      	ldr	r2, [pc, #52]	; (810ab14 <xTaskPriorityDisinherit+0x104>)
 810aade:	6013      	str	r3, [r2, #0]
 810aae0:	693b      	ldr	r3, [r7, #16]
 810aae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810aae4:	4613      	mov	r3, r2
 810aae6:	009b      	lsls	r3, r3, #2
 810aae8:	4413      	add	r3, r2
 810aaea:	009b      	lsls	r3, r3, #2
 810aaec:	4a08      	ldr	r2, [pc, #32]	; (810ab10 <xTaskPriorityDisinherit+0x100>)
 810aaee:	441a      	add	r2, r3
 810aaf0:	693b      	ldr	r3, [r7, #16]
 810aaf2:	3304      	adds	r3, #4
 810aaf4:	4619      	mov	r1, r3
 810aaf6:	4610      	mov	r0, r2
 810aaf8:	f7fe fc21 	bl	810933e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 810aafc:	2301      	movs	r3, #1
 810aafe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 810ab00:	697b      	ldr	r3, [r7, #20]
	}
 810ab02:	4618      	mov	r0, r3
 810ab04:	3718      	adds	r7, #24
 810ab06:	46bd      	mov	sp, r7
 810ab08:	bd80      	pop	{r7, pc}
 810ab0a:	bf00      	nop
 810ab0c:	100040ac 	.word	0x100040ac
 810ab10:	100040b0 	.word	0x100040b0
 810ab14:	100041b4 	.word	0x100041b4

0810ab18 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 810ab18:	b580      	push	{r7, lr}
 810ab1a:	b084      	sub	sp, #16
 810ab1c:	af00      	add	r7, sp, #0
 810ab1e:	6078      	str	r0, [r7, #4]
 810ab20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 810ab22:	4b29      	ldr	r3, [pc, #164]	; (810abc8 <prvAddCurrentTaskToDelayedList+0xb0>)
 810ab24:	681b      	ldr	r3, [r3, #0]
 810ab26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810ab28:	4b28      	ldr	r3, [pc, #160]	; (810abcc <prvAddCurrentTaskToDelayedList+0xb4>)
 810ab2a:	681b      	ldr	r3, [r3, #0]
 810ab2c:	3304      	adds	r3, #4
 810ab2e:	4618      	mov	r0, r3
 810ab30:	f7fe fc62 	bl	81093f8 <uxListRemove>
 810ab34:	4603      	mov	r3, r0
 810ab36:	2b00      	cmp	r3, #0
 810ab38:	d10b      	bne.n	810ab52 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 810ab3a:	4b24      	ldr	r3, [pc, #144]	; (810abcc <prvAddCurrentTaskToDelayedList+0xb4>)
 810ab3c:	681b      	ldr	r3, [r3, #0]
 810ab3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ab40:	2201      	movs	r2, #1
 810ab42:	fa02 f303 	lsl.w	r3, r2, r3
 810ab46:	43da      	mvns	r2, r3
 810ab48:	4b21      	ldr	r3, [pc, #132]	; (810abd0 <prvAddCurrentTaskToDelayedList+0xb8>)
 810ab4a:	681b      	ldr	r3, [r3, #0]
 810ab4c:	4013      	ands	r3, r2
 810ab4e:	4a20      	ldr	r2, [pc, #128]	; (810abd0 <prvAddCurrentTaskToDelayedList+0xb8>)
 810ab50:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 810ab52:	687b      	ldr	r3, [r7, #4]
 810ab54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810ab58:	d10a      	bne.n	810ab70 <prvAddCurrentTaskToDelayedList+0x58>
 810ab5a:	683b      	ldr	r3, [r7, #0]
 810ab5c:	2b00      	cmp	r3, #0
 810ab5e:	d007      	beq.n	810ab70 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810ab60:	4b1a      	ldr	r3, [pc, #104]	; (810abcc <prvAddCurrentTaskToDelayedList+0xb4>)
 810ab62:	681b      	ldr	r3, [r3, #0]
 810ab64:	3304      	adds	r3, #4
 810ab66:	4619      	mov	r1, r3
 810ab68:	481a      	ldr	r0, [pc, #104]	; (810abd4 <prvAddCurrentTaskToDelayedList+0xbc>)
 810ab6a:	f7fe fbe8 	bl	810933e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 810ab6e:	e026      	b.n	810abbe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 810ab70:	68fa      	ldr	r2, [r7, #12]
 810ab72:	687b      	ldr	r3, [r7, #4]
 810ab74:	4413      	add	r3, r2
 810ab76:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 810ab78:	4b14      	ldr	r3, [pc, #80]	; (810abcc <prvAddCurrentTaskToDelayedList+0xb4>)
 810ab7a:	681b      	ldr	r3, [r3, #0]
 810ab7c:	68ba      	ldr	r2, [r7, #8]
 810ab7e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 810ab80:	68ba      	ldr	r2, [r7, #8]
 810ab82:	68fb      	ldr	r3, [r7, #12]
 810ab84:	429a      	cmp	r2, r3
 810ab86:	d209      	bcs.n	810ab9c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810ab88:	4b13      	ldr	r3, [pc, #76]	; (810abd8 <prvAddCurrentTaskToDelayedList+0xc0>)
 810ab8a:	681a      	ldr	r2, [r3, #0]
 810ab8c:	4b0f      	ldr	r3, [pc, #60]	; (810abcc <prvAddCurrentTaskToDelayedList+0xb4>)
 810ab8e:	681b      	ldr	r3, [r3, #0]
 810ab90:	3304      	adds	r3, #4
 810ab92:	4619      	mov	r1, r3
 810ab94:	4610      	mov	r0, r2
 810ab96:	f7fe fbf6 	bl	8109386 <vListInsert>
}
 810ab9a:	e010      	b.n	810abbe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810ab9c:	4b0f      	ldr	r3, [pc, #60]	; (810abdc <prvAddCurrentTaskToDelayedList+0xc4>)
 810ab9e:	681a      	ldr	r2, [r3, #0]
 810aba0:	4b0a      	ldr	r3, [pc, #40]	; (810abcc <prvAddCurrentTaskToDelayedList+0xb4>)
 810aba2:	681b      	ldr	r3, [r3, #0]
 810aba4:	3304      	adds	r3, #4
 810aba6:	4619      	mov	r1, r3
 810aba8:	4610      	mov	r0, r2
 810abaa:	f7fe fbec 	bl	8109386 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 810abae:	4b0c      	ldr	r3, [pc, #48]	; (810abe0 <prvAddCurrentTaskToDelayedList+0xc8>)
 810abb0:	681b      	ldr	r3, [r3, #0]
 810abb2:	68ba      	ldr	r2, [r7, #8]
 810abb4:	429a      	cmp	r2, r3
 810abb6:	d202      	bcs.n	810abbe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 810abb8:	4a09      	ldr	r2, [pc, #36]	; (810abe0 <prvAddCurrentTaskToDelayedList+0xc8>)
 810abba:	68bb      	ldr	r3, [r7, #8]
 810abbc:	6013      	str	r3, [r2, #0]
}
 810abbe:	bf00      	nop
 810abc0:	3710      	adds	r7, #16
 810abc2:	46bd      	mov	sp, r7
 810abc4:	bd80      	pop	{r7, pc}
 810abc6:	bf00      	nop
 810abc8:	100041b0 	.word	0x100041b0
 810abcc:	100040ac 	.word	0x100040ac
 810abd0:	100041b4 	.word	0x100041b4
 810abd4:	10004198 	.word	0x10004198
 810abd8:	10004168 	.word	0x10004168
 810abdc:	10004164 	.word	0x10004164
 810abe0:	100041cc 	.word	0x100041cc

0810abe4 <_ZN7ConsoleC1EP20__UART_HandleTypeDef>:



osSemaphoreDef(console_sem);

Console::Console(UART_HandleTypeDef* uart) : console_uart(uart) {
 810abe4:	b580      	push	{r7, lr}
 810abe6:	b082      	sub	sp, #8
 810abe8:	af00      	add	r7, sp, #0
 810abea:	6078      	str	r0, [r7, #4]
 810abec:	6039      	str	r1, [r7, #0]
 810abee:	687b      	ldr	r3, [r7, #4]
 810abf0:	683a      	ldr	r2, [r7, #0]
 810abf2:	601a      	str	r2, [r3, #0]
	console_uart = uart;
 810abf4:	687b      	ldr	r3, [r7, #4]
 810abf6:	683a      	ldr	r2, [r7, #0]
 810abf8:	601a      	str	r2, [r3, #0]
	console_semaphore = osSemaphoreCreate(osSemaphore(console_sem), 3);
 810abfa:	2103      	movs	r1, #3
 810abfc:	4805      	ldr	r0, [pc, #20]	; (810ac14 <_ZN7ConsoleC1EP20__UART_HandleTypeDef+0x30>)
 810abfe:	f7fe f967 	bl	8108ed0 <osSemaphoreCreate>
 810ac02:	4602      	mov	r2, r0
 810ac04:	687b      	ldr	r3, [r7, #4]
 810ac06:	605a      	str	r2, [r3, #4]
}
 810ac08:	687b      	ldr	r3, [r7, #4]
 810ac0a:	4618      	mov	r0, r3
 810ac0c:	3708      	adds	r7, #8
 810ac0e:	46bd      	mov	sp, r7
 810ac10:	bd80      	pop	{r7, pc}
 810ac12:	bf00      	nop
 810ac14:	08112a30 	.word	0x08112a30

0810ac18 <_ZN7Console8transmitEPhm>:

void Console::unlock() {
	osSemaphoreRelease(console_semaphore);
}

void Console::transmit(uint8_t* buffer, uint32_t length) {
 810ac18:	b580      	push	{r7, lr}
 810ac1a:	b084      	sub	sp, #16
 810ac1c:	af00      	add	r7, sp, #0
 810ac1e:	60f8      	str	r0, [r7, #12]
 810ac20:	60b9      	str	r1, [r7, #8]
 810ac22:	607a      	str	r2, [r7, #4]
	while(HAL_HSEM_IsSemTaken(HARDWARE_SEMAPHORE));
 810ac24:	2002      	movs	r0, #2
 810ac26:	f7fa f93f 	bl	8104ea8 <HAL_HSEM_IsSemTaken>
 810ac2a:	4603      	mov	r3, r0
 810ac2c:	2b00      	cmp	r3, #0
 810ac2e:	bf14      	ite	ne
 810ac30:	2301      	movne	r3, #1
 810ac32:	2300      	moveq	r3, #0
 810ac34:	b2db      	uxtb	r3, r3
 810ac36:	2b00      	cmp	r3, #0
 810ac38:	d000      	beq.n	810ac3c <_ZN7Console8transmitEPhm+0x24>
 810ac3a:	e7f3      	b.n	810ac24 <_ZN7Console8transmitEPhm+0xc>

	HAL_HSEM_Take(HARDWARE_SEMAPHORE, 2);
 810ac3c:	2102      	movs	r1, #2
 810ac3e:	2002      	movs	r0, #2
 810ac40:	f7fa f90e 	bl	8104e60 <HAL_HSEM_Take>
	HAL_UART_Transmit(console_uart, buffer, length, 0xFFFFFF);
 810ac44:	68fb      	ldr	r3, [r7, #12]
 810ac46:	6818      	ldr	r0, [r3, #0]
 810ac48:	687b      	ldr	r3, [r7, #4]
 810ac4a:	b29a      	uxth	r2, r3
 810ac4c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 810ac50:	68b9      	ldr	r1, [r7, #8]
 810ac52:	f7fc fdc3 	bl	81077dc <HAL_UART_Transmit>
	HAL_HSEM_Release(HARDWARE_SEMAPHORE, 2);
 810ac56:	2102      	movs	r1, #2
 810ac58:	2002      	movs	r0, #2
 810ac5a:	f7fa f93b 	bl	8104ed4 <HAL_HSEM_Release>
}
 810ac5e:	bf00      	nop
 810ac60:	3710      	adds	r7, #16
 810ac62:	46bd      	mov	sp, r7
 810ac64:	bd80      	pop	{r7, pc}

0810ac66 <_ZN7Console5printEPKc>:

void Console::print(const char* buffer) {
 810ac66:	b580      	push	{r7, lr}
 810ac68:	b082      	sub	sp, #8
 810ac6a:	af00      	add	r7, sp, #0
 810ac6c:	6078      	str	r0, [r7, #4]
 810ac6e:	6039      	str	r1, [r7, #0]
	transmit((uint8_t*) buffer, strlen(buffer));
 810ac70:	6838      	ldr	r0, [r7, #0]
 810ac72:	f7f5 fb3f 	bl	81002f4 <strlen>
 810ac76:	4603      	mov	r3, r0
 810ac78:	461a      	mov	r2, r3
 810ac7a:	6839      	ldr	r1, [r7, #0]
 810ac7c:	6878      	ldr	r0, [r7, #4]
 810ac7e:	f7ff ffcb 	bl	810ac18 <_ZN7Console8transmitEPhm>
}
 810ac82:	bf00      	nop
 810ac84:	3708      	adds	r7, #8
 810ac86:	46bd      	mov	sp, r7
 810ac88:	bd80      	pop	{r7, pc}

0810ac8a <_ZN7Console6printfEPKcz>:

void Console::printf(const char *format, ...) {
 810ac8a:	b40e      	push	{r1, r2, r3}
 810ac8c:	b580      	push	{r7, lr}
 810ac8e:	b085      	sub	sp, #20
 810ac90:	af00      	add	r7, sp, #0
 810ac92:	6078      	str	r0, [r7, #4]
	va_list args;
	va_start(args, format);
 810ac94:	f107 0320 	add.w	r3, r7, #32
 810ac98:	60fb      	str	r3, [r7, #12]

	if(vsprintf(buffer, format, args) > 0) {
 810ac9a:	687b      	ldr	r3, [r7, #4]
 810ac9c:	3308      	adds	r3, #8
 810ac9e:	68fa      	ldr	r2, [r7, #12]
 810aca0:	69f9      	ldr	r1, [r7, #28]
 810aca2:	4618      	mov	r0, r3
 810aca4:	f005 fa8c 	bl	81101c0 <vsiprintf>
 810aca8:	4603      	mov	r3, r0
 810acaa:	2b00      	cmp	r3, #0
 810acac:	bfcc      	ite	gt
 810acae:	2301      	movgt	r3, #1
 810acb0:	2300      	movle	r3, #0
 810acb2:	b2db      	uxtb	r3, r3
 810acb4:	2b00      	cmp	r3, #0
 810acb6:	d005      	beq.n	810acc4 <_ZN7Console6printfEPKcz+0x3a>
		print(buffer);
 810acb8:	687b      	ldr	r3, [r7, #4]
 810acba:	3308      	adds	r3, #8
 810acbc:	4619      	mov	r1, r3
 810acbe:	6878      	ldr	r0, [r7, #4]
 810acc0:	f7ff ffd1 	bl	810ac66 <_ZN7Console5printEPKc>
	}

	va_end(args);
}
 810acc4:	bf00      	nop
 810acc6:	3714      	adds	r7, #20
 810acc8:	46bd      	mov	sp, r7
 810acca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810acce:	b003      	add	sp, #12
 810acd0:	4770      	bx	lr
	...

0810acd4 <_Z41__static_initialization_and_destruction_0ii>:


Console console(&huart3);
Monitor monitor;
Profiler profiler;
Terminal terminal;
 810acd4:	b580      	push	{r7, lr}
 810acd6:	b082      	sub	sp, #8
 810acd8:	af00      	add	r7, sp, #0
 810acda:	6078      	str	r0, [r7, #4]
 810acdc:	6039      	str	r1, [r7, #0]
 810acde:	687b      	ldr	r3, [r7, #4]
 810ace0:	2b01      	cmp	r3, #1
 810ace2:	d108      	bne.n	810acf6 <_Z41__static_initialization_and_destruction_0ii+0x22>
 810ace4:	683b      	ldr	r3, [r7, #0]
 810ace6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 810acea:	4293      	cmp	r3, r2
 810acec:	d103      	bne.n	810acf6 <_Z41__static_initialization_and_destruction_0ii+0x22>
Console console(&huart3);
 810acee:	4904      	ldr	r1, [pc, #16]	; (810ad00 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 810acf0:	4804      	ldr	r0, [pc, #16]	; (810ad04 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 810acf2:	f7ff ff77 	bl	810abe4 <_ZN7ConsoleC1EP20__UART_HandleTypeDef>
Terminal terminal;
 810acf6:	bf00      	nop
 810acf8:	3708      	adds	r7, #8
 810acfa:	46bd      	mov	sp, r7
 810acfc:	bd80      	pop	{r7, pc}
 810acfe:	bf00      	nop
 810ad00:	10009c7c 	.word	0x10009c7c
 810ad04:	100041d8 	.word	0x100041d8

0810ad08 <_GLOBAL__sub_I_console>:
 810ad08:	b580      	push	{r7, lr}
 810ad0a:	af00      	add	r7, sp, #0
 810ad0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 810ad10:	2001      	movs	r0, #1
 810ad12:	f7ff ffdf 	bl	810acd4 <_Z41__static_initialization_and_destruction_0ii>
 810ad16:	bd80      	pop	{r7, pc}

0810ad18 <_ZN8Profiler6enableEv>:
			profiler->depth_to_display--;
		}
	}
}

void Profiler::enable() {
 810ad18:	b480      	push	{r7}
 810ad1a:	b085      	sub	sp, #20
 810ad1c:	af00      	add	r7, sp, #0
 810ad1e:	6078      	str	r0, [r7, #4]
	profiling_requested = true;
 810ad20:	687b      	ldr	r3, [r7, #4]
 810ad22:	2201      	movs	r2, #1
 810ad24:	f883 2340 	strb.w	r2, [r3, #832]	; 0x340

	for(uint8_t i = 0; i < NUM_PROFILERS; i++) {
 810ad28:	2300      	movs	r3, #0
 810ad2a:	73fb      	strb	r3, [r7, #15]
 810ad2c:	7bfb      	ldrb	r3, [r7, #15]
 810ad2e:	2b0f      	cmp	r3, #15
 810ad30:	d80c      	bhi.n	810ad4c <_ZN8Profiler6enableEv+0x34>
		profilers[i].depth_to_display = -1;
 810ad32:	7bfb      	ldrb	r3, [r7, #15]
 810ad34:	687a      	ldr	r2, [r7, #4]
 810ad36:	2134      	movs	r1, #52	; 0x34
 810ad38:	fb01 f303 	mul.w	r3, r1, r3
 810ad3c:	4413      	add	r3, r2
 810ad3e:	3308      	adds	r3, #8
 810ad40:	22ff      	movs	r2, #255	; 0xff
 810ad42:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < NUM_PROFILERS; i++) {
 810ad44:	7bfb      	ldrb	r3, [r7, #15]
 810ad46:	3301      	adds	r3, #1
 810ad48:	73fb      	strb	r3, [r7, #15]
 810ad4a:	e7ef      	b.n	810ad2c <_ZN8Profiler6enableEv+0x14>
	}
}
 810ad4c:	bf00      	nop
 810ad4e:	3714      	adds	r7, #20
 810ad50:	46bd      	mov	sp, r7
 810ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ad56:	4770      	bx	lr

0810ad58 <_ZN8Profiler7disableEv>:

void Profiler::disable() {
 810ad58:	b480      	push	{r7}
 810ad5a:	b083      	sub	sp, #12
 810ad5c:	af00      	add	r7, sp, #0
 810ad5e:	6078      	str	r0, [r7, #4]
	profiling = false;
 810ad60:	687b      	ldr	r3, [r7, #4]
 810ad62:	2200      	movs	r2, #0
 810ad64:	f883 2341 	strb.w	r2, [r3, #833]	; 0x341
}
 810ad68:	bf00      	nop
 810ad6a:	370c      	adds	r7, #12
 810ad6c:	46bd      	mov	sp, r7
 810ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ad72:	4770      	bx	lr

0810ad74 <_ZN5ShellC1EP20__UART_HandleTypeDefP8Terminal>:


#include "Debug.h"


Shell::Shell(UART_HandleTypeDef* uart, Terminal* terminal) : Thread("Shell"), uart(uart), terminal(terminal) {
 810ad74:	b580      	push	{r7, lr}
 810ad76:	b084      	sub	sp, #16
 810ad78:	af00      	add	r7, sp, #0
 810ad7a:	60f8      	str	r0, [r7, #12]
 810ad7c:	60b9      	str	r1, [r7, #8]
 810ad7e:	607a      	str	r2, [r7, #4]
 810ad80:	68fb      	ldr	r3, [r7, #12]
 810ad82:	4910      	ldr	r1, [pc, #64]	; (810adc4 <_ZN5ShellC1EP20__UART_HandleTypeDefP8Terminal+0x50>)
 810ad84:	4618      	mov	r0, r3
 810ad86:	f003 ffc1 	bl	810ed0c <_ZN6ThreadC1EPKc>
 810ad8a:	4a0f      	ldr	r2, [pc, #60]	; (810adc8 <_ZN5ShellC1EP20__UART_HandleTypeDefP8Terminal+0x54>)
 810ad8c:	68fb      	ldr	r3, [r7, #12]
 810ad8e:	601a      	str	r2, [r3, #0]
 810ad90:	68fb      	ldr	r3, [r7, #12]
 810ad92:	68ba      	ldr	r2, [r7, #8]
 810ad94:	60da      	str	r2, [r3, #12]
 810ad96:	68fb      	ldr	r3, [r7, #12]
 810ad98:	687a      	ldr	r2, [r7, #4]
 810ad9a:	611a      	str	r2, [r3, #16]
 810ad9c:	68fb      	ldr	r3, [r7, #12]
 810ad9e:	2200      	movs	r2, #0
 810ada0:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 810ada4:	68fb      	ldr	r3, [r7, #12]
 810ada6:	2200      	movs	r2, #0
 810ada8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
	cmd.components[0].component = command_buffer; // Bind command structure to buffer
 810adac:	68fb      	ldr	r3, [r7, #12]
 810adae:	f503 7205 	add.w	r2, r3, #532	; 0x214
 810adb2:	68fb      	ldr	r3, [r7, #12]
 810adb4:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
}
 810adb8:	68fb      	ldr	r3, [r7, #12]
 810adba:	4618      	mov	r0, r3
 810adbc:	3710      	adds	r7, #16
 810adbe:	46bd      	mov	sp, r7
 810adc0:	bd80      	pop	{r7, pc}
 810adc2:	bf00      	nop
 810adc4:	08112380 	.word	0x08112380
 810adc8:	08112a40 	.word	0x08112a40

0810adcc <_ZN5Shell4initEv>:

void Shell::init() {
 810adcc:	b580      	push	{r7, lr}
 810adce:	b082      	sub	sp, #8
 810add0:	af00      	add	r7, sp, #0
 810add2:	6078      	str	r0, [r7, #4]
	console.printf("\x1b[2J\x1b[H");
 810add4:	490a      	ldr	r1, [pc, #40]	; (810ae00 <_ZN5Shell4initEv+0x34>)
 810add6:	480b      	ldr	r0, [pc, #44]	; (810ae04 <_ZN5Shell4initEv+0x38>)
 810add8:	f7ff ff57 	bl	810ac8a <_ZN7Console6printfEPKcz>
	console.printf("----- EPFL Xplore Avionics Shell -----\r\n");
 810addc:	490a      	ldr	r1, [pc, #40]	; (810ae08 <_ZN5Shell4initEv+0x3c>)
 810adde:	4809      	ldr	r0, [pc, #36]	; (810ae04 <_ZN5Shell4initEv+0x38>)
 810ade0:	f7ff ff53 	bl	810ac8a <_ZN7Console6printfEPKcz>
	HAL_UART_Receive_DMA(uart, dma_buffer, CMD_BUFFER_SIZE);
 810ade4:	687b      	ldr	r3, [r7, #4]
 810ade6:	68d8      	ldr	r0, [r3, #12]
 810ade8:	687b      	ldr	r3, [r7, #4]
 810adea:	3314      	adds	r3, #20
 810adec:	f44f 7200 	mov.w	r2, #512	; 0x200
 810adf0:	4619      	mov	r1, r3
 810adf2:	f7fc fd89 	bl	8107908 <HAL_UART_Receive_DMA>
}
 810adf6:	bf00      	nop
 810adf8:	3708      	adds	r7, #8
 810adfa:	46bd      	mov	sp, r7
 810adfc:	bd80      	pop	{r7, pc}
 810adfe:	bf00      	nop
 810ae00:	08112388 	.word	0x08112388
 810ae04:	100041d8 	.word	0x100041d8
 810ae08:	08112390 	.word	0x08112390

0810ae0c <_ZN5Shell4loopEv>:

void Shell::loop() {
 810ae0c:	b580      	push	{r7, lr}
 810ae0e:	b082      	sub	sp, #8
 810ae10:	af00      	add	r7, sp, #0
 810ae12:	6078      	str	r0, [r7, #4]
	endDmaStreamIndex = CMD_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 810ae14:	687b      	ldr	r3, [r7, #4]
 810ae16:	68db      	ldr	r3, [r3, #12]
 810ae18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ae1a:	681b      	ldr	r3, [r3, #0]
 810ae1c:	4a4e      	ldr	r2, [pc, #312]	; (810af58 <_ZN5Shell4loopEv+0x14c>)
 810ae1e:	4293      	cmp	r3, r2
 810ae20:	d068      	beq.n	810aef4 <_ZN5Shell4loopEv+0xe8>
 810ae22:	687b      	ldr	r3, [r7, #4]
 810ae24:	68db      	ldr	r3, [r3, #12]
 810ae26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ae28:	681b      	ldr	r3, [r3, #0]
 810ae2a:	4a4c      	ldr	r2, [pc, #304]	; (810af5c <_ZN5Shell4loopEv+0x150>)
 810ae2c:	4293      	cmp	r3, r2
 810ae2e:	d061      	beq.n	810aef4 <_ZN5Shell4loopEv+0xe8>
 810ae30:	687b      	ldr	r3, [r7, #4]
 810ae32:	68db      	ldr	r3, [r3, #12]
 810ae34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ae36:	681b      	ldr	r3, [r3, #0]
 810ae38:	4a49      	ldr	r2, [pc, #292]	; (810af60 <_ZN5Shell4loopEv+0x154>)
 810ae3a:	4293      	cmp	r3, r2
 810ae3c:	d05a      	beq.n	810aef4 <_ZN5Shell4loopEv+0xe8>
 810ae3e:	687b      	ldr	r3, [r7, #4]
 810ae40:	68db      	ldr	r3, [r3, #12]
 810ae42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ae44:	681b      	ldr	r3, [r3, #0]
 810ae46:	4a47      	ldr	r2, [pc, #284]	; (810af64 <_ZN5Shell4loopEv+0x158>)
 810ae48:	4293      	cmp	r3, r2
 810ae4a:	d053      	beq.n	810aef4 <_ZN5Shell4loopEv+0xe8>
 810ae4c:	687b      	ldr	r3, [r7, #4]
 810ae4e:	68db      	ldr	r3, [r3, #12]
 810ae50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ae52:	681b      	ldr	r3, [r3, #0]
 810ae54:	4a44      	ldr	r2, [pc, #272]	; (810af68 <_ZN5Shell4loopEv+0x15c>)
 810ae56:	4293      	cmp	r3, r2
 810ae58:	d04c      	beq.n	810aef4 <_ZN5Shell4loopEv+0xe8>
 810ae5a:	687b      	ldr	r3, [r7, #4]
 810ae5c:	68db      	ldr	r3, [r3, #12]
 810ae5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ae60:	681b      	ldr	r3, [r3, #0]
 810ae62:	4a42      	ldr	r2, [pc, #264]	; (810af6c <_ZN5Shell4loopEv+0x160>)
 810ae64:	4293      	cmp	r3, r2
 810ae66:	d045      	beq.n	810aef4 <_ZN5Shell4loopEv+0xe8>
 810ae68:	687b      	ldr	r3, [r7, #4]
 810ae6a:	68db      	ldr	r3, [r3, #12]
 810ae6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ae6e:	681b      	ldr	r3, [r3, #0]
 810ae70:	4a3f      	ldr	r2, [pc, #252]	; (810af70 <_ZN5Shell4loopEv+0x164>)
 810ae72:	4293      	cmp	r3, r2
 810ae74:	d03e      	beq.n	810aef4 <_ZN5Shell4loopEv+0xe8>
 810ae76:	687b      	ldr	r3, [r7, #4]
 810ae78:	68db      	ldr	r3, [r3, #12]
 810ae7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ae7c:	681b      	ldr	r3, [r3, #0]
 810ae7e:	4a3d      	ldr	r2, [pc, #244]	; (810af74 <_ZN5Shell4loopEv+0x168>)
 810ae80:	4293      	cmp	r3, r2
 810ae82:	d037      	beq.n	810aef4 <_ZN5Shell4loopEv+0xe8>
 810ae84:	687b      	ldr	r3, [r7, #4]
 810ae86:	68db      	ldr	r3, [r3, #12]
 810ae88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ae8a:	681b      	ldr	r3, [r3, #0]
 810ae8c:	4a3a      	ldr	r2, [pc, #232]	; (810af78 <_ZN5Shell4loopEv+0x16c>)
 810ae8e:	4293      	cmp	r3, r2
 810ae90:	d030      	beq.n	810aef4 <_ZN5Shell4loopEv+0xe8>
 810ae92:	687b      	ldr	r3, [r7, #4]
 810ae94:	68db      	ldr	r3, [r3, #12]
 810ae96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ae98:	681b      	ldr	r3, [r3, #0]
 810ae9a:	4a38      	ldr	r2, [pc, #224]	; (810af7c <_ZN5Shell4loopEv+0x170>)
 810ae9c:	4293      	cmp	r3, r2
 810ae9e:	d029      	beq.n	810aef4 <_ZN5Shell4loopEv+0xe8>
 810aea0:	687b      	ldr	r3, [r7, #4]
 810aea2:	68db      	ldr	r3, [r3, #12]
 810aea4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810aea6:	681b      	ldr	r3, [r3, #0]
 810aea8:	4a35      	ldr	r2, [pc, #212]	; (810af80 <_ZN5Shell4loopEv+0x174>)
 810aeaa:	4293      	cmp	r3, r2
 810aeac:	d022      	beq.n	810aef4 <_ZN5Shell4loopEv+0xe8>
 810aeae:	687b      	ldr	r3, [r7, #4]
 810aeb0:	68db      	ldr	r3, [r3, #12]
 810aeb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810aeb4:	681b      	ldr	r3, [r3, #0]
 810aeb6:	4a33      	ldr	r2, [pc, #204]	; (810af84 <_ZN5Shell4loopEv+0x178>)
 810aeb8:	4293      	cmp	r3, r2
 810aeba:	d01b      	beq.n	810aef4 <_ZN5Shell4loopEv+0xe8>
 810aebc:	687b      	ldr	r3, [r7, #4]
 810aebe:	68db      	ldr	r3, [r3, #12]
 810aec0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810aec2:	681b      	ldr	r3, [r3, #0]
 810aec4:	4a30      	ldr	r2, [pc, #192]	; (810af88 <_ZN5Shell4loopEv+0x17c>)
 810aec6:	4293      	cmp	r3, r2
 810aec8:	d014      	beq.n	810aef4 <_ZN5Shell4loopEv+0xe8>
 810aeca:	687b      	ldr	r3, [r7, #4]
 810aecc:	68db      	ldr	r3, [r3, #12]
 810aece:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810aed0:	681b      	ldr	r3, [r3, #0]
 810aed2:	4a2e      	ldr	r2, [pc, #184]	; (810af8c <_ZN5Shell4loopEv+0x180>)
 810aed4:	4293      	cmp	r3, r2
 810aed6:	d00d      	beq.n	810aef4 <_ZN5Shell4loopEv+0xe8>
 810aed8:	687b      	ldr	r3, [r7, #4]
 810aeda:	68db      	ldr	r3, [r3, #12]
 810aedc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810aede:	681b      	ldr	r3, [r3, #0]
 810aee0:	4a2b      	ldr	r2, [pc, #172]	; (810af90 <_ZN5Shell4loopEv+0x184>)
 810aee2:	4293      	cmp	r3, r2
 810aee4:	d006      	beq.n	810aef4 <_ZN5Shell4loopEv+0xe8>
 810aee6:	687b      	ldr	r3, [r7, #4]
 810aee8:	68db      	ldr	r3, [r3, #12]
 810aeea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810aeec:	681b      	ldr	r3, [r3, #0]
 810aeee:	4a29      	ldr	r2, [pc, #164]	; (810af94 <_ZN5Shell4loopEv+0x188>)
 810aef0:	4293      	cmp	r3, r2
 810aef2:	d107      	bne.n	810af04 <_ZN5Shell4loopEv+0xf8>
 810aef4:	687b      	ldr	r3, [r7, #4]
 810aef6:	68db      	ldr	r3, [r3, #12]
 810aef8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810aefa:	681b      	ldr	r3, [r3, #0]
 810aefc:	685b      	ldr	r3, [r3, #4]
 810aefe:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 810af02:	e006      	b.n	810af12 <_ZN5Shell4loopEv+0x106>
 810af04:	687b      	ldr	r3, [r7, #4]
 810af06:	68db      	ldr	r3, [r3, #12]
 810af08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810af0a:	681b      	ldr	r3, [r3, #0]
 810af0c:	685b      	ldr	r3, [r3, #4]
 810af0e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 810af12:	687a      	ldr	r2, [r7, #4]
 810af14:	f8c2 3418 	str.w	r3, [r2, #1048]	; 0x418

	while(lastDmaStreamIndex != endDmaStreamIndex) {
 810af18:	687b      	ldr	r3, [r7, #4]
 810af1a:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
 810af1e:	687b      	ldr	r3, [r7, #4]
 810af20:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 810af24:	429a      	cmp	r2, r3
 810af26:	d013      	beq.n	810af50 <_ZN5Shell4loopEv+0x144>
		receiveByte(dma_buffer[lastDmaStreamIndex]);
 810af28:	687b      	ldr	r3, [r7, #4]
 810af2a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 810af2e:	687a      	ldr	r2, [r7, #4]
 810af30:	4413      	add	r3, r2
 810af32:	7d1b      	ldrb	r3, [r3, #20]
 810af34:	4619      	mov	r1, r3
 810af36:	6878      	ldr	r0, [r7, #4]
 810af38:	f000 f82e 	bl	810af98 <_ZN5Shell11receiveByteEc>
		lastDmaStreamIndex = (lastDmaStreamIndex + 1) % CMD_BUFFER_SIZE;
 810af3c:	687b      	ldr	r3, [r7, #4]
 810af3e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 810af42:	3301      	adds	r3, #1
 810af44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810af48:	687b      	ldr	r3, [r7, #4]
 810af4a:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
	while(lastDmaStreamIndex != endDmaStreamIndex) {
 810af4e:	e7e3      	b.n	810af18 <_ZN5Shell4loopEv+0x10c>
	}
}
 810af50:	bf00      	nop
 810af52:	3708      	adds	r7, #8
 810af54:	46bd      	mov	sp, r7
 810af56:	bd80      	pop	{r7, pc}
 810af58:	40020010 	.word	0x40020010
 810af5c:	40020028 	.word	0x40020028
 810af60:	40020040 	.word	0x40020040
 810af64:	40020058 	.word	0x40020058
 810af68:	40020070 	.word	0x40020070
 810af6c:	40020088 	.word	0x40020088
 810af70:	400200a0 	.word	0x400200a0
 810af74:	400200b8 	.word	0x400200b8
 810af78:	40020410 	.word	0x40020410
 810af7c:	40020428 	.word	0x40020428
 810af80:	40020440 	.word	0x40020440
 810af84:	40020458 	.word	0x40020458
 810af88:	40020470 	.word	0x40020470
 810af8c:	40020488 	.word	0x40020488
 810af90:	400204a0 	.word	0x400204a0
 810af94:	400204b8 	.word	0x400204b8

0810af98 <_ZN5Shell11receiveByteEc>:


void Shell::receiveByte(char cbuf) {
 810af98:	b580      	push	{r7, lr}
 810af9a:	b084      	sub	sp, #16
 810af9c:	af00      	add	r7, sp, #0
 810af9e:	6078      	str	r0, [r7, #4]
 810afa0:	460b      	mov	r3, r1
 810afa2:	70fb      	strb	r3, [r7, #3]
	if(cbuf == '\0') {
 810afa4:	78fb      	ldrb	r3, [r7, #3]
 810afa6:	2b00      	cmp	r3, #0
 810afa8:	f000 809f 	beq.w	810b0ea <_ZN5Shell11receiveByteEc+0x152>
		return;
	}

	if(cbuf != '\n' && cbuf != '\r' && command_index < CMD_BUFFER_SIZE) {
 810afac:	78fb      	ldrb	r3, [r7, #3]
 810afae:	2b0a      	cmp	r3, #10
 810afb0:	d050      	beq.n	810b054 <_ZN5Shell11receiveByteEc+0xbc>
 810afb2:	78fb      	ldrb	r3, [r7, #3]
 810afb4:	2b0d      	cmp	r3, #13
 810afb6:	d04d      	beq.n	810b054 <_ZN5Shell11receiveByteEc+0xbc>
		command_buffer[command_index++] = cbuf;
 810afb8:	687b      	ldr	r3, [r7, #4]
 810afba:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 810afbe:	1c5a      	adds	r2, r3, #1
 810afc0:	b2d1      	uxtb	r1, r2
 810afc2:	687a      	ldr	r2, [r7, #4]
 810afc4:	f882 141c 	strb.w	r1, [r2, #1052]	; 0x41c
 810afc8:	461a      	mov	r2, r3
 810afca:	687b      	ldr	r3, [r7, #4]
 810afcc:	4413      	add	r3, r2
 810afce:	78fa      	ldrb	r2, [r7, #3]
 810afd0:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214

		if(cbuf == ' ') {
 810afd4:	78fb      	ldrb	r3, [r7, #3]
 810afd6:	2b20      	cmp	r3, #32
 810afd8:	f040 8089 	bne.w	810b0ee <_ZN5Shell11receiveByteEc+0x156>
			uint8_t start_index = (&cmd.components[cmd.num_components].component[0] - &command_buffer[0]);
 810afdc:	687b      	ldr	r3, [r7, #4]
 810afde:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 810afe2:	461a      	mov	r2, r3
 810afe4:	687b      	ldr	r3, [r7, #4]
 810afe6:	3284      	adds	r2, #132	; 0x84
 810afe8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 810afec:	461a      	mov	r2, r3
 810afee:	687b      	ldr	r3, [r7, #4]
 810aff0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 810aff4:	1ad3      	subs	r3, r2, r3
 810aff6:	73fb      	strb	r3, [r7, #15]

			cmd.components[cmd.num_components].length = command_index - start_index - 1;
 810aff8:	687b      	ldr	r3, [r7, #4]
 810affa:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 810affe:	7bfb      	ldrb	r3, [r7, #15]
 810b000:	1ad3      	subs	r3, r2, r3
 810b002:	b2db      	uxtb	r3, r3
 810b004:	687a      	ldr	r2, [r7, #4]
 810b006:	f892 2460 	ldrb.w	r2, [r2, #1120]	; 0x460
 810b00a:	4610      	mov	r0, r2
 810b00c:	3b01      	subs	r3, #1
 810b00e:	b2d9      	uxtb	r1, r3
 810b010:	687a      	ldr	r2, [r7, #4]
 810b012:	f100 0384 	add.w	r3, r0, #132	; 0x84
 810b016:	00db      	lsls	r3, r3, #3
 810b018:	4413      	add	r3, r2
 810b01a:	460a      	mov	r2, r1
 810b01c:	711a      	strb	r2, [r3, #4]
			cmd.num_components++;
 810b01e:	687b      	ldr	r3, [r7, #4]
 810b020:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 810b024:	3301      	adds	r3, #1
 810b026:	b2da      	uxtb	r2, r3
 810b028:	687b      	ldr	r3, [r7, #4]
 810b02a:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
			cmd.components[cmd.num_components].component = &command_buffer[command_index];
 810b02e:	687b      	ldr	r3, [r7, #4]
 810b030:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 810b034:	461a      	mov	r2, r3
 810b036:	687b      	ldr	r3, [r7, #4]
 810b038:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 810b03c:	4618      	mov	r0, r3
 810b03e:	f502 7304 	add.w	r3, r2, #528	; 0x210
 810b042:	687a      	ldr	r2, [r7, #4]
 810b044:	4413      	add	r3, r2
 810b046:	1d19      	adds	r1, r3, #4
 810b048:	687b      	ldr	r3, [r7, #4]
 810b04a:	f100 0284 	add.w	r2, r0, #132	; 0x84
 810b04e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
		}
 810b052:	e04c      	b.n	810b0ee <_ZN5Shell11receiveByteEc+0x156>
	} else {
		uint8_t start_index = (&cmd.components[cmd.num_components].component[0] - &command_buffer[0]);
 810b054:	687b      	ldr	r3, [r7, #4]
 810b056:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 810b05a:	461a      	mov	r2, r3
 810b05c:	687b      	ldr	r3, [r7, #4]
 810b05e:	3284      	adds	r2, #132	; 0x84
 810b060:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 810b064:	461a      	mov	r2, r3
 810b066:	687b      	ldr	r3, [r7, #4]
 810b068:	f503 7305 	add.w	r3, r3, #532	; 0x214
 810b06c:	1ad3      	subs	r3, r2, r3
 810b06e:	73bb      	strb	r3, [r7, #14]
		cmd.components[cmd.num_components].length = command_index - start_index;
 810b070:	687b      	ldr	r3, [r7, #4]
 810b072:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 810b076:	687b      	ldr	r3, [r7, #4]
 810b078:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 810b07c:	4618      	mov	r0, r3
 810b07e:	7bbb      	ldrb	r3, [r7, #14]
 810b080:	1ad3      	subs	r3, r2, r3
 810b082:	b2d9      	uxtb	r1, r3
 810b084:	687a      	ldr	r2, [r7, #4]
 810b086:	f100 0384 	add.w	r3, r0, #132	; 0x84
 810b08a:	00db      	lsls	r3, r3, #3
 810b08c:	4413      	add	r3, r2
 810b08e:	460a      	mov	r2, r1
 810b090:	711a      	strb	r2, [r3, #4]

		if(command_index - start_index > 0) {
 810b092:	687b      	ldr	r3, [r7, #4]
 810b094:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 810b098:	461a      	mov	r2, r3
 810b09a:	7bbb      	ldrb	r3, [r7, #14]
 810b09c:	1ad3      	subs	r3, r2, r3
 810b09e:	2b00      	cmp	r3, #0
 810b0a0:	dd07      	ble.n	810b0b2 <_ZN5Shell11receiveByteEc+0x11a>
			cmd.num_components++;
 810b0a2:	687b      	ldr	r3, [r7, #4]
 810b0a4:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 810b0a8:	3301      	adds	r3, #1
 810b0aa:	b2da      	uxtb	r2, r3
 810b0ac:	687b      	ldr	r3, [r7, #4]
 810b0ae:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
		}

		terminal->execute(&cmd, &console);
 810b0b2:	687b      	ldr	r3, [r7, #4]
 810b0b4:	6918      	ldr	r0, [r3, #16]
 810b0b6:	687b      	ldr	r3, [r7, #4]
 810b0b8:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 810b0bc:	4a0e      	ldr	r2, [pc, #56]	; (810b0f8 <_ZN5Shell11receiveByteEc+0x160>)
 810b0be:	4619      	mov	r1, r3
 810b0c0:	f000 f84e 	bl	810b160 <_ZN8Terminal7executeEP12ShellCommandP7Console>

		command_index = 0;
 810b0c4:	687b      	ldr	r3, [r7, #4]
 810b0c6:	2200      	movs	r2, #0
 810b0c8:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
		cmd.num_components = 0;
 810b0cc:	687b      	ldr	r3, [r7, #4]
 810b0ce:	2200      	movs	r2, #0
 810b0d0:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
		cmd.components[0].length = 0;
 810b0d4:	687b      	ldr	r3, [r7, #4]
 810b0d6:	2200      	movs	r2, #0
 810b0d8:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
		cmd.components[0].component = command_buffer;
 810b0dc:	687b      	ldr	r3, [r7, #4]
 810b0de:	f503 7205 	add.w	r2, r3, #532	; 0x214
 810b0e2:	687b      	ldr	r3, [r7, #4]
 810b0e4:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 810b0e8:	e002      	b.n	810b0f0 <_ZN5Shell11receiveByteEc+0x158>
		return;
 810b0ea:	bf00      	nop
 810b0ec:	e000      	b.n	810b0f0 <_ZN5Shell11receiveByteEc+0x158>
		}
 810b0ee:	bf00      	nop
	}
}
 810b0f0:	3710      	adds	r7, #16
 810b0f2:	46bd      	mov	sp, r7
 810b0f4:	bd80      	pop	{r7, pc}
 810b0f6:	bf00      	nop
 810b0f8:	100041d8 	.word	0x100041d8

0810b0fc <_ZN16CommandComponent7matchesEPKc>:

struct CommandComponent {
	const char* component;
	uint8_t length;

	bool matches(const char* target) {
 810b0fc:	b480      	push	{r7}
 810b0fe:	b085      	sub	sp, #20
 810b100:	af00      	add	r7, sp, #0
 810b102:	6078      	str	r0, [r7, #4]
 810b104:	6039      	str	r1, [r7, #0]
		uint8_t i;

		for(i = 0; i < length; i++) {
 810b106:	2300      	movs	r3, #0
 810b108:	73fb      	strb	r3, [r7, #15]
 810b10a:	687b      	ldr	r3, [r7, #4]
 810b10c:	791b      	ldrb	r3, [r3, #4]
 810b10e:	7bfa      	ldrb	r2, [r7, #15]
 810b110:	429a      	cmp	r2, r3
 810b112:	d216      	bcs.n	810b142 <_ZN16CommandComponent7matchesEPKc+0x46>
			if(target[i] != component[i] || target[i] == '\0') {
 810b114:	7bfb      	ldrb	r3, [r7, #15]
 810b116:	683a      	ldr	r2, [r7, #0]
 810b118:	4413      	add	r3, r2
 810b11a:	781a      	ldrb	r2, [r3, #0]
 810b11c:	687b      	ldr	r3, [r7, #4]
 810b11e:	6819      	ldr	r1, [r3, #0]
 810b120:	7bfb      	ldrb	r3, [r7, #15]
 810b122:	440b      	add	r3, r1
 810b124:	781b      	ldrb	r3, [r3, #0]
 810b126:	429a      	cmp	r2, r3
 810b128:	d105      	bne.n	810b136 <_ZN16CommandComponent7matchesEPKc+0x3a>
 810b12a:	7bfb      	ldrb	r3, [r7, #15]
 810b12c:	683a      	ldr	r2, [r7, #0]
 810b12e:	4413      	add	r3, r2
 810b130:	781b      	ldrb	r3, [r3, #0]
 810b132:	2b00      	cmp	r3, #0
 810b134:	d101      	bne.n	810b13a <_ZN16CommandComponent7matchesEPKc+0x3e>
				return false;
 810b136:	2300      	movs	r3, #0
 810b138:	e00c      	b.n	810b154 <_ZN16CommandComponent7matchesEPKc+0x58>
		for(i = 0; i < length; i++) {
 810b13a:	7bfb      	ldrb	r3, [r7, #15]
 810b13c:	3301      	adds	r3, #1
 810b13e:	73fb      	strb	r3, [r7, #15]
 810b140:	e7e3      	b.n	810b10a <_ZN16CommandComponent7matchesEPKc+0xe>
			}
		}

		return target[i] == '\0';
 810b142:	7bfb      	ldrb	r3, [r7, #15]
 810b144:	683a      	ldr	r2, [r7, #0]
 810b146:	4413      	add	r3, r2
 810b148:	781b      	ldrb	r3, [r3, #0]
 810b14a:	2b00      	cmp	r3, #0
 810b14c:	bf0c      	ite	eq
 810b14e:	2301      	moveq	r3, #1
 810b150:	2300      	movne	r3, #0
 810b152:	b2db      	uxtb	r3, r3
	}
 810b154:	4618      	mov	r0, r3
 810b156:	3714      	adds	r7, #20
 810b158:	46bd      	mov	sp, r7
 810b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b15e:	4770      	bx	lr

0810b160 <_ZN8Terminal7executeEP12ShellCommandP7Console>:


#define EQUALS(index, str) (cmd->num_components > (index) && cmd->components[(index)].matches((str)))


void Terminal::execute(ShellCommand* cmd, Console* feedback) {
 810b160:	b580      	push	{r7, lr}
 810b162:	b086      	sub	sp, #24
 810b164:	af00      	add	r7, sp, #0
 810b166:	60f8      	str	r0, [r7, #12]
 810b168:	60b9      	str	r1, [r7, #8]
 810b16a:	607a      	str	r2, [r7, #4]
	if(cmd->num_components > 0) {
 810b16c:	68bb      	ldr	r3, [r7, #8]
 810b16e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b172:	2b00      	cmp	r3, #0
 810b174:	f000 81e3 	beq.w	810b53e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		if(EQUALS(0, "help")) {
 810b178:	68bb      	ldr	r3, [r7, #8]
 810b17a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b17e:	2b00      	cmp	r3, #0
 810b180:	d009      	beq.n	810b196 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x36>
 810b182:	68bb      	ldr	r3, [r7, #8]
 810b184:	49a8      	ldr	r1, [pc, #672]	; (810b428 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2c8>)
 810b186:	4618      	mov	r0, r3
 810b188:	f7ff ffb8 	bl	810b0fc <_ZN16CommandComponent7matchesEPKc>
 810b18c:	4603      	mov	r3, r0
 810b18e:	2b00      	cmp	r3, #0
 810b190:	d001      	beq.n	810b196 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x36>
 810b192:	2301      	movs	r3, #1
 810b194:	e000      	b.n	810b198 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x38>
 810b196:	2300      	movs	r3, #0
 810b198:	2b00      	cmp	r3, #0
 810b19a:	d01c      	beq.n	810b1d6 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x76>
			feedback->printf("> Xplore Avionics available commands:\r\n");
 810b19c:	49a3      	ldr	r1, [pc, #652]	; (810b42c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2cc>)
 810b19e:	6878      	ldr	r0, [r7, #4]
 810b1a0:	f7ff fd73 	bl	810ac8a <_ZN7Console6printfEPKcz>
			feedback->printf("> clear: clears the screen\r\n");
 810b1a4:	49a2      	ldr	r1, [pc, #648]	; (810b430 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2d0>)
 810b1a6:	6878      	ldr	r0, [r7, #4]
 810b1a8:	f7ff fd6f 	bl	810ac8a <_ZN7Console6printfEPKcz>
			feedback->printf("> help: shows this help page\r\n");
 810b1ac:	49a1      	ldr	r1, [pc, #644]	; (810b434 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2d4>)
 810b1ae:	6878      	ldr	r0, [r7, #4]
 810b1b0:	f7ff fd6b 	bl	810ac8a <_ZN7Console6printfEPKcz>
			feedback->printf("> monitor: enables or disables a specific monitor\r\n");
 810b1b4:	49a0      	ldr	r1, [pc, #640]	; (810b438 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2d8>)
 810b1b6:	6878      	ldr	r0, [r7, #4]
 810b1b8:	f7ff fd67 	bl	810ac8a <_ZN7Console6printfEPKcz>
			feedback->printf("> profiler: enables or disables the embedded profiler\r\n");
 810b1bc:	499f      	ldr	r1, [pc, #636]	; (810b43c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2dc>)
 810b1be:	6878      	ldr	r0, [r7, #4]
 810b1c0:	f7ff fd63 	bl	810ac8a <_ZN7Console6printfEPKcz>
			feedback->printf("> reset: performs a software reset of the avionics\r\n");
 810b1c4:	499e      	ldr	r1, [pc, #632]	; (810b440 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2e0>)
 810b1c6:	6878      	ldr	r0, [r7, #4]
 810b1c8:	f7ff fd5f 	bl	810ac8a <_ZN7Console6printfEPKcz>
			feedback->printf("> version: displays the current terminal version\r\n");
 810b1cc:	499d      	ldr	r1, [pc, #628]	; (810b444 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2e4>)
 810b1ce:	6878      	ldr	r0, [r7, #4]
 810b1d0:	f7ff fd5b 	bl	810ac8a <_ZN7Console6printfEPKcz>
			}
		} else {
			feedback->printf("> %.*s: command not found\r\n", cmd->components[0].length, cmd->components[0].component);
		}
	}
}
 810b1d4:	e1b3      	b.n	810b53e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "version")) {
 810b1d6:	68bb      	ldr	r3, [r7, #8]
 810b1d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b1dc:	2b00      	cmp	r3, #0
 810b1de:	d009      	beq.n	810b1f4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x94>
 810b1e0:	68bb      	ldr	r3, [r7, #8]
 810b1e2:	4999      	ldr	r1, [pc, #612]	; (810b448 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2e8>)
 810b1e4:	4618      	mov	r0, r3
 810b1e6:	f7ff ff89 	bl	810b0fc <_ZN16CommandComponent7matchesEPKc>
 810b1ea:	4603      	mov	r3, r0
 810b1ec:	2b00      	cmp	r3, #0
 810b1ee:	d001      	beq.n	810b1f4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x94>
 810b1f0:	2301      	movs	r3, #1
 810b1f2:	e000      	b.n	810b1f6 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x96>
 810b1f4:	2300      	movs	r3, #0
 810b1f6:	2b00      	cmp	r3, #0
 810b1f8:	d004      	beq.n	810b204 <_ZN8Terminal7executeEP12ShellCommandP7Console+0xa4>
			feedback->printf("> Xplore Avionics Terminal v1.0 by Arion Zimmermann\r\n");
 810b1fa:	4994      	ldr	r1, [pc, #592]	; (810b44c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2ec>)
 810b1fc:	6878      	ldr	r0, [r7, #4]
 810b1fe:	f7ff fd44 	bl	810ac8a <_ZN7Console6printfEPKcz>
}
 810b202:	e19c      	b.n	810b53e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "reset")) {
 810b204:	68bb      	ldr	r3, [r7, #8]
 810b206:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b20a:	2b00      	cmp	r3, #0
 810b20c:	d009      	beq.n	810b222 <_ZN8Terminal7executeEP12ShellCommandP7Console+0xc2>
 810b20e:	68bb      	ldr	r3, [r7, #8]
 810b210:	498f      	ldr	r1, [pc, #572]	; (810b450 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2f0>)
 810b212:	4618      	mov	r0, r3
 810b214:	f7ff ff72 	bl	810b0fc <_ZN16CommandComponent7matchesEPKc>
 810b218:	4603      	mov	r3, r0
 810b21a:	2b00      	cmp	r3, #0
 810b21c:	d001      	beq.n	810b222 <_ZN8Terminal7executeEP12ShellCommandP7Console+0xc2>
 810b21e:	2301      	movs	r3, #1
 810b220:	e000      	b.n	810b224 <_ZN8Terminal7executeEP12ShellCommandP7Console+0xc4>
 810b222:	2300      	movs	r3, #0
 810b224:	2b00      	cmp	r3, #0
 810b226:	d002      	beq.n	810b22e <_ZN8Terminal7executeEP12ShellCommandP7Console+0xce>
			HAL_NVIC_SystemReset();
 810b228:	f7f7 f937 	bl	810249a <HAL_NVIC_SystemReset>
}
 810b22c:	e187      	b.n	810b53e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "time")) {
 810b22e:	68bb      	ldr	r3, [r7, #8]
 810b230:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b234:	2b00      	cmp	r3, #0
 810b236:	d009      	beq.n	810b24c <_ZN8Terminal7executeEP12ShellCommandP7Console+0xec>
 810b238:	68bb      	ldr	r3, [r7, #8]
 810b23a:	4986      	ldr	r1, [pc, #536]	; (810b454 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2f4>)
 810b23c:	4618      	mov	r0, r3
 810b23e:	f7ff ff5d 	bl	810b0fc <_ZN16CommandComponent7matchesEPKc>
 810b242:	4603      	mov	r3, r0
 810b244:	2b00      	cmp	r3, #0
 810b246:	d001      	beq.n	810b24c <_ZN8Terminal7executeEP12ShellCommandP7Console+0xec>
 810b248:	2301      	movs	r3, #1
 810b24a:	e000      	b.n	810b24e <_ZN8Terminal7executeEP12ShellCommandP7Console+0xee>
 810b24c:	2300      	movs	r3, #0
 810b24e:	2b00      	cmp	r3, #0
 810b250:	d008      	beq.n	810b264 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x104>
			feedback->printf("%d\r\n", HAL_GetTick());
 810b252:	f7f7 f821 	bl	8102298 <HAL_GetTick>
 810b256:	4603      	mov	r3, r0
 810b258:	461a      	mov	r2, r3
 810b25a:	497f      	ldr	r1, [pc, #508]	; (810b458 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2f8>)
 810b25c:	6878      	ldr	r0, [r7, #4]
 810b25e:	f7ff fd14 	bl	810ac8a <_ZN7Console6printfEPKcz>
}
 810b262:	e16c      	b.n	810b53e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "clear")) {
 810b264:	68bb      	ldr	r3, [r7, #8]
 810b266:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b26a:	2b00      	cmp	r3, #0
 810b26c:	d009      	beq.n	810b282 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x122>
 810b26e:	68bb      	ldr	r3, [r7, #8]
 810b270:	497a      	ldr	r1, [pc, #488]	; (810b45c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2fc>)
 810b272:	4618      	mov	r0, r3
 810b274:	f7ff ff42 	bl	810b0fc <_ZN16CommandComponent7matchesEPKc>
 810b278:	4603      	mov	r3, r0
 810b27a:	2b00      	cmp	r3, #0
 810b27c:	d001      	beq.n	810b282 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x122>
 810b27e:	2301      	movs	r3, #1
 810b280:	e000      	b.n	810b284 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x124>
 810b282:	2300      	movs	r3, #0
 810b284:	2b00      	cmp	r3, #0
 810b286:	d004      	beq.n	810b292 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x132>
			feedback->printf("\x1b[2J\x1b[H\e7");
 810b288:	4975      	ldr	r1, [pc, #468]	; (810b460 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x300>)
 810b28a:	6878      	ldr	r0, [r7, #4]
 810b28c:	f7ff fcfd 	bl	810ac8a <_ZN7Console6printfEPKcz>
}
 810b290:	e155      	b.n	810b53e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "profiler")) {
 810b292:	68bb      	ldr	r3, [r7, #8]
 810b294:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b298:	2b00      	cmp	r3, #0
 810b29a:	d009      	beq.n	810b2b0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x150>
 810b29c:	68bb      	ldr	r3, [r7, #8]
 810b29e:	4971      	ldr	r1, [pc, #452]	; (810b464 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x304>)
 810b2a0:	4618      	mov	r0, r3
 810b2a2:	f7ff ff2b 	bl	810b0fc <_ZN16CommandComponent7matchesEPKc>
 810b2a6:	4603      	mov	r3, r0
 810b2a8:	2b00      	cmp	r3, #0
 810b2aa:	d001      	beq.n	810b2b0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x150>
 810b2ac:	2301      	movs	r3, #1
 810b2ae:	e000      	b.n	810b2b2 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x152>
 810b2b0:	2300      	movs	r3, #0
 810b2b2:	2b00      	cmp	r3, #0
 810b2b4:	d042      	beq.n	810b33c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1dc>
			if(EQUALS(1, "enable")) {
 810b2b6:	68bb      	ldr	r3, [r7, #8]
 810b2b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b2bc:	2b01      	cmp	r3, #1
 810b2be:	d90a      	bls.n	810b2d6 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x176>
 810b2c0:	68bb      	ldr	r3, [r7, #8]
 810b2c2:	3308      	adds	r3, #8
 810b2c4:	4968      	ldr	r1, [pc, #416]	; (810b468 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x308>)
 810b2c6:	4618      	mov	r0, r3
 810b2c8:	f7ff ff18 	bl	810b0fc <_ZN16CommandComponent7matchesEPKc>
 810b2cc:	4603      	mov	r3, r0
 810b2ce:	2b00      	cmp	r3, #0
 810b2d0:	d001      	beq.n	810b2d6 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x176>
 810b2d2:	2301      	movs	r3, #1
 810b2d4:	e000      	b.n	810b2d8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x178>
 810b2d6:	2300      	movs	r3, #0
 810b2d8:	2b00      	cmp	r3, #0
 810b2da:	d00b      	beq.n	810b2f4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x194>
				profiler.enable();
 810b2dc:	4863      	ldr	r0, [pc, #396]	; (810b46c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x30c>)
 810b2de:	f7ff fd1b 	bl	810ad18 <_ZN8Profiler6enableEv>
				feedback->printf("\x1b[2J");
 810b2e2:	4963      	ldr	r1, [pc, #396]	; (810b470 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x310>)
 810b2e4:	6878      	ldr	r0, [r7, #4]
 810b2e6:	f7ff fcd0 	bl	810ac8a <_ZN7Console6printfEPKcz>
				feedback->printf("> Profiler now enabled\r\n");
 810b2ea:	4962      	ldr	r1, [pc, #392]	; (810b474 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x314>)
 810b2ec:	6878      	ldr	r0, [r7, #4]
 810b2ee:	f7ff fccc 	bl	810ac8a <_ZN7Console6printfEPKcz>
}
 810b2f2:	e124      	b.n	810b53e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
			} else if(EQUALS(1, "disable")) {
 810b2f4:	68bb      	ldr	r3, [r7, #8]
 810b2f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b2fa:	2b01      	cmp	r3, #1
 810b2fc:	d90a      	bls.n	810b314 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1b4>
 810b2fe:	68bb      	ldr	r3, [r7, #8]
 810b300:	3308      	adds	r3, #8
 810b302:	495d      	ldr	r1, [pc, #372]	; (810b478 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x318>)
 810b304:	4618      	mov	r0, r3
 810b306:	f7ff fef9 	bl	810b0fc <_ZN16CommandComponent7matchesEPKc>
 810b30a:	4603      	mov	r3, r0
 810b30c:	2b00      	cmp	r3, #0
 810b30e:	d001      	beq.n	810b314 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1b4>
 810b310:	2301      	movs	r3, #1
 810b312:	e000      	b.n	810b316 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1b6>
 810b314:	2300      	movs	r3, #0
 810b316:	2b00      	cmp	r3, #0
 810b318:	d00b      	beq.n	810b332 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1d2>
				profiler.disable();
 810b31a:	4854      	ldr	r0, [pc, #336]	; (810b46c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x30c>)
 810b31c:	f7ff fd1c 	bl	810ad58 <_ZN8Profiler7disableEv>
				feedback->printf("\x1b[2J");
 810b320:	4953      	ldr	r1, [pc, #332]	; (810b470 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x310>)
 810b322:	6878      	ldr	r0, [r7, #4]
 810b324:	f7ff fcb1 	bl	810ac8a <_ZN7Console6printfEPKcz>
				feedback->printf("> Profiler now disabled\r\n");
 810b328:	4954      	ldr	r1, [pc, #336]	; (810b47c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x31c>)
 810b32a:	6878      	ldr	r0, [r7, #4]
 810b32c:	f7ff fcad 	bl	810ac8a <_ZN7Console6printfEPKcz>
}
 810b330:	e105      	b.n	810b53e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
				feedback->printf("> Usage: profiler { enable | disable }\r\n");
 810b332:	4953      	ldr	r1, [pc, #332]	; (810b480 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x320>)
 810b334:	6878      	ldr	r0, [r7, #4]
 810b336:	f7ff fca8 	bl	810ac8a <_ZN7Console6printfEPKcz>
}
 810b33a:	e100      	b.n	810b53e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "verbose")) {
 810b33c:	68bb      	ldr	r3, [r7, #8]
 810b33e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b342:	2b00      	cmp	r3, #0
 810b344:	d009      	beq.n	810b35a <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1fa>
 810b346:	68bb      	ldr	r3, [r7, #8]
 810b348:	494e      	ldr	r1, [pc, #312]	; (810b484 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x324>)
 810b34a:	4618      	mov	r0, r3
 810b34c:	f7ff fed6 	bl	810b0fc <_ZN16CommandComponent7matchesEPKc>
 810b350:	4603      	mov	r3, r0
 810b352:	2b00      	cmp	r3, #0
 810b354:	d001      	beq.n	810b35a <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1fa>
 810b356:	2301      	movs	r3, #1
 810b358:	e000      	b.n	810b35c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1fc>
 810b35a:	2300      	movs	r3, #0
 810b35c:	2b00      	cmp	r3, #0
 810b35e:	d03a      	beq.n	810b3d6 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x276>
			if(EQUALS(1, "on")) {
 810b360:	68bb      	ldr	r3, [r7, #8]
 810b362:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b366:	2b01      	cmp	r3, #1
 810b368:	d90a      	bls.n	810b380 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x220>
 810b36a:	68bb      	ldr	r3, [r7, #8]
 810b36c:	3308      	adds	r3, #8
 810b36e:	4946      	ldr	r1, [pc, #280]	; (810b488 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x328>)
 810b370:	4618      	mov	r0, r3
 810b372:	f7ff fec3 	bl	810b0fc <_ZN16CommandComponent7matchesEPKc>
 810b376:	4603      	mov	r3, r0
 810b378:	2b00      	cmp	r3, #0
 810b37a:	d001      	beq.n	810b380 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x220>
 810b37c:	2301      	movs	r3, #1
 810b37e:	e000      	b.n	810b382 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x222>
 810b380:	2300      	movs	r3, #0
 810b382:	2b00      	cmp	r3, #0
 810b384:	d007      	beq.n	810b396 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x236>
				verbose = true;
 810b386:	68fb      	ldr	r3, [r7, #12]
 810b388:	2201      	movs	r2, #1
 810b38a:	701a      	strb	r2, [r3, #0]
				feedback->printf("> Verbose mode enabled\r\n");
 810b38c:	493f      	ldr	r1, [pc, #252]	; (810b48c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x32c>)
 810b38e:	6878      	ldr	r0, [r7, #4]
 810b390:	f7ff fc7b 	bl	810ac8a <_ZN7Console6printfEPKcz>
}
 810b394:	e0d3      	b.n	810b53e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
			} else if(EQUALS(1, "off")) {
 810b396:	68bb      	ldr	r3, [r7, #8]
 810b398:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b39c:	2b01      	cmp	r3, #1
 810b39e:	d90a      	bls.n	810b3b6 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x256>
 810b3a0:	68bb      	ldr	r3, [r7, #8]
 810b3a2:	3308      	adds	r3, #8
 810b3a4:	493a      	ldr	r1, [pc, #232]	; (810b490 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x330>)
 810b3a6:	4618      	mov	r0, r3
 810b3a8:	f7ff fea8 	bl	810b0fc <_ZN16CommandComponent7matchesEPKc>
 810b3ac:	4603      	mov	r3, r0
 810b3ae:	2b00      	cmp	r3, #0
 810b3b0:	d001      	beq.n	810b3b6 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x256>
 810b3b2:	2301      	movs	r3, #1
 810b3b4:	e000      	b.n	810b3b8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x258>
 810b3b6:	2300      	movs	r3, #0
 810b3b8:	2b00      	cmp	r3, #0
 810b3ba:	d007      	beq.n	810b3cc <_ZN8Terminal7executeEP12ShellCommandP7Console+0x26c>
				verbose = false;
 810b3bc:	68fb      	ldr	r3, [r7, #12]
 810b3be:	2200      	movs	r2, #0
 810b3c0:	701a      	strb	r2, [r3, #0]
				feedback->printf("> Verbose mode disabled\r\n");
 810b3c2:	4934      	ldr	r1, [pc, #208]	; (810b494 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x334>)
 810b3c4:	6878      	ldr	r0, [r7, #4]
 810b3c6:	f7ff fc60 	bl	810ac8a <_ZN7Console6printfEPKcz>
}
 810b3ca:	e0b8      	b.n	810b53e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
				feedback->printf("> Usage: verbose { on | off }\r\n");
 810b3cc:	4932      	ldr	r1, [pc, #200]	; (810b498 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x338>)
 810b3ce:	6878      	ldr	r0, [r7, #4]
 810b3d0:	f7ff fc5b 	bl	810ac8a <_ZN7Console6printfEPKcz>
}
 810b3d4:	e0b3      	b.n	810b53e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "monitor")) {
 810b3d6:	68bb      	ldr	r3, [r7, #8]
 810b3d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b3dc:	2b00      	cmp	r3, #0
 810b3de:	d009      	beq.n	810b3f4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x294>
 810b3e0:	68bb      	ldr	r3, [r7, #8]
 810b3e2:	492e      	ldr	r1, [pc, #184]	; (810b49c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x33c>)
 810b3e4:	4618      	mov	r0, r3
 810b3e6:	f7ff fe89 	bl	810b0fc <_ZN16CommandComponent7matchesEPKc>
 810b3ea:	4603      	mov	r3, r0
 810b3ec:	2b00      	cmp	r3, #0
 810b3ee:	d001      	beq.n	810b3f4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x294>
 810b3f0:	2301      	movs	r3, #1
 810b3f2:	e000      	b.n	810b3f6 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x296>
 810b3f4:	2300      	movs	r3, #0
 810b3f6:	2b00      	cmp	r3, #0
 810b3f8:	f000 8098 	beq.w	810b52c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3cc>
			if(EQUALS(1, "enable") && cmd->num_components >= 3) {
 810b3fc:	68bb      	ldr	r3, [r7, #8]
 810b3fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b402:	2b01      	cmp	r3, #1
 810b404:	d94c      	bls.n	810b4a0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x340>
 810b406:	68bb      	ldr	r3, [r7, #8]
 810b408:	3308      	adds	r3, #8
 810b40a:	4917      	ldr	r1, [pc, #92]	; (810b468 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x308>)
 810b40c:	4618      	mov	r0, r3
 810b40e:	f7ff fe75 	bl	810b0fc <_ZN16CommandComponent7matchesEPKc>
 810b412:	4603      	mov	r3, r0
 810b414:	2b00      	cmp	r3, #0
 810b416:	d043      	beq.n	810b4a0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x340>
 810b418:	68bb      	ldr	r3, [r7, #8]
 810b41a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b41e:	2b02      	cmp	r3, #2
 810b420:	d93e      	bls.n	810b4a0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x340>
 810b422:	2301      	movs	r3, #1
 810b424:	e03d      	b.n	810b4a2 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x342>
 810b426:	bf00      	nop
 810b428:	081123bc 	.word	0x081123bc
 810b42c:	081123c4 	.word	0x081123c4
 810b430:	081123ec 	.word	0x081123ec
 810b434:	0811240c 	.word	0x0811240c
 810b438:	0811242c 	.word	0x0811242c
 810b43c:	08112460 	.word	0x08112460
 810b440:	08112498 	.word	0x08112498
 810b444:	081124d0 	.word	0x081124d0
 810b448:	08112504 	.word	0x08112504
 810b44c:	0811250c 	.word	0x0811250c
 810b450:	08112544 	.word	0x08112544
 810b454:	0811254c 	.word	0x0811254c
 810b458:	08112554 	.word	0x08112554
 810b45c:	0811255c 	.word	0x0811255c
 810b460:	08112564 	.word	0x08112564
 810b464:	08112570 	.word	0x08112570
 810b468:	0811257c 	.word	0x0811257c
 810b46c:	100042e0 	.word	0x100042e0
 810b470:	08112584 	.word	0x08112584
 810b474:	0811258c 	.word	0x0811258c
 810b478:	081125a8 	.word	0x081125a8
 810b47c:	081125b0 	.word	0x081125b0
 810b480:	081125cc 	.word	0x081125cc
 810b484:	081125f8 	.word	0x081125f8
 810b488:	08112600 	.word	0x08112600
 810b48c:	08112604 	.word	0x08112604
 810b490:	08112620 	.word	0x08112620
 810b494:	08112624 	.word	0x08112624
 810b498:	08112640 	.word	0x08112640
 810b49c:	08112660 	.word	0x08112660
 810b4a0:	2300      	movs	r3, #0
 810b4a2:	2b00      	cmp	r3, #0
 810b4a4:	d020      	beq.n	810b4e8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x388>
				uint8_t location = 0;
 810b4a6:	2300      	movs	r3, #0
 810b4a8:	75fb      	strb	r3, [r7, #23]
				uint8_t refresh_rate = 1;
 810b4aa:	2301      	movs	r3, #1
 810b4ac:	75bb      	strb	r3, [r7, #22]
				if(cmd->num_components > 3) {
 810b4ae:	68bb      	ldr	r3, [r7, #8]
 810b4b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b4b4:	2b03      	cmp	r3, #3
 810b4b6:	d906      	bls.n	810b4c6 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x366>
					location = atoi(cmd->components[3].component);
 810b4b8:	68bb      	ldr	r3, [r7, #8]
 810b4ba:	699b      	ldr	r3, [r3, #24]
 810b4bc:	4618      	mov	r0, r3
 810b4be:	f004 f859 	bl	810f574 <atoi>
 810b4c2:	4603      	mov	r3, r0
 810b4c4:	75fb      	strb	r3, [r7, #23]
				if(cmd->num_components > 4) {
 810b4c6:	68bb      	ldr	r3, [r7, #8]
 810b4c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b4cc:	2b04      	cmp	r3, #4
 810b4ce:	d906      	bls.n	810b4de <_ZN8Terminal7executeEP12ShellCommandP7Console+0x37e>
					refresh_rate = atoi(cmd->components[4].component);
 810b4d0:	68bb      	ldr	r3, [r7, #8]
 810b4d2:	6a1b      	ldr	r3, [r3, #32]
 810b4d4:	4618      	mov	r0, r3
 810b4d6:	f004 f84d 	bl	810f574 <atoi>
 810b4da:	4603      	mov	r3, r0
 810b4dc:	75bb      	strb	r3, [r7, #22]
				feedback->printf("\x1b[2J");
 810b4de:	491a      	ldr	r1, [pc, #104]	; (810b548 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3e8>)
 810b4e0:	6878      	ldr	r0, [r7, #4]
 810b4e2:	f7ff fbd2 	bl	810ac8a <_ZN7Console6printfEPKcz>
}
 810b4e6:	e02a      	b.n	810b53e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
			} else if(EQUALS(1, "disable") && cmd->num_components == 3) {
 810b4e8:	68bb      	ldr	r3, [r7, #8]
 810b4ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b4ee:	2b01      	cmp	r3, #1
 810b4f0:	d90f      	bls.n	810b512 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3b2>
 810b4f2:	68bb      	ldr	r3, [r7, #8]
 810b4f4:	3308      	adds	r3, #8
 810b4f6:	4915      	ldr	r1, [pc, #84]	; (810b54c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3ec>)
 810b4f8:	4618      	mov	r0, r3
 810b4fa:	f7ff fdff 	bl	810b0fc <_ZN16CommandComponent7matchesEPKc>
 810b4fe:	4603      	mov	r3, r0
 810b500:	2b00      	cmp	r3, #0
 810b502:	d006      	beq.n	810b512 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3b2>
 810b504:	68bb      	ldr	r3, [r7, #8]
 810b506:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b50a:	2b03      	cmp	r3, #3
 810b50c:	d101      	bne.n	810b512 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3b2>
 810b50e:	2301      	movs	r3, #1
 810b510:	e000      	b.n	810b514 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3b4>
 810b512:	2300      	movs	r3, #0
 810b514:	2b00      	cmp	r3, #0
 810b516:	d004      	beq.n	810b522 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3c2>
				feedback->printf("\x1b[2J");
 810b518:	490b      	ldr	r1, [pc, #44]	; (810b548 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3e8>)
 810b51a:	6878      	ldr	r0, [r7, #4]
 810b51c:	f7ff fbb5 	bl	810ac8a <_ZN7Console6printfEPKcz>
}
 810b520:	e00d      	b.n	810b53e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
				feedback->printf("> Usage: monitor { enable | disable } { sensor | state | kalman | flash | can | telemetry | airbrakes } [location] [refresh rate; default: 10]\r\n");
 810b522:	490b      	ldr	r1, [pc, #44]	; (810b550 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3f0>)
 810b524:	6878      	ldr	r0, [r7, #4]
 810b526:	f7ff fbb0 	bl	810ac8a <_ZN7Console6printfEPKcz>
}
 810b52a:	e008      	b.n	810b53e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
			feedback->printf("> %.*s: command not found\r\n", cmd->components[0].length, cmd->components[0].component);
 810b52c:	68bb      	ldr	r3, [r7, #8]
 810b52e:	791b      	ldrb	r3, [r3, #4]
 810b530:	461a      	mov	r2, r3
 810b532:	68bb      	ldr	r3, [r7, #8]
 810b534:	681b      	ldr	r3, [r3, #0]
 810b536:	4907      	ldr	r1, [pc, #28]	; (810b554 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3f4>)
 810b538:	6878      	ldr	r0, [r7, #4]
 810b53a:	f7ff fba6 	bl	810ac8a <_ZN7Console6printfEPKcz>
}
 810b53e:	bf00      	nop
 810b540:	3718      	adds	r7, #24
 810b542:	46bd      	mov	sp, r7
 810b544:	bd80      	pop	{r7, pc}
 810b546:	bf00      	nop
 810b548:	08112584 	.word	0x08112584
 810b54c:	081125a8 	.word	0x081125a8
 810b550:	08112668 	.word	0x08112668
 810b554:	081126fc 	.word	0x081126fc

0810b558 <_Znwj>:

#include "Operators.h"

#include "cmsis_os.h"

void * operator new(size_t size) {
 810b558:	b580      	push	{r7, lr}
 810b55a:	b082      	sub	sp, #8
 810b55c:	af00      	add	r7, sp, #0
 810b55e:	6078      	str	r0, [r7, #4]
    return pvPortMalloc(size);
 810b560:	6878      	ldr	r0, [r7, #4]
 810b562:	f7fd fce9 	bl	8108f38 <pvPortMalloc>
 810b566:	4603      	mov	r3, r0
}
 810b568:	4618      	mov	r0, r3
 810b56a:	3708      	adds	r7, #8
 810b56c:	46bd      	mov	sp, r7
 810b56e:	bd80      	pop	{r7, pc}

0810b570 <_ZdlPv>:

void * operator new[](size_t size) {
    return pvPortMalloc(size);
}

void operator delete(void* ptr) {
 810b570:	b580      	push	{r7, lr}
 810b572:	b082      	sub	sp, #8
 810b574:	af00      	add	r7, sp, #0
 810b576:	6078      	str	r0, [r7, #4]
    vPortFree(ptr);
 810b578:	6878      	ldr	r0, [r7, #4]
 810b57a:	f7fd fd9f 	bl	81090bc <vPortFree>
}
 810b57e:	bf00      	nop
 810b580:	3708      	adds	r7, #8
 810b582:	46bd      	mov	sp, r7
 810b584:	bd80      	pop	{r7, pc}

0810b586 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 810b586:	b480      	push	{r7}
 810b588:	b083      	sub	sp, #12
 810b58a:	af00      	add	r7, sp, #0
 810b58c:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 810b58e:	687b      	ldr	r3, [r7, #4]
 810b590:	2203      	movs	r2, #3
 810b592:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 810b594:	687b      	ldr	r3, [r7, #4]
 810b596:	2200      	movs	r2, #0
 810b598:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 810b59a:	687b      	ldr	r3, [r7, #4]
 810b59c:	2203      	movs	r2, #3
 810b59e:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 810b5a0:	687b      	ldr	r3, [r7, #4]
 810b5a2:	2203      	movs	r2, #3
 810b5a4:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 810b5a6:	687b      	ldr	r3, [r7, #4]
 810b5a8:	2203      	movs	r2, #3
 810b5aa:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 810b5ac:	687b      	ldr	r3, [r7, #4]
 810b5ae:	2203      	movs	r2, #3
 810b5b0:	715a      	strb	r2, [r3, #5]
}
 810b5b2:	bf00      	nop
 810b5b4:	370c      	adds	r7, #12
 810b5b6:	46bd      	mov	sp, r7
 810b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b5bc:	4770      	bx	lr

0810b5be <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 810b5be:	b580      	push	{r7, lr}
 810b5c0:	b08a      	sub	sp, #40	; 0x28
 810b5c2:	af04      	add	r7, sp, #16
 810b5c4:	60f8      	str	r0, [r7, #12]
 810b5c6:	460b      	mov	r3, r1
 810b5c8:	607a      	str	r2, [r7, #4]
 810b5ca:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 810b5cc:	68fb      	ldr	r3, [r7, #12]
 810b5ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 810b5d0:	005b      	lsls	r3, r3, #1
 810b5d2:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 810b5d4:	68fb      	ldr	r3, [r7, #12]
 810b5d6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 810b5d8:	7afb      	ldrb	r3, [r7, #11]
 810b5da:	b29a      	uxth	r2, r3
 810b5dc:	8af9      	ldrh	r1, [r7, #22]
 810b5de:	f241 3388 	movw	r3, #5000	; 0x1388
 810b5e2:	9302      	str	r3, [sp, #8]
 810b5e4:	2302      	movs	r3, #2
 810b5e6:	9301      	str	r3, [sp, #4]
 810b5e8:	f107 0314 	add.w	r3, r7, #20
 810b5ec:	9300      	str	r3, [sp, #0]
 810b5ee:	2301      	movs	r3, #1
 810b5f0:	f7fa f824 	bl	810563c <HAL_I2C_Mem_Read>
 810b5f4:	4603      	mov	r3, r0
 810b5f6:	2b00      	cmp	r3, #0
 810b5f8:	d10b      	bne.n	810b612 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 810b5fa:	7d7b      	ldrb	r3, [r7, #21]
 810b5fc:	021b      	lsls	r3, r3, #8
 810b5fe:	b21a      	sxth	r2, r3
 810b600:	7d3b      	ldrb	r3, [r7, #20]
 810b602:	b21b      	sxth	r3, r3
 810b604:	4313      	orrs	r3, r2
 810b606:	b21b      	sxth	r3, r3
 810b608:	b29a      	uxth	r2, r3
 810b60a:	687b      	ldr	r3, [r7, #4]
 810b60c:	801a      	strh	r2, [r3, #0]
		return true;
 810b60e:	2301      	movs	r3, #1
 810b610:	e000      	b.n	810b614 <read_register16+0x56>
	} else
		return false;
 810b612:	2300      	movs	r3, #0

}
 810b614:	4618      	mov	r0, r3
 810b616:	3718      	adds	r7, #24
 810b618:	46bd      	mov	sp, r7
 810b61a:	bd80      	pop	{r7, pc}

0810b61c <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 810b61c:	b590      	push	{r4, r7, lr}
 810b61e:	b08b      	sub	sp, #44	; 0x2c
 810b620:	af04      	add	r7, sp, #16
 810b622:	60f8      	str	r0, [r7, #12]
 810b624:	607a      	str	r2, [r7, #4]
 810b626:	461a      	mov	r2, r3
 810b628:	460b      	mov	r3, r1
 810b62a:	72fb      	strb	r3, [r7, #11]
 810b62c:	4613      	mov	r3, r2
 810b62e:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 810b630:	68fb      	ldr	r3, [r7, #12]
 810b632:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 810b634:	005b      	lsls	r3, r3, #1
 810b636:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 810b638:	68fb      	ldr	r3, [r7, #12]
 810b63a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 810b63c:	7afb      	ldrb	r3, [r7, #11]
 810b63e:	b29c      	uxth	r4, r3
 810b640:	7abb      	ldrb	r3, [r7, #10]
 810b642:	b29b      	uxth	r3, r3
 810b644:	8af9      	ldrh	r1, [r7, #22]
 810b646:	f241 3288 	movw	r2, #5000	; 0x1388
 810b64a:	9202      	str	r2, [sp, #8]
 810b64c:	9301      	str	r3, [sp, #4]
 810b64e:	687b      	ldr	r3, [r7, #4]
 810b650:	9300      	str	r3, [sp, #0]
 810b652:	2301      	movs	r3, #1
 810b654:	4622      	mov	r2, r4
 810b656:	f7f9 fff1 	bl	810563c <HAL_I2C_Mem_Read>
 810b65a:	4603      	mov	r3, r0
 810b65c:	2b00      	cmp	r3, #0
 810b65e:	d101      	bne.n	810b664 <read_data+0x48>
		return 0;
 810b660:	2300      	movs	r3, #0
 810b662:	e000      	b.n	810b666 <read_data+0x4a>
	else
		return 1;
 810b664:	2301      	movs	r3, #1

}
 810b666:	4618      	mov	r0, r3
 810b668:	371c      	adds	r7, #28
 810b66a:	46bd      	mov	sp, r7
 810b66c:	bd90      	pop	{r4, r7, pc}

0810b66e <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 810b66e:	b580      	push	{r7, lr}
 810b670:	b082      	sub	sp, #8
 810b672:	af00      	add	r7, sp, #0
 810b674:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 810b676:	687b      	ldr	r3, [r7, #4]
 810b678:	461a      	mov	r2, r3
 810b67a:	2188      	movs	r1, #136	; 0x88
 810b67c:	6878      	ldr	r0, [r7, #4]
 810b67e:	f7ff ff9e 	bl	810b5be <read_register16>
 810b682:	4603      	mov	r3, r0
 810b684:	2b00      	cmp	r3, #0
 810b686:	d06f      	beq.n	810b768 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 810b688:	687b      	ldr	r3, [r7, #4]
 810b68a:	3302      	adds	r3, #2
 810b68c:	461a      	mov	r2, r3
 810b68e:	218a      	movs	r1, #138	; 0x8a
 810b690:	6878      	ldr	r0, [r7, #4]
 810b692:	f7ff ff94 	bl	810b5be <read_register16>
 810b696:	4603      	mov	r3, r0
 810b698:	2b00      	cmp	r3, #0
 810b69a:	d065      	beq.n	810b768 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 810b69c:	687b      	ldr	r3, [r7, #4]
 810b69e:	3304      	adds	r3, #4
 810b6a0:	461a      	mov	r2, r3
 810b6a2:	218c      	movs	r1, #140	; 0x8c
 810b6a4:	6878      	ldr	r0, [r7, #4]
 810b6a6:	f7ff ff8a 	bl	810b5be <read_register16>
 810b6aa:	4603      	mov	r3, r0
 810b6ac:	2b00      	cmp	r3, #0
 810b6ae:	d05b      	beq.n	810b768 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 810b6b0:	687b      	ldr	r3, [r7, #4]
 810b6b2:	3306      	adds	r3, #6
 810b6b4:	461a      	mov	r2, r3
 810b6b6:	218e      	movs	r1, #142	; 0x8e
 810b6b8:	6878      	ldr	r0, [r7, #4]
 810b6ba:	f7ff ff80 	bl	810b5be <read_register16>
 810b6be:	4603      	mov	r3, r0
 810b6c0:	2b00      	cmp	r3, #0
 810b6c2:	d051      	beq.n	810b768 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 810b6c4:	687b      	ldr	r3, [r7, #4]
 810b6c6:	3308      	adds	r3, #8
 810b6c8:	461a      	mov	r2, r3
 810b6ca:	2190      	movs	r1, #144	; 0x90
 810b6cc:	6878      	ldr	r0, [r7, #4]
 810b6ce:	f7ff ff76 	bl	810b5be <read_register16>
 810b6d2:	4603      	mov	r3, r0
 810b6d4:	2b00      	cmp	r3, #0
 810b6d6:	d047      	beq.n	810b768 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 810b6d8:	687b      	ldr	r3, [r7, #4]
 810b6da:	330a      	adds	r3, #10
 810b6dc:	461a      	mov	r2, r3
 810b6de:	2192      	movs	r1, #146	; 0x92
 810b6e0:	6878      	ldr	r0, [r7, #4]
 810b6e2:	f7ff ff6c 	bl	810b5be <read_register16>
 810b6e6:	4603      	mov	r3, r0
 810b6e8:	2b00      	cmp	r3, #0
 810b6ea:	d03d      	beq.n	810b768 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 810b6ec:	687b      	ldr	r3, [r7, #4]
 810b6ee:	330c      	adds	r3, #12
 810b6f0:	461a      	mov	r2, r3
 810b6f2:	2194      	movs	r1, #148	; 0x94
 810b6f4:	6878      	ldr	r0, [r7, #4]
 810b6f6:	f7ff ff62 	bl	810b5be <read_register16>
 810b6fa:	4603      	mov	r3, r0
 810b6fc:	2b00      	cmp	r3, #0
 810b6fe:	d033      	beq.n	810b768 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 810b700:	687b      	ldr	r3, [r7, #4]
 810b702:	330e      	adds	r3, #14
 810b704:	461a      	mov	r2, r3
 810b706:	2196      	movs	r1, #150	; 0x96
 810b708:	6878      	ldr	r0, [r7, #4]
 810b70a:	f7ff ff58 	bl	810b5be <read_register16>
 810b70e:	4603      	mov	r3, r0
 810b710:	2b00      	cmp	r3, #0
 810b712:	d029      	beq.n	810b768 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 810b714:	687b      	ldr	r3, [r7, #4]
 810b716:	3310      	adds	r3, #16
 810b718:	461a      	mov	r2, r3
 810b71a:	2198      	movs	r1, #152	; 0x98
 810b71c:	6878      	ldr	r0, [r7, #4]
 810b71e:	f7ff ff4e 	bl	810b5be <read_register16>
 810b722:	4603      	mov	r3, r0
 810b724:	2b00      	cmp	r3, #0
 810b726:	d01f      	beq.n	810b768 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 810b728:	687b      	ldr	r3, [r7, #4]
 810b72a:	3312      	adds	r3, #18
 810b72c:	461a      	mov	r2, r3
 810b72e:	219a      	movs	r1, #154	; 0x9a
 810b730:	6878      	ldr	r0, [r7, #4]
 810b732:	f7ff ff44 	bl	810b5be <read_register16>
 810b736:	4603      	mov	r3, r0
 810b738:	2b00      	cmp	r3, #0
 810b73a:	d015      	beq.n	810b768 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 810b73c:	687b      	ldr	r3, [r7, #4]
 810b73e:	3314      	adds	r3, #20
 810b740:	461a      	mov	r2, r3
 810b742:	219c      	movs	r1, #156	; 0x9c
 810b744:	6878      	ldr	r0, [r7, #4]
 810b746:	f7ff ff3a 	bl	810b5be <read_register16>
 810b74a:	4603      	mov	r3, r0
 810b74c:	2b00      	cmp	r3, #0
 810b74e:	d00b      	beq.n	810b768 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 810b750:	687b      	ldr	r3, [r7, #4]
 810b752:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 810b754:	461a      	mov	r2, r3
 810b756:	219e      	movs	r1, #158	; 0x9e
 810b758:	6878      	ldr	r0, [r7, #4]
 810b75a:	f7ff ff30 	bl	810b5be <read_register16>
 810b75e:	4603      	mov	r3, r0
 810b760:	2b00      	cmp	r3, #0
 810b762:	d001      	beq.n	810b768 <read_calibration_data+0xfa>

		return true;
 810b764:	2301      	movs	r3, #1
 810b766:	e000      	b.n	810b76a <read_calibration_data+0xfc>
	}

	return false;
 810b768:	2300      	movs	r3, #0
}
 810b76a:	4618      	mov	r0, r3
 810b76c:	3708      	adds	r7, #8
 810b76e:	46bd      	mov	sp, r7
 810b770:	bd80      	pop	{r7, pc}

0810b772 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 810b772:	b580      	push	{r7, lr}
 810b774:	b084      	sub	sp, #16
 810b776:	af00      	add	r7, sp, #0
 810b778:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 810b77a:	687b      	ldr	r3, [r7, #4]
 810b77c:	f103 0218 	add.w	r2, r3, #24
 810b780:	2301      	movs	r3, #1
 810b782:	21a1      	movs	r1, #161	; 0xa1
 810b784:	6878      	ldr	r0, [r7, #4]
 810b786:	f7ff ff49 	bl	810b61c <read_data>
 810b78a:	4603      	mov	r3, r0
 810b78c:	2b00      	cmp	r3, #0
 810b78e:	d14b      	bne.n	810b828 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 810b790:	687b      	ldr	r3, [r7, #4]
 810b792:	331a      	adds	r3, #26
 810b794:	461a      	mov	r2, r3
 810b796:	21e1      	movs	r1, #225	; 0xe1
 810b798:	6878      	ldr	r0, [r7, #4]
 810b79a:	f7ff ff10 	bl	810b5be <read_register16>
 810b79e:	4603      	mov	r3, r0
 810b7a0:	2b00      	cmp	r3, #0
 810b7a2:	d041      	beq.n	810b828 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 810b7a4:	687b      	ldr	r3, [r7, #4]
 810b7a6:	f103 021c 	add.w	r2, r3, #28
 810b7aa:	2301      	movs	r3, #1
 810b7ac:	21e3      	movs	r1, #227	; 0xe3
 810b7ae:	6878      	ldr	r0, [r7, #4]
 810b7b0:	f7ff ff34 	bl	810b61c <read_data>
 810b7b4:	4603      	mov	r3, r0
 810b7b6:	2b00      	cmp	r3, #0
 810b7b8:	d136      	bne.n	810b828 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 810b7ba:	f107 030e 	add.w	r3, r7, #14
 810b7be:	461a      	mov	r2, r3
 810b7c0:	21e4      	movs	r1, #228	; 0xe4
 810b7c2:	6878      	ldr	r0, [r7, #4]
 810b7c4:	f7ff fefb 	bl	810b5be <read_register16>
 810b7c8:	4603      	mov	r3, r0
 810b7ca:	2b00      	cmp	r3, #0
 810b7cc:	d02c      	beq.n	810b828 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 810b7ce:	f107 030c 	add.w	r3, r7, #12
 810b7d2:	461a      	mov	r2, r3
 810b7d4:	21e5      	movs	r1, #229	; 0xe5
 810b7d6:	6878      	ldr	r0, [r7, #4]
 810b7d8:	f7ff fef1 	bl	810b5be <read_register16>
 810b7dc:	4603      	mov	r3, r0
 810b7de:	2b00      	cmp	r3, #0
 810b7e0:	d022      	beq.n	810b828 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 810b7e2:	687b      	ldr	r3, [r7, #4]
 810b7e4:	f103 0222 	add.w	r2, r3, #34	; 0x22
 810b7e8:	2301      	movs	r3, #1
 810b7ea:	21e7      	movs	r1, #231	; 0xe7
 810b7ec:	6878      	ldr	r0, [r7, #4]
 810b7ee:	f7ff ff15 	bl	810b61c <read_data>
 810b7f2:	4603      	mov	r3, r0
 810b7f4:	2b00      	cmp	r3, #0
 810b7f6:	d117      	bne.n	810b828 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 810b7f8:	89fb      	ldrh	r3, [r7, #14]
 810b7fa:	011b      	lsls	r3, r3, #4
 810b7fc:	b21b      	sxth	r3, r3
 810b7fe:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 810b802:	b21a      	sxth	r2, r3
 810b804:	89fb      	ldrh	r3, [r7, #14]
 810b806:	121b      	asrs	r3, r3, #8
 810b808:	b21b      	sxth	r3, r3
 810b80a:	f003 030f 	and.w	r3, r3, #15
 810b80e:	b21b      	sxth	r3, r3
 810b810:	4313      	orrs	r3, r2
 810b812:	b21a      	sxth	r2, r3
 810b814:	687b      	ldr	r3, [r7, #4]
 810b816:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 810b818:	89bb      	ldrh	r3, [r7, #12]
 810b81a:	091b      	lsrs	r3, r3, #4
 810b81c:	b29b      	uxth	r3, r3
 810b81e:	b21a      	sxth	r2, r3
 810b820:	687b      	ldr	r3, [r7, #4]
 810b822:	841a      	strh	r2, [r3, #32]

		return true;
 810b824:	2301      	movs	r3, #1
 810b826:	e000      	b.n	810b82a <read_hum_calibration_data+0xb8>
	}

	return false;
 810b828:	2300      	movs	r3, #0
}
 810b82a:	4618      	mov	r0, r3
 810b82c:	3710      	adds	r7, #16
 810b82e:	46bd      	mov	sp, r7
 810b830:	bd80      	pop	{r7, pc}

0810b832 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 810b832:	b580      	push	{r7, lr}
 810b834:	b088      	sub	sp, #32
 810b836:	af04      	add	r7, sp, #16
 810b838:	6078      	str	r0, [r7, #4]
 810b83a:	460b      	mov	r3, r1
 810b83c:	70fb      	strb	r3, [r7, #3]
 810b83e:	4613      	mov	r3, r2
 810b840:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 810b842:	687b      	ldr	r3, [r7, #4]
 810b844:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 810b846:	005b      	lsls	r3, r3, #1
 810b848:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 810b84a:	687b      	ldr	r3, [r7, #4]
 810b84c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 810b84e:	78fb      	ldrb	r3, [r7, #3]
 810b850:	b29a      	uxth	r2, r3
 810b852:	89f9      	ldrh	r1, [r7, #14]
 810b854:	f242 7310 	movw	r3, #10000	; 0x2710
 810b858:	9302      	str	r3, [sp, #8]
 810b85a:	2301      	movs	r3, #1
 810b85c:	9301      	str	r3, [sp, #4]
 810b85e:	1cbb      	adds	r3, r7, #2
 810b860:	9300      	str	r3, [sp, #0]
 810b862:	2301      	movs	r3, #1
 810b864:	f7f9 fdd6 	bl	8105414 <HAL_I2C_Mem_Write>
 810b868:	4603      	mov	r3, r0
 810b86a:	2b00      	cmp	r3, #0
 810b86c:	d101      	bne.n	810b872 <write_register8+0x40>
		return false;
 810b86e:	2300      	movs	r3, #0
 810b870:	e000      	b.n	810b874 <write_register8+0x42>
	else
		return true;
 810b872:	2301      	movs	r3, #1
}
 810b874:	4618      	mov	r0, r3
 810b876:	3710      	adds	r7, #16
 810b878:	46bd      	mov	sp, r7
 810b87a:	bd80      	pop	{r7, pc}

0810b87c <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 810b87c:	b580      	push	{r7, lr}
 810b87e:	b084      	sub	sp, #16
 810b880:	af00      	add	r7, sp, #0
 810b882:	6078      	str	r0, [r7, #4]
 810b884:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 810b886:	687b      	ldr	r3, [r7, #4]
 810b888:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 810b88a:	2b76      	cmp	r3, #118	; 0x76
 810b88c:	d005      	beq.n	810b89a <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 810b88e:	687b      	ldr	r3, [r7, #4]
 810b890:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 810b892:	2b77      	cmp	r3, #119	; 0x77
 810b894:	d001      	beq.n	810b89a <bmp280_init+0x1e>

		return false;
 810b896:	2300      	movs	r3, #0
 810b898:	e099      	b.n	810b9ce <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 810b89a:	687b      	ldr	r3, [r7, #4]
 810b89c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 810b8a0:	2301      	movs	r3, #1
 810b8a2:	21d0      	movs	r1, #208	; 0xd0
 810b8a4:	6878      	ldr	r0, [r7, #4]
 810b8a6:	f7ff feb9 	bl	810b61c <read_data>
 810b8aa:	4603      	mov	r3, r0
 810b8ac:	2b00      	cmp	r3, #0
 810b8ae:	d001      	beq.n	810b8b4 <bmp280_init+0x38>
		return false;
 810b8b0:	2300      	movs	r3, #0
 810b8b2:	e08c      	b.n	810b9ce <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 810b8b4:	687b      	ldr	r3, [r7, #4]
 810b8b6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 810b8ba:	2b58      	cmp	r3, #88	; 0x58
 810b8bc:	d006      	beq.n	810b8cc <bmp280_init+0x50>
 810b8be:	687b      	ldr	r3, [r7, #4]
 810b8c0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 810b8c4:	2b60      	cmp	r3, #96	; 0x60
 810b8c6:	d001      	beq.n	810b8cc <bmp280_init+0x50>

		return false;
 810b8c8:	2300      	movs	r3, #0
 810b8ca:	e080      	b.n	810b9ce <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 810b8cc:	22b6      	movs	r2, #182	; 0xb6
 810b8ce:	21e0      	movs	r1, #224	; 0xe0
 810b8d0:	6878      	ldr	r0, [r7, #4]
 810b8d2:	f7ff ffae 	bl	810b832 <write_register8>
 810b8d6:	4603      	mov	r3, r0
 810b8d8:	2b00      	cmp	r3, #0
 810b8da:	d001      	beq.n	810b8e0 <bmp280_init+0x64>
		return false;
 810b8dc:	2300      	movs	r3, #0
 810b8de:	e076      	b.n	810b9ce <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 810b8e0:	f107 020c 	add.w	r2, r7, #12
 810b8e4:	2301      	movs	r3, #1
 810b8e6:	21f3      	movs	r1, #243	; 0xf3
 810b8e8:	6878      	ldr	r0, [r7, #4]
 810b8ea:	f7ff fe97 	bl	810b61c <read_data>
 810b8ee:	4603      	mov	r3, r0
 810b8f0:	2b00      	cmp	r3, #0
 810b8f2:	d1f5      	bne.n	810b8e0 <bmp280_init+0x64>
				&& (status & 1) == 0)
 810b8f4:	7b3b      	ldrb	r3, [r7, #12]
 810b8f6:	f003 0301 	and.w	r3, r3, #1
 810b8fa:	2b00      	cmp	r3, #0
 810b8fc:	d1f0      	bne.n	810b8e0 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 810b8fe:	6878      	ldr	r0, [r7, #4]
 810b900:	f7ff feb5 	bl	810b66e <read_calibration_data>
 810b904:	4603      	mov	r3, r0
 810b906:	f083 0301 	eor.w	r3, r3, #1
 810b90a:	b2db      	uxtb	r3, r3
 810b90c:	2b00      	cmp	r3, #0
 810b90e:	d100      	bne.n	810b912 <bmp280_init+0x96>
 810b910:	e001      	b.n	810b916 <bmp280_init+0x9a>
		return false;
 810b912:	2300      	movs	r3, #0
 810b914:	e05b      	b.n	810b9ce <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 810b916:	687b      	ldr	r3, [r7, #4]
 810b918:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 810b91c:	2b60      	cmp	r3, #96	; 0x60
 810b91e:	d10a      	bne.n	810b936 <bmp280_init+0xba>
 810b920:	6878      	ldr	r0, [r7, #4]
 810b922:	f7ff ff26 	bl	810b772 <read_hum_calibration_data>
 810b926:	4603      	mov	r3, r0
 810b928:	f083 0301 	eor.w	r3, r3, #1
 810b92c:	b2db      	uxtb	r3, r3
 810b92e:	2b00      	cmp	r3, #0
 810b930:	d001      	beq.n	810b936 <bmp280_init+0xba>
		return false;
 810b932:	2300      	movs	r3, #0
 810b934:	e04b      	b.n	810b9ce <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 810b936:	683b      	ldr	r3, [r7, #0]
 810b938:	795b      	ldrb	r3, [r3, #5]
 810b93a:	015b      	lsls	r3, r3, #5
 810b93c:	b25a      	sxtb	r2, r3
 810b93e:	683b      	ldr	r3, [r7, #0]
 810b940:	785b      	ldrb	r3, [r3, #1]
 810b942:	009b      	lsls	r3, r3, #2
 810b944:	b25b      	sxtb	r3, r3
 810b946:	4313      	orrs	r3, r2
 810b948:	b25b      	sxtb	r3, r3
 810b94a:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 810b94c:	7bfb      	ldrb	r3, [r7, #15]
 810b94e:	461a      	mov	r2, r3
 810b950:	21f5      	movs	r1, #245	; 0xf5
 810b952:	6878      	ldr	r0, [r7, #4]
 810b954:	f7ff ff6d 	bl	810b832 <write_register8>
 810b958:	4603      	mov	r3, r0
 810b95a:	2b00      	cmp	r3, #0
 810b95c:	d001      	beq.n	810b962 <bmp280_init+0xe6>
		return false;
 810b95e:	2300      	movs	r3, #0
 810b960:	e035      	b.n	810b9ce <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 810b962:	683b      	ldr	r3, [r7, #0]
 810b964:	781b      	ldrb	r3, [r3, #0]
 810b966:	2b01      	cmp	r3, #1
 810b968:	d102      	bne.n	810b970 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 810b96a:	683b      	ldr	r3, [r7, #0]
 810b96c:	2200      	movs	r2, #0
 810b96e:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 810b970:	683b      	ldr	r3, [r7, #0]
 810b972:	78db      	ldrb	r3, [r3, #3]
 810b974:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 810b976:	b25a      	sxtb	r2, r3
 810b978:	683b      	ldr	r3, [r7, #0]
 810b97a:	789b      	ldrb	r3, [r3, #2]
 810b97c:	009b      	lsls	r3, r3, #2
 810b97e:	b25b      	sxtb	r3, r3
 810b980:	4313      	orrs	r3, r2
 810b982:	b25a      	sxtb	r2, r3
 810b984:	683b      	ldr	r3, [r7, #0]
 810b986:	781b      	ldrb	r3, [r3, #0]
 810b988:	b25b      	sxtb	r3, r3
 810b98a:	4313      	orrs	r3, r2
 810b98c:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 810b98e:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 810b990:	687b      	ldr	r3, [r7, #4]
 810b992:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 810b996:	2b60      	cmp	r3, #96	; 0x60
 810b998:	d10d      	bne.n	810b9b6 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 810b99a:	683b      	ldr	r3, [r7, #0]
 810b99c:	791b      	ldrb	r3, [r3, #4]
 810b99e:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 810b9a0:	7b7b      	ldrb	r3, [r7, #13]
 810b9a2:	461a      	mov	r2, r3
 810b9a4:	21f2      	movs	r1, #242	; 0xf2
 810b9a6:	6878      	ldr	r0, [r7, #4]
 810b9a8:	f7ff ff43 	bl	810b832 <write_register8>
 810b9ac:	4603      	mov	r3, r0
 810b9ae:	2b00      	cmp	r3, #0
 810b9b0:	d001      	beq.n	810b9b6 <bmp280_init+0x13a>
			return false;
 810b9b2:	2300      	movs	r3, #0
 810b9b4:	e00b      	b.n	810b9ce <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 810b9b6:	7bbb      	ldrb	r3, [r7, #14]
 810b9b8:	461a      	mov	r2, r3
 810b9ba:	21f4      	movs	r1, #244	; 0xf4
 810b9bc:	6878      	ldr	r0, [r7, #4]
 810b9be:	f7ff ff38 	bl	810b832 <write_register8>
 810b9c2:	4603      	mov	r3, r0
 810b9c4:	2b00      	cmp	r3, #0
 810b9c6:	d001      	beq.n	810b9cc <bmp280_init+0x150>
		return false;
 810b9c8:	2300      	movs	r3, #0
 810b9ca:	e000      	b.n	810b9ce <bmp280_init+0x152>
	}

	return true;
 810b9cc:	2301      	movs	r3, #1
}
 810b9ce:	4618      	mov	r0, r3
 810b9d0:	3710      	adds	r7, #16
 810b9d2:	46bd      	mov	sp, r7
 810b9d4:	bd80      	pop	{r7, pc}

0810b9d6 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 810b9d6:	b480      	push	{r7}
 810b9d8:	b087      	sub	sp, #28
 810b9da:	af00      	add	r7, sp, #0
 810b9dc:	60f8      	str	r0, [r7, #12]
 810b9de:	60b9      	str	r1, [r7, #8]
 810b9e0:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 810b9e2:	68bb      	ldr	r3, [r7, #8]
 810b9e4:	10da      	asrs	r2, r3, #3
 810b9e6:	68fb      	ldr	r3, [r7, #12]
 810b9e8:	881b      	ldrh	r3, [r3, #0]
 810b9ea:	005b      	lsls	r3, r3, #1
 810b9ec:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 810b9ee:	68fa      	ldr	r2, [r7, #12]
 810b9f0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 810b9f4:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 810b9f8:	12db      	asrs	r3, r3, #11
 810b9fa:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 810b9fc:	68bb      	ldr	r3, [r7, #8]
 810b9fe:	111b      	asrs	r3, r3, #4
 810ba00:	68fa      	ldr	r2, [r7, #12]
 810ba02:	8812      	ldrh	r2, [r2, #0]
 810ba04:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 810ba06:	68ba      	ldr	r2, [r7, #8]
 810ba08:	1112      	asrs	r2, r2, #4
 810ba0a:	68f9      	ldr	r1, [r7, #12]
 810ba0c:	8809      	ldrh	r1, [r1, #0]
 810ba0e:	1a52      	subs	r2, r2, r1
 810ba10:	fb02 f303 	mul.w	r3, r2, r3
 810ba14:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 810ba16:	68fa      	ldr	r2, [r7, #12]
 810ba18:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 810ba1c:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 810ba20:	139b      	asrs	r3, r3, #14
 810ba22:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 810ba24:	697a      	ldr	r2, [r7, #20]
 810ba26:	693b      	ldr	r3, [r7, #16]
 810ba28:	441a      	add	r2, r3
 810ba2a:	687b      	ldr	r3, [r7, #4]
 810ba2c:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 810ba2e:	687b      	ldr	r3, [r7, #4]
 810ba30:	681a      	ldr	r2, [r3, #0]
 810ba32:	4613      	mov	r3, r2
 810ba34:	009b      	lsls	r3, r3, #2
 810ba36:	4413      	add	r3, r2
 810ba38:	3380      	adds	r3, #128	; 0x80
 810ba3a:	121b      	asrs	r3, r3, #8
}
 810ba3c:	4618      	mov	r0, r3
 810ba3e:	371c      	adds	r7, #28
 810ba40:	46bd      	mov	sp, r7
 810ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ba46:	4770      	bx	lr

0810ba48 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 810ba48:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 810ba4c:	b08a      	sub	sp, #40	; 0x28
 810ba4e:	af00      	add	r7, sp, #0
 810ba50:	60f8      	str	r0, [r7, #12]
 810ba52:	60b9      	str	r1, [r7, #8]
 810ba54:	607a      	str	r2, [r7, #4]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 810ba56:	687b      	ldr	r3, [r7, #4]
 810ba58:	4619      	mov	r1, r3
 810ba5a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 810ba5e:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 810ba62:	f142 34ff 	adc.w	r4, r2, #4294967295	; 0xffffffff
 810ba66:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 810ba6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810ba6c:	6a3a      	ldr	r2, [r7, #32]
 810ba6e:	fb02 f203 	mul.w	r2, r2, r3
 810ba72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810ba74:	6a39      	ldr	r1, [r7, #32]
 810ba76:	fb01 f303 	mul.w	r3, r1, r3
 810ba7a:	441a      	add	r2, r3
 810ba7c:	6a39      	ldr	r1, [r7, #32]
 810ba7e:	6a3b      	ldr	r3, [r7, #32]
 810ba80:	fba1 3403 	umull	r3, r4, r1, r3
 810ba84:	4422      	add	r2, r4
 810ba86:	4614      	mov	r4, r2
 810ba88:	68fa      	ldr	r2, [r7, #12]
 810ba8a:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 810ba8e:	b211      	sxth	r1, r2
 810ba90:	ea4f 72e1 	mov.w	r2, r1, asr #31
 810ba94:	fb01 f504 	mul.w	r5, r1, r4
 810ba98:	fb03 f002 	mul.w	r0, r3, r2
 810ba9c:	4428      	add	r0, r5
 810ba9e:	fba3 3401 	umull	r3, r4, r3, r1
 810baa2:	1902      	adds	r2, r0, r4
 810baa4:	4614      	mov	r4, r2
 810baa6:	e9c7 3406 	strd	r3, r4, [r7, #24]
 810baaa:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 810baae:	68fb      	ldr	r3, [r7, #12]
 810bab0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 810bab4:	b21b      	sxth	r3, r3
 810bab6:	ea4f 74e3 	mov.w	r4, r3, asr #31
 810baba:	6a3a      	ldr	r2, [r7, #32]
 810babc:	fb04 f102 	mul.w	r1, r4, r2
 810bac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810bac2:	fb03 f202 	mul.w	r2, r3, r2
 810bac6:	1888      	adds	r0, r1, r2
 810bac8:	6a3a      	ldr	r2, [r7, #32]
 810baca:	fba2 1203 	umull	r1, r2, r2, r3
 810bace:	1883      	adds	r3, r0, r2
 810bad0:	461a      	mov	r2, r3
 810bad2:	f04f 0500 	mov.w	r5, #0
 810bad6:	f04f 0600 	mov.w	r6, #0
 810bada:	0456      	lsls	r6, r2, #17
 810badc:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 810bae0:	044d      	lsls	r5, r1, #17
 810bae2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 810bae6:	186b      	adds	r3, r5, r1
 810bae8:	eb46 0402 	adc.w	r4, r6, r2
 810baec:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 810baf0:	68fb      	ldr	r3, [r7, #12]
 810baf2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 810baf6:	b219      	sxth	r1, r3
 810baf8:	ea4f 72e1 	mov.w	r2, r1, asr #31
 810bafc:	f04f 0500 	mov.w	r5, #0
 810bb00:	f04f 0600 	mov.w	r6, #0
 810bb04:	00ce      	lsls	r6, r1, #3
 810bb06:	2500      	movs	r5, #0
 810bb08:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 810bb0c:	186b      	adds	r3, r5, r1
 810bb0e:	eb46 0402 	adc.w	r4, r6, r2
 810bb12:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 810bb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810bb18:	6a3a      	ldr	r2, [r7, #32]
 810bb1a:	fb02 f203 	mul.w	r2, r2, r3
 810bb1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810bb20:	6a39      	ldr	r1, [r7, #32]
 810bb22:	fb01 f303 	mul.w	r3, r1, r3
 810bb26:	441a      	add	r2, r3
 810bb28:	6a39      	ldr	r1, [r7, #32]
 810bb2a:	6a3b      	ldr	r3, [r7, #32]
 810bb2c:	fba1 3403 	umull	r3, r4, r1, r3
 810bb30:	4422      	add	r2, r4
 810bb32:	4614      	mov	r4, r2
 810bb34:	68fa      	ldr	r2, [r7, #12]
 810bb36:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 810bb3a:	b211      	sxth	r1, r2
 810bb3c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 810bb40:	fb01 f504 	mul.w	r5, r1, r4
 810bb44:	fb03 f002 	mul.w	r0, r3, r2
 810bb48:	4428      	add	r0, r5
 810bb4a:	fba3 3401 	umull	r3, r4, r3, r1
 810bb4e:	1902      	adds	r2, r0, r4
 810bb50:	4614      	mov	r4, r2
 810bb52:	f04f 0100 	mov.w	r1, #0
 810bb56:	f04f 0200 	mov.w	r2, #0
 810bb5a:	0a19      	lsrs	r1, r3, #8
 810bb5c:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 810bb60:	1222      	asrs	r2, r4, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 810bb62:	68fb      	ldr	r3, [r7, #12]
 810bb64:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 810bb68:	b21b      	sxth	r3, r3
 810bb6a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 810bb6e:	6a38      	ldr	r0, [r7, #32]
 810bb70:	fb04 f500 	mul.w	r5, r4, r0
 810bb74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 810bb76:	fb03 f000 	mul.w	r0, r3, r0
 810bb7a:	4428      	add	r0, r5
 810bb7c:	6a3d      	ldr	r5, [r7, #32]
 810bb7e:	fba5 5603 	umull	r5, r6, r5, r3
 810bb82:	1983      	adds	r3, r0, r6
 810bb84:	461e      	mov	r6, r3
 810bb86:	f04f 0b00 	mov.w	fp, #0
 810bb8a:	f04f 0c00 	mov.w	ip, #0
 810bb8e:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 810bb92:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 810bb96:	ea4f 3b05 	mov.w	fp, r5, lsl #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 810bb9a:	eb1b 0301 	adds.w	r3, fp, r1
 810bb9e:	eb4c 0402 	adc.w	r4, ip, r2
 810bba2:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 810bba6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 810bbaa:	1c19      	adds	r1, r3, #0
 810bbac:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 810bbb0:	68fb      	ldr	r3, [r7, #12]
 810bbb2:	88db      	ldrh	r3, [r3, #6]
 810bbb4:	b29b      	uxth	r3, r3
 810bbb6:	f04f 0400 	mov.w	r4, #0
 810bbba:	fb03 f502 	mul.w	r5, r3, r2
 810bbbe:	fb01 f004 	mul.w	r0, r1, r4
 810bbc2:	4428      	add	r0, r5
 810bbc4:	fba1 3403 	umull	r3, r4, r1, r3
 810bbc8:	1902      	adds	r2, r0, r4
 810bbca:	4614      	mov	r4, r2
 810bbcc:	f04f 0100 	mov.w	r1, #0
 810bbd0:	f04f 0200 	mov.w	r2, #0
 810bbd4:	1061      	asrs	r1, r4, #1
 810bbd6:	17e2      	asrs	r2, r4, #31
 810bbd8:	e9c7 1208 	strd	r1, r2, [r7, #32]

	if (var1 == 0) {
 810bbdc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 810bbe0:	4323      	orrs	r3, r4
 810bbe2:	d101      	bne.n	810bbe8 <compensate_pressure+0x1a0>
		return 0;  // avoid exception caused by division by zero
 810bbe4:	2300      	movs	r3, #0
 810bbe6:	e0d4      	b.n	810bd92 <compensate_pressure+0x34a>
	}

	p = 1048576 - adc_press;
 810bbe8:	68bb      	ldr	r3, [r7, #8]
 810bbea:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 810bbee:	ea4f 74e3 	mov.w	r4, r3, asr #31
 810bbf2:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = (((p << 31) - var2) * 3125) / var1;
 810bbf6:	693b      	ldr	r3, [r7, #16]
 810bbf8:	ea4f 0963 	mov.w	r9, r3, asr #1
 810bbfc:	693b      	ldr	r3, [r7, #16]
 810bbfe:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 810bc02:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 810bc06:	4645      	mov	r5, r8
 810bc08:	464e      	mov	r6, r9
 810bc0a:	1aed      	subs	r5, r5, r3
 810bc0c:	eb66 0604 	sbc.w	r6, r6, r4
 810bc10:	46a8      	mov	r8, r5
 810bc12:	46b1      	mov	r9, r6
 810bc14:	eb18 0308 	adds.w	r3, r8, r8
 810bc18:	eb49 0409 	adc.w	r4, r9, r9
 810bc1c:	4698      	mov	r8, r3
 810bc1e:	46a1      	mov	r9, r4
 810bc20:	eb18 0805 	adds.w	r8, r8, r5
 810bc24:	eb49 0906 	adc.w	r9, r9, r6
 810bc28:	f04f 0100 	mov.w	r1, #0
 810bc2c:	f04f 0200 	mov.w	r2, #0
 810bc30:	ea4f 1289 	mov.w	r2, r9, lsl #6
 810bc34:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 810bc38:	ea4f 1188 	mov.w	r1, r8, lsl #6
 810bc3c:	eb18 0801 	adds.w	r8, r8, r1
 810bc40:	eb49 0902 	adc.w	r9, r9, r2
 810bc44:	f04f 0100 	mov.w	r1, #0
 810bc48:	f04f 0200 	mov.w	r2, #0
 810bc4c:	ea4f 0289 	mov.w	r2, r9, lsl #2
 810bc50:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 810bc54:	ea4f 0188 	mov.w	r1, r8, lsl #2
 810bc58:	4688      	mov	r8, r1
 810bc5a:	4691      	mov	r9, r2
 810bc5c:	eb18 0805 	adds.w	r8, r8, r5
 810bc60:	eb49 0906 	adc.w	r9, r9, r6
 810bc64:	f04f 0100 	mov.w	r1, #0
 810bc68:	f04f 0200 	mov.w	r2, #0
 810bc6c:	ea4f 0289 	mov.w	r2, r9, lsl #2
 810bc70:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 810bc74:	ea4f 0188 	mov.w	r1, r8, lsl #2
 810bc78:	4688      	mov	r8, r1
 810bc7a:	4691      	mov	r9, r2
 810bc7c:	eb18 0005 	adds.w	r0, r8, r5
 810bc80:	eb49 0106 	adc.w	r1, r9, r6
 810bc84:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 810bc88:	f7f5 f876 	bl	8100d78 <__aeabi_ldivmod>
 810bc8c:	4603      	mov	r3, r0
 810bc8e:	460c      	mov	r4, r1
 810bc90:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 810bc94:	68fb      	ldr	r3, [r7, #12]
 810bc96:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 810bc9a:	b219      	sxth	r1, r3
 810bc9c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 810bca0:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 810bca4:	f04f 0300 	mov.w	r3, #0
 810bca8:	f04f 0400 	mov.w	r4, #0
 810bcac:	0b6b      	lsrs	r3, r5, #13
 810bcae:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 810bcb2:	1374      	asrs	r4, r6, #13
 810bcb4:	fb03 f502 	mul.w	r5, r3, r2
 810bcb8:	fb01 f004 	mul.w	r0, r1, r4
 810bcbc:	4428      	add	r0, r5
 810bcbe:	fba1 1203 	umull	r1, r2, r1, r3
 810bcc2:	1883      	adds	r3, r0, r2
 810bcc4:	461a      	mov	r2, r3
 810bcc6:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 810bcca:	f04f 0300 	mov.w	r3, #0
 810bcce:	f04f 0400 	mov.w	r4, #0
 810bcd2:	0b6b      	lsrs	r3, r5, #13
 810bcd4:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 810bcd8:	1374      	asrs	r4, r6, #13
 810bcda:	fb03 f502 	mul.w	r5, r3, r2
 810bcde:	fb01 f004 	mul.w	r0, r1, r4
 810bce2:	4428      	add	r0, r5
 810bce4:	fba1 1203 	umull	r1, r2, r1, r3
 810bce8:	1883      	adds	r3, r0, r2
 810bcea:	461a      	mov	r2, r3
 810bcec:	f04f 0300 	mov.w	r3, #0
 810bcf0:	f04f 0400 	mov.w	r4, #0
 810bcf4:	0e4b      	lsrs	r3, r1, #25
 810bcf6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 810bcfa:	1654      	asrs	r4, r2, #25
 810bcfc:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 810bd00:	68fb      	ldr	r3, [r7, #12]
 810bd02:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 810bd06:	b21b      	sxth	r3, r3
 810bd08:	ea4f 74e3 	mov.w	r4, r3, asr #31
 810bd0c:	693a      	ldr	r2, [r7, #16]
 810bd0e:	fb04 f102 	mul.w	r1, r4, r2
 810bd12:	697a      	ldr	r2, [r7, #20]
 810bd14:	fb03 f202 	mul.w	r2, r3, r2
 810bd18:	1888      	adds	r0, r1, r2
 810bd1a:	693a      	ldr	r2, [r7, #16]
 810bd1c:	fba2 1203 	umull	r1, r2, r2, r3
 810bd20:	1883      	adds	r3, r0, r2
 810bd22:	461a      	mov	r2, r3
 810bd24:	f04f 0300 	mov.w	r3, #0
 810bd28:	f04f 0400 	mov.w	r4, #0
 810bd2c:	0ccb      	lsrs	r3, r1, #19
 810bd2e:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 810bd32:	14d4      	asrs	r4, r2, #19
 810bd34:	e9c7 3406 	strd	r3, r4, [r7, #24]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 810bd38:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 810bd3c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 810bd40:	eb11 0803 	adds.w	r8, r1, r3
 810bd44:	eb42 0904 	adc.w	r9, r2, r4
 810bd48:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 810bd4c:	eb13 0508 	adds.w	r5, r3, r8
 810bd50:	eb44 0609 	adc.w	r6, r4, r9
 810bd54:	f04f 0100 	mov.w	r1, #0
 810bd58:	f04f 0200 	mov.w	r2, #0
 810bd5c:	0a29      	lsrs	r1, r5, #8
 810bd5e:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 810bd62:	1232      	asrs	r2, r6, #8
 810bd64:	68fb      	ldr	r3, [r7, #12]
 810bd66:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 810bd6a:	b21d      	sxth	r5, r3
 810bd6c:	ea4f 76e5 	mov.w	r6, r5, asr #31
 810bd70:	f04f 0800 	mov.w	r8, #0
 810bd74:	f04f 0900 	mov.w	r9, #0
 810bd78:	ea4f 1906 	mov.w	r9, r6, lsl #4
 810bd7c:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 810bd80:	ea4f 1805 	mov.w	r8, r5, lsl #4
 810bd84:	eb18 0301 	adds.w	r3, r8, r1
 810bd88:	eb49 0402 	adc.w	r4, r9, r2
 810bd8c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return p;
 810bd90:	693b      	ldr	r3, [r7, #16]
}
 810bd92:	4618      	mov	r0, r3
 810bd94:	3728      	adds	r7, #40	; 0x28
 810bd96:	46bd      	mov	sp, r7
 810bd98:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

0810bd9c <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 810bd9c:	b480      	push	{r7}
 810bd9e:	b087      	sub	sp, #28
 810bda0:	af00      	add	r7, sp, #0
 810bda2:	60f8      	str	r0, [r7, #12]
 810bda4:	60b9      	str	r1, [r7, #8]
 810bda6:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 810bda8:	687b      	ldr	r3, [r7, #4]
 810bdaa:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 810bdae:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 810bdb0:	68bb      	ldr	r3, [r7, #8]
 810bdb2:	039a      	lsls	r2, r3, #14
 810bdb4:	68fb      	ldr	r3, [r7, #12]
 810bdb6:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 810bdba:	051b      	lsls	r3, r3, #20
 810bdbc:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 810bdbe:	68fb      	ldr	r3, [r7, #12]
 810bdc0:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 810bdc4:	4619      	mov	r1, r3
 810bdc6:	697b      	ldr	r3, [r7, #20]
 810bdc8:	fb03 f301 	mul.w	r3, r3, r1
 810bdcc:	1ad3      	subs	r3, r2, r3
 810bdce:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 810bdd2:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 810bdd4:	68fa      	ldr	r2, [r7, #12]
 810bdd6:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 810bdda:	4611      	mov	r1, r2
 810bddc:	697a      	ldr	r2, [r7, #20]
 810bdde:	fb02 f201 	mul.w	r2, r2, r1
 810bde2:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 810bde4:	68f9      	ldr	r1, [r7, #12]
 810bde6:	7f09      	ldrb	r1, [r1, #28]
 810bde8:	4608      	mov	r0, r1
 810bdea:	6979      	ldr	r1, [r7, #20]
 810bdec:	fb01 f100 	mul.w	r1, r1, r0
 810bdf0:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 810bdf2:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 810bdf6:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 810bdfa:	1292      	asrs	r2, r2, #10
 810bdfc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 810be00:	68f9      	ldr	r1, [r7, #12]
 810be02:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 810be06:	fb01 f202 	mul.w	r2, r1, r2
 810be0a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 810be0e:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 810be10:	fb02 f303 	mul.w	r3, r2, r3
 810be14:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 810be16:	697b      	ldr	r3, [r7, #20]
 810be18:	13db      	asrs	r3, r3, #15
 810be1a:	697a      	ldr	r2, [r7, #20]
 810be1c:	13d2      	asrs	r2, r2, #15
 810be1e:	fb02 f303 	mul.w	r3, r2, r3
 810be22:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 810be24:	68fa      	ldr	r2, [r7, #12]
 810be26:	7e12      	ldrb	r2, [r2, #24]
 810be28:	fb02 f303 	mul.w	r3, r2, r3
 810be2c:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 810be2e:	697a      	ldr	r2, [r7, #20]
 810be30:	1ad3      	subs	r3, r2, r3
 810be32:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 810be34:	697b      	ldr	r3, [r7, #20]
 810be36:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 810be3a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 810be3c:	697b      	ldr	r3, [r7, #20]
 810be3e:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 810be42:	bfa8      	it	ge
 810be44:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 810be48:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 810be4a:	697b      	ldr	r3, [r7, #20]
 810be4c:	131b      	asrs	r3, r3, #12
}
 810be4e:	4618      	mov	r0, r3
 810be50:	371c      	adds	r7, #28
 810be52:	46bd      	mov	sp, r7
 810be54:	f85d 7b04 	ldr.w	r7, [sp], #4
 810be58:	4770      	bx	lr

0810be5a <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 810be5a:	b580      	push	{r7, lr}
 810be5c:	b08c      	sub	sp, #48	; 0x30
 810be5e:	af00      	add	r7, sp, #0
 810be60:	60f8      	str	r0, [r7, #12]
 810be62:	60b9      	str	r1, [r7, #8]
 810be64:	607a      	str	r2, [r7, #4]
 810be66:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 810be68:	68fb      	ldr	r3, [r7, #12]
 810be6a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 810be6e:	2b60      	cmp	r3, #96	; 0x60
 810be70:	d007      	beq.n	810be82 <bmp280_read_fixed+0x28>
		if (humidity)
 810be72:	683b      	ldr	r3, [r7, #0]
 810be74:	2b00      	cmp	r3, #0
 810be76:	d002      	beq.n	810be7e <bmp280_read_fixed+0x24>
			*humidity = 0;
 810be78:	683b      	ldr	r3, [r7, #0]
 810be7a:	2200      	movs	r2, #0
 810be7c:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 810be7e:	2300      	movs	r3, #0
 810be80:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 810be82:	683b      	ldr	r3, [r7, #0]
 810be84:	2b00      	cmp	r3, #0
 810be86:	d001      	beq.n	810be8c <bmp280_read_fixed+0x32>
 810be88:	2308      	movs	r3, #8
 810be8a:	e000      	b.n	810be8e <bmp280_read_fixed+0x34>
 810be8c:	2306      	movs	r3, #6
 810be8e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 810be90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810be92:	b2db      	uxtb	r3, r3
 810be94:	f107 0218 	add.w	r2, r7, #24
 810be98:	21f7      	movs	r1, #247	; 0xf7
 810be9a:	68f8      	ldr	r0, [r7, #12]
 810be9c:	f7ff fbbe 	bl	810b61c <read_data>
 810bea0:	4603      	mov	r3, r0
 810bea2:	2b00      	cmp	r3, #0
 810bea4:	d001      	beq.n	810beaa <bmp280_read_fixed+0x50>
		return false;
 810bea6:	2300      	movs	r3, #0
 810bea8:	e038      	b.n	810bf1c <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 810beaa:	7e3b      	ldrb	r3, [r7, #24]
 810beac:	031a      	lsls	r2, r3, #12
 810beae:	7e7b      	ldrb	r3, [r7, #25]
 810beb0:	011b      	lsls	r3, r3, #4
 810beb2:	4313      	orrs	r3, r2
 810beb4:	7eba      	ldrb	r2, [r7, #26]
 810beb6:	0912      	lsrs	r2, r2, #4
 810beb8:	b2d2      	uxtb	r2, r2
 810beba:	4313      	orrs	r3, r2
 810bebc:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 810bebe:	7efb      	ldrb	r3, [r7, #27]
 810bec0:	031a      	lsls	r2, r3, #12
 810bec2:	7f3b      	ldrb	r3, [r7, #28]
 810bec4:	011b      	lsls	r3, r3, #4
 810bec6:	4313      	orrs	r3, r2
 810bec8:	7f7a      	ldrb	r2, [r7, #29]
 810beca:	0912      	lsrs	r2, r2, #4
 810becc:	b2d2      	uxtb	r2, r2
 810bece:	4313      	orrs	r3, r2
 810bed0:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 810bed2:	f107 0314 	add.w	r3, r7, #20
 810bed6:	461a      	mov	r2, r3
 810bed8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 810beda:	68f8      	ldr	r0, [r7, #12]
 810bedc:	f7ff fd7b 	bl	810b9d6 <compensate_temperature>
 810bee0:	4602      	mov	r2, r0
 810bee2:	68bb      	ldr	r3, [r7, #8]
 810bee4:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 810bee6:	697b      	ldr	r3, [r7, #20]
 810bee8:	461a      	mov	r2, r3
 810beea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810beec:	68f8      	ldr	r0, [r7, #12]
 810beee:	f7ff fdab 	bl	810ba48 <compensate_pressure>
 810bef2:	4602      	mov	r2, r0
 810bef4:	687b      	ldr	r3, [r7, #4]
 810bef6:	601a      	str	r2, [r3, #0]

	if (humidity) {
 810bef8:	683b      	ldr	r3, [r7, #0]
 810befa:	2b00      	cmp	r3, #0
 810befc:	d00d      	beq.n	810bf1a <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 810befe:	7fbb      	ldrb	r3, [r7, #30]
 810bf00:	021b      	lsls	r3, r3, #8
 810bf02:	7ffa      	ldrb	r2, [r7, #31]
 810bf04:	4313      	orrs	r3, r2
 810bf06:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 810bf08:	697b      	ldr	r3, [r7, #20]
 810bf0a:	461a      	mov	r2, r3
 810bf0c:	6a39      	ldr	r1, [r7, #32]
 810bf0e:	68f8      	ldr	r0, [r7, #12]
 810bf10:	f7ff ff44 	bl	810bd9c <compensate_humidity>
 810bf14:	4602      	mov	r2, r0
 810bf16:	683b      	ldr	r3, [r7, #0]
 810bf18:	601a      	str	r2, [r3, #0]
	}

	return true;
 810bf1a:	2301      	movs	r3, #1
}
 810bf1c:	4618      	mov	r0, r3
 810bf1e:	3730      	adds	r7, #48	; 0x30
 810bf20:	46bd      	mov	sp, r7
 810bf22:	bd80      	pop	{r7, pc}

0810bf24 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 810bf24:	b580      	push	{r7, lr}
 810bf26:	b088      	sub	sp, #32
 810bf28:	af00      	add	r7, sp, #0
 810bf2a:	60f8      	str	r0, [r7, #12]
 810bf2c:	60b9      	str	r1, [r7, #8]
 810bf2e:	607a      	str	r2, [r7, #4]
 810bf30:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 810bf32:	683b      	ldr	r3, [r7, #0]
 810bf34:	2b00      	cmp	r3, #0
 810bf36:	d002      	beq.n	810bf3e <bmp280_read_float+0x1a>
 810bf38:	f107 0314 	add.w	r3, r7, #20
 810bf3c:	e000      	b.n	810bf40 <bmp280_read_float+0x1c>
 810bf3e:	2300      	movs	r3, #0
 810bf40:	f107 0218 	add.w	r2, r7, #24
 810bf44:	f107 011c 	add.w	r1, r7, #28
 810bf48:	68f8      	ldr	r0, [r7, #12]
 810bf4a:	f7ff ff86 	bl	810be5a <bmp280_read_fixed>
 810bf4e:	4603      	mov	r3, r0
 810bf50:	2b00      	cmp	r3, #0
 810bf52:	d028      	beq.n	810bfa6 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 810bf54:	69fb      	ldr	r3, [r7, #28]
 810bf56:	ee07 3a90 	vmov	s15, r3
 810bf5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 810bf5e:	eddf 6a14 	vldr	s13, [pc, #80]	; 810bfb0 <bmp280_read_float+0x8c>
 810bf62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810bf66:	68bb      	ldr	r3, [r7, #8]
 810bf68:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 810bf6c:	69bb      	ldr	r3, [r7, #24]
 810bf6e:	ee07 3a90 	vmov	s15, r3
 810bf72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810bf76:	eddf 6a0f 	vldr	s13, [pc, #60]	; 810bfb4 <bmp280_read_float+0x90>
 810bf7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810bf7e:	687b      	ldr	r3, [r7, #4]
 810bf80:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 810bf84:	683b      	ldr	r3, [r7, #0]
 810bf86:	2b00      	cmp	r3, #0
 810bf88:	d00b      	beq.n	810bfa2 <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 810bf8a:	697b      	ldr	r3, [r7, #20]
 810bf8c:	ee07 3a90 	vmov	s15, r3
 810bf90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810bf94:	eddf 6a08 	vldr	s13, [pc, #32]	; 810bfb8 <bmp280_read_float+0x94>
 810bf98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810bf9c:	683b      	ldr	r3, [r7, #0]
 810bf9e:	edc3 7a00 	vstr	s15, [r3]
		return true;
 810bfa2:	2301      	movs	r3, #1
 810bfa4:	e000      	b.n	810bfa8 <bmp280_read_float+0x84>
	}

	return false;
 810bfa6:	2300      	movs	r3, #0
}
 810bfa8:	4618      	mov	r0, r3
 810bfaa:	3720      	adds	r7, #32
 810bfac:	46bd      	mov	sp, r7
 810bfae:	bd80      	pop	{r7, pc}
 810bfb0:	42c80000 	.word	0x42c80000
 810bfb4:	43800000 	.word	0x43800000
 810bfb8:	44800000 	.word	0x44800000

0810bfbc <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 810bfbc:	b580      	push	{r7, lr}
 810bfbe:	b082      	sub	sp, #8
 810bfc0:	af00      	add	r7, sp, #0
 810bfc2:	4603      	mov	r3, r0
 810bfc4:	71fb      	strb	r3, [r7, #7]
 810bfc6:	79fb      	ldrb	r3, [r7, #7]
 810bfc8:	4619      	mov	r1, r3
 810bfca:	2007      	movs	r0, #7
 810bfcc:	f000 fa8e 	bl	810c4ec <bno055_writeData>
 810bfd0:	bf00      	nop
 810bfd2:	3708      	adds	r7, #8
 810bfd4:	46bd      	mov	sp, r7
 810bfd6:	bd80      	pop	{r7, pc}

0810bfd8 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 810bfd8:	b580      	push	{r7, lr}
 810bfda:	b082      	sub	sp, #8
 810bfdc:	af00      	add	r7, sp, #0
 810bfde:	4603      	mov	r3, r0
 810bfe0:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 810bfe2:	79fb      	ldrb	r3, [r7, #7]
 810bfe4:	4619      	mov	r1, r3
 810bfe6:	203d      	movs	r0, #61	; 0x3d
 810bfe8:	f000 fa80 	bl	810c4ec <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 810bfec:	79fb      	ldrb	r3, [r7, #7]
 810bfee:	2b00      	cmp	r3, #0
 810bff0:	d103      	bne.n	810bffa <bno055_setOperationMode+0x22>
    bno055_delay(19);
 810bff2:	2013      	movs	r0, #19
 810bff4:	f000 fa6e 	bl	810c4d4 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 810bff8:	e002      	b.n	810c000 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 810bffa:	2007      	movs	r0, #7
 810bffc:	f000 fa6a 	bl	810c4d4 <bno055_delay>
}
 810c000:	bf00      	nop
 810c002:	3708      	adds	r7, #8
 810c004:	46bd      	mov	sp, r7
 810c006:	bd80      	pop	{r7, pc}

0810c008 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 810c008:	b580      	push	{r7, lr}
 810c00a:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 810c00c:	2000      	movs	r0, #0
 810c00e:	f7ff ffe3 	bl	810bfd8 <bno055_setOperationMode>
}
 810c012:	bf00      	nop
 810c014:	bd80      	pop	{r7, pc}

0810c016 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 810c016:	b580      	push	{r7, lr}
 810c018:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 810c01a:	200c      	movs	r0, #12
 810c01c:	f7ff ffdc 	bl	810bfd8 <bno055_setOperationMode>
}
 810c020:	bf00      	nop
 810c022:	bd80      	pop	{r7, pc}

0810c024 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 810c024:	b580      	push	{r7, lr}
 810c026:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 810c028:	2120      	movs	r1, #32
 810c02a:	203f      	movs	r0, #63	; 0x3f
 810c02c:	f000 fa5e 	bl	810c4ec <bno055_writeData>
  bno055_delay(700);
 810c030:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 810c034:	f000 fa4e 	bl	810c4d4 <bno055_delay>
}
 810c038:	bf00      	nop
 810c03a:	bd80      	pop	{r7, pc}

0810c03c <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 810c03c:	b580      	push	{r7, lr}
 810c03e:	b082      	sub	sp, #8
 810c040:	af00      	add	r7, sp, #0
  bno055_reset();
 810c042:	f7ff ffef 	bl	810c024 <bno055_reset>

  uint8_t id = 0;
 810c046:	2300      	movs	r3, #0
 810c048:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 810c04a:	1dfb      	adds	r3, r7, #7
 810c04c:	2201      	movs	r2, #1
 810c04e:	4619      	mov	r1, r3
 810c050:	2000      	movs	r0, #0
 810c052:	f000 fb37 	bl	810c6c4 <bno055_readData>
  if (id != BNO055_ID) {
	  //Pas réussi :/
	  /* IMPLEMENT ME */
  }
  bno055_setPage(0);
 810c056:	2000      	movs	r0, #0
 810c058:	f7ff ffb0 	bl	810bfbc <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 810c05c:	2100      	movs	r1, #0
 810c05e:	203f      	movs	r0, #63	; 0x3f
 810c060:	f000 fa44 	bl	810c4ec <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 810c064:	f7ff ffd0 	bl	810c008 <bno055_setOperationModeConfig>
  bno055_delay(10);
 810c068:	200a      	movs	r0, #10
 810c06a:	f000 fa33 	bl	810c4d4 <bno055_delay>
}
 810c06e:	bf00      	nop
 810c070:	3708      	adds	r7, #8
 810c072:	46bd      	mov	sp, r7
 810c074:	bd80      	pop	{r7, pc}

0810c076 <bno055_getSystemError>:
  res.magState = (tmp >> 1) & 0x01;
  res.accState = (tmp >> 0) & 0x01;
  return res;
}

uint8_t bno055_getSystemError() {
 810c076:	b580      	push	{r7, lr}
 810c078:	b082      	sub	sp, #8
 810c07a:	af00      	add	r7, sp, #0
  bno055_setPage(0);
 810c07c:	2000      	movs	r0, #0
 810c07e:	f7ff ff9d 	bl	810bfbc <bno055_setPage>
  uint8_t tmp;
  bno055_readData(BNO055_SYS_ERR, &tmp, 1);
 810c082:	1dfb      	adds	r3, r7, #7
 810c084:	2201      	movs	r2, #1
 810c086:	4619      	mov	r1, r3
 810c088:	203a      	movs	r0, #58	; 0x3a
 810c08a:	f000 fb1b 	bl	810c6c4 <bno055_readData>
  return tmp;
 810c08e:	79fb      	ldrb	r3, [r7, #7]
}
 810c090:	4618      	mov	r0, r3
 810c092:	3708      	adds	r7, #8
 810c094:	46bd      	mov	sp, r7
 810c096:	bd80      	pop	{r7, pc}

0810c098 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 810c098:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810c09c:	b09f      	sub	sp, #124	; 0x7c
 810c09e:	af00      	add	r7, sp, #0
 810c0a0:	4603      	mov	r3, r0
 810c0a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 810c0a6:	2000      	movs	r0, #0
 810c0a8:	f7ff ff88 	bl	810bfbc <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 810c0ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810c0b0:	2b20      	cmp	r3, #32
 810c0b2:	d108      	bne.n	810c0c6 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 810c0b4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 810c0b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810c0bc:	2208      	movs	r2, #8
 810c0be:	4618      	mov	r0, r3
 810c0c0:	f000 fb00 	bl	810c6c4 <bno055_readData>
 810c0c4:	e007      	b.n	810c0d6 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 810c0c6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 810c0ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810c0ce:	2206      	movs	r2, #6
 810c0d0:	4618      	mov	r0, r3
 810c0d2:	f000 faf7 	bl	810c6c4 <bno055_readData>

  double scale = 1;
 810c0d6:	f04f 0300 	mov.w	r3, #0
 810c0da:	4c8b      	ldr	r4, [pc, #556]	; (810c308 <bno055_getVector+0x270>)
 810c0dc:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 810c0e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810c0e4:	2b0e      	cmp	r3, #14
 810c0e6:	d109      	bne.n	810c0fc <bno055_getVector+0x64>
    scale = magScale;
 810c0e8:	4b88      	ldr	r3, [pc, #544]	; (810c30c <bno055_getVector+0x274>)
 810c0ea:	881b      	ldrh	r3, [r3, #0]
 810c0ec:	4618      	mov	r0, r3
 810c0ee:	f7f4 faa1 	bl	8100634 <__aeabi_ui2d>
 810c0f2:	4603      	mov	r3, r0
 810c0f4:	460c      	mov	r4, r1
 810c0f6:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 810c0fa:	e03e      	b.n	810c17a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 810c0fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810c100:	2b08      	cmp	r3, #8
 810c102:	d007      	beq.n	810c114 <bno055_getVector+0x7c>
 810c104:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810c108:	2b28      	cmp	r3, #40	; 0x28
 810c10a:	d003      	beq.n	810c114 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 810c10c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810c110:	2b2e      	cmp	r3, #46	; 0x2e
 810c112:	d109      	bne.n	810c128 <bno055_getVector+0x90>
    scale = accelScale;
 810c114:	4b7e      	ldr	r3, [pc, #504]	; (810c310 <bno055_getVector+0x278>)
 810c116:	881b      	ldrh	r3, [r3, #0]
 810c118:	4618      	mov	r0, r3
 810c11a:	f7f4 fa8b 	bl	8100634 <__aeabi_ui2d>
 810c11e:	4603      	mov	r3, r0
 810c120:	460c      	mov	r4, r1
 810c122:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 810c126:	e028      	b.n	810c17a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 810c128:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810c12c:	2b14      	cmp	r3, #20
 810c12e:	d109      	bne.n	810c144 <bno055_getVector+0xac>
    scale = angularRateScale;
 810c130:	4b78      	ldr	r3, [pc, #480]	; (810c314 <bno055_getVector+0x27c>)
 810c132:	881b      	ldrh	r3, [r3, #0]
 810c134:	4618      	mov	r0, r3
 810c136:	f7f4 fa7d 	bl	8100634 <__aeabi_ui2d>
 810c13a:	4603      	mov	r3, r0
 810c13c:	460c      	mov	r4, r1
 810c13e:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 810c142:	e01a      	b.n	810c17a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 810c144:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810c148:	2b1a      	cmp	r3, #26
 810c14a:	d109      	bne.n	810c160 <bno055_getVector+0xc8>
    scale = eulerScale;
 810c14c:	4b72      	ldr	r3, [pc, #456]	; (810c318 <bno055_getVector+0x280>)
 810c14e:	881b      	ldrh	r3, [r3, #0]
 810c150:	4618      	mov	r0, r3
 810c152:	f7f4 fa6f 	bl	8100634 <__aeabi_ui2d>
 810c156:	4603      	mov	r3, r0
 810c158:	460c      	mov	r4, r1
 810c15a:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 810c15e:	e00c      	b.n	810c17a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 810c160:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810c164:	2b20      	cmp	r3, #32
 810c166:	d108      	bne.n	810c17a <bno055_getVector+0xe2>
    scale = quaScale;
 810c168:	4b6c      	ldr	r3, [pc, #432]	; (810c31c <bno055_getVector+0x284>)
 810c16a:	881b      	ldrh	r3, [r3, #0]
 810c16c:	4618      	mov	r0, r3
 810c16e:	f7f4 fa61 	bl	8100634 <__aeabi_ui2d>
 810c172:	4603      	mov	r3, r0
 810c174:	460c      	mov	r4, r1
 810c176:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 810c17a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 810c17e:	2220      	movs	r2, #32
 810c180:	2100      	movs	r1, #0
 810c182:	4618      	mov	r0, r3
 810c184:	f003 fa2f 	bl	810f5e6 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 810c188:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810c18c:	2b20      	cmp	r3, #32
 810c18e:	d150      	bne.n	810c232 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 810c190:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 810c194:	021b      	lsls	r3, r3, #8
 810c196:	b21a      	sxth	r2, r3
 810c198:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 810c19c:	b21b      	sxth	r3, r3
 810c19e:	4313      	orrs	r3, r2
 810c1a0:	b21b      	sxth	r3, r3
 810c1a2:	4618      	mov	r0, r3
 810c1a4:	f7f4 fa56 	bl	8100654 <__aeabi_i2d>
 810c1a8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810c1ac:	f7f4 fbe6 	bl	810097c <__aeabi_ddiv>
 810c1b0:	4603      	mov	r3, r0
 810c1b2:	460c      	mov	r4, r1
 810c1b4:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 810c1b8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 810c1bc:	021b      	lsls	r3, r3, #8
 810c1be:	b21a      	sxth	r2, r3
 810c1c0:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 810c1c4:	b21b      	sxth	r3, r3
 810c1c6:	4313      	orrs	r3, r2
 810c1c8:	b21b      	sxth	r3, r3
 810c1ca:	4618      	mov	r0, r3
 810c1cc:	f7f4 fa42 	bl	8100654 <__aeabi_i2d>
 810c1d0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810c1d4:	f7f4 fbd2 	bl	810097c <__aeabi_ddiv>
 810c1d8:	4603      	mov	r3, r0
 810c1da:	460c      	mov	r4, r1
 810c1dc:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 810c1e0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 810c1e4:	021b      	lsls	r3, r3, #8
 810c1e6:	b21a      	sxth	r2, r3
 810c1e8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 810c1ec:	b21b      	sxth	r3, r3
 810c1ee:	4313      	orrs	r3, r2
 810c1f0:	b21b      	sxth	r3, r3
 810c1f2:	4618      	mov	r0, r3
 810c1f4:	f7f4 fa2e 	bl	8100654 <__aeabi_i2d>
 810c1f8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810c1fc:	f7f4 fbbe 	bl	810097c <__aeabi_ddiv>
 810c200:	4603      	mov	r3, r0
 810c202:	460c      	mov	r4, r1
 810c204:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 810c208:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 810c20c:	021b      	lsls	r3, r3, #8
 810c20e:	b21a      	sxth	r2, r3
 810c210:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 810c214:	b21b      	sxth	r3, r3
 810c216:	4313      	orrs	r3, r2
 810c218:	b21b      	sxth	r3, r3
 810c21a:	4618      	mov	r0, r3
 810c21c:	f7f4 fa1a 	bl	8100654 <__aeabi_i2d>
 810c220:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810c224:	f7f4 fbaa 	bl	810097c <__aeabi_ddiv>
 810c228:	4603      	mov	r3, r0
 810c22a:	460c      	mov	r4, r1
 810c22c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
 810c230:	e03b      	b.n	810c2aa <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 810c232:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 810c236:	021b      	lsls	r3, r3, #8
 810c238:	b21a      	sxth	r2, r3
 810c23a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 810c23e:	b21b      	sxth	r3, r3
 810c240:	4313      	orrs	r3, r2
 810c242:	b21b      	sxth	r3, r3
 810c244:	4618      	mov	r0, r3
 810c246:	f7f4 fa05 	bl	8100654 <__aeabi_i2d>
 810c24a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810c24e:	f7f4 fb95 	bl	810097c <__aeabi_ddiv>
 810c252:	4603      	mov	r3, r0
 810c254:	460c      	mov	r4, r1
 810c256:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 810c25a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 810c25e:	021b      	lsls	r3, r3, #8
 810c260:	b21a      	sxth	r2, r3
 810c262:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 810c266:	b21b      	sxth	r3, r3
 810c268:	4313      	orrs	r3, r2
 810c26a:	b21b      	sxth	r3, r3
 810c26c:	4618      	mov	r0, r3
 810c26e:	f7f4 f9f1 	bl	8100654 <__aeabi_i2d>
 810c272:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810c276:	f7f4 fb81 	bl	810097c <__aeabi_ddiv>
 810c27a:	4603      	mov	r3, r0
 810c27c:	460c      	mov	r4, r1
 810c27e:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 810c282:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 810c286:	021b      	lsls	r3, r3, #8
 810c288:	b21a      	sxth	r2, r3
 810c28a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 810c28e:	b21b      	sxth	r3, r3
 810c290:	4313      	orrs	r3, r2
 810c292:	b21b      	sxth	r3, r3
 810c294:	4618      	mov	r0, r3
 810c296:	f7f4 f9dd 	bl	8100654 <__aeabi_i2d>
 810c29a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810c29e:	f7f4 fb6d 	bl	810097c <__aeabi_ddiv>
 810c2a2:	4603      	mov	r3, r0
 810c2a4:	460c      	mov	r4, r1
 810c2a6:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
  }

  return xyz;
 810c2aa:	f107 0450 	add.w	r4, r7, #80	; 0x50
 810c2ae:	f107 0528 	add.w	r5, r7, #40	; 0x28
 810c2b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810c2b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810c2b6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 810c2ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 810c2be:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 810c2c2:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 810c2c6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 810c2ca:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 810c2ce:	ec49 8b14 	vmov	d4, r8, r9
 810c2d2:	ec46 5b15 	vmov	d5, r5, r6
 810c2d6:	ec42 1b16 	vmov	d6, r1, r2
 810c2da:	ec44 3b17 	vmov	d7, r3, r4
}
 810c2de:	eeb0 0a44 	vmov.f32	s0, s8
 810c2e2:	eef0 0a64 	vmov.f32	s1, s9
 810c2e6:	eeb0 1a45 	vmov.f32	s2, s10
 810c2ea:	eef0 1a65 	vmov.f32	s3, s11
 810c2ee:	eeb0 2a46 	vmov.f32	s4, s12
 810c2f2:	eef0 2a66 	vmov.f32	s5, s13
 810c2f6:	eeb0 3a47 	vmov.f32	s6, s14
 810c2fa:	eef0 3a67 	vmov.f32	s7, s15
 810c2fe:	377c      	adds	r7, #124	; 0x7c
 810c300:	46bd      	mov	sp, r7
 810c302:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810c306:	bf00      	nop
 810c308:	3ff00000 	.word	0x3ff00000
 810c30c:	1000002e 	.word	0x1000002e
 810c310:	10000028 	.word	0x10000028
 810c314:	1000002a 	.word	0x1000002a
 810c318:	1000002c 	.word	0x1000002c
 810c31c:	10000030 	.word	0x10000030

0810c320 <bno055_getVectorAccelerometer>:

bno055_vector_t bno055_getVectorAccelerometer() {
 810c320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810c324:	b091      	sub	sp, #68	; 0x44
 810c326:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
 810c328:	2008      	movs	r0, #8
 810c32a:	f7ff feb5 	bl	810c098 <bno055_getVector>
 810c32e:	eeb0 4a40 	vmov.f32	s8, s0
 810c332:	eef0 4a60 	vmov.f32	s9, s1
 810c336:	eeb0 5a41 	vmov.f32	s10, s2
 810c33a:	eef0 5a61 	vmov.f32	s11, s3
 810c33e:	eeb0 6a42 	vmov.f32	s12, s4
 810c342:	eef0 6a62 	vmov.f32	s13, s5
 810c346:	eeb0 7a43 	vmov.f32	s14, s6
 810c34a:	eef0 7a63 	vmov.f32	s15, s7
 810c34e:	ed87 4b08 	vstr	d4, [r7, #32]
 810c352:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 810c356:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 810c35a:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 810c35e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 810c362:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 810c366:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 810c36a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 810c36e:	ec49 8b14 	vmov	d4, r8, r9
 810c372:	ec46 5b15 	vmov	d5, r5, r6
 810c376:	ec42 1b16 	vmov	d6, r1, r2
 810c37a:	ec44 3b17 	vmov	d7, r3, r4
}
 810c37e:	eeb0 0a44 	vmov.f32	s0, s8
 810c382:	eef0 0a64 	vmov.f32	s1, s9
 810c386:	eeb0 1a45 	vmov.f32	s2, s10
 810c38a:	eef0 1a65 	vmov.f32	s3, s11
 810c38e:	eeb0 2a46 	vmov.f32	s4, s12
 810c392:	eef0 2a66 	vmov.f32	s5, s13
 810c396:	eeb0 3a47 	vmov.f32	s6, s14
 810c39a:	eef0 3a67 	vmov.f32	s7, s15
 810c39e:	3744      	adds	r7, #68	; 0x44
 810c3a0:	46bd      	mov	sp, r7
 810c3a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0810c3a6 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 810c3a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810c3aa:	b091      	sub	sp, #68	; 0x44
 810c3ac:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 810c3ae:	201a      	movs	r0, #26
 810c3b0:	f7ff fe72 	bl	810c098 <bno055_getVector>
 810c3b4:	eeb0 4a40 	vmov.f32	s8, s0
 810c3b8:	eef0 4a60 	vmov.f32	s9, s1
 810c3bc:	eeb0 5a41 	vmov.f32	s10, s2
 810c3c0:	eef0 5a61 	vmov.f32	s11, s3
 810c3c4:	eeb0 6a42 	vmov.f32	s12, s4
 810c3c8:	eef0 6a62 	vmov.f32	s13, s5
 810c3cc:	eeb0 7a43 	vmov.f32	s14, s6
 810c3d0:	eef0 7a63 	vmov.f32	s15, s7
 810c3d4:	ed87 4b08 	vstr	d4, [r7, #32]
 810c3d8:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 810c3dc:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 810c3e0:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 810c3e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 810c3e8:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 810c3ec:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 810c3f0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 810c3f4:	ec49 8b14 	vmov	d4, r8, r9
 810c3f8:	ec46 5b15 	vmov	d5, r5, r6
 810c3fc:	ec42 1b16 	vmov	d6, r1, r2
 810c400:	ec44 3b17 	vmov	d7, r3, r4
}
 810c404:	eeb0 0a44 	vmov.f32	s0, s8
 810c408:	eef0 0a64 	vmov.f32	s1, s9
 810c40c:	eeb0 1a45 	vmov.f32	s2, s10
 810c410:	eef0 1a65 	vmov.f32	s3, s11
 810c414:	eeb0 2a46 	vmov.f32	s4, s12
 810c418:	eef0 2a66 	vmov.f32	s5, s13
 810c41c:	eeb0 3a47 	vmov.f32	s6, s14
 810c420:	eef0 3a67 	vmov.f32	s7, s15
 810c424:	3744      	adds	r7, #68	; 0x44
 810c426:	46bd      	mov	sp, r7
 810c428:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0810c42c <bno055_getVectorGravity>:
bno055_vector_t bno055_getVectorLinearAccel() {
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
}
bno055_vector_t bno055_getVectorGravity() {
 810c42c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810c430:	b091      	sub	sp, #68	; 0x44
 810c432:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
 810c434:	202e      	movs	r0, #46	; 0x2e
 810c436:	f7ff fe2f 	bl	810c098 <bno055_getVector>
 810c43a:	eeb0 4a40 	vmov.f32	s8, s0
 810c43e:	eef0 4a60 	vmov.f32	s9, s1
 810c442:	eeb0 5a41 	vmov.f32	s10, s2
 810c446:	eef0 5a61 	vmov.f32	s11, s3
 810c44a:	eeb0 6a42 	vmov.f32	s12, s4
 810c44e:	eef0 6a62 	vmov.f32	s13, s5
 810c452:	eeb0 7a43 	vmov.f32	s14, s6
 810c456:	eef0 7a63 	vmov.f32	s15, s7
 810c45a:	ed87 4b08 	vstr	d4, [r7, #32]
 810c45e:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 810c462:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 810c466:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 810c46a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 810c46e:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 810c472:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 810c476:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 810c47a:	ec49 8b14 	vmov	d4, r8, r9
 810c47e:	ec46 5b15 	vmov	d5, r5, r6
 810c482:	ec42 1b16 	vmov	d6, r1, r2
 810c486:	ec44 3b17 	vmov	d7, r3, r4
}
 810c48a:	eeb0 0a44 	vmov.f32	s0, s8
 810c48e:	eef0 0a64 	vmov.f32	s1, s9
 810c492:	eeb0 1a45 	vmov.f32	s2, s10
 810c496:	eef0 1a65 	vmov.f32	s3, s11
 810c49a:	eeb0 2a46 	vmov.f32	s4, s12
 810c49e:	eef0 2a66 	vmov.f32	s5, s13
 810c4a2:	eeb0 3a47 	vmov.f32	s6, s14
 810c4a6:	eef0 3a67 	vmov.f32	s7, s15
 810c4aa:	3744      	adds	r7, #68	; 0x44
 810c4ac:	46bd      	mov	sp, r7
 810c4ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0810c4b4 <bno055_assignI2C>:
#include "bno055_stm32.h"
#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 810c4b4:	b480      	push	{r7}
 810c4b6:	b083      	sub	sp, #12
 810c4b8:	af00      	add	r7, sp, #0
 810c4ba:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 810c4bc:	4a04      	ldr	r2, [pc, #16]	; (810c4d0 <bno055_assignI2C+0x1c>)
 810c4be:	687b      	ldr	r3, [r7, #4]
 810c4c0:	6013      	str	r3, [r2, #0]
}
 810c4c2:	bf00      	nop
 810c4c4:	370c      	adds	r7, #12
 810c4c6:	46bd      	mov	sp, r7
 810c4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c4cc:	4770      	bx	lr
 810c4ce:	bf00      	nop
 810c4d0:	1000a1f0 	.word	0x1000a1f0

0810c4d4 <bno055_delay>:

void bno055_delay(int time) {
 810c4d4:	b580      	push	{r7, lr}
 810c4d6:	b082      	sub	sp, #8
 810c4d8:	af00      	add	r7, sp, #0
 810c4da:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
 810c4dc:	6878      	ldr	r0, [r7, #4]
 810c4de:	f7fc fce3 	bl	8108ea8 <osDelay>
#else
  HAL_Delay(time);
#endif
}
 810c4e2:	bf00      	nop
 810c4e4:	3708      	adds	r7, #8
 810c4e6:	46bd      	mov	sp, r7
 810c4e8:	bd80      	pop	{r7, pc}
	...

0810c4ec <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 810c4ec:	b580      	push	{r7, lr}
 810c4ee:	b088      	sub	sp, #32
 810c4f0:	af02      	add	r7, sp, #8
 810c4f2:	4603      	mov	r3, r0
 810c4f4:	460a      	mov	r2, r1
 810c4f6:	71fb      	strb	r3, [r7, #7]
 810c4f8:	4613      	mov	r3, r2
 810c4fa:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 810c4fc:	79fb      	ldrb	r3, [r7, #7]
 810c4fe:	733b      	strb	r3, [r7, #12]
 810c500:	79bb      	ldrb	r3, [r7, #6]
 810c502:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 810c504:	4b5a      	ldr	r3, [pc, #360]	; (810c670 <bno055_writeData+0x184>)
 810c506:	6818      	ldr	r0, [r3, #0]
 810c508:	f107 020c 	add.w	r2, r7, #12
 810c50c:	230a      	movs	r3, #10
 810c50e:	9300      	str	r3, [sp, #0]
 810c510:	2302      	movs	r3, #2
 810c512:	2150      	movs	r1, #80	; 0x50
 810c514:	f7f8 fd94 	bl	8105040 <HAL_I2C_Master_Transmit>
 810c518:	4603      	mov	r3, r0
 810c51a:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 810c51c:	7dfb      	ldrb	r3, [r7, #23]
 810c51e:	2b00      	cmp	r3, #0
 810c520:	f000 80a0 	beq.w	810c664 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 810c524:	7dfb      	ldrb	r3, [r7, #23]
 810c526:	2b01      	cmp	r3, #1
 810c528:	d103      	bne.n	810c532 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 810c52a:	4852      	ldr	r0, [pc, #328]	; (810c674 <bno055_writeData+0x188>)
 810c52c:	f003 fd34 	bl	810ff98 <puts>
 810c530:	e012      	b.n	810c558 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 810c532:	7dfb      	ldrb	r3, [r7, #23]
 810c534:	2b03      	cmp	r3, #3
 810c536:	d103      	bne.n	810c540 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 810c538:	484f      	ldr	r0, [pc, #316]	; (810c678 <bno055_writeData+0x18c>)
 810c53a:	f003 fd2d 	bl	810ff98 <puts>
 810c53e:	e00b      	b.n	810c558 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 810c540:	7dfb      	ldrb	r3, [r7, #23]
 810c542:	2b02      	cmp	r3, #2
 810c544:	d103      	bne.n	810c54e <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 810c546:	484d      	ldr	r0, [pc, #308]	; (810c67c <bno055_writeData+0x190>)
 810c548:	f003 fd26 	bl	810ff98 <puts>
 810c54c:	e004      	b.n	810c558 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 810c54e:	7dfb      	ldrb	r3, [r7, #23]
 810c550:	4619      	mov	r1, r3
 810c552:	484b      	ldr	r0, [pc, #300]	; (810c680 <bno055_writeData+0x194>)
 810c554:	f003 fcac 	bl	810feb0 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 810c558:	4b45      	ldr	r3, [pc, #276]	; (810c670 <bno055_writeData+0x184>)
 810c55a:	681b      	ldr	r3, [r3, #0]
 810c55c:	4618      	mov	r0, r3
 810c55e:	f7f9 f995 	bl	810588c <HAL_I2C_GetError>
 810c562:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 810c564:	693b      	ldr	r3, [r7, #16]
 810c566:	2b00      	cmp	r3, #0
 810c568:	d07e      	beq.n	810c668 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 810c56a:	693b      	ldr	r3, [r7, #16]
 810c56c:	2b01      	cmp	r3, #1
 810c56e:	d103      	bne.n	810c578 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 810c570:	4844      	ldr	r0, [pc, #272]	; (810c684 <bno055_writeData+0x198>)
 810c572:	f003 fd11 	bl	810ff98 <puts>
 810c576:	e021      	b.n	810c5bc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 810c578:	693b      	ldr	r3, [r7, #16]
 810c57a:	2b02      	cmp	r3, #2
 810c57c:	d103      	bne.n	810c586 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 810c57e:	4842      	ldr	r0, [pc, #264]	; (810c688 <bno055_writeData+0x19c>)
 810c580:	f003 fd0a 	bl	810ff98 <puts>
 810c584:	e01a      	b.n	810c5bc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 810c586:	693b      	ldr	r3, [r7, #16]
 810c588:	2b04      	cmp	r3, #4
 810c58a:	d103      	bne.n	810c594 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 810c58c:	483f      	ldr	r0, [pc, #252]	; (810c68c <bno055_writeData+0x1a0>)
 810c58e:	f003 fd03 	bl	810ff98 <puts>
 810c592:	e013      	b.n	810c5bc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 810c594:	693b      	ldr	r3, [r7, #16]
 810c596:	2b08      	cmp	r3, #8
 810c598:	d103      	bne.n	810c5a2 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 810c59a:	483d      	ldr	r0, [pc, #244]	; (810c690 <bno055_writeData+0x1a4>)
 810c59c:	f003 fcfc 	bl	810ff98 <puts>
 810c5a0:	e00c      	b.n	810c5bc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 810c5a2:	693b      	ldr	r3, [r7, #16]
 810c5a4:	2b10      	cmp	r3, #16
 810c5a6:	d103      	bne.n	810c5b0 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 810c5a8:	483a      	ldr	r0, [pc, #232]	; (810c694 <bno055_writeData+0x1a8>)
 810c5aa:	f003 fcf5 	bl	810ff98 <puts>
 810c5ae:	e005      	b.n	810c5bc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 810c5b0:	693b      	ldr	r3, [r7, #16]
 810c5b2:	2b20      	cmp	r3, #32
 810c5b4:	d102      	bne.n	810c5bc <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 810c5b6:	4838      	ldr	r0, [pc, #224]	; (810c698 <bno055_writeData+0x1ac>)
 810c5b8:	f003 fcee 	bl	810ff98 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 810c5bc:	4b2c      	ldr	r3, [pc, #176]	; (810c670 <bno055_writeData+0x184>)
 810c5be:	681b      	ldr	r3, [r3, #0]
 810c5c0:	4618      	mov	r0, r3
 810c5c2:	f7f9 f955 	bl	8105870 <HAL_I2C_GetState>
 810c5c6:	4603      	mov	r3, r0
 810c5c8:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 810c5ca:	7bfb      	ldrb	r3, [r7, #15]
 810c5cc:	2b00      	cmp	r3, #0
 810c5ce:	d103      	bne.n	810c5d8 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 810c5d0:	4832      	ldr	r0, [pc, #200]	; (810c69c <bno055_writeData+0x1b0>)
 810c5d2:	f003 fce1 	bl	810ff98 <puts>
 810c5d6:	e048      	b.n	810c66a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 810c5d8:	7bfb      	ldrb	r3, [r7, #15]
 810c5da:	2b20      	cmp	r3, #32
 810c5dc:	d103      	bne.n	810c5e6 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 810c5de:	482f      	ldr	r0, [pc, #188]	; (810c69c <bno055_writeData+0x1b0>)
 810c5e0:	f003 fcda 	bl	810ff98 <puts>
 810c5e4:	e041      	b.n	810c66a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 810c5e6:	7bfb      	ldrb	r3, [r7, #15]
 810c5e8:	2b24      	cmp	r3, #36	; 0x24
 810c5ea:	d103      	bne.n	810c5f4 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 810c5ec:	482c      	ldr	r0, [pc, #176]	; (810c6a0 <bno055_writeData+0x1b4>)
 810c5ee:	f003 fcd3 	bl	810ff98 <puts>
 810c5f2:	e03a      	b.n	810c66a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 810c5f4:	7bfb      	ldrb	r3, [r7, #15]
 810c5f6:	2b21      	cmp	r3, #33	; 0x21
 810c5f8:	d103      	bne.n	810c602 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 810c5fa:	482a      	ldr	r0, [pc, #168]	; (810c6a4 <bno055_writeData+0x1b8>)
 810c5fc:	f003 fccc 	bl	810ff98 <puts>
 810c600:	e033      	b.n	810c66a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 810c602:	7bfb      	ldrb	r3, [r7, #15]
 810c604:	2b22      	cmp	r3, #34	; 0x22
 810c606:	d103      	bne.n	810c610 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 810c608:	4827      	ldr	r0, [pc, #156]	; (810c6a8 <bno055_writeData+0x1bc>)
 810c60a:	f003 fcc5 	bl	810ff98 <puts>
 810c60e:	e02c      	b.n	810c66a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 810c610:	7bfb      	ldrb	r3, [r7, #15]
 810c612:	2b28      	cmp	r3, #40	; 0x28
 810c614:	d103      	bne.n	810c61e <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 810c616:	4825      	ldr	r0, [pc, #148]	; (810c6ac <bno055_writeData+0x1c0>)
 810c618:	f003 fcbe 	bl	810ff98 <puts>
 810c61c:	e025      	b.n	810c66a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 810c61e:	7bfb      	ldrb	r3, [r7, #15]
 810c620:	2b29      	cmp	r3, #41	; 0x29
 810c622:	d103      	bne.n	810c62c <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 810c624:	4822      	ldr	r0, [pc, #136]	; (810c6b0 <bno055_writeData+0x1c4>)
 810c626:	f003 fcb7 	bl	810ff98 <puts>
 810c62a:	e01e      	b.n	810c66a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 810c62c:	7bfb      	ldrb	r3, [r7, #15]
 810c62e:	2b2a      	cmp	r3, #42	; 0x2a
 810c630:	d103      	bne.n	810c63a <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 810c632:	4820      	ldr	r0, [pc, #128]	; (810c6b4 <bno055_writeData+0x1c8>)
 810c634:	f003 fcb0 	bl	810ff98 <puts>
 810c638:	e017      	b.n	810c66a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 810c63a:	7bfb      	ldrb	r3, [r7, #15]
 810c63c:	2b60      	cmp	r3, #96	; 0x60
 810c63e:	d103      	bne.n	810c648 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 810c640:	481d      	ldr	r0, [pc, #116]	; (810c6b8 <bno055_writeData+0x1cc>)
 810c642:	f003 fca9 	bl	810ff98 <puts>
 810c646:	e010      	b.n	810c66a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 810c648:	7bfb      	ldrb	r3, [r7, #15]
 810c64a:	2ba0      	cmp	r3, #160	; 0xa0
 810c64c:	d103      	bne.n	810c656 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 810c64e:	481b      	ldr	r0, [pc, #108]	; (810c6bc <bno055_writeData+0x1d0>)
 810c650:	f003 fca2 	bl	810ff98 <puts>
 810c654:	e009      	b.n	810c66a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 810c656:	7bfb      	ldrb	r3, [r7, #15]
 810c658:	2be0      	cmp	r3, #224	; 0xe0
 810c65a:	d106      	bne.n	810c66a <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 810c65c:	4818      	ldr	r0, [pc, #96]	; (810c6c0 <bno055_writeData+0x1d4>)
 810c65e:	f003 fc9b 	bl	810ff98 <puts>
 810c662:	e002      	b.n	810c66a <bno055_writeData+0x17e>
    return;
 810c664:	bf00      	nop
 810c666:	e000      	b.n	810c66a <bno055_writeData+0x17e>
    return;
 810c668:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 810c66a:	3718      	adds	r7, #24
 810c66c:	46bd      	mov	sp, r7
 810c66e:	bd80      	pop	{r7, pc}
 810c670:	1000a1f0 	.word	0x1000a1f0
 810c674:	08112718 	.word	0x08112718
 810c678:	0811273c 	.word	0x0811273c
 810c67c:	08112764 	.word	0x08112764
 810c680:	08112788 	.word	0x08112788
 810c684:	081127a0 	.word	0x081127a0
 810c688:	081127b4 	.word	0x081127b4
 810c68c:	081127c8 	.word	0x081127c8
 810c690:	081127dc 	.word	0x081127dc
 810c694:	081127f0 	.word	0x081127f0
 810c698:	08112804 	.word	0x08112804
 810c69c:	0811281c 	.word	0x0811281c
 810c6a0:	08112834 	.word	0x08112834
 810c6a4:	08112848 	.word	0x08112848
 810c6a8:	08112860 	.word	0x08112860
 810c6ac:	08112878 	.word	0x08112878
 810c6b0:	08112890 	.word	0x08112890
 810c6b4:	081128b0 	.word	0x081128b0
 810c6b8:	081128d0 	.word	0x081128d0
 810c6bc:	081128e8 	.word	0x081128e8
 810c6c0:	08112900 	.word	0x08112900

0810c6c4 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 810c6c4:	b580      	push	{r7, lr}
 810c6c6:	b084      	sub	sp, #16
 810c6c8:	af02      	add	r7, sp, #8
 810c6ca:	4603      	mov	r3, r0
 810c6cc:	6039      	str	r1, [r7, #0]
 810c6ce:	71fb      	strb	r3, [r7, #7]
 810c6d0:	4613      	mov	r3, r2
 810c6d2:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 810c6d4:	4b0b      	ldr	r3, [pc, #44]	; (810c704 <bno055_readData+0x40>)
 810c6d6:	6818      	ldr	r0, [r3, #0]
 810c6d8:	1dfa      	adds	r2, r7, #7
 810c6da:	2364      	movs	r3, #100	; 0x64
 810c6dc:	9300      	str	r3, [sp, #0]
 810c6de:	2301      	movs	r3, #1
 810c6e0:	2150      	movs	r1, #80	; 0x50
 810c6e2:	f7f8 fcad 	bl	8105040 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 810c6e6:	4b07      	ldr	r3, [pc, #28]	; (810c704 <bno055_readData+0x40>)
 810c6e8:	6818      	ldr	r0, [r3, #0]
 810c6ea:	79bb      	ldrb	r3, [r7, #6]
 810c6ec:	b29a      	uxth	r2, r3
 810c6ee:	2364      	movs	r3, #100	; 0x64
 810c6f0:	9300      	str	r3, [sp, #0]
 810c6f2:	4613      	mov	r3, r2
 810c6f4:	683a      	ldr	r2, [r7, #0]
 810c6f6:	2150      	movs	r1, #80	; 0x50
 810c6f8:	f7f8 fd96 	bl	8105228 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 810c6fc:	bf00      	nop
 810c6fe:	3708      	adds	r7, #8
 810c700:	46bd      	mov	sp, r7
 810c702:	bd80      	pop	{r7, pc}
 810c704:	1000a1f0 	.word	0x1000a1f0

0810c708 <_ZN8IODriverD1Ev>:
#include <functional>


class IODriver {
public:
	virtual ~IODriver() {}
 810c708:	b480      	push	{r7}
 810c70a:	b083      	sub	sp, #12
 810c70c:	af00      	add	r7, sp, #0
 810c70e:	6078      	str	r0, [r7, #4]
 810c710:	4a04      	ldr	r2, [pc, #16]	; (810c724 <_ZN8IODriverD1Ev+0x1c>)
 810c712:	687b      	ldr	r3, [r7, #4]
 810c714:	601a      	str	r2, [r3, #0]
 810c716:	687b      	ldr	r3, [r7, #4]
 810c718:	4618      	mov	r0, r3
 810c71a:	370c      	adds	r7, #12
 810c71c:	46bd      	mov	sp, r7
 810c71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c722:	4770      	bx	lr
 810c724:	08112a8c 	.word	0x08112a8c

0810c728 <_ZN8IODriverD0Ev>:
 810c728:	b580      	push	{r7, lr}
 810c72a:	b082      	sub	sp, #8
 810c72c:	af00      	add	r7, sp, #0
 810c72e:	6078      	str	r0, [r7, #4]
 810c730:	6878      	ldr	r0, [r7, #4]
 810c732:	f7ff ffe9 	bl	810c708 <_ZN8IODriverD1Ev>
 810c736:	2104      	movs	r1, #4
 810c738:	6878      	ldr	r0, [r7, #4]
 810c73a:	f002 fbed 	bl	810ef18 <_ZdlPvj>
 810c73e:	687b      	ldr	r3, [r7, #4]
 810c740:	4618      	mov	r0, r3
 810c742:	3708      	adds	r7, #8
 810c744:	46bd      	mov	sp, r7
 810c746:	bd80      	pop	{r7, pc}

0810c748 <_ZN16BufferedIODriver7receiveERKSt8functionIFvhPhmEE>:

#include "BufferedIODriver.h"

#ifdef BUILD_WITH_BUFFERED_IO

void BufferedIODriver::receive(const std::function<void (uint8_t sender_id, uint8_t* buffer, uint32_t length)> &receiver) {
 810c748:	b480      	push	{r7}
 810c74a:	b083      	sub	sp, #12
 810c74c:	af00      	add	r7, sp, #0
 810c74e:	6078      	str	r0, [r7, #4]
 810c750:	6039      	str	r1, [r7, #0]
	// Not implemented
}
 810c752:	bf00      	nop
 810c754:	370c      	adds	r7, #12
 810c756:	46bd      	mov	sp, r7
 810c758:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c75c:	4770      	bx	lr

0810c75e <_ZN16BufferedIODriver8transmitEPhm>:

/*
 * Writes data to a buffer shared between Cortex-M4 and Cortex-M7
 * Any thread can call this function
 */
void BufferedIODriver::transmit(uint8_t* buffer, uint32_t length) {
 810c75e:	b480      	push	{r7}
 810c760:	b085      	sub	sp, #20
 810c762:	af00      	add	r7, sp, #0
 810c764:	60f8      	str	r0, [r7, #12]
 810c766:	60b9      	str	r1, [r7, #8]
 810c768:	607a      	str	r2, [r7, #4]
	// TODO
}
 810c76a:	bf00      	nop
 810c76c:	3714      	adds	r7, #20
 810c76e:	46bd      	mov	sp, r7
 810c770:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c774:	4770      	bx	lr
	...

0810c778 <_ZN16BufferedIODriverD1Ev>:

#include <cstdint>
#include <functional>


class BufferedIODriver : public IODriver {
 810c778:	b580      	push	{r7, lr}
 810c77a:	b082      	sub	sp, #8
 810c77c:	af00      	add	r7, sp, #0
 810c77e:	6078      	str	r0, [r7, #4]
 810c780:	4a05      	ldr	r2, [pc, #20]	; (810c798 <_ZN16BufferedIODriverD1Ev+0x20>)
 810c782:	687b      	ldr	r3, [r7, #4]
 810c784:	601a      	str	r2, [r3, #0]
 810c786:	687b      	ldr	r3, [r7, #4]
 810c788:	4618      	mov	r0, r3
 810c78a:	f7ff ffbd 	bl	810c708 <_ZN8IODriverD1Ev>
 810c78e:	687b      	ldr	r3, [r7, #4]
 810c790:	4618      	mov	r0, r3
 810c792:	3708      	adds	r7, #8
 810c794:	46bd      	mov	sp, r7
 810c796:	bd80      	pop	{r7, pc}
 810c798:	08112a74 	.word	0x08112a74

0810c79c <_ZN16BufferedIODriverD0Ev>:
 810c79c:	b580      	push	{r7, lr}
 810c79e:	b082      	sub	sp, #8
 810c7a0:	af00      	add	r7, sp, #0
 810c7a2:	6078      	str	r0, [r7, #4]
 810c7a4:	6878      	ldr	r0, [r7, #4]
 810c7a6:	f7ff ffe7 	bl	810c778 <_ZN16BufferedIODriverD1Ev>
 810c7aa:	2104      	movs	r1, #4
 810c7ac:	6878      	ldr	r0, [r7, #4]
 810c7ae:	f002 fbb3 	bl	810ef18 <_ZdlPvj>
 810c7b2:	687b      	ldr	r3, [r7, #4]
 810c7b4:	4618      	mov	r0, r3
 810c7b6:	3708      	adds	r7, #8
 810c7b8:	46bd      	mov	sp, r7
 810c7ba:	bd80      	pop	{r7, pc}

0810c7bc <_ZN10MessageBusD1Ev>:
	size_t hash;
};

class MessageBus {
public:
	virtual ~MessageBus() {}
 810c7bc:	b480      	push	{r7}
 810c7be:	b083      	sub	sp, #12
 810c7c0:	af00      	add	r7, sp, #0
 810c7c2:	6078      	str	r0, [r7, #4]
 810c7c4:	4a04      	ldr	r2, [pc, #16]	; (810c7d8 <_ZN10MessageBusD1Ev+0x1c>)
 810c7c6:	687b      	ldr	r3, [r7, #4]
 810c7c8:	601a      	str	r2, [r3, #0]
 810c7ca:	687b      	ldr	r3, [r7, #4]
 810c7cc:	4618      	mov	r0, r3
 810c7ce:	370c      	adds	r7, #12
 810c7d0:	46bd      	mov	sp, r7
 810c7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c7d6:	4770      	bx	lr
 810c7d8:	08112af0 	.word	0x08112af0

0810c7dc <_ZN10MessageBusD0Ev>:
 810c7dc:	b580      	push	{r7, lr}
 810c7de:	b082      	sub	sp, #8
 810c7e0:	af00      	add	r7, sp, #0
 810c7e2:	6078      	str	r0, [r7, #4]
 810c7e4:	6878      	ldr	r0, [r7, #4]
 810c7e6:	f7ff ffe9 	bl	810c7bc <_ZN10MessageBusD1Ev>
 810c7ea:	f644 0104 	movw	r1, #18436	; 0x4804
 810c7ee:	6878      	ldr	r0, [r7, #4]
 810c7f0:	f002 fb92 	bl	810ef18 <_ZdlPvj>
 810c7f4:	687b      	ldr	r3, [r7, #4]
 810c7f6:	4618      	mov	r0, r3
 810c7f8:	3708      	adds	r7, #8
 810c7fa:	46bd      	mov	sp, r7
 810c7fc:	bd80      	pop	{r7, pc}

0810c7fe <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 810c7fe:	b480      	push	{r7}
 810c800:	b083      	sub	sp, #12
 810c802:	af00      	add	r7, sp, #0
 810c804:	6078      	str	r0, [r7, #4]
 810c806:	687b      	ldr	r3, [r7, #4]
 810c808:	4618      	mov	r0, r3
 810c80a:	370c      	adds	r7, #12
 810c80c:	46bd      	mov	sp, r7
 810c80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c812:	4770      	bx	lr

0810c814 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 810c814:	b480      	push	{r7}
 810c816:	b083      	sub	sp, #12
 810c818:	af00      	add	r7, sp, #0
 810c81a:	6078      	str	r0, [r7, #4]
 810c81c:	687b      	ldr	r3, [r7, #4]
 810c81e:	4618      	mov	r0, r3
 810c820:	370c      	adds	r7, #12
 810c822:	46bd      	mov	sp, r7
 810c824:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c828:	4770      	bx	lr

0810c82a <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 810c82a:	b480      	push	{r7}
 810c82c:	b083      	sub	sp, #12
 810c82e:	af00      	add	r7, sp, #0
 810c830:	6078      	str	r0, [r7, #4]
 810c832:	687b      	ldr	r3, [r7, #4]
 810c834:	2200      	movs	r2, #0
 810c836:	609a      	str	r2, [r3, #8]
 810c838:	687b      	ldr	r3, [r7, #4]
 810c83a:	4618      	mov	r0, r3
 810c83c:	370c      	adds	r7, #12
 810c83e:	46bd      	mov	sp, r7
 810c840:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c844:	4770      	bx	lr

0810c846 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 810c846:	b580      	push	{r7, lr}
 810c848:	b082      	sub	sp, #8
 810c84a:	af00      	add	r7, sp, #0
 810c84c:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 810c84e:	687b      	ldr	r3, [r7, #4]
 810c850:	689b      	ldr	r3, [r3, #8]
 810c852:	2b00      	cmp	r3, #0
 810c854:	d005      	beq.n	810c862 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 810c856:	687b      	ldr	r3, [r7, #4]
 810c858:	689b      	ldr	r3, [r3, #8]
 810c85a:	6878      	ldr	r0, [r7, #4]
 810c85c:	6879      	ldr	r1, [r7, #4]
 810c85e:	2203      	movs	r2, #3
 810c860:	4798      	blx	r3
    }
 810c862:	687b      	ldr	r3, [r7, #4]
 810c864:	4618      	mov	r0, r3
 810c866:	3708      	adds	r7, #8
 810c868:	46bd      	mov	sp, r7
 810c86a:	bd80      	pop	{r7, pc}

0810c86c <_ZN10MessageBusC1Ev>:
class MessageBus {
 810c86c:	b480      	push	{r7}
 810c86e:	b083      	sub	sp, #12
 810c870:	af00      	add	r7, sp, #0
 810c872:	6078      	str	r0, [r7, #4]
 810c874:	4a04      	ldr	r2, [pc, #16]	; (810c888 <_ZN10MessageBusC1Ev+0x1c>)
 810c876:	687b      	ldr	r3, [r7, #4]
 810c878:	601a      	str	r2, [r3, #0]
 810c87a:	687b      	ldr	r3, [r7, #4]
 810c87c:	4618      	mov	r0, r3
 810c87e:	370c      	adds	r7, #12
 810c880:	46bd      	mov	sp, r7
 810c882:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c886:	4770      	bx	lr
 810c888:	08112af0 	.word	0x08112af0

0810c88c <_ZNSt8functionIFvhPhmEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 810c88c:	b580      	push	{r7, lr}
 810c88e:	b082      	sub	sp, #8
 810c890:	af00      	add	r7, sp, #0
 810c892:	6078      	str	r0, [r7, #4]
 810c894:	687b      	ldr	r3, [r7, #4]
 810c896:	4618      	mov	r0, r3
 810c898:	f7ff ffd5 	bl	810c846 <_ZNSt14_Function_baseD1Ev>
 810c89c:	687b      	ldr	r3, [r7, #4]
 810c89e:	4618      	mov	r0, r3
 810c8a0:	3708      	adds	r7, #8
 810c8a2:	46bd      	mov	sp, r7
 810c8a4:	bd80      	pop	{r7, pc}
	...

0810c8a8 <_ZN5IOBusC1EP8IODriverPhm>:

#include "IOBus.h"

#include <cstring>

IOBus::IOBus(IODriver* driver, uint8_t* buffer, uint32_t length) {
 810c8a8:	b590      	push	{r4, r7, lr}
 810c8aa:	b091      	sub	sp, #68	; 0x44
 810c8ac:	af02      	add	r7, sp, #8
 810c8ae:	60f8      	str	r0, [r7, #12]
 810c8b0:	60b9      	str	r1, [r7, #8]
 810c8b2:	607a      	str	r2, [r7, #4]
 810c8b4:	603b      	str	r3, [r7, #0]
 810c8b6:	68fb      	ldr	r3, [r7, #12]
 810c8b8:	4618      	mov	r0, r3
 810c8ba:	f7ff ffd7 	bl	810c86c <_ZN10MessageBusC1Ev>
 810c8be:	4a24      	ldr	r2, [pc, #144]	; (810c950 <_ZN5IOBusC1EP8IODriverPhm+0xa8>)
 810c8c0:	68fb      	ldr	r3, [r7, #12]
 810c8c2:	601a      	str	r2, [r3, #0]
	this->driver = driver;
 810c8c4:	68fb      	ldr	r3, [r7, #12]
 810c8c6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810c8ca:	3304      	adds	r3, #4
 810c8cc:	68ba      	ldr	r2, [r7, #8]
 810c8ce:	601a      	str	r2, [r3, #0]
	this->packet_buffer = buffer;
 810c8d0:	68fb      	ldr	r3, [r7, #12]
 810c8d2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810c8d6:	3308      	adds	r3, #8
 810c8d8:	687a      	ldr	r2, [r7, #4]
 810c8da:	601a      	str	r2, [r3, #0]
	this->buffer_length = length;
 810c8dc:	68fb      	ldr	r3, [r7, #12]
 810c8de:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810c8e2:	330c      	adds	r3, #12
 810c8e4:	683a      	ldr	r2, [r7, #0]
 810c8e6:	601a      	str	r2, [r3, #0]
	this->buffer_index = 0;
 810c8e8:	68fb      	ldr	r3, [r7, #12]
 810c8ea:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810c8ee:	3310      	adds	r3, #16
 810c8f0:	2200      	movs	r2, #0
 810c8f2:	701a      	strb	r2, [r3, #0]

	using namespace std::placeholders;
	driver->receive(std::bind(&IOBus::receive, this, _1, _2, _3));
 810c8f4:	68bb      	ldr	r3, [r7, #8]
 810c8f6:	681b      	ldr	r3, [r3, #0]
 810c8f8:	3308      	adds	r3, #8
 810c8fa:	681c      	ldr	r4, [r3, #0]
 810c8fc:	4b15      	ldr	r3, [pc, #84]	; (810c954 <_ZN5IOBusC1EP8IODriverPhm+0xac>)
 810c8fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 810c900:	2300      	movs	r3, #0
 810c902:	633b      	str	r3, [r7, #48]	; 0x30
 810c904:	68fb      	ldr	r3, [r7, #12]
 810c906:	637b      	str	r3, [r7, #52]	; 0x34
 810c908:	f107 0020 	add.w	r0, r7, #32
 810c90c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 810c910:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 810c914:	4b10      	ldr	r3, [pc, #64]	; (810c958 <_ZN5IOBusC1EP8IODriverPhm+0xb0>)
 810c916:	9301      	str	r3, [sp, #4]
 810c918:	4b10      	ldr	r3, [pc, #64]	; (810c95c <_ZN5IOBusC1EP8IODriverPhm+0xb4>)
 810c91a:	9300      	str	r3, [sp, #0]
 810c91c:	4b10      	ldr	r3, [pc, #64]	; (810c960 <_ZN5IOBusC1EP8IODriverPhm+0xb8>)
 810c91e:	f000 f8f0 	bl	810cb02 <_ZSt4bindIM5IOBusFvhPhmEJPS0_RKSt12_PlaceholderILi1EERKS5_ILi2EERKS5_ILi3EEEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISL_EEE5valueESJ_JDpT0_EE4typeEOSJ_DpOSQ_>
 810c922:	f107 0220 	add.w	r2, r7, #32
 810c926:	f107 0310 	add.w	r3, r7, #16
 810c92a:	4611      	mov	r1, r2
 810c92c:	4618      	mov	r0, r3
 810c92e:	f000 fa45 	bl	810cdbc <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_>
 810c932:	f107 0310 	add.w	r3, r7, #16
 810c936:	4619      	mov	r1, r3
 810c938:	68b8      	ldr	r0, [r7, #8]
 810c93a:	47a0      	blx	r4
 810c93c:	f107 0310 	add.w	r3, r7, #16
 810c940:	4618      	mov	r0, r3
 810c942:	f7ff ffa3 	bl	810c88c <_ZNSt8functionIFvhPhmEED1Ev>
}
 810c946:	68fb      	ldr	r3, [r7, #12]
 810c948:	4618      	mov	r0, r3
 810c94a:	373c      	adds	r7, #60	; 0x3c
 810c94c:	46bd      	mov	sp, r7
 810c94e:	bd90      	pop	{r4, r7, pc}
 810c950:	08112ad8 	.word	0x08112ad8
 810c954:	0810c965 	.word	0x0810c965
 810c958:	08112f0e 	.word	0x08112f0e
 810c95c:	08112f0d 	.word	0x08112f0d
 810c960:	08112f0c 	.word	0x08112f0c

0810c964 <_ZN5IOBus7receiveEhPhm>:

void IOBus::receive(uint8_t sender_id, uint8_t* buffer, uint32_t length) {
 810c964:	b580      	push	{r7, lr}
 810c966:	b084      	sub	sp, #16
 810c968:	af00      	add	r7, sp, #0
 810c96a:	60f8      	str	r0, [r7, #12]
 810c96c:	607a      	str	r2, [r7, #4]
 810c96e:	603b      	str	r3, [r7, #0]
 810c970:	460b      	mov	r3, r1
 810c972:	72fb      	strb	r3, [r7, #11]
	while(length > buffer_length) {
 810c974:	68fb      	ldr	r3, [r7, #12]
 810c976:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810c97a:	330c      	adds	r3, #12
 810c97c:	681b      	ldr	r3, [r3, #0]
 810c97e:	683a      	ldr	r2, [r7, #0]
 810c980:	429a      	cmp	r2, r3
 810c982:	d91a      	bls.n	810c9ba <_ZN5IOBus7receiveEhPhm+0x56>
		MessageBus::receive(sender_id, buffer, buffer_length);
 810c984:	68f8      	ldr	r0, [r7, #12]
 810c986:	68fb      	ldr	r3, [r7, #12]
 810c988:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810c98c:	330c      	adds	r3, #12
 810c98e:	681b      	ldr	r3, [r3, #0]
 810c990:	7af9      	ldrb	r1, [r7, #11]
 810c992:	687a      	ldr	r2, [r7, #4]
 810c994:	f001 fc3a 	bl	810e20c <_ZN10MessageBus7receiveEhPhm>
		length -= buffer_length;
 810c998:	68fb      	ldr	r3, [r7, #12]
 810c99a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810c99e:	330c      	adds	r3, #12
 810c9a0:	681b      	ldr	r3, [r3, #0]
 810c9a2:	683a      	ldr	r2, [r7, #0]
 810c9a4:	1ad3      	subs	r3, r2, r3
 810c9a6:	603b      	str	r3, [r7, #0]
		buffer += buffer_length;
 810c9a8:	68fb      	ldr	r3, [r7, #12]
 810c9aa:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810c9ae:	330c      	adds	r3, #12
 810c9b0:	681b      	ldr	r3, [r3, #0]
 810c9b2:	687a      	ldr	r2, [r7, #4]
 810c9b4:	4413      	add	r3, r2
 810c9b6:	607b      	str	r3, [r7, #4]
	while(length > buffer_length) {
 810c9b8:	e7dc      	b.n	810c974 <_ZN5IOBus7receiveEhPhm+0x10>
	}

	MessageBus::receive(sender_id, buffer, length);
 810c9ba:	68f8      	ldr	r0, [r7, #12]
 810c9bc:	7af9      	ldrb	r1, [r7, #11]
 810c9be:	683b      	ldr	r3, [r7, #0]
 810c9c0:	687a      	ldr	r2, [r7, #4]
 810c9c2:	f001 fc23 	bl	810e20c <_ZN10MessageBus7receiveEhPhm>
}
 810c9c6:	bf00      	nop
 810c9c8:	3710      	adds	r7, #16
 810c9ca:	46bd      	mov	sp, r7
 810c9cc:	bd80      	pop	{r7, pc}

0810c9ce <_ZN5IOBus6appendEPhm>:

uint8_t IOBus::append(uint8_t* buffer, uint32_t length) {
 810c9ce:	b580      	push	{r7, lr}
 810c9d0:	b086      	sub	sp, #24
 810c9d2:	af00      	add	r7, sp, #0
 810c9d4:	60f8      	str	r0, [r7, #12]
 810c9d6:	60b9      	str	r1, [r7, #8]
 810c9d8:	607a      	str	r2, [r7, #4]
	uint32_t remaining_length = buffer_length - buffer_index;
 810c9da:	68fb      	ldr	r3, [r7, #12]
 810c9dc:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810c9e0:	330c      	adds	r3, #12
 810c9e2:	681a      	ldr	r2, [r3, #0]
 810c9e4:	68fb      	ldr	r3, [r7, #12]
 810c9e6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810c9ea:	3310      	adds	r3, #16
 810c9ec:	781b      	ldrb	r3, [r3, #0]
 810c9ee:	1ad3      	subs	r3, r2, r3
 810c9f0:	617b      	str	r3, [r7, #20]

	if(length > remaining_length) {
 810c9f2:	687a      	ldr	r2, [r7, #4]
 810c9f4:	697b      	ldr	r3, [r7, #20]
 810c9f6:	429a      	cmp	r2, r3
 810c9f8:	d901      	bls.n	810c9fe <_ZN5IOBus6appendEPhm+0x30>
		length = remaining_length;
 810c9fa:	697b      	ldr	r3, [r7, #20]
 810c9fc:	607b      	str	r3, [r7, #4]
	}

	memcpy(packet_buffer + buffer_index, buffer, length);
 810c9fe:	68fb      	ldr	r3, [r7, #12]
 810ca00:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810ca04:	3308      	adds	r3, #8
 810ca06:	681a      	ldr	r2, [r3, #0]
 810ca08:	68fb      	ldr	r3, [r7, #12]
 810ca0a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810ca0e:	3310      	adds	r3, #16
 810ca10:	781b      	ldrb	r3, [r3, #0]
 810ca12:	4413      	add	r3, r2
 810ca14:	687a      	ldr	r2, [r7, #4]
 810ca16:	68b9      	ldr	r1, [r7, #8]
 810ca18:	4618      	mov	r0, r3
 810ca1a:	f002 fdd9 	bl	810f5d0 <memcpy>

	buffer_index += length;
 810ca1e:	68fb      	ldr	r3, [r7, #12]
 810ca20:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810ca24:	3310      	adds	r3, #16
 810ca26:	781a      	ldrb	r2, [r3, #0]
 810ca28:	687b      	ldr	r3, [r7, #4]
 810ca2a:	b2db      	uxtb	r3, r3
 810ca2c:	4413      	add	r3, r2
 810ca2e:	b2da      	uxtb	r2, r3
 810ca30:	68fb      	ldr	r3, [r7, #12]
 810ca32:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810ca36:	3310      	adds	r3, #16
 810ca38:	701a      	strb	r2, [r3, #0]


	return length;
 810ca3a:	687b      	ldr	r3, [r7, #4]
 810ca3c:	b2db      	uxtb	r3, r3
}
 810ca3e:	4618      	mov	r0, r3
 810ca40:	3718      	adds	r7, #24
 810ca42:	46bd      	mov	sp, r7
 810ca44:	bd80      	pop	{r7, pc}

0810ca46 <_ZN5IOBus8transmitEv>:

void IOBus::transmit() {
 810ca46:	b590      	push	{r4, r7, lr}
 810ca48:	b083      	sub	sp, #12
 810ca4a:	af00      	add	r7, sp, #0
 810ca4c:	6078      	str	r0, [r7, #4]
	driver->transmit(packet_buffer, buffer_index);
 810ca4e:	687b      	ldr	r3, [r7, #4]
 810ca50:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810ca54:	3304      	adds	r3, #4
 810ca56:	6818      	ldr	r0, [r3, #0]
 810ca58:	687b      	ldr	r3, [r7, #4]
 810ca5a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810ca5e:	3304      	adds	r3, #4
 810ca60:	681b      	ldr	r3, [r3, #0]
 810ca62:	681b      	ldr	r3, [r3, #0]
 810ca64:	330c      	adds	r3, #12
 810ca66:	681c      	ldr	r4, [r3, #0]
 810ca68:	687b      	ldr	r3, [r7, #4]
 810ca6a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810ca6e:	3308      	adds	r3, #8
 810ca70:	6819      	ldr	r1, [r3, #0]
 810ca72:	687b      	ldr	r3, [r7, #4]
 810ca74:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810ca78:	3310      	adds	r3, #16
 810ca7a:	781b      	ldrb	r3, [r3, #0]
 810ca7c:	461a      	mov	r2, r3
 810ca7e:	47a0      	blx	r4
	buffer_index = 0;
 810ca80:	687b      	ldr	r3, [r7, #4]
 810ca82:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810ca86:	3310      	adds	r3, #16
 810ca88:	2200      	movs	r2, #0
 810ca8a:	701a      	strb	r2, [r3, #0]
}
 810ca8c:	bf00      	nop
 810ca8e:	370c      	adds	r7, #12
 810ca90:	46bd      	mov	sp, r7
 810ca92:	bd90      	pop	{r4, r7, pc}

0810ca94 <_ZSt7forwardIM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810ca94:	b480      	push	{r7}
 810ca96:	b083      	sub	sp, #12
 810ca98:	af00      	add	r7, sp, #0
 810ca9a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810ca9c:	687b      	ldr	r3, [r7, #4]
 810ca9e:	4618      	mov	r0, r3
 810caa0:	370c      	adds	r7, #12
 810caa2:	46bd      	mov	sp, r7
 810caa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810caa8:	4770      	bx	lr

0810caaa <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810caaa:	b480      	push	{r7}
 810caac:	b083      	sub	sp, #12
 810caae:	af00      	add	r7, sp, #0
 810cab0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810cab2:	687b      	ldr	r3, [r7, #4]
 810cab4:	4618      	mov	r0, r3
 810cab6:	370c      	adds	r7, #12
 810cab8:	46bd      	mov	sp, r7
 810caba:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cabe:	4770      	bx	lr

0810cac0 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810cac0:	b480      	push	{r7}
 810cac2:	b083      	sub	sp, #12
 810cac4:	af00      	add	r7, sp, #0
 810cac6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810cac8:	687b      	ldr	r3, [r7, #4]
 810caca:	4618      	mov	r0, r3
 810cacc:	370c      	adds	r7, #12
 810cace:	46bd      	mov	sp, r7
 810cad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cad4:	4770      	bx	lr

0810cad6 <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810cad6:	b480      	push	{r7}
 810cad8:	b083      	sub	sp, #12
 810cada:	af00      	add	r7, sp, #0
 810cadc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810cade:	687b      	ldr	r3, [r7, #4]
 810cae0:	4618      	mov	r0, r3
 810cae2:	370c      	adds	r7, #12
 810cae4:	46bd      	mov	sp, r7
 810cae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810caea:	4770      	bx	lr

0810caec <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810caec:	b480      	push	{r7}
 810caee:	b083      	sub	sp, #12
 810caf0:	af00      	add	r7, sp, #0
 810caf2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810caf4:	687b      	ldr	r3, [r7, #4]
 810caf6:	4618      	mov	r0, r3
 810caf8:	370c      	adds	r7, #12
 810cafa:	46bd      	mov	sp, r7
 810cafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cb00:	4770      	bx	lr

0810cb02 <_ZSt4bindIM5IOBusFvhPhmEJPS0_RKSt12_PlaceholderILi1EERKS5_ILi2EERKS5_ILi3EEEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISL_EEE5valueESJ_JDpT0_EE4typeEOSJ_DpOSQ_>:
   *  @ingroup binders
   */
  template<typename _Func, typename... _BoundArgs>
    inline typename
    _Bind_helper<__is_socketlike<_Func>::value, _Func, _BoundArgs...>::type
    bind(_Func&& __f, _BoundArgs&&... __args)
 810cb02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810cb06:	b086      	sub	sp, #24
 810cb08:	af02      	add	r7, sp, #8
 810cb0a:	60f8      	str	r0, [r7, #12]
 810cb0c:	60b9      	str	r1, [r7, #8]
 810cb0e:	607a      	str	r2, [r7, #4]
 810cb10:	603b      	str	r3, [r7, #0]
    {
      typedef _Bind_helper<false, _Func, _BoundArgs...> __helper_type;
      return typename __helper_type::type(std::forward<_Func>(__f),
					  std::forward<_BoundArgs>(__args)...);
 810cb12:	68b8      	ldr	r0, [r7, #8]
 810cb14:	f7ff ffbe 	bl	810ca94 <_ZSt7forwardIM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS4_E4typeE>
 810cb18:	4605      	mov	r5, r0
 810cb1a:	6878      	ldr	r0, [r7, #4]
 810cb1c:	f7ff ffc5 	bl	810caaa <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810cb20:	4606      	mov	r6, r0
 810cb22:	6838      	ldr	r0, [r7, #0]
 810cb24:	f7ff ffcc 	bl	810cac0 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810cb28:	4680      	mov	r8, r0
 810cb2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810cb2c:	f7ff ffd3 	bl	810cad6 <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810cb30:	4604      	mov	r4, r0
 810cb32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810cb34:	f7ff ffda 	bl	810caec <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810cb38:	4603      	mov	r3, r0
 810cb3a:	9301      	str	r3, [sp, #4]
 810cb3c:	9400      	str	r4, [sp, #0]
 810cb3e:	4643      	mov	r3, r8
 810cb40:	4632      	mov	r2, r6
 810cb42:	4629      	mov	r1, r5
 810cb44:	68f8      	ldr	r0, [r7, #12]
 810cb46:	f000 f961 	bl	810ce0c <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1IJS4_RKS6_RKS7_RKS8_EEEOS3_DpOT_>
    }
 810cb4a:	68f8      	ldr	r0, [r7, #12]
 810cb4c:	3710      	adds	r7, #16
 810cb4e:	46bd      	mov	sp, r7
 810cb50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810cb54 <_ZSt4moveIRSt5tupleIJP5IOBusSt12_PlaceholderILi1EES3_ILi2EES3_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSA_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 810cb54:	b480      	push	{r7}
 810cb56:	b083      	sub	sp, #12
 810cb58:	af00      	add	r7, sp, #0
 810cb5a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810cb5c:	687b      	ldr	r3, [r7, #4]
 810cb5e:	4618      	mov	r0, r3
 810cb60:	370c      	adds	r7, #12
 810cb62:	46bd      	mov	sp, r7
 810cb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cb68:	4770      	bx	lr

0810cb6a <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEE7_M_headERS2_>:
      template<std::size_t, typename...> friend class _Tuple_impl;

      typedef _Head_base<_Idx, _Head> _Base;

      static constexpr _Head&
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810cb6a:	b580      	push	{r7, lr}
 810cb6c:	b082      	sub	sp, #8
 810cb6e:	af00      	add	r7, sp, #0
 810cb70:	6078      	str	r0, [r7, #4]
 810cb72:	6878      	ldr	r0, [r7, #4]
 810cb74:	f000 f805 	bl	810cb82 <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EE7_M_headERS2_>
 810cb78:	4603      	mov	r3, r0
 810cb7a:	4618      	mov	r0, r3
 810cb7c:	3708      	adds	r7, #8
 810cb7e:	46bd      	mov	sp, r7
 810cb80:	bd80      	pop	{r7, pc}

0810cb82 <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 810cb82:	b480      	push	{r7}
 810cb84:	b083      	sub	sp, #12
 810cb86:	af00      	add	r7, sp, #0
 810cb88:	6078      	str	r0, [r7, #4]
 810cb8a:	687b      	ldr	r3, [r7, #4]
 810cb8c:	4618      	mov	r0, r3
 810cb8e:	370c      	adds	r7, #12
 810cb90:	46bd      	mov	sp, r7
 810cb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cb96:	4770      	bx	lr

0810cb98 <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810cb98:	b480      	push	{r7}
 810cb9a:	b083      	sub	sp, #12
 810cb9c:	af00      	add	r7, sp, #0
 810cb9e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810cba0:	687b      	ldr	r3, [r7, #4]
 810cba2:	4618      	mov	r0, r3
 810cba4:	370c      	adds	r7, #12
 810cba6:	46bd      	mov	sp, r7
 810cba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cbac:	4770      	bx	lr

0810cbae <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1EOS2_>:
	: _Base(std::forward<_UHead>(__head)) { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;

      constexpr
      _Tuple_impl(_Tuple_impl&& __in)
 810cbae:	b580      	push	{r7, lr}
 810cbb0:	b082      	sub	sp, #8
 810cbb2:	af00      	add	r7, sp, #0
 810cbb4:	6078      	str	r0, [r7, #4]
 810cbb6:	6039      	str	r1, [r7, #0]
      noexcept(is_nothrow_move_constructible<_Head>::value)
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 810cbb8:	6838      	ldr	r0, [r7, #0]
 810cbba:	f7ff ffd6 	bl	810cb6a <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEE7_M_headERS2_>
 810cbbe:	4603      	mov	r3, r0
 810cbc0:	4618      	mov	r0, r3
 810cbc2:	f7ff ffe9 	bl	810cb98 <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810cbc6:	4603      	mov	r3, r0
 810cbc8:	4619      	mov	r1, r3
 810cbca:	6878      	ldr	r0, [r7, #4]
 810cbcc:	f000 f95a 	bl	810ce84 <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1IS1_EEOT_>
 810cbd0:	687b      	ldr	r3, [r7, #4]
 810cbd2:	4618      	mov	r0, r3
 810cbd4:	3708      	adds	r7, #8
 810cbd6:	46bd      	mov	sp, r7
 810cbd8:	bd80      	pop	{r7, pc}

0810cbda <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_tailERS3_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 810cbda:	b480      	push	{r7}
 810cbdc:	b083      	sub	sp, #12
 810cbde:	af00      	add	r7, sp, #0
 810cbe0:	6078      	str	r0, [r7, #4]
 810cbe2:	687b      	ldr	r3, [r7, #4]
 810cbe4:	4618      	mov	r0, r3
 810cbe6:	370c      	adds	r7, #12
 810cbe8:	46bd      	mov	sp, r7
 810cbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cbee:	4770      	bx	lr

0810cbf0 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810cbf0:	b580      	push	{r7, lr}
 810cbf2:	b082      	sub	sp, #8
 810cbf4:	af00      	add	r7, sp, #0
 810cbf6:	6078      	str	r0, [r7, #4]
 810cbf8:	6878      	ldr	r0, [r7, #4]
 810cbfa:	f000 f805 	bl	810cc08 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EE7_M_headERS2_>
 810cbfe:	4603      	mov	r3, r0
 810cc00:	4618      	mov	r0, r3
 810cc02:	3708      	adds	r7, #8
 810cc04:	46bd      	mov	sp, r7
 810cc06:	bd80      	pop	{r7, pc}

0810cc08 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 810cc08:	b480      	push	{r7}
 810cc0a:	b083      	sub	sp, #12
 810cc0c:	af00      	add	r7, sp, #0
 810cc0e:	6078      	str	r0, [r7, #4]
 810cc10:	687b      	ldr	r3, [r7, #4]
 810cc12:	4618      	mov	r0, r3
 810cc14:	370c      	adds	r7, #12
 810cc16:	46bd      	mov	sp, r7
 810cc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cc1c:	4770      	bx	lr

0810cc1e <_ZSt4moveIRSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 810cc1e:	b480      	push	{r7}
 810cc20:	b083      	sub	sp, #12
 810cc22:	af00      	add	r7, sp, #0
 810cc24:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810cc26:	687b      	ldr	r3, [r7, #4]
 810cc28:	4618      	mov	r0, r3
 810cc2a:	370c      	adds	r7, #12
 810cc2c:	46bd      	mov	sp, r7
 810cc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cc32:	4770      	bx	lr

0810cc34 <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810cc34:	b480      	push	{r7}
 810cc36:	b083      	sub	sp, #12
 810cc38:	af00      	add	r7, sp, #0
 810cc3a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810cc3c:	687b      	ldr	r3, [r7, #4]
 810cc3e:	4618      	mov	r0, r3
 810cc40:	370c      	adds	r7, #12
 810cc42:	46bd      	mov	sp, r7
 810cc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cc48:	4770      	bx	lr

0810cc4a <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1EOS3_>:
      _Tuple_impl(_Tuple_impl&& __in)
 810cc4a:	b580      	push	{r7, lr}
 810cc4c:	b082      	sub	sp, #8
 810cc4e:	af00      	add	r7, sp, #0
 810cc50:	6078      	str	r0, [r7, #4]
 810cc52:	6039      	str	r1, [r7, #0]
      : _Inherited(std::move(_M_tail(__in))),
 810cc54:	6838      	ldr	r0, [r7, #0]
 810cc56:	f7ff ffc0 	bl	810cbda <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_tailERS3_>
 810cc5a:	4603      	mov	r3, r0
 810cc5c:	4618      	mov	r0, r3
 810cc5e:	f7ff ffde 	bl	810cc1e <_ZSt4moveIRSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEEONSt16remove_referenceIT_E4typeEOS6_>
 810cc62:	4603      	mov	r3, r0
	_Base(std::forward<_Head>(_M_head(__in))) { }
 810cc64:	4619      	mov	r1, r3
 810cc66:	6878      	ldr	r0, [r7, #4]
 810cc68:	f7ff ffa1 	bl	810cbae <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1EOS2_>
 810cc6c:	6838      	ldr	r0, [r7, #0]
 810cc6e:	f7ff ffbf 	bl	810cbf0 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_headERS3_>
 810cc72:	4603      	mov	r3, r0
 810cc74:	4618      	mov	r0, r3
 810cc76:	f7ff ffdd 	bl	810cc34 <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810cc7a:	4603      	mov	r3, r0
 810cc7c:	4619      	mov	r1, r3
 810cc7e:	6878      	ldr	r0, [r7, #4]
 810cc80:	f000 f90d 	bl	810ce9e <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1IS1_EEOT_>
 810cc84:	687b      	ldr	r3, [r7, #4]
 810cc86:	4618      	mov	r0, r3
 810cc88:	3708      	adds	r7, #8
 810cc8a:	46bd      	mov	sp, r7
 810cc8c:	bd80      	pop	{r7, pc}

0810cc8e <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_tailERS4_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 810cc8e:	b480      	push	{r7}
 810cc90:	b083      	sub	sp, #12
 810cc92:	af00      	add	r7, sp, #0
 810cc94:	6078      	str	r0, [r7, #4]
 810cc96:	687b      	ldr	r3, [r7, #4]
 810cc98:	4618      	mov	r0, r3
 810cc9a:	370c      	adds	r7, #12
 810cc9c:	46bd      	mov	sp, r7
 810cc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cca2:	4770      	bx	lr

0810cca4 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810cca4:	b580      	push	{r7, lr}
 810cca6:	b082      	sub	sp, #8
 810cca8:	af00      	add	r7, sp, #0
 810ccaa:	6078      	str	r0, [r7, #4]
 810ccac:	6878      	ldr	r0, [r7, #4]
 810ccae:	f000 f805 	bl	810ccbc <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EE7_M_headERS2_>
 810ccb2:	4603      	mov	r3, r0
 810ccb4:	4618      	mov	r0, r3
 810ccb6:	3708      	adds	r7, #8
 810ccb8:	46bd      	mov	sp, r7
 810ccba:	bd80      	pop	{r7, pc}

0810ccbc <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 810ccbc:	b480      	push	{r7}
 810ccbe:	b083      	sub	sp, #12
 810ccc0:	af00      	add	r7, sp, #0
 810ccc2:	6078      	str	r0, [r7, #4]
 810ccc4:	687b      	ldr	r3, [r7, #4]
 810ccc6:	4618      	mov	r0, r3
 810ccc8:	370c      	adds	r7, #12
 810ccca:	46bd      	mov	sp, r7
 810cccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ccd0:	4770      	bx	lr

0810ccd2 <_ZSt4moveIRSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 810ccd2:	b480      	push	{r7}
 810ccd4:	b083      	sub	sp, #12
 810ccd6:	af00      	add	r7, sp, #0
 810ccd8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810ccda:	687b      	ldr	r3, [r7, #4]
 810ccdc:	4618      	mov	r0, r3
 810ccde:	370c      	adds	r7, #12
 810cce0:	46bd      	mov	sp, r7
 810cce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cce6:	4770      	bx	lr

0810cce8 <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810cce8:	b480      	push	{r7}
 810ccea:	b083      	sub	sp, #12
 810ccec:	af00      	add	r7, sp, #0
 810ccee:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810ccf0:	687b      	ldr	r3, [r7, #4]
 810ccf2:	4618      	mov	r0, r3
 810ccf4:	370c      	adds	r7, #12
 810ccf6:	46bd      	mov	sp, r7
 810ccf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ccfc:	4770      	bx	lr

0810ccfe <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 810ccfe:	b580      	push	{r7, lr}
 810cd00:	b082      	sub	sp, #8
 810cd02:	af00      	add	r7, sp, #0
 810cd04:	6078      	str	r0, [r7, #4]
 810cd06:	6039      	str	r1, [r7, #0]
      : _Inherited(std::move(_M_tail(__in))),
 810cd08:	6838      	ldr	r0, [r7, #0]
 810cd0a:	f7ff ffc0 	bl	810cc8e <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_tailERS4_>
 810cd0e:	4603      	mov	r3, r0
 810cd10:	4618      	mov	r0, r3
 810cd12:	f7ff ffde 	bl	810ccd2 <_ZSt4moveIRSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS7_>
 810cd16:	4603      	mov	r3, r0
	_Base(std::forward<_Head>(_M_head(__in))) { }
 810cd18:	4619      	mov	r1, r3
 810cd1a:	6878      	ldr	r0, [r7, #4]
 810cd1c:	f7ff ff95 	bl	810cc4a <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1EOS3_>
 810cd20:	6838      	ldr	r0, [r7, #0]
 810cd22:	f7ff ffbf 	bl	810cca4 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_headERS4_>
 810cd26:	4603      	mov	r3, r0
 810cd28:	4618      	mov	r0, r3
 810cd2a:	f7ff ffdd 	bl	810cce8 <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810cd2e:	4603      	mov	r3, r0
 810cd30:	4619      	mov	r1, r3
 810cd32:	6878      	ldr	r0, [r7, #4]
 810cd34:	f000 f8c0 	bl	810ceb8 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1IS1_EEOT_>
 810cd38:	687b      	ldr	r3, [r7, #4]
 810cd3a:	4618      	mov	r0, r3
 810cd3c:	3708      	adds	r7, #8
 810cd3e:	46bd      	mov	sp, r7
 810cd40:	bd80      	pop	{r7, pc}

0810cd42 <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>:
        explicit constexpr tuple(_UElements&&... __elements)
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 810cd42:	b580      	push	{r7, lr}
 810cd44:	b082      	sub	sp, #8
 810cd46:	af00      	add	r7, sp, #0
 810cd48:	6078      	str	r0, [r7, #4]
 810cd4a:	6039      	str	r1, [r7, #0]
 810cd4c:	687b      	ldr	r3, [r7, #4]
 810cd4e:	683a      	ldr	r2, [r7, #0]
 810cd50:	4611      	mov	r1, r2
 810cd52:	4618      	mov	r0, r3
 810cd54:	f000 f8eb 	bl	810cf2e <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>
 810cd58:	687b      	ldr	r3, [r7, #4]
 810cd5a:	4618      	mov	r0, r3
 810cd5c:	3708      	adds	r7, #8
 810cd5e:	46bd      	mov	sp, r7
 810cd60:	bd80      	pop	{r7, pc}

0810cd62 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1EOSA_>:
      _Bind(_Bind&& __b)
 810cd62:	b590      	push	{r4, r7, lr}
 810cd64:	b083      	sub	sp, #12
 810cd66:	af00      	add	r7, sp, #0
 810cd68:	6078      	str	r0, [r7, #4]
 810cd6a:	6039      	str	r1, [r7, #0]
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 810cd6c:	683b      	ldr	r3, [r7, #0]
 810cd6e:	4618      	mov	r0, r3
 810cd70:	f000 f87d 	bl	810ce6e <_ZSt4moveIRM5IOBusFvhPhmEEONSt16remove_referenceIT_E4typeEOS6_>
 810cd74:	4602      	mov	r2, r0
 810cd76:	687b      	ldr	r3, [r7, #4]
 810cd78:	e892 0003 	ldmia.w	r2, {r0, r1}
 810cd7c:	e883 0003 	stmia.w	r3, {r0, r1}
 810cd80:	687b      	ldr	r3, [r7, #4]
 810cd82:	f103 0408 	add.w	r4, r3, #8
 810cd86:	683b      	ldr	r3, [r7, #0]
 810cd88:	3308      	adds	r3, #8
 810cd8a:	4618      	mov	r0, r3
 810cd8c:	f7ff fee2 	bl	810cb54 <_ZSt4moveIRSt5tupleIJP5IOBusSt12_PlaceholderILi1EES3_ILi2EES3_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSA_>
 810cd90:	4603      	mov	r3, r0
 810cd92:	4619      	mov	r1, r3
 810cd94:	4620      	mov	r0, r4
 810cd96:	f7ff ffd4 	bl	810cd42 <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>
      { }
 810cd9a:	687b      	ldr	r3, [r7, #4]
 810cd9c:	4618      	mov	r0, r3
 810cd9e:	370c      	adds	r7, #12
 810cda0:	46bd      	mov	sp, r7
 810cda2:	bd90      	pop	{r4, r7, pc}

0810cda4 <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>:
    move(_Tp&& __t) noexcept
 810cda4:	b480      	push	{r7}
 810cda6:	b083      	sub	sp, #12
 810cda8:	af00      	add	r7, sp, #0
 810cdaa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810cdac:	687b      	ldr	r3, [r7, #4]
 810cdae:	4618      	mov	r0, r3
 810cdb0:	370c      	adds	r7, #12
 810cdb2:	46bd      	mov	sp, r7
 810cdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cdb8:	4770      	bx	lr
	...

0810cdbc <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
 810cdbc:	b590      	push	{r4, r7, lr}
 810cdbe:	b083      	sub	sp, #12
 810cdc0:	af00      	add	r7, sp, #0
 810cdc2:	6078      	str	r0, [r7, #4]
 810cdc4:	6039      	str	r1, [r7, #0]
      function(_Functor __f)
      : _Function_base()
 810cdc6:	687b      	ldr	r3, [r7, #4]
 810cdc8:	4618      	mov	r0, r3
 810cdca:	f7ff fd2e 	bl	810c82a <_ZNSt14_Function_baseC1Ev>
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 810cdce:	6838      	ldr	r0, [r7, #0]
 810cdd0:	f000 f8d0 	bl	810cf74 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE21_M_not_empty_functionISC_EEbRKT_>
 810cdd4:	4603      	mov	r3, r0
 810cdd6:	2b00      	cmp	r3, #0
 810cdd8:	d00e      	beq.n	810cdf8 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_+0x3c>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 810cdda:	687c      	ldr	r4, [r7, #4]
 810cddc:	6838      	ldr	r0, [r7, #0]
 810cdde:	f7ff ffe1 	bl	810cda4 <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>
 810cde2:	4603      	mov	r3, r0
 810cde4:	4619      	mov	r1, r3
 810cde6:	4620      	mov	r0, r4
 810cde8:	f000 f8cf 	bl	810cf8a <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_>
	    _M_invoker = &_My_handler::_M_invoke;
 810cdec:	687b      	ldr	r3, [r7, #4]
 810cdee:	4a05      	ldr	r2, [pc, #20]	; (810ce04 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_+0x48>)
 810cdf0:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 810cdf2:	687b      	ldr	r3, [r7, #4]
 810cdf4:	4a04      	ldr	r2, [pc, #16]	; (810ce08 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_+0x4c>)
 810cdf6:	609a      	str	r2, [r3, #8]
	  }
      }
 810cdf8:	687b      	ldr	r3, [r7, #4]
 810cdfa:	4618      	mov	r0, r3
 810cdfc:	370c      	adds	r7, #12
 810cdfe:	46bd      	mov	sp, r7
 810ce00:	bd90      	pop	{r4, r7, pc}
 810ce02:	bf00      	nop
 810ce04:	0810cff1 	.word	0x0810cff1
 810ce08:	0810d031 	.word	0x0810d031

0810ce0c <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1IJS4_RKS6_RKS7_RKS8_EEEOS3_DpOT_>:
	explicit _Bind(_Functor&& __f, _Args&&... __args)
 810ce0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810ce10:	b086      	sub	sp, #24
 810ce12:	af02      	add	r7, sp, #8
 810ce14:	60f8      	str	r0, [r7, #12]
 810ce16:	60b9      	str	r1, [r7, #8]
 810ce18:	607a      	str	r2, [r7, #4]
 810ce1a:	603b      	str	r3, [r7, #0]
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 810ce1c:	68b8      	ldr	r0, [r7, #8]
 810ce1e:	f000 f826 	bl	810ce6e <_ZSt4moveIRM5IOBusFvhPhmEEONSt16remove_referenceIT_E4typeEOS6_>
 810ce22:	4602      	mov	r2, r0
 810ce24:	68fb      	ldr	r3, [r7, #12]
 810ce26:	e892 0003 	ldmia.w	r2, {r0, r1}
 810ce2a:	e883 0003 	stmia.w	r3, {r0, r1}
 810ce2e:	68fb      	ldr	r3, [r7, #12]
 810ce30:	f103 0408 	add.w	r4, r3, #8
 810ce34:	6878      	ldr	r0, [r7, #4]
 810ce36:	f7ff fe38 	bl	810caaa <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810ce3a:	4605      	mov	r5, r0
 810ce3c:	6838      	ldr	r0, [r7, #0]
 810ce3e:	f7ff fe3f 	bl	810cac0 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810ce42:	4606      	mov	r6, r0
 810ce44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810ce46:	f7ff fe46 	bl	810cad6 <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810ce4a:	4680      	mov	r8, r0
 810ce4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810ce4e:	f7ff fe4d 	bl	810caec <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810ce52:	4603      	mov	r3, r0
 810ce54:	9300      	str	r3, [sp, #0]
 810ce56:	4643      	mov	r3, r8
 810ce58:	4632      	mov	r2, r6
 810ce5a:	4629      	mov	r1, r5
 810ce5c:	4620      	mov	r0, r4
 810ce5e:	f000 f921 	bl	810d0a4 <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IJS1_RKS3_RKS4_RKS5_ELb1EEEDpOT_>
	{ }
 810ce62:	68fb      	ldr	r3, [r7, #12]
 810ce64:	4618      	mov	r0, r3
 810ce66:	3710      	adds	r7, #16
 810ce68:	46bd      	mov	sp, r7
 810ce6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810ce6e <_ZSt4moveIRM5IOBusFvhPhmEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 810ce6e:	b480      	push	{r7}
 810ce70:	b083      	sub	sp, #12
 810ce72:	af00      	add	r7, sp, #0
 810ce74:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810ce76:	687b      	ldr	r3, [r7, #4]
 810ce78:	4618      	mov	r0, r3
 810ce7a:	370c      	adds	r7, #12
 810ce7c:	46bd      	mov	sp, r7
 810ce7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ce82:	4770      	bx	lr

0810ce84 <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810ce84:	b580      	push	{r7, lr}
 810ce86:	b082      	sub	sp, #8
 810ce88:	af00      	add	r7, sp, #0
 810ce8a:	6078      	str	r0, [r7, #4]
 810ce8c:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 810ce8e:	6838      	ldr	r0, [r7, #0]
 810ce90:	f7ff fe82 	bl	810cb98 <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810ce94:	687b      	ldr	r3, [r7, #4]
 810ce96:	4618      	mov	r0, r3
 810ce98:	3708      	adds	r7, #8
 810ce9a:	46bd      	mov	sp, r7
 810ce9c:	bd80      	pop	{r7, pc}

0810ce9e <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810ce9e:	b580      	push	{r7, lr}
 810cea0:	b082      	sub	sp, #8
 810cea2:	af00      	add	r7, sp, #0
 810cea4:	6078      	str	r0, [r7, #4]
 810cea6:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 810cea8:	6838      	ldr	r0, [r7, #0]
 810ceaa:	f7ff fec3 	bl	810cc34 <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810ceae:	687b      	ldr	r3, [r7, #4]
 810ceb0:	4618      	mov	r0, r3
 810ceb2:	3708      	adds	r7, #8
 810ceb4:	46bd      	mov	sp, r7
 810ceb6:	bd80      	pop	{r7, pc}

0810ceb8 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810ceb8:	b580      	push	{r7, lr}
 810ceba:	b082      	sub	sp, #8
 810cebc:	af00      	add	r7, sp, #0
 810cebe:	6078      	str	r0, [r7, #4]
 810cec0:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 810cec2:	6838      	ldr	r0, [r7, #0]
 810cec4:	f7ff ff10 	bl	810cce8 <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810cec8:	687b      	ldr	r3, [r7, #4]
 810ceca:	4618      	mov	r0, r3
 810cecc:	3708      	adds	r7, #8
 810cece:	46bd      	mov	sp, r7
 810ced0:	bd80      	pop	{r7, pc}

0810ced2 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_tailERS6_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 810ced2:	b480      	push	{r7}
 810ced4:	b083      	sub	sp, #12
 810ced6:	af00      	add	r7, sp, #0
 810ced8:	6078      	str	r0, [r7, #4]
 810ceda:	687b      	ldr	r3, [r7, #4]
 810cedc:	4618      	mov	r0, r3
 810cede:	370c      	adds	r7, #12
 810cee0:	46bd      	mov	sp, r7
 810cee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cee6:	4770      	bx	lr

0810cee8 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810cee8:	b580      	push	{r7, lr}
 810ceea:	b082      	sub	sp, #8
 810ceec:	af00      	add	r7, sp, #0
 810ceee:	6078      	str	r0, [r7, #4]
 810cef0:	687b      	ldr	r3, [r7, #4]
 810cef2:	4618      	mov	r0, r3
 810cef4:	f000 f805 	bl	810cf02 <_ZNSt10_Head_baseILj0EP5IOBusLb0EE7_M_headERS2_>
 810cef8:	4603      	mov	r3, r0
 810cefa:	4618      	mov	r0, r3
 810cefc:	3708      	adds	r7, #8
 810cefe:	46bd      	mov	sp, r7
 810cf00:	bd80      	pop	{r7, pc}

0810cf02 <_ZNSt10_Head_baseILj0EP5IOBusLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 810cf02:	b480      	push	{r7}
 810cf04:	b083      	sub	sp, #12
 810cf06:	af00      	add	r7, sp, #0
 810cf08:	6078      	str	r0, [r7, #4]
 810cf0a:	687b      	ldr	r3, [r7, #4]
 810cf0c:	4618      	mov	r0, r3
 810cf0e:	370c      	adds	r7, #12
 810cf10:	46bd      	mov	sp, r7
 810cf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cf16:	4770      	bx	lr

0810cf18 <_ZSt4moveIRSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES1_ILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 810cf18:	b480      	push	{r7}
 810cf1a:	b083      	sub	sp, #12
 810cf1c:	af00      	add	r7, sp, #0
 810cf1e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810cf20:	687b      	ldr	r3, [r7, #4]
 810cf22:	4618      	mov	r0, r3
 810cf24:	370c      	adds	r7, #12
 810cf26:	46bd      	mov	sp, r7
 810cf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cf2c:	4770      	bx	lr

0810cf2e <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>:
      _Tuple_impl(_Tuple_impl&& __in)
 810cf2e:	b590      	push	{r4, r7, lr}
 810cf30:	b083      	sub	sp, #12
 810cf32:	af00      	add	r7, sp, #0
 810cf34:	6078      	str	r0, [r7, #4]
 810cf36:	6039      	str	r1, [r7, #0]
      : _Inherited(std::move(_M_tail(__in))),
 810cf38:	6838      	ldr	r0, [r7, #0]
 810cf3a:	f7ff ffca 	bl	810ced2 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_tailERS6_>
 810cf3e:	4603      	mov	r3, r0
 810cf40:	4618      	mov	r0, r3
 810cf42:	f7ff ffe9 	bl	810cf18 <_ZSt4moveIRSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES1_ILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS8_>
 810cf46:	4603      	mov	r3, r0
	_Base(std::forward<_Head>(_M_head(__in))) { }
 810cf48:	4619      	mov	r1, r3
 810cf4a:	6878      	ldr	r0, [r7, #4]
 810cf4c:	f7ff fed7 	bl	810ccfe <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1EOS4_>
 810cf50:	687c      	ldr	r4, [r7, #4]
 810cf52:	6838      	ldr	r0, [r7, #0]
 810cf54:	f7ff ffc8 	bl	810cee8 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_headERS6_>
 810cf58:	4603      	mov	r3, r0
 810cf5a:	4618      	mov	r0, r3
 810cf5c:	f7ff fda5 	bl	810caaa <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810cf60:	4603      	mov	r3, r0
 810cf62:	4619      	mov	r1, r3
 810cf64:	4620      	mov	r0, r4
 810cf66:	f000 f8c3 	bl	810d0f0 <_ZNSt10_Head_baseILj0EP5IOBusLb0EEC1IS1_EEOT_>
 810cf6a:	687b      	ldr	r3, [r7, #4]
 810cf6c:	4618      	mov	r0, r3
 810cf6e:	370c      	adds	r7, #12
 810cf70:	46bd      	mov	sp, r7
 810cf72:	bd90      	pop	{r4, r7, pc}

0810cf74 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE21_M_not_empty_functionISC_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 810cf74:	b480      	push	{r7}
 810cf76:	b083      	sub	sp, #12
 810cf78:	af00      	add	r7, sp, #0
 810cf7a:	6078      	str	r0, [r7, #4]
	  { return true; }
 810cf7c:	2301      	movs	r3, #1
 810cf7e:	4618      	mov	r0, r3
 810cf80:	370c      	adds	r7, #12
 810cf82:	46bd      	mov	sp, r7
 810cf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cf88:	4770      	bx	lr

0810cf8a <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 810cf8a:	b590      	push	{r4, r7, lr}
 810cf8c:	b085      	sub	sp, #20
 810cf8e:	af00      	add	r7, sp, #0
 810cf90:	6078      	str	r0, [r7, #4]
 810cf92:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 810cf94:	6838      	ldr	r0, [r7, #0]
 810cf96:	f7ff ff05 	bl	810cda4 <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>
 810cf9a:	4603      	mov	r3, r0
 810cf9c:	4622      	mov	r2, r4
 810cf9e:	4619      	mov	r1, r3
 810cfa0:	6878      	ldr	r0, [r7, #4]
 810cfa2:	f000 f8b6 	bl	810d112 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_St17integral_constantIbLb0EE>
 810cfa6:	bf00      	nop
 810cfa8:	3714      	adds	r7, #20
 810cfaa:	46bd      	mov	sp, r7
 810cfac:	bd90      	pop	{r4, r7, pc}

0810cfae <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810cfae:	b480      	push	{r7}
 810cfb0:	b083      	sub	sp, #12
 810cfb2:	af00      	add	r7, sp, #0
 810cfb4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810cfb6:	687b      	ldr	r3, [r7, #4]
 810cfb8:	4618      	mov	r0, r3
 810cfba:	370c      	adds	r7, #12
 810cfbc:	46bd      	mov	sp, r7
 810cfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cfc2:	4770      	bx	lr

0810cfc4 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810cfc4:	b480      	push	{r7}
 810cfc6:	b083      	sub	sp, #12
 810cfc8:	af00      	add	r7, sp, #0
 810cfca:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810cfcc:	687b      	ldr	r3, [r7, #4]
 810cfce:	4618      	mov	r0, r3
 810cfd0:	370c      	adds	r7, #12
 810cfd2:	46bd      	mov	sp, r7
 810cfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cfd8:	4770      	bx	lr

0810cfda <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810cfda:	b480      	push	{r7}
 810cfdc:	b083      	sub	sp, #12
 810cfde:	af00      	add	r7, sp, #0
 810cfe0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810cfe2:	687b      	ldr	r3, [r7, #4]
 810cfe4:	4618      	mov	r0, r3
 810cfe6:	370c      	adds	r7, #12
 810cfe8:	46bd      	mov	sp, r7
 810cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cfee:	4770      	bx	lr

0810cff0 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE9_M_invokeERKSt9_Any_dataOhOS0_Om>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 810cff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 810cff2:	b085      	sub	sp, #20
 810cff4:	af00      	add	r7, sp, #0
 810cff6:	60f8      	str	r0, [r7, #12]
 810cff8:	60b9      	str	r1, [r7, #8]
 810cffa:	607a      	str	r2, [r7, #4]
 810cffc:	603b      	str	r3, [r7, #0]
	(*_Base::_M_get_pointer(__functor))(
 810cffe:	68f8      	ldr	r0, [r7, #12]
 810d000:	f000 f8a3 	bl	810d14a <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>
 810d004:	4604      	mov	r4, r0
 810d006:	68b8      	ldr	r0, [r7, #8]
 810d008:	f7ff ffd1 	bl	810cfae <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810d00c:	4605      	mov	r5, r0
 810d00e:	6878      	ldr	r0, [r7, #4]
 810d010:	f7ff ffd8 	bl	810cfc4 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810d014:	4606      	mov	r6, r0
 810d016:	6838      	ldr	r0, [r7, #0]
 810d018:	f7ff ffdf 	bl	810cfda <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810d01c:	4603      	mov	r3, r0
 810d01e:	4632      	mov	r2, r6
 810d020:	4629      	mov	r1, r5
 810d022:	4620      	mov	r0, r4
 810d024:	f000 f9a9 	bl	810d37a <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEclIJhS1_mEvEET0_DpOT_>
      }
 810d028:	bf00      	nop
 810d02a:	3714      	adds	r7, #20
 810d02c:	46bd      	mov	sp, r7
 810d02e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810d030 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 810d030:	b5b0      	push	{r4, r5, r7, lr}
 810d032:	b086      	sub	sp, #24
 810d034:	af00      	add	r7, sp, #0
 810d036:	60f8      	str	r0, [r7, #12]
 810d038:	60b9      	str	r1, [r7, #8]
 810d03a:	4613      	mov	r3, r2
 810d03c:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 810d03e:	79fb      	ldrb	r3, [r7, #7]
 810d040:	2b03      	cmp	r3, #3
 810d042:	d827      	bhi.n	810d094 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
 810d044:	a201      	add	r2, pc, #4	; (adr r2, 810d04c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1c>)
 810d046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d04a:	bf00      	nop
 810d04c:	0810d05d 	.word	0x0810d05d
 810d050:	0810d06b 	.word	0x0810d06b
 810d054:	0810d07f 	.word	0x0810d07f
 810d058:	0810d08b 	.word	0x0810d08b
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
 810d05c:	68f8      	ldr	r0, [r7, #12]
 810d05e:	f000 f9af 	bl	810d3c0 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 810d062:	4602      	mov	r2, r0
 810d064:	4b0e      	ldr	r3, [pc, #56]	; (810d0a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x70>)
 810d066:	6013      	str	r3, [r2, #0]
	      break;
 810d068:	e014      	b.n	810d094 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 810d06a:	68f8      	ldr	r0, [r7, #12]
 810d06c:	f000 f9b4 	bl	810d3d8 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 810d070:	4604      	mov	r4, r0
 810d072:	68b8      	ldr	r0, [r7, #8]
 810d074:	f000 f869 	bl	810d14a <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>
 810d078:	4603      	mov	r3, r0
 810d07a:	6023      	str	r3, [r4, #0]
	      break;
 810d07c:	e00a      	b.n	810d094 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
	      _M_clone(__dest, __source, _Local_storage());
 810d07e:	462a      	mov	r2, r5
 810d080:	68b9      	ldr	r1, [r7, #8]
 810d082:	68f8      	ldr	r0, [r7, #12]
 810d084:	f000 f9b4 	bl	810d3f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE8_M_cloneERSt9_Any_dataRKSE_St17integral_constantIbLb0EE>
	      break;
 810d088:	e004      	b.n	810d094 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
	      _M_destroy(__dest, _Local_storage());
 810d08a:	4621      	mov	r1, r4
 810d08c:	68f8      	ldr	r0, [r7, #12]
 810d08e:	f000 f9cd 	bl	810d42c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
 810d092:	bf00      	nop
	  return false;
 810d094:	2300      	movs	r3, #0
	}
 810d096:	4618      	mov	r0, r3
 810d098:	3718      	adds	r7, #24
 810d09a:	46bd      	mov	sp, r7
 810d09c:	bdb0      	pop	{r4, r5, r7, pc}
 810d09e:	bf00      	nop
 810d0a0:	08112b00 	.word	0x08112b00

0810d0a4 <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IJS1_RKS3_RKS4_RKS5_ELb1EEEDpOT_>:
        constexpr tuple(_UElements&&... __elements)
 810d0a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810d0a8:	b086      	sub	sp, #24
 810d0aa:	af02      	add	r7, sp, #8
 810d0ac:	60f8      	str	r0, [r7, #12]
 810d0ae:	60b9      	str	r1, [r7, #8]
 810d0b0:	607a      	str	r2, [r7, #4]
 810d0b2:	603b      	str	r3, [r7, #0]
        : _Inherited(std::forward<_UElements>(__elements)...) { }
 810d0b4:	68fc      	ldr	r4, [r7, #12]
 810d0b6:	68b8      	ldr	r0, [r7, #8]
 810d0b8:	f7ff fcf7 	bl	810caaa <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810d0bc:	4605      	mov	r5, r0
 810d0be:	6878      	ldr	r0, [r7, #4]
 810d0c0:	f7ff fcfe 	bl	810cac0 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810d0c4:	4606      	mov	r6, r0
 810d0c6:	6838      	ldr	r0, [r7, #0]
 810d0c8:	f7ff fd05 	bl	810cad6 <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810d0cc:	4680      	mov	r8, r0
 810d0ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810d0d0:	f7ff fd0c 	bl	810caec <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810d0d4:	4603      	mov	r3, r0
 810d0d6:	9300      	str	r3, [sp, #0]
 810d0d8:	4643      	mov	r3, r8
 810d0da:	4632      	mov	r2, r6
 810d0dc:	4629      	mov	r1, r5
 810d0de:	4620      	mov	r0, r4
 810d0e0:	f000 f9b6 	bl	810d450 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IS1_JRKS3_RKS4_RKS5_EvEEOT_DpOT0_>
 810d0e4:	68fb      	ldr	r3, [r7, #12]
 810d0e6:	4618      	mov	r0, r3
 810d0e8:	3710      	adds	r7, #16
 810d0ea:	46bd      	mov	sp, r7
 810d0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810d0f0 <_ZNSt10_Head_baseILj0EP5IOBusLb0EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810d0f0:	b580      	push	{r7, lr}
 810d0f2:	b082      	sub	sp, #8
 810d0f4:	af00      	add	r7, sp, #0
 810d0f6:	6078      	str	r0, [r7, #4]
 810d0f8:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 810d0fa:	6838      	ldr	r0, [r7, #0]
 810d0fc:	f7ff fcd5 	bl	810caaa <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810d100:	4603      	mov	r3, r0
 810d102:	681a      	ldr	r2, [r3, #0]
 810d104:	687b      	ldr	r3, [r7, #4]
 810d106:	601a      	str	r2, [r3, #0]
 810d108:	687b      	ldr	r3, [r7, #4]
 810d10a:	4618      	mov	r0, r3
 810d10c:	3708      	adds	r7, #8
 810d10e:	46bd      	mov	sp, r7
 810d110:	bd80      	pop	{r7, pc}

0810d112 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_St17integral_constantIbLb0EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
 810d112:	b5b0      	push	{r4, r5, r7, lr}
 810d114:	b084      	sub	sp, #16
 810d116:	af00      	add	r7, sp, #0
 810d118:	60f8      	str	r0, [r7, #12]
 810d11a:	60b9      	str	r1, [r7, #8]
 810d11c:	713a      	strb	r2, [r7, #4]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 810d11e:	68b8      	ldr	r0, [r7, #8]
 810d120:	f7ff fe40 	bl	810cda4 <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>
 810d124:	4605      	mov	r5, r0
 810d126:	200c      	movs	r0, #12
 810d128:	f7fe fa16 	bl	810b558 <_Znwj>
 810d12c:	4603      	mov	r3, r0
 810d12e:	461c      	mov	r4, r3
 810d130:	4629      	mov	r1, r5
 810d132:	4620      	mov	r0, r4
 810d134:	f7ff fe15 	bl	810cd62 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1EOSA_>
 810d138:	68f8      	ldr	r0, [r7, #12]
 810d13a:	f000 f94d 	bl	810d3d8 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 810d13e:	4603      	mov	r3, r0
 810d140:	601c      	str	r4, [r3, #0]
 810d142:	bf00      	nop
 810d144:	3710      	adds	r7, #16
 810d146:	46bd      	mov	sp, r7
 810d148:	bdb0      	pop	{r4, r5, r7, pc}

0810d14a <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 810d14a:	b580      	push	{r7, lr}
 810d14c:	b084      	sub	sp, #16
 810d14e:	af00      	add	r7, sp, #0
 810d150:	6078      	str	r0, [r7, #4]
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
 810d152:	6878      	ldr	r0, [r7, #4]
 810d154:	f000 f9a2 	bl	810d49c <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>
 810d158:	4603      	mov	r3, r0
	  const _Functor* __ptr =
 810d15a:	681b      	ldr	r3, [r3, #0]
 810d15c:	60fb      	str	r3, [r7, #12]
	  return const_cast<_Functor*>(__ptr);
 810d15e:	68fb      	ldr	r3, [r7, #12]
	}
 810d160:	4618      	mov	r0, r3
 810d162:	3710      	adds	r7, #16
 810d164:	46bd      	mov	sp, r7
 810d166:	bd80      	pop	{r7, pc}

0810d168 <_ZNSt5tupleIJOhOPhOmEEC1IJhS1_mELb1EEEDpOT_>:
        constexpr tuple(_UElements&&... __elements)
 810d168:	b5f0      	push	{r4, r5, r6, r7, lr}
 810d16a:	b085      	sub	sp, #20
 810d16c:	af00      	add	r7, sp, #0
 810d16e:	60f8      	str	r0, [r7, #12]
 810d170:	60b9      	str	r1, [r7, #8]
 810d172:	607a      	str	r2, [r7, #4]
 810d174:	603b      	str	r3, [r7, #0]
        : _Inherited(std::forward<_UElements>(__elements)...) { }
 810d176:	68fc      	ldr	r4, [r7, #12]
 810d178:	68b8      	ldr	r0, [r7, #8]
 810d17a:	f7ff ff18 	bl	810cfae <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810d17e:	4605      	mov	r5, r0
 810d180:	6878      	ldr	r0, [r7, #4]
 810d182:	f7ff ff1f 	bl	810cfc4 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810d186:	4606      	mov	r6, r0
 810d188:	6838      	ldr	r0, [r7, #0]
 810d18a:	f7ff ff26 	bl	810cfda <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810d18e:	4603      	mov	r3, r0
 810d190:	4632      	mov	r2, r6
 810d192:	4629      	mov	r1, r5
 810d194:	4620      	mov	r0, r4
 810d196:	f000 f805 	bl	810d1a4 <_ZNSt11_Tuple_implILj0EJOhOPhOmEEC1IhJS1_mEvEEOT_DpOT0_>
 810d19a:	68fb      	ldr	r3, [r7, #12]
 810d19c:	4618      	mov	r0, r3
 810d19e:	3714      	adds	r7, #20
 810d1a0:	46bd      	mov	sp, r7
 810d1a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810d1a4 <_ZNSt11_Tuple_implILj0EJOhOPhOmEEC1IhJS1_mEvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 810d1a4:	b5b0      	push	{r4, r5, r7, lr}
 810d1a6:	b084      	sub	sp, #16
 810d1a8:	af00      	add	r7, sp, #0
 810d1aa:	60f8      	str	r0, [r7, #12]
 810d1ac:	60b9      	str	r1, [r7, #8]
 810d1ae:	607a      	str	r2, [r7, #4]
 810d1b0:	603b      	str	r3, [r7, #0]
	  _Base(std::forward<_UHead>(__head)) { }
 810d1b2:	68fc      	ldr	r4, [r7, #12]
 810d1b4:	6878      	ldr	r0, [r7, #4]
 810d1b6:	f7ff ff05 	bl	810cfc4 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810d1ba:	4605      	mov	r5, r0
 810d1bc:	6838      	ldr	r0, [r7, #0]
 810d1be:	f7ff ff0c 	bl	810cfda <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810d1c2:	4603      	mov	r3, r0
 810d1c4:	461a      	mov	r2, r3
 810d1c6:	4629      	mov	r1, r5
 810d1c8:	4620      	mov	r0, r4
 810d1ca:	f000 f810 	bl	810d1ee <_ZNSt11_Tuple_implILj1EJOPhOmEEC1IS0_JmEvEEOT_DpOT0_>
 810d1ce:	68fb      	ldr	r3, [r7, #12]
 810d1d0:	f103 0408 	add.w	r4, r3, #8
 810d1d4:	68b8      	ldr	r0, [r7, #8]
 810d1d6:	f7ff feea 	bl	810cfae <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810d1da:	4603      	mov	r3, r0
 810d1dc:	4619      	mov	r1, r3
 810d1de:	4620      	mov	r0, r4
 810d1e0:	f000 f856 	bl	810d290 <_ZNSt10_Head_baseILj0EOhLb0EEC1IhEEOT_>
 810d1e4:	68fb      	ldr	r3, [r7, #12]
 810d1e6:	4618      	mov	r0, r3
 810d1e8:	3710      	adds	r7, #16
 810d1ea:	46bd      	mov	sp, r7
 810d1ec:	bdb0      	pop	{r4, r5, r7, pc}

0810d1ee <_ZNSt11_Tuple_implILj1EJOPhOmEEC1IS0_JmEvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 810d1ee:	b590      	push	{r4, r7, lr}
 810d1f0:	b085      	sub	sp, #20
 810d1f2:	af00      	add	r7, sp, #0
 810d1f4:	60f8      	str	r0, [r7, #12]
 810d1f6:	60b9      	str	r1, [r7, #8]
 810d1f8:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 810d1fa:	68fc      	ldr	r4, [r7, #12]
 810d1fc:	6878      	ldr	r0, [r7, #4]
 810d1fe:	f7ff feec 	bl	810cfda <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810d202:	4603      	mov	r3, r0
 810d204:	4619      	mov	r1, r3
 810d206:	4620      	mov	r0, r4
 810d208:	f000 f80f 	bl	810d22a <_ZNSt11_Tuple_implILj2EJOmEEC1ImEEOT_>
 810d20c:	68fb      	ldr	r3, [r7, #12]
 810d20e:	1d1c      	adds	r4, r3, #4
 810d210:	68b8      	ldr	r0, [r7, #8]
 810d212:	f7ff fed7 	bl	810cfc4 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810d216:	4603      	mov	r3, r0
 810d218:	4619      	mov	r1, r3
 810d21a:	4620      	mov	r0, r4
 810d21c:	f000 f828 	bl	810d270 <_ZNSt10_Head_baseILj1EOPhLb0EEC1IS0_EEOT_>
 810d220:	68fb      	ldr	r3, [r7, #12]
 810d222:	4618      	mov	r0, r3
 810d224:	3714      	adds	r7, #20
 810d226:	46bd      	mov	sp, r7
 810d228:	bd90      	pop	{r4, r7, pc}

0810d22a <_ZNSt11_Tuple_implILj2EJOmEEC1ImEEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 810d22a:	b590      	push	{r4, r7, lr}
 810d22c:	b083      	sub	sp, #12
 810d22e:	af00      	add	r7, sp, #0
 810d230:	6078      	str	r0, [r7, #4]
 810d232:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 810d234:	687c      	ldr	r4, [r7, #4]
 810d236:	6838      	ldr	r0, [r7, #0]
 810d238:	f7ff fecf 	bl	810cfda <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810d23c:	4603      	mov	r3, r0
 810d23e:	4619      	mov	r1, r3
 810d240:	4620      	mov	r0, r4
 810d242:	f000 f805 	bl	810d250 <_ZNSt10_Head_baseILj2EOmLb0EEC1ImEEOT_>
 810d246:	687b      	ldr	r3, [r7, #4]
 810d248:	4618      	mov	r0, r3
 810d24a:	370c      	adds	r7, #12
 810d24c:	46bd      	mov	sp, r7
 810d24e:	bd90      	pop	{r4, r7, pc}

0810d250 <_ZNSt10_Head_baseILj2EOmLb0EEC1ImEEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810d250:	b580      	push	{r7, lr}
 810d252:	b082      	sub	sp, #8
 810d254:	af00      	add	r7, sp, #0
 810d256:	6078      	str	r0, [r7, #4]
 810d258:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 810d25a:	6838      	ldr	r0, [r7, #0]
 810d25c:	f7ff febd 	bl	810cfda <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810d260:	4602      	mov	r2, r0
 810d262:	687b      	ldr	r3, [r7, #4]
 810d264:	601a      	str	r2, [r3, #0]
 810d266:	687b      	ldr	r3, [r7, #4]
 810d268:	4618      	mov	r0, r3
 810d26a:	3708      	adds	r7, #8
 810d26c:	46bd      	mov	sp, r7
 810d26e:	bd80      	pop	{r7, pc}

0810d270 <_ZNSt10_Head_baseILj1EOPhLb0EEC1IS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810d270:	b580      	push	{r7, lr}
 810d272:	b082      	sub	sp, #8
 810d274:	af00      	add	r7, sp, #0
 810d276:	6078      	str	r0, [r7, #4]
 810d278:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 810d27a:	6838      	ldr	r0, [r7, #0]
 810d27c:	f7ff fea2 	bl	810cfc4 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810d280:	4602      	mov	r2, r0
 810d282:	687b      	ldr	r3, [r7, #4]
 810d284:	601a      	str	r2, [r3, #0]
 810d286:	687b      	ldr	r3, [r7, #4]
 810d288:	4618      	mov	r0, r3
 810d28a:	3708      	adds	r7, #8
 810d28c:	46bd      	mov	sp, r7
 810d28e:	bd80      	pop	{r7, pc}

0810d290 <_ZNSt10_Head_baseILj0EOhLb0EEC1IhEEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810d290:	b580      	push	{r7, lr}
 810d292:	b082      	sub	sp, #8
 810d294:	af00      	add	r7, sp, #0
 810d296:	6078      	str	r0, [r7, #4]
 810d298:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 810d29a:	6838      	ldr	r0, [r7, #0]
 810d29c:	f7ff fe87 	bl	810cfae <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810d2a0:	4602      	mov	r2, r0
 810d2a2:	687b      	ldr	r3, [r7, #4]
 810d2a4:	601a      	str	r2, [r3, #0]
 810d2a6:	687b      	ldr	r3, [r7, #4]
 810d2a8:	4618      	mov	r0, r3
 810d2aa:	3708      	adds	r7, #8
 810d2ac:	46bd      	mov	sp, r7
 810d2ae:	bd80      	pop	{r7, pc}

0810d2b0 <_ZNSt11_Tuple_implILj2EJOmEE7_M_headERS1_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810d2b0:	b580      	push	{r7, lr}
 810d2b2:	b082      	sub	sp, #8
 810d2b4:	af00      	add	r7, sp, #0
 810d2b6:	6078      	str	r0, [r7, #4]
 810d2b8:	687b      	ldr	r3, [r7, #4]
 810d2ba:	4618      	mov	r0, r3
 810d2bc:	f000 f805 	bl	810d2ca <_ZNSt10_Head_baseILj2EOmLb0EE7_M_headERS1_>
 810d2c0:	4603      	mov	r3, r0
 810d2c2:	4618      	mov	r0, r3
 810d2c4:	3708      	adds	r7, #8
 810d2c6:	46bd      	mov	sp, r7
 810d2c8:	bd80      	pop	{r7, pc}

0810d2ca <_ZNSt10_Head_baseILj2EOmLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 810d2ca:	b480      	push	{r7}
 810d2cc:	b083      	sub	sp, #12
 810d2ce:	af00      	add	r7, sp, #0
 810d2d0:	6078      	str	r0, [r7, #4]
 810d2d2:	687b      	ldr	r3, [r7, #4]
 810d2d4:	681b      	ldr	r3, [r3, #0]
 810d2d6:	4618      	mov	r0, r3
 810d2d8:	370c      	adds	r7, #12
 810d2da:	46bd      	mov	sp, r7
 810d2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d2e0:	4770      	bx	lr

0810d2e2 <_ZSt7forwardIOmEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810d2e2:	b480      	push	{r7}
 810d2e4:	b083      	sub	sp, #12
 810d2e6:	af00      	add	r7, sp, #0
 810d2e8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810d2ea:	687b      	ldr	r3, [r7, #4]
 810d2ec:	4618      	mov	r0, r3
 810d2ee:	370c      	adds	r7, #12
 810d2f0:	46bd      	mov	sp, r7
 810d2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d2f6:	4770      	bx	lr

0810d2f8 <_ZNSt11_Tuple_implILj1EJOPhOmEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810d2f8:	b580      	push	{r7, lr}
 810d2fa:	b082      	sub	sp, #8
 810d2fc:	af00      	add	r7, sp, #0
 810d2fe:	6078      	str	r0, [r7, #4]
 810d300:	687b      	ldr	r3, [r7, #4]
 810d302:	3304      	adds	r3, #4
 810d304:	4618      	mov	r0, r3
 810d306:	f000 f805 	bl	810d314 <_ZNSt10_Head_baseILj1EOPhLb0EE7_M_headERS2_>
 810d30a:	4603      	mov	r3, r0
 810d30c:	4618      	mov	r0, r3
 810d30e:	3708      	adds	r7, #8
 810d310:	46bd      	mov	sp, r7
 810d312:	bd80      	pop	{r7, pc}

0810d314 <_ZNSt10_Head_baseILj1EOPhLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 810d314:	b480      	push	{r7}
 810d316:	b083      	sub	sp, #12
 810d318:	af00      	add	r7, sp, #0
 810d31a:	6078      	str	r0, [r7, #4]
 810d31c:	687b      	ldr	r3, [r7, #4]
 810d31e:	681b      	ldr	r3, [r3, #0]
 810d320:	4618      	mov	r0, r3
 810d322:	370c      	adds	r7, #12
 810d324:	46bd      	mov	sp, r7
 810d326:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d32a:	4770      	bx	lr

0810d32c <_ZSt7forwardIOPhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810d32c:	b480      	push	{r7}
 810d32e:	b083      	sub	sp, #12
 810d330:	af00      	add	r7, sp, #0
 810d332:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810d334:	687b      	ldr	r3, [r7, #4]
 810d336:	4618      	mov	r0, r3
 810d338:	370c      	adds	r7, #12
 810d33a:	46bd      	mov	sp, r7
 810d33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d340:	4770      	bx	lr

0810d342 <_ZSt16forward_as_tupleIJhPhmEESt5tupleIJDpOT_EES4_>:

  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
 810d342:	b5b0      	push	{r4, r5, r7, lr}
 810d344:	b084      	sub	sp, #16
 810d346:	af00      	add	r7, sp, #0
 810d348:	60f8      	str	r0, [r7, #12]
 810d34a:	60b9      	str	r1, [r7, #8]
 810d34c:	607a      	str	r2, [r7, #4]
 810d34e:	603b      	str	r3, [r7, #0]
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 810d350:	68b8      	ldr	r0, [r7, #8]
 810d352:	f7ff fe2c 	bl	810cfae <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810d356:	4604      	mov	r4, r0
 810d358:	6878      	ldr	r0, [r7, #4]
 810d35a:	f7ff fe33 	bl	810cfc4 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810d35e:	4605      	mov	r5, r0
 810d360:	6838      	ldr	r0, [r7, #0]
 810d362:	f7ff fe3a 	bl	810cfda <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810d366:	4603      	mov	r3, r0
 810d368:	462a      	mov	r2, r5
 810d36a:	4621      	mov	r1, r4
 810d36c:	68f8      	ldr	r0, [r7, #12]
 810d36e:	f7ff fefb 	bl	810d168 <_ZNSt5tupleIJOhOPhOmEEC1IJhS1_mELb1EEEDpOT_>
 810d372:	68f8      	ldr	r0, [r7, #12]
 810d374:	3710      	adds	r7, #16
 810d376:	46bd      	mov	sp, r7
 810d378:	bdb0      	pop	{r4, r5, r7, pc}

0810d37a <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEclIJhS1_mEvEET0_DpOT_>:
	operator()(_Args&&... __args)
 810d37a:	b5f0      	push	{r4, r5, r6, r7, lr}
 810d37c:	b089      	sub	sp, #36	; 0x24
 810d37e:	af00      	add	r7, sp, #0
 810d380:	60f8      	str	r0, [r7, #12]
 810d382:	60b9      	str	r1, [r7, #8]
 810d384:	607a      	str	r2, [r7, #4]
 810d386:	603b      	str	r3, [r7, #0]
	      _Bound_indexes());
 810d388:	68b8      	ldr	r0, [r7, #8]
 810d38a:	f7ff fe10 	bl	810cfae <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810d38e:	4604      	mov	r4, r0
 810d390:	6878      	ldr	r0, [r7, #4]
 810d392:	f7ff fe17 	bl	810cfc4 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810d396:	4605      	mov	r5, r0
 810d398:	6838      	ldr	r0, [r7, #0]
 810d39a:	f7ff fe1e 	bl	810cfda <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810d39e:	4603      	mov	r3, r0
 810d3a0:	f107 0010 	add.w	r0, r7, #16
 810d3a4:	462a      	mov	r2, r5
 810d3a6:	4621      	mov	r1, r4
 810d3a8:	f7ff ffcb 	bl	810d342 <_ZSt16forward_as_tupleIJhPhmEESt5tupleIJDpOT_EES4_>
 810d3ac:	f107 0310 	add.w	r3, r7, #16
 810d3b0:	4632      	mov	r2, r6
 810d3b2:	4619      	mov	r1, r3
 810d3b4:	68f8      	ldr	r0, [r7, #12]
 810d3b6:	f000 f8a2 	bl	810d4fe <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEE6__callIvJOhOS1_OmEJLj0ELj1ELj2ELj3EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>
	}
 810d3ba:	3724      	adds	r7, #36	; 0x24
 810d3bc:	46bd      	mov	sp, r7
 810d3be:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810d3c0 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
 810d3c0:	b580      	push	{r7, lr}
 810d3c2:	b082      	sub	sp, #8
 810d3c4:	af00      	add	r7, sp, #0
 810d3c6:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 810d3c8:	6878      	ldr	r0, [r7, #4]
 810d3ca:	f7ff fa18 	bl	810c7fe <_ZNSt9_Any_data9_M_accessEv>
 810d3ce:	4603      	mov	r3, r0
 810d3d0:	4618      	mov	r0, r3
 810d3d2:	3708      	adds	r7, #8
 810d3d4:	46bd      	mov	sp, r7
 810d3d6:	bd80      	pop	{r7, pc}

0810d3d8 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>:
      _M_access()
 810d3d8:	b580      	push	{r7, lr}
 810d3da:	b082      	sub	sp, #8
 810d3dc:	af00      	add	r7, sp, #0
 810d3de:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 810d3e0:	6878      	ldr	r0, [r7, #4]
 810d3e2:	f7ff fa0c 	bl	810c7fe <_ZNSt9_Any_data9_M_accessEv>
 810d3e6:	4603      	mov	r3, r0
 810d3e8:	4618      	mov	r0, r3
 810d3ea:	3708      	adds	r7, #8
 810d3ec:	46bd      	mov	sp, r7
 810d3ee:	bd80      	pop	{r7, pc}

0810d3f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE8_M_cloneERSt9_Any_dataRKSE_St17integral_constantIbLb0EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
 810d3f0:	b5b0      	push	{r4, r5, r7, lr}
 810d3f2:	b084      	sub	sp, #16
 810d3f4:	af00      	add	r7, sp, #0
 810d3f6:	60f8      	str	r0, [r7, #12]
 810d3f8:	60b9      	str	r1, [r7, #8]
 810d3fa:	713a      	strb	r2, [r7, #4]
	    new _Functor(*__source._M_access<_Functor*>());
 810d3fc:	68b8      	ldr	r0, [r7, #8]
 810d3fe:	f000 f84d 	bl	810d49c <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>
 810d402:	4603      	mov	r3, r0
	  __dest._M_access<_Functor*>() =
 810d404:	681d      	ldr	r5, [r3, #0]
	    new _Functor(*__source._M_access<_Functor*>());
 810d406:	200c      	movs	r0, #12
 810d408:	f7fe f8a6 	bl	810b558 <_Znwj>
 810d40c:	4603      	mov	r3, r0
 810d40e:	461c      	mov	r4, r3
	  __dest._M_access<_Functor*>() =
 810d410:	4623      	mov	r3, r4
 810d412:	462a      	mov	r2, r5
 810d414:	ca07      	ldmia	r2, {r0, r1, r2}
 810d416:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 810d41a:	68f8      	ldr	r0, [r7, #12]
 810d41c:	f7ff ffdc 	bl	810d3d8 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 810d420:	4603      	mov	r3, r0
 810d422:	601c      	str	r4, [r3, #0]
	}
 810d424:	bf00      	nop
 810d426:	3710      	adds	r7, #16
 810d428:	46bd      	mov	sp, r7
 810d42a:	bdb0      	pop	{r4, r5, r7, pc}

0810d42c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
 810d42c:	b580      	push	{r7, lr}
 810d42e:	b082      	sub	sp, #8
 810d430:	af00      	add	r7, sp, #0
 810d432:	6078      	str	r0, [r7, #4]
 810d434:	7039      	strb	r1, [r7, #0]
	  delete __victim._M_access<_Functor*>();
 810d436:	6878      	ldr	r0, [r7, #4]
 810d438:	f7ff ffce 	bl	810d3d8 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 810d43c:	4603      	mov	r3, r0
 810d43e:	681b      	ldr	r3, [r3, #0]
 810d440:	210c      	movs	r1, #12
 810d442:	4618      	mov	r0, r3
 810d444:	f001 fd68 	bl	810ef18 <_ZdlPvj>
	}
 810d448:	bf00      	nop
 810d44a:	3708      	adds	r7, #8
 810d44c:	46bd      	mov	sp, r7
 810d44e:	bd80      	pop	{r7, pc}

0810d450 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IS1_JRKS3_RKS4_RKS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 810d450:	b5b0      	push	{r4, r5, r7, lr}
 810d452:	b084      	sub	sp, #16
 810d454:	af00      	add	r7, sp, #0
 810d456:	60f8      	str	r0, [r7, #12]
 810d458:	60b9      	str	r1, [r7, #8]
 810d45a:	607a      	str	r2, [r7, #4]
 810d45c:	603b      	str	r3, [r7, #0]
	  _Base(std::forward<_UHead>(__head)) { }
 810d45e:	6878      	ldr	r0, [r7, #4]
 810d460:	f7ff fb2e 	bl	810cac0 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810d464:	4604      	mov	r4, r0
 810d466:	6838      	ldr	r0, [r7, #0]
 810d468:	f7ff fb35 	bl	810cad6 <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810d46c:	4605      	mov	r5, r0
 810d46e:	6a38      	ldr	r0, [r7, #32]
 810d470:	f7ff fb3c 	bl	810caec <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810d474:	4603      	mov	r3, r0
 810d476:	462a      	mov	r2, r5
 810d478:	4621      	mov	r1, r4
 810d47a:	68f8      	ldr	r0, [r7, #12]
 810d47c:	f000 f887 	bl	810d58e <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1ERKS1_RKS2_RKS3_>
 810d480:	68fc      	ldr	r4, [r7, #12]
 810d482:	68b8      	ldr	r0, [r7, #8]
 810d484:	f7ff fb11 	bl	810caaa <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810d488:	4603      	mov	r3, r0
 810d48a:	4619      	mov	r1, r3
 810d48c:	4620      	mov	r0, r4
 810d48e:	f7ff fe2f 	bl	810d0f0 <_ZNSt10_Head_baseILj0EP5IOBusLb0EEC1IS1_EEOT_>
 810d492:	68fb      	ldr	r3, [r7, #12]
 810d494:	4618      	mov	r0, r3
 810d496:	3710      	adds	r7, #16
 810d498:	46bd      	mov	sp, r7
 810d49a:	bdb0      	pop	{r4, r5, r7, pc}

0810d49c <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>:
      _M_access() const
 810d49c:	b580      	push	{r7, lr}
 810d49e:	b082      	sub	sp, #8
 810d4a0:	af00      	add	r7, sp, #0
 810d4a2:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 810d4a4:	6878      	ldr	r0, [r7, #4]
 810d4a6:	f7ff f9b5 	bl	810c814 <_ZNKSt9_Any_data9_M_accessEv>
 810d4aa:	4603      	mov	r3, r0
 810d4ac:	4618      	mov	r0, r3
 810d4ae:	3708      	adds	r7, #8
 810d4b0:	46bd      	mov	sp, r7
 810d4b2:	bd80      	pop	{r7, pc}

0810d4b4 <_ZNSt11_Tuple_implILj0EJOhOPhOmEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810d4b4:	b580      	push	{r7, lr}
 810d4b6:	b082      	sub	sp, #8
 810d4b8:	af00      	add	r7, sp, #0
 810d4ba:	6078      	str	r0, [r7, #4]
 810d4bc:	687b      	ldr	r3, [r7, #4]
 810d4be:	3308      	adds	r3, #8
 810d4c0:	4618      	mov	r0, r3
 810d4c2:	f000 f805 	bl	810d4d0 <_ZNSt10_Head_baseILj0EOhLb0EE7_M_headERS1_>
 810d4c6:	4603      	mov	r3, r0
 810d4c8:	4618      	mov	r0, r3
 810d4ca:	3708      	adds	r7, #8
 810d4cc:	46bd      	mov	sp, r7
 810d4ce:	bd80      	pop	{r7, pc}

0810d4d0 <_ZNSt10_Head_baseILj0EOhLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 810d4d0:	b480      	push	{r7}
 810d4d2:	b083      	sub	sp, #12
 810d4d4:	af00      	add	r7, sp, #0
 810d4d6:	6078      	str	r0, [r7, #4]
 810d4d8:	687b      	ldr	r3, [r7, #4]
 810d4da:	681b      	ldr	r3, [r3, #0]
 810d4dc:	4618      	mov	r0, r3
 810d4de:	370c      	adds	r7, #12
 810d4e0:	46bd      	mov	sp, r7
 810d4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d4e6:	4770      	bx	lr

0810d4e8 <_ZSt7forwardIOhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810d4e8:	b480      	push	{r7}
 810d4ea:	b083      	sub	sp, #12
 810d4ec:	af00      	add	r7, sp, #0
 810d4ee:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810d4f0:	687b      	ldr	r3, [r7, #4]
 810d4f2:	4618      	mov	r0, r3
 810d4f4:	370c      	adds	r7, #12
 810d4f6:	46bd      	mov	sp, r7
 810d4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d4fc:	4770      	bx	lr

0810d4fe <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEE6__callIvJOhOS1_OmEJLj0ELj1ELj2ELj3EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>:
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 810d4fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810d502:	b08a      	sub	sp, #40	; 0x28
 810d504:	af02      	add	r7, sp, #8
 810d506:	60f8      	str	r0, [r7, #12]
 810d508:	60b9      	str	r1, [r7, #8]
 810d50a:	713a      	strb	r2, [r7, #4]
	  return std::__invoke(_M_f,
 810d50c:	68fc      	ldr	r4, [r7, #12]
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 810d50e:	68fb      	ldr	r3, [r7, #12]
 810d510:	3308      	adds	r3, #8
 810d512:	4618      	mov	r0, r3
 810d514:	f000 f850 	bl	810d5b8 <_ZSt3getILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 810d518:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 810d51a:	f107 0310 	add.w	r3, r7, #16
 810d51e:	68ba      	ldr	r2, [r7, #8]
 810d520:	4618      	mov	r0, r3
 810d522:	f000 f856 	bl	810d5d2 <_ZNVKSt3_MuIP5IOBusLb0ELb0EEclIRS1_St5tupleIJOhOPhOmEEEEOT_SC_RT0_>
 810d526:	4605      	mov	r5, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 810d528:	68fb      	ldr	r3, [r7, #12]
 810d52a:	3308      	adds	r3, #8
 810d52c:	4618      	mov	r0, r3
 810d52e:	f000 f85e 	bl	810d5ee <_ZSt3getILj1EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 810d532:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 810d534:	f107 0314 	add.w	r3, r7, #20
 810d538:	68ba      	ldr	r2, [r7, #8]
 810d53a:	4618      	mov	r0, r3
 810d53c:	f000 f86e 	bl	810d61c <_ZNVKSt3_MuISt12_PlaceholderILi1EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj0EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj0ESC_EE4type4typeERVKS1_RSC_>
 810d540:	4606      	mov	r6, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 810d542:	68fb      	ldr	r3, [r7, #12]
 810d544:	3308      	adds	r3, #8
 810d546:	4618      	mov	r0, r3
 810d548:	f000 f87a 	bl	810d640 <_ZSt3getILj2EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 810d54c:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 810d54e:	f107 0318 	add.w	r3, r7, #24
 810d552:	68ba      	ldr	r2, [r7, #8]
 810d554:	4618      	mov	r0, r3
 810d556:	f000 f87f 	bl	810d658 <_ZNVKSt3_MuISt12_PlaceholderILi2EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj1EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj1ESC_EE4type4typeERVKS1_RSC_>
 810d55a:	4680      	mov	r8, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 810d55c:	68fb      	ldr	r3, [r7, #12]
 810d55e:	3308      	adds	r3, #8
 810d560:	4618      	mov	r0, r3
 810d562:	f000 f88b 	bl	810d67c <_ZSt3getILj3EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 810d566:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 810d568:	f107 031c 	add.w	r3, r7, #28
 810d56c:	68ba      	ldr	r2, [r7, #8]
 810d56e:	4618      	mov	r0, r3
 810d570:	f000 f890 	bl	810d694 <_ZNVKSt3_MuISt12_PlaceholderILi3EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj2EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj2ESC_EE4type4typeERVKS1_RSC_>
 810d574:	4603      	mov	r3, r0
 810d576:	9300      	str	r3, [sp, #0]
 810d578:	4643      	mov	r3, r8
 810d57a:	4632      	mov	r2, r6
 810d57c:	4629      	mov	r1, r5
 810d57e:	4620      	mov	r0, r4
 810d580:	f000 f8b0 	bl	810d6e4 <_ZSt8__invokeIRM5IOBusFvhPhmEJRPS0_hS1_mEENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>
	      );
 810d584:	bf00      	nop
	}
 810d586:	3720      	adds	r7, #32
 810d588:	46bd      	mov	sp, r7
 810d58a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810d58e <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1ERKS1_RKS2_RKS3_>:
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
 810d58e:	b580      	push	{r7, lr}
 810d590:	b084      	sub	sp, #16
 810d592:	af00      	add	r7, sp, #0
 810d594:	60f8      	str	r0, [r7, #12]
 810d596:	60b9      	str	r1, [r7, #8]
 810d598:	607a      	str	r2, [r7, #4]
 810d59a:	603b      	str	r3, [r7, #0]
      : _Inherited(__tail...), _Base(__head) { }
 810d59c:	683a      	ldr	r2, [r7, #0]
 810d59e:	6879      	ldr	r1, [r7, #4]
 810d5a0:	68f8      	ldr	r0, [r7, #12]
 810d5a2:	f000 f8c8 	bl	810d736 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1ERKS1_RKS2_>
 810d5a6:	68b9      	ldr	r1, [r7, #8]
 810d5a8:	68f8      	ldr	r0, [r7, #12]
 810d5aa:	f000 f8d7 	bl	810d75c <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1ERKS1_>
 810d5ae:	68fb      	ldr	r3, [r7, #12]
 810d5b0:	4618      	mov	r0, r3
 810d5b2:	3710      	adds	r7, #16
 810d5b4:	46bd      	mov	sp, r7
 810d5b6:	bd80      	pop	{r7, pc}

0810d5b8 <_ZSt3getILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 810d5b8:	b580      	push	{r7, lr}
 810d5ba:	b082      	sub	sp, #8
 810d5bc:	af00      	add	r7, sp, #0
 810d5be:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810d5c0:	687b      	ldr	r3, [r7, #4]
 810d5c2:	4618      	mov	r0, r3
 810d5c4:	f000 f8d6 	bl	810d774 <_ZSt12__get_helperILj0EP5IOBusJSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 810d5c8:	4603      	mov	r3, r0
 810d5ca:	4618      	mov	r0, r3
 810d5cc:	3708      	adds	r7, #8
 810d5ce:	46bd      	mov	sp, r7
 810d5d0:	bd80      	pop	{r7, pc}

0810d5d2 <_ZNVKSt3_MuIP5IOBusLb0ELb0EEclIRS1_St5tupleIJOhOPhOmEEEEOT_SC_RT0_>:
	operator()(_CVArg&& __arg, _Tuple&) const volatile
 810d5d2:	b580      	push	{r7, lr}
 810d5d4:	b084      	sub	sp, #16
 810d5d6:	af00      	add	r7, sp, #0
 810d5d8:	60f8      	str	r0, [r7, #12]
 810d5da:	60b9      	str	r1, [r7, #8]
 810d5dc:	607a      	str	r2, [r7, #4]
	{ return std::forward<_CVArg>(__arg); }
 810d5de:	68b8      	ldr	r0, [r7, #8]
 810d5e0:	f000 f875 	bl	810d6ce <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
 810d5e4:	4603      	mov	r3, r0
 810d5e6:	4618      	mov	r0, r3
 810d5e8:	3710      	adds	r7, #16
 810d5ea:	46bd      	mov	sp, r7
 810d5ec:	bd80      	pop	{r7, pc}

0810d5ee <_ZSt3getILj1EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 810d5ee:	b580      	push	{r7, lr}
 810d5f0:	b082      	sub	sp, #8
 810d5f2:	af00      	add	r7, sp, #0
 810d5f4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810d5f6:	6878      	ldr	r0, [r7, #4]
 810d5f8:	f000 f8c8 	bl	810d78c <_ZSt12__get_helperILj1ESt12_PlaceholderILi1EEJS0_ILi2EES0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 810d5fc:	4603      	mov	r3, r0
 810d5fe:	4618      	mov	r0, r3
 810d600:	3708      	adds	r7, #8
 810d602:	46bd      	mov	sp, r7
 810d604:	bd80      	pop	{r7, pc}

0810d606 <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 810d606:	b480      	push	{r7}
 810d608:	b083      	sub	sp, #12
 810d60a:	af00      	add	r7, sp, #0
 810d60c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810d60e:	687b      	ldr	r3, [r7, #4]
 810d610:	4618      	mov	r0, r3
 810d612:	370c      	adds	r7, #12
 810d614:	46bd      	mov	sp, r7
 810d616:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d61a:	4770      	bx	lr

0810d61c <_ZNVKSt3_MuISt12_PlaceholderILi1EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj0EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj0ESC_EE4type4typeERVKS1_RSC_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 810d61c:	b580      	push	{r7, lr}
 810d61e:	b084      	sub	sp, #16
 810d620:	af00      	add	r7, sp, #0
 810d622:	60f8      	str	r0, [r7, #12]
 810d624:	60b9      	str	r1, [r7, #8]
 810d626:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 810d628:	6878      	ldr	r0, [r7, #4]
 810d62a:	f7ff ffec 	bl	810d606 <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
 810d62e:	4603      	mov	r3, r0
 810d630:	4618      	mov	r0, r3
 810d632:	f000 f8d0 	bl	810d7d6 <_ZSt3getILj0EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
 810d636:	4603      	mov	r3, r0
	}
 810d638:	4618      	mov	r0, r3
 810d63a:	3710      	adds	r7, #16
 810d63c:	46bd      	mov	sp, r7
 810d63e:	bd80      	pop	{r7, pc}

0810d640 <_ZSt3getILj2EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 810d640:	b580      	push	{r7, lr}
 810d642:	b082      	sub	sp, #8
 810d644:	af00      	add	r7, sp, #0
 810d646:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810d648:	6878      	ldr	r0, [r7, #4]
 810d64a:	f000 f8d4 	bl	810d7f6 <_ZSt12__get_helperILj2ESt12_PlaceholderILi2EEJS0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 810d64e:	4603      	mov	r3, r0
 810d650:	4618      	mov	r0, r3
 810d652:	3708      	adds	r7, #8
 810d654:	46bd      	mov	sp, r7
 810d656:	bd80      	pop	{r7, pc}

0810d658 <_ZNVKSt3_MuISt12_PlaceholderILi2EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj1EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj1ESC_EE4type4typeERVKS1_RSC_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 810d658:	b580      	push	{r7, lr}
 810d65a:	b084      	sub	sp, #16
 810d65c:	af00      	add	r7, sp, #0
 810d65e:	60f8      	str	r0, [r7, #12]
 810d660:	60b9      	str	r1, [r7, #8]
 810d662:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 810d664:	6878      	ldr	r0, [r7, #4]
 810d666:	f7ff ffce 	bl	810d606 <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
 810d66a:	4603      	mov	r3, r0
 810d66c:	4618      	mov	r0, r3
 810d66e:	f000 f8e7 	bl	810d840 <_ZSt3getILj1EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
 810d672:	4603      	mov	r3, r0
	}
 810d674:	4618      	mov	r0, r3
 810d676:	3710      	adds	r7, #16
 810d678:	46bd      	mov	sp, r7
 810d67a:	bd80      	pop	{r7, pc}

0810d67c <_ZSt3getILj3EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 810d67c:	b580      	push	{r7, lr}
 810d67e:	b082      	sub	sp, #8
 810d680:	af00      	add	r7, sp, #0
 810d682:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810d684:	6878      	ldr	r0, [r7, #4]
 810d686:	f000 f8eb 	bl	810d860 <_ZSt12__get_helperILj3ESt12_PlaceholderILi3EEJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 810d68a:	4603      	mov	r3, r0
 810d68c:	4618      	mov	r0, r3
 810d68e:	3708      	adds	r7, #8
 810d690:	46bd      	mov	sp, r7
 810d692:	bd80      	pop	{r7, pc}

0810d694 <_ZNVKSt3_MuISt12_PlaceholderILi3EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj2EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj2ESC_EE4type4typeERVKS1_RSC_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 810d694:	b580      	push	{r7, lr}
 810d696:	b084      	sub	sp, #16
 810d698:	af00      	add	r7, sp, #0
 810d69a:	60f8      	str	r0, [r7, #12]
 810d69c:	60b9      	str	r1, [r7, #8]
 810d69e:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 810d6a0:	6878      	ldr	r0, [r7, #4]
 810d6a2:	f7ff ffb0 	bl	810d606 <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
 810d6a6:	4603      	mov	r3, r0
 810d6a8:	4618      	mov	r0, r3
 810d6aa:	f000 f8fe 	bl	810d8aa <_ZSt3getILj2EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
 810d6ae:	4603      	mov	r3, r0
	}
 810d6b0:	4618      	mov	r0, r3
 810d6b2:	3710      	adds	r7, #16
 810d6b4:	46bd      	mov	sp, r7
 810d6b6:	bd80      	pop	{r7, pc}

0810d6b8 <_ZSt7forwardIRM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810d6b8:	b480      	push	{r7}
 810d6ba:	b083      	sub	sp, #12
 810d6bc:	af00      	add	r7, sp, #0
 810d6be:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810d6c0:	687b      	ldr	r3, [r7, #4]
 810d6c2:	4618      	mov	r0, r3
 810d6c4:	370c      	adds	r7, #12
 810d6c6:	46bd      	mov	sp, r7
 810d6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d6cc:	4770      	bx	lr

0810d6ce <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810d6ce:	b480      	push	{r7}
 810d6d0:	b083      	sub	sp, #12
 810d6d2:	af00      	add	r7, sp, #0
 810d6d4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810d6d6:	687b      	ldr	r3, [r7, #4]
 810d6d8:	4618      	mov	r0, r3
 810d6da:	370c      	adds	r7, #12
 810d6dc:	46bd      	mov	sp, r7
 810d6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d6e2:	4770      	bx	lr

0810d6e4 <_ZSt8__invokeIRM5IOBusFvhPhmEJRPS0_hS1_mEENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>:
    { return (*std::forward<_Tp>(__t)).*__f; }

  /// Invoke a callable object.
  template<typename _Callable, typename... _Args>
    constexpr typename __invoke_result<_Callable, _Args...>::type
    __invoke(_Callable&& __fn, _Args&&... __args)
 810d6e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810d6e8:	b089      	sub	sp, #36	; 0x24
 810d6ea:	af02      	add	r7, sp, #8
 810d6ec:	60f8      	str	r0, [r7, #12]
 810d6ee:	60b9      	str	r1, [r7, #8]
 810d6f0:	607a      	str	r2, [r7, #4]
 810d6f2:	603b      	str	r3, [r7, #0]
    noexcept(__is_nothrow_invocable<_Callable, _Args...>::value)
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 810d6f4:	68f8      	ldr	r0, [r7, #12]
 810d6f6:	f7ff ffdf 	bl	810d6b8 <_ZSt7forwardIRM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS5_E4typeE>
 810d6fa:	4605      	mov	r5, r0
 810d6fc:	68b8      	ldr	r0, [r7, #8]
 810d6fe:	f7ff ffe6 	bl	810d6ce <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
 810d702:	4606      	mov	r6, r0
 810d704:	6878      	ldr	r0, [r7, #4]
 810d706:	f7ff fc52 	bl	810cfae <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810d70a:	4680      	mov	r8, r0
 810d70c:	6838      	ldr	r0, [r7, #0]
 810d70e:	f7ff fc59 	bl	810cfc4 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810d712:	4604      	mov	r4, r0
 810d714:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 810d716:	f7ff fc60 	bl	810cfda <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810d71a:	4603      	mov	r3, r0
 810d71c:	9301      	str	r3, [sp, #4]
 810d71e:	9400      	str	r4, [sp, #0]
 810d720:	4643      	mov	r3, r8
 810d722:	4632      	mov	r2, r6
 810d724:	4629      	mov	r1, r5
 810d726:	4648      	mov	r0, r9
 810d728:	f000 f8cf 	bl	810d8ca <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>
					std::forward<_Args>(__args)...);
 810d72c:	bf00      	nop
    }
 810d72e:	371c      	adds	r7, #28
 810d730:	46bd      	mov	sp, r7
 810d732:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0810d736 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1ERKS1_RKS2_>:
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
 810d736:	b580      	push	{r7, lr}
 810d738:	b084      	sub	sp, #16
 810d73a:	af00      	add	r7, sp, #0
 810d73c:	60f8      	str	r0, [r7, #12]
 810d73e:	60b9      	str	r1, [r7, #8]
 810d740:	607a      	str	r2, [r7, #4]
      : _Inherited(__tail...), _Base(__head) { }
 810d742:	6879      	ldr	r1, [r7, #4]
 810d744:	68f8      	ldr	r0, [r7, #12]
 810d746:	f000 f8fa 	bl	810d93e <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1ERKS1_>
 810d74a:	68b9      	ldr	r1, [r7, #8]
 810d74c:	68f8      	ldr	r0, [r7, #12]
 810d74e:	f000 f904 	bl	810d95a <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1ERKS1_>
 810d752:	68fb      	ldr	r3, [r7, #12]
 810d754:	4618      	mov	r0, r3
 810d756:	3710      	adds	r7, #16
 810d758:	46bd      	mov	sp, r7
 810d75a:	bd80      	pop	{r7, pc}

0810d75c <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1ERKS1_>:
      constexpr _Head_base(const _Head& __h)
 810d75c:	b480      	push	{r7}
 810d75e:	b083      	sub	sp, #12
 810d760:	af00      	add	r7, sp, #0
 810d762:	6078      	str	r0, [r7, #4]
 810d764:	6039      	str	r1, [r7, #0]
      : _Head(__h) { }
 810d766:	687b      	ldr	r3, [r7, #4]
 810d768:	4618      	mov	r0, r3
 810d76a:	370c      	adds	r7, #12
 810d76c:	46bd      	mov	sp, r7
 810d76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d772:	4770      	bx	lr

0810d774 <_ZSt12__get_helperILj0EP5IOBusJSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810d774:	b580      	push	{r7, lr}
 810d776:	b082      	sub	sp, #8
 810d778:	af00      	add	r7, sp, #0
 810d77a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810d77c:	6878      	ldr	r0, [r7, #4]
 810d77e:	f7ff fbb3 	bl	810cee8 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_headERS6_>
 810d782:	4603      	mov	r3, r0
 810d784:	4618      	mov	r0, r3
 810d786:	3708      	adds	r7, #8
 810d788:	46bd      	mov	sp, r7
 810d78a:	bd80      	pop	{r7, pc}

0810d78c <_ZSt12__get_helperILj1ESt12_PlaceholderILi1EEJS0_ILi2EES0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810d78c:	b580      	push	{r7, lr}
 810d78e:	b082      	sub	sp, #8
 810d790:	af00      	add	r7, sp, #0
 810d792:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810d794:	6878      	ldr	r0, [r7, #4]
 810d796:	f7ff fa85 	bl	810cca4 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_headERS4_>
 810d79a:	4603      	mov	r3, r0
 810d79c:	4618      	mov	r0, r3
 810d79e:	3708      	adds	r7, #8
 810d7a0:	46bd      	mov	sp, r7
 810d7a2:	bd80      	pop	{r7, pc}

0810d7a4 <_ZSt3getILj0EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 810d7a4:	b580      	push	{r7, lr}
 810d7a6:	b082      	sub	sp, #8
 810d7a8:	af00      	add	r7, sp, #0
 810d7aa:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810d7ac:	687b      	ldr	r3, [r7, #4]
 810d7ae:	4618      	mov	r0, r3
 810d7b0:	f000 f805 	bl	810d7be <_ZSt12__get_helperILj0EOhJOPhOmEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 810d7b4:	4603      	mov	r3, r0
 810d7b6:	4618      	mov	r0, r3
 810d7b8:	3708      	adds	r7, #8
 810d7ba:	46bd      	mov	sp, r7
 810d7bc:	bd80      	pop	{r7, pc}

0810d7be <_ZSt12__get_helperILj0EOhJOPhOmEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810d7be:	b580      	push	{r7, lr}
 810d7c0:	b082      	sub	sp, #8
 810d7c2:	af00      	add	r7, sp, #0
 810d7c4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810d7c6:	6878      	ldr	r0, [r7, #4]
 810d7c8:	f7ff fe74 	bl	810d4b4 <_ZNSt11_Tuple_implILj0EJOhOPhOmEE7_M_headERS4_>
 810d7cc:	4603      	mov	r3, r0
 810d7ce:	4618      	mov	r0, r3
 810d7d0:	3708      	adds	r7, #8
 810d7d2:	46bd      	mov	sp, r7
 810d7d4:	bd80      	pop	{r7, pc}

0810d7d6 <_ZSt3getILj0EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
    get(tuple<_Elements...>&& __t) noexcept
 810d7d6:	b580      	push	{r7, lr}
 810d7d8:	b082      	sub	sp, #8
 810d7da:	af00      	add	r7, sp, #0
 810d7dc:	6078      	str	r0, [r7, #4]
      return std::forward<__element_type&&>(std::get<__i>(__t));
 810d7de:	6878      	ldr	r0, [r7, #4]
 810d7e0:	f7ff ffe0 	bl	810d7a4 <_ZSt3getILj0EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 810d7e4:	4603      	mov	r3, r0
 810d7e6:	4618      	mov	r0, r3
 810d7e8:	f7ff fe7e 	bl	810d4e8 <_ZSt7forwardIOhEOT_RNSt16remove_referenceIS1_E4typeE>
 810d7ec:	4603      	mov	r3, r0
    }
 810d7ee:	4618      	mov	r0, r3
 810d7f0:	3708      	adds	r7, #8
 810d7f2:	46bd      	mov	sp, r7
 810d7f4:	bd80      	pop	{r7, pc}

0810d7f6 <_ZSt12__get_helperILj2ESt12_PlaceholderILi2EEJS0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810d7f6:	b580      	push	{r7, lr}
 810d7f8:	b082      	sub	sp, #8
 810d7fa:	af00      	add	r7, sp, #0
 810d7fc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810d7fe:	6878      	ldr	r0, [r7, #4]
 810d800:	f7ff f9f6 	bl	810cbf0 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_headERS3_>
 810d804:	4603      	mov	r3, r0
 810d806:	4618      	mov	r0, r3
 810d808:	3708      	adds	r7, #8
 810d80a:	46bd      	mov	sp, r7
 810d80c:	bd80      	pop	{r7, pc}

0810d80e <_ZSt3getILj1EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 810d80e:	b580      	push	{r7, lr}
 810d810:	b082      	sub	sp, #8
 810d812:	af00      	add	r7, sp, #0
 810d814:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810d816:	687b      	ldr	r3, [r7, #4]
 810d818:	4618      	mov	r0, r3
 810d81a:	f000 f805 	bl	810d828 <_ZSt12__get_helperILj1EOPhJOmEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 810d81e:	4603      	mov	r3, r0
 810d820:	4618      	mov	r0, r3
 810d822:	3708      	adds	r7, #8
 810d824:	46bd      	mov	sp, r7
 810d826:	bd80      	pop	{r7, pc}

0810d828 <_ZSt12__get_helperILj1EOPhJOmEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810d828:	b580      	push	{r7, lr}
 810d82a:	b082      	sub	sp, #8
 810d82c:	af00      	add	r7, sp, #0
 810d82e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810d830:	6878      	ldr	r0, [r7, #4]
 810d832:	f7ff fd61 	bl	810d2f8 <_ZNSt11_Tuple_implILj1EJOPhOmEE7_M_headERS3_>
 810d836:	4603      	mov	r3, r0
 810d838:	4618      	mov	r0, r3
 810d83a:	3708      	adds	r7, #8
 810d83c:	46bd      	mov	sp, r7
 810d83e:	bd80      	pop	{r7, pc}

0810d840 <_ZSt3getILj1EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
    get(tuple<_Elements...>&& __t) noexcept
 810d840:	b580      	push	{r7, lr}
 810d842:	b082      	sub	sp, #8
 810d844:	af00      	add	r7, sp, #0
 810d846:	6078      	str	r0, [r7, #4]
      return std::forward<__element_type&&>(std::get<__i>(__t));
 810d848:	6878      	ldr	r0, [r7, #4]
 810d84a:	f7ff ffe0 	bl	810d80e <_ZSt3getILj1EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 810d84e:	4603      	mov	r3, r0
 810d850:	4618      	mov	r0, r3
 810d852:	f7ff fd6b 	bl	810d32c <_ZSt7forwardIOPhEOT_RNSt16remove_referenceIS2_E4typeE>
 810d856:	4603      	mov	r3, r0
    }
 810d858:	4618      	mov	r0, r3
 810d85a:	3708      	adds	r7, #8
 810d85c:	46bd      	mov	sp, r7
 810d85e:	bd80      	pop	{r7, pc}

0810d860 <_ZSt12__get_helperILj3ESt12_PlaceholderILi3EEJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810d860:	b580      	push	{r7, lr}
 810d862:	b082      	sub	sp, #8
 810d864:	af00      	add	r7, sp, #0
 810d866:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810d868:	6878      	ldr	r0, [r7, #4]
 810d86a:	f7ff f97e 	bl	810cb6a <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEE7_M_headERS2_>
 810d86e:	4603      	mov	r3, r0
 810d870:	4618      	mov	r0, r3
 810d872:	3708      	adds	r7, #8
 810d874:	46bd      	mov	sp, r7
 810d876:	bd80      	pop	{r7, pc}

0810d878 <_ZSt3getILj2EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 810d878:	b580      	push	{r7, lr}
 810d87a:	b082      	sub	sp, #8
 810d87c:	af00      	add	r7, sp, #0
 810d87e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810d880:	687b      	ldr	r3, [r7, #4]
 810d882:	4618      	mov	r0, r3
 810d884:	f000 f805 	bl	810d892 <_ZSt12__get_helperILj2EOmJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>
 810d888:	4603      	mov	r3, r0
 810d88a:	4618      	mov	r0, r3
 810d88c:	3708      	adds	r7, #8
 810d88e:	46bd      	mov	sp, r7
 810d890:	bd80      	pop	{r7, pc}

0810d892 <_ZSt12__get_helperILj2EOmJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810d892:	b580      	push	{r7, lr}
 810d894:	b082      	sub	sp, #8
 810d896:	af00      	add	r7, sp, #0
 810d898:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810d89a:	6878      	ldr	r0, [r7, #4]
 810d89c:	f7ff fd08 	bl	810d2b0 <_ZNSt11_Tuple_implILj2EJOmEE7_M_headERS1_>
 810d8a0:	4603      	mov	r3, r0
 810d8a2:	4618      	mov	r0, r3
 810d8a4:	3708      	adds	r7, #8
 810d8a6:	46bd      	mov	sp, r7
 810d8a8:	bd80      	pop	{r7, pc}

0810d8aa <_ZSt3getILj2EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
    get(tuple<_Elements...>&& __t) noexcept
 810d8aa:	b580      	push	{r7, lr}
 810d8ac:	b082      	sub	sp, #8
 810d8ae:	af00      	add	r7, sp, #0
 810d8b0:	6078      	str	r0, [r7, #4]
      return std::forward<__element_type&&>(std::get<__i>(__t));
 810d8b2:	6878      	ldr	r0, [r7, #4]
 810d8b4:	f7ff ffe0 	bl	810d878 <_ZSt3getILj2EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 810d8b8:	4603      	mov	r3, r0
 810d8ba:	4618      	mov	r0, r3
 810d8bc:	f7ff fd11 	bl	810d2e2 <_ZSt7forwardIOmEOT_RNSt16remove_referenceIS1_E4typeE>
 810d8c0:	4603      	mov	r3, r0
    }
 810d8c2:	4618      	mov	r0, r3
 810d8c4:	3708      	adds	r7, #8
 810d8c6:	46bd      	mov	sp, r7
 810d8c8:	bd80      	pop	{r7, pc}

0810d8ca <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>:
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
 810d8ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 810d8cc:	b087      	sub	sp, #28
 810d8ce:	af00      	add	r7, sp, #0
 810d8d0:	7538      	strb	r0, [r7, #20]
 810d8d2:	6139      	str	r1, [r7, #16]
 810d8d4:	60fa      	str	r2, [r7, #12]
 810d8d6:	60bb      	str	r3, [r7, #8]
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
 810d8d8:	68f8      	ldr	r0, [r7, #12]
 810d8da:	f7ff fef8 	bl	810d6ce <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
 810d8de:	4603      	mov	r3, r0
 810d8e0:	681b      	ldr	r3, [r3, #0]
 810d8e2:	693a      	ldr	r2, [r7, #16]
 810d8e4:	6852      	ldr	r2, [r2, #4]
 810d8e6:	1052      	asrs	r2, r2, #1
 810d8e8:	189d      	adds	r5, r3, r2
 810d8ea:	693a      	ldr	r2, [r7, #16]
 810d8ec:	6852      	ldr	r2, [r2, #4]
 810d8ee:	f002 0201 	and.w	r2, r2, #1
 810d8f2:	2a00      	cmp	r2, #0
 810d8f4:	d102      	bne.n	810d8fc <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x32>
 810d8f6:	693b      	ldr	r3, [r7, #16]
 810d8f8:	681c      	ldr	r4, [r3, #0]
 810d8fa:	e008      	b.n	810d90e <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x44>
 810d8fc:	693a      	ldr	r2, [r7, #16]
 810d8fe:	6852      	ldr	r2, [r2, #4]
 810d900:	1052      	asrs	r2, r2, #1
 810d902:	4413      	add	r3, r2
 810d904:	681b      	ldr	r3, [r3, #0]
 810d906:	693a      	ldr	r2, [r7, #16]
 810d908:	6812      	ldr	r2, [r2, #0]
 810d90a:	4413      	add	r3, r2
 810d90c:	681c      	ldr	r4, [r3, #0]
 810d90e:	68b8      	ldr	r0, [r7, #8]
 810d910:	f7ff fb4d 	bl	810cfae <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810d914:	4603      	mov	r3, r0
 810d916:	781e      	ldrb	r6, [r3, #0]
 810d918:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810d91a:	f7ff fb53 	bl	810cfc4 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810d91e:	4603      	mov	r3, r0
 810d920:	681b      	ldr	r3, [r3, #0]
 810d922:	607b      	str	r3, [r7, #4]
 810d924:	6b78      	ldr	r0, [r7, #52]	; 0x34
 810d926:	f7ff fb58 	bl	810cfda <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810d92a:	4603      	mov	r3, r0
 810d92c:	681b      	ldr	r3, [r3, #0]
 810d92e:	687a      	ldr	r2, [r7, #4]
 810d930:	4631      	mov	r1, r6
 810d932:	4628      	mov	r0, r5
 810d934:	47a0      	blx	r4
 810d936:	bf00      	nop
    }
 810d938:	371c      	adds	r7, #28
 810d93a:	46bd      	mov	sp, r7
 810d93c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810d93e <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1ERKS1_>:
      constexpr _Tuple_impl(const _Head& __head)
 810d93e:	b580      	push	{r7, lr}
 810d940:	b082      	sub	sp, #8
 810d942:	af00      	add	r7, sp, #0
 810d944:	6078      	str	r0, [r7, #4]
 810d946:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 810d948:	6839      	ldr	r1, [r7, #0]
 810d94a:	6878      	ldr	r0, [r7, #4]
 810d94c:	f000 f811 	bl	810d972 <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1ERKS1_>
 810d950:	687b      	ldr	r3, [r7, #4]
 810d952:	4618      	mov	r0, r3
 810d954:	3708      	adds	r7, #8
 810d956:	46bd      	mov	sp, r7
 810d958:	bd80      	pop	{r7, pc}

0810d95a <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1ERKS1_>:
      constexpr _Head_base(const _Head& __h)
 810d95a:	b480      	push	{r7}
 810d95c:	b083      	sub	sp, #12
 810d95e:	af00      	add	r7, sp, #0
 810d960:	6078      	str	r0, [r7, #4]
 810d962:	6039      	str	r1, [r7, #0]
      : _Head(__h) { }
 810d964:	687b      	ldr	r3, [r7, #4]
 810d966:	4618      	mov	r0, r3
 810d968:	370c      	adds	r7, #12
 810d96a:	46bd      	mov	sp, r7
 810d96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d970:	4770      	bx	lr

0810d972 <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1ERKS1_>:
      constexpr _Head_base(const _Head& __h)
 810d972:	b480      	push	{r7}
 810d974:	b083      	sub	sp, #12
 810d976:	af00      	add	r7, sp, #0
 810d978:	6078      	str	r0, [r7, #4]
 810d97a:	6039      	str	r1, [r7, #0]
      : _Head(__h) { }
 810d97c:	687b      	ldr	r3, [r7, #4]
 810d97e:	4618      	mov	r0, r3
 810d980:	370c      	adds	r7, #12
 810d982:	46bd      	mov	sp, r7
 810d984:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d988:	4770      	bx	lr
	...

0810d98c <_ZN5IOBusD1Ev>:

#include "MessageBus.h"
#include "IODriver.h"


class IOBus : public MessageBus {
 810d98c:	b580      	push	{r7, lr}
 810d98e:	b082      	sub	sp, #8
 810d990:	af00      	add	r7, sp, #0
 810d992:	6078      	str	r0, [r7, #4]
 810d994:	4a05      	ldr	r2, [pc, #20]	; (810d9ac <_ZN5IOBusD1Ev+0x20>)
 810d996:	687b      	ldr	r3, [r7, #4]
 810d998:	601a      	str	r2, [r3, #0]
 810d99a:	687b      	ldr	r3, [r7, #4]
 810d99c:	4618      	mov	r0, r3
 810d99e:	f7fe ff0d 	bl	810c7bc <_ZN10MessageBusD1Ev>
 810d9a2:	687b      	ldr	r3, [r7, #4]
 810d9a4:	4618      	mov	r0, r3
 810d9a6:	3708      	adds	r7, #8
 810d9a8:	46bd      	mov	sp, r7
 810d9aa:	bd80      	pop	{r7, pc}
 810d9ac:	08112ad8 	.word	0x08112ad8

0810d9b0 <_ZN5IOBusD0Ev>:
 810d9b0:	b580      	push	{r7, lr}
 810d9b2:	b082      	sub	sp, #8
 810d9b4:	af00      	add	r7, sp, #0
 810d9b6:	6078      	str	r0, [r7, #4]
 810d9b8:	6878      	ldr	r0, [r7, #4]
 810d9ba:	f7ff ffe7 	bl	810d98c <_ZN5IOBusD1Ev>
 810d9be:	f644 0114 	movw	r1, #18452	; 0x4814
 810d9c2:	6878      	ldr	r0, [r7, #4]
 810d9c4:	f001 faa8 	bl	810ef18 <_ZdlPvj>
 810d9c8:	687b      	ldr	r3, [r7, #4]
 810d9ca:	4618      	mov	r0, r3
 810d9cc:	3708      	adds	r7, #8
 810d9ce:	46bd      	mov	sp, r7
 810d9d0:	bd80      	pop	{r7, pc}

0810d9d2 <_ZNKSt9type_info4nameEv>:
     *  the runtime-mandated type_info structures in the new-abi.  */
    virtual ~type_info();

    /** Returns an @e implementation-defined byte string; this is not
     *  portable between compilers!  */
    const char* name() const _GLIBCXX_NOEXCEPT
 810d9d2:	b480      	push	{r7}
 810d9d4:	b083      	sub	sp, #12
 810d9d6:	af00      	add	r7, sp, #0
 810d9d8:	6078      	str	r0, [r7, #4]
    { return __name[0] == '*' ? __name + 1 : __name; }
 810d9da:	687b      	ldr	r3, [r7, #4]
 810d9dc:	685b      	ldr	r3, [r3, #4]
 810d9de:	781b      	ldrb	r3, [r3, #0]
 810d9e0:	2b2a      	cmp	r3, #42	; 0x2a
 810d9e2:	d103      	bne.n	810d9ec <_ZNKSt9type_info4nameEv+0x1a>
 810d9e4:	687b      	ldr	r3, [r7, #4]
 810d9e6:	685b      	ldr	r3, [r3, #4]
 810d9e8:	3301      	adds	r3, #1
 810d9ea:	e001      	b.n	810d9f0 <_ZNKSt9type_info4nameEv+0x1e>
 810d9ec:	687b      	ldr	r3, [r7, #4]
 810d9ee:	685b      	ldr	r3, [r3, #4]
 810d9f0:	4618      	mov	r0, r3
 810d9f2:	370c      	adds	r7, #12
 810d9f4:	46bd      	mov	sp, r7
 810d9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d9fa:	4770      	bx	lr

0810d9fc <_ZNKSt9type_info9hash_codeEv>:
#endif
    bool operator!=(const type_info& __arg) const _GLIBCXX_NOEXCEPT
    { return !operator==(__arg); }

#if __cplusplus >= 201103L
    size_t hash_code() const noexcept
 810d9fc:	b590      	push	{r4, r7, lr}
 810d9fe:	b083      	sub	sp, #12
 810da00:	af00      	add	r7, sp, #0
 810da02:	6078      	str	r0, [r7, #4]
    {
#  if !__GXX_MERGED_TYPEINFO_NAMES
      return _Hash_bytes(name(), __builtin_strlen(name()),
 810da04:	6878      	ldr	r0, [r7, #4]
 810da06:	f7ff ffe4 	bl	810d9d2 <_ZNKSt9type_info4nameEv>
 810da0a:	4604      	mov	r4, r0
 810da0c:	6878      	ldr	r0, [r7, #4]
 810da0e:	f7ff ffe0 	bl	810d9d2 <_ZNKSt9type_info4nameEv>
 810da12:	4603      	mov	r3, r0
 810da14:	4618      	mov	r0, r3
 810da16:	f7f2 fc6d 	bl	81002f4 <strlen>
 810da1a:	4603      	mov	r3, r0
			 static_cast<size_t>(0xc70f6907UL));
 810da1c:	4a04      	ldr	r2, [pc, #16]	; (810da30 <_ZNKSt9type_info9hash_codeEv+0x34>)
 810da1e:	4619      	mov	r1, r3
 810da20:	4620      	mov	r0, r4
 810da22:	f001 fa8b 	bl	810ef3c <_ZSt11_Hash_bytesPKvjj>
 810da26:	4603      	mov	r3, r0
#  else
      return reinterpret_cast<size_t>(__name);
#  endif
    }
 810da28:	4618      	mov	r0, r3
 810da2a:	370c      	adds	r7, #12
 810da2c:	46bd      	mov	sp, r7
 810da2e:	bd90      	pop	{r4, r7, pc}
 810da30:	c70f6907 	.word	0xc70f6907

0810da34 <_ZN10MessageBus6defineI10PingPacketEEbh>:
 * Warning: this method is not thread-safe.
 */


// WARNING: using a hash as a UUID is a bad idea in general but it was to only way to get SWIG working.
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810da34:	b580      	push	{r7, lr}
 810da36:	b086      	sub	sp, #24
 810da38:	af00      	add	r7, sp, #0
 810da3a:	6078      	str	r0, [r7, #4]
 810da3c:	460b      	mov	r3, r1
 810da3e:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810da40:	2308      	movs	r3, #8
 810da42:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810da44:	4829      	ldr	r0, [pc, #164]	; (810daec <_ZN10MessageBus6defineI10PingPacketEEbh+0xb8>)
 810da46:	f7ff ffd9 	bl	810d9fc <_ZNKSt9type_info9hash_codeEv>
 810da4a:	60f8      	str	r0, [r7, #12]

	uint32_t insertion_point = hash % 256;
 810da4c:	68fb      	ldr	r3, [r7, #12]
 810da4e:	b2db      	uxtb	r3, r3
 810da50:	617b      	str	r3, [r7, #20]

	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810da52:	78fb      	ldrb	r3, [r7, #3]
 810da54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810da58:	687a      	ldr	r2, [r7, #4]
 810da5a:	00db      	lsls	r3, r3, #3
 810da5c:	4413      	add	r3, r2
 810da5e:	689b      	ldr	r3, [r3, #8]
 810da60:	2b00      	cmp	r3, #0
 810da62:	d001      	beq.n	810da68 <_ZN10MessageBus6defineI10PingPacketEEbh+0x34>
		return false; // Packet ID already in use
 810da64:	2300      	movs	r3, #0
 810da66:	e03c      	b.n	810dae2 <_ZN10MessageBus6defineI10PingPacketEEbh+0xae>
	}

	if(struct_size > max_packet_size) {
 810da68:	693b      	ldr	r3, [r7, #16]
 810da6a:	2bff      	cmp	r3, #255	; 0xff
 810da6c:	d901      	bls.n	810da72 <_ZN10MessageBus6defineI10PingPacketEEbh+0x3e>
		return false; // Packet size too large
 810da6e:	2300      	movs	r3, #0
 810da70:	e037      	b.n	810dae2 <_ZN10MessageBus6defineI10PingPacketEEbh+0xae>
	}

	while(definitions_by_type[insertion_point] != nullptr) {
 810da72:	687a      	ldr	r2, [r7, #4]
 810da74:	697b      	ldr	r3, [r7, #20]
 810da76:	3380      	adds	r3, #128	; 0x80
 810da78:	009b      	lsls	r3, r3, #2
 810da7a:	4413      	add	r3, r2
 810da7c:	685b      	ldr	r3, [r3, #4]
 810da7e:	2b00      	cmp	r3, #0
 810da80:	d015      	beq.n	810daae <_ZN10MessageBus6defineI10PingPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810da82:	687a      	ldr	r2, [r7, #4]
 810da84:	697b      	ldr	r3, [r7, #20]
 810da86:	3380      	adds	r3, #128	; 0x80
 810da88:	009b      	lsls	r3, r3, #2
 810da8a:	4413      	add	r3, r2
 810da8c:	685b      	ldr	r3, [r3, #4]
 810da8e:	685b      	ldr	r3, [r3, #4]
 810da90:	68fa      	ldr	r2, [r7, #12]
 810da92:	429a      	cmp	r2, r3
 810da94:	d101      	bne.n	810da9a <_ZN10MessageBus6defineI10PingPacketEEbh+0x66>
			return false; // Packet type already defined
 810da96:	2300      	movs	r3, #0
 810da98:	e023      	b.n	810dae2 <_ZN10MessageBus6defineI10PingPacketEEbh+0xae>
		}

		insertion_point++;
 810da9a:	697b      	ldr	r3, [r7, #20]
 810da9c:	3301      	adds	r3, #1
 810da9e:	617b      	str	r3, [r7, #20]

		if(insertion_point == 256) {
 810daa0:	697b      	ldr	r3, [r7, #20]
 810daa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810daa6:	d1e4      	bne.n	810da72 <_ZN10MessageBus6defineI10PingPacketEEbh+0x3e>
			insertion_point = 0;
 810daa8:	2300      	movs	r3, #0
 810daaa:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810daac:	e7e1      	b.n	810da72 <_ZN10MessageBus6defineI10PingPacketEEbh+0x3e>
		}
	}

	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810daae:	78fb      	ldrb	r3, [r7, #3]
 810dab0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810dab4:	00db      	lsls	r3, r3, #3
 810dab6:	687a      	ldr	r2, [r7, #4]
 810dab8:	4413      	add	r3, r2
 810daba:	3304      	adds	r3, #4
 810dabc:	60bb      	str	r3, [r7, #8]

	def->id = identifier;
 810dabe:	68bb      	ldr	r3, [r7, #8]
 810dac0:	78fa      	ldrb	r2, [r7, #3]
 810dac2:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810dac4:	693b      	ldr	r3, [r7, #16]
 810dac6:	b2da      	uxtb	r2, r3
 810dac8:	68bb      	ldr	r3, [r7, #8]
 810daca:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810dacc:	68bb      	ldr	r3, [r7, #8]
 810dace:	68fa      	ldr	r2, [r7, #12]
 810dad0:	605a      	str	r2, [r3, #4]

	definitions_by_type[insertion_point] = def;
 810dad2:	687a      	ldr	r2, [r7, #4]
 810dad4:	697b      	ldr	r3, [r7, #20]
 810dad6:	3380      	adds	r3, #128	; 0x80
 810dad8:	009b      	lsls	r3, r3, #2
 810dada:	4413      	add	r3, r2
 810dadc:	68ba      	ldr	r2, [r7, #8]
 810dade:	605a      	str	r2, [r3, #4]

	return true;
 810dae0:	2301      	movs	r3, #1
}
 810dae2:	4618      	mov	r0, r3
 810dae4:	3718      	adds	r7, #24
 810dae6:	46bd      	mov	sp, r7
 810dae8:	bd80      	pop	{r7, pc}
 810daea:	bf00      	nop
 810daec:	08112cd0 	.word	0x08112cd0

0810daf0 <_ZN10MessageBus6defineI13ConnectPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810daf0:	b580      	push	{r7, lr}
 810daf2:	b086      	sub	sp, #24
 810daf4:	af00      	add	r7, sp, #0
 810daf6:	6078      	str	r0, [r7, #4]
 810daf8:	460b      	mov	r3, r1
 810dafa:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810dafc:	2320      	movs	r3, #32
 810dafe:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810db00:	4829      	ldr	r0, [pc, #164]	; (810dba8 <_ZN10MessageBus6defineI13ConnectPacketEEbh+0xb8>)
 810db02:	f7ff ff7b 	bl	810d9fc <_ZNKSt9type_info9hash_codeEv>
 810db06:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810db08:	68fb      	ldr	r3, [r7, #12]
 810db0a:	b2db      	uxtb	r3, r3
 810db0c:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810db0e:	78fb      	ldrb	r3, [r7, #3]
 810db10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810db14:	687a      	ldr	r2, [r7, #4]
 810db16:	00db      	lsls	r3, r3, #3
 810db18:	4413      	add	r3, r2
 810db1a:	689b      	ldr	r3, [r3, #8]
 810db1c:	2b00      	cmp	r3, #0
 810db1e:	d001      	beq.n	810db24 <_ZN10MessageBus6defineI13ConnectPacketEEbh+0x34>
		return false; // Packet ID already in use
 810db20:	2300      	movs	r3, #0
 810db22:	e03c      	b.n	810db9e <_ZN10MessageBus6defineI13ConnectPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810db24:	693b      	ldr	r3, [r7, #16]
 810db26:	2bff      	cmp	r3, #255	; 0xff
 810db28:	d901      	bls.n	810db2e <_ZN10MessageBus6defineI13ConnectPacketEEbh+0x3e>
		return false; // Packet size too large
 810db2a:	2300      	movs	r3, #0
 810db2c:	e037      	b.n	810db9e <_ZN10MessageBus6defineI13ConnectPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810db2e:	687a      	ldr	r2, [r7, #4]
 810db30:	697b      	ldr	r3, [r7, #20]
 810db32:	3380      	adds	r3, #128	; 0x80
 810db34:	009b      	lsls	r3, r3, #2
 810db36:	4413      	add	r3, r2
 810db38:	685b      	ldr	r3, [r3, #4]
 810db3a:	2b00      	cmp	r3, #0
 810db3c:	d015      	beq.n	810db6a <_ZN10MessageBus6defineI13ConnectPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810db3e:	687a      	ldr	r2, [r7, #4]
 810db40:	697b      	ldr	r3, [r7, #20]
 810db42:	3380      	adds	r3, #128	; 0x80
 810db44:	009b      	lsls	r3, r3, #2
 810db46:	4413      	add	r3, r2
 810db48:	685b      	ldr	r3, [r3, #4]
 810db4a:	685b      	ldr	r3, [r3, #4]
 810db4c:	68fa      	ldr	r2, [r7, #12]
 810db4e:	429a      	cmp	r2, r3
 810db50:	d101      	bne.n	810db56 <_ZN10MessageBus6defineI13ConnectPacketEEbh+0x66>
			return false; // Packet type already defined
 810db52:	2300      	movs	r3, #0
 810db54:	e023      	b.n	810db9e <_ZN10MessageBus6defineI13ConnectPacketEEbh+0xae>
		insertion_point++;
 810db56:	697b      	ldr	r3, [r7, #20]
 810db58:	3301      	adds	r3, #1
 810db5a:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810db5c:	697b      	ldr	r3, [r7, #20]
 810db5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810db62:	d1e4      	bne.n	810db2e <_ZN10MessageBus6defineI13ConnectPacketEEbh+0x3e>
			insertion_point = 0;
 810db64:	2300      	movs	r3, #0
 810db66:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810db68:	e7e1      	b.n	810db2e <_ZN10MessageBus6defineI13ConnectPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810db6a:	78fb      	ldrb	r3, [r7, #3]
 810db6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810db70:	00db      	lsls	r3, r3, #3
 810db72:	687a      	ldr	r2, [r7, #4]
 810db74:	4413      	add	r3, r2
 810db76:	3304      	adds	r3, #4
 810db78:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810db7a:	68bb      	ldr	r3, [r7, #8]
 810db7c:	78fa      	ldrb	r2, [r7, #3]
 810db7e:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810db80:	693b      	ldr	r3, [r7, #16]
 810db82:	b2da      	uxtb	r2, r3
 810db84:	68bb      	ldr	r3, [r7, #8]
 810db86:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810db88:	68bb      	ldr	r3, [r7, #8]
 810db8a:	68fa      	ldr	r2, [r7, #12]
 810db8c:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810db8e:	687a      	ldr	r2, [r7, #4]
 810db90:	697b      	ldr	r3, [r7, #20]
 810db92:	3380      	adds	r3, #128	; 0x80
 810db94:	009b      	lsls	r3, r3, #2
 810db96:	4413      	add	r3, r2
 810db98:	68ba      	ldr	r2, [r7, #8]
 810db9a:	605a      	str	r2, [r3, #4]
	return true;
 810db9c:	2301      	movs	r3, #1
}
 810db9e:	4618      	mov	r0, r3
 810dba0:	3718      	adds	r7, #24
 810dba2:	46bd      	mov	sp, r7
 810dba4:	bd80      	pop	{r7, pc}
 810dba6:	bf00      	nop
 810dba8:	08112cb8 	.word	0x08112cb8

0810dbac <_ZN10MessageBus6defineI16DisconnectPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810dbac:	b580      	push	{r7, lr}
 810dbae:	b086      	sub	sp, #24
 810dbb0:	af00      	add	r7, sp, #0
 810dbb2:	6078      	str	r0, [r7, #4]
 810dbb4:	460b      	mov	r3, r1
 810dbb6:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810dbb8:	2301      	movs	r3, #1
 810dbba:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810dbbc:	4829      	ldr	r0, [pc, #164]	; (810dc64 <_ZN10MessageBus6defineI16DisconnectPacketEEbh+0xb8>)
 810dbbe:	f7ff ff1d 	bl	810d9fc <_ZNKSt9type_info9hash_codeEv>
 810dbc2:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810dbc4:	68fb      	ldr	r3, [r7, #12]
 810dbc6:	b2db      	uxtb	r3, r3
 810dbc8:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810dbca:	78fb      	ldrb	r3, [r7, #3]
 810dbcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810dbd0:	687a      	ldr	r2, [r7, #4]
 810dbd2:	00db      	lsls	r3, r3, #3
 810dbd4:	4413      	add	r3, r2
 810dbd6:	689b      	ldr	r3, [r3, #8]
 810dbd8:	2b00      	cmp	r3, #0
 810dbda:	d001      	beq.n	810dbe0 <_ZN10MessageBus6defineI16DisconnectPacketEEbh+0x34>
		return false; // Packet ID already in use
 810dbdc:	2300      	movs	r3, #0
 810dbde:	e03c      	b.n	810dc5a <_ZN10MessageBus6defineI16DisconnectPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810dbe0:	693b      	ldr	r3, [r7, #16]
 810dbe2:	2bff      	cmp	r3, #255	; 0xff
 810dbe4:	d901      	bls.n	810dbea <_ZN10MessageBus6defineI16DisconnectPacketEEbh+0x3e>
		return false; // Packet size too large
 810dbe6:	2300      	movs	r3, #0
 810dbe8:	e037      	b.n	810dc5a <_ZN10MessageBus6defineI16DisconnectPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810dbea:	687a      	ldr	r2, [r7, #4]
 810dbec:	697b      	ldr	r3, [r7, #20]
 810dbee:	3380      	adds	r3, #128	; 0x80
 810dbf0:	009b      	lsls	r3, r3, #2
 810dbf2:	4413      	add	r3, r2
 810dbf4:	685b      	ldr	r3, [r3, #4]
 810dbf6:	2b00      	cmp	r3, #0
 810dbf8:	d015      	beq.n	810dc26 <_ZN10MessageBus6defineI16DisconnectPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810dbfa:	687a      	ldr	r2, [r7, #4]
 810dbfc:	697b      	ldr	r3, [r7, #20]
 810dbfe:	3380      	adds	r3, #128	; 0x80
 810dc00:	009b      	lsls	r3, r3, #2
 810dc02:	4413      	add	r3, r2
 810dc04:	685b      	ldr	r3, [r3, #4]
 810dc06:	685b      	ldr	r3, [r3, #4]
 810dc08:	68fa      	ldr	r2, [r7, #12]
 810dc0a:	429a      	cmp	r2, r3
 810dc0c:	d101      	bne.n	810dc12 <_ZN10MessageBus6defineI16DisconnectPacketEEbh+0x66>
			return false; // Packet type already defined
 810dc0e:	2300      	movs	r3, #0
 810dc10:	e023      	b.n	810dc5a <_ZN10MessageBus6defineI16DisconnectPacketEEbh+0xae>
		insertion_point++;
 810dc12:	697b      	ldr	r3, [r7, #20]
 810dc14:	3301      	adds	r3, #1
 810dc16:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810dc18:	697b      	ldr	r3, [r7, #20]
 810dc1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810dc1e:	d1e4      	bne.n	810dbea <_ZN10MessageBus6defineI16DisconnectPacketEEbh+0x3e>
			insertion_point = 0;
 810dc20:	2300      	movs	r3, #0
 810dc22:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810dc24:	e7e1      	b.n	810dbea <_ZN10MessageBus6defineI16DisconnectPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810dc26:	78fb      	ldrb	r3, [r7, #3]
 810dc28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810dc2c:	00db      	lsls	r3, r3, #3
 810dc2e:	687a      	ldr	r2, [r7, #4]
 810dc30:	4413      	add	r3, r2
 810dc32:	3304      	adds	r3, #4
 810dc34:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810dc36:	68bb      	ldr	r3, [r7, #8]
 810dc38:	78fa      	ldrb	r2, [r7, #3]
 810dc3a:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810dc3c:	693b      	ldr	r3, [r7, #16]
 810dc3e:	b2da      	uxtb	r2, r3
 810dc40:	68bb      	ldr	r3, [r7, #8]
 810dc42:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810dc44:	68bb      	ldr	r3, [r7, #8]
 810dc46:	68fa      	ldr	r2, [r7, #12]
 810dc48:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810dc4a:	687a      	ldr	r2, [r7, #4]
 810dc4c:	697b      	ldr	r3, [r7, #20]
 810dc4e:	3380      	adds	r3, #128	; 0x80
 810dc50:	009b      	lsls	r3, r3, #2
 810dc52:	4413      	add	r3, r2
 810dc54:	68ba      	ldr	r2, [r7, #8]
 810dc56:	605a      	str	r2, [r3, #4]
	return true;
 810dc58:	2301      	movs	r3, #1
}
 810dc5a:	4618      	mov	r0, r3
 810dc5c:	3718      	adds	r7, #24
 810dc5e:	46bd      	mov	sp, r7
 810dc60:	bd80      	pop	{r7, pc}
 810dc62:	bf00      	nop
 810dc64:	08112c9c 	.word	0x08112c9c

0810dc68 <_ZN10MessageBus6defineI13RequestPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810dc68:	b580      	push	{r7, lr}
 810dc6a:	b086      	sub	sp, #24
 810dc6c:	af00      	add	r7, sp, #0
 810dc6e:	6078      	str	r0, [r7, #4]
 810dc70:	460b      	mov	r3, r1
 810dc72:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810dc74:	2308      	movs	r3, #8
 810dc76:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810dc78:	4829      	ldr	r0, [pc, #164]	; (810dd20 <_ZN10MessageBus6defineI13RequestPacketEEbh+0xb8>)
 810dc7a:	f7ff febf 	bl	810d9fc <_ZNKSt9type_info9hash_codeEv>
 810dc7e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810dc80:	68fb      	ldr	r3, [r7, #12]
 810dc82:	b2db      	uxtb	r3, r3
 810dc84:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810dc86:	78fb      	ldrb	r3, [r7, #3]
 810dc88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810dc8c:	687a      	ldr	r2, [r7, #4]
 810dc8e:	00db      	lsls	r3, r3, #3
 810dc90:	4413      	add	r3, r2
 810dc92:	689b      	ldr	r3, [r3, #8]
 810dc94:	2b00      	cmp	r3, #0
 810dc96:	d001      	beq.n	810dc9c <_ZN10MessageBus6defineI13RequestPacketEEbh+0x34>
		return false; // Packet ID already in use
 810dc98:	2300      	movs	r3, #0
 810dc9a:	e03c      	b.n	810dd16 <_ZN10MessageBus6defineI13RequestPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810dc9c:	693b      	ldr	r3, [r7, #16]
 810dc9e:	2bff      	cmp	r3, #255	; 0xff
 810dca0:	d901      	bls.n	810dca6 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x3e>
		return false; // Packet size too large
 810dca2:	2300      	movs	r3, #0
 810dca4:	e037      	b.n	810dd16 <_ZN10MessageBus6defineI13RequestPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810dca6:	687a      	ldr	r2, [r7, #4]
 810dca8:	697b      	ldr	r3, [r7, #20]
 810dcaa:	3380      	adds	r3, #128	; 0x80
 810dcac:	009b      	lsls	r3, r3, #2
 810dcae:	4413      	add	r3, r2
 810dcb0:	685b      	ldr	r3, [r3, #4]
 810dcb2:	2b00      	cmp	r3, #0
 810dcb4:	d015      	beq.n	810dce2 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810dcb6:	687a      	ldr	r2, [r7, #4]
 810dcb8:	697b      	ldr	r3, [r7, #20]
 810dcba:	3380      	adds	r3, #128	; 0x80
 810dcbc:	009b      	lsls	r3, r3, #2
 810dcbe:	4413      	add	r3, r2
 810dcc0:	685b      	ldr	r3, [r3, #4]
 810dcc2:	685b      	ldr	r3, [r3, #4]
 810dcc4:	68fa      	ldr	r2, [r7, #12]
 810dcc6:	429a      	cmp	r2, r3
 810dcc8:	d101      	bne.n	810dcce <_ZN10MessageBus6defineI13RequestPacketEEbh+0x66>
			return false; // Packet type already defined
 810dcca:	2300      	movs	r3, #0
 810dccc:	e023      	b.n	810dd16 <_ZN10MessageBus6defineI13RequestPacketEEbh+0xae>
		insertion_point++;
 810dcce:	697b      	ldr	r3, [r7, #20]
 810dcd0:	3301      	adds	r3, #1
 810dcd2:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810dcd4:	697b      	ldr	r3, [r7, #20]
 810dcd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810dcda:	d1e4      	bne.n	810dca6 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x3e>
			insertion_point = 0;
 810dcdc:	2300      	movs	r3, #0
 810dcde:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810dce0:	e7e1      	b.n	810dca6 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810dce2:	78fb      	ldrb	r3, [r7, #3]
 810dce4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810dce8:	00db      	lsls	r3, r3, #3
 810dcea:	687a      	ldr	r2, [r7, #4]
 810dcec:	4413      	add	r3, r2
 810dcee:	3304      	adds	r3, #4
 810dcf0:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810dcf2:	68bb      	ldr	r3, [r7, #8]
 810dcf4:	78fa      	ldrb	r2, [r7, #3]
 810dcf6:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810dcf8:	693b      	ldr	r3, [r7, #16]
 810dcfa:	b2da      	uxtb	r2, r3
 810dcfc:	68bb      	ldr	r3, [r7, #8]
 810dcfe:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810dd00:	68bb      	ldr	r3, [r7, #8]
 810dd02:	68fa      	ldr	r2, [r7, #12]
 810dd04:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810dd06:	687a      	ldr	r2, [r7, #4]
 810dd08:	697b      	ldr	r3, [r7, #20]
 810dd0a:	3380      	adds	r3, #128	; 0x80
 810dd0c:	009b      	lsls	r3, r3, #2
 810dd0e:	4413      	add	r3, r2
 810dd10:	68ba      	ldr	r2, [r7, #8]
 810dd12:	605a      	str	r2, [r3, #4]
	return true;
 810dd14:	2301      	movs	r3, #1
}
 810dd16:	4618      	mov	r0, r3
 810dd18:	3718      	adds	r7, #24
 810dd1a:	46bd      	mov	sp, r7
 810dd1c:	bd80      	pop	{r7, pc}
 810dd1e:	bf00      	nop
 810dd20:	08112c84 	.word	0x08112c84

0810dd24 <_ZN10MessageBus6defineI17AcknowledgePacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810dd24:	b580      	push	{r7, lr}
 810dd26:	b086      	sub	sp, #24
 810dd28:	af00      	add	r7, sp, #0
 810dd2a:	6078      	str	r0, [r7, #4]
 810dd2c:	460b      	mov	r3, r1
 810dd2e:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810dd30:	2303      	movs	r3, #3
 810dd32:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810dd34:	4829      	ldr	r0, [pc, #164]	; (810dddc <_ZN10MessageBus6defineI17AcknowledgePacketEEbh+0xb8>)
 810dd36:	f7ff fe61 	bl	810d9fc <_ZNKSt9type_info9hash_codeEv>
 810dd3a:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810dd3c:	68fb      	ldr	r3, [r7, #12]
 810dd3e:	b2db      	uxtb	r3, r3
 810dd40:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810dd42:	78fb      	ldrb	r3, [r7, #3]
 810dd44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810dd48:	687a      	ldr	r2, [r7, #4]
 810dd4a:	00db      	lsls	r3, r3, #3
 810dd4c:	4413      	add	r3, r2
 810dd4e:	689b      	ldr	r3, [r3, #8]
 810dd50:	2b00      	cmp	r3, #0
 810dd52:	d001      	beq.n	810dd58 <_ZN10MessageBus6defineI17AcknowledgePacketEEbh+0x34>
		return false; // Packet ID already in use
 810dd54:	2300      	movs	r3, #0
 810dd56:	e03c      	b.n	810ddd2 <_ZN10MessageBus6defineI17AcknowledgePacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810dd58:	693b      	ldr	r3, [r7, #16]
 810dd5a:	2bff      	cmp	r3, #255	; 0xff
 810dd5c:	d901      	bls.n	810dd62 <_ZN10MessageBus6defineI17AcknowledgePacketEEbh+0x3e>
		return false; // Packet size too large
 810dd5e:	2300      	movs	r3, #0
 810dd60:	e037      	b.n	810ddd2 <_ZN10MessageBus6defineI17AcknowledgePacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810dd62:	687a      	ldr	r2, [r7, #4]
 810dd64:	697b      	ldr	r3, [r7, #20]
 810dd66:	3380      	adds	r3, #128	; 0x80
 810dd68:	009b      	lsls	r3, r3, #2
 810dd6a:	4413      	add	r3, r2
 810dd6c:	685b      	ldr	r3, [r3, #4]
 810dd6e:	2b00      	cmp	r3, #0
 810dd70:	d015      	beq.n	810dd9e <_ZN10MessageBus6defineI17AcknowledgePacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810dd72:	687a      	ldr	r2, [r7, #4]
 810dd74:	697b      	ldr	r3, [r7, #20]
 810dd76:	3380      	adds	r3, #128	; 0x80
 810dd78:	009b      	lsls	r3, r3, #2
 810dd7a:	4413      	add	r3, r2
 810dd7c:	685b      	ldr	r3, [r3, #4]
 810dd7e:	685b      	ldr	r3, [r3, #4]
 810dd80:	68fa      	ldr	r2, [r7, #12]
 810dd82:	429a      	cmp	r2, r3
 810dd84:	d101      	bne.n	810dd8a <_ZN10MessageBus6defineI17AcknowledgePacketEEbh+0x66>
			return false; // Packet type already defined
 810dd86:	2300      	movs	r3, #0
 810dd88:	e023      	b.n	810ddd2 <_ZN10MessageBus6defineI17AcknowledgePacketEEbh+0xae>
		insertion_point++;
 810dd8a:	697b      	ldr	r3, [r7, #20]
 810dd8c:	3301      	adds	r3, #1
 810dd8e:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810dd90:	697b      	ldr	r3, [r7, #20]
 810dd92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810dd96:	d1e4      	bne.n	810dd62 <_ZN10MessageBus6defineI17AcknowledgePacketEEbh+0x3e>
			insertion_point = 0;
 810dd98:	2300      	movs	r3, #0
 810dd9a:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810dd9c:	e7e1      	b.n	810dd62 <_ZN10MessageBus6defineI17AcknowledgePacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810dd9e:	78fb      	ldrb	r3, [r7, #3]
 810dda0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810dda4:	00db      	lsls	r3, r3, #3
 810dda6:	687a      	ldr	r2, [r7, #4]
 810dda8:	4413      	add	r3, r2
 810ddaa:	3304      	adds	r3, #4
 810ddac:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810ddae:	68bb      	ldr	r3, [r7, #8]
 810ddb0:	78fa      	ldrb	r2, [r7, #3]
 810ddb2:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810ddb4:	693b      	ldr	r3, [r7, #16]
 810ddb6:	b2da      	uxtb	r2, r3
 810ddb8:	68bb      	ldr	r3, [r7, #8]
 810ddba:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810ddbc:	68bb      	ldr	r3, [r7, #8]
 810ddbe:	68fa      	ldr	r2, [r7, #12]
 810ddc0:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810ddc2:	687a      	ldr	r2, [r7, #4]
 810ddc4:	697b      	ldr	r3, [r7, #20]
 810ddc6:	3380      	adds	r3, #128	; 0x80
 810ddc8:	009b      	lsls	r3, r3, #2
 810ddca:	4413      	add	r3, r2
 810ddcc:	68ba      	ldr	r2, [r7, #8]
 810ddce:	605a      	str	r2, [r3, #4]
	return true;
 810ddd0:	2301      	movs	r3, #1
}
 810ddd2:	4618      	mov	r0, r3
 810ddd4:	3718      	adds	r7, #24
 810ddd6:	46bd      	mov	sp, r7
 810ddd8:	bd80      	pop	{r7, pc}
 810ddda:	bf00      	nop
 810dddc:	08112c68 	.word	0x08112c68

0810dde0 <_ZN10MessageBus6defineI14ResponsePacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810dde0:	b580      	push	{r7, lr}
 810dde2:	b086      	sub	sp, #24
 810dde4:	af00      	add	r7, sp, #0
 810dde6:	6078      	str	r0, [r7, #4]
 810dde8:	460b      	mov	r3, r1
 810ddea:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810ddec:	2308      	movs	r3, #8
 810ddee:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810ddf0:	4829      	ldr	r0, [pc, #164]	; (810de98 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xb8>)
 810ddf2:	f7ff fe03 	bl	810d9fc <_ZNKSt9type_info9hash_codeEv>
 810ddf6:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810ddf8:	68fb      	ldr	r3, [r7, #12]
 810ddfa:	b2db      	uxtb	r3, r3
 810ddfc:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810ddfe:	78fb      	ldrb	r3, [r7, #3]
 810de00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810de04:	687a      	ldr	r2, [r7, #4]
 810de06:	00db      	lsls	r3, r3, #3
 810de08:	4413      	add	r3, r2
 810de0a:	689b      	ldr	r3, [r3, #8]
 810de0c:	2b00      	cmp	r3, #0
 810de0e:	d001      	beq.n	810de14 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x34>
		return false; // Packet ID already in use
 810de10:	2300      	movs	r3, #0
 810de12:	e03c      	b.n	810de8e <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810de14:	693b      	ldr	r3, [r7, #16]
 810de16:	2bff      	cmp	r3, #255	; 0xff
 810de18:	d901      	bls.n	810de1e <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x3e>
		return false; // Packet size too large
 810de1a:	2300      	movs	r3, #0
 810de1c:	e037      	b.n	810de8e <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810de1e:	687a      	ldr	r2, [r7, #4]
 810de20:	697b      	ldr	r3, [r7, #20]
 810de22:	3380      	adds	r3, #128	; 0x80
 810de24:	009b      	lsls	r3, r3, #2
 810de26:	4413      	add	r3, r2
 810de28:	685b      	ldr	r3, [r3, #4]
 810de2a:	2b00      	cmp	r3, #0
 810de2c:	d015      	beq.n	810de5a <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810de2e:	687a      	ldr	r2, [r7, #4]
 810de30:	697b      	ldr	r3, [r7, #20]
 810de32:	3380      	adds	r3, #128	; 0x80
 810de34:	009b      	lsls	r3, r3, #2
 810de36:	4413      	add	r3, r2
 810de38:	685b      	ldr	r3, [r3, #4]
 810de3a:	685b      	ldr	r3, [r3, #4]
 810de3c:	68fa      	ldr	r2, [r7, #12]
 810de3e:	429a      	cmp	r2, r3
 810de40:	d101      	bne.n	810de46 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x66>
			return false; // Packet type already defined
 810de42:	2300      	movs	r3, #0
 810de44:	e023      	b.n	810de8e <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xae>
		insertion_point++;
 810de46:	697b      	ldr	r3, [r7, #20]
 810de48:	3301      	adds	r3, #1
 810de4a:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810de4c:	697b      	ldr	r3, [r7, #20]
 810de4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810de52:	d1e4      	bne.n	810de1e <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x3e>
			insertion_point = 0;
 810de54:	2300      	movs	r3, #0
 810de56:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810de58:	e7e1      	b.n	810de1e <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810de5a:	78fb      	ldrb	r3, [r7, #3]
 810de5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810de60:	00db      	lsls	r3, r3, #3
 810de62:	687a      	ldr	r2, [r7, #4]
 810de64:	4413      	add	r3, r2
 810de66:	3304      	adds	r3, #4
 810de68:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810de6a:	68bb      	ldr	r3, [r7, #8]
 810de6c:	78fa      	ldrb	r2, [r7, #3]
 810de6e:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810de70:	693b      	ldr	r3, [r7, #16]
 810de72:	b2da      	uxtb	r2, r3
 810de74:	68bb      	ldr	r3, [r7, #8]
 810de76:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810de78:	68bb      	ldr	r3, [r7, #8]
 810de7a:	68fa      	ldr	r2, [r7, #12]
 810de7c:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810de7e:	687a      	ldr	r2, [r7, #4]
 810de80:	697b      	ldr	r3, [r7, #20]
 810de82:	3380      	adds	r3, #128	; 0x80
 810de84:	009b      	lsls	r3, r3, #2
 810de86:	4413      	add	r3, r2
 810de88:	68ba      	ldr	r2, [r7, #8]
 810de8a:	605a      	str	r2, [r3, #4]
	return true;
 810de8c:	2301      	movs	r3, #1
}
 810de8e:	4618      	mov	r0, r3
 810de90:	3718      	adds	r7, #24
 810de92:	46bd      	mov	sp, r7
 810de94:	bd80      	pop	{r7, pc}
 810de96:	bf00      	nop
 810de98:	08112c4c 	.word	0x08112c4c

0810de9c <_ZN10MessageBus6defineI14ProgressPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810de9c:	b580      	push	{r7, lr}
 810de9e:	b086      	sub	sp, #24
 810dea0:	af00      	add	r7, sp, #0
 810dea2:	6078      	str	r0, [r7, #4]
 810dea4:	460b      	mov	r3, r1
 810dea6:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810dea8:	2305      	movs	r3, #5
 810deaa:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810deac:	4829      	ldr	r0, [pc, #164]	; (810df54 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xb8>)
 810deae:	f7ff fda5 	bl	810d9fc <_ZNKSt9type_info9hash_codeEv>
 810deb2:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810deb4:	68fb      	ldr	r3, [r7, #12]
 810deb6:	b2db      	uxtb	r3, r3
 810deb8:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810deba:	78fb      	ldrb	r3, [r7, #3]
 810debc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810dec0:	687a      	ldr	r2, [r7, #4]
 810dec2:	00db      	lsls	r3, r3, #3
 810dec4:	4413      	add	r3, r2
 810dec6:	689b      	ldr	r3, [r3, #8]
 810dec8:	2b00      	cmp	r3, #0
 810deca:	d001      	beq.n	810ded0 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x34>
		return false; // Packet ID already in use
 810decc:	2300      	movs	r3, #0
 810dece:	e03c      	b.n	810df4a <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810ded0:	693b      	ldr	r3, [r7, #16]
 810ded2:	2bff      	cmp	r3, #255	; 0xff
 810ded4:	d901      	bls.n	810deda <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x3e>
		return false; // Packet size too large
 810ded6:	2300      	movs	r3, #0
 810ded8:	e037      	b.n	810df4a <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810deda:	687a      	ldr	r2, [r7, #4]
 810dedc:	697b      	ldr	r3, [r7, #20]
 810dede:	3380      	adds	r3, #128	; 0x80
 810dee0:	009b      	lsls	r3, r3, #2
 810dee2:	4413      	add	r3, r2
 810dee4:	685b      	ldr	r3, [r3, #4]
 810dee6:	2b00      	cmp	r3, #0
 810dee8:	d015      	beq.n	810df16 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810deea:	687a      	ldr	r2, [r7, #4]
 810deec:	697b      	ldr	r3, [r7, #20]
 810deee:	3380      	adds	r3, #128	; 0x80
 810def0:	009b      	lsls	r3, r3, #2
 810def2:	4413      	add	r3, r2
 810def4:	685b      	ldr	r3, [r3, #4]
 810def6:	685b      	ldr	r3, [r3, #4]
 810def8:	68fa      	ldr	r2, [r7, #12]
 810defa:	429a      	cmp	r2, r3
 810defc:	d101      	bne.n	810df02 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x66>
			return false; // Packet type already defined
 810defe:	2300      	movs	r3, #0
 810df00:	e023      	b.n	810df4a <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xae>
		insertion_point++;
 810df02:	697b      	ldr	r3, [r7, #20]
 810df04:	3301      	adds	r3, #1
 810df06:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810df08:	697b      	ldr	r3, [r7, #20]
 810df0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810df0e:	d1e4      	bne.n	810deda <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x3e>
			insertion_point = 0;
 810df10:	2300      	movs	r3, #0
 810df12:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810df14:	e7e1      	b.n	810deda <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810df16:	78fb      	ldrb	r3, [r7, #3]
 810df18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810df1c:	00db      	lsls	r3, r3, #3
 810df1e:	687a      	ldr	r2, [r7, #4]
 810df20:	4413      	add	r3, r2
 810df22:	3304      	adds	r3, #4
 810df24:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810df26:	68bb      	ldr	r3, [r7, #8]
 810df28:	78fa      	ldrb	r2, [r7, #3]
 810df2a:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810df2c:	693b      	ldr	r3, [r7, #16]
 810df2e:	b2da      	uxtb	r2, r3
 810df30:	68bb      	ldr	r3, [r7, #8]
 810df32:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810df34:	68bb      	ldr	r3, [r7, #8]
 810df36:	68fa      	ldr	r2, [r7, #12]
 810df38:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810df3a:	687a      	ldr	r2, [r7, #4]
 810df3c:	697b      	ldr	r3, [r7, #20]
 810df3e:	3380      	adds	r3, #128	; 0x80
 810df40:	009b      	lsls	r3, r3, #2
 810df42:	4413      	add	r3, r2
 810df44:	68ba      	ldr	r2, [r7, #8]
 810df46:	605a      	str	r2, [r3, #4]
	return true;
 810df48:	2301      	movs	r3, #1
}
 810df4a:	4618      	mov	r0, r3
 810df4c:	3718      	adds	r7, #24
 810df4e:	46bd      	mov	sp, r7
 810df50:	bd80      	pop	{r7, pc}
 810df52:	bf00      	nop
 810df54:	08112c30 	.word	0x08112c30

0810df58 <_ZN10MessageBus6defineI10DataPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810df58:	b580      	push	{r7, lr}
 810df5a:	b086      	sub	sp, #24
 810df5c:	af00      	add	r7, sp, #0
 810df5e:	6078      	str	r0, [r7, #4]
 810df60:	460b      	mov	r3, r1
 810df62:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810df64:	2304      	movs	r3, #4
 810df66:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810df68:	4829      	ldr	r0, [pc, #164]	; (810e010 <_ZN10MessageBus6defineI10DataPacketEEbh+0xb8>)
 810df6a:	f7ff fd47 	bl	810d9fc <_ZNKSt9type_info9hash_codeEv>
 810df6e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810df70:	68fb      	ldr	r3, [r7, #12]
 810df72:	b2db      	uxtb	r3, r3
 810df74:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810df76:	78fb      	ldrb	r3, [r7, #3]
 810df78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810df7c:	687a      	ldr	r2, [r7, #4]
 810df7e:	00db      	lsls	r3, r3, #3
 810df80:	4413      	add	r3, r2
 810df82:	689b      	ldr	r3, [r3, #8]
 810df84:	2b00      	cmp	r3, #0
 810df86:	d001      	beq.n	810df8c <_ZN10MessageBus6defineI10DataPacketEEbh+0x34>
		return false; // Packet ID already in use
 810df88:	2300      	movs	r3, #0
 810df8a:	e03c      	b.n	810e006 <_ZN10MessageBus6defineI10DataPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810df8c:	693b      	ldr	r3, [r7, #16]
 810df8e:	2bff      	cmp	r3, #255	; 0xff
 810df90:	d901      	bls.n	810df96 <_ZN10MessageBus6defineI10DataPacketEEbh+0x3e>
		return false; // Packet size too large
 810df92:	2300      	movs	r3, #0
 810df94:	e037      	b.n	810e006 <_ZN10MessageBus6defineI10DataPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810df96:	687a      	ldr	r2, [r7, #4]
 810df98:	697b      	ldr	r3, [r7, #20]
 810df9a:	3380      	adds	r3, #128	; 0x80
 810df9c:	009b      	lsls	r3, r3, #2
 810df9e:	4413      	add	r3, r2
 810dfa0:	685b      	ldr	r3, [r3, #4]
 810dfa2:	2b00      	cmp	r3, #0
 810dfa4:	d015      	beq.n	810dfd2 <_ZN10MessageBus6defineI10DataPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810dfa6:	687a      	ldr	r2, [r7, #4]
 810dfa8:	697b      	ldr	r3, [r7, #20]
 810dfaa:	3380      	adds	r3, #128	; 0x80
 810dfac:	009b      	lsls	r3, r3, #2
 810dfae:	4413      	add	r3, r2
 810dfb0:	685b      	ldr	r3, [r3, #4]
 810dfb2:	685b      	ldr	r3, [r3, #4]
 810dfb4:	68fa      	ldr	r2, [r7, #12]
 810dfb6:	429a      	cmp	r2, r3
 810dfb8:	d101      	bne.n	810dfbe <_ZN10MessageBus6defineI10DataPacketEEbh+0x66>
			return false; // Packet type already defined
 810dfba:	2300      	movs	r3, #0
 810dfbc:	e023      	b.n	810e006 <_ZN10MessageBus6defineI10DataPacketEEbh+0xae>
		insertion_point++;
 810dfbe:	697b      	ldr	r3, [r7, #20]
 810dfc0:	3301      	adds	r3, #1
 810dfc2:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810dfc4:	697b      	ldr	r3, [r7, #20]
 810dfc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810dfca:	d1e4      	bne.n	810df96 <_ZN10MessageBus6defineI10DataPacketEEbh+0x3e>
			insertion_point = 0;
 810dfcc:	2300      	movs	r3, #0
 810dfce:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810dfd0:	e7e1      	b.n	810df96 <_ZN10MessageBus6defineI10DataPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810dfd2:	78fb      	ldrb	r3, [r7, #3]
 810dfd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810dfd8:	00db      	lsls	r3, r3, #3
 810dfda:	687a      	ldr	r2, [r7, #4]
 810dfdc:	4413      	add	r3, r2
 810dfde:	3304      	adds	r3, #4
 810dfe0:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810dfe2:	68bb      	ldr	r3, [r7, #8]
 810dfe4:	78fa      	ldrb	r2, [r7, #3]
 810dfe6:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810dfe8:	693b      	ldr	r3, [r7, #16]
 810dfea:	b2da      	uxtb	r2, r3
 810dfec:	68bb      	ldr	r3, [r7, #8]
 810dfee:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810dff0:	68bb      	ldr	r3, [r7, #8]
 810dff2:	68fa      	ldr	r2, [r7, #12]
 810dff4:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810dff6:	687a      	ldr	r2, [r7, #4]
 810dff8:	697b      	ldr	r3, [r7, #20]
 810dffa:	3380      	adds	r3, #128	; 0x80
 810dffc:	009b      	lsls	r3, r3, #2
 810dffe:	4413      	add	r3, r2
 810e000:	68ba      	ldr	r2, [r7, #8]
 810e002:	605a      	str	r2, [r3, #4]
	return true;
 810e004:	2301      	movs	r3, #1
}
 810e006:	4618      	mov	r0, r3
 810e008:	3718      	adds	r7, #24
 810e00a:	46bd      	mov	sp, r7
 810e00c:	bd80      	pop	{r7, pc}
 810e00e:	bf00      	nop
 810e010:	08112c18 	.word	0x08112c18

0810e014 <_ZN10MessageBus6defineI13MessagePacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810e014:	b580      	push	{r7, lr}
 810e016:	b086      	sub	sp, #24
 810e018:	af00      	add	r7, sp, #0
 810e01a:	6078      	str	r0, [r7, #4]
 810e01c:	460b      	mov	r3, r1
 810e01e:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810e020:	2380      	movs	r3, #128	; 0x80
 810e022:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810e024:	4829      	ldr	r0, [pc, #164]	; (810e0cc <_ZN10MessageBus6defineI13MessagePacketEEbh+0xb8>)
 810e026:	f7ff fce9 	bl	810d9fc <_ZNKSt9type_info9hash_codeEv>
 810e02a:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810e02c:	68fb      	ldr	r3, [r7, #12]
 810e02e:	b2db      	uxtb	r3, r3
 810e030:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810e032:	78fb      	ldrb	r3, [r7, #3]
 810e034:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810e038:	687a      	ldr	r2, [r7, #4]
 810e03a:	00db      	lsls	r3, r3, #3
 810e03c:	4413      	add	r3, r2
 810e03e:	689b      	ldr	r3, [r3, #8]
 810e040:	2b00      	cmp	r3, #0
 810e042:	d001      	beq.n	810e048 <_ZN10MessageBus6defineI13MessagePacketEEbh+0x34>
		return false; // Packet ID already in use
 810e044:	2300      	movs	r3, #0
 810e046:	e03c      	b.n	810e0c2 <_ZN10MessageBus6defineI13MessagePacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810e048:	693b      	ldr	r3, [r7, #16]
 810e04a:	2bff      	cmp	r3, #255	; 0xff
 810e04c:	d901      	bls.n	810e052 <_ZN10MessageBus6defineI13MessagePacketEEbh+0x3e>
		return false; // Packet size too large
 810e04e:	2300      	movs	r3, #0
 810e050:	e037      	b.n	810e0c2 <_ZN10MessageBus6defineI13MessagePacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810e052:	687a      	ldr	r2, [r7, #4]
 810e054:	697b      	ldr	r3, [r7, #20]
 810e056:	3380      	adds	r3, #128	; 0x80
 810e058:	009b      	lsls	r3, r3, #2
 810e05a:	4413      	add	r3, r2
 810e05c:	685b      	ldr	r3, [r3, #4]
 810e05e:	2b00      	cmp	r3, #0
 810e060:	d015      	beq.n	810e08e <_ZN10MessageBus6defineI13MessagePacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810e062:	687a      	ldr	r2, [r7, #4]
 810e064:	697b      	ldr	r3, [r7, #20]
 810e066:	3380      	adds	r3, #128	; 0x80
 810e068:	009b      	lsls	r3, r3, #2
 810e06a:	4413      	add	r3, r2
 810e06c:	685b      	ldr	r3, [r3, #4]
 810e06e:	685b      	ldr	r3, [r3, #4]
 810e070:	68fa      	ldr	r2, [r7, #12]
 810e072:	429a      	cmp	r2, r3
 810e074:	d101      	bne.n	810e07a <_ZN10MessageBus6defineI13MessagePacketEEbh+0x66>
			return false; // Packet type already defined
 810e076:	2300      	movs	r3, #0
 810e078:	e023      	b.n	810e0c2 <_ZN10MessageBus6defineI13MessagePacketEEbh+0xae>
		insertion_point++;
 810e07a:	697b      	ldr	r3, [r7, #20]
 810e07c:	3301      	adds	r3, #1
 810e07e:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810e080:	697b      	ldr	r3, [r7, #20]
 810e082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810e086:	d1e4      	bne.n	810e052 <_ZN10MessageBus6defineI13MessagePacketEEbh+0x3e>
			insertion_point = 0;
 810e088:	2300      	movs	r3, #0
 810e08a:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810e08c:	e7e1      	b.n	810e052 <_ZN10MessageBus6defineI13MessagePacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810e08e:	78fb      	ldrb	r3, [r7, #3]
 810e090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810e094:	00db      	lsls	r3, r3, #3
 810e096:	687a      	ldr	r2, [r7, #4]
 810e098:	4413      	add	r3, r2
 810e09a:	3304      	adds	r3, #4
 810e09c:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810e09e:	68bb      	ldr	r3, [r7, #8]
 810e0a0:	78fa      	ldrb	r2, [r7, #3]
 810e0a2:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810e0a4:	693b      	ldr	r3, [r7, #16]
 810e0a6:	b2da      	uxtb	r2, r3
 810e0a8:	68bb      	ldr	r3, [r7, #8]
 810e0aa:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810e0ac:	68bb      	ldr	r3, [r7, #8]
 810e0ae:	68fa      	ldr	r2, [r7, #12]
 810e0b0:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810e0b2:	687a      	ldr	r2, [r7, #4]
 810e0b4:	697b      	ldr	r3, [r7, #20]
 810e0b6:	3380      	adds	r3, #128	; 0x80
 810e0b8:	009b      	lsls	r3, r3, #2
 810e0ba:	4413      	add	r3, r2
 810e0bc:	68ba      	ldr	r2, [r7, #8]
 810e0be:	605a      	str	r2, [r3, #4]
	return true;
 810e0c0:	2301      	movs	r3, #1
}
 810e0c2:	4618      	mov	r0, r3
 810e0c4:	3718      	adds	r7, #24
 810e0c6:	46bd      	mov	sp, r7
 810e0c8:	bd80      	pop	{r7, pc}
 810e0ca:	bf00      	nop
 810e0cc:	08112c00 	.word	0x08112c00

0810e0d0 <_ZN10MessageBus6defineI11ErrorPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810e0d0:	b580      	push	{r7, lr}
 810e0d2:	b086      	sub	sp, #24
 810e0d4:	af00      	add	r7, sp, #0
 810e0d6:	6078      	str	r0, [r7, #4]
 810e0d8:	460b      	mov	r3, r1
 810e0da:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810e0dc:	2301      	movs	r3, #1
 810e0de:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810e0e0:	4829      	ldr	r0, [pc, #164]	; (810e188 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xb8>)
 810e0e2:	f7ff fc8b 	bl	810d9fc <_ZNKSt9type_info9hash_codeEv>
 810e0e6:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810e0e8:	68fb      	ldr	r3, [r7, #12]
 810e0ea:	b2db      	uxtb	r3, r3
 810e0ec:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810e0ee:	78fb      	ldrb	r3, [r7, #3]
 810e0f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810e0f4:	687a      	ldr	r2, [r7, #4]
 810e0f6:	00db      	lsls	r3, r3, #3
 810e0f8:	4413      	add	r3, r2
 810e0fa:	689b      	ldr	r3, [r3, #8]
 810e0fc:	2b00      	cmp	r3, #0
 810e0fe:	d001      	beq.n	810e104 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x34>
		return false; // Packet ID already in use
 810e100:	2300      	movs	r3, #0
 810e102:	e03c      	b.n	810e17e <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810e104:	693b      	ldr	r3, [r7, #16]
 810e106:	2bff      	cmp	r3, #255	; 0xff
 810e108:	d901      	bls.n	810e10e <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x3e>
		return false; // Packet size too large
 810e10a:	2300      	movs	r3, #0
 810e10c:	e037      	b.n	810e17e <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810e10e:	687a      	ldr	r2, [r7, #4]
 810e110:	697b      	ldr	r3, [r7, #20]
 810e112:	3380      	adds	r3, #128	; 0x80
 810e114:	009b      	lsls	r3, r3, #2
 810e116:	4413      	add	r3, r2
 810e118:	685b      	ldr	r3, [r3, #4]
 810e11a:	2b00      	cmp	r3, #0
 810e11c:	d015      	beq.n	810e14a <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810e11e:	687a      	ldr	r2, [r7, #4]
 810e120:	697b      	ldr	r3, [r7, #20]
 810e122:	3380      	adds	r3, #128	; 0x80
 810e124:	009b      	lsls	r3, r3, #2
 810e126:	4413      	add	r3, r2
 810e128:	685b      	ldr	r3, [r3, #4]
 810e12a:	685b      	ldr	r3, [r3, #4]
 810e12c:	68fa      	ldr	r2, [r7, #12]
 810e12e:	429a      	cmp	r2, r3
 810e130:	d101      	bne.n	810e136 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x66>
			return false; // Packet type already defined
 810e132:	2300      	movs	r3, #0
 810e134:	e023      	b.n	810e17e <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xae>
		insertion_point++;
 810e136:	697b      	ldr	r3, [r7, #20]
 810e138:	3301      	adds	r3, #1
 810e13a:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810e13c:	697b      	ldr	r3, [r7, #20]
 810e13e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810e142:	d1e4      	bne.n	810e10e <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x3e>
			insertion_point = 0;
 810e144:	2300      	movs	r3, #0
 810e146:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810e148:	e7e1      	b.n	810e10e <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810e14a:	78fb      	ldrb	r3, [r7, #3]
 810e14c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810e150:	00db      	lsls	r3, r3, #3
 810e152:	687a      	ldr	r2, [r7, #4]
 810e154:	4413      	add	r3, r2
 810e156:	3304      	adds	r3, #4
 810e158:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810e15a:	68bb      	ldr	r3, [r7, #8]
 810e15c:	78fa      	ldrb	r2, [r7, #3]
 810e15e:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810e160:	693b      	ldr	r3, [r7, #16]
 810e162:	b2da      	uxtb	r2, r3
 810e164:	68bb      	ldr	r3, [r7, #8]
 810e166:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810e168:	68bb      	ldr	r3, [r7, #8]
 810e16a:	68fa      	ldr	r2, [r7, #12]
 810e16c:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810e16e:	687a      	ldr	r2, [r7, #4]
 810e170:	697b      	ldr	r3, [r7, #20]
 810e172:	3380      	adds	r3, #128	; 0x80
 810e174:	009b      	lsls	r3, r3, #2
 810e176:	4413      	add	r3, r2
 810e178:	68ba      	ldr	r2, [r7, #8]
 810e17a:	605a      	str	r2, [r3, #4]
	return true;
 810e17c:	2301      	movs	r3, #1
}
 810e17e:	4618      	mov	r0, r3
 810e180:	3718      	adds	r7, #24
 810e182:	46bd      	mov	sp, r7
 810e184:	bd80      	pop	{r7, pc}
 810e186:	bf00      	nop
 810e188:	08112be8 	.word	0x08112be8

0810e18c <_ZN10MessageBus4sendEP16PacketDefinitionPh>:
	PacketDefinition* def = retrieve(hash);

	return send(def, (uint8_t*) message);
}

bool MessageBus::send(PacketDefinition* def, uint8_t* data) {
 810e18c:	b580      	push	{r7, lr}
 810e18e:	b086      	sub	sp, #24
 810e190:	af00      	add	r7, sp, #0
 810e192:	60f8      	str	r0, [r7, #12]
 810e194:	60b9      	str	r1, [r7, #8]
 810e196:	607a      	str	r2, [r7, #4]
	if(def != nullptr) {
 810e198:	68bb      	ldr	r3, [r7, #8]
 810e19a:	2b00      	cmp	r3, #0
 810e19c:	d031      	beq.n	810e202 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x76>
		uint32_t data_bytes_written = 0;
 810e19e:	2300      	movs	r3, #0
 810e1a0:	617b      	str	r3, [r7, #20]

		while(data_bytes_written < def->size) {
 810e1a2:	68bb      	ldr	r3, [r7, #8]
 810e1a4:	785b      	ldrb	r3, [r3, #1]
 810e1a6:	461a      	mov	r2, r3
 810e1a8:	697b      	ldr	r3, [r7, #20]
 810e1aa:	4293      	cmp	r3, r2
 810e1ac:	d227      	bcs.n	810e1fe <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x72>
			append(&def->id, 1); // Write the packet ID for each transmission frame.
 810e1ae:	68fb      	ldr	r3, [r7, #12]
 810e1b0:	681b      	ldr	r3, [r3, #0]
 810e1b2:	3308      	adds	r3, #8
 810e1b4:	681b      	ldr	r3, [r3, #0]
 810e1b6:	68b9      	ldr	r1, [r7, #8]
 810e1b8:	2201      	movs	r2, #1
 810e1ba:	68f8      	ldr	r0, [r7, #12]
 810e1bc:	4798      	blx	r3
							     // This is only to facilitate the packet reconstruction and should not increment data_bytes_written.

			uint32_t new_bytes = append(data + data_bytes_written, def->size - data_bytes_written); // Send the data
 810e1be:	68fb      	ldr	r3, [r7, #12]
 810e1c0:	681b      	ldr	r3, [r3, #0]
 810e1c2:	3308      	adds	r3, #8
 810e1c4:	681b      	ldr	r3, [r3, #0]
 810e1c6:	6879      	ldr	r1, [r7, #4]
 810e1c8:	697a      	ldr	r2, [r7, #20]
 810e1ca:	4411      	add	r1, r2
 810e1cc:	68ba      	ldr	r2, [r7, #8]
 810e1ce:	7852      	ldrb	r2, [r2, #1]
 810e1d0:	4610      	mov	r0, r2
 810e1d2:	697a      	ldr	r2, [r7, #20]
 810e1d4:	1a82      	subs	r2, r0, r2
 810e1d6:	68f8      	ldr	r0, [r7, #12]
 810e1d8:	4798      	blx	r3
 810e1da:	4603      	mov	r3, r0
 810e1dc:	613b      	str	r3, [r7, #16]

			if(new_bytes == 0) {
 810e1de:	693b      	ldr	r3, [r7, #16]
 810e1e0:	2b00      	cmp	r3, #0
 810e1e2:	d101      	bne.n	810e1e8 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x5c>
				return false;
 810e1e4:	2300      	movs	r3, #0
 810e1e6:	e00d      	b.n	810e204 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x78>
			} else {
				transmit();
 810e1e8:	68fb      	ldr	r3, [r7, #12]
 810e1ea:	681b      	ldr	r3, [r3, #0]
 810e1ec:	330c      	adds	r3, #12
 810e1ee:	681b      	ldr	r3, [r3, #0]
 810e1f0:	68f8      	ldr	r0, [r7, #12]
 810e1f2:	4798      	blx	r3
				data_bytes_written += new_bytes;
 810e1f4:	697a      	ldr	r2, [r7, #20]
 810e1f6:	693b      	ldr	r3, [r7, #16]
 810e1f8:	4413      	add	r3, r2
 810e1fa:	617b      	str	r3, [r7, #20]
		while(data_bytes_written < def->size) {
 810e1fc:	e7d1      	b.n	810e1a2 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x16>
			}
		}

		return true;
 810e1fe:	2301      	movs	r3, #1
 810e200:	e000      	b.n	810e204 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x78>
	}

	return false;
 810e202:	2300      	movs	r3, #0
}
 810e204:	4618      	mov	r0, r3
 810e206:	3718      	adds	r7, #24
 810e208:	46bd      	mov	sp, r7
 810e20a:	bd80      	pop	{r7, pc}

0810e20c <_ZN10MessageBus7receiveEhPhm>:
 * Handles the reception of a message.
 *
 * Provided an external thread calls this method with a buffer to the next incoming message,
 * dispatches the message to the appropriate message handlers.
 */
void MessageBus::receive(uint8_t sender_id, uint8_t *pointer, uint32_t length) {
 810e20c:	b580      	push	{r7, lr}
 810e20e:	b088      	sub	sp, #32
 810e210:	af00      	add	r7, sp, #0
 810e212:	60f8      	str	r0, [r7, #12]
 810e214:	607a      	str	r2, [r7, #4]
 810e216:	603b      	str	r3, [r7, #0]
 810e218:	460b      	mov	r3, r1
 810e21a:	72fb      	strb	r3, [r7, #11]
	if(length > 0) {
 810e21c:	683b      	ldr	r3, [r7, #0]
 810e21e:	2b00      	cmp	r3, #0
 810e220:	d075      	beq.n	810e30e <_ZN10MessageBus7receiveEhPhm+0x102>
		// Safe-cast verification
		uint8_t packet_id = *pointer++;
 810e222:	687b      	ldr	r3, [r7, #4]
 810e224:	1c5a      	adds	r2, r3, #1
 810e226:	607a      	str	r2, [r7, #4]
 810e228:	781b      	ldrb	r3, [r3, #0]
 810e22a:	777b      	strb	r3, [r7, #29]

		PacketDefinition* def = &definitions_by_id[packet_id & 0b00111111];
 810e22c:	7f7b      	ldrb	r3, [r7, #29]
 810e22e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810e232:	00db      	lsls	r3, r3, #3
 810e234:	68fa      	ldr	r2, [r7, #12]
 810e236:	4413      	add	r3, r2
 810e238:	3304      	adds	r3, #4
 810e23a:	61bb      	str	r3, [r7, #24]
		ReconstructionBuffer* indexable_buffer = &reconstruction_buffers[sender_id];
 810e23c:	7afb      	ldrb	r3, [r7, #11]
 810e23e:	3306      	adds	r3, #6
 810e240:	021b      	lsls	r3, r3, #8
 810e242:	68fa      	ldr	r2, [r7, #12]
 810e244:	4413      	add	r3, r2
 810e246:	3304      	adds	r3, #4
 810e248:	617b      	str	r3, [r7, #20]

		if(indexable_buffer->index + length > max_packet_size) {
 810e24a:	697b      	ldr	r3, [r7, #20]
 810e24c:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 810e250:	461a      	mov	r2, r3
 810e252:	683b      	ldr	r3, [r7, #0]
 810e254:	4413      	add	r3, r2
 810e256:	2bff      	cmp	r3, #255	; 0xff
 810e258:	d904      	bls.n	810e264 <_ZN10MessageBus7receiveEhPhm+0x58>
			indexable_buffer->index = 0; // Corrupted packet
 810e25a:	697b      	ldr	r3, [r7, #20]
 810e25c:	2200      	movs	r2, #0
 810e25e:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
			return;
 810e262:	e054      	b.n	810e30e <_ZN10MessageBus7receiveEhPhm+0x102>
		}

		for(uint16_t i = 0; i < length - 1; i++) {
 810e264:	2300      	movs	r3, #0
 810e266:	83fb      	strh	r3, [r7, #30]
 810e268:	8bfa      	ldrh	r2, [r7, #30]
 810e26a:	683b      	ldr	r3, [r7, #0]
 810e26c:	3b01      	subs	r3, #1
 810e26e:	429a      	cmp	r2, r3
 810e270:	d211      	bcs.n	810e296 <_ZN10MessageBus7receiveEhPhm+0x8a>
			indexable_buffer->buffer[indexable_buffer->index++] = *pointer++;
 810e272:	687b      	ldr	r3, [r7, #4]
 810e274:	1c5a      	adds	r2, r3, #1
 810e276:	607a      	str	r2, [r7, #4]
 810e278:	697a      	ldr	r2, [r7, #20]
 810e27a:	f892 20ff 	ldrb.w	r2, [r2, #255]	; 0xff
 810e27e:	1c51      	adds	r1, r2, #1
 810e280:	b2c8      	uxtb	r0, r1
 810e282:	6979      	ldr	r1, [r7, #20]
 810e284:	f881 00ff 	strb.w	r0, [r1, #255]	; 0xff
 810e288:	7819      	ldrb	r1, [r3, #0]
 810e28a:	697b      	ldr	r3, [r7, #20]
 810e28c:	5499      	strb	r1, [r3, r2]
		for(uint16_t i = 0; i < length - 1; i++) {
 810e28e:	8bfb      	ldrh	r3, [r7, #30]
 810e290:	3301      	adds	r3, #1
 810e292:	83fb      	strh	r3, [r7, #30]
 810e294:	e7e8      	b.n	810e268 <_ZN10MessageBus7receiveEhPhm+0x5c>
		}

		if(indexable_buffer->index >= def->size) {
 810e296:	697b      	ldr	r3, [r7, #20]
 810e298:	f893 20ff 	ldrb.w	r2, [r3, #255]	; 0xff
 810e29c:	69bb      	ldr	r3, [r7, #24]
 810e29e:	785b      	ldrb	r3, [r3, #1]
 810e2a0:	429a      	cmp	r2, r3
 810e2a2:	d334      	bcc.n	810e30e <_ZN10MessageBus7receiveEhPhm+0x102>
			// Packet is complete. Forward buffer to handler.

			if(handlers[packet_id & 0b00111111] != nullptr) {
 810e2a4:	7f7b      	ldrb	r3, [r7, #29]
 810e2a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810e2aa:	68fa      	ldr	r2, [r7, #12]
 810e2ac:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 810e2b0:	009b      	lsls	r3, r3, #2
 810e2b2:	4413      	add	r3, r2
 810e2b4:	685b      	ldr	r3, [r3, #4]
 810e2b6:	2b00      	cmp	r3, #0
 810e2b8:	d00c      	beq.n	810e2d4 <_ZN10MessageBus7receiveEhPhm+0xc8>
				handlers[packet_id & 0b00111111](sender_id, indexable_buffer->buffer);
 810e2ba:	7f7b      	ldrb	r3, [r7, #29]
 810e2bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810e2c0:	68fa      	ldr	r2, [r7, #12]
 810e2c2:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 810e2c6:	009b      	lsls	r3, r3, #2
 810e2c8:	4413      	add	r3, r2
 810e2ca:	685b      	ldr	r3, [r3, #4]
 810e2cc:	6979      	ldr	r1, [r7, #20]
 810e2ce:	7afa      	ldrb	r2, [r7, #11]
 810e2d0:	4610      	mov	r0, r2
 810e2d2:	4798      	blx	r3
			}

			if(forwarders[packet_id & 0b00111111] != nullptr) {
 810e2d4:	7f7b      	ldrb	r3, [r7, #29]
 810e2d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810e2da:	68fa      	ldr	r2, [r7, #12]
 810e2dc:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 810e2e0:	009b      	lsls	r3, r3, #2
 810e2e2:	4413      	add	r3, r2
 810e2e4:	685b      	ldr	r3, [r3, #4]
 810e2e6:	2b00      	cmp	r3, #0
 810e2e8:	d00d      	beq.n	810e306 <_ZN10MessageBus7receiveEhPhm+0xfa>
				forwarders[packet_id & 0b00111111]->send(def, indexable_buffer->buffer);
 810e2ea:	7f7b      	ldrb	r3, [r7, #29]
 810e2ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810e2f0:	68fa      	ldr	r2, [r7, #12]
 810e2f2:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 810e2f6:	009b      	lsls	r3, r3, #2
 810e2f8:	4413      	add	r3, r2
 810e2fa:	685b      	ldr	r3, [r3, #4]
 810e2fc:	697a      	ldr	r2, [r7, #20]
 810e2fe:	69b9      	ldr	r1, [r7, #24]
 810e300:	4618      	mov	r0, r3
 810e302:	f7ff ff43 	bl	810e18c <_ZN10MessageBus4sendEP16PacketDefinitionPh>
			}

			indexable_buffer->index = 0;
 810e306:	697b      	ldr	r3, [r7, #20]
 810e308:	2200      	movs	r2, #0
 810e30a:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
		}
	}
}
 810e30e:	3720      	adds	r7, #32
 810e310:	46bd      	mov	sp, r7
 810e312:	bd80      	pop	{r7, pc}

0810e314 <_ZN10NetworkBusC1EP8IODriver>:


#include "NetworkBus.h"
#include "Protocol/Protocol.h"

NetworkBus::NetworkBus(IODriver* driver) : IOBus(driver, network_frame, sizeof(network_frame)) {
 810e314:	b580      	push	{r7, lr}
 810e316:	b082      	sub	sp, #8
 810e318:	af00      	add	r7, sp, #0
 810e31a:	6078      	str	r0, [r7, #4]
 810e31c:	6039      	str	r1, [r7, #0]
 810e31e:	6878      	ldr	r0, [r7, #4]
 810e320:	687b      	ldr	r3, [r7, #4]
 810e322:	f503 4290 	add.w	r2, r3, #18432	; 0x4800
 810e326:	3211      	adds	r2, #17
 810e328:	f44f 7380 	mov.w	r3, #256	; 0x100
 810e32c:	6839      	ldr	r1, [r7, #0]
 810e32e:	f7fe fabb 	bl	810c8a8 <_ZN5IOBusC1EP8IODriverPhm>
 810e332:	4a1d      	ldr	r2, [pc, #116]	; (810e3a8 <_ZN10NetworkBusC1EP8IODriver+0x94>)
 810e334:	687b      	ldr	r3, [r7, #4]
 810e336:	601a      	str	r2, [r3, #0]
	define<PingPacket>(0);
 810e338:	687b      	ldr	r3, [r7, #4]
 810e33a:	2100      	movs	r1, #0
 810e33c:	4618      	mov	r0, r3
 810e33e:	f7ff fb79 	bl	810da34 <_ZN10MessageBus6defineI10PingPacketEEbh>
	define<ConnectPacket>(1);
 810e342:	687b      	ldr	r3, [r7, #4]
 810e344:	2101      	movs	r1, #1
 810e346:	4618      	mov	r0, r3
 810e348:	f7ff fbd2 	bl	810daf0 <_ZN10MessageBus6defineI13ConnectPacketEEbh>
	define<DisconnectPacket>(2);
 810e34c:	687b      	ldr	r3, [r7, #4]
 810e34e:	2102      	movs	r1, #2
 810e350:	4618      	mov	r0, r3
 810e352:	f7ff fc2b 	bl	810dbac <_ZN10MessageBus6defineI16DisconnectPacketEEbh>
	define<RequestPacket>(3);
 810e356:	687b      	ldr	r3, [r7, #4]
 810e358:	2103      	movs	r1, #3
 810e35a:	4618      	mov	r0, r3
 810e35c:	f7ff fc84 	bl	810dc68 <_ZN10MessageBus6defineI13RequestPacketEEbh>
	define<AcknowledgePacket>(4);
 810e360:	687b      	ldr	r3, [r7, #4]
 810e362:	2104      	movs	r1, #4
 810e364:	4618      	mov	r0, r3
 810e366:	f7ff fcdd 	bl	810dd24 <_ZN10MessageBus6defineI17AcknowledgePacketEEbh>
	define<ResponsePacket>(5);
 810e36a:	687b      	ldr	r3, [r7, #4]
 810e36c:	2105      	movs	r1, #5
 810e36e:	4618      	mov	r0, r3
 810e370:	f7ff fd36 	bl	810dde0 <_ZN10MessageBus6defineI14ResponsePacketEEbh>
	define<ProgressPacket>(6);
 810e374:	687b      	ldr	r3, [r7, #4]
 810e376:	2106      	movs	r1, #6
 810e378:	4618      	mov	r0, r3
 810e37a:	f7ff fd8f 	bl	810de9c <_ZN10MessageBus6defineI14ProgressPacketEEbh>
	define<DataPacket>(7);
 810e37e:	687b      	ldr	r3, [r7, #4]
 810e380:	2107      	movs	r1, #7
 810e382:	4618      	mov	r0, r3
 810e384:	f7ff fde8 	bl	810df58 <_ZN10MessageBus6defineI10DataPacketEEbh>
	define<MessagePacket>(62);
 810e388:	687b      	ldr	r3, [r7, #4]
 810e38a:	213e      	movs	r1, #62	; 0x3e
 810e38c:	4618      	mov	r0, r3
 810e38e:	f7ff fe41 	bl	810e014 <_ZN10MessageBus6defineI13MessagePacketEEbh>
	define<ErrorPacket>(63);
 810e392:	687b      	ldr	r3, [r7, #4]
 810e394:	213f      	movs	r1, #63	; 0x3f
 810e396:	4618      	mov	r0, r3
 810e398:	f7ff fe9a 	bl	810e0d0 <_ZN10MessageBus6defineI11ErrorPacketEEbh>
}
 810e39c:	687b      	ldr	r3, [r7, #4]
 810e39e:	4618      	mov	r0, r3
 810e3a0:	3708      	adds	r7, #8
 810e3a2:	46bd      	mov	sp, r7
 810e3a4:	bd80      	pop	{r7, pc}
 810e3a6:	bf00      	nop
 810e3a8:	08112cf0 	.word	0x08112cf0

0810e3ac <_ZN10NetworkBusD1Ev>:
#include "IOBus.h"

#define NETWORK_FRAME_SIZE 256


class NetworkBus : public IOBus {
 810e3ac:	b580      	push	{r7, lr}
 810e3ae:	b082      	sub	sp, #8
 810e3b0:	af00      	add	r7, sp, #0
 810e3b2:	6078      	str	r0, [r7, #4]
 810e3b4:	4a05      	ldr	r2, [pc, #20]	; (810e3cc <_ZN10NetworkBusD1Ev+0x20>)
 810e3b6:	687b      	ldr	r3, [r7, #4]
 810e3b8:	601a      	str	r2, [r3, #0]
 810e3ba:	687b      	ldr	r3, [r7, #4]
 810e3bc:	4618      	mov	r0, r3
 810e3be:	f7ff fae5 	bl	810d98c <_ZN5IOBusD1Ev>
 810e3c2:	687b      	ldr	r3, [r7, #4]
 810e3c4:	4618      	mov	r0, r3
 810e3c6:	3708      	adds	r7, #8
 810e3c8:	46bd      	mov	sp, r7
 810e3ca:	bd80      	pop	{r7, pc}
 810e3cc:	08112cf0 	.word	0x08112cf0

0810e3d0 <_ZN10NetworkBusD0Ev>:
 810e3d0:	b580      	push	{r7, lr}
 810e3d2:	b082      	sub	sp, #8
 810e3d4:	af00      	add	r7, sp, #0
 810e3d6:	6078      	str	r0, [r7, #4]
 810e3d8:	6878      	ldr	r0, [r7, #4]
 810e3da:	f7ff ffe7 	bl	810e3ac <_ZN10NetworkBusD1Ev>
 810e3de:	f644 1114 	movw	r1, #18708	; 0x4914
 810e3e2:	6878      	ldr	r0, [r7, #4]
 810e3e4:	f000 fd98 	bl	810ef18 <_ZdlPvj>
 810e3e8:	687b      	ldr	r3, [r7, #4]
 810e3ea:	4618      	mov	r0, r3
 810e3ec:	3708      	adds	r7, #8
 810e3ee:	46bd      	mov	sp, r7
 810e3f0:	bd80      	pop	{r7, pc}

0810e3f2 <_ZN14WatchdogThread4initEv>:
#include "iwdg.h"

#include "Debug/Debug.h"
#include "usart.h"

void WatchdogThread::init() {
 810e3f2:	b480      	push	{r7}
 810e3f4:	b083      	sub	sp, #12
 810e3f6:	af00      	add	r7, sp, #0
 810e3f8:	6078      	str	r0, [r7, #4]

}
 810e3fa:	bf00      	nop
 810e3fc:	370c      	adds	r7, #12
 810e3fe:	46bd      	mov	sp, r7
 810e400:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e404:	4770      	bx	lr

0810e406 <_ZN14WatchdogThread4loopEv>:

void WatchdogThread::loop() {
 810e406:	b580      	push	{r7, lr}
 810e408:	b082      	sub	sp, #8
 810e40a:	af00      	add	r7, sp, #0
 810e40c:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Refresh(watchdog_handle);
 810e40e:	687b      	ldr	r3, [r7, #4]
 810e410:	68db      	ldr	r3, [r3, #12]
 810e412:	4618      	mov	r0, r3
 810e414:	f7f7 fdd0 	bl	8105fb8 <HAL_IWDG_Refresh>
	osDelay(100);
 810e418:	2064      	movs	r0, #100	; 0x64
 810e41a:	f7fa fd45 	bl	8108ea8 <osDelay>
}
 810e41e:	bf00      	nop
 810e420:	3708      	adds	r7, #8
 810e422:	46bd      	mov	sp, r7
 810e424:	bd80      	pop	{r7, pc}
	...

0810e428 <_ZN8BaroData8toStringEPc>:
struct BaroData {
	float temperature;
	float pressure;
	float humidity;

	char* toString(char* buffer) {
 810e428:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 810e42c:	b086      	sub	sp, #24
 810e42e:	af04      	add	r7, sp, #16
 810e430:	6078      	str	r0, [r7, #4]
 810e432:	6039      	str	r1, [r7, #0]
		sprintf(buffer, "Tmp: %f, Prs: %f, Hum: %f", temperature, pressure, humidity);
 810e434:	687b      	ldr	r3, [r7, #4]
 810e436:	681b      	ldr	r3, [r3, #0]
 810e438:	4618      	mov	r0, r3
 810e43a:	f7f2 f91d 	bl	8100678 <__aeabi_f2d>
 810e43e:	4680      	mov	r8, r0
 810e440:	4689      	mov	r9, r1
 810e442:	687b      	ldr	r3, [r7, #4]
 810e444:	685b      	ldr	r3, [r3, #4]
 810e446:	4618      	mov	r0, r3
 810e448:	f7f2 f916 	bl	8100678 <__aeabi_f2d>
 810e44c:	4604      	mov	r4, r0
 810e44e:	460d      	mov	r5, r1
 810e450:	687b      	ldr	r3, [r7, #4]
 810e452:	689b      	ldr	r3, [r3, #8]
 810e454:	4618      	mov	r0, r3
 810e456:	f7f2 f90f 	bl	8100678 <__aeabi_f2d>
 810e45a:	4602      	mov	r2, r0
 810e45c:	460b      	mov	r3, r1
 810e45e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810e462:	e9cd 4500 	strd	r4, r5, [sp]
 810e466:	4642      	mov	r2, r8
 810e468:	464b      	mov	r3, r9
 810e46a:	4905      	ldr	r1, [pc, #20]	; (810e480 <_ZN8BaroData8toStringEPc+0x58>)
 810e46c:	6838      	ldr	r0, [r7, #0]
 810e46e:	f001 fddf 	bl	8110030 <siprintf>
		return buffer;
 810e472:	683b      	ldr	r3, [r7, #0]
	}
 810e474:	4618      	mov	r0, r3
 810e476:	3708      	adds	r7, #8
 810e478:	46bd      	mov	sp, r7
 810e47a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 810e47e:	bf00      	nop
 810e480:	08112918 	.word	0x08112918

0810e484 <_ZN15BarometerThread4initEv>:
#include "Debug/Debug.h"


static char cbuf[256];

void BarometerThread::init() {
 810e484:	b580      	push	{r7, lr}
 810e486:	b082      	sub	sp, #8
 810e488:	af00      	add	r7, sp, #0
 810e48a:	6078      	str	r0, [r7, #4]
	bmp280_init_default_params(&bmp280.params);
 810e48c:	687b      	ldr	r3, [r7, #4]
 810e48e:	3338      	adds	r3, #56	; 0x38
 810e490:	4618      	mov	r0, r3
 810e492:	f7fd f878 	bl	810b586 <bmp280_init_default_params>
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 810e496:	687b      	ldr	r3, [r7, #4]
 810e498:	2276      	movs	r2, #118	; 0x76
 810e49a:	861a      	strh	r2, [r3, #48]	; 0x30
	bmp280.i2c = hi2c;
 810e49c:	687b      	ldr	r3, [r7, #4]
 810e49e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 810e4a0:	687b      	ldr	r3, [r7, #4]
 810e4a2:	635a      	str	r2, [r3, #52]	; 0x34

	while (!bmp280_init(&bmp280, &bmp280.params)) {
 810e4a4:	687b      	ldr	r3, [r7, #4]
 810e4a6:	f103 020c 	add.w	r2, r3, #12
 810e4aa:	687b      	ldr	r3, [r7, #4]
 810e4ac:	3338      	adds	r3, #56	; 0x38
 810e4ae:	4619      	mov	r1, r3
 810e4b0:	4610      	mov	r0, r2
 810e4b2:	f7fd f9e3 	bl	810b87c <bmp280_init>
 810e4b6:	4603      	mov	r3, r0
 810e4b8:	f083 0301 	eor.w	r3, r3, #1
 810e4bc:	b2db      	uxtb	r3, r3
 810e4be:	2b00      	cmp	r3, #0
 810e4c0:	d009      	beq.n	810e4d6 <_ZN15BarometerThread4initEv+0x52>
		println("BMP280 initialization failed");
 810e4c2:	687b      	ldr	r3, [r7, #4]
 810e4c4:	4908      	ldr	r1, [pc, #32]	; (810e4e8 <_ZN15BarometerThread4initEv+0x64>)
 810e4c6:	4618      	mov	r0, r3
 810e4c8:	f000 fc7a 	bl	810edc0 <_ZN6Thread7printlnEPKcz>
	  	osDelay(500);
 810e4cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 810e4d0:	f7fa fcea 	bl	8108ea8 <osDelay>
	while (!bmp280_init(&bmp280, &bmp280.params)) {
 810e4d4:	e7e6      	b.n	810e4a4 <_ZN15BarometerThread4initEv+0x20>
	}

	println("BMP280 initialized");
 810e4d6:	687b      	ldr	r3, [r7, #4]
 810e4d8:	4904      	ldr	r1, [pc, #16]	; (810e4ec <_ZN15BarometerThread4initEv+0x68>)
 810e4da:	4618      	mov	r0, r3
 810e4dc:	f000 fc70 	bl	810edc0 <_ZN6Thread7printlnEPKcz>
}
 810e4e0:	bf00      	nop
 810e4e2:	3708      	adds	r7, #8
 810e4e4:	46bd      	mov	sp, r7
 810e4e6:	bd80      	pop	{r7, pc}
 810e4e8:	08112934 	.word	0x08112934
 810e4ec:	08112954 	.word	0x08112954

0810e4f0 <_ZN15BarometerThread4loopEv>:

void BarometerThread::loop() {
 810e4f0:	b590      	push	{r4, r7, lr}
 810e4f2:	b087      	sub	sp, #28
 810e4f4:	af00      	add	r7, sp, #0
 810e4f6:	6078      	str	r0, [r7, #4]
	BaroData data;

	bmp280_read_float(&bmp280, &data.temperature, &data.pressure, &data.humidity);
 810e4f8:	687b      	ldr	r3, [r7, #4]
 810e4fa:	f103 000c 	add.w	r0, r3, #12
 810e4fe:	f107 030c 	add.w	r3, r7, #12
 810e502:	f103 0408 	add.w	r4, r3, #8
 810e506:	f107 030c 	add.w	r3, r7, #12
 810e50a:	1d1a      	adds	r2, r3, #4
 810e50c:	f107 010c 	add.w	r1, r7, #12
 810e510:	4623      	mov	r3, r4
 810e512:	f7fd fd07 	bl	810bf24 <bmp280_read_float>

	println("%s", data.toString(cbuf));
 810e516:	687c      	ldr	r4, [r7, #4]
 810e518:	f107 030c 	add.w	r3, r7, #12
 810e51c:	490f      	ldr	r1, [pc, #60]	; (810e55c <_ZN15BarometerThread4loopEv+0x6c>)
 810e51e:	4618      	mov	r0, r3
 810e520:	f7ff ff82 	bl	810e428 <_ZN8BaroData8toStringEPc>
 810e524:	4603      	mov	r3, r0
 810e526:	461a      	mov	r2, r3
 810e528:	490d      	ldr	r1, [pc, #52]	; (810e560 <_ZN15BarometerThread4loopEv+0x70>)
 810e52a:	4620      	mov	r0, r4
 810e52c:	f000 fc48 	bl	810edc0 <_ZN6Thread7printlnEPKcz>

	writeToRtosBuffer(data);
 810e530:	edd7 6a03 	vldr	s13, [r7, #12]
 810e534:	ed97 7a04 	vldr	s14, [r7, #16]
 810e538:	edd7 7a05 	vldr	s15, [r7, #20]
 810e53c:	eeb0 0a66 	vmov.f32	s0, s13
 810e540:	eef0 0a47 	vmov.f32	s1, s14
 810e544:	eeb0 1a67 	vmov.f32	s2, s15
 810e548:	6878      	ldr	r0, [r7, #4]
 810e54a:	f000 f80b 	bl	810e564 <_ZN15BarometerThread17writeToRtosBufferE8BaroData>

	osDelay(100);
 810e54e:	2064      	movs	r0, #100	; 0x64
 810e550:	f7fa fcaa 	bl	8108ea8 <osDelay>
}
 810e554:	bf00      	nop
 810e556:	371c      	adds	r7, #28
 810e558:	46bd      	mov	sp, r7
 810e55a:	bd90      	pop	{r4, r7, pc}
 810e55c:	10004628 	.word	0x10004628
 810e560:	08112968 	.word	0x08112968

0810e564 <_ZN15BarometerThread17writeToRtosBufferE8BaroData>:

void BarometerThread::writeToRtosBuffer(BaroData data) {
 810e564:	b480      	push	{r7}
 810e566:	b085      	sub	sp, #20
 810e568:	af00      	add	r7, sp, #0
 810e56a:	60f8      	str	r0, [r7, #12]
 810e56c:	eef0 6a40 	vmov.f32	s13, s0
 810e570:	eeb0 7a60 	vmov.f32	s14, s1
 810e574:	eef0 7a41 	vmov.f32	s15, s2
 810e578:	edc7 6a00 	vstr	s13, [r7]
 810e57c:	ed87 7a01 	vstr	s14, [r7, #4]
 810e580:	edc7 7a02 	vstr	s15, [r7, #8]

}
 810e584:	bf00      	nop
 810e586:	3714      	adds	r7, #20
 810e588:	46bd      	mov	sp, r7
 810e58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e58e:	4770      	bx	lr

0810e590 <_ZN6Vector8toStringEPc>:
	char* toString(char* buffer) {
 810e590:	b580      	push	{r7, lr}
 810e592:	b084      	sub	sp, #16
 810e594:	af02      	add	r7, sp, #8
 810e596:	6078      	str	r0, [r7, #4]
 810e598:	6039      	str	r1, [r7, #0]
		sprintf(buffer, "[%ld %ld %ld]", (int32_t) (1000 * x), (int32_t) (1000 * y), (int32_t) (1000 * z));
 810e59a:	687b      	ldr	r3, [r7, #4]
 810e59c:	edd3 7a00 	vldr	s15, [r3]
 810e5a0:	ed9f 7a13 	vldr	s14, [pc, #76]	; 810e5f0 <_ZN6Vector8toStringEPc+0x60>
 810e5a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 810e5a8:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 810e5ac:	687b      	ldr	r3, [r7, #4]
 810e5ae:	edd3 7a01 	vldr	s15, [r3, #4]
 810e5b2:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 810e5f0 <_ZN6Vector8toStringEPc+0x60>
 810e5b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 810e5ba:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 810e5be:	687b      	ldr	r3, [r7, #4]
 810e5c0:	edd3 7a02 	vldr	s15, [r3, #8]
 810e5c4:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 810e5f0 <_ZN6Vector8toStringEPc+0x60>
 810e5c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 810e5cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810e5d0:	ee17 3a90 	vmov	r3, s15
 810e5d4:	9300      	str	r3, [sp, #0]
 810e5d6:	ee16 3a10 	vmov	r3, s12
 810e5da:	ee16 2a90 	vmov	r2, s13
 810e5de:	4905      	ldr	r1, [pc, #20]	; (810e5f4 <_ZN6Vector8toStringEPc+0x64>)
 810e5e0:	6838      	ldr	r0, [r7, #0]
 810e5e2:	f001 fd25 	bl	8110030 <siprintf>
		return buffer;
 810e5e6:	683b      	ldr	r3, [r7, #0]
	}
 810e5e8:	4618      	mov	r0, r3
 810e5ea:	3708      	adds	r7, #8
 810e5ec:	46bd      	mov	sp, r7
 810e5ee:	bd80      	pop	{r7, pc}
 810e5f0:	447a0000 	.word	0x447a0000
 810e5f4:	0811296c 	.word	0x0811296c

0810e5f8 <_ZN7IMUData8toStringEPc>:
	char* toString(char* buffer) {
 810e5f8:	b5b0      	push	{r4, r5, r7, lr}
 810e5fa:	b084      	sub	sp, #16
 810e5fc:	af02      	add	r7, sp, #8
 810e5fe:	6078      	str	r0, [r7, #4]
 810e600:	6039      	str	r1, [r7, #0]
		sprintf(buffer, "Accel: %s, Gyro: %s, Mag: %s", accel.toString(buf), gyro.toString(buf + 32), mag.toString(buf + 64));
 810e602:	687b      	ldr	r3, [r7, #4]
 810e604:	4910      	ldr	r1, [pc, #64]	; (810e648 <_ZN7IMUData8toStringEPc+0x50>)
 810e606:	4618      	mov	r0, r3
 810e608:	f7ff ffc2 	bl	810e590 <_ZN6Vector8toStringEPc>
 810e60c:	4604      	mov	r4, r0
 810e60e:	687b      	ldr	r3, [r7, #4]
 810e610:	330c      	adds	r3, #12
 810e612:	4a0e      	ldr	r2, [pc, #56]	; (810e64c <_ZN7IMUData8toStringEPc+0x54>)
 810e614:	4611      	mov	r1, r2
 810e616:	4618      	mov	r0, r3
 810e618:	f7ff ffba 	bl	810e590 <_ZN6Vector8toStringEPc>
 810e61c:	4605      	mov	r5, r0
 810e61e:	687b      	ldr	r3, [r7, #4]
 810e620:	3318      	adds	r3, #24
 810e622:	4a0b      	ldr	r2, [pc, #44]	; (810e650 <_ZN7IMUData8toStringEPc+0x58>)
 810e624:	4611      	mov	r1, r2
 810e626:	4618      	mov	r0, r3
 810e628:	f7ff ffb2 	bl	810e590 <_ZN6Vector8toStringEPc>
 810e62c:	4603      	mov	r3, r0
 810e62e:	9300      	str	r3, [sp, #0]
 810e630:	462b      	mov	r3, r5
 810e632:	4622      	mov	r2, r4
 810e634:	4907      	ldr	r1, [pc, #28]	; (810e654 <_ZN7IMUData8toStringEPc+0x5c>)
 810e636:	6838      	ldr	r0, [r7, #0]
 810e638:	f001 fcfa 	bl	8110030 <siprintf>
		return buffer;
 810e63c:	683b      	ldr	r3, [r7, #0]
	}
 810e63e:	4618      	mov	r0, r3
 810e640:	3708      	adds	r7, #8
 810e642:	46bd      	mov	sp, r7
 810e644:	bdb0      	pop	{r4, r5, r7, pc}
 810e646:	bf00      	nop
 810e648:	10004728 	.word	0x10004728
 810e64c:	10004748 	.word	0x10004748
 810e650:	10004768 	.word	0x10004768
 810e654:	0811297c 	.word	0x0811297c

0810e658 <_ZN9IMUThread4initEv>:

#include "Debug/Debug.h"

static char cbuf[256];

void IMUThread::init() {
 810e658:	b580      	push	{r7, lr}
 810e65a:	b082      	sub	sp, #8
 810e65c:	af00      	add	r7, sp, #0
 810e65e:	6078      	str	r0, [r7, #4]
	bno055_assignI2C(this->hi2c);
 810e660:	687b      	ldr	r3, [r7, #4]
 810e662:	68db      	ldr	r3, [r3, #12]
 810e664:	4618      	mov	r0, r3
 810e666:	f7fd ff25 	bl	810c4b4 <bno055_assignI2C>
	bno055_setup();
 810e66a:	f7fd fce7 	bl	810c03c <bno055_setup>
	bno055_setOperationModeNDOF();
 810e66e:	f7fd fcd2 	bl	810c016 <bno055_setOperationModeNDOF>

	while(bno055_getSystemError() != BNO055_SYSTEM_ERROR_NO_ERROR) {
 810e672:	f7fd fd00 	bl	810c076 <bno055_getSystemError>
 810e676:	4603      	mov	r3, r0
 810e678:	2b00      	cmp	r3, #0
 810e67a:	bf14      	ite	ne
 810e67c:	2301      	movne	r3, #1
 810e67e:	2300      	moveq	r3, #0
 810e680:	b2db      	uxtb	r3, r3
 810e682:	2b00      	cmp	r3, #0
 810e684:	d012      	beq.n	810e6ac <_ZN9IMUThread4initEv+0x54>
		osDelay(500);
 810e686:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 810e68a:	f7fa fc0d 	bl	8108ea8 <osDelay>
		println("BNO055 initialization failed");
 810e68e:	687b      	ldr	r3, [r7, #4]
 810e690:	490b      	ldr	r1, [pc, #44]	; (810e6c0 <_ZN9IMUThread4initEv+0x68>)
 810e692:	4618      	mov	r0, r3
 810e694:	f000 fb94 	bl	810edc0 <_ZN6Thread7printlnEPKcz>

		bno055_assignI2C(this->hi2c);
 810e698:	687b      	ldr	r3, [r7, #4]
 810e69a:	68db      	ldr	r3, [r3, #12]
 810e69c:	4618      	mov	r0, r3
 810e69e:	f7fd ff09 	bl	810c4b4 <bno055_assignI2C>
		bno055_setup();
 810e6a2:	f7fd fccb 	bl	810c03c <bno055_setup>
		bno055_setOperationModeNDOF();
 810e6a6:	f7fd fcb6 	bl	810c016 <bno055_setOperationModeNDOF>
	while(bno055_getSystemError() != BNO055_SYSTEM_ERROR_NO_ERROR) {
 810e6aa:	e7e2      	b.n	810e672 <_ZN9IMUThread4initEv+0x1a>
	}

	println("BNO055 initialized");
 810e6ac:	687b      	ldr	r3, [r7, #4]
 810e6ae:	4905      	ldr	r1, [pc, #20]	; (810e6c4 <_ZN9IMUThread4initEv+0x6c>)
 810e6b0:	4618      	mov	r0, r3
 810e6b2:	f000 fb85 	bl	810edc0 <_ZN6Thread7printlnEPKcz>
}
 810e6b6:	bf00      	nop
 810e6b8:	3708      	adds	r7, #8
 810e6ba:	46bd      	mov	sp, r7
 810e6bc:	bd80      	pop	{r7, pc}
 810e6be:	bf00      	nop
 810e6c0:	0811299c 	.word	0x0811299c
 810e6c4:	081129bc 	.word	0x081129bc

0810e6c8 <_ZN9IMUThread4loopEv>:

void IMUThread::loop() {
 810e6c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 810e6ca:	b0a1      	sub	sp, #132	; 0x84
 810e6cc:	af06      	add	r7, sp, #24
 810e6ce:	6078      	str	r0, [r7, #4]
	static IMUData data;

	data.accel = bnoVectorToVector(bno055_getVectorAccelerometer());
 810e6d0:	f7fd fe26 	bl	810c320 <bno055_getVectorAccelerometer>
 810e6d4:	eeb0 4a40 	vmov.f32	s8, s0
 810e6d8:	eef0 4a60 	vmov.f32	s9, s1
 810e6dc:	eeb0 5a41 	vmov.f32	s10, s2
 810e6e0:	eef0 5a61 	vmov.f32	s11, s3
 810e6e4:	eeb0 6a42 	vmov.f32	s12, s4
 810e6e8:	eef0 6a62 	vmov.f32	s13, s5
 810e6ec:	eeb0 7a43 	vmov.f32	s14, s6
 810e6f0:	eef0 7a63 	vmov.f32	s15, s7
 810e6f4:	ed87 4b02 	vstr	d4, [r7, #8]
 810e6f8:	ed87 5b04 	vstr	d5, [r7, #16]
 810e6fc:	ed87 6b06 	vstr	d6, [r7, #24]
 810e700:	ed87 7b08 	vstr	d7, [r7, #32]
 810e704:	4c66      	ldr	r4, [pc, #408]	; (810e8a0 <_ZN9IMUThread4loopEv+0x1d8>)
 810e706:	ed97 4b02 	vldr	d4, [r7, #8]
 810e70a:	ed97 5b04 	vldr	d5, [r7, #16]
 810e70e:	ed97 6b06 	vldr	d6, [r7, #24]
 810e712:	ed97 7b08 	vldr	d7, [r7, #32]
 810e716:	eeb0 0a44 	vmov.f32	s0, s8
 810e71a:	eef0 0a64 	vmov.f32	s1, s9
 810e71e:	eeb0 1a45 	vmov.f32	s2, s10
 810e722:	eef0 1a65 	vmov.f32	s3, s11
 810e726:	eeb0 2a46 	vmov.f32	s4, s12
 810e72a:	eef0 2a66 	vmov.f32	s5, s13
 810e72e:	eeb0 3a47 	vmov.f32	s6, s14
 810e732:	eef0 3a67 	vmov.f32	s7, s15
 810e736:	6878      	ldr	r0, [r7, #4]
 810e738:	f000 f8c8 	bl	810e8cc <_ZN9IMUThread17bnoVectorToVectorE15bno055_vector_t>
 810e73c:	eef0 6a40 	vmov.f32	s13, s0
 810e740:	eeb0 7a60 	vmov.f32	s14, s1
 810e744:	eef0 7a41 	vmov.f32	s15, s2
 810e748:	edc4 6a00 	vstr	s13, [r4]
 810e74c:	ed84 7a01 	vstr	s14, [r4, #4]
 810e750:	edc4 7a02 	vstr	s15, [r4, #8]
	data.gyro = bnoVectorToVector(bno055_getVectorEuler());
 810e754:	f7fd fe27 	bl	810c3a6 <bno055_getVectorEuler>
 810e758:	eeb0 4a40 	vmov.f32	s8, s0
 810e75c:	eef0 4a60 	vmov.f32	s9, s1
 810e760:	eeb0 5a41 	vmov.f32	s10, s2
 810e764:	eef0 5a61 	vmov.f32	s11, s3
 810e768:	eeb0 6a42 	vmov.f32	s12, s4
 810e76c:	eef0 6a62 	vmov.f32	s13, s5
 810e770:	eeb0 7a43 	vmov.f32	s14, s6
 810e774:	eef0 7a63 	vmov.f32	s15, s7
 810e778:	ed87 4b0a 	vstr	d4, [r7, #40]	; 0x28
 810e77c:	ed87 5b0c 	vstr	d5, [r7, #48]	; 0x30
 810e780:	ed87 6b0e 	vstr	d6, [r7, #56]	; 0x38
 810e784:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
 810e788:	4c45      	ldr	r4, [pc, #276]	; (810e8a0 <_ZN9IMUThread4loopEv+0x1d8>)
 810e78a:	ed97 4b0a 	vldr	d4, [r7, #40]	; 0x28
 810e78e:	ed97 5b0c 	vldr	d5, [r7, #48]	; 0x30
 810e792:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 810e796:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 810e79a:	eeb0 0a44 	vmov.f32	s0, s8
 810e79e:	eef0 0a64 	vmov.f32	s1, s9
 810e7a2:	eeb0 1a45 	vmov.f32	s2, s10
 810e7a6:	eef0 1a65 	vmov.f32	s3, s11
 810e7aa:	eeb0 2a46 	vmov.f32	s4, s12
 810e7ae:	eef0 2a66 	vmov.f32	s5, s13
 810e7b2:	eeb0 3a47 	vmov.f32	s6, s14
 810e7b6:	eef0 3a67 	vmov.f32	s7, s15
 810e7ba:	6878      	ldr	r0, [r7, #4]
 810e7bc:	f000 f886 	bl	810e8cc <_ZN9IMUThread17bnoVectorToVectorE15bno055_vector_t>
 810e7c0:	eef0 6a40 	vmov.f32	s13, s0
 810e7c4:	eeb0 7a60 	vmov.f32	s14, s1
 810e7c8:	eef0 7a41 	vmov.f32	s15, s2
 810e7cc:	edc4 6a03 	vstr	s13, [r4, #12]
 810e7d0:	ed84 7a04 	vstr	s14, [r4, #16]
 810e7d4:	edc4 7a05 	vstr	s15, [r4, #20]
	data.mag = bnoVectorToVector(bno055_getVectorGravity());
 810e7d8:	f7fd fe28 	bl	810c42c <bno055_getVectorGravity>
 810e7dc:	eeb0 4a40 	vmov.f32	s8, s0
 810e7e0:	eef0 4a60 	vmov.f32	s9, s1
 810e7e4:	eeb0 5a41 	vmov.f32	s10, s2
 810e7e8:	eef0 5a61 	vmov.f32	s11, s3
 810e7ec:	eeb0 6a42 	vmov.f32	s12, s4
 810e7f0:	eef0 6a62 	vmov.f32	s13, s5
 810e7f4:	eeb0 7a43 	vmov.f32	s14, s6
 810e7f8:	eef0 7a63 	vmov.f32	s15, s7
 810e7fc:	ed87 4b12 	vstr	d4, [r7, #72]	; 0x48
 810e800:	ed87 5b14 	vstr	d5, [r7, #80]	; 0x50
 810e804:	ed87 6b16 	vstr	d6, [r7, #88]	; 0x58
 810e808:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
 810e80c:	4c24      	ldr	r4, [pc, #144]	; (810e8a0 <_ZN9IMUThread4loopEv+0x1d8>)
 810e80e:	ed97 4b12 	vldr	d4, [r7, #72]	; 0x48
 810e812:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 810e816:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 810e81a:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 810e81e:	eeb0 0a44 	vmov.f32	s0, s8
 810e822:	eef0 0a64 	vmov.f32	s1, s9
 810e826:	eeb0 1a45 	vmov.f32	s2, s10
 810e82a:	eef0 1a65 	vmov.f32	s3, s11
 810e82e:	eeb0 2a46 	vmov.f32	s4, s12
 810e832:	eef0 2a66 	vmov.f32	s5, s13
 810e836:	eeb0 3a47 	vmov.f32	s6, s14
 810e83a:	eef0 3a67 	vmov.f32	s7, s15
 810e83e:	6878      	ldr	r0, [r7, #4]
 810e840:	f000 f844 	bl	810e8cc <_ZN9IMUThread17bnoVectorToVectorE15bno055_vector_t>
 810e844:	eef0 6a40 	vmov.f32	s13, s0
 810e848:	eeb0 7a60 	vmov.f32	s14, s1
 810e84c:	eef0 7a41 	vmov.f32	s15, s2
 810e850:	edc4 6a06 	vstr	s13, [r4, #24]
 810e854:	ed84 7a07 	vstr	s14, [r4, #28]
 810e858:	edc4 7a08 	vstr	s15, [r4, #32]

	println("%s", data.toString(cbuf));
 810e85c:	687c      	ldr	r4, [r7, #4]
 810e85e:	4911      	ldr	r1, [pc, #68]	; (810e8a4 <_ZN9IMUThread4loopEv+0x1dc>)
 810e860:	480f      	ldr	r0, [pc, #60]	; (810e8a0 <_ZN9IMUThread4loopEv+0x1d8>)
 810e862:	f7ff fec9 	bl	810e5f8 <_ZN7IMUData8toStringEPc>
 810e866:	4603      	mov	r3, r0
 810e868:	461a      	mov	r2, r3
 810e86a:	490f      	ldr	r1, [pc, #60]	; (810e8a8 <_ZN9IMUThread4loopEv+0x1e0>)
 810e86c:	4620      	mov	r0, r4
 810e86e:	f000 faa7 	bl	810edc0 <_ZN6Thread7printlnEPKcz>

	writeToRtosBuffer(data); //envoyer à un autre thread pour etre envoyé par ethernet
 810e872:	4e0b      	ldr	r6, [pc, #44]	; (810e8a0 <_ZN9IMUThread4loopEv+0x1d8>)
 810e874:	466d      	mov	r5, sp
 810e876:	f106 040c 	add.w	r4, r6, #12
 810e87a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810e87c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810e87e:	e894 0003 	ldmia.w	r4, {r0, r1}
 810e882:	e885 0003 	stmia.w	r5, {r0, r1}
 810e886:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 810e88a:	6878      	ldr	r0, [r7, #4]
 810e88c:	f000 f80e 	bl	810e8ac <_ZN9IMUThread17writeToRtosBufferE7IMUData>

	osDelay(100);
 810e890:	2064      	movs	r0, #100	; 0x64
 810e892:	f7fa fb09 	bl	8108ea8 <osDelay>
}
 810e896:	bf00      	nop
 810e898:	376c      	adds	r7, #108	; 0x6c
 810e89a:	46bd      	mov	sp, r7
 810e89c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810e89e:	bf00      	nop
 810e8a0:	10004888 	.word	0x10004888
 810e8a4:	10004788 	.word	0x10004788
 810e8a8:	081129d0 	.word	0x081129d0

0810e8ac <_ZN9IMUThread17writeToRtosBufferE7IMUData>:

void IMUThread::writeToRtosBuffer(IMUData data) {
 810e8ac:	b084      	sub	sp, #16
 810e8ae:	b480      	push	{r7}
 810e8b0:	b083      	sub	sp, #12
 810e8b2:	af00      	add	r7, sp, #0
 810e8b4:	6078      	str	r0, [r7, #4]
 810e8b6:	f107 0014 	add.w	r0, r7, #20
 810e8ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}

}
 810e8be:	bf00      	nop
 810e8c0:	370c      	adds	r7, #12
 810e8c2:	46bd      	mov	sp, r7
 810e8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e8c8:	b004      	add	sp, #16
 810e8ca:	4770      	bx	lr

0810e8cc <_ZN9IMUThread17bnoVectorToVectorE15bno055_vector_t>:

Vector IMUThread::bnoVectorToVector(bno055_vector_t v) {
 810e8cc:	b590      	push	{r4, r7, lr}
 810e8ce:	b095      	sub	sp, #84	; 0x54
 810e8d0:	af00      	add	r7, sp, #0
 810e8d2:	6378      	str	r0, [r7, #52]	; 0x34
 810e8d4:	eeb0 4a40 	vmov.f32	s8, s0
 810e8d8:	eef0 4a60 	vmov.f32	s9, s1
 810e8dc:	eeb0 5a41 	vmov.f32	s10, s2
 810e8e0:	eef0 5a61 	vmov.f32	s11, s3
 810e8e4:	eeb0 6a42 	vmov.f32	s12, s4
 810e8e8:	eef0 6a62 	vmov.f32	s13, s5
 810e8ec:	eeb0 7a43 	vmov.f32	s14, s6
 810e8f0:	eef0 7a63 	vmov.f32	s15, s7
 810e8f4:	ed87 4b04 	vstr	d4, [r7, #16]
 810e8f8:	ed87 5b06 	vstr	d5, [r7, #24]
 810e8fc:	ed87 6b08 	vstr	d6, [r7, #32]
 810e900:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	Vector vector;

	vector.x = v.x;
 810e904:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 810e908:	4618      	mov	r0, r3
 810e90a:	4621      	mov	r1, r4
 810e90c:	f7f2 f9e4 	bl	8100cd8 <__aeabi_d2f>
 810e910:	4603      	mov	r3, r0
 810e912:	63bb      	str	r3, [r7, #56]	; 0x38
	vector.y = v.y;
 810e914:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 810e918:	4618      	mov	r0, r3
 810e91a:	4621      	mov	r1, r4
 810e91c:	f7f2 f9dc 	bl	8100cd8 <__aeabi_d2f>
 810e920:	4603      	mov	r3, r0
 810e922:	63fb      	str	r3, [r7, #60]	; 0x3c
	vector.z = v.z;
 810e924:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 810e928:	4618      	mov	r0, r3
 810e92a:	4621      	mov	r1, r4
 810e92c:	f7f2 f9d4 	bl	8100cd8 <__aeabi_d2f>
 810e930:	4603      	mov	r3, r0
 810e932:	643b      	str	r3, [r7, #64]	; 0x40

	return vector;
 810e934:	f107 0344 	add.w	r3, r7, #68	; 0x44
 810e938:	f107 0238 	add.w	r2, r7, #56	; 0x38
 810e93c:	ca07      	ldmia	r2, {r0, r1, r2}
 810e93e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 810e942:	6c79      	ldr	r1, [r7, #68]	; 0x44
 810e944:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810e946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810e948:	ee06 1a90 	vmov	s13, r1
 810e94c:	ee07 2a10 	vmov	s14, r2
 810e950:	ee07 3a90 	vmov	s15, r3
}
 810e954:	eeb0 0a66 	vmov.f32	s0, s13
 810e958:	eef0 0a47 	vmov.f32	s1, s14
 810e95c:	eeb0 1a67 	vmov.f32	s2, s15
 810e960:	3754      	adds	r7, #84	; 0x54
 810e962:	46bd      	mov	sp, r7
 810e964:	bd90      	pop	{r4, r7, pc}
	...

0810e968 <_ZN6ThreadD1Ev>:
public:
	Thread(const char* name);
	Thread(const char* name, osPriority priority);
	Thread(const char* name, uint32_t stackSize);
	Thread(const char* name, osPriority priority, uint32_t stackSize);
	~Thread() {};
 810e968:	b480      	push	{r7}
 810e96a:	b083      	sub	sp, #12
 810e96c:	af00      	add	r7, sp, #0
 810e96e:	6078      	str	r0, [r7, #4]
 810e970:	4a04      	ldr	r2, [pc, #16]	; (810e984 <_ZN6ThreadD1Ev+0x1c>)
 810e972:	687b      	ldr	r3, [r7, #4]
 810e974:	601a      	str	r2, [r3, #0]
 810e976:	687b      	ldr	r3, [r7, #4]
 810e978:	4618      	mov	r0, r3
 810e97a:	370c      	adds	r7, #12
 810e97c:	46bd      	mov	sp, r7
 810e97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e982:	4770      	bx	lr
 810e984:	08112dd0 	.word	0x08112dd0

0810e988 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef>:

#include "../Thread.h"

class WatchdogThread : Thread {
public:
	WatchdogThread(IWDG_HandleTypeDef* hiwdg) : Thread("Watchdog"), watchdog_handle(hiwdg) {}
 810e988:	b580      	push	{r7, lr}
 810e98a:	b082      	sub	sp, #8
 810e98c:	af00      	add	r7, sp, #0
 810e98e:	6078      	str	r0, [r7, #4]
 810e990:	6039      	str	r1, [r7, #0]
 810e992:	687b      	ldr	r3, [r7, #4]
 810e994:	4907      	ldr	r1, [pc, #28]	; (810e9b4 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef+0x2c>)
 810e996:	4618      	mov	r0, r3
 810e998:	f000 f9b8 	bl	810ed0c <_ZN6ThreadC1EPKc>
 810e99c:	4a06      	ldr	r2, [pc, #24]	; (810e9b8 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef+0x30>)
 810e99e:	687b      	ldr	r3, [r7, #4]
 810e9a0:	601a      	str	r2, [r3, #0]
 810e9a2:	687b      	ldr	r3, [r7, #4]
 810e9a4:	683a      	ldr	r2, [r7, #0]
 810e9a6:	60da      	str	r2, [r3, #12]
 810e9a8:	687b      	ldr	r3, [r7, #4]
 810e9aa:	4618      	mov	r0, r3
 810e9ac:	3708      	adds	r7, #8
 810e9ae:	46bd      	mov	sp, r7
 810e9b0:	bd80      	pop	{r7, pc}
 810e9b2:	bf00      	nop
 810e9b4:	081129d4 	.word	0x081129d4
 810e9b8:	08112d24 	.word	0x08112d24

0810e9bc <_ZN15BarometerThreadC1EP19__I2C_HandleTypeDefP20__UART_HandleTypeDef>:
#include "Libraries/BMP280/bmp280.h"


class BarometerThread : Thread {
public:
	BarometerThread(I2C_HandleTypeDef* hi2c, UART_HandleTypeDef* huart) : Thread("Barometer"), bmp280(), hi2c(hi2c), huart(huart)  {}
 810e9bc:	b580      	push	{r7, lr}
 810e9be:	b084      	sub	sp, #16
 810e9c0:	af00      	add	r7, sp, #0
 810e9c2:	60f8      	str	r0, [r7, #12]
 810e9c4:	60b9      	str	r1, [r7, #8]
 810e9c6:	607a      	str	r2, [r7, #4]
 810e9c8:	68fb      	ldr	r3, [r7, #12]
 810e9ca:	490c      	ldr	r1, [pc, #48]	; (810e9fc <_ZN15BarometerThreadC1EP19__I2C_HandleTypeDefP20__UART_HandleTypeDef+0x40>)
 810e9cc:	4618      	mov	r0, r3
 810e9ce:	f000 f99d 	bl	810ed0c <_ZN6ThreadC1EPKc>
 810e9d2:	4a0b      	ldr	r2, [pc, #44]	; (810ea00 <_ZN15BarometerThreadC1EP19__I2C_HandleTypeDefP20__UART_HandleTypeDef+0x44>)
 810e9d4:	68fb      	ldr	r3, [r7, #12]
 810e9d6:	601a      	str	r2, [r3, #0]
 810e9d8:	68fb      	ldr	r3, [r7, #12]
 810e9da:	330c      	adds	r3, #12
 810e9dc:	2234      	movs	r2, #52	; 0x34
 810e9de:	2100      	movs	r1, #0
 810e9e0:	4618      	mov	r0, r3
 810e9e2:	f000 fe00 	bl	810f5e6 <memset>
 810e9e6:	68fb      	ldr	r3, [r7, #12]
 810e9e8:	68ba      	ldr	r2, [r7, #8]
 810e9ea:	641a      	str	r2, [r3, #64]	; 0x40
 810e9ec:	68fb      	ldr	r3, [r7, #12]
 810e9ee:	687a      	ldr	r2, [r7, #4]
 810e9f0:	645a      	str	r2, [r3, #68]	; 0x44
 810e9f2:	68fb      	ldr	r3, [r7, #12]
 810e9f4:	4618      	mov	r0, r3
 810e9f6:	3710      	adds	r7, #16
 810e9f8:	46bd      	mov	sp, r7
 810e9fa:	bd80      	pop	{r7, pc}
 810e9fc:	081129e0 	.word	0x081129e0
 810ea00:	08112d60 	.word	0x08112d60

0810ea04 <_ZN9IMUThreadC1EP19__I2C_HandleTypeDefP20__UART_HandleTypeDef>:
#include "Libraries/BNO055/bno055_stm32.h"
#include "Libraries/BNO055/bno055.h"

class IMUThread : Thread {
public:
	IMUThread(I2C_HandleTypeDef* hi2c, UART_HandleTypeDef* huart) : Thread("IMU"), hi2c(hi2c), huart(huart) {}
 810ea04:	b580      	push	{r7, lr}
 810ea06:	b084      	sub	sp, #16
 810ea08:	af00      	add	r7, sp, #0
 810ea0a:	60f8      	str	r0, [r7, #12]
 810ea0c:	60b9      	str	r1, [r7, #8]
 810ea0e:	607a      	str	r2, [r7, #4]
 810ea10:	68fb      	ldr	r3, [r7, #12]
 810ea12:	4909      	ldr	r1, [pc, #36]	; (810ea38 <_ZN9IMUThreadC1EP19__I2C_HandleTypeDefP20__UART_HandleTypeDef+0x34>)
 810ea14:	4618      	mov	r0, r3
 810ea16:	f000 f979 	bl	810ed0c <_ZN6ThreadC1EPKc>
 810ea1a:	4a08      	ldr	r2, [pc, #32]	; (810ea3c <_ZN9IMUThreadC1EP19__I2C_HandleTypeDefP20__UART_HandleTypeDef+0x38>)
 810ea1c:	68fb      	ldr	r3, [r7, #12]
 810ea1e:	601a      	str	r2, [r3, #0]
 810ea20:	68fb      	ldr	r3, [r7, #12]
 810ea22:	68ba      	ldr	r2, [r7, #8]
 810ea24:	60da      	str	r2, [r3, #12]
 810ea26:	68fb      	ldr	r3, [r7, #12]
 810ea28:	687a      	ldr	r2, [r7, #4]
 810ea2a:	611a      	str	r2, [r3, #16]
 810ea2c:	68fb      	ldr	r3, [r7, #12]
 810ea2e:	4618      	mov	r0, r3
 810ea30:	3710      	adds	r7, #16
 810ea32:	46bd      	mov	sp, r7
 810ea34:	bd80      	pop	{r7, pc}
 810ea36:	bf00      	nop
 810ea38:	081129ec 	.word	0x081129ec
 810ea3c:	08112d9c 	.word	0x08112d9c

0810ea40 <_ZN14WatchdogThreadD1Ev>:
class WatchdogThread : Thread {
 810ea40:	b580      	push	{r7, lr}
 810ea42:	b082      	sub	sp, #8
 810ea44:	af00      	add	r7, sp, #0
 810ea46:	6078      	str	r0, [r7, #4]
 810ea48:	4a05      	ldr	r2, [pc, #20]	; (810ea60 <_ZN14WatchdogThreadD1Ev+0x20>)
 810ea4a:	687b      	ldr	r3, [r7, #4]
 810ea4c:	601a      	str	r2, [r3, #0]
 810ea4e:	687b      	ldr	r3, [r7, #4]
 810ea50:	4618      	mov	r0, r3
 810ea52:	f7ff ff89 	bl	810e968 <_ZN6ThreadD1Ev>
 810ea56:	687b      	ldr	r3, [r7, #4]
 810ea58:	4618      	mov	r0, r3
 810ea5a:	3708      	adds	r7, #8
 810ea5c:	46bd      	mov	sp, r7
 810ea5e:	bd80      	pop	{r7, pc}
 810ea60:	08112d24 	.word	0x08112d24

0810ea64 <__tcf_0>:


#ifdef CORE_CM4
#include "i2c.h"
void initCortexM4() {
	static WatchdogThread watchdog(&hiwdg2);
 810ea64:	b580      	push	{r7, lr}
 810ea66:	af00      	add	r7, sp, #0
 810ea68:	4801      	ldr	r0, [pc, #4]	; (810ea70 <__tcf_0+0xc>)
 810ea6a:	f7ff ffe9 	bl	810ea40 <_ZN14WatchdogThreadD1Ev>
 810ea6e:	bd80      	pop	{r7, pc}
 810ea70:	100048ac 	.word	0x100048ac

0810ea74 <_ZN5ShellD1Ev>:

#define CMD_BUFFER_SIZE 512



class Shell : public Thread {
 810ea74:	b580      	push	{r7, lr}
 810ea76:	b082      	sub	sp, #8
 810ea78:	af00      	add	r7, sp, #0
 810ea7a:	6078      	str	r0, [r7, #4]
 810ea7c:	4a05      	ldr	r2, [pc, #20]	; (810ea94 <_ZN5ShellD1Ev+0x20>)
 810ea7e:	687b      	ldr	r3, [r7, #4]
 810ea80:	601a      	str	r2, [r3, #0]
 810ea82:	687b      	ldr	r3, [r7, #4]
 810ea84:	4618      	mov	r0, r3
 810ea86:	f7ff ff6f 	bl	810e968 <_ZN6ThreadD1Ev>
 810ea8a:	687b      	ldr	r3, [r7, #4]
 810ea8c:	4618      	mov	r0, r3
 810ea8e:	3708      	adds	r7, #8
 810ea90:	46bd      	mov	sp, r7
 810ea92:	bd80      	pop	{r7, pc}
 810ea94:	08112a40 	.word	0x08112a40

0810ea98 <__tcf_1>:
	static Shell shell(&huart3, &terminal);
 810ea98:	b580      	push	{r7, lr}
 810ea9a:	af00      	add	r7, sp, #0
 810ea9c:	4801      	ldr	r0, [pc, #4]	; (810eaa4 <__tcf_1+0xc>)
 810ea9e:	f7ff ffe9 	bl	810ea74 <_ZN5ShellD1Ev>
 810eaa2:	bd80      	pop	{r7, pc}
 810eaa4:	100048c0 	.word	0x100048c0

0810eaa8 <_ZN9IMUThreadD1Ev>:
class IMUThread : Thread {
 810eaa8:	b580      	push	{r7, lr}
 810eaaa:	b082      	sub	sp, #8
 810eaac:	af00      	add	r7, sp, #0
 810eaae:	6078      	str	r0, [r7, #4]
 810eab0:	4a05      	ldr	r2, [pc, #20]	; (810eac8 <_ZN9IMUThreadD1Ev+0x20>)
 810eab2:	687b      	ldr	r3, [r7, #4]
 810eab4:	601a      	str	r2, [r3, #0]
 810eab6:	687b      	ldr	r3, [r7, #4]
 810eab8:	4618      	mov	r0, r3
 810eaba:	f7ff ff55 	bl	810e968 <_ZN6ThreadD1Ev>
 810eabe:	687b      	ldr	r3, [r7, #4]
 810eac0:	4618      	mov	r0, r3
 810eac2:	3708      	adds	r7, #8
 810eac4:	46bd      	mov	sp, r7
 810eac6:	bd80      	pop	{r7, pc}
 810eac8:	08112d9c 	.word	0x08112d9c

0810eacc <__tcf_2>:
	static IMUThread imu(&hi2c1, &huart3);
 810eacc:	b580      	push	{r7, lr}
 810eace:	af00      	add	r7, sp, #0
 810ead0:	4801      	ldr	r0, [pc, #4]	; (810ead8 <__tcf_2+0xc>)
 810ead2:	f7ff ffe9 	bl	810eaa8 <_ZN9IMUThreadD1Ev>
 810ead6:	bd80      	pop	{r7, pc}
 810ead8:	10004d28 	.word	0x10004d28

0810eadc <_ZN15BarometerThreadD1Ev>:
class BarometerThread : Thread {
 810eadc:	b580      	push	{r7, lr}
 810eade:	b082      	sub	sp, #8
 810eae0:	af00      	add	r7, sp, #0
 810eae2:	6078      	str	r0, [r7, #4]
 810eae4:	4a05      	ldr	r2, [pc, #20]	; (810eafc <_ZN15BarometerThreadD1Ev+0x20>)
 810eae6:	687b      	ldr	r3, [r7, #4]
 810eae8:	601a      	str	r2, [r3, #0]
 810eaea:	687b      	ldr	r3, [r7, #4]
 810eaec:	4618      	mov	r0, r3
 810eaee:	f7ff ff3b 	bl	810e968 <_ZN6ThreadD1Ev>
 810eaf2:	687b      	ldr	r3, [r7, #4]
 810eaf4:	4618      	mov	r0, r3
 810eaf6:	3708      	adds	r7, #8
 810eaf8:	46bd      	mov	sp, r7
 810eafa:	bd80      	pop	{r7, pc}
 810eafc:	08112d60 	.word	0x08112d60

0810eb00 <__tcf_3>:
	static BarometerThread barometer(&hi2c1, &huart3);
 810eb00:	b580      	push	{r7, lr}
 810eb02:	af00      	add	r7, sp, #0
 810eb04:	4801      	ldr	r0, [pc, #4]	; (810eb0c <__tcf_3+0xc>)
 810eb06:	f7ff ffe9 	bl	810eadc <_ZN15BarometerThreadD1Ev>
 810eb0a:	bd80      	pop	{r7, pc}
 810eb0c:	10004d40 	.word	0x10004d40

0810eb10 <initCortexM4>:
void initCortexM4() {
 810eb10:	b580      	push	{r7, lr}
 810eb12:	af00      	add	r7, sp, #0
	static WatchdogThread watchdog(&hiwdg2);
 810eb14:	4b48      	ldr	r3, [pc, #288]	; (810ec38 <initCortexM4+0x128>)
 810eb16:	781b      	ldrb	r3, [r3, #0]
 810eb18:	f3bf 8f5b 	dmb	ish
 810eb1c:	b2db      	uxtb	r3, r3
 810eb1e:	f003 0301 	and.w	r3, r3, #1
 810eb22:	2b00      	cmp	r3, #0
 810eb24:	bf0c      	ite	eq
 810eb26:	2301      	moveq	r3, #1
 810eb28:	2300      	movne	r3, #0
 810eb2a:	b2db      	uxtb	r3, r3
 810eb2c:	2b00      	cmp	r3, #0
 810eb2e:	d014      	beq.n	810eb5a <initCortexM4+0x4a>
 810eb30:	4841      	ldr	r0, [pc, #260]	; (810ec38 <initCortexM4+0x128>)
 810eb32:	f000 f9f3 	bl	810ef1c <__cxa_guard_acquire>
 810eb36:	4603      	mov	r3, r0
 810eb38:	2b00      	cmp	r3, #0
 810eb3a:	bf14      	ite	ne
 810eb3c:	2301      	movne	r3, #1
 810eb3e:	2300      	moveq	r3, #0
 810eb40:	b2db      	uxtb	r3, r3
 810eb42:	2b00      	cmp	r3, #0
 810eb44:	d009      	beq.n	810eb5a <initCortexM4+0x4a>
 810eb46:	493d      	ldr	r1, [pc, #244]	; (810ec3c <initCortexM4+0x12c>)
 810eb48:	483d      	ldr	r0, [pc, #244]	; (810ec40 <initCortexM4+0x130>)
 810eb4a:	f7ff ff1d 	bl	810e988 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef>
 810eb4e:	483a      	ldr	r0, [pc, #232]	; (810ec38 <initCortexM4+0x128>)
 810eb50:	f000 f9f0 	bl	810ef34 <__cxa_guard_release>
 810eb54:	483b      	ldr	r0, [pc, #236]	; (810ec44 <initCortexM4+0x134>)
 810eb56:	f000 fd07 	bl	810f568 <atexit>
	static Shell shell(&huart3, &terminal);
 810eb5a:	4b3b      	ldr	r3, [pc, #236]	; (810ec48 <initCortexM4+0x138>)
 810eb5c:	781b      	ldrb	r3, [r3, #0]
 810eb5e:	f3bf 8f5b 	dmb	ish
 810eb62:	b2db      	uxtb	r3, r3
 810eb64:	f003 0301 	and.w	r3, r3, #1
 810eb68:	2b00      	cmp	r3, #0
 810eb6a:	bf0c      	ite	eq
 810eb6c:	2301      	moveq	r3, #1
 810eb6e:	2300      	movne	r3, #0
 810eb70:	b2db      	uxtb	r3, r3
 810eb72:	2b00      	cmp	r3, #0
 810eb74:	d015      	beq.n	810eba2 <initCortexM4+0x92>
 810eb76:	4834      	ldr	r0, [pc, #208]	; (810ec48 <initCortexM4+0x138>)
 810eb78:	f000 f9d0 	bl	810ef1c <__cxa_guard_acquire>
 810eb7c:	4603      	mov	r3, r0
 810eb7e:	2b00      	cmp	r3, #0
 810eb80:	bf14      	ite	ne
 810eb82:	2301      	movne	r3, #1
 810eb84:	2300      	moveq	r3, #0
 810eb86:	b2db      	uxtb	r3, r3
 810eb88:	2b00      	cmp	r3, #0
 810eb8a:	d00a      	beq.n	810eba2 <initCortexM4+0x92>
 810eb8c:	4a2f      	ldr	r2, [pc, #188]	; (810ec4c <initCortexM4+0x13c>)
 810eb8e:	4930      	ldr	r1, [pc, #192]	; (810ec50 <initCortexM4+0x140>)
 810eb90:	4830      	ldr	r0, [pc, #192]	; (810ec54 <initCortexM4+0x144>)
 810eb92:	f7fc f8ef 	bl	810ad74 <_ZN5ShellC1EP20__UART_HandleTypeDefP8Terminal>
 810eb96:	482c      	ldr	r0, [pc, #176]	; (810ec48 <initCortexM4+0x138>)
 810eb98:	f000 f9cc 	bl	810ef34 <__cxa_guard_release>
 810eb9c:	482e      	ldr	r0, [pc, #184]	; (810ec58 <initCortexM4+0x148>)
 810eb9e:	f000 fce3 	bl	810f568 <atexit>
	static IMUThread imu(&hi2c1, &huart3);
 810eba2:	4b2e      	ldr	r3, [pc, #184]	; (810ec5c <initCortexM4+0x14c>)
 810eba4:	781b      	ldrb	r3, [r3, #0]
 810eba6:	f3bf 8f5b 	dmb	ish
 810ebaa:	b2db      	uxtb	r3, r3
 810ebac:	f003 0301 	and.w	r3, r3, #1
 810ebb0:	2b00      	cmp	r3, #0
 810ebb2:	bf0c      	ite	eq
 810ebb4:	2301      	moveq	r3, #1
 810ebb6:	2300      	movne	r3, #0
 810ebb8:	b2db      	uxtb	r3, r3
 810ebba:	2b00      	cmp	r3, #0
 810ebbc:	d015      	beq.n	810ebea <initCortexM4+0xda>
 810ebbe:	4827      	ldr	r0, [pc, #156]	; (810ec5c <initCortexM4+0x14c>)
 810ebc0:	f000 f9ac 	bl	810ef1c <__cxa_guard_acquire>
 810ebc4:	4603      	mov	r3, r0
 810ebc6:	2b00      	cmp	r3, #0
 810ebc8:	bf14      	ite	ne
 810ebca:	2301      	movne	r3, #1
 810ebcc:	2300      	moveq	r3, #0
 810ebce:	b2db      	uxtb	r3, r3
 810ebd0:	2b00      	cmp	r3, #0
 810ebd2:	d00a      	beq.n	810ebea <initCortexM4+0xda>
 810ebd4:	4a1e      	ldr	r2, [pc, #120]	; (810ec50 <initCortexM4+0x140>)
 810ebd6:	4922      	ldr	r1, [pc, #136]	; (810ec60 <initCortexM4+0x150>)
 810ebd8:	4822      	ldr	r0, [pc, #136]	; (810ec64 <initCortexM4+0x154>)
 810ebda:	f7ff ff13 	bl	810ea04 <_ZN9IMUThreadC1EP19__I2C_HandleTypeDefP20__UART_HandleTypeDef>
 810ebde:	481f      	ldr	r0, [pc, #124]	; (810ec5c <initCortexM4+0x14c>)
 810ebe0:	f000 f9a8 	bl	810ef34 <__cxa_guard_release>
 810ebe4:	4820      	ldr	r0, [pc, #128]	; (810ec68 <initCortexM4+0x158>)
 810ebe6:	f000 fcbf 	bl	810f568 <atexit>
	static BarometerThread barometer(&hi2c1, &huart3);
 810ebea:	4b20      	ldr	r3, [pc, #128]	; (810ec6c <initCortexM4+0x15c>)
 810ebec:	781b      	ldrb	r3, [r3, #0]
 810ebee:	f3bf 8f5b 	dmb	ish
 810ebf2:	b2db      	uxtb	r3, r3
 810ebf4:	f003 0301 	and.w	r3, r3, #1
 810ebf8:	2b00      	cmp	r3, #0
 810ebfa:	bf0c      	ite	eq
 810ebfc:	2301      	moveq	r3, #1
 810ebfe:	2300      	movne	r3, #0
 810ec00:	b2db      	uxtb	r3, r3
 810ec02:	2b00      	cmp	r3, #0
 810ec04:	d015      	beq.n	810ec32 <initCortexM4+0x122>
 810ec06:	4819      	ldr	r0, [pc, #100]	; (810ec6c <initCortexM4+0x15c>)
 810ec08:	f000 f988 	bl	810ef1c <__cxa_guard_acquire>
 810ec0c:	4603      	mov	r3, r0
 810ec0e:	2b00      	cmp	r3, #0
 810ec10:	bf14      	ite	ne
 810ec12:	2301      	movne	r3, #1
 810ec14:	2300      	moveq	r3, #0
 810ec16:	b2db      	uxtb	r3, r3
 810ec18:	2b00      	cmp	r3, #0
 810ec1a:	d00a      	beq.n	810ec32 <initCortexM4+0x122>
 810ec1c:	4a0c      	ldr	r2, [pc, #48]	; (810ec50 <initCortexM4+0x140>)
 810ec1e:	4910      	ldr	r1, [pc, #64]	; (810ec60 <initCortexM4+0x150>)
 810ec20:	4813      	ldr	r0, [pc, #76]	; (810ec70 <initCortexM4+0x160>)
 810ec22:	f7ff fecb 	bl	810e9bc <_ZN15BarometerThreadC1EP19__I2C_HandleTypeDefP20__UART_HandleTypeDef>
 810ec26:	4811      	ldr	r0, [pc, #68]	; (810ec6c <initCortexM4+0x15c>)
 810ec28:	f000 f984 	bl	810ef34 <__cxa_guard_release>
 810ec2c:	4811      	ldr	r0, [pc, #68]	; (810ec74 <initCortexM4+0x164>)
 810ec2e:	f000 fc9b 	bl	810f568 <atexit>
}
 810ec32:	bf00      	nop
 810ec34:	bd80      	pop	{r7, pc}
 810ec36:	bf00      	nop
 810ec38:	100048bc 	.word	0x100048bc
 810ec3c:	10009920 	.word	0x10009920
 810ec40:	100048ac 	.word	0x100048ac
 810ec44:	0810ea65 	.word	0x0810ea65
 810ec48:	10004d24 	.word	0x10004d24
 810ec4c:	10004624 	.word	0x10004624
 810ec50:	10009c7c 	.word	0x10009c7c
 810ec54:	100048c0 	.word	0x100048c0
 810ec58:	0810ea99 	.word	0x0810ea99
 810ec5c:	10004d3c 	.word	0x10004d3c
 810ec60:	10009888 	.word	0x10009888
 810ec64:	10004d28 	.word	0x10004d28
 810ec68:	0810eacd 	.word	0x0810eacd
 810ec6c:	10004d88 	.word	0x10004d88
 810ec70:	10004d40 	.word	0x10004d40
 810ec74:	0810eb01 	.word	0x0810eb01

0810ec78 <_Z41__static_initialization_and_destruction_0ii>:


#include "Telemetry.h"

static BufferedIODriver driver;
NetworkBus network(&driver);
 810ec78:	b580      	push	{r7, lr}
 810ec7a:	b082      	sub	sp, #8
 810ec7c:	af00      	add	r7, sp, #0
 810ec7e:	6078      	str	r0, [r7, #4]
 810ec80:	6039      	str	r1, [r7, #0]
 810ec82:	687b      	ldr	r3, [r7, #4]
 810ec84:	2b01      	cmp	r3, #1
 810ec86:	d108      	bne.n	810ec9a <_Z41__static_initialization_and_destruction_0ii+0x22>
 810ec88:	683b      	ldr	r3, [r7, #0]
 810ec8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 810ec8e:	4293      	cmp	r3, r2
 810ec90:	d103      	bne.n	810ec9a <_Z41__static_initialization_and_destruction_0ii+0x22>
 810ec92:	490b      	ldr	r1, [pc, #44]	; (810ecc0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 810ec94:	480b      	ldr	r0, [pc, #44]	; (810ecc4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 810ec96:	f7ff fb3d 	bl	810e314 <_ZN10NetworkBusC1EP8IODriver>
 810ec9a:	687b      	ldr	r3, [r7, #4]
 810ec9c:	2b00      	cmp	r3, #0
 810ec9e:	d10a      	bne.n	810ecb6 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 810eca0:	683b      	ldr	r3, [r7, #0]
 810eca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 810eca6:	4293      	cmp	r3, r2
 810eca8:	d105      	bne.n	810ecb6 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 810ecaa:	4806      	ldr	r0, [pc, #24]	; (810ecc4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 810ecac:	f7ff fb7e 	bl	810e3ac <_ZN10NetworkBusD1Ev>
static BufferedIODriver driver;
 810ecb0:	4803      	ldr	r0, [pc, #12]	; (810ecc0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 810ecb2:	f7fd fd61 	bl	810c778 <_ZN16BufferedIODriverD1Ev>
NetworkBus network(&driver);
 810ecb6:	bf00      	nop
 810ecb8:	3708      	adds	r7, #8
 810ecba:	46bd      	mov	sp, r7
 810ecbc:	bd80      	pop	{r7, pc}
 810ecbe:	bf00      	nop
 810ecc0:	10000034 	.word	0x10000034
 810ecc4:	10004d8c 	.word	0x10004d8c

0810ecc8 <_GLOBAL__sub_I_network>:
 810ecc8:	b580      	push	{r7, lr}
 810ecca:	af00      	add	r7, sp, #0
 810eccc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 810ecd0:	2001      	movs	r0, #1
 810ecd2:	f7ff ffd1 	bl	810ec78 <_Z41__static_initialization_and_destruction_0ii>
 810ecd6:	bd80      	pop	{r7, pc}

0810ecd8 <_GLOBAL__sub_D_network>:
 810ecd8:	b580      	push	{r7, lr}
 810ecda:	af00      	add	r7, sp, #0
 810ecdc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 810ece0:	2000      	movs	r0, #0
 810ece2:	f7ff ffc9 	bl	810ec78 <_Z41__static_initialization_and_destruction_0ii>
 810ece6:	bd80      	pop	{r7, pc}

0810ece8 <_Z10__task_runPKv>:

#define DEFAULT_STACK_SIZE (512)

static char buffer[256];

void __task_run(const void* arg) {
 810ece8:	b580      	push	{r7, lr}
 810ecea:	b084      	sub	sp, #16
 810ecec:	af00      	add	r7, sp, #0
 810ecee:	6078      	str	r0, [r7, #4]
	Thread* thread = (Thread*) arg;
 810ecf0:	687b      	ldr	r3, [r7, #4]
 810ecf2:	60fb      	str	r3, [r7, #12]

	thread->init();
 810ecf4:	68fb      	ldr	r3, [r7, #12]
 810ecf6:	681b      	ldr	r3, [r3, #0]
 810ecf8:	681b      	ldr	r3, [r3, #0]
 810ecfa:	68f8      	ldr	r0, [r7, #12]
 810ecfc:	4798      	blx	r3

	while(true) {
		thread->loop();
 810ecfe:	68fb      	ldr	r3, [r7, #12]
 810ed00:	681b      	ldr	r3, [r3, #0]
 810ed02:	3304      	adds	r3, #4
 810ed04:	681b      	ldr	r3, [r3, #0]
 810ed06:	68f8      	ldr	r0, [r7, #12]
 810ed08:	4798      	blx	r3
 810ed0a:	e7f8      	b.n	810ecfe <_Z10__task_runPKv+0x16>

0810ed0c <_ZN6ThreadC1EPKc>:
	}
}

Thread::Thread(const char* name) : Thread(name, (osPriority) osPriorityNormal) {
 810ed0c:	b580      	push	{r7, lr}
 810ed0e:	b082      	sub	sp, #8
 810ed10:	af00      	add	r7, sp, #0
 810ed12:	6078      	str	r0, [r7, #4]
 810ed14:	6039      	str	r1, [r7, #0]
 810ed16:	2200      	movs	r2, #0
 810ed18:	6839      	ldr	r1, [r7, #0]
 810ed1a:	6878      	ldr	r0, [r7, #4]
 810ed1c:	f000 f805 	bl	810ed2a <_ZN6ThreadC1EPKc10osPriority>
	;
}
 810ed20:	687b      	ldr	r3, [r7, #4]
 810ed22:	4618      	mov	r0, r3
 810ed24:	3708      	adds	r7, #8
 810ed26:	46bd      	mov	sp, r7
 810ed28:	bd80      	pop	{r7, pc}

0810ed2a <_ZN6ThreadC1EPKc10osPriority>:

Thread::Thread(const char* name, osPriority priority) : Thread(name, priority, DEFAULT_STACK_SIZE) {
 810ed2a:	b580      	push	{r7, lr}
 810ed2c:	b084      	sub	sp, #16
 810ed2e:	af00      	add	r7, sp, #0
 810ed30:	60f8      	str	r0, [r7, #12]
 810ed32:	60b9      	str	r1, [r7, #8]
 810ed34:	4613      	mov	r3, r2
 810ed36:	80fb      	strh	r3, [r7, #6]
 810ed38:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 810ed3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 810ed40:	68b9      	ldr	r1, [r7, #8]
 810ed42:	68f8      	ldr	r0, [r7, #12]
 810ed44:	f000 f806 	bl	810ed54 <_ZN6ThreadC1EPKc10osPrioritym>
	;
}
 810ed48:	68fb      	ldr	r3, [r7, #12]
 810ed4a:	4618      	mov	r0, r3
 810ed4c:	3710      	adds	r7, #16
 810ed4e:	46bd      	mov	sp, r7
 810ed50:	bd80      	pop	{r7, pc}
	...

0810ed54 <_ZN6ThreadC1EPKc10osPrioritym>:

Thread::Thread(const char* name, uint32_t stackSize) : Thread(name, (osPriority) osPriorityNormal, stackSize) {
	;
}

Thread::Thread(const char* name, osPriority priority, uint32_t stackSize) {
 810ed54:	b580      	push	{r7, lr}
 810ed56:	b08c      	sub	sp, #48	; 0x30
 810ed58:	af00      	add	r7, sp, #0
 810ed5a:	60f8      	str	r0, [r7, #12]
 810ed5c:	60b9      	str	r1, [r7, #8]
 810ed5e:	603b      	str	r3, [r7, #0]
 810ed60:	4613      	mov	r3, r2
 810ed62:	80fb      	strh	r3, [r7, #6]
 810ed64:	4a13      	ldr	r2, [pc, #76]	; (810edb4 <_ZN6ThreadC1EPKc10osPrioritym+0x60>)
 810ed66:	68fb      	ldr	r3, [r7, #12]
 810ed68:	601a      	str	r2, [r3, #0]
	osThreadDef(T, __task_run, priority, 0, stackSize);
 810ed6a:	f107 0314 	add.w	r3, r7, #20
 810ed6e:	2200      	movs	r2, #0
 810ed70:	601a      	str	r2, [r3, #0]
 810ed72:	605a      	str	r2, [r3, #4]
 810ed74:	609a      	str	r2, [r3, #8]
 810ed76:	60da      	str	r2, [r3, #12]
 810ed78:	611a      	str	r2, [r3, #16]
 810ed7a:	615a      	str	r2, [r3, #20]
 810ed7c:	619a      	str	r2, [r3, #24]
 810ed7e:	4b0e      	ldr	r3, [pc, #56]	; (810edb8 <_ZN6ThreadC1EPKc10osPrioritym+0x64>)
 810ed80:	617b      	str	r3, [r7, #20]
 810ed82:	4b0e      	ldr	r3, [pc, #56]	; (810edbc <_ZN6ThreadC1EPKc10osPrioritym+0x68>)
 810ed84:	61bb      	str	r3, [r7, #24]
 810ed86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810ed8a:	83bb      	strh	r3, [r7, #28]
 810ed8c:	683b      	ldr	r3, [r7, #0]
 810ed8e:	627b      	str	r3, [r7, #36]	; 0x24
	this->handle = osThreadCreate(osThread(T), this);
 810ed90:	f107 0314 	add.w	r3, r7, #20
 810ed94:	68f9      	ldr	r1, [r7, #12]
 810ed96:	4618      	mov	r0, r3
 810ed98:	f7fa f83a 	bl	8108e10 <osThreadCreate>
 810ed9c:	4602      	mov	r2, r0
 810ed9e:	68fb      	ldr	r3, [r7, #12]
 810eda0:	605a      	str	r2, [r3, #4]
	this->name = name;
 810eda2:	68fb      	ldr	r3, [r7, #12]
 810eda4:	68ba      	ldr	r2, [r7, #8]
 810eda6:	609a      	str	r2, [r3, #8]
}
 810eda8:	68fb      	ldr	r3, [r7, #12]
 810edaa:	4618      	mov	r0, r3
 810edac:	3730      	adds	r7, #48	; 0x30
 810edae:	46bd      	mov	sp, r7
 810edb0:	bd80      	pop	{r7, pc}
 810edb2:	bf00      	nop
 810edb4:	08112dd0 	.word	0x08112dd0
 810edb8:	081129f0 	.word	0x081129f0
 810edbc:	0810ece9 	.word	0x0810ece9

0810edc0 <_ZN6Thread7printlnEPKcz>:

void Thread::println(const char* format, ...) {
 810edc0:	b40e      	push	{r1, r2, r3}
 810edc2:	b580      	push	{r7, lr}
 810edc4:	b085      	sub	sp, #20
 810edc6:	af00      	add	r7, sp, #0
 810edc8:	6078      	str	r0, [r7, #4]
	va_list args;
	va_start(args, format);
 810edca:	f107 0320 	add.w	r3, r7, #32
 810edce:	60fb      	str	r3, [r7, #12]

	sprintf(buffer, "[%s] ", name);
 810edd0:	687b      	ldr	r3, [r7, #4]
 810edd2:	689b      	ldr	r3, [r3, #8]
 810edd4:	461a      	mov	r2, r3
 810edd6:	4913      	ldr	r1, [pc, #76]	; (810ee24 <_ZN6Thread7printlnEPKcz+0x64>)
 810edd8:	4813      	ldr	r0, [pc, #76]	; (810ee28 <_ZN6Thread7printlnEPKcz+0x68>)
 810edda:	f001 f929 	bl	8110030 <siprintf>
	vsprintf(buffer + strlen(buffer), format, args);
 810edde:	4812      	ldr	r0, [pc, #72]	; (810ee28 <_ZN6Thread7printlnEPKcz+0x68>)
 810ede0:	f7f1 fa88 	bl	81002f4 <strlen>
 810ede4:	4602      	mov	r2, r0
 810ede6:	4b10      	ldr	r3, [pc, #64]	; (810ee28 <_ZN6Thread7printlnEPKcz+0x68>)
 810ede8:	4413      	add	r3, r2
 810edea:	68fa      	ldr	r2, [r7, #12]
 810edec:	69f9      	ldr	r1, [r7, #28]
 810edee:	4618      	mov	r0, r3
 810edf0:	f001 f9e6 	bl	81101c0 <vsiprintf>
	strcat(buffer, "\r\n");
 810edf4:	480c      	ldr	r0, [pc, #48]	; (810ee28 <_ZN6Thread7printlnEPKcz+0x68>)
 810edf6:	f7f1 fa7d 	bl	81002f4 <strlen>
 810edfa:	4603      	mov	r3, r0
 810edfc:	461a      	mov	r2, r3
 810edfe:	4b0a      	ldr	r3, [pc, #40]	; (810ee28 <_ZN6Thread7printlnEPKcz+0x68>)
 810ee00:	4413      	add	r3, r2
 810ee02:	4a0a      	ldr	r2, [pc, #40]	; (810ee2c <_ZN6Thread7printlnEPKcz+0x6c>)
 810ee04:	8811      	ldrh	r1, [r2, #0]
 810ee06:	7892      	ldrb	r2, [r2, #2]
 810ee08:	8019      	strh	r1, [r3, #0]
 810ee0a:	709a      	strb	r2, [r3, #2]

	console.print(buffer);
 810ee0c:	4906      	ldr	r1, [pc, #24]	; (810ee28 <_ZN6Thread7printlnEPKcz+0x68>)
 810ee0e:	4808      	ldr	r0, [pc, #32]	; (810ee30 <_ZN6Thread7printlnEPKcz+0x70>)
 810ee10:	f7fb ff29 	bl	810ac66 <_ZN7Console5printEPKc>

	va_end(args);
}
 810ee14:	bf00      	nop
 810ee16:	3714      	adds	r7, #20
 810ee18:	46bd      	mov	sp, r7
 810ee1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810ee1e:	b003      	add	sp, #12
 810ee20:	4770      	bx	lr
 810ee22:	bf00      	nop
 810ee24:	081129f4 	.word	0x081129f4
 810ee28:	100096a0 	.word	0x100096a0
 810ee2c:	081129fc 	.word	0x081129fc
 810ee30:	100041d8 	.word	0x100041d8

0810ee34 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 810ee34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 810ee36:	2400      	movs	r4, #0
 810ee38:	2310      	movs	r3, #16
 810ee3a:	e9cd 3402 	strd	r3, r4, [sp, #8]
 810ee3e:	6803      	ldr	r3, [r0, #0]
 810ee40:	9400      	str	r4, [sp, #0]
 810ee42:	4615      	mov	r5, r2
 810ee44:	699e      	ldr	r6, [r3, #24]
 810ee46:	f88d 4004 	strb.w	r4, [sp, #4]
 810ee4a:	466b      	mov	r3, sp
 810ee4c:	6812      	ldr	r2, [r2, #0]
 810ee4e:	47b0      	blx	r6
 810ee50:	f89d 3004 	ldrb.w	r3, [sp, #4]
 810ee54:	f003 0306 	and.w	r3, r3, #6
 810ee58:	2b06      	cmp	r3, #6
 810ee5a:	bf03      	ittte	eq
 810ee5c:	9b00      	ldreq	r3, [sp, #0]
 810ee5e:	602b      	streq	r3, [r5, #0]
 810ee60:	2001      	moveq	r0, #1
 810ee62:	4620      	movne	r0, r4
 810ee64:	b004      	add	sp, #16
 810ee66:	bd70      	pop	{r4, r5, r6, pc}

0810ee68 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 810ee68:	9800      	ldr	r0, [sp, #0]
 810ee6a:	4290      	cmp	r0, r2
 810ee6c:	bf0c      	ite	eq
 810ee6e:	2006      	moveq	r0, #6
 810ee70:	2001      	movne	r0, #1
 810ee72:	4770      	bx	lr

0810ee74 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 810ee74:	b510      	push	{r4, lr}
 810ee76:	4b03      	ldr	r3, [pc, #12]	; (810ee84 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 810ee78:	6003      	str	r3, [r0, #0]
 810ee7a:	4604      	mov	r4, r0
 810ee7c:	f000 f915 	bl	810f0aa <_ZNSt9type_infoD1Ev>
 810ee80:	4620      	mov	r0, r4
 810ee82:	bd10      	pop	{r4, pc}
 810ee84:	08112e10 	.word	0x08112e10

0810ee88 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 810ee88:	b510      	push	{r4, lr}
 810ee8a:	4604      	mov	r4, r0
 810ee8c:	f7ff fff2 	bl	810ee74 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 810ee90:	4620      	mov	r0, r4
 810ee92:	2108      	movs	r1, #8
 810ee94:	f000 f840 	bl	810ef18 <_ZdlPvj>
 810ee98:	4620      	mov	r0, r4
 810ee9a:	bd10      	pop	{r4, pc}

0810ee9c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 810ee9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810eea0:	4698      	mov	r8, r3
 810eea2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 810eea6:	9e06      	ldr	r6, [sp, #24]
 810eea8:	429e      	cmp	r6, r3
 810eeaa:	4607      	mov	r7, r0
 810eeac:	4615      	mov	r5, r2
 810eeae:	d107      	bne.n	810eec0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 810eeb0:	9907      	ldr	r1, [sp, #28]
 810eeb2:	f000 f8fd 	bl	810f0b0 <_ZNKSt9type_infoeqERKS_>
 810eeb6:	b118      	cbz	r0, 810eec0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 810eeb8:	7165      	strb	r5, [r4, #5]
 810eeba:	2000      	movs	r0, #0
 810eebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810eec0:	4641      	mov	r1, r8
 810eec2:	4638      	mov	r0, r7
 810eec4:	f000 f8f4 	bl	810f0b0 <_ZNKSt9type_infoeqERKS_>
 810eec8:	2800      	cmp	r0, #0
 810eeca:	d0f6      	beq.n	810eeba <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1e>
 810eecc:	2301      	movs	r3, #1
 810eece:	6026      	str	r6, [r4, #0]
 810eed0:	7125      	strb	r5, [r4, #4]
 810eed2:	71a3      	strb	r3, [r4, #6]
 810eed4:	e7f1      	b.n	810eeba <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1e>

0810eed6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 810eed6:	b538      	push	{r3, r4, r5, lr}
 810eed8:	4615      	mov	r5, r2
 810eeda:	461c      	mov	r4, r3
 810eedc:	f000 f8e8 	bl	810f0b0 <_ZNKSt9type_infoeqERKS_>
 810eee0:	b120      	cbz	r0, 810eeec <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 810eee2:	2308      	movs	r3, #8
 810eee4:	60e3      	str	r3, [r4, #12]
 810eee6:	2306      	movs	r3, #6
 810eee8:	6025      	str	r5, [r4, #0]
 810eeea:	7123      	strb	r3, [r4, #4]
 810eeec:	bd38      	pop	{r3, r4, r5, pc}

0810eeee <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 810eeee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810eef2:	4605      	mov	r5, r0
 810eef4:	460c      	mov	r4, r1
 810eef6:	4616      	mov	r6, r2
 810eef8:	461f      	mov	r7, r3
 810eefa:	f000 f8d9 	bl	810f0b0 <_ZNKSt9type_infoeqERKS_>
 810eefe:	b948      	cbnz	r0, 810ef14 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 810ef00:	2f03      	cmp	r7, #3
 810ef02:	d807      	bhi.n	810ef14 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 810ef04:	6823      	ldr	r3, [r4, #0]
 810ef06:	4632      	mov	r2, r6
 810ef08:	4629      	mov	r1, r5
 810ef0a:	4620      	mov	r0, r4
 810ef0c:	695b      	ldr	r3, [r3, #20]
 810ef0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810ef12:	4718      	bx	r3
 810ef14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810ef18 <_ZdlPvj>:
 810ef18:	f7fc bb2a 	b.w	810b570 <_ZdlPv>

0810ef1c <__cxa_guard_acquire>:
 810ef1c:	6803      	ldr	r3, [r0, #0]
 810ef1e:	07db      	lsls	r3, r3, #31
 810ef20:	d406      	bmi.n	810ef30 <__cxa_guard_acquire+0x14>
 810ef22:	7843      	ldrb	r3, [r0, #1]
 810ef24:	b103      	cbz	r3, 810ef28 <__cxa_guard_acquire+0xc>
 810ef26:	deff      	udf	#255	; 0xff
 810ef28:	2301      	movs	r3, #1
 810ef2a:	7043      	strb	r3, [r0, #1]
 810ef2c:	4618      	mov	r0, r3
 810ef2e:	4770      	bx	lr
 810ef30:	2000      	movs	r0, #0
 810ef32:	4770      	bx	lr

0810ef34 <__cxa_guard_release>:
 810ef34:	2301      	movs	r3, #1
 810ef36:	6003      	str	r3, [r0, #0]
 810ef38:	4770      	bx	lr
	...

0810ef3c <_ZSt11_Hash_bytesPKvjj>:
 810ef3c:	4b18      	ldr	r3, [pc, #96]	; (810efa0 <_ZSt11_Hash_bytesPKvjj+0x64>)
 810ef3e:	b570      	push	{r4, r5, r6, lr}
 810ef40:	404a      	eors	r2, r1
 810ef42:	460d      	mov	r5, r1
 810ef44:	1846      	adds	r6, r0, r1
 810ef46:	2d03      	cmp	r5, #3
 810ef48:	eba6 0405 	sub.w	r4, r6, r5
 810ef4c:	d908      	bls.n	810ef60 <_ZSt11_Hash_bytesPKvjj+0x24>
 810ef4e:	6824      	ldr	r4, [r4, #0]
 810ef50:	435c      	muls	r4, r3
 810ef52:	ea84 6414 	eor.w	r4, r4, r4, lsr #24
 810ef56:	435a      	muls	r2, r3
 810ef58:	435c      	muls	r4, r3
 810ef5a:	4062      	eors	r2, r4
 810ef5c:	3d04      	subs	r5, #4
 810ef5e:	e7f2      	b.n	810ef46 <_ZSt11_Hash_bytesPKvjj+0xa>
 810ef60:	088d      	lsrs	r5, r1, #2
 810ef62:	f06f 0403 	mvn.w	r4, #3
 810ef66:	fb04 1105 	mla	r1, r4, r5, r1
 810ef6a:	2902      	cmp	r1, #2
 810ef6c:	eb00 0685 	add.w	r6, r0, r5, lsl #2
 810ef70:	d011      	beq.n	810ef96 <_ZSt11_Hash_bytesPKvjj+0x5a>
 810ef72:	2903      	cmp	r1, #3
 810ef74:	d00c      	beq.n	810ef90 <_ZSt11_Hash_bytesPKvjj+0x54>
 810ef76:	2901      	cmp	r1, #1
 810ef78:	d103      	bne.n	810ef82 <_ZSt11_Hash_bytesPKvjj+0x46>
 810ef7a:	f810 0025 	ldrb.w	r0, [r0, r5, lsl #2]
 810ef7e:	4042      	eors	r2, r0
 810ef80:	435a      	muls	r2, r3
 810ef82:	ea82 3252 	eor.w	r2, r2, r2, lsr #13
 810ef86:	fb03 f002 	mul.w	r0, r3, r2
 810ef8a:	ea80 30d0 	eor.w	r0, r0, r0, lsr #15
 810ef8e:	bd70      	pop	{r4, r5, r6, pc}
 810ef90:	78b1      	ldrb	r1, [r6, #2]
 810ef92:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
 810ef96:	7871      	ldrb	r1, [r6, #1]
 810ef98:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
 810ef9c:	e7ed      	b.n	810ef7a <_ZSt11_Hash_bytesPKvjj+0x3e>
 810ef9e:	bf00      	nop
 810efa0:	5bd1e995 	.word	0x5bd1e995

0810efa4 <__cxa_pure_virtual>:
 810efa4:	b508      	push	{r3, lr}
 810efa6:	f000 fad3 	bl	810f550 <_ZSt9terminatev>
	...

0810efac <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 810efac:	b510      	push	{r4, lr}
 810efae:	4b03      	ldr	r3, [pc, #12]	; (810efbc <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 810efb0:	6003      	str	r3, [r0, #0]
 810efb2:	4604      	mov	r4, r0
 810efb4:	f7ff ff5e 	bl	810ee74 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 810efb8:	4620      	mov	r0, r4
 810efba:	bd10      	pop	{r4, pc}
 810efbc:	08112e70 	.word	0x08112e70

0810efc0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 810efc0:	b510      	push	{r4, lr}
 810efc2:	4604      	mov	r4, r0
 810efc4:	f7ff fff2 	bl	810efac <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 810efc8:	4620      	mov	r0, r4
 810efca:	210c      	movs	r1, #12
 810efcc:	f7ff ffa4 	bl	810ef18 <_ZdlPvj>
 810efd0:	4620      	mov	r0, r4
 810efd2:	bd10      	pop	{r4, pc}

0810efd4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 810efd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810efd8:	9e06      	ldr	r6, [sp, #24]
 810efda:	4296      	cmp	r6, r2
 810efdc:	4607      	mov	r7, r0
 810efde:	4688      	mov	r8, r1
 810efe0:	4615      	mov	r5, r2
 810efe2:	461c      	mov	r4, r3
 810efe4:	d00a      	beq.n	810effc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x28>
 810efe6:	68b8      	ldr	r0, [r7, #8]
 810efe8:	6803      	ldr	r3, [r0, #0]
 810efea:	9606      	str	r6, [sp, #24]
 810efec:	6a1e      	ldr	r6, [r3, #32]
 810efee:	462a      	mov	r2, r5
 810eff0:	4623      	mov	r3, r4
 810eff2:	4641      	mov	r1, r8
 810eff4:	46b4      	mov	ip, r6
 810eff6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810effa:	4760      	bx	ip
 810effc:	4619      	mov	r1, r3
 810effe:	f000 f857 	bl	810f0b0 <_ZNKSt9type_infoeqERKS_>
 810f002:	2800      	cmp	r0, #0
 810f004:	d0ef      	beq.n	810efe6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x12>
 810f006:	2006      	movs	r0, #6
 810f008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810f00c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 810f00c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810f010:	460e      	mov	r6, r1
 810f012:	4619      	mov	r1, r3
 810f014:	4683      	mov	fp, r0
 810f016:	4617      	mov	r7, r2
 810f018:	4699      	mov	r9, r3
 810f01a:	e9dd 4a0a 	ldrd	r4, sl, [sp, #40]	; 0x28
 810f01e:	e9dd 850c 	ldrd	r8, r5, [sp, #48]	; 0x30
 810f022:	f000 f845 	bl	810f0b0 <_ZNKSt9type_infoeqERKS_>
 810f026:	b190      	cbz	r0, 810f04e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 810f028:	2e00      	cmp	r6, #0
 810f02a:	602c      	str	r4, [r5, #0]
 810f02c:	712f      	strb	r7, [r5, #4]
 810f02e:	db09      	blt.n	810f044 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 810f030:	4434      	add	r4, r6
 810f032:	45a0      	cmp	r8, r4
 810f034:	bf0c      	ite	eq
 810f036:	2406      	moveq	r4, #6
 810f038:	2401      	movne	r4, #1
 810f03a:	71ac      	strb	r4, [r5, #6]
 810f03c:	2000      	movs	r0, #0
 810f03e:	b001      	add	sp, #4
 810f040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810f044:	3602      	adds	r6, #2
 810f046:	d1f9      	bne.n	810f03c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 810f048:	2301      	movs	r3, #1
 810f04a:	71ab      	strb	r3, [r5, #6]
 810f04c:	e7f6      	b.n	810f03c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 810f04e:	4544      	cmp	r4, r8
 810f050:	d106      	bne.n	810f060 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 810f052:	4651      	mov	r1, sl
 810f054:	4658      	mov	r0, fp
 810f056:	f000 f82b 	bl	810f0b0 <_ZNKSt9type_infoeqERKS_>
 810f05a:	b108      	cbz	r0, 810f060 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 810f05c:	716f      	strb	r7, [r5, #5]
 810f05e:	e7ed      	b.n	810f03c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 810f060:	f8db 0008 	ldr.w	r0, [fp, #8]
 810f064:	6803      	ldr	r3, [r0, #0]
 810f066:	e9cd 850c 	strd	r8, r5, [sp, #48]	; 0x30
 810f06a:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	; 0x28
 810f06e:	69dc      	ldr	r4, [r3, #28]
 810f070:	463a      	mov	r2, r7
 810f072:	464b      	mov	r3, r9
 810f074:	4631      	mov	r1, r6
 810f076:	46a4      	mov	ip, r4
 810f078:	b001      	add	sp, #4
 810f07a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810f07e:	4760      	bx	ip

0810f080 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 810f080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810f084:	4604      	mov	r4, r0
 810f086:	460d      	mov	r5, r1
 810f088:	4616      	mov	r6, r2
 810f08a:	461f      	mov	r7, r3
 810f08c:	f7ff ff23 	bl	810eed6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 810f090:	b948      	cbnz	r0, 810f0a6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 810f092:	68a0      	ldr	r0, [r4, #8]
 810f094:	6803      	ldr	r3, [r0, #0]
 810f096:	699c      	ldr	r4, [r3, #24]
 810f098:	4632      	mov	r2, r6
 810f09a:	463b      	mov	r3, r7
 810f09c:	4629      	mov	r1, r5
 810f09e:	46a4      	mov	ip, r4
 810f0a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810f0a4:	4760      	bx	ip
 810f0a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810f0aa <_ZNSt9type_infoD1Ev>:
 810f0aa:	4770      	bx	lr

0810f0ac <_ZNKSt9type_info14__is_pointer_pEv>:
 810f0ac:	2000      	movs	r0, #0
 810f0ae:	4770      	bx	lr

0810f0b0 <_ZNKSt9type_infoeqERKS_>:
 810f0b0:	4281      	cmp	r1, r0
 810f0b2:	b508      	push	{r3, lr}
 810f0b4:	d00e      	beq.n	810f0d4 <_ZNKSt9type_infoeqERKS_+0x24>
 810f0b6:	6840      	ldr	r0, [r0, #4]
 810f0b8:	7803      	ldrb	r3, [r0, #0]
 810f0ba:	2b2a      	cmp	r3, #42	; 0x2a
 810f0bc:	d00c      	beq.n	810f0d8 <_ZNKSt9type_infoeqERKS_+0x28>
 810f0be:	6849      	ldr	r1, [r1, #4]
 810f0c0:	780b      	ldrb	r3, [r1, #0]
 810f0c2:	2b2a      	cmp	r3, #42	; 0x2a
 810f0c4:	bf08      	it	eq
 810f0c6:	3101      	addeq	r1, #1
 810f0c8:	f7f1 f90a 	bl	81002e0 <strcmp>
 810f0cc:	fab0 f080 	clz	r0, r0
 810f0d0:	0940      	lsrs	r0, r0, #5
 810f0d2:	bd08      	pop	{r3, pc}
 810f0d4:	2001      	movs	r0, #1
 810f0d6:	e7fc      	b.n	810f0d2 <_ZNKSt9type_infoeqERKS_+0x22>
 810f0d8:	2000      	movs	r0, #0
 810f0da:	e7fa      	b.n	810f0d2 <_ZNKSt9type_infoeqERKS_+0x22>

0810f0dc <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
 810f0dc:	b510      	push	{r4, lr}
 810f0de:	4b03      	ldr	r3, [pc, #12]	; (810f0ec <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev+0x10>)
 810f0e0:	6003      	str	r3, [r0, #0]
 810f0e2:	4604      	mov	r4, r0
 810f0e4:	f7ff fec6 	bl	810ee74 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 810f0e8:	4620      	mov	r0, r4
 810f0ea:	bd10      	pop	{r4, pc}
 810f0ec:	08112ee8 	.word	0x08112ee8

0810f0f0 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
 810f0f0:	b510      	push	{r4, lr}
 810f0f2:	4604      	mov	r4, r0
 810f0f4:	f7ff fff2 	bl	810f0dc <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>
 810f0f8:	4620      	mov	r0, r4
 810f0fa:	2118      	movs	r1, #24
 810f0fc:	f7ff ff0c 	bl	810ef18 <_ZdlPvj>
 810f100:	4620      	mov	r0, r4
 810f102:	bd10      	pop	{r4, pc}

0810f104 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 810f104:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810f108:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 810f10c:	454a      	cmp	r2, r9
 810f10e:	4604      	mov	r4, r0
 810f110:	460f      	mov	r7, r1
 810f112:	4616      	mov	r6, r2
 810f114:	4698      	mov	r8, r3
 810f116:	d024      	beq.n	810f162 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x5e>
 810f118:	68e5      	ldr	r5, [r4, #12]
 810f11a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 810f11e:	b355      	cbz	r5, 810f176 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x72>
 810f120:	68e3      	ldr	r3, [r4, #12]
 810f122:	079a      	lsls	r2, r3, #30
 810f124:	d524      	bpl.n	810f170 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 810f126:	f013 0a01 	ands.w	sl, r3, #1
 810f12a:	ea4f 2223 	mov.w	r2, r3, asr #8
 810f12e:	d003      	beq.n	810f138 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x34>
 810f130:	1cfb      	adds	r3, r7, #3
 810f132:	d01d      	beq.n	810f170 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 810f134:	6833      	ldr	r3, [r6, #0]
 810f136:	589a      	ldr	r2, [r3, r2]
 810f138:	68a0      	ldr	r0, [r4, #8]
 810f13a:	6803      	ldr	r3, [r0, #0]
 810f13c:	f8cd 9000 	str.w	r9, [sp]
 810f140:	f8d3 b020 	ldr.w	fp, [r3, #32]
 810f144:	4432      	add	r2, r6
 810f146:	4643      	mov	r3, r8
 810f148:	4639      	mov	r1, r7
 810f14a:	47d8      	blx	fp
 810f14c:	2803      	cmp	r0, #3
 810f14e:	d90f      	bls.n	810f170 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 810f150:	f1ba 0f00 	cmp.w	sl, #0
 810f154:	d002      	beq.n	810f15c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 810f156:	f040 0001 	orr.w	r0, r0, #1
 810f15a:	b2c0      	uxtb	r0, r0
 810f15c:	b003      	add	sp, #12
 810f15e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810f162:	4619      	mov	r1, r3
 810f164:	f7ff ffa4 	bl	810f0b0 <_ZNKSt9type_infoeqERKS_>
 810f168:	2800      	cmp	r0, #0
 810f16a:	d0d5      	beq.n	810f118 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 810f16c:	2006      	movs	r0, #6
 810f16e:	e7f5      	b.n	810f15c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 810f170:	3d01      	subs	r5, #1
 810f172:	3c08      	subs	r4, #8
 810f174:	e7d3      	b.n	810f11e <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1a>
 810f176:	2001      	movs	r0, #1
 810f178:	e7f0      	b.n	810f15c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>

0810f17a <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>:
 810f17a:	b4f0      	push	{r4, r5, r6, r7}
 810f17c:	1e0e      	subs	r6, r1, #0
 810f17e:	9c04      	ldr	r4, [sp, #16]
 810f180:	db06      	blt.n	810f190 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x16>
 810f182:	1990      	adds	r0, r2, r6
 810f184:	4284      	cmp	r4, r0
 810f186:	bf14      	ite	ne
 810f188:	2001      	movne	r0, #1
 810f18a:	2006      	moveq	r0, #6
 810f18c:	bcf0      	pop	{r4, r5, r6, r7}
 810f18e:	4770      	bx	lr
 810f190:	3602      	adds	r6, #2
 810f192:	d004      	beq.n	810f19e <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x24>
 810f194:	6804      	ldr	r4, [r0, #0]
 810f196:	6a24      	ldr	r4, [r4, #32]
 810f198:	46a4      	mov	ip, r4
 810f19a:	bcf0      	pop	{r4, r5, r6, r7}
 810f19c:	4760      	bx	ip
 810f19e:	2001      	movs	r0, #1
 810f1a0:	e7f4      	b.n	810f18c <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x12>

0810f1a2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 810f1a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810f1a6:	b091      	sub	sp, #68	; 0x44
 810f1a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810f1ac:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 810f1ae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 810f1b0:	68a3      	ldr	r3, [r4, #8]
 810f1b2:	06dd      	lsls	r5, r3, #27
 810f1b4:	bf44      	itt	mi
 810f1b6:	6883      	ldrmi	r3, [r0, #8]
 810f1b8:	60a3      	strmi	r3, [r4, #8]
 810f1ba:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 810f1bc:	4293      	cmp	r3, r2
 810f1be:	4681      	mov	r9, r0
 810f1c0:	4688      	mov	r8, r1
 810f1c2:	d107      	bne.n	810f1d4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x32>
 810f1c4:	991b      	ldr	r1, [sp, #108]	; 0x6c
 810f1c6:	f7ff ff73 	bl	810f0b0 <_ZNKSt9type_infoeqERKS_>
 810f1ca:	b118      	cbz	r0, 810f1d4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x32>
 810f1cc:	9b05      	ldr	r3, [sp, #20]
 810f1ce:	7163      	strb	r3, [r4, #5]
 810f1d0:	2600      	movs	r6, #0
 810f1d2:	e0fa      	b.n	810f3ca <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x228>
 810f1d4:	9906      	ldr	r1, [sp, #24]
 810f1d6:	4648      	mov	r0, r9
 810f1d8:	f7ff ff6a 	bl	810f0b0 <_ZNKSt9type_infoeqERKS_>
 810f1dc:	4682      	mov	sl, r0
 810f1de:	b1c0      	cbz	r0, 810f212 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x70>
 810f1e0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 810f1e2:	6023      	str	r3, [r4, #0]
 810f1e4:	f1b8 0f00 	cmp.w	r8, #0
 810f1e8:	9b05      	ldr	r3, [sp, #20]
 810f1ea:	7123      	strb	r3, [r4, #4]
 810f1ec:	db0b      	blt.n	810f206 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x64>
 810f1ee:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 810f1f0:	4498      	add	r8, r3
 810f1f2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 810f1f4:	4543      	cmp	r3, r8
 810f1f6:	bf14      	ite	ne
 810f1f8:	f04f 0801 	movne.w	r8, #1
 810f1fc:	f04f 0806 	moveq.w	r8, #6
 810f200:	f884 8006 	strb.w	r8, [r4, #6]
 810f204:	e7e4      	b.n	810f1d0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 810f206:	f118 0f02 	cmn.w	r8, #2
 810f20a:	d1e1      	bne.n	810f1d0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 810f20c:	2301      	movs	r3, #1
 810f20e:	71a3      	strb	r3, [r4, #6]
 810f210:	e7de      	b.n	810f1d0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 810f212:	f1b8 0f00 	cmp.w	r8, #0
 810f216:	bfaa      	itet	ge
 810f218:	9b1c      	ldrge	r3, [sp, #112]	; 0x70
 810f21a:	f8cd a01c 	strlt.w	sl, [sp, #28]
 810f21e:	eba3 0308 	subge.w	r3, r3, r8
 810f222:	f04f 0600 	mov.w	r6, #0
 810f226:	bfa8      	it	ge
 810f228:	9307      	strge	r3, [sp, #28]
 810f22a:	2302      	movs	r3, #2
 810f22c:	e9cd 6309 	strd	r6, r3, [sp, #36]	; 0x24
 810f230:	2301      	movs	r3, #1
 810f232:	9308      	str	r3, [sp, #32]
 810f234:	9b05      	ldr	r3, [sp, #20]
 810f236:	f043 0301 	orr.w	r3, r3, #1
 810f23a:	46b3      	mov	fp, r6
 810f23c:	930b      	str	r3, [sp, #44]	; 0x2c
 810f23e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 810f242:	9304      	str	r3, [sp, #16]
 810f244:	9b04      	ldr	r3, [sp, #16]
 810f246:	2b00      	cmp	r3, #0
 810f248:	f000 80d9 	beq.w	810f3fe <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x25c>
 810f24c:	eb09 05c3 	add.w	r5, r9, r3, lsl #3
 810f250:	68a7      	ldr	r7, [r4, #8]
 810f252:	68e9      	ldr	r1, [r5, #12]
 810f254:	970f      	str	r7, [sp, #60]	; 0x3c
 810f256:	07c8      	lsls	r0, r1, #31
 810f258:	bf48      	it	mi
 810f25a:	981a      	ldrmi	r0, [sp, #104]	; 0x68
 810f25c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 810f260:	ea4f 2321 	mov.w	r3, r1, asr #8
 810f264:	bf48      	it	mi
 810f266:	6800      	ldrmi	r0, [r0, #0]
 810f268:	f88d b038 	strb.w	fp, [sp, #56]	; 0x38
 810f26c:	bf48      	it	mi
 810f26e:	58c3      	ldrmi	r3, [r0, r3]
 810f270:	981a      	ldr	r0, [sp, #104]	; 0x68
 810f272:	f88d b039 	strb.w	fp, [sp, #57]	; 0x39
 810f276:	4403      	add	r3, r0
 810f278:	9807      	ldr	r0, [sp, #28]
 810f27a:	f88d b03a 	strb.w	fp, [sp, #58]	; 0x3a
 810f27e:	bf4c      	ite	mi
 810f280:	9a0b      	ldrmi	r2, [sp, #44]	; 0x2c
 810f282:	9a05      	ldrpl	r2, [sp, #20]
 810f284:	b148      	cbz	r0, 810f29a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xf8>
 810f286:	4298      	cmp	r0, r3
 810f288:	9808      	ldr	r0, [sp, #32]
 810f28a:	bf2c      	ite	cs
 810f28c:	f04f 0c00 	movcs.w	ip, #0
 810f290:	f04f 0c01 	movcc.w	ip, #1
 810f294:	4584      	cmp	ip, r0
 810f296:	f000 80ae 	beq.w	810f3f6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x254>
 810f29a:	0789      	lsls	r1, r1, #30
 810f29c:	d407      	bmi.n	810f2ae <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x10c>
 810f29e:	f118 0f02 	cmn.w	r8, #2
 810f2a2:	d102      	bne.n	810f2aa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x108>
 810f2a4:	07bf      	lsls	r7, r7, #30
 810f2a6:	f000 80a8 	beq.w	810f3fa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x258>
 810f2aa:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 810f2ae:	68a8      	ldr	r0, [r5, #8]
 810f2b0:	ad0d      	add	r5, sp, #52	; 0x34
 810f2b2:	6801      	ldr	r1, [r0, #0]
 810f2b4:	9503      	str	r5, [sp, #12]
 810f2b6:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 810f2b8:	9502      	str	r5, [sp, #8]
 810f2ba:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 810f2bc:	e9cd 3500 	strd	r3, r5, [sp]
 810f2c0:	9b06      	ldr	r3, [sp, #24]
 810f2c2:	69cd      	ldr	r5, [r1, #28]
 810f2c4:	4641      	mov	r1, r8
 810f2c6:	47a8      	blx	r5
 810f2c8:	7963      	ldrb	r3, [r4, #5]
 810f2ca:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 810f2ce:	f89d 503a 	ldrb.w	r5, [sp, #58]	; 0x3a
 810f2d2:	990d      	ldr	r1, [sp, #52]	; 0x34
 810f2d4:	4313      	orrs	r3, r2
 810f2d6:	2d06      	cmp	r5, #6
 810f2d8:	7163      	strb	r3, [r4, #5]
 810f2da:	d001      	beq.n	810f2e0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13e>
 810f2dc:	2d02      	cmp	r5, #2
 810f2de:	d106      	bne.n	810f2ee <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x14c>
 810f2e0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 810f2e4:	6021      	str	r1, [r4, #0]
 810f2e6:	7123      	strb	r3, [r4, #4]
 810f2e8:	71a5      	strb	r5, [r4, #6]
 810f2ea:	4682      	mov	sl, r0
 810f2ec:	e06c      	b.n	810f3c8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x226>
 810f2ee:	6822      	ldr	r2, [r4, #0]
 810f2f0:	b996      	cbnz	r6, 810f318 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x176>
 810f2f2:	b99a      	cbnz	r2, 810f31c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x17a>
 810f2f4:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 810f2f8:	6021      	str	r1, [r4, #0]
 810f2fa:	7122      	strb	r2, [r4, #4]
 810f2fc:	b121      	cbz	r1, 810f308 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
 810f2fe:	b11b      	cbz	r3, 810f308 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
 810f300:	f8d9 3008 	ldr.w	r3, [r9, #8]
 810f304:	07dd      	lsls	r5, r3, #31
 810f306:	d5f0      	bpl.n	810f2ea <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x148>
 810f308:	7963      	ldrb	r3, [r4, #5]
 810f30a:	2b04      	cmp	r3, #4
 810f30c:	d0ed      	beq.n	810f2ea <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x148>
 810f30e:	9b04      	ldr	r3, [sp, #16]
 810f310:	3b01      	subs	r3, #1
 810f312:	9304      	str	r3, [sp, #16]
 810f314:	4606      	mov	r6, r0
 810f316:	e795      	b.n	810f244 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xa2>
 810f318:	2a00      	cmp	r2, #0
 810f31a:	d037      	beq.n	810f38c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ea>
 810f31c:	4291      	cmp	r1, r2
 810f31e:	d106      	bne.n	810f32e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x18c>
 810f320:	7923      	ldrb	r3, [r4, #4]
 810f322:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 810f326:	4313      	orrs	r3, r2
 810f328:	7123      	strb	r3, [r4, #4]
 810f32a:	4630      	mov	r0, r6
 810f32c:	e7ec      	b.n	810f308 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
 810f32e:	b909      	cbnz	r1, 810f334 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x192>
 810f330:	2800      	cmp	r0, #0
 810f332:	d0fa      	beq.n	810f32a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x188>
 810f334:	2b03      	cmp	r3, #3
 810f336:	79a7      	ldrb	r7, [r4, #6]
 810f338:	d904      	bls.n	810f344 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1a2>
 810f33a:	07d8      	lsls	r0, r3, #31
 810f33c:	d529      	bpl.n	810f392 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f0>
 810f33e:	68a3      	ldr	r3, [r4, #8]
 810f340:	0799      	lsls	r1, r3, #30
 810f342:	d526      	bpl.n	810f392 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f0>
 810f344:	b97f      	cbnz	r7, 810f366 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1c4>
 810f346:	2d03      	cmp	r5, #3
 810f348:	d905      	bls.n	810f356 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b4>
 810f34a:	07eb      	lsls	r3, r5, #31
 810f34c:	d541      	bpl.n	810f3d2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x230>
 810f34e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 810f352:	079f      	lsls	r7, r3, #30
 810f354:	d53d      	bpl.n	810f3d2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x230>
 810f356:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 810f358:	9300      	str	r3, [sp, #0]
 810f35a:	4641      	mov	r1, r8
 810f35c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 810f35e:	9806      	ldr	r0, [sp, #24]
 810f360:	f7ff ff0b 	bl	810f17a <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 810f364:	4607      	mov	r7, r0
 810f366:	b9d5      	cbnz	r5, 810f39e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 810f368:	2f03      	cmp	r7, #3
 810f36a:	d905      	bls.n	810f378 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1d6>
 810f36c:	07f8      	lsls	r0, r7, #31
 810f36e:	d532      	bpl.n	810f3d6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x234>
 810f370:	f8d9 3008 	ldr.w	r3, [r9, #8]
 810f374:	0799      	lsls	r1, r3, #30
 810f376:	d52e      	bpl.n	810f3d6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x234>
 810f378:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 810f37a:	9300      	str	r3, [sp, #0]
 810f37c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810f37e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 810f380:	9806      	ldr	r0, [sp, #24]
 810f382:	4641      	mov	r1, r8
 810f384:	f7ff fef9 	bl	810f17a <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 810f388:	4605      	mov	r5, r0
 810f38a:	e008      	b.n	810f39e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 810f38c:	2900      	cmp	r1, #0
 810f38e:	d1d1      	bne.n	810f334 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x192>
 810f390:	e7cb      	b.n	810f32a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x188>
 810f392:	2f00      	cmp	r7, #0
 810f394:	bf08      	it	eq
 810f396:	2701      	moveq	r7, #1
 810f398:	2d00      	cmp	r5, #0
 810f39a:	bf08      	it	eq
 810f39c:	2501      	moveq	r5, #1
 810f39e:	ea85 0307 	eor.w	r3, r5, r7
 810f3a2:	b2db      	uxtb	r3, r3
 810f3a4:	2b03      	cmp	r3, #3
 810f3a6:	d918      	bls.n	810f3da <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x238>
 810f3a8:	2d03      	cmp	r5, #3
 810f3aa:	bf81      	itttt	hi
 810f3ac:	9b0d      	ldrhi	r3, [sp, #52]	; 0x34
 810f3ae:	6023      	strhi	r3, [r4, #0]
 810f3b0:	462f      	movhi	r7, r5
 810f3b2:	f89d 3038 	ldrbhi.w	r3, [sp, #56]	; 0x38
 810f3b6:	bf86      	itte	hi
 810f3b8:	7123      	strbhi	r3, [r4, #4]
 810f3ba:	2000      	movhi	r0, #0
 810f3bc:	4630      	movls	r0, r6
 810f3be:	07ba      	lsls	r2, r7, #30
 810f3c0:	71a7      	strb	r7, [r4, #6]
 810f3c2:	d401      	bmi.n	810f3c8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x226>
 810f3c4:	07fb      	lsls	r3, r7, #31
 810f3c6:	d49f      	bmi.n	810f308 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
 810f3c8:	4656      	mov	r6, sl
 810f3ca:	4630      	mov	r0, r6
 810f3cc:	b011      	add	sp, #68	; 0x44
 810f3ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810f3d2:	2701      	movs	r7, #1
 810f3d4:	e7e3      	b.n	810f39e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 810f3d6:	2501      	movs	r5, #1
 810f3d8:	e7e1      	b.n	810f39e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 810f3da:	403d      	ands	r5, r7
 810f3dc:	b2ed      	uxtb	r5, r5
 810f3de:	2d03      	cmp	r5, #3
 810f3e0:	f8c4 b000 	str.w	fp, [r4]
 810f3e4:	d904      	bls.n	810f3f0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x24e>
 810f3e6:	2302      	movs	r3, #2
 810f3e8:	71a3      	strb	r3, [r4, #6]
 810f3ea:	f04f 0a01 	mov.w	sl, #1
 810f3ee:	e7eb      	b.n	810f3c8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x226>
 810f3f0:	2001      	movs	r0, #1
 810f3f2:	71a0      	strb	r0, [r4, #6]
 810f3f4:	e788      	b.n	810f308 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
 810f3f6:	2301      	movs	r3, #1
 810f3f8:	9309      	str	r3, [sp, #36]	; 0x24
 810f3fa:	4630      	mov	r0, r6
 810f3fc:	e787      	b.n	810f30e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x16c>
 810f3fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810f400:	2b00      	cmp	r3, #0
 810f402:	d0e2      	beq.n	810f3ca <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x228>
 810f404:	9b04      	ldr	r3, [sp, #16]
 810f406:	9308      	str	r3, [sp, #32]
 810f408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810f40a:	2b01      	cmp	r3, #1
 810f40c:	d0dd      	beq.n	810f3ca <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x228>
 810f40e:	2301      	movs	r3, #1
 810f410:	930a      	str	r3, [sp, #40]	; 0x28
 810f412:	e714      	b.n	810f23e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x9c>

0810f414 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 810f414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810f418:	b089      	sub	sp, #36	; 0x24
 810f41a:	4607      	mov	r7, r0
 810f41c:	9102      	str	r1, [sp, #8]
 810f41e:	4692      	mov	sl, r2
 810f420:	461c      	mov	r4, r3
 810f422:	f7ff fd58 	bl	810eed6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 810f426:	4605      	mov	r5, r0
 810f428:	2800      	cmp	r0, #0
 810f42a:	d159      	bne.n	810f4e0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
 810f42c:	f8d4 8008 	ldr.w	r8, [r4, #8]
 810f430:	f8d7 900c 	ldr.w	r9, [r7, #12]
 810f434:	f018 0f10 	tst.w	r8, #16
 810f438:	bf18      	it	ne
 810f43a:	f8d7 8008 	ldrne.w	r8, [r7, #8]
 810f43e:	f008 0301 	and.w	r3, r8, #1
 810f442:	eb07 06c9 	add.w	r6, r7, r9, lsl #3
 810f446:	f04f 0b00 	mov.w	fp, #0
 810f44a:	9303      	str	r3, [sp, #12]
 810f44c:	f1b9 0f00 	cmp.w	r9, #0
 810f450:	d06c      	beq.n	810f52c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x118>
 810f452:	68f2      	ldr	r2, [r6, #12]
 810f454:	f8cd b010 	str.w	fp, [sp, #16]
 810f458:	f002 0301 	and.w	r3, r2, #1
 810f45c:	9300      	str	r3, [sp, #0]
 810f45e:	f012 0302 	ands.w	r3, r2, #2
 810f462:	f88d b014 	strb.w	fp, [sp, #20]
 810f466:	e9cd 8b06 	strd	r8, fp, [sp, #24]
 810f46a:	9301      	str	r3, [sp, #4]
 810f46c:	d105      	bne.n	810f47a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x66>
 810f46e:	9b03      	ldr	r3, [sp, #12]
 810f470:	b91b      	cbnz	r3, 810f47a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x66>
 810f472:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 810f476:	3e08      	subs	r6, #8
 810f478:	e7e8      	b.n	810f44c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x38>
 810f47a:	f1ba 0f00 	cmp.w	sl, #0
 810f47e:	d033      	beq.n	810f4e8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd4>
 810f480:	9b00      	ldr	r3, [sp, #0]
 810f482:	1212      	asrs	r2, r2, #8
 810f484:	b113      	cbz	r3, 810f48c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x78>
 810f486:	f8da 3000 	ldr.w	r3, [sl]
 810f48a:	589a      	ldr	r2, [r3, r2]
 810f48c:	4452      	add	r2, sl
 810f48e:	68b0      	ldr	r0, [r6, #8]
 810f490:	9902      	ldr	r1, [sp, #8]
 810f492:	6803      	ldr	r3, [r0, #0]
 810f494:	699d      	ldr	r5, [r3, #24]
 810f496:	ab04      	add	r3, sp, #16
 810f498:	47a8      	blx	r5
 810f49a:	4605      	mov	r5, r0
 810f49c:	2800      	cmp	r0, #0
 810f49e:	d0e8      	beq.n	810f472 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x5e>
 810f4a0:	9b07      	ldr	r3, [sp, #28]
 810f4a2:	2b08      	cmp	r3, #8
 810f4a4:	d103      	bne.n	810f4ae <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x9a>
 810f4a6:	9b00      	ldr	r3, [sp, #0]
 810f4a8:	b10b      	cbz	r3, 810f4ae <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x9a>
 810f4aa:	68b3      	ldr	r3, [r6, #8]
 810f4ac:	9307      	str	r3, [sp, #28]
 810f4ae:	f89d 3014 	ldrb.w	r3, [sp, #20]
 810f4b2:	2b03      	cmp	r3, #3
 810f4b4:	d905      	bls.n	810f4c2 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xae>
 810f4b6:	9a01      	ldr	r2, [sp, #4]
 810f4b8:	b91a      	cbnz	r2, 810f4c2 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xae>
 810f4ba:	f023 0302 	bic.w	r3, r3, #2
 810f4be:	f88d 3014 	strb.w	r3, [sp, #20]
 810f4c2:	68e1      	ldr	r1, [r4, #12]
 810f4c4:	b9c1      	cbnz	r1, 810f4f8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xe4>
 810f4c6:	ab04      	add	r3, sp, #16
 810f4c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810f4ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 810f4ce:	7923      	ldrb	r3, [r4, #4]
 810f4d0:	2b03      	cmp	r3, #3
 810f4d2:	d905      	bls.n	810f4e0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
 810f4d4:	079a      	lsls	r2, r3, #30
 810f4d6:	d509      	bpl.n	810f4ec <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd8>
 810f4d8:	68bb      	ldr	r3, [r7, #8]
 810f4da:	f013 0f01 	tst.w	r3, #1
 810f4de:	d1c8      	bne.n	810f472 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x5e>
 810f4e0:	4628      	mov	r0, r5
 810f4e2:	b009      	add	sp, #36	; 0x24
 810f4e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810f4e8:	4652      	mov	r2, sl
 810f4ea:	e7d0      	b.n	810f48e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x7a>
 810f4ec:	07db      	lsls	r3, r3, #31
 810f4ee:	d5f7      	bpl.n	810f4e0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
 810f4f0:	68bb      	ldr	r3, [r7, #8]
 810f4f2:	f013 0f02 	tst.w	r3, #2
 810f4f6:	e7f2      	b.n	810f4de <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xca>
 810f4f8:	6823      	ldr	r3, [r4, #0]
 810f4fa:	9a04      	ldr	r2, [sp, #16]
 810f4fc:	4293      	cmp	r3, r2
 810f4fe:	d004      	beq.n	810f50a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf6>
 810f500:	2300      	movs	r3, #0
 810f502:	6023      	str	r3, [r4, #0]
 810f504:	2302      	movs	r3, #2
 810f506:	7123      	strb	r3, [r4, #4]
 810f508:	e7ea      	b.n	810f4e0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
 810f50a:	b12b      	cbz	r3, 810f518 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x104>
 810f50c:	7923      	ldrb	r3, [r4, #4]
 810f50e:	f89d 2014 	ldrb.w	r2, [sp, #20]
 810f512:	4313      	orrs	r3, r2
 810f514:	7123      	strb	r3, [r4, #4]
 810f516:	e7ac      	b.n	810f472 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x5e>
 810f518:	9807      	ldr	r0, [sp, #28]
 810f51a:	2808      	cmp	r0, #8
 810f51c:	d0f2      	beq.n	810f504 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf0>
 810f51e:	2908      	cmp	r1, #8
 810f520:	d0f0      	beq.n	810f504 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf0>
 810f522:	f7ff fdc5 	bl	810f0b0 <_ZNKSt9type_infoeqERKS_>
 810f526:	2800      	cmp	r0, #0
 810f528:	d1f0      	bne.n	810f50c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf8>
 810f52a:	e7eb      	b.n	810f504 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf0>
 810f52c:	7925      	ldrb	r5, [r4, #4]
 810f52e:	3500      	adds	r5, #0
 810f530:	bf18      	it	ne
 810f532:	2501      	movne	r5, #1
 810f534:	e7d4      	b.n	810f4e0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>

0810f536 <_ZN10__cxxabiv111__terminateEPFvvE>:
 810f536:	b508      	push	{r3, lr}
 810f538:	4780      	blx	r0
 810f53a:	f000 f80e 	bl	810f55a <abort>
	...

0810f540 <_ZSt13get_terminatev>:
 810f540:	4b02      	ldr	r3, [pc, #8]	; (810f54c <_ZSt13get_terminatev+0xc>)
 810f542:	6818      	ldr	r0, [r3, #0]
 810f544:	f3bf 8f5b 	dmb	ish
 810f548:	4770      	bx	lr
 810f54a:	bf00      	nop
 810f54c:	10000038 	.word	0x10000038

0810f550 <_ZSt9terminatev>:
 810f550:	b508      	push	{r3, lr}
 810f552:	f7ff fff5 	bl	810f540 <_ZSt13get_terminatev>
 810f556:	f7ff ffee 	bl	810f536 <_ZN10__cxxabiv111__terminateEPFvvE>

0810f55a <abort>:
 810f55a:	b508      	push	{r3, lr}
 810f55c:	2006      	movs	r0, #6
 810f55e:	f000 fd4b 	bl	810fff8 <raise>
 810f562:	2001      	movs	r0, #1
 810f564:	f7f2 fc52 	bl	8101e0c <_exit>

0810f568 <atexit>:
 810f568:	2300      	movs	r3, #0
 810f56a:	4601      	mov	r1, r0
 810f56c:	461a      	mov	r2, r3
 810f56e:	4618      	mov	r0, r3
 810f570:	f000 bef0 	b.w	8110354 <__register_exitproc>

0810f574 <atoi>:
 810f574:	220a      	movs	r2, #10
 810f576:	2100      	movs	r1, #0
 810f578:	f000 bdf6 	b.w	8110168 <strtol>

0810f57c <__errno>:
 810f57c:	4b01      	ldr	r3, [pc, #4]	; (810f584 <__errno+0x8>)
 810f57e:	6818      	ldr	r0, [r3, #0]
 810f580:	4770      	bx	lr
 810f582:	bf00      	nop
 810f584:	1000003c 	.word	0x1000003c

0810f588 <__libc_init_array>:
 810f588:	b570      	push	{r4, r5, r6, lr}
 810f58a:	4e0d      	ldr	r6, [pc, #52]	; (810f5c0 <__libc_init_array+0x38>)
 810f58c:	4c0d      	ldr	r4, [pc, #52]	; (810f5c4 <__libc_init_array+0x3c>)
 810f58e:	1ba4      	subs	r4, r4, r6
 810f590:	10a4      	asrs	r4, r4, #2
 810f592:	2500      	movs	r5, #0
 810f594:	42a5      	cmp	r5, r4
 810f596:	d109      	bne.n	810f5ac <__libc_init_array+0x24>
 810f598:	4e0b      	ldr	r6, [pc, #44]	; (810f5c8 <__libc_init_array+0x40>)
 810f59a:	4c0c      	ldr	r4, [pc, #48]	; (810f5cc <__libc_init_array+0x44>)
 810f59c:	f002 fec4 	bl	8112328 <_init>
 810f5a0:	1ba4      	subs	r4, r4, r6
 810f5a2:	10a4      	asrs	r4, r4, #2
 810f5a4:	2500      	movs	r5, #0
 810f5a6:	42a5      	cmp	r5, r4
 810f5a8:	d105      	bne.n	810f5b6 <__libc_init_array+0x2e>
 810f5aa:	bd70      	pop	{r4, r5, r6, pc}
 810f5ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 810f5b0:	4798      	blx	r3
 810f5b2:	3501      	adds	r5, #1
 810f5b4:	e7ee      	b.n	810f594 <__libc_init_array+0xc>
 810f5b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 810f5ba:	4798      	blx	r3
 810f5bc:	3501      	adds	r5, #1
 810f5be:	e7f2      	b.n	810f5a6 <__libc_init_array+0x1e>
 810f5c0:	081131e0 	.word	0x081131e0
 810f5c4:	081131e0 	.word	0x081131e0
 810f5c8:	081131e0 	.word	0x081131e0
 810f5cc:	081131ec 	.word	0x081131ec

0810f5d0 <memcpy>:
 810f5d0:	b510      	push	{r4, lr}
 810f5d2:	1e43      	subs	r3, r0, #1
 810f5d4:	440a      	add	r2, r1
 810f5d6:	4291      	cmp	r1, r2
 810f5d8:	d100      	bne.n	810f5dc <memcpy+0xc>
 810f5da:	bd10      	pop	{r4, pc}
 810f5dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 810f5e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 810f5e4:	e7f7      	b.n	810f5d6 <memcpy+0x6>

0810f5e6 <memset>:
 810f5e6:	4402      	add	r2, r0
 810f5e8:	4603      	mov	r3, r0
 810f5ea:	4293      	cmp	r3, r2
 810f5ec:	d100      	bne.n	810f5f0 <memset+0xa>
 810f5ee:	4770      	bx	lr
 810f5f0:	f803 1b01 	strb.w	r1, [r3], #1
 810f5f4:	e7f9      	b.n	810f5ea <memset+0x4>

0810f5f6 <__cvt>:
 810f5f6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810f5fa:	ec55 4b10 	vmov	r4, r5, d0
 810f5fe:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 810f600:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 810f604:	2d00      	cmp	r5, #0
 810f606:	460e      	mov	r6, r1
 810f608:	4691      	mov	r9, r2
 810f60a:	4619      	mov	r1, r3
 810f60c:	bfb8      	it	lt
 810f60e:	4622      	movlt	r2, r4
 810f610:	462b      	mov	r3, r5
 810f612:	f027 0720 	bic.w	r7, r7, #32
 810f616:	bfbb      	ittet	lt
 810f618:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 810f61c:	461d      	movlt	r5, r3
 810f61e:	2300      	movge	r3, #0
 810f620:	232d      	movlt	r3, #45	; 0x2d
 810f622:	bfb8      	it	lt
 810f624:	4614      	movlt	r4, r2
 810f626:	2f46      	cmp	r7, #70	; 0x46
 810f628:	700b      	strb	r3, [r1, #0]
 810f62a:	d004      	beq.n	810f636 <__cvt+0x40>
 810f62c:	2f45      	cmp	r7, #69	; 0x45
 810f62e:	d100      	bne.n	810f632 <__cvt+0x3c>
 810f630:	3601      	adds	r6, #1
 810f632:	2102      	movs	r1, #2
 810f634:	e000      	b.n	810f638 <__cvt+0x42>
 810f636:	2103      	movs	r1, #3
 810f638:	ab03      	add	r3, sp, #12
 810f63a:	9301      	str	r3, [sp, #4]
 810f63c:	ab02      	add	r3, sp, #8
 810f63e:	9300      	str	r3, [sp, #0]
 810f640:	4632      	mov	r2, r6
 810f642:	4653      	mov	r3, sl
 810f644:	ec45 4b10 	vmov	d0, r4, r5
 810f648:	f000 ff76 	bl	8110538 <_dtoa_r>
 810f64c:	2f47      	cmp	r7, #71	; 0x47
 810f64e:	4680      	mov	r8, r0
 810f650:	d102      	bne.n	810f658 <__cvt+0x62>
 810f652:	f019 0f01 	tst.w	r9, #1
 810f656:	d026      	beq.n	810f6a6 <__cvt+0xb0>
 810f658:	2f46      	cmp	r7, #70	; 0x46
 810f65a:	eb08 0906 	add.w	r9, r8, r6
 810f65e:	d111      	bne.n	810f684 <__cvt+0x8e>
 810f660:	f898 3000 	ldrb.w	r3, [r8]
 810f664:	2b30      	cmp	r3, #48	; 0x30
 810f666:	d10a      	bne.n	810f67e <__cvt+0x88>
 810f668:	2200      	movs	r2, #0
 810f66a:	2300      	movs	r3, #0
 810f66c:	4620      	mov	r0, r4
 810f66e:	4629      	mov	r1, r5
 810f670:	f7f1 fac2 	bl	8100bf8 <__aeabi_dcmpeq>
 810f674:	b918      	cbnz	r0, 810f67e <__cvt+0x88>
 810f676:	f1c6 0601 	rsb	r6, r6, #1
 810f67a:	f8ca 6000 	str.w	r6, [sl]
 810f67e:	f8da 3000 	ldr.w	r3, [sl]
 810f682:	4499      	add	r9, r3
 810f684:	2200      	movs	r2, #0
 810f686:	2300      	movs	r3, #0
 810f688:	4620      	mov	r0, r4
 810f68a:	4629      	mov	r1, r5
 810f68c:	f7f1 fab4 	bl	8100bf8 <__aeabi_dcmpeq>
 810f690:	b938      	cbnz	r0, 810f6a2 <__cvt+0xac>
 810f692:	2230      	movs	r2, #48	; 0x30
 810f694:	9b03      	ldr	r3, [sp, #12]
 810f696:	454b      	cmp	r3, r9
 810f698:	d205      	bcs.n	810f6a6 <__cvt+0xb0>
 810f69a:	1c59      	adds	r1, r3, #1
 810f69c:	9103      	str	r1, [sp, #12]
 810f69e:	701a      	strb	r2, [r3, #0]
 810f6a0:	e7f8      	b.n	810f694 <__cvt+0x9e>
 810f6a2:	f8cd 900c 	str.w	r9, [sp, #12]
 810f6a6:	9b03      	ldr	r3, [sp, #12]
 810f6a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810f6aa:	eba3 0308 	sub.w	r3, r3, r8
 810f6ae:	4640      	mov	r0, r8
 810f6b0:	6013      	str	r3, [r2, #0]
 810f6b2:	b004      	add	sp, #16
 810f6b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0810f6b8 <__exponent>:
 810f6b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810f6ba:	2900      	cmp	r1, #0
 810f6bc:	4604      	mov	r4, r0
 810f6be:	bfba      	itte	lt
 810f6c0:	4249      	neglt	r1, r1
 810f6c2:	232d      	movlt	r3, #45	; 0x2d
 810f6c4:	232b      	movge	r3, #43	; 0x2b
 810f6c6:	2909      	cmp	r1, #9
 810f6c8:	f804 2b02 	strb.w	r2, [r4], #2
 810f6cc:	7043      	strb	r3, [r0, #1]
 810f6ce:	dd20      	ble.n	810f712 <__exponent+0x5a>
 810f6d0:	f10d 0307 	add.w	r3, sp, #7
 810f6d4:	461f      	mov	r7, r3
 810f6d6:	260a      	movs	r6, #10
 810f6d8:	fb91 f5f6 	sdiv	r5, r1, r6
 810f6dc:	fb06 1115 	mls	r1, r6, r5, r1
 810f6e0:	3130      	adds	r1, #48	; 0x30
 810f6e2:	2d09      	cmp	r5, #9
 810f6e4:	f803 1c01 	strb.w	r1, [r3, #-1]
 810f6e8:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 810f6ec:	4629      	mov	r1, r5
 810f6ee:	dc09      	bgt.n	810f704 <__exponent+0x4c>
 810f6f0:	3130      	adds	r1, #48	; 0x30
 810f6f2:	3b02      	subs	r3, #2
 810f6f4:	f802 1c01 	strb.w	r1, [r2, #-1]
 810f6f8:	42bb      	cmp	r3, r7
 810f6fa:	4622      	mov	r2, r4
 810f6fc:	d304      	bcc.n	810f708 <__exponent+0x50>
 810f6fe:	1a10      	subs	r0, r2, r0
 810f700:	b003      	add	sp, #12
 810f702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810f704:	4613      	mov	r3, r2
 810f706:	e7e7      	b.n	810f6d8 <__exponent+0x20>
 810f708:	f813 2b01 	ldrb.w	r2, [r3], #1
 810f70c:	f804 2b01 	strb.w	r2, [r4], #1
 810f710:	e7f2      	b.n	810f6f8 <__exponent+0x40>
 810f712:	2330      	movs	r3, #48	; 0x30
 810f714:	4419      	add	r1, r3
 810f716:	7083      	strb	r3, [r0, #2]
 810f718:	1d02      	adds	r2, r0, #4
 810f71a:	70c1      	strb	r1, [r0, #3]
 810f71c:	e7ef      	b.n	810f6fe <__exponent+0x46>
	...

0810f720 <_printf_float>:
 810f720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810f724:	b08d      	sub	sp, #52	; 0x34
 810f726:	460c      	mov	r4, r1
 810f728:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 810f72c:	4616      	mov	r6, r2
 810f72e:	461f      	mov	r7, r3
 810f730:	4605      	mov	r5, r0
 810f732:	f001 fe37 	bl	81113a4 <_localeconv_r>
 810f736:	6803      	ldr	r3, [r0, #0]
 810f738:	9304      	str	r3, [sp, #16]
 810f73a:	4618      	mov	r0, r3
 810f73c:	f7f0 fdda 	bl	81002f4 <strlen>
 810f740:	2300      	movs	r3, #0
 810f742:	930a      	str	r3, [sp, #40]	; 0x28
 810f744:	f8d8 3000 	ldr.w	r3, [r8]
 810f748:	9005      	str	r0, [sp, #20]
 810f74a:	3307      	adds	r3, #7
 810f74c:	f023 0307 	bic.w	r3, r3, #7
 810f750:	f103 0208 	add.w	r2, r3, #8
 810f754:	f894 a018 	ldrb.w	sl, [r4, #24]
 810f758:	f8d4 b000 	ldr.w	fp, [r4]
 810f75c:	f8c8 2000 	str.w	r2, [r8]
 810f760:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f764:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 810f768:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 810f76c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810f770:	9307      	str	r3, [sp, #28]
 810f772:	f8cd 8018 	str.w	r8, [sp, #24]
 810f776:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810f77a:	4ba7      	ldr	r3, [pc, #668]	; (810fa18 <_printf_float+0x2f8>)
 810f77c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810f780:	f7f1 fa6c 	bl	8100c5c <__aeabi_dcmpun>
 810f784:	bb70      	cbnz	r0, 810f7e4 <_printf_float+0xc4>
 810f786:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810f78a:	4ba3      	ldr	r3, [pc, #652]	; (810fa18 <_printf_float+0x2f8>)
 810f78c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810f790:	f7f1 fa46 	bl	8100c20 <__aeabi_dcmple>
 810f794:	bb30      	cbnz	r0, 810f7e4 <_printf_float+0xc4>
 810f796:	2200      	movs	r2, #0
 810f798:	2300      	movs	r3, #0
 810f79a:	4640      	mov	r0, r8
 810f79c:	4649      	mov	r1, r9
 810f79e:	f7f1 fa35 	bl	8100c0c <__aeabi_dcmplt>
 810f7a2:	b110      	cbz	r0, 810f7aa <_printf_float+0x8a>
 810f7a4:	232d      	movs	r3, #45	; 0x2d
 810f7a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810f7aa:	4a9c      	ldr	r2, [pc, #624]	; (810fa1c <_printf_float+0x2fc>)
 810f7ac:	4b9c      	ldr	r3, [pc, #624]	; (810fa20 <_printf_float+0x300>)
 810f7ae:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 810f7b2:	bf8c      	ite	hi
 810f7b4:	4690      	movhi	r8, r2
 810f7b6:	4698      	movls	r8, r3
 810f7b8:	2303      	movs	r3, #3
 810f7ba:	f02b 0204 	bic.w	r2, fp, #4
 810f7be:	6123      	str	r3, [r4, #16]
 810f7c0:	6022      	str	r2, [r4, #0]
 810f7c2:	f04f 0900 	mov.w	r9, #0
 810f7c6:	9700      	str	r7, [sp, #0]
 810f7c8:	4633      	mov	r3, r6
 810f7ca:	aa0b      	add	r2, sp, #44	; 0x2c
 810f7cc:	4621      	mov	r1, r4
 810f7ce:	4628      	mov	r0, r5
 810f7d0:	f000 f9e6 	bl	810fba0 <_printf_common>
 810f7d4:	3001      	adds	r0, #1
 810f7d6:	f040 808d 	bne.w	810f8f4 <_printf_float+0x1d4>
 810f7da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810f7de:	b00d      	add	sp, #52	; 0x34
 810f7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810f7e4:	4642      	mov	r2, r8
 810f7e6:	464b      	mov	r3, r9
 810f7e8:	4640      	mov	r0, r8
 810f7ea:	4649      	mov	r1, r9
 810f7ec:	f7f1 fa36 	bl	8100c5c <__aeabi_dcmpun>
 810f7f0:	b110      	cbz	r0, 810f7f8 <_printf_float+0xd8>
 810f7f2:	4a8c      	ldr	r2, [pc, #560]	; (810fa24 <_printf_float+0x304>)
 810f7f4:	4b8c      	ldr	r3, [pc, #560]	; (810fa28 <_printf_float+0x308>)
 810f7f6:	e7da      	b.n	810f7ae <_printf_float+0x8e>
 810f7f8:	6861      	ldr	r1, [r4, #4]
 810f7fa:	1c4b      	adds	r3, r1, #1
 810f7fc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 810f800:	a80a      	add	r0, sp, #40	; 0x28
 810f802:	d13e      	bne.n	810f882 <_printf_float+0x162>
 810f804:	2306      	movs	r3, #6
 810f806:	6063      	str	r3, [r4, #4]
 810f808:	2300      	movs	r3, #0
 810f80a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 810f80e:	ab09      	add	r3, sp, #36	; 0x24
 810f810:	9300      	str	r3, [sp, #0]
 810f812:	ec49 8b10 	vmov	d0, r8, r9
 810f816:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 810f81a:	6022      	str	r2, [r4, #0]
 810f81c:	f8cd a004 	str.w	sl, [sp, #4]
 810f820:	6861      	ldr	r1, [r4, #4]
 810f822:	4628      	mov	r0, r5
 810f824:	f7ff fee7 	bl	810f5f6 <__cvt>
 810f828:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 810f82c:	2b47      	cmp	r3, #71	; 0x47
 810f82e:	4680      	mov	r8, r0
 810f830:	d109      	bne.n	810f846 <_printf_float+0x126>
 810f832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810f834:	1cd8      	adds	r0, r3, #3
 810f836:	db02      	blt.n	810f83e <_printf_float+0x11e>
 810f838:	6862      	ldr	r2, [r4, #4]
 810f83a:	4293      	cmp	r3, r2
 810f83c:	dd47      	ble.n	810f8ce <_printf_float+0x1ae>
 810f83e:	f1aa 0a02 	sub.w	sl, sl, #2
 810f842:	fa5f fa8a 	uxtb.w	sl, sl
 810f846:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 810f84a:	9909      	ldr	r1, [sp, #36]	; 0x24
 810f84c:	d824      	bhi.n	810f898 <_printf_float+0x178>
 810f84e:	3901      	subs	r1, #1
 810f850:	4652      	mov	r2, sl
 810f852:	f104 0050 	add.w	r0, r4, #80	; 0x50
 810f856:	9109      	str	r1, [sp, #36]	; 0x24
 810f858:	f7ff ff2e 	bl	810f6b8 <__exponent>
 810f85c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810f85e:	1813      	adds	r3, r2, r0
 810f860:	2a01      	cmp	r2, #1
 810f862:	4681      	mov	r9, r0
 810f864:	6123      	str	r3, [r4, #16]
 810f866:	dc02      	bgt.n	810f86e <_printf_float+0x14e>
 810f868:	6822      	ldr	r2, [r4, #0]
 810f86a:	07d1      	lsls	r1, r2, #31
 810f86c:	d501      	bpl.n	810f872 <_printf_float+0x152>
 810f86e:	3301      	adds	r3, #1
 810f870:	6123      	str	r3, [r4, #16]
 810f872:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 810f876:	2b00      	cmp	r3, #0
 810f878:	d0a5      	beq.n	810f7c6 <_printf_float+0xa6>
 810f87a:	232d      	movs	r3, #45	; 0x2d
 810f87c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810f880:	e7a1      	b.n	810f7c6 <_printf_float+0xa6>
 810f882:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 810f886:	f000 8177 	beq.w	810fb78 <_printf_float+0x458>
 810f88a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 810f88e:	d1bb      	bne.n	810f808 <_printf_float+0xe8>
 810f890:	2900      	cmp	r1, #0
 810f892:	d1b9      	bne.n	810f808 <_printf_float+0xe8>
 810f894:	2301      	movs	r3, #1
 810f896:	e7b6      	b.n	810f806 <_printf_float+0xe6>
 810f898:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 810f89c:	d119      	bne.n	810f8d2 <_printf_float+0x1b2>
 810f89e:	2900      	cmp	r1, #0
 810f8a0:	6863      	ldr	r3, [r4, #4]
 810f8a2:	dd0c      	ble.n	810f8be <_printf_float+0x19e>
 810f8a4:	6121      	str	r1, [r4, #16]
 810f8a6:	b913      	cbnz	r3, 810f8ae <_printf_float+0x18e>
 810f8a8:	6822      	ldr	r2, [r4, #0]
 810f8aa:	07d2      	lsls	r2, r2, #31
 810f8ac:	d502      	bpl.n	810f8b4 <_printf_float+0x194>
 810f8ae:	3301      	adds	r3, #1
 810f8b0:	440b      	add	r3, r1
 810f8b2:	6123      	str	r3, [r4, #16]
 810f8b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810f8b6:	65a3      	str	r3, [r4, #88]	; 0x58
 810f8b8:	f04f 0900 	mov.w	r9, #0
 810f8bc:	e7d9      	b.n	810f872 <_printf_float+0x152>
 810f8be:	b913      	cbnz	r3, 810f8c6 <_printf_float+0x1a6>
 810f8c0:	6822      	ldr	r2, [r4, #0]
 810f8c2:	07d0      	lsls	r0, r2, #31
 810f8c4:	d501      	bpl.n	810f8ca <_printf_float+0x1aa>
 810f8c6:	3302      	adds	r3, #2
 810f8c8:	e7f3      	b.n	810f8b2 <_printf_float+0x192>
 810f8ca:	2301      	movs	r3, #1
 810f8cc:	e7f1      	b.n	810f8b2 <_printf_float+0x192>
 810f8ce:	f04f 0a67 	mov.w	sl, #103	; 0x67
 810f8d2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 810f8d6:	4293      	cmp	r3, r2
 810f8d8:	db05      	blt.n	810f8e6 <_printf_float+0x1c6>
 810f8da:	6822      	ldr	r2, [r4, #0]
 810f8dc:	6123      	str	r3, [r4, #16]
 810f8de:	07d1      	lsls	r1, r2, #31
 810f8e0:	d5e8      	bpl.n	810f8b4 <_printf_float+0x194>
 810f8e2:	3301      	adds	r3, #1
 810f8e4:	e7e5      	b.n	810f8b2 <_printf_float+0x192>
 810f8e6:	2b00      	cmp	r3, #0
 810f8e8:	bfd4      	ite	le
 810f8ea:	f1c3 0302 	rsble	r3, r3, #2
 810f8ee:	2301      	movgt	r3, #1
 810f8f0:	4413      	add	r3, r2
 810f8f2:	e7de      	b.n	810f8b2 <_printf_float+0x192>
 810f8f4:	6823      	ldr	r3, [r4, #0]
 810f8f6:	055a      	lsls	r2, r3, #21
 810f8f8:	d407      	bmi.n	810f90a <_printf_float+0x1ea>
 810f8fa:	6923      	ldr	r3, [r4, #16]
 810f8fc:	4642      	mov	r2, r8
 810f8fe:	4631      	mov	r1, r6
 810f900:	4628      	mov	r0, r5
 810f902:	47b8      	blx	r7
 810f904:	3001      	adds	r0, #1
 810f906:	d12b      	bne.n	810f960 <_printf_float+0x240>
 810f908:	e767      	b.n	810f7da <_printf_float+0xba>
 810f90a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 810f90e:	f240 80dc 	bls.w	810faca <_printf_float+0x3aa>
 810f912:	2200      	movs	r2, #0
 810f914:	2300      	movs	r3, #0
 810f916:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810f91a:	f7f1 f96d 	bl	8100bf8 <__aeabi_dcmpeq>
 810f91e:	2800      	cmp	r0, #0
 810f920:	d033      	beq.n	810f98a <_printf_float+0x26a>
 810f922:	2301      	movs	r3, #1
 810f924:	4a41      	ldr	r2, [pc, #260]	; (810fa2c <_printf_float+0x30c>)
 810f926:	4631      	mov	r1, r6
 810f928:	4628      	mov	r0, r5
 810f92a:	47b8      	blx	r7
 810f92c:	3001      	adds	r0, #1
 810f92e:	f43f af54 	beq.w	810f7da <_printf_float+0xba>
 810f932:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810f936:	429a      	cmp	r2, r3
 810f938:	db02      	blt.n	810f940 <_printf_float+0x220>
 810f93a:	6823      	ldr	r3, [r4, #0]
 810f93c:	07d8      	lsls	r0, r3, #31
 810f93e:	d50f      	bpl.n	810f960 <_printf_float+0x240>
 810f940:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810f944:	4631      	mov	r1, r6
 810f946:	4628      	mov	r0, r5
 810f948:	47b8      	blx	r7
 810f94a:	3001      	adds	r0, #1
 810f94c:	f43f af45 	beq.w	810f7da <_printf_float+0xba>
 810f950:	f04f 0800 	mov.w	r8, #0
 810f954:	f104 091a 	add.w	r9, r4, #26
 810f958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810f95a:	3b01      	subs	r3, #1
 810f95c:	4543      	cmp	r3, r8
 810f95e:	dc09      	bgt.n	810f974 <_printf_float+0x254>
 810f960:	6823      	ldr	r3, [r4, #0]
 810f962:	079b      	lsls	r3, r3, #30
 810f964:	f100 8103 	bmi.w	810fb6e <_printf_float+0x44e>
 810f968:	68e0      	ldr	r0, [r4, #12]
 810f96a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810f96c:	4298      	cmp	r0, r3
 810f96e:	bfb8      	it	lt
 810f970:	4618      	movlt	r0, r3
 810f972:	e734      	b.n	810f7de <_printf_float+0xbe>
 810f974:	2301      	movs	r3, #1
 810f976:	464a      	mov	r2, r9
 810f978:	4631      	mov	r1, r6
 810f97a:	4628      	mov	r0, r5
 810f97c:	47b8      	blx	r7
 810f97e:	3001      	adds	r0, #1
 810f980:	f43f af2b 	beq.w	810f7da <_printf_float+0xba>
 810f984:	f108 0801 	add.w	r8, r8, #1
 810f988:	e7e6      	b.n	810f958 <_printf_float+0x238>
 810f98a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810f98c:	2b00      	cmp	r3, #0
 810f98e:	dc2b      	bgt.n	810f9e8 <_printf_float+0x2c8>
 810f990:	2301      	movs	r3, #1
 810f992:	4a26      	ldr	r2, [pc, #152]	; (810fa2c <_printf_float+0x30c>)
 810f994:	4631      	mov	r1, r6
 810f996:	4628      	mov	r0, r5
 810f998:	47b8      	blx	r7
 810f99a:	3001      	adds	r0, #1
 810f99c:	f43f af1d 	beq.w	810f7da <_printf_float+0xba>
 810f9a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810f9a2:	b923      	cbnz	r3, 810f9ae <_printf_float+0x28e>
 810f9a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810f9a6:	b913      	cbnz	r3, 810f9ae <_printf_float+0x28e>
 810f9a8:	6823      	ldr	r3, [r4, #0]
 810f9aa:	07d9      	lsls	r1, r3, #31
 810f9ac:	d5d8      	bpl.n	810f960 <_printf_float+0x240>
 810f9ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810f9b2:	4631      	mov	r1, r6
 810f9b4:	4628      	mov	r0, r5
 810f9b6:	47b8      	blx	r7
 810f9b8:	3001      	adds	r0, #1
 810f9ba:	f43f af0e 	beq.w	810f7da <_printf_float+0xba>
 810f9be:	f04f 0900 	mov.w	r9, #0
 810f9c2:	f104 0a1a 	add.w	sl, r4, #26
 810f9c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810f9c8:	425b      	negs	r3, r3
 810f9ca:	454b      	cmp	r3, r9
 810f9cc:	dc01      	bgt.n	810f9d2 <_printf_float+0x2b2>
 810f9ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810f9d0:	e794      	b.n	810f8fc <_printf_float+0x1dc>
 810f9d2:	2301      	movs	r3, #1
 810f9d4:	4652      	mov	r2, sl
 810f9d6:	4631      	mov	r1, r6
 810f9d8:	4628      	mov	r0, r5
 810f9da:	47b8      	blx	r7
 810f9dc:	3001      	adds	r0, #1
 810f9de:	f43f aefc 	beq.w	810f7da <_printf_float+0xba>
 810f9e2:	f109 0901 	add.w	r9, r9, #1
 810f9e6:	e7ee      	b.n	810f9c6 <_printf_float+0x2a6>
 810f9e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810f9ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 810f9ec:	429a      	cmp	r2, r3
 810f9ee:	bfa8      	it	ge
 810f9f0:	461a      	movge	r2, r3
 810f9f2:	2a00      	cmp	r2, #0
 810f9f4:	4691      	mov	r9, r2
 810f9f6:	dd07      	ble.n	810fa08 <_printf_float+0x2e8>
 810f9f8:	4613      	mov	r3, r2
 810f9fa:	4631      	mov	r1, r6
 810f9fc:	4642      	mov	r2, r8
 810f9fe:	4628      	mov	r0, r5
 810fa00:	47b8      	blx	r7
 810fa02:	3001      	adds	r0, #1
 810fa04:	f43f aee9 	beq.w	810f7da <_printf_float+0xba>
 810fa08:	f104 031a 	add.w	r3, r4, #26
 810fa0c:	f04f 0b00 	mov.w	fp, #0
 810fa10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810fa14:	9306      	str	r3, [sp, #24]
 810fa16:	e015      	b.n	810fa44 <_printf_float+0x324>
 810fa18:	7fefffff 	.word	0x7fefffff
 810fa1c:	08112f18 	.word	0x08112f18
 810fa20:	08112f14 	.word	0x08112f14
 810fa24:	08112f20 	.word	0x08112f20
 810fa28:	08112f1c 	.word	0x08112f1c
 810fa2c:	08112f24 	.word	0x08112f24
 810fa30:	2301      	movs	r3, #1
 810fa32:	9a06      	ldr	r2, [sp, #24]
 810fa34:	4631      	mov	r1, r6
 810fa36:	4628      	mov	r0, r5
 810fa38:	47b8      	blx	r7
 810fa3a:	3001      	adds	r0, #1
 810fa3c:	f43f aecd 	beq.w	810f7da <_printf_float+0xba>
 810fa40:	f10b 0b01 	add.w	fp, fp, #1
 810fa44:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 810fa48:	ebaa 0309 	sub.w	r3, sl, r9
 810fa4c:	455b      	cmp	r3, fp
 810fa4e:	dcef      	bgt.n	810fa30 <_printf_float+0x310>
 810fa50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810fa54:	429a      	cmp	r2, r3
 810fa56:	44d0      	add	r8, sl
 810fa58:	db15      	blt.n	810fa86 <_printf_float+0x366>
 810fa5a:	6823      	ldr	r3, [r4, #0]
 810fa5c:	07da      	lsls	r2, r3, #31
 810fa5e:	d412      	bmi.n	810fa86 <_printf_float+0x366>
 810fa60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810fa62:	9909      	ldr	r1, [sp, #36]	; 0x24
 810fa64:	eba3 020a 	sub.w	r2, r3, sl
 810fa68:	eba3 0a01 	sub.w	sl, r3, r1
 810fa6c:	4592      	cmp	sl, r2
 810fa6e:	bfa8      	it	ge
 810fa70:	4692      	movge	sl, r2
 810fa72:	f1ba 0f00 	cmp.w	sl, #0
 810fa76:	dc0e      	bgt.n	810fa96 <_printf_float+0x376>
 810fa78:	f04f 0800 	mov.w	r8, #0
 810fa7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810fa80:	f104 091a 	add.w	r9, r4, #26
 810fa84:	e019      	b.n	810faba <_printf_float+0x39a>
 810fa86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810fa8a:	4631      	mov	r1, r6
 810fa8c:	4628      	mov	r0, r5
 810fa8e:	47b8      	blx	r7
 810fa90:	3001      	adds	r0, #1
 810fa92:	d1e5      	bne.n	810fa60 <_printf_float+0x340>
 810fa94:	e6a1      	b.n	810f7da <_printf_float+0xba>
 810fa96:	4653      	mov	r3, sl
 810fa98:	4642      	mov	r2, r8
 810fa9a:	4631      	mov	r1, r6
 810fa9c:	4628      	mov	r0, r5
 810fa9e:	47b8      	blx	r7
 810faa0:	3001      	adds	r0, #1
 810faa2:	d1e9      	bne.n	810fa78 <_printf_float+0x358>
 810faa4:	e699      	b.n	810f7da <_printf_float+0xba>
 810faa6:	2301      	movs	r3, #1
 810faa8:	464a      	mov	r2, r9
 810faaa:	4631      	mov	r1, r6
 810faac:	4628      	mov	r0, r5
 810faae:	47b8      	blx	r7
 810fab0:	3001      	adds	r0, #1
 810fab2:	f43f ae92 	beq.w	810f7da <_printf_float+0xba>
 810fab6:	f108 0801 	add.w	r8, r8, #1
 810faba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810fabe:	1a9b      	subs	r3, r3, r2
 810fac0:	eba3 030a 	sub.w	r3, r3, sl
 810fac4:	4543      	cmp	r3, r8
 810fac6:	dcee      	bgt.n	810faa6 <_printf_float+0x386>
 810fac8:	e74a      	b.n	810f960 <_printf_float+0x240>
 810faca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810facc:	2a01      	cmp	r2, #1
 810face:	dc01      	bgt.n	810fad4 <_printf_float+0x3b4>
 810fad0:	07db      	lsls	r3, r3, #31
 810fad2:	d53a      	bpl.n	810fb4a <_printf_float+0x42a>
 810fad4:	2301      	movs	r3, #1
 810fad6:	4642      	mov	r2, r8
 810fad8:	4631      	mov	r1, r6
 810fada:	4628      	mov	r0, r5
 810fadc:	47b8      	blx	r7
 810fade:	3001      	adds	r0, #1
 810fae0:	f43f ae7b 	beq.w	810f7da <_printf_float+0xba>
 810fae4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810fae8:	4631      	mov	r1, r6
 810faea:	4628      	mov	r0, r5
 810faec:	47b8      	blx	r7
 810faee:	3001      	adds	r0, #1
 810faf0:	f108 0801 	add.w	r8, r8, #1
 810faf4:	f43f ae71 	beq.w	810f7da <_printf_float+0xba>
 810faf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810fafa:	2200      	movs	r2, #0
 810fafc:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 810fb00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810fb04:	2300      	movs	r3, #0
 810fb06:	f7f1 f877 	bl	8100bf8 <__aeabi_dcmpeq>
 810fb0a:	b9c8      	cbnz	r0, 810fb40 <_printf_float+0x420>
 810fb0c:	4653      	mov	r3, sl
 810fb0e:	4642      	mov	r2, r8
 810fb10:	4631      	mov	r1, r6
 810fb12:	4628      	mov	r0, r5
 810fb14:	47b8      	blx	r7
 810fb16:	3001      	adds	r0, #1
 810fb18:	d10e      	bne.n	810fb38 <_printf_float+0x418>
 810fb1a:	e65e      	b.n	810f7da <_printf_float+0xba>
 810fb1c:	2301      	movs	r3, #1
 810fb1e:	4652      	mov	r2, sl
 810fb20:	4631      	mov	r1, r6
 810fb22:	4628      	mov	r0, r5
 810fb24:	47b8      	blx	r7
 810fb26:	3001      	adds	r0, #1
 810fb28:	f43f ae57 	beq.w	810f7da <_printf_float+0xba>
 810fb2c:	f108 0801 	add.w	r8, r8, #1
 810fb30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810fb32:	3b01      	subs	r3, #1
 810fb34:	4543      	cmp	r3, r8
 810fb36:	dcf1      	bgt.n	810fb1c <_printf_float+0x3fc>
 810fb38:	464b      	mov	r3, r9
 810fb3a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 810fb3e:	e6de      	b.n	810f8fe <_printf_float+0x1de>
 810fb40:	f04f 0800 	mov.w	r8, #0
 810fb44:	f104 0a1a 	add.w	sl, r4, #26
 810fb48:	e7f2      	b.n	810fb30 <_printf_float+0x410>
 810fb4a:	2301      	movs	r3, #1
 810fb4c:	e7df      	b.n	810fb0e <_printf_float+0x3ee>
 810fb4e:	2301      	movs	r3, #1
 810fb50:	464a      	mov	r2, r9
 810fb52:	4631      	mov	r1, r6
 810fb54:	4628      	mov	r0, r5
 810fb56:	47b8      	blx	r7
 810fb58:	3001      	adds	r0, #1
 810fb5a:	f43f ae3e 	beq.w	810f7da <_printf_float+0xba>
 810fb5e:	f108 0801 	add.w	r8, r8, #1
 810fb62:	68e3      	ldr	r3, [r4, #12]
 810fb64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810fb66:	1a9b      	subs	r3, r3, r2
 810fb68:	4543      	cmp	r3, r8
 810fb6a:	dcf0      	bgt.n	810fb4e <_printf_float+0x42e>
 810fb6c:	e6fc      	b.n	810f968 <_printf_float+0x248>
 810fb6e:	f04f 0800 	mov.w	r8, #0
 810fb72:	f104 0919 	add.w	r9, r4, #25
 810fb76:	e7f4      	b.n	810fb62 <_printf_float+0x442>
 810fb78:	2900      	cmp	r1, #0
 810fb7a:	f43f ae8b 	beq.w	810f894 <_printf_float+0x174>
 810fb7e:	2300      	movs	r3, #0
 810fb80:	e9cd 0302 	strd	r0, r3, [sp, #8]
 810fb84:	ab09      	add	r3, sp, #36	; 0x24
 810fb86:	9300      	str	r3, [sp, #0]
 810fb88:	ec49 8b10 	vmov	d0, r8, r9
 810fb8c:	6022      	str	r2, [r4, #0]
 810fb8e:	f8cd a004 	str.w	sl, [sp, #4]
 810fb92:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 810fb96:	4628      	mov	r0, r5
 810fb98:	f7ff fd2d 	bl	810f5f6 <__cvt>
 810fb9c:	4680      	mov	r8, r0
 810fb9e:	e648      	b.n	810f832 <_printf_float+0x112>

0810fba0 <_printf_common>:
 810fba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810fba4:	4691      	mov	r9, r2
 810fba6:	461f      	mov	r7, r3
 810fba8:	688a      	ldr	r2, [r1, #8]
 810fbaa:	690b      	ldr	r3, [r1, #16]
 810fbac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 810fbb0:	4293      	cmp	r3, r2
 810fbb2:	bfb8      	it	lt
 810fbb4:	4613      	movlt	r3, r2
 810fbb6:	f8c9 3000 	str.w	r3, [r9]
 810fbba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 810fbbe:	4606      	mov	r6, r0
 810fbc0:	460c      	mov	r4, r1
 810fbc2:	b112      	cbz	r2, 810fbca <_printf_common+0x2a>
 810fbc4:	3301      	adds	r3, #1
 810fbc6:	f8c9 3000 	str.w	r3, [r9]
 810fbca:	6823      	ldr	r3, [r4, #0]
 810fbcc:	0699      	lsls	r1, r3, #26
 810fbce:	bf42      	ittt	mi
 810fbd0:	f8d9 3000 	ldrmi.w	r3, [r9]
 810fbd4:	3302      	addmi	r3, #2
 810fbd6:	f8c9 3000 	strmi.w	r3, [r9]
 810fbda:	6825      	ldr	r5, [r4, #0]
 810fbdc:	f015 0506 	ands.w	r5, r5, #6
 810fbe0:	d107      	bne.n	810fbf2 <_printf_common+0x52>
 810fbe2:	f104 0a19 	add.w	sl, r4, #25
 810fbe6:	68e3      	ldr	r3, [r4, #12]
 810fbe8:	f8d9 2000 	ldr.w	r2, [r9]
 810fbec:	1a9b      	subs	r3, r3, r2
 810fbee:	42ab      	cmp	r3, r5
 810fbf0:	dc28      	bgt.n	810fc44 <_printf_common+0xa4>
 810fbf2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 810fbf6:	6822      	ldr	r2, [r4, #0]
 810fbf8:	3300      	adds	r3, #0
 810fbfa:	bf18      	it	ne
 810fbfc:	2301      	movne	r3, #1
 810fbfe:	0692      	lsls	r2, r2, #26
 810fc00:	d42d      	bmi.n	810fc5e <_printf_common+0xbe>
 810fc02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 810fc06:	4639      	mov	r1, r7
 810fc08:	4630      	mov	r0, r6
 810fc0a:	47c0      	blx	r8
 810fc0c:	3001      	adds	r0, #1
 810fc0e:	d020      	beq.n	810fc52 <_printf_common+0xb2>
 810fc10:	6823      	ldr	r3, [r4, #0]
 810fc12:	68e5      	ldr	r5, [r4, #12]
 810fc14:	f8d9 2000 	ldr.w	r2, [r9]
 810fc18:	f003 0306 	and.w	r3, r3, #6
 810fc1c:	2b04      	cmp	r3, #4
 810fc1e:	bf08      	it	eq
 810fc20:	1aad      	subeq	r5, r5, r2
 810fc22:	68a3      	ldr	r3, [r4, #8]
 810fc24:	6922      	ldr	r2, [r4, #16]
 810fc26:	bf0c      	ite	eq
 810fc28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810fc2c:	2500      	movne	r5, #0
 810fc2e:	4293      	cmp	r3, r2
 810fc30:	bfc4      	itt	gt
 810fc32:	1a9b      	subgt	r3, r3, r2
 810fc34:	18ed      	addgt	r5, r5, r3
 810fc36:	f04f 0900 	mov.w	r9, #0
 810fc3a:	341a      	adds	r4, #26
 810fc3c:	454d      	cmp	r5, r9
 810fc3e:	d11a      	bne.n	810fc76 <_printf_common+0xd6>
 810fc40:	2000      	movs	r0, #0
 810fc42:	e008      	b.n	810fc56 <_printf_common+0xb6>
 810fc44:	2301      	movs	r3, #1
 810fc46:	4652      	mov	r2, sl
 810fc48:	4639      	mov	r1, r7
 810fc4a:	4630      	mov	r0, r6
 810fc4c:	47c0      	blx	r8
 810fc4e:	3001      	adds	r0, #1
 810fc50:	d103      	bne.n	810fc5a <_printf_common+0xba>
 810fc52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810fc56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810fc5a:	3501      	adds	r5, #1
 810fc5c:	e7c3      	b.n	810fbe6 <_printf_common+0x46>
 810fc5e:	18e1      	adds	r1, r4, r3
 810fc60:	1c5a      	adds	r2, r3, #1
 810fc62:	2030      	movs	r0, #48	; 0x30
 810fc64:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 810fc68:	4422      	add	r2, r4
 810fc6a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 810fc6e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 810fc72:	3302      	adds	r3, #2
 810fc74:	e7c5      	b.n	810fc02 <_printf_common+0x62>
 810fc76:	2301      	movs	r3, #1
 810fc78:	4622      	mov	r2, r4
 810fc7a:	4639      	mov	r1, r7
 810fc7c:	4630      	mov	r0, r6
 810fc7e:	47c0      	blx	r8
 810fc80:	3001      	adds	r0, #1
 810fc82:	d0e6      	beq.n	810fc52 <_printf_common+0xb2>
 810fc84:	f109 0901 	add.w	r9, r9, #1
 810fc88:	e7d8      	b.n	810fc3c <_printf_common+0x9c>
	...

0810fc8c <_printf_i>:
 810fc8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810fc90:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 810fc94:	460c      	mov	r4, r1
 810fc96:	7e09      	ldrb	r1, [r1, #24]
 810fc98:	b085      	sub	sp, #20
 810fc9a:	296e      	cmp	r1, #110	; 0x6e
 810fc9c:	4617      	mov	r7, r2
 810fc9e:	4606      	mov	r6, r0
 810fca0:	4698      	mov	r8, r3
 810fca2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 810fca4:	f000 80b3 	beq.w	810fe0e <_printf_i+0x182>
 810fca8:	d822      	bhi.n	810fcf0 <_printf_i+0x64>
 810fcaa:	2963      	cmp	r1, #99	; 0x63
 810fcac:	d036      	beq.n	810fd1c <_printf_i+0x90>
 810fcae:	d80a      	bhi.n	810fcc6 <_printf_i+0x3a>
 810fcb0:	2900      	cmp	r1, #0
 810fcb2:	f000 80b9 	beq.w	810fe28 <_printf_i+0x19c>
 810fcb6:	2958      	cmp	r1, #88	; 0x58
 810fcb8:	f000 8083 	beq.w	810fdc2 <_printf_i+0x136>
 810fcbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810fcc0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 810fcc4:	e032      	b.n	810fd2c <_printf_i+0xa0>
 810fcc6:	2964      	cmp	r1, #100	; 0x64
 810fcc8:	d001      	beq.n	810fcce <_printf_i+0x42>
 810fcca:	2969      	cmp	r1, #105	; 0x69
 810fccc:	d1f6      	bne.n	810fcbc <_printf_i+0x30>
 810fcce:	6820      	ldr	r0, [r4, #0]
 810fcd0:	6813      	ldr	r3, [r2, #0]
 810fcd2:	0605      	lsls	r5, r0, #24
 810fcd4:	f103 0104 	add.w	r1, r3, #4
 810fcd8:	d52a      	bpl.n	810fd30 <_printf_i+0xa4>
 810fcda:	681b      	ldr	r3, [r3, #0]
 810fcdc:	6011      	str	r1, [r2, #0]
 810fcde:	2b00      	cmp	r3, #0
 810fce0:	da03      	bge.n	810fcea <_printf_i+0x5e>
 810fce2:	222d      	movs	r2, #45	; 0x2d
 810fce4:	425b      	negs	r3, r3
 810fce6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 810fcea:	486f      	ldr	r0, [pc, #444]	; (810fea8 <_printf_i+0x21c>)
 810fcec:	220a      	movs	r2, #10
 810fcee:	e039      	b.n	810fd64 <_printf_i+0xd8>
 810fcf0:	2973      	cmp	r1, #115	; 0x73
 810fcf2:	f000 809d 	beq.w	810fe30 <_printf_i+0x1a4>
 810fcf6:	d808      	bhi.n	810fd0a <_printf_i+0x7e>
 810fcf8:	296f      	cmp	r1, #111	; 0x6f
 810fcfa:	d020      	beq.n	810fd3e <_printf_i+0xb2>
 810fcfc:	2970      	cmp	r1, #112	; 0x70
 810fcfe:	d1dd      	bne.n	810fcbc <_printf_i+0x30>
 810fd00:	6823      	ldr	r3, [r4, #0]
 810fd02:	f043 0320 	orr.w	r3, r3, #32
 810fd06:	6023      	str	r3, [r4, #0]
 810fd08:	e003      	b.n	810fd12 <_printf_i+0x86>
 810fd0a:	2975      	cmp	r1, #117	; 0x75
 810fd0c:	d017      	beq.n	810fd3e <_printf_i+0xb2>
 810fd0e:	2978      	cmp	r1, #120	; 0x78
 810fd10:	d1d4      	bne.n	810fcbc <_printf_i+0x30>
 810fd12:	2378      	movs	r3, #120	; 0x78
 810fd14:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 810fd18:	4864      	ldr	r0, [pc, #400]	; (810feac <_printf_i+0x220>)
 810fd1a:	e055      	b.n	810fdc8 <_printf_i+0x13c>
 810fd1c:	6813      	ldr	r3, [r2, #0]
 810fd1e:	1d19      	adds	r1, r3, #4
 810fd20:	681b      	ldr	r3, [r3, #0]
 810fd22:	6011      	str	r1, [r2, #0]
 810fd24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810fd28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 810fd2c:	2301      	movs	r3, #1
 810fd2e:	e08c      	b.n	810fe4a <_printf_i+0x1be>
 810fd30:	681b      	ldr	r3, [r3, #0]
 810fd32:	6011      	str	r1, [r2, #0]
 810fd34:	f010 0f40 	tst.w	r0, #64	; 0x40
 810fd38:	bf18      	it	ne
 810fd3a:	b21b      	sxthne	r3, r3
 810fd3c:	e7cf      	b.n	810fcde <_printf_i+0x52>
 810fd3e:	6813      	ldr	r3, [r2, #0]
 810fd40:	6825      	ldr	r5, [r4, #0]
 810fd42:	1d18      	adds	r0, r3, #4
 810fd44:	6010      	str	r0, [r2, #0]
 810fd46:	0628      	lsls	r0, r5, #24
 810fd48:	d501      	bpl.n	810fd4e <_printf_i+0xc2>
 810fd4a:	681b      	ldr	r3, [r3, #0]
 810fd4c:	e002      	b.n	810fd54 <_printf_i+0xc8>
 810fd4e:	0668      	lsls	r0, r5, #25
 810fd50:	d5fb      	bpl.n	810fd4a <_printf_i+0xbe>
 810fd52:	881b      	ldrh	r3, [r3, #0]
 810fd54:	4854      	ldr	r0, [pc, #336]	; (810fea8 <_printf_i+0x21c>)
 810fd56:	296f      	cmp	r1, #111	; 0x6f
 810fd58:	bf14      	ite	ne
 810fd5a:	220a      	movne	r2, #10
 810fd5c:	2208      	moveq	r2, #8
 810fd5e:	2100      	movs	r1, #0
 810fd60:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 810fd64:	6865      	ldr	r5, [r4, #4]
 810fd66:	60a5      	str	r5, [r4, #8]
 810fd68:	2d00      	cmp	r5, #0
 810fd6a:	f2c0 8095 	blt.w	810fe98 <_printf_i+0x20c>
 810fd6e:	6821      	ldr	r1, [r4, #0]
 810fd70:	f021 0104 	bic.w	r1, r1, #4
 810fd74:	6021      	str	r1, [r4, #0]
 810fd76:	2b00      	cmp	r3, #0
 810fd78:	d13d      	bne.n	810fdf6 <_printf_i+0x16a>
 810fd7a:	2d00      	cmp	r5, #0
 810fd7c:	f040 808e 	bne.w	810fe9c <_printf_i+0x210>
 810fd80:	4665      	mov	r5, ip
 810fd82:	2a08      	cmp	r2, #8
 810fd84:	d10b      	bne.n	810fd9e <_printf_i+0x112>
 810fd86:	6823      	ldr	r3, [r4, #0]
 810fd88:	07db      	lsls	r3, r3, #31
 810fd8a:	d508      	bpl.n	810fd9e <_printf_i+0x112>
 810fd8c:	6923      	ldr	r3, [r4, #16]
 810fd8e:	6862      	ldr	r2, [r4, #4]
 810fd90:	429a      	cmp	r2, r3
 810fd92:	bfde      	ittt	le
 810fd94:	2330      	movle	r3, #48	; 0x30
 810fd96:	f805 3c01 	strble.w	r3, [r5, #-1]
 810fd9a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 810fd9e:	ebac 0305 	sub.w	r3, ip, r5
 810fda2:	6123      	str	r3, [r4, #16]
 810fda4:	f8cd 8000 	str.w	r8, [sp]
 810fda8:	463b      	mov	r3, r7
 810fdaa:	aa03      	add	r2, sp, #12
 810fdac:	4621      	mov	r1, r4
 810fdae:	4630      	mov	r0, r6
 810fdb0:	f7ff fef6 	bl	810fba0 <_printf_common>
 810fdb4:	3001      	adds	r0, #1
 810fdb6:	d14d      	bne.n	810fe54 <_printf_i+0x1c8>
 810fdb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810fdbc:	b005      	add	sp, #20
 810fdbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810fdc2:	4839      	ldr	r0, [pc, #228]	; (810fea8 <_printf_i+0x21c>)
 810fdc4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 810fdc8:	6813      	ldr	r3, [r2, #0]
 810fdca:	6821      	ldr	r1, [r4, #0]
 810fdcc:	1d1d      	adds	r5, r3, #4
 810fdce:	681b      	ldr	r3, [r3, #0]
 810fdd0:	6015      	str	r5, [r2, #0]
 810fdd2:	060a      	lsls	r2, r1, #24
 810fdd4:	d50b      	bpl.n	810fdee <_printf_i+0x162>
 810fdd6:	07ca      	lsls	r2, r1, #31
 810fdd8:	bf44      	itt	mi
 810fdda:	f041 0120 	orrmi.w	r1, r1, #32
 810fdde:	6021      	strmi	r1, [r4, #0]
 810fde0:	b91b      	cbnz	r3, 810fdea <_printf_i+0x15e>
 810fde2:	6822      	ldr	r2, [r4, #0]
 810fde4:	f022 0220 	bic.w	r2, r2, #32
 810fde8:	6022      	str	r2, [r4, #0]
 810fdea:	2210      	movs	r2, #16
 810fdec:	e7b7      	b.n	810fd5e <_printf_i+0xd2>
 810fdee:	064d      	lsls	r5, r1, #25
 810fdf0:	bf48      	it	mi
 810fdf2:	b29b      	uxthmi	r3, r3
 810fdf4:	e7ef      	b.n	810fdd6 <_printf_i+0x14a>
 810fdf6:	4665      	mov	r5, ip
 810fdf8:	fbb3 f1f2 	udiv	r1, r3, r2
 810fdfc:	fb02 3311 	mls	r3, r2, r1, r3
 810fe00:	5cc3      	ldrb	r3, [r0, r3]
 810fe02:	f805 3d01 	strb.w	r3, [r5, #-1]!
 810fe06:	460b      	mov	r3, r1
 810fe08:	2900      	cmp	r1, #0
 810fe0a:	d1f5      	bne.n	810fdf8 <_printf_i+0x16c>
 810fe0c:	e7b9      	b.n	810fd82 <_printf_i+0xf6>
 810fe0e:	6813      	ldr	r3, [r2, #0]
 810fe10:	6825      	ldr	r5, [r4, #0]
 810fe12:	6961      	ldr	r1, [r4, #20]
 810fe14:	1d18      	adds	r0, r3, #4
 810fe16:	6010      	str	r0, [r2, #0]
 810fe18:	0628      	lsls	r0, r5, #24
 810fe1a:	681b      	ldr	r3, [r3, #0]
 810fe1c:	d501      	bpl.n	810fe22 <_printf_i+0x196>
 810fe1e:	6019      	str	r1, [r3, #0]
 810fe20:	e002      	b.n	810fe28 <_printf_i+0x19c>
 810fe22:	066a      	lsls	r2, r5, #25
 810fe24:	d5fb      	bpl.n	810fe1e <_printf_i+0x192>
 810fe26:	8019      	strh	r1, [r3, #0]
 810fe28:	2300      	movs	r3, #0
 810fe2a:	6123      	str	r3, [r4, #16]
 810fe2c:	4665      	mov	r5, ip
 810fe2e:	e7b9      	b.n	810fda4 <_printf_i+0x118>
 810fe30:	6813      	ldr	r3, [r2, #0]
 810fe32:	1d19      	adds	r1, r3, #4
 810fe34:	6011      	str	r1, [r2, #0]
 810fe36:	681d      	ldr	r5, [r3, #0]
 810fe38:	6862      	ldr	r2, [r4, #4]
 810fe3a:	2100      	movs	r1, #0
 810fe3c:	4628      	mov	r0, r5
 810fe3e:	f7f0 fa67 	bl	8100310 <memchr>
 810fe42:	b108      	cbz	r0, 810fe48 <_printf_i+0x1bc>
 810fe44:	1b40      	subs	r0, r0, r5
 810fe46:	6060      	str	r0, [r4, #4]
 810fe48:	6863      	ldr	r3, [r4, #4]
 810fe4a:	6123      	str	r3, [r4, #16]
 810fe4c:	2300      	movs	r3, #0
 810fe4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810fe52:	e7a7      	b.n	810fda4 <_printf_i+0x118>
 810fe54:	6923      	ldr	r3, [r4, #16]
 810fe56:	462a      	mov	r2, r5
 810fe58:	4639      	mov	r1, r7
 810fe5a:	4630      	mov	r0, r6
 810fe5c:	47c0      	blx	r8
 810fe5e:	3001      	adds	r0, #1
 810fe60:	d0aa      	beq.n	810fdb8 <_printf_i+0x12c>
 810fe62:	6823      	ldr	r3, [r4, #0]
 810fe64:	079b      	lsls	r3, r3, #30
 810fe66:	d413      	bmi.n	810fe90 <_printf_i+0x204>
 810fe68:	68e0      	ldr	r0, [r4, #12]
 810fe6a:	9b03      	ldr	r3, [sp, #12]
 810fe6c:	4298      	cmp	r0, r3
 810fe6e:	bfb8      	it	lt
 810fe70:	4618      	movlt	r0, r3
 810fe72:	e7a3      	b.n	810fdbc <_printf_i+0x130>
 810fe74:	2301      	movs	r3, #1
 810fe76:	464a      	mov	r2, r9
 810fe78:	4639      	mov	r1, r7
 810fe7a:	4630      	mov	r0, r6
 810fe7c:	47c0      	blx	r8
 810fe7e:	3001      	adds	r0, #1
 810fe80:	d09a      	beq.n	810fdb8 <_printf_i+0x12c>
 810fe82:	3501      	adds	r5, #1
 810fe84:	68e3      	ldr	r3, [r4, #12]
 810fe86:	9a03      	ldr	r2, [sp, #12]
 810fe88:	1a9b      	subs	r3, r3, r2
 810fe8a:	42ab      	cmp	r3, r5
 810fe8c:	dcf2      	bgt.n	810fe74 <_printf_i+0x1e8>
 810fe8e:	e7eb      	b.n	810fe68 <_printf_i+0x1dc>
 810fe90:	2500      	movs	r5, #0
 810fe92:	f104 0919 	add.w	r9, r4, #25
 810fe96:	e7f5      	b.n	810fe84 <_printf_i+0x1f8>
 810fe98:	2b00      	cmp	r3, #0
 810fe9a:	d1ac      	bne.n	810fdf6 <_printf_i+0x16a>
 810fe9c:	7803      	ldrb	r3, [r0, #0]
 810fe9e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 810fea2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810fea6:	e76c      	b.n	810fd82 <_printf_i+0xf6>
 810fea8:	08112f26 	.word	0x08112f26
 810feac:	08112f37 	.word	0x08112f37

0810feb0 <iprintf>:
 810feb0:	b40f      	push	{r0, r1, r2, r3}
 810feb2:	4b0a      	ldr	r3, [pc, #40]	; (810fedc <iprintf+0x2c>)
 810feb4:	b513      	push	{r0, r1, r4, lr}
 810feb6:	681c      	ldr	r4, [r3, #0]
 810feb8:	b124      	cbz	r4, 810fec4 <iprintf+0x14>
 810feba:	69a3      	ldr	r3, [r4, #24]
 810febc:	b913      	cbnz	r3, 810fec4 <iprintf+0x14>
 810febe:	4620      	mov	r0, r4
 810fec0:	f001 f9e2 	bl	8111288 <__sinit>
 810fec4:	ab05      	add	r3, sp, #20
 810fec6:	9a04      	ldr	r2, [sp, #16]
 810fec8:	68a1      	ldr	r1, [r4, #8]
 810feca:	9301      	str	r3, [sp, #4]
 810fecc:	4620      	mov	r0, r4
 810fece:	f002 f803 	bl	8111ed8 <_vfiprintf_r>
 810fed2:	b002      	add	sp, #8
 810fed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810fed8:	b004      	add	sp, #16
 810feda:	4770      	bx	lr
 810fedc:	1000003c 	.word	0x1000003c

0810fee0 <_puts_r>:
 810fee0:	b570      	push	{r4, r5, r6, lr}
 810fee2:	460e      	mov	r6, r1
 810fee4:	4605      	mov	r5, r0
 810fee6:	b118      	cbz	r0, 810fef0 <_puts_r+0x10>
 810fee8:	6983      	ldr	r3, [r0, #24]
 810feea:	b90b      	cbnz	r3, 810fef0 <_puts_r+0x10>
 810feec:	f001 f9cc 	bl	8111288 <__sinit>
 810fef0:	69ab      	ldr	r3, [r5, #24]
 810fef2:	68ac      	ldr	r4, [r5, #8]
 810fef4:	b913      	cbnz	r3, 810fefc <_puts_r+0x1c>
 810fef6:	4628      	mov	r0, r5
 810fef8:	f001 f9c6 	bl	8111288 <__sinit>
 810fefc:	4b23      	ldr	r3, [pc, #140]	; (810ff8c <_puts_r+0xac>)
 810fefe:	429c      	cmp	r4, r3
 810ff00:	d117      	bne.n	810ff32 <_puts_r+0x52>
 810ff02:	686c      	ldr	r4, [r5, #4]
 810ff04:	89a3      	ldrh	r3, [r4, #12]
 810ff06:	071b      	lsls	r3, r3, #28
 810ff08:	d51d      	bpl.n	810ff46 <_puts_r+0x66>
 810ff0a:	6923      	ldr	r3, [r4, #16]
 810ff0c:	b1db      	cbz	r3, 810ff46 <_puts_r+0x66>
 810ff0e:	3e01      	subs	r6, #1
 810ff10:	68a3      	ldr	r3, [r4, #8]
 810ff12:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 810ff16:	3b01      	subs	r3, #1
 810ff18:	60a3      	str	r3, [r4, #8]
 810ff1a:	b9e9      	cbnz	r1, 810ff58 <_puts_r+0x78>
 810ff1c:	2b00      	cmp	r3, #0
 810ff1e:	da2e      	bge.n	810ff7e <_puts_r+0x9e>
 810ff20:	4622      	mov	r2, r4
 810ff22:	210a      	movs	r1, #10
 810ff24:	4628      	mov	r0, r5
 810ff26:	f000 f955 	bl	81101d4 <__swbuf_r>
 810ff2a:	3001      	adds	r0, #1
 810ff2c:	d011      	beq.n	810ff52 <_puts_r+0x72>
 810ff2e:	200a      	movs	r0, #10
 810ff30:	e011      	b.n	810ff56 <_puts_r+0x76>
 810ff32:	4b17      	ldr	r3, [pc, #92]	; (810ff90 <_puts_r+0xb0>)
 810ff34:	429c      	cmp	r4, r3
 810ff36:	d101      	bne.n	810ff3c <_puts_r+0x5c>
 810ff38:	68ac      	ldr	r4, [r5, #8]
 810ff3a:	e7e3      	b.n	810ff04 <_puts_r+0x24>
 810ff3c:	4b15      	ldr	r3, [pc, #84]	; (810ff94 <_puts_r+0xb4>)
 810ff3e:	429c      	cmp	r4, r3
 810ff40:	bf08      	it	eq
 810ff42:	68ec      	ldreq	r4, [r5, #12]
 810ff44:	e7de      	b.n	810ff04 <_puts_r+0x24>
 810ff46:	4621      	mov	r1, r4
 810ff48:	4628      	mov	r0, r5
 810ff4a:	f000 f995 	bl	8110278 <__swsetup_r>
 810ff4e:	2800      	cmp	r0, #0
 810ff50:	d0dd      	beq.n	810ff0e <_puts_r+0x2e>
 810ff52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810ff56:	bd70      	pop	{r4, r5, r6, pc}
 810ff58:	2b00      	cmp	r3, #0
 810ff5a:	da04      	bge.n	810ff66 <_puts_r+0x86>
 810ff5c:	69a2      	ldr	r2, [r4, #24]
 810ff5e:	429a      	cmp	r2, r3
 810ff60:	dc06      	bgt.n	810ff70 <_puts_r+0x90>
 810ff62:	290a      	cmp	r1, #10
 810ff64:	d004      	beq.n	810ff70 <_puts_r+0x90>
 810ff66:	6823      	ldr	r3, [r4, #0]
 810ff68:	1c5a      	adds	r2, r3, #1
 810ff6a:	6022      	str	r2, [r4, #0]
 810ff6c:	7019      	strb	r1, [r3, #0]
 810ff6e:	e7cf      	b.n	810ff10 <_puts_r+0x30>
 810ff70:	4622      	mov	r2, r4
 810ff72:	4628      	mov	r0, r5
 810ff74:	f000 f92e 	bl	81101d4 <__swbuf_r>
 810ff78:	3001      	adds	r0, #1
 810ff7a:	d1c9      	bne.n	810ff10 <_puts_r+0x30>
 810ff7c:	e7e9      	b.n	810ff52 <_puts_r+0x72>
 810ff7e:	6823      	ldr	r3, [r4, #0]
 810ff80:	200a      	movs	r0, #10
 810ff82:	1c5a      	adds	r2, r3, #1
 810ff84:	6022      	str	r2, [r4, #0]
 810ff86:	7018      	strb	r0, [r3, #0]
 810ff88:	e7e5      	b.n	810ff56 <_puts_r+0x76>
 810ff8a:	bf00      	nop
 810ff8c:	08112f78 	.word	0x08112f78
 810ff90:	08112f98 	.word	0x08112f98
 810ff94:	08112f58 	.word	0x08112f58

0810ff98 <puts>:
 810ff98:	4b02      	ldr	r3, [pc, #8]	; (810ffa4 <puts+0xc>)
 810ff9a:	4601      	mov	r1, r0
 810ff9c:	6818      	ldr	r0, [r3, #0]
 810ff9e:	f7ff bf9f 	b.w	810fee0 <_puts_r>
 810ffa2:	bf00      	nop
 810ffa4:	1000003c 	.word	0x1000003c

0810ffa8 <_raise_r>:
 810ffa8:	291f      	cmp	r1, #31
 810ffaa:	b538      	push	{r3, r4, r5, lr}
 810ffac:	4604      	mov	r4, r0
 810ffae:	460d      	mov	r5, r1
 810ffb0:	d904      	bls.n	810ffbc <_raise_r+0x14>
 810ffb2:	2316      	movs	r3, #22
 810ffb4:	6003      	str	r3, [r0, #0]
 810ffb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810ffba:	bd38      	pop	{r3, r4, r5, pc}
 810ffbc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810ffbe:	b112      	cbz	r2, 810ffc6 <_raise_r+0x1e>
 810ffc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810ffc4:	b94b      	cbnz	r3, 810ffda <_raise_r+0x32>
 810ffc6:	4620      	mov	r0, r4
 810ffc8:	f000 f830 	bl	811002c <_getpid_r>
 810ffcc:	462a      	mov	r2, r5
 810ffce:	4601      	mov	r1, r0
 810ffd0:	4620      	mov	r0, r4
 810ffd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810ffd6:	f000 b817 	b.w	8110008 <_kill_r>
 810ffda:	2b01      	cmp	r3, #1
 810ffdc:	d00a      	beq.n	810fff4 <_raise_r+0x4c>
 810ffde:	1c59      	adds	r1, r3, #1
 810ffe0:	d103      	bne.n	810ffea <_raise_r+0x42>
 810ffe2:	2316      	movs	r3, #22
 810ffe4:	6003      	str	r3, [r0, #0]
 810ffe6:	2001      	movs	r0, #1
 810ffe8:	e7e7      	b.n	810ffba <_raise_r+0x12>
 810ffea:	2400      	movs	r4, #0
 810ffec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810fff0:	4628      	mov	r0, r5
 810fff2:	4798      	blx	r3
 810fff4:	2000      	movs	r0, #0
 810fff6:	e7e0      	b.n	810ffba <_raise_r+0x12>

0810fff8 <raise>:
 810fff8:	4b02      	ldr	r3, [pc, #8]	; (8110004 <raise+0xc>)
 810fffa:	4601      	mov	r1, r0
 810fffc:	6818      	ldr	r0, [r3, #0]
 810fffe:	f7ff bfd3 	b.w	810ffa8 <_raise_r>
 8110002:	bf00      	nop
 8110004:	1000003c 	.word	0x1000003c

08110008 <_kill_r>:
 8110008:	b538      	push	{r3, r4, r5, lr}
 811000a:	4c07      	ldr	r4, [pc, #28]	; (8110028 <_kill_r+0x20>)
 811000c:	2300      	movs	r3, #0
 811000e:	4605      	mov	r5, r0
 8110010:	4608      	mov	r0, r1
 8110012:	4611      	mov	r1, r2
 8110014:	6023      	str	r3, [r4, #0]
 8110016:	f7f1 fee9 	bl	8101dec <_kill>
 811001a:	1c43      	adds	r3, r0, #1
 811001c:	d102      	bne.n	8110024 <_kill_r+0x1c>
 811001e:	6823      	ldr	r3, [r4, #0]
 8110020:	b103      	cbz	r3, 8110024 <_kill_r+0x1c>
 8110022:	602b      	str	r3, [r5, #0]
 8110024:	bd38      	pop	{r3, r4, r5, pc}
 8110026:	bf00      	nop
 8110028:	1000a1f4 	.word	0x1000a1f4

0811002c <_getpid_r>:
 811002c:	f7f1 bed6 	b.w	8101ddc <_getpid>

08110030 <siprintf>:
 8110030:	b40e      	push	{r1, r2, r3}
 8110032:	b500      	push	{lr}
 8110034:	b09c      	sub	sp, #112	; 0x70
 8110036:	ab1d      	add	r3, sp, #116	; 0x74
 8110038:	9002      	str	r0, [sp, #8]
 811003a:	9006      	str	r0, [sp, #24]
 811003c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8110040:	4809      	ldr	r0, [pc, #36]	; (8110068 <siprintf+0x38>)
 8110042:	9107      	str	r1, [sp, #28]
 8110044:	9104      	str	r1, [sp, #16]
 8110046:	4909      	ldr	r1, [pc, #36]	; (811006c <siprintf+0x3c>)
 8110048:	f853 2b04 	ldr.w	r2, [r3], #4
 811004c:	9105      	str	r1, [sp, #20]
 811004e:	6800      	ldr	r0, [r0, #0]
 8110050:	9301      	str	r3, [sp, #4]
 8110052:	a902      	add	r1, sp, #8
 8110054:	f001 fe1e 	bl	8111c94 <_svfiprintf_r>
 8110058:	9b02      	ldr	r3, [sp, #8]
 811005a:	2200      	movs	r2, #0
 811005c:	701a      	strb	r2, [r3, #0]
 811005e:	b01c      	add	sp, #112	; 0x70
 8110060:	f85d eb04 	ldr.w	lr, [sp], #4
 8110064:	b003      	add	sp, #12
 8110066:	4770      	bx	lr
 8110068:	1000003c 	.word	0x1000003c
 811006c:	ffff0208 	.word	0xffff0208

08110070 <_strtol_l.isra.0>:
 8110070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8110074:	4680      	mov	r8, r0
 8110076:	4689      	mov	r9, r1
 8110078:	4692      	mov	sl, r2
 811007a:	461e      	mov	r6, r3
 811007c:	460f      	mov	r7, r1
 811007e:	463d      	mov	r5, r7
 8110080:	9808      	ldr	r0, [sp, #32]
 8110082:	f815 4b01 	ldrb.w	r4, [r5], #1
 8110086:	f001 f989 	bl	811139c <__locale_ctype_ptr_l>
 811008a:	4420      	add	r0, r4
 811008c:	7843      	ldrb	r3, [r0, #1]
 811008e:	f013 0308 	ands.w	r3, r3, #8
 8110092:	d132      	bne.n	81100fa <_strtol_l.isra.0+0x8a>
 8110094:	2c2d      	cmp	r4, #45	; 0x2d
 8110096:	d132      	bne.n	81100fe <_strtol_l.isra.0+0x8e>
 8110098:	787c      	ldrb	r4, [r7, #1]
 811009a:	1cbd      	adds	r5, r7, #2
 811009c:	2201      	movs	r2, #1
 811009e:	2e00      	cmp	r6, #0
 81100a0:	d05d      	beq.n	811015e <_strtol_l.isra.0+0xee>
 81100a2:	2e10      	cmp	r6, #16
 81100a4:	d109      	bne.n	81100ba <_strtol_l.isra.0+0x4a>
 81100a6:	2c30      	cmp	r4, #48	; 0x30
 81100a8:	d107      	bne.n	81100ba <_strtol_l.isra.0+0x4a>
 81100aa:	782b      	ldrb	r3, [r5, #0]
 81100ac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 81100b0:	2b58      	cmp	r3, #88	; 0x58
 81100b2:	d14f      	bne.n	8110154 <_strtol_l.isra.0+0xe4>
 81100b4:	786c      	ldrb	r4, [r5, #1]
 81100b6:	2610      	movs	r6, #16
 81100b8:	3502      	adds	r5, #2
 81100ba:	2a00      	cmp	r2, #0
 81100bc:	bf14      	ite	ne
 81100be:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 81100c2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 81100c6:	2700      	movs	r7, #0
 81100c8:	fbb1 fcf6 	udiv	ip, r1, r6
 81100cc:	4638      	mov	r0, r7
 81100ce:	fb06 1e1c 	mls	lr, r6, ip, r1
 81100d2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 81100d6:	2b09      	cmp	r3, #9
 81100d8:	d817      	bhi.n	811010a <_strtol_l.isra.0+0x9a>
 81100da:	461c      	mov	r4, r3
 81100dc:	42a6      	cmp	r6, r4
 81100de:	dd23      	ble.n	8110128 <_strtol_l.isra.0+0xb8>
 81100e0:	1c7b      	adds	r3, r7, #1
 81100e2:	d007      	beq.n	81100f4 <_strtol_l.isra.0+0x84>
 81100e4:	4584      	cmp	ip, r0
 81100e6:	d31c      	bcc.n	8110122 <_strtol_l.isra.0+0xb2>
 81100e8:	d101      	bne.n	81100ee <_strtol_l.isra.0+0x7e>
 81100ea:	45a6      	cmp	lr, r4
 81100ec:	db19      	blt.n	8110122 <_strtol_l.isra.0+0xb2>
 81100ee:	fb00 4006 	mla	r0, r0, r6, r4
 81100f2:	2701      	movs	r7, #1
 81100f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 81100f8:	e7eb      	b.n	81100d2 <_strtol_l.isra.0+0x62>
 81100fa:	462f      	mov	r7, r5
 81100fc:	e7bf      	b.n	811007e <_strtol_l.isra.0+0xe>
 81100fe:	2c2b      	cmp	r4, #43	; 0x2b
 8110100:	bf04      	itt	eq
 8110102:	1cbd      	addeq	r5, r7, #2
 8110104:	787c      	ldrbeq	r4, [r7, #1]
 8110106:	461a      	mov	r2, r3
 8110108:	e7c9      	b.n	811009e <_strtol_l.isra.0+0x2e>
 811010a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 811010e:	2b19      	cmp	r3, #25
 8110110:	d801      	bhi.n	8110116 <_strtol_l.isra.0+0xa6>
 8110112:	3c37      	subs	r4, #55	; 0x37
 8110114:	e7e2      	b.n	81100dc <_strtol_l.isra.0+0x6c>
 8110116:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 811011a:	2b19      	cmp	r3, #25
 811011c:	d804      	bhi.n	8110128 <_strtol_l.isra.0+0xb8>
 811011e:	3c57      	subs	r4, #87	; 0x57
 8110120:	e7dc      	b.n	81100dc <_strtol_l.isra.0+0x6c>
 8110122:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8110126:	e7e5      	b.n	81100f4 <_strtol_l.isra.0+0x84>
 8110128:	1c7b      	adds	r3, r7, #1
 811012a:	d108      	bne.n	811013e <_strtol_l.isra.0+0xce>
 811012c:	2322      	movs	r3, #34	; 0x22
 811012e:	f8c8 3000 	str.w	r3, [r8]
 8110132:	4608      	mov	r0, r1
 8110134:	f1ba 0f00 	cmp.w	sl, #0
 8110138:	d107      	bne.n	811014a <_strtol_l.isra.0+0xda>
 811013a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 811013e:	b102      	cbz	r2, 8110142 <_strtol_l.isra.0+0xd2>
 8110140:	4240      	negs	r0, r0
 8110142:	f1ba 0f00 	cmp.w	sl, #0
 8110146:	d0f8      	beq.n	811013a <_strtol_l.isra.0+0xca>
 8110148:	b10f      	cbz	r7, 811014e <_strtol_l.isra.0+0xde>
 811014a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 811014e:	f8ca 9000 	str.w	r9, [sl]
 8110152:	e7f2      	b.n	811013a <_strtol_l.isra.0+0xca>
 8110154:	2430      	movs	r4, #48	; 0x30
 8110156:	2e00      	cmp	r6, #0
 8110158:	d1af      	bne.n	81100ba <_strtol_l.isra.0+0x4a>
 811015a:	2608      	movs	r6, #8
 811015c:	e7ad      	b.n	81100ba <_strtol_l.isra.0+0x4a>
 811015e:	2c30      	cmp	r4, #48	; 0x30
 8110160:	d0a3      	beq.n	81100aa <_strtol_l.isra.0+0x3a>
 8110162:	260a      	movs	r6, #10
 8110164:	e7a9      	b.n	81100ba <_strtol_l.isra.0+0x4a>
	...

08110168 <strtol>:
 8110168:	4b08      	ldr	r3, [pc, #32]	; (811018c <strtol+0x24>)
 811016a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 811016c:	681c      	ldr	r4, [r3, #0]
 811016e:	4d08      	ldr	r5, [pc, #32]	; (8110190 <strtol+0x28>)
 8110170:	6a23      	ldr	r3, [r4, #32]
 8110172:	2b00      	cmp	r3, #0
 8110174:	bf08      	it	eq
 8110176:	462b      	moveq	r3, r5
 8110178:	9300      	str	r3, [sp, #0]
 811017a:	4613      	mov	r3, r2
 811017c:	460a      	mov	r2, r1
 811017e:	4601      	mov	r1, r0
 8110180:	4620      	mov	r0, r4
 8110182:	f7ff ff75 	bl	8110070 <_strtol_l.isra.0>
 8110186:	b003      	add	sp, #12
 8110188:	bd30      	pop	{r4, r5, pc}
 811018a:	bf00      	nop
 811018c:	1000003c 	.word	0x1000003c
 8110190:	100000a0 	.word	0x100000a0

08110194 <_vsiprintf_r>:
 8110194:	b500      	push	{lr}
 8110196:	b09b      	sub	sp, #108	; 0x6c
 8110198:	9100      	str	r1, [sp, #0]
 811019a:	9104      	str	r1, [sp, #16]
 811019c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 81101a0:	9105      	str	r1, [sp, #20]
 81101a2:	9102      	str	r1, [sp, #8]
 81101a4:	4905      	ldr	r1, [pc, #20]	; (81101bc <_vsiprintf_r+0x28>)
 81101a6:	9103      	str	r1, [sp, #12]
 81101a8:	4669      	mov	r1, sp
 81101aa:	f001 fd73 	bl	8111c94 <_svfiprintf_r>
 81101ae:	9b00      	ldr	r3, [sp, #0]
 81101b0:	2200      	movs	r2, #0
 81101b2:	701a      	strb	r2, [r3, #0]
 81101b4:	b01b      	add	sp, #108	; 0x6c
 81101b6:	f85d fb04 	ldr.w	pc, [sp], #4
 81101ba:	bf00      	nop
 81101bc:	ffff0208 	.word	0xffff0208

081101c0 <vsiprintf>:
 81101c0:	4613      	mov	r3, r2
 81101c2:	460a      	mov	r2, r1
 81101c4:	4601      	mov	r1, r0
 81101c6:	4802      	ldr	r0, [pc, #8]	; (81101d0 <vsiprintf+0x10>)
 81101c8:	6800      	ldr	r0, [r0, #0]
 81101ca:	f7ff bfe3 	b.w	8110194 <_vsiprintf_r>
 81101ce:	bf00      	nop
 81101d0:	1000003c 	.word	0x1000003c

081101d4 <__swbuf_r>:
 81101d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81101d6:	460e      	mov	r6, r1
 81101d8:	4614      	mov	r4, r2
 81101da:	4605      	mov	r5, r0
 81101dc:	b118      	cbz	r0, 81101e6 <__swbuf_r+0x12>
 81101de:	6983      	ldr	r3, [r0, #24]
 81101e0:	b90b      	cbnz	r3, 81101e6 <__swbuf_r+0x12>
 81101e2:	f001 f851 	bl	8111288 <__sinit>
 81101e6:	4b21      	ldr	r3, [pc, #132]	; (811026c <__swbuf_r+0x98>)
 81101e8:	429c      	cmp	r4, r3
 81101ea:	d12a      	bne.n	8110242 <__swbuf_r+0x6e>
 81101ec:	686c      	ldr	r4, [r5, #4]
 81101ee:	69a3      	ldr	r3, [r4, #24]
 81101f0:	60a3      	str	r3, [r4, #8]
 81101f2:	89a3      	ldrh	r3, [r4, #12]
 81101f4:	071a      	lsls	r2, r3, #28
 81101f6:	d52e      	bpl.n	8110256 <__swbuf_r+0x82>
 81101f8:	6923      	ldr	r3, [r4, #16]
 81101fa:	b363      	cbz	r3, 8110256 <__swbuf_r+0x82>
 81101fc:	6923      	ldr	r3, [r4, #16]
 81101fe:	6820      	ldr	r0, [r4, #0]
 8110200:	1ac0      	subs	r0, r0, r3
 8110202:	6963      	ldr	r3, [r4, #20]
 8110204:	b2f6      	uxtb	r6, r6
 8110206:	4283      	cmp	r3, r0
 8110208:	4637      	mov	r7, r6
 811020a:	dc04      	bgt.n	8110216 <__swbuf_r+0x42>
 811020c:	4621      	mov	r1, r4
 811020e:	4628      	mov	r0, r5
 8110210:	f000 ffd0 	bl	81111b4 <_fflush_r>
 8110214:	bb28      	cbnz	r0, 8110262 <__swbuf_r+0x8e>
 8110216:	68a3      	ldr	r3, [r4, #8]
 8110218:	3b01      	subs	r3, #1
 811021a:	60a3      	str	r3, [r4, #8]
 811021c:	6823      	ldr	r3, [r4, #0]
 811021e:	1c5a      	adds	r2, r3, #1
 8110220:	6022      	str	r2, [r4, #0]
 8110222:	701e      	strb	r6, [r3, #0]
 8110224:	6963      	ldr	r3, [r4, #20]
 8110226:	3001      	adds	r0, #1
 8110228:	4283      	cmp	r3, r0
 811022a:	d004      	beq.n	8110236 <__swbuf_r+0x62>
 811022c:	89a3      	ldrh	r3, [r4, #12]
 811022e:	07db      	lsls	r3, r3, #31
 8110230:	d519      	bpl.n	8110266 <__swbuf_r+0x92>
 8110232:	2e0a      	cmp	r6, #10
 8110234:	d117      	bne.n	8110266 <__swbuf_r+0x92>
 8110236:	4621      	mov	r1, r4
 8110238:	4628      	mov	r0, r5
 811023a:	f000 ffbb 	bl	81111b4 <_fflush_r>
 811023e:	b190      	cbz	r0, 8110266 <__swbuf_r+0x92>
 8110240:	e00f      	b.n	8110262 <__swbuf_r+0x8e>
 8110242:	4b0b      	ldr	r3, [pc, #44]	; (8110270 <__swbuf_r+0x9c>)
 8110244:	429c      	cmp	r4, r3
 8110246:	d101      	bne.n	811024c <__swbuf_r+0x78>
 8110248:	68ac      	ldr	r4, [r5, #8]
 811024a:	e7d0      	b.n	81101ee <__swbuf_r+0x1a>
 811024c:	4b09      	ldr	r3, [pc, #36]	; (8110274 <__swbuf_r+0xa0>)
 811024e:	429c      	cmp	r4, r3
 8110250:	bf08      	it	eq
 8110252:	68ec      	ldreq	r4, [r5, #12]
 8110254:	e7cb      	b.n	81101ee <__swbuf_r+0x1a>
 8110256:	4621      	mov	r1, r4
 8110258:	4628      	mov	r0, r5
 811025a:	f000 f80d 	bl	8110278 <__swsetup_r>
 811025e:	2800      	cmp	r0, #0
 8110260:	d0cc      	beq.n	81101fc <__swbuf_r+0x28>
 8110262:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8110266:	4638      	mov	r0, r7
 8110268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 811026a:	bf00      	nop
 811026c:	08112f78 	.word	0x08112f78
 8110270:	08112f98 	.word	0x08112f98
 8110274:	08112f58 	.word	0x08112f58

08110278 <__swsetup_r>:
 8110278:	4b32      	ldr	r3, [pc, #200]	; (8110344 <__swsetup_r+0xcc>)
 811027a:	b570      	push	{r4, r5, r6, lr}
 811027c:	681d      	ldr	r5, [r3, #0]
 811027e:	4606      	mov	r6, r0
 8110280:	460c      	mov	r4, r1
 8110282:	b125      	cbz	r5, 811028e <__swsetup_r+0x16>
 8110284:	69ab      	ldr	r3, [r5, #24]
 8110286:	b913      	cbnz	r3, 811028e <__swsetup_r+0x16>
 8110288:	4628      	mov	r0, r5
 811028a:	f000 fffd 	bl	8111288 <__sinit>
 811028e:	4b2e      	ldr	r3, [pc, #184]	; (8110348 <__swsetup_r+0xd0>)
 8110290:	429c      	cmp	r4, r3
 8110292:	d10f      	bne.n	81102b4 <__swsetup_r+0x3c>
 8110294:	686c      	ldr	r4, [r5, #4]
 8110296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811029a:	b29a      	uxth	r2, r3
 811029c:	0715      	lsls	r5, r2, #28
 811029e:	d42c      	bmi.n	81102fa <__swsetup_r+0x82>
 81102a0:	06d0      	lsls	r0, r2, #27
 81102a2:	d411      	bmi.n	81102c8 <__swsetup_r+0x50>
 81102a4:	2209      	movs	r2, #9
 81102a6:	6032      	str	r2, [r6, #0]
 81102a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81102ac:	81a3      	strh	r3, [r4, #12]
 81102ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 81102b2:	e03e      	b.n	8110332 <__swsetup_r+0xba>
 81102b4:	4b25      	ldr	r3, [pc, #148]	; (811034c <__swsetup_r+0xd4>)
 81102b6:	429c      	cmp	r4, r3
 81102b8:	d101      	bne.n	81102be <__swsetup_r+0x46>
 81102ba:	68ac      	ldr	r4, [r5, #8]
 81102bc:	e7eb      	b.n	8110296 <__swsetup_r+0x1e>
 81102be:	4b24      	ldr	r3, [pc, #144]	; (8110350 <__swsetup_r+0xd8>)
 81102c0:	429c      	cmp	r4, r3
 81102c2:	bf08      	it	eq
 81102c4:	68ec      	ldreq	r4, [r5, #12]
 81102c6:	e7e6      	b.n	8110296 <__swsetup_r+0x1e>
 81102c8:	0751      	lsls	r1, r2, #29
 81102ca:	d512      	bpl.n	81102f2 <__swsetup_r+0x7a>
 81102cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 81102ce:	b141      	cbz	r1, 81102e2 <__swsetup_r+0x6a>
 81102d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 81102d4:	4299      	cmp	r1, r3
 81102d6:	d002      	beq.n	81102de <__swsetup_r+0x66>
 81102d8:	4630      	mov	r0, r6
 81102da:	f001 fbd9 	bl	8111a90 <_free_r>
 81102de:	2300      	movs	r3, #0
 81102e0:	6363      	str	r3, [r4, #52]	; 0x34
 81102e2:	89a3      	ldrh	r3, [r4, #12]
 81102e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 81102e8:	81a3      	strh	r3, [r4, #12]
 81102ea:	2300      	movs	r3, #0
 81102ec:	6063      	str	r3, [r4, #4]
 81102ee:	6923      	ldr	r3, [r4, #16]
 81102f0:	6023      	str	r3, [r4, #0]
 81102f2:	89a3      	ldrh	r3, [r4, #12]
 81102f4:	f043 0308 	orr.w	r3, r3, #8
 81102f8:	81a3      	strh	r3, [r4, #12]
 81102fa:	6923      	ldr	r3, [r4, #16]
 81102fc:	b94b      	cbnz	r3, 8110312 <__swsetup_r+0x9a>
 81102fe:	89a3      	ldrh	r3, [r4, #12]
 8110300:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8110304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8110308:	d003      	beq.n	8110312 <__swsetup_r+0x9a>
 811030a:	4621      	mov	r1, r4
 811030c:	4630      	mov	r0, r6
 811030e:	f001 f87b 	bl	8111408 <__smakebuf_r>
 8110312:	89a2      	ldrh	r2, [r4, #12]
 8110314:	f012 0301 	ands.w	r3, r2, #1
 8110318:	d00c      	beq.n	8110334 <__swsetup_r+0xbc>
 811031a:	2300      	movs	r3, #0
 811031c:	60a3      	str	r3, [r4, #8]
 811031e:	6963      	ldr	r3, [r4, #20]
 8110320:	425b      	negs	r3, r3
 8110322:	61a3      	str	r3, [r4, #24]
 8110324:	6923      	ldr	r3, [r4, #16]
 8110326:	b953      	cbnz	r3, 811033e <__swsetup_r+0xc6>
 8110328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811032c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8110330:	d1ba      	bne.n	81102a8 <__swsetup_r+0x30>
 8110332:	bd70      	pop	{r4, r5, r6, pc}
 8110334:	0792      	lsls	r2, r2, #30
 8110336:	bf58      	it	pl
 8110338:	6963      	ldrpl	r3, [r4, #20]
 811033a:	60a3      	str	r3, [r4, #8]
 811033c:	e7f2      	b.n	8110324 <__swsetup_r+0xac>
 811033e:	2000      	movs	r0, #0
 8110340:	e7f7      	b.n	8110332 <__swsetup_r+0xba>
 8110342:	bf00      	nop
 8110344:	1000003c 	.word	0x1000003c
 8110348:	08112f78 	.word	0x08112f78
 811034c:	08112f98 	.word	0x08112f98
 8110350:	08112f58 	.word	0x08112f58

08110354 <__register_exitproc>:
 8110354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8110358:	4d2c      	ldr	r5, [pc, #176]	; (811040c <__register_exitproc+0xb8>)
 811035a:	682c      	ldr	r4, [r5, #0]
 811035c:	4607      	mov	r7, r0
 811035e:	460e      	mov	r6, r1
 8110360:	4691      	mov	r9, r2
 8110362:	4698      	mov	r8, r3
 8110364:	b934      	cbnz	r4, 8110374 <__register_exitproc+0x20>
 8110366:	4b2a      	ldr	r3, [pc, #168]	; (8110410 <__register_exitproc+0xbc>)
 8110368:	4c2a      	ldr	r4, [pc, #168]	; (8110414 <__register_exitproc+0xc0>)
 811036a:	602c      	str	r4, [r5, #0]
 811036c:	b113      	cbz	r3, 8110374 <__register_exitproc+0x20>
 811036e:	681b      	ldr	r3, [r3, #0]
 8110370:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8110374:	6863      	ldr	r3, [r4, #4]
 8110376:	2b1f      	cmp	r3, #31
 8110378:	dd3d      	ble.n	81103f6 <__register_exitproc+0xa2>
 811037a:	4b27      	ldr	r3, [pc, #156]	; (8110418 <__register_exitproc+0xc4>)
 811037c:	b91b      	cbnz	r3, 8110386 <__register_exitproc+0x32>
 811037e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8110382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8110386:	208c      	movs	r0, #140	; 0x8c
 8110388:	f001 f87e 	bl	8111488 <malloc>
 811038c:	4604      	mov	r4, r0
 811038e:	2800      	cmp	r0, #0
 8110390:	d0f5      	beq.n	811037e <__register_exitproc+0x2a>
 8110392:	2300      	movs	r3, #0
 8110394:	682a      	ldr	r2, [r5, #0]
 8110396:	6002      	str	r2, [r0, #0]
 8110398:	6043      	str	r3, [r0, #4]
 811039a:	6028      	str	r0, [r5, #0]
 811039c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 81103a0:	b30f      	cbz	r7, 81103e6 <__register_exitproc+0x92>
 81103a2:	f44f 7084 	mov.w	r0, #264	; 0x108
 81103a6:	f001 f86f 	bl	8111488 <malloc>
 81103aa:	2800      	cmp	r0, #0
 81103ac:	d0e7      	beq.n	811037e <__register_exitproc+0x2a>
 81103ae:	2300      	movs	r3, #0
 81103b0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 81103b4:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 81103b8:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 81103bc:	6862      	ldr	r2, [r4, #4]
 81103be:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 81103c2:	2301      	movs	r3, #1
 81103c4:	4093      	lsls	r3, r2
 81103c6:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 81103ca:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 81103ce:	431a      	orrs	r2, r3
 81103d0:	2f02      	cmp	r7, #2
 81103d2:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 81103d6:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 81103da:	bf02      	ittt	eq
 81103dc:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 81103e0:	4313      	orreq	r3, r2
 81103e2:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 81103e6:	6863      	ldr	r3, [r4, #4]
 81103e8:	1c5a      	adds	r2, r3, #1
 81103ea:	3302      	adds	r3, #2
 81103ec:	6062      	str	r2, [r4, #4]
 81103ee:	2000      	movs	r0, #0
 81103f0:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 81103f4:	e7c5      	b.n	8110382 <__register_exitproc+0x2e>
 81103f6:	2f00      	cmp	r7, #0
 81103f8:	d0f5      	beq.n	81103e6 <__register_exitproc+0x92>
 81103fa:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 81103fe:	2800      	cmp	r0, #0
 8110400:	d1dc      	bne.n	81103bc <__register_exitproc+0x68>
 8110402:	4b05      	ldr	r3, [pc, #20]	; (8110418 <__register_exitproc+0xc4>)
 8110404:	2b00      	cmp	r3, #0
 8110406:	d0ba      	beq.n	811037e <__register_exitproc+0x2a>
 8110408:	e7cb      	b.n	81103a2 <__register_exitproc+0x4e>
 811040a:	bf00      	nop
 811040c:	1000982c 	.word	0x1000982c
 8110410:	00000000 	.word	0x00000000
 8110414:	100097a0 	.word	0x100097a0
 8110418:	08111489 	.word	0x08111489

0811041c <quorem>:
 811041c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8110420:	6903      	ldr	r3, [r0, #16]
 8110422:	690c      	ldr	r4, [r1, #16]
 8110424:	42a3      	cmp	r3, r4
 8110426:	4680      	mov	r8, r0
 8110428:	f2c0 8082 	blt.w	8110530 <quorem+0x114>
 811042c:	3c01      	subs	r4, #1
 811042e:	f101 0714 	add.w	r7, r1, #20
 8110432:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8110436:	f100 0614 	add.w	r6, r0, #20
 811043a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 811043e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8110442:	eb06 030c 	add.w	r3, r6, ip
 8110446:	3501      	adds	r5, #1
 8110448:	eb07 090c 	add.w	r9, r7, ip
 811044c:	9301      	str	r3, [sp, #4]
 811044e:	fbb0 f5f5 	udiv	r5, r0, r5
 8110452:	b395      	cbz	r5, 81104ba <quorem+0x9e>
 8110454:	f04f 0a00 	mov.w	sl, #0
 8110458:	4638      	mov	r0, r7
 811045a:	46b6      	mov	lr, r6
 811045c:	46d3      	mov	fp, sl
 811045e:	f850 2b04 	ldr.w	r2, [r0], #4
 8110462:	b293      	uxth	r3, r2
 8110464:	fb05 a303 	mla	r3, r5, r3, sl
 8110468:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 811046c:	b29b      	uxth	r3, r3
 811046e:	ebab 0303 	sub.w	r3, fp, r3
 8110472:	0c12      	lsrs	r2, r2, #16
 8110474:	f8de b000 	ldr.w	fp, [lr]
 8110478:	fb05 a202 	mla	r2, r5, r2, sl
 811047c:	fa13 f38b 	uxtah	r3, r3, fp
 8110480:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8110484:	fa1f fb82 	uxth.w	fp, r2
 8110488:	f8de 2000 	ldr.w	r2, [lr]
 811048c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8110490:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8110494:	b29b      	uxth	r3, r3
 8110496:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 811049a:	4581      	cmp	r9, r0
 811049c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 81104a0:	f84e 3b04 	str.w	r3, [lr], #4
 81104a4:	d2db      	bcs.n	811045e <quorem+0x42>
 81104a6:	f856 300c 	ldr.w	r3, [r6, ip]
 81104aa:	b933      	cbnz	r3, 81104ba <quorem+0x9e>
 81104ac:	9b01      	ldr	r3, [sp, #4]
 81104ae:	3b04      	subs	r3, #4
 81104b0:	429e      	cmp	r6, r3
 81104b2:	461a      	mov	r2, r3
 81104b4:	d330      	bcc.n	8110518 <quorem+0xfc>
 81104b6:	f8c8 4010 	str.w	r4, [r8, #16]
 81104ba:	4640      	mov	r0, r8
 81104bc:	f001 fa14 	bl	81118e8 <__mcmp>
 81104c0:	2800      	cmp	r0, #0
 81104c2:	db25      	blt.n	8110510 <quorem+0xf4>
 81104c4:	3501      	adds	r5, #1
 81104c6:	4630      	mov	r0, r6
 81104c8:	f04f 0c00 	mov.w	ip, #0
 81104cc:	f857 2b04 	ldr.w	r2, [r7], #4
 81104d0:	f8d0 e000 	ldr.w	lr, [r0]
 81104d4:	b293      	uxth	r3, r2
 81104d6:	ebac 0303 	sub.w	r3, ip, r3
 81104da:	0c12      	lsrs	r2, r2, #16
 81104dc:	fa13 f38e 	uxtah	r3, r3, lr
 81104e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 81104e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 81104e8:	b29b      	uxth	r3, r3
 81104ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 81104ee:	45b9      	cmp	r9, r7
 81104f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 81104f4:	f840 3b04 	str.w	r3, [r0], #4
 81104f8:	d2e8      	bcs.n	81104cc <quorem+0xb0>
 81104fa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 81104fe:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8110502:	b92a      	cbnz	r2, 8110510 <quorem+0xf4>
 8110504:	3b04      	subs	r3, #4
 8110506:	429e      	cmp	r6, r3
 8110508:	461a      	mov	r2, r3
 811050a:	d30b      	bcc.n	8110524 <quorem+0x108>
 811050c:	f8c8 4010 	str.w	r4, [r8, #16]
 8110510:	4628      	mov	r0, r5
 8110512:	b003      	add	sp, #12
 8110514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8110518:	6812      	ldr	r2, [r2, #0]
 811051a:	3b04      	subs	r3, #4
 811051c:	2a00      	cmp	r2, #0
 811051e:	d1ca      	bne.n	81104b6 <quorem+0x9a>
 8110520:	3c01      	subs	r4, #1
 8110522:	e7c5      	b.n	81104b0 <quorem+0x94>
 8110524:	6812      	ldr	r2, [r2, #0]
 8110526:	3b04      	subs	r3, #4
 8110528:	2a00      	cmp	r2, #0
 811052a:	d1ef      	bne.n	811050c <quorem+0xf0>
 811052c:	3c01      	subs	r4, #1
 811052e:	e7ea      	b.n	8110506 <quorem+0xea>
 8110530:	2000      	movs	r0, #0
 8110532:	e7ee      	b.n	8110512 <quorem+0xf6>
 8110534:	0000      	movs	r0, r0
	...

08110538 <_dtoa_r>:
 8110538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811053c:	ec57 6b10 	vmov	r6, r7, d0
 8110540:	b097      	sub	sp, #92	; 0x5c
 8110542:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8110544:	9106      	str	r1, [sp, #24]
 8110546:	4604      	mov	r4, r0
 8110548:	920b      	str	r2, [sp, #44]	; 0x2c
 811054a:	9312      	str	r3, [sp, #72]	; 0x48
 811054c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8110550:	e9cd 6700 	strd	r6, r7, [sp]
 8110554:	b93d      	cbnz	r5, 8110566 <_dtoa_r+0x2e>
 8110556:	2010      	movs	r0, #16
 8110558:	f000 ff96 	bl	8111488 <malloc>
 811055c:	6260      	str	r0, [r4, #36]	; 0x24
 811055e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8110562:	6005      	str	r5, [r0, #0]
 8110564:	60c5      	str	r5, [r0, #12]
 8110566:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8110568:	6819      	ldr	r1, [r3, #0]
 811056a:	b151      	cbz	r1, 8110582 <_dtoa_r+0x4a>
 811056c:	685a      	ldr	r2, [r3, #4]
 811056e:	604a      	str	r2, [r1, #4]
 8110570:	2301      	movs	r3, #1
 8110572:	4093      	lsls	r3, r2
 8110574:	608b      	str	r3, [r1, #8]
 8110576:	4620      	mov	r0, r4
 8110578:	f000 ffd4 	bl	8111524 <_Bfree>
 811057c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 811057e:	2200      	movs	r2, #0
 8110580:	601a      	str	r2, [r3, #0]
 8110582:	1e3b      	subs	r3, r7, #0
 8110584:	bfbb      	ittet	lt
 8110586:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 811058a:	9301      	strlt	r3, [sp, #4]
 811058c:	2300      	movge	r3, #0
 811058e:	2201      	movlt	r2, #1
 8110590:	bfac      	ite	ge
 8110592:	f8c8 3000 	strge.w	r3, [r8]
 8110596:	f8c8 2000 	strlt.w	r2, [r8]
 811059a:	4baf      	ldr	r3, [pc, #700]	; (8110858 <_dtoa_r+0x320>)
 811059c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 81105a0:	ea33 0308 	bics.w	r3, r3, r8
 81105a4:	d114      	bne.n	81105d0 <_dtoa_r+0x98>
 81105a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 81105a8:	f242 730f 	movw	r3, #9999	; 0x270f
 81105ac:	6013      	str	r3, [r2, #0]
 81105ae:	9b00      	ldr	r3, [sp, #0]
 81105b0:	b923      	cbnz	r3, 81105bc <_dtoa_r+0x84>
 81105b2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 81105b6:	2800      	cmp	r0, #0
 81105b8:	f000 8542 	beq.w	8111040 <_dtoa_r+0xb08>
 81105bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 81105be:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 811086c <_dtoa_r+0x334>
 81105c2:	2b00      	cmp	r3, #0
 81105c4:	f000 8544 	beq.w	8111050 <_dtoa_r+0xb18>
 81105c8:	f10b 0303 	add.w	r3, fp, #3
 81105cc:	f000 bd3e 	b.w	811104c <_dtoa_r+0xb14>
 81105d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 81105d4:	2200      	movs	r2, #0
 81105d6:	2300      	movs	r3, #0
 81105d8:	4630      	mov	r0, r6
 81105da:	4639      	mov	r1, r7
 81105dc:	f7f0 fb0c 	bl	8100bf8 <__aeabi_dcmpeq>
 81105e0:	4681      	mov	r9, r0
 81105e2:	b168      	cbz	r0, 8110600 <_dtoa_r+0xc8>
 81105e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 81105e6:	2301      	movs	r3, #1
 81105e8:	6013      	str	r3, [r2, #0]
 81105ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 81105ec:	2b00      	cmp	r3, #0
 81105ee:	f000 8524 	beq.w	811103a <_dtoa_r+0xb02>
 81105f2:	4b9a      	ldr	r3, [pc, #616]	; (811085c <_dtoa_r+0x324>)
 81105f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 81105f6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 81105fa:	6013      	str	r3, [r2, #0]
 81105fc:	f000 bd28 	b.w	8111050 <_dtoa_r+0xb18>
 8110600:	aa14      	add	r2, sp, #80	; 0x50
 8110602:	a915      	add	r1, sp, #84	; 0x54
 8110604:	ec47 6b10 	vmov	d0, r6, r7
 8110608:	4620      	mov	r0, r4
 811060a:	f001 f9e4 	bl	81119d6 <__d2b>
 811060e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8110612:	9004      	str	r0, [sp, #16]
 8110614:	2d00      	cmp	r5, #0
 8110616:	d07c      	beq.n	8110712 <_dtoa_r+0x1da>
 8110618:	f3c7 0313 	ubfx	r3, r7, #0, #20
 811061c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8110620:	46b2      	mov	sl, r6
 8110622:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8110626:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 811062a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 811062e:	2200      	movs	r2, #0
 8110630:	4b8b      	ldr	r3, [pc, #556]	; (8110860 <_dtoa_r+0x328>)
 8110632:	4650      	mov	r0, sl
 8110634:	4659      	mov	r1, fp
 8110636:	f7ef febf 	bl	81003b8 <__aeabi_dsub>
 811063a:	a381      	add	r3, pc, #516	; (adr r3, 8110840 <_dtoa_r+0x308>)
 811063c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110640:	f7f0 f872 	bl	8100728 <__aeabi_dmul>
 8110644:	a380      	add	r3, pc, #512	; (adr r3, 8110848 <_dtoa_r+0x310>)
 8110646:	e9d3 2300 	ldrd	r2, r3, [r3]
 811064a:	f7ef feb7 	bl	81003bc <__adddf3>
 811064e:	4606      	mov	r6, r0
 8110650:	4628      	mov	r0, r5
 8110652:	460f      	mov	r7, r1
 8110654:	f7ef fffe 	bl	8100654 <__aeabi_i2d>
 8110658:	a37d      	add	r3, pc, #500	; (adr r3, 8110850 <_dtoa_r+0x318>)
 811065a:	e9d3 2300 	ldrd	r2, r3, [r3]
 811065e:	f7f0 f863 	bl	8100728 <__aeabi_dmul>
 8110662:	4602      	mov	r2, r0
 8110664:	460b      	mov	r3, r1
 8110666:	4630      	mov	r0, r6
 8110668:	4639      	mov	r1, r7
 811066a:	f7ef fea7 	bl	81003bc <__adddf3>
 811066e:	4606      	mov	r6, r0
 8110670:	460f      	mov	r7, r1
 8110672:	f7f0 fb09 	bl	8100c88 <__aeabi_d2iz>
 8110676:	2200      	movs	r2, #0
 8110678:	4682      	mov	sl, r0
 811067a:	2300      	movs	r3, #0
 811067c:	4630      	mov	r0, r6
 811067e:	4639      	mov	r1, r7
 8110680:	f7f0 fac4 	bl	8100c0c <__aeabi_dcmplt>
 8110684:	b148      	cbz	r0, 811069a <_dtoa_r+0x162>
 8110686:	4650      	mov	r0, sl
 8110688:	f7ef ffe4 	bl	8100654 <__aeabi_i2d>
 811068c:	4632      	mov	r2, r6
 811068e:	463b      	mov	r3, r7
 8110690:	f7f0 fab2 	bl	8100bf8 <__aeabi_dcmpeq>
 8110694:	b908      	cbnz	r0, 811069a <_dtoa_r+0x162>
 8110696:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 811069a:	f1ba 0f16 	cmp.w	sl, #22
 811069e:	d859      	bhi.n	8110754 <_dtoa_r+0x21c>
 81106a0:	4970      	ldr	r1, [pc, #448]	; (8110864 <_dtoa_r+0x32c>)
 81106a2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 81106a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 81106aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 81106ae:	f7f0 facb 	bl	8100c48 <__aeabi_dcmpgt>
 81106b2:	2800      	cmp	r0, #0
 81106b4:	d050      	beq.n	8110758 <_dtoa_r+0x220>
 81106b6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 81106ba:	2300      	movs	r3, #0
 81106bc:	930f      	str	r3, [sp, #60]	; 0x3c
 81106be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 81106c0:	1b5d      	subs	r5, r3, r5
 81106c2:	f1b5 0801 	subs.w	r8, r5, #1
 81106c6:	bf49      	itett	mi
 81106c8:	f1c5 0301 	rsbmi	r3, r5, #1
 81106cc:	2300      	movpl	r3, #0
 81106ce:	9305      	strmi	r3, [sp, #20]
 81106d0:	f04f 0800 	movmi.w	r8, #0
 81106d4:	bf58      	it	pl
 81106d6:	9305      	strpl	r3, [sp, #20]
 81106d8:	f1ba 0f00 	cmp.w	sl, #0
 81106dc:	db3e      	blt.n	811075c <_dtoa_r+0x224>
 81106de:	2300      	movs	r3, #0
 81106e0:	44d0      	add	r8, sl
 81106e2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 81106e6:	9307      	str	r3, [sp, #28]
 81106e8:	9b06      	ldr	r3, [sp, #24]
 81106ea:	2b09      	cmp	r3, #9
 81106ec:	f200 8090 	bhi.w	8110810 <_dtoa_r+0x2d8>
 81106f0:	2b05      	cmp	r3, #5
 81106f2:	bfc4      	itt	gt
 81106f4:	3b04      	subgt	r3, #4
 81106f6:	9306      	strgt	r3, [sp, #24]
 81106f8:	9b06      	ldr	r3, [sp, #24]
 81106fa:	f1a3 0302 	sub.w	r3, r3, #2
 81106fe:	bfcc      	ite	gt
 8110700:	2500      	movgt	r5, #0
 8110702:	2501      	movle	r5, #1
 8110704:	2b03      	cmp	r3, #3
 8110706:	f200 808f 	bhi.w	8110828 <_dtoa_r+0x2f0>
 811070a:	e8df f003 	tbb	[pc, r3]
 811070e:	7f7d      	.short	0x7f7d
 8110710:	7131      	.short	0x7131
 8110712:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8110716:	441d      	add	r5, r3
 8110718:	f205 4032 	addw	r0, r5, #1074	; 0x432
 811071c:	2820      	cmp	r0, #32
 811071e:	dd13      	ble.n	8110748 <_dtoa_r+0x210>
 8110720:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8110724:	9b00      	ldr	r3, [sp, #0]
 8110726:	fa08 f800 	lsl.w	r8, r8, r0
 811072a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 811072e:	fa23 f000 	lsr.w	r0, r3, r0
 8110732:	ea48 0000 	orr.w	r0, r8, r0
 8110736:	f7ef ff7d 	bl	8100634 <__aeabi_ui2d>
 811073a:	2301      	movs	r3, #1
 811073c:	4682      	mov	sl, r0
 811073e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8110742:	3d01      	subs	r5, #1
 8110744:	9313      	str	r3, [sp, #76]	; 0x4c
 8110746:	e772      	b.n	811062e <_dtoa_r+0xf6>
 8110748:	9b00      	ldr	r3, [sp, #0]
 811074a:	f1c0 0020 	rsb	r0, r0, #32
 811074e:	fa03 f000 	lsl.w	r0, r3, r0
 8110752:	e7f0      	b.n	8110736 <_dtoa_r+0x1fe>
 8110754:	2301      	movs	r3, #1
 8110756:	e7b1      	b.n	81106bc <_dtoa_r+0x184>
 8110758:	900f      	str	r0, [sp, #60]	; 0x3c
 811075a:	e7b0      	b.n	81106be <_dtoa_r+0x186>
 811075c:	9b05      	ldr	r3, [sp, #20]
 811075e:	eba3 030a 	sub.w	r3, r3, sl
 8110762:	9305      	str	r3, [sp, #20]
 8110764:	f1ca 0300 	rsb	r3, sl, #0
 8110768:	9307      	str	r3, [sp, #28]
 811076a:	2300      	movs	r3, #0
 811076c:	930e      	str	r3, [sp, #56]	; 0x38
 811076e:	e7bb      	b.n	81106e8 <_dtoa_r+0x1b0>
 8110770:	2301      	movs	r3, #1
 8110772:	930a      	str	r3, [sp, #40]	; 0x28
 8110774:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8110776:	2b00      	cmp	r3, #0
 8110778:	dd59      	ble.n	811082e <_dtoa_r+0x2f6>
 811077a:	9302      	str	r3, [sp, #8]
 811077c:	4699      	mov	r9, r3
 811077e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8110780:	2200      	movs	r2, #0
 8110782:	6072      	str	r2, [r6, #4]
 8110784:	2204      	movs	r2, #4
 8110786:	f102 0014 	add.w	r0, r2, #20
 811078a:	4298      	cmp	r0, r3
 811078c:	6871      	ldr	r1, [r6, #4]
 811078e:	d953      	bls.n	8110838 <_dtoa_r+0x300>
 8110790:	4620      	mov	r0, r4
 8110792:	f000 fe93 	bl	81114bc <_Balloc>
 8110796:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8110798:	6030      	str	r0, [r6, #0]
 811079a:	f1b9 0f0e 	cmp.w	r9, #14
 811079e:	f8d3 b000 	ldr.w	fp, [r3]
 81107a2:	f200 80e6 	bhi.w	8110972 <_dtoa_r+0x43a>
 81107a6:	2d00      	cmp	r5, #0
 81107a8:	f000 80e3 	beq.w	8110972 <_dtoa_r+0x43a>
 81107ac:	ed9d 7b00 	vldr	d7, [sp]
 81107b0:	f1ba 0f00 	cmp.w	sl, #0
 81107b4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 81107b8:	dd74      	ble.n	81108a4 <_dtoa_r+0x36c>
 81107ba:	4a2a      	ldr	r2, [pc, #168]	; (8110864 <_dtoa_r+0x32c>)
 81107bc:	f00a 030f 	and.w	r3, sl, #15
 81107c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 81107c4:	ed93 7b00 	vldr	d7, [r3]
 81107c8:	ea4f 162a 	mov.w	r6, sl, asr #4
 81107cc:	06f0      	lsls	r0, r6, #27
 81107ce:	ed8d 7b08 	vstr	d7, [sp, #32]
 81107d2:	d565      	bpl.n	81108a0 <_dtoa_r+0x368>
 81107d4:	4b24      	ldr	r3, [pc, #144]	; (8110868 <_dtoa_r+0x330>)
 81107d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 81107da:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 81107de:	f7f0 f8cd 	bl	810097c <__aeabi_ddiv>
 81107e2:	e9cd 0100 	strd	r0, r1, [sp]
 81107e6:	f006 060f 	and.w	r6, r6, #15
 81107ea:	2503      	movs	r5, #3
 81107ec:	4f1e      	ldr	r7, [pc, #120]	; (8110868 <_dtoa_r+0x330>)
 81107ee:	e04c      	b.n	811088a <_dtoa_r+0x352>
 81107f0:	2301      	movs	r3, #1
 81107f2:	930a      	str	r3, [sp, #40]	; 0x28
 81107f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81107f6:	4453      	add	r3, sl
 81107f8:	f103 0901 	add.w	r9, r3, #1
 81107fc:	9302      	str	r3, [sp, #8]
 81107fe:	464b      	mov	r3, r9
 8110800:	2b01      	cmp	r3, #1
 8110802:	bfb8      	it	lt
 8110804:	2301      	movlt	r3, #1
 8110806:	e7ba      	b.n	811077e <_dtoa_r+0x246>
 8110808:	2300      	movs	r3, #0
 811080a:	e7b2      	b.n	8110772 <_dtoa_r+0x23a>
 811080c:	2300      	movs	r3, #0
 811080e:	e7f0      	b.n	81107f2 <_dtoa_r+0x2ba>
 8110810:	2501      	movs	r5, #1
 8110812:	2300      	movs	r3, #0
 8110814:	9306      	str	r3, [sp, #24]
 8110816:	950a      	str	r5, [sp, #40]	; 0x28
 8110818:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 811081c:	9302      	str	r3, [sp, #8]
 811081e:	4699      	mov	r9, r3
 8110820:	2200      	movs	r2, #0
 8110822:	2312      	movs	r3, #18
 8110824:	920b      	str	r2, [sp, #44]	; 0x2c
 8110826:	e7aa      	b.n	811077e <_dtoa_r+0x246>
 8110828:	2301      	movs	r3, #1
 811082a:	930a      	str	r3, [sp, #40]	; 0x28
 811082c:	e7f4      	b.n	8110818 <_dtoa_r+0x2e0>
 811082e:	2301      	movs	r3, #1
 8110830:	9302      	str	r3, [sp, #8]
 8110832:	4699      	mov	r9, r3
 8110834:	461a      	mov	r2, r3
 8110836:	e7f5      	b.n	8110824 <_dtoa_r+0x2ec>
 8110838:	3101      	adds	r1, #1
 811083a:	6071      	str	r1, [r6, #4]
 811083c:	0052      	lsls	r2, r2, #1
 811083e:	e7a2      	b.n	8110786 <_dtoa_r+0x24e>
 8110840:	636f4361 	.word	0x636f4361
 8110844:	3fd287a7 	.word	0x3fd287a7
 8110848:	8b60c8b3 	.word	0x8b60c8b3
 811084c:	3fc68a28 	.word	0x3fc68a28
 8110850:	509f79fb 	.word	0x509f79fb
 8110854:	3fd34413 	.word	0x3fd34413
 8110858:	7ff00000 	.word	0x7ff00000
 811085c:	08112f25 	.word	0x08112f25
 8110860:	3ff80000 	.word	0x3ff80000
 8110864:	08112ff0 	.word	0x08112ff0
 8110868:	08112fc8 	.word	0x08112fc8
 811086c:	08112f51 	.word	0x08112f51
 8110870:	07f1      	lsls	r1, r6, #31
 8110872:	d508      	bpl.n	8110886 <_dtoa_r+0x34e>
 8110874:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8110878:	e9d7 2300 	ldrd	r2, r3, [r7]
 811087c:	f7ef ff54 	bl	8100728 <__aeabi_dmul>
 8110880:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8110884:	3501      	adds	r5, #1
 8110886:	1076      	asrs	r6, r6, #1
 8110888:	3708      	adds	r7, #8
 811088a:	2e00      	cmp	r6, #0
 811088c:	d1f0      	bne.n	8110870 <_dtoa_r+0x338>
 811088e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8110892:	e9dd 0100 	ldrd	r0, r1, [sp]
 8110896:	f7f0 f871 	bl	810097c <__aeabi_ddiv>
 811089a:	e9cd 0100 	strd	r0, r1, [sp]
 811089e:	e01a      	b.n	81108d6 <_dtoa_r+0x39e>
 81108a0:	2502      	movs	r5, #2
 81108a2:	e7a3      	b.n	81107ec <_dtoa_r+0x2b4>
 81108a4:	f000 80a0 	beq.w	81109e8 <_dtoa_r+0x4b0>
 81108a8:	f1ca 0600 	rsb	r6, sl, #0
 81108ac:	4b9f      	ldr	r3, [pc, #636]	; (8110b2c <_dtoa_r+0x5f4>)
 81108ae:	4fa0      	ldr	r7, [pc, #640]	; (8110b30 <_dtoa_r+0x5f8>)
 81108b0:	f006 020f 	and.w	r2, r6, #15
 81108b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 81108b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81108bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 81108c0:	f7ef ff32 	bl	8100728 <__aeabi_dmul>
 81108c4:	e9cd 0100 	strd	r0, r1, [sp]
 81108c8:	1136      	asrs	r6, r6, #4
 81108ca:	2300      	movs	r3, #0
 81108cc:	2502      	movs	r5, #2
 81108ce:	2e00      	cmp	r6, #0
 81108d0:	d17f      	bne.n	81109d2 <_dtoa_r+0x49a>
 81108d2:	2b00      	cmp	r3, #0
 81108d4:	d1e1      	bne.n	811089a <_dtoa_r+0x362>
 81108d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 81108d8:	2b00      	cmp	r3, #0
 81108da:	f000 8087 	beq.w	81109ec <_dtoa_r+0x4b4>
 81108de:	e9dd 6700 	ldrd	r6, r7, [sp]
 81108e2:	2200      	movs	r2, #0
 81108e4:	4b93      	ldr	r3, [pc, #588]	; (8110b34 <_dtoa_r+0x5fc>)
 81108e6:	4630      	mov	r0, r6
 81108e8:	4639      	mov	r1, r7
 81108ea:	f7f0 f98f 	bl	8100c0c <__aeabi_dcmplt>
 81108ee:	2800      	cmp	r0, #0
 81108f0:	d07c      	beq.n	81109ec <_dtoa_r+0x4b4>
 81108f2:	f1b9 0f00 	cmp.w	r9, #0
 81108f6:	d079      	beq.n	81109ec <_dtoa_r+0x4b4>
 81108f8:	9b02      	ldr	r3, [sp, #8]
 81108fa:	2b00      	cmp	r3, #0
 81108fc:	dd35      	ble.n	811096a <_dtoa_r+0x432>
 81108fe:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8110902:	9308      	str	r3, [sp, #32]
 8110904:	4639      	mov	r1, r7
 8110906:	2200      	movs	r2, #0
 8110908:	4b8b      	ldr	r3, [pc, #556]	; (8110b38 <_dtoa_r+0x600>)
 811090a:	4630      	mov	r0, r6
 811090c:	f7ef ff0c 	bl	8100728 <__aeabi_dmul>
 8110910:	e9cd 0100 	strd	r0, r1, [sp]
 8110914:	9f02      	ldr	r7, [sp, #8]
 8110916:	3501      	adds	r5, #1
 8110918:	4628      	mov	r0, r5
 811091a:	f7ef fe9b 	bl	8100654 <__aeabi_i2d>
 811091e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8110922:	f7ef ff01 	bl	8100728 <__aeabi_dmul>
 8110926:	2200      	movs	r2, #0
 8110928:	4b84      	ldr	r3, [pc, #528]	; (8110b3c <_dtoa_r+0x604>)
 811092a:	f7ef fd47 	bl	81003bc <__adddf3>
 811092e:	4605      	mov	r5, r0
 8110930:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8110934:	2f00      	cmp	r7, #0
 8110936:	d15d      	bne.n	81109f4 <_dtoa_r+0x4bc>
 8110938:	2200      	movs	r2, #0
 811093a:	4b81      	ldr	r3, [pc, #516]	; (8110b40 <_dtoa_r+0x608>)
 811093c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8110940:	f7ef fd3a 	bl	81003b8 <__aeabi_dsub>
 8110944:	462a      	mov	r2, r5
 8110946:	4633      	mov	r3, r6
 8110948:	e9cd 0100 	strd	r0, r1, [sp]
 811094c:	f7f0 f97c 	bl	8100c48 <__aeabi_dcmpgt>
 8110950:	2800      	cmp	r0, #0
 8110952:	f040 8288 	bne.w	8110e66 <_dtoa_r+0x92e>
 8110956:	462a      	mov	r2, r5
 8110958:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 811095c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8110960:	f7f0 f954 	bl	8100c0c <__aeabi_dcmplt>
 8110964:	2800      	cmp	r0, #0
 8110966:	f040 827c 	bne.w	8110e62 <_dtoa_r+0x92a>
 811096a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 811096e:	e9cd 2300 	strd	r2, r3, [sp]
 8110972:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8110974:	2b00      	cmp	r3, #0
 8110976:	f2c0 8150 	blt.w	8110c1a <_dtoa_r+0x6e2>
 811097a:	f1ba 0f0e 	cmp.w	sl, #14
 811097e:	f300 814c 	bgt.w	8110c1a <_dtoa_r+0x6e2>
 8110982:	4b6a      	ldr	r3, [pc, #424]	; (8110b2c <_dtoa_r+0x5f4>)
 8110984:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8110988:	ed93 7b00 	vldr	d7, [r3]
 811098c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 811098e:	2b00      	cmp	r3, #0
 8110990:	ed8d 7b02 	vstr	d7, [sp, #8]
 8110994:	f280 80d8 	bge.w	8110b48 <_dtoa_r+0x610>
 8110998:	f1b9 0f00 	cmp.w	r9, #0
 811099c:	f300 80d4 	bgt.w	8110b48 <_dtoa_r+0x610>
 81109a0:	f040 825e 	bne.w	8110e60 <_dtoa_r+0x928>
 81109a4:	2200      	movs	r2, #0
 81109a6:	4b66      	ldr	r3, [pc, #408]	; (8110b40 <_dtoa_r+0x608>)
 81109a8:	ec51 0b17 	vmov	r0, r1, d7
 81109ac:	f7ef febc 	bl	8100728 <__aeabi_dmul>
 81109b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 81109b4:	f7f0 f93e 	bl	8100c34 <__aeabi_dcmpge>
 81109b8:	464f      	mov	r7, r9
 81109ba:	464e      	mov	r6, r9
 81109bc:	2800      	cmp	r0, #0
 81109be:	f040 8234 	bne.w	8110e2a <_dtoa_r+0x8f2>
 81109c2:	2331      	movs	r3, #49	; 0x31
 81109c4:	f10b 0501 	add.w	r5, fp, #1
 81109c8:	f88b 3000 	strb.w	r3, [fp]
 81109cc:	f10a 0a01 	add.w	sl, sl, #1
 81109d0:	e22f      	b.n	8110e32 <_dtoa_r+0x8fa>
 81109d2:	07f2      	lsls	r2, r6, #31
 81109d4:	d505      	bpl.n	81109e2 <_dtoa_r+0x4aa>
 81109d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 81109da:	f7ef fea5 	bl	8100728 <__aeabi_dmul>
 81109de:	3501      	adds	r5, #1
 81109e0:	2301      	movs	r3, #1
 81109e2:	1076      	asrs	r6, r6, #1
 81109e4:	3708      	adds	r7, #8
 81109e6:	e772      	b.n	81108ce <_dtoa_r+0x396>
 81109e8:	2502      	movs	r5, #2
 81109ea:	e774      	b.n	81108d6 <_dtoa_r+0x39e>
 81109ec:	f8cd a020 	str.w	sl, [sp, #32]
 81109f0:	464f      	mov	r7, r9
 81109f2:	e791      	b.n	8110918 <_dtoa_r+0x3e0>
 81109f4:	4b4d      	ldr	r3, [pc, #308]	; (8110b2c <_dtoa_r+0x5f4>)
 81109f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 81109fa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 81109fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8110a00:	2b00      	cmp	r3, #0
 8110a02:	d047      	beq.n	8110a94 <_dtoa_r+0x55c>
 8110a04:	4602      	mov	r2, r0
 8110a06:	460b      	mov	r3, r1
 8110a08:	2000      	movs	r0, #0
 8110a0a:	494e      	ldr	r1, [pc, #312]	; (8110b44 <_dtoa_r+0x60c>)
 8110a0c:	f7ef ffb6 	bl	810097c <__aeabi_ddiv>
 8110a10:	462a      	mov	r2, r5
 8110a12:	4633      	mov	r3, r6
 8110a14:	f7ef fcd0 	bl	81003b8 <__aeabi_dsub>
 8110a18:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8110a1c:	465d      	mov	r5, fp
 8110a1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8110a22:	f7f0 f931 	bl	8100c88 <__aeabi_d2iz>
 8110a26:	4606      	mov	r6, r0
 8110a28:	f7ef fe14 	bl	8100654 <__aeabi_i2d>
 8110a2c:	4602      	mov	r2, r0
 8110a2e:	460b      	mov	r3, r1
 8110a30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8110a34:	f7ef fcc0 	bl	81003b8 <__aeabi_dsub>
 8110a38:	3630      	adds	r6, #48	; 0x30
 8110a3a:	f805 6b01 	strb.w	r6, [r5], #1
 8110a3e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8110a42:	e9cd 0100 	strd	r0, r1, [sp]
 8110a46:	f7f0 f8e1 	bl	8100c0c <__aeabi_dcmplt>
 8110a4a:	2800      	cmp	r0, #0
 8110a4c:	d163      	bne.n	8110b16 <_dtoa_r+0x5de>
 8110a4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8110a52:	2000      	movs	r0, #0
 8110a54:	4937      	ldr	r1, [pc, #220]	; (8110b34 <_dtoa_r+0x5fc>)
 8110a56:	f7ef fcaf 	bl	81003b8 <__aeabi_dsub>
 8110a5a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8110a5e:	f7f0 f8d5 	bl	8100c0c <__aeabi_dcmplt>
 8110a62:	2800      	cmp	r0, #0
 8110a64:	f040 80b7 	bne.w	8110bd6 <_dtoa_r+0x69e>
 8110a68:	eba5 030b 	sub.w	r3, r5, fp
 8110a6c:	429f      	cmp	r7, r3
 8110a6e:	f77f af7c 	ble.w	811096a <_dtoa_r+0x432>
 8110a72:	2200      	movs	r2, #0
 8110a74:	4b30      	ldr	r3, [pc, #192]	; (8110b38 <_dtoa_r+0x600>)
 8110a76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8110a7a:	f7ef fe55 	bl	8100728 <__aeabi_dmul>
 8110a7e:	2200      	movs	r2, #0
 8110a80:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8110a84:	4b2c      	ldr	r3, [pc, #176]	; (8110b38 <_dtoa_r+0x600>)
 8110a86:	e9dd 0100 	ldrd	r0, r1, [sp]
 8110a8a:	f7ef fe4d 	bl	8100728 <__aeabi_dmul>
 8110a8e:	e9cd 0100 	strd	r0, r1, [sp]
 8110a92:	e7c4      	b.n	8110a1e <_dtoa_r+0x4e6>
 8110a94:	462a      	mov	r2, r5
 8110a96:	4633      	mov	r3, r6
 8110a98:	f7ef fe46 	bl	8100728 <__aeabi_dmul>
 8110a9c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8110aa0:	eb0b 0507 	add.w	r5, fp, r7
 8110aa4:	465e      	mov	r6, fp
 8110aa6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8110aaa:	f7f0 f8ed 	bl	8100c88 <__aeabi_d2iz>
 8110aae:	4607      	mov	r7, r0
 8110ab0:	f7ef fdd0 	bl	8100654 <__aeabi_i2d>
 8110ab4:	3730      	adds	r7, #48	; 0x30
 8110ab6:	4602      	mov	r2, r0
 8110ab8:	460b      	mov	r3, r1
 8110aba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8110abe:	f7ef fc7b 	bl	81003b8 <__aeabi_dsub>
 8110ac2:	f806 7b01 	strb.w	r7, [r6], #1
 8110ac6:	42ae      	cmp	r6, r5
 8110ac8:	e9cd 0100 	strd	r0, r1, [sp]
 8110acc:	f04f 0200 	mov.w	r2, #0
 8110ad0:	d126      	bne.n	8110b20 <_dtoa_r+0x5e8>
 8110ad2:	4b1c      	ldr	r3, [pc, #112]	; (8110b44 <_dtoa_r+0x60c>)
 8110ad4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8110ad8:	f7ef fc70 	bl	81003bc <__adddf3>
 8110adc:	4602      	mov	r2, r0
 8110ade:	460b      	mov	r3, r1
 8110ae0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8110ae4:	f7f0 f8b0 	bl	8100c48 <__aeabi_dcmpgt>
 8110ae8:	2800      	cmp	r0, #0
 8110aea:	d174      	bne.n	8110bd6 <_dtoa_r+0x69e>
 8110aec:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8110af0:	2000      	movs	r0, #0
 8110af2:	4914      	ldr	r1, [pc, #80]	; (8110b44 <_dtoa_r+0x60c>)
 8110af4:	f7ef fc60 	bl	81003b8 <__aeabi_dsub>
 8110af8:	4602      	mov	r2, r0
 8110afa:	460b      	mov	r3, r1
 8110afc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8110b00:	f7f0 f884 	bl	8100c0c <__aeabi_dcmplt>
 8110b04:	2800      	cmp	r0, #0
 8110b06:	f43f af30 	beq.w	811096a <_dtoa_r+0x432>
 8110b0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8110b0e:	2b30      	cmp	r3, #48	; 0x30
 8110b10:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8110b14:	d002      	beq.n	8110b1c <_dtoa_r+0x5e4>
 8110b16:	f8dd a020 	ldr.w	sl, [sp, #32]
 8110b1a:	e04a      	b.n	8110bb2 <_dtoa_r+0x67a>
 8110b1c:	4615      	mov	r5, r2
 8110b1e:	e7f4      	b.n	8110b0a <_dtoa_r+0x5d2>
 8110b20:	4b05      	ldr	r3, [pc, #20]	; (8110b38 <_dtoa_r+0x600>)
 8110b22:	f7ef fe01 	bl	8100728 <__aeabi_dmul>
 8110b26:	e9cd 0100 	strd	r0, r1, [sp]
 8110b2a:	e7bc      	b.n	8110aa6 <_dtoa_r+0x56e>
 8110b2c:	08112ff0 	.word	0x08112ff0
 8110b30:	08112fc8 	.word	0x08112fc8
 8110b34:	3ff00000 	.word	0x3ff00000
 8110b38:	40240000 	.word	0x40240000
 8110b3c:	401c0000 	.word	0x401c0000
 8110b40:	40140000 	.word	0x40140000
 8110b44:	3fe00000 	.word	0x3fe00000
 8110b48:	e9dd 6700 	ldrd	r6, r7, [sp]
 8110b4c:	465d      	mov	r5, fp
 8110b4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8110b52:	4630      	mov	r0, r6
 8110b54:	4639      	mov	r1, r7
 8110b56:	f7ef ff11 	bl	810097c <__aeabi_ddiv>
 8110b5a:	f7f0 f895 	bl	8100c88 <__aeabi_d2iz>
 8110b5e:	4680      	mov	r8, r0
 8110b60:	f7ef fd78 	bl	8100654 <__aeabi_i2d>
 8110b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8110b68:	f7ef fdde 	bl	8100728 <__aeabi_dmul>
 8110b6c:	4602      	mov	r2, r0
 8110b6e:	460b      	mov	r3, r1
 8110b70:	4630      	mov	r0, r6
 8110b72:	4639      	mov	r1, r7
 8110b74:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8110b78:	f7ef fc1e 	bl	81003b8 <__aeabi_dsub>
 8110b7c:	f805 6b01 	strb.w	r6, [r5], #1
 8110b80:	eba5 060b 	sub.w	r6, r5, fp
 8110b84:	45b1      	cmp	r9, r6
 8110b86:	4602      	mov	r2, r0
 8110b88:	460b      	mov	r3, r1
 8110b8a:	d139      	bne.n	8110c00 <_dtoa_r+0x6c8>
 8110b8c:	f7ef fc16 	bl	81003bc <__adddf3>
 8110b90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8110b94:	4606      	mov	r6, r0
 8110b96:	460f      	mov	r7, r1
 8110b98:	f7f0 f856 	bl	8100c48 <__aeabi_dcmpgt>
 8110b9c:	b9c8      	cbnz	r0, 8110bd2 <_dtoa_r+0x69a>
 8110b9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8110ba2:	4630      	mov	r0, r6
 8110ba4:	4639      	mov	r1, r7
 8110ba6:	f7f0 f827 	bl	8100bf8 <__aeabi_dcmpeq>
 8110baa:	b110      	cbz	r0, 8110bb2 <_dtoa_r+0x67a>
 8110bac:	f018 0f01 	tst.w	r8, #1
 8110bb0:	d10f      	bne.n	8110bd2 <_dtoa_r+0x69a>
 8110bb2:	9904      	ldr	r1, [sp, #16]
 8110bb4:	4620      	mov	r0, r4
 8110bb6:	f000 fcb5 	bl	8111524 <_Bfree>
 8110bba:	2300      	movs	r3, #0
 8110bbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8110bbe:	702b      	strb	r3, [r5, #0]
 8110bc0:	f10a 0301 	add.w	r3, sl, #1
 8110bc4:	6013      	str	r3, [r2, #0]
 8110bc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8110bc8:	2b00      	cmp	r3, #0
 8110bca:	f000 8241 	beq.w	8111050 <_dtoa_r+0xb18>
 8110bce:	601d      	str	r5, [r3, #0]
 8110bd0:	e23e      	b.n	8111050 <_dtoa_r+0xb18>
 8110bd2:	f8cd a020 	str.w	sl, [sp, #32]
 8110bd6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8110bda:	2a39      	cmp	r2, #57	; 0x39
 8110bdc:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8110be0:	d108      	bne.n	8110bf4 <_dtoa_r+0x6bc>
 8110be2:	459b      	cmp	fp, r3
 8110be4:	d10a      	bne.n	8110bfc <_dtoa_r+0x6c4>
 8110be6:	9b08      	ldr	r3, [sp, #32]
 8110be8:	3301      	adds	r3, #1
 8110bea:	9308      	str	r3, [sp, #32]
 8110bec:	2330      	movs	r3, #48	; 0x30
 8110bee:	f88b 3000 	strb.w	r3, [fp]
 8110bf2:	465b      	mov	r3, fp
 8110bf4:	781a      	ldrb	r2, [r3, #0]
 8110bf6:	3201      	adds	r2, #1
 8110bf8:	701a      	strb	r2, [r3, #0]
 8110bfa:	e78c      	b.n	8110b16 <_dtoa_r+0x5de>
 8110bfc:	461d      	mov	r5, r3
 8110bfe:	e7ea      	b.n	8110bd6 <_dtoa_r+0x69e>
 8110c00:	2200      	movs	r2, #0
 8110c02:	4b9b      	ldr	r3, [pc, #620]	; (8110e70 <_dtoa_r+0x938>)
 8110c04:	f7ef fd90 	bl	8100728 <__aeabi_dmul>
 8110c08:	2200      	movs	r2, #0
 8110c0a:	2300      	movs	r3, #0
 8110c0c:	4606      	mov	r6, r0
 8110c0e:	460f      	mov	r7, r1
 8110c10:	f7ef fff2 	bl	8100bf8 <__aeabi_dcmpeq>
 8110c14:	2800      	cmp	r0, #0
 8110c16:	d09a      	beq.n	8110b4e <_dtoa_r+0x616>
 8110c18:	e7cb      	b.n	8110bb2 <_dtoa_r+0x67a>
 8110c1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8110c1c:	2a00      	cmp	r2, #0
 8110c1e:	f000 808b 	beq.w	8110d38 <_dtoa_r+0x800>
 8110c22:	9a06      	ldr	r2, [sp, #24]
 8110c24:	2a01      	cmp	r2, #1
 8110c26:	dc6e      	bgt.n	8110d06 <_dtoa_r+0x7ce>
 8110c28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8110c2a:	2a00      	cmp	r2, #0
 8110c2c:	d067      	beq.n	8110cfe <_dtoa_r+0x7c6>
 8110c2e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8110c32:	9f07      	ldr	r7, [sp, #28]
 8110c34:	9d05      	ldr	r5, [sp, #20]
 8110c36:	9a05      	ldr	r2, [sp, #20]
 8110c38:	2101      	movs	r1, #1
 8110c3a:	441a      	add	r2, r3
 8110c3c:	4620      	mov	r0, r4
 8110c3e:	9205      	str	r2, [sp, #20]
 8110c40:	4498      	add	r8, r3
 8110c42:	f000 fd0f 	bl	8111664 <__i2b>
 8110c46:	4606      	mov	r6, r0
 8110c48:	2d00      	cmp	r5, #0
 8110c4a:	dd0c      	ble.n	8110c66 <_dtoa_r+0x72e>
 8110c4c:	f1b8 0f00 	cmp.w	r8, #0
 8110c50:	dd09      	ble.n	8110c66 <_dtoa_r+0x72e>
 8110c52:	4545      	cmp	r5, r8
 8110c54:	9a05      	ldr	r2, [sp, #20]
 8110c56:	462b      	mov	r3, r5
 8110c58:	bfa8      	it	ge
 8110c5a:	4643      	movge	r3, r8
 8110c5c:	1ad2      	subs	r2, r2, r3
 8110c5e:	9205      	str	r2, [sp, #20]
 8110c60:	1aed      	subs	r5, r5, r3
 8110c62:	eba8 0803 	sub.w	r8, r8, r3
 8110c66:	9b07      	ldr	r3, [sp, #28]
 8110c68:	b1eb      	cbz	r3, 8110ca6 <_dtoa_r+0x76e>
 8110c6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8110c6c:	2b00      	cmp	r3, #0
 8110c6e:	d067      	beq.n	8110d40 <_dtoa_r+0x808>
 8110c70:	b18f      	cbz	r7, 8110c96 <_dtoa_r+0x75e>
 8110c72:	4631      	mov	r1, r6
 8110c74:	463a      	mov	r2, r7
 8110c76:	4620      	mov	r0, r4
 8110c78:	f000 fd94 	bl	81117a4 <__pow5mult>
 8110c7c:	9a04      	ldr	r2, [sp, #16]
 8110c7e:	4601      	mov	r1, r0
 8110c80:	4606      	mov	r6, r0
 8110c82:	4620      	mov	r0, r4
 8110c84:	f000 fcf7 	bl	8111676 <__multiply>
 8110c88:	9904      	ldr	r1, [sp, #16]
 8110c8a:	9008      	str	r0, [sp, #32]
 8110c8c:	4620      	mov	r0, r4
 8110c8e:	f000 fc49 	bl	8111524 <_Bfree>
 8110c92:	9b08      	ldr	r3, [sp, #32]
 8110c94:	9304      	str	r3, [sp, #16]
 8110c96:	9b07      	ldr	r3, [sp, #28]
 8110c98:	1bda      	subs	r2, r3, r7
 8110c9a:	d004      	beq.n	8110ca6 <_dtoa_r+0x76e>
 8110c9c:	9904      	ldr	r1, [sp, #16]
 8110c9e:	4620      	mov	r0, r4
 8110ca0:	f000 fd80 	bl	81117a4 <__pow5mult>
 8110ca4:	9004      	str	r0, [sp, #16]
 8110ca6:	2101      	movs	r1, #1
 8110ca8:	4620      	mov	r0, r4
 8110caa:	f000 fcdb 	bl	8111664 <__i2b>
 8110cae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8110cb0:	4607      	mov	r7, r0
 8110cb2:	2b00      	cmp	r3, #0
 8110cb4:	f000 81d0 	beq.w	8111058 <_dtoa_r+0xb20>
 8110cb8:	461a      	mov	r2, r3
 8110cba:	4601      	mov	r1, r0
 8110cbc:	4620      	mov	r0, r4
 8110cbe:	f000 fd71 	bl	81117a4 <__pow5mult>
 8110cc2:	9b06      	ldr	r3, [sp, #24]
 8110cc4:	2b01      	cmp	r3, #1
 8110cc6:	4607      	mov	r7, r0
 8110cc8:	dc40      	bgt.n	8110d4c <_dtoa_r+0x814>
 8110cca:	9b00      	ldr	r3, [sp, #0]
 8110ccc:	2b00      	cmp	r3, #0
 8110cce:	d139      	bne.n	8110d44 <_dtoa_r+0x80c>
 8110cd0:	9b01      	ldr	r3, [sp, #4]
 8110cd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8110cd6:	2b00      	cmp	r3, #0
 8110cd8:	d136      	bne.n	8110d48 <_dtoa_r+0x810>
 8110cda:	9b01      	ldr	r3, [sp, #4]
 8110cdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8110ce0:	0d1b      	lsrs	r3, r3, #20
 8110ce2:	051b      	lsls	r3, r3, #20
 8110ce4:	b12b      	cbz	r3, 8110cf2 <_dtoa_r+0x7ba>
 8110ce6:	9b05      	ldr	r3, [sp, #20]
 8110ce8:	3301      	adds	r3, #1
 8110cea:	9305      	str	r3, [sp, #20]
 8110cec:	f108 0801 	add.w	r8, r8, #1
 8110cf0:	2301      	movs	r3, #1
 8110cf2:	9307      	str	r3, [sp, #28]
 8110cf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8110cf6:	2b00      	cmp	r3, #0
 8110cf8:	d12a      	bne.n	8110d50 <_dtoa_r+0x818>
 8110cfa:	2001      	movs	r0, #1
 8110cfc:	e030      	b.n	8110d60 <_dtoa_r+0x828>
 8110cfe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8110d00:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8110d04:	e795      	b.n	8110c32 <_dtoa_r+0x6fa>
 8110d06:	9b07      	ldr	r3, [sp, #28]
 8110d08:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8110d0c:	42bb      	cmp	r3, r7
 8110d0e:	bfbf      	itttt	lt
 8110d10:	9b07      	ldrlt	r3, [sp, #28]
 8110d12:	9707      	strlt	r7, [sp, #28]
 8110d14:	1afa      	sublt	r2, r7, r3
 8110d16:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8110d18:	bfbb      	ittet	lt
 8110d1a:	189b      	addlt	r3, r3, r2
 8110d1c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8110d1e:	1bdf      	subge	r7, r3, r7
 8110d20:	2700      	movlt	r7, #0
 8110d22:	f1b9 0f00 	cmp.w	r9, #0
 8110d26:	bfb5      	itete	lt
 8110d28:	9b05      	ldrlt	r3, [sp, #20]
 8110d2a:	9d05      	ldrge	r5, [sp, #20]
 8110d2c:	eba3 0509 	sublt.w	r5, r3, r9
 8110d30:	464b      	movge	r3, r9
 8110d32:	bfb8      	it	lt
 8110d34:	2300      	movlt	r3, #0
 8110d36:	e77e      	b.n	8110c36 <_dtoa_r+0x6fe>
 8110d38:	9f07      	ldr	r7, [sp, #28]
 8110d3a:	9d05      	ldr	r5, [sp, #20]
 8110d3c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8110d3e:	e783      	b.n	8110c48 <_dtoa_r+0x710>
 8110d40:	9a07      	ldr	r2, [sp, #28]
 8110d42:	e7ab      	b.n	8110c9c <_dtoa_r+0x764>
 8110d44:	2300      	movs	r3, #0
 8110d46:	e7d4      	b.n	8110cf2 <_dtoa_r+0x7ba>
 8110d48:	9b00      	ldr	r3, [sp, #0]
 8110d4a:	e7d2      	b.n	8110cf2 <_dtoa_r+0x7ba>
 8110d4c:	2300      	movs	r3, #0
 8110d4e:	9307      	str	r3, [sp, #28]
 8110d50:	693b      	ldr	r3, [r7, #16]
 8110d52:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8110d56:	6918      	ldr	r0, [r3, #16]
 8110d58:	f000 fc36 	bl	81115c8 <__hi0bits>
 8110d5c:	f1c0 0020 	rsb	r0, r0, #32
 8110d60:	4440      	add	r0, r8
 8110d62:	f010 001f 	ands.w	r0, r0, #31
 8110d66:	d047      	beq.n	8110df8 <_dtoa_r+0x8c0>
 8110d68:	f1c0 0320 	rsb	r3, r0, #32
 8110d6c:	2b04      	cmp	r3, #4
 8110d6e:	dd3b      	ble.n	8110de8 <_dtoa_r+0x8b0>
 8110d70:	9b05      	ldr	r3, [sp, #20]
 8110d72:	f1c0 001c 	rsb	r0, r0, #28
 8110d76:	4403      	add	r3, r0
 8110d78:	9305      	str	r3, [sp, #20]
 8110d7a:	4405      	add	r5, r0
 8110d7c:	4480      	add	r8, r0
 8110d7e:	9b05      	ldr	r3, [sp, #20]
 8110d80:	2b00      	cmp	r3, #0
 8110d82:	dd05      	ble.n	8110d90 <_dtoa_r+0x858>
 8110d84:	461a      	mov	r2, r3
 8110d86:	9904      	ldr	r1, [sp, #16]
 8110d88:	4620      	mov	r0, r4
 8110d8a:	f000 fd59 	bl	8111840 <__lshift>
 8110d8e:	9004      	str	r0, [sp, #16]
 8110d90:	f1b8 0f00 	cmp.w	r8, #0
 8110d94:	dd05      	ble.n	8110da2 <_dtoa_r+0x86a>
 8110d96:	4639      	mov	r1, r7
 8110d98:	4642      	mov	r2, r8
 8110d9a:	4620      	mov	r0, r4
 8110d9c:	f000 fd50 	bl	8111840 <__lshift>
 8110da0:	4607      	mov	r7, r0
 8110da2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8110da4:	b353      	cbz	r3, 8110dfc <_dtoa_r+0x8c4>
 8110da6:	4639      	mov	r1, r7
 8110da8:	9804      	ldr	r0, [sp, #16]
 8110daa:	f000 fd9d 	bl	81118e8 <__mcmp>
 8110dae:	2800      	cmp	r0, #0
 8110db0:	da24      	bge.n	8110dfc <_dtoa_r+0x8c4>
 8110db2:	2300      	movs	r3, #0
 8110db4:	220a      	movs	r2, #10
 8110db6:	9904      	ldr	r1, [sp, #16]
 8110db8:	4620      	mov	r0, r4
 8110dba:	f000 fbca 	bl	8111552 <__multadd>
 8110dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8110dc0:	9004      	str	r0, [sp, #16]
 8110dc2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8110dc6:	2b00      	cmp	r3, #0
 8110dc8:	f000 814d 	beq.w	8111066 <_dtoa_r+0xb2e>
 8110dcc:	2300      	movs	r3, #0
 8110dce:	4631      	mov	r1, r6
 8110dd0:	220a      	movs	r2, #10
 8110dd2:	4620      	mov	r0, r4
 8110dd4:	f000 fbbd 	bl	8111552 <__multadd>
 8110dd8:	9b02      	ldr	r3, [sp, #8]
 8110dda:	2b00      	cmp	r3, #0
 8110ddc:	4606      	mov	r6, r0
 8110dde:	dc4f      	bgt.n	8110e80 <_dtoa_r+0x948>
 8110de0:	9b06      	ldr	r3, [sp, #24]
 8110de2:	2b02      	cmp	r3, #2
 8110de4:	dd4c      	ble.n	8110e80 <_dtoa_r+0x948>
 8110de6:	e011      	b.n	8110e0c <_dtoa_r+0x8d4>
 8110de8:	d0c9      	beq.n	8110d7e <_dtoa_r+0x846>
 8110dea:	9a05      	ldr	r2, [sp, #20]
 8110dec:	331c      	adds	r3, #28
 8110dee:	441a      	add	r2, r3
 8110df0:	9205      	str	r2, [sp, #20]
 8110df2:	441d      	add	r5, r3
 8110df4:	4498      	add	r8, r3
 8110df6:	e7c2      	b.n	8110d7e <_dtoa_r+0x846>
 8110df8:	4603      	mov	r3, r0
 8110dfa:	e7f6      	b.n	8110dea <_dtoa_r+0x8b2>
 8110dfc:	f1b9 0f00 	cmp.w	r9, #0
 8110e00:	dc38      	bgt.n	8110e74 <_dtoa_r+0x93c>
 8110e02:	9b06      	ldr	r3, [sp, #24]
 8110e04:	2b02      	cmp	r3, #2
 8110e06:	dd35      	ble.n	8110e74 <_dtoa_r+0x93c>
 8110e08:	f8cd 9008 	str.w	r9, [sp, #8]
 8110e0c:	9b02      	ldr	r3, [sp, #8]
 8110e0e:	b963      	cbnz	r3, 8110e2a <_dtoa_r+0x8f2>
 8110e10:	4639      	mov	r1, r7
 8110e12:	2205      	movs	r2, #5
 8110e14:	4620      	mov	r0, r4
 8110e16:	f000 fb9c 	bl	8111552 <__multadd>
 8110e1a:	4601      	mov	r1, r0
 8110e1c:	4607      	mov	r7, r0
 8110e1e:	9804      	ldr	r0, [sp, #16]
 8110e20:	f000 fd62 	bl	81118e8 <__mcmp>
 8110e24:	2800      	cmp	r0, #0
 8110e26:	f73f adcc 	bgt.w	81109c2 <_dtoa_r+0x48a>
 8110e2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8110e2c:	465d      	mov	r5, fp
 8110e2e:	ea6f 0a03 	mvn.w	sl, r3
 8110e32:	f04f 0900 	mov.w	r9, #0
 8110e36:	4639      	mov	r1, r7
 8110e38:	4620      	mov	r0, r4
 8110e3a:	f000 fb73 	bl	8111524 <_Bfree>
 8110e3e:	2e00      	cmp	r6, #0
 8110e40:	f43f aeb7 	beq.w	8110bb2 <_dtoa_r+0x67a>
 8110e44:	f1b9 0f00 	cmp.w	r9, #0
 8110e48:	d005      	beq.n	8110e56 <_dtoa_r+0x91e>
 8110e4a:	45b1      	cmp	r9, r6
 8110e4c:	d003      	beq.n	8110e56 <_dtoa_r+0x91e>
 8110e4e:	4649      	mov	r1, r9
 8110e50:	4620      	mov	r0, r4
 8110e52:	f000 fb67 	bl	8111524 <_Bfree>
 8110e56:	4631      	mov	r1, r6
 8110e58:	4620      	mov	r0, r4
 8110e5a:	f000 fb63 	bl	8111524 <_Bfree>
 8110e5e:	e6a8      	b.n	8110bb2 <_dtoa_r+0x67a>
 8110e60:	2700      	movs	r7, #0
 8110e62:	463e      	mov	r6, r7
 8110e64:	e7e1      	b.n	8110e2a <_dtoa_r+0x8f2>
 8110e66:	f8dd a020 	ldr.w	sl, [sp, #32]
 8110e6a:	463e      	mov	r6, r7
 8110e6c:	e5a9      	b.n	81109c2 <_dtoa_r+0x48a>
 8110e6e:	bf00      	nop
 8110e70:	40240000 	.word	0x40240000
 8110e74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8110e76:	f8cd 9008 	str.w	r9, [sp, #8]
 8110e7a:	2b00      	cmp	r3, #0
 8110e7c:	f000 80fa 	beq.w	8111074 <_dtoa_r+0xb3c>
 8110e80:	2d00      	cmp	r5, #0
 8110e82:	dd05      	ble.n	8110e90 <_dtoa_r+0x958>
 8110e84:	4631      	mov	r1, r6
 8110e86:	462a      	mov	r2, r5
 8110e88:	4620      	mov	r0, r4
 8110e8a:	f000 fcd9 	bl	8111840 <__lshift>
 8110e8e:	4606      	mov	r6, r0
 8110e90:	9b07      	ldr	r3, [sp, #28]
 8110e92:	2b00      	cmp	r3, #0
 8110e94:	d04c      	beq.n	8110f30 <_dtoa_r+0x9f8>
 8110e96:	6871      	ldr	r1, [r6, #4]
 8110e98:	4620      	mov	r0, r4
 8110e9a:	f000 fb0f 	bl	81114bc <_Balloc>
 8110e9e:	6932      	ldr	r2, [r6, #16]
 8110ea0:	3202      	adds	r2, #2
 8110ea2:	4605      	mov	r5, r0
 8110ea4:	0092      	lsls	r2, r2, #2
 8110ea6:	f106 010c 	add.w	r1, r6, #12
 8110eaa:	300c      	adds	r0, #12
 8110eac:	f7fe fb90 	bl	810f5d0 <memcpy>
 8110eb0:	2201      	movs	r2, #1
 8110eb2:	4629      	mov	r1, r5
 8110eb4:	4620      	mov	r0, r4
 8110eb6:	f000 fcc3 	bl	8111840 <__lshift>
 8110eba:	9b00      	ldr	r3, [sp, #0]
 8110ebc:	f8cd b014 	str.w	fp, [sp, #20]
 8110ec0:	f003 0301 	and.w	r3, r3, #1
 8110ec4:	46b1      	mov	r9, r6
 8110ec6:	9307      	str	r3, [sp, #28]
 8110ec8:	4606      	mov	r6, r0
 8110eca:	4639      	mov	r1, r7
 8110ecc:	9804      	ldr	r0, [sp, #16]
 8110ece:	f7ff faa5 	bl	811041c <quorem>
 8110ed2:	4649      	mov	r1, r9
 8110ed4:	4605      	mov	r5, r0
 8110ed6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8110eda:	9804      	ldr	r0, [sp, #16]
 8110edc:	f000 fd04 	bl	81118e8 <__mcmp>
 8110ee0:	4632      	mov	r2, r6
 8110ee2:	9000      	str	r0, [sp, #0]
 8110ee4:	4639      	mov	r1, r7
 8110ee6:	4620      	mov	r0, r4
 8110ee8:	f000 fd18 	bl	811191c <__mdiff>
 8110eec:	68c3      	ldr	r3, [r0, #12]
 8110eee:	4602      	mov	r2, r0
 8110ef0:	bb03      	cbnz	r3, 8110f34 <_dtoa_r+0x9fc>
 8110ef2:	4601      	mov	r1, r0
 8110ef4:	9008      	str	r0, [sp, #32]
 8110ef6:	9804      	ldr	r0, [sp, #16]
 8110ef8:	f000 fcf6 	bl	81118e8 <__mcmp>
 8110efc:	9a08      	ldr	r2, [sp, #32]
 8110efe:	4603      	mov	r3, r0
 8110f00:	4611      	mov	r1, r2
 8110f02:	4620      	mov	r0, r4
 8110f04:	9308      	str	r3, [sp, #32]
 8110f06:	f000 fb0d 	bl	8111524 <_Bfree>
 8110f0a:	9b08      	ldr	r3, [sp, #32]
 8110f0c:	b9a3      	cbnz	r3, 8110f38 <_dtoa_r+0xa00>
 8110f0e:	9a06      	ldr	r2, [sp, #24]
 8110f10:	b992      	cbnz	r2, 8110f38 <_dtoa_r+0xa00>
 8110f12:	9a07      	ldr	r2, [sp, #28]
 8110f14:	b982      	cbnz	r2, 8110f38 <_dtoa_r+0xa00>
 8110f16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8110f1a:	d029      	beq.n	8110f70 <_dtoa_r+0xa38>
 8110f1c:	9b00      	ldr	r3, [sp, #0]
 8110f1e:	2b00      	cmp	r3, #0
 8110f20:	dd01      	ble.n	8110f26 <_dtoa_r+0x9ee>
 8110f22:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8110f26:	9b05      	ldr	r3, [sp, #20]
 8110f28:	1c5d      	adds	r5, r3, #1
 8110f2a:	f883 8000 	strb.w	r8, [r3]
 8110f2e:	e782      	b.n	8110e36 <_dtoa_r+0x8fe>
 8110f30:	4630      	mov	r0, r6
 8110f32:	e7c2      	b.n	8110eba <_dtoa_r+0x982>
 8110f34:	2301      	movs	r3, #1
 8110f36:	e7e3      	b.n	8110f00 <_dtoa_r+0x9c8>
 8110f38:	9a00      	ldr	r2, [sp, #0]
 8110f3a:	2a00      	cmp	r2, #0
 8110f3c:	db04      	blt.n	8110f48 <_dtoa_r+0xa10>
 8110f3e:	d125      	bne.n	8110f8c <_dtoa_r+0xa54>
 8110f40:	9a06      	ldr	r2, [sp, #24]
 8110f42:	bb1a      	cbnz	r2, 8110f8c <_dtoa_r+0xa54>
 8110f44:	9a07      	ldr	r2, [sp, #28]
 8110f46:	bb0a      	cbnz	r2, 8110f8c <_dtoa_r+0xa54>
 8110f48:	2b00      	cmp	r3, #0
 8110f4a:	ddec      	ble.n	8110f26 <_dtoa_r+0x9ee>
 8110f4c:	2201      	movs	r2, #1
 8110f4e:	9904      	ldr	r1, [sp, #16]
 8110f50:	4620      	mov	r0, r4
 8110f52:	f000 fc75 	bl	8111840 <__lshift>
 8110f56:	4639      	mov	r1, r7
 8110f58:	9004      	str	r0, [sp, #16]
 8110f5a:	f000 fcc5 	bl	81118e8 <__mcmp>
 8110f5e:	2800      	cmp	r0, #0
 8110f60:	dc03      	bgt.n	8110f6a <_dtoa_r+0xa32>
 8110f62:	d1e0      	bne.n	8110f26 <_dtoa_r+0x9ee>
 8110f64:	f018 0f01 	tst.w	r8, #1
 8110f68:	d0dd      	beq.n	8110f26 <_dtoa_r+0x9ee>
 8110f6a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8110f6e:	d1d8      	bne.n	8110f22 <_dtoa_r+0x9ea>
 8110f70:	9b05      	ldr	r3, [sp, #20]
 8110f72:	9a05      	ldr	r2, [sp, #20]
 8110f74:	1c5d      	adds	r5, r3, #1
 8110f76:	2339      	movs	r3, #57	; 0x39
 8110f78:	7013      	strb	r3, [r2, #0]
 8110f7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8110f7e:	2b39      	cmp	r3, #57	; 0x39
 8110f80:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8110f84:	d04f      	beq.n	8111026 <_dtoa_r+0xaee>
 8110f86:	3301      	adds	r3, #1
 8110f88:	7013      	strb	r3, [r2, #0]
 8110f8a:	e754      	b.n	8110e36 <_dtoa_r+0x8fe>
 8110f8c:	9a05      	ldr	r2, [sp, #20]
 8110f8e:	2b00      	cmp	r3, #0
 8110f90:	f102 0501 	add.w	r5, r2, #1
 8110f94:	dd06      	ble.n	8110fa4 <_dtoa_r+0xa6c>
 8110f96:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8110f9a:	d0e9      	beq.n	8110f70 <_dtoa_r+0xa38>
 8110f9c:	f108 0801 	add.w	r8, r8, #1
 8110fa0:	9b05      	ldr	r3, [sp, #20]
 8110fa2:	e7c2      	b.n	8110f2a <_dtoa_r+0x9f2>
 8110fa4:	9a02      	ldr	r2, [sp, #8]
 8110fa6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8110faa:	eba5 030b 	sub.w	r3, r5, fp
 8110fae:	4293      	cmp	r3, r2
 8110fb0:	d021      	beq.n	8110ff6 <_dtoa_r+0xabe>
 8110fb2:	2300      	movs	r3, #0
 8110fb4:	220a      	movs	r2, #10
 8110fb6:	9904      	ldr	r1, [sp, #16]
 8110fb8:	4620      	mov	r0, r4
 8110fba:	f000 faca 	bl	8111552 <__multadd>
 8110fbe:	45b1      	cmp	r9, r6
 8110fc0:	9004      	str	r0, [sp, #16]
 8110fc2:	f04f 0300 	mov.w	r3, #0
 8110fc6:	f04f 020a 	mov.w	r2, #10
 8110fca:	4649      	mov	r1, r9
 8110fcc:	4620      	mov	r0, r4
 8110fce:	d105      	bne.n	8110fdc <_dtoa_r+0xaa4>
 8110fd0:	f000 fabf 	bl	8111552 <__multadd>
 8110fd4:	4681      	mov	r9, r0
 8110fd6:	4606      	mov	r6, r0
 8110fd8:	9505      	str	r5, [sp, #20]
 8110fda:	e776      	b.n	8110eca <_dtoa_r+0x992>
 8110fdc:	f000 fab9 	bl	8111552 <__multadd>
 8110fe0:	4631      	mov	r1, r6
 8110fe2:	4681      	mov	r9, r0
 8110fe4:	2300      	movs	r3, #0
 8110fe6:	220a      	movs	r2, #10
 8110fe8:	4620      	mov	r0, r4
 8110fea:	f000 fab2 	bl	8111552 <__multadd>
 8110fee:	4606      	mov	r6, r0
 8110ff0:	e7f2      	b.n	8110fd8 <_dtoa_r+0xaa0>
 8110ff2:	f04f 0900 	mov.w	r9, #0
 8110ff6:	2201      	movs	r2, #1
 8110ff8:	9904      	ldr	r1, [sp, #16]
 8110ffa:	4620      	mov	r0, r4
 8110ffc:	f000 fc20 	bl	8111840 <__lshift>
 8111000:	4639      	mov	r1, r7
 8111002:	9004      	str	r0, [sp, #16]
 8111004:	f000 fc70 	bl	81118e8 <__mcmp>
 8111008:	2800      	cmp	r0, #0
 811100a:	dcb6      	bgt.n	8110f7a <_dtoa_r+0xa42>
 811100c:	d102      	bne.n	8111014 <_dtoa_r+0xadc>
 811100e:	f018 0f01 	tst.w	r8, #1
 8111012:	d1b2      	bne.n	8110f7a <_dtoa_r+0xa42>
 8111014:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8111018:	2b30      	cmp	r3, #48	; 0x30
 811101a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 811101e:	f47f af0a 	bne.w	8110e36 <_dtoa_r+0x8fe>
 8111022:	4615      	mov	r5, r2
 8111024:	e7f6      	b.n	8111014 <_dtoa_r+0xadc>
 8111026:	4593      	cmp	fp, r2
 8111028:	d105      	bne.n	8111036 <_dtoa_r+0xafe>
 811102a:	2331      	movs	r3, #49	; 0x31
 811102c:	f10a 0a01 	add.w	sl, sl, #1
 8111030:	f88b 3000 	strb.w	r3, [fp]
 8111034:	e6ff      	b.n	8110e36 <_dtoa_r+0x8fe>
 8111036:	4615      	mov	r5, r2
 8111038:	e79f      	b.n	8110f7a <_dtoa_r+0xa42>
 811103a:	f8df b064 	ldr.w	fp, [pc, #100]	; 81110a0 <_dtoa_r+0xb68>
 811103e:	e007      	b.n	8111050 <_dtoa_r+0xb18>
 8111040:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8111042:	f8df b060 	ldr.w	fp, [pc, #96]	; 81110a4 <_dtoa_r+0xb6c>
 8111046:	b11b      	cbz	r3, 8111050 <_dtoa_r+0xb18>
 8111048:	f10b 0308 	add.w	r3, fp, #8
 811104c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 811104e:	6013      	str	r3, [r2, #0]
 8111050:	4658      	mov	r0, fp
 8111052:	b017      	add	sp, #92	; 0x5c
 8111054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8111058:	9b06      	ldr	r3, [sp, #24]
 811105a:	2b01      	cmp	r3, #1
 811105c:	f77f ae35 	ble.w	8110cca <_dtoa_r+0x792>
 8111060:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8111062:	9307      	str	r3, [sp, #28]
 8111064:	e649      	b.n	8110cfa <_dtoa_r+0x7c2>
 8111066:	9b02      	ldr	r3, [sp, #8]
 8111068:	2b00      	cmp	r3, #0
 811106a:	dc03      	bgt.n	8111074 <_dtoa_r+0xb3c>
 811106c:	9b06      	ldr	r3, [sp, #24]
 811106e:	2b02      	cmp	r3, #2
 8111070:	f73f aecc 	bgt.w	8110e0c <_dtoa_r+0x8d4>
 8111074:	465d      	mov	r5, fp
 8111076:	4639      	mov	r1, r7
 8111078:	9804      	ldr	r0, [sp, #16]
 811107a:	f7ff f9cf 	bl	811041c <quorem>
 811107e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8111082:	f805 8b01 	strb.w	r8, [r5], #1
 8111086:	9a02      	ldr	r2, [sp, #8]
 8111088:	eba5 030b 	sub.w	r3, r5, fp
 811108c:	429a      	cmp	r2, r3
 811108e:	ddb0      	ble.n	8110ff2 <_dtoa_r+0xaba>
 8111090:	2300      	movs	r3, #0
 8111092:	220a      	movs	r2, #10
 8111094:	9904      	ldr	r1, [sp, #16]
 8111096:	4620      	mov	r0, r4
 8111098:	f000 fa5b 	bl	8111552 <__multadd>
 811109c:	9004      	str	r0, [sp, #16]
 811109e:	e7ea      	b.n	8111076 <_dtoa_r+0xb3e>
 81110a0:	08112f24 	.word	0x08112f24
 81110a4:	08112f48 	.word	0x08112f48

081110a8 <__sflush_r>:
 81110a8:	898a      	ldrh	r2, [r1, #12]
 81110aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81110ae:	4605      	mov	r5, r0
 81110b0:	0710      	lsls	r0, r2, #28
 81110b2:	460c      	mov	r4, r1
 81110b4:	d458      	bmi.n	8111168 <__sflush_r+0xc0>
 81110b6:	684b      	ldr	r3, [r1, #4]
 81110b8:	2b00      	cmp	r3, #0
 81110ba:	dc05      	bgt.n	81110c8 <__sflush_r+0x20>
 81110bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 81110be:	2b00      	cmp	r3, #0
 81110c0:	dc02      	bgt.n	81110c8 <__sflush_r+0x20>
 81110c2:	2000      	movs	r0, #0
 81110c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81110c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 81110ca:	2e00      	cmp	r6, #0
 81110cc:	d0f9      	beq.n	81110c2 <__sflush_r+0x1a>
 81110ce:	2300      	movs	r3, #0
 81110d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 81110d4:	682f      	ldr	r7, [r5, #0]
 81110d6:	6a21      	ldr	r1, [r4, #32]
 81110d8:	602b      	str	r3, [r5, #0]
 81110da:	d032      	beq.n	8111142 <__sflush_r+0x9a>
 81110dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 81110de:	89a3      	ldrh	r3, [r4, #12]
 81110e0:	075a      	lsls	r2, r3, #29
 81110e2:	d505      	bpl.n	81110f0 <__sflush_r+0x48>
 81110e4:	6863      	ldr	r3, [r4, #4]
 81110e6:	1ac0      	subs	r0, r0, r3
 81110e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 81110ea:	b10b      	cbz	r3, 81110f0 <__sflush_r+0x48>
 81110ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 81110ee:	1ac0      	subs	r0, r0, r3
 81110f0:	2300      	movs	r3, #0
 81110f2:	4602      	mov	r2, r0
 81110f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 81110f6:	6a21      	ldr	r1, [r4, #32]
 81110f8:	4628      	mov	r0, r5
 81110fa:	47b0      	blx	r6
 81110fc:	1c43      	adds	r3, r0, #1
 81110fe:	89a3      	ldrh	r3, [r4, #12]
 8111100:	d106      	bne.n	8111110 <__sflush_r+0x68>
 8111102:	6829      	ldr	r1, [r5, #0]
 8111104:	291d      	cmp	r1, #29
 8111106:	d848      	bhi.n	811119a <__sflush_r+0xf2>
 8111108:	4a29      	ldr	r2, [pc, #164]	; (81111b0 <__sflush_r+0x108>)
 811110a:	40ca      	lsrs	r2, r1
 811110c:	07d6      	lsls	r6, r2, #31
 811110e:	d544      	bpl.n	811119a <__sflush_r+0xf2>
 8111110:	2200      	movs	r2, #0
 8111112:	6062      	str	r2, [r4, #4]
 8111114:	04d9      	lsls	r1, r3, #19
 8111116:	6922      	ldr	r2, [r4, #16]
 8111118:	6022      	str	r2, [r4, #0]
 811111a:	d504      	bpl.n	8111126 <__sflush_r+0x7e>
 811111c:	1c42      	adds	r2, r0, #1
 811111e:	d101      	bne.n	8111124 <__sflush_r+0x7c>
 8111120:	682b      	ldr	r3, [r5, #0]
 8111122:	b903      	cbnz	r3, 8111126 <__sflush_r+0x7e>
 8111124:	6560      	str	r0, [r4, #84]	; 0x54
 8111126:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8111128:	602f      	str	r7, [r5, #0]
 811112a:	2900      	cmp	r1, #0
 811112c:	d0c9      	beq.n	81110c2 <__sflush_r+0x1a>
 811112e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8111132:	4299      	cmp	r1, r3
 8111134:	d002      	beq.n	811113c <__sflush_r+0x94>
 8111136:	4628      	mov	r0, r5
 8111138:	f000 fcaa 	bl	8111a90 <_free_r>
 811113c:	2000      	movs	r0, #0
 811113e:	6360      	str	r0, [r4, #52]	; 0x34
 8111140:	e7c0      	b.n	81110c4 <__sflush_r+0x1c>
 8111142:	2301      	movs	r3, #1
 8111144:	4628      	mov	r0, r5
 8111146:	47b0      	blx	r6
 8111148:	1c41      	adds	r1, r0, #1
 811114a:	d1c8      	bne.n	81110de <__sflush_r+0x36>
 811114c:	682b      	ldr	r3, [r5, #0]
 811114e:	2b00      	cmp	r3, #0
 8111150:	d0c5      	beq.n	81110de <__sflush_r+0x36>
 8111152:	2b1d      	cmp	r3, #29
 8111154:	d001      	beq.n	811115a <__sflush_r+0xb2>
 8111156:	2b16      	cmp	r3, #22
 8111158:	d101      	bne.n	811115e <__sflush_r+0xb6>
 811115a:	602f      	str	r7, [r5, #0]
 811115c:	e7b1      	b.n	81110c2 <__sflush_r+0x1a>
 811115e:	89a3      	ldrh	r3, [r4, #12]
 8111160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8111164:	81a3      	strh	r3, [r4, #12]
 8111166:	e7ad      	b.n	81110c4 <__sflush_r+0x1c>
 8111168:	690f      	ldr	r7, [r1, #16]
 811116a:	2f00      	cmp	r7, #0
 811116c:	d0a9      	beq.n	81110c2 <__sflush_r+0x1a>
 811116e:	0793      	lsls	r3, r2, #30
 8111170:	680e      	ldr	r6, [r1, #0]
 8111172:	bf08      	it	eq
 8111174:	694b      	ldreq	r3, [r1, #20]
 8111176:	600f      	str	r7, [r1, #0]
 8111178:	bf18      	it	ne
 811117a:	2300      	movne	r3, #0
 811117c:	eba6 0807 	sub.w	r8, r6, r7
 8111180:	608b      	str	r3, [r1, #8]
 8111182:	f1b8 0f00 	cmp.w	r8, #0
 8111186:	dd9c      	ble.n	81110c2 <__sflush_r+0x1a>
 8111188:	4643      	mov	r3, r8
 811118a:	463a      	mov	r2, r7
 811118c:	6a21      	ldr	r1, [r4, #32]
 811118e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8111190:	4628      	mov	r0, r5
 8111192:	47b0      	blx	r6
 8111194:	2800      	cmp	r0, #0
 8111196:	dc06      	bgt.n	81111a6 <__sflush_r+0xfe>
 8111198:	89a3      	ldrh	r3, [r4, #12]
 811119a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 811119e:	81a3      	strh	r3, [r4, #12]
 81111a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 81111a4:	e78e      	b.n	81110c4 <__sflush_r+0x1c>
 81111a6:	4407      	add	r7, r0
 81111a8:	eba8 0800 	sub.w	r8, r8, r0
 81111ac:	e7e9      	b.n	8111182 <__sflush_r+0xda>
 81111ae:	bf00      	nop
 81111b0:	20400001 	.word	0x20400001

081111b4 <_fflush_r>:
 81111b4:	b538      	push	{r3, r4, r5, lr}
 81111b6:	690b      	ldr	r3, [r1, #16]
 81111b8:	4605      	mov	r5, r0
 81111ba:	460c      	mov	r4, r1
 81111bc:	b1db      	cbz	r3, 81111f6 <_fflush_r+0x42>
 81111be:	b118      	cbz	r0, 81111c8 <_fflush_r+0x14>
 81111c0:	6983      	ldr	r3, [r0, #24]
 81111c2:	b90b      	cbnz	r3, 81111c8 <_fflush_r+0x14>
 81111c4:	f000 f860 	bl	8111288 <__sinit>
 81111c8:	4b0c      	ldr	r3, [pc, #48]	; (81111fc <_fflush_r+0x48>)
 81111ca:	429c      	cmp	r4, r3
 81111cc:	d109      	bne.n	81111e2 <_fflush_r+0x2e>
 81111ce:	686c      	ldr	r4, [r5, #4]
 81111d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81111d4:	b17b      	cbz	r3, 81111f6 <_fflush_r+0x42>
 81111d6:	4621      	mov	r1, r4
 81111d8:	4628      	mov	r0, r5
 81111da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 81111de:	f7ff bf63 	b.w	81110a8 <__sflush_r>
 81111e2:	4b07      	ldr	r3, [pc, #28]	; (8111200 <_fflush_r+0x4c>)
 81111e4:	429c      	cmp	r4, r3
 81111e6:	d101      	bne.n	81111ec <_fflush_r+0x38>
 81111e8:	68ac      	ldr	r4, [r5, #8]
 81111ea:	e7f1      	b.n	81111d0 <_fflush_r+0x1c>
 81111ec:	4b05      	ldr	r3, [pc, #20]	; (8111204 <_fflush_r+0x50>)
 81111ee:	429c      	cmp	r4, r3
 81111f0:	bf08      	it	eq
 81111f2:	68ec      	ldreq	r4, [r5, #12]
 81111f4:	e7ec      	b.n	81111d0 <_fflush_r+0x1c>
 81111f6:	2000      	movs	r0, #0
 81111f8:	bd38      	pop	{r3, r4, r5, pc}
 81111fa:	bf00      	nop
 81111fc:	08112f78 	.word	0x08112f78
 8111200:	08112f98 	.word	0x08112f98
 8111204:	08112f58 	.word	0x08112f58

08111208 <std>:
 8111208:	2300      	movs	r3, #0
 811120a:	b510      	push	{r4, lr}
 811120c:	4604      	mov	r4, r0
 811120e:	e9c0 3300 	strd	r3, r3, [r0]
 8111212:	6083      	str	r3, [r0, #8]
 8111214:	8181      	strh	r1, [r0, #12]
 8111216:	6643      	str	r3, [r0, #100]	; 0x64
 8111218:	81c2      	strh	r2, [r0, #14]
 811121a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 811121e:	6183      	str	r3, [r0, #24]
 8111220:	4619      	mov	r1, r3
 8111222:	2208      	movs	r2, #8
 8111224:	305c      	adds	r0, #92	; 0x5c
 8111226:	f7fe f9de 	bl	810f5e6 <memset>
 811122a:	4b05      	ldr	r3, [pc, #20]	; (8111240 <std+0x38>)
 811122c:	6263      	str	r3, [r4, #36]	; 0x24
 811122e:	4b05      	ldr	r3, [pc, #20]	; (8111244 <std+0x3c>)
 8111230:	62a3      	str	r3, [r4, #40]	; 0x28
 8111232:	4b05      	ldr	r3, [pc, #20]	; (8111248 <std+0x40>)
 8111234:	62e3      	str	r3, [r4, #44]	; 0x2c
 8111236:	4b05      	ldr	r3, [pc, #20]	; (811124c <std+0x44>)
 8111238:	6224      	str	r4, [r4, #32]
 811123a:	6323      	str	r3, [r4, #48]	; 0x30
 811123c:	bd10      	pop	{r4, pc}
 811123e:	bf00      	nop
 8111240:	08112125 	.word	0x08112125
 8111244:	08112147 	.word	0x08112147
 8111248:	0811217f 	.word	0x0811217f
 811124c:	081121a3 	.word	0x081121a3

08111250 <_cleanup_r>:
 8111250:	4901      	ldr	r1, [pc, #4]	; (8111258 <_cleanup_r+0x8>)
 8111252:	f000 b885 	b.w	8111360 <_fwalk_reent>
 8111256:	bf00      	nop
 8111258:	081111b5 	.word	0x081111b5

0811125c <__sfmoreglue>:
 811125c:	b570      	push	{r4, r5, r6, lr}
 811125e:	1e4a      	subs	r2, r1, #1
 8111260:	2568      	movs	r5, #104	; 0x68
 8111262:	4355      	muls	r5, r2
 8111264:	460e      	mov	r6, r1
 8111266:	f105 0174 	add.w	r1, r5, #116	; 0x74
 811126a:	f000 fc5f 	bl	8111b2c <_malloc_r>
 811126e:	4604      	mov	r4, r0
 8111270:	b140      	cbz	r0, 8111284 <__sfmoreglue+0x28>
 8111272:	2100      	movs	r1, #0
 8111274:	e9c0 1600 	strd	r1, r6, [r0]
 8111278:	300c      	adds	r0, #12
 811127a:	60a0      	str	r0, [r4, #8]
 811127c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8111280:	f7fe f9b1 	bl	810f5e6 <memset>
 8111284:	4620      	mov	r0, r4
 8111286:	bd70      	pop	{r4, r5, r6, pc}

08111288 <__sinit>:
 8111288:	6983      	ldr	r3, [r0, #24]
 811128a:	b510      	push	{r4, lr}
 811128c:	4604      	mov	r4, r0
 811128e:	bb33      	cbnz	r3, 81112de <__sinit+0x56>
 8111290:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8111294:	6503      	str	r3, [r0, #80]	; 0x50
 8111296:	4b12      	ldr	r3, [pc, #72]	; (81112e0 <__sinit+0x58>)
 8111298:	4a12      	ldr	r2, [pc, #72]	; (81112e4 <__sinit+0x5c>)
 811129a:	681b      	ldr	r3, [r3, #0]
 811129c:	6282      	str	r2, [r0, #40]	; 0x28
 811129e:	4298      	cmp	r0, r3
 81112a0:	bf04      	itt	eq
 81112a2:	2301      	moveq	r3, #1
 81112a4:	6183      	streq	r3, [r0, #24]
 81112a6:	f000 f81f 	bl	81112e8 <__sfp>
 81112aa:	6060      	str	r0, [r4, #4]
 81112ac:	4620      	mov	r0, r4
 81112ae:	f000 f81b 	bl	81112e8 <__sfp>
 81112b2:	60a0      	str	r0, [r4, #8]
 81112b4:	4620      	mov	r0, r4
 81112b6:	f000 f817 	bl	81112e8 <__sfp>
 81112ba:	2200      	movs	r2, #0
 81112bc:	60e0      	str	r0, [r4, #12]
 81112be:	2104      	movs	r1, #4
 81112c0:	6860      	ldr	r0, [r4, #4]
 81112c2:	f7ff ffa1 	bl	8111208 <std>
 81112c6:	2201      	movs	r2, #1
 81112c8:	2109      	movs	r1, #9
 81112ca:	68a0      	ldr	r0, [r4, #8]
 81112cc:	f7ff ff9c 	bl	8111208 <std>
 81112d0:	2202      	movs	r2, #2
 81112d2:	2112      	movs	r1, #18
 81112d4:	68e0      	ldr	r0, [r4, #12]
 81112d6:	f7ff ff97 	bl	8111208 <std>
 81112da:	2301      	movs	r3, #1
 81112dc:	61a3      	str	r3, [r4, #24]
 81112de:	bd10      	pop	{r4, pc}
 81112e0:	08112f10 	.word	0x08112f10
 81112e4:	08111251 	.word	0x08111251

081112e8 <__sfp>:
 81112e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81112ea:	4b1b      	ldr	r3, [pc, #108]	; (8111358 <__sfp+0x70>)
 81112ec:	681e      	ldr	r6, [r3, #0]
 81112ee:	69b3      	ldr	r3, [r6, #24]
 81112f0:	4607      	mov	r7, r0
 81112f2:	b913      	cbnz	r3, 81112fa <__sfp+0x12>
 81112f4:	4630      	mov	r0, r6
 81112f6:	f7ff ffc7 	bl	8111288 <__sinit>
 81112fa:	3648      	adds	r6, #72	; 0x48
 81112fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8111300:	3b01      	subs	r3, #1
 8111302:	d503      	bpl.n	811130c <__sfp+0x24>
 8111304:	6833      	ldr	r3, [r6, #0]
 8111306:	b133      	cbz	r3, 8111316 <__sfp+0x2e>
 8111308:	6836      	ldr	r6, [r6, #0]
 811130a:	e7f7      	b.n	81112fc <__sfp+0x14>
 811130c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8111310:	b16d      	cbz	r5, 811132e <__sfp+0x46>
 8111312:	3468      	adds	r4, #104	; 0x68
 8111314:	e7f4      	b.n	8111300 <__sfp+0x18>
 8111316:	2104      	movs	r1, #4
 8111318:	4638      	mov	r0, r7
 811131a:	f7ff ff9f 	bl	811125c <__sfmoreglue>
 811131e:	6030      	str	r0, [r6, #0]
 8111320:	2800      	cmp	r0, #0
 8111322:	d1f1      	bne.n	8111308 <__sfp+0x20>
 8111324:	230c      	movs	r3, #12
 8111326:	603b      	str	r3, [r7, #0]
 8111328:	4604      	mov	r4, r0
 811132a:	4620      	mov	r0, r4
 811132c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 811132e:	4b0b      	ldr	r3, [pc, #44]	; (811135c <__sfp+0x74>)
 8111330:	6665      	str	r5, [r4, #100]	; 0x64
 8111332:	e9c4 5500 	strd	r5, r5, [r4]
 8111336:	60a5      	str	r5, [r4, #8]
 8111338:	e9c4 3503 	strd	r3, r5, [r4, #12]
 811133c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8111340:	2208      	movs	r2, #8
 8111342:	4629      	mov	r1, r5
 8111344:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8111348:	f7fe f94d 	bl	810f5e6 <memset>
 811134c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8111350:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8111354:	e7e9      	b.n	811132a <__sfp+0x42>
 8111356:	bf00      	nop
 8111358:	08112f10 	.word	0x08112f10
 811135c:	ffff0001 	.word	0xffff0001

08111360 <_fwalk_reent>:
 8111360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8111364:	4680      	mov	r8, r0
 8111366:	4689      	mov	r9, r1
 8111368:	f100 0448 	add.w	r4, r0, #72	; 0x48
 811136c:	2600      	movs	r6, #0
 811136e:	b914      	cbnz	r4, 8111376 <_fwalk_reent+0x16>
 8111370:	4630      	mov	r0, r6
 8111372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8111376:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 811137a:	3f01      	subs	r7, #1
 811137c:	d501      	bpl.n	8111382 <_fwalk_reent+0x22>
 811137e:	6824      	ldr	r4, [r4, #0]
 8111380:	e7f5      	b.n	811136e <_fwalk_reent+0xe>
 8111382:	89ab      	ldrh	r3, [r5, #12]
 8111384:	2b01      	cmp	r3, #1
 8111386:	d907      	bls.n	8111398 <_fwalk_reent+0x38>
 8111388:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 811138c:	3301      	adds	r3, #1
 811138e:	d003      	beq.n	8111398 <_fwalk_reent+0x38>
 8111390:	4629      	mov	r1, r5
 8111392:	4640      	mov	r0, r8
 8111394:	47c8      	blx	r9
 8111396:	4306      	orrs	r6, r0
 8111398:	3568      	adds	r5, #104	; 0x68
 811139a:	e7ee      	b.n	811137a <_fwalk_reent+0x1a>

0811139c <__locale_ctype_ptr_l>:
 811139c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 81113a0:	4770      	bx	lr
	...

081113a4 <_localeconv_r>:
 81113a4:	4b04      	ldr	r3, [pc, #16]	; (81113b8 <_localeconv_r+0x14>)
 81113a6:	681b      	ldr	r3, [r3, #0]
 81113a8:	6a18      	ldr	r0, [r3, #32]
 81113aa:	4b04      	ldr	r3, [pc, #16]	; (81113bc <_localeconv_r+0x18>)
 81113ac:	2800      	cmp	r0, #0
 81113ae:	bf08      	it	eq
 81113b0:	4618      	moveq	r0, r3
 81113b2:	30f0      	adds	r0, #240	; 0xf0
 81113b4:	4770      	bx	lr
 81113b6:	bf00      	nop
 81113b8:	1000003c 	.word	0x1000003c
 81113bc:	100000a0 	.word	0x100000a0

081113c0 <__swhatbuf_r>:
 81113c0:	b570      	push	{r4, r5, r6, lr}
 81113c2:	460e      	mov	r6, r1
 81113c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81113c8:	2900      	cmp	r1, #0
 81113ca:	b096      	sub	sp, #88	; 0x58
 81113cc:	4614      	mov	r4, r2
 81113ce:	461d      	mov	r5, r3
 81113d0:	da07      	bge.n	81113e2 <__swhatbuf_r+0x22>
 81113d2:	2300      	movs	r3, #0
 81113d4:	602b      	str	r3, [r5, #0]
 81113d6:	89b3      	ldrh	r3, [r6, #12]
 81113d8:	061a      	lsls	r2, r3, #24
 81113da:	d410      	bmi.n	81113fe <__swhatbuf_r+0x3e>
 81113dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 81113e0:	e00e      	b.n	8111400 <__swhatbuf_r+0x40>
 81113e2:	466a      	mov	r2, sp
 81113e4:	f000 ff10 	bl	8112208 <_fstat_r>
 81113e8:	2800      	cmp	r0, #0
 81113ea:	dbf2      	blt.n	81113d2 <__swhatbuf_r+0x12>
 81113ec:	9a01      	ldr	r2, [sp, #4]
 81113ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 81113f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 81113f6:	425a      	negs	r2, r3
 81113f8:	415a      	adcs	r2, r3
 81113fa:	602a      	str	r2, [r5, #0]
 81113fc:	e7ee      	b.n	81113dc <__swhatbuf_r+0x1c>
 81113fe:	2340      	movs	r3, #64	; 0x40
 8111400:	2000      	movs	r0, #0
 8111402:	6023      	str	r3, [r4, #0]
 8111404:	b016      	add	sp, #88	; 0x58
 8111406:	bd70      	pop	{r4, r5, r6, pc}

08111408 <__smakebuf_r>:
 8111408:	898b      	ldrh	r3, [r1, #12]
 811140a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 811140c:	079d      	lsls	r5, r3, #30
 811140e:	4606      	mov	r6, r0
 8111410:	460c      	mov	r4, r1
 8111412:	d507      	bpl.n	8111424 <__smakebuf_r+0x1c>
 8111414:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8111418:	6023      	str	r3, [r4, #0]
 811141a:	6123      	str	r3, [r4, #16]
 811141c:	2301      	movs	r3, #1
 811141e:	6163      	str	r3, [r4, #20]
 8111420:	b002      	add	sp, #8
 8111422:	bd70      	pop	{r4, r5, r6, pc}
 8111424:	ab01      	add	r3, sp, #4
 8111426:	466a      	mov	r2, sp
 8111428:	f7ff ffca 	bl	81113c0 <__swhatbuf_r>
 811142c:	9900      	ldr	r1, [sp, #0]
 811142e:	4605      	mov	r5, r0
 8111430:	4630      	mov	r0, r6
 8111432:	f000 fb7b 	bl	8111b2c <_malloc_r>
 8111436:	b948      	cbnz	r0, 811144c <__smakebuf_r+0x44>
 8111438:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811143c:	059a      	lsls	r2, r3, #22
 811143e:	d4ef      	bmi.n	8111420 <__smakebuf_r+0x18>
 8111440:	f023 0303 	bic.w	r3, r3, #3
 8111444:	f043 0302 	orr.w	r3, r3, #2
 8111448:	81a3      	strh	r3, [r4, #12]
 811144a:	e7e3      	b.n	8111414 <__smakebuf_r+0xc>
 811144c:	4b0d      	ldr	r3, [pc, #52]	; (8111484 <__smakebuf_r+0x7c>)
 811144e:	62b3      	str	r3, [r6, #40]	; 0x28
 8111450:	89a3      	ldrh	r3, [r4, #12]
 8111452:	6020      	str	r0, [r4, #0]
 8111454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8111458:	81a3      	strh	r3, [r4, #12]
 811145a:	9b00      	ldr	r3, [sp, #0]
 811145c:	6163      	str	r3, [r4, #20]
 811145e:	9b01      	ldr	r3, [sp, #4]
 8111460:	6120      	str	r0, [r4, #16]
 8111462:	b15b      	cbz	r3, 811147c <__smakebuf_r+0x74>
 8111464:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8111468:	4630      	mov	r0, r6
 811146a:	f000 fedf 	bl	811222c <_isatty_r>
 811146e:	b128      	cbz	r0, 811147c <__smakebuf_r+0x74>
 8111470:	89a3      	ldrh	r3, [r4, #12]
 8111472:	f023 0303 	bic.w	r3, r3, #3
 8111476:	f043 0301 	orr.w	r3, r3, #1
 811147a:	81a3      	strh	r3, [r4, #12]
 811147c:	89a3      	ldrh	r3, [r4, #12]
 811147e:	431d      	orrs	r5, r3
 8111480:	81a5      	strh	r5, [r4, #12]
 8111482:	e7cd      	b.n	8111420 <__smakebuf_r+0x18>
 8111484:	08111251 	.word	0x08111251

08111488 <malloc>:
 8111488:	4b02      	ldr	r3, [pc, #8]	; (8111494 <malloc+0xc>)
 811148a:	4601      	mov	r1, r0
 811148c:	6818      	ldr	r0, [r3, #0]
 811148e:	f000 bb4d 	b.w	8111b2c <_malloc_r>
 8111492:	bf00      	nop
 8111494:	1000003c 	.word	0x1000003c

08111498 <__ascii_mbtowc>:
 8111498:	b082      	sub	sp, #8
 811149a:	b901      	cbnz	r1, 811149e <__ascii_mbtowc+0x6>
 811149c:	a901      	add	r1, sp, #4
 811149e:	b142      	cbz	r2, 81114b2 <__ascii_mbtowc+0x1a>
 81114a0:	b14b      	cbz	r3, 81114b6 <__ascii_mbtowc+0x1e>
 81114a2:	7813      	ldrb	r3, [r2, #0]
 81114a4:	600b      	str	r3, [r1, #0]
 81114a6:	7812      	ldrb	r2, [r2, #0]
 81114a8:	1c10      	adds	r0, r2, #0
 81114aa:	bf18      	it	ne
 81114ac:	2001      	movne	r0, #1
 81114ae:	b002      	add	sp, #8
 81114b0:	4770      	bx	lr
 81114b2:	4610      	mov	r0, r2
 81114b4:	e7fb      	b.n	81114ae <__ascii_mbtowc+0x16>
 81114b6:	f06f 0001 	mvn.w	r0, #1
 81114ba:	e7f8      	b.n	81114ae <__ascii_mbtowc+0x16>

081114bc <_Balloc>:
 81114bc:	b570      	push	{r4, r5, r6, lr}
 81114be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 81114c0:	4604      	mov	r4, r0
 81114c2:	460e      	mov	r6, r1
 81114c4:	b93d      	cbnz	r5, 81114d6 <_Balloc+0x1a>
 81114c6:	2010      	movs	r0, #16
 81114c8:	f7ff ffde 	bl	8111488 <malloc>
 81114cc:	6260      	str	r0, [r4, #36]	; 0x24
 81114ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 81114d2:	6005      	str	r5, [r0, #0]
 81114d4:	60c5      	str	r5, [r0, #12]
 81114d6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 81114d8:	68eb      	ldr	r3, [r5, #12]
 81114da:	b183      	cbz	r3, 81114fe <_Balloc+0x42>
 81114dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81114de:	68db      	ldr	r3, [r3, #12]
 81114e0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 81114e4:	b9b8      	cbnz	r0, 8111516 <_Balloc+0x5a>
 81114e6:	2101      	movs	r1, #1
 81114e8:	fa01 f506 	lsl.w	r5, r1, r6
 81114ec:	1d6a      	adds	r2, r5, #5
 81114ee:	0092      	lsls	r2, r2, #2
 81114f0:	4620      	mov	r0, r4
 81114f2:	f000 fabf 	bl	8111a74 <_calloc_r>
 81114f6:	b160      	cbz	r0, 8111512 <_Balloc+0x56>
 81114f8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 81114fc:	e00e      	b.n	811151c <_Balloc+0x60>
 81114fe:	2221      	movs	r2, #33	; 0x21
 8111500:	2104      	movs	r1, #4
 8111502:	4620      	mov	r0, r4
 8111504:	f000 fab6 	bl	8111a74 <_calloc_r>
 8111508:	6a63      	ldr	r3, [r4, #36]	; 0x24
 811150a:	60e8      	str	r0, [r5, #12]
 811150c:	68db      	ldr	r3, [r3, #12]
 811150e:	2b00      	cmp	r3, #0
 8111510:	d1e4      	bne.n	81114dc <_Balloc+0x20>
 8111512:	2000      	movs	r0, #0
 8111514:	bd70      	pop	{r4, r5, r6, pc}
 8111516:	6802      	ldr	r2, [r0, #0]
 8111518:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 811151c:	2300      	movs	r3, #0
 811151e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8111522:	e7f7      	b.n	8111514 <_Balloc+0x58>

08111524 <_Bfree>:
 8111524:	b570      	push	{r4, r5, r6, lr}
 8111526:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8111528:	4606      	mov	r6, r0
 811152a:	460d      	mov	r5, r1
 811152c:	b93c      	cbnz	r4, 811153e <_Bfree+0x1a>
 811152e:	2010      	movs	r0, #16
 8111530:	f7ff ffaa 	bl	8111488 <malloc>
 8111534:	6270      	str	r0, [r6, #36]	; 0x24
 8111536:	e9c0 4401 	strd	r4, r4, [r0, #4]
 811153a:	6004      	str	r4, [r0, #0]
 811153c:	60c4      	str	r4, [r0, #12]
 811153e:	b13d      	cbz	r5, 8111550 <_Bfree+0x2c>
 8111540:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8111542:	686a      	ldr	r2, [r5, #4]
 8111544:	68db      	ldr	r3, [r3, #12]
 8111546:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 811154a:	6029      	str	r1, [r5, #0]
 811154c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8111550:	bd70      	pop	{r4, r5, r6, pc}

08111552 <__multadd>:
 8111552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8111556:	690d      	ldr	r5, [r1, #16]
 8111558:	461f      	mov	r7, r3
 811155a:	4606      	mov	r6, r0
 811155c:	460c      	mov	r4, r1
 811155e:	f101 0c14 	add.w	ip, r1, #20
 8111562:	2300      	movs	r3, #0
 8111564:	f8dc 0000 	ldr.w	r0, [ip]
 8111568:	b281      	uxth	r1, r0
 811156a:	fb02 7101 	mla	r1, r2, r1, r7
 811156e:	0c0f      	lsrs	r7, r1, #16
 8111570:	0c00      	lsrs	r0, r0, #16
 8111572:	fb02 7000 	mla	r0, r2, r0, r7
 8111576:	b289      	uxth	r1, r1
 8111578:	3301      	adds	r3, #1
 811157a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 811157e:	429d      	cmp	r5, r3
 8111580:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8111584:	f84c 1b04 	str.w	r1, [ip], #4
 8111588:	dcec      	bgt.n	8111564 <__multadd+0x12>
 811158a:	b1d7      	cbz	r7, 81115c2 <__multadd+0x70>
 811158c:	68a3      	ldr	r3, [r4, #8]
 811158e:	42ab      	cmp	r3, r5
 8111590:	dc12      	bgt.n	81115b8 <__multadd+0x66>
 8111592:	6861      	ldr	r1, [r4, #4]
 8111594:	4630      	mov	r0, r6
 8111596:	3101      	adds	r1, #1
 8111598:	f7ff ff90 	bl	81114bc <_Balloc>
 811159c:	6922      	ldr	r2, [r4, #16]
 811159e:	3202      	adds	r2, #2
 81115a0:	f104 010c 	add.w	r1, r4, #12
 81115a4:	4680      	mov	r8, r0
 81115a6:	0092      	lsls	r2, r2, #2
 81115a8:	300c      	adds	r0, #12
 81115aa:	f7fe f811 	bl	810f5d0 <memcpy>
 81115ae:	4621      	mov	r1, r4
 81115b0:	4630      	mov	r0, r6
 81115b2:	f7ff ffb7 	bl	8111524 <_Bfree>
 81115b6:	4644      	mov	r4, r8
 81115b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 81115bc:	3501      	adds	r5, #1
 81115be:	615f      	str	r7, [r3, #20]
 81115c0:	6125      	str	r5, [r4, #16]
 81115c2:	4620      	mov	r0, r4
 81115c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

081115c8 <__hi0bits>:
 81115c8:	0c02      	lsrs	r2, r0, #16
 81115ca:	0412      	lsls	r2, r2, #16
 81115cc:	4603      	mov	r3, r0
 81115ce:	b9b2      	cbnz	r2, 81115fe <__hi0bits+0x36>
 81115d0:	0403      	lsls	r3, r0, #16
 81115d2:	2010      	movs	r0, #16
 81115d4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 81115d8:	bf04      	itt	eq
 81115da:	021b      	lsleq	r3, r3, #8
 81115dc:	3008      	addeq	r0, #8
 81115de:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 81115e2:	bf04      	itt	eq
 81115e4:	011b      	lsleq	r3, r3, #4
 81115e6:	3004      	addeq	r0, #4
 81115e8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 81115ec:	bf04      	itt	eq
 81115ee:	009b      	lsleq	r3, r3, #2
 81115f0:	3002      	addeq	r0, #2
 81115f2:	2b00      	cmp	r3, #0
 81115f4:	db06      	blt.n	8111604 <__hi0bits+0x3c>
 81115f6:	005b      	lsls	r3, r3, #1
 81115f8:	d503      	bpl.n	8111602 <__hi0bits+0x3a>
 81115fa:	3001      	adds	r0, #1
 81115fc:	4770      	bx	lr
 81115fe:	2000      	movs	r0, #0
 8111600:	e7e8      	b.n	81115d4 <__hi0bits+0xc>
 8111602:	2020      	movs	r0, #32
 8111604:	4770      	bx	lr

08111606 <__lo0bits>:
 8111606:	6803      	ldr	r3, [r0, #0]
 8111608:	f013 0207 	ands.w	r2, r3, #7
 811160c:	4601      	mov	r1, r0
 811160e:	d00b      	beq.n	8111628 <__lo0bits+0x22>
 8111610:	07da      	lsls	r2, r3, #31
 8111612:	d423      	bmi.n	811165c <__lo0bits+0x56>
 8111614:	0798      	lsls	r0, r3, #30
 8111616:	bf49      	itett	mi
 8111618:	085b      	lsrmi	r3, r3, #1
 811161a:	089b      	lsrpl	r3, r3, #2
 811161c:	2001      	movmi	r0, #1
 811161e:	600b      	strmi	r3, [r1, #0]
 8111620:	bf5c      	itt	pl
 8111622:	600b      	strpl	r3, [r1, #0]
 8111624:	2002      	movpl	r0, #2
 8111626:	4770      	bx	lr
 8111628:	b298      	uxth	r0, r3
 811162a:	b9a8      	cbnz	r0, 8111658 <__lo0bits+0x52>
 811162c:	0c1b      	lsrs	r3, r3, #16
 811162e:	2010      	movs	r0, #16
 8111630:	f013 0fff 	tst.w	r3, #255	; 0xff
 8111634:	bf04      	itt	eq
 8111636:	0a1b      	lsreq	r3, r3, #8
 8111638:	3008      	addeq	r0, #8
 811163a:	071a      	lsls	r2, r3, #28
 811163c:	bf04      	itt	eq
 811163e:	091b      	lsreq	r3, r3, #4
 8111640:	3004      	addeq	r0, #4
 8111642:	079a      	lsls	r2, r3, #30
 8111644:	bf04      	itt	eq
 8111646:	089b      	lsreq	r3, r3, #2
 8111648:	3002      	addeq	r0, #2
 811164a:	07da      	lsls	r2, r3, #31
 811164c:	d402      	bmi.n	8111654 <__lo0bits+0x4e>
 811164e:	085b      	lsrs	r3, r3, #1
 8111650:	d006      	beq.n	8111660 <__lo0bits+0x5a>
 8111652:	3001      	adds	r0, #1
 8111654:	600b      	str	r3, [r1, #0]
 8111656:	4770      	bx	lr
 8111658:	4610      	mov	r0, r2
 811165a:	e7e9      	b.n	8111630 <__lo0bits+0x2a>
 811165c:	2000      	movs	r0, #0
 811165e:	4770      	bx	lr
 8111660:	2020      	movs	r0, #32
 8111662:	4770      	bx	lr

08111664 <__i2b>:
 8111664:	b510      	push	{r4, lr}
 8111666:	460c      	mov	r4, r1
 8111668:	2101      	movs	r1, #1
 811166a:	f7ff ff27 	bl	81114bc <_Balloc>
 811166e:	2201      	movs	r2, #1
 8111670:	6144      	str	r4, [r0, #20]
 8111672:	6102      	str	r2, [r0, #16]
 8111674:	bd10      	pop	{r4, pc}

08111676 <__multiply>:
 8111676:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811167a:	4614      	mov	r4, r2
 811167c:	690a      	ldr	r2, [r1, #16]
 811167e:	6923      	ldr	r3, [r4, #16]
 8111680:	429a      	cmp	r2, r3
 8111682:	bfb8      	it	lt
 8111684:	460b      	movlt	r3, r1
 8111686:	4688      	mov	r8, r1
 8111688:	bfbc      	itt	lt
 811168a:	46a0      	movlt	r8, r4
 811168c:	461c      	movlt	r4, r3
 811168e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8111692:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8111696:	f8d8 3008 	ldr.w	r3, [r8, #8]
 811169a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 811169e:	eb07 0609 	add.w	r6, r7, r9
 81116a2:	42b3      	cmp	r3, r6
 81116a4:	bfb8      	it	lt
 81116a6:	3101      	addlt	r1, #1
 81116a8:	f7ff ff08 	bl	81114bc <_Balloc>
 81116ac:	f100 0514 	add.w	r5, r0, #20
 81116b0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 81116b4:	462b      	mov	r3, r5
 81116b6:	2200      	movs	r2, #0
 81116b8:	4573      	cmp	r3, lr
 81116ba:	d316      	bcc.n	81116ea <__multiply+0x74>
 81116bc:	f104 0214 	add.w	r2, r4, #20
 81116c0:	f108 0114 	add.w	r1, r8, #20
 81116c4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 81116c8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 81116cc:	9300      	str	r3, [sp, #0]
 81116ce:	9b00      	ldr	r3, [sp, #0]
 81116d0:	9201      	str	r2, [sp, #4]
 81116d2:	4293      	cmp	r3, r2
 81116d4:	d80c      	bhi.n	81116f0 <__multiply+0x7a>
 81116d6:	2e00      	cmp	r6, #0
 81116d8:	dd03      	ble.n	81116e2 <__multiply+0x6c>
 81116da:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 81116de:	2b00      	cmp	r3, #0
 81116e0:	d05d      	beq.n	811179e <__multiply+0x128>
 81116e2:	6106      	str	r6, [r0, #16]
 81116e4:	b003      	add	sp, #12
 81116e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81116ea:	f843 2b04 	str.w	r2, [r3], #4
 81116ee:	e7e3      	b.n	81116b8 <__multiply+0x42>
 81116f0:	f8b2 b000 	ldrh.w	fp, [r2]
 81116f4:	f1bb 0f00 	cmp.w	fp, #0
 81116f8:	d023      	beq.n	8111742 <__multiply+0xcc>
 81116fa:	4689      	mov	r9, r1
 81116fc:	46ac      	mov	ip, r5
 81116fe:	f04f 0800 	mov.w	r8, #0
 8111702:	f859 4b04 	ldr.w	r4, [r9], #4
 8111706:	f8dc a000 	ldr.w	sl, [ip]
 811170a:	b2a3      	uxth	r3, r4
 811170c:	fa1f fa8a 	uxth.w	sl, sl
 8111710:	fb0b a303 	mla	r3, fp, r3, sl
 8111714:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8111718:	f8dc 4000 	ldr.w	r4, [ip]
 811171c:	4443      	add	r3, r8
 811171e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8111722:	fb0b 840a 	mla	r4, fp, sl, r8
 8111726:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 811172a:	46e2      	mov	sl, ip
 811172c:	b29b      	uxth	r3, r3
 811172e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8111732:	454f      	cmp	r7, r9
 8111734:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8111738:	f84a 3b04 	str.w	r3, [sl], #4
 811173c:	d82b      	bhi.n	8111796 <__multiply+0x120>
 811173e:	f8cc 8004 	str.w	r8, [ip, #4]
 8111742:	9b01      	ldr	r3, [sp, #4]
 8111744:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8111748:	3204      	adds	r2, #4
 811174a:	f1ba 0f00 	cmp.w	sl, #0
 811174e:	d020      	beq.n	8111792 <__multiply+0x11c>
 8111750:	682b      	ldr	r3, [r5, #0]
 8111752:	4689      	mov	r9, r1
 8111754:	46a8      	mov	r8, r5
 8111756:	f04f 0b00 	mov.w	fp, #0
 811175a:	f8b9 c000 	ldrh.w	ip, [r9]
 811175e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8111762:	fb0a 440c 	mla	r4, sl, ip, r4
 8111766:	445c      	add	r4, fp
 8111768:	46c4      	mov	ip, r8
 811176a:	b29b      	uxth	r3, r3
 811176c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8111770:	f84c 3b04 	str.w	r3, [ip], #4
 8111774:	f859 3b04 	ldr.w	r3, [r9], #4
 8111778:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 811177c:	0c1b      	lsrs	r3, r3, #16
 811177e:	fb0a b303 	mla	r3, sl, r3, fp
 8111782:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8111786:	454f      	cmp	r7, r9
 8111788:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 811178c:	d805      	bhi.n	811179a <__multiply+0x124>
 811178e:	f8c8 3004 	str.w	r3, [r8, #4]
 8111792:	3504      	adds	r5, #4
 8111794:	e79b      	b.n	81116ce <__multiply+0x58>
 8111796:	46d4      	mov	ip, sl
 8111798:	e7b3      	b.n	8111702 <__multiply+0x8c>
 811179a:	46e0      	mov	r8, ip
 811179c:	e7dd      	b.n	811175a <__multiply+0xe4>
 811179e:	3e01      	subs	r6, #1
 81117a0:	e799      	b.n	81116d6 <__multiply+0x60>
	...

081117a4 <__pow5mult>:
 81117a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81117a8:	4615      	mov	r5, r2
 81117aa:	f012 0203 	ands.w	r2, r2, #3
 81117ae:	4606      	mov	r6, r0
 81117b0:	460f      	mov	r7, r1
 81117b2:	d007      	beq.n	81117c4 <__pow5mult+0x20>
 81117b4:	3a01      	subs	r2, #1
 81117b6:	4c21      	ldr	r4, [pc, #132]	; (811183c <__pow5mult+0x98>)
 81117b8:	2300      	movs	r3, #0
 81117ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 81117be:	f7ff fec8 	bl	8111552 <__multadd>
 81117c2:	4607      	mov	r7, r0
 81117c4:	10ad      	asrs	r5, r5, #2
 81117c6:	d035      	beq.n	8111834 <__pow5mult+0x90>
 81117c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 81117ca:	b93c      	cbnz	r4, 81117dc <__pow5mult+0x38>
 81117cc:	2010      	movs	r0, #16
 81117ce:	f7ff fe5b 	bl	8111488 <malloc>
 81117d2:	6270      	str	r0, [r6, #36]	; 0x24
 81117d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 81117d8:	6004      	str	r4, [r0, #0]
 81117da:	60c4      	str	r4, [r0, #12]
 81117dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 81117e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 81117e4:	b94c      	cbnz	r4, 81117fa <__pow5mult+0x56>
 81117e6:	f240 2171 	movw	r1, #625	; 0x271
 81117ea:	4630      	mov	r0, r6
 81117ec:	f7ff ff3a 	bl	8111664 <__i2b>
 81117f0:	2300      	movs	r3, #0
 81117f2:	f8c8 0008 	str.w	r0, [r8, #8]
 81117f6:	4604      	mov	r4, r0
 81117f8:	6003      	str	r3, [r0, #0]
 81117fa:	f04f 0800 	mov.w	r8, #0
 81117fe:	07eb      	lsls	r3, r5, #31
 8111800:	d50a      	bpl.n	8111818 <__pow5mult+0x74>
 8111802:	4639      	mov	r1, r7
 8111804:	4622      	mov	r2, r4
 8111806:	4630      	mov	r0, r6
 8111808:	f7ff ff35 	bl	8111676 <__multiply>
 811180c:	4639      	mov	r1, r7
 811180e:	4681      	mov	r9, r0
 8111810:	4630      	mov	r0, r6
 8111812:	f7ff fe87 	bl	8111524 <_Bfree>
 8111816:	464f      	mov	r7, r9
 8111818:	106d      	asrs	r5, r5, #1
 811181a:	d00b      	beq.n	8111834 <__pow5mult+0x90>
 811181c:	6820      	ldr	r0, [r4, #0]
 811181e:	b938      	cbnz	r0, 8111830 <__pow5mult+0x8c>
 8111820:	4622      	mov	r2, r4
 8111822:	4621      	mov	r1, r4
 8111824:	4630      	mov	r0, r6
 8111826:	f7ff ff26 	bl	8111676 <__multiply>
 811182a:	6020      	str	r0, [r4, #0]
 811182c:	f8c0 8000 	str.w	r8, [r0]
 8111830:	4604      	mov	r4, r0
 8111832:	e7e4      	b.n	81117fe <__pow5mult+0x5a>
 8111834:	4638      	mov	r0, r7
 8111836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 811183a:	bf00      	nop
 811183c:	081130b8 	.word	0x081130b8

08111840 <__lshift>:
 8111840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8111844:	460c      	mov	r4, r1
 8111846:	ea4f 1a62 	mov.w	sl, r2, asr #5
 811184a:	6923      	ldr	r3, [r4, #16]
 811184c:	6849      	ldr	r1, [r1, #4]
 811184e:	eb0a 0903 	add.w	r9, sl, r3
 8111852:	68a3      	ldr	r3, [r4, #8]
 8111854:	4607      	mov	r7, r0
 8111856:	4616      	mov	r6, r2
 8111858:	f109 0501 	add.w	r5, r9, #1
 811185c:	42ab      	cmp	r3, r5
 811185e:	db32      	blt.n	81118c6 <__lshift+0x86>
 8111860:	4638      	mov	r0, r7
 8111862:	f7ff fe2b 	bl	81114bc <_Balloc>
 8111866:	2300      	movs	r3, #0
 8111868:	4680      	mov	r8, r0
 811186a:	f100 0114 	add.w	r1, r0, #20
 811186e:	461a      	mov	r2, r3
 8111870:	4553      	cmp	r3, sl
 8111872:	db2b      	blt.n	81118cc <__lshift+0x8c>
 8111874:	6920      	ldr	r0, [r4, #16]
 8111876:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 811187a:	f104 0314 	add.w	r3, r4, #20
 811187e:	f016 021f 	ands.w	r2, r6, #31
 8111882:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8111886:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 811188a:	d025      	beq.n	81118d8 <__lshift+0x98>
 811188c:	f1c2 0e20 	rsb	lr, r2, #32
 8111890:	2000      	movs	r0, #0
 8111892:	681e      	ldr	r6, [r3, #0]
 8111894:	468a      	mov	sl, r1
 8111896:	4096      	lsls	r6, r2
 8111898:	4330      	orrs	r0, r6
 811189a:	f84a 0b04 	str.w	r0, [sl], #4
 811189e:	f853 0b04 	ldr.w	r0, [r3], #4
 81118a2:	459c      	cmp	ip, r3
 81118a4:	fa20 f00e 	lsr.w	r0, r0, lr
 81118a8:	d814      	bhi.n	81118d4 <__lshift+0x94>
 81118aa:	6048      	str	r0, [r1, #4]
 81118ac:	b108      	cbz	r0, 81118b2 <__lshift+0x72>
 81118ae:	f109 0502 	add.w	r5, r9, #2
 81118b2:	3d01      	subs	r5, #1
 81118b4:	4638      	mov	r0, r7
 81118b6:	f8c8 5010 	str.w	r5, [r8, #16]
 81118ba:	4621      	mov	r1, r4
 81118bc:	f7ff fe32 	bl	8111524 <_Bfree>
 81118c0:	4640      	mov	r0, r8
 81118c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81118c6:	3101      	adds	r1, #1
 81118c8:	005b      	lsls	r3, r3, #1
 81118ca:	e7c7      	b.n	811185c <__lshift+0x1c>
 81118cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 81118d0:	3301      	adds	r3, #1
 81118d2:	e7cd      	b.n	8111870 <__lshift+0x30>
 81118d4:	4651      	mov	r1, sl
 81118d6:	e7dc      	b.n	8111892 <__lshift+0x52>
 81118d8:	3904      	subs	r1, #4
 81118da:	f853 2b04 	ldr.w	r2, [r3], #4
 81118de:	f841 2f04 	str.w	r2, [r1, #4]!
 81118e2:	459c      	cmp	ip, r3
 81118e4:	d8f9      	bhi.n	81118da <__lshift+0x9a>
 81118e6:	e7e4      	b.n	81118b2 <__lshift+0x72>

081118e8 <__mcmp>:
 81118e8:	6903      	ldr	r3, [r0, #16]
 81118ea:	690a      	ldr	r2, [r1, #16]
 81118ec:	1a9b      	subs	r3, r3, r2
 81118ee:	b530      	push	{r4, r5, lr}
 81118f0:	d10c      	bne.n	811190c <__mcmp+0x24>
 81118f2:	0092      	lsls	r2, r2, #2
 81118f4:	3014      	adds	r0, #20
 81118f6:	3114      	adds	r1, #20
 81118f8:	1884      	adds	r4, r0, r2
 81118fa:	4411      	add	r1, r2
 81118fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8111900:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8111904:	4295      	cmp	r5, r2
 8111906:	d003      	beq.n	8111910 <__mcmp+0x28>
 8111908:	d305      	bcc.n	8111916 <__mcmp+0x2e>
 811190a:	2301      	movs	r3, #1
 811190c:	4618      	mov	r0, r3
 811190e:	bd30      	pop	{r4, r5, pc}
 8111910:	42a0      	cmp	r0, r4
 8111912:	d3f3      	bcc.n	81118fc <__mcmp+0x14>
 8111914:	e7fa      	b.n	811190c <__mcmp+0x24>
 8111916:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 811191a:	e7f7      	b.n	811190c <__mcmp+0x24>

0811191c <__mdiff>:
 811191c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8111920:	460d      	mov	r5, r1
 8111922:	4607      	mov	r7, r0
 8111924:	4611      	mov	r1, r2
 8111926:	4628      	mov	r0, r5
 8111928:	4614      	mov	r4, r2
 811192a:	f7ff ffdd 	bl	81118e8 <__mcmp>
 811192e:	1e06      	subs	r6, r0, #0
 8111930:	d108      	bne.n	8111944 <__mdiff+0x28>
 8111932:	4631      	mov	r1, r6
 8111934:	4638      	mov	r0, r7
 8111936:	f7ff fdc1 	bl	81114bc <_Balloc>
 811193a:	2301      	movs	r3, #1
 811193c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8111940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8111944:	bfa4      	itt	ge
 8111946:	4623      	movge	r3, r4
 8111948:	462c      	movge	r4, r5
 811194a:	4638      	mov	r0, r7
 811194c:	6861      	ldr	r1, [r4, #4]
 811194e:	bfa6      	itte	ge
 8111950:	461d      	movge	r5, r3
 8111952:	2600      	movge	r6, #0
 8111954:	2601      	movlt	r6, #1
 8111956:	f7ff fdb1 	bl	81114bc <_Balloc>
 811195a:	692b      	ldr	r3, [r5, #16]
 811195c:	60c6      	str	r6, [r0, #12]
 811195e:	6926      	ldr	r6, [r4, #16]
 8111960:	f105 0914 	add.w	r9, r5, #20
 8111964:	f104 0214 	add.w	r2, r4, #20
 8111968:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 811196c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8111970:	f100 0514 	add.w	r5, r0, #20
 8111974:	f04f 0e00 	mov.w	lr, #0
 8111978:	f852 ab04 	ldr.w	sl, [r2], #4
 811197c:	f859 4b04 	ldr.w	r4, [r9], #4
 8111980:	fa1e f18a 	uxtah	r1, lr, sl
 8111984:	b2a3      	uxth	r3, r4
 8111986:	1ac9      	subs	r1, r1, r3
 8111988:	0c23      	lsrs	r3, r4, #16
 811198a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 811198e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8111992:	b289      	uxth	r1, r1
 8111994:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8111998:	45c8      	cmp	r8, r9
 811199a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 811199e:	4694      	mov	ip, r2
 81119a0:	f845 3b04 	str.w	r3, [r5], #4
 81119a4:	d8e8      	bhi.n	8111978 <__mdiff+0x5c>
 81119a6:	45bc      	cmp	ip, r7
 81119a8:	d304      	bcc.n	81119b4 <__mdiff+0x98>
 81119aa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 81119ae:	b183      	cbz	r3, 81119d2 <__mdiff+0xb6>
 81119b0:	6106      	str	r6, [r0, #16]
 81119b2:	e7c5      	b.n	8111940 <__mdiff+0x24>
 81119b4:	f85c 1b04 	ldr.w	r1, [ip], #4
 81119b8:	fa1e f381 	uxtah	r3, lr, r1
 81119bc:	141a      	asrs	r2, r3, #16
 81119be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 81119c2:	b29b      	uxth	r3, r3
 81119c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 81119c8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 81119cc:	f845 3b04 	str.w	r3, [r5], #4
 81119d0:	e7e9      	b.n	81119a6 <__mdiff+0x8a>
 81119d2:	3e01      	subs	r6, #1
 81119d4:	e7e9      	b.n	81119aa <__mdiff+0x8e>

081119d6 <__d2b>:
 81119d6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 81119da:	460e      	mov	r6, r1
 81119dc:	2101      	movs	r1, #1
 81119de:	ec59 8b10 	vmov	r8, r9, d0
 81119e2:	4615      	mov	r5, r2
 81119e4:	f7ff fd6a 	bl	81114bc <_Balloc>
 81119e8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 81119ec:	4607      	mov	r7, r0
 81119ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 81119f2:	bb34      	cbnz	r4, 8111a42 <__d2b+0x6c>
 81119f4:	9301      	str	r3, [sp, #4]
 81119f6:	f1b8 0300 	subs.w	r3, r8, #0
 81119fa:	d027      	beq.n	8111a4c <__d2b+0x76>
 81119fc:	a802      	add	r0, sp, #8
 81119fe:	f840 3d08 	str.w	r3, [r0, #-8]!
 8111a02:	f7ff fe00 	bl	8111606 <__lo0bits>
 8111a06:	9900      	ldr	r1, [sp, #0]
 8111a08:	b1f0      	cbz	r0, 8111a48 <__d2b+0x72>
 8111a0a:	9a01      	ldr	r2, [sp, #4]
 8111a0c:	f1c0 0320 	rsb	r3, r0, #32
 8111a10:	fa02 f303 	lsl.w	r3, r2, r3
 8111a14:	430b      	orrs	r3, r1
 8111a16:	40c2      	lsrs	r2, r0
 8111a18:	617b      	str	r3, [r7, #20]
 8111a1a:	9201      	str	r2, [sp, #4]
 8111a1c:	9b01      	ldr	r3, [sp, #4]
 8111a1e:	61bb      	str	r3, [r7, #24]
 8111a20:	2b00      	cmp	r3, #0
 8111a22:	bf14      	ite	ne
 8111a24:	2102      	movne	r1, #2
 8111a26:	2101      	moveq	r1, #1
 8111a28:	6139      	str	r1, [r7, #16]
 8111a2a:	b1c4      	cbz	r4, 8111a5e <__d2b+0x88>
 8111a2c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8111a30:	4404      	add	r4, r0
 8111a32:	6034      	str	r4, [r6, #0]
 8111a34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8111a38:	6028      	str	r0, [r5, #0]
 8111a3a:	4638      	mov	r0, r7
 8111a3c:	b003      	add	sp, #12
 8111a3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8111a42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8111a46:	e7d5      	b.n	81119f4 <__d2b+0x1e>
 8111a48:	6179      	str	r1, [r7, #20]
 8111a4a:	e7e7      	b.n	8111a1c <__d2b+0x46>
 8111a4c:	a801      	add	r0, sp, #4
 8111a4e:	f7ff fdda 	bl	8111606 <__lo0bits>
 8111a52:	9b01      	ldr	r3, [sp, #4]
 8111a54:	617b      	str	r3, [r7, #20]
 8111a56:	2101      	movs	r1, #1
 8111a58:	6139      	str	r1, [r7, #16]
 8111a5a:	3020      	adds	r0, #32
 8111a5c:	e7e5      	b.n	8111a2a <__d2b+0x54>
 8111a5e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8111a62:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8111a66:	6030      	str	r0, [r6, #0]
 8111a68:	6918      	ldr	r0, [r3, #16]
 8111a6a:	f7ff fdad 	bl	81115c8 <__hi0bits>
 8111a6e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8111a72:	e7e1      	b.n	8111a38 <__d2b+0x62>

08111a74 <_calloc_r>:
 8111a74:	b538      	push	{r3, r4, r5, lr}
 8111a76:	fb02 f401 	mul.w	r4, r2, r1
 8111a7a:	4621      	mov	r1, r4
 8111a7c:	f000 f856 	bl	8111b2c <_malloc_r>
 8111a80:	4605      	mov	r5, r0
 8111a82:	b118      	cbz	r0, 8111a8c <_calloc_r+0x18>
 8111a84:	4622      	mov	r2, r4
 8111a86:	2100      	movs	r1, #0
 8111a88:	f7fd fdad 	bl	810f5e6 <memset>
 8111a8c:	4628      	mov	r0, r5
 8111a8e:	bd38      	pop	{r3, r4, r5, pc}

08111a90 <_free_r>:
 8111a90:	b538      	push	{r3, r4, r5, lr}
 8111a92:	4605      	mov	r5, r0
 8111a94:	2900      	cmp	r1, #0
 8111a96:	d045      	beq.n	8111b24 <_free_r+0x94>
 8111a98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8111a9c:	1f0c      	subs	r4, r1, #4
 8111a9e:	2b00      	cmp	r3, #0
 8111aa0:	bfb8      	it	lt
 8111aa2:	18e4      	addlt	r4, r4, r3
 8111aa4:	f000 fbfd 	bl	81122a2 <__malloc_lock>
 8111aa8:	4a1f      	ldr	r2, [pc, #124]	; (8111b28 <_free_r+0x98>)
 8111aaa:	6813      	ldr	r3, [r2, #0]
 8111aac:	4610      	mov	r0, r2
 8111aae:	b933      	cbnz	r3, 8111abe <_free_r+0x2e>
 8111ab0:	6063      	str	r3, [r4, #4]
 8111ab2:	6014      	str	r4, [r2, #0]
 8111ab4:	4628      	mov	r0, r5
 8111ab6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8111aba:	f000 bbf3 	b.w	81122a4 <__malloc_unlock>
 8111abe:	42a3      	cmp	r3, r4
 8111ac0:	d90c      	bls.n	8111adc <_free_r+0x4c>
 8111ac2:	6821      	ldr	r1, [r4, #0]
 8111ac4:	1862      	adds	r2, r4, r1
 8111ac6:	4293      	cmp	r3, r2
 8111ac8:	bf04      	itt	eq
 8111aca:	681a      	ldreq	r2, [r3, #0]
 8111acc:	685b      	ldreq	r3, [r3, #4]
 8111ace:	6063      	str	r3, [r4, #4]
 8111ad0:	bf04      	itt	eq
 8111ad2:	1852      	addeq	r2, r2, r1
 8111ad4:	6022      	streq	r2, [r4, #0]
 8111ad6:	6004      	str	r4, [r0, #0]
 8111ad8:	e7ec      	b.n	8111ab4 <_free_r+0x24>
 8111ada:	4613      	mov	r3, r2
 8111adc:	685a      	ldr	r2, [r3, #4]
 8111ade:	b10a      	cbz	r2, 8111ae4 <_free_r+0x54>
 8111ae0:	42a2      	cmp	r2, r4
 8111ae2:	d9fa      	bls.n	8111ada <_free_r+0x4a>
 8111ae4:	6819      	ldr	r1, [r3, #0]
 8111ae6:	1858      	adds	r0, r3, r1
 8111ae8:	42a0      	cmp	r0, r4
 8111aea:	d10b      	bne.n	8111b04 <_free_r+0x74>
 8111aec:	6820      	ldr	r0, [r4, #0]
 8111aee:	4401      	add	r1, r0
 8111af0:	1858      	adds	r0, r3, r1
 8111af2:	4282      	cmp	r2, r0
 8111af4:	6019      	str	r1, [r3, #0]
 8111af6:	d1dd      	bne.n	8111ab4 <_free_r+0x24>
 8111af8:	6810      	ldr	r0, [r2, #0]
 8111afa:	6852      	ldr	r2, [r2, #4]
 8111afc:	605a      	str	r2, [r3, #4]
 8111afe:	4401      	add	r1, r0
 8111b00:	6019      	str	r1, [r3, #0]
 8111b02:	e7d7      	b.n	8111ab4 <_free_r+0x24>
 8111b04:	d902      	bls.n	8111b0c <_free_r+0x7c>
 8111b06:	230c      	movs	r3, #12
 8111b08:	602b      	str	r3, [r5, #0]
 8111b0a:	e7d3      	b.n	8111ab4 <_free_r+0x24>
 8111b0c:	6820      	ldr	r0, [r4, #0]
 8111b0e:	1821      	adds	r1, r4, r0
 8111b10:	428a      	cmp	r2, r1
 8111b12:	bf04      	itt	eq
 8111b14:	6811      	ldreq	r1, [r2, #0]
 8111b16:	6852      	ldreq	r2, [r2, #4]
 8111b18:	6062      	str	r2, [r4, #4]
 8111b1a:	bf04      	itt	eq
 8111b1c:	1809      	addeq	r1, r1, r0
 8111b1e:	6021      	streq	r1, [r4, #0]
 8111b20:	605c      	str	r4, [r3, #4]
 8111b22:	e7c7      	b.n	8111ab4 <_free_r+0x24>
 8111b24:	bd38      	pop	{r3, r4, r5, pc}
 8111b26:	bf00      	nop
 8111b28:	10009830 	.word	0x10009830

08111b2c <_malloc_r>:
 8111b2c:	b570      	push	{r4, r5, r6, lr}
 8111b2e:	1ccd      	adds	r5, r1, #3
 8111b30:	f025 0503 	bic.w	r5, r5, #3
 8111b34:	3508      	adds	r5, #8
 8111b36:	2d0c      	cmp	r5, #12
 8111b38:	bf38      	it	cc
 8111b3a:	250c      	movcc	r5, #12
 8111b3c:	2d00      	cmp	r5, #0
 8111b3e:	4606      	mov	r6, r0
 8111b40:	db01      	blt.n	8111b46 <_malloc_r+0x1a>
 8111b42:	42a9      	cmp	r1, r5
 8111b44:	d903      	bls.n	8111b4e <_malloc_r+0x22>
 8111b46:	230c      	movs	r3, #12
 8111b48:	6033      	str	r3, [r6, #0]
 8111b4a:	2000      	movs	r0, #0
 8111b4c:	bd70      	pop	{r4, r5, r6, pc}
 8111b4e:	f000 fba8 	bl	81122a2 <__malloc_lock>
 8111b52:	4a21      	ldr	r2, [pc, #132]	; (8111bd8 <_malloc_r+0xac>)
 8111b54:	6814      	ldr	r4, [r2, #0]
 8111b56:	4621      	mov	r1, r4
 8111b58:	b991      	cbnz	r1, 8111b80 <_malloc_r+0x54>
 8111b5a:	4c20      	ldr	r4, [pc, #128]	; (8111bdc <_malloc_r+0xb0>)
 8111b5c:	6823      	ldr	r3, [r4, #0]
 8111b5e:	b91b      	cbnz	r3, 8111b68 <_malloc_r+0x3c>
 8111b60:	4630      	mov	r0, r6
 8111b62:	f000 facf 	bl	8112104 <_sbrk_r>
 8111b66:	6020      	str	r0, [r4, #0]
 8111b68:	4629      	mov	r1, r5
 8111b6a:	4630      	mov	r0, r6
 8111b6c:	f000 faca 	bl	8112104 <_sbrk_r>
 8111b70:	1c43      	adds	r3, r0, #1
 8111b72:	d124      	bne.n	8111bbe <_malloc_r+0x92>
 8111b74:	230c      	movs	r3, #12
 8111b76:	6033      	str	r3, [r6, #0]
 8111b78:	4630      	mov	r0, r6
 8111b7a:	f000 fb93 	bl	81122a4 <__malloc_unlock>
 8111b7e:	e7e4      	b.n	8111b4a <_malloc_r+0x1e>
 8111b80:	680b      	ldr	r3, [r1, #0]
 8111b82:	1b5b      	subs	r3, r3, r5
 8111b84:	d418      	bmi.n	8111bb8 <_malloc_r+0x8c>
 8111b86:	2b0b      	cmp	r3, #11
 8111b88:	d90f      	bls.n	8111baa <_malloc_r+0x7e>
 8111b8a:	600b      	str	r3, [r1, #0]
 8111b8c:	50cd      	str	r5, [r1, r3]
 8111b8e:	18cc      	adds	r4, r1, r3
 8111b90:	4630      	mov	r0, r6
 8111b92:	f000 fb87 	bl	81122a4 <__malloc_unlock>
 8111b96:	f104 000b 	add.w	r0, r4, #11
 8111b9a:	1d23      	adds	r3, r4, #4
 8111b9c:	f020 0007 	bic.w	r0, r0, #7
 8111ba0:	1ac3      	subs	r3, r0, r3
 8111ba2:	d0d3      	beq.n	8111b4c <_malloc_r+0x20>
 8111ba4:	425a      	negs	r2, r3
 8111ba6:	50e2      	str	r2, [r4, r3]
 8111ba8:	e7d0      	b.n	8111b4c <_malloc_r+0x20>
 8111baa:	428c      	cmp	r4, r1
 8111bac:	684b      	ldr	r3, [r1, #4]
 8111bae:	bf16      	itet	ne
 8111bb0:	6063      	strne	r3, [r4, #4]
 8111bb2:	6013      	streq	r3, [r2, #0]
 8111bb4:	460c      	movne	r4, r1
 8111bb6:	e7eb      	b.n	8111b90 <_malloc_r+0x64>
 8111bb8:	460c      	mov	r4, r1
 8111bba:	6849      	ldr	r1, [r1, #4]
 8111bbc:	e7cc      	b.n	8111b58 <_malloc_r+0x2c>
 8111bbe:	1cc4      	adds	r4, r0, #3
 8111bc0:	f024 0403 	bic.w	r4, r4, #3
 8111bc4:	42a0      	cmp	r0, r4
 8111bc6:	d005      	beq.n	8111bd4 <_malloc_r+0xa8>
 8111bc8:	1a21      	subs	r1, r4, r0
 8111bca:	4630      	mov	r0, r6
 8111bcc:	f000 fa9a 	bl	8112104 <_sbrk_r>
 8111bd0:	3001      	adds	r0, #1
 8111bd2:	d0cf      	beq.n	8111b74 <_malloc_r+0x48>
 8111bd4:	6025      	str	r5, [r4, #0]
 8111bd6:	e7db      	b.n	8111b90 <_malloc_r+0x64>
 8111bd8:	10009830 	.word	0x10009830
 8111bdc:	10009834 	.word	0x10009834

08111be0 <__ssputs_r>:
 8111be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8111be4:	688e      	ldr	r6, [r1, #8]
 8111be6:	429e      	cmp	r6, r3
 8111be8:	4682      	mov	sl, r0
 8111bea:	460c      	mov	r4, r1
 8111bec:	4690      	mov	r8, r2
 8111bee:	4699      	mov	r9, r3
 8111bf0:	d837      	bhi.n	8111c62 <__ssputs_r+0x82>
 8111bf2:	898a      	ldrh	r2, [r1, #12]
 8111bf4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8111bf8:	d031      	beq.n	8111c5e <__ssputs_r+0x7e>
 8111bfa:	6825      	ldr	r5, [r4, #0]
 8111bfc:	6909      	ldr	r1, [r1, #16]
 8111bfe:	1a6f      	subs	r7, r5, r1
 8111c00:	6965      	ldr	r5, [r4, #20]
 8111c02:	2302      	movs	r3, #2
 8111c04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8111c08:	fb95 f5f3 	sdiv	r5, r5, r3
 8111c0c:	f109 0301 	add.w	r3, r9, #1
 8111c10:	443b      	add	r3, r7
 8111c12:	429d      	cmp	r5, r3
 8111c14:	bf38      	it	cc
 8111c16:	461d      	movcc	r5, r3
 8111c18:	0553      	lsls	r3, r2, #21
 8111c1a:	d530      	bpl.n	8111c7e <__ssputs_r+0x9e>
 8111c1c:	4629      	mov	r1, r5
 8111c1e:	f7ff ff85 	bl	8111b2c <_malloc_r>
 8111c22:	4606      	mov	r6, r0
 8111c24:	b950      	cbnz	r0, 8111c3c <__ssputs_r+0x5c>
 8111c26:	230c      	movs	r3, #12
 8111c28:	f8ca 3000 	str.w	r3, [sl]
 8111c2c:	89a3      	ldrh	r3, [r4, #12]
 8111c2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8111c32:	81a3      	strh	r3, [r4, #12]
 8111c34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8111c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8111c3c:	463a      	mov	r2, r7
 8111c3e:	6921      	ldr	r1, [r4, #16]
 8111c40:	f7fd fcc6 	bl	810f5d0 <memcpy>
 8111c44:	89a3      	ldrh	r3, [r4, #12]
 8111c46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8111c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8111c4e:	81a3      	strh	r3, [r4, #12]
 8111c50:	6126      	str	r6, [r4, #16]
 8111c52:	6165      	str	r5, [r4, #20]
 8111c54:	443e      	add	r6, r7
 8111c56:	1bed      	subs	r5, r5, r7
 8111c58:	6026      	str	r6, [r4, #0]
 8111c5a:	60a5      	str	r5, [r4, #8]
 8111c5c:	464e      	mov	r6, r9
 8111c5e:	454e      	cmp	r6, r9
 8111c60:	d900      	bls.n	8111c64 <__ssputs_r+0x84>
 8111c62:	464e      	mov	r6, r9
 8111c64:	4632      	mov	r2, r6
 8111c66:	4641      	mov	r1, r8
 8111c68:	6820      	ldr	r0, [r4, #0]
 8111c6a:	f000 fb01 	bl	8112270 <memmove>
 8111c6e:	68a3      	ldr	r3, [r4, #8]
 8111c70:	1b9b      	subs	r3, r3, r6
 8111c72:	60a3      	str	r3, [r4, #8]
 8111c74:	6823      	ldr	r3, [r4, #0]
 8111c76:	441e      	add	r6, r3
 8111c78:	6026      	str	r6, [r4, #0]
 8111c7a:	2000      	movs	r0, #0
 8111c7c:	e7dc      	b.n	8111c38 <__ssputs_r+0x58>
 8111c7e:	462a      	mov	r2, r5
 8111c80:	f000 fb11 	bl	81122a6 <_realloc_r>
 8111c84:	4606      	mov	r6, r0
 8111c86:	2800      	cmp	r0, #0
 8111c88:	d1e2      	bne.n	8111c50 <__ssputs_r+0x70>
 8111c8a:	6921      	ldr	r1, [r4, #16]
 8111c8c:	4650      	mov	r0, sl
 8111c8e:	f7ff feff 	bl	8111a90 <_free_r>
 8111c92:	e7c8      	b.n	8111c26 <__ssputs_r+0x46>

08111c94 <_svfiprintf_r>:
 8111c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8111c98:	461d      	mov	r5, r3
 8111c9a:	898b      	ldrh	r3, [r1, #12]
 8111c9c:	061f      	lsls	r7, r3, #24
 8111c9e:	b09d      	sub	sp, #116	; 0x74
 8111ca0:	4680      	mov	r8, r0
 8111ca2:	460c      	mov	r4, r1
 8111ca4:	4616      	mov	r6, r2
 8111ca6:	d50f      	bpl.n	8111cc8 <_svfiprintf_r+0x34>
 8111ca8:	690b      	ldr	r3, [r1, #16]
 8111caa:	b96b      	cbnz	r3, 8111cc8 <_svfiprintf_r+0x34>
 8111cac:	2140      	movs	r1, #64	; 0x40
 8111cae:	f7ff ff3d 	bl	8111b2c <_malloc_r>
 8111cb2:	6020      	str	r0, [r4, #0]
 8111cb4:	6120      	str	r0, [r4, #16]
 8111cb6:	b928      	cbnz	r0, 8111cc4 <_svfiprintf_r+0x30>
 8111cb8:	230c      	movs	r3, #12
 8111cba:	f8c8 3000 	str.w	r3, [r8]
 8111cbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8111cc2:	e0c8      	b.n	8111e56 <_svfiprintf_r+0x1c2>
 8111cc4:	2340      	movs	r3, #64	; 0x40
 8111cc6:	6163      	str	r3, [r4, #20]
 8111cc8:	2300      	movs	r3, #0
 8111cca:	9309      	str	r3, [sp, #36]	; 0x24
 8111ccc:	2320      	movs	r3, #32
 8111cce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8111cd2:	2330      	movs	r3, #48	; 0x30
 8111cd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8111cd8:	9503      	str	r5, [sp, #12]
 8111cda:	f04f 0b01 	mov.w	fp, #1
 8111cde:	4637      	mov	r7, r6
 8111ce0:	463d      	mov	r5, r7
 8111ce2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8111ce6:	b10b      	cbz	r3, 8111cec <_svfiprintf_r+0x58>
 8111ce8:	2b25      	cmp	r3, #37	; 0x25
 8111cea:	d13e      	bne.n	8111d6a <_svfiprintf_r+0xd6>
 8111cec:	ebb7 0a06 	subs.w	sl, r7, r6
 8111cf0:	d00b      	beq.n	8111d0a <_svfiprintf_r+0x76>
 8111cf2:	4653      	mov	r3, sl
 8111cf4:	4632      	mov	r2, r6
 8111cf6:	4621      	mov	r1, r4
 8111cf8:	4640      	mov	r0, r8
 8111cfa:	f7ff ff71 	bl	8111be0 <__ssputs_r>
 8111cfe:	3001      	adds	r0, #1
 8111d00:	f000 80a4 	beq.w	8111e4c <_svfiprintf_r+0x1b8>
 8111d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8111d06:	4453      	add	r3, sl
 8111d08:	9309      	str	r3, [sp, #36]	; 0x24
 8111d0a:	783b      	ldrb	r3, [r7, #0]
 8111d0c:	2b00      	cmp	r3, #0
 8111d0e:	f000 809d 	beq.w	8111e4c <_svfiprintf_r+0x1b8>
 8111d12:	2300      	movs	r3, #0
 8111d14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8111d18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8111d1c:	9304      	str	r3, [sp, #16]
 8111d1e:	9307      	str	r3, [sp, #28]
 8111d20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8111d24:	931a      	str	r3, [sp, #104]	; 0x68
 8111d26:	462f      	mov	r7, r5
 8111d28:	2205      	movs	r2, #5
 8111d2a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8111d2e:	4850      	ldr	r0, [pc, #320]	; (8111e70 <_svfiprintf_r+0x1dc>)
 8111d30:	f7ee faee 	bl	8100310 <memchr>
 8111d34:	9b04      	ldr	r3, [sp, #16]
 8111d36:	b9d0      	cbnz	r0, 8111d6e <_svfiprintf_r+0xda>
 8111d38:	06d9      	lsls	r1, r3, #27
 8111d3a:	bf44      	itt	mi
 8111d3c:	2220      	movmi	r2, #32
 8111d3e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8111d42:	071a      	lsls	r2, r3, #28
 8111d44:	bf44      	itt	mi
 8111d46:	222b      	movmi	r2, #43	; 0x2b
 8111d48:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8111d4c:	782a      	ldrb	r2, [r5, #0]
 8111d4e:	2a2a      	cmp	r2, #42	; 0x2a
 8111d50:	d015      	beq.n	8111d7e <_svfiprintf_r+0xea>
 8111d52:	9a07      	ldr	r2, [sp, #28]
 8111d54:	462f      	mov	r7, r5
 8111d56:	2000      	movs	r0, #0
 8111d58:	250a      	movs	r5, #10
 8111d5a:	4639      	mov	r1, r7
 8111d5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8111d60:	3b30      	subs	r3, #48	; 0x30
 8111d62:	2b09      	cmp	r3, #9
 8111d64:	d94d      	bls.n	8111e02 <_svfiprintf_r+0x16e>
 8111d66:	b1b8      	cbz	r0, 8111d98 <_svfiprintf_r+0x104>
 8111d68:	e00f      	b.n	8111d8a <_svfiprintf_r+0xf6>
 8111d6a:	462f      	mov	r7, r5
 8111d6c:	e7b8      	b.n	8111ce0 <_svfiprintf_r+0x4c>
 8111d6e:	4a40      	ldr	r2, [pc, #256]	; (8111e70 <_svfiprintf_r+0x1dc>)
 8111d70:	1a80      	subs	r0, r0, r2
 8111d72:	fa0b f000 	lsl.w	r0, fp, r0
 8111d76:	4318      	orrs	r0, r3
 8111d78:	9004      	str	r0, [sp, #16]
 8111d7a:	463d      	mov	r5, r7
 8111d7c:	e7d3      	b.n	8111d26 <_svfiprintf_r+0x92>
 8111d7e:	9a03      	ldr	r2, [sp, #12]
 8111d80:	1d11      	adds	r1, r2, #4
 8111d82:	6812      	ldr	r2, [r2, #0]
 8111d84:	9103      	str	r1, [sp, #12]
 8111d86:	2a00      	cmp	r2, #0
 8111d88:	db01      	blt.n	8111d8e <_svfiprintf_r+0xfa>
 8111d8a:	9207      	str	r2, [sp, #28]
 8111d8c:	e004      	b.n	8111d98 <_svfiprintf_r+0x104>
 8111d8e:	4252      	negs	r2, r2
 8111d90:	f043 0302 	orr.w	r3, r3, #2
 8111d94:	9207      	str	r2, [sp, #28]
 8111d96:	9304      	str	r3, [sp, #16]
 8111d98:	783b      	ldrb	r3, [r7, #0]
 8111d9a:	2b2e      	cmp	r3, #46	; 0x2e
 8111d9c:	d10c      	bne.n	8111db8 <_svfiprintf_r+0x124>
 8111d9e:	787b      	ldrb	r3, [r7, #1]
 8111da0:	2b2a      	cmp	r3, #42	; 0x2a
 8111da2:	d133      	bne.n	8111e0c <_svfiprintf_r+0x178>
 8111da4:	9b03      	ldr	r3, [sp, #12]
 8111da6:	1d1a      	adds	r2, r3, #4
 8111da8:	681b      	ldr	r3, [r3, #0]
 8111daa:	9203      	str	r2, [sp, #12]
 8111dac:	2b00      	cmp	r3, #0
 8111dae:	bfb8      	it	lt
 8111db0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8111db4:	3702      	adds	r7, #2
 8111db6:	9305      	str	r3, [sp, #20]
 8111db8:	4d2e      	ldr	r5, [pc, #184]	; (8111e74 <_svfiprintf_r+0x1e0>)
 8111dba:	7839      	ldrb	r1, [r7, #0]
 8111dbc:	2203      	movs	r2, #3
 8111dbe:	4628      	mov	r0, r5
 8111dc0:	f7ee faa6 	bl	8100310 <memchr>
 8111dc4:	b138      	cbz	r0, 8111dd6 <_svfiprintf_r+0x142>
 8111dc6:	2340      	movs	r3, #64	; 0x40
 8111dc8:	1b40      	subs	r0, r0, r5
 8111dca:	fa03 f000 	lsl.w	r0, r3, r0
 8111dce:	9b04      	ldr	r3, [sp, #16]
 8111dd0:	4303      	orrs	r3, r0
 8111dd2:	3701      	adds	r7, #1
 8111dd4:	9304      	str	r3, [sp, #16]
 8111dd6:	7839      	ldrb	r1, [r7, #0]
 8111dd8:	4827      	ldr	r0, [pc, #156]	; (8111e78 <_svfiprintf_r+0x1e4>)
 8111dda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8111dde:	2206      	movs	r2, #6
 8111de0:	1c7e      	adds	r6, r7, #1
 8111de2:	f7ee fa95 	bl	8100310 <memchr>
 8111de6:	2800      	cmp	r0, #0
 8111de8:	d038      	beq.n	8111e5c <_svfiprintf_r+0x1c8>
 8111dea:	4b24      	ldr	r3, [pc, #144]	; (8111e7c <_svfiprintf_r+0x1e8>)
 8111dec:	bb13      	cbnz	r3, 8111e34 <_svfiprintf_r+0x1a0>
 8111dee:	9b03      	ldr	r3, [sp, #12]
 8111df0:	3307      	adds	r3, #7
 8111df2:	f023 0307 	bic.w	r3, r3, #7
 8111df6:	3308      	adds	r3, #8
 8111df8:	9303      	str	r3, [sp, #12]
 8111dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8111dfc:	444b      	add	r3, r9
 8111dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8111e00:	e76d      	b.n	8111cde <_svfiprintf_r+0x4a>
 8111e02:	fb05 3202 	mla	r2, r5, r2, r3
 8111e06:	2001      	movs	r0, #1
 8111e08:	460f      	mov	r7, r1
 8111e0a:	e7a6      	b.n	8111d5a <_svfiprintf_r+0xc6>
 8111e0c:	2300      	movs	r3, #0
 8111e0e:	3701      	adds	r7, #1
 8111e10:	9305      	str	r3, [sp, #20]
 8111e12:	4619      	mov	r1, r3
 8111e14:	250a      	movs	r5, #10
 8111e16:	4638      	mov	r0, r7
 8111e18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8111e1c:	3a30      	subs	r2, #48	; 0x30
 8111e1e:	2a09      	cmp	r2, #9
 8111e20:	d903      	bls.n	8111e2a <_svfiprintf_r+0x196>
 8111e22:	2b00      	cmp	r3, #0
 8111e24:	d0c8      	beq.n	8111db8 <_svfiprintf_r+0x124>
 8111e26:	9105      	str	r1, [sp, #20]
 8111e28:	e7c6      	b.n	8111db8 <_svfiprintf_r+0x124>
 8111e2a:	fb05 2101 	mla	r1, r5, r1, r2
 8111e2e:	2301      	movs	r3, #1
 8111e30:	4607      	mov	r7, r0
 8111e32:	e7f0      	b.n	8111e16 <_svfiprintf_r+0x182>
 8111e34:	ab03      	add	r3, sp, #12
 8111e36:	9300      	str	r3, [sp, #0]
 8111e38:	4622      	mov	r2, r4
 8111e3a:	4b11      	ldr	r3, [pc, #68]	; (8111e80 <_svfiprintf_r+0x1ec>)
 8111e3c:	a904      	add	r1, sp, #16
 8111e3e:	4640      	mov	r0, r8
 8111e40:	f7fd fc6e 	bl	810f720 <_printf_float>
 8111e44:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8111e48:	4681      	mov	r9, r0
 8111e4a:	d1d6      	bne.n	8111dfa <_svfiprintf_r+0x166>
 8111e4c:	89a3      	ldrh	r3, [r4, #12]
 8111e4e:	065b      	lsls	r3, r3, #25
 8111e50:	f53f af35 	bmi.w	8111cbe <_svfiprintf_r+0x2a>
 8111e54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8111e56:	b01d      	add	sp, #116	; 0x74
 8111e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8111e5c:	ab03      	add	r3, sp, #12
 8111e5e:	9300      	str	r3, [sp, #0]
 8111e60:	4622      	mov	r2, r4
 8111e62:	4b07      	ldr	r3, [pc, #28]	; (8111e80 <_svfiprintf_r+0x1ec>)
 8111e64:	a904      	add	r1, sp, #16
 8111e66:	4640      	mov	r0, r8
 8111e68:	f7fd ff10 	bl	810fc8c <_printf_i>
 8111e6c:	e7ea      	b.n	8111e44 <_svfiprintf_r+0x1b0>
 8111e6e:	bf00      	nop
 8111e70:	081130c4 	.word	0x081130c4
 8111e74:	081130ca 	.word	0x081130ca
 8111e78:	081130ce 	.word	0x081130ce
 8111e7c:	0810f721 	.word	0x0810f721
 8111e80:	08111be1 	.word	0x08111be1

08111e84 <__sfputc_r>:
 8111e84:	6893      	ldr	r3, [r2, #8]
 8111e86:	3b01      	subs	r3, #1
 8111e88:	2b00      	cmp	r3, #0
 8111e8a:	b410      	push	{r4}
 8111e8c:	6093      	str	r3, [r2, #8]
 8111e8e:	da08      	bge.n	8111ea2 <__sfputc_r+0x1e>
 8111e90:	6994      	ldr	r4, [r2, #24]
 8111e92:	42a3      	cmp	r3, r4
 8111e94:	db01      	blt.n	8111e9a <__sfputc_r+0x16>
 8111e96:	290a      	cmp	r1, #10
 8111e98:	d103      	bne.n	8111ea2 <__sfputc_r+0x1e>
 8111e9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8111e9e:	f7fe b999 	b.w	81101d4 <__swbuf_r>
 8111ea2:	6813      	ldr	r3, [r2, #0]
 8111ea4:	1c58      	adds	r0, r3, #1
 8111ea6:	6010      	str	r0, [r2, #0]
 8111ea8:	7019      	strb	r1, [r3, #0]
 8111eaa:	4608      	mov	r0, r1
 8111eac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8111eb0:	4770      	bx	lr

08111eb2 <__sfputs_r>:
 8111eb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8111eb4:	4606      	mov	r6, r0
 8111eb6:	460f      	mov	r7, r1
 8111eb8:	4614      	mov	r4, r2
 8111eba:	18d5      	adds	r5, r2, r3
 8111ebc:	42ac      	cmp	r4, r5
 8111ebe:	d101      	bne.n	8111ec4 <__sfputs_r+0x12>
 8111ec0:	2000      	movs	r0, #0
 8111ec2:	e007      	b.n	8111ed4 <__sfputs_r+0x22>
 8111ec4:	463a      	mov	r2, r7
 8111ec6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8111eca:	4630      	mov	r0, r6
 8111ecc:	f7ff ffda 	bl	8111e84 <__sfputc_r>
 8111ed0:	1c43      	adds	r3, r0, #1
 8111ed2:	d1f3      	bne.n	8111ebc <__sfputs_r+0xa>
 8111ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08111ed8 <_vfiprintf_r>:
 8111ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8111edc:	460c      	mov	r4, r1
 8111ede:	b09d      	sub	sp, #116	; 0x74
 8111ee0:	4617      	mov	r7, r2
 8111ee2:	461d      	mov	r5, r3
 8111ee4:	4606      	mov	r6, r0
 8111ee6:	b118      	cbz	r0, 8111ef0 <_vfiprintf_r+0x18>
 8111ee8:	6983      	ldr	r3, [r0, #24]
 8111eea:	b90b      	cbnz	r3, 8111ef0 <_vfiprintf_r+0x18>
 8111eec:	f7ff f9cc 	bl	8111288 <__sinit>
 8111ef0:	4b7c      	ldr	r3, [pc, #496]	; (81120e4 <_vfiprintf_r+0x20c>)
 8111ef2:	429c      	cmp	r4, r3
 8111ef4:	d158      	bne.n	8111fa8 <_vfiprintf_r+0xd0>
 8111ef6:	6874      	ldr	r4, [r6, #4]
 8111ef8:	89a3      	ldrh	r3, [r4, #12]
 8111efa:	0718      	lsls	r0, r3, #28
 8111efc:	d55e      	bpl.n	8111fbc <_vfiprintf_r+0xe4>
 8111efe:	6923      	ldr	r3, [r4, #16]
 8111f00:	2b00      	cmp	r3, #0
 8111f02:	d05b      	beq.n	8111fbc <_vfiprintf_r+0xe4>
 8111f04:	2300      	movs	r3, #0
 8111f06:	9309      	str	r3, [sp, #36]	; 0x24
 8111f08:	2320      	movs	r3, #32
 8111f0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8111f0e:	2330      	movs	r3, #48	; 0x30
 8111f10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8111f14:	9503      	str	r5, [sp, #12]
 8111f16:	f04f 0b01 	mov.w	fp, #1
 8111f1a:	46b8      	mov	r8, r7
 8111f1c:	4645      	mov	r5, r8
 8111f1e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8111f22:	b10b      	cbz	r3, 8111f28 <_vfiprintf_r+0x50>
 8111f24:	2b25      	cmp	r3, #37	; 0x25
 8111f26:	d154      	bne.n	8111fd2 <_vfiprintf_r+0xfa>
 8111f28:	ebb8 0a07 	subs.w	sl, r8, r7
 8111f2c:	d00b      	beq.n	8111f46 <_vfiprintf_r+0x6e>
 8111f2e:	4653      	mov	r3, sl
 8111f30:	463a      	mov	r2, r7
 8111f32:	4621      	mov	r1, r4
 8111f34:	4630      	mov	r0, r6
 8111f36:	f7ff ffbc 	bl	8111eb2 <__sfputs_r>
 8111f3a:	3001      	adds	r0, #1
 8111f3c:	f000 80c2 	beq.w	81120c4 <_vfiprintf_r+0x1ec>
 8111f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8111f42:	4453      	add	r3, sl
 8111f44:	9309      	str	r3, [sp, #36]	; 0x24
 8111f46:	f898 3000 	ldrb.w	r3, [r8]
 8111f4a:	2b00      	cmp	r3, #0
 8111f4c:	f000 80ba 	beq.w	81120c4 <_vfiprintf_r+0x1ec>
 8111f50:	2300      	movs	r3, #0
 8111f52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8111f56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8111f5a:	9304      	str	r3, [sp, #16]
 8111f5c:	9307      	str	r3, [sp, #28]
 8111f5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8111f62:	931a      	str	r3, [sp, #104]	; 0x68
 8111f64:	46a8      	mov	r8, r5
 8111f66:	2205      	movs	r2, #5
 8111f68:	f818 1b01 	ldrb.w	r1, [r8], #1
 8111f6c:	485e      	ldr	r0, [pc, #376]	; (81120e8 <_vfiprintf_r+0x210>)
 8111f6e:	f7ee f9cf 	bl	8100310 <memchr>
 8111f72:	9b04      	ldr	r3, [sp, #16]
 8111f74:	bb78      	cbnz	r0, 8111fd6 <_vfiprintf_r+0xfe>
 8111f76:	06d9      	lsls	r1, r3, #27
 8111f78:	bf44      	itt	mi
 8111f7a:	2220      	movmi	r2, #32
 8111f7c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8111f80:	071a      	lsls	r2, r3, #28
 8111f82:	bf44      	itt	mi
 8111f84:	222b      	movmi	r2, #43	; 0x2b
 8111f86:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8111f8a:	782a      	ldrb	r2, [r5, #0]
 8111f8c:	2a2a      	cmp	r2, #42	; 0x2a
 8111f8e:	d02a      	beq.n	8111fe6 <_vfiprintf_r+0x10e>
 8111f90:	9a07      	ldr	r2, [sp, #28]
 8111f92:	46a8      	mov	r8, r5
 8111f94:	2000      	movs	r0, #0
 8111f96:	250a      	movs	r5, #10
 8111f98:	4641      	mov	r1, r8
 8111f9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8111f9e:	3b30      	subs	r3, #48	; 0x30
 8111fa0:	2b09      	cmp	r3, #9
 8111fa2:	d969      	bls.n	8112078 <_vfiprintf_r+0x1a0>
 8111fa4:	b360      	cbz	r0, 8112000 <_vfiprintf_r+0x128>
 8111fa6:	e024      	b.n	8111ff2 <_vfiprintf_r+0x11a>
 8111fa8:	4b50      	ldr	r3, [pc, #320]	; (81120ec <_vfiprintf_r+0x214>)
 8111faa:	429c      	cmp	r4, r3
 8111fac:	d101      	bne.n	8111fb2 <_vfiprintf_r+0xda>
 8111fae:	68b4      	ldr	r4, [r6, #8]
 8111fb0:	e7a2      	b.n	8111ef8 <_vfiprintf_r+0x20>
 8111fb2:	4b4f      	ldr	r3, [pc, #316]	; (81120f0 <_vfiprintf_r+0x218>)
 8111fb4:	429c      	cmp	r4, r3
 8111fb6:	bf08      	it	eq
 8111fb8:	68f4      	ldreq	r4, [r6, #12]
 8111fba:	e79d      	b.n	8111ef8 <_vfiprintf_r+0x20>
 8111fbc:	4621      	mov	r1, r4
 8111fbe:	4630      	mov	r0, r6
 8111fc0:	f7fe f95a 	bl	8110278 <__swsetup_r>
 8111fc4:	2800      	cmp	r0, #0
 8111fc6:	d09d      	beq.n	8111f04 <_vfiprintf_r+0x2c>
 8111fc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8111fcc:	b01d      	add	sp, #116	; 0x74
 8111fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8111fd2:	46a8      	mov	r8, r5
 8111fd4:	e7a2      	b.n	8111f1c <_vfiprintf_r+0x44>
 8111fd6:	4a44      	ldr	r2, [pc, #272]	; (81120e8 <_vfiprintf_r+0x210>)
 8111fd8:	1a80      	subs	r0, r0, r2
 8111fda:	fa0b f000 	lsl.w	r0, fp, r0
 8111fde:	4318      	orrs	r0, r3
 8111fe0:	9004      	str	r0, [sp, #16]
 8111fe2:	4645      	mov	r5, r8
 8111fe4:	e7be      	b.n	8111f64 <_vfiprintf_r+0x8c>
 8111fe6:	9a03      	ldr	r2, [sp, #12]
 8111fe8:	1d11      	adds	r1, r2, #4
 8111fea:	6812      	ldr	r2, [r2, #0]
 8111fec:	9103      	str	r1, [sp, #12]
 8111fee:	2a00      	cmp	r2, #0
 8111ff0:	db01      	blt.n	8111ff6 <_vfiprintf_r+0x11e>
 8111ff2:	9207      	str	r2, [sp, #28]
 8111ff4:	e004      	b.n	8112000 <_vfiprintf_r+0x128>
 8111ff6:	4252      	negs	r2, r2
 8111ff8:	f043 0302 	orr.w	r3, r3, #2
 8111ffc:	9207      	str	r2, [sp, #28]
 8111ffe:	9304      	str	r3, [sp, #16]
 8112000:	f898 3000 	ldrb.w	r3, [r8]
 8112004:	2b2e      	cmp	r3, #46	; 0x2e
 8112006:	d10e      	bne.n	8112026 <_vfiprintf_r+0x14e>
 8112008:	f898 3001 	ldrb.w	r3, [r8, #1]
 811200c:	2b2a      	cmp	r3, #42	; 0x2a
 811200e:	d138      	bne.n	8112082 <_vfiprintf_r+0x1aa>
 8112010:	9b03      	ldr	r3, [sp, #12]
 8112012:	1d1a      	adds	r2, r3, #4
 8112014:	681b      	ldr	r3, [r3, #0]
 8112016:	9203      	str	r2, [sp, #12]
 8112018:	2b00      	cmp	r3, #0
 811201a:	bfb8      	it	lt
 811201c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8112020:	f108 0802 	add.w	r8, r8, #2
 8112024:	9305      	str	r3, [sp, #20]
 8112026:	4d33      	ldr	r5, [pc, #204]	; (81120f4 <_vfiprintf_r+0x21c>)
 8112028:	f898 1000 	ldrb.w	r1, [r8]
 811202c:	2203      	movs	r2, #3
 811202e:	4628      	mov	r0, r5
 8112030:	f7ee f96e 	bl	8100310 <memchr>
 8112034:	b140      	cbz	r0, 8112048 <_vfiprintf_r+0x170>
 8112036:	2340      	movs	r3, #64	; 0x40
 8112038:	1b40      	subs	r0, r0, r5
 811203a:	fa03 f000 	lsl.w	r0, r3, r0
 811203e:	9b04      	ldr	r3, [sp, #16]
 8112040:	4303      	orrs	r3, r0
 8112042:	f108 0801 	add.w	r8, r8, #1
 8112046:	9304      	str	r3, [sp, #16]
 8112048:	f898 1000 	ldrb.w	r1, [r8]
 811204c:	482a      	ldr	r0, [pc, #168]	; (81120f8 <_vfiprintf_r+0x220>)
 811204e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8112052:	2206      	movs	r2, #6
 8112054:	f108 0701 	add.w	r7, r8, #1
 8112058:	f7ee f95a 	bl	8100310 <memchr>
 811205c:	2800      	cmp	r0, #0
 811205e:	d037      	beq.n	81120d0 <_vfiprintf_r+0x1f8>
 8112060:	4b26      	ldr	r3, [pc, #152]	; (81120fc <_vfiprintf_r+0x224>)
 8112062:	bb1b      	cbnz	r3, 81120ac <_vfiprintf_r+0x1d4>
 8112064:	9b03      	ldr	r3, [sp, #12]
 8112066:	3307      	adds	r3, #7
 8112068:	f023 0307 	bic.w	r3, r3, #7
 811206c:	3308      	adds	r3, #8
 811206e:	9303      	str	r3, [sp, #12]
 8112070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8112072:	444b      	add	r3, r9
 8112074:	9309      	str	r3, [sp, #36]	; 0x24
 8112076:	e750      	b.n	8111f1a <_vfiprintf_r+0x42>
 8112078:	fb05 3202 	mla	r2, r5, r2, r3
 811207c:	2001      	movs	r0, #1
 811207e:	4688      	mov	r8, r1
 8112080:	e78a      	b.n	8111f98 <_vfiprintf_r+0xc0>
 8112082:	2300      	movs	r3, #0
 8112084:	f108 0801 	add.w	r8, r8, #1
 8112088:	9305      	str	r3, [sp, #20]
 811208a:	4619      	mov	r1, r3
 811208c:	250a      	movs	r5, #10
 811208e:	4640      	mov	r0, r8
 8112090:	f810 2b01 	ldrb.w	r2, [r0], #1
 8112094:	3a30      	subs	r2, #48	; 0x30
 8112096:	2a09      	cmp	r2, #9
 8112098:	d903      	bls.n	81120a2 <_vfiprintf_r+0x1ca>
 811209a:	2b00      	cmp	r3, #0
 811209c:	d0c3      	beq.n	8112026 <_vfiprintf_r+0x14e>
 811209e:	9105      	str	r1, [sp, #20]
 81120a0:	e7c1      	b.n	8112026 <_vfiprintf_r+0x14e>
 81120a2:	fb05 2101 	mla	r1, r5, r1, r2
 81120a6:	2301      	movs	r3, #1
 81120a8:	4680      	mov	r8, r0
 81120aa:	e7f0      	b.n	811208e <_vfiprintf_r+0x1b6>
 81120ac:	ab03      	add	r3, sp, #12
 81120ae:	9300      	str	r3, [sp, #0]
 81120b0:	4622      	mov	r2, r4
 81120b2:	4b13      	ldr	r3, [pc, #76]	; (8112100 <_vfiprintf_r+0x228>)
 81120b4:	a904      	add	r1, sp, #16
 81120b6:	4630      	mov	r0, r6
 81120b8:	f7fd fb32 	bl	810f720 <_printf_float>
 81120bc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 81120c0:	4681      	mov	r9, r0
 81120c2:	d1d5      	bne.n	8112070 <_vfiprintf_r+0x198>
 81120c4:	89a3      	ldrh	r3, [r4, #12]
 81120c6:	065b      	lsls	r3, r3, #25
 81120c8:	f53f af7e 	bmi.w	8111fc8 <_vfiprintf_r+0xf0>
 81120cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 81120ce:	e77d      	b.n	8111fcc <_vfiprintf_r+0xf4>
 81120d0:	ab03      	add	r3, sp, #12
 81120d2:	9300      	str	r3, [sp, #0]
 81120d4:	4622      	mov	r2, r4
 81120d6:	4b0a      	ldr	r3, [pc, #40]	; (8112100 <_vfiprintf_r+0x228>)
 81120d8:	a904      	add	r1, sp, #16
 81120da:	4630      	mov	r0, r6
 81120dc:	f7fd fdd6 	bl	810fc8c <_printf_i>
 81120e0:	e7ec      	b.n	81120bc <_vfiprintf_r+0x1e4>
 81120e2:	bf00      	nop
 81120e4:	08112f78 	.word	0x08112f78
 81120e8:	081130c4 	.word	0x081130c4
 81120ec:	08112f98 	.word	0x08112f98
 81120f0:	08112f58 	.word	0x08112f58
 81120f4:	081130ca 	.word	0x081130ca
 81120f8:	081130ce 	.word	0x081130ce
 81120fc:	0810f721 	.word	0x0810f721
 8112100:	08111eb3 	.word	0x08111eb3

08112104 <_sbrk_r>:
 8112104:	b538      	push	{r3, r4, r5, lr}
 8112106:	4c06      	ldr	r4, [pc, #24]	; (8112120 <_sbrk_r+0x1c>)
 8112108:	2300      	movs	r3, #0
 811210a:	4605      	mov	r5, r0
 811210c:	4608      	mov	r0, r1
 811210e:	6023      	str	r3, [r4, #0]
 8112110:	f7ef fef4 	bl	8101efc <_sbrk>
 8112114:	1c43      	adds	r3, r0, #1
 8112116:	d102      	bne.n	811211e <_sbrk_r+0x1a>
 8112118:	6823      	ldr	r3, [r4, #0]
 811211a:	b103      	cbz	r3, 811211e <_sbrk_r+0x1a>
 811211c:	602b      	str	r3, [r5, #0]
 811211e:	bd38      	pop	{r3, r4, r5, pc}
 8112120:	1000a1f4 	.word	0x1000a1f4

08112124 <__sread>:
 8112124:	b510      	push	{r4, lr}
 8112126:	460c      	mov	r4, r1
 8112128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811212c:	f000 f8e2 	bl	81122f4 <_read_r>
 8112130:	2800      	cmp	r0, #0
 8112132:	bfab      	itete	ge
 8112134:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8112136:	89a3      	ldrhlt	r3, [r4, #12]
 8112138:	181b      	addge	r3, r3, r0
 811213a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 811213e:	bfac      	ite	ge
 8112140:	6563      	strge	r3, [r4, #84]	; 0x54
 8112142:	81a3      	strhlt	r3, [r4, #12]
 8112144:	bd10      	pop	{r4, pc}

08112146 <__swrite>:
 8112146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 811214a:	461f      	mov	r7, r3
 811214c:	898b      	ldrh	r3, [r1, #12]
 811214e:	05db      	lsls	r3, r3, #23
 8112150:	4605      	mov	r5, r0
 8112152:	460c      	mov	r4, r1
 8112154:	4616      	mov	r6, r2
 8112156:	d505      	bpl.n	8112164 <__swrite+0x1e>
 8112158:	2302      	movs	r3, #2
 811215a:	2200      	movs	r2, #0
 811215c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8112160:	f000 f874 	bl	811224c <_lseek_r>
 8112164:	89a3      	ldrh	r3, [r4, #12]
 8112166:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 811216a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 811216e:	81a3      	strh	r3, [r4, #12]
 8112170:	4632      	mov	r2, r6
 8112172:	463b      	mov	r3, r7
 8112174:	4628      	mov	r0, r5
 8112176:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 811217a:	f000 b823 	b.w	81121c4 <_write_r>

0811217e <__sseek>:
 811217e:	b510      	push	{r4, lr}
 8112180:	460c      	mov	r4, r1
 8112182:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8112186:	f000 f861 	bl	811224c <_lseek_r>
 811218a:	1c43      	adds	r3, r0, #1
 811218c:	89a3      	ldrh	r3, [r4, #12]
 811218e:	bf15      	itete	ne
 8112190:	6560      	strne	r0, [r4, #84]	; 0x54
 8112192:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8112196:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 811219a:	81a3      	strheq	r3, [r4, #12]
 811219c:	bf18      	it	ne
 811219e:	81a3      	strhne	r3, [r4, #12]
 81121a0:	bd10      	pop	{r4, pc}

081121a2 <__sclose>:
 81121a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81121a6:	f000 b81f 	b.w	81121e8 <_close_r>

081121aa <__ascii_wctomb>:
 81121aa:	b149      	cbz	r1, 81121c0 <__ascii_wctomb+0x16>
 81121ac:	2aff      	cmp	r2, #255	; 0xff
 81121ae:	bf85      	ittet	hi
 81121b0:	238a      	movhi	r3, #138	; 0x8a
 81121b2:	6003      	strhi	r3, [r0, #0]
 81121b4:	700a      	strbls	r2, [r1, #0]
 81121b6:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 81121ba:	bf98      	it	ls
 81121bc:	2001      	movls	r0, #1
 81121be:	4770      	bx	lr
 81121c0:	4608      	mov	r0, r1
 81121c2:	4770      	bx	lr

081121c4 <_write_r>:
 81121c4:	b538      	push	{r3, r4, r5, lr}
 81121c6:	4c07      	ldr	r4, [pc, #28]	; (81121e4 <_write_r+0x20>)
 81121c8:	4605      	mov	r5, r0
 81121ca:	4608      	mov	r0, r1
 81121cc:	4611      	mov	r1, r2
 81121ce:	2200      	movs	r2, #0
 81121d0:	6022      	str	r2, [r4, #0]
 81121d2:	461a      	mov	r2, r3
 81121d4:	f7ef fe41 	bl	8101e5a <_write>
 81121d8:	1c43      	adds	r3, r0, #1
 81121da:	d102      	bne.n	81121e2 <_write_r+0x1e>
 81121dc:	6823      	ldr	r3, [r4, #0]
 81121de:	b103      	cbz	r3, 81121e2 <_write_r+0x1e>
 81121e0:	602b      	str	r3, [r5, #0]
 81121e2:	bd38      	pop	{r3, r4, r5, pc}
 81121e4:	1000a1f4 	.word	0x1000a1f4

081121e8 <_close_r>:
 81121e8:	b538      	push	{r3, r4, r5, lr}
 81121ea:	4c06      	ldr	r4, [pc, #24]	; (8112204 <_close_r+0x1c>)
 81121ec:	2300      	movs	r3, #0
 81121ee:	4605      	mov	r5, r0
 81121f0:	4608      	mov	r0, r1
 81121f2:	6023      	str	r3, [r4, #0]
 81121f4:	f7ef fe4d 	bl	8101e92 <_close>
 81121f8:	1c43      	adds	r3, r0, #1
 81121fa:	d102      	bne.n	8112202 <_close_r+0x1a>
 81121fc:	6823      	ldr	r3, [r4, #0]
 81121fe:	b103      	cbz	r3, 8112202 <_close_r+0x1a>
 8112200:	602b      	str	r3, [r5, #0]
 8112202:	bd38      	pop	{r3, r4, r5, pc}
 8112204:	1000a1f4 	.word	0x1000a1f4

08112208 <_fstat_r>:
 8112208:	b538      	push	{r3, r4, r5, lr}
 811220a:	4c07      	ldr	r4, [pc, #28]	; (8112228 <_fstat_r+0x20>)
 811220c:	2300      	movs	r3, #0
 811220e:	4605      	mov	r5, r0
 8112210:	4608      	mov	r0, r1
 8112212:	4611      	mov	r1, r2
 8112214:	6023      	str	r3, [r4, #0]
 8112216:	f7ef fe48 	bl	8101eaa <_fstat>
 811221a:	1c43      	adds	r3, r0, #1
 811221c:	d102      	bne.n	8112224 <_fstat_r+0x1c>
 811221e:	6823      	ldr	r3, [r4, #0]
 8112220:	b103      	cbz	r3, 8112224 <_fstat_r+0x1c>
 8112222:	602b      	str	r3, [r5, #0]
 8112224:	bd38      	pop	{r3, r4, r5, pc}
 8112226:	bf00      	nop
 8112228:	1000a1f4 	.word	0x1000a1f4

0811222c <_isatty_r>:
 811222c:	b538      	push	{r3, r4, r5, lr}
 811222e:	4c06      	ldr	r4, [pc, #24]	; (8112248 <_isatty_r+0x1c>)
 8112230:	2300      	movs	r3, #0
 8112232:	4605      	mov	r5, r0
 8112234:	4608      	mov	r0, r1
 8112236:	6023      	str	r3, [r4, #0]
 8112238:	f7ef fe47 	bl	8101eca <_isatty>
 811223c:	1c43      	adds	r3, r0, #1
 811223e:	d102      	bne.n	8112246 <_isatty_r+0x1a>
 8112240:	6823      	ldr	r3, [r4, #0]
 8112242:	b103      	cbz	r3, 8112246 <_isatty_r+0x1a>
 8112244:	602b      	str	r3, [r5, #0]
 8112246:	bd38      	pop	{r3, r4, r5, pc}
 8112248:	1000a1f4 	.word	0x1000a1f4

0811224c <_lseek_r>:
 811224c:	b538      	push	{r3, r4, r5, lr}
 811224e:	4c07      	ldr	r4, [pc, #28]	; (811226c <_lseek_r+0x20>)
 8112250:	4605      	mov	r5, r0
 8112252:	4608      	mov	r0, r1
 8112254:	4611      	mov	r1, r2
 8112256:	2200      	movs	r2, #0
 8112258:	6022      	str	r2, [r4, #0]
 811225a:	461a      	mov	r2, r3
 811225c:	f7ef fe40 	bl	8101ee0 <_lseek>
 8112260:	1c43      	adds	r3, r0, #1
 8112262:	d102      	bne.n	811226a <_lseek_r+0x1e>
 8112264:	6823      	ldr	r3, [r4, #0]
 8112266:	b103      	cbz	r3, 811226a <_lseek_r+0x1e>
 8112268:	602b      	str	r3, [r5, #0]
 811226a:	bd38      	pop	{r3, r4, r5, pc}
 811226c:	1000a1f4 	.word	0x1000a1f4

08112270 <memmove>:
 8112270:	4288      	cmp	r0, r1
 8112272:	b510      	push	{r4, lr}
 8112274:	eb01 0302 	add.w	r3, r1, r2
 8112278:	d807      	bhi.n	811228a <memmove+0x1a>
 811227a:	1e42      	subs	r2, r0, #1
 811227c:	4299      	cmp	r1, r3
 811227e:	d00a      	beq.n	8112296 <memmove+0x26>
 8112280:	f811 4b01 	ldrb.w	r4, [r1], #1
 8112284:	f802 4f01 	strb.w	r4, [r2, #1]!
 8112288:	e7f8      	b.n	811227c <memmove+0xc>
 811228a:	4283      	cmp	r3, r0
 811228c:	d9f5      	bls.n	811227a <memmove+0xa>
 811228e:	1881      	adds	r1, r0, r2
 8112290:	1ad2      	subs	r2, r2, r3
 8112292:	42d3      	cmn	r3, r2
 8112294:	d100      	bne.n	8112298 <memmove+0x28>
 8112296:	bd10      	pop	{r4, pc}
 8112298:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 811229c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 81122a0:	e7f7      	b.n	8112292 <memmove+0x22>

081122a2 <__malloc_lock>:
 81122a2:	4770      	bx	lr

081122a4 <__malloc_unlock>:
 81122a4:	4770      	bx	lr

081122a6 <_realloc_r>:
 81122a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81122a8:	4607      	mov	r7, r0
 81122aa:	4614      	mov	r4, r2
 81122ac:	460e      	mov	r6, r1
 81122ae:	b921      	cbnz	r1, 81122ba <_realloc_r+0x14>
 81122b0:	4611      	mov	r1, r2
 81122b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 81122b6:	f7ff bc39 	b.w	8111b2c <_malloc_r>
 81122ba:	b922      	cbnz	r2, 81122c6 <_realloc_r+0x20>
 81122bc:	f7ff fbe8 	bl	8111a90 <_free_r>
 81122c0:	4625      	mov	r5, r4
 81122c2:	4628      	mov	r0, r5
 81122c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81122c6:	f000 f827 	bl	8112318 <_malloc_usable_size_r>
 81122ca:	42a0      	cmp	r0, r4
 81122cc:	d20f      	bcs.n	81122ee <_realloc_r+0x48>
 81122ce:	4621      	mov	r1, r4
 81122d0:	4638      	mov	r0, r7
 81122d2:	f7ff fc2b 	bl	8111b2c <_malloc_r>
 81122d6:	4605      	mov	r5, r0
 81122d8:	2800      	cmp	r0, #0
 81122da:	d0f2      	beq.n	81122c2 <_realloc_r+0x1c>
 81122dc:	4631      	mov	r1, r6
 81122de:	4622      	mov	r2, r4
 81122e0:	f7fd f976 	bl	810f5d0 <memcpy>
 81122e4:	4631      	mov	r1, r6
 81122e6:	4638      	mov	r0, r7
 81122e8:	f7ff fbd2 	bl	8111a90 <_free_r>
 81122ec:	e7e9      	b.n	81122c2 <_realloc_r+0x1c>
 81122ee:	4635      	mov	r5, r6
 81122f0:	e7e7      	b.n	81122c2 <_realloc_r+0x1c>
	...

081122f4 <_read_r>:
 81122f4:	b538      	push	{r3, r4, r5, lr}
 81122f6:	4c07      	ldr	r4, [pc, #28]	; (8112314 <_read_r+0x20>)
 81122f8:	4605      	mov	r5, r0
 81122fa:	4608      	mov	r0, r1
 81122fc:	4611      	mov	r1, r2
 81122fe:	2200      	movs	r2, #0
 8112300:	6022      	str	r2, [r4, #0]
 8112302:	461a      	mov	r2, r3
 8112304:	f7ef fd8c 	bl	8101e20 <_read>
 8112308:	1c43      	adds	r3, r0, #1
 811230a:	d102      	bne.n	8112312 <_read_r+0x1e>
 811230c:	6823      	ldr	r3, [r4, #0]
 811230e:	b103      	cbz	r3, 8112312 <_read_r+0x1e>
 8112310:	602b      	str	r3, [r5, #0]
 8112312:	bd38      	pop	{r3, r4, r5, pc}
 8112314:	1000a1f4 	.word	0x1000a1f4

08112318 <_malloc_usable_size_r>:
 8112318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 811231c:	1f18      	subs	r0, r3, #4
 811231e:	2b00      	cmp	r3, #0
 8112320:	bfbc      	itt	lt
 8112322:	580b      	ldrlt	r3, [r1, r0]
 8112324:	18c0      	addlt	r0, r0, r3
 8112326:	4770      	bx	lr

08112328 <_init>:
 8112328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811232a:	bf00      	nop
 811232c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 811232e:	bc08      	pop	{r3}
 8112330:	469e      	mov	lr, r3
 8112332:	4770      	bx	lr

08112334 <_fini>:
 8112334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8112336:	bf00      	nop
 8112338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 811233a:	bc08      	pop	{r3}
 811233c:	469e      	mov	lr, r3
 811233e:	4770      	bx	lr
